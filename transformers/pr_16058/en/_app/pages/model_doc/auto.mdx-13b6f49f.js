import{S as rMt,i as tMt,s as aMt,e as a,k as l,w as f,t as o,M as nMt,c as n,d as t,m as i,a as s,x as m,h as r,b as c,F as e,g as b,y as g,q as h,o as p,B as _,v as sMt}from"../../chunks/vendor-6b77c823.js";import{T as GRr}from"../../chunks/Tip-39098574.js";import{D as M}from"../../chunks/Docstring-abef54e3.js";import{C as w}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function lMt(zf){let K,io,de,Ee,lo,fe,Ce,zo,Xi,Wf,ha,Vi,zi,b4,Qf,Be,co,Wi,Wn,v4,Qn,Hn,T4,Qi,Un,F4,Hi,Hf,Va;return{c(){K=a("p"),io=o("If your "),de=a("code"),Ee=o("NewModelConfig"),lo=o(" is a subclass of "),fe=a("code"),Ce=o("PretrainedConfig"),zo=o(`, make sure its
`),Xi=a("code"),Wf=o("model_type"),ha=o(" attribute is set to the same key you use when registering the config (here "),Vi=a("code"),zi=o('"new-model"'),b4=o(")."),Qf=l(),Be=a("p"),co=o("Likewise, if your "),Wi=a("code"),Wn=o("NewModel"),v4=o(" is a subclass of "),Qn=a("a"),Hn=o("PreTrainedModel"),T4=o(`, make sure its
`),Qi=a("code"),Un=o("config_class"),F4=o(` attribute is set to the same class you use when registering the model (here
`),Hi=a("code"),Hf=o("NewModelConfig"),Va=o(")."),this.h()},l(fo){K=n(fo,"P",{});var pe=s(K);io=r(pe,"If your "),de=n(pe,"CODE",{});var b9=s(de);Ee=r(b9,"NewModelConfig"),b9.forEach(t),lo=r(pe," is a subclass of "),fe=n(pe,"CODE",{});var Ui=s(fe);Ce=r(Ui,"PretrainedConfig"),Ui.forEach(t),zo=r(pe,`, make sure its
`),Xi=n(pe,"CODE",{});var v9=s(Xi);Wf=r(v9,"model_type"),v9.forEach(t),ha=r(pe," attribute is set to the same key you use when registering the config (here "),Vi=n(pe,"CODE",{});var T9=s(Vi);zi=r(T9,'"new-model"'),T9.forEach(t),b4=r(pe,")."),pe.forEach(t),Qf=i(fo),Be=n(fo,"P",{});var Wo=s(Be);co=r(Wo,"Likewise, if your "),Wi=n(Wo,"CODE",{});var za=s(Wi);Wn=r(za,"NewModel"),za.forEach(t),v4=r(Wo," is a subclass of "),Qn=n(Wo,"A",{href:!0});var F9=s(Qn);Hn=r(F9,"PreTrainedModel"),F9.forEach(t),T4=r(Wo,`, make sure its
`),Qi=n(Wo,"CODE",{});var Uf=s(Qi);Un=r(Uf,"config_class"),Uf.forEach(t),F4=r(Wo,` attribute is set to the same class you use when registering the model (here
`),Hi=n(Wo,"CODE",{});var C9=s(Hi);Hf=r(C9,"NewModelConfig"),C9.forEach(t),Va=r(Wo,")."),Wo.forEach(t),this.h()},h(){c(Qn,"href","/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel")},m(fo,pe){b(fo,K,pe),e(K,io),e(K,de),e(de,Ee),e(K,lo),e(K,fe),e(fe,Ce),e(K,zo),e(K,Xi),e(Xi,Wf),e(K,ha),e(K,Vi),e(Vi,zi),e(K,b4),b(fo,Qf,pe),b(fo,Be,pe),e(Be,co),e(Be,Wi),e(Wi,Wn),e(Be,v4),e(Be,Qn),e(Qn,Hn),e(Be,T4),e(Be,Qi),e(Qi,Un),e(Be,F4),e(Be,Hi),e(Hi,Hf),e(Be,Va)},d(fo){fo&&t(K),fo&&t(Qf),fo&&t(Be)}}}function iMt(zf){let K,io,de,Ee,lo;return{c(){K=a("p"),io=o("Passing "),de=a("code"),Ee=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(fe){K=n(fe,"P",{});var Ce=s(K);io=r(Ce,"Passing "),de=n(Ce,"CODE",{});var zo=s(de);Ee=r(zo,"use_auth_token=True"),zo.forEach(t),lo=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(fe,Ce){b(fe,K,Ce),e(K,io),e(K,de),e(de,Ee),e(K,lo)},d(fe){fe&&t(K)}}}function dMt(zf){let K,io,de,Ee,lo;return{c(){K=a("p"),io=o("Passing "),de=a("code"),Ee=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(fe){K=n(fe,"P",{});var Ce=s(K);io=r(Ce,"Passing "),de=n(Ce,"CODE",{});var zo=s(de);Ee=r(zo,"use_auth_token=True"),zo.forEach(t),lo=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(fe,Ce){b(fe,K,Ce),e(K,io),e(K,de),e(de,Ee),e(K,lo)},d(fe){fe&&t(K)}}}function cMt(zf){let K,io,de,Ee,lo,fe,Ce,zo,Xi,Wf,ha,Vi,zi,b4,Qf,Be,co,Wi,Wn,v4,Qn,Hn,T4,Qi,Un,F4,Hi,Hf,Va,fo,pe,b9,Ui,v9,T9,Wo,za,F9,Uf,C9,aIe,qke,Ji,Jf,lH,C4,nIe,iH,sIe,Gke,Jn,lIe,dH,iIe,dIe,cH,cIe,fIe,Oke,M4,Xke,M9,mIe,Vke,Yf,zke,Yi,Kf,fH,E4,gIe,mH,hIe,Wke,Qo,y4,pIe,w4,_Ie,E9,uIe,bIe,vIe,A4,TIe,gH,FIe,CIe,MIe,mo,L4,EIe,hH,yIe,wIe,Ki,AIe,pH,LIe,BIe,_H,xIe,kIe,RIe,v,Zf,uH,SIe,PIe,y9,$Ie,IIe,jIe,em,bH,DIe,NIe,w9,qIe,GIe,OIe,om,vH,XIe,VIe,A9,zIe,WIe,QIe,rm,TH,HIe,UIe,L9,JIe,YIe,KIe,tm,FH,ZIe,eje,B9,oje,rje,tje,am,CH,aje,nje,x9,sje,lje,ije,nm,MH,dje,cje,k9,fje,mje,gje,sm,EH,hje,pje,R9,_je,uje,bje,lm,yH,vje,Tje,S9,Fje,Cje,Mje,im,wH,Eje,yje,P9,wje,Aje,Lje,dm,AH,Bje,xje,$9,kje,Rje,Sje,cm,LH,Pje,$je,I9,Ije,jje,Dje,fm,BH,Nje,qje,j9,Gje,Oje,Xje,mm,xH,Vje,zje,D9,Wje,Qje,Hje,gm,kH,Uje,Jje,N9,Yje,Kje,Zje,hm,RH,eDe,oDe,q9,rDe,tDe,aDe,pm,SH,nDe,sDe,G9,lDe,iDe,dDe,_m,PH,cDe,fDe,O9,mDe,gDe,hDe,um,$H,pDe,_De,X9,uDe,bDe,vDe,bm,IH,TDe,FDe,V9,CDe,MDe,EDe,vm,jH,yDe,wDe,z9,ADe,LDe,BDe,Tm,DH,xDe,kDe,W9,RDe,SDe,PDe,Fm,NH,$De,IDe,Q9,jDe,DDe,NDe,Cm,qH,qDe,GDe,H9,ODe,XDe,VDe,Mm,GH,zDe,WDe,U9,QDe,HDe,UDe,Em,OH,JDe,YDe,J9,KDe,ZDe,eNe,ym,XH,oNe,rNe,Y9,tNe,aNe,nNe,wm,VH,sNe,lNe,K9,iNe,dNe,cNe,Am,zH,fNe,mNe,Z9,gNe,hNe,pNe,Lm,WH,_Ne,uNe,eB,bNe,vNe,TNe,Bm,QH,FNe,CNe,oB,MNe,ENe,yNe,xm,HH,wNe,ANe,rB,LNe,BNe,xNe,km,UH,kNe,RNe,tB,SNe,PNe,$Ne,Rm,JH,INe,jNe,aB,DNe,NNe,qNe,Sm,YH,GNe,ONe,nB,XNe,VNe,zNe,Pm,KH,WNe,QNe,sB,HNe,UNe,JNe,$m,ZH,YNe,KNe,lB,ZNe,eqe,oqe,Im,eU,rqe,tqe,iB,aqe,nqe,sqe,jm,oU,lqe,iqe,dB,dqe,cqe,fqe,Dm,rU,mqe,gqe,cB,hqe,pqe,_qe,Nm,tU,uqe,bqe,fB,vqe,Tqe,Fqe,qm,aU,Cqe,Mqe,mB,Eqe,yqe,wqe,Gm,nU,Aqe,Lqe,gB,Bqe,xqe,kqe,Om,sU,Rqe,Sqe,hB,Pqe,$qe,Iqe,Xm,lU,jqe,Dqe,pB,Nqe,qqe,Gqe,Vm,iU,Oqe,Xqe,_B,Vqe,zqe,Wqe,zm,dU,Qqe,Hqe,uB,Uqe,Jqe,Yqe,Wm,cU,Kqe,Zqe,bB,eGe,oGe,rGe,Qm,fU,tGe,aGe,vB,nGe,sGe,lGe,Hm,mU,iGe,dGe,TB,cGe,fGe,mGe,Um,gU,gGe,hGe,FB,pGe,_Ge,uGe,Jm,hU,bGe,vGe,CB,TGe,FGe,CGe,Ym,pU,MGe,EGe,MB,yGe,wGe,AGe,Km,_U,LGe,BGe,EB,xGe,kGe,RGe,Zm,uU,SGe,PGe,yB,$Ge,IGe,jGe,eg,bU,DGe,NGe,wB,qGe,GGe,OGe,og,vU,XGe,VGe,AB,zGe,WGe,QGe,rg,TU,HGe,UGe,LB,JGe,YGe,KGe,tg,FU,ZGe,eOe,BB,oOe,rOe,tOe,ag,CU,aOe,nOe,xB,sOe,lOe,iOe,ng,MU,dOe,cOe,kB,fOe,mOe,gOe,sg,EU,hOe,pOe,RB,_Oe,uOe,bOe,lg,yU,vOe,TOe,SB,FOe,COe,MOe,ig,wU,EOe,yOe,PB,wOe,AOe,LOe,dg,AU,BOe,xOe,$B,kOe,ROe,SOe,cg,LU,POe,$Oe,IB,IOe,jOe,DOe,fg,BU,NOe,qOe,jB,GOe,OOe,XOe,mg,xU,VOe,zOe,DB,WOe,QOe,HOe,gg,kU,UOe,JOe,NB,YOe,KOe,ZOe,hg,RU,eXe,oXe,qB,rXe,tXe,aXe,pg,SU,nXe,sXe,GB,lXe,iXe,dXe,_g,PU,cXe,fXe,OB,mXe,gXe,hXe,ug,$U,pXe,_Xe,XB,uXe,bXe,vXe,bg,IU,TXe,FXe,VB,CXe,MXe,EXe,vg,jU,yXe,wXe,zB,AXe,LXe,BXe,Tg,DU,xXe,kXe,WB,RXe,SXe,PXe,Fg,NU,$Xe,IXe,QB,jXe,DXe,NXe,Cg,qU,qXe,GXe,HB,OXe,XXe,VXe,Mg,GU,zXe,WXe,UB,QXe,HXe,UXe,Eg,OU,JXe,YXe,JB,KXe,ZXe,eVe,yg,XU,oVe,rVe,YB,tVe,aVe,nVe,wg,VU,sVe,lVe,KB,iVe,dVe,cVe,Ag,zU,fVe,mVe,ZB,gVe,hVe,pVe,Lg,WU,_Ve,uVe,ex,bVe,vVe,TVe,Bg,QU,FVe,CVe,ox,MVe,EVe,yVe,xg,HU,wVe,AVe,rx,LVe,BVe,xVe,kg,UU,kVe,RVe,tx,SVe,PVe,$Ve,Rg,JU,IVe,jVe,ax,DVe,NVe,qVe,Sg,YU,GVe,OVe,nx,XVe,VVe,zVe,Pg,KU,WVe,QVe,sx,HVe,UVe,JVe,$g,ZU,YVe,KVe,lx,ZVe,eze,oze,Ig,eJ,rze,tze,ix,aze,nze,sze,jg,oJ,lze,ize,dx,dze,cze,fze,Dg,rJ,mze,gze,cx,hze,pze,_ze,Ng,tJ,uze,bze,fx,vze,Tze,Fze,qg,aJ,Cze,Mze,mx,Eze,yze,wze,Gg,nJ,Aze,Lze,gx,Bze,xze,kze,Og,sJ,Rze,Sze,hx,Pze,$ze,Ize,lJ,jze,Dze,B4,Nze,Xg,x4,qze,iJ,Gze,Qke,Zi,Vg,dJ,k4,Oze,cJ,Xze,Hke,Ho,R4,Vze,S4,zze,px,Wze,Qze,Hze,P4,Uze,fJ,Jze,Yze,Kze,go,$4,Zze,mJ,eWe,oWe,Wa,rWe,gJ,tWe,aWe,hJ,nWe,sWe,pJ,lWe,iWe,dWe,E,Yn,_J,cWe,fWe,_x,mWe,gWe,ux,hWe,pWe,_We,Kn,uJ,uWe,bWe,bx,vWe,TWe,vx,FWe,CWe,MWe,Zn,bJ,EWe,yWe,Tx,wWe,AWe,Fx,LWe,BWe,xWe,zg,vJ,kWe,RWe,Cx,SWe,PWe,$We,es,TJ,IWe,jWe,Mx,DWe,NWe,Ex,qWe,GWe,OWe,Wg,FJ,XWe,VWe,yx,zWe,WWe,QWe,Qg,CJ,HWe,UWe,wx,JWe,YWe,KWe,Hg,MJ,ZWe,eQe,Ax,oQe,rQe,tQe,os,EJ,aQe,nQe,Lx,sQe,lQe,Bx,iQe,dQe,cQe,rs,yJ,fQe,mQe,xx,gQe,hQe,kx,pQe,_Qe,uQe,ts,wJ,bQe,vQe,Rx,TQe,FQe,Sx,CQe,MQe,EQe,Ug,AJ,yQe,wQe,Px,AQe,LQe,BQe,Jg,LJ,xQe,kQe,$x,RQe,SQe,PQe,as,BJ,$Qe,IQe,Ix,jQe,DQe,jx,NQe,qQe,GQe,Yg,xJ,OQe,XQe,Dx,VQe,zQe,WQe,ns,kJ,QQe,HQe,Nx,UQe,JQe,qx,YQe,KQe,ZQe,ss,RJ,eHe,oHe,Gx,rHe,tHe,Ox,aHe,nHe,sHe,ls,SJ,lHe,iHe,Xx,dHe,cHe,PJ,fHe,mHe,gHe,Kg,$J,hHe,pHe,Vx,_He,uHe,bHe,is,IJ,vHe,THe,zx,FHe,CHe,Wx,MHe,EHe,yHe,Zg,jJ,wHe,AHe,Qx,LHe,BHe,xHe,ds,DJ,kHe,RHe,Hx,SHe,PHe,Ux,$He,IHe,jHe,cs,NJ,DHe,NHe,Jx,qHe,GHe,Yx,OHe,XHe,VHe,fs,qJ,zHe,WHe,Kx,QHe,HHe,Zx,UHe,JHe,YHe,eh,GJ,KHe,ZHe,ek,eUe,oUe,rUe,ms,OJ,tUe,aUe,ok,nUe,sUe,rk,lUe,iUe,dUe,oh,XJ,cUe,fUe,tk,mUe,gUe,hUe,gs,VJ,pUe,_Ue,ak,uUe,bUe,nk,vUe,TUe,FUe,hs,zJ,CUe,MUe,sk,EUe,yUe,lk,wUe,AUe,LUe,ps,WJ,BUe,xUe,ik,kUe,RUe,dk,SUe,PUe,$Ue,_s,QJ,IUe,jUe,ck,DUe,NUe,fk,qUe,GUe,OUe,rh,HJ,XUe,VUe,mk,zUe,WUe,QUe,us,UJ,HUe,UUe,gk,JUe,YUe,hk,KUe,ZUe,eJe,bs,JJ,oJe,rJe,pk,tJe,aJe,_k,nJe,sJe,lJe,vs,YJ,iJe,dJe,uk,cJe,fJe,bk,mJe,gJe,hJe,Ts,KJ,pJe,_Je,vk,uJe,bJe,Tk,vJe,TJe,FJe,Fs,ZJ,CJe,MJe,Fk,EJe,yJe,Ck,wJe,AJe,LJe,Cs,eY,BJe,xJe,Mk,kJe,RJe,Ek,SJe,PJe,$Je,th,oY,IJe,jJe,yk,DJe,NJe,qJe,Ms,rY,GJe,OJe,wk,XJe,VJe,Ak,zJe,WJe,QJe,ah,tY,HJe,UJe,Lk,JJe,YJe,KJe,nh,aY,ZJe,eYe,Bk,oYe,rYe,tYe,Es,nY,aYe,nYe,xk,sYe,lYe,kk,iYe,dYe,cYe,ys,sY,fYe,mYe,Rk,gYe,hYe,Sk,pYe,_Ye,uYe,sh,lY,bYe,vYe,Pk,TYe,FYe,CYe,ws,iY,MYe,EYe,$k,yYe,wYe,Ik,AYe,LYe,BYe,As,dY,xYe,kYe,jk,RYe,SYe,Dk,PYe,$Ye,IYe,Ls,cY,jYe,DYe,Nk,NYe,qYe,qk,GYe,OYe,XYe,Bs,fY,VYe,zYe,Gk,WYe,QYe,Ok,HYe,UYe,JYe,xs,mY,YYe,KYe,Xk,ZYe,eKe,Vk,oKe,rKe,tKe,lh,gY,aKe,nKe,zk,sKe,lKe,iKe,ih,hY,dKe,cKe,Wk,fKe,mKe,gKe,dh,pY,hKe,pKe,Qk,_Ke,uKe,bKe,ch,_Y,vKe,TKe,Hk,FKe,CKe,MKe,ks,uY,EKe,yKe,Uk,wKe,AKe,Jk,LKe,BKe,xKe,fh,bY,kKe,RKe,Yk,SKe,PKe,$Ke,Rs,vY,IKe,jKe,Kk,DKe,NKe,Zk,qKe,GKe,OKe,Ss,TY,XKe,VKe,eR,zKe,WKe,oR,QKe,HKe,UKe,Ps,FY,JKe,YKe,rR,KKe,ZKe,tR,eZe,oZe,rZe,$s,CY,tZe,aZe,aR,nZe,sZe,nR,lZe,iZe,dZe,Is,MY,cZe,fZe,sR,mZe,gZe,lR,hZe,pZe,_Ze,js,EY,uZe,bZe,iR,vZe,TZe,dR,FZe,CZe,MZe,mh,yY,EZe,yZe,cR,wZe,AZe,LZe,gh,wY,BZe,xZe,fR,kZe,RZe,SZe,Ds,AY,PZe,$Ze,mR,IZe,jZe,gR,DZe,NZe,qZe,Ns,LY,GZe,OZe,hR,XZe,VZe,pR,zZe,WZe,QZe,qs,BY,HZe,UZe,_R,JZe,YZe,uR,KZe,ZZe,eeo,hh,xY,oeo,reo,bR,teo,aeo,neo,ph,kY,seo,leo,vR,ieo,deo,ceo,_h,RY,feo,meo,TR,geo,heo,peo,uh,SY,_eo,ueo,FR,beo,veo,Teo,Gs,PY,Feo,Ceo,CR,Meo,Eeo,MR,yeo,weo,Aeo,bh,$Y,Leo,Beo,ER,xeo,keo,Reo,vh,IY,Seo,Peo,yR,$eo,Ieo,jeo,Os,jY,Deo,Neo,wR,qeo,Geo,AR,Oeo,Xeo,Veo,Xs,DY,zeo,Weo,LR,Qeo,Heo,BR,Ueo,Jeo,Yeo,NY,Keo,Zeo,I4,eoo,Th,j4,ooo,qY,roo,Uke,ed,Fh,GY,D4,too,OY,aoo,Jke,Uo,N4,noo,q4,soo,xR,loo,ioo,doo,G4,coo,XY,foo,moo,goo,$e,O4,hoo,VY,poo,_oo,Qa,uoo,zY,boo,voo,WY,Too,Foo,QY,Coo,Moo,Eoo,re,Ch,HY,yoo,woo,kR,Aoo,Loo,Boo,Mh,UY,xoo,koo,RR,Roo,Soo,Poo,Eh,JY,$oo,Ioo,SR,joo,Doo,Noo,yh,YY,qoo,Goo,PR,Ooo,Xoo,Voo,wh,KY,zoo,Woo,$R,Qoo,Hoo,Uoo,Ah,ZY,Joo,Yoo,IR,Koo,Zoo,ero,Lh,eK,oro,rro,jR,tro,aro,nro,Bh,oK,sro,lro,DR,iro,dro,cro,xh,rK,fro,mro,NR,gro,hro,pro,kh,tK,_ro,uro,qR,bro,vro,Tro,Rh,aK,Fro,Cro,GR,Mro,Ero,yro,Sh,nK,wro,Aro,OR,Lro,Bro,xro,Ph,sK,kro,Rro,XR,Sro,Pro,$ro,$h,lK,Iro,jro,VR,Dro,Nro,qro,Ih,iK,Gro,Oro,zR,Xro,Vro,zro,jh,dK,Wro,Qro,WR,Hro,Uro,Jro,Dh,cK,Yro,Kro,QR,Zro,eto,oto,Nh,fK,rto,tto,HR,ato,nto,sto,qh,lto,mK,ito,dto,X4,cto,Gh,V4,fto,gK,mto,Yke,od,Oh,hK,z4,gto,pK,hto,Kke,Jo,W4,pto,Q4,_to,UR,uto,bto,vto,H4,Tto,_K,Fto,Cto,Mto,Ie,U4,Eto,uK,yto,wto,rd,Ato,bK,Lto,Bto,vK,xto,kto,Rto,xe,Xh,TK,Sto,Pto,JR,$to,Ito,jto,Vh,FK,Dto,Nto,YR,qto,Gto,Oto,zh,CK,Xto,Vto,KR,zto,Wto,Qto,Wh,MK,Hto,Uto,ZR,Jto,Yto,Kto,Qh,EK,Zto,eao,eS,oao,rao,tao,Hh,yK,aao,nao,oS,sao,lao,iao,Uh,wK,dao,cao,rS,fao,mao,gao,Jh,AK,hao,pao,tS,_ao,uao,bao,Yh,vao,LK,Tao,Fao,J4,Cao,Kh,Y4,Mao,BK,Eao,Zke,td,Zh,xK,K4,yao,kK,wao,eRe,Yo,Z4,Aao,ad,Lao,RK,Bao,xao,SK,kao,Rao,Sao,eE,Pao,PK,$ao,Iao,jao,Wr,oE,Dao,$K,Nao,qao,nd,Gao,IK,Oao,Xao,jK,Vao,zao,Wao,DK,Qao,Hao,rE,Uao,je,tE,Jao,NK,Yao,Kao,Ha,Zao,qK,eno,ono,GK,rno,tno,OK,ano,nno,sno,F,ep,XK,lno,ino,aS,dno,cno,fno,op,VK,mno,gno,nS,hno,pno,_no,rp,zK,uno,bno,sS,vno,Tno,Fno,tp,WK,Cno,Mno,lS,Eno,yno,wno,ap,QK,Ano,Lno,iS,Bno,xno,kno,np,HK,Rno,Sno,dS,Pno,$no,Ino,sp,UK,jno,Dno,cS,Nno,qno,Gno,lp,JK,Ono,Xno,fS,Vno,zno,Wno,ip,YK,Qno,Hno,mS,Uno,Jno,Yno,dp,KK,Kno,Zno,gS,eso,oso,rso,cp,ZK,tso,aso,hS,nso,sso,lso,fp,eZ,iso,dso,pS,cso,fso,mso,mp,oZ,gso,hso,_S,pso,_so,uso,gp,rZ,bso,vso,uS,Tso,Fso,Cso,hp,tZ,Mso,Eso,bS,yso,wso,Aso,pp,aZ,Lso,Bso,vS,xso,kso,Rso,_p,nZ,Sso,Pso,TS,$so,Iso,jso,up,sZ,Dso,Nso,FS,qso,Gso,Oso,bp,lZ,Xso,Vso,CS,zso,Wso,Qso,vp,iZ,Hso,Uso,MS,Jso,Yso,Kso,Tp,dZ,Zso,elo,ES,olo,rlo,tlo,Fp,cZ,alo,nlo,yS,slo,llo,ilo,Cp,fZ,dlo,clo,wS,flo,mlo,glo,Mp,mZ,hlo,plo,AS,_lo,ulo,blo,Ep,gZ,vlo,Tlo,LS,Flo,Clo,Mlo,yp,hZ,Elo,ylo,BS,wlo,Alo,Llo,wp,pZ,Blo,xlo,xS,klo,Rlo,Slo,Ap,_Z,Plo,$lo,kS,Ilo,jlo,Dlo,Vs,uZ,Nlo,qlo,RS,Glo,Olo,SS,Xlo,Vlo,zlo,Lp,bZ,Wlo,Qlo,PS,Hlo,Ulo,Jlo,Bp,vZ,Ylo,Klo,$S,Zlo,eio,oio,xp,TZ,rio,tio,IS,aio,nio,sio,kp,FZ,lio,iio,jS,dio,cio,fio,Rp,CZ,mio,gio,DS,hio,pio,_io,Sp,MZ,uio,bio,NS,vio,Tio,Fio,Pp,EZ,Cio,Mio,qS,Eio,yio,wio,$p,yZ,Aio,Lio,GS,Bio,xio,kio,Ip,wZ,Rio,Sio,OS,Pio,$io,Iio,jp,AZ,jio,Dio,XS,Nio,qio,Gio,Dp,LZ,Oio,Xio,VS,Vio,zio,Wio,Np,BZ,Qio,Hio,zS,Uio,Jio,Yio,qp,xZ,Kio,Zio,WS,edo,odo,rdo,Gp,kZ,tdo,ado,QS,ndo,sdo,ldo,Op,RZ,ido,ddo,HS,cdo,fdo,mdo,Xp,SZ,gdo,hdo,US,pdo,_do,udo,Vp,PZ,bdo,vdo,JS,Tdo,Fdo,Cdo,zp,$Z,Mdo,Edo,YS,ydo,wdo,Ado,Wp,IZ,Ldo,Bdo,KS,xdo,kdo,Rdo,Qp,jZ,Sdo,Pdo,ZS,$do,Ido,jdo,Hp,DZ,Ddo,Ndo,eP,qdo,Gdo,Odo,Up,NZ,Xdo,Vdo,oP,zdo,Wdo,Qdo,Jp,qZ,Hdo,Udo,rP,Jdo,Ydo,Kdo,Yp,GZ,Zdo,eco,tP,oco,rco,tco,Kp,OZ,aco,nco,aP,sco,lco,ico,Zp,XZ,dco,cco,nP,fco,mco,gco,e_,VZ,hco,pco,sP,_co,uco,bco,o_,zZ,vco,Tco,lP,Fco,Cco,Mco,r_,WZ,Eco,yco,iP,wco,Aco,Lco,t_,QZ,Bco,xco,dP,kco,Rco,Sco,a_,HZ,Pco,$co,cP,Ico,jco,Dco,n_,UZ,Nco,qco,fP,Gco,Oco,Xco,s_,JZ,Vco,zco,mP,Wco,Qco,Hco,l_,YZ,Uco,Jco,gP,Yco,Kco,Zco,i_,KZ,efo,ofo,hP,rfo,tfo,afo,d_,ZZ,nfo,sfo,pP,lfo,ifo,dfo,c_,eee,cfo,ffo,_P,mfo,gfo,hfo,f_,oee,pfo,_fo,uP,ufo,bfo,vfo,m_,ree,Tfo,Ffo,bP,Cfo,Mfo,Efo,g_,tee,yfo,wfo,vP,Afo,Lfo,Bfo,h_,aee,xfo,kfo,TP,Rfo,Sfo,Pfo,p_,nee,$fo,Ifo,FP,jfo,Dfo,Nfo,__,see,qfo,Gfo,CP,Ofo,Xfo,Vfo,u_,lee,zfo,Wfo,MP,Qfo,Hfo,Ufo,b_,iee,Jfo,Yfo,EP,Kfo,Zfo,emo,v_,dee,omo,rmo,yP,tmo,amo,nmo,T_,cee,smo,lmo,wP,imo,dmo,cmo,F_,fee,fmo,mmo,AP,gmo,hmo,pmo,C_,mee,_mo,umo,LP,bmo,vmo,Tmo,M_,gee,Fmo,Cmo,BP,Mmo,Emo,ymo,E_,hee,wmo,Amo,xP,Lmo,Bmo,xmo,y_,pee,kmo,Rmo,kP,Smo,Pmo,$mo,w_,_ee,Imo,jmo,RP,Dmo,Nmo,qmo,A_,uee,Gmo,Omo,SP,Xmo,Vmo,zmo,L_,bee,Wmo,Qmo,PP,Hmo,Umo,Jmo,B_,vee,Ymo,Kmo,$P,Zmo,ego,ogo,x_,Tee,rgo,tgo,IP,ago,ngo,sgo,k_,Fee,lgo,igo,jP,dgo,cgo,fgo,R_,Cee,mgo,ggo,DP,hgo,pgo,_go,S_,Mee,ugo,bgo,NP,vgo,Tgo,Fgo,P_,Eee,Cgo,Mgo,qP,Ego,ygo,wgo,$_,yee,Ago,Lgo,GP,Bgo,xgo,kgo,I_,Rgo,wee,Sgo,Pgo,Aee,$go,Igo,Lee,jgo,Dgo,aE,oRe,sd,j_,Bee,nE,Ngo,xee,qgo,rRe,Ko,sE,Ggo,ld,Ogo,kee,Xgo,Vgo,Ree,zgo,Wgo,Qgo,lE,Hgo,See,Ugo,Jgo,Ygo,Qr,iE,Kgo,Pee,Zgo,eho,id,oho,$ee,rho,tho,Iee,aho,nho,sho,jee,lho,iho,dE,dho,De,cE,cho,Dee,fho,mho,Ua,gho,Nee,hho,pho,qee,_ho,uho,Gee,bho,vho,Tho,k,D_,Oee,Fho,Cho,OP,Mho,Eho,yho,N_,Xee,who,Aho,XP,Lho,Bho,xho,q_,Vee,kho,Rho,VP,Sho,Pho,$ho,G_,zee,Iho,jho,zP,Dho,Nho,qho,O_,Wee,Gho,Oho,WP,Xho,Vho,zho,X_,Qee,Who,Qho,QP,Hho,Uho,Jho,V_,Hee,Yho,Kho,HP,Zho,epo,opo,z_,Uee,rpo,tpo,UP,apo,npo,spo,W_,Jee,lpo,ipo,JP,dpo,cpo,fpo,Q_,Yee,mpo,gpo,YP,hpo,ppo,_po,H_,Kee,upo,bpo,KP,vpo,Tpo,Fpo,U_,Zee,Cpo,Mpo,ZP,Epo,ypo,wpo,J_,eoe,Apo,Lpo,e$,Bpo,xpo,kpo,Y_,ooe,Rpo,Spo,o$,Ppo,$po,Ipo,K_,roe,jpo,Dpo,r$,Npo,qpo,Gpo,Z_,toe,Opo,Xpo,t$,Vpo,zpo,Wpo,eu,aoe,Qpo,Hpo,a$,Upo,Jpo,Ypo,ou,noe,Kpo,Zpo,n$,e_o,o_o,r_o,ru,soe,t_o,a_o,s$,n_o,s_o,l_o,tu,loe,i_o,d_o,l$,c_o,f_o,m_o,au,ioe,g_o,h_o,i$,p_o,__o,u_o,nu,doe,b_o,v_o,d$,T_o,F_o,C_o,su,coe,M_o,E_o,c$,y_o,w_o,A_o,lu,foe,L_o,B_o,f$,x_o,k_o,R_o,iu,moe,S_o,P_o,m$,$_o,I_o,j_o,du,goe,D_o,N_o,g$,q_o,G_o,O_o,cu,hoe,X_o,V_o,h$,z_o,W_o,Q_o,fu,poe,H_o,U_o,p$,J_o,Y_o,K_o,mu,_oe,Z_o,euo,_$,ouo,ruo,tuo,gu,uoe,auo,nuo,u$,suo,luo,iuo,hu,boe,duo,cuo,b$,fuo,muo,guo,pu,voe,huo,puo,v$,_uo,uuo,buo,_u,Toe,vuo,Tuo,T$,Fuo,Cuo,Muo,uu,Foe,Euo,yuo,F$,wuo,Auo,Luo,bu,Coe,Buo,xuo,C$,kuo,Ruo,Suo,vu,Moe,Puo,$uo,M$,Iuo,juo,Duo,Tu,Eoe,Nuo,quo,E$,Guo,Ouo,Xuo,Fu,yoe,Vuo,zuo,y$,Wuo,Quo,Huo,Cu,woe,Uuo,Juo,w$,Yuo,Kuo,Zuo,Mu,e1o,Aoe,o1o,r1o,Loe,t1o,a1o,Boe,n1o,s1o,fE,tRe,dd,Eu,xoe,mE,l1o,koe,i1o,aRe,Zo,gE,d1o,cd,c1o,Roe,f1o,m1o,Soe,g1o,h1o,p1o,hE,_1o,Poe,u1o,b1o,v1o,Hr,pE,T1o,$oe,F1o,C1o,fd,M1o,Ioe,E1o,y1o,joe,w1o,A1o,L1o,Doe,B1o,x1o,_E,k1o,Ne,uE,R1o,Noe,S1o,P1o,Ja,$1o,qoe,I1o,j1o,Goe,D1o,N1o,Ooe,q1o,G1o,O1o,$,yu,Xoe,X1o,V1o,A$,z1o,W1o,Q1o,wu,Voe,H1o,U1o,L$,J1o,Y1o,K1o,Au,zoe,Z1o,ebo,B$,obo,rbo,tbo,Lu,Woe,abo,nbo,x$,sbo,lbo,ibo,Bu,Qoe,dbo,cbo,k$,fbo,mbo,gbo,xu,Hoe,hbo,pbo,R$,_bo,ubo,bbo,ku,Uoe,vbo,Tbo,S$,Fbo,Cbo,Mbo,Ru,Joe,Ebo,ybo,P$,wbo,Abo,Lbo,Su,Yoe,Bbo,xbo,$$,kbo,Rbo,Sbo,Pu,Koe,Pbo,$bo,I$,Ibo,jbo,Dbo,$u,Zoe,Nbo,qbo,j$,Gbo,Obo,Xbo,Iu,ere,Vbo,zbo,D$,Wbo,Qbo,Hbo,ju,ore,Ubo,Jbo,N$,Ybo,Kbo,Zbo,Du,rre,e5o,o5o,q$,r5o,t5o,a5o,Nu,tre,n5o,s5o,G$,l5o,i5o,d5o,qu,are,c5o,f5o,O$,m5o,g5o,h5o,Gu,nre,p5o,_5o,X$,u5o,b5o,v5o,Ou,sre,T5o,F5o,V$,C5o,M5o,E5o,Xu,lre,y5o,w5o,z$,A5o,L5o,B5o,Vu,ire,x5o,k5o,W$,R5o,S5o,P5o,zu,dre,$5o,I5o,Q$,j5o,D5o,N5o,Wu,cre,q5o,G5o,H$,O5o,X5o,V5o,Qu,fre,z5o,W5o,U$,Q5o,H5o,U5o,Hu,mre,J5o,Y5o,J$,K5o,Z5o,e2o,Uu,gre,o2o,r2o,Y$,t2o,a2o,n2o,Ju,hre,s2o,l2o,K$,i2o,d2o,c2o,Yu,pre,f2o,m2o,Z$,g2o,h2o,p2o,Ku,_re,_2o,u2o,eI,b2o,v2o,T2o,Zu,ure,F2o,C2o,oI,M2o,E2o,y2o,e1,bre,w2o,A2o,rI,L2o,B2o,x2o,o1,vre,k2o,R2o,tI,S2o,P2o,$2o,r1,Tre,I2o,j2o,aI,D2o,N2o,q2o,t1,Fre,G2o,O2o,nI,X2o,V2o,z2o,a1,Cre,W2o,Q2o,sI,H2o,U2o,J2o,n1,Mre,Y2o,K2o,lI,Z2o,evo,ovo,s1,rvo,Ere,tvo,avo,yre,nvo,svo,wre,lvo,ivo,bE,nRe,md,l1,Are,vE,dvo,Lre,cvo,sRe,er,TE,fvo,gd,mvo,Bre,gvo,hvo,xre,pvo,_vo,uvo,FE,bvo,kre,vvo,Tvo,Fvo,Ur,CE,Cvo,Rre,Mvo,Evo,hd,yvo,Sre,wvo,Avo,Pre,Lvo,Bvo,xvo,$re,kvo,Rvo,ME,Svo,qe,EE,Pvo,Ire,$vo,Ivo,Ya,jvo,jre,Dvo,Nvo,Dre,qvo,Gvo,Nre,Ovo,Xvo,Vvo,I,i1,qre,zvo,Wvo,iI,Qvo,Hvo,Uvo,d1,Gre,Jvo,Yvo,dI,Kvo,Zvo,e6o,c1,Ore,o6o,r6o,cI,t6o,a6o,n6o,f1,Xre,s6o,l6o,fI,i6o,d6o,c6o,m1,Vre,f6o,m6o,mI,g6o,h6o,p6o,g1,zre,_6o,u6o,gI,b6o,v6o,T6o,h1,Wre,F6o,C6o,hI,M6o,E6o,y6o,p1,Qre,w6o,A6o,pI,L6o,B6o,x6o,_1,Hre,k6o,R6o,_I,S6o,P6o,$6o,u1,Ure,I6o,j6o,uI,D6o,N6o,q6o,b1,Jre,G6o,O6o,bI,X6o,V6o,z6o,v1,Yre,W6o,Q6o,vI,H6o,U6o,J6o,T1,Kre,Y6o,K6o,TI,Z6o,e0o,o0o,F1,Zre,r0o,t0o,FI,a0o,n0o,s0o,C1,ete,l0o,i0o,CI,d0o,c0o,f0o,M1,ote,m0o,g0o,MI,h0o,p0o,_0o,E1,rte,u0o,b0o,EI,v0o,T0o,F0o,y1,tte,C0o,M0o,yI,E0o,y0o,w0o,w1,ate,A0o,L0o,wI,B0o,x0o,k0o,A1,nte,R0o,S0o,AI,P0o,$0o,I0o,L1,ste,j0o,D0o,LI,N0o,q0o,G0o,B1,lte,O0o,X0o,BI,V0o,z0o,W0o,x1,ite,Q0o,H0o,xI,U0o,J0o,Y0o,k1,dte,K0o,Z0o,kI,eTo,oTo,rTo,R1,cte,tTo,aTo,RI,nTo,sTo,lTo,S1,fte,iTo,dTo,SI,cTo,fTo,mTo,P1,mte,gTo,hTo,PI,pTo,_To,uTo,$1,gte,bTo,vTo,$I,TTo,FTo,CTo,I1,hte,MTo,ETo,II,yTo,wTo,ATo,j1,pte,LTo,BTo,jI,xTo,kTo,RTo,D1,_te,STo,PTo,ute,$To,ITo,jTo,N1,bte,DTo,NTo,DI,qTo,GTo,OTo,q1,vte,XTo,VTo,NI,zTo,WTo,QTo,G1,Tte,HTo,UTo,qI,JTo,YTo,KTo,O1,Fte,ZTo,e8o,GI,o8o,r8o,t8o,X1,a8o,Cte,n8o,s8o,Mte,l8o,i8o,Ete,d8o,c8o,yE,lRe,pd,V1,yte,wE,f8o,wte,m8o,iRe,or,AE,g8o,_d,h8o,Ate,p8o,_8o,Lte,u8o,b8o,v8o,LE,T8o,Bte,F8o,C8o,M8o,Jr,BE,E8o,xte,y8o,w8o,ud,A8o,kte,L8o,B8o,Rte,x8o,k8o,R8o,Ste,S8o,P8o,xE,$8o,Ge,kE,I8o,Pte,j8o,D8o,Ka,N8o,$te,q8o,G8o,Ite,O8o,X8o,jte,V8o,z8o,W8o,se,z1,Dte,Q8o,H8o,OI,U8o,J8o,Y8o,W1,Nte,K8o,Z8o,XI,eFo,oFo,rFo,Q1,qte,tFo,aFo,VI,nFo,sFo,lFo,H1,Gte,iFo,dFo,zI,cFo,fFo,mFo,U1,Ote,gFo,hFo,WI,pFo,_Fo,uFo,J1,Xte,bFo,vFo,QI,TFo,FFo,CFo,Y1,Vte,MFo,EFo,HI,yFo,wFo,AFo,K1,zte,LFo,BFo,UI,xFo,kFo,RFo,Z1,Wte,SFo,PFo,JI,$Fo,IFo,jFo,eb,Qte,DFo,NFo,YI,qFo,GFo,OFo,ob,Hte,XFo,VFo,KI,zFo,WFo,QFo,rb,Ute,HFo,UFo,ZI,JFo,YFo,KFo,tb,Jte,ZFo,eCo,ej,oCo,rCo,tCo,ab,Yte,aCo,nCo,oj,sCo,lCo,iCo,nb,Kte,dCo,cCo,rj,fCo,mCo,gCo,sb,Zte,hCo,pCo,tj,_Co,uCo,bCo,lb,vCo,eae,TCo,FCo,oae,CCo,MCo,rae,ECo,yCo,RE,dRe,bd,ib,tae,SE,wCo,aae,ACo,cRe,rr,PE,LCo,vd,BCo,nae,xCo,kCo,sae,RCo,SCo,PCo,$E,$Co,lae,ICo,jCo,DCo,Yr,IE,NCo,iae,qCo,GCo,Td,OCo,dae,XCo,VCo,cae,zCo,WCo,QCo,fae,HCo,UCo,jE,JCo,Oe,DE,YCo,mae,KCo,ZCo,Za,eMo,gae,oMo,rMo,hae,tMo,aMo,pae,nMo,sMo,lMo,A,db,_ae,iMo,dMo,aj,cMo,fMo,mMo,cb,uae,gMo,hMo,nj,pMo,_Mo,uMo,fb,bae,bMo,vMo,sj,TMo,FMo,CMo,mb,vae,MMo,EMo,lj,yMo,wMo,AMo,gb,Tae,LMo,BMo,ij,xMo,kMo,RMo,hb,Fae,SMo,PMo,dj,$Mo,IMo,jMo,pb,Cae,DMo,NMo,cj,qMo,GMo,OMo,_b,Mae,XMo,VMo,fj,zMo,WMo,QMo,ub,Eae,HMo,UMo,mj,JMo,YMo,KMo,bb,yae,ZMo,e4o,gj,o4o,r4o,t4o,vb,wae,a4o,n4o,hj,s4o,l4o,i4o,Tb,Aae,d4o,c4o,pj,f4o,m4o,g4o,Fb,Lae,h4o,p4o,_j,_4o,u4o,b4o,Cb,Bae,v4o,T4o,uj,F4o,C4o,M4o,Mb,xae,E4o,y4o,bj,w4o,A4o,L4o,Eb,kae,B4o,x4o,vj,k4o,R4o,S4o,yb,Rae,P4o,$4o,Tj,I4o,j4o,D4o,wb,Sae,N4o,q4o,Fj,G4o,O4o,X4o,Ab,Pae,V4o,z4o,Cj,W4o,Q4o,H4o,Lb,$ae,U4o,J4o,Mj,Y4o,K4o,Z4o,Bb,Iae,eEo,oEo,Ej,rEo,tEo,aEo,xb,jae,nEo,sEo,yj,lEo,iEo,dEo,kb,Dae,cEo,fEo,wj,mEo,gEo,hEo,Rb,Nae,pEo,_Eo,Aj,uEo,bEo,vEo,Sb,qae,TEo,FEo,Lj,CEo,MEo,EEo,Pb,Gae,yEo,wEo,Bj,AEo,LEo,BEo,$b,Oae,xEo,kEo,xj,REo,SEo,PEo,Ib,Xae,$Eo,IEo,kj,jEo,DEo,NEo,jb,Vae,qEo,GEo,Rj,OEo,XEo,VEo,Db,zae,zEo,WEo,Sj,QEo,HEo,UEo,Nb,Wae,JEo,YEo,Pj,KEo,ZEo,e3o,qb,Qae,o3o,r3o,$j,t3o,a3o,n3o,Gb,Hae,s3o,l3o,Ij,i3o,d3o,c3o,Ob,Uae,f3o,m3o,jj,g3o,h3o,p3o,Xb,Jae,_3o,u3o,Dj,b3o,v3o,T3o,Vb,Yae,F3o,C3o,Nj,M3o,E3o,y3o,zb,Kae,w3o,A3o,qj,L3o,B3o,x3o,Wb,Zae,k3o,R3o,Gj,S3o,P3o,$3o,Qb,ene,I3o,j3o,Oj,D3o,N3o,q3o,Hb,one,G3o,O3o,Xj,X3o,V3o,z3o,Ub,rne,W3o,Q3o,Vj,H3o,U3o,J3o,Jb,tne,Y3o,K3o,zj,Z3o,eyo,oyo,Yb,ane,ryo,tyo,Wj,ayo,nyo,syo,Kb,nne,lyo,iyo,Qj,dyo,cyo,fyo,Zb,sne,myo,gyo,Hj,hyo,pyo,_yo,e5,lne,uyo,byo,Uj,vyo,Tyo,Fyo,o5,Cyo,ine,Myo,Eyo,dne,yyo,wyo,cne,Ayo,Lyo,NE,fRe,Fd,r5,fne,qE,Byo,mne,xyo,mRe,tr,GE,kyo,Cd,Ryo,gne,Syo,Pyo,hne,$yo,Iyo,jyo,OE,Dyo,pne,Nyo,qyo,Gyo,Kr,XE,Oyo,_ne,Xyo,Vyo,Md,zyo,une,Wyo,Qyo,bne,Hyo,Uyo,Jyo,vne,Yyo,Kyo,VE,Zyo,Xe,zE,ewo,Tne,owo,rwo,en,two,Fne,awo,nwo,Cne,swo,lwo,Mne,iwo,dwo,cwo,G,t5,Ene,fwo,mwo,Jj,gwo,hwo,pwo,a5,yne,_wo,uwo,Yj,bwo,vwo,Two,n5,wne,Fwo,Cwo,Kj,Mwo,Ewo,ywo,s5,Ane,wwo,Awo,Zj,Lwo,Bwo,xwo,l5,Lne,kwo,Rwo,eD,Swo,Pwo,$wo,i5,Bne,Iwo,jwo,oD,Dwo,Nwo,qwo,d5,xne,Gwo,Owo,rD,Xwo,Vwo,zwo,c5,kne,Wwo,Qwo,tD,Hwo,Uwo,Jwo,f5,Rne,Ywo,Kwo,aD,Zwo,eAo,oAo,m5,Sne,rAo,tAo,nD,aAo,nAo,sAo,g5,Pne,lAo,iAo,sD,dAo,cAo,fAo,h5,$ne,mAo,gAo,lD,hAo,pAo,_Ao,p5,Ine,uAo,bAo,iD,vAo,TAo,FAo,_5,jne,CAo,MAo,dD,EAo,yAo,wAo,u5,Dne,AAo,LAo,cD,BAo,xAo,kAo,b5,Nne,RAo,SAo,fD,PAo,$Ao,IAo,v5,qne,jAo,DAo,mD,NAo,qAo,GAo,T5,Gne,OAo,XAo,gD,VAo,zAo,WAo,F5,One,QAo,HAo,hD,UAo,JAo,YAo,C5,Xne,KAo,ZAo,pD,eLo,oLo,rLo,M5,Vne,tLo,aLo,_D,nLo,sLo,lLo,E5,zne,iLo,dLo,uD,cLo,fLo,mLo,y5,Wne,gLo,hLo,bD,pLo,_Lo,uLo,w5,Qne,bLo,vLo,vD,TLo,FLo,CLo,A5,Hne,MLo,ELo,TD,yLo,wLo,ALo,L5,Une,LLo,BLo,FD,xLo,kLo,RLo,B5,Jne,SLo,PLo,CD,$Lo,ILo,jLo,x5,Yne,DLo,NLo,MD,qLo,GLo,OLo,k5,XLo,Kne,VLo,zLo,Zne,WLo,QLo,ese,HLo,ULo,WE,gRe,Ed,R5,ose,QE,JLo,rse,YLo,hRe,ar,HE,KLo,yd,ZLo,tse,e7o,o7o,ase,r7o,t7o,a7o,UE,n7o,nse,s7o,l7o,i7o,Zr,JE,d7o,sse,c7o,f7o,wd,m7o,lse,g7o,h7o,ise,p7o,_7o,u7o,dse,b7o,v7o,YE,T7o,Ve,KE,F7o,cse,C7o,M7o,on,E7o,fse,y7o,w7o,mse,A7o,L7o,gse,B7o,x7o,k7o,ma,S5,hse,R7o,S7o,ED,P7o,$7o,I7o,P5,pse,j7o,D7o,yD,N7o,q7o,G7o,$5,_se,O7o,X7o,wD,V7o,z7o,W7o,I5,use,Q7o,H7o,AD,U7o,J7o,Y7o,j5,bse,K7o,Z7o,LD,e9o,o9o,r9o,D5,t9o,vse,a9o,n9o,Tse,s9o,l9o,Fse,i9o,d9o,ZE,pRe,Ad,N5,Cse,e3,c9o,Mse,f9o,_Re,nr,o3,m9o,Ld,g9o,Ese,h9o,p9o,yse,_9o,u9o,b9o,r3,v9o,wse,T9o,F9o,C9o,et,t3,M9o,Ase,E9o,y9o,Bd,w9o,Lse,A9o,L9o,Bse,B9o,x9o,k9o,xse,R9o,S9o,a3,P9o,ze,n3,$9o,kse,I9o,j9o,rn,D9o,Rse,N9o,q9o,Sse,G9o,O9o,Pse,X9o,V9o,z9o,N,q5,$se,W9o,Q9o,BD,H9o,U9o,J9o,G5,Ise,Y9o,K9o,xD,Z9o,eBo,oBo,O5,jse,rBo,tBo,kD,aBo,nBo,sBo,X5,Dse,lBo,iBo,RD,dBo,cBo,fBo,V5,Nse,mBo,gBo,SD,hBo,pBo,_Bo,z5,qse,uBo,bBo,PD,vBo,TBo,FBo,W5,Gse,CBo,MBo,$D,EBo,yBo,wBo,Q5,Ose,ABo,LBo,ID,BBo,xBo,kBo,H5,Xse,RBo,SBo,jD,PBo,$Bo,IBo,U5,Vse,jBo,DBo,DD,NBo,qBo,GBo,J5,zse,OBo,XBo,ND,VBo,zBo,WBo,Y5,Wse,QBo,HBo,qD,UBo,JBo,YBo,K5,Qse,KBo,ZBo,GD,exo,oxo,rxo,Z5,Hse,txo,axo,OD,nxo,sxo,lxo,e2,Use,ixo,dxo,XD,cxo,fxo,mxo,o2,Jse,gxo,hxo,VD,pxo,_xo,uxo,r2,Yse,bxo,vxo,zD,Txo,Fxo,Cxo,t2,Kse,Mxo,Exo,WD,yxo,wxo,Axo,a2,Zse,Lxo,Bxo,QD,xxo,kxo,Rxo,n2,ele,Sxo,Pxo,HD,$xo,Ixo,jxo,s2,ole,Dxo,Nxo,UD,qxo,Gxo,Oxo,l2,rle,Xxo,Vxo,JD,zxo,Wxo,Qxo,i2,tle,Hxo,Uxo,YD,Jxo,Yxo,Kxo,d2,ale,Zxo,eko,KD,oko,rko,tko,c2,nle,ako,nko,ZD,sko,lko,iko,f2,sle,dko,cko,eN,fko,mko,gko,m2,lle,hko,pko,oN,_ko,uko,bko,g2,ile,vko,Tko,rN,Fko,Cko,Mko,h2,dle,Eko,yko,tN,wko,Ako,Lko,p2,cle,Bko,xko,aN,kko,Rko,Sko,_2,fle,Pko,$ko,nN,Iko,jko,Dko,u2,mle,Nko,qko,sN,Gko,Oko,Xko,b2,gle,Vko,zko,lN,Wko,Qko,Hko,v2,Uko,hle,Jko,Yko,ple,Kko,Zko,_le,eRo,oRo,s3,uRe,xd,T2,ule,l3,rRo,ble,tRo,bRe,sr,i3,aRo,kd,nRo,vle,sRo,lRo,Tle,iRo,dRo,cRo,d3,fRo,Fle,mRo,gRo,hRo,ot,c3,pRo,Cle,_Ro,uRo,Rd,bRo,Mle,vRo,TRo,Ele,FRo,CRo,MRo,yle,ERo,yRo,f3,wRo,We,m3,ARo,wle,LRo,BRo,tn,xRo,Ale,kRo,RRo,Lle,SRo,PRo,Ble,$Ro,IRo,jRo,R,F2,xle,DRo,NRo,iN,qRo,GRo,ORo,C2,kle,XRo,VRo,dN,zRo,WRo,QRo,M2,Rle,HRo,URo,cN,JRo,YRo,KRo,E2,Sle,ZRo,eSo,fN,oSo,rSo,tSo,y2,Ple,aSo,nSo,mN,sSo,lSo,iSo,w2,$le,dSo,cSo,gN,fSo,mSo,gSo,A2,Ile,hSo,pSo,hN,_So,uSo,bSo,L2,jle,vSo,TSo,pN,FSo,CSo,MSo,B2,Dle,ESo,ySo,_N,wSo,ASo,LSo,x2,Nle,BSo,xSo,uN,kSo,RSo,SSo,k2,qle,PSo,$So,bN,ISo,jSo,DSo,R2,Gle,NSo,qSo,vN,GSo,OSo,XSo,S2,Ole,VSo,zSo,TN,WSo,QSo,HSo,P2,Xle,USo,JSo,FN,YSo,KSo,ZSo,$2,Vle,ePo,oPo,CN,rPo,tPo,aPo,I2,zle,nPo,sPo,MN,lPo,iPo,dPo,j2,Wle,cPo,fPo,EN,mPo,gPo,hPo,D2,Qle,pPo,_Po,yN,uPo,bPo,vPo,N2,Hle,TPo,FPo,wN,CPo,MPo,EPo,q2,Ule,yPo,wPo,AN,APo,LPo,BPo,G2,Jle,xPo,kPo,LN,RPo,SPo,PPo,O2,Yle,$Po,IPo,BN,jPo,DPo,NPo,X2,Kle,qPo,GPo,xN,OPo,XPo,VPo,V2,Zle,zPo,WPo,kN,QPo,HPo,UPo,z2,eie,JPo,YPo,RN,KPo,ZPo,e$o,W2,oie,o$o,r$o,SN,t$o,a$o,n$o,Q2,rie,s$o,l$o,PN,i$o,d$o,c$o,H2,tie,f$o,m$o,$N,g$o,h$o,p$o,U2,aie,_$o,u$o,IN,b$o,v$o,T$o,J2,nie,F$o,C$o,jN,M$o,E$o,y$o,Y2,sie,w$o,A$o,DN,L$o,B$o,x$o,K2,lie,k$o,R$o,NN,S$o,P$o,$$o,Z2,iie,I$o,j$o,qN,D$o,N$o,q$o,ev,die,G$o,O$o,GN,X$o,V$o,z$o,ov,cie,W$o,Q$o,ON,H$o,U$o,J$o,rv,fie,Y$o,K$o,XN,Z$o,eIo,oIo,tv,mie,rIo,tIo,VN,aIo,nIo,sIo,av,gie,lIo,iIo,zN,dIo,cIo,fIo,nv,hie,mIo,gIo,WN,hIo,pIo,_Io,sv,uIo,pie,bIo,vIo,_ie,TIo,FIo,uie,CIo,MIo,g3,vRe,Sd,lv,bie,h3,EIo,vie,yIo,TRe,lr,p3,wIo,Pd,AIo,Tie,LIo,BIo,Fie,xIo,kIo,RIo,_3,SIo,Cie,PIo,$Io,IIo,rt,u3,jIo,Mie,DIo,NIo,$d,qIo,Eie,GIo,OIo,yie,XIo,VIo,zIo,wie,WIo,QIo,b3,HIo,Qe,v3,UIo,Aie,JIo,YIo,an,KIo,Lie,ZIo,ejo,Bie,ojo,rjo,xie,tjo,ajo,njo,kie,iv,Rie,sjo,ljo,QN,ijo,djo,cjo,dv,fjo,Sie,mjo,gjo,Pie,hjo,pjo,$ie,_jo,ujo,T3,FRe,Id,cv,Iie,F3,bjo,jie,vjo,CRe,ir,C3,Tjo,jd,Fjo,Die,Cjo,Mjo,Nie,Ejo,yjo,wjo,M3,Ajo,qie,Ljo,Bjo,xjo,tt,E3,kjo,Gie,Rjo,Sjo,Dd,Pjo,Oie,$jo,Ijo,Xie,jjo,Djo,Njo,Vie,qjo,Gjo,y3,Ojo,He,w3,Xjo,zie,Vjo,zjo,nn,Wjo,Wie,Qjo,Hjo,Qie,Ujo,Jjo,Hie,Yjo,Kjo,Zjo,me,fv,Uie,eDo,oDo,HN,rDo,tDo,aDo,mv,Jie,nDo,sDo,UN,lDo,iDo,dDo,zs,Yie,cDo,fDo,JN,mDo,gDo,YN,hDo,pDo,_Do,gv,Kie,uDo,bDo,KN,vDo,TDo,FDo,pa,Zie,CDo,MDo,ZN,EDo,yDo,eq,wDo,ADo,oq,LDo,BDo,xDo,hv,ede,kDo,RDo,rq,SDo,PDo,$Do,pv,ode,IDo,jDo,tq,DDo,NDo,qDo,_v,rde,GDo,ODo,aq,XDo,VDo,zDo,uv,tde,WDo,QDo,nq,HDo,UDo,JDo,bv,ade,YDo,KDo,sq,ZDo,eNo,oNo,vv,nde,rNo,tNo,lq,aNo,nNo,sNo,Tv,lNo,sde,iNo,dNo,lde,cNo,fNo,ide,mNo,gNo,A3,MRe,Nd,Fv,dde,L3,hNo,cde,pNo,ERe,dr,B3,_No,qd,uNo,fde,bNo,vNo,mde,TNo,FNo,CNo,x3,MNo,gde,ENo,yNo,wNo,at,k3,ANo,hde,LNo,BNo,Gd,xNo,pde,kNo,RNo,_de,SNo,PNo,$No,ude,INo,jNo,R3,DNo,Ue,S3,NNo,bde,qNo,GNo,sn,ONo,vde,XNo,VNo,Tde,zNo,WNo,Fde,QNo,HNo,UNo,Cde,Cv,Mde,JNo,YNo,iq,KNo,ZNo,eqo,Mv,oqo,Ede,rqo,tqo,yde,aqo,nqo,wde,sqo,lqo,P3,yRe,Od,Ev,Ade,$3,iqo,Lde,dqo,wRe,cr,I3,cqo,Xd,fqo,Bde,mqo,gqo,xde,hqo,pqo,_qo,j3,uqo,kde,bqo,vqo,Tqo,nt,D3,Fqo,Rde,Cqo,Mqo,Vd,Eqo,Sde,yqo,wqo,Pde,Aqo,Lqo,Bqo,$de,xqo,kqo,N3,Rqo,Je,q3,Sqo,Ide,Pqo,$qo,ln,Iqo,jde,jqo,Dqo,Dde,Nqo,qqo,Nde,Gqo,Oqo,Xqo,ke,yv,qde,Vqo,zqo,dq,Wqo,Qqo,Hqo,wv,Gde,Uqo,Jqo,cq,Yqo,Kqo,Zqo,Av,Ode,eGo,oGo,fq,rGo,tGo,aGo,Lv,Xde,nGo,sGo,mq,lGo,iGo,dGo,Bv,Vde,cGo,fGo,gq,mGo,gGo,hGo,xv,zde,pGo,_Go,hq,uGo,bGo,vGo,kv,Wde,TGo,FGo,pq,CGo,MGo,EGo,Rv,Qde,yGo,wGo,_q,AGo,LGo,BGo,Sv,xGo,Hde,kGo,RGo,Ude,SGo,PGo,Jde,$Go,IGo,G3,ARe,zd,Pv,Yde,O3,jGo,Kde,DGo,LRe,fr,X3,NGo,Wd,qGo,Zde,GGo,OGo,ece,XGo,VGo,zGo,V3,WGo,oce,QGo,HGo,UGo,st,z3,JGo,rce,YGo,KGo,Qd,ZGo,tce,eOo,oOo,ace,rOo,tOo,aOo,nce,nOo,sOo,W3,lOo,Ye,Q3,iOo,sce,dOo,cOo,dn,fOo,lce,mOo,gOo,ice,hOo,pOo,dce,_Oo,uOo,bOo,cn,$v,cce,vOo,TOo,uq,FOo,COo,MOo,Iv,fce,EOo,yOo,bq,wOo,AOo,LOo,jv,mce,BOo,xOo,vq,kOo,ROo,SOo,Dv,gce,POo,$Oo,Tq,IOo,jOo,DOo,Nv,NOo,hce,qOo,GOo,pce,OOo,XOo,_ce,VOo,zOo,H3,BRe,Hd,qv,uce,U3,WOo,bce,QOo,xRe,mr,J3,HOo,Ud,UOo,vce,JOo,YOo,Tce,KOo,ZOo,eXo,Y3,oXo,Fce,rXo,tXo,aXo,lt,K3,nXo,Cce,sXo,lXo,Jd,iXo,Mce,dXo,cXo,Ece,fXo,mXo,gXo,yce,hXo,pXo,Z3,_Xo,Ke,ey,uXo,wce,bXo,vXo,fn,TXo,Ace,FXo,CXo,Lce,MXo,EXo,Bce,yXo,wXo,AXo,Re,Gv,xce,LXo,BXo,Fq,xXo,kXo,RXo,Ov,kce,SXo,PXo,Cq,$Xo,IXo,jXo,Xv,Rce,DXo,NXo,Mq,qXo,GXo,OXo,Vv,Sce,XXo,VXo,Eq,zXo,WXo,QXo,zv,Pce,HXo,UXo,yq,JXo,YXo,KXo,Wv,$ce,ZXo,eVo,wq,oVo,rVo,tVo,Qv,Ice,aVo,nVo,Aq,sVo,lVo,iVo,Hv,jce,dVo,cVo,Lq,fVo,mVo,gVo,Uv,hVo,Dce,pVo,_Vo,Nce,uVo,bVo,qce,vVo,TVo,oy,kRe,Yd,Jv,Gce,ry,FVo,Oce,CVo,RRe,gr,ty,MVo,Kd,EVo,Xce,yVo,wVo,Vce,AVo,LVo,BVo,ay,xVo,zce,kVo,RVo,SVo,it,ny,PVo,Wce,$Vo,IVo,Zd,jVo,Qce,DVo,NVo,Hce,qVo,GVo,OVo,Uce,XVo,VVo,sy,zVo,Ze,ly,WVo,Jce,QVo,HVo,mn,UVo,Yce,JVo,YVo,Kce,KVo,ZVo,Zce,ezo,ozo,rzo,iy,Yv,efe,tzo,azo,Bq,nzo,szo,lzo,Kv,ofe,izo,dzo,xq,czo,fzo,mzo,Zv,gzo,rfe,hzo,pzo,tfe,_zo,uzo,afe,bzo,vzo,dy,SRe,ec,e6,nfe,cy,Tzo,sfe,Fzo,PRe,hr,fy,Czo,oc,Mzo,lfe,Ezo,yzo,ife,wzo,Azo,Lzo,my,Bzo,dfe,xzo,kzo,Rzo,dt,gy,Szo,cfe,Pzo,$zo,rc,Izo,ffe,jzo,Dzo,mfe,Nzo,qzo,Gzo,gfe,Ozo,Xzo,hy,Vzo,eo,py,zzo,hfe,Wzo,Qzo,gn,Hzo,pfe,Uzo,Jzo,_fe,Yzo,Kzo,ufe,Zzo,eWo,oWo,hn,o6,bfe,rWo,tWo,kq,aWo,nWo,sWo,r6,vfe,lWo,iWo,Rq,dWo,cWo,fWo,t6,Tfe,mWo,gWo,Sq,hWo,pWo,_Wo,a6,Ffe,uWo,bWo,Pq,vWo,TWo,FWo,n6,CWo,Cfe,MWo,EWo,Mfe,yWo,wWo,Efe,AWo,LWo,_y,$Re,tc,s6,yfe,uy,BWo,wfe,xWo,IRe,pr,by,kWo,ac,RWo,Afe,SWo,PWo,Lfe,$Wo,IWo,jWo,vy,DWo,Bfe,NWo,qWo,GWo,ct,Ty,OWo,xfe,XWo,VWo,nc,zWo,kfe,WWo,QWo,Rfe,HWo,UWo,JWo,Sfe,YWo,KWo,Fy,ZWo,oo,Cy,eQo,Pfe,oQo,rQo,pn,tQo,$fe,aQo,nQo,Ife,sQo,lQo,jfe,iQo,dQo,cQo,sc,l6,Dfe,fQo,mQo,$q,gQo,hQo,pQo,i6,Nfe,_Qo,uQo,Iq,bQo,vQo,TQo,d6,qfe,FQo,CQo,jq,MQo,EQo,yQo,c6,wQo,Gfe,AQo,LQo,Ofe,BQo,xQo,Xfe,kQo,RQo,My,jRe,lc,f6,Vfe,Ey,SQo,zfe,PQo,DRe,_r,yy,$Qo,ic,IQo,Wfe,jQo,DQo,Qfe,NQo,qQo,GQo,wy,OQo,Hfe,XQo,VQo,zQo,ft,Ay,WQo,Ufe,QQo,HQo,dc,UQo,Jfe,JQo,YQo,Yfe,KQo,ZQo,eHo,Kfe,oHo,rHo,Ly,tHo,ro,By,aHo,Zfe,nHo,sHo,_n,lHo,eme,iHo,dHo,ome,cHo,fHo,rme,mHo,gHo,hHo,tme,m6,ame,pHo,_Ho,Dq,uHo,bHo,vHo,g6,THo,nme,FHo,CHo,sme,MHo,EHo,lme,yHo,wHo,xy,NRe,cc,h6,ime,ky,AHo,dme,LHo,qRe,ur,Ry,BHo,fc,xHo,cme,kHo,RHo,fme,SHo,PHo,$Ho,Sy,IHo,mme,jHo,DHo,NHo,mt,Py,qHo,gme,GHo,OHo,mc,XHo,hme,VHo,zHo,pme,WHo,QHo,HHo,_me,UHo,JHo,$y,YHo,to,Iy,KHo,ume,ZHo,eUo,un,oUo,bme,rUo,tUo,vme,aUo,nUo,Tme,sUo,lUo,iUo,Fme,p6,Cme,dUo,cUo,Nq,fUo,mUo,gUo,_6,hUo,Mme,pUo,_Uo,Eme,uUo,bUo,yme,vUo,TUo,jy,GRe,gc,u6,wme,Dy,FUo,Ame,CUo,ORe,br,Ny,MUo,hc,EUo,Lme,yUo,wUo,Bme,AUo,LUo,BUo,qy,xUo,xme,kUo,RUo,SUo,gt,Gy,PUo,kme,$Uo,IUo,pc,jUo,Rme,DUo,NUo,Sme,qUo,GUo,OUo,Pme,XUo,VUo,Oy,zUo,ao,Xy,WUo,$me,QUo,HUo,bn,UUo,Ime,JUo,YUo,jme,KUo,ZUo,Dme,eJo,oJo,rJo,Vy,b6,Nme,tJo,aJo,qq,nJo,sJo,lJo,v6,qme,iJo,dJo,Gq,cJo,fJo,mJo,T6,gJo,Gme,hJo,pJo,Ome,_Jo,uJo,Xme,bJo,vJo,zy,XRe,_c,F6,Vme,Wy,TJo,zme,FJo,VRe,vr,Qy,CJo,uc,MJo,Wme,EJo,yJo,Qme,wJo,AJo,LJo,Hy,BJo,Hme,xJo,kJo,RJo,ht,Uy,SJo,Ume,PJo,$Jo,bc,IJo,Jme,jJo,DJo,Yme,NJo,qJo,GJo,Kme,OJo,XJo,Jy,VJo,no,Yy,zJo,Zme,WJo,QJo,vn,HJo,ege,UJo,JJo,oge,YJo,KJo,rge,ZJo,eYo,oYo,tge,C6,age,rYo,tYo,Oq,aYo,nYo,sYo,M6,lYo,nge,iYo,dYo,sge,cYo,fYo,lge,mYo,gYo,Ky,zRe,vc,E6,ige,Zy,hYo,dge,pYo,WRe,Tr,ew,_Yo,Tc,uYo,cge,bYo,vYo,fge,TYo,FYo,CYo,ow,MYo,mge,EYo,yYo,wYo,pt,rw,AYo,gge,LYo,BYo,Fc,xYo,hge,kYo,RYo,pge,SYo,PYo,$Yo,_ge,IYo,jYo,tw,DYo,ho,aw,NYo,uge,qYo,GYo,Tn,OYo,bge,XYo,VYo,vge,zYo,WYo,Tge,QYo,HYo,UYo,B,y6,Fge,JYo,YYo,Xq,KYo,ZYo,eKo,w6,Cge,oKo,rKo,Vq,tKo,aKo,nKo,A6,Mge,sKo,lKo,zq,iKo,dKo,cKo,L6,Ege,fKo,mKo,Wq,gKo,hKo,pKo,B6,yge,_Ko,uKo,Qq,bKo,vKo,TKo,x6,wge,FKo,CKo,Hq,MKo,EKo,yKo,k6,Age,wKo,AKo,Uq,LKo,BKo,xKo,R6,Lge,kKo,RKo,Jq,SKo,PKo,$Ko,S6,Bge,IKo,jKo,Yq,DKo,NKo,qKo,P6,xge,GKo,OKo,Kq,XKo,VKo,zKo,$6,kge,WKo,QKo,Zq,HKo,UKo,JKo,I6,Rge,YKo,KKo,eG,ZKo,eZo,oZo,j6,Sge,rZo,tZo,oG,aZo,nZo,sZo,D6,Pge,lZo,iZo,rG,dZo,cZo,fZo,N6,$ge,mZo,gZo,tG,hZo,pZo,_Zo,q6,Ige,uZo,bZo,aG,vZo,TZo,FZo,Ws,jge,CZo,MZo,nG,EZo,yZo,sG,wZo,AZo,LZo,G6,Dge,BZo,xZo,lG,kZo,RZo,SZo,O6,Nge,PZo,$Zo,iG,IZo,jZo,DZo,X6,qge,NZo,qZo,dG,GZo,OZo,XZo,V6,Gge,VZo,zZo,cG,WZo,QZo,HZo,z6,Oge,UZo,JZo,fG,YZo,KZo,ZZo,W6,Xge,eer,oer,mG,rer,ter,aer,Q6,Vge,ner,ser,gG,ler,ier,der,H6,zge,cer,fer,hG,mer,ger,her,U6,Wge,per,_er,pG,uer,ber,ver,J6,Qge,Ter,Fer,_G,Cer,Mer,Eer,Y6,Hge,yer,wer,uG,Aer,Ler,Ber,K6,Uge,xer,ker,bG,Rer,Ser,Per,Z6,Jge,$er,Ier,vG,jer,Der,Ner,e0,Yge,qer,Ger,TG,Oer,Xer,Ver,o0,Kge,zer,Wer,FG,Qer,Her,Uer,r0,Zge,Jer,Yer,CG,Ker,Zer,eor,t0,ehe,oor,ror,MG,tor,aor,nor,a0,ohe,sor,lor,EG,ior,dor,cor,n0,rhe,mor,gor,yG,hor,por,_or,s0,the,uor,bor,wG,vor,Tor,For,l0,ahe,Cor,Mor,AG,Eor,yor,wor,i0,nhe,Aor,Lor,LG,Bor,xor,kor,d0,she,Ror,Sor,BG,Por,$or,Ior,c0,lhe,jor,Dor,xG,Nor,qor,Gor,f0,ihe,Oor,Xor,kG,Vor,zor,Wor,dhe,Qor,Hor,nw,QRe,Cc,m0,che,sw,Uor,fhe,Jor,HRe,Fr,lw,Yor,Mc,Kor,mhe,Zor,err,ghe,orr,rrr,trr,iw,arr,hhe,nrr,srr,lrr,_t,dw,irr,phe,drr,crr,Ec,frr,_he,mrr,grr,uhe,hrr,prr,_rr,bhe,urr,brr,cw,vrr,po,fw,Trr,vhe,Frr,Crr,Fn,Mrr,The,Err,yrr,Fhe,wrr,Arr,Che,Lrr,Brr,xrr,H,g0,Mhe,krr,Rrr,RG,Srr,Prr,$rr,h0,Ehe,Irr,jrr,SG,Drr,Nrr,qrr,p0,yhe,Grr,Orr,PG,Xrr,Vrr,zrr,_0,whe,Wrr,Qrr,$G,Hrr,Urr,Jrr,u0,Ahe,Yrr,Krr,IG,Zrr,etr,otr,b0,Lhe,rtr,ttr,jG,atr,ntr,str,v0,Bhe,ltr,itr,DG,dtr,ctr,ftr,T0,xhe,mtr,gtr,NG,htr,ptr,_tr,F0,khe,utr,btr,qG,vtr,Ttr,Ftr,C0,Rhe,Ctr,Mtr,GG,Etr,ytr,wtr,M0,She,Atr,Ltr,OG,Btr,xtr,ktr,E0,Phe,Rtr,Str,XG,Ptr,$tr,Itr,y0,$he,jtr,Dtr,VG,Ntr,qtr,Gtr,w0,Ihe,Otr,Xtr,zG,Vtr,ztr,Wtr,A0,jhe,Qtr,Htr,WG,Utr,Jtr,Ytr,L0,Dhe,Ktr,Ztr,QG,ear,oar,rar,B0,Nhe,tar,aar,HG,nar,sar,lar,x0,qhe,iar,dar,UG,car,far,mar,k0,Ghe,gar,har,JG,par,_ar,uar,R0,Ohe,bar,Tar,YG,Far,Car,Mar,S0,Xhe,Ear,yar,KG,war,Aar,Lar,P0,Vhe,Bar,xar,ZG,kar,Rar,Sar,zhe,Par,$ar,mw,URe,yc,$0,Whe,gw,Iar,Qhe,jar,JRe,Cr,hw,Dar,wc,Nar,Hhe,qar,Gar,Uhe,Oar,Xar,Var,pw,zar,Jhe,War,Qar,Har,ut,_w,Uar,Yhe,Jar,Yar,Ac,Kar,Khe,Zar,enr,Zhe,onr,rnr,tnr,epe,anr,nnr,uw,snr,_o,bw,lnr,ope,inr,dnr,Cn,cnr,rpe,fnr,mnr,tpe,gnr,hnr,ape,pnr,_nr,unr,ge,I0,npe,bnr,vnr,eO,Tnr,Fnr,Cnr,j0,spe,Mnr,Enr,oO,ynr,wnr,Anr,D0,lpe,Lnr,Bnr,rO,xnr,knr,Rnr,N0,ipe,Snr,Pnr,tO,$nr,Inr,jnr,q0,dpe,Dnr,Nnr,aO,qnr,Gnr,Onr,G0,cpe,Xnr,Vnr,nO,znr,Wnr,Qnr,O0,fpe,Hnr,Unr,sO,Jnr,Ynr,Knr,X0,mpe,Znr,esr,lO,osr,rsr,tsr,V0,gpe,asr,nsr,iO,ssr,lsr,isr,z0,hpe,dsr,csr,dO,fsr,msr,gsr,W0,ppe,hsr,psr,cO,_sr,usr,bsr,_pe,vsr,Tsr,vw,YRe,Lc,Q0,upe,Tw,Fsr,bpe,Csr,KRe,Mr,Fw,Msr,Bc,Esr,vpe,ysr,wsr,Tpe,Asr,Lsr,Bsr,Cw,xsr,Fpe,ksr,Rsr,Ssr,bt,Mw,Psr,Cpe,$sr,Isr,xc,jsr,Mpe,Dsr,Nsr,Epe,qsr,Gsr,Osr,ype,Xsr,Vsr,Ew,zsr,uo,yw,Wsr,wpe,Qsr,Hsr,Mn,Usr,Ape,Jsr,Ysr,Lpe,Ksr,Zsr,Bpe,elr,olr,rlr,ww,H0,xpe,tlr,alr,fO,nlr,slr,llr,U0,kpe,ilr,dlr,mO,clr,flr,mlr,Rpe,glr,hlr,Aw,ZRe,kc,J0,Spe,Lw,plr,Ppe,_lr,eSe,Er,Bw,ulr,Rc,blr,$pe,vlr,Tlr,Ipe,Flr,Clr,Mlr,xw,Elr,jpe,ylr,wlr,Alr,vt,kw,Llr,Dpe,Blr,xlr,Sc,klr,Npe,Rlr,Slr,qpe,Plr,$lr,Ilr,Gpe,jlr,Dlr,Rw,Nlr,bo,Sw,qlr,Ope,Glr,Olr,En,Xlr,Xpe,Vlr,zlr,Vpe,Wlr,Qlr,zpe,Hlr,Ulr,Jlr,J,Y0,Wpe,Ylr,Klr,gO,Zlr,eir,oir,K0,Qpe,rir,tir,hO,air,nir,sir,Z0,Hpe,lir,iir,pO,dir,cir,fir,eT,Upe,mir,gir,_O,hir,pir,_ir,oT,Jpe,uir,bir,uO,vir,Tir,Fir,rT,Ype,Cir,Mir,bO,Eir,yir,wir,tT,Kpe,Air,Lir,vO,Bir,xir,kir,aT,Zpe,Rir,Sir,TO,Pir,$ir,Iir,nT,e_e,jir,Dir,FO,Nir,qir,Gir,sT,o_e,Oir,Xir,CO,Vir,zir,Wir,lT,r_e,Qir,Hir,MO,Uir,Jir,Yir,iT,t_e,Kir,Zir,EO,edr,odr,rdr,dT,a_e,tdr,adr,yO,ndr,sdr,ldr,cT,n_e,idr,ddr,wO,cdr,fdr,mdr,fT,s_e,gdr,hdr,AO,pdr,_dr,udr,mT,l_e,bdr,vdr,LO,Tdr,Fdr,Cdr,gT,i_e,Mdr,Edr,BO,ydr,wdr,Adr,hT,d_e,Ldr,Bdr,xO,xdr,kdr,Rdr,pT,c_e,Sdr,Pdr,kO,$dr,Idr,jdr,_T,f_e,Ddr,Ndr,RO,qdr,Gdr,Odr,m_e,Xdr,Vdr,Pw,oSe,Pc,uT,g_e,$w,zdr,h_e,Wdr,rSe,yr,Iw,Qdr,$c,Hdr,p_e,Udr,Jdr,__e,Ydr,Kdr,Zdr,jw,ecr,u_e,ocr,rcr,tcr,Tt,Dw,acr,b_e,ncr,scr,Ic,lcr,v_e,icr,dcr,T_e,ccr,fcr,mcr,F_e,gcr,hcr,Nw,pcr,vo,qw,_cr,C_e,ucr,bcr,yn,vcr,M_e,Tcr,Fcr,E_e,Ccr,Mcr,y_e,Ecr,ycr,wcr,_e,bT,w_e,Acr,Lcr,SO,Bcr,xcr,kcr,vT,A_e,Rcr,Scr,PO,Pcr,$cr,Icr,TT,L_e,jcr,Dcr,$O,Ncr,qcr,Gcr,FT,B_e,Ocr,Xcr,IO,Vcr,zcr,Wcr,CT,x_e,Qcr,Hcr,jO,Ucr,Jcr,Ycr,MT,k_e,Kcr,Zcr,DO,efr,ofr,rfr,ET,R_e,tfr,afr,NO,nfr,sfr,lfr,yT,S_e,ifr,dfr,qO,cfr,ffr,mfr,wT,P_e,gfr,hfr,GO,pfr,_fr,ufr,AT,$_e,bfr,vfr,OO,Tfr,Ffr,Cfr,I_e,Mfr,Efr,Gw,tSe,jc,LT,j_e,Ow,yfr,D_e,wfr,aSe,wr,Xw,Afr,Dc,Lfr,N_e,Bfr,xfr,q_e,kfr,Rfr,Sfr,Vw,Pfr,G_e,$fr,Ifr,jfr,Ft,zw,Dfr,O_e,Nfr,qfr,Nc,Gfr,X_e,Ofr,Xfr,V_e,Vfr,zfr,Wfr,z_e,Qfr,Hfr,Ww,Ufr,To,Qw,Jfr,W_e,Yfr,Kfr,wn,Zfr,Q_e,emr,omr,H_e,rmr,tmr,U_e,amr,nmr,smr,V,BT,J_e,lmr,imr,XO,dmr,cmr,fmr,xT,Y_e,mmr,gmr,VO,hmr,pmr,_mr,kT,K_e,umr,bmr,zO,vmr,Tmr,Fmr,RT,Z_e,Cmr,Mmr,WO,Emr,ymr,wmr,ST,eue,Amr,Lmr,QO,Bmr,xmr,kmr,PT,oue,Rmr,Smr,HO,Pmr,$mr,Imr,$T,rue,jmr,Dmr,UO,Nmr,qmr,Gmr,IT,tue,Omr,Xmr,JO,Vmr,zmr,Wmr,jT,aue,Qmr,Hmr,YO,Umr,Jmr,Ymr,DT,nue,Kmr,Zmr,KO,egr,ogr,rgr,NT,sue,tgr,agr,ZO,ngr,sgr,lgr,qT,lue,igr,dgr,eX,cgr,fgr,mgr,GT,iue,ggr,hgr,oX,pgr,_gr,ugr,OT,due,bgr,vgr,rX,Tgr,Fgr,Cgr,XT,cue,Mgr,Egr,tX,ygr,wgr,Agr,VT,fue,Lgr,Bgr,aX,xgr,kgr,Rgr,zT,mue,Sgr,Pgr,nX,$gr,Igr,jgr,WT,gue,Dgr,Ngr,sX,qgr,Ggr,Ogr,QT,hue,Xgr,Vgr,lX,zgr,Wgr,Qgr,HT,pue,Hgr,Ugr,iX,Jgr,Ygr,Kgr,UT,_ue,Zgr,ehr,dX,ohr,rhr,thr,JT,uue,ahr,nhr,cX,shr,lhr,ihr,YT,bue,dhr,chr,fX,fhr,mhr,ghr,KT,vue,hhr,phr,mX,_hr,uhr,bhr,ZT,Tue,vhr,Thr,gX,Fhr,Chr,Mhr,Fue,Ehr,yhr,Hw,nSe,qc,e8,Cue,Uw,whr,Mue,Ahr,sSe,Ar,Jw,Lhr,Gc,Bhr,Eue,xhr,khr,yue,Rhr,Shr,Phr,Yw,$hr,wue,Ihr,jhr,Dhr,Ct,Kw,Nhr,Aue,qhr,Ghr,Oc,Ohr,Lue,Xhr,Vhr,Bue,zhr,Whr,Qhr,xue,Hhr,Uhr,Zw,Jhr,Fo,eA,Yhr,kue,Khr,Zhr,An,epr,Rue,opr,rpr,Sue,tpr,apr,Pue,npr,spr,lpr,ae,o8,$ue,ipr,dpr,hX,cpr,fpr,mpr,r8,Iue,gpr,hpr,pX,ppr,_pr,upr,t8,jue,bpr,vpr,_X,Tpr,Fpr,Cpr,a8,Due,Mpr,Epr,uX,ypr,wpr,Apr,n8,Nue,Lpr,Bpr,bX,xpr,kpr,Rpr,s8,que,Spr,Ppr,vX,$pr,Ipr,jpr,l8,Gue,Dpr,Npr,TX,qpr,Gpr,Opr,i8,Oue,Xpr,Vpr,FX,zpr,Wpr,Qpr,d8,Xue,Hpr,Upr,CX,Jpr,Ypr,Kpr,c8,Vue,Zpr,e_r,MX,o_r,r_r,t_r,f8,zue,a_r,n_r,EX,s_r,l_r,i_r,m8,Wue,d_r,c_r,yX,f_r,m_r,g_r,g8,Que,h_r,p_r,wX,__r,u_r,b_r,h8,Hue,v_r,T_r,AX,F_r,C_r,M_r,p8,Uue,E_r,y_r,LX,w_r,A_r,L_r,_8,Jue,B_r,x_r,BX,k_r,R_r,S_r,u8,Yue,P_r,$_r,xX,I_r,j_r,D_r,Kue,N_r,q_r,oA,lSe,Xc,b8,Zue,rA,G_r,e1e,O_r,iSe,Lr,tA,X_r,Vc,V_r,o1e,z_r,W_r,r1e,Q_r,H_r,U_r,aA,J_r,t1e,Y_r,K_r,Z_r,Mt,nA,eur,a1e,our,rur,zc,tur,n1e,aur,nur,s1e,sur,lur,iur,l1e,dur,cur,sA,fur,Co,lA,mur,i1e,gur,hur,Ln,pur,d1e,_ur,uur,c1e,bur,vur,f1e,Tur,Fur,Cur,m1e,v8,g1e,Mur,Eur,kX,yur,wur,Aur,h1e,Lur,Bur,iA,dSe,Wc,T8,p1e,dA,xur,_1e,kur,cSe,Br,cA,Rur,Qc,Sur,u1e,Pur,$ur,b1e,Iur,jur,Dur,fA,Nur,v1e,qur,Gur,Our,Et,mA,Xur,T1e,Vur,zur,Hc,Wur,F1e,Qur,Hur,C1e,Uur,Jur,Yur,M1e,Kur,Zur,gA,e1r,Mo,hA,o1r,E1e,r1r,t1r,Bn,a1r,y1e,n1r,s1r,w1e,l1r,i1r,A1e,d1r,c1r,f1r,Y,F8,L1e,m1r,g1r,RX,h1r,p1r,_1r,C8,B1e,u1r,b1r,SX,v1r,T1r,F1r,M8,x1e,C1r,M1r,PX,E1r,y1r,w1r,E8,k1e,A1r,L1r,$X,B1r,x1r,k1r,y8,R1e,R1r,S1r,IX,P1r,$1r,I1r,w8,S1e,j1r,D1r,jX,N1r,q1r,G1r,A8,P1e,O1r,X1r,DX,V1r,z1r,W1r,L8,$1e,Q1r,H1r,NX,U1r,J1r,Y1r,B8,I1e,K1r,Z1r,qX,ebr,obr,rbr,x8,j1e,tbr,abr,GX,nbr,sbr,lbr,k8,D1e,ibr,dbr,OX,cbr,fbr,mbr,R8,N1e,gbr,hbr,XX,pbr,_br,ubr,S8,q1e,bbr,vbr,VX,Tbr,Fbr,Cbr,P8,G1e,Mbr,Ebr,zX,ybr,wbr,Abr,$8,O1e,Lbr,Bbr,WX,xbr,kbr,Rbr,I8,X1e,Sbr,Pbr,QX,$br,Ibr,jbr,j8,V1e,Dbr,Nbr,HX,qbr,Gbr,Obr,D8,z1e,Xbr,Vbr,UX,zbr,Wbr,Qbr,N8,W1e,Hbr,Ubr,JX,Jbr,Ybr,Kbr,q8,Q1e,Zbr,e5r,YX,o5r,r5r,t5r,H1e,a5r,n5r,pA,fSe,Uc,G8,U1e,_A,s5r,J1e,l5r,mSe,xr,uA,i5r,Jc,d5r,Y1e,c5r,f5r,K1e,m5r,g5r,h5r,bA,p5r,Z1e,_5r,u5r,b5r,yt,vA,v5r,ebe,T5r,F5r,Yc,C5r,obe,M5r,E5r,rbe,y5r,w5r,A5r,tbe,L5r,B5r,TA,x5r,Eo,FA,k5r,abe,R5r,S5r,xn,P5r,nbe,$5r,I5r,sbe,j5r,D5r,lbe,N5r,q5r,G5r,Z,O8,ibe,O5r,X5r,KX,V5r,z5r,W5r,X8,dbe,Q5r,H5r,ZX,U5r,J5r,Y5r,V8,cbe,K5r,Z5r,eV,e2r,o2r,r2r,z8,fbe,t2r,a2r,oV,n2r,s2r,l2r,W8,mbe,i2r,d2r,rV,c2r,f2r,m2r,Q8,gbe,g2r,h2r,tV,p2r,_2r,u2r,H8,hbe,b2r,v2r,aV,T2r,F2r,C2r,U8,pbe,M2r,E2r,nV,y2r,w2r,A2r,J8,_be,L2r,B2r,sV,x2r,k2r,R2r,Y8,ube,S2r,P2r,lV,$2r,I2r,j2r,K8,bbe,D2r,N2r,iV,q2r,G2r,O2r,Z8,vbe,X2r,V2r,dV,z2r,W2r,Q2r,eF,Tbe,H2r,U2r,cV,J2r,Y2r,K2r,oF,Fbe,Z2r,evr,fV,ovr,rvr,tvr,rF,Cbe,avr,nvr,mV,svr,lvr,ivr,tF,Mbe,dvr,cvr,gV,fvr,mvr,gvr,aF,Ebe,hvr,pvr,hV,_vr,uvr,bvr,nF,ybe,vvr,Tvr,pV,Fvr,Cvr,Mvr,sF,wbe,Evr,yvr,_V,wvr,Avr,Lvr,Abe,Bvr,xvr,CA,gSe,Kc,lF,Lbe,MA,kvr,Bbe,Rvr,hSe,kr,EA,Svr,Zc,Pvr,xbe,$vr,Ivr,kbe,jvr,Dvr,Nvr,yA,qvr,Rbe,Gvr,Ovr,Xvr,wt,wA,Vvr,Sbe,zvr,Wvr,ef,Qvr,Pbe,Hvr,Uvr,$be,Jvr,Yvr,Kvr,Ibe,Zvr,e6r,AA,o6r,yo,LA,r6r,jbe,t6r,a6r,kn,n6r,Dbe,s6r,l6r,Nbe,i6r,d6r,qbe,c6r,f6r,m6r,Gbe,iF,Obe,g6r,h6r,uV,p6r,_6r,u6r,Xbe,b6r,v6r,BA,pSe,of,dF,Vbe,xA,T6r,zbe,F6r,_Se,Rr,kA,C6r,rf,M6r,Wbe,E6r,y6r,Qbe,w6r,A6r,L6r,RA,B6r,Hbe,x6r,k6r,R6r,At,SA,S6r,Ube,P6r,$6r,tf,I6r,Jbe,j6r,D6r,Ybe,N6r,q6r,G6r,Kbe,O6r,X6r,PA,V6r,wo,$A,z6r,Zbe,W6r,Q6r,Rn,H6r,e5e,U6r,J6r,o5e,Y6r,K6r,r5e,Z6r,e0r,o0r,t5e,cF,a5e,r0r,t0r,bV,a0r,n0r,s0r,n5e,l0r,i0r,IA,uSe,af,fF,s5e,jA,d0r,l5e,c0r,bSe,Sr,DA,f0r,nf,m0r,i5e,g0r,h0r,d5e,p0r,_0r,u0r,NA,b0r,c5e,v0r,T0r,F0r,Lt,qA,C0r,f5e,M0r,E0r,sf,y0r,m5e,w0r,A0r,g5e,L0r,B0r,x0r,h5e,k0r,R0r,GA,S0r,Ao,OA,P0r,p5e,$0r,I0r,Sn,j0r,_5e,D0r,N0r,u5e,q0r,G0r,b5e,O0r,X0r,V0r,z,mF,v5e,z0r,W0r,vV,Q0r,H0r,U0r,gF,T5e,J0r,Y0r,TV,K0r,Z0r,eTr,hF,F5e,oTr,rTr,FV,tTr,aTr,nTr,pF,C5e,sTr,lTr,CV,iTr,dTr,cTr,_F,M5e,fTr,mTr,MV,gTr,hTr,pTr,uF,E5e,_Tr,uTr,EV,bTr,vTr,TTr,bF,y5e,FTr,CTr,yV,MTr,ETr,yTr,vF,w5e,wTr,ATr,wV,LTr,BTr,xTr,TF,A5e,kTr,RTr,AV,STr,PTr,$Tr,FF,L5e,ITr,jTr,LV,DTr,NTr,qTr,CF,B5e,GTr,OTr,BV,XTr,VTr,zTr,MF,x5e,WTr,QTr,xV,HTr,UTr,JTr,EF,k5e,YTr,KTr,kV,ZTr,e8r,o8r,yF,R5e,r8r,t8r,RV,a8r,n8r,s8r,wF,S5e,l8r,i8r,SV,d8r,c8r,f8r,AF,P5e,m8r,g8r,PV,h8r,p8r,_8r,LF,$5e,u8r,b8r,$V,v8r,T8r,F8r,BF,I5e,C8r,M8r,IV,E8r,y8r,w8r,xF,j5e,A8r,L8r,jV,B8r,x8r,k8r,kF,D5e,R8r,S8r,DV,P8r,$8r,I8r,RF,N5e,j8r,D8r,NV,N8r,q8r,G8r,SF,q5e,O8r,X8r,qV,V8r,z8r,W8r,PF,G5e,Q8r,H8r,GV,U8r,J8r,Y8r,$F,O5e,K8r,Z8r,OV,eFr,oFr,rFr,IF,X5e,tFr,aFr,XV,nFr,sFr,lFr,V5e,iFr,dFr,XA,vSe,lf,jF,z5e,VA,cFr,W5e,fFr,TSe,Pr,zA,mFr,df,gFr,Q5e,hFr,pFr,H5e,_Fr,uFr,bFr,WA,vFr,U5e,TFr,FFr,CFr,Bt,QA,MFr,J5e,EFr,yFr,cf,wFr,Y5e,AFr,LFr,K5e,BFr,xFr,kFr,Z5e,RFr,SFr,HA,PFr,Lo,UA,$Fr,e2e,IFr,jFr,Pn,DFr,o2e,NFr,qFr,r2e,GFr,OFr,t2e,XFr,VFr,zFr,ga,DF,a2e,WFr,QFr,VV,HFr,UFr,JFr,NF,n2e,YFr,KFr,zV,ZFr,eCr,oCr,qF,s2e,rCr,tCr,WV,aCr,nCr,sCr,GF,l2e,lCr,iCr,QV,dCr,cCr,fCr,OF,i2e,mCr,gCr,HV,hCr,pCr,_Cr,d2e,uCr,bCr,JA,FSe,ff,XF,c2e,YA,vCr,f2e,TCr,CSe,$r,KA,FCr,mf,CCr,m2e,MCr,ECr,g2e,yCr,wCr,ACr,ZA,LCr,h2e,BCr,xCr,kCr,xt,eL,RCr,p2e,SCr,PCr,gf,$Cr,_2e,ICr,jCr,u2e,DCr,NCr,qCr,b2e,GCr,OCr,oL,XCr,Bo,rL,VCr,v2e,zCr,WCr,$n,QCr,T2e,HCr,UCr,F2e,JCr,YCr,C2e,KCr,ZCr,eMr,ce,VF,M2e,oMr,rMr,UV,tMr,aMr,nMr,zF,E2e,sMr,lMr,JV,iMr,dMr,cMr,WF,y2e,fMr,mMr,YV,gMr,hMr,pMr,QF,w2e,_Mr,uMr,KV,bMr,vMr,TMr,HF,A2e,FMr,CMr,ZV,MMr,EMr,yMr,UF,L2e,wMr,AMr,ez,LMr,BMr,xMr,JF,B2e,kMr,RMr,oz,SMr,PMr,$Mr,YF,x2e,IMr,jMr,rz,DMr,NMr,qMr,KF,k2e,GMr,OMr,tz,XMr,VMr,zMr,ZF,R2e,WMr,QMr,az,HMr,UMr,JMr,eC,S2e,YMr,KMr,nz,ZMr,e4r,o4r,oC,P2e,r4r,t4r,sz,a4r,n4r,s4r,$2e,l4r,i4r,tL,MSe,hf,rC,I2e,aL,d4r,j2e,c4r,ESe,Ir,nL,f4r,pf,m4r,D2e,g4r,h4r,N2e,p4r,_4r,u4r,sL,b4r,q2e,v4r,T4r,F4r,kt,lL,C4r,G2e,M4r,E4r,_f,y4r,O2e,w4r,A4r,X2e,L4r,B4r,x4r,V2e,k4r,R4r,iL,S4r,xo,dL,P4r,z2e,$4r,I4r,In,j4r,W2e,D4r,N4r,Q2e,q4r,G4r,H2e,O4r,X4r,V4r,ue,tC,U2e,z4r,W4r,lz,Q4r,H4r,U4r,aC,J2e,J4r,Y4r,iz,K4r,Z4r,eEr,nC,Y2e,oEr,rEr,dz,tEr,aEr,nEr,sC,K2e,sEr,lEr,cz,iEr,dEr,cEr,lC,Z2e,fEr,mEr,fz,gEr,hEr,pEr,iC,eve,_Er,uEr,mz,bEr,vEr,TEr,dC,ove,FEr,CEr,gz,MEr,EEr,yEr,cC,rve,wEr,AEr,hz,LEr,BEr,xEr,fC,tve,kEr,REr,pz,SEr,PEr,$Er,mC,ave,IEr,jEr,_z,DEr,NEr,qEr,nve,GEr,OEr,cL,ySe,uf,gC,sve,fL,XEr,lve,VEr,wSe,jr,mL,zEr,bf,WEr,ive,QEr,HEr,dve,UEr,JEr,YEr,gL,KEr,cve,ZEr,e3r,o3r,Rt,hL,r3r,fve,t3r,a3r,vf,n3r,mve,s3r,l3r,gve,i3r,d3r,c3r,hve,f3r,m3r,pL,g3r,ko,_L,h3r,pve,p3r,_3r,jn,u3r,_ve,b3r,v3r,uve,T3r,F3r,bve,C3r,M3r,E3r,Me,hC,vve,y3r,w3r,uz,A3r,L3r,B3r,pC,Tve,x3r,k3r,bz,R3r,S3r,P3r,_C,Fve,$3r,I3r,vz,j3r,D3r,N3r,uC,Cve,q3r,G3r,Tz,O3r,X3r,V3r,bC,Mve,z3r,W3r,Fz,Q3r,H3r,U3r,vC,Eve,J3r,Y3r,Cz,K3r,Z3r,eyr,TC,yve,oyr,ryr,Mz,tyr,ayr,nyr,FC,wve,syr,lyr,Ez,iyr,dyr,cyr,CC,Ave,fyr,myr,yz,gyr,hyr,pyr,Lve,_yr,uyr,uL,ASe,Tf,MC,Bve,bL,byr,xve,vyr,LSe,Dr,vL,Tyr,Ff,Fyr,kve,Cyr,Myr,Rve,Eyr,yyr,wyr,TL,Ayr,Sve,Lyr,Byr,xyr,St,FL,kyr,Pve,Ryr,Syr,Cf,Pyr,$ve,$yr,Iyr,Ive,jyr,Dyr,Nyr,jve,qyr,Gyr,CL,Oyr,Ro,ML,Xyr,Dve,Vyr,zyr,Dn,Wyr,Nve,Qyr,Hyr,qve,Uyr,Jyr,Gve,Yyr,Kyr,Zyr,be,EC,Ove,ewr,owr,wz,rwr,twr,awr,yC,Xve,nwr,swr,Az,lwr,iwr,dwr,wC,Vve,cwr,fwr,Lz,mwr,gwr,hwr,AC,zve,pwr,_wr,Bz,uwr,bwr,vwr,LC,Wve,Twr,Fwr,xz,Cwr,Mwr,Ewr,BC,Qve,ywr,wwr,kz,Awr,Lwr,Bwr,xC,Hve,xwr,kwr,Rz,Rwr,Swr,Pwr,kC,Uve,$wr,Iwr,Sz,jwr,Dwr,Nwr,RC,Jve,qwr,Gwr,Pz,Owr,Xwr,Vwr,SC,Yve,zwr,Wwr,$z,Qwr,Hwr,Uwr,Kve,Jwr,Ywr,EL,BSe,Mf,PC,Zve,yL,Kwr,e6e,Zwr,xSe,Nr,wL,eAr,Ef,oAr,o6e,rAr,tAr,r6e,aAr,nAr,sAr,AL,lAr,t6e,iAr,dAr,cAr,Pt,LL,fAr,a6e,mAr,gAr,yf,hAr,n6e,pAr,_Ar,s6e,uAr,bAr,vAr,l6e,TAr,FAr,BL,CAr,So,xL,MAr,i6e,EAr,yAr,Nn,wAr,d6e,AAr,LAr,c6e,BAr,xAr,f6e,kAr,RAr,SAr,m6e,$C,g6e,PAr,$Ar,Iz,IAr,jAr,DAr,h6e,NAr,qAr,kL,kSe,wf,IC,p6e,RL,GAr,_6e,OAr,RSe,qr,SL,XAr,Af,VAr,u6e,zAr,WAr,b6e,QAr,HAr,UAr,PL,JAr,v6e,YAr,KAr,ZAr,$t,$L,eLr,T6e,oLr,rLr,Lf,tLr,F6e,aLr,nLr,C6e,sLr,lLr,iLr,M6e,dLr,cLr,IL,fLr,Po,jL,mLr,E6e,gLr,hLr,qn,pLr,y6e,_Lr,uLr,w6e,bLr,vLr,A6e,TLr,FLr,CLr,ve,jC,L6e,MLr,ELr,jz,yLr,wLr,ALr,DC,B6e,LLr,BLr,Dz,xLr,kLr,RLr,NC,x6e,SLr,PLr,Nz,$Lr,ILr,jLr,qC,k6e,DLr,NLr,qz,qLr,GLr,OLr,GC,R6e,XLr,VLr,Gz,zLr,WLr,QLr,OC,S6e,HLr,ULr,Oz,JLr,YLr,KLr,XC,P6e,ZLr,e7r,Xz,o7r,r7r,t7r,VC,$6e,a7r,n7r,Vz,s7r,l7r,i7r,zC,I6e,d7r,c7r,zz,f7r,m7r,g7r,WC,j6e,h7r,p7r,Wz,_7r,u7r,b7r,D6e,v7r,T7r,DL,SSe,Bf,QC,N6e,NL,F7r,q6e,C7r,PSe,Gr,qL,M7r,xf,E7r,G6e,y7r,w7r,O6e,A7r,L7r,B7r,GL,x7r,X6e,k7r,R7r,S7r,It,OL,P7r,V6e,$7r,I7r,kf,j7r,z6e,D7r,N7r,W6e,q7r,G7r,O7r,Q6e,X7r,V7r,XL,z7r,$o,VL,W7r,H6e,Q7r,H7r,Gn,U7r,U6e,J7r,Y7r,J6e,K7r,Z7r,Y6e,e9r,o9r,r9r,Se,HC,K6e,t9r,a9r,Qz,n9r,s9r,l9r,UC,Z6e,i9r,d9r,Hz,c9r,f9r,m9r,JC,e0e,g9r,h9r,Uz,p9r,_9r,u9r,YC,o0e,b9r,v9r,Jz,T9r,F9r,C9r,KC,r0e,M9r,E9r,Yz,y9r,w9r,A9r,ZC,t0e,L9r,B9r,Kz,x9r,k9r,R9r,eM,a0e,S9r,P9r,Zz,$9r,I9r,j9r,oM,n0e,D9r,N9r,eW,q9r,G9r,O9r,s0e,X9r,V9r,zL,$Se,Rf,rM,l0e,WL,z9r,i0e,W9r,ISe,Or,QL,Q9r,Sf,H9r,d0e,U9r,J9r,c0e,Y9r,K9r,Z9r,HL,eBr,f0e,oBr,rBr,tBr,jt,UL,aBr,m0e,nBr,sBr,Pf,lBr,g0e,iBr,dBr,h0e,cBr,fBr,mBr,p0e,gBr,hBr,JL,pBr,Io,YL,_Br,_0e,uBr,bBr,On,vBr,u0e,TBr,FBr,b0e,CBr,MBr,v0e,EBr,yBr,wBr,Pe,tM,T0e,ABr,LBr,oW,BBr,xBr,kBr,aM,F0e,RBr,SBr,rW,PBr,$Br,IBr,nM,C0e,jBr,DBr,tW,NBr,qBr,GBr,sM,M0e,OBr,XBr,aW,VBr,zBr,WBr,lM,E0e,QBr,HBr,nW,UBr,JBr,YBr,iM,y0e,KBr,ZBr,sW,exr,oxr,rxr,dM,w0e,txr,axr,lW,nxr,sxr,lxr,cM,A0e,ixr,dxr,iW,cxr,fxr,mxr,L0e,gxr,hxr,KL,jSe,$f,fM,B0e,ZL,pxr,x0e,_xr,DSe,Xr,e7,uxr,If,bxr,k0e,vxr,Txr,R0e,Fxr,Cxr,Mxr,o7,Exr,S0e,yxr,wxr,Axr,Dt,r7,Lxr,P0e,Bxr,xxr,jf,kxr,$0e,Rxr,Sxr,I0e,Pxr,$xr,Ixr,j0e,jxr,Dxr,t7,Nxr,jo,a7,qxr,D0e,Gxr,Oxr,Xn,Xxr,N0e,Vxr,zxr,q0e,Wxr,Qxr,G0e,Hxr,Uxr,Jxr,O0e,mM,X0e,Yxr,Kxr,dW,Zxr,ekr,okr,V0e,rkr,tkr,n7,NSe,Df,gM,z0e,s7,akr,W0e,nkr,qSe,Vr,l7,skr,Nf,lkr,Q0e,ikr,dkr,H0e,ckr,fkr,mkr,i7,gkr,U0e,hkr,pkr,_kr,Nt,d7,ukr,J0e,bkr,vkr,qf,Tkr,Y0e,Fkr,Ckr,K0e,Mkr,Ekr,ykr,Z0e,wkr,Akr,c7,Lkr,Do,f7,Bkr,eTe,xkr,kkr,Vn,Rkr,oTe,Skr,Pkr,rTe,$kr,Ikr,tTe,jkr,Dkr,Nkr,m7,hM,aTe,qkr,Gkr,cW,Okr,Xkr,Vkr,pM,nTe,zkr,Wkr,fW,Qkr,Hkr,Ukr,sTe,Jkr,Ykr,g7,GSe,Gf,_M,lTe,h7,Kkr,iTe,Zkr,OSe,zr,p7,eRr,Of,oRr,dTe,rRr,tRr,cTe,aRr,nRr,sRr,_7,lRr,fTe,iRr,dRr,cRr,qt,u7,fRr,mTe,mRr,gRr,Xf,hRr,gTe,pRr,_Rr,hTe,uRr,bRr,vRr,pTe,TRr,FRr,b7,CRr,No,v7,MRr,_Te,ERr,yRr,zn,wRr,uTe,ARr,LRr,bTe,BRr,xRr,vTe,kRr,RRr,SRr,TTe,uM,FTe,PRr,$Rr,mW,IRr,jRr,DRr,CTe,NRr,qRr,T7,XSe;return fe=new X({}),Va=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),C4=new X({}),M4=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Yf=new GRr({props:{warning:!0,$$slots:{default:[lMt]},$$scope:{ctx:zf}}}),E4=new X({}),y4=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/configuration_auto.py#L538"}}),L4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/configuration_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),B4=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),x4=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/configuration_auto.py#L683",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),k4=new X({}),R4=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/tokenization_auto.py#L351"}}),$4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16058/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),I4=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),j4=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),D4=new X({}),N4=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),O4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/feature_extraction_auto.py#L185",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16058/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),qh=new GRr({props:{$$slots:{default:[iMt]},$$scope:{ctx:zf}}}),X4=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),V4=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/feature_extraction_auto.py#L312",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),z4=new X({}),W4=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/processing_auto.py#L70"}}),U4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/processing_auto.py#L84",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Yh=new GRr({props:{$$slots:{default:[dMt]},$$scope:{ctx:zf}}}),J4=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),Y4=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/processing_auto.py#L237",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),K4=new X({}),Z4=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L705"}}),oE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),rE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),tE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),aE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nE=new X({}),sE=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L712"}}),iE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),dE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),cE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mE=new X({}),gE=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L727"}}),pE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),_E=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),uE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vE=new X({}),TE=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L734"}}),CE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),ME=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),EE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wE=new X({}),AE=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L741"}}),BE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),xE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),kE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),RE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),SE=new X({}),PE=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L750"}}),IE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),jE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),DE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),NE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qE=new X({}),GE=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L784"}}),XE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),VE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),zE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),WE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),QE=new X({}),HE=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L791"}}),JE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),YE=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),KE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ZE=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),e3=new X({}),o3=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L777"}}),t3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),a3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),n3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),s3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),l3=new X({}),i3=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L759"}}),c3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),f3=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),m3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),g3=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),h3=new X({}),p3=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L766"}}),u3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),b3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),v3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),T3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F3=new X({}),C3=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L800"}}),E3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),y3=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),w3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),A3=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),L3=new X({}),B3=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L839"}}),k3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),R3=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),S3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),P3=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$3=new X({}),I3=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L846"}}),D3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),N3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),q3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),G3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),O3=new X({}),X3=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L869"}}),z3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),W3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Q3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),H3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),U3=new X({}),J3=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L853"}}),K3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Z3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),ey=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),oy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ry=new X({}),ty=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L860"}}),ny=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),sy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),ly=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cy=new X({}),fy=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L878"}}),gy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),hy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),py=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_y=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uy=new X({}),by=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L885"}}),Ty=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Fy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),Cy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),My=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ey=new X({}),yy=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L832"}}),Ay=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),Ly=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),By=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xy=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ky=new X({}),Ry=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L807"}}),Py=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),$y=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),Iy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Dy=new X({}),Ny=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L814"}}),Gy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),Oy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),Xy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Wy=new X({}),Qy=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_auto.py#L823"}}),Uy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),Jy=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),Yy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ky=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Zy=new X({}),ew=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L374"}}),rw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),tw=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),aw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nw=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sw=new X({}),lw=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),dw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),cw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),fw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gw=new X({}),hw=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),_w=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),uw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),bw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Tw=new X({}),Fw=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),Mw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Ew=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),yw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Aw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Lw=new X({}),Bw=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),kw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),Rw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),Sw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Pw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$w=new X({}),Iw=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),Dw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),Nw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),qw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Gw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ow=new X({}),Xw=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),zw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Ww=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),Qw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Hw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Uw=new X({}),Jw=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),Kw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Zw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),eA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),oA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rA=new X({}),tA=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),nA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),sA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),lA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dA=new X({}),cA=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),mA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),gA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),hA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),pA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_A=new X({}),uA=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),vA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),TA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),FA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),CA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),MA=new X({}),EA=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),wA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),AA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),LA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),BA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xA=new X({}),kA=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),SA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),PA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),$A=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),IA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jA=new X({}),DA=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),qA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),GA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),OA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),XA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),VA=new X({}),zA=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),QA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),HA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),UA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),JA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),YA=new X({}),KA=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),eL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),oL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),rL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),tL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aL=new X({}),nL=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),lL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),iL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),dL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fL=new X({}),mL=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),hL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),pL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),_L=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bL=new X({}),vL=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),FL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),CL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),ML=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),EL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yL=new X({}),wL=new M({props:{name:"class transformers.FlaxAutoModelForSpeechSeq2Seq",anchor:"transformers.FlaxAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L331"}}),LL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.FlaxSpeechEncoderDecoderModel">FlaxSpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),BL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSpeechSeq2Seq.from_config(config)`}}),xL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),kL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RL=new X({}),SL=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),$L=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),IL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),jL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),DL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),NL=new X({}),qL=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),OL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),XL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),VL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),WL=new X({}),QL=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),UL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),JL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),YL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),KL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZL=new X({}),e7=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),r7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),t7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),a7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),n7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),s7=new X({}),l7=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),d7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),c7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),f7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),g7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),h7=new X({}),p7=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),u7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),b7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),v7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16058/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16058/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16058/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),T7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){K=a("meta"),io=l(),de=a("h1"),Ee=a("a"),lo=a("span"),f(fe.$$.fragment),Ce=l(),zo=a("span"),Xi=o("Auto Classes"),Wf=l(),ha=a("p"),Vi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),zi=a("code"),b4=o("from_pretrained()"),Qf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Be=l(),co=a("p"),Wi=o("Instantiating one of "),Wn=a("a"),v4=o("AutoConfig"),Qn=o(", "),Hn=a("a"),T4=o("AutoModel"),Qi=o(`, and
`),Un=a("a"),F4=o("AutoTokenizer"),Hi=o(" will directly create a class of the relevant architecture. For instance"),Hf=l(),f(Va.$$.fragment),fo=l(),pe=a("p"),b9=o("will create a model that is an instance of "),Ui=a("a"),v9=o("BertModel"),T9=o("."),Wo=l(),za=a("p"),F9=o("There is one class of "),Uf=a("code"),C9=o("AutoModel"),aIe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),qke=l(),Ji=a("h2"),Jf=a("a"),lH=a("span"),f(C4.$$.fragment),nIe=l(),iH=a("span"),sIe=o("Extending the Auto Classes"),Gke=l(),Jn=a("p"),lIe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),dH=a("code"),iIe=o("NewModel"),dIe=o(", make sure you have a "),cH=a("code"),cIe=o("NewModelConfig"),fIe=o(` then you can add those to the auto
classes like this:`),Oke=l(),f(M4.$$.fragment),Xke=l(),M9=a("p"),mIe=o("You will then be able to use the auto classes like you would usually do!"),Vke=l(),f(Yf.$$.fragment),zke=l(),Yi=a("h2"),Kf=a("a"),fH=a("span"),f(E4.$$.fragment),gIe=l(),mH=a("span"),hIe=o("AutoConfig"),Wke=l(),Qo=a("div"),f(y4.$$.fragment),pIe=l(),w4=a("p"),_Ie=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),E9=a("a"),uIe=o("from_pretrained()"),bIe=o(" class method."),vIe=l(),A4=a("p"),TIe=o("This class cannot be instantiated directly using "),gH=a("code"),FIe=o("__init__()"),CIe=o(" (throws an error)."),MIe=l(),mo=a("div"),f(L4.$$.fragment),EIe=l(),hH=a("p"),yIe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),wIe=l(),Ki=a("p"),AIe=o("The configuration class to instantiate is selected based on the "),pH=a("code"),LIe=o("model_type"),BIe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),_H=a("code"),xIe=o("pretrained_model_name_or_path"),kIe=o(":"),RIe=l(),v=a("ul"),Zf=a("li"),uH=a("strong"),SIe=o("albert"),PIe=o(" \u2014 "),y9=a("a"),$Ie=o("AlbertConfig"),IIe=o(" (ALBERT model)"),jIe=l(),em=a("li"),bH=a("strong"),DIe=o("bart"),NIe=o(" \u2014 "),w9=a("a"),qIe=o("BartConfig"),GIe=o(" (BART model)"),OIe=l(),om=a("li"),vH=a("strong"),XIe=o("beit"),VIe=o(" \u2014 "),A9=a("a"),zIe=o("BeitConfig"),WIe=o(" (BEiT model)"),QIe=l(),rm=a("li"),TH=a("strong"),HIe=o("bert"),UIe=o(" \u2014 "),L9=a("a"),JIe=o("BertConfig"),YIe=o(" (BERT model)"),KIe=l(),tm=a("li"),FH=a("strong"),ZIe=o("bert-generation"),eje=o(" \u2014 "),B9=a("a"),oje=o("BertGenerationConfig"),rje=o(" (Bert Generation model)"),tje=l(),am=a("li"),CH=a("strong"),aje=o("big_bird"),nje=o(" \u2014 "),x9=a("a"),sje=o("BigBirdConfig"),lje=o(" (BigBird model)"),ije=l(),nm=a("li"),MH=a("strong"),dje=o("bigbird_pegasus"),cje=o(" \u2014 "),k9=a("a"),fje=o("BigBirdPegasusConfig"),mje=o(" (BigBirdPegasus model)"),gje=l(),sm=a("li"),EH=a("strong"),hje=o("blenderbot"),pje=o(" \u2014 "),R9=a("a"),_je=o("BlenderbotConfig"),uje=o(" (Blenderbot model)"),bje=l(),lm=a("li"),yH=a("strong"),vje=o("blenderbot-small"),Tje=o(" \u2014 "),S9=a("a"),Fje=o("BlenderbotSmallConfig"),Cje=o(" (BlenderbotSmall model)"),Mje=l(),im=a("li"),wH=a("strong"),Eje=o("camembert"),yje=o(" \u2014 "),P9=a("a"),wje=o("CamembertConfig"),Aje=o(" (CamemBERT model)"),Lje=l(),dm=a("li"),AH=a("strong"),Bje=o("canine"),xje=o(" \u2014 "),$9=a("a"),kje=o("CanineConfig"),Rje=o(" (Canine model)"),Sje=l(),cm=a("li"),LH=a("strong"),Pje=o("clip"),$je=o(" \u2014 "),I9=a("a"),Ije=o("CLIPConfig"),jje=o(" (CLIP model)"),Dje=l(),fm=a("li"),BH=a("strong"),Nje=o("convbert"),qje=o(" \u2014 "),j9=a("a"),Gje=o("ConvBertConfig"),Oje=o(" (ConvBERT model)"),Xje=l(),mm=a("li"),xH=a("strong"),Vje=o("convnext"),zje=o(" \u2014 "),D9=a("a"),Wje=o("ConvNextConfig"),Qje=o(" (ConvNext model)"),Hje=l(),gm=a("li"),kH=a("strong"),Uje=o("ctrl"),Jje=o(" \u2014 "),N9=a("a"),Yje=o("CTRLConfig"),Kje=o(" (CTRL model)"),Zje=l(),hm=a("li"),RH=a("strong"),eDe=o("data2vec-audio"),oDe=o(" \u2014 "),q9=a("a"),rDe=o("Data2VecAudioConfig"),tDe=o(" (Data2VecAudio model)"),aDe=l(),pm=a("li"),SH=a("strong"),nDe=o("data2vec-text"),sDe=o(" \u2014 "),G9=a("a"),lDe=o("Data2VecTextConfig"),iDe=o(" (Data2VecText model)"),dDe=l(),_m=a("li"),PH=a("strong"),cDe=o("deberta"),fDe=o(" \u2014 "),O9=a("a"),mDe=o("DebertaConfig"),gDe=o(" (DeBERTa model)"),hDe=l(),um=a("li"),$H=a("strong"),pDe=o("deberta-v2"),_De=o(" \u2014 "),X9=a("a"),uDe=o("DebertaV2Config"),bDe=o(" (DeBERTa-v2 model)"),vDe=l(),bm=a("li"),IH=a("strong"),TDe=o("decision_transformer"),FDe=o(" \u2014 "),V9=a("a"),CDe=o("DecisionTransformerConfig"),MDe=o(" (Decision Transformer model)"),EDe=l(),vm=a("li"),jH=a("strong"),yDe=o("deit"),wDe=o(" \u2014 "),z9=a("a"),ADe=o("DeiTConfig"),LDe=o(" (DeiT model)"),BDe=l(),Tm=a("li"),DH=a("strong"),xDe=o("detr"),kDe=o(" \u2014 "),W9=a("a"),RDe=o("DetrConfig"),SDe=o(" (DETR model)"),PDe=l(),Fm=a("li"),NH=a("strong"),$De=o("distilbert"),IDe=o(" \u2014 "),Q9=a("a"),jDe=o("DistilBertConfig"),DDe=o(" (DistilBERT model)"),NDe=l(),Cm=a("li"),qH=a("strong"),qDe=o("dpr"),GDe=o(" \u2014 "),H9=a("a"),ODe=o("DPRConfig"),XDe=o(" (DPR model)"),VDe=l(),Mm=a("li"),GH=a("strong"),zDe=o("electra"),WDe=o(" \u2014 "),U9=a("a"),QDe=o("ElectraConfig"),HDe=o(" (ELECTRA model)"),UDe=l(),Em=a("li"),OH=a("strong"),JDe=o("encoder-decoder"),YDe=o(" \u2014 "),J9=a("a"),KDe=o("EncoderDecoderConfig"),ZDe=o(" (Encoder decoder model)"),eNe=l(),ym=a("li"),XH=a("strong"),oNe=o("flaubert"),rNe=o(" \u2014 "),Y9=a("a"),tNe=o("FlaubertConfig"),aNe=o(" (FlauBERT model)"),nNe=l(),wm=a("li"),VH=a("strong"),sNe=o("fnet"),lNe=o(" \u2014 "),K9=a("a"),iNe=o("FNetConfig"),dNe=o(" (FNet model)"),cNe=l(),Am=a("li"),zH=a("strong"),fNe=o("fsmt"),mNe=o(" \u2014 "),Z9=a("a"),gNe=o("FSMTConfig"),hNe=o(" (FairSeq Machine-Translation model)"),pNe=l(),Lm=a("li"),WH=a("strong"),_Ne=o("funnel"),uNe=o(" \u2014 "),eB=a("a"),bNe=o("FunnelConfig"),vNe=o(" (Funnel Transformer model)"),TNe=l(),Bm=a("li"),QH=a("strong"),FNe=o("glpn"),CNe=o(" \u2014 "),oB=a("a"),MNe=o("GLPNConfig"),ENe=o(" (GLPN model)"),yNe=l(),xm=a("li"),HH=a("strong"),wNe=o("gpt2"),ANe=o(" \u2014 "),rB=a("a"),LNe=o("GPT2Config"),BNe=o(" (OpenAI GPT-2 model)"),xNe=l(),km=a("li"),UH=a("strong"),kNe=o("gpt_neo"),RNe=o(" \u2014 "),tB=a("a"),SNe=o("GPTNeoConfig"),PNe=o(" (GPT Neo model)"),$Ne=l(),Rm=a("li"),JH=a("strong"),INe=o("gptj"),jNe=o(" \u2014 "),aB=a("a"),DNe=o("GPTJConfig"),NNe=o(" (GPT-J model)"),qNe=l(),Sm=a("li"),YH=a("strong"),GNe=o("hubert"),ONe=o(" \u2014 "),nB=a("a"),XNe=o("HubertConfig"),VNe=o(" (Hubert model)"),zNe=l(),Pm=a("li"),KH=a("strong"),WNe=o("ibert"),QNe=o(" \u2014 "),sB=a("a"),HNe=o("IBertConfig"),UNe=o(" (I-BERT model)"),JNe=l(),$m=a("li"),ZH=a("strong"),YNe=o("imagegpt"),KNe=o(" \u2014 "),lB=a("a"),ZNe=o("ImageGPTConfig"),eqe=o(" (ImageGPT model)"),oqe=l(),Im=a("li"),eU=a("strong"),rqe=o("layoutlm"),tqe=o(" \u2014 "),iB=a("a"),aqe=o("LayoutLMConfig"),nqe=o(" (LayoutLM model)"),sqe=l(),jm=a("li"),oU=a("strong"),lqe=o("layoutlmv2"),iqe=o(" \u2014 "),dB=a("a"),dqe=o("LayoutLMv2Config"),cqe=o(" (LayoutLMv2 model)"),fqe=l(),Dm=a("li"),rU=a("strong"),mqe=o("led"),gqe=o(" \u2014 "),cB=a("a"),hqe=o("LEDConfig"),pqe=o(" (LED model)"),_qe=l(),Nm=a("li"),tU=a("strong"),uqe=o("longformer"),bqe=o(" \u2014 "),fB=a("a"),vqe=o("LongformerConfig"),Tqe=o(" (Longformer model)"),Fqe=l(),qm=a("li"),aU=a("strong"),Cqe=o("luke"),Mqe=o(" \u2014 "),mB=a("a"),Eqe=o("LukeConfig"),yqe=o(" (LUKE model)"),wqe=l(),Gm=a("li"),nU=a("strong"),Aqe=o("lxmert"),Lqe=o(" \u2014 "),gB=a("a"),Bqe=o("LxmertConfig"),xqe=o(" (LXMERT model)"),kqe=l(),Om=a("li"),sU=a("strong"),Rqe=o("m2m_100"),Sqe=o(" \u2014 "),hB=a("a"),Pqe=o("M2M100Config"),$qe=o(" (M2M100 model)"),Iqe=l(),Xm=a("li"),lU=a("strong"),jqe=o("marian"),Dqe=o(" \u2014 "),pB=a("a"),Nqe=o("MarianConfig"),qqe=o(" (Marian model)"),Gqe=l(),Vm=a("li"),iU=a("strong"),Oqe=o("maskformer"),Xqe=o(" \u2014 "),_B=a("a"),Vqe=o("MaskFormerConfig"),zqe=o(" (MaskFormer model)"),Wqe=l(),zm=a("li"),dU=a("strong"),Qqe=o("mbart"),Hqe=o(" \u2014 "),uB=a("a"),Uqe=o("MBartConfig"),Jqe=o(" (mBART model)"),Yqe=l(),Wm=a("li"),cU=a("strong"),Kqe=o("megatron-bert"),Zqe=o(" \u2014 "),bB=a("a"),eGe=o("MegatronBertConfig"),oGe=o(" (MegatronBert model)"),rGe=l(),Qm=a("li"),fU=a("strong"),tGe=o("mobilebert"),aGe=o(" \u2014 "),vB=a("a"),nGe=o("MobileBertConfig"),sGe=o(" (MobileBERT model)"),lGe=l(),Hm=a("li"),mU=a("strong"),iGe=o("mpnet"),dGe=o(" \u2014 "),TB=a("a"),cGe=o("MPNetConfig"),fGe=o(" (MPNet model)"),mGe=l(),Um=a("li"),gU=a("strong"),gGe=o("mt5"),hGe=o(" \u2014 "),FB=a("a"),pGe=o("MT5Config"),_Ge=o(" (mT5 model)"),uGe=l(),Jm=a("li"),hU=a("strong"),bGe=o("nystromformer"),vGe=o(" \u2014 "),CB=a("a"),TGe=o("NystromformerConfig"),FGe=o(" (Nystromformer model)"),CGe=l(),Ym=a("li"),pU=a("strong"),MGe=o("openai-gpt"),EGe=o(" \u2014 "),MB=a("a"),yGe=o("OpenAIGPTConfig"),wGe=o(" (OpenAI GPT model)"),AGe=l(),Km=a("li"),_U=a("strong"),LGe=o("pegasus"),BGe=o(" \u2014 "),EB=a("a"),xGe=o("PegasusConfig"),kGe=o(" (Pegasus model)"),RGe=l(),Zm=a("li"),uU=a("strong"),SGe=o("perceiver"),PGe=o(" \u2014 "),yB=a("a"),$Ge=o("PerceiverConfig"),IGe=o(" (Perceiver model)"),jGe=l(),eg=a("li"),bU=a("strong"),DGe=o("plbart"),NGe=o(" \u2014 "),wB=a("a"),qGe=o("PLBartConfig"),GGe=o(" (PLBart model)"),OGe=l(),og=a("li"),vU=a("strong"),XGe=o("poolformer"),VGe=o(" \u2014 "),AB=a("a"),zGe=o("PoolFormerConfig"),WGe=o(" (PoolFormer model)"),QGe=l(),rg=a("li"),TU=a("strong"),HGe=o("prophetnet"),UGe=o(" \u2014 "),LB=a("a"),JGe=o("ProphetNetConfig"),YGe=o(" (ProphetNet model)"),KGe=l(),tg=a("li"),FU=a("strong"),ZGe=o("qdqbert"),eOe=o(" \u2014 "),BB=a("a"),oOe=o("QDQBertConfig"),rOe=o(" (QDQBert model)"),tOe=l(),ag=a("li"),CU=a("strong"),aOe=o("rag"),nOe=o(" \u2014 "),xB=a("a"),sOe=o("RagConfig"),lOe=o(" (RAG model)"),iOe=l(),ng=a("li"),MU=a("strong"),dOe=o("realm"),cOe=o(" \u2014 "),kB=a("a"),fOe=o("RealmConfig"),mOe=o(" (Realm model)"),gOe=l(),sg=a("li"),EU=a("strong"),hOe=o("reformer"),pOe=o(" \u2014 "),RB=a("a"),_Oe=o("ReformerConfig"),uOe=o(" (Reformer model)"),bOe=l(),lg=a("li"),yU=a("strong"),vOe=o("rembert"),TOe=o(" \u2014 "),SB=a("a"),FOe=o("RemBertConfig"),COe=o(" (RemBERT model)"),MOe=l(),ig=a("li"),wU=a("strong"),EOe=o("resnet"),yOe=o(" \u2014 "),PB=a("a"),wOe=o("ResNetConfig"),AOe=o(" (ResNet model)"),LOe=l(),dg=a("li"),AU=a("strong"),BOe=o("retribert"),xOe=o(" \u2014 "),$B=a("a"),kOe=o("RetriBertConfig"),ROe=o(" (RetriBERT model)"),SOe=l(),cg=a("li"),LU=a("strong"),POe=o("roberta"),$Oe=o(" \u2014 "),IB=a("a"),IOe=o("RobertaConfig"),jOe=o(" (RoBERTa model)"),DOe=l(),fg=a("li"),BU=a("strong"),NOe=o("roformer"),qOe=o(" \u2014 "),jB=a("a"),GOe=o("RoFormerConfig"),OOe=o(" (RoFormer model)"),XOe=l(),mg=a("li"),xU=a("strong"),VOe=o("segformer"),zOe=o(" \u2014 "),DB=a("a"),WOe=o("SegformerConfig"),QOe=o(" (SegFormer model)"),HOe=l(),gg=a("li"),kU=a("strong"),UOe=o("sew"),JOe=o(" \u2014 "),NB=a("a"),YOe=o("SEWConfig"),KOe=o(" (SEW model)"),ZOe=l(),hg=a("li"),RU=a("strong"),eXe=o("sew-d"),oXe=o(" \u2014 "),qB=a("a"),rXe=o("SEWDConfig"),tXe=o(" (SEW-D model)"),aXe=l(),pg=a("li"),SU=a("strong"),nXe=o("speech-encoder-decoder"),sXe=o(" \u2014 "),GB=a("a"),lXe=o("SpeechEncoderDecoderConfig"),iXe=o(" (Speech Encoder decoder model)"),dXe=l(),_g=a("li"),PU=a("strong"),cXe=o("speech_to_text"),fXe=o(" \u2014 "),OB=a("a"),mXe=o("Speech2TextConfig"),gXe=o(" (Speech2Text model)"),hXe=l(),ug=a("li"),$U=a("strong"),pXe=o("speech_to_text_2"),_Xe=o(" \u2014 "),XB=a("a"),uXe=o("Speech2Text2Config"),bXe=o(" (Speech2Text2 model)"),vXe=l(),bg=a("li"),IU=a("strong"),TXe=o("splinter"),FXe=o(" \u2014 "),VB=a("a"),CXe=o("SplinterConfig"),MXe=o(" (Splinter model)"),EXe=l(),vg=a("li"),jU=a("strong"),yXe=o("squeezebert"),wXe=o(" \u2014 "),zB=a("a"),AXe=o("SqueezeBertConfig"),LXe=o(" (SqueezeBERT model)"),BXe=l(),Tg=a("li"),DU=a("strong"),xXe=o("swin"),kXe=o(" \u2014 "),WB=a("a"),RXe=o("SwinConfig"),SXe=o(" (Swin model)"),PXe=l(),Fg=a("li"),NU=a("strong"),$Xe=o("t5"),IXe=o(" \u2014 "),QB=a("a"),jXe=o("T5Config"),DXe=o(" (T5 model)"),NXe=l(),Cg=a("li"),qU=a("strong"),qXe=o("tapas"),GXe=o(" \u2014 "),HB=a("a"),OXe=o("TapasConfig"),XXe=o(" (TAPAS model)"),VXe=l(),Mg=a("li"),GU=a("strong"),zXe=o("transfo-xl"),WXe=o(" \u2014 "),UB=a("a"),QXe=o("TransfoXLConfig"),HXe=o(" (Transformer-XL model)"),UXe=l(),Eg=a("li"),OU=a("strong"),JXe=o("trocr"),YXe=o(" \u2014 "),JB=a("a"),KXe=o("TrOCRConfig"),ZXe=o(" (TrOCR model)"),eVe=l(),yg=a("li"),XU=a("strong"),oVe=o("unispeech"),rVe=o(" \u2014 "),YB=a("a"),tVe=o("UniSpeechConfig"),aVe=o(" (UniSpeech model)"),nVe=l(),wg=a("li"),VU=a("strong"),sVe=o("unispeech-sat"),lVe=o(" \u2014 "),KB=a("a"),iVe=o("UniSpeechSatConfig"),dVe=o(" (UniSpeechSat model)"),cVe=l(),Ag=a("li"),zU=a("strong"),fVe=o("van"),mVe=o(" \u2014 "),ZB=a("a"),gVe=o("VanConfig"),hVe=o(" (VAN model)"),pVe=l(),Lg=a("li"),WU=a("strong"),_Ve=o("vilt"),uVe=o(" \u2014 "),ex=a("a"),bVe=o("ViltConfig"),vVe=o(" (ViLT model)"),TVe=l(),Bg=a("li"),QU=a("strong"),FVe=o("vision-encoder-decoder"),CVe=o(" \u2014 "),ox=a("a"),MVe=o("VisionEncoderDecoderConfig"),EVe=o(" (Vision Encoder decoder model)"),yVe=l(),xg=a("li"),HU=a("strong"),wVe=o("vision-text-dual-encoder"),AVe=o(" \u2014 "),rx=a("a"),LVe=o("VisionTextDualEncoderConfig"),BVe=o(" (VisionTextDualEncoder model)"),xVe=l(),kg=a("li"),UU=a("strong"),kVe=o("visual_bert"),RVe=o(" \u2014 "),tx=a("a"),SVe=o("VisualBertConfig"),PVe=o(" (VisualBert model)"),$Ve=l(),Rg=a("li"),JU=a("strong"),IVe=o("vit"),jVe=o(" \u2014 "),ax=a("a"),DVe=o("ViTConfig"),NVe=o(" (ViT model)"),qVe=l(),Sg=a("li"),YU=a("strong"),GVe=o("vit_mae"),OVe=o(" \u2014 "),nx=a("a"),XVe=o("ViTMAEConfig"),VVe=o(" (ViTMAE model)"),zVe=l(),Pg=a("li"),KU=a("strong"),WVe=o("wav2vec2"),QVe=o(" \u2014 "),sx=a("a"),HVe=o("Wav2Vec2Config"),UVe=o(" (Wav2Vec2 model)"),JVe=l(),$g=a("li"),ZU=a("strong"),YVe=o("wavlm"),KVe=o(" \u2014 "),lx=a("a"),ZVe=o("WavLMConfig"),eze=o(" (WavLM model)"),oze=l(),Ig=a("li"),eJ=a("strong"),rze=o("xglm"),tze=o(" \u2014 "),ix=a("a"),aze=o("XGLMConfig"),nze=o(" (XGLM model)"),sze=l(),jg=a("li"),oJ=a("strong"),lze=o("xlm"),ize=o(" \u2014 "),dx=a("a"),dze=o("XLMConfig"),cze=o(" (XLM model)"),fze=l(),Dg=a("li"),rJ=a("strong"),mze=o("xlm-prophetnet"),gze=o(" \u2014 "),cx=a("a"),hze=o("XLMProphetNetConfig"),pze=o(" (XLMProphetNet model)"),_ze=l(),Ng=a("li"),tJ=a("strong"),uze=o("xlm-roberta"),bze=o(" \u2014 "),fx=a("a"),vze=o("XLMRobertaConfig"),Tze=o(" (XLM-RoBERTa model)"),Fze=l(),qg=a("li"),aJ=a("strong"),Cze=o("xlm-roberta-xl"),Mze=o(" \u2014 "),mx=a("a"),Eze=o("XLMRobertaXLConfig"),yze=o(" (XLM-RoBERTa-XL model)"),wze=l(),Gg=a("li"),nJ=a("strong"),Aze=o("xlnet"),Lze=o(" \u2014 "),gx=a("a"),Bze=o("XLNetConfig"),xze=o(" (XLNet model)"),kze=l(),Og=a("li"),sJ=a("strong"),Rze=o("yoso"),Sze=o(" \u2014 "),hx=a("a"),Pze=o("YosoConfig"),$ze=o(" (YOSO model)"),Ize=l(),lJ=a("p"),jze=o("Examples:"),Dze=l(),f(B4.$$.fragment),Nze=l(),Xg=a("div"),f(x4.$$.fragment),qze=l(),iJ=a("p"),Gze=o("Register a new configuration for this class."),Qke=l(),Zi=a("h2"),Vg=a("a"),dJ=a("span"),f(k4.$$.fragment),Oze=l(),cJ=a("span"),Xze=o("AutoTokenizer"),Hke=l(),Ho=a("div"),f(R4.$$.fragment),Vze=l(),S4=a("p"),zze=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),px=a("a"),Wze=o("AutoTokenizer.from_pretrained()"),Qze=o(" class method."),Hze=l(),P4=a("p"),Uze=o("This class cannot be instantiated directly using "),fJ=a("code"),Jze=o("__init__()"),Yze=o(" (throws an error)."),Kze=l(),go=a("div"),f($4.$$.fragment),Zze=l(),mJ=a("p"),eWe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),oWe=l(),Wa=a("p"),rWe=o("The tokenizer class to instantiate is selected based on the "),gJ=a("code"),tWe=o("model_type"),aWe=o(` property of the config object (either
passed as an argument or loaded from `),hJ=a("code"),nWe=o("pretrained_model_name_or_path"),sWe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pJ=a("code"),lWe=o("pretrained_model_name_or_path"),iWe=o(":"),dWe=l(),E=a("ul"),Yn=a("li"),_J=a("strong"),cWe=o("albert"),fWe=o(" \u2014 "),_x=a("a"),mWe=o("AlbertTokenizer"),gWe=o(" or "),ux=a("a"),hWe=o("AlbertTokenizerFast"),pWe=o(" (ALBERT model)"),_We=l(),Kn=a("li"),uJ=a("strong"),uWe=o("bart"),bWe=o(" \u2014 "),bx=a("a"),vWe=o("BartTokenizer"),TWe=o(" or "),vx=a("a"),FWe=o("BartTokenizerFast"),CWe=o(" (BART model)"),MWe=l(),Zn=a("li"),bJ=a("strong"),EWe=o("barthez"),yWe=o(" \u2014 "),Tx=a("a"),wWe=o("BarthezTokenizer"),AWe=o(" or "),Fx=a("a"),LWe=o("BarthezTokenizerFast"),BWe=o(" (BARThez model)"),xWe=l(),zg=a("li"),vJ=a("strong"),kWe=o("bartpho"),RWe=o(" \u2014 "),Cx=a("a"),SWe=o("BartphoTokenizer"),PWe=o(" (BARTpho model)"),$We=l(),es=a("li"),TJ=a("strong"),IWe=o("bert"),jWe=o(" \u2014 "),Mx=a("a"),DWe=o("BertTokenizer"),NWe=o(" or "),Ex=a("a"),qWe=o("BertTokenizerFast"),GWe=o(" (BERT model)"),OWe=l(),Wg=a("li"),FJ=a("strong"),XWe=o("bert-generation"),VWe=o(" \u2014 "),yx=a("a"),zWe=o("BertGenerationTokenizer"),WWe=o(" (Bert Generation model)"),QWe=l(),Qg=a("li"),CJ=a("strong"),HWe=o("bert-japanese"),UWe=o(" \u2014 "),wx=a("a"),JWe=o("BertJapaneseTokenizer"),YWe=o(" (BertJapanese model)"),KWe=l(),Hg=a("li"),MJ=a("strong"),ZWe=o("bertweet"),eQe=o(" \u2014 "),Ax=a("a"),oQe=o("BertweetTokenizer"),rQe=o(" (Bertweet model)"),tQe=l(),os=a("li"),EJ=a("strong"),aQe=o("big_bird"),nQe=o(" \u2014 "),Lx=a("a"),sQe=o("BigBirdTokenizer"),lQe=o(" or "),Bx=a("a"),iQe=o("BigBirdTokenizerFast"),dQe=o(" (BigBird model)"),cQe=l(),rs=a("li"),yJ=a("strong"),fQe=o("bigbird_pegasus"),mQe=o(" \u2014 "),xx=a("a"),gQe=o("PegasusTokenizer"),hQe=o(" or "),kx=a("a"),pQe=o("PegasusTokenizerFast"),_Qe=o(" (BigBirdPegasus model)"),uQe=l(),ts=a("li"),wJ=a("strong"),bQe=o("blenderbot"),vQe=o(" \u2014 "),Rx=a("a"),TQe=o("BlenderbotTokenizer"),FQe=o(" or "),Sx=a("a"),CQe=o("BlenderbotTokenizerFast"),MQe=o(" (Blenderbot model)"),EQe=l(),Ug=a("li"),AJ=a("strong"),yQe=o("blenderbot-small"),wQe=o(" \u2014 "),Px=a("a"),AQe=o("BlenderbotSmallTokenizer"),LQe=o(" (BlenderbotSmall model)"),BQe=l(),Jg=a("li"),LJ=a("strong"),xQe=o("byt5"),kQe=o(" \u2014 "),$x=a("a"),RQe=o("ByT5Tokenizer"),SQe=o(" (ByT5 model)"),PQe=l(),as=a("li"),BJ=a("strong"),$Qe=o("camembert"),IQe=o(" \u2014 "),Ix=a("a"),jQe=o("CamembertTokenizer"),DQe=o(" or "),jx=a("a"),NQe=o("CamembertTokenizerFast"),qQe=o(" (CamemBERT model)"),GQe=l(),Yg=a("li"),xJ=a("strong"),OQe=o("canine"),XQe=o(" \u2014 "),Dx=a("a"),VQe=o("CanineTokenizer"),zQe=o(" (Canine model)"),WQe=l(),ns=a("li"),kJ=a("strong"),QQe=o("clip"),HQe=o(" \u2014 "),Nx=a("a"),UQe=o("CLIPTokenizer"),JQe=o(" or "),qx=a("a"),YQe=o("CLIPTokenizerFast"),KQe=o(" (CLIP model)"),ZQe=l(),ss=a("li"),RJ=a("strong"),eHe=o("convbert"),oHe=o(" \u2014 "),Gx=a("a"),rHe=o("ConvBertTokenizer"),tHe=o(" or "),Ox=a("a"),aHe=o("ConvBertTokenizerFast"),nHe=o(" (ConvBERT model)"),sHe=l(),ls=a("li"),SJ=a("strong"),lHe=o("cpm"),iHe=o(" \u2014 "),Xx=a("a"),dHe=o("CpmTokenizer"),cHe=o(" or "),PJ=a("code"),fHe=o("CpmTokenizerFast"),mHe=o(" (CPM model)"),gHe=l(),Kg=a("li"),$J=a("strong"),hHe=o("ctrl"),pHe=o(" \u2014 "),Vx=a("a"),_He=o("CTRLTokenizer"),uHe=o(" (CTRL model)"),bHe=l(),is=a("li"),IJ=a("strong"),vHe=o("deberta"),THe=o(" \u2014 "),zx=a("a"),FHe=o("DebertaTokenizer"),CHe=o(" or "),Wx=a("a"),MHe=o("DebertaTokenizerFast"),EHe=o(" (DeBERTa model)"),yHe=l(),Zg=a("li"),jJ=a("strong"),wHe=o("deberta-v2"),AHe=o(" \u2014 "),Qx=a("a"),LHe=o("DebertaV2Tokenizer"),BHe=o(" (DeBERTa-v2 model)"),xHe=l(),ds=a("li"),DJ=a("strong"),kHe=o("distilbert"),RHe=o(" \u2014 "),Hx=a("a"),SHe=o("DistilBertTokenizer"),PHe=o(" or "),Ux=a("a"),$He=o("DistilBertTokenizerFast"),IHe=o(" (DistilBERT model)"),jHe=l(),cs=a("li"),NJ=a("strong"),DHe=o("dpr"),NHe=o(" \u2014 "),Jx=a("a"),qHe=o("DPRQuestionEncoderTokenizer"),GHe=o(" or "),Yx=a("a"),OHe=o("DPRQuestionEncoderTokenizerFast"),XHe=o(" (DPR model)"),VHe=l(),fs=a("li"),qJ=a("strong"),zHe=o("electra"),WHe=o(" \u2014 "),Kx=a("a"),QHe=o("ElectraTokenizer"),HHe=o(" or "),Zx=a("a"),UHe=o("ElectraTokenizerFast"),JHe=o(" (ELECTRA model)"),YHe=l(),eh=a("li"),GJ=a("strong"),KHe=o("flaubert"),ZHe=o(" \u2014 "),ek=a("a"),eUe=o("FlaubertTokenizer"),oUe=o(" (FlauBERT model)"),rUe=l(),ms=a("li"),OJ=a("strong"),tUe=o("fnet"),aUe=o(" \u2014 "),ok=a("a"),nUe=o("FNetTokenizer"),sUe=o(" or "),rk=a("a"),lUe=o("FNetTokenizerFast"),iUe=o(" (FNet model)"),dUe=l(),oh=a("li"),XJ=a("strong"),cUe=o("fsmt"),fUe=o(" \u2014 "),tk=a("a"),mUe=o("FSMTTokenizer"),gUe=o(" (FairSeq Machine-Translation model)"),hUe=l(),gs=a("li"),VJ=a("strong"),pUe=o("funnel"),_Ue=o(" \u2014 "),ak=a("a"),uUe=o("FunnelTokenizer"),bUe=o(" or "),nk=a("a"),vUe=o("FunnelTokenizerFast"),TUe=o(" (Funnel Transformer model)"),FUe=l(),hs=a("li"),zJ=a("strong"),CUe=o("gpt2"),MUe=o(" \u2014 "),sk=a("a"),EUe=o("GPT2Tokenizer"),yUe=o(" or "),lk=a("a"),wUe=o("GPT2TokenizerFast"),AUe=o(" (OpenAI GPT-2 model)"),LUe=l(),ps=a("li"),WJ=a("strong"),BUe=o("gpt_neo"),xUe=o(" \u2014 "),ik=a("a"),kUe=o("GPT2Tokenizer"),RUe=o(" or "),dk=a("a"),SUe=o("GPT2TokenizerFast"),PUe=o(" (GPT Neo model)"),$Ue=l(),_s=a("li"),QJ=a("strong"),IUe=o("herbert"),jUe=o(" \u2014 "),ck=a("a"),DUe=o("HerbertTokenizer"),NUe=o(" or "),fk=a("a"),qUe=o("HerbertTokenizerFast"),GUe=o(" (HerBERT model)"),OUe=l(),rh=a("li"),HJ=a("strong"),XUe=o("hubert"),VUe=o(" \u2014 "),mk=a("a"),zUe=o("Wav2Vec2CTCTokenizer"),WUe=o(" (Hubert model)"),QUe=l(),us=a("li"),UJ=a("strong"),HUe=o("ibert"),UUe=o(" \u2014 "),gk=a("a"),JUe=o("RobertaTokenizer"),YUe=o(" or "),hk=a("a"),KUe=o("RobertaTokenizerFast"),ZUe=o(" (I-BERT model)"),eJe=l(),bs=a("li"),JJ=a("strong"),oJe=o("layoutlm"),rJe=o(" \u2014 "),pk=a("a"),tJe=o("LayoutLMTokenizer"),aJe=o(" or "),_k=a("a"),nJe=o("LayoutLMTokenizerFast"),sJe=o(" (LayoutLM model)"),lJe=l(),vs=a("li"),YJ=a("strong"),iJe=o("layoutlmv2"),dJe=o(" \u2014 "),uk=a("a"),cJe=o("LayoutLMv2Tokenizer"),fJe=o(" or "),bk=a("a"),mJe=o("LayoutLMv2TokenizerFast"),gJe=o(" (LayoutLMv2 model)"),hJe=l(),Ts=a("li"),KJ=a("strong"),pJe=o("layoutxlm"),_Je=o(" \u2014 "),vk=a("a"),uJe=o("LayoutXLMTokenizer"),bJe=o(" or "),Tk=a("a"),vJe=o("LayoutXLMTokenizerFast"),TJe=o(" (LayoutXLM model)"),FJe=l(),Fs=a("li"),ZJ=a("strong"),CJe=o("led"),MJe=o(" \u2014 "),Fk=a("a"),EJe=o("LEDTokenizer"),yJe=o(" or "),Ck=a("a"),wJe=o("LEDTokenizerFast"),AJe=o(" (LED model)"),LJe=l(),Cs=a("li"),eY=a("strong"),BJe=o("longformer"),xJe=o(" \u2014 "),Mk=a("a"),kJe=o("LongformerTokenizer"),RJe=o(" or "),Ek=a("a"),SJe=o("LongformerTokenizerFast"),PJe=o(" (Longformer model)"),$Je=l(),th=a("li"),oY=a("strong"),IJe=o("luke"),jJe=o(" \u2014 "),yk=a("a"),DJe=o("LukeTokenizer"),NJe=o(" (LUKE model)"),qJe=l(),Ms=a("li"),rY=a("strong"),GJe=o("lxmert"),OJe=o(" \u2014 "),wk=a("a"),XJe=o("LxmertTokenizer"),VJe=o(" or "),Ak=a("a"),zJe=o("LxmertTokenizerFast"),WJe=o(" (LXMERT model)"),QJe=l(),ah=a("li"),tY=a("strong"),HJe=o("m2m_100"),UJe=o(" \u2014 "),Lk=a("a"),JJe=o("M2M100Tokenizer"),YJe=o(" (M2M100 model)"),KJe=l(),nh=a("li"),aY=a("strong"),ZJe=o("marian"),eYe=o(" \u2014 "),Bk=a("a"),oYe=o("MarianTokenizer"),rYe=o(" (Marian model)"),tYe=l(),Es=a("li"),nY=a("strong"),aYe=o("mbart"),nYe=o(" \u2014 "),xk=a("a"),sYe=o("MBartTokenizer"),lYe=o(" or "),kk=a("a"),iYe=o("MBartTokenizerFast"),dYe=o(" (mBART model)"),cYe=l(),ys=a("li"),sY=a("strong"),fYe=o("mbart50"),mYe=o(" \u2014 "),Rk=a("a"),gYe=o("MBart50Tokenizer"),hYe=o(" or "),Sk=a("a"),pYe=o("MBart50TokenizerFast"),_Ye=o(" (mBART-50 model)"),uYe=l(),sh=a("li"),lY=a("strong"),bYe=o("mluke"),vYe=o(" \u2014 "),Pk=a("a"),TYe=o("MLukeTokenizer"),FYe=o(" (mLUKE model)"),CYe=l(),ws=a("li"),iY=a("strong"),MYe=o("mobilebert"),EYe=o(" \u2014 "),$k=a("a"),yYe=o("MobileBertTokenizer"),wYe=o(" or "),Ik=a("a"),AYe=o("MobileBertTokenizerFast"),LYe=o(" (MobileBERT model)"),BYe=l(),As=a("li"),dY=a("strong"),xYe=o("mpnet"),kYe=o(" \u2014 "),jk=a("a"),RYe=o("MPNetTokenizer"),SYe=o(" or "),Dk=a("a"),PYe=o("MPNetTokenizerFast"),$Ye=o(" (MPNet model)"),IYe=l(),Ls=a("li"),cY=a("strong"),jYe=o("mt5"),DYe=o(" \u2014 "),Nk=a("a"),NYe=o("MT5Tokenizer"),qYe=o(" or "),qk=a("a"),GYe=o("MT5TokenizerFast"),OYe=o(" (mT5 model)"),XYe=l(),Bs=a("li"),fY=a("strong"),VYe=o("openai-gpt"),zYe=o(" \u2014 "),Gk=a("a"),WYe=o("OpenAIGPTTokenizer"),QYe=o(" or "),Ok=a("a"),HYe=o("OpenAIGPTTokenizerFast"),UYe=o(" (OpenAI GPT model)"),JYe=l(),xs=a("li"),mY=a("strong"),YYe=o("pegasus"),KYe=o(" \u2014 "),Xk=a("a"),ZYe=o("PegasusTokenizer"),eKe=o(" or "),Vk=a("a"),oKe=o("PegasusTokenizerFast"),rKe=o(" (Pegasus model)"),tKe=l(),lh=a("li"),gY=a("strong"),aKe=o("perceiver"),nKe=o(" \u2014 "),zk=a("a"),sKe=o("PerceiverTokenizer"),lKe=o(" (Perceiver model)"),iKe=l(),ih=a("li"),hY=a("strong"),dKe=o("phobert"),cKe=o(" \u2014 "),Wk=a("a"),fKe=o("PhobertTokenizer"),mKe=o(" (PhoBERT model)"),gKe=l(),dh=a("li"),pY=a("strong"),hKe=o("plbart"),pKe=o(" \u2014 "),Qk=a("a"),_Ke=o("PLBartTokenizer"),uKe=o(" (PLBart model)"),bKe=l(),ch=a("li"),_Y=a("strong"),vKe=o("prophetnet"),TKe=o(" \u2014 "),Hk=a("a"),FKe=o("ProphetNetTokenizer"),CKe=o(" (ProphetNet model)"),MKe=l(),ks=a("li"),uY=a("strong"),EKe=o("qdqbert"),yKe=o(" \u2014 "),Uk=a("a"),wKe=o("BertTokenizer"),AKe=o(" or "),Jk=a("a"),LKe=o("BertTokenizerFast"),BKe=o(" (QDQBert model)"),xKe=l(),fh=a("li"),bY=a("strong"),kKe=o("rag"),RKe=o(" \u2014 "),Yk=a("a"),SKe=o("RagTokenizer"),PKe=o(" (RAG model)"),$Ke=l(),Rs=a("li"),vY=a("strong"),IKe=o("realm"),jKe=o(" \u2014 "),Kk=a("a"),DKe=o("RealmTokenizer"),NKe=o(" or "),Zk=a("a"),qKe=o("RealmTokenizerFast"),GKe=o(" (Realm model)"),OKe=l(),Ss=a("li"),TY=a("strong"),XKe=o("reformer"),VKe=o(" \u2014 "),eR=a("a"),zKe=o("ReformerTokenizer"),WKe=o(" or "),oR=a("a"),QKe=o("ReformerTokenizerFast"),HKe=o(" (Reformer model)"),UKe=l(),Ps=a("li"),FY=a("strong"),JKe=o("rembert"),YKe=o(" \u2014 "),rR=a("a"),KKe=o("RemBertTokenizer"),ZKe=o(" or "),tR=a("a"),eZe=o("RemBertTokenizerFast"),oZe=o(" (RemBERT model)"),rZe=l(),$s=a("li"),CY=a("strong"),tZe=o("retribert"),aZe=o(" \u2014 "),aR=a("a"),nZe=o("RetriBertTokenizer"),sZe=o(" or "),nR=a("a"),lZe=o("RetriBertTokenizerFast"),iZe=o(" (RetriBERT model)"),dZe=l(),Is=a("li"),MY=a("strong"),cZe=o("roberta"),fZe=o(" \u2014 "),sR=a("a"),mZe=o("RobertaTokenizer"),gZe=o(" or "),lR=a("a"),hZe=o("RobertaTokenizerFast"),pZe=o(" (RoBERTa model)"),_Ze=l(),js=a("li"),EY=a("strong"),uZe=o("roformer"),bZe=o(" \u2014 "),iR=a("a"),vZe=o("RoFormerTokenizer"),TZe=o(" or "),dR=a("a"),FZe=o("RoFormerTokenizerFast"),CZe=o(" (RoFormer model)"),MZe=l(),mh=a("li"),yY=a("strong"),EZe=o("speech_to_text"),yZe=o(" \u2014 "),cR=a("a"),wZe=o("Speech2TextTokenizer"),AZe=o(" (Speech2Text model)"),LZe=l(),gh=a("li"),wY=a("strong"),BZe=o("speech_to_text_2"),xZe=o(" \u2014 "),fR=a("a"),kZe=o("Speech2Text2Tokenizer"),RZe=o(" (Speech2Text2 model)"),SZe=l(),Ds=a("li"),AY=a("strong"),PZe=o("splinter"),$Ze=o(" \u2014 "),mR=a("a"),IZe=o("SplinterTokenizer"),jZe=o(" or "),gR=a("a"),DZe=o("SplinterTokenizerFast"),NZe=o(" (Splinter model)"),qZe=l(),Ns=a("li"),LY=a("strong"),GZe=o("squeezebert"),OZe=o(" \u2014 "),hR=a("a"),XZe=o("SqueezeBertTokenizer"),VZe=o(" or "),pR=a("a"),zZe=o("SqueezeBertTokenizerFast"),WZe=o(" (SqueezeBERT model)"),QZe=l(),qs=a("li"),BY=a("strong"),HZe=o("t5"),UZe=o(" \u2014 "),_R=a("a"),JZe=o("T5Tokenizer"),YZe=o(" or "),uR=a("a"),KZe=o("T5TokenizerFast"),ZZe=o(" (T5 model)"),eeo=l(),hh=a("li"),xY=a("strong"),oeo=o("tapas"),reo=o(" \u2014 "),bR=a("a"),teo=o("TapasTokenizer"),aeo=o(" (TAPAS model)"),neo=l(),ph=a("li"),kY=a("strong"),seo=o("transfo-xl"),leo=o(" \u2014 "),vR=a("a"),ieo=o("TransfoXLTokenizer"),deo=o(" (Transformer-XL model)"),ceo=l(),_h=a("li"),RY=a("strong"),feo=o("wav2vec2"),meo=o(" \u2014 "),TR=a("a"),geo=o("Wav2Vec2CTCTokenizer"),heo=o(" (Wav2Vec2 model)"),peo=l(),uh=a("li"),SY=a("strong"),_eo=o("wav2vec2_phoneme"),ueo=o(" \u2014 "),FR=a("a"),beo=o("Wav2Vec2PhonemeCTCTokenizer"),veo=o(" (Wav2Vec2Phoneme model)"),Teo=l(),Gs=a("li"),PY=a("strong"),Feo=o("xglm"),Ceo=o(" \u2014 "),CR=a("a"),Meo=o("XGLMTokenizer"),Eeo=o(" or "),MR=a("a"),yeo=o("XGLMTokenizerFast"),weo=o(" (XGLM model)"),Aeo=l(),bh=a("li"),$Y=a("strong"),Leo=o("xlm"),Beo=o(" \u2014 "),ER=a("a"),xeo=o("XLMTokenizer"),keo=o(" (XLM model)"),Reo=l(),vh=a("li"),IY=a("strong"),Seo=o("xlm-prophetnet"),Peo=o(" \u2014 "),yR=a("a"),$eo=o("XLMProphetNetTokenizer"),Ieo=o(" (XLMProphetNet model)"),jeo=l(),Os=a("li"),jY=a("strong"),Deo=o("xlm-roberta"),Neo=o(" \u2014 "),wR=a("a"),qeo=o("XLMRobertaTokenizer"),Geo=o(" or "),AR=a("a"),Oeo=o("XLMRobertaTokenizerFast"),Xeo=o(" (XLM-RoBERTa model)"),Veo=l(),Xs=a("li"),DY=a("strong"),zeo=o("xlnet"),Weo=o(" \u2014 "),LR=a("a"),Qeo=o("XLNetTokenizer"),Heo=o(" or "),BR=a("a"),Ueo=o("XLNetTokenizerFast"),Jeo=o(" (XLNet model)"),Yeo=l(),NY=a("p"),Keo=o("Examples:"),Zeo=l(),f(I4.$$.fragment),eoo=l(),Th=a("div"),f(j4.$$.fragment),ooo=l(),qY=a("p"),roo=o("Register a new tokenizer in this mapping."),Uke=l(),ed=a("h2"),Fh=a("a"),GY=a("span"),f(D4.$$.fragment),too=l(),OY=a("span"),aoo=o("AutoFeatureExtractor"),Jke=l(),Uo=a("div"),f(N4.$$.fragment),noo=l(),q4=a("p"),soo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),xR=a("a"),loo=o("AutoFeatureExtractor.from_pretrained()"),ioo=o(" class method."),doo=l(),G4=a("p"),coo=o("This class cannot be instantiated directly using "),XY=a("code"),foo=o("__init__()"),moo=o(" (throws an error)."),goo=l(),$e=a("div"),f(O4.$$.fragment),hoo=l(),VY=a("p"),poo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),_oo=l(),Qa=a("p"),uoo=o("The feature extractor class to instantiate is selected based on the "),zY=a("code"),boo=o("model_type"),voo=o(` property of the config object
(either passed as an argument or loaded from `),WY=a("code"),Too=o("pretrained_model_name_or_path"),Foo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),QY=a("code"),Coo=o("pretrained_model_name_or_path"),Moo=o(":"),Eoo=l(),re=a("ul"),Ch=a("li"),HY=a("strong"),yoo=o("beit"),woo=o(" \u2014 "),kR=a("a"),Aoo=o("BeitFeatureExtractor"),Loo=o(" (BEiT model)"),Boo=l(),Mh=a("li"),UY=a("strong"),xoo=o("clip"),koo=o(" \u2014 "),RR=a("a"),Roo=o("CLIPFeatureExtractor"),Soo=o(" (CLIP model)"),Poo=l(),Eh=a("li"),JY=a("strong"),$oo=o("convnext"),Ioo=o(" \u2014 "),SR=a("a"),joo=o("ConvNextFeatureExtractor"),Doo=o(" (ConvNext model)"),Noo=l(),yh=a("li"),YY=a("strong"),qoo=o("deit"),Goo=o(" \u2014 "),PR=a("a"),Ooo=o("DeiTFeatureExtractor"),Xoo=o(" (DeiT model)"),Voo=l(),wh=a("li"),KY=a("strong"),zoo=o("detr"),Woo=o(" \u2014 "),$R=a("a"),Qoo=o("DetrFeatureExtractor"),Hoo=o(" (DETR model)"),Uoo=l(),Ah=a("li"),ZY=a("strong"),Joo=o("hubert"),Yoo=o(" \u2014 "),IR=a("a"),Koo=o("Wav2Vec2FeatureExtractor"),Zoo=o(" (Hubert model)"),ero=l(),Lh=a("li"),eK=a("strong"),oro=o("layoutlmv2"),rro=o(" \u2014 "),jR=a("a"),tro=o("LayoutLMv2FeatureExtractor"),aro=o(" (LayoutLMv2 model)"),nro=l(),Bh=a("li"),oK=a("strong"),sro=o("maskformer"),lro=o(" \u2014 "),DR=a("a"),iro=o("MaskFormerFeatureExtractor"),dro=o(" (MaskFormer model)"),cro=l(),xh=a("li"),rK=a("strong"),fro=o("perceiver"),mro=o(" \u2014 "),NR=a("a"),gro=o("PerceiverFeatureExtractor"),hro=o(" (Perceiver model)"),pro=l(),kh=a("li"),tK=a("strong"),_ro=o("poolformer"),uro=o(" \u2014 "),qR=a("a"),bro=o("PoolFormerFeatureExtractor"),vro=o(" (PoolFormer model)"),Tro=l(),Rh=a("li"),aK=a("strong"),Fro=o("resnet"),Cro=o(" \u2014 "),GR=a("a"),Mro=o("ConvNextFeatureExtractor"),Ero=o(" (ResNet model)"),yro=l(),Sh=a("li"),nK=a("strong"),wro=o("segformer"),Aro=o(" \u2014 "),OR=a("a"),Lro=o("SegformerFeatureExtractor"),Bro=o(" (SegFormer model)"),xro=l(),Ph=a("li"),sK=a("strong"),kro=o("speech_to_text"),Rro=o(" \u2014 "),XR=a("a"),Sro=o("Speech2TextFeatureExtractor"),Pro=o(" (Speech2Text model)"),$ro=l(),$h=a("li"),lK=a("strong"),Iro=o("swin"),jro=o(" \u2014 "),VR=a("a"),Dro=o("ViTFeatureExtractor"),Nro=o(" (Swin model)"),qro=l(),Ih=a("li"),iK=a("strong"),Gro=o("van"),Oro=o(" \u2014 "),zR=a("a"),Xro=o("ConvNextFeatureExtractor"),Vro=o(" (VAN model)"),zro=l(),jh=a("li"),dK=a("strong"),Wro=o("vit"),Qro=o(" \u2014 "),WR=a("a"),Hro=o("ViTFeatureExtractor"),Uro=o(" (ViT model)"),Jro=l(),Dh=a("li"),cK=a("strong"),Yro=o("vit_mae"),Kro=o(" \u2014 "),QR=a("a"),Zro=o("ViTFeatureExtractor"),eto=o(" (ViTMAE model)"),oto=l(),Nh=a("li"),fK=a("strong"),rto=o("wav2vec2"),tto=o(" \u2014 "),HR=a("a"),ato=o("Wav2Vec2FeatureExtractor"),nto=o(" (Wav2Vec2 model)"),sto=l(),f(qh.$$.fragment),lto=l(),mK=a("p"),ito=o("Examples:"),dto=l(),f(X4.$$.fragment),cto=l(),Gh=a("div"),f(V4.$$.fragment),fto=l(),gK=a("p"),mto=o("Register a new feature extractor for this class."),Yke=l(),od=a("h2"),Oh=a("a"),hK=a("span"),f(z4.$$.fragment),gto=l(),pK=a("span"),hto=o("AutoProcessor"),Kke=l(),Jo=a("div"),f(W4.$$.fragment),pto=l(),Q4=a("p"),_to=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),UR=a("a"),uto=o("AutoProcessor.from_pretrained()"),bto=o(" class method."),vto=l(),H4=a("p"),Tto=o("This class cannot be instantiated directly using "),_K=a("code"),Fto=o("__init__()"),Cto=o(" (throws an error)."),Mto=l(),Ie=a("div"),f(U4.$$.fragment),Eto=l(),uK=a("p"),yto=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),wto=l(),rd=a("p"),Ato=o("The processor class to instantiate is selected based on the "),bK=a("code"),Lto=o("model_type"),Bto=o(` property of the config object (either
passed as an argument or loaded from `),vK=a("code"),xto=o("pretrained_model_name_or_path"),kto=o(" if possible):"),Rto=l(),xe=a("ul"),Xh=a("li"),TK=a("strong"),Sto=o("clip"),Pto=o(" \u2014 "),JR=a("a"),$to=o("CLIPProcessor"),Ito=o(" (CLIP model)"),jto=l(),Vh=a("li"),FK=a("strong"),Dto=o("layoutlmv2"),Nto=o(" \u2014 "),YR=a("a"),qto=o("LayoutLMv2Processor"),Gto=o(" (LayoutLMv2 model)"),Oto=l(),zh=a("li"),CK=a("strong"),Xto=o("layoutxlm"),Vto=o(" \u2014 "),KR=a("a"),zto=o("LayoutXLMProcessor"),Wto=o(" (LayoutXLM model)"),Qto=l(),Wh=a("li"),MK=a("strong"),Hto=o("speech_to_text"),Uto=o(" \u2014 "),ZR=a("a"),Jto=o("Speech2TextProcessor"),Yto=o(" (Speech2Text model)"),Kto=l(),Qh=a("li"),EK=a("strong"),Zto=o("speech_to_text_2"),eao=o(" \u2014 "),eS=a("a"),oao=o("Speech2Text2Processor"),rao=o(" (Speech2Text2 model)"),tao=l(),Hh=a("li"),yK=a("strong"),aao=o("trocr"),nao=o(" \u2014 "),oS=a("a"),sao=o("TrOCRProcessor"),lao=o(" (TrOCR model)"),iao=l(),Uh=a("li"),wK=a("strong"),dao=o("vision-text-dual-encoder"),cao=o(" \u2014 "),rS=a("a"),fao=o("VisionTextDualEncoderProcessor"),mao=o(" (VisionTextDualEncoder model)"),gao=l(),Jh=a("li"),AK=a("strong"),hao=o("wav2vec2"),pao=o(" \u2014 "),tS=a("a"),_ao=o("Wav2Vec2Processor"),uao=o(" (Wav2Vec2 model)"),bao=l(),f(Yh.$$.fragment),vao=l(),LK=a("p"),Tao=o("Examples:"),Fao=l(),f(J4.$$.fragment),Cao=l(),Kh=a("div"),f(Y4.$$.fragment),Mao=l(),BK=a("p"),Eao=o("Register a new processor for this class."),Zke=l(),td=a("h2"),Zh=a("a"),xK=a("span"),f(K4.$$.fragment),yao=l(),kK=a("span"),wao=o("AutoModel"),eRe=l(),Yo=a("div"),f(Z4.$$.fragment),Aao=l(),ad=a("p"),Lao=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),RK=a("code"),Bao=o("from_pretrained()"),xao=o("class method or the "),SK=a("code"),kao=o("from_config()"),Rao=o(`class
method.`),Sao=l(),eE=a("p"),Pao=o("This class cannot be instantiated directly using "),PK=a("code"),$ao=o("__init__()"),Iao=o(" (throws an error)."),jao=l(),Wr=a("div"),f(oE.$$.fragment),Dao=l(),$K=a("p"),Nao=o("Instantiates one of the base model classes of the library from a configuration."),qao=l(),nd=a("p"),Gao=o(`Note:
Loading a model from its configuration file does `),IK=a("strong"),Oao=o("not"),Xao=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=a("code"),Vao=o("from_pretrained()"),zao=o("to load the model weights."),Wao=l(),DK=a("p"),Qao=o("Examples:"),Hao=l(),f(rE.$$.fragment),Uao=l(),je=a("div"),f(tE.$$.fragment),Jao=l(),NK=a("p"),Yao=o("Instantiate one of the base model classes of the library from a pretrained model."),Kao=l(),Ha=a("p"),Zao=o("The model class to instantiate is selected based on the "),qK=a("code"),eno=o("model_type"),ono=o(` property of the config object (either
passed as an argument or loaded from `),GK=a("code"),rno=o("pretrained_model_name_or_path"),tno=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OK=a("code"),ano=o("pretrained_model_name_or_path"),nno=o(":"),sno=l(),F=a("ul"),ep=a("li"),XK=a("strong"),lno=o("albert"),ino=o(" \u2014 "),aS=a("a"),dno=o("AlbertModel"),cno=o(" (ALBERT model)"),fno=l(),op=a("li"),VK=a("strong"),mno=o("bart"),gno=o(" \u2014 "),nS=a("a"),hno=o("BartModel"),pno=o(" (BART model)"),_no=l(),rp=a("li"),zK=a("strong"),uno=o("beit"),bno=o(" \u2014 "),sS=a("a"),vno=o("BeitModel"),Tno=o(" (BEiT model)"),Fno=l(),tp=a("li"),WK=a("strong"),Cno=o("bert"),Mno=o(" \u2014 "),lS=a("a"),Eno=o("BertModel"),yno=o(" (BERT model)"),wno=l(),ap=a("li"),QK=a("strong"),Ano=o("bert-generation"),Lno=o(" \u2014 "),iS=a("a"),Bno=o("BertGenerationEncoder"),xno=o(" (Bert Generation model)"),kno=l(),np=a("li"),HK=a("strong"),Rno=o("big_bird"),Sno=o(" \u2014 "),dS=a("a"),Pno=o("BigBirdModel"),$no=o(" (BigBird model)"),Ino=l(),sp=a("li"),UK=a("strong"),jno=o("bigbird_pegasus"),Dno=o(" \u2014 "),cS=a("a"),Nno=o("BigBirdPegasusModel"),qno=o(" (BigBirdPegasus model)"),Gno=l(),lp=a("li"),JK=a("strong"),Ono=o("blenderbot"),Xno=o(" \u2014 "),fS=a("a"),Vno=o("BlenderbotModel"),zno=o(" (Blenderbot model)"),Wno=l(),ip=a("li"),YK=a("strong"),Qno=o("blenderbot-small"),Hno=o(" \u2014 "),mS=a("a"),Uno=o("BlenderbotSmallModel"),Jno=o(" (BlenderbotSmall model)"),Yno=l(),dp=a("li"),KK=a("strong"),Kno=o("camembert"),Zno=o(" \u2014 "),gS=a("a"),eso=o("CamembertModel"),oso=o(" (CamemBERT model)"),rso=l(),cp=a("li"),ZK=a("strong"),tso=o("canine"),aso=o(" \u2014 "),hS=a("a"),nso=o("CanineModel"),sso=o(" (Canine model)"),lso=l(),fp=a("li"),eZ=a("strong"),iso=o("clip"),dso=o(" \u2014 "),pS=a("a"),cso=o("CLIPModel"),fso=o(" (CLIP model)"),mso=l(),mp=a("li"),oZ=a("strong"),gso=o("convbert"),hso=o(" \u2014 "),_S=a("a"),pso=o("ConvBertModel"),_so=o(" (ConvBERT model)"),uso=l(),gp=a("li"),rZ=a("strong"),bso=o("convnext"),vso=o(" \u2014 "),uS=a("a"),Tso=o("ConvNextModel"),Fso=o(" (ConvNext model)"),Cso=l(),hp=a("li"),tZ=a("strong"),Mso=o("ctrl"),Eso=o(" \u2014 "),bS=a("a"),yso=o("CTRLModel"),wso=o(" (CTRL model)"),Aso=l(),pp=a("li"),aZ=a("strong"),Lso=o("data2vec-audio"),Bso=o(" \u2014 "),vS=a("a"),xso=o("Data2VecAudioModel"),kso=o(" (Data2VecAudio model)"),Rso=l(),_p=a("li"),nZ=a("strong"),Sso=o("data2vec-text"),Pso=o(" \u2014 "),TS=a("a"),$so=o("Data2VecTextModel"),Iso=o(" (Data2VecText model)"),jso=l(),up=a("li"),sZ=a("strong"),Dso=o("deberta"),Nso=o(" \u2014 "),FS=a("a"),qso=o("DebertaModel"),Gso=o(" (DeBERTa model)"),Oso=l(),bp=a("li"),lZ=a("strong"),Xso=o("deberta-v2"),Vso=o(" \u2014 "),CS=a("a"),zso=o("DebertaV2Model"),Wso=o(" (DeBERTa-v2 model)"),Qso=l(),vp=a("li"),iZ=a("strong"),Hso=o("decision_transformer"),Uso=o(" \u2014 "),MS=a("a"),Jso=o("DecisionTransformerModel"),Yso=o(" (Decision Transformer model)"),Kso=l(),Tp=a("li"),dZ=a("strong"),Zso=o("deit"),elo=o(" \u2014 "),ES=a("a"),olo=o("DeiTModel"),rlo=o(" (DeiT model)"),tlo=l(),Fp=a("li"),cZ=a("strong"),alo=o("detr"),nlo=o(" \u2014 "),yS=a("a"),slo=o("DetrModel"),llo=o(" (DETR model)"),ilo=l(),Cp=a("li"),fZ=a("strong"),dlo=o("distilbert"),clo=o(" \u2014 "),wS=a("a"),flo=o("DistilBertModel"),mlo=o(" (DistilBERT model)"),glo=l(),Mp=a("li"),mZ=a("strong"),hlo=o("dpr"),plo=o(" \u2014 "),AS=a("a"),_lo=o("DPRQuestionEncoder"),ulo=o(" (DPR model)"),blo=l(),Ep=a("li"),gZ=a("strong"),vlo=o("electra"),Tlo=o(" \u2014 "),LS=a("a"),Flo=o("ElectraModel"),Clo=o(" (ELECTRA model)"),Mlo=l(),yp=a("li"),hZ=a("strong"),Elo=o("flaubert"),ylo=o(" \u2014 "),BS=a("a"),wlo=o("FlaubertModel"),Alo=o(" (FlauBERT model)"),Llo=l(),wp=a("li"),pZ=a("strong"),Blo=o("fnet"),xlo=o(" \u2014 "),xS=a("a"),klo=o("FNetModel"),Rlo=o(" (FNet model)"),Slo=l(),Ap=a("li"),_Z=a("strong"),Plo=o("fsmt"),$lo=o(" \u2014 "),kS=a("a"),Ilo=o("FSMTModel"),jlo=o(" (FairSeq Machine-Translation model)"),Dlo=l(),Vs=a("li"),uZ=a("strong"),Nlo=o("funnel"),qlo=o(" \u2014 "),RS=a("a"),Glo=o("FunnelModel"),Olo=o(" or "),SS=a("a"),Xlo=o("FunnelBaseModel"),Vlo=o(" (Funnel Transformer model)"),zlo=l(),Lp=a("li"),bZ=a("strong"),Wlo=o("glpn"),Qlo=o(" \u2014 "),PS=a("a"),Hlo=o("GLPNModel"),Ulo=o(" (GLPN model)"),Jlo=l(),Bp=a("li"),vZ=a("strong"),Ylo=o("gpt2"),Klo=o(" \u2014 "),$S=a("a"),Zlo=o("GPT2Model"),eio=o(" (OpenAI GPT-2 model)"),oio=l(),xp=a("li"),TZ=a("strong"),rio=o("gpt_neo"),tio=o(" \u2014 "),IS=a("a"),aio=o("GPTNeoModel"),nio=o(" (GPT Neo model)"),sio=l(),kp=a("li"),FZ=a("strong"),lio=o("gptj"),iio=o(" \u2014 "),jS=a("a"),dio=o("GPTJModel"),cio=o(" (GPT-J model)"),fio=l(),Rp=a("li"),CZ=a("strong"),mio=o("hubert"),gio=o(" \u2014 "),DS=a("a"),hio=o("HubertModel"),pio=o(" (Hubert model)"),_io=l(),Sp=a("li"),MZ=a("strong"),uio=o("ibert"),bio=o(" \u2014 "),NS=a("a"),vio=o("IBertModel"),Tio=o(" (I-BERT model)"),Fio=l(),Pp=a("li"),EZ=a("strong"),Cio=o("imagegpt"),Mio=o(" \u2014 "),qS=a("a"),Eio=o("ImageGPTModel"),yio=o(" (ImageGPT model)"),wio=l(),$p=a("li"),yZ=a("strong"),Aio=o("layoutlm"),Lio=o(" \u2014 "),GS=a("a"),Bio=o("LayoutLMModel"),xio=o(" (LayoutLM model)"),kio=l(),Ip=a("li"),wZ=a("strong"),Rio=o("layoutlmv2"),Sio=o(" \u2014 "),OS=a("a"),Pio=o("LayoutLMv2Model"),$io=o(" (LayoutLMv2 model)"),Iio=l(),jp=a("li"),AZ=a("strong"),jio=o("led"),Dio=o(" \u2014 "),XS=a("a"),Nio=o("LEDModel"),qio=o(" (LED model)"),Gio=l(),Dp=a("li"),LZ=a("strong"),Oio=o("longformer"),Xio=o(" \u2014 "),VS=a("a"),Vio=o("LongformerModel"),zio=o(" (Longformer model)"),Wio=l(),Np=a("li"),BZ=a("strong"),Qio=o("luke"),Hio=o(" \u2014 "),zS=a("a"),Uio=o("LukeModel"),Jio=o(" (LUKE model)"),Yio=l(),qp=a("li"),xZ=a("strong"),Kio=o("lxmert"),Zio=o(" \u2014 "),WS=a("a"),edo=o("LxmertModel"),odo=o(" (LXMERT model)"),rdo=l(),Gp=a("li"),kZ=a("strong"),tdo=o("m2m_100"),ado=o(" \u2014 "),QS=a("a"),ndo=o("M2M100Model"),sdo=o(" (M2M100 model)"),ldo=l(),Op=a("li"),RZ=a("strong"),ido=o("marian"),ddo=o(" \u2014 "),HS=a("a"),cdo=o("MarianModel"),fdo=o(" (Marian model)"),mdo=l(),Xp=a("li"),SZ=a("strong"),gdo=o("maskformer"),hdo=o(" \u2014 "),US=a("a"),pdo=o("MaskFormerModel"),_do=o(" (MaskFormer model)"),udo=l(),Vp=a("li"),PZ=a("strong"),bdo=o("mbart"),vdo=o(" \u2014 "),JS=a("a"),Tdo=o("MBartModel"),Fdo=o(" (mBART model)"),Cdo=l(),zp=a("li"),$Z=a("strong"),Mdo=o("megatron-bert"),Edo=o(" \u2014 "),YS=a("a"),ydo=o("MegatronBertModel"),wdo=o(" (MegatronBert model)"),Ado=l(),Wp=a("li"),IZ=a("strong"),Ldo=o("mobilebert"),Bdo=o(" \u2014 "),KS=a("a"),xdo=o("MobileBertModel"),kdo=o(" (MobileBERT model)"),Rdo=l(),Qp=a("li"),jZ=a("strong"),Sdo=o("mpnet"),Pdo=o(" \u2014 "),ZS=a("a"),$do=o("MPNetModel"),Ido=o(" (MPNet model)"),jdo=l(),Hp=a("li"),DZ=a("strong"),Ddo=o("mt5"),Ndo=o(" \u2014 "),eP=a("a"),qdo=o("MT5Model"),Gdo=o(" (mT5 model)"),Odo=l(),Up=a("li"),NZ=a("strong"),Xdo=o("nystromformer"),Vdo=o(" \u2014 "),oP=a("a"),zdo=o("NystromformerModel"),Wdo=o(" (Nystromformer model)"),Qdo=l(),Jp=a("li"),qZ=a("strong"),Hdo=o("openai-gpt"),Udo=o(" \u2014 "),rP=a("a"),Jdo=o("OpenAIGPTModel"),Ydo=o(" (OpenAI GPT model)"),Kdo=l(),Yp=a("li"),GZ=a("strong"),Zdo=o("pegasus"),eco=o(" \u2014 "),tP=a("a"),oco=o("PegasusModel"),rco=o(" (Pegasus model)"),tco=l(),Kp=a("li"),OZ=a("strong"),aco=o("perceiver"),nco=o(" \u2014 "),aP=a("a"),sco=o("PerceiverModel"),lco=o(" (Perceiver model)"),ico=l(),Zp=a("li"),XZ=a("strong"),dco=o("plbart"),cco=o(" \u2014 "),nP=a("a"),fco=o("PLBartModel"),mco=o(" (PLBart model)"),gco=l(),e_=a("li"),VZ=a("strong"),hco=o("poolformer"),pco=o(" \u2014 "),sP=a("a"),_co=o("PoolFormerModel"),uco=o(" (PoolFormer model)"),bco=l(),o_=a("li"),zZ=a("strong"),vco=o("prophetnet"),Tco=o(" \u2014 "),lP=a("a"),Fco=o("ProphetNetModel"),Cco=o(" (ProphetNet model)"),Mco=l(),r_=a("li"),WZ=a("strong"),Eco=o("qdqbert"),yco=o(" \u2014 "),iP=a("a"),wco=o("QDQBertModel"),Aco=o(" (QDQBert model)"),Lco=l(),t_=a("li"),QZ=a("strong"),Bco=o("reformer"),xco=o(" \u2014 "),dP=a("a"),kco=o("ReformerModel"),Rco=o(" (Reformer model)"),Sco=l(),a_=a("li"),HZ=a("strong"),Pco=o("rembert"),$co=o(" \u2014 "),cP=a("a"),Ico=o("RemBertModel"),jco=o(" (RemBERT model)"),Dco=l(),n_=a("li"),UZ=a("strong"),Nco=o("resnet"),qco=o(" \u2014 "),fP=a("a"),Gco=o("ResNetModel"),Oco=o(" (ResNet model)"),Xco=l(),s_=a("li"),JZ=a("strong"),Vco=o("retribert"),zco=o(" \u2014 "),mP=a("a"),Wco=o("RetriBertModel"),Qco=o(" (RetriBERT model)"),Hco=l(),l_=a("li"),YZ=a("strong"),Uco=o("roberta"),Jco=o(" \u2014 "),gP=a("a"),Yco=o("RobertaModel"),Kco=o(" (RoBERTa model)"),Zco=l(),i_=a("li"),KZ=a("strong"),efo=o("roformer"),ofo=o(" \u2014 "),hP=a("a"),rfo=o("RoFormerModel"),tfo=o(" (RoFormer model)"),afo=l(),d_=a("li"),ZZ=a("strong"),nfo=o("segformer"),sfo=o(" \u2014 "),pP=a("a"),lfo=o("SegformerModel"),ifo=o(" (SegFormer model)"),dfo=l(),c_=a("li"),eee=a("strong"),cfo=o("sew"),ffo=o(" \u2014 "),_P=a("a"),mfo=o("SEWModel"),gfo=o(" (SEW model)"),hfo=l(),f_=a("li"),oee=a("strong"),pfo=o("sew-d"),_fo=o(" \u2014 "),uP=a("a"),ufo=o("SEWDModel"),bfo=o(" (SEW-D model)"),vfo=l(),m_=a("li"),ree=a("strong"),Tfo=o("speech_to_text"),Ffo=o(" \u2014 "),bP=a("a"),Cfo=o("Speech2TextModel"),Mfo=o(" (Speech2Text model)"),Efo=l(),g_=a("li"),tee=a("strong"),yfo=o("splinter"),wfo=o(" \u2014 "),vP=a("a"),Afo=o("SplinterModel"),Lfo=o(" (Splinter model)"),Bfo=l(),h_=a("li"),aee=a("strong"),xfo=o("squeezebert"),kfo=o(" \u2014 "),TP=a("a"),Rfo=o("SqueezeBertModel"),Sfo=o(" (SqueezeBERT model)"),Pfo=l(),p_=a("li"),nee=a("strong"),$fo=o("swin"),Ifo=o(" \u2014 "),FP=a("a"),jfo=o("SwinModel"),Dfo=o(" (Swin model)"),Nfo=l(),__=a("li"),see=a("strong"),qfo=o("t5"),Gfo=o(" \u2014 "),CP=a("a"),Ofo=o("T5Model"),Xfo=o(" (T5 model)"),Vfo=l(),u_=a("li"),lee=a("strong"),zfo=o("tapas"),Wfo=o(" \u2014 "),MP=a("a"),Qfo=o("TapasModel"),Hfo=o(" (TAPAS model)"),Ufo=l(),b_=a("li"),iee=a("strong"),Jfo=o("transfo-xl"),Yfo=o(" \u2014 "),EP=a("a"),Kfo=o("TransfoXLModel"),Zfo=o(" (Transformer-XL model)"),emo=l(),v_=a("li"),dee=a("strong"),omo=o("unispeech"),rmo=o(" \u2014 "),yP=a("a"),tmo=o("UniSpeechModel"),amo=o(" (UniSpeech model)"),nmo=l(),T_=a("li"),cee=a("strong"),smo=o("unispeech-sat"),lmo=o(" \u2014 "),wP=a("a"),imo=o("UniSpeechSatModel"),dmo=o(" (UniSpeechSat model)"),cmo=l(),F_=a("li"),fee=a("strong"),fmo=o("van"),mmo=o(" \u2014 "),AP=a("a"),gmo=o("VanModel"),hmo=o(" (VAN model)"),pmo=l(),C_=a("li"),mee=a("strong"),_mo=o("vilt"),umo=o(" \u2014 "),LP=a("a"),bmo=o("ViltModel"),vmo=o(" (ViLT model)"),Tmo=l(),M_=a("li"),gee=a("strong"),Fmo=o("vision-text-dual-encoder"),Cmo=o(" \u2014 "),BP=a("a"),Mmo=o("VisionTextDualEncoderModel"),Emo=o(" (VisionTextDualEncoder model)"),ymo=l(),E_=a("li"),hee=a("strong"),wmo=o("visual_bert"),Amo=o(" \u2014 "),xP=a("a"),Lmo=o("VisualBertModel"),Bmo=o(" (VisualBert model)"),xmo=l(),y_=a("li"),pee=a("strong"),kmo=o("vit"),Rmo=o(" \u2014 "),kP=a("a"),Smo=o("ViTModel"),Pmo=o(" (ViT model)"),$mo=l(),w_=a("li"),_ee=a("strong"),Imo=o("vit_mae"),jmo=o(" \u2014 "),RP=a("a"),Dmo=o("ViTMAEModel"),Nmo=o(" (ViTMAE model)"),qmo=l(),A_=a("li"),uee=a("strong"),Gmo=o("wav2vec2"),Omo=o(" \u2014 "),SP=a("a"),Xmo=o("Wav2Vec2Model"),Vmo=o(" (Wav2Vec2 model)"),zmo=l(),L_=a("li"),bee=a("strong"),Wmo=o("wavlm"),Qmo=o(" \u2014 "),PP=a("a"),Hmo=o("WavLMModel"),Umo=o(" (WavLM model)"),Jmo=l(),B_=a("li"),vee=a("strong"),Ymo=o("xglm"),Kmo=o(" \u2014 "),$P=a("a"),Zmo=o("XGLMModel"),ego=o(" (XGLM model)"),ogo=l(),x_=a("li"),Tee=a("strong"),rgo=o("xlm"),tgo=o(" \u2014 "),IP=a("a"),ago=o("XLMModel"),ngo=o(" (XLM model)"),sgo=l(),k_=a("li"),Fee=a("strong"),lgo=o("xlm-prophetnet"),igo=o(" \u2014 "),jP=a("a"),dgo=o("XLMProphetNetModel"),cgo=o(" (XLMProphetNet model)"),fgo=l(),R_=a("li"),Cee=a("strong"),mgo=o("xlm-roberta"),ggo=o(" \u2014 "),DP=a("a"),hgo=o("XLMRobertaModel"),pgo=o(" (XLM-RoBERTa model)"),_go=l(),S_=a("li"),Mee=a("strong"),ugo=o("xlm-roberta-xl"),bgo=o(" \u2014 "),NP=a("a"),vgo=o("XLMRobertaXLModel"),Tgo=o(" (XLM-RoBERTa-XL model)"),Fgo=l(),P_=a("li"),Eee=a("strong"),Cgo=o("xlnet"),Mgo=o(" \u2014 "),qP=a("a"),Ego=o("XLNetModel"),ygo=o(" (XLNet model)"),wgo=l(),$_=a("li"),yee=a("strong"),Ago=o("yoso"),Lgo=o(" \u2014 "),GP=a("a"),Bgo=o("YosoModel"),xgo=o(" (YOSO model)"),kgo=l(),I_=a("p"),Rgo=o("The model is set in evaluation mode by default using "),wee=a("code"),Sgo=o("model.eval()"),Pgo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aee=a("code"),$go=o("model.train()"),Igo=l(),Lee=a("p"),jgo=o("Examples:"),Dgo=l(),f(aE.$$.fragment),oRe=l(),sd=a("h2"),j_=a("a"),Bee=a("span"),f(nE.$$.fragment),Ngo=l(),xee=a("span"),qgo=o("AutoModelForPreTraining"),rRe=l(),Ko=a("div"),f(sE.$$.fragment),Ggo=l(),ld=a("p"),Ogo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kee=a("code"),Xgo=o("from_pretrained()"),Vgo=o("class method or the "),Ree=a("code"),zgo=o("from_config()"),Wgo=o(`class
method.`),Qgo=l(),lE=a("p"),Hgo=o("This class cannot be instantiated directly using "),See=a("code"),Ugo=o("__init__()"),Jgo=o(" (throws an error)."),Ygo=l(),Qr=a("div"),f(iE.$$.fragment),Kgo=l(),Pee=a("p"),Zgo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),eho=l(),id=a("p"),oho=o(`Note:
Loading a model from its configuration file does `),$ee=a("strong"),rho=o("not"),tho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iee=a("code"),aho=o("from_pretrained()"),nho=o("to load the model weights."),sho=l(),jee=a("p"),lho=o("Examples:"),iho=l(),f(dE.$$.fragment),dho=l(),De=a("div"),f(cE.$$.fragment),cho=l(),Dee=a("p"),fho=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mho=l(),Ua=a("p"),gho=o("The model class to instantiate is selected based on the "),Nee=a("code"),hho=o("model_type"),pho=o(` property of the config object (either
passed as an argument or loaded from `),qee=a("code"),_ho=o("pretrained_model_name_or_path"),uho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gee=a("code"),bho=o("pretrained_model_name_or_path"),vho=o(":"),Tho=l(),k=a("ul"),D_=a("li"),Oee=a("strong"),Fho=o("albert"),Cho=o(" \u2014 "),OP=a("a"),Mho=o("AlbertForPreTraining"),Eho=o(" (ALBERT model)"),yho=l(),N_=a("li"),Xee=a("strong"),who=o("bart"),Aho=o(" \u2014 "),XP=a("a"),Lho=o("BartForConditionalGeneration"),Bho=o(" (BART model)"),xho=l(),q_=a("li"),Vee=a("strong"),kho=o("bert"),Rho=o(" \u2014 "),VP=a("a"),Sho=o("BertForPreTraining"),Pho=o(" (BERT model)"),$ho=l(),G_=a("li"),zee=a("strong"),Iho=o("big_bird"),jho=o(" \u2014 "),zP=a("a"),Dho=o("BigBirdForPreTraining"),Nho=o(" (BigBird model)"),qho=l(),O_=a("li"),Wee=a("strong"),Gho=o("camembert"),Oho=o(" \u2014 "),WP=a("a"),Xho=o("CamembertForMaskedLM"),Vho=o(" (CamemBERT model)"),zho=l(),X_=a("li"),Qee=a("strong"),Who=o("ctrl"),Qho=o(" \u2014 "),QP=a("a"),Hho=o("CTRLLMHeadModel"),Uho=o(" (CTRL model)"),Jho=l(),V_=a("li"),Hee=a("strong"),Yho=o("data2vec-text"),Kho=o(" \u2014 "),HP=a("a"),Zho=o("Data2VecTextForMaskedLM"),epo=o(" (Data2VecText model)"),opo=l(),z_=a("li"),Uee=a("strong"),rpo=o("deberta"),tpo=o(" \u2014 "),UP=a("a"),apo=o("DebertaForMaskedLM"),npo=o(" (DeBERTa model)"),spo=l(),W_=a("li"),Jee=a("strong"),lpo=o("deberta-v2"),ipo=o(" \u2014 "),JP=a("a"),dpo=o("DebertaV2ForMaskedLM"),cpo=o(" (DeBERTa-v2 model)"),fpo=l(),Q_=a("li"),Yee=a("strong"),mpo=o("distilbert"),gpo=o(" \u2014 "),YP=a("a"),hpo=o("DistilBertForMaskedLM"),ppo=o(" (DistilBERT model)"),_po=l(),H_=a("li"),Kee=a("strong"),upo=o("electra"),bpo=o(" \u2014 "),KP=a("a"),vpo=o("ElectraForPreTraining"),Tpo=o(" (ELECTRA model)"),Fpo=l(),U_=a("li"),Zee=a("strong"),Cpo=o("flaubert"),Mpo=o(" \u2014 "),ZP=a("a"),Epo=o("FlaubertWithLMHeadModel"),ypo=o(" (FlauBERT model)"),wpo=l(),J_=a("li"),eoe=a("strong"),Apo=o("fnet"),Lpo=o(" \u2014 "),e$=a("a"),Bpo=o("FNetForPreTraining"),xpo=o(" (FNet model)"),kpo=l(),Y_=a("li"),ooe=a("strong"),Rpo=o("fsmt"),Spo=o(" \u2014 "),o$=a("a"),Ppo=o("FSMTForConditionalGeneration"),$po=o(" (FairSeq Machine-Translation model)"),Ipo=l(),K_=a("li"),roe=a("strong"),jpo=o("funnel"),Dpo=o(" \u2014 "),r$=a("a"),Npo=o("FunnelForPreTraining"),qpo=o(" (Funnel Transformer model)"),Gpo=l(),Z_=a("li"),toe=a("strong"),Opo=o("gpt2"),Xpo=o(" \u2014 "),t$=a("a"),Vpo=o("GPT2LMHeadModel"),zpo=o(" (OpenAI GPT-2 model)"),Wpo=l(),eu=a("li"),aoe=a("strong"),Qpo=o("ibert"),Hpo=o(" \u2014 "),a$=a("a"),Upo=o("IBertForMaskedLM"),Jpo=o(" (I-BERT model)"),Ypo=l(),ou=a("li"),noe=a("strong"),Kpo=o("layoutlm"),Zpo=o(" \u2014 "),n$=a("a"),e_o=o("LayoutLMForMaskedLM"),o_o=o(" (LayoutLM model)"),r_o=l(),ru=a("li"),soe=a("strong"),t_o=o("longformer"),a_o=o(" \u2014 "),s$=a("a"),n_o=o("LongformerForMaskedLM"),s_o=o(" (Longformer model)"),l_o=l(),tu=a("li"),loe=a("strong"),i_o=o("lxmert"),d_o=o(" \u2014 "),l$=a("a"),c_o=o("LxmertForPreTraining"),f_o=o(" (LXMERT model)"),m_o=l(),au=a("li"),ioe=a("strong"),g_o=o("megatron-bert"),h_o=o(" \u2014 "),i$=a("a"),p_o=o("MegatronBertForPreTraining"),__o=o(" (MegatronBert model)"),u_o=l(),nu=a("li"),doe=a("strong"),b_o=o("mobilebert"),v_o=o(" \u2014 "),d$=a("a"),T_o=o("MobileBertForPreTraining"),F_o=o(" (MobileBERT model)"),C_o=l(),su=a("li"),coe=a("strong"),M_o=o("mpnet"),E_o=o(" \u2014 "),c$=a("a"),y_o=o("MPNetForMaskedLM"),w_o=o(" (MPNet model)"),A_o=l(),lu=a("li"),foe=a("strong"),L_o=o("openai-gpt"),B_o=o(" \u2014 "),f$=a("a"),x_o=o("OpenAIGPTLMHeadModel"),k_o=o(" (OpenAI GPT model)"),R_o=l(),iu=a("li"),moe=a("strong"),S_o=o("retribert"),P_o=o(" \u2014 "),m$=a("a"),$_o=o("RetriBertModel"),I_o=o(" (RetriBERT model)"),j_o=l(),du=a("li"),goe=a("strong"),D_o=o("roberta"),N_o=o(" \u2014 "),g$=a("a"),q_o=o("RobertaForMaskedLM"),G_o=o(" (RoBERTa model)"),O_o=l(),cu=a("li"),hoe=a("strong"),X_o=o("squeezebert"),V_o=o(" \u2014 "),h$=a("a"),z_o=o("SqueezeBertForMaskedLM"),W_o=o(" (SqueezeBERT model)"),Q_o=l(),fu=a("li"),poe=a("strong"),H_o=o("t5"),U_o=o(" \u2014 "),p$=a("a"),J_o=o("T5ForConditionalGeneration"),Y_o=o(" (T5 model)"),K_o=l(),mu=a("li"),_oe=a("strong"),Z_o=o("tapas"),euo=o(" \u2014 "),_$=a("a"),ouo=o("TapasForMaskedLM"),ruo=o(" (TAPAS model)"),tuo=l(),gu=a("li"),uoe=a("strong"),auo=o("transfo-xl"),nuo=o(" \u2014 "),u$=a("a"),suo=o("TransfoXLLMHeadModel"),luo=o(" (Transformer-XL model)"),iuo=l(),hu=a("li"),boe=a("strong"),duo=o("unispeech"),cuo=o(" \u2014 "),b$=a("a"),fuo=o("UniSpeechForPreTraining"),muo=o(" (UniSpeech model)"),guo=l(),pu=a("li"),voe=a("strong"),huo=o("unispeech-sat"),puo=o(" \u2014 "),v$=a("a"),_uo=o("UniSpeechSatForPreTraining"),uuo=o(" (UniSpeechSat model)"),buo=l(),_u=a("li"),Toe=a("strong"),vuo=o("visual_bert"),Tuo=o(" \u2014 "),T$=a("a"),Fuo=o("VisualBertForPreTraining"),Cuo=o(" (VisualBert model)"),Muo=l(),uu=a("li"),Foe=a("strong"),Euo=o("vit_mae"),yuo=o(" \u2014 "),F$=a("a"),wuo=o("ViTMAEForPreTraining"),Auo=o(" (ViTMAE model)"),Luo=l(),bu=a("li"),Coe=a("strong"),Buo=o("wav2vec2"),xuo=o(" \u2014 "),C$=a("a"),kuo=o("Wav2Vec2ForPreTraining"),Ruo=o(" (Wav2Vec2 model)"),Suo=l(),vu=a("li"),Moe=a("strong"),Puo=o("xlm"),$uo=o(" \u2014 "),M$=a("a"),Iuo=o("XLMWithLMHeadModel"),juo=o(" (XLM model)"),Duo=l(),Tu=a("li"),Eoe=a("strong"),Nuo=o("xlm-roberta"),quo=o(" \u2014 "),E$=a("a"),Guo=o("XLMRobertaForMaskedLM"),Ouo=o(" (XLM-RoBERTa model)"),Xuo=l(),Fu=a("li"),yoe=a("strong"),Vuo=o("xlm-roberta-xl"),zuo=o(" \u2014 "),y$=a("a"),Wuo=o("XLMRobertaXLForMaskedLM"),Quo=o(" (XLM-RoBERTa-XL model)"),Huo=l(),Cu=a("li"),woe=a("strong"),Uuo=o("xlnet"),Juo=o(" \u2014 "),w$=a("a"),Yuo=o("XLNetLMHeadModel"),Kuo=o(" (XLNet model)"),Zuo=l(),Mu=a("p"),e1o=o("The model is set in evaluation mode by default using "),Aoe=a("code"),o1o=o("model.eval()"),r1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Loe=a("code"),t1o=o("model.train()"),a1o=l(),Boe=a("p"),n1o=o("Examples:"),s1o=l(),f(fE.$$.fragment),tRe=l(),dd=a("h2"),Eu=a("a"),xoe=a("span"),f(mE.$$.fragment),l1o=l(),koe=a("span"),i1o=o("AutoModelForCausalLM"),aRe=l(),Zo=a("div"),f(gE.$$.fragment),d1o=l(),cd=a("p"),c1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Roe=a("code"),f1o=o("from_pretrained()"),m1o=o("class method or the "),Soe=a("code"),g1o=o("from_config()"),h1o=o(`class
method.`),p1o=l(),hE=a("p"),_1o=o("This class cannot be instantiated directly using "),Poe=a("code"),u1o=o("__init__()"),b1o=o(" (throws an error)."),v1o=l(),Hr=a("div"),f(pE.$$.fragment),T1o=l(),$oe=a("p"),F1o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),C1o=l(),fd=a("p"),M1o=o(`Note:
Loading a model from its configuration file does `),Ioe=a("strong"),E1o=o("not"),y1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),joe=a("code"),w1o=o("from_pretrained()"),A1o=o("to load the model weights."),L1o=l(),Doe=a("p"),B1o=o("Examples:"),x1o=l(),f(_E.$$.fragment),k1o=l(),Ne=a("div"),f(uE.$$.fragment),R1o=l(),Noe=a("p"),S1o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),P1o=l(),Ja=a("p"),$1o=o("The model class to instantiate is selected based on the "),qoe=a("code"),I1o=o("model_type"),j1o=o(` property of the config object (either
passed as an argument or loaded from `),Goe=a("code"),D1o=o("pretrained_model_name_or_path"),N1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ooe=a("code"),q1o=o("pretrained_model_name_or_path"),G1o=o(":"),O1o=l(),$=a("ul"),yu=a("li"),Xoe=a("strong"),X1o=o("bart"),V1o=o(" \u2014 "),A$=a("a"),z1o=o("BartForCausalLM"),W1o=o(" (BART model)"),Q1o=l(),wu=a("li"),Voe=a("strong"),H1o=o("bert"),U1o=o(" \u2014 "),L$=a("a"),J1o=o("BertLMHeadModel"),Y1o=o(" (BERT model)"),K1o=l(),Au=a("li"),zoe=a("strong"),Z1o=o("bert-generation"),ebo=o(" \u2014 "),B$=a("a"),obo=o("BertGenerationDecoder"),rbo=o(" (Bert Generation model)"),tbo=l(),Lu=a("li"),Woe=a("strong"),abo=o("big_bird"),nbo=o(" \u2014 "),x$=a("a"),sbo=o("BigBirdForCausalLM"),lbo=o(" (BigBird model)"),ibo=l(),Bu=a("li"),Qoe=a("strong"),dbo=o("bigbird_pegasus"),cbo=o(" \u2014 "),k$=a("a"),fbo=o("BigBirdPegasusForCausalLM"),mbo=o(" (BigBirdPegasus model)"),gbo=l(),xu=a("li"),Hoe=a("strong"),hbo=o("blenderbot"),pbo=o(" \u2014 "),R$=a("a"),_bo=o("BlenderbotForCausalLM"),ubo=o(" (Blenderbot model)"),bbo=l(),ku=a("li"),Uoe=a("strong"),vbo=o("blenderbot-small"),Tbo=o(" \u2014 "),S$=a("a"),Fbo=o("BlenderbotSmallForCausalLM"),Cbo=o(" (BlenderbotSmall model)"),Mbo=l(),Ru=a("li"),Joe=a("strong"),Ebo=o("camembert"),ybo=o(" \u2014 "),P$=a("a"),wbo=o("CamembertForCausalLM"),Abo=o(" (CamemBERT model)"),Lbo=l(),Su=a("li"),Yoe=a("strong"),Bbo=o("ctrl"),xbo=o(" \u2014 "),$$=a("a"),kbo=o("CTRLLMHeadModel"),Rbo=o(" (CTRL model)"),Sbo=l(),Pu=a("li"),Koe=a("strong"),Pbo=o("data2vec-text"),$bo=o(" \u2014 "),I$=a("a"),Ibo=o("Data2VecTextForCausalLM"),jbo=o(" (Data2VecText model)"),Dbo=l(),$u=a("li"),Zoe=a("strong"),Nbo=o("electra"),qbo=o(" \u2014 "),j$=a("a"),Gbo=o("ElectraForCausalLM"),Obo=o(" (ELECTRA model)"),Xbo=l(),Iu=a("li"),ere=a("strong"),Vbo=o("gpt2"),zbo=o(" \u2014 "),D$=a("a"),Wbo=o("GPT2LMHeadModel"),Qbo=o(" (OpenAI GPT-2 model)"),Hbo=l(),ju=a("li"),ore=a("strong"),Ubo=o("gpt_neo"),Jbo=o(" \u2014 "),N$=a("a"),Ybo=o("GPTNeoForCausalLM"),Kbo=o(" (GPT Neo model)"),Zbo=l(),Du=a("li"),rre=a("strong"),e5o=o("gptj"),o5o=o(" \u2014 "),q$=a("a"),r5o=o("GPTJForCausalLM"),t5o=o(" (GPT-J model)"),a5o=l(),Nu=a("li"),tre=a("strong"),n5o=o("marian"),s5o=o(" \u2014 "),G$=a("a"),l5o=o("MarianForCausalLM"),i5o=o(" (Marian model)"),d5o=l(),qu=a("li"),are=a("strong"),c5o=o("mbart"),f5o=o(" \u2014 "),O$=a("a"),m5o=o("MBartForCausalLM"),g5o=o(" (mBART model)"),h5o=l(),Gu=a("li"),nre=a("strong"),p5o=o("megatron-bert"),_5o=o(" \u2014 "),X$=a("a"),u5o=o("MegatronBertForCausalLM"),b5o=o(" (MegatronBert model)"),v5o=l(),Ou=a("li"),sre=a("strong"),T5o=o("openai-gpt"),F5o=o(" \u2014 "),V$=a("a"),C5o=o("OpenAIGPTLMHeadModel"),M5o=o(" (OpenAI GPT model)"),E5o=l(),Xu=a("li"),lre=a("strong"),y5o=o("pegasus"),w5o=o(" \u2014 "),z$=a("a"),A5o=o("PegasusForCausalLM"),L5o=o(" (Pegasus model)"),B5o=l(),Vu=a("li"),ire=a("strong"),x5o=o("plbart"),k5o=o(" \u2014 "),W$=a("a"),R5o=o("PLBartForCausalLM"),S5o=o(" (PLBart model)"),P5o=l(),zu=a("li"),dre=a("strong"),$5o=o("prophetnet"),I5o=o(" \u2014 "),Q$=a("a"),j5o=o("ProphetNetForCausalLM"),D5o=o(" (ProphetNet model)"),N5o=l(),Wu=a("li"),cre=a("strong"),q5o=o("qdqbert"),G5o=o(" \u2014 "),H$=a("a"),O5o=o("QDQBertLMHeadModel"),X5o=o(" (QDQBert model)"),V5o=l(),Qu=a("li"),fre=a("strong"),z5o=o("reformer"),W5o=o(" \u2014 "),U$=a("a"),Q5o=o("ReformerModelWithLMHead"),H5o=o(" (Reformer model)"),U5o=l(),Hu=a("li"),mre=a("strong"),J5o=o("rembert"),Y5o=o(" \u2014 "),J$=a("a"),K5o=o("RemBertForCausalLM"),Z5o=o(" (RemBERT model)"),e2o=l(),Uu=a("li"),gre=a("strong"),o2o=o("roberta"),r2o=o(" \u2014 "),Y$=a("a"),t2o=o("RobertaForCausalLM"),a2o=o(" (RoBERTa model)"),n2o=l(),Ju=a("li"),hre=a("strong"),s2o=o("roformer"),l2o=o(" \u2014 "),K$=a("a"),i2o=o("RoFormerForCausalLM"),d2o=o(" (RoFormer model)"),c2o=l(),Yu=a("li"),pre=a("strong"),f2o=o("speech_to_text_2"),m2o=o(" \u2014 "),Z$=a("a"),g2o=o("Speech2Text2ForCausalLM"),h2o=o(" (Speech2Text2 model)"),p2o=l(),Ku=a("li"),_re=a("strong"),_2o=o("transfo-xl"),u2o=o(" \u2014 "),eI=a("a"),b2o=o("TransfoXLLMHeadModel"),v2o=o(" (Transformer-XL model)"),T2o=l(),Zu=a("li"),ure=a("strong"),F2o=o("trocr"),C2o=o(" \u2014 "),oI=a("a"),M2o=o("TrOCRForCausalLM"),E2o=o(" (TrOCR model)"),y2o=l(),e1=a("li"),bre=a("strong"),w2o=o("xglm"),A2o=o(" \u2014 "),rI=a("a"),L2o=o("XGLMForCausalLM"),B2o=o(" (XGLM model)"),x2o=l(),o1=a("li"),vre=a("strong"),k2o=o("xlm"),R2o=o(" \u2014 "),tI=a("a"),S2o=o("XLMWithLMHeadModel"),P2o=o(" (XLM model)"),$2o=l(),r1=a("li"),Tre=a("strong"),I2o=o("xlm-prophetnet"),j2o=o(" \u2014 "),aI=a("a"),D2o=o("XLMProphetNetForCausalLM"),N2o=o(" (XLMProphetNet model)"),q2o=l(),t1=a("li"),Fre=a("strong"),G2o=o("xlm-roberta"),O2o=o(" \u2014 "),nI=a("a"),X2o=o("XLMRobertaForCausalLM"),V2o=o(" (XLM-RoBERTa model)"),z2o=l(),a1=a("li"),Cre=a("strong"),W2o=o("xlm-roberta-xl"),Q2o=o(" \u2014 "),sI=a("a"),H2o=o("XLMRobertaXLForCausalLM"),U2o=o(" (XLM-RoBERTa-XL model)"),J2o=l(),n1=a("li"),Mre=a("strong"),Y2o=o("xlnet"),K2o=o(" \u2014 "),lI=a("a"),Z2o=o("XLNetLMHeadModel"),evo=o(" (XLNet model)"),ovo=l(),s1=a("p"),rvo=o("The model is set in evaluation mode by default using "),Ere=a("code"),tvo=o("model.eval()"),avo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yre=a("code"),nvo=o("model.train()"),svo=l(),wre=a("p"),lvo=o("Examples:"),ivo=l(),f(bE.$$.fragment),nRe=l(),md=a("h2"),l1=a("a"),Are=a("span"),f(vE.$$.fragment),dvo=l(),Lre=a("span"),cvo=o("AutoModelForMaskedLM"),sRe=l(),er=a("div"),f(TE.$$.fragment),fvo=l(),gd=a("p"),mvo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Bre=a("code"),gvo=o("from_pretrained()"),hvo=o("class method or the "),xre=a("code"),pvo=o("from_config()"),_vo=o(`class
method.`),uvo=l(),FE=a("p"),bvo=o("This class cannot be instantiated directly using "),kre=a("code"),vvo=o("__init__()"),Tvo=o(" (throws an error)."),Fvo=l(),Ur=a("div"),f(CE.$$.fragment),Cvo=l(),Rre=a("p"),Mvo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Evo=l(),hd=a("p"),yvo=o(`Note:
Loading a model from its configuration file does `),Sre=a("strong"),wvo=o("not"),Avo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pre=a("code"),Lvo=o("from_pretrained()"),Bvo=o("to load the model weights."),xvo=l(),$re=a("p"),kvo=o("Examples:"),Rvo=l(),f(ME.$$.fragment),Svo=l(),qe=a("div"),f(EE.$$.fragment),Pvo=l(),Ire=a("p"),$vo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ivo=l(),Ya=a("p"),jvo=o("The model class to instantiate is selected based on the "),jre=a("code"),Dvo=o("model_type"),Nvo=o(` property of the config object (either
passed as an argument or loaded from `),Dre=a("code"),qvo=o("pretrained_model_name_or_path"),Gvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nre=a("code"),Ovo=o("pretrained_model_name_or_path"),Xvo=o(":"),Vvo=l(),I=a("ul"),i1=a("li"),qre=a("strong"),zvo=o("albert"),Wvo=o(" \u2014 "),iI=a("a"),Qvo=o("AlbertForMaskedLM"),Hvo=o(" (ALBERT model)"),Uvo=l(),d1=a("li"),Gre=a("strong"),Jvo=o("bart"),Yvo=o(" \u2014 "),dI=a("a"),Kvo=o("BartForConditionalGeneration"),Zvo=o(" (BART model)"),e6o=l(),c1=a("li"),Ore=a("strong"),o6o=o("bert"),r6o=o(" \u2014 "),cI=a("a"),t6o=o("BertForMaskedLM"),a6o=o(" (BERT model)"),n6o=l(),f1=a("li"),Xre=a("strong"),s6o=o("big_bird"),l6o=o(" \u2014 "),fI=a("a"),i6o=o("BigBirdForMaskedLM"),d6o=o(" (BigBird model)"),c6o=l(),m1=a("li"),Vre=a("strong"),f6o=o("camembert"),m6o=o(" \u2014 "),mI=a("a"),g6o=o("CamembertForMaskedLM"),h6o=o(" (CamemBERT model)"),p6o=l(),g1=a("li"),zre=a("strong"),_6o=o("convbert"),u6o=o(" \u2014 "),gI=a("a"),b6o=o("ConvBertForMaskedLM"),v6o=o(" (ConvBERT model)"),T6o=l(),h1=a("li"),Wre=a("strong"),F6o=o("data2vec-text"),C6o=o(" \u2014 "),hI=a("a"),M6o=o("Data2VecTextForMaskedLM"),E6o=o(" (Data2VecText model)"),y6o=l(),p1=a("li"),Qre=a("strong"),w6o=o("deberta"),A6o=o(" \u2014 "),pI=a("a"),L6o=o("DebertaForMaskedLM"),B6o=o(" (DeBERTa model)"),x6o=l(),_1=a("li"),Hre=a("strong"),k6o=o("deberta-v2"),R6o=o(" \u2014 "),_I=a("a"),S6o=o("DebertaV2ForMaskedLM"),P6o=o(" (DeBERTa-v2 model)"),$6o=l(),u1=a("li"),Ure=a("strong"),I6o=o("distilbert"),j6o=o(" \u2014 "),uI=a("a"),D6o=o("DistilBertForMaskedLM"),N6o=o(" (DistilBERT model)"),q6o=l(),b1=a("li"),Jre=a("strong"),G6o=o("electra"),O6o=o(" \u2014 "),bI=a("a"),X6o=o("ElectraForMaskedLM"),V6o=o(" (ELECTRA model)"),z6o=l(),v1=a("li"),Yre=a("strong"),W6o=o("flaubert"),Q6o=o(" \u2014 "),vI=a("a"),H6o=o("FlaubertWithLMHeadModel"),U6o=o(" (FlauBERT model)"),J6o=l(),T1=a("li"),Kre=a("strong"),Y6o=o("fnet"),K6o=o(" \u2014 "),TI=a("a"),Z6o=o("FNetForMaskedLM"),e0o=o(" (FNet model)"),o0o=l(),F1=a("li"),Zre=a("strong"),r0o=o("funnel"),t0o=o(" \u2014 "),FI=a("a"),a0o=o("FunnelForMaskedLM"),n0o=o(" (Funnel Transformer model)"),s0o=l(),C1=a("li"),ete=a("strong"),l0o=o("ibert"),i0o=o(" \u2014 "),CI=a("a"),d0o=o("IBertForMaskedLM"),c0o=o(" (I-BERT model)"),f0o=l(),M1=a("li"),ote=a("strong"),m0o=o("layoutlm"),g0o=o(" \u2014 "),MI=a("a"),h0o=o("LayoutLMForMaskedLM"),p0o=o(" (LayoutLM model)"),_0o=l(),E1=a("li"),rte=a("strong"),u0o=o("longformer"),b0o=o(" \u2014 "),EI=a("a"),v0o=o("LongformerForMaskedLM"),T0o=o(" (Longformer model)"),F0o=l(),y1=a("li"),tte=a("strong"),C0o=o("mbart"),M0o=o(" \u2014 "),yI=a("a"),E0o=o("MBartForConditionalGeneration"),y0o=o(" (mBART model)"),w0o=l(),w1=a("li"),ate=a("strong"),A0o=o("megatron-bert"),L0o=o(" \u2014 "),wI=a("a"),B0o=o("MegatronBertForMaskedLM"),x0o=o(" (MegatronBert model)"),k0o=l(),A1=a("li"),nte=a("strong"),R0o=o("mobilebert"),S0o=o(" \u2014 "),AI=a("a"),P0o=o("MobileBertForMaskedLM"),$0o=o(" (MobileBERT model)"),I0o=l(),L1=a("li"),ste=a("strong"),j0o=o("mpnet"),D0o=o(" \u2014 "),LI=a("a"),N0o=o("MPNetForMaskedLM"),q0o=o(" (MPNet model)"),G0o=l(),B1=a("li"),lte=a("strong"),O0o=o("nystromformer"),X0o=o(" \u2014 "),BI=a("a"),V0o=o("NystromformerForMaskedLM"),z0o=o(" (Nystromformer model)"),W0o=l(),x1=a("li"),ite=a("strong"),Q0o=o("perceiver"),H0o=o(" \u2014 "),xI=a("a"),U0o=o("PerceiverForMaskedLM"),J0o=o(" (Perceiver model)"),Y0o=l(),k1=a("li"),dte=a("strong"),K0o=o("qdqbert"),Z0o=o(" \u2014 "),kI=a("a"),eTo=o("QDQBertForMaskedLM"),oTo=o(" (QDQBert model)"),rTo=l(),R1=a("li"),cte=a("strong"),tTo=o("reformer"),aTo=o(" \u2014 "),RI=a("a"),nTo=o("ReformerForMaskedLM"),sTo=o(" (Reformer model)"),lTo=l(),S1=a("li"),fte=a("strong"),iTo=o("rembert"),dTo=o(" \u2014 "),SI=a("a"),cTo=o("RemBertForMaskedLM"),fTo=o(" (RemBERT model)"),mTo=l(),P1=a("li"),mte=a("strong"),gTo=o("roberta"),hTo=o(" \u2014 "),PI=a("a"),pTo=o("RobertaForMaskedLM"),_To=o(" (RoBERTa model)"),uTo=l(),$1=a("li"),gte=a("strong"),bTo=o("roformer"),vTo=o(" \u2014 "),$I=a("a"),TTo=o("RoFormerForMaskedLM"),FTo=o(" (RoFormer model)"),CTo=l(),I1=a("li"),hte=a("strong"),MTo=o("squeezebert"),ETo=o(" \u2014 "),II=a("a"),yTo=o("SqueezeBertForMaskedLM"),wTo=o(" (SqueezeBERT model)"),ATo=l(),j1=a("li"),pte=a("strong"),LTo=o("tapas"),BTo=o(" \u2014 "),jI=a("a"),xTo=o("TapasForMaskedLM"),kTo=o(" (TAPAS model)"),RTo=l(),D1=a("li"),_te=a("strong"),STo=o("wav2vec2"),PTo=o(" \u2014 "),ute=a("code"),$To=o("Wav2Vec2ForMaskedLM"),ITo=o("(Wav2Vec2 model)"),jTo=l(),N1=a("li"),bte=a("strong"),DTo=o("xlm"),NTo=o(" \u2014 "),DI=a("a"),qTo=o("XLMWithLMHeadModel"),GTo=o(" (XLM model)"),OTo=l(),q1=a("li"),vte=a("strong"),XTo=o("xlm-roberta"),VTo=o(" \u2014 "),NI=a("a"),zTo=o("XLMRobertaForMaskedLM"),WTo=o(" (XLM-RoBERTa model)"),QTo=l(),G1=a("li"),Tte=a("strong"),HTo=o("xlm-roberta-xl"),UTo=o(" \u2014 "),qI=a("a"),JTo=o("XLMRobertaXLForMaskedLM"),YTo=o(" (XLM-RoBERTa-XL model)"),KTo=l(),O1=a("li"),Fte=a("strong"),ZTo=o("yoso"),e8o=o(" \u2014 "),GI=a("a"),o8o=o("YosoForMaskedLM"),r8o=o(" (YOSO model)"),t8o=l(),X1=a("p"),a8o=o("The model is set in evaluation mode by default using "),Cte=a("code"),n8o=o("model.eval()"),s8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mte=a("code"),l8o=o("model.train()"),i8o=l(),Ete=a("p"),d8o=o("Examples:"),c8o=l(),f(yE.$$.fragment),lRe=l(),pd=a("h2"),V1=a("a"),yte=a("span"),f(wE.$$.fragment),f8o=l(),wte=a("span"),m8o=o("AutoModelForSeq2SeqLM"),iRe=l(),or=a("div"),f(AE.$$.fragment),g8o=l(),_d=a("p"),h8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Ate=a("code"),p8o=o("from_pretrained()"),_8o=o("class method or the "),Lte=a("code"),u8o=o("from_config()"),b8o=o(`class
method.`),v8o=l(),LE=a("p"),T8o=o("This class cannot be instantiated directly using "),Bte=a("code"),F8o=o("__init__()"),C8o=o(" (throws an error)."),M8o=l(),Jr=a("div"),f(BE.$$.fragment),E8o=l(),xte=a("p"),y8o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),w8o=l(),ud=a("p"),A8o=o(`Note:
Loading a model from its configuration file does `),kte=a("strong"),L8o=o("not"),B8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rte=a("code"),x8o=o("from_pretrained()"),k8o=o("to load the model weights."),R8o=l(),Ste=a("p"),S8o=o("Examples:"),P8o=l(),f(xE.$$.fragment),$8o=l(),Ge=a("div"),f(kE.$$.fragment),I8o=l(),Pte=a("p"),j8o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),D8o=l(),Ka=a("p"),N8o=o("The model class to instantiate is selected based on the "),$te=a("code"),q8o=o("model_type"),G8o=o(` property of the config object (either
passed as an argument or loaded from `),Ite=a("code"),O8o=o("pretrained_model_name_or_path"),X8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jte=a("code"),V8o=o("pretrained_model_name_or_path"),z8o=o(":"),W8o=l(),se=a("ul"),z1=a("li"),Dte=a("strong"),Q8o=o("bart"),H8o=o(" \u2014 "),OI=a("a"),U8o=o("BartForConditionalGeneration"),J8o=o(" (BART model)"),Y8o=l(),W1=a("li"),Nte=a("strong"),K8o=o("bigbird_pegasus"),Z8o=o(" \u2014 "),XI=a("a"),eFo=o("BigBirdPegasusForConditionalGeneration"),oFo=o(" (BigBirdPegasus model)"),rFo=l(),Q1=a("li"),qte=a("strong"),tFo=o("blenderbot"),aFo=o(" \u2014 "),VI=a("a"),nFo=o("BlenderbotForConditionalGeneration"),sFo=o(" (Blenderbot model)"),lFo=l(),H1=a("li"),Gte=a("strong"),iFo=o("blenderbot-small"),dFo=o(" \u2014 "),zI=a("a"),cFo=o("BlenderbotSmallForConditionalGeneration"),fFo=o(" (BlenderbotSmall model)"),mFo=l(),U1=a("li"),Ote=a("strong"),gFo=o("encoder-decoder"),hFo=o(" \u2014 "),WI=a("a"),pFo=o("EncoderDecoderModel"),_Fo=o(" (Encoder decoder model)"),uFo=l(),J1=a("li"),Xte=a("strong"),bFo=o("fsmt"),vFo=o(" \u2014 "),QI=a("a"),TFo=o("FSMTForConditionalGeneration"),FFo=o(" (FairSeq Machine-Translation model)"),CFo=l(),Y1=a("li"),Vte=a("strong"),MFo=o("led"),EFo=o(" \u2014 "),HI=a("a"),yFo=o("LEDForConditionalGeneration"),wFo=o(" (LED model)"),AFo=l(),K1=a("li"),zte=a("strong"),LFo=o("m2m_100"),BFo=o(" \u2014 "),UI=a("a"),xFo=o("M2M100ForConditionalGeneration"),kFo=o(" (M2M100 model)"),RFo=l(),Z1=a("li"),Wte=a("strong"),SFo=o("marian"),PFo=o(" \u2014 "),JI=a("a"),$Fo=o("MarianMTModel"),IFo=o(" (Marian model)"),jFo=l(),eb=a("li"),Qte=a("strong"),DFo=o("mbart"),NFo=o(" \u2014 "),YI=a("a"),qFo=o("MBartForConditionalGeneration"),GFo=o(" (mBART model)"),OFo=l(),ob=a("li"),Hte=a("strong"),XFo=o("mt5"),VFo=o(" \u2014 "),KI=a("a"),zFo=o("MT5ForConditionalGeneration"),WFo=o(" (mT5 model)"),QFo=l(),rb=a("li"),Ute=a("strong"),HFo=o("pegasus"),UFo=o(" \u2014 "),ZI=a("a"),JFo=o("PegasusForConditionalGeneration"),YFo=o(" (Pegasus model)"),KFo=l(),tb=a("li"),Jte=a("strong"),ZFo=o("plbart"),eCo=o(" \u2014 "),ej=a("a"),oCo=o("PLBartForConditionalGeneration"),rCo=o(" (PLBart model)"),tCo=l(),ab=a("li"),Yte=a("strong"),aCo=o("prophetnet"),nCo=o(" \u2014 "),oj=a("a"),sCo=o("ProphetNetForConditionalGeneration"),lCo=o(" (ProphetNet model)"),iCo=l(),nb=a("li"),Kte=a("strong"),dCo=o("t5"),cCo=o(" \u2014 "),rj=a("a"),fCo=o("T5ForConditionalGeneration"),mCo=o(" (T5 model)"),gCo=l(),sb=a("li"),Zte=a("strong"),hCo=o("xlm-prophetnet"),pCo=o(" \u2014 "),tj=a("a"),_Co=o("XLMProphetNetForConditionalGeneration"),uCo=o(" (XLMProphetNet model)"),bCo=l(),lb=a("p"),vCo=o("The model is set in evaluation mode by default using "),eae=a("code"),TCo=o("model.eval()"),FCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oae=a("code"),CCo=o("model.train()"),MCo=l(),rae=a("p"),ECo=o("Examples:"),yCo=l(),f(RE.$$.fragment),dRe=l(),bd=a("h2"),ib=a("a"),tae=a("span"),f(SE.$$.fragment),wCo=l(),aae=a("span"),ACo=o("AutoModelForSequenceClassification"),cRe=l(),rr=a("div"),f(PE.$$.fragment),LCo=l(),vd=a("p"),BCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nae=a("code"),xCo=o("from_pretrained()"),kCo=o("class method or the "),sae=a("code"),RCo=o("from_config()"),SCo=o(`class
method.`),PCo=l(),$E=a("p"),$Co=o("This class cannot be instantiated directly using "),lae=a("code"),ICo=o("__init__()"),jCo=o(" (throws an error)."),DCo=l(),Yr=a("div"),f(IE.$$.fragment),NCo=l(),iae=a("p"),qCo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),GCo=l(),Td=a("p"),OCo=o(`Note:
Loading a model from its configuration file does `),dae=a("strong"),XCo=o("not"),VCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cae=a("code"),zCo=o("from_pretrained()"),WCo=o("to load the model weights."),QCo=l(),fae=a("p"),HCo=o("Examples:"),UCo=l(),f(jE.$$.fragment),JCo=l(),Oe=a("div"),f(DE.$$.fragment),YCo=l(),mae=a("p"),KCo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ZCo=l(),Za=a("p"),eMo=o("The model class to instantiate is selected based on the "),gae=a("code"),oMo=o("model_type"),rMo=o(` property of the config object (either
passed as an argument or loaded from `),hae=a("code"),tMo=o("pretrained_model_name_or_path"),aMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pae=a("code"),nMo=o("pretrained_model_name_or_path"),sMo=o(":"),lMo=l(),A=a("ul"),db=a("li"),_ae=a("strong"),iMo=o("albert"),dMo=o(" \u2014 "),aj=a("a"),cMo=o("AlbertForSequenceClassification"),fMo=o(" (ALBERT model)"),mMo=l(),cb=a("li"),uae=a("strong"),gMo=o("bart"),hMo=o(" \u2014 "),nj=a("a"),pMo=o("BartForSequenceClassification"),_Mo=o(" (BART model)"),uMo=l(),fb=a("li"),bae=a("strong"),bMo=o("bert"),vMo=o(" \u2014 "),sj=a("a"),TMo=o("BertForSequenceClassification"),FMo=o(" (BERT model)"),CMo=l(),mb=a("li"),vae=a("strong"),MMo=o("big_bird"),EMo=o(" \u2014 "),lj=a("a"),yMo=o("BigBirdForSequenceClassification"),wMo=o(" (BigBird model)"),AMo=l(),gb=a("li"),Tae=a("strong"),LMo=o("bigbird_pegasus"),BMo=o(" \u2014 "),ij=a("a"),xMo=o("BigBirdPegasusForSequenceClassification"),kMo=o(" (BigBirdPegasus model)"),RMo=l(),hb=a("li"),Fae=a("strong"),SMo=o("camembert"),PMo=o(" \u2014 "),dj=a("a"),$Mo=o("CamembertForSequenceClassification"),IMo=o(" (CamemBERT model)"),jMo=l(),pb=a("li"),Cae=a("strong"),DMo=o("canine"),NMo=o(" \u2014 "),cj=a("a"),qMo=o("CanineForSequenceClassification"),GMo=o(" (Canine model)"),OMo=l(),_b=a("li"),Mae=a("strong"),XMo=o("convbert"),VMo=o(" \u2014 "),fj=a("a"),zMo=o("ConvBertForSequenceClassification"),WMo=o(" (ConvBERT model)"),QMo=l(),ub=a("li"),Eae=a("strong"),HMo=o("ctrl"),UMo=o(" \u2014 "),mj=a("a"),JMo=o("CTRLForSequenceClassification"),YMo=o(" (CTRL model)"),KMo=l(),bb=a("li"),yae=a("strong"),ZMo=o("data2vec-text"),e4o=o(" \u2014 "),gj=a("a"),o4o=o("Data2VecTextForSequenceClassification"),r4o=o(" (Data2VecText model)"),t4o=l(),vb=a("li"),wae=a("strong"),a4o=o("deberta"),n4o=o(" \u2014 "),hj=a("a"),s4o=o("DebertaForSequenceClassification"),l4o=o(" (DeBERTa model)"),i4o=l(),Tb=a("li"),Aae=a("strong"),d4o=o("deberta-v2"),c4o=o(" \u2014 "),pj=a("a"),f4o=o("DebertaV2ForSequenceClassification"),m4o=o(" (DeBERTa-v2 model)"),g4o=l(),Fb=a("li"),Lae=a("strong"),h4o=o("distilbert"),p4o=o(" \u2014 "),_j=a("a"),_4o=o("DistilBertForSequenceClassification"),u4o=o(" (DistilBERT model)"),b4o=l(),Cb=a("li"),Bae=a("strong"),v4o=o("electra"),T4o=o(" \u2014 "),uj=a("a"),F4o=o("ElectraForSequenceClassification"),C4o=o(" (ELECTRA model)"),M4o=l(),Mb=a("li"),xae=a("strong"),E4o=o("flaubert"),y4o=o(" \u2014 "),bj=a("a"),w4o=o("FlaubertForSequenceClassification"),A4o=o(" (FlauBERT model)"),L4o=l(),Eb=a("li"),kae=a("strong"),B4o=o("fnet"),x4o=o(" \u2014 "),vj=a("a"),k4o=o("FNetForSequenceClassification"),R4o=o(" (FNet model)"),S4o=l(),yb=a("li"),Rae=a("strong"),P4o=o("funnel"),$4o=o(" \u2014 "),Tj=a("a"),I4o=o("FunnelForSequenceClassification"),j4o=o(" (Funnel Transformer model)"),D4o=l(),wb=a("li"),Sae=a("strong"),N4o=o("gpt2"),q4o=o(" \u2014 "),Fj=a("a"),G4o=o("GPT2ForSequenceClassification"),O4o=o(" (OpenAI GPT-2 model)"),X4o=l(),Ab=a("li"),Pae=a("strong"),V4o=o("gpt_neo"),z4o=o(" \u2014 "),Cj=a("a"),W4o=o("GPTNeoForSequenceClassification"),Q4o=o(" (GPT Neo model)"),H4o=l(),Lb=a("li"),$ae=a("strong"),U4o=o("gptj"),J4o=o(" \u2014 "),Mj=a("a"),Y4o=o("GPTJForSequenceClassification"),K4o=o(" (GPT-J model)"),Z4o=l(),Bb=a("li"),Iae=a("strong"),eEo=o("ibert"),oEo=o(" \u2014 "),Ej=a("a"),rEo=o("IBertForSequenceClassification"),tEo=o(" (I-BERT model)"),aEo=l(),xb=a("li"),jae=a("strong"),nEo=o("layoutlm"),sEo=o(" \u2014 "),yj=a("a"),lEo=o("LayoutLMForSequenceClassification"),iEo=o(" (LayoutLM model)"),dEo=l(),kb=a("li"),Dae=a("strong"),cEo=o("layoutlmv2"),fEo=o(" \u2014 "),wj=a("a"),mEo=o("LayoutLMv2ForSequenceClassification"),gEo=o(" (LayoutLMv2 model)"),hEo=l(),Rb=a("li"),Nae=a("strong"),pEo=o("led"),_Eo=o(" \u2014 "),Aj=a("a"),uEo=o("LEDForSequenceClassification"),bEo=o(" (LED model)"),vEo=l(),Sb=a("li"),qae=a("strong"),TEo=o("longformer"),FEo=o(" \u2014 "),Lj=a("a"),CEo=o("LongformerForSequenceClassification"),MEo=o(" (Longformer model)"),EEo=l(),Pb=a("li"),Gae=a("strong"),yEo=o("mbart"),wEo=o(" \u2014 "),Bj=a("a"),AEo=o("MBartForSequenceClassification"),LEo=o(" (mBART model)"),BEo=l(),$b=a("li"),Oae=a("strong"),xEo=o("megatron-bert"),kEo=o(" \u2014 "),xj=a("a"),REo=o("MegatronBertForSequenceClassification"),SEo=o(" (MegatronBert model)"),PEo=l(),Ib=a("li"),Xae=a("strong"),$Eo=o("mobilebert"),IEo=o(" \u2014 "),kj=a("a"),jEo=o("MobileBertForSequenceClassification"),DEo=o(" (MobileBERT model)"),NEo=l(),jb=a("li"),Vae=a("strong"),qEo=o("mpnet"),GEo=o(" \u2014 "),Rj=a("a"),OEo=o("MPNetForSequenceClassification"),XEo=o(" (MPNet model)"),VEo=l(),Db=a("li"),zae=a("strong"),zEo=o("nystromformer"),WEo=o(" \u2014 "),Sj=a("a"),QEo=o("NystromformerForSequenceClassification"),HEo=o(" (Nystromformer model)"),UEo=l(),Nb=a("li"),Wae=a("strong"),JEo=o("openai-gpt"),YEo=o(" \u2014 "),Pj=a("a"),KEo=o("OpenAIGPTForSequenceClassification"),ZEo=o(" (OpenAI GPT model)"),e3o=l(),qb=a("li"),Qae=a("strong"),o3o=o("perceiver"),r3o=o(" \u2014 "),$j=a("a"),t3o=o("PerceiverForSequenceClassification"),a3o=o(" (Perceiver model)"),n3o=l(),Gb=a("li"),Hae=a("strong"),s3o=o("plbart"),l3o=o(" \u2014 "),Ij=a("a"),i3o=o("PLBartForSequenceClassification"),d3o=o(" (PLBart model)"),c3o=l(),Ob=a("li"),Uae=a("strong"),f3o=o("qdqbert"),m3o=o(" \u2014 "),jj=a("a"),g3o=o("QDQBertForSequenceClassification"),h3o=o(" (QDQBert model)"),p3o=l(),Xb=a("li"),Jae=a("strong"),_3o=o("reformer"),u3o=o(" \u2014 "),Dj=a("a"),b3o=o("ReformerForSequenceClassification"),v3o=o(" (Reformer model)"),T3o=l(),Vb=a("li"),Yae=a("strong"),F3o=o("rembert"),C3o=o(" \u2014 "),Nj=a("a"),M3o=o("RemBertForSequenceClassification"),E3o=o(" (RemBERT model)"),y3o=l(),zb=a("li"),Kae=a("strong"),w3o=o("roberta"),A3o=o(" \u2014 "),qj=a("a"),L3o=o("RobertaForSequenceClassification"),B3o=o(" (RoBERTa model)"),x3o=l(),Wb=a("li"),Zae=a("strong"),k3o=o("roformer"),R3o=o(" \u2014 "),Gj=a("a"),S3o=o("RoFormerForSequenceClassification"),P3o=o(" (RoFormer model)"),$3o=l(),Qb=a("li"),ene=a("strong"),I3o=o("squeezebert"),j3o=o(" \u2014 "),Oj=a("a"),D3o=o("SqueezeBertForSequenceClassification"),N3o=o(" (SqueezeBERT model)"),q3o=l(),Hb=a("li"),one=a("strong"),G3o=o("tapas"),O3o=o(" \u2014 "),Xj=a("a"),X3o=o("TapasForSequenceClassification"),V3o=o(" (TAPAS model)"),z3o=l(),Ub=a("li"),rne=a("strong"),W3o=o("transfo-xl"),Q3o=o(" \u2014 "),Vj=a("a"),H3o=o("TransfoXLForSequenceClassification"),U3o=o(" (Transformer-XL model)"),J3o=l(),Jb=a("li"),tne=a("strong"),Y3o=o("xlm"),K3o=o(" \u2014 "),zj=a("a"),Z3o=o("XLMForSequenceClassification"),eyo=o(" (XLM model)"),oyo=l(),Yb=a("li"),ane=a("strong"),ryo=o("xlm-roberta"),tyo=o(" \u2014 "),Wj=a("a"),ayo=o("XLMRobertaForSequenceClassification"),nyo=o(" (XLM-RoBERTa model)"),syo=l(),Kb=a("li"),nne=a("strong"),lyo=o("xlm-roberta-xl"),iyo=o(" \u2014 "),Qj=a("a"),dyo=o("XLMRobertaXLForSequenceClassification"),cyo=o(" (XLM-RoBERTa-XL model)"),fyo=l(),Zb=a("li"),sne=a("strong"),myo=o("xlnet"),gyo=o(" \u2014 "),Hj=a("a"),hyo=o("XLNetForSequenceClassification"),pyo=o(" (XLNet model)"),_yo=l(),e5=a("li"),lne=a("strong"),uyo=o("yoso"),byo=o(" \u2014 "),Uj=a("a"),vyo=o("YosoForSequenceClassification"),Tyo=o(" (YOSO model)"),Fyo=l(),o5=a("p"),Cyo=o("The model is set in evaluation mode by default using "),ine=a("code"),Myo=o("model.eval()"),Eyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dne=a("code"),yyo=o("model.train()"),wyo=l(),cne=a("p"),Ayo=o("Examples:"),Lyo=l(),f(NE.$$.fragment),fRe=l(),Fd=a("h2"),r5=a("a"),fne=a("span"),f(qE.$$.fragment),Byo=l(),mne=a("span"),xyo=o("AutoModelForMultipleChoice"),mRe=l(),tr=a("div"),f(GE.$$.fragment),kyo=l(),Cd=a("p"),Ryo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),gne=a("code"),Syo=o("from_pretrained()"),Pyo=o("class method or the "),hne=a("code"),$yo=o("from_config()"),Iyo=o(`class
method.`),jyo=l(),OE=a("p"),Dyo=o("This class cannot be instantiated directly using "),pne=a("code"),Nyo=o("__init__()"),qyo=o(" (throws an error)."),Gyo=l(),Kr=a("div"),f(XE.$$.fragment),Oyo=l(),_ne=a("p"),Xyo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Vyo=l(),Md=a("p"),zyo=o(`Note:
Loading a model from its configuration file does `),une=a("strong"),Wyo=o("not"),Qyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bne=a("code"),Hyo=o("from_pretrained()"),Uyo=o("to load the model weights."),Jyo=l(),vne=a("p"),Yyo=o("Examples:"),Kyo=l(),f(VE.$$.fragment),Zyo=l(),Xe=a("div"),f(zE.$$.fragment),ewo=l(),Tne=a("p"),owo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rwo=l(),en=a("p"),two=o("The model class to instantiate is selected based on the "),Fne=a("code"),awo=o("model_type"),nwo=o(` property of the config object (either
passed as an argument or loaded from `),Cne=a("code"),swo=o("pretrained_model_name_or_path"),lwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mne=a("code"),iwo=o("pretrained_model_name_or_path"),dwo=o(":"),cwo=l(),G=a("ul"),t5=a("li"),Ene=a("strong"),fwo=o("albert"),mwo=o(" \u2014 "),Jj=a("a"),gwo=o("AlbertForMultipleChoice"),hwo=o(" (ALBERT model)"),pwo=l(),a5=a("li"),yne=a("strong"),_wo=o("bert"),uwo=o(" \u2014 "),Yj=a("a"),bwo=o("BertForMultipleChoice"),vwo=o(" (BERT model)"),Two=l(),n5=a("li"),wne=a("strong"),Fwo=o("big_bird"),Cwo=o(" \u2014 "),Kj=a("a"),Mwo=o("BigBirdForMultipleChoice"),Ewo=o(" (BigBird model)"),ywo=l(),s5=a("li"),Ane=a("strong"),wwo=o("camembert"),Awo=o(" \u2014 "),Zj=a("a"),Lwo=o("CamembertForMultipleChoice"),Bwo=o(" (CamemBERT model)"),xwo=l(),l5=a("li"),Lne=a("strong"),kwo=o("canine"),Rwo=o(" \u2014 "),eD=a("a"),Swo=o("CanineForMultipleChoice"),Pwo=o(" (Canine model)"),$wo=l(),i5=a("li"),Bne=a("strong"),Iwo=o("convbert"),jwo=o(" \u2014 "),oD=a("a"),Dwo=o("ConvBertForMultipleChoice"),Nwo=o(" (ConvBERT model)"),qwo=l(),d5=a("li"),xne=a("strong"),Gwo=o("data2vec-text"),Owo=o(" \u2014 "),rD=a("a"),Xwo=o("Data2VecTextForMultipleChoice"),Vwo=o(" (Data2VecText model)"),zwo=l(),c5=a("li"),kne=a("strong"),Wwo=o("distilbert"),Qwo=o(" \u2014 "),tD=a("a"),Hwo=o("DistilBertForMultipleChoice"),Uwo=o(" (DistilBERT model)"),Jwo=l(),f5=a("li"),Rne=a("strong"),Ywo=o("electra"),Kwo=o(" \u2014 "),aD=a("a"),Zwo=o("ElectraForMultipleChoice"),eAo=o(" (ELECTRA model)"),oAo=l(),m5=a("li"),Sne=a("strong"),rAo=o("flaubert"),tAo=o(" \u2014 "),nD=a("a"),aAo=o("FlaubertForMultipleChoice"),nAo=o(" (FlauBERT model)"),sAo=l(),g5=a("li"),Pne=a("strong"),lAo=o("fnet"),iAo=o(" \u2014 "),sD=a("a"),dAo=o("FNetForMultipleChoice"),cAo=o(" (FNet model)"),fAo=l(),h5=a("li"),$ne=a("strong"),mAo=o("funnel"),gAo=o(" \u2014 "),lD=a("a"),hAo=o("FunnelForMultipleChoice"),pAo=o(" (Funnel Transformer model)"),_Ao=l(),p5=a("li"),Ine=a("strong"),uAo=o("ibert"),bAo=o(" \u2014 "),iD=a("a"),vAo=o("IBertForMultipleChoice"),TAo=o(" (I-BERT model)"),FAo=l(),_5=a("li"),jne=a("strong"),CAo=o("longformer"),MAo=o(" \u2014 "),dD=a("a"),EAo=o("LongformerForMultipleChoice"),yAo=o(" (Longformer model)"),wAo=l(),u5=a("li"),Dne=a("strong"),AAo=o("megatron-bert"),LAo=o(" \u2014 "),cD=a("a"),BAo=o("MegatronBertForMultipleChoice"),xAo=o(" (MegatronBert model)"),kAo=l(),b5=a("li"),Nne=a("strong"),RAo=o("mobilebert"),SAo=o(" \u2014 "),fD=a("a"),PAo=o("MobileBertForMultipleChoice"),$Ao=o(" (MobileBERT model)"),IAo=l(),v5=a("li"),qne=a("strong"),jAo=o("mpnet"),DAo=o(" \u2014 "),mD=a("a"),NAo=o("MPNetForMultipleChoice"),qAo=o(" (MPNet model)"),GAo=l(),T5=a("li"),Gne=a("strong"),OAo=o("nystromformer"),XAo=o(" \u2014 "),gD=a("a"),VAo=o("NystromformerForMultipleChoice"),zAo=o(" (Nystromformer model)"),WAo=l(),F5=a("li"),One=a("strong"),QAo=o("qdqbert"),HAo=o(" \u2014 "),hD=a("a"),UAo=o("QDQBertForMultipleChoice"),JAo=o(" (QDQBert model)"),YAo=l(),C5=a("li"),Xne=a("strong"),KAo=o("rembert"),ZAo=o(" \u2014 "),pD=a("a"),eLo=o("RemBertForMultipleChoice"),oLo=o(" (RemBERT model)"),rLo=l(),M5=a("li"),Vne=a("strong"),tLo=o("roberta"),aLo=o(" \u2014 "),_D=a("a"),nLo=o("RobertaForMultipleChoice"),sLo=o(" (RoBERTa model)"),lLo=l(),E5=a("li"),zne=a("strong"),iLo=o("roformer"),dLo=o(" \u2014 "),uD=a("a"),cLo=o("RoFormerForMultipleChoice"),fLo=o(" (RoFormer model)"),mLo=l(),y5=a("li"),Wne=a("strong"),gLo=o("squeezebert"),hLo=o(" \u2014 "),bD=a("a"),pLo=o("SqueezeBertForMultipleChoice"),_Lo=o(" (SqueezeBERT model)"),uLo=l(),w5=a("li"),Qne=a("strong"),bLo=o("xlm"),vLo=o(" \u2014 "),vD=a("a"),TLo=o("XLMForMultipleChoice"),FLo=o(" (XLM model)"),CLo=l(),A5=a("li"),Hne=a("strong"),MLo=o("xlm-roberta"),ELo=o(" \u2014 "),TD=a("a"),yLo=o("XLMRobertaForMultipleChoice"),wLo=o(" (XLM-RoBERTa model)"),ALo=l(),L5=a("li"),Une=a("strong"),LLo=o("xlm-roberta-xl"),BLo=o(" \u2014 "),FD=a("a"),xLo=o("XLMRobertaXLForMultipleChoice"),kLo=o(" (XLM-RoBERTa-XL model)"),RLo=l(),B5=a("li"),Jne=a("strong"),SLo=o("xlnet"),PLo=o(" \u2014 "),CD=a("a"),$Lo=o("XLNetForMultipleChoice"),ILo=o(" (XLNet model)"),jLo=l(),x5=a("li"),Yne=a("strong"),DLo=o("yoso"),NLo=o(" \u2014 "),MD=a("a"),qLo=o("YosoForMultipleChoice"),GLo=o(" (YOSO model)"),OLo=l(),k5=a("p"),XLo=o("The model is set in evaluation mode by default using "),Kne=a("code"),VLo=o("model.eval()"),zLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zne=a("code"),WLo=o("model.train()"),QLo=l(),ese=a("p"),HLo=o("Examples:"),ULo=l(),f(WE.$$.fragment),gRe=l(),Ed=a("h2"),R5=a("a"),ose=a("span"),f(QE.$$.fragment),JLo=l(),rse=a("span"),YLo=o("AutoModelForNextSentencePrediction"),hRe=l(),ar=a("div"),f(HE.$$.fragment),KLo=l(),yd=a("p"),ZLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tse=a("code"),e7o=o("from_pretrained()"),o7o=o("class method or the "),ase=a("code"),r7o=o("from_config()"),t7o=o(`class
method.`),a7o=l(),UE=a("p"),n7o=o("This class cannot be instantiated directly using "),nse=a("code"),s7o=o("__init__()"),l7o=o(" (throws an error)."),i7o=l(),Zr=a("div"),f(JE.$$.fragment),d7o=l(),sse=a("p"),c7o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),f7o=l(),wd=a("p"),m7o=o(`Note:
Loading a model from its configuration file does `),lse=a("strong"),g7o=o("not"),h7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ise=a("code"),p7o=o("from_pretrained()"),_7o=o("to load the model weights."),u7o=l(),dse=a("p"),b7o=o("Examples:"),v7o=l(),f(YE.$$.fragment),T7o=l(),Ve=a("div"),f(KE.$$.fragment),F7o=l(),cse=a("p"),C7o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),M7o=l(),on=a("p"),E7o=o("The model class to instantiate is selected based on the "),fse=a("code"),y7o=o("model_type"),w7o=o(` property of the config object (either
passed as an argument or loaded from `),mse=a("code"),A7o=o("pretrained_model_name_or_path"),L7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gse=a("code"),B7o=o("pretrained_model_name_or_path"),x7o=o(":"),k7o=l(),ma=a("ul"),S5=a("li"),hse=a("strong"),R7o=o("bert"),S7o=o(" \u2014 "),ED=a("a"),P7o=o("BertForNextSentencePrediction"),$7o=o(" (BERT model)"),I7o=l(),P5=a("li"),pse=a("strong"),j7o=o("fnet"),D7o=o(" \u2014 "),yD=a("a"),N7o=o("FNetForNextSentencePrediction"),q7o=o(" (FNet model)"),G7o=l(),$5=a("li"),_se=a("strong"),O7o=o("megatron-bert"),X7o=o(" \u2014 "),wD=a("a"),V7o=o("MegatronBertForNextSentencePrediction"),z7o=o(" (MegatronBert model)"),W7o=l(),I5=a("li"),use=a("strong"),Q7o=o("mobilebert"),H7o=o(" \u2014 "),AD=a("a"),U7o=o("MobileBertForNextSentencePrediction"),J7o=o(" (MobileBERT model)"),Y7o=l(),j5=a("li"),bse=a("strong"),K7o=o("qdqbert"),Z7o=o(" \u2014 "),LD=a("a"),e9o=o("QDQBertForNextSentencePrediction"),o9o=o(" (QDQBert model)"),r9o=l(),D5=a("p"),t9o=o("The model is set in evaluation mode by default using "),vse=a("code"),a9o=o("model.eval()"),n9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tse=a("code"),s9o=o("model.train()"),l9o=l(),Fse=a("p"),i9o=o("Examples:"),d9o=l(),f(ZE.$$.fragment),pRe=l(),Ad=a("h2"),N5=a("a"),Cse=a("span"),f(e3.$$.fragment),c9o=l(),Mse=a("span"),f9o=o("AutoModelForTokenClassification"),_Re=l(),nr=a("div"),f(o3.$$.fragment),m9o=l(),Ld=a("p"),g9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Ese=a("code"),h9o=o("from_pretrained()"),p9o=o("class method or the "),yse=a("code"),_9o=o("from_config()"),u9o=o(`class
method.`),b9o=l(),r3=a("p"),v9o=o("This class cannot be instantiated directly using "),wse=a("code"),T9o=o("__init__()"),F9o=o(" (throws an error)."),C9o=l(),et=a("div"),f(t3.$$.fragment),M9o=l(),Ase=a("p"),E9o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),y9o=l(),Bd=a("p"),w9o=o(`Note:
Loading a model from its configuration file does `),Lse=a("strong"),A9o=o("not"),L9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bse=a("code"),B9o=o("from_pretrained()"),x9o=o("to load the model weights."),k9o=l(),xse=a("p"),R9o=o("Examples:"),S9o=l(),f(a3.$$.fragment),P9o=l(),ze=a("div"),f(n3.$$.fragment),$9o=l(),kse=a("p"),I9o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),j9o=l(),rn=a("p"),D9o=o("The model class to instantiate is selected based on the "),Rse=a("code"),N9o=o("model_type"),q9o=o(` property of the config object (either
passed as an argument or loaded from `),Sse=a("code"),G9o=o("pretrained_model_name_or_path"),O9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pse=a("code"),X9o=o("pretrained_model_name_or_path"),V9o=o(":"),z9o=l(),N=a("ul"),q5=a("li"),$se=a("strong"),W9o=o("albert"),Q9o=o(" \u2014 "),BD=a("a"),H9o=o("AlbertForTokenClassification"),U9o=o(" (ALBERT model)"),J9o=l(),G5=a("li"),Ise=a("strong"),Y9o=o("bert"),K9o=o(" \u2014 "),xD=a("a"),Z9o=o("BertForTokenClassification"),eBo=o(" (BERT model)"),oBo=l(),O5=a("li"),jse=a("strong"),rBo=o("big_bird"),tBo=o(" \u2014 "),kD=a("a"),aBo=o("BigBirdForTokenClassification"),nBo=o(" (BigBird model)"),sBo=l(),X5=a("li"),Dse=a("strong"),lBo=o("camembert"),iBo=o(" \u2014 "),RD=a("a"),dBo=o("CamembertForTokenClassification"),cBo=o(" (CamemBERT model)"),fBo=l(),V5=a("li"),Nse=a("strong"),mBo=o("canine"),gBo=o(" \u2014 "),SD=a("a"),hBo=o("CanineForTokenClassification"),pBo=o(" (Canine model)"),_Bo=l(),z5=a("li"),qse=a("strong"),uBo=o("convbert"),bBo=o(" \u2014 "),PD=a("a"),vBo=o("ConvBertForTokenClassification"),TBo=o(" (ConvBERT model)"),FBo=l(),W5=a("li"),Gse=a("strong"),CBo=o("data2vec-text"),MBo=o(" \u2014 "),$D=a("a"),EBo=o("Data2VecTextForTokenClassification"),yBo=o(" (Data2VecText model)"),wBo=l(),Q5=a("li"),Ose=a("strong"),ABo=o("deberta"),LBo=o(" \u2014 "),ID=a("a"),BBo=o("DebertaForTokenClassification"),xBo=o(" (DeBERTa model)"),kBo=l(),H5=a("li"),Xse=a("strong"),RBo=o("deberta-v2"),SBo=o(" \u2014 "),jD=a("a"),PBo=o("DebertaV2ForTokenClassification"),$Bo=o(" (DeBERTa-v2 model)"),IBo=l(),U5=a("li"),Vse=a("strong"),jBo=o("distilbert"),DBo=o(" \u2014 "),DD=a("a"),NBo=o("DistilBertForTokenClassification"),qBo=o(" (DistilBERT model)"),GBo=l(),J5=a("li"),zse=a("strong"),OBo=o("electra"),XBo=o(" \u2014 "),ND=a("a"),VBo=o("ElectraForTokenClassification"),zBo=o(" (ELECTRA model)"),WBo=l(),Y5=a("li"),Wse=a("strong"),QBo=o("flaubert"),HBo=o(" \u2014 "),qD=a("a"),UBo=o("FlaubertForTokenClassification"),JBo=o(" (FlauBERT model)"),YBo=l(),K5=a("li"),Qse=a("strong"),KBo=o("fnet"),ZBo=o(" \u2014 "),GD=a("a"),exo=o("FNetForTokenClassification"),oxo=o(" (FNet model)"),rxo=l(),Z5=a("li"),Hse=a("strong"),txo=o("funnel"),axo=o(" \u2014 "),OD=a("a"),nxo=o("FunnelForTokenClassification"),sxo=o(" (Funnel Transformer model)"),lxo=l(),e2=a("li"),Use=a("strong"),ixo=o("gpt2"),dxo=o(" \u2014 "),XD=a("a"),cxo=o("GPT2ForTokenClassification"),fxo=o(" (OpenAI GPT-2 model)"),mxo=l(),o2=a("li"),Jse=a("strong"),gxo=o("ibert"),hxo=o(" \u2014 "),VD=a("a"),pxo=o("IBertForTokenClassification"),_xo=o(" (I-BERT model)"),uxo=l(),r2=a("li"),Yse=a("strong"),bxo=o("layoutlm"),vxo=o(" \u2014 "),zD=a("a"),Txo=o("LayoutLMForTokenClassification"),Fxo=o(" (LayoutLM model)"),Cxo=l(),t2=a("li"),Kse=a("strong"),Mxo=o("layoutlmv2"),Exo=o(" \u2014 "),WD=a("a"),yxo=o("LayoutLMv2ForTokenClassification"),wxo=o(" (LayoutLMv2 model)"),Axo=l(),a2=a("li"),Zse=a("strong"),Lxo=o("longformer"),Bxo=o(" \u2014 "),QD=a("a"),xxo=o("LongformerForTokenClassification"),kxo=o(" (Longformer model)"),Rxo=l(),n2=a("li"),ele=a("strong"),Sxo=o("megatron-bert"),Pxo=o(" \u2014 "),HD=a("a"),$xo=o("MegatronBertForTokenClassification"),Ixo=o(" (MegatronBert model)"),jxo=l(),s2=a("li"),ole=a("strong"),Dxo=o("mobilebert"),Nxo=o(" \u2014 "),UD=a("a"),qxo=o("MobileBertForTokenClassification"),Gxo=o(" (MobileBERT model)"),Oxo=l(),l2=a("li"),rle=a("strong"),Xxo=o("mpnet"),Vxo=o(" \u2014 "),JD=a("a"),zxo=o("MPNetForTokenClassification"),Wxo=o(" (MPNet model)"),Qxo=l(),i2=a("li"),tle=a("strong"),Hxo=o("nystromformer"),Uxo=o(" \u2014 "),YD=a("a"),Jxo=o("NystromformerForTokenClassification"),Yxo=o(" (Nystromformer model)"),Kxo=l(),d2=a("li"),ale=a("strong"),Zxo=o("qdqbert"),eko=o(" \u2014 "),KD=a("a"),oko=o("QDQBertForTokenClassification"),rko=o(" (QDQBert model)"),tko=l(),c2=a("li"),nle=a("strong"),ako=o("rembert"),nko=o(" \u2014 "),ZD=a("a"),sko=o("RemBertForTokenClassification"),lko=o(" (RemBERT model)"),iko=l(),f2=a("li"),sle=a("strong"),dko=o("roberta"),cko=o(" \u2014 "),eN=a("a"),fko=o("RobertaForTokenClassification"),mko=o(" (RoBERTa model)"),gko=l(),m2=a("li"),lle=a("strong"),hko=o("roformer"),pko=o(" \u2014 "),oN=a("a"),_ko=o("RoFormerForTokenClassification"),uko=o(" (RoFormer model)"),bko=l(),g2=a("li"),ile=a("strong"),vko=o("squeezebert"),Tko=o(" \u2014 "),rN=a("a"),Fko=o("SqueezeBertForTokenClassification"),Cko=o(" (SqueezeBERT model)"),Mko=l(),h2=a("li"),dle=a("strong"),Eko=o("xlm"),yko=o(" \u2014 "),tN=a("a"),wko=o("XLMForTokenClassification"),Ako=o(" (XLM model)"),Lko=l(),p2=a("li"),cle=a("strong"),Bko=o("xlm-roberta"),xko=o(" \u2014 "),aN=a("a"),kko=o("XLMRobertaForTokenClassification"),Rko=o(" (XLM-RoBERTa model)"),Sko=l(),_2=a("li"),fle=a("strong"),Pko=o("xlm-roberta-xl"),$ko=o(" \u2014 "),nN=a("a"),Iko=o("XLMRobertaXLForTokenClassification"),jko=o(" (XLM-RoBERTa-XL model)"),Dko=l(),u2=a("li"),mle=a("strong"),Nko=o("xlnet"),qko=o(" \u2014 "),sN=a("a"),Gko=o("XLNetForTokenClassification"),Oko=o(" (XLNet model)"),Xko=l(),b2=a("li"),gle=a("strong"),Vko=o("yoso"),zko=o(" \u2014 "),lN=a("a"),Wko=o("YosoForTokenClassification"),Qko=o(" (YOSO model)"),Hko=l(),v2=a("p"),Uko=o("The model is set in evaluation mode by default using "),hle=a("code"),Jko=o("model.eval()"),Yko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ple=a("code"),Kko=o("model.train()"),Zko=l(),_le=a("p"),eRo=o("Examples:"),oRo=l(),f(s3.$$.fragment),uRe=l(),xd=a("h2"),T2=a("a"),ule=a("span"),f(l3.$$.fragment),rRo=l(),ble=a("span"),tRo=o("AutoModelForQuestionAnswering"),bRe=l(),sr=a("div"),f(i3.$$.fragment),aRo=l(),kd=a("p"),nRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vle=a("code"),sRo=o("from_pretrained()"),lRo=o("class method or the "),Tle=a("code"),iRo=o("from_config()"),dRo=o(`class
method.`),cRo=l(),d3=a("p"),fRo=o("This class cannot be instantiated directly using "),Fle=a("code"),mRo=o("__init__()"),gRo=o(" (throws an error)."),hRo=l(),ot=a("div"),f(c3.$$.fragment),pRo=l(),Cle=a("p"),_Ro=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),uRo=l(),Rd=a("p"),bRo=o(`Note:
Loading a model from its configuration file does `),Mle=a("strong"),vRo=o("not"),TRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ele=a("code"),FRo=o("from_pretrained()"),CRo=o("to load the model weights."),MRo=l(),yle=a("p"),ERo=o("Examples:"),yRo=l(),f(f3.$$.fragment),wRo=l(),We=a("div"),f(m3.$$.fragment),ARo=l(),wle=a("p"),LRo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),BRo=l(),tn=a("p"),xRo=o("The model class to instantiate is selected based on the "),Ale=a("code"),kRo=o("model_type"),RRo=o(` property of the config object (either
passed as an argument or loaded from `),Lle=a("code"),SRo=o("pretrained_model_name_or_path"),PRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ble=a("code"),$Ro=o("pretrained_model_name_or_path"),IRo=o(":"),jRo=l(),R=a("ul"),F2=a("li"),xle=a("strong"),DRo=o("albert"),NRo=o(" \u2014 "),iN=a("a"),qRo=o("AlbertForQuestionAnswering"),GRo=o(" (ALBERT model)"),ORo=l(),C2=a("li"),kle=a("strong"),XRo=o("bart"),VRo=o(" \u2014 "),dN=a("a"),zRo=o("BartForQuestionAnswering"),WRo=o(" (BART model)"),QRo=l(),M2=a("li"),Rle=a("strong"),HRo=o("bert"),URo=o(" \u2014 "),cN=a("a"),JRo=o("BertForQuestionAnswering"),YRo=o(" (BERT model)"),KRo=l(),E2=a("li"),Sle=a("strong"),ZRo=o("big_bird"),eSo=o(" \u2014 "),fN=a("a"),oSo=o("BigBirdForQuestionAnswering"),rSo=o(" (BigBird model)"),tSo=l(),y2=a("li"),Ple=a("strong"),aSo=o("bigbird_pegasus"),nSo=o(" \u2014 "),mN=a("a"),sSo=o("BigBirdPegasusForQuestionAnswering"),lSo=o(" (BigBirdPegasus model)"),iSo=l(),w2=a("li"),$le=a("strong"),dSo=o("camembert"),cSo=o(" \u2014 "),gN=a("a"),fSo=o("CamembertForQuestionAnswering"),mSo=o(" (CamemBERT model)"),gSo=l(),A2=a("li"),Ile=a("strong"),hSo=o("canine"),pSo=o(" \u2014 "),hN=a("a"),_So=o("CanineForQuestionAnswering"),uSo=o(" (Canine model)"),bSo=l(),L2=a("li"),jle=a("strong"),vSo=o("convbert"),TSo=o(" \u2014 "),pN=a("a"),FSo=o("ConvBertForQuestionAnswering"),CSo=o(" (ConvBERT model)"),MSo=l(),B2=a("li"),Dle=a("strong"),ESo=o("data2vec-text"),ySo=o(" \u2014 "),_N=a("a"),wSo=o("Data2VecTextForQuestionAnswering"),ASo=o(" (Data2VecText model)"),LSo=l(),x2=a("li"),Nle=a("strong"),BSo=o("deberta"),xSo=o(" \u2014 "),uN=a("a"),kSo=o("DebertaForQuestionAnswering"),RSo=o(" (DeBERTa model)"),SSo=l(),k2=a("li"),qle=a("strong"),PSo=o("deberta-v2"),$So=o(" \u2014 "),bN=a("a"),ISo=o("DebertaV2ForQuestionAnswering"),jSo=o(" (DeBERTa-v2 model)"),DSo=l(),R2=a("li"),Gle=a("strong"),NSo=o("distilbert"),qSo=o(" \u2014 "),vN=a("a"),GSo=o("DistilBertForQuestionAnswering"),OSo=o(" (DistilBERT model)"),XSo=l(),S2=a("li"),Ole=a("strong"),VSo=o("electra"),zSo=o(" \u2014 "),TN=a("a"),WSo=o("ElectraForQuestionAnswering"),QSo=o(" (ELECTRA model)"),HSo=l(),P2=a("li"),Xle=a("strong"),USo=o("flaubert"),JSo=o(" \u2014 "),FN=a("a"),YSo=o("FlaubertForQuestionAnsweringSimple"),KSo=o(" (FlauBERT model)"),ZSo=l(),$2=a("li"),Vle=a("strong"),ePo=o("fnet"),oPo=o(" \u2014 "),CN=a("a"),rPo=o("FNetForQuestionAnswering"),tPo=o(" (FNet model)"),aPo=l(),I2=a("li"),zle=a("strong"),nPo=o("funnel"),sPo=o(" \u2014 "),MN=a("a"),lPo=o("FunnelForQuestionAnswering"),iPo=o(" (Funnel Transformer model)"),dPo=l(),j2=a("li"),Wle=a("strong"),cPo=o("gptj"),fPo=o(" \u2014 "),EN=a("a"),mPo=o("GPTJForQuestionAnswering"),gPo=o(" (GPT-J model)"),hPo=l(),D2=a("li"),Qle=a("strong"),pPo=o("ibert"),_Po=o(" \u2014 "),yN=a("a"),uPo=o("IBertForQuestionAnswering"),bPo=o(" (I-BERT model)"),vPo=l(),N2=a("li"),Hle=a("strong"),TPo=o("layoutlmv2"),FPo=o(" \u2014 "),wN=a("a"),CPo=o("LayoutLMv2ForQuestionAnswering"),MPo=o(" (LayoutLMv2 model)"),EPo=l(),q2=a("li"),Ule=a("strong"),yPo=o("led"),wPo=o(" \u2014 "),AN=a("a"),APo=o("LEDForQuestionAnswering"),LPo=o(" (LED model)"),BPo=l(),G2=a("li"),Jle=a("strong"),xPo=o("longformer"),kPo=o(" \u2014 "),LN=a("a"),RPo=o("LongformerForQuestionAnswering"),SPo=o(" (Longformer model)"),PPo=l(),O2=a("li"),Yle=a("strong"),$Po=o("lxmert"),IPo=o(" \u2014 "),BN=a("a"),jPo=o("LxmertForQuestionAnswering"),DPo=o(" (LXMERT model)"),NPo=l(),X2=a("li"),Kle=a("strong"),qPo=o("mbart"),GPo=o(" \u2014 "),xN=a("a"),OPo=o("MBartForQuestionAnswering"),XPo=o(" (mBART model)"),VPo=l(),V2=a("li"),Zle=a("strong"),zPo=o("megatron-bert"),WPo=o(" \u2014 "),kN=a("a"),QPo=o("MegatronBertForQuestionAnswering"),HPo=o(" (MegatronBert model)"),UPo=l(),z2=a("li"),eie=a("strong"),JPo=o("mobilebert"),YPo=o(" \u2014 "),RN=a("a"),KPo=o("MobileBertForQuestionAnswering"),ZPo=o(" (MobileBERT model)"),e$o=l(),W2=a("li"),oie=a("strong"),o$o=o("mpnet"),r$o=o(" \u2014 "),SN=a("a"),t$o=o("MPNetForQuestionAnswering"),a$o=o(" (MPNet model)"),n$o=l(),Q2=a("li"),rie=a("strong"),s$o=o("nystromformer"),l$o=o(" \u2014 "),PN=a("a"),i$o=o("NystromformerForQuestionAnswering"),d$o=o(" (Nystromformer model)"),c$o=l(),H2=a("li"),tie=a("strong"),f$o=o("qdqbert"),m$o=o(" \u2014 "),$N=a("a"),g$o=o("QDQBertForQuestionAnswering"),h$o=o(" (QDQBert model)"),p$o=l(),U2=a("li"),aie=a("strong"),_$o=o("reformer"),u$o=o(" \u2014 "),IN=a("a"),b$o=o("ReformerForQuestionAnswering"),v$o=o(" (Reformer model)"),T$o=l(),J2=a("li"),nie=a("strong"),F$o=o("rembert"),C$o=o(" \u2014 "),jN=a("a"),M$o=o("RemBertForQuestionAnswering"),E$o=o(" (RemBERT model)"),y$o=l(),Y2=a("li"),sie=a("strong"),w$o=o("roberta"),A$o=o(" \u2014 "),DN=a("a"),L$o=o("RobertaForQuestionAnswering"),B$o=o(" (RoBERTa model)"),x$o=l(),K2=a("li"),lie=a("strong"),k$o=o("roformer"),R$o=o(" \u2014 "),NN=a("a"),S$o=o("RoFormerForQuestionAnswering"),P$o=o(" (RoFormer model)"),$$o=l(),Z2=a("li"),iie=a("strong"),I$o=o("splinter"),j$o=o(" \u2014 "),qN=a("a"),D$o=o("SplinterForQuestionAnswering"),N$o=o(" (Splinter model)"),q$o=l(),ev=a("li"),die=a("strong"),G$o=o("squeezebert"),O$o=o(" \u2014 "),GN=a("a"),X$o=o("SqueezeBertForQuestionAnswering"),V$o=o(" (SqueezeBERT model)"),z$o=l(),ov=a("li"),cie=a("strong"),W$o=o("xlm"),Q$o=o(" \u2014 "),ON=a("a"),H$o=o("XLMForQuestionAnsweringSimple"),U$o=o(" (XLM model)"),J$o=l(),rv=a("li"),fie=a("strong"),Y$o=o("xlm-roberta"),K$o=o(" \u2014 "),XN=a("a"),Z$o=o("XLMRobertaForQuestionAnswering"),eIo=o(" (XLM-RoBERTa model)"),oIo=l(),tv=a("li"),mie=a("strong"),rIo=o("xlm-roberta-xl"),tIo=o(" \u2014 "),VN=a("a"),aIo=o("XLMRobertaXLForQuestionAnswering"),nIo=o(" (XLM-RoBERTa-XL model)"),sIo=l(),av=a("li"),gie=a("strong"),lIo=o("xlnet"),iIo=o(" \u2014 "),zN=a("a"),dIo=o("XLNetForQuestionAnsweringSimple"),cIo=o(" (XLNet model)"),fIo=l(),nv=a("li"),hie=a("strong"),mIo=o("yoso"),gIo=o(" \u2014 "),WN=a("a"),hIo=o("YosoForQuestionAnswering"),pIo=o(" (YOSO model)"),_Io=l(),sv=a("p"),uIo=o("The model is set in evaluation mode by default using "),pie=a("code"),bIo=o("model.eval()"),vIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ie=a("code"),TIo=o("model.train()"),FIo=l(),uie=a("p"),CIo=o("Examples:"),MIo=l(),f(g3.$$.fragment),vRe=l(),Sd=a("h2"),lv=a("a"),bie=a("span"),f(h3.$$.fragment),EIo=l(),vie=a("span"),yIo=o("AutoModelForTableQuestionAnswering"),TRe=l(),lr=a("div"),f(p3.$$.fragment),wIo=l(),Pd=a("p"),AIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Tie=a("code"),LIo=o("from_pretrained()"),BIo=o("class method or the "),Fie=a("code"),xIo=o("from_config()"),kIo=o(`class
method.`),RIo=l(),_3=a("p"),SIo=o("This class cannot be instantiated directly using "),Cie=a("code"),PIo=o("__init__()"),$Io=o(" (throws an error)."),IIo=l(),rt=a("div"),f(u3.$$.fragment),jIo=l(),Mie=a("p"),DIo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),NIo=l(),$d=a("p"),qIo=o(`Note:
Loading a model from its configuration file does `),Eie=a("strong"),GIo=o("not"),OIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yie=a("code"),XIo=o("from_pretrained()"),VIo=o("to load the model weights."),zIo=l(),wie=a("p"),WIo=o("Examples:"),QIo=l(),f(b3.$$.fragment),HIo=l(),Qe=a("div"),f(v3.$$.fragment),UIo=l(),Aie=a("p"),JIo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),YIo=l(),an=a("p"),KIo=o("The model class to instantiate is selected based on the "),Lie=a("code"),ZIo=o("model_type"),ejo=o(` property of the config object (either
passed as an argument or loaded from `),Bie=a("code"),ojo=o("pretrained_model_name_or_path"),rjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xie=a("code"),tjo=o("pretrained_model_name_or_path"),ajo=o(":"),njo=l(),kie=a("ul"),iv=a("li"),Rie=a("strong"),sjo=o("tapas"),ljo=o(" \u2014 "),QN=a("a"),ijo=o("TapasForQuestionAnswering"),djo=o(" (TAPAS model)"),cjo=l(),dv=a("p"),fjo=o("The model is set in evaluation mode by default using "),Sie=a("code"),mjo=o("model.eval()"),gjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pie=a("code"),hjo=o("model.train()"),pjo=l(),$ie=a("p"),_jo=o("Examples:"),ujo=l(),f(T3.$$.fragment),FRe=l(),Id=a("h2"),cv=a("a"),Iie=a("span"),f(F3.$$.fragment),bjo=l(),jie=a("span"),vjo=o("AutoModelForImageClassification"),CRe=l(),ir=a("div"),f(C3.$$.fragment),Tjo=l(),jd=a("p"),Fjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Die=a("code"),Cjo=o("from_pretrained()"),Mjo=o("class method or the "),Nie=a("code"),Ejo=o("from_config()"),yjo=o(`class
method.`),wjo=l(),M3=a("p"),Ajo=o("This class cannot be instantiated directly using "),qie=a("code"),Ljo=o("__init__()"),Bjo=o(" (throws an error)."),xjo=l(),tt=a("div"),f(E3.$$.fragment),kjo=l(),Gie=a("p"),Rjo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Sjo=l(),Dd=a("p"),Pjo=o(`Note:
Loading a model from its configuration file does `),Oie=a("strong"),$jo=o("not"),Ijo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xie=a("code"),jjo=o("from_pretrained()"),Djo=o("to load the model weights."),Njo=l(),Vie=a("p"),qjo=o("Examples:"),Gjo=l(),f(y3.$$.fragment),Ojo=l(),He=a("div"),f(w3.$$.fragment),Xjo=l(),zie=a("p"),Vjo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),zjo=l(),nn=a("p"),Wjo=o("The model class to instantiate is selected based on the "),Wie=a("code"),Qjo=o("model_type"),Hjo=o(` property of the config object (either
passed as an argument or loaded from `),Qie=a("code"),Ujo=o("pretrained_model_name_or_path"),Jjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hie=a("code"),Yjo=o("pretrained_model_name_or_path"),Kjo=o(":"),Zjo=l(),me=a("ul"),fv=a("li"),Uie=a("strong"),eDo=o("beit"),oDo=o(" \u2014 "),HN=a("a"),rDo=o("BeitForImageClassification"),tDo=o(" (BEiT model)"),aDo=l(),mv=a("li"),Jie=a("strong"),nDo=o("convnext"),sDo=o(" \u2014 "),UN=a("a"),lDo=o("ConvNextForImageClassification"),iDo=o(" (ConvNext model)"),dDo=l(),zs=a("li"),Yie=a("strong"),cDo=o("deit"),fDo=o(" \u2014 "),JN=a("a"),mDo=o("DeiTForImageClassification"),gDo=o(" or "),YN=a("a"),hDo=o("DeiTForImageClassificationWithTeacher"),pDo=o(" (DeiT model)"),_Do=l(),gv=a("li"),Kie=a("strong"),uDo=o("imagegpt"),bDo=o(" \u2014 "),KN=a("a"),vDo=o("ImageGPTForImageClassification"),TDo=o(" (ImageGPT model)"),FDo=l(),pa=a("li"),Zie=a("strong"),CDo=o("perceiver"),MDo=o(" \u2014 "),ZN=a("a"),EDo=o("PerceiverForImageClassificationLearned"),yDo=o(" or "),eq=a("a"),wDo=o("PerceiverForImageClassificationFourier"),ADo=o(" or "),oq=a("a"),LDo=o("PerceiverForImageClassificationConvProcessing"),BDo=o(" (Perceiver model)"),xDo=l(),hv=a("li"),ede=a("strong"),kDo=o("poolformer"),RDo=o(" \u2014 "),rq=a("a"),SDo=o("PoolFormerForImageClassification"),PDo=o(" (PoolFormer model)"),$Do=l(),pv=a("li"),ode=a("strong"),IDo=o("resnet"),jDo=o(" \u2014 "),tq=a("a"),DDo=o("ResNetForImageClassification"),NDo=o(" (ResNet model)"),qDo=l(),_v=a("li"),rde=a("strong"),GDo=o("segformer"),ODo=o(" \u2014 "),aq=a("a"),XDo=o("SegformerForImageClassification"),VDo=o(" (SegFormer model)"),zDo=l(),uv=a("li"),tde=a("strong"),WDo=o("swin"),QDo=o(" \u2014 "),nq=a("a"),HDo=o("SwinForImageClassification"),UDo=o(" (Swin model)"),JDo=l(),bv=a("li"),ade=a("strong"),YDo=o("van"),KDo=o(" \u2014 "),sq=a("a"),ZDo=o("VanForImageClassification"),eNo=o(" (VAN model)"),oNo=l(),vv=a("li"),nde=a("strong"),rNo=o("vit"),tNo=o(" \u2014 "),lq=a("a"),aNo=o("ViTForImageClassification"),nNo=o(" (ViT model)"),sNo=l(),Tv=a("p"),lNo=o("The model is set in evaluation mode by default using "),sde=a("code"),iNo=o("model.eval()"),dNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lde=a("code"),cNo=o("model.train()"),fNo=l(),ide=a("p"),mNo=o("Examples:"),gNo=l(),f(A3.$$.fragment),MRe=l(),Nd=a("h2"),Fv=a("a"),dde=a("span"),f(L3.$$.fragment),hNo=l(),cde=a("span"),pNo=o("AutoModelForVision2Seq"),ERe=l(),dr=a("div"),f(B3.$$.fragment),_No=l(),qd=a("p"),uNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fde=a("code"),bNo=o("from_pretrained()"),vNo=o("class method or the "),mde=a("code"),TNo=o("from_config()"),FNo=o(`class
method.`),CNo=l(),x3=a("p"),MNo=o("This class cannot be instantiated directly using "),gde=a("code"),ENo=o("__init__()"),yNo=o(" (throws an error)."),wNo=l(),at=a("div"),f(k3.$$.fragment),ANo=l(),hde=a("p"),LNo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),BNo=l(),Gd=a("p"),xNo=o(`Note:
Loading a model from its configuration file does `),pde=a("strong"),kNo=o("not"),RNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_de=a("code"),SNo=o("from_pretrained()"),PNo=o("to load the model weights."),$No=l(),ude=a("p"),INo=o("Examples:"),jNo=l(),f(R3.$$.fragment),DNo=l(),Ue=a("div"),f(S3.$$.fragment),NNo=l(),bde=a("p"),qNo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),GNo=l(),sn=a("p"),ONo=o("The model class to instantiate is selected based on the "),vde=a("code"),XNo=o("model_type"),VNo=o(` property of the config object (either
passed as an argument or loaded from `),Tde=a("code"),zNo=o("pretrained_model_name_or_path"),WNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=a("code"),QNo=o("pretrained_model_name_or_path"),HNo=o(":"),UNo=l(),Cde=a("ul"),Cv=a("li"),Mde=a("strong"),JNo=o("vision-encoder-decoder"),YNo=o(" \u2014 "),iq=a("a"),KNo=o("VisionEncoderDecoderModel"),ZNo=o(" (Vision Encoder decoder model)"),eqo=l(),Mv=a("p"),oqo=o("The model is set in evaluation mode by default using "),Ede=a("code"),rqo=o("model.eval()"),tqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yde=a("code"),aqo=o("model.train()"),nqo=l(),wde=a("p"),sqo=o("Examples:"),lqo=l(),f(P3.$$.fragment),yRe=l(),Od=a("h2"),Ev=a("a"),Ade=a("span"),f($3.$$.fragment),iqo=l(),Lde=a("span"),dqo=o("AutoModelForAudioClassification"),wRe=l(),cr=a("div"),f(I3.$$.fragment),cqo=l(),Xd=a("p"),fqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Bde=a("code"),mqo=o("from_pretrained()"),gqo=o("class method or the "),xde=a("code"),hqo=o("from_config()"),pqo=o(`class
method.`),_qo=l(),j3=a("p"),uqo=o("This class cannot be instantiated directly using "),kde=a("code"),bqo=o("__init__()"),vqo=o(" (throws an error)."),Tqo=l(),nt=a("div"),f(D3.$$.fragment),Fqo=l(),Rde=a("p"),Cqo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Mqo=l(),Vd=a("p"),Eqo=o(`Note:
Loading a model from its configuration file does `),Sde=a("strong"),yqo=o("not"),wqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pde=a("code"),Aqo=o("from_pretrained()"),Lqo=o("to load the model weights."),Bqo=l(),$de=a("p"),xqo=o("Examples:"),kqo=l(),f(N3.$$.fragment),Rqo=l(),Je=a("div"),f(q3.$$.fragment),Sqo=l(),Ide=a("p"),Pqo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),$qo=l(),ln=a("p"),Iqo=o("The model class to instantiate is selected based on the "),jde=a("code"),jqo=o("model_type"),Dqo=o(` property of the config object (either
passed as an argument or loaded from `),Dde=a("code"),Nqo=o("pretrained_model_name_or_path"),qqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nde=a("code"),Gqo=o("pretrained_model_name_or_path"),Oqo=o(":"),Xqo=l(),ke=a("ul"),yv=a("li"),qde=a("strong"),Vqo=o("data2vec-audio"),zqo=o(" \u2014 "),dq=a("a"),Wqo=o("Data2VecAudioForSequenceClassification"),Qqo=o(" (Data2VecAudio model)"),Hqo=l(),wv=a("li"),Gde=a("strong"),Uqo=o("hubert"),Jqo=o(" \u2014 "),cq=a("a"),Yqo=o("HubertForSequenceClassification"),Kqo=o(" (Hubert model)"),Zqo=l(),Av=a("li"),Ode=a("strong"),eGo=o("sew"),oGo=o(" \u2014 "),fq=a("a"),rGo=o("SEWForSequenceClassification"),tGo=o(" (SEW model)"),aGo=l(),Lv=a("li"),Xde=a("strong"),nGo=o("sew-d"),sGo=o(" \u2014 "),mq=a("a"),lGo=o("SEWDForSequenceClassification"),iGo=o(" (SEW-D model)"),dGo=l(),Bv=a("li"),Vde=a("strong"),cGo=o("unispeech"),fGo=o(" \u2014 "),gq=a("a"),mGo=o("UniSpeechForSequenceClassification"),gGo=o(" (UniSpeech model)"),hGo=l(),xv=a("li"),zde=a("strong"),pGo=o("unispeech-sat"),_Go=o(" \u2014 "),hq=a("a"),uGo=o("UniSpeechSatForSequenceClassification"),bGo=o(" (UniSpeechSat model)"),vGo=l(),kv=a("li"),Wde=a("strong"),TGo=o("wav2vec2"),FGo=o(" \u2014 "),pq=a("a"),CGo=o("Wav2Vec2ForSequenceClassification"),MGo=o(" (Wav2Vec2 model)"),EGo=l(),Rv=a("li"),Qde=a("strong"),yGo=o("wavlm"),wGo=o(" \u2014 "),_q=a("a"),AGo=o("WavLMForSequenceClassification"),LGo=o(" (WavLM model)"),BGo=l(),Sv=a("p"),xGo=o("The model is set in evaluation mode by default using "),Hde=a("code"),kGo=o("model.eval()"),RGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ude=a("code"),SGo=o("model.train()"),PGo=l(),Jde=a("p"),$Go=o("Examples:"),IGo=l(),f(G3.$$.fragment),ARe=l(),zd=a("h2"),Pv=a("a"),Yde=a("span"),f(O3.$$.fragment),jGo=l(),Kde=a("span"),DGo=o("AutoModelForAudioFrameClassification"),LRe=l(),fr=a("div"),f(X3.$$.fragment),NGo=l(),Wd=a("p"),qGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Zde=a("code"),GGo=o("from_pretrained()"),OGo=o("class method or the "),ece=a("code"),XGo=o("from_config()"),VGo=o(`class
method.`),zGo=l(),V3=a("p"),WGo=o("This class cannot be instantiated directly using "),oce=a("code"),QGo=o("__init__()"),HGo=o(" (throws an error)."),UGo=l(),st=a("div"),f(z3.$$.fragment),JGo=l(),rce=a("p"),YGo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),KGo=l(),Qd=a("p"),ZGo=o(`Note:
Loading a model from its configuration file does `),tce=a("strong"),eOo=o("not"),oOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ace=a("code"),rOo=o("from_pretrained()"),tOo=o("to load the model weights."),aOo=l(),nce=a("p"),nOo=o("Examples:"),sOo=l(),f(W3.$$.fragment),lOo=l(),Ye=a("div"),f(Q3.$$.fragment),iOo=l(),sce=a("p"),dOo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),cOo=l(),dn=a("p"),fOo=o("The model class to instantiate is selected based on the "),lce=a("code"),mOo=o("model_type"),gOo=o(` property of the config object (either
passed as an argument or loaded from `),ice=a("code"),hOo=o("pretrained_model_name_or_path"),pOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dce=a("code"),_Oo=o("pretrained_model_name_or_path"),uOo=o(":"),bOo=l(),cn=a("ul"),$v=a("li"),cce=a("strong"),vOo=o("data2vec-audio"),TOo=o(" \u2014 "),uq=a("a"),FOo=o("Data2VecAudioForAudioFrameClassification"),COo=o(" (Data2VecAudio model)"),MOo=l(),Iv=a("li"),fce=a("strong"),EOo=o("unispeech-sat"),yOo=o(" \u2014 "),bq=a("a"),wOo=o("UniSpeechSatForAudioFrameClassification"),AOo=o(" (UniSpeechSat model)"),LOo=l(),jv=a("li"),mce=a("strong"),BOo=o("wav2vec2"),xOo=o(" \u2014 "),vq=a("a"),kOo=o("Wav2Vec2ForAudioFrameClassification"),ROo=o(" (Wav2Vec2 model)"),SOo=l(),Dv=a("li"),gce=a("strong"),POo=o("wavlm"),$Oo=o(" \u2014 "),Tq=a("a"),IOo=o("WavLMForAudioFrameClassification"),jOo=o(" (WavLM model)"),DOo=l(),Nv=a("p"),NOo=o("The model is set in evaluation mode by default using "),hce=a("code"),qOo=o("model.eval()"),GOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pce=a("code"),OOo=o("model.train()"),XOo=l(),_ce=a("p"),VOo=o("Examples:"),zOo=l(),f(H3.$$.fragment),BRe=l(),Hd=a("h2"),qv=a("a"),uce=a("span"),f(U3.$$.fragment),WOo=l(),bce=a("span"),QOo=o("AutoModelForCTC"),xRe=l(),mr=a("div"),f(J3.$$.fragment),HOo=l(),Ud=a("p"),UOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),vce=a("code"),JOo=o("from_pretrained()"),YOo=o("class method or the "),Tce=a("code"),KOo=o("from_config()"),ZOo=o(`class
method.`),eXo=l(),Y3=a("p"),oXo=o("This class cannot be instantiated directly using "),Fce=a("code"),rXo=o("__init__()"),tXo=o(" (throws an error)."),aXo=l(),lt=a("div"),f(K3.$$.fragment),nXo=l(),Cce=a("p"),sXo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),lXo=l(),Jd=a("p"),iXo=o(`Note:
Loading a model from its configuration file does `),Mce=a("strong"),dXo=o("not"),cXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ece=a("code"),fXo=o("from_pretrained()"),mXo=o("to load the model weights."),gXo=l(),yce=a("p"),hXo=o("Examples:"),pXo=l(),f(Z3.$$.fragment),_Xo=l(),Ke=a("div"),f(ey.$$.fragment),uXo=l(),wce=a("p"),bXo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),vXo=l(),fn=a("p"),TXo=o("The model class to instantiate is selected based on the "),Ace=a("code"),FXo=o("model_type"),CXo=o(` property of the config object (either
passed as an argument or loaded from `),Lce=a("code"),MXo=o("pretrained_model_name_or_path"),EXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bce=a("code"),yXo=o("pretrained_model_name_or_path"),wXo=o(":"),AXo=l(),Re=a("ul"),Gv=a("li"),xce=a("strong"),LXo=o("data2vec-audio"),BXo=o(" \u2014 "),Fq=a("a"),xXo=o("Data2VecAudioForCTC"),kXo=o(" (Data2VecAudio model)"),RXo=l(),Ov=a("li"),kce=a("strong"),SXo=o("hubert"),PXo=o(" \u2014 "),Cq=a("a"),$Xo=o("HubertForCTC"),IXo=o(" (Hubert model)"),jXo=l(),Xv=a("li"),Rce=a("strong"),DXo=o("sew"),NXo=o(" \u2014 "),Mq=a("a"),qXo=o("SEWForCTC"),GXo=o(" (SEW model)"),OXo=l(),Vv=a("li"),Sce=a("strong"),XXo=o("sew-d"),VXo=o(" \u2014 "),Eq=a("a"),zXo=o("SEWDForCTC"),WXo=o(" (SEW-D model)"),QXo=l(),zv=a("li"),Pce=a("strong"),HXo=o("unispeech"),UXo=o(" \u2014 "),yq=a("a"),JXo=o("UniSpeechForCTC"),YXo=o(" (UniSpeech model)"),KXo=l(),Wv=a("li"),$ce=a("strong"),ZXo=o("unispeech-sat"),eVo=o(" \u2014 "),wq=a("a"),oVo=o("UniSpeechSatForCTC"),rVo=o(" (UniSpeechSat model)"),tVo=l(),Qv=a("li"),Ice=a("strong"),aVo=o("wav2vec2"),nVo=o(" \u2014 "),Aq=a("a"),sVo=o("Wav2Vec2ForCTC"),lVo=o(" (Wav2Vec2 model)"),iVo=l(),Hv=a("li"),jce=a("strong"),dVo=o("wavlm"),cVo=o(" \u2014 "),Lq=a("a"),fVo=o("WavLMForCTC"),mVo=o(" (WavLM model)"),gVo=l(),Uv=a("p"),hVo=o("The model is set in evaluation mode by default using "),Dce=a("code"),pVo=o("model.eval()"),_Vo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nce=a("code"),uVo=o("model.train()"),bVo=l(),qce=a("p"),vVo=o("Examples:"),TVo=l(),f(oy.$$.fragment),kRe=l(),Yd=a("h2"),Jv=a("a"),Gce=a("span"),f(ry.$$.fragment),FVo=l(),Oce=a("span"),CVo=o("AutoModelForSpeechSeq2Seq"),RRe=l(),gr=a("div"),f(ty.$$.fragment),MVo=l(),Kd=a("p"),EVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Xce=a("code"),yVo=o("from_pretrained()"),wVo=o("class method or the "),Vce=a("code"),AVo=o("from_config()"),LVo=o(`class
method.`),BVo=l(),ay=a("p"),xVo=o("This class cannot be instantiated directly using "),zce=a("code"),kVo=o("__init__()"),RVo=o(" (throws an error)."),SVo=l(),it=a("div"),f(ny.$$.fragment),PVo=l(),Wce=a("p"),$Vo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),IVo=l(),Zd=a("p"),jVo=o(`Note:
Loading a model from its configuration file does `),Qce=a("strong"),DVo=o("not"),NVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hce=a("code"),qVo=o("from_pretrained()"),GVo=o("to load the model weights."),OVo=l(),Uce=a("p"),XVo=o("Examples:"),VVo=l(),f(sy.$$.fragment),zVo=l(),Ze=a("div"),f(ly.$$.fragment),WVo=l(),Jce=a("p"),QVo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),HVo=l(),mn=a("p"),UVo=o("The model class to instantiate is selected based on the "),Yce=a("code"),JVo=o("model_type"),YVo=o(` property of the config object (either
passed as an argument or loaded from `),Kce=a("code"),KVo=o("pretrained_model_name_or_path"),ZVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zce=a("code"),ezo=o("pretrained_model_name_or_path"),ozo=o(":"),rzo=l(),iy=a("ul"),Yv=a("li"),efe=a("strong"),tzo=o("speech-encoder-decoder"),azo=o(" \u2014 "),Bq=a("a"),nzo=o("SpeechEncoderDecoderModel"),szo=o(" (Speech Encoder decoder model)"),lzo=l(),Kv=a("li"),ofe=a("strong"),izo=o("speech_to_text"),dzo=o(" \u2014 "),xq=a("a"),czo=o("Speech2TextForConditionalGeneration"),fzo=o(" (Speech2Text model)"),mzo=l(),Zv=a("p"),gzo=o("The model is set in evaluation mode by default using "),rfe=a("code"),hzo=o("model.eval()"),pzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tfe=a("code"),_zo=o("model.train()"),uzo=l(),afe=a("p"),bzo=o("Examples:"),vzo=l(),f(dy.$$.fragment),SRe=l(),ec=a("h2"),e6=a("a"),nfe=a("span"),f(cy.$$.fragment),Tzo=l(),sfe=a("span"),Fzo=o("AutoModelForAudioXVector"),PRe=l(),hr=a("div"),f(fy.$$.fragment),Czo=l(),oc=a("p"),Mzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),lfe=a("code"),Ezo=o("from_pretrained()"),yzo=o("class method or the "),ife=a("code"),wzo=o("from_config()"),Azo=o(`class
method.`),Lzo=l(),my=a("p"),Bzo=o("This class cannot be instantiated directly using "),dfe=a("code"),xzo=o("__init__()"),kzo=o(" (throws an error)."),Rzo=l(),dt=a("div"),f(gy.$$.fragment),Szo=l(),cfe=a("p"),Pzo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),$zo=l(),rc=a("p"),Izo=o(`Note:
Loading a model from its configuration file does `),ffe=a("strong"),jzo=o("not"),Dzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mfe=a("code"),Nzo=o("from_pretrained()"),qzo=o("to load the model weights."),Gzo=l(),gfe=a("p"),Ozo=o("Examples:"),Xzo=l(),f(hy.$$.fragment),Vzo=l(),eo=a("div"),f(py.$$.fragment),zzo=l(),hfe=a("p"),Wzo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Qzo=l(),gn=a("p"),Hzo=o("The model class to instantiate is selected based on the "),pfe=a("code"),Uzo=o("model_type"),Jzo=o(` property of the config object (either
passed as an argument or loaded from `),_fe=a("code"),Yzo=o("pretrained_model_name_or_path"),Kzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ufe=a("code"),Zzo=o("pretrained_model_name_or_path"),eWo=o(":"),oWo=l(),hn=a("ul"),o6=a("li"),bfe=a("strong"),rWo=o("data2vec-audio"),tWo=o(" \u2014 "),kq=a("a"),aWo=o("Data2VecAudioForXVector"),nWo=o(" (Data2VecAudio model)"),sWo=l(),r6=a("li"),vfe=a("strong"),lWo=o("unispeech-sat"),iWo=o(" \u2014 "),Rq=a("a"),dWo=o("UniSpeechSatForXVector"),cWo=o(" (UniSpeechSat model)"),fWo=l(),t6=a("li"),Tfe=a("strong"),mWo=o("wav2vec2"),gWo=o(" \u2014 "),Sq=a("a"),hWo=o("Wav2Vec2ForXVector"),pWo=o(" (Wav2Vec2 model)"),_Wo=l(),a6=a("li"),Ffe=a("strong"),uWo=o("wavlm"),bWo=o(" \u2014 "),Pq=a("a"),vWo=o("WavLMForXVector"),TWo=o(" (WavLM model)"),FWo=l(),n6=a("p"),CWo=o("The model is set in evaluation mode by default using "),Cfe=a("code"),MWo=o("model.eval()"),EWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mfe=a("code"),yWo=o("model.train()"),wWo=l(),Efe=a("p"),AWo=o("Examples:"),LWo=l(),f(_y.$$.fragment),$Re=l(),tc=a("h2"),s6=a("a"),yfe=a("span"),f(uy.$$.fragment),BWo=l(),wfe=a("span"),xWo=o("AutoModelForMaskedImageModeling"),IRe=l(),pr=a("div"),f(by.$$.fragment),kWo=l(),ac=a("p"),RWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Afe=a("code"),SWo=o("from_pretrained()"),PWo=o("class method or the "),Lfe=a("code"),$Wo=o("from_config()"),IWo=o(`class
method.`),jWo=l(),vy=a("p"),DWo=o("This class cannot be instantiated directly using "),Bfe=a("code"),NWo=o("__init__()"),qWo=o(" (throws an error)."),GWo=l(),ct=a("div"),f(Ty.$$.fragment),OWo=l(),xfe=a("p"),XWo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),VWo=l(),nc=a("p"),zWo=o(`Note:
Loading a model from its configuration file does `),kfe=a("strong"),WWo=o("not"),QWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rfe=a("code"),HWo=o("from_pretrained()"),UWo=o("to load the model weights."),JWo=l(),Sfe=a("p"),YWo=o("Examples:"),KWo=l(),f(Fy.$$.fragment),ZWo=l(),oo=a("div"),f(Cy.$$.fragment),eQo=l(),Pfe=a("p"),oQo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),rQo=l(),pn=a("p"),tQo=o("The model class to instantiate is selected based on the "),$fe=a("code"),aQo=o("model_type"),nQo=o(` property of the config object (either
passed as an argument or loaded from `),Ife=a("code"),sQo=o("pretrained_model_name_or_path"),lQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jfe=a("code"),iQo=o("pretrained_model_name_or_path"),dQo=o(":"),cQo=l(),sc=a("ul"),l6=a("li"),Dfe=a("strong"),fQo=o("deit"),mQo=o(" \u2014 "),$q=a("a"),gQo=o("DeiTForMaskedImageModeling"),hQo=o(" (DeiT model)"),pQo=l(),i6=a("li"),Nfe=a("strong"),_Qo=o("swin"),uQo=o(" \u2014 "),Iq=a("a"),bQo=o("SwinForMaskedImageModeling"),vQo=o(" (Swin model)"),TQo=l(),d6=a("li"),qfe=a("strong"),FQo=o("vit"),CQo=o(" \u2014 "),jq=a("a"),MQo=o("ViTForMaskedImageModeling"),EQo=o(" (ViT model)"),yQo=l(),c6=a("p"),wQo=o("The model is set in evaluation mode by default using "),Gfe=a("code"),AQo=o("model.eval()"),LQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ofe=a("code"),BQo=o("model.train()"),xQo=l(),Xfe=a("p"),kQo=o("Examples:"),RQo=l(),f(My.$$.fragment),jRe=l(),lc=a("h2"),f6=a("a"),Vfe=a("span"),f(Ey.$$.fragment),SQo=l(),zfe=a("span"),PQo=o("AutoModelForObjectDetection"),DRe=l(),_r=a("div"),f(yy.$$.fragment),$Qo=l(),ic=a("p"),IQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Wfe=a("code"),jQo=o("from_pretrained()"),DQo=o("class method or the "),Qfe=a("code"),NQo=o("from_config()"),qQo=o(`class
method.`),GQo=l(),wy=a("p"),OQo=o("This class cannot be instantiated directly using "),Hfe=a("code"),XQo=o("__init__()"),VQo=o(" (throws an error)."),zQo=l(),ft=a("div"),f(Ay.$$.fragment),WQo=l(),Ufe=a("p"),QQo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),HQo=l(),dc=a("p"),UQo=o(`Note:
Loading a model from its configuration file does `),Jfe=a("strong"),JQo=o("not"),YQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yfe=a("code"),KQo=o("from_pretrained()"),ZQo=o("to load the model weights."),eHo=l(),Kfe=a("p"),oHo=o("Examples:"),rHo=l(),f(Ly.$$.fragment),tHo=l(),ro=a("div"),f(By.$$.fragment),aHo=l(),Zfe=a("p"),nHo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),sHo=l(),_n=a("p"),lHo=o("The model class to instantiate is selected based on the "),eme=a("code"),iHo=o("model_type"),dHo=o(` property of the config object (either
passed as an argument or loaded from `),ome=a("code"),cHo=o("pretrained_model_name_or_path"),fHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rme=a("code"),mHo=o("pretrained_model_name_or_path"),gHo=o(":"),hHo=l(),tme=a("ul"),m6=a("li"),ame=a("strong"),pHo=o("detr"),_Ho=o(" \u2014 "),Dq=a("a"),uHo=o("DetrForObjectDetection"),bHo=o(" (DETR model)"),vHo=l(),g6=a("p"),THo=o("The model is set in evaluation mode by default using "),nme=a("code"),FHo=o("model.eval()"),CHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sme=a("code"),MHo=o("model.train()"),EHo=l(),lme=a("p"),yHo=o("Examples:"),wHo=l(),f(xy.$$.fragment),NRe=l(),cc=a("h2"),h6=a("a"),ime=a("span"),f(ky.$$.fragment),AHo=l(),dme=a("span"),LHo=o("AutoModelForImageSegmentation"),qRe=l(),ur=a("div"),f(Ry.$$.fragment),BHo=l(),fc=a("p"),xHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),cme=a("code"),kHo=o("from_pretrained()"),RHo=o("class method or the "),fme=a("code"),SHo=o("from_config()"),PHo=o(`class
method.`),$Ho=l(),Sy=a("p"),IHo=o("This class cannot be instantiated directly using "),mme=a("code"),jHo=o("__init__()"),DHo=o(" (throws an error)."),NHo=l(),mt=a("div"),f(Py.$$.fragment),qHo=l(),gme=a("p"),GHo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),OHo=l(),mc=a("p"),XHo=o(`Note:
Loading a model from its configuration file does `),hme=a("strong"),VHo=o("not"),zHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pme=a("code"),WHo=o("from_pretrained()"),QHo=o("to load the model weights."),HHo=l(),_me=a("p"),UHo=o("Examples:"),JHo=l(),f($y.$$.fragment),YHo=l(),to=a("div"),f(Iy.$$.fragment),KHo=l(),ume=a("p"),ZHo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),eUo=l(),un=a("p"),oUo=o("The model class to instantiate is selected based on the "),bme=a("code"),rUo=o("model_type"),tUo=o(` property of the config object (either
passed as an argument or loaded from `),vme=a("code"),aUo=o("pretrained_model_name_or_path"),nUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tme=a("code"),sUo=o("pretrained_model_name_or_path"),lUo=o(":"),iUo=l(),Fme=a("ul"),p6=a("li"),Cme=a("strong"),dUo=o("detr"),cUo=o(" \u2014 "),Nq=a("a"),fUo=o("DetrForSegmentation"),mUo=o(" (DETR model)"),gUo=l(),_6=a("p"),hUo=o("The model is set in evaluation mode by default using "),Mme=a("code"),pUo=o("model.eval()"),_Uo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eme=a("code"),uUo=o("model.train()"),bUo=l(),yme=a("p"),vUo=o("Examples:"),TUo=l(),f(jy.$$.fragment),GRe=l(),gc=a("h2"),u6=a("a"),wme=a("span"),f(Dy.$$.fragment),FUo=l(),Ame=a("span"),CUo=o("AutoModelForSemanticSegmentation"),ORe=l(),br=a("div"),f(Ny.$$.fragment),MUo=l(),hc=a("p"),EUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Lme=a("code"),yUo=o("from_pretrained()"),wUo=o("class method or the "),Bme=a("code"),AUo=o("from_config()"),LUo=o(`class
method.`),BUo=l(),qy=a("p"),xUo=o("This class cannot be instantiated directly using "),xme=a("code"),kUo=o("__init__()"),RUo=o(" (throws an error)."),SUo=l(),gt=a("div"),f(Gy.$$.fragment),PUo=l(),kme=a("p"),$Uo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),IUo=l(),pc=a("p"),jUo=o(`Note:
Loading a model from its configuration file does `),Rme=a("strong"),DUo=o("not"),NUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sme=a("code"),qUo=o("from_pretrained()"),GUo=o("to load the model weights."),OUo=l(),Pme=a("p"),XUo=o("Examples:"),VUo=l(),f(Oy.$$.fragment),zUo=l(),ao=a("div"),f(Xy.$$.fragment),WUo=l(),$me=a("p"),QUo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),HUo=l(),bn=a("p"),UUo=o("The model class to instantiate is selected based on the "),Ime=a("code"),JUo=o("model_type"),YUo=o(` property of the config object (either
passed as an argument or loaded from `),jme=a("code"),KUo=o("pretrained_model_name_or_path"),ZUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dme=a("code"),eJo=o("pretrained_model_name_or_path"),oJo=o(":"),rJo=l(),Vy=a("ul"),b6=a("li"),Nme=a("strong"),tJo=o("beit"),aJo=o(" \u2014 "),qq=a("a"),nJo=o("BeitForSemanticSegmentation"),sJo=o(" (BEiT model)"),lJo=l(),v6=a("li"),qme=a("strong"),iJo=o("segformer"),dJo=o(" \u2014 "),Gq=a("a"),cJo=o("SegformerForSemanticSegmentation"),fJo=o(" (SegFormer model)"),mJo=l(),T6=a("p"),gJo=o("The model is set in evaluation mode by default using "),Gme=a("code"),hJo=o("model.eval()"),pJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ome=a("code"),_Jo=o("model.train()"),uJo=l(),Xme=a("p"),bJo=o("Examples:"),vJo=l(),f(zy.$$.fragment),XRe=l(),_c=a("h2"),F6=a("a"),Vme=a("span"),f(Wy.$$.fragment),TJo=l(),zme=a("span"),FJo=o("AutoModelForInstanceSegmentation"),VRe=l(),vr=a("div"),f(Qy.$$.fragment),CJo=l(),uc=a("p"),MJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Wme=a("code"),EJo=o("from_pretrained()"),yJo=o("class method or the "),Qme=a("code"),wJo=o("from_config()"),AJo=o(`class
method.`),LJo=l(),Hy=a("p"),BJo=o("This class cannot be instantiated directly using "),Hme=a("code"),xJo=o("__init__()"),kJo=o(" (throws an error)."),RJo=l(),ht=a("div"),f(Uy.$$.fragment),SJo=l(),Ume=a("p"),PJo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),$Jo=l(),bc=a("p"),IJo=o(`Note:
Loading a model from its configuration file does `),Jme=a("strong"),jJo=o("not"),DJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yme=a("code"),NJo=o("from_pretrained()"),qJo=o("to load the model weights."),GJo=l(),Kme=a("p"),OJo=o("Examples:"),XJo=l(),f(Jy.$$.fragment),VJo=l(),no=a("div"),f(Yy.$$.fragment),zJo=l(),Zme=a("p"),WJo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),QJo=l(),vn=a("p"),HJo=o("The model class to instantiate is selected based on the "),ege=a("code"),UJo=o("model_type"),JJo=o(` property of the config object (either
passed as an argument or loaded from `),oge=a("code"),YJo=o("pretrained_model_name_or_path"),KJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rge=a("code"),ZJo=o("pretrained_model_name_or_path"),eYo=o(":"),oYo=l(),tge=a("ul"),C6=a("li"),age=a("strong"),rYo=o("maskformer"),tYo=o(" \u2014 "),Oq=a("a"),aYo=o("MaskFormerForInstanceSegmentation"),nYo=o(" (MaskFormer model)"),sYo=l(),M6=a("p"),lYo=o("The model is set in evaluation mode by default using "),nge=a("code"),iYo=o("model.eval()"),dYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sge=a("code"),cYo=o("model.train()"),fYo=l(),lge=a("p"),mYo=o("Examples:"),gYo=l(),f(Ky.$$.fragment),zRe=l(),vc=a("h2"),E6=a("a"),ige=a("span"),f(Zy.$$.fragment),hYo=l(),dge=a("span"),pYo=o("TFAutoModel"),WRe=l(),Tr=a("div"),f(ew.$$.fragment),_Yo=l(),Tc=a("p"),uYo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cge=a("code"),bYo=o("from_pretrained()"),vYo=o("class method or the "),fge=a("code"),TYo=o("from_config()"),FYo=o(`class
method.`),CYo=l(),ow=a("p"),MYo=o("This class cannot be instantiated directly using "),mge=a("code"),EYo=o("__init__()"),yYo=o(" (throws an error)."),wYo=l(),pt=a("div"),f(rw.$$.fragment),AYo=l(),gge=a("p"),LYo=o("Instantiates one of the base model classes of the library from a configuration."),BYo=l(),Fc=a("p"),xYo=o(`Note:
Loading a model from its configuration file does `),hge=a("strong"),kYo=o("not"),RYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pge=a("code"),SYo=o("from_pretrained()"),PYo=o("to load the model weights."),$Yo=l(),_ge=a("p"),IYo=o("Examples:"),jYo=l(),f(tw.$$.fragment),DYo=l(),ho=a("div"),f(aw.$$.fragment),NYo=l(),uge=a("p"),qYo=o("Instantiate one of the base model classes of the library from a pretrained model."),GYo=l(),Tn=a("p"),OYo=o("The model class to instantiate is selected based on the "),bge=a("code"),XYo=o("model_type"),VYo=o(` property of the config object (either
passed as an argument or loaded from `),vge=a("code"),zYo=o("pretrained_model_name_or_path"),WYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tge=a("code"),QYo=o("pretrained_model_name_or_path"),HYo=o(":"),UYo=l(),B=a("ul"),y6=a("li"),Fge=a("strong"),JYo=o("albert"),YYo=o(" \u2014 "),Xq=a("a"),KYo=o("TFAlbertModel"),ZYo=o(" (ALBERT model)"),eKo=l(),w6=a("li"),Cge=a("strong"),oKo=o("bart"),rKo=o(" \u2014 "),Vq=a("a"),tKo=o("TFBartModel"),aKo=o(" (BART model)"),nKo=l(),A6=a("li"),Mge=a("strong"),sKo=o("bert"),lKo=o(" \u2014 "),zq=a("a"),iKo=o("TFBertModel"),dKo=o(" (BERT model)"),cKo=l(),L6=a("li"),Ege=a("strong"),fKo=o("blenderbot"),mKo=o(" \u2014 "),Wq=a("a"),gKo=o("TFBlenderbotModel"),hKo=o(" (Blenderbot model)"),pKo=l(),B6=a("li"),yge=a("strong"),_Ko=o("blenderbot-small"),uKo=o(" \u2014 "),Qq=a("a"),bKo=o("TFBlenderbotSmallModel"),vKo=o(" (BlenderbotSmall model)"),TKo=l(),x6=a("li"),wge=a("strong"),FKo=o("camembert"),CKo=o(" \u2014 "),Hq=a("a"),MKo=o("TFCamembertModel"),EKo=o(" (CamemBERT model)"),yKo=l(),k6=a("li"),Age=a("strong"),wKo=o("clip"),AKo=o(" \u2014 "),Uq=a("a"),LKo=o("TFCLIPModel"),BKo=o(" (CLIP model)"),xKo=l(),R6=a("li"),Lge=a("strong"),kKo=o("convbert"),RKo=o(" \u2014 "),Jq=a("a"),SKo=o("TFConvBertModel"),PKo=o(" (ConvBERT model)"),$Ko=l(),S6=a("li"),Bge=a("strong"),IKo=o("convnext"),jKo=o(" \u2014 "),Yq=a("a"),DKo=o("TFConvNextModel"),NKo=o(" (ConvNext model)"),qKo=l(),P6=a("li"),xge=a("strong"),GKo=o("ctrl"),OKo=o(" \u2014 "),Kq=a("a"),XKo=o("TFCTRLModel"),VKo=o(" (CTRL model)"),zKo=l(),$6=a("li"),kge=a("strong"),WKo=o("deberta"),QKo=o(" \u2014 "),Zq=a("a"),HKo=o("TFDebertaModel"),UKo=o(" (DeBERTa model)"),JKo=l(),I6=a("li"),Rge=a("strong"),YKo=o("deberta-v2"),KKo=o(" \u2014 "),eG=a("a"),ZKo=o("TFDebertaV2Model"),eZo=o(" (DeBERTa-v2 model)"),oZo=l(),j6=a("li"),Sge=a("strong"),rZo=o("distilbert"),tZo=o(" \u2014 "),oG=a("a"),aZo=o("TFDistilBertModel"),nZo=o(" (DistilBERT model)"),sZo=l(),D6=a("li"),Pge=a("strong"),lZo=o("dpr"),iZo=o(" \u2014 "),rG=a("a"),dZo=o("TFDPRQuestionEncoder"),cZo=o(" (DPR model)"),fZo=l(),N6=a("li"),$ge=a("strong"),mZo=o("electra"),gZo=o(" \u2014 "),tG=a("a"),hZo=o("TFElectraModel"),pZo=o(" (ELECTRA model)"),_Zo=l(),q6=a("li"),Ige=a("strong"),uZo=o("flaubert"),bZo=o(" \u2014 "),aG=a("a"),vZo=o("TFFlaubertModel"),TZo=o(" (FlauBERT model)"),FZo=l(),Ws=a("li"),jge=a("strong"),CZo=o("funnel"),MZo=o(" \u2014 "),nG=a("a"),EZo=o("TFFunnelModel"),yZo=o(" or "),sG=a("a"),wZo=o("TFFunnelBaseModel"),AZo=o(" (Funnel Transformer model)"),LZo=l(),G6=a("li"),Dge=a("strong"),BZo=o("gpt2"),xZo=o(" \u2014 "),lG=a("a"),kZo=o("TFGPT2Model"),RZo=o(" (OpenAI GPT-2 model)"),SZo=l(),O6=a("li"),Nge=a("strong"),PZo=o("hubert"),$Zo=o(" \u2014 "),iG=a("a"),IZo=o("TFHubertModel"),jZo=o(" (Hubert model)"),DZo=l(),X6=a("li"),qge=a("strong"),NZo=o("layoutlm"),qZo=o(" \u2014 "),dG=a("a"),GZo=o("TFLayoutLMModel"),OZo=o(" (LayoutLM model)"),XZo=l(),V6=a("li"),Gge=a("strong"),VZo=o("led"),zZo=o(" \u2014 "),cG=a("a"),WZo=o("TFLEDModel"),QZo=o(" (LED model)"),HZo=l(),z6=a("li"),Oge=a("strong"),UZo=o("longformer"),JZo=o(" \u2014 "),fG=a("a"),YZo=o("TFLongformerModel"),KZo=o(" (Longformer model)"),ZZo=l(),W6=a("li"),Xge=a("strong"),eer=o("lxmert"),oer=o(" \u2014 "),mG=a("a"),rer=o("TFLxmertModel"),ter=o(" (LXMERT model)"),aer=l(),Q6=a("li"),Vge=a("strong"),ner=o("marian"),ser=o(" \u2014 "),gG=a("a"),ler=o("TFMarianModel"),ier=o(" (Marian model)"),der=l(),H6=a("li"),zge=a("strong"),cer=o("mbart"),fer=o(" \u2014 "),hG=a("a"),mer=o("TFMBartModel"),ger=o(" (mBART model)"),her=l(),U6=a("li"),Wge=a("strong"),per=o("mobilebert"),_er=o(" \u2014 "),pG=a("a"),uer=o("TFMobileBertModel"),ber=o(" (MobileBERT model)"),ver=l(),J6=a("li"),Qge=a("strong"),Ter=o("mpnet"),Fer=o(" \u2014 "),_G=a("a"),Cer=o("TFMPNetModel"),Mer=o(" (MPNet model)"),Eer=l(),Y6=a("li"),Hge=a("strong"),yer=o("mt5"),wer=o(" \u2014 "),uG=a("a"),Aer=o("TFMT5Model"),Ler=o(" (mT5 model)"),Ber=l(),K6=a("li"),Uge=a("strong"),xer=o("openai-gpt"),ker=o(" \u2014 "),bG=a("a"),Rer=o("TFOpenAIGPTModel"),Ser=o(" (OpenAI GPT model)"),Per=l(),Z6=a("li"),Jge=a("strong"),$er=o("pegasus"),Ier=o(" \u2014 "),vG=a("a"),jer=o("TFPegasusModel"),Der=o(" (Pegasus model)"),Ner=l(),e0=a("li"),Yge=a("strong"),qer=o("rembert"),Ger=o(" \u2014 "),TG=a("a"),Oer=o("TFRemBertModel"),Xer=o(" (RemBERT model)"),Ver=l(),o0=a("li"),Kge=a("strong"),zer=o("roberta"),Wer=o(" \u2014 "),FG=a("a"),Qer=o("TFRobertaModel"),Her=o(" (RoBERTa model)"),Uer=l(),r0=a("li"),Zge=a("strong"),Jer=o("roformer"),Yer=o(" \u2014 "),CG=a("a"),Ker=o("TFRoFormerModel"),Zer=o(" (RoFormer model)"),eor=l(),t0=a("li"),ehe=a("strong"),oor=o("speech_to_text"),ror=o(" \u2014 "),MG=a("a"),tor=o("TFSpeech2TextModel"),aor=o(" (Speech2Text model)"),nor=l(),a0=a("li"),ohe=a("strong"),sor=o("t5"),lor=o(" \u2014 "),EG=a("a"),ior=o("TFT5Model"),dor=o(" (T5 model)"),cor=l(),n0=a("li"),rhe=a("strong"),mor=o("tapas"),gor=o(" \u2014 "),yG=a("a"),hor=o("TFTapasModel"),por=o(" (TAPAS model)"),_or=l(),s0=a("li"),the=a("strong"),uor=o("transfo-xl"),bor=o(" \u2014 "),wG=a("a"),vor=o("TFTransfoXLModel"),Tor=o(" (Transformer-XL model)"),For=l(),l0=a("li"),ahe=a("strong"),Cor=o("vit"),Mor=o(" \u2014 "),AG=a("a"),Eor=o("TFViTModel"),yor=o(" (ViT model)"),wor=l(),i0=a("li"),nhe=a("strong"),Aor=o("wav2vec2"),Lor=o(" \u2014 "),LG=a("a"),Bor=o("TFWav2Vec2Model"),xor=o(" (Wav2Vec2 model)"),kor=l(),d0=a("li"),she=a("strong"),Ror=o("xlm"),Sor=o(" \u2014 "),BG=a("a"),Por=o("TFXLMModel"),$or=o(" (XLM model)"),Ior=l(),c0=a("li"),lhe=a("strong"),jor=o("xlm-roberta"),Dor=o(" \u2014 "),xG=a("a"),Nor=o("TFXLMRobertaModel"),qor=o(" (XLM-RoBERTa model)"),Gor=l(),f0=a("li"),ihe=a("strong"),Oor=o("xlnet"),Xor=o(" \u2014 "),kG=a("a"),Vor=o("TFXLNetModel"),zor=o(" (XLNet model)"),Wor=l(),dhe=a("p"),Qor=o("Examples:"),Hor=l(),f(nw.$$.fragment),QRe=l(),Cc=a("h2"),m0=a("a"),che=a("span"),f(sw.$$.fragment),Uor=l(),fhe=a("span"),Jor=o("TFAutoModelForPreTraining"),HRe=l(),Fr=a("div"),f(lw.$$.fragment),Yor=l(),Mc=a("p"),Kor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),mhe=a("code"),Zor=o("from_pretrained()"),err=o("class method or the "),ghe=a("code"),orr=o("from_config()"),rrr=o(`class
method.`),trr=l(),iw=a("p"),arr=o("This class cannot be instantiated directly using "),hhe=a("code"),nrr=o("__init__()"),srr=o(" (throws an error)."),lrr=l(),_t=a("div"),f(dw.$$.fragment),irr=l(),phe=a("p"),drr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),crr=l(),Ec=a("p"),frr=o(`Note:
Loading a model from its configuration file does `),_he=a("strong"),mrr=o("not"),grr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uhe=a("code"),hrr=o("from_pretrained()"),prr=o("to load the model weights."),_rr=l(),bhe=a("p"),urr=o("Examples:"),brr=l(),f(cw.$$.fragment),vrr=l(),po=a("div"),f(fw.$$.fragment),Trr=l(),vhe=a("p"),Frr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Crr=l(),Fn=a("p"),Mrr=o("The model class to instantiate is selected based on the "),The=a("code"),Err=o("model_type"),yrr=o(` property of the config object (either
passed as an argument or loaded from `),Fhe=a("code"),wrr=o("pretrained_model_name_or_path"),Arr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Che=a("code"),Lrr=o("pretrained_model_name_or_path"),Brr=o(":"),xrr=l(),H=a("ul"),g0=a("li"),Mhe=a("strong"),krr=o("albert"),Rrr=o(" \u2014 "),RG=a("a"),Srr=o("TFAlbertForPreTraining"),Prr=o(" (ALBERT model)"),$rr=l(),h0=a("li"),Ehe=a("strong"),Irr=o("bart"),jrr=o(" \u2014 "),SG=a("a"),Drr=o("TFBartForConditionalGeneration"),Nrr=o(" (BART model)"),qrr=l(),p0=a("li"),yhe=a("strong"),Grr=o("bert"),Orr=o(" \u2014 "),PG=a("a"),Xrr=o("TFBertForPreTraining"),Vrr=o(" (BERT model)"),zrr=l(),_0=a("li"),whe=a("strong"),Wrr=o("camembert"),Qrr=o(" \u2014 "),$G=a("a"),Hrr=o("TFCamembertForMaskedLM"),Urr=o(" (CamemBERT model)"),Jrr=l(),u0=a("li"),Ahe=a("strong"),Yrr=o("ctrl"),Krr=o(" \u2014 "),IG=a("a"),Zrr=o("TFCTRLLMHeadModel"),etr=o(" (CTRL model)"),otr=l(),b0=a("li"),Lhe=a("strong"),rtr=o("distilbert"),ttr=o(" \u2014 "),jG=a("a"),atr=o("TFDistilBertForMaskedLM"),ntr=o(" (DistilBERT model)"),str=l(),v0=a("li"),Bhe=a("strong"),ltr=o("electra"),itr=o(" \u2014 "),DG=a("a"),dtr=o("TFElectraForPreTraining"),ctr=o(" (ELECTRA model)"),ftr=l(),T0=a("li"),xhe=a("strong"),mtr=o("flaubert"),gtr=o(" \u2014 "),NG=a("a"),htr=o("TFFlaubertWithLMHeadModel"),ptr=o(" (FlauBERT model)"),_tr=l(),F0=a("li"),khe=a("strong"),utr=o("funnel"),btr=o(" \u2014 "),qG=a("a"),vtr=o("TFFunnelForPreTraining"),Ttr=o(" (Funnel Transformer model)"),Ftr=l(),C0=a("li"),Rhe=a("strong"),Ctr=o("gpt2"),Mtr=o(" \u2014 "),GG=a("a"),Etr=o("TFGPT2LMHeadModel"),ytr=o(" (OpenAI GPT-2 model)"),wtr=l(),M0=a("li"),She=a("strong"),Atr=o("layoutlm"),Ltr=o(" \u2014 "),OG=a("a"),Btr=o("TFLayoutLMForMaskedLM"),xtr=o(" (LayoutLM model)"),ktr=l(),E0=a("li"),Phe=a("strong"),Rtr=o("lxmert"),Str=o(" \u2014 "),XG=a("a"),Ptr=o("TFLxmertForPreTraining"),$tr=o(" (LXMERT model)"),Itr=l(),y0=a("li"),$he=a("strong"),jtr=o("mobilebert"),Dtr=o(" \u2014 "),VG=a("a"),Ntr=o("TFMobileBertForPreTraining"),qtr=o(" (MobileBERT model)"),Gtr=l(),w0=a("li"),Ihe=a("strong"),Otr=o("mpnet"),Xtr=o(" \u2014 "),zG=a("a"),Vtr=o("TFMPNetForMaskedLM"),ztr=o(" (MPNet model)"),Wtr=l(),A0=a("li"),jhe=a("strong"),Qtr=o("openai-gpt"),Htr=o(" \u2014 "),WG=a("a"),Utr=o("TFOpenAIGPTLMHeadModel"),Jtr=o(" (OpenAI GPT model)"),Ytr=l(),L0=a("li"),Dhe=a("strong"),Ktr=o("roberta"),Ztr=o(" \u2014 "),QG=a("a"),ear=o("TFRobertaForMaskedLM"),oar=o(" (RoBERTa model)"),rar=l(),B0=a("li"),Nhe=a("strong"),tar=o("t5"),aar=o(" \u2014 "),HG=a("a"),nar=o("TFT5ForConditionalGeneration"),sar=o(" (T5 model)"),lar=l(),x0=a("li"),qhe=a("strong"),iar=o("tapas"),dar=o(" \u2014 "),UG=a("a"),car=o("TFTapasForMaskedLM"),far=o(" (TAPAS model)"),mar=l(),k0=a("li"),Ghe=a("strong"),gar=o("transfo-xl"),har=o(" \u2014 "),JG=a("a"),par=o("TFTransfoXLLMHeadModel"),_ar=o(" (Transformer-XL model)"),uar=l(),R0=a("li"),Ohe=a("strong"),bar=o("xlm"),Tar=o(" \u2014 "),YG=a("a"),Far=o("TFXLMWithLMHeadModel"),Car=o(" (XLM model)"),Mar=l(),S0=a("li"),Xhe=a("strong"),Ear=o("xlm-roberta"),yar=o(" \u2014 "),KG=a("a"),war=o("TFXLMRobertaForMaskedLM"),Aar=o(" (XLM-RoBERTa model)"),Lar=l(),P0=a("li"),Vhe=a("strong"),Bar=o("xlnet"),xar=o(" \u2014 "),ZG=a("a"),kar=o("TFXLNetLMHeadModel"),Rar=o(" (XLNet model)"),Sar=l(),zhe=a("p"),Par=o("Examples:"),$ar=l(),f(mw.$$.fragment),URe=l(),yc=a("h2"),$0=a("a"),Whe=a("span"),f(gw.$$.fragment),Iar=l(),Qhe=a("span"),jar=o("TFAutoModelForCausalLM"),JRe=l(),Cr=a("div"),f(hw.$$.fragment),Dar=l(),wc=a("p"),Nar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Hhe=a("code"),qar=o("from_pretrained()"),Gar=o("class method or the "),Uhe=a("code"),Oar=o("from_config()"),Xar=o(`class
method.`),Var=l(),pw=a("p"),zar=o("This class cannot be instantiated directly using "),Jhe=a("code"),War=o("__init__()"),Qar=o(" (throws an error)."),Har=l(),ut=a("div"),f(_w.$$.fragment),Uar=l(),Yhe=a("p"),Jar=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Yar=l(),Ac=a("p"),Kar=o(`Note:
Loading a model from its configuration file does `),Khe=a("strong"),Zar=o("not"),enr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zhe=a("code"),onr=o("from_pretrained()"),rnr=o("to load the model weights."),tnr=l(),epe=a("p"),anr=o("Examples:"),nnr=l(),f(uw.$$.fragment),snr=l(),_o=a("div"),f(bw.$$.fragment),lnr=l(),ope=a("p"),inr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),dnr=l(),Cn=a("p"),cnr=o("The model class to instantiate is selected based on the "),rpe=a("code"),fnr=o("model_type"),mnr=o(` property of the config object (either
passed as an argument or loaded from `),tpe=a("code"),gnr=o("pretrained_model_name_or_path"),hnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ape=a("code"),pnr=o("pretrained_model_name_or_path"),_nr=o(":"),unr=l(),ge=a("ul"),I0=a("li"),npe=a("strong"),bnr=o("bert"),vnr=o(" \u2014 "),eO=a("a"),Tnr=o("TFBertLMHeadModel"),Fnr=o(" (BERT model)"),Cnr=l(),j0=a("li"),spe=a("strong"),Mnr=o("camembert"),Enr=o(" \u2014 "),oO=a("a"),ynr=o("TFCamembertForCausalLM"),wnr=o(" (CamemBERT model)"),Anr=l(),D0=a("li"),lpe=a("strong"),Lnr=o("ctrl"),Bnr=o(" \u2014 "),rO=a("a"),xnr=o("TFCTRLLMHeadModel"),knr=o(" (CTRL model)"),Rnr=l(),N0=a("li"),ipe=a("strong"),Snr=o("gpt2"),Pnr=o(" \u2014 "),tO=a("a"),$nr=o("TFGPT2LMHeadModel"),Inr=o(" (OpenAI GPT-2 model)"),jnr=l(),q0=a("li"),dpe=a("strong"),Dnr=o("openai-gpt"),Nnr=o(" \u2014 "),aO=a("a"),qnr=o("TFOpenAIGPTLMHeadModel"),Gnr=o(" (OpenAI GPT model)"),Onr=l(),G0=a("li"),cpe=a("strong"),Xnr=o("rembert"),Vnr=o(" \u2014 "),nO=a("a"),znr=o("TFRemBertForCausalLM"),Wnr=o(" (RemBERT model)"),Qnr=l(),O0=a("li"),fpe=a("strong"),Hnr=o("roberta"),Unr=o(" \u2014 "),sO=a("a"),Jnr=o("TFRobertaForCausalLM"),Ynr=o(" (RoBERTa model)"),Knr=l(),X0=a("li"),mpe=a("strong"),Znr=o("roformer"),esr=o(" \u2014 "),lO=a("a"),osr=o("TFRoFormerForCausalLM"),rsr=o(" (RoFormer model)"),tsr=l(),V0=a("li"),gpe=a("strong"),asr=o("transfo-xl"),nsr=o(" \u2014 "),iO=a("a"),ssr=o("TFTransfoXLLMHeadModel"),lsr=o(" (Transformer-XL model)"),isr=l(),z0=a("li"),hpe=a("strong"),dsr=o("xlm"),csr=o(" \u2014 "),dO=a("a"),fsr=o("TFXLMWithLMHeadModel"),msr=o(" (XLM model)"),gsr=l(),W0=a("li"),ppe=a("strong"),hsr=o("xlnet"),psr=o(" \u2014 "),cO=a("a"),_sr=o("TFXLNetLMHeadModel"),usr=o(" (XLNet model)"),bsr=l(),_pe=a("p"),vsr=o("Examples:"),Tsr=l(),f(vw.$$.fragment),YRe=l(),Lc=a("h2"),Q0=a("a"),upe=a("span"),f(Tw.$$.fragment),Fsr=l(),bpe=a("span"),Csr=o("TFAutoModelForImageClassification"),KRe=l(),Mr=a("div"),f(Fw.$$.fragment),Msr=l(),Bc=a("p"),Esr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vpe=a("code"),ysr=o("from_pretrained()"),wsr=o("class method or the "),Tpe=a("code"),Asr=o("from_config()"),Lsr=o(`class
method.`),Bsr=l(),Cw=a("p"),xsr=o("This class cannot be instantiated directly using "),Fpe=a("code"),ksr=o("__init__()"),Rsr=o(" (throws an error)."),Ssr=l(),bt=a("div"),f(Mw.$$.fragment),Psr=l(),Cpe=a("p"),$sr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Isr=l(),xc=a("p"),jsr=o(`Note:
Loading a model from its configuration file does `),Mpe=a("strong"),Dsr=o("not"),Nsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Epe=a("code"),qsr=o("from_pretrained()"),Gsr=o("to load the model weights."),Osr=l(),ype=a("p"),Xsr=o("Examples:"),Vsr=l(),f(Ew.$$.fragment),zsr=l(),uo=a("div"),f(yw.$$.fragment),Wsr=l(),wpe=a("p"),Qsr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Hsr=l(),Mn=a("p"),Usr=o("The model class to instantiate is selected based on the "),Ape=a("code"),Jsr=o("model_type"),Ysr=o(` property of the config object (either
passed as an argument or loaded from `),Lpe=a("code"),Ksr=o("pretrained_model_name_or_path"),Zsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=a("code"),elr=o("pretrained_model_name_or_path"),olr=o(":"),rlr=l(),ww=a("ul"),H0=a("li"),xpe=a("strong"),tlr=o("convnext"),alr=o(" \u2014 "),fO=a("a"),nlr=o("TFConvNextForImageClassification"),slr=o(" (ConvNext model)"),llr=l(),U0=a("li"),kpe=a("strong"),ilr=o("vit"),dlr=o(" \u2014 "),mO=a("a"),clr=o("TFViTForImageClassification"),flr=o(" (ViT model)"),mlr=l(),Rpe=a("p"),glr=o("Examples:"),hlr=l(),f(Aw.$$.fragment),ZRe=l(),kc=a("h2"),J0=a("a"),Spe=a("span"),f(Lw.$$.fragment),plr=l(),Ppe=a("span"),_lr=o("TFAutoModelForMaskedLM"),eSe=l(),Er=a("div"),f(Bw.$$.fragment),ulr=l(),Rc=a("p"),blr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$pe=a("code"),vlr=o("from_pretrained()"),Tlr=o("class method or the "),Ipe=a("code"),Flr=o("from_config()"),Clr=o(`class
method.`),Mlr=l(),xw=a("p"),Elr=o("This class cannot be instantiated directly using "),jpe=a("code"),ylr=o("__init__()"),wlr=o(" (throws an error)."),Alr=l(),vt=a("div"),f(kw.$$.fragment),Llr=l(),Dpe=a("p"),Blr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xlr=l(),Sc=a("p"),klr=o(`Note:
Loading a model from its configuration file does `),Npe=a("strong"),Rlr=o("not"),Slr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qpe=a("code"),Plr=o("from_pretrained()"),$lr=o("to load the model weights."),Ilr=l(),Gpe=a("p"),jlr=o("Examples:"),Dlr=l(),f(Rw.$$.fragment),Nlr=l(),bo=a("div"),f(Sw.$$.fragment),qlr=l(),Ope=a("p"),Glr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Olr=l(),En=a("p"),Xlr=o("The model class to instantiate is selected based on the "),Xpe=a("code"),Vlr=o("model_type"),zlr=o(` property of the config object (either
passed as an argument or loaded from `),Vpe=a("code"),Wlr=o("pretrained_model_name_or_path"),Qlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zpe=a("code"),Hlr=o("pretrained_model_name_or_path"),Ulr=o(":"),Jlr=l(),J=a("ul"),Y0=a("li"),Wpe=a("strong"),Ylr=o("albert"),Klr=o(" \u2014 "),gO=a("a"),Zlr=o("TFAlbertForMaskedLM"),eir=o(" (ALBERT model)"),oir=l(),K0=a("li"),Qpe=a("strong"),rir=o("bert"),tir=o(" \u2014 "),hO=a("a"),air=o("TFBertForMaskedLM"),nir=o(" (BERT model)"),sir=l(),Z0=a("li"),Hpe=a("strong"),lir=o("camembert"),iir=o(" \u2014 "),pO=a("a"),dir=o("TFCamembertForMaskedLM"),cir=o(" (CamemBERT model)"),fir=l(),eT=a("li"),Upe=a("strong"),mir=o("convbert"),gir=o(" \u2014 "),_O=a("a"),hir=o("TFConvBertForMaskedLM"),pir=o(" (ConvBERT model)"),_ir=l(),oT=a("li"),Jpe=a("strong"),uir=o("deberta"),bir=o(" \u2014 "),uO=a("a"),vir=o("TFDebertaForMaskedLM"),Tir=o(" (DeBERTa model)"),Fir=l(),rT=a("li"),Ype=a("strong"),Cir=o("deberta-v2"),Mir=o(" \u2014 "),bO=a("a"),Eir=o("TFDebertaV2ForMaskedLM"),yir=o(" (DeBERTa-v2 model)"),wir=l(),tT=a("li"),Kpe=a("strong"),Air=o("distilbert"),Lir=o(" \u2014 "),vO=a("a"),Bir=o("TFDistilBertForMaskedLM"),xir=o(" (DistilBERT model)"),kir=l(),aT=a("li"),Zpe=a("strong"),Rir=o("electra"),Sir=o(" \u2014 "),TO=a("a"),Pir=o("TFElectraForMaskedLM"),$ir=o(" (ELECTRA model)"),Iir=l(),nT=a("li"),e_e=a("strong"),jir=o("flaubert"),Dir=o(" \u2014 "),FO=a("a"),Nir=o("TFFlaubertWithLMHeadModel"),qir=o(" (FlauBERT model)"),Gir=l(),sT=a("li"),o_e=a("strong"),Oir=o("funnel"),Xir=o(" \u2014 "),CO=a("a"),Vir=o("TFFunnelForMaskedLM"),zir=o(" (Funnel Transformer model)"),Wir=l(),lT=a("li"),r_e=a("strong"),Qir=o("layoutlm"),Hir=o(" \u2014 "),MO=a("a"),Uir=o("TFLayoutLMForMaskedLM"),Jir=o(" (LayoutLM model)"),Yir=l(),iT=a("li"),t_e=a("strong"),Kir=o("longformer"),Zir=o(" \u2014 "),EO=a("a"),edr=o("TFLongformerForMaskedLM"),odr=o(" (Longformer model)"),rdr=l(),dT=a("li"),a_e=a("strong"),tdr=o("mobilebert"),adr=o(" \u2014 "),yO=a("a"),ndr=o("TFMobileBertForMaskedLM"),sdr=o(" (MobileBERT model)"),ldr=l(),cT=a("li"),n_e=a("strong"),idr=o("mpnet"),ddr=o(" \u2014 "),wO=a("a"),cdr=o("TFMPNetForMaskedLM"),fdr=o(" (MPNet model)"),mdr=l(),fT=a("li"),s_e=a("strong"),gdr=o("rembert"),hdr=o(" \u2014 "),AO=a("a"),pdr=o("TFRemBertForMaskedLM"),_dr=o(" (RemBERT model)"),udr=l(),mT=a("li"),l_e=a("strong"),bdr=o("roberta"),vdr=o(" \u2014 "),LO=a("a"),Tdr=o("TFRobertaForMaskedLM"),Fdr=o(" (RoBERTa model)"),Cdr=l(),gT=a("li"),i_e=a("strong"),Mdr=o("roformer"),Edr=o(" \u2014 "),BO=a("a"),ydr=o("TFRoFormerForMaskedLM"),wdr=o(" (RoFormer model)"),Adr=l(),hT=a("li"),d_e=a("strong"),Ldr=o("tapas"),Bdr=o(" \u2014 "),xO=a("a"),xdr=o("TFTapasForMaskedLM"),kdr=o(" (TAPAS model)"),Rdr=l(),pT=a("li"),c_e=a("strong"),Sdr=o("xlm"),Pdr=o(" \u2014 "),kO=a("a"),$dr=o("TFXLMWithLMHeadModel"),Idr=o(" (XLM model)"),jdr=l(),_T=a("li"),f_e=a("strong"),Ddr=o("xlm-roberta"),Ndr=o(" \u2014 "),RO=a("a"),qdr=o("TFXLMRobertaForMaskedLM"),Gdr=o(" (XLM-RoBERTa model)"),Odr=l(),m_e=a("p"),Xdr=o("Examples:"),Vdr=l(),f(Pw.$$.fragment),oSe=l(),Pc=a("h2"),uT=a("a"),g_e=a("span"),f($w.$$.fragment),zdr=l(),h_e=a("span"),Wdr=o("TFAutoModelForSeq2SeqLM"),rSe=l(),yr=a("div"),f(Iw.$$.fragment),Qdr=l(),$c=a("p"),Hdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),p_e=a("code"),Udr=o("from_pretrained()"),Jdr=o("class method or the "),__e=a("code"),Ydr=o("from_config()"),Kdr=o(`class
method.`),Zdr=l(),jw=a("p"),ecr=o("This class cannot be instantiated directly using "),u_e=a("code"),ocr=o("__init__()"),rcr=o(" (throws an error)."),tcr=l(),Tt=a("div"),f(Dw.$$.fragment),acr=l(),b_e=a("p"),ncr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),scr=l(),Ic=a("p"),lcr=o(`Note:
Loading a model from its configuration file does `),v_e=a("strong"),icr=o("not"),dcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),T_e=a("code"),ccr=o("from_pretrained()"),fcr=o("to load the model weights."),mcr=l(),F_e=a("p"),gcr=o("Examples:"),hcr=l(),f(Nw.$$.fragment),pcr=l(),vo=a("div"),f(qw.$$.fragment),_cr=l(),C_e=a("p"),ucr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bcr=l(),yn=a("p"),vcr=o("The model class to instantiate is selected based on the "),M_e=a("code"),Tcr=o("model_type"),Fcr=o(` property of the config object (either
passed as an argument or loaded from `),E_e=a("code"),Ccr=o("pretrained_model_name_or_path"),Mcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y_e=a("code"),Ecr=o("pretrained_model_name_or_path"),ycr=o(":"),wcr=l(),_e=a("ul"),bT=a("li"),w_e=a("strong"),Acr=o("bart"),Lcr=o(" \u2014 "),SO=a("a"),Bcr=o("TFBartForConditionalGeneration"),xcr=o(" (BART model)"),kcr=l(),vT=a("li"),A_e=a("strong"),Rcr=o("blenderbot"),Scr=o(" \u2014 "),PO=a("a"),Pcr=o("TFBlenderbotForConditionalGeneration"),$cr=o(" (Blenderbot model)"),Icr=l(),TT=a("li"),L_e=a("strong"),jcr=o("blenderbot-small"),Dcr=o(" \u2014 "),$O=a("a"),Ncr=o("TFBlenderbotSmallForConditionalGeneration"),qcr=o(" (BlenderbotSmall model)"),Gcr=l(),FT=a("li"),B_e=a("strong"),Ocr=o("encoder-decoder"),Xcr=o(" \u2014 "),IO=a("a"),Vcr=o("TFEncoderDecoderModel"),zcr=o(" (Encoder decoder model)"),Wcr=l(),CT=a("li"),x_e=a("strong"),Qcr=o("led"),Hcr=o(" \u2014 "),jO=a("a"),Ucr=o("TFLEDForConditionalGeneration"),Jcr=o(" (LED model)"),Ycr=l(),MT=a("li"),k_e=a("strong"),Kcr=o("marian"),Zcr=o(" \u2014 "),DO=a("a"),efr=o("TFMarianMTModel"),ofr=o(" (Marian model)"),rfr=l(),ET=a("li"),R_e=a("strong"),tfr=o("mbart"),afr=o(" \u2014 "),NO=a("a"),nfr=o("TFMBartForConditionalGeneration"),sfr=o(" (mBART model)"),lfr=l(),yT=a("li"),S_e=a("strong"),ifr=o("mt5"),dfr=o(" \u2014 "),qO=a("a"),cfr=o("TFMT5ForConditionalGeneration"),ffr=o(" (mT5 model)"),mfr=l(),wT=a("li"),P_e=a("strong"),gfr=o("pegasus"),hfr=o(" \u2014 "),GO=a("a"),pfr=o("TFPegasusForConditionalGeneration"),_fr=o(" (Pegasus model)"),ufr=l(),AT=a("li"),$_e=a("strong"),bfr=o("t5"),vfr=o(" \u2014 "),OO=a("a"),Tfr=o("TFT5ForConditionalGeneration"),Ffr=o(" (T5 model)"),Cfr=l(),I_e=a("p"),Mfr=o("Examples:"),Efr=l(),f(Gw.$$.fragment),tSe=l(),jc=a("h2"),LT=a("a"),j_e=a("span"),f(Ow.$$.fragment),yfr=l(),D_e=a("span"),wfr=o("TFAutoModelForSequenceClassification"),aSe=l(),wr=a("div"),f(Xw.$$.fragment),Afr=l(),Dc=a("p"),Lfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),N_e=a("code"),Bfr=o("from_pretrained()"),xfr=o("class method or the "),q_e=a("code"),kfr=o("from_config()"),Rfr=o(`class
method.`),Sfr=l(),Vw=a("p"),Pfr=o("This class cannot be instantiated directly using "),G_e=a("code"),$fr=o("__init__()"),Ifr=o(" (throws an error)."),jfr=l(),Ft=a("div"),f(zw.$$.fragment),Dfr=l(),O_e=a("p"),Nfr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qfr=l(),Nc=a("p"),Gfr=o(`Note:
Loading a model from its configuration file does `),X_e=a("strong"),Ofr=o("not"),Xfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),V_e=a("code"),Vfr=o("from_pretrained()"),zfr=o("to load the model weights."),Wfr=l(),z_e=a("p"),Qfr=o("Examples:"),Hfr=l(),f(Ww.$$.fragment),Ufr=l(),To=a("div"),f(Qw.$$.fragment),Jfr=l(),W_e=a("p"),Yfr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Kfr=l(),wn=a("p"),Zfr=o("The model class to instantiate is selected based on the "),Q_e=a("code"),emr=o("model_type"),omr=o(` property of the config object (either
passed as an argument or loaded from `),H_e=a("code"),rmr=o("pretrained_model_name_or_path"),tmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=a("code"),amr=o("pretrained_model_name_or_path"),nmr=o(":"),smr=l(),V=a("ul"),BT=a("li"),J_e=a("strong"),lmr=o("albert"),imr=o(" \u2014 "),XO=a("a"),dmr=o("TFAlbertForSequenceClassification"),cmr=o(" (ALBERT model)"),fmr=l(),xT=a("li"),Y_e=a("strong"),mmr=o("bert"),gmr=o(" \u2014 "),VO=a("a"),hmr=o("TFBertForSequenceClassification"),pmr=o(" (BERT model)"),_mr=l(),kT=a("li"),K_e=a("strong"),umr=o("camembert"),bmr=o(" \u2014 "),zO=a("a"),vmr=o("TFCamembertForSequenceClassification"),Tmr=o(" (CamemBERT model)"),Fmr=l(),RT=a("li"),Z_e=a("strong"),Cmr=o("convbert"),Mmr=o(" \u2014 "),WO=a("a"),Emr=o("TFConvBertForSequenceClassification"),ymr=o(" (ConvBERT model)"),wmr=l(),ST=a("li"),eue=a("strong"),Amr=o("ctrl"),Lmr=o(" \u2014 "),QO=a("a"),Bmr=o("TFCTRLForSequenceClassification"),xmr=o(" (CTRL model)"),kmr=l(),PT=a("li"),oue=a("strong"),Rmr=o("deberta"),Smr=o(" \u2014 "),HO=a("a"),Pmr=o("TFDebertaForSequenceClassification"),$mr=o(" (DeBERTa model)"),Imr=l(),$T=a("li"),rue=a("strong"),jmr=o("deberta-v2"),Dmr=o(" \u2014 "),UO=a("a"),Nmr=o("TFDebertaV2ForSequenceClassification"),qmr=o(" (DeBERTa-v2 model)"),Gmr=l(),IT=a("li"),tue=a("strong"),Omr=o("distilbert"),Xmr=o(" \u2014 "),JO=a("a"),Vmr=o("TFDistilBertForSequenceClassification"),zmr=o(" (DistilBERT model)"),Wmr=l(),jT=a("li"),aue=a("strong"),Qmr=o("electra"),Hmr=o(" \u2014 "),YO=a("a"),Umr=o("TFElectraForSequenceClassification"),Jmr=o(" (ELECTRA model)"),Ymr=l(),DT=a("li"),nue=a("strong"),Kmr=o("flaubert"),Zmr=o(" \u2014 "),KO=a("a"),egr=o("TFFlaubertForSequenceClassification"),ogr=o(" (FlauBERT model)"),rgr=l(),NT=a("li"),sue=a("strong"),tgr=o("funnel"),agr=o(" \u2014 "),ZO=a("a"),ngr=o("TFFunnelForSequenceClassification"),sgr=o(" (Funnel Transformer model)"),lgr=l(),qT=a("li"),lue=a("strong"),igr=o("gpt2"),dgr=o(" \u2014 "),eX=a("a"),cgr=o("TFGPT2ForSequenceClassification"),fgr=o(" (OpenAI GPT-2 model)"),mgr=l(),GT=a("li"),iue=a("strong"),ggr=o("layoutlm"),hgr=o(" \u2014 "),oX=a("a"),pgr=o("TFLayoutLMForSequenceClassification"),_gr=o(" (LayoutLM model)"),ugr=l(),OT=a("li"),due=a("strong"),bgr=o("longformer"),vgr=o(" \u2014 "),rX=a("a"),Tgr=o("TFLongformerForSequenceClassification"),Fgr=o(" (Longformer model)"),Cgr=l(),XT=a("li"),cue=a("strong"),Mgr=o("mobilebert"),Egr=o(" \u2014 "),tX=a("a"),ygr=o("TFMobileBertForSequenceClassification"),wgr=o(" (MobileBERT model)"),Agr=l(),VT=a("li"),fue=a("strong"),Lgr=o("mpnet"),Bgr=o(" \u2014 "),aX=a("a"),xgr=o("TFMPNetForSequenceClassification"),kgr=o(" (MPNet model)"),Rgr=l(),zT=a("li"),mue=a("strong"),Sgr=o("openai-gpt"),Pgr=o(" \u2014 "),nX=a("a"),$gr=o("TFOpenAIGPTForSequenceClassification"),Igr=o(" (OpenAI GPT model)"),jgr=l(),WT=a("li"),gue=a("strong"),Dgr=o("rembert"),Ngr=o(" \u2014 "),sX=a("a"),qgr=o("TFRemBertForSequenceClassification"),Ggr=o(" (RemBERT model)"),Ogr=l(),QT=a("li"),hue=a("strong"),Xgr=o("roberta"),Vgr=o(" \u2014 "),lX=a("a"),zgr=o("TFRobertaForSequenceClassification"),Wgr=o(" (RoBERTa model)"),Qgr=l(),HT=a("li"),pue=a("strong"),Hgr=o("roformer"),Ugr=o(" \u2014 "),iX=a("a"),Jgr=o("TFRoFormerForSequenceClassification"),Ygr=o(" (RoFormer model)"),Kgr=l(),UT=a("li"),_ue=a("strong"),Zgr=o("tapas"),ehr=o(" \u2014 "),dX=a("a"),ohr=o("TFTapasForSequenceClassification"),rhr=o(" (TAPAS model)"),thr=l(),JT=a("li"),uue=a("strong"),ahr=o("transfo-xl"),nhr=o(" \u2014 "),cX=a("a"),shr=o("TFTransfoXLForSequenceClassification"),lhr=o(" (Transformer-XL model)"),ihr=l(),YT=a("li"),bue=a("strong"),dhr=o("xlm"),chr=o(" \u2014 "),fX=a("a"),fhr=o("TFXLMForSequenceClassification"),mhr=o(" (XLM model)"),ghr=l(),KT=a("li"),vue=a("strong"),hhr=o("xlm-roberta"),phr=o(" \u2014 "),mX=a("a"),_hr=o("TFXLMRobertaForSequenceClassification"),uhr=o(" (XLM-RoBERTa model)"),bhr=l(),ZT=a("li"),Tue=a("strong"),vhr=o("xlnet"),Thr=o(" \u2014 "),gX=a("a"),Fhr=o("TFXLNetForSequenceClassification"),Chr=o(" (XLNet model)"),Mhr=l(),Fue=a("p"),Ehr=o("Examples:"),yhr=l(),f(Hw.$$.fragment),nSe=l(),qc=a("h2"),e8=a("a"),Cue=a("span"),f(Uw.$$.fragment),whr=l(),Mue=a("span"),Ahr=o("TFAutoModelForMultipleChoice"),sSe=l(),Ar=a("div"),f(Jw.$$.fragment),Lhr=l(),Gc=a("p"),Bhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Eue=a("code"),xhr=o("from_pretrained()"),khr=o("class method or the "),yue=a("code"),Rhr=o("from_config()"),Shr=o(`class
method.`),Phr=l(),Yw=a("p"),$hr=o("This class cannot be instantiated directly using "),wue=a("code"),Ihr=o("__init__()"),jhr=o(" (throws an error)."),Dhr=l(),Ct=a("div"),f(Kw.$$.fragment),Nhr=l(),Aue=a("p"),qhr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ghr=l(),Oc=a("p"),Ohr=o(`Note:
Loading a model from its configuration file does `),Lue=a("strong"),Xhr=o("not"),Vhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bue=a("code"),zhr=o("from_pretrained()"),Whr=o("to load the model weights."),Qhr=l(),xue=a("p"),Hhr=o("Examples:"),Uhr=l(),f(Zw.$$.fragment),Jhr=l(),Fo=a("div"),f(eA.$$.fragment),Yhr=l(),kue=a("p"),Khr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Zhr=l(),An=a("p"),epr=o("The model class to instantiate is selected based on the "),Rue=a("code"),opr=o("model_type"),rpr=o(` property of the config object (either
passed as an argument or loaded from `),Sue=a("code"),tpr=o("pretrained_model_name_or_path"),apr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=a("code"),npr=o("pretrained_model_name_or_path"),spr=o(":"),lpr=l(),ae=a("ul"),o8=a("li"),$ue=a("strong"),ipr=o("albert"),dpr=o(" \u2014 "),hX=a("a"),cpr=o("TFAlbertForMultipleChoice"),fpr=o(" (ALBERT model)"),mpr=l(),r8=a("li"),Iue=a("strong"),gpr=o("bert"),hpr=o(" \u2014 "),pX=a("a"),ppr=o("TFBertForMultipleChoice"),_pr=o(" (BERT model)"),upr=l(),t8=a("li"),jue=a("strong"),bpr=o("camembert"),vpr=o(" \u2014 "),_X=a("a"),Tpr=o("TFCamembertForMultipleChoice"),Fpr=o(" (CamemBERT model)"),Cpr=l(),a8=a("li"),Due=a("strong"),Mpr=o("convbert"),Epr=o(" \u2014 "),uX=a("a"),ypr=o("TFConvBertForMultipleChoice"),wpr=o(" (ConvBERT model)"),Apr=l(),n8=a("li"),Nue=a("strong"),Lpr=o("distilbert"),Bpr=o(" \u2014 "),bX=a("a"),xpr=o("TFDistilBertForMultipleChoice"),kpr=o(" (DistilBERT model)"),Rpr=l(),s8=a("li"),que=a("strong"),Spr=o("electra"),Ppr=o(" \u2014 "),vX=a("a"),$pr=o("TFElectraForMultipleChoice"),Ipr=o(" (ELECTRA model)"),jpr=l(),l8=a("li"),Gue=a("strong"),Dpr=o("flaubert"),Npr=o(" \u2014 "),TX=a("a"),qpr=o("TFFlaubertForMultipleChoice"),Gpr=o(" (FlauBERT model)"),Opr=l(),i8=a("li"),Oue=a("strong"),Xpr=o("funnel"),Vpr=o(" \u2014 "),FX=a("a"),zpr=o("TFFunnelForMultipleChoice"),Wpr=o(" (Funnel Transformer model)"),Qpr=l(),d8=a("li"),Xue=a("strong"),Hpr=o("longformer"),Upr=o(" \u2014 "),CX=a("a"),Jpr=o("TFLongformerForMultipleChoice"),Ypr=o(" (Longformer model)"),Kpr=l(),c8=a("li"),Vue=a("strong"),Zpr=o("mobilebert"),e_r=o(" \u2014 "),MX=a("a"),o_r=o("TFMobileBertForMultipleChoice"),r_r=o(" (MobileBERT model)"),t_r=l(),f8=a("li"),zue=a("strong"),a_r=o("mpnet"),n_r=o(" \u2014 "),EX=a("a"),s_r=o("TFMPNetForMultipleChoice"),l_r=o(" (MPNet model)"),i_r=l(),m8=a("li"),Wue=a("strong"),d_r=o("rembert"),c_r=o(" \u2014 "),yX=a("a"),f_r=o("TFRemBertForMultipleChoice"),m_r=o(" (RemBERT model)"),g_r=l(),g8=a("li"),Que=a("strong"),h_r=o("roberta"),p_r=o(" \u2014 "),wX=a("a"),__r=o("TFRobertaForMultipleChoice"),u_r=o(" (RoBERTa model)"),b_r=l(),h8=a("li"),Hue=a("strong"),v_r=o("roformer"),T_r=o(" \u2014 "),AX=a("a"),F_r=o("TFRoFormerForMultipleChoice"),C_r=o(" (RoFormer model)"),M_r=l(),p8=a("li"),Uue=a("strong"),E_r=o("xlm"),y_r=o(" \u2014 "),LX=a("a"),w_r=o("TFXLMForMultipleChoice"),A_r=o(" (XLM model)"),L_r=l(),_8=a("li"),Jue=a("strong"),B_r=o("xlm-roberta"),x_r=o(" \u2014 "),BX=a("a"),k_r=o("TFXLMRobertaForMultipleChoice"),R_r=o(" (XLM-RoBERTa model)"),S_r=l(),u8=a("li"),Yue=a("strong"),P_r=o("xlnet"),$_r=o(" \u2014 "),xX=a("a"),I_r=o("TFXLNetForMultipleChoice"),j_r=o(" (XLNet model)"),D_r=l(),Kue=a("p"),N_r=o("Examples:"),q_r=l(),f(oA.$$.fragment),lSe=l(),Xc=a("h2"),b8=a("a"),Zue=a("span"),f(rA.$$.fragment),G_r=l(),e1e=a("span"),O_r=o("TFAutoModelForTableQuestionAnswering"),iSe=l(),Lr=a("div"),f(tA.$$.fragment),X_r=l(),Vc=a("p"),V_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),o1e=a("code"),z_r=o("from_pretrained()"),W_r=o("class method or the "),r1e=a("code"),Q_r=o("from_config()"),H_r=o(`class
method.`),U_r=l(),aA=a("p"),J_r=o("This class cannot be instantiated directly using "),t1e=a("code"),Y_r=o("__init__()"),K_r=o(" (throws an error)."),Z_r=l(),Mt=a("div"),f(nA.$$.fragment),eur=l(),a1e=a("p"),our=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rur=l(),zc=a("p"),tur=o(`Note:
Loading a model from its configuration file does `),n1e=a("strong"),aur=o("not"),nur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),s1e=a("code"),sur=o("from_pretrained()"),lur=o("to load the model weights."),iur=l(),l1e=a("p"),dur=o("Examples:"),cur=l(),f(sA.$$.fragment),fur=l(),Co=a("div"),f(lA.$$.fragment),mur=l(),i1e=a("p"),gur=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),hur=l(),Ln=a("p"),pur=o("The model class to instantiate is selected based on the "),d1e=a("code"),_ur=o("model_type"),uur=o(` property of the config object (either
passed as an argument or loaded from `),c1e=a("code"),bur=o("pretrained_model_name_or_path"),vur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f1e=a("code"),Tur=o("pretrained_model_name_or_path"),Fur=o(":"),Cur=l(),m1e=a("ul"),v8=a("li"),g1e=a("strong"),Mur=o("tapas"),Eur=o(" \u2014 "),kX=a("a"),yur=o("TFTapasForQuestionAnswering"),wur=o(" (TAPAS model)"),Aur=l(),h1e=a("p"),Lur=o("Examples:"),Bur=l(),f(iA.$$.fragment),dSe=l(),Wc=a("h2"),T8=a("a"),p1e=a("span"),f(dA.$$.fragment),xur=l(),_1e=a("span"),kur=o("TFAutoModelForTokenClassification"),cSe=l(),Br=a("div"),f(cA.$$.fragment),Rur=l(),Qc=a("p"),Sur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),u1e=a("code"),Pur=o("from_pretrained()"),$ur=o("class method or the "),b1e=a("code"),Iur=o("from_config()"),jur=o(`class
method.`),Dur=l(),fA=a("p"),Nur=o("This class cannot be instantiated directly using "),v1e=a("code"),qur=o("__init__()"),Gur=o(" (throws an error)."),Our=l(),Et=a("div"),f(mA.$$.fragment),Xur=l(),T1e=a("p"),Vur=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zur=l(),Hc=a("p"),Wur=o(`Note:
Loading a model from its configuration file does `),F1e=a("strong"),Qur=o("not"),Hur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),C1e=a("code"),Uur=o("from_pretrained()"),Jur=o("to load the model weights."),Yur=l(),M1e=a("p"),Kur=o("Examples:"),Zur=l(),f(gA.$$.fragment),e1r=l(),Mo=a("div"),f(hA.$$.fragment),o1r=l(),E1e=a("p"),r1r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),t1r=l(),Bn=a("p"),a1r=o("The model class to instantiate is selected based on the "),y1e=a("code"),n1r=o("model_type"),s1r=o(` property of the config object (either
passed as an argument or loaded from `),w1e=a("code"),l1r=o("pretrained_model_name_or_path"),i1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A1e=a("code"),d1r=o("pretrained_model_name_or_path"),c1r=o(":"),f1r=l(),Y=a("ul"),F8=a("li"),L1e=a("strong"),m1r=o("albert"),g1r=o(" \u2014 "),RX=a("a"),h1r=o("TFAlbertForTokenClassification"),p1r=o(" (ALBERT model)"),_1r=l(),C8=a("li"),B1e=a("strong"),u1r=o("bert"),b1r=o(" \u2014 "),SX=a("a"),v1r=o("TFBertForTokenClassification"),T1r=o(" (BERT model)"),F1r=l(),M8=a("li"),x1e=a("strong"),C1r=o("camembert"),M1r=o(" \u2014 "),PX=a("a"),E1r=o("TFCamembertForTokenClassification"),y1r=o(" (CamemBERT model)"),w1r=l(),E8=a("li"),k1e=a("strong"),A1r=o("convbert"),L1r=o(" \u2014 "),$X=a("a"),B1r=o("TFConvBertForTokenClassification"),x1r=o(" (ConvBERT model)"),k1r=l(),y8=a("li"),R1e=a("strong"),R1r=o("deberta"),S1r=o(" \u2014 "),IX=a("a"),P1r=o("TFDebertaForTokenClassification"),$1r=o(" (DeBERTa model)"),I1r=l(),w8=a("li"),S1e=a("strong"),j1r=o("deberta-v2"),D1r=o(" \u2014 "),jX=a("a"),N1r=o("TFDebertaV2ForTokenClassification"),q1r=o(" (DeBERTa-v2 model)"),G1r=l(),A8=a("li"),P1e=a("strong"),O1r=o("distilbert"),X1r=o(" \u2014 "),DX=a("a"),V1r=o("TFDistilBertForTokenClassification"),z1r=o(" (DistilBERT model)"),W1r=l(),L8=a("li"),$1e=a("strong"),Q1r=o("electra"),H1r=o(" \u2014 "),NX=a("a"),U1r=o("TFElectraForTokenClassification"),J1r=o(" (ELECTRA model)"),Y1r=l(),B8=a("li"),I1e=a("strong"),K1r=o("flaubert"),Z1r=o(" \u2014 "),qX=a("a"),ebr=o("TFFlaubertForTokenClassification"),obr=o(" (FlauBERT model)"),rbr=l(),x8=a("li"),j1e=a("strong"),tbr=o("funnel"),abr=o(" \u2014 "),GX=a("a"),nbr=o("TFFunnelForTokenClassification"),sbr=o(" (Funnel Transformer model)"),lbr=l(),k8=a("li"),D1e=a("strong"),ibr=o("layoutlm"),dbr=o(" \u2014 "),OX=a("a"),cbr=o("TFLayoutLMForTokenClassification"),fbr=o(" (LayoutLM model)"),mbr=l(),R8=a("li"),N1e=a("strong"),gbr=o("longformer"),hbr=o(" \u2014 "),XX=a("a"),pbr=o("TFLongformerForTokenClassification"),_br=o(" (Longformer model)"),ubr=l(),S8=a("li"),q1e=a("strong"),bbr=o("mobilebert"),vbr=o(" \u2014 "),VX=a("a"),Tbr=o("TFMobileBertForTokenClassification"),Fbr=o(" (MobileBERT model)"),Cbr=l(),P8=a("li"),G1e=a("strong"),Mbr=o("mpnet"),Ebr=o(" \u2014 "),zX=a("a"),ybr=o("TFMPNetForTokenClassification"),wbr=o(" (MPNet model)"),Abr=l(),$8=a("li"),O1e=a("strong"),Lbr=o("rembert"),Bbr=o(" \u2014 "),WX=a("a"),xbr=o("TFRemBertForTokenClassification"),kbr=o(" (RemBERT model)"),Rbr=l(),I8=a("li"),X1e=a("strong"),Sbr=o("roberta"),Pbr=o(" \u2014 "),QX=a("a"),$br=o("TFRobertaForTokenClassification"),Ibr=o(" (RoBERTa model)"),jbr=l(),j8=a("li"),V1e=a("strong"),Dbr=o("roformer"),Nbr=o(" \u2014 "),HX=a("a"),qbr=o("TFRoFormerForTokenClassification"),Gbr=o(" (RoFormer model)"),Obr=l(),D8=a("li"),z1e=a("strong"),Xbr=o("xlm"),Vbr=o(" \u2014 "),UX=a("a"),zbr=o("TFXLMForTokenClassification"),Wbr=o(" (XLM model)"),Qbr=l(),N8=a("li"),W1e=a("strong"),Hbr=o("xlm-roberta"),Ubr=o(" \u2014 "),JX=a("a"),Jbr=o("TFXLMRobertaForTokenClassification"),Ybr=o(" (XLM-RoBERTa model)"),Kbr=l(),q8=a("li"),Q1e=a("strong"),Zbr=o("xlnet"),e5r=o(" \u2014 "),YX=a("a"),o5r=o("TFXLNetForTokenClassification"),r5r=o(" (XLNet model)"),t5r=l(),H1e=a("p"),a5r=o("Examples:"),n5r=l(),f(pA.$$.fragment),fSe=l(),Uc=a("h2"),G8=a("a"),U1e=a("span"),f(_A.$$.fragment),s5r=l(),J1e=a("span"),l5r=o("TFAutoModelForQuestionAnswering"),mSe=l(),xr=a("div"),f(uA.$$.fragment),i5r=l(),Jc=a("p"),d5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Y1e=a("code"),c5r=o("from_pretrained()"),f5r=o("class method or the "),K1e=a("code"),m5r=o("from_config()"),g5r=o(`class
method.`),h5r=l(),bA=a("p"),p5r=o("This class cannot be instantiated directly using "),Z1e=a("code"),_5r=o("__init__()"),u5r=o(" (throws an error)."),b5r=l(),yt=a("div"),f(vA.$$.fragment),v5r=l(),ebe=a("p"),T5r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),F5r=l(),Yc=a("p"),C5r=o(`Note:
Loading a model from its configuration file does `),obe=a("strong"),M5r=o("not"),E5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rbe=a("code"),y5r=o("from_pretrained()"),w5r=o("to load the model weights."),A5r=l(),tbe=a("p"),L5r=o("Examples:"),B5r=l(),f(TA.$$.fragment),x5r=l(),Eo=a("div"),f(FA.$$.fragment),k5r=l(),abe=a("p"),R5r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),S5r=l(),xn=a("p"),P5r=o("The model class to instantiate is selected based on the "),nbe=a("code"),$5r=o("model_type"),I5r=o(` property of the config object (either
passed as an argument or loaded from `),sbe=a("code"),j5r=o("pretrained_model_name_or_path"),D5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=a("code"),N5r=o("pretrained_model_name_or_path"),q5r=o(":"),G5r=l(),Z=a("ul"),O8=a("li"),ibe=a("strong"),O5r=o("albert"),X5r=o(" \u2014 "),KX=a("a"),V5r=o("TFAlbertForQuestionAnswering"),z5r=o(" (ALBERT model)"),W5r=l(),X8=a("li"),dbe=a("strong"),Q5r=o("bert"),H5r=o(" \u2014 "),ZX=a("a"),U5r=o("TFBertForQuestionAnswering"),J5r=o(" (BERT model)"),Y5r=l(),V8=a("li"),cbe=a("strong"),K5r=o("camembert"),Z5r=o(" \u2014 "),eV=a("a"),e2r=o("TFCamembertForQuestionAnswering"),o2r=o(" (CamemBERT model)"),r2r=l(),z8=a("li"),fbe=a("strong"),t2r=o("convbert"),a2r=o(" \u2014 "),oV=a("a"),n2r=o("TFConvBertForQuestionAnswering"),s2r=o(" (ConvBERT model)"),l2r=l(),W8=a("li"),mbe=a("strong"),i2r=o("deberta"),d2r=o(" \u2014 "),rV=a("a"),c2r=o("TFDebertaForQuestionAnswering"),f2r=o(" (DeBERTa model)"),m2r=l(),Q8=a("li"),gbe=a("strong"),g2r=o("deberta-v2"),h2r=o(" \u2014 "),tV=a("a"),p2r=o("TFDebertaV2ForQuestionAnswering"),_2r=o(" (DeBERTa-v2 model)"),u2r=l(),H8=a("li"),hbe=a("strong"),b2r=o("distilbert"),v2r=o(" \u2014 "),aV=a("a"),T2r=o("TFDistilBertForQuestionAnswering"),F2r=o(" (DistilBERT model)"),C2r=l(),U8=a("li"),pbe=a("strong"),M2r=o("electra"),E2r=o(" \u2014 "),nV=a("a"),y2r=o("TFElectraForQuestionAnswering"),w2r=o(" (ELECTRA model)"),A2r=l(),J8=a("li"),_be=a("strong"),L2r=o("flaubert"),B2r=o(" \u2014 "),sV=a("a"),x2r=o("TFFlaubertForQuestionAnsweringSimple"),k2r=o(" (FlauBERT model)"),R2r=l(),Y8=a("li"),ube=a("strong"),S2r=o("funnel"),P2r=o(" \u2014 "),lV=a("a"),$2r=o("TFFunnelForQuestionAnswering"),I2r=o(" (Funnel Transformer model)"),j2r=l(),K8=a("li"),bbe=a("strong"),D2r=o("longformer"),N2r=o(" \u2014 "),iV=a("a"),q2r=o("TFLongformerForQuestionAnswering"),G2r=o(" (Longformer model)"),O2r=l(),Z8=a("li"),vbe=a("strong"),X2r=o("mobilebert"),V2r=o(" \u2014 "),dV=a("a"),z2r=o("TFMobileBertForQuestionAnswering"),W2r=o(" (MobileBERT model)"),Q2r=l(),eF=a("li"),Tbe=a("strong"),H2r=o("mpnet"),U2r=o(" \u2014 "),cV=a("a"),J2r=o("TFMPNetForQuestionAnswering"),Y2r=o(" (MPNet model)"),K2r=l(),oF=a("li"),Fbe=a("strong"),Z2r=o("rembert"),evr=o(" \u2014 "),fV=a("a"),ovr=o("TFRemBertForQuestionAnswering"),rvr=o(" (RemBERT model)"),tvr=l(),rF=a("li"),Cbe=a("strong"),avr=o("roberta"),nvr=o(" \u2014 "),mV=a("a"),svr=o("TFRobertaForQuestionAnswering"),lvr=o(" (RoBERTa model)"),ivr=l(),tF=a("li"),Mbe=a("strong"),dvr=o("roformer"),cvr=o(" \u2014 "),gV=a("a"),fvr=o("TFRoFormerForQuestionAnswering"),mvr=o(" (RoFormer model)"),gvr=l(),aF=a("li"),Ebe=a("strong"),hvr=o("xlm"),pvr=o(" \u2014 "),hV=a("a"),_vr=o("TFXLMForQuestionAnsweringSimple"),uvr=o(" (XLM model)"),bvr=l(),nF=a("li"),ybe=a("strong"),vvr=o("xlm-roberta"),Tvr=o(" \u2014 "),pV=a("a"),Fvr=o("TFXLMRobertaForQuestionAnswering"),Cvr=o(" (XLM-RoBERTa model)"),Mvr=l(),sF=a("li"),wbe=a("strong"),Evr=o("xlnet"),yvr=o(" \u2014 "),_V=a("a"),wvr=o("TFXLNetForQuestionAnsweringSimple"),Avr=o(" (XLNet model)"),Lvr=l(),Abe=a("p"),Bvr=o("Examples:"),xvr=l(),f(CA.$$.fragment),gSe=l(),Kc=a("h2"),lF=a("a"),Lbe=a("span"),f(MA.$$.fragment),kvr=l(),Bbe=a("span"),Rvr=o("TFAutoModelForVision2Seq"),hSe=l(),kr=a("div"),f(EA.$$.fragment),Svr=l(),Zc=a("p"),Pvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),xbe=a("code"),$vr=o("from_pretrained()"),Ivr=o("class method or the "),kbe=a("code"),jvr=o("from_config()"),Dvr=o(`class
method.`),Nvr=l(),yA=a("p"),qvr=o("This class cannot be instantiated directly using "),Rbe=a("code"),Gvr=o("__init__()"),Ovr=o(" (throws an error)."),Xvr=l(),wt=a("div"),f(wA.$$.fragment),Vvr=l(),Sbe=a("p"),zvr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Wvr=l(),ef=a("p"),Qvr=o(`Note:
Loading a model from its configuration file does `),Pbe=a("strong"),Hvr=o("not"),Uvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$be=a("code"),Jvr=o("from_pretrained()"),Yvr=o("to load the model weights."),Kvr=l(),Ibe=a("p"),Zvr=o("Examples:"),e6r=l(),f(AA.$$.fragment),o6r=l(),yo=a("div"),f(LA.$$.fragment),r6r=l(),jbe=a("p"),t6r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),a6r=l(),kn=a("p"),n6r=o("The model class to instantiate is selected based on the "),Dbe=a("code"),s6r=o("model_type"),l6r=o(` property of the config object (either
passed as an argument or loaded from `),Nbe=a("code"),i6r=o("pretrained_model_name_or_path"),d6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qbe=a("code"),c6r=o("pretrained_model_name_or_path"),f6r=o(":"),m6r=l(),Gbe=a("ul"),iF=a("li"),Obe=a("strong"),g6r=o("vision-encoder-decoder"),h6r=o(" \u2014 "),uV=a("a"),p6r=o("TFVisionEncoderDecoderModel"),_6r=o(" (Vision Encoder decoder model)"),u6r=l(),Xbe=a("p"),b6r=o("Examples:"),v6r=l(),f(BA.$$.fragment),pSe=l(),of=a("h2"),dF=a("a"),Vbe=a("span"),f(xA.$$.fragment),T6r=l(),zbe=a("span"),F6r=o("TFAutoModelForSpeechSeq2Seq"),_Se=l(),Rr=a("div"),f(kA.$$.fragment),C6r=l(),rf=a("p"),M6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Wbe=a("code"),E6r=o("from_pretrained()"),y6r=o("class method or the "),Qbe=a("code"),w6r=o("from_config()"),A6r=o(`class
method.`),L6r=l(),RA=a("p"),B6r=o("This class cannot be instantiated directly using "),Hbe=a("code"),x6r=o("__init__()"),k6r=o(" (throws an error)."),R6r=l(),At=a("div"),f(SA.$$.fragment),S6r=l(),Ube=a("p"),P6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),$6r=l(),tf=a("p"),I6r=o(`Note:
Loading a model from its configuration file does `),Jbe=a("strong"),j6r=o("not"),D6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ybe=a("code"),N6r=o("from_pretrained()"),q6r=o("to load the model weights."),G6r=l(),Kbe=a("p"),O6r=o("Examples:"),X6r=l(),f(PA.$$.fragment),V6r=l(),wo=a("div"),f($A.$$.fragment),z6r=l(),Zbe=a("p"),W6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Q6r=l(),Rn=a("p"),H6r=o("The model class to instantiate is selected based on the "),e5e=a("code"),U6r=o("model_type"),J6r=o(` property of the config object (either
passed as an argument or loaded from `),o5e=a("code"),Y6r=o("pretrained_model_name_or_path"),K6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r5e=a("code"),Z6r=o("pretrained_model_name_or_path"),e0r=o(":"),o0r=l(),t5e=a("ul"),cF=a("li"),a5e=a("strong"),r0r=o("speech_to_text"),t0r=o(" \u2014 "),bV=a("a"),a0r=o("TFSpeech2TextForConditionalGeneration"),n0r=o(" (Speech2Text model)"),s0r=l(),n5e=a("p"),l0r=o("Examples:"),i0r=l(),f(IA.$$.fragment),uSe=l(),af=a("h2"),fF=a("a"),s5e=a("span"),f(jA.$$.fragment),d0r=l(),l5e=a("span"),c0r=o("FlaxAutoModel"),bSe=l(),Sr=a("div"),f(DA.$$.fragment),f0r=l(),nf=a("p"),m0r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),i5e=a("code"),g0r=o("from_pretrained()"),h0r=o("class method or the "),d5e=a("code"),p0r=o("from_config()"),_0r=o(`class
method.`),u0r=l(),NA=a("p"),b0r=o("This class cannot be instantiated directly using "),c5e=a("code"),v0r=o("__init__()"),T0r=o(" (throws an error)."),F0r=l(),Lt=a("div"),f(qA.$$.fragment),C0r=l(),f5e=a("p"),M0r=o("Instantiates one of the base model classes of the library from a configuration."),E0r=l(),sf=a("p"),y0r=o(`Note:
Loading a model from its configuration file does `),m5e=a("strong"),w0r=o("not"),A0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),g5e=a("code"),L0r=o("from_pretrained()"),B0r=o("to load the model weights."),x0r=l(),h5e=a("p"),k0r=o("Examples:"),R0r=l(),f(GA.$$.fragment),S0r=l(),Ao=a("div"),f(OA.$$.fragment),P0r=l(),p5e=a("p"),$0r=o("Instantiate one of the base model classes of the library from a pretrained model."),I0r=l(),Sn=a("p"),j0r=o("The model class to instantiate is selected based on the "),_5e=a("code"),D0r=o("model_type"),N0r=o(` property of the config object (either
passed as an argument or loaded from `),u5e=a("code"),q0r=o("pretrained_model_name_or_path"),G0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b5e=a("code"),O0r=o("pretrained_model_name_or_path"),X0r=o(":"),V0r=l(),z=a("ul"),mF=a("li"),v5e=a("strong"),z0r=o("albert"),W0r=o(" \u2014 "),vV=a("a"),Q0r=o("FlaxAlbertModel"),H0r=o(" (ALBERT model)"),U0r=l(),gF=a("li"),T5e=a("strong"),J0r=o("bart"),Y0r=o(" \u2014 "),TV=a("a"),K0r=o("FlaxBartModel"),Z0r=o(" (BART model)"),eTr=l(),hF=a("li"),F5e=a("strong"),oTr=o("beit"),rTr=o(" \u2014 "),FV=a("a"),tTr=o("FlaxBeitModel"),aTr=o(" (BEiT model)"),nTr=l(),pF=a("li"),C5e=a("strong"),sTr=o("bert"),lTr=o(" \u2014 "),CV=a("a"),iTr=o("FlaxBertModel"),dTr=o(" (BERT model)"),cTr=l(),_F=a("li"),M5e=a("strong"),fTr=o("big_bird"),mTr=o(" \u2014 "),MV=a("a"),gTr=o("FlaxBigBirdModel"),hTr=o(" (BigBird model)"),pTr=l(),uF=a("li"),E5e=a("strong"),_Tr=o("blenderbot"),uTr=o(" \u2014 "),EV=a("a"),bTr=o("FlaxBlenderbotModel"),vTr=o(" (Blenderbot model)"),TTr=l(),bF=a("li"),y5e=a("strong"),FTr=o("blenderbot-small"),CTr=o(" \u2014 "),yV=a("a"),MTr=o("FlaxBlenderbotSmallModel"),ETr=o(" (BlenderbotSmall model)"),yTr=l(),vF=a("li"),w5e=a("strong"),wTr=o("clip"),ATr=o(" \u2014 "),wV=a("a"),LTr=o("FlaxCLIPModel"),BTr=o(" (CLIP model)"),xTr=l(),TF=a("li"),A5e=a("strong"),kTr=o("distilbert"),RTr=o(" \u2014 "),AV=a("a"),STr=o("FlaxDistilBertModel"),PTr=o(" (DistilBERT model)"),$Tr=l(),FF=a("li"),L5e=a("strong"),ITr=o("electra"),jTr=o(" \u2014 "),LV=a("a"),DTr=o("FlaxElectraModel"),NTr=o(" (ELECTRA model)"),qTr=l(),CF=a("li"),B5e=a("strong"),GTr=o("gpt2"),OTr=o(" \u2014 "),BV=a("a"),XTr=o("FlaxGPT2Model"),VTr=o(" (OpenAI GPT-2 model)"),zTr=l(),MF=a("li"),x5e=a("strong"),WTr=o("gpt_neo"),QTr=o(" \u2014 "),xV=a("a"),HTr=o("FlaxGPTNeoModel"),UTr=o(" (GPT Neo model)"),JTr=l(),EF=a("li"),k5e=a("strong"),YTr=o("gptj"),KTr=o(" \u2014 "),kV=a("a"),ZTr=o("FlaxGPTJModel"),e8r=o(" (GPT-J model)"),o8r=l(),yF=a("li"),R5e=a("strong"),r8r=o("marian"),t8r=o(" \u2014 "),RV=a("a"),a8r=o("FlaxMarianModel"),n8r=o(" (Marian model)"),s8r=l(),wF=a("li"),S5e=a("strong"),l8r=o("mbart"),i8r=o(" \u2014 "),SV=a("a"),d8r=o("FlaxMBartModel"),c8r=o(" (mBART model)"),f8r=l(),AF=a("li"),P5e=a("strong"),m8r=o("mt5"),g8r=o(" \u2014 "),PV=a("a"),h8r=o("FlaxMT5Model"),p8r=o(" (mT5 model)"),_8r=l(),LF=a("li"),$5e=a("strong"),u8r=o("pegasus"),b8r=o(" \u2014 "),$V=a("a"),v8r=o("FlaxPegasusModel"),T8r=o(" (Pegasus model)"),F8r=l(),BF=a("li"),I5e=a("strong"),C8r=o("roberta"),M8r=o(" \u2014 "),IV=a("a"),E8r=o("FlaxRobertaModel"),y8r=o(" (RoBERTa model)"),w8r=l(),xF=a("li"),j5e=a("strong"),A8r=o("roformer"),L8r=o(" \u2014 "),jV=a("a"),B8r=o("FlaxRoFormerModel"),x8r=o(" (RoFormer model)"),k8r=l(),kF=a("li"),D5e=a("strong"),R8r=o("t5"),S8r=o(" \u2014 "),DV=a("a"),P8r=o("FlaxT5Model"),$8r=o(" (T5 model)"),I8r=l(),RF=a("li"),N5e=a("strong"),j8r=o("vision-text-dual-encoder"),D8r=o(" \u2014 "),NV=a("a"),N8r=o("FlaxVisionTextDualEncoderModel"),q8r=o(" (VisionTextDualEncoder model)"),G8r=l(),SF=a("li"),q5e=a("strong"),O8r=o("vit"),X8r=o(" \u2014 "),qV=a("a"),V8r=o("FlaxViTModel"),z8r=o(" (ViT model)"),W8r=l(),PF=a("li"),G5e=a("strong"),Q8r=o("wav2vec2"),H8r=o(" \u2014 "),GV=a("a"),U8r=o("FlaxWav2Vec2Model"),J8r=o(" (Wav2Vec2 model)"),Y8r=l(),$F=a("li"),O5e=a("strong"),K8r=o("xglm"),Z8r=o(" \u2014 "),OV=a("a"),eFr=o("FlaxXGLMModel"),oFr=o(" (XGLM model)"),rFr=l(),IF=a("li"),X5e=a("strong"),tFr=o("xlm-roberta"),aFr=o(" \u2014 "),XV=a("a"),nFr=o("FlaxXLMRobertaModel"),sFr=o(" (XLM-RoBERTa model)"),lFr=l(),V5e=a("p"),iFr=o("Examples:"),dFr=l(),f(XA.$$.fragment),vSe=l(),lf=a("h2"),jF=a("a"),z5e=a("span"),f(VA.$$.fragment),cFr=l(),W5e=a("span"),fFr=o("FlaxAutoModelForCausalLM"),TSe=l(),Pr=a("div"),f(zA.$$.fragment),mFr=l(),df=a("p"),gFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Q5e=a("code"),hFr=o("from_pretrained()"),pFr=o("class method or the "),H5e=a("code"),_Fr=o("from_config()"),uFr=o(`class
method.`),bFr=l(),WA=a("p"),vFr=o("This class cannot be instantiated directly using "),U5e=a("code"),TFr=o("__init__()"),FFr=o(" (throws an error)."),CFr=l(),Bt=a("div"),f(QA.$$.fragment),MFr=l(),J5e=a("p"),EFr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yFr=l(),cf=a("p"),wFr=o(`Note:
Loading a model from its configuration file does `),Y5e=a("strong"),AFr=o("not"),LFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),K5e=a("code"),BFr=o("from_pretrained()"),xFr=o("to load the model weights."),kFr=l(),Z5e=a("p"),RFr=o("Examples:"),SFr=l(),f(HA.$$.fragment),PFr=l(),Lo=a("div"),f(UA.$$.fragment),$Fr=l(),e2e=a("p"),IFr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jFr=l(),Pn=a("p"),DFr=o("The model class to instantiate is selected based on the "),o2e=a("code"),NFr=o("model_type"),qFr=o(` property of the config object (either
passed as an argument or loaded from `),r2e=a("code"),GFr=o("pretrained_model_name_or_path"),OFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t2e=a("code"),XFr=o("pretrained_model_name_or_path"),VFr=o(":"),zFr=l(),ga=a("ul"),DF=a("li"),a2e=a("strong"),WFr=o("bart"),QFr=o(" \u2014 "),VV=a("a"),HFr=o("FlaxBartForCausalLM"),UFr=o(" (BART model)"),JFr=l(),NF=a("li"),n2e=a("strong"),YFr=o("gpt2"),KFr=o(" \u2014 "),zV=a("a"),ZFr=o("FlaxGPT2LMHeadModel"),eCr=o(" (OpenAI GPT-2 model)"),oCr=l(),qF=a("li"),s2e=a("strong"),rCr=o("gpt_neo"),tCr=o(" \u2014 "),WV=a("a"),aCr=o("FlaxGPTNeoForCausalLM"),nCr=o(" (GPT Neo model)"),sCr=l(),GF=a("li"),l2e=a("strong"),lCr=o("gptj"),iCr=o(" \u2014 "),QV=a("a"),dCr=o("FlaxGPTJForCausalLM"),cCr=o(" (GPT-J model)"),fCr=l(),OF=a("li"),i2e=a("strong"),mCr=o("xglm"),gCr=o(" \u2014 "),HV=a("a"),hCr=o("FlaxXGLMForCausalLM"),pCr=o(" (XGLM model)"),_Cr=l(),d2e=a("p"),uCr=o("Examples:"),bCr=l(),f(JA.$$.fragment),FSe=l(),ff=a("h2"),XF=a("a"),c2e=a("span"),f(YA.$$.fragment),vCr=l(),f2e=a("span"),TCr=o("FlaxAutoModelForPreTraining"),CSe=l(),$r=a("div"),f(KA.$$.fragment),FCr=l(),mf=a("p"),CCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),m2e=a("code"),MCr=o("from_pretrained()"),ECr=o("class method or the "),g2e=a("code"),yCr=o("from_config()"),wCr=o(`class
method.`),ACr=l(),ZA=a("p"),LCr=o("This class cannot be instantiated directly using "),h2e=a("code"),BCr=o("__init__()"),xCr=o(" (throws an error)."),kCr=l(),xt=a("div"),f(eL.$$.fragment),RCr=l(),p2e=a("p"),SCr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),PCr=l(),gf=a("p"),$Cr=o(`Note:
Loading a model from its configuration file does `),_2e=a("strong"),ICr=o("not"),jCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),u2e=a("code"),DCr=o("from_pretrained()"),NCr=o("to load the model weights."),qCr=l(),b2e=a("p"),GCr=o("Examples:"),OCr=l(),f(oL.$$.fragment),XCr=l(),Bo=a("div"),f(rL.$$.fragment),VCr=l(),v2e=a("p"),zCr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),WCr=l(),$n=a("p"),QCr=o("The model class to instantiate is selected based on the "),T2e=a("code"),HCr=o("model_type"),UCr=o(` property of the config object (either
passed as an argument or loaded from `),F2e=a("code"),JCr=o("pretrained_model_name_or_path"),YCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=a("code"),KCr=o("pretrained_model_name_or_path"),ZCr=o(":"),eMr=l(),ce=a("ul"),VF=a("li"),M2e=a("strong"),oMr=o("albert"),rMr=o(" \u2014 "),UV=a("a"),tMr=o("FlaxAlbertForPreTraining"),aMr=o(" (ALBERT model)"),nMr=l(),zF=a("li"),E2e=a("strong"),sMr=o("bart"),lMr=o(" \u2014 "),JV=a("a"),iMr=o("FlaxBartForConditionalGeneration"),dMr=o(" (BART model)"),cMr=l(),WF=a("li"),y2e=a("strong"),fMr=o("bert"),mMr=o(" \u2014 "),YV=a("a"),gMr=o("FlaxBertForPreTraining"),hMr=o(" (BERT model)"),pMr=l(),QF=a("li"),w2e=a("strong"),_Mr=o("big_bird"),uMr=o(" \u2014 "),KV=a("a"),bMr=o("FlaxBigBirdForPreTraining"),vMr=o(" (BigBird model)"),TMr=l(),HF=a("li"),A2e=a("strong"),FMr=o("electra"),CMr=o(" \u2014 "),ZV=a("a"),MMr=o("FlaxElectraForPreTraining"),EMr=o(" (ELECTRA model)"),yMr=l(),UF=a("li"),L2e=a("strong"),wMr=o("mbart"),AMr=o(" \u2014 "),ez=a("a"),LMr=o("FlaxMBartForConditionalGeneration"),BMr=o(" (mBART model)"),xMr=l(),JF=a("li"),B2e=a("strong"),kMr=o("mt5"),RMr=o(" \u2014 "),oz=a("a"),SMr=o("FlaxMT5ForConditionalGeneration"),PMr=o(" (mT5 model)"),$Mr=l(),YF=a("li"),x2e=a("strong"),IMr=o("roberta"),jMr=o(" \u2014 "),rz=a("a"),DMr=o("FlaxRobertaForMaskedLM"),NMr=o(" (RoBERTa model)"),qMr=l(),KF=a("li"),k2e=a("strong"),GMr=o("roformer"),OMr=o(" \u2014 "),tz=a("a"),XMr=o("FlaxRoFormerForMaskedLM"),VMr=o(" (RoFormer model)"),zMr=l(),ZF=a("li"),R2e=a("strong"),WMr=o("t5"),QMr=o(" \u2014 "),az=a("a"),HMr=o("FlaxT5ForConditionalGeneration"),UMr=o(" (T5 model)"),JMr=l(),eC=a("li"),S2e=a("strong"),YMr=o("wav2vec2"),KMr=o(" \u2014 "),nz=a("a"),ZMr=o("FlaxWav2Vec2ForPreTraining"),e4r=o(" (Wav2Vec2 model)"),o4r=l(),oC=a("li"),P2e=a("strong"),r4r=o("xlm-roberta"),t4r=o(" \u2014 "),sz=a("a"),a4r=o("FlaxXLMRobertaForMaskedLM"),n4r=o(" (XLM-RoBERTa model)"),s4r=l(),$2e=a("p"),l4r=o("Examples:"),i4r=l(),f(tL.$$.fragment),MSe=l(),hf=a("h2"),rC=a("a"),I2e=a("span"),f(aL.$$.fragment),d4r=l(),j2e=a("span"),c4r=o("FlaxAutoModelForMaskedLM"),ESe=l(),Ir=a("div"),f(nL.$$.fragment),f4r=l(),pf=a("p"),m4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),D2e=a("code"),g4r=o("from_pretrained()"),h4r=o("class method or the "),N2e=a("code"),p4r=o("from_config()"),_4r=o(`class
method.`),u4r=l(),sL=a("p"),b4r=o("This class cannot be instantiated directly using "),q2e=a("code"),v4r=o("__init__()"),T4r=o(" (throws an error)."),F4r=l(),kt=a("div"),f(lL.$$.fragment),C4r=l(),G2e=a("p"),M4r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),E4r=l(),_f=a("p"),y4r=o(`Note:
Loading a model from its configuration file does `),O2e=a("strong"),w4r=o("not"),A4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),X2e=a("code"),L4r=o("from_pretrained()"),B4r=o("to load the model weights."),x4r=l(),V2e=a("p"),k4r=o("Examples:"),R4r=l(),f(iL.$$.fragment),S4r=l(),xo=a("div"),f(dL.$$.fragment),P4r=l(),z2e=a("p"),$4r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),I4r=l(),In=a("p"),j4r=o("The model class to instantiate is selected based on the "),W2e=a("code"),D4r=o("model_type"),N4r=o(` property of the config object (either
passed as an argument or loaded from `),Q2e=a("code"),q4r=o("pretrained_model_name_or_path"),G4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H2e=a("code"),O4r=o("pretrained_model_name_or_path"),X4r=o(":"),V4r=l(),ue=a("ul"),tC=a("li"),U2e=a("strong"),z4r=o("albert"),W4r=o(" \u2014 "),lz=a("a"),Q4r=o("FlaxAlbertForMaskedLM"),H4r=o(" (ALBERT model)"),U4r=l(),aC=a("li"),J2e=a("strong"),J4r=o("bart"),Y4r=o(" \u2014 "),iz=a("a"),K4r=o("FlaxBartForConditionalGeneration"),Z4r=o(" (BART model)"),eEr=l(),nC=a("li"),Y2e=a("strong"),oEr=o("bert"),rEr=o(" \u2014 "),dz=a("a"),tEr=o("FlaxBertForMaskedLM"),aEr=o(" (BERT model)"),nEr=l(),sC=a("li"),K2e=a("strong"),sEr=o("big_bird"),lEr=o(" \u2014 "),cz=a("a"),iEr=o("FlaxBigBirdForMaskedLM"),dEr=o(" (BigBird model)"),cEr=l(),lC=a("li"),Z2e=a("strong"),fEr=o("distilbert"),mEr=o(" \u2014 "),fz=a("a"),gEr=o("FlaxDistilBertForMaskedLM"),hEr=o(" (DistilBERT model)"),pEr=l(),iC=a("li"),eve=a("strong"),_Er=o("electra"),uEr=o(" \u2014 "),mz=a("a"),bEr=o("FlaxElectraForMaskedLM"),vEr=o(" (ELECTRA model)"),TEr=l(),dC=a("li"),ove=a("strong"),FEr=o("mbart"),CEr=o(" \u2014 "),gz=a("a"),MEr=o("FlaxMBartForConditionalGeneration"),EEr=o(" (mBART model)"),yEr=l(),cC=a("li"),rve=a("strong"),wEr=o("roberta"),AEr=o(" \u2014 "),hz=a("a"),LEr=o("FlaxRobertaForMaskedLM"),BEr=o(" (RoBERTa model)"),xEr=l(),fC=a("li"),tve=a("strong"),kEr=o("roformer"),REr=o(" \u2014 "),pz=a("a"),SEr=o("FlaxRoFormerForMaskedLM"),PEr=o(" (RoFormer model)"),$Er=l(),mC=a("li"),ave=a("strong"),IEr=o("xlm-roberta"),jEr=o(" \u2014 "),_z=a("a"),DEr=o("FlaxXLMRobertaForMaskedLM"),NEr=o(" (XLM-RoBERTa model)"),qEr=l(),nve=a("p"),GEr=o("Examples:"),OEr=l(),f(cL.$$.fragment),ySe=l(),uf=a("h2"),gC=a("a"),sve=a("span"),f(fL.$$.fragment),XEr=l(),lve=a("span"),VEr=o("FlaxAutoModelForSeq2SeqLM"),wSe=l(),jr=a("div"),f(mL.$$.fragment),zEr=l(),bf=a("p"),WEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ive=a("code"),QEr=o("from_pretrained()"),HEr=o("class method or the "),dve=a("code"),UEr=o("from_config()"),JEr=o(`class
method.`),YEr=l(),gL=a("p"),KEr=o("This class cannot be instantiated directly using "),cve=a("code"),ZEr=o("__init__()"),e3r=o(" (throws an error)."),o3r=l(),Rt=a("div"),f(hL.$$.fragment),r3r=l(),fve=a("p"),t3r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),a3r=l(),vf=a("p"),n3r=o(`Note:
Loading a model from its configuration file does `),mve=a("strong"),s3r=o("not"),l3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gve=a("code"),i3r=o("from_pretrained()"),d3r=o("to load the model weights."),c3r=l(),hve=a("p"),f3r=o("Examples:"),m3r=l(),f(pL.$$.fragment),g3r=l(),ko=a("div"),f(_L.$$.fragment),h3r=l(),pve=a("p"),p3r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_3r=l(),jn=a("p"),u3r=o("The model class to instantiate is selected based on the "),_ve=a("code"),b3r=o("model_type"),v3r=o(` property of the config object (either
passed as an argument or loaded from `),uve=a("code"),T3r=o("pretrained_model_name_or_path"),F3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=a("code"),C3r=o("pretrained_model_name_or_path"),M3r=o(":"),E3r=l(),Me=a("ul"),hC=a("li"),vve=a("strong"),y3r=o("bart"),w3r=o(" \u2014 "),uz=a("a"),A3r=o("FlaxBartForConditionalGeneration"),L3r=o(" (BART model)"),B3r=l(),pC=a("li"),Tve=a("strong"),x3r=o("blenderbot"),k3r=o(" \u2014 "),bz=a("a"),R3r=o("FlaxBlenderbotForConditionalGeneration"),S3r=o(" (Blenderbot model)"),P3r=l(),_C=a("li"),Fve=a("strong"),$3r=o("blenderbot-small"),I3r=o(" \u2014 "),vz=a("a"),j3r=o("FlaxBlenderbotSmallForConditionalGeneration"),D3r=o(" (BlenderbotSmall model)"),N3r=l(),uC=a("li"),Cve=a("strong"),q3r=o("encoder-decoder"),G3r=o(" \u2014 "),Tz=a("a"),O3r=o("FlaxEncoderDecoderModel"),X3r=o(" (Encoder decoder model)"),V3r=l(),bC=a("li"),Mve=a("strong"),z3r=o("marian"),W3r=o(" \u2014 "),Fz=a("a"),Q3r=o("FlaxMarianMTModel"),H3r=o(" (Marian model)"),U3r=l(),vC=a("li"),Eve=a("strong"),J3r=o("mbart"),Y3r=o(" \u2014 "),Cz=a("a"),K3r=o("FlaxMBartForConditionalGeneration"),Z3r=o(" (mBART model)"),eyr=l(),TC=a("li"),yve=a("strong"),oyr=o("mt5"),ryr=o(" \u2014 "),Mz=a("a"),tyr=o("FlaxMT5ForConditionalGeneration"),ayr=o(" (mT5 model)"),nyr=l(),FC=a("li"),wve=a("strong"),syr=o("pegasus"),lyr=o(" \u2014 "),Ez=a("a"),iyr=o("FlaxPegasusForConditionalGeneration"),dyr=o(" (Pegasus model)"),cyr=l(),CC=a("li"),Ave=a("strong"),fyr=o("t5"),myr=o(" \u2014 "),yz=a("a"),gyr=o("FlaxT5ForConditionalGeneration"),hyr=o(" (T5 model)"),pyr=l(),Lve=a("p"),_yr=o("Examples:"),uyr=l(),f(uL.$$.fragment),ASe=l(),Tf=a("h2"),MC=a("a"),Bve=a("span"),f(bL.$$.fragment),byr=l(),xve=a("span"),vyr=o("FlaxAutoModelForSequenceClassification"),LSe=l(),Dr=a("div"),f(vL.$$.fragment),Tyr=l(),Ff=a("p"),Fyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kve=a("code"),Cyr=o("from_pretrained()"),Myr=o("class method or the "),Rve=a("code"),Eyr=o("from_config()"),yyr=o(`class
method.`),wyr=l(),TL=a("p"),Ayr=o("This class cannot be instantiated directly using "),Sve=a("code"),Lyr=o("__init__()"),Byr=o(" (throws an error)."),xyr=l(),St=a("div"),f(FL.$$.fragment),kyr=l(),Pve=a("p"),Ryr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Syr=l(),Cf=a("p"),Pyr=o(`Note:
Loading a model from its configuration file does `),$ve=a("strong"),$yr=o("not"),Iyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ive=a("code"),jyr=o("from_pretrained()"),Dyr=o("to load the model weights."),Nyr=l(),jve=a("p"),qyr=o("Examples:"),Gyr=l(),f(CL.$$.fragment),Oyr=l(),Ro=a("div"),f(ML.$$.fragment),Xyr=l(),Dve=a("p"),Vyr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),zyr=l(),Dn=a("p"),Wyr=o("The model class to instantiate is selected based on the "),Nve=a("code"),Qyr=o("model_type"),Hyr=o(` property of the config object (either
passed as an argument or loaded from `),qve=a("code"),Uyr=o("pretrained_model_name_or_path"),Jyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=a("code"),Yyr=o("pretrained_model_name_or_path"),Kyr=o(":"),Zyr=l(),be=a("ul"),EC=a("li"),Ove=a("strong"),ewr=o("albert"),owr=o(" \u2014 "),wz=a("a"),rwr=o("FlaxAlbertForSequenceClassification"),twr=o(" (ALBERT model)"),awr=l(),yC=a("li"),Xve=a("strong"),nwr=o("bart"),swr=o(" \u2014 "),Az=a("a"),lwr=o("FlaxBartForSequenceClassification"),iwr=o(" (BART model)"),dwr=l(),wC=a("li"),Vve=a("strong"),cwr=o("bert"),fwr=o(" \u2014 "),Lz=a("a"),mwr=o("FlaxBertForSequenceClassification"),gwr=o(" (BERT model)"),hwr=l(),AC=a("li"),zve=a("strong"),pwr=o("big_bird"),_wr=o(" \u2014 "),Bz=a("a"),uwr=o("FlaxBigBirdForSequenceClassification"),bwr=o(" (BigBird model)"),vwr=l(),LC=a("li"),Wve=a("strong"),Twr=o("distilbert"),Fwr=o(" \u2014 "),xz=a("a"),Cwr=o("FlaxDistilBertForSequenceClassification"),Mwr=o(" (DistilBERT model)"),Ewr=l(),BC=a("li"),Qve=a("strong"),ywr=o("electra"),wwr=o(" \u2014 "),kz=a("a"),Awr=o("FlaxElectraForSequenceClassification"),Lwr=o(" (ELECTRA model)"),Bwr=l(),xC=a("li"),Hve=a("strong"),xwr=o("mbart"),kwr=o(" \u2014 "),Rz=a("a"),Rwr=o("FlaxMBartForSequenceClassification"),Swr=o(" (mBART model)"),Pwr=l(),kC=a("li"),Uve=a("strong"),$wr=o("roberta"),Iwr=o(" \u2014 "),Sz=a("a"),jwr=o("FlaxRobertaForSequenceClassification"),Dwr=o(" (RoBERTa model)"),Nwr=l(),RC=a("li"),Jve=a("strong"),qwr=o("roformer"),Gwr=o(" \u2014 "),Pz=a("a"),Owr=o("FlaxRoFormerForSequenceClassification"),Xwr=o(" (RoFormer model)"),Vwr=l(),SC=a("li"),Yve=a("strong"),zwr=o("xlm-roberta"),Wwr=o(" \u2014 "),$z=a("a"),Qwr=o("FlaxXLMRobertaForSequenceClassification"),Hwr=o(" (XLM-RoBERTa model)"),Uwr=l(),Kve=a("p"),Jwr=o("Examples:"),Ywr=l(),f(EL.$$.fragment),BSe=l(),Mf=a("h2"),PC=a("a"),Zve=a("span"),f(yL.$$.fragment),Kwr=l(),e6e=a("span"),Zwr=o("FlaxAutoModelForSpeechSeq2Seq"),xSe=l(),Nr=a("div"),f(wL.$$.fragment),eAr=l(),Ef=a("p"),oAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),o6e=a("code"),rAr=o("from_pretrained()"),tAr=o("class method or the "),r6e=a("code"),aAr=o("from_config()"),nAr=o(`class
method.`),sAr=l(),AL=a("p"),lAr=o("This class cannot be instantiated directly using "),t6e=a("code"),iAr=o("__init__()"),dAr=o(" (throws an error)."),cAr=l(),Pt=a("div"),f(LL.$$.fragment),fAr=l(),a6e=a("p"),mAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),gAr=l(),yf=a("p"),hAr=o(`Note:
Loading a model from its configuration file does `),n6e=a("strong"),pAr=o("not"),_Ar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),s6e=a("code"),uAr=o("from_pretrained()"),bAr=o("to load the model weights."),vAr=l(),l6e=a("p"),TAr=o("Examples:"),FAr=l(),f(BL.$$.fragment),CAr=l(),So=a("div"),f(xL.$$.fragment),MAr=l(),i6e=a("p"),EAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),yAr=l(),Nn=a("p"),wAr=o("The model class to instantiate is selected based on the "),d6e=a("code"),AAr=o("model_type"),LAr=o(` property of the config object (either
passed as an argument or loaded from `),c6e=a("code"),BAr=o("pretrained_model_name_or_path"),xAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f6e=a("code"),kAr=o("pretrained_model_name_or_path"),RAr=o(":"),SAr=l(),m6e=a("ul"),$C=a("li"),g6e=a("strong"),PAr=o("speech-encoder-decoder"),$Ar=o(" \u2014 "),Iz=a("a"),IAr=o("FlaxSpeechEncoderDecoderModel"),jAr=o(" (Speech Encoder decoder model)"),DAr=l(),h6e=a("p"),NAr=o("Examples:"),qAr=l(),f(kL.$$.fragment),kSe=l(),wf=a("h2"),IC=a("a"),p6e=a("span"),f(RL.$$.fragment),GAr=l(),_6e=a("span"),OAr=o("FlaxAutoModelForQuestionAnswering"),RSe=l(),qr=a("div"),f(SL.$$.fragment),XAr=l(),Af=a("p"),VAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),u6e=a("code"),zAr=o("from_pretrained()"),WAr=o("class method or the "),b6e=a("code"),QAr=o("from_config()"),HAr=o(`class
method.`),UAr=l(),PL=a("p"),JAr=o("This class cannot be instantiated directly using "),v6e=a("code"),YAr=o("__init__()"),KAr=o(" (throws an error)."),ZAr=l(),$t=a("div"),f($L.$$.fragment),eLr=l(),T6e=a("p"),oLr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rLr=l(),Lf=a("p"),tLr=o(`Note:
Loading a model from its configuration file does `),F6e=a("strong"),aLr=o("not"),nLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),C6e=a("code"),sLr=o("from_pretrained()"),lLr=o("to load the model weights."),iLr=l(),M6e=a("p"),dLr=o("Examples:"),cLr=l(),f(IL.$$.fragment),fLr=l(),Po=a("div"),f(jL.$$.fragment),mLr=l(),E6e=a("p"),gLr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hLr=l(),qn=a("p"),pLr=o("The model class to instantiate is selected based on the "),y6e=a("code"),_Lr=o("model_type"),uLr=o(` property of the config object (either
passed as an argument or loaded from `),w6e=a("code"),bLr=o("pretrained_model_name_or_path"),vLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A6e=a("code"),TLr=o("pretrained_model_name_or_path"),FLr=o(":"),CLr=l(),ve=a("ul"),jC=a("li"),L6e=a("strong"),MLr=o("albert"),ELr=o(" \u2014 "),jz=a("a"),yLr=o("FlaxAlbertForQuestionAnswering"),wLr=o(" (ALBERT model)"),ALr=l(),DC=a("li"),B6e=a("strong"),LLr=o("bart"),BLr=o(" \u2014 "),Dz=a("a"),xLr=o("FlaxBartForQuestionAnswering"),kLr=o(" (BART model)"),RLr=l(),NC=a("li"),x6e=a("strong"),SLr=o("bert"),PLr=o(" \u2014 "),Nz=a("a"),$Lr=o("FlaxBertForQuestionAnswering"),ILr=o(" (BERT model)"),jLr=l(),qC=a("li"),k6e=a("strong"),DLr=o("big_bird"),NLr=o(" \u2014 "),qz=a("a"),qLr=o("FlaxBigBirdForQuestionAnswering"),GLr=o(" (BigBird model)"),OLr=l(),GC=a("li"),R6e=a("strong"),XLr=o("distilbert"),VLr=o(" \u2014 "),Gz=a("a"),zLr=o("FlaxDistilBertForQuestionAnswering"),WLr=o(" (DistilBERT model)"),QLr=l(),OC=a("li"),S6e=a("strong"),HLr=o("electra"),ULr=o(" \u2014 "),Oz=a("a"),JLr=o("FlaxElectraForQuestionAnswering"),YLr=o(" (ELECTRA model)"),KLr=l(),XC=a("li"),P6e=a("strong"),ZLr=o("mbart"),e7r=o(" \u2014 "),Xz=a("a"),o7r=o("FlaxMBartForQuestionAnswering"),r7r=o(" (mBART model)"),t7r=l(),VC=a("li"),$6e=a("strong"),a7r=o("roberta"),n7r=o(" \u2014 "),Vz=a("a"),s7r=o("FlaxRobertaForQuestionAnswering"),l7r=o(" (RoBERTa model)"),i7r=l(),zC=a("li"),I6e=a("strong"),d7r=o("roformer"),c7r=o(" \u2014 "),zz=a("a"),f7r=o("FlaxRoFormerForQuestionAnswering"),m7r=o(" (RoFormer model)"),g7r=l(),WC=a("li"),j6e=a("strong"),h7r=o("xlm-roberta"),p7r=o(" \u2014 "),Wz=a("a"),_7r=o("FlaxXLMRobertaForQuestionAnswering"),u7r=o(" (XLM-RoBERTa model)"),b7r=l(),D6e=a("p"),v7r=o("Examples:"),T7r=l(),f(DL.$$.fragment),SSe=l(),Bf=a("h2"),QC=a("a"),N6e=a("span"),f(NL.$$.fragment),F7r=l(),q6e=a("span"),C7r=o("FlaxAutoModelForTokenClassification"),PSe=l(),Gr=a("div"),f(qL.$$.fragment),M7r=l(),xf=a("p"),E7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),G6e=a("code"),y7r=o("from_pretrained()"),w7r=o("class method or the "),O6e=a("code"),A7r=o("from_config()"),L7r=o(`class
method.`),B7r=l(),GL=a("p"),x7r=o("This class cannot be instantiated directly using "),X6e=a("code"),k7r=o("__init__()"),R7r=o(" (throws an error)."),S7r=l(),It=a("div"),f(OL.$$.fragment),P7r=l(),V6e=a("p"),$7r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),I7r=l(),kf=a("p"),j7r=o(`Note:
Loading a model from its configuration file does `),z6e=a("strong"),D7r=o("not"),N7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),W6e=a("code"),q7r=o("from_pretrained()"),G7r=o("to load the model weights."),O7r=l(),Q6e=a("p"),X7r=o("Examples:"),V7r=l(),f(XL.$$.fragment),z7r=l(),$o=a("div"),f(VL.$$.fragment),W7r=l(),H6e=a("p"),Q7r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),H7r=l(),Gn=a("p"),U7r=o("The model class to instantiate is selected based on the "),U6e=a("code"),J7r=o("model_type"),Y7r=o(` property of the config object (either
passed as an argument or loaded from `),J6e=a("code"),K7r=o("pretrained_model_name_or_path"),Z7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y6e=a("code"),e9r=o("pretrained_model_name_or_path"),o9r=o(":"),r9r=l(),Se=a("ul"),HC=a("li"),K6e=a("strong"),t9r=o("albert"),a9r=o(" \u2014 "),Qz=a("a"),n9r=o("FlaxAlbertForTokenClassification"),s9r=o(" (ALBERT model)"),l9r=l(),UC=a("li"),Z6e=a("strong"),i9r=o("bert"),d9r=o(" \u2014 "),Hz=a("a"),c9r=o("FlaxBertForTokenClassification"),f9r=o(" (BERT model)"),m9r=l(),JC=a("li"),e0e=a("strong"),g9r=o("big_bird"),h9r=o(" \u2014 "),Uz=a("a"),p9r=o("FlaxBigBirdForTokenClassification"),_9r=o(" (BigBird model)"),u9r=l(),YC=a("li"),o0e=a("strong"),b9r=o("distilbert"),v9r=o(" \u2014 "),Jz=a("a"),T9r=o("FlaxDistilBertForTokenClassification"),F9r=o(" (DistilBERT model)"),C9r=l(),KC=a("li"),r0e=a("strong"),M9r=o("electra"),E9r=o(" \u2014 "),Yz=a("a"),y9r=o("FlaxElectraForTokenClassification"),w9r=o(" (ELECTRA model)"),A9r=l(),ZC=a("li"),t0e=a("strong"),L9r=o("roberta"),B9r=o(" \u2014 "),Kz=a("a"),x9r=o("FlaxRobertaForTokenClassification"),k9r=o(" (RoBERTa model)"),R9r=l(),eM=a("li"),a0e=a("strong"),S9r=o("roformer"),P9r=o(" \u2014 "),Zz=a("a"),$9r=o("FlaxRoFormerForTokenClassification"),I9r=o(" (RoFormer model)"),j9r=l(),oM=a("li"),n0e=a("strong"),D9r=o("xlm-roberta"),N9r=o(" \u2014 "),eW=a("a"),q9r=o("FlaxXLMRobertaForTokenClassification"),G9r=o(" (XLM-RoBERTa model)"),O9r=l(),s0e=a("p"),X9r=o("Examples:"),V9r=l(),f(zL.$$.fragment),$Se=l(),Rf=a("h2"),rM=a("a"),l0e=a("span"),f(WL.$$.fragment),z9r=l(),i0e=a("span"),W9r=o("FlaxAutoModelForMultipleChoice"),ISe=l(),Or=a("div"),f(QL.$$.fragment),Q9r=l(),Sf=a("p"),H9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),d0e=a("code"),U9r=o("from_pretrained()"),J9r=o("class method or the "),c0e=a("code"),Y9r=o("from_config()"),K9r=o(`class
method.`),Z9r=l(),HL=a("p"),eBr=o("This class cannot be instantiated directly using "),f0e=a("code"),oBr=o("__init__()"),rBr=o(" (throws an error)."),tBr=l(),jt=a("div"),f(UL.$$.fragment),aBr=l(),m0e=a("p"),nBr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),sBr=l(),Pf=a("p"),lBr=o(`Note:
Loading a model from its configuration file does `),g0e=a("strong"),iBr=o("not"),dBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),h0e=a("code"),cBr=o("from_pretrained()"),fBr=o("to load the model weights."),mBr=l(),p0e=a("p"),gBr=o("Examples:"),hBr=l(),f(JL.$$.fragment),pBr=l(),Io=a("div"),f(YL.$$.fragment),_Br=l(),_0e=a("p"),uBr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),bBr=l(),On=a("p"),vBr=o("The model class to instantiate is selected based on the "),u0e=a("code"),TBr=o("model_type"),FBr=o(` property of the config object (either
passed as an argument or loaded from `),b0e=a("code"),CBr=o("pretrained_model_name_or_path"),MBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v0e=a("code"),EBr=o("pretrained_model_name_or_path"),yBr=o(":"),wBr=l(),Pe=a("ul"),tM=a("li"),T0e=a("strong"),ABr=o("albert"),LBr=o(" \u2014 "),oW=a("a"),BBr=o("FlaxAlbertForMultipleChoice"),xBr=o(" (ALBERT model)"),kBr=l(),aM=a("li"),F0e=a("strong"),RBr=o("bert"),SBr=o(" \u2014 "),rW=a("a"),PBr=o("FlaxBertForMultipleChoice"),$Br=o(" (BERT model)"),IBr=l(),nM=a("li"),C0e=a("strong"),jBr=o("big_bird"),DBr=o(" \u2014 "),tW=a("a"),NBr=o("FlaxBigBirdForMultipleChoice"),qBr=o(" (BigBird model)"),GBr=l(),sM=a("li"),M0e=a("strong"),OBr=o("distilbert"),XBr=o(" \u2014 "),aW=a("a"),VBr=o("FlaxDistilBertForMultipleChoice"),zBr=o(" (DistilBERT model)"),WBr=l(),lM=a("li"),E0e=a("strong"),QBr=o("electra"),HBr=o(" \u2014 "),nW=a("a"),UBr=o("FlaxElectraForMultipleChoice"),JBr=o(" (ELECTRA model)"),YBr=l(),iM=a("li"),y0e=a("strong"),KBr=o("roberta"),ZBr=o(" \u2014 "),sW=a("a"),exr=o("FlaxRobertaForMultipleChoice"),oxr=o(" (RoBERTa model)"),rxr=l(),dM=a("li"),w0e=a("strong"),txr=o("roformer"),axr=o(" \u2014 "),lW=a("a"),nxr=o("FlaxRoFormerForMultipleChoice"),sxr=o(" (RoFormer model)"),lxr=l(),cM=a("li"),A0e=a("strong"),ixr=o("xlm-roberta"),dxr=o(" \u2014 "),iW=a("a"),cxr=o("FlaxXLMRobertaForMultipleChoice"),fxr=o(" (XLM-RoBERTa model)"),mxr=l(),L0e=a("p"),gxr=o("Examples:"),hxr=l(),f(KL.$$.fragment),jSe=l(),$f=a("h2"),fM=a("a"),B0e=a("span"),f(ZL.$$.fragment),pxr=l(),x0e=a("span"),_xr=o("FlaxAutoModelForNextSentencePrediction"),DSe=l(),Xr=a("div"),f(e7.$$.fragment),uxr=l(),If=a("p"),bxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),k0e=a("code"),vxr=o("from_pretrained()"),Txr=o("class method or the "),R0e=a("code"),Fxr=o("from_config()"),Cxr=o(`class
method.`),Mxr=l(),o7=a("p"),Exr=o("This class cannot be instantiated directly using "),S0e=a("code"),yxr=o("__init__()"),wxr=o(" (throws an error)."),Axr=l(),Dt=a("div"),f(r7.$$.fragment),Lxr=l(),P0e=a("p"),Bxr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),xxr=l(),jf=a("p"),kxr=o(`Note:
Loading a model from its configuration file does `),$0e=a("strong"),Rxr=o("not"),Sxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),I0e=a("code"),Pxr=o("from_pretrained()"),$xr=o("to load the model weights."),Ixr=l(),j0e=a("p"),jxr=o("Examples:"),Dxr=l(),f(t7.$$.fragment),Nxr=l(),jo=a("div"),f(a7.$$.fragment),qxr=l(),D0e=a("p"),Gxr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Oxr=l(),Xn=a("p"),Xxr=o("The model class to instantiate is selected based on the "),N0e=a("code"),Vxr=o("model_type"),zxr=o(` property of the config object (either
passed as an argument or loaded from `),q0e=a("code"),Wxr=o("pretrained_model_name_or_path"),Qxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G0e=a("code"),Hxr=o("pretrained_model_name_or_path"),Uxr=o(":"),Jxr=l(),O0e=a("ul"),mM=a("li"),X0e=a("strong"),Yxr=o("bert"),Kxr=o(" \u2014 "),dW=a("a"),Zxr=o("FlaxBertForNextSentencePrediction"),ekr=o(" (BERT model)"),okr=l(),V0e=a("p"),rkr=o("Examples:"),tkr=l(),f(n7.$$.fragment),NSe=l(),Df=a("h2"),gM=a("a"),z0e=a("span"),f(s7.$$.fragment),akr=l(),W0e=a("span"),nkr=o("FlaxAutoModelForImageClassification"),qSe=l(),Vr=a("div"),f(l7.$$.fragment),skr=l(),Nf=a("p"),lkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Q0e=a("code"),ikr=o("from_pretrained()"),dkr=o("class method or the "),H0e=a("code"),ckr=o("from_config()"),fkr=o(`class
method.`),mkr=l(),i7=a("p"),gkr=o("This class cannot be instantiated directly using "),U0e=a("code"),hkr=o("__init__()"),pkr=o(" (throws an error)."),_kr=l(),Nt=a("div"),f(d7.$$.fragment),ukr=l(),J0e=a("p"),bkr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vkr=l(),qf=a("p"),Tkr=o(`Note:
Loading a model from its configuration file does `),Y0e=a("strong"),Fkr=o("not"),Ckr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),K0e=a("code"),Mkr=o("from_pretrained()"),Ekr=o("to load the model weights."),ykr=l(),Z0e=a("p"),wkr=o("Examples:"),Akr=l(),f(c7.$$.fragment),Lkr=l(),Do=a("div"),f(f7.$$.fragment),Bkr=l(),eTe=a("p"),xkr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),kkr=l(),Vn=a("p"),Rkr=o("The model class to instantiate is selected based on the "),oTe=a("code"),Skr=o("model_type"),Pkr=o(` property of the config object (either
passed as an argument or loaded from `),rTe=a("code"),$kr=o("pretrained_model_name_or_path"),Ikr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tTe=a("code"),jkr=o("pretrained_model_name_or_path"),Dkr=o(":"),Nkr=l(),m7=a("ul"),hM=a("li"),aTe=a("strong"),qkr=o("beit"),Gkr=o(" \u2014 "),cW=a("a"),Okr=o("FlaxBeitForImageClassification"),Xkr=o(" (BEiT model)"),Vkr=l(),pM=a("li"),nTe=a("strong"),zkr=o("vit"),Wkr=o(" \u2014 "),fW=a("a"),Qkr=o("FlaxViTForImageClassification"),Hkr=o(" (ViT model)"),Ukr=l(),sTe=a("p"),Jkr=o("Examples:"),Ykr=l(),f(g7.$$.fragment),GSe=l(),Gf=a("h2"),_M=a("a"),lTe=a("span"),f(h7.$$.fragment),Kkr=l(),iTe=a("span"),Zkr=o("FlaxAutoModelForVision2Seq"),OSe=l(),zr=a("div"),f(p7.$$.fragment),eRr=l(),Of=a("p"),oRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dTe=a("code"),rRr=o("from_pretrained()"),tRr=o("class method or the "),cTe=a("code"),aRr=o("from_config()"),nRr=o(`class
method.`),sRr=l(),_7=a("p"),lRr=o("This class cannot be instantiated directly using "),fTe=a("code"),iRr=o("__init__()"),dRr=o(" (throws an error)."),cRr=l(),qt=a("div"),f(u7.$$.fragment),fRr=l(),mTe=a("p"),mRr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),gRr=l(),Xf=a("p"),hRr=o(`Note:
Loading a model from its configuration file does `),gTe=a("strong"),pRr=o("not"),_Rr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hTe=a("code"),uRr=o("from_pretrained()"),bRr=o("to load the model weights."),vRr=l(),pTe=a("p"),TRr=o("Examples:"),FRr=l(),f(b7.$$.fragment),CRr=l(),No=a("div"),f(v7.$$.fragment),MRr=l(),_Te=a("p"),ERr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),yRr=l(),zn=a("p"),wRr=o("The model class to instantiate is selected based on the "),uTe=a("code"),ARr=o("model_type"),LRr=o(` property of the config object (either
passed as an argument or loaded from `),bTe=a("code"),BRr=o("pretrained_model_name_or_path"),xRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vTe=a("code"),kRr=o("pretrained_model_name_or_path"),RRr=o(":"),SRr=l(),TTe=a("ul"),uM=a("li"),FTe=a("strong"),PRr=o("vision-encoder-decoder"),$Rr=o(" \u2014 "),mW=a("a"),IRr=o("FlaxVisionEncoderDecoderModel"),jRr=o(" (Vision Encoder decoder model)"),DRr=l(),CTe=a("p"),NRr=o("Examples:"),qRr=l(),f(T7.$$.fragment),this.h()},l(d){const u=nMt('[data-svelte="svelte-1phssyn"]',document.head);K=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(d),de=n(d,"H1",{class:!0});var F7=s(de);Ee=n(F7,"A",{id:!0,class:!0,href:!0});var MTe=s(Ee);lo=n(MTe,"SPAN",{});var ETe=s(lo);m(fe.$$.fragment,ETe),ETe.forEach(t),MTe.forEach(t),Ce=i(F7),zo=n(F7,"SPAN",{});var ORr=s(zo);Xi=r(ORr,"Auto Classes"),ORr.forEach(t),F7.forEach(t),Wf=i(d),ha=n(d,"P",{});var VSe=s(ha);Vi=r(VSe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),zi=n(VSe,"CODE",{});var XRr=s(zi);b4=r(XRr,"from_pretrained()"),XRr.forEach(t),Qf=r(VSe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),VSe.forEach(t),Be=i(d),co=n(d,"P",{});var bM=s(co);Wi=r(bM,"Instantiating one of "),Wn=n(bM,"A",{href:!0});var VRr=s(Wn);v4=r(VRr,"AutoConfig"),VRr.forEach(t),Qn=r(bM,", "),Hn=n(bM,"A",{href:!0});var zRr=s(Hn);T4=r(zRr,"AutoModel"),zRr.forEach(t),Qi=r(bM,`, and
`),Un=n(bM,"A",{href:!0});var WRr=s(Un);F4=r(WRr,"AutoTokenizer"),WRr.forEach(t),Hi=r(bM," will directly create a class of the relevant architecture. For instance"),bM.forEach(t),Hf=i(d),m(Va.$$.fragment,d),fo=i(d),pe=n(d,"P",{});var zSe=s(pe);b9=r(zSe,"will create a model that is an instance of "),Ui=n(zSe,"A",{href:!0});var QRr=s(Ui);v9=r(QRr,"BertModel"),QRr.forEach(t),T9=r(zSe,"."),zSe.forEach(t),Wo=i(d),za=n(d,"P",{});var WSe=s(za);F9=r(WSe,"There is one class of "),Uf=n(WSe,"CODE",{});var HRr=s(Uf);C9=r(HRr,"AutoModel"),HRr.forEach(t),aIe=r(WSe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),WSe.forEach(t),qke=i(d),Ji=n(d,"H2",{class:!0});var QSe=s(Ji);Jf=n(QSe,"A",{id:!0,class:!0,href:!0});var URr=s(Jf);lH=n(URr,"SPAN",{});var JRr=s(lH);m(C4.$$.fragment,JRr),JRr.forEach(t),URr.forEach(t),nIe=i(QSe),iH=n(QSe,"SPAN",{});var YRr=s(iH);sIe=r(YRr,"Extending the Auto Classes"),YRr.forEach(t),QSe.forEach(t),Gke=i(d),Jn=n(d,"P",{});var gW=s(Jn);lIe=r(gW,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),dH=n(gW,"CODE",{});var KRr=s(dH);iIe=r(KRr,"NewModel"),KRr.forEach(t),dIe=r(gW,", make sure you have a "),cH=n(gW,"CODE",{});var ZRr=s(cH);cIe=r(ZRr,"NewModelConfig"),ZRr.forEach(t),fIe=r(gW,` then you can add those to the auto
classes like this:`),gW.forEach(t),Oke=i(d),m(M4.$$.fragment,d),Xke=i(d),M9=n(d,"P",{});var eSr=s(M9);mIe=r(eSr,"You will then be able to use the auto classes like you would usually do!"),eSr.forEach(t),Vke=i(d),m(Yf.$$.fragment,d),zke=i(d),Yi=n(d,"H2",{class:!0});var HSe=s(Yi);Kf=n(HSe,"A",{id:!0,class:!0,href:!0});var oSr=s(Kf);fH=n(oSr,"SPAN",{});var rSr=s(fH);m(E4.$$.fragment,rSr),rSr.forEach(t),oSr.forEach(t),gIe=i(HSe),mH=n(HSe,"SPAN",{});var tSr=s(mH);hIe=r(tSr,"AutoConfig"),tSr.forEach(t),HSe.forEach(t),Wke=i(d),Qo=n(d,"DIV",{class:!0});var Qs=s(Qo);m(y4.$$.fragment,Qs),pIe=i(Qs),w4=n(Qs,"P",{});var USe=s(w4);_Ie=r(USe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),E9=n(USe,"A",{href:!0});var aSr=s(E9);uIe=r(aSr,"from_pretrained()"),aSr.forEach(t),bIe=r(USe," class method."),USe.forEach(t),vIe=i(Qs),A4=n(Qs,"P",{});var JSe=s(A4);TIe=r(JSe,"This class cannot be instantiated directly using "),gH=n(JSe,"CODE",{});var nSr=s(gH);FIe=r(nSr,"__init__()"),nSr.forEach(t),CIe=r(JSe," (throws an error)."),JSe.forEach(t),MIe=i(Qs),mo=n(Qs,"DIV",{class:!0});var _a=s(mo);m(L4.$$.fragment,_a),EIe=i(_a),hH=n(_a,"P",{});var sSr=s(hH);yIe=r(sSr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),sSr.forEach(t),wIe=i(_a),Ki=n(_a,"P",{});var hW=s(Ki);AIe=r(hW,"The configuration class to instantiate is selected based on the "),pH=n(hW,"CODE",{});var lSr=s(pH);LIe=r(lSr,"model_type"),lSr.forEach(t),BIe=r(hW,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),_H=n(hW,"CODE",{});var iSr=s(_H);xIe=r(iSr,"pretrained_model_name_or_path"),iSr.forEach(t),kIe=r(hW,":"),hW.forEach(t),RIe=i(_a),v=n(_a,"UL",{});var T=s(v);Zf=n(T,"LI",{});var yTe=s(Zf);uH=n(yTe,"STRONG",{});var dSr=s(uH);SIe=r(dSr,"albert"),dSr.forEach(t),PIe=r(yTe," \u2014 "),y9=n(yTe,"A",{href:!0});var cSr=s(y9);$Ie=r(cSr,"AlbertConfig"),cSr.forEach(t),IIe=r(yTe," (ALBERT model)"),yTe.forEach(t),jIe=i(T),em=n(T,"LI",{});var wTe=s(em);bH=n(wTe,"STRONG",{});var fSr=s(bH);DIe=r(fSr,"bart"),fSr.forEach(t),NIe=r(wTe," \u2014 "),w9=n(wTe,"A",{href:!0});var mSr=s(w9);qIe=r(mSr,"BartConfig"),mSr.forEach(t),GIe=r(wTe," (BART model)"),wTe.forEach(t),OIe=i(T),om=n(T,"LI",{});var ATe=s(om);vH=n(ATe,"STRONG",{});var gSr=s(vH);XIe=r(gSr,"beit"),gSr.forEach(t),VIe=r(ATe," \u2014 "),A9=n(ATe,"A",{href:!0});var hSr=s(A9);zIe=r(hSr,"BeitConfig"),hSr.forEach(t),WIe=r(ATe," (BEiT model)"),ATe.forEach(t),QIe=i(T),rm=n(T,"LI",{});var LTe=s(rm);TH=n(LTe,"STRONG",{});var pSr=s(TH);HIe=r(pSr,"bert"),pSr.forEach(t),UIe=r(LTe," \u2014 "),L9=n(LTe,"A",{href:!0});var _Sr=s(L9);JIe=r(_Sr,"BertConfig"),_Sr.forEach(t),YIe=r(LTe," (BERT model)"),LTe.forEach(t),KIe=i(T),tm=n(T,"LI",{});var BTe=s(tm);FH=n(BTe,"STRONG",{});var uSr=s(FH);ZIe=r(uSr,"bert-generation"),uSr.forEach(t),eje=r(BTe," \u2014 "),B9=n(BTe,"A",{href:!0});var bSr=s(B9);oje=r(bSr,"BertGenerationConfig"),bSr.forEach(t),rje=r(BTe," (Bert Generation model)"),BTe.forEach(t),tje=i(T),am=n(T,"LI",{});var xTe=s(am);CH=n(xTe,"STRONG",{});var vSr=s(CH);aje=r(vSr,"big_bird"),vSr.forEach(t),nje=r(xTe," \u2014 "),x9=n(xTe,"A",{href:!0});var TSr=s(x9);sje=r(TSr,"BigBirdConfig"),TSr.forEach(t),lje=r(xTe," (BigBird model)"),xTe.forEach(t),ije=i(T),nm=n(T,"LI",{});var kTe=s(nm);MH=n(kTe,"STRONG",{});var FSr=s(MH);dje=r(FSr,"bigbird_pegasus"),FSr.forEach(t),cje=r(kTe," \u2014 "),k9=n(kTe,"A",{href:!0});var CSr=s(k9);fje=r(CSr,"BigBirdPegasusConfig"),CSr.forEach(t),mje=r(kTe," (BigBirdPegasus model)"),kTe.forEach(t),gje=i(T),sm=n(T,"LI",{});var RTe=s(sm);EH=n(RTe,"STRONG",{});var MSr=s(EH);hje=r(MSr,"blenderbot"),MSr.forEach(t),pje=r(RTe," \u2014 "),R9=n(RTe,"A",{href:!0});var ESr=s(R9);_je=r(ESr,"BlenderbotConfig"),ESr.forEach(t),uje=r(RTe," (Blenderbot model)"),RTe.forEach(t),bje=i(T),lm=n(T,"LI",{});var STe=s(lm);yH=n(STe,"STRONG",{});var ySr=s(yH);vje=r(ySr,"blenderbot-small"),ySr.forEach(t),Tje=r(STe," \u2014 "),S9=n(STe,"A",{href:!0});var wSr=s(S9);Fje=r(wSr,"BlenderbotSmallConfig"),wSr.forEach(t),Cje=r(STe," (BlenderbotSmall model)"),STe.forEach(t),Mje=i(T),im=n(T,"LI",{});var PTe=s(im);wH=n(PTe,"STRONG",{});var ASr=s(wH);Eje=r(ASr,"camembert"),ASr.forEach(t),yje=r(PTe," \u2014 "),P9=n(PTe,"A",{href:!0});var LSr=s(P9);wje=r(LSr,"CamembertConfig"),LSr.forEach(t),Aje=r(PTe," (CamemBERT model)"),PTe.forEach(t),Lje=i(T),dm=n(T,"LI",{});var $Te=s(dm);AH=n($Te,"STRONG",{});var BSr=s(AH);Bje=r(BSr,"canine"),BSr.forEach(t),xje=r($Te," \u2014 "),$9=n($Te,"A",{href:!0});var xSr=s($9);kje=r(xSr,"CanineConfig"),xSr.forEach(t),Rje=r($Te," (Canine model)"),$Te.forEach(t),Sje=i(T),cm=n(T,"LI",{});var ITe=s(cm);LH=n(ITe,"STRONG",{});var kSr=s(LH);Pje=r(kSr,"clip"),kSr.forEach(t),$je=r(ITe," \u2014 "),I9=n(ITe,"A",{href:!0});var RSr=s(I9);Ije=r(RSr,"CLIPConfig"),RSr.forEach(t),jje=r(ITe," (CLIP model)"),ITe.forEach(t),Dje=i(T),fm=n(T,"LI",{});var jTe=s(fm);BH=n(jTe,"STRONG",{});var SSr=s(BH);Nje=r(SSr,"convbert"),SSr.forEach(t),qje=r(jTe," \u2014 "),j9=n(jTe,"A",{href:!0});var PSr=s(j9);Gje=r(PSr,"ConvBertConfig"),PSr.forEach(t),Oje=r(jTe," (ConvBERT model)"),jTe.forEach(t),Xje=i(T),mm=n(T,"LI",{});var DTe=s(mm);xH=n(DTe,"STRONG",{});var $Sr=s(xH);Vje=r($Sr,"convnext"),$Sr.forEach(t),zje=r(DTe," \u2014 "),D9=n(DTe,"A",{href:!0});var ISr=s(D9);Wje=r(ISr,"ConvNextConfig"),ISr.forEach(t),Qje=r(DTe," (ConvNext model)"),DTe.forEach(t),Hje=i(T),gm=n(T,"LI",{});var NTe=s(gm);kH=n(NTe,"STRONG",{});var jSr=s(kH);Uje=r(jSr,"ctrl"),jSr.forEach(t),Jje=r(NTe," \u2014 "),N9=n(NTe,"A",{href:!0});var DSr=s(N9);Yje=r(DSr,"CTRLConfig"),DSr.forEach(t),Kje=r(NTe," (CTRL model)"),NTe.forEach(t),Zje=i(T),hm=n(T,"LI",{});var qTe=s(hm);RH=n(qTe,"STRONG",{});var NSr=s(RH);eDe=r(NSr,"data2vec-audio"),NSr.forEach(t),oDe=r(qTe," \u2014 "),q9=n(qTe,"A",{href:!0});var qSr=s(q9);rDe=r(qSr,"Data2VecAudioConfig"),qSr.forEach(t),tDe=r(qTe," (Data2VecAudio model)"),qTe.forEach(t),aDe=i(T),pm=n(T,"LI",{});var GTe=s(pm);SH=n(GTe,"STRONG",{});var GSr=s(SH);nDe=r(GSr,"data2vec-text"),GSr.forEach(t),sDe=r(GTe," \u2014 "),G9=n(GTe,"A",{href:!0});var OSr=s(G9);lDe=r(OSr,"Data2VecTextConfig"),OSr.forEach(t),iDe=r(GTe," (Data2VecText model)"),GTe.forEach(t),dDe=i(T),_m=n(T,"LI",{});var OTe=s(_m);PH=n(OTe,"STRONG",{});var XSr=s(PH);cDe=r(XSr,"deberta"),XSr.forEach(t),fDe=r(OTe," \u2014 "),O9=n(OTe,"A",{href:!0});var VSr=s(O9);mDe=r(VSr,"DebertaConfig"),VSr.forEach(t),gDe=r(OTe," (DeBERTa model)"),OTe.forEach(t),hDe=i(T),um=n(T,"LI",{});var XTe=s(um);$H=n(XTe,"STRONG",{});var zSr=s($H);pDe=r(zSr,"deberta-v2"),zSr.forEach(t),_De=r(XTe," \u2014 "),X9=n(XTe,"A",{href:!0});var WSr=s(X9);uDe=r(WSr,"DebertaV2Config"),WSr.forEach(t),bDe=r(XTe," (DeBERTa-v2 model)"),XTe.forEach(t),vDe=i(T),bm=n(T,"LI",{});var VTe=s(bm);IH=n(VTe,"STRONG",{});var QSr=s(IH);TDe=r(QSr,"decision_transformer"),QSr.forEach(t),FDe=r(VTe," \u2014 "),V9=n(VTe,"A",{href:!0});var HSr=s(V9);CDe=r(HSr,"DecisionTransformerConfig"),HSr.forEach(t),MDe=r(VTe," (Decision Transformer model)"),VTe.forEach(t),EDe=i(T),vm=n(T,"LI",{});var zTe=s(vm);jH=n(zTe,"STRONG",{});var USr=s(jH);yDe=r(USr,"deit"),USr.forEach(t),wDe=r(zTe," \u2014 "),z9=n(zTe,"A",{href:!0});var JSr=s(z9);ADe=r(JSr,"DeiTConfig"),JSr.forEach(t),LDe=r(zTe," (DeiT model)"),zTe.forEach(t),BDe=i(T),Tm=n(T,"LI",{});var WTe=s(Tm);DH=n(WTe,"STRONG",{});var YSr=s(DH);xDe=r(YSr,"detr"),YSr.forEach(t),kDe=r(WTe," \u2014 "),W9=n(WTe,"A",{href:!0});var KSr=s(W9);RDe=r(KSr,"DetrConfig"),KSr.forEach(t),SDe=r(WTe," (DETR model)"),WTe.forEach(t),PDe=i(T),Fm=n(T,"LI",{});var QTe=s(Fm);NH=n(QTe,"STRONG",{});var ZSr=s(NH);$De=r(ZSr,"distilbert"),ZSr.forEach(t),IDe=r(QTe," \u2014 "),Q9=n(QTe,"A",{href:!0});var ePr=s(Q9);jDe=r(ePr,"DistilBertConfig"),ePr.forEach(t),DDe=r(QTe," (DistilBERT model)"),QTe.forEach(t),NDe=i(T),Cm=n(T,"LI",{});var HTe=s(Cm);qH=n(HTe,"STRONG",{});var oPr=s(qH);qDe=r(oPr,"dpr"),oPr.forEach(t),GDe=r(HTe," \u2014 "),H9=n(HTe,"A",{href:!0});var rPr=s(H9);ODe=r(rPr,"DPRConfig"),rPr.forEach(t),XDe=r(HTe," (DPR model)"),HTe.forEach(t),VDe=i(T),Mm=n(T,"LI",{});var UTe=s(Mm);GH=n(UTe,"STRONG",{});var tPr=s(GH);zDe=r(tPr,"electra"),tPr.forEach(t),WDe=r(UTe," \u2014 "),U9=n(UTe,"A",{href:!0});var aPr=s(U9);QDe=r(aPr,"ElectraConfig"),aPr.forEach(t),HDe=r(UTe," (ELECTRA model)"),UTe.forEach(t),UDe=i(T),Em=n(T,"LI",{});var JTe=s(Em);OH=n(JTe,"STRONG",{});var nPr=s(OH);JDe=r(nPr,"encoder-decoder"),nPr.forEach(t),YDe=r(JTe," \u2014 "),J9=n(JTe,"A",{href:!0});var sPr=s(J9);KDe=r(sPr,"EncoderDecoderConfig"),sPr.forEach(t),ZDe=r(JTe," (Encoder decoder model)"),JTe.forEach(t),eNe=i(T),ym=n(T,"LI",{});var YTe=s(ym);XH=n(YTe,"STRONG",{});var lPr=s(XH);oNe=r(lPr,"flaubert"),lPr.forEach(t),rNe=r(YTe," \u2014 "),Y9=n(YTe,"A",{href:!0});var iPr=s(Y9);tNe=r(iPr,"FlaubertConfig"),iPr.forEach(t),aNe=r(YTe," (FlauBERT model)"),YTe.forEach(t),nNe=i(T),wm=n(T,"LI",{});var KTe=s(wm);VH=n(KTe,"STRONG",{});var dPr=s(VH);sNe=r(dPr,"fnet"),dPr.forEach(t),lNe=r(KTe," \u2014 "),K9=n(KTe,"A",{href:!0});var cPr=s(K9);iNe=r(cPr,"FNetConfig"),cPr.forEach(t),dNe=r(KTe," (FNet model)"),KTe.forEach(t),cNe=i(T),Am=n(T,"LI",{});var ZTe=s(Am);zH=n(ZTe,"STRONG",{});var fPr=s(zH);fNe=r(fPr,"fsmt"),fPr.forEach(t),mNe=r(ZTe," \u2014 "),Z9=n(ZTe,"A",{href:!0});var mPr=s(Z9);gNe=r(mPr,"FSMTConfig"),mPr.forEach(t),hNe=r(ZTe," (FairSeq Machine-Translation model)"),ZTe.forEach(t),pNe=i(T),Lm=n(T,"LI",{});var e8e=s(Lm);WH=n(e8e,"STRONG",{});var gPr=s(WH);_Ne=r(gPr,"funnel"),gPr.forEach(t),uNe=r(e8e," \u2014 "),eB=n(e8e,"A",{href:!0});var hPr=s(eB);bNe=r(hPr,"FunnelConfig"),hPr.forEach(t),vNe=r(e8e," (Funnel Transformer model)"),e8e.forEach(t),TNe=i(T),Bm=n(T,"LI",{});var o8e=s(Bm);QH=n(o8e,"STRONG",{});var pPr=s(QH);FNe=r(pPr,"glpn"),pPr.forEach(t),CNe=r(o8e," \u2014 "),oB=n(o8e,"A",{href:!0});var _Pr=s(oB);MNe=r(_Pr,"GLPNConfig"),_Pr.forEach(t),ENe=r(o8e," (GLPN model)"),o8e.forEach(t),yNe=i(T),xm=n(T,"LI",{});var r8e=s(xm);HH=n(r8e,"STRONG",{});var uPr=s(HH);wNe=r(uPr,"gpt2"),uPr.forEach(t),ANe=r(r8e," \u2014 "),rB=n(r8e,"A",{href:!0});var bPr=s(rB);LNe=r(bPr,"GPT2Config"),bPr.forEach(t),BNe=r(r8e," (OpenAI GPT-2 model)"),r8e.forEach(t),xNe=i(T),km=n(T,"LI",{});var t8e=s(km);UH=n(t8e,"STRONG",{});var vPr=s(UH);kNe=r(vPr,"gpt_neo"),vPr.forEach(t),RNe=r(t8e," \u2014 "),tB=n(t8e,"A",{href:!0});var TPr=s(tB);SNe=r(TPr,"GPTNeoConfig"),TPr.forEach(t),PNe=r(t8e," (GPT Neo model)"),t8e.forEach(t),$Ne=i(T),Rm=n(T,"LI",{});var a8e=s(Rm);JH=n(a8e,"STRONG",{});var FPr=s(JH);INe=r(FPr,"gptj"),FPr.forEach(t),jNe=r(a8e," \u2014 "),aB=n(a8e,"A",{href:!0});var CPr=s(aB);DNe=r(CPr,"GPTJConfig"),CPr.forEach(t),NNe=r(a8e," (GPT-J model)"),a8e.forEach(t),qNe=i(T),Sm=n(T,"LI",{});var n8e=s(Sm);YH=n(n8e,"STRONG",{});var MPr=s(YH);GNe=r(MPr,"hubert"),MPr.forEach(t),ONe=r(n8e," \u2014 "),nB=n(n8e,"A",{href:!0});var EPr=s(nB);XNe=r(EPr,"HubertConfig"),EPr.forEach(t),VNe=r(n8e," (Hubert model)"),n8e.forEach(t),zNe=i(T),Pm=n(T,"LI",{});var s8e=s(Pm);KH=n(s8e,"STRONG",{});var yPr=s(KH);WNe=r(yPr,"ibert"),yPr.forEach(t),QNe=r(s8e," \u2014 "),sB=n(s8e,"A",{href:!0});var wPr=s(sB);HNe=r(wPr,"IBertConfig"),wPr.forEach(t),UNe=r(s8e," (I-BERT model)"),s8e.forEach(t),JNe=i(T),$m=n(T,"LI",{});var l8e=s($m);ZH=n(l8e,"STRONG",{});var APr=s(ZH);YNe=r(APr,"imagegpt"),APr.forEach(t),KNe=r(l8e," \u2014 "),lB=n(l8e,"A",{href:!0});var LPr=s(lB);ZNe=r(LPr,"ImageGPTConfig"),LPr.forEach(t),eqe=r(l8e," (ImageGPT model)"),l8e.forEach(t),oqe=i(T),Im=n(T,"LI",{});var i8e=s(Im);eU=n(i8e,"STRONG",{});var BPr=s(eU);rqe=r(BPr,"layoutlm"),BPr.forEach(t),tqe=r(i8e," \u2014 "),iB=n(i8e,"A",{href:!0});var xPr=s(iB);aqe=r(xPr,"LayoutLMConfig"),xPr.forEach(t),nqe=r(i8e," (LayoutLM model)"),i8e.forEach(t),sqe=i(T),jm=n(T,"LI",{});var d8e=s(jm);oU=n(d8e,"STRONG",{});var kPr=s(oU);lqe=r(kPr,"layoutlmv2"),kPr.forEach(t),iqe=r(d8e," \u2014 "),dB=n(d8e,"A",{href:!0});var RPr=s(dB);dqe=r(RPr,"LayoutLMv2Config"),RPr.forEach(t),cqe=r(d8e," (LayoutLMv2 model)"),d8e.forEach(t),fqe=i(T),Dm=n(T,"LI",{});var c8e=s(Dm);rU=n(c8e,"STRONG",{});var SPr=s(rU);mqe=r(SPr,"led"),SPr.forEach(t),gqe=r(c8e," \u2014 "),cB=n(c8e,"A",{href:!0});var PPr=s(cB);hqe=r(PPr,"LEDConfig"),PPr.forEach(t),pqe=r(c8e," (LED model)"),c8e.forEach(t),_qe=i(T),Nm=n(T,"LI",{});var f8e=s(Nm);tU=n(f8e,"STRONG",{});var $Pr=s(tU);uqe=r($Pr,"longformer"),$Pr.forEach(t),bqe=r(f8e," \u2014 "),fB=n(f8e,"A",{href:!0});var IPr=s(fB);vqe=r(IPr,"LongformerConfig"),IPr.forEach(t),Tqe=r(f8e," (Longformer model)"),f8e.forEach(t),Fqe=i(T),qm=n(T,"LI",{});var m8e=s(qm);aU=n(m8e,"STRONG",{});var jPr=s(aU);Cqe=r(jPr,"luke"),jPr.forEach(t),Mqe=r(m8e," \u2014 "),mB=n(m8e,"A",{href:!0});var DPr=s(mB);Eqe=r(DPr,"LukeConfig"),DPr.forEach(t),yqe=r(m8e," (LUKE model)"),m8e.forEach(t),wqe=i(T),Gm=n(T,"LI",{});var g8e=s(Gm);nU=n(g8e,"STRONG",{});var NPr=s(nU);Aqe=r(NPr,"lxmert"),NPr.forEach(t),Lqe=r(g8e," \u2014 "),gB=n(g8e,"A",{href:!0});var qPr=s(gB);Bqe=r(qPr,"LxmertConfig"),qPr.forEach(t),xqe=r(g8e," (LXMERT model)"),g8e.forEach(t),kqe=i(T),Om=n(T,"LI",{});var h8e=s(Om);sU=n(h8e,"STRONG",{});var GPr=s(sU);Rqe=r(GPr,"m2m_100"),GPr.forEach(t),Sqe=r(h8e," \u2014 "),hB=n(h8e,"A",{href:!0});var OPr=s(hB);Pqe=r(OPr,"M2M100Config"),OPr.forEach(t),$qe=r(h8e," (M2M100 model)"),h8e.forEach(t),Iqe=i(T),Xm=n(T,"LI",{});var p8e=s(Xm);lU=n(p8e,"STRONG",{});var XPr=s(lU);jqe=r(XPr,"marian"),XPr.forEach(t),Dqe=r(p8e," \u2014 "),pB=n(p8e,"A",{href:!0});var VPr=s(pB);Nqe=r(VPr,"MarianConfig"),VPr.forEach(t),qqe=r(p8e," (Marian model)"),p8e.forEach(t),Gqe=i(T),Vm=n(T,"LI",{});var _8e=s(Vm);iU=n(_8e,"STRONG",{});var zPr=s(iU);Oqe=r(zPr,"maskformer"),zPr.forEach(t),Xqe=r(_8e," \u2014 "),_B=n(_8e,"A",{href:!0});var WPr=s(_B);Vqe=r(WPr,"MaskFormerConfig"),WPr.forEach(t),zqe=r(_8e," (MaskFormer model)"),_8e.forEach(t),Wqe=i(T),zm=n(T,"LI",{});var u8e=s(zm);dU=n(u8e,"STRONG",{});var QPr=s(dU);Qqe=r(QPr,"mbart"),QPr.forEach(t),Hqe=r(u8e," \u2014 "),uB=n(u8e,"A",{href:!0});var HPr=s(uB);Uqe=r(HPr,"MBartConfig"),HPr.forEach(t),Jqe=r(u8e," (mBART model)"),u8e.forEach(t),Yqe=i(T),Wm=n(T,"LI",{});var b8e=s(Wm);cU=n(b8e,"STRONG",{});var UPr=s(cU);Kqe=r(UPr,"megatron-bert"),UPr.forEach(t),Zqe=r(b8e," \u2014 "),bB=n(b8e,"A",{href:!0});var JPr=s(bB);eGe=r(JPr,"MegatronBertConfig"),JPr.forEach(t),oGe=r(b8e," (MegatronBert model)"),b8e.forEach(t),rGe=i(T),Qm=n(T,"LI",{});var v8e=s(Qm);fU=n(v8e,"STRONG",{});var YPr=s(fU);tGe=r(YPr,"mobilebert"),YPr.forEach(t),aGe=r(v8e," \u2014 "),vB=n(v8e,"A",{href:!0});var KPr=s(vB);nGe=r(KPr,"MobileBertConfig"),KPr.forEach(t),sGe=r(v8e," (MobileBERT model)"),v8e.forEach(t),lGe=i(T),Hm=n(T,"LI",{});var T8e=s(Hm);mU=n(T8e,"STRONG",{});var ZPr=s(mU);iGe=r(ZPr,"mpnet"),ZPr.forEach(t),dGe=r(T8e," \u2014 "),TB=n(T8e,"A",{href:!0});var e$r=s(TB);cGe=r(e$r,"MPNetConfig"),e$r.forEach(t),fGe=r(T8e," (MPNet model)"),T8e.forEach(t),mGe=i(T),Um=n(T,"LI",{});var F8e=s(Um);gU=n(F8e,"STRONG",{});var o$r=s(gU);gGe=r(o$r,"mt5"),o$r.forEach(t),hGe=r(F8e," \u2014 "),FB=n(F8e,"A",{href:!0});var r$r=s(FB);pGe=r(r$r,"MT5Config"),r$r.forEach(t),_Ge=r(F8e," (mT5 model)"),F8e.forEach(t),uGe=i(T),Jm=n(T,"LI",{});var C8e=s(Jm);hU=n(C8e,"STRONG",{});var t$r=s(hU);bGe=r(t$r,"nystromformer"),t$r.forEach(t),vGe=r(C8e," \u2014 "),CB=n(C8e,"A",{href:!0});var a$r=s(CB);TGe=r(a$r,"NystromformerConfig"),a$r.forEach(t),FGe=r(C8e," (Nystromformer model)"),C8e.forEach(t),CGe=i(T),Ym=n(T,"LI",{});var M8e=s(Ym);pU=n(M8e,"STRONG",{});var n$r=s(pU);MGe=r(n$r,"openai-gpt"),n$r.forEach(t),EGe=r(M8e," \u2014 "),MB=n(M8e,"A",{href:!0});var s$r=s(MB);yGe=r(s$r,"OpenAIGPTConfig"),s$r.forEach(t),wGe=r(M8e," (OpenAI GPT model)"),M8e.forEach(t),AGe=i(T),Km=n(T,"LI",{});var E8e=s(Km);_U=n(E8e,"STRONG",{});var l$r=s(_U);LGe=r(l$r,"pegasus"),l$r.forEach(t),BGe=r(E8e," \u2014 "),EB=n(E8e,"A",{href:!0});var i$r=s(EB);xGe=r(i$r,"PegasusConfig"),i$r.forEach(t),kGe=r(E8e," (Pegasus model)"),E8e.forEach(t),RGe=i(T),Zm=n(T,"LI",{});var y8e=s(Zm);uU=n(y8e,"STRONG",{});var d$r=s(uU);SGe=r(d$r,"perceiver"),d$r.forEach(t),PGe=r(y8e," \u2014 "),yB=n(y8e,"A",{href:!0});var c$r=s(yB);$Ge=r(c$r,"PerceiverConfig"),c$r.forEach(t),IGe=r(y8e," (Perceiver model)"),y8e.forEach(t),jGe=i(T),eg=n(T,"LI",{});var w8e=s(eg);bU=n(w8e,"STRONG",{});var f$r=s(bU);DGe=r(f$r,"plbart"),f$r.forEach(t),NGe=r(w8e," \u2014 "),wB=n(w8e,"A",{href:!0});var m$r=s(wB);qGe=r(m$r,"PLBartConfig"),m$r.forEach(t),GGe=r(w8e," (PLBart model)"),w8e.forEach(t),OGe=i(T),og=n(T,"LI",{});var A8e=s(og);vU=n(A8e,"STRONG",{});var g$r=s(vU);XGe=r(g$r,"poolformer"),g$r.forEach(t),VGe=r(A8e," \u2014 "),AB=n(A8e,"A",{href:!0});var h$r=s(AB);zGe=r(h$r,"PoolFormerConfig"),h$r.forEach(t),WGe=r(A8e," (PoolFormer model)"),A8e.forEach(t),QGe=i(T),rg=n(T,"LI",{});var L8e=s(rg);TU=n(L8e,"STRONG",{});var p$r=s(TU);HGe=r(p$r,"prophetnet"),p$r.forEach(t),UGe=r(L8e," \u2014 "),LB=n(L8e,"A",{href:!0});var _$r=s(LB);JGe=r(_$r,"ProphetNetConfig"),_$r.forEach(t),YGe=r(L8e," (ProphetNet model)"),L8e.forEach(t),KGe=i(T),tg=n(T,"LI",{});var B8e=s(tg);FU=n(B8e,"STRONG",{});var u$r=s(FU);ZGe=r(u$r,"qdqbert"),u$r.forEach(t),eOe=r(B8e," \u2014 "),BB=n(B8e,"A",{href:!0});var b$r=s(BB);oOe=r(b$r,"QDQBertConfig"),b$r.forEach(t),rOe=r(B8e," (QDQBert model)"),B8e.forEach(t),tOe=i(T),ag=n(T,"LI",{});var x8e=s(ag);CU=n(x8e,"STRONG",{});var v$r=s(CU);aOe=r(v$r,"rag"),v$r.forEach(t),nOe=r(x8e," \u2014 "),xB=n(x8e,"A",{href:!0});var T$r=s(xB);sOe=r(T$r,"RagConfig"),T$r.forEach(t),lOe=r(x8e," (RAG model)"),x8e.forEach(t),iOe=i(T),ng=n(T,"LI",{});var k8e=s(ng);MU=n(k8e,"STRONG",{});var F$r=s(MU);dOe=r(F$r,"realm"),F$r.forEach(t),cOe=r(k8e," \u2014 "),kB=n(k8e,"A",{href:!0});var C$r=s(kB);fOe=r(C$r,"RealmConfig"),C$r.forEach(t),mOe=r(k8e," (Realm model)"),k8e.forEach(t),gOe=i(T),sg=n(T,"LI",{});var R8e=s(sg);EU=n(R8e,"STRONG",{});var M$r=s(EU);hOe=r(M$r,"reformer"),M$r.forEach(t),pOe=r(R8e," \u2014 "),RB=n(R8e,"A",{href:!0});var E$r=s(RB);_Oe=r(E$r,"ReformerConfig"),E$r.forEach(t),uOe=r(R8e," (Reformer model)"),R8e.forEach(t),bOe=i(T),lg=n(T,"LI",{});var S8e=s(lg);yU=n(S8e,"STRONG",{});var y$r=s(yU);vOe=r(y$r,"rembert"),y$r.forEach(t),TOe=r(S8e," \u2014 "),SB=n(S8e,"A",{href:!0});var w$r=s(SB);FOe=r(w$r,"RemBertConfig"),w$r.forEach(t),COe=r(S8e," (RemBERT model)"),S8e.forEach(t),MOe=i(T),ig=n(T,"LI",{});var P8e=s(ig);wU=n(P8e,"STRONG",{});var A$r=s(wU);EOe=r(A$r,"resnet"),A$r.forEach(t),yOe=r(P8e," \u2014 "),PB=n(P8e,"A",{href:!0});var L$r=s(PB);wOe=r(L$r,"ResNetConfig"),L$r.forEach(t),AOe=r(P8e," (ResNet model)"),P8e.forEach(t),LOe=i(T),dg=n(T,"LI",{});var $8e=s(dg);AU=n($8e,"STRONG",{});var B$r=s(AU);BOe=r(B$r,"retribert"),B$r.forEach(t),xOe=r($8e," \u2014 "),$B=n($8e,"A",{href:!0});var x$r=s($B);kOe=r(x$r,"RetriBertConfig"),x$r.forEach(t),ROe=r($8e," (RetriBERT model)"),$8e.forEach(t),SOe=i(T),cg=n(T,"LI",{});var I8e=s(cg);LU=n(I8e,"STRONG",{});var k$r=s(LU);POe=r(k$r,"roberta"),k$r.forEach(t),$Oe=r(I8e," \u2014 "),IB=n(I8e,"A",{href:!0});var R$r=s(IB);IOe=r(R$r,"RobertaConfig"),R$r.forEach(t),jOe=r(I8e," (RoBERTa model)"),I8e.forEach(t),DOe=i(T),fg=n(T,"LI",{});var j8e=s(fg);BU=n(j8e,"STRONG",{});var S$r=s(BU);NOe=r(S$r,"roformer"),S$r.forEach(t),qOe=r(j8e," \u2014 "),jB=n(j8e,"A",{href:!0});var P$r=s(jB);GOe=r(P$r,"RoFormerConfig"),P$r.forEach(t),OOe=r(j8e," (RoFormer model)"),j8e.forEach(t),XOe=i(T),mg=n(T,"LI",{});var D8e=s(mg);xU=n(D8e,"STRONG",{});var $$r=s(xU);VOe=r($$r,"segformer"),$$r.forEach(t),zOe=r(D8e," \u2014 "),DB=n(D8e,"A",{href:!0});var I$r=s(DB);WOe=r(I$r,"SegformerConfig"),I$r.forEach(t),QOe=r(D8e," (SegFormer model)"),D8e.forEach(t),HOe=i(T),gg=n(T,"LI",{});var N8e=s(gg);kU=n(N8e,"STRONG",{});var j$r=s(kU);UOe=r(j$r,"sew"),j$r.forEach(t),JOe=r(N8e," \u2014 "),NB=n(N8e,"A",{href:!0});var D$r=s(NB);YOe=r(D$r,"SEWConfig"),D$r.forEach(t),KOe=r(N8e," (SEW model)"),N8e.forEach(t),ZOe=i(T),hg=n(T,"LI",{});var q8e=s(hg);RU=n(q8e,"STRONG",{});var N$r=s(RU);eXe=r(N$r,"sew-d"),N$r.forEach(t),oXe=r(q8e," \u2014 "),qB=n(q8e,"A",{href:!0});var q$r=s(qB);rXe=r(q$r,"SEWDConfig"),q$r.forEach(t),tXe=r(q8e," (SEW-D model)"),q8e.forEach(t),aXe=i(T),pg=n(T,"LI",{});var G8e=s(pg);SU=n(G8e,"STRONG",{});var G$r=s(SU);nXe=r(G$r,"speech-encoder-decoder"),G$r.forEach(t),sXe=r(G8e," \u2014 "),GB=n(G8e,"A",{href:!0});var O$r=s(GB);lXe=r(O$r,"SpeechEncoderDecoderConfig"),O$r.forEach(t),iXe=r(G8e," (Speech Encoder decoder model)"),G8e.forEach(t),dXe=i(T),_g=n(T,"LI",{});var O8e=s(_g);PU=n(O8e,"STRONG",{});var X$r=s(PU);cXe=r(X$r,"speech_to_text"),X$r.forEach(t),fXe=r(O8e," \u2014 "),OB=n(O8e,"A",{href:!0});var V$r=s(OB);mXe=r(V$r,"Speech2TextConfig"),V$r.forEach(t),gXe=r(O8e," (Speech2Text model)"),O8e.forEach(t),hXe=i(T),ug=n(T,"LI",{});var X8e=s(ug);$U=n(X8e,"STRONG",{});var z$r=s($U);pXe=r(z$r,"speech_to_text_2"),z$r.forEach(t),_Xe=r(X8e," \u2014 "),XB=n(X8e,"A",{href:!0});var W$r=s(XB);uXe=r(W$r,"Speech2Text2Config"),W$r.forEach(t),bXe=r(X8e," (Speech2Text2 model)"),X8e.forEach(t),vXe=i(T),bg=n(T,"LI",{});var V8e=s(bg);IU=n(V8e,"STRONG",{});var Q$r=s(IU);TXe=r(Q$r,"splinter"),Q$r.forEach(t),FXe=r(V8e," \u2014 "),VB=n(V8e,"A",{href:!0});var H$r=s(VB);CXe=r(H$r,"SplinterConfig"),H$r.forEach(t),MXe=r(V8e," (Splinter model)"),V8e.forEach(t),EXe=i(T),vg=n(T,"LI",{});var z8e=s(vg);jU=n(z8e,"STRONG",{});var U$r=s(jU);yXe=r(U$r,"squeezebert"),U$r.forEach(t),wXe=r(z8e," \u2014 "),zB=n(z8e,"A",{href:!0});var J$r=s(zB);AXe=r(J$r,"SqueezeBertConfig"),J$r.forEach(t),LXe=r(z8e," (SqueezeBERT model)"),z8e.forEach(t),BXe=i(T),Tg=n(T,"LI",{});var W8e=s(Tg);DU=n(W8e,"STRONG",{});var Y$r=s(DU);xXe=r(Y$r,"swin"),Y$r.forEach(t),kXe=r(W8e," \u2014 "),WB=n(W8e,"A",{href:!0});var K$r=s(WB);RXe=r(K$r,"SwinConfig"),K$r.forEach(t),SXe=r(W8e," (Swin model)"),W8e.forEach(t),PXe=i(T),Fg=n(T,"LI",{});var Q8e=s(Fg);NU=n(Q8e,"STRONG",{});var Z$r=s(NU);$Xe=r(Z$r,"t5"),Z$r.forEach(t),IXe=r(Q8e," \u2014 "),QB=n(Q8e,"A",{href:!0});var eIr=s(QB);jXe=r(eIr,"T5Config"),eIr.forEach(t),DXe=r(Q8e," (T5 model)"),Q8e.forEach(t),NXe=i(T),Cg=n(T,"LI",{});var H8e=s(Cg);qU=n(H8e,"STRONG",{});var oIr=s(qU);qXe=r(oIr,"tapas"),oIr.forEach(t),GXe=r(H8e," \u2014 "),HB=n(H8e,"A",{href:!0});var rIr=s(HB);OXe=r(rIr,"TapasConfig"),rIr.forEach(t),XXe=r(H8e," (TAPAS model)"),H8e.forEach(t),VXe=i(T),Mg=n(T,"LI",{});var U8e=s(Mg);GU=n(U8e,"STRONG",{});var tIr=s(GU);zXe=r(tIr,"transfo-xl"),tIr.forEach(t),WXe=r(U8e," \u2014 "),UB=n(U8e,"A",{href:!0});var aIr=s(UB);QXe=r(aIr,"TransfoXLConfig"),aIr.forEach(t),HXe=r(U8e," (Transformer-XL model)"),U8e.forEach(t),UXe=i(T),Eg=n(T,"LI",{});var J8e=s(Eg);OU=n(J8e,"STRONG",{});var nIr=s(OU);JXe=r(nIr,"trocr"),nIr.forEach(t),YXe=r(J8e," \u2014 "),JB=n(J8e,"A",{href:!0});var sIr=s(JB);KXe=r(sIr,"TrOCRConfig"),sIr.forEach(t),ZXe=r(J8e," (TrOCR model)"),J8e.forEach(t),eVe=i(T),yg=n(T,"LI",{});var Y8e=s(yg);XU=n(Y8e,"STRONG",{});var lIr=s(XU);oVe=r(lIr,"unispeech"),lIr.forEach(t),rVe=r(Y8e," \u2014 "),YB=n(Y8e,"A",{href:!0});var iIr=s(YB);tVe=r(iIr,"UniSpeechConfig"),iIr.forEach(t),aVe=r(Y8e," (UniSpeech model)"),Y8e.forEach(t),nVe=i(T),wg=n(T,"LI",{});var K8e=s(wg);VU=n(K8e,"STRONG",{});var dIr=s(VU);sVe=r(dIr,"unispeech-sat"),dIr.forEach(t),lVe=r(K8e," \u2014 "),KB=n(K8e,"A",{href:!0});var cIr=s(KB);iVe=r(cIr,"UniSpeechSatConfig"),cIr.forEach(t),dVe=r(K8e," (UniSpeechSat model)"),K8e.forEach(t),cVe=i(T),Ag=n(T,"LI",{});var Z8e=s(Ag);zU=n(Z8e,"STRONG",{});var fIr=s(zU);fVe=r(fIr,"van"),fIr.forEach(t),mVe=r(Z8e," \u2014 "),ZB=n(Z8e,"A",{href:!0});var mIr=s(ZB);gVe=r(mIr,"VanConfig"),mIr.forEach(t),hVe=r(Z8e," (VAN model)"),Z8e.forEach(t),pVe=i(T),Lg=n(T,"LI",{});var eFe=s(Lg);WU=n(eFe,"STRONG",{});var gIr=s(WU);_Ve=r(gIr,"vilt"),gIr.forEach(t),uVe=r(eFe," \u2014 "),ex=n(eFe,"A",{href:!0});var hIr=s(ex);bVe=r(hIr,"ViltConfig"),hIr.forEach(t),vVe=r(eFe," (ViLT model)"),eFe.forEach(t),TVe=i(T),Bg=n(T,"LI",{});var oFe=s(Bg);QU=n(oFe,"STRONG",{});var pIr=s(QU);FVe=r(pIr,"vision-encoder-decoder"),pIr.forEach(t),CVe=r(oFe," \u2014 "),ox=n(oFe,"A",{href:!0});var _Ir=s(ox);MVe=r(_Ir,"VisionEncoderDecoderConfig"),_Ir.forEach(t),EVe=r(oFe," (Vision Encoder decoder model)"),oFe.forEach(t),yVe=i(T),xg=n(T,"LI",{});var rFe=s(xg);HU=n(rFe,"STRONG",{});var uIr=s(HU);wVe=r(uIr,"vision-text-dual-encoder"),uIr.forEach(t),AVe=r(rFe," \u2014 "),rx=n(rFe,"A",{href:!0});var bIr=s(rx);LVe=r(bIr,"VisionTextDualEncoderConfig"),bIr.forEach(t),BVe=r(rFe," (VisionTextDualEncoder model)"),rFe.forEach(t),xVe=i(T),kg=n(T,"LI",{});var tFe=s(kg);UU=n(tFe,"STRONG",{});var vIr=s(UU);kVe=r(vIr,"visual_bert"),vIr.forEach(t),RVe=r(tFe," \u2014 "),tx=n(tFe,"A",{href:!0});var TIr=s(tx);SVe=r(TIr,"VisualBertConfig"),TIr.forEach(t),PVe=r(tFe," (VisualBert model)"),tFe.forEach(t),$Ve=i(T),Rg=n(T,"LI",{});var aFe=s(Rg);JU=n(aFe,"STRONG",{});var FIr=s(JU);IVe=r(FIr,"vit"),FIr.forEach(t),jVe=r(aFe," \u2014 "),ax=n(aFe,"A",{href:!0});var CIr=s(ax);DVe=r(CIr,"ViTConfig"),CIr.forEach(t),NVe=r(aFe," (ViT model)"),aFe.forEach(t),qVe=i(T),Sg=n(T,"LI",{});var nFe=s(Sg);YU=n(nFe,"STRONG",{});var MIr=s(YU);GVe=r(MIr,"vit_mae"),MIr.forEach(t),OVe=r(nFe," \u2014 "),nx=n(nFe,"A",{href:!0});var EIr=s(nx);XVe=r(EIr,"ViTMAEConfig"),EIr.forEach(t),VVe=r(nFe," (ViTMAE model)"),nFe.forEach(t),zVe=i(T),Pg=n(T,"LI",{});var sFe=s(Pg);KU=n(sFe,"STRONG",{});var yIr=s(KU);WVe=r(yIr,"wav2vec2"),yIr.forEach(t),QVe=r(sFe," \u2014 "),sx=n(sFe,"A",{href:!0});var wIr=s(sx);HVe=r(wIr,"Wav2Vec2Config"),wIr.forEach(t),UVe=r(sFe," (Wav2Vec2 model)"),sFe.forEach(t),JVe=i(T),$g=n(T,"LI",{});var lFe=s($g);ZU=n(lFe,"STRONG",{});var AIr=s(ZU);YVe=r(AIr,"wavlm"),AIr.forEach(t),KVe=r(lFe," \u2014 "),lx=n(lFe,"A",{href:!0});var LIr=s(lx);ZVe=r(LIr,"WavLMConfig"),LIr.forEach(t),eze=r(lFe," (WavLM model)"),lFe.forEach(t),oze=i(T),Ig=n(T,"LI",{});var iFe=s(Ig);eJ=n(iFe,"STRONG",{});var BIr=s(eJ);rze=r(BIr,"xglm"),BIr.forEach(t),tze=r(iFe," \u2014 "),ix=n(iFe,"A",{href:!0});var xIr=s(ix);aze=r(xIr,"XGLMConfig"),xIr.forEach(t),nze=r(iFe," (XGLM model)"),iFe.forEach(t),sze=i(T),jg=n(T,"LI",{});var dFe=s(jg);oJ=n(dFe,"STRONG",{});var kIr=s(oJ);lze=r(kIr,"xlm"),kIr.forEach(t),ize=r(dFe," \u2014 "),dx=n(dFe,"A",{href:!0});var RIr=s(dx);dze=r(RIr,"XLMConfig"),RIr.forEach(t),cze=r(dFe," (XLM model)"),dFe.forEach(t),fze=i(T),Dg=n(T,"LI",{});var cFe=s(Dg);rJ=n(cFe,"STRONG",{});var SIr=s(rJ);mze=r(SIr,"xlm-prophetnet"),SIr.forEach(t),gze=r(cFe," \u2014 "),cx=n(cFe,"A",{href:!0});var PIr=s(cx);hze=r(PIr,"XLMProphetNetConfig"),PIr.forEach(t),pze=r(cFe," (XLMProphetNet model)"),cFe.forEach(t),_ze=i(T),Ng=n(T,"LI",{});var fFe=s(Ng);tJ=n(fFe,"STRONG",{});var $Ir=s(tJ);uze=r($Ir,"xlm-roberta"),$Ir.forEach(t),bze=r(fFe," \u2014 "),fx=n(fFe,"A",{href:!0});var IIr=s(fx);vze=r(IIr,"XLMRobertaConfig"),IIr.forEach(t),Tze=r(fFe," (XLM-RoBERTa model)"),fFe.forEach(t),Fze=i(T),qg=n(T,"LI",{});var mFe=s(qg);aJ=n(mFe,"STRONG",{});var jIr=s(aJ);Cze=r(jIr,"xlm-roberta-xl"),jIr.forEach(t),Mze=r(mFe," \u2014 "),mx=n(mFe,"A",{href:!0});var DIr=s(mx);Eze=r(DIr,"XLMRobertaXLConfig"),DIr.forEach(t),yze=r(mFe," (XLM-RoBERTa-XL model)"),mFe.forEach(t),wze=i(T),Gg=n(T,"LI",{});var gFe=s(Gg);nJ=n(gFe,"STRONG",{});var NIr=s(nJ);Aze=r(NIr,"xlnet"),NIr.forEach(t),Lze=r(gFe," \u2014 "),gx=n(gFe,"A",{href:!0});var qIr=s(gx);Bze=r(qIr,"XLNetConfig"),qIr.forEach(t),xze=r(gFe," (XLNet model)"),gFe.forEach(t),kze=i(T),Og=n(T,"LI",{});var hFe=s(Og);sJ=n(hFe,"STRONG",{});var GIr=s(sJ);Rze=r(GIr,"yoso"),GIr.forEach(t),Sze=r(hFe," \u2014 "),hx=n(hFe,"A",{href:!0});var OIr=s(hx);Pze=r(OIr,"YosoConfig"),OIr.forEach(t),$ze=r(hFe," (YOSO model)"),hFe.forEach(t),T.forEach(t),Ize=i(_a),lJ=n(_a,"P",{});var XIr=s(lJ);jze=r(XIr,"Examples:"),XIr.forEach(t),Dze=i(_a),m(B4.$$.fragment,_a),_a.forEach(t),Nze=i(Qs),Xg=n(Qs,"DIV",{class:!0});var YSe=s(Xg);m(x4.$$.fragment,YSe),qze=i(YSe),iJ=n(YSe,"P",{});var VIr=s(iJ);Gze=r(VIr,"Register a new configuration for this class."),VIr.forEach(t),YSe.forEach(t),Qs.forEach(t),Qke=i(d),Zi=n(d,"H2",{class:!0});var KSe=s(Zi);Vg=n(KSe,"A",{id:!0,class:!0,href:!0});var zIr=s(Vg);dJ=n(zIr,"SPAN",{});var WIr=s(dJ);m(k4.$$.fragment,WIr),WIr.forEach(t),zIr.forEach(t),Oze=i(KSe),cJ=n(KSe,"SPAN",{});var QIr=s(cJ);Xze=r(QIr,"AutoTokenizer"),QIr.forEach(t),KSe.forEach(t),Hke=i(d),Ho=n(d,"DIV",{class:!0});var Hs=s(Ho);m(R4.$$.fragment,Hs),Vze=i(Hs),S4=n(Hs,"P",{});var ZSe=s(S4);zze=r(ZSe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),px=n(ZSe,"A",{href:!0});var HIr=s(px);Wze=r(HIr,"AutoTokenizer.from_pretrained()"),HIr.forEach(t),Qze=r(ZSe," class method."),ZSe.forEach(t),Hze=i(Hs),P4=n(Hs,"P",{});var ePe=s(P4);Uze=r(ePe,"This class cannot be instantiated directly using "),fJ=n(ePe,"CODE",{});var UIr=s(fJ);Jze=r(UIr,"__init__()"),UIr.forEach(t),Yze=r(ePe," (throws an error)."),ePe.forEach(t),Kze=i(Hs),go=n(Hs,"DIV",{class:!0});var ua=s(go);m($4.$$.fragment,ua),Zze=i(ua),mJ=n(ua,"P",{});var JIr=s(mJ);eWe=r(JIr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),JIr.forEach(t),oWe=i(ua),Wa=n(ua,"P",{});var vM=s(Wa);rWe=r(vM,"The tokenizer class to instantiate is selected based on the "),gJ=n(vM,"CODE",{});var YIr=s(gJ);tWe=r(YIr,"model_type"),YIr.forEach(t),aWe=r(vM,` property of the config object (either
passed as an argument or loaded from `),hJ=n(vM,"CODE",{});var KIr=s(hJ);nWe=r(KIr,"pretrained_model_name_or_path"),KIr.forEach(t),sWe=r(vM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pJ=n(vM,"CODE",{});var ZIr=s(pJ);lWe=r(ZIr,"pretrained_model_name_or_path"),ZIr.forEach(t),iWe=r(vM,":"),vM.forEach(t),dWe=i(ua),E=n(ua,"UL",{});var y=s(E);Yn=n(y,"LI",{});var C7=s(Yn);_J=n(C7,"STRONG",{});var ejr=s(_J);cWe=r(ejr,"albert"),ejr.forEach(t),fWe=r(C7," \u2014 "),_x=n(C7,"A",{href:!0});var ojr=s(_x);mWe=r(ojr,"AlbertTokenizer"),ojr.forEach(t),gWe=r(C7," or "),ux=n(C7,"A",{href:!0});var rjr=s(ux);hWe=r(rjr,"AlbertTokenizerFast"),rjr.forEach(t),pWe=r(C7," (ALBERT model)"),C7.forEach(t),_We=i(y),Kn=n(y,"LI",{});var M7=s(Kn);uJ=n(M7,"STRONG",{});var tjr=s(uJ);uWe=r(tjr,"bart"),tjr.forEach(t),bWe=r(M7," \u2014 "),bx=n(M7,"A",{href:!0});var ajr=s(bx);vWe=r(ajr,"BartTokenizer"),ajr.forEach(t),TWe=r(M7," or "),vx=n(M7,"A",{href:!0});var njr=s(vx);FWe=r(njr,"BartTokenizerFast"),njr.forEach(t),CWe=r(M7," (BART model)"),M7.forEach(t),MWe=i(y),Zn=n(y,"LI",{});var E7=s(Zn);bJ=n(E7,"STRONG",{});var sjr=s(bJ);EWe=r(sjr,"barthez"),sjr.forEach(t),yWe=r(E7," \u2014 "),Tx=n(E7,"A",{href:!0});var ljr=s(Tx);wWe=r(ljr,"BarthezTokenizer"),ljr.forEach(t),AWe=r(E7," or "),Fx=n(E7,"A",{href:!0});var ijr=s(Fx);LWe=r(ijr,"BarthezTokenizerFast"),ijr.forEach(t),BWe=r(E7," (BARThez model)"),E7.forEach(t),xWe=i(y),zg=n(y,"LI",{});var pFe=s(zg);vJ=n(pFe,"STRONG",{});var djr=s(vJ);kWe=r(djr,"bartpho"),djr.forEach(t),RWe=r(pFe," \u2014 "),Cx=n(pFe,"A",{href:!0});var cjr=s(Cx);SWe=r(cjr,"BartphoTokenizer"),cjr.forEach(t),PWe=r(pFe," (BARTpho model)"),pFe.forEach(t),$We=i(y),es=n(y,"LI",{});var y7=s(es);TJ=n(y7,"STRONG",{});var fjr=s(TJ);IWe=r(fjr,"bert"),fjr.forEach(t),jWe=r(y7," \u2014 "),Mx=n(y7,"A",{href:!0});var mjr=s(Mx);DWe=r(mjr,"BertTokenizer"),mjr.forEach(t),NWe=r(y7," or "),Ex=n(y7,"A",{href:!0});var gjr=s(Ex);qWe=r(gjr,"BertTokenizerFast"),gjr.forEach(t),GWe=r(y7," (BERT model)"),y7.forEach(t),OWe=i(y),Wg=n(y,"LI",{});var _Fe=s(Wg);FJ=n(_Fe,"STRONG",{});var hjr=s(FJ);XWe=r(hjr,"bert-generation"),hjr.forEach(t),VWe=r(_Fe," \u2014 "),yx=n(_Fe,"A",{href:!0});var pjr=s(yx);zWe=r(pjr,"BertGenerationTokenizer"),pjr.forEach(t),WWe=r(_Fe," (Bert Generation model)"),_Fe.forEach(t),QWe=i(y),Qg=n(y,"LI",{});var uFe=s(Qg);CJ=n(uFe,"STRONG",{});var _jr=s(CJ);HWe=r(_jr,"bert-japanese"),_jr.forEach(t),UWe=r(uFe," \u2014 "),wx=n(uFe,"A",{href:!0});var ujr=s(wx);JWe=r(ujr,"BertJapaneseTokenizer"),ujr.forEach(t),YWe=r(uFe," (BertJapanese model)"),uFe.forEach(t),KWe=i(y),Hg=n(y,"LI",{});var bFe=s(Hg);MJ=n(bFe,"STRONG",{});var bjr=s(MJ);ZWe=r(bjr,"bertweet"),bjr.forEach(t),eQe=r(bFe," \u2014 "),Ax=n(bFe,"A",{href:!0});var vjr=s(Ax);oQe=r(vjr,"BertweetTokenizer"),vjr.forEach(t),rQe=r(bFe," (Bertweet model)"),bFe.forEach(t),tQe=i(y),os=n(y,"LI",{});var w7=s(os);EJ=n(w7,"STRONG",{});var Tjr=s(EJ);aQe=r(Tjr,"big_bird"),Tjr.forEach(t),nQe=r(w7," \u2014 "),Lx=n(w7,"A",{href:!0});var Fjr=s(Lx);sQe=r(Fjr,"BigBirdTokenizer"),Fjr.forEach(t),lQe=r(w7," or "),Bx=n(w7,"A",{href:!0});var Cjr=s(Bx);iQe=r(Cjr,"BigBirdTokenizerFast"),Cjr.forEach(t),dQe=r(w7," (BigBird model)"),w7.forEach(t),cQe=i(y),rs=n(y,"LI",{});var A7=s(rs);yJ=n(A7,"STRONG",{});var Mjr=s(yJ);fQe=r(Mjr,"bigbird_pegasus"),Mjr.forEach(t),mQe=r(A7," \u2014 "),xx=n(A7,"A",{href:!0});var Ejr=s(xx);gQe=r(Ejr,"PegasusTokenizer"),Ejr.forEach(t),hQe=r(A7," or "),kx=n(A7,"A",{href:!0});var yjr=s(kx);pQe=r(yjr,"PegasusTokenizerFast"),yjr.forEach(t),_Qe=r(A7," (BigBirdPegasus model)"),A7.forEach(t),uQe=i(y),ts=n(y,"LI",{});var L7=s(ts);wJ=n(L7,"STRONG",{});var wjr=s(wJ);bQe=r(wjr,"blenderbot"),wjr.forEach(t),vQe=r(L7," \u2014 "),Rx=n(L7,"A",{href:!0});var Ajr=s(Rx);TQe=r(Ajr,"BlenderbotTokenizer"),Ajr.forEach(t),FQe=r(L7," or "),Sx=n(L7,"A",{href:!0});var Ljr=s(Sx);CQe=r(Ljr,"BlenderbotTokenizerFast"),Ljr.forEach(t),MQe=r(L7," (Blenderbot model)"),L7.forEach(t),EQe=i(y),Ug=n(y,"LI",{});var vFe=s(Ug);AJ=n(vFe,"STRONG",{});var Bjr=s(AJ);yQe=r(Bjr,"blenderbot-small"),Bjr.forEach(t),wQe=r(vFe," \u2014 "),Px=n(vFe,"A",{href:!0});var xjr=s(Px);AQe=r(xjr,"BlenderbotSmallTokenizer"),xjr.forEach(t),LQe=r(vFe," (BlenderbotSmall model)"),vFe.forEach(t),BQe=i(y),Jg=n(y,"LI",{});var TFe=s(Jg);LJ=n(TFe,"STRONG",{});var kjr=s(LJ);xQe=r(kjr,"byt5"),kjr.forEach(t),kQe=r(TFe," \u2014 "),$x=n(TFe,"A",{href:!0});var Rjr=s($x);RQe=r(Rjr,"ByT5Tokenizer"),Rjr.forEach(t),SQe=r(TFe," (ByT5 model)"),TFe.forEach(t),PQe=i(y),as=n(y,"LI",{});var B7=s(as);BJ=n(B7,"STRONG",{});var Sjr=s(BJ);$Qe=r(Sjr,"camembert"),Sjr.forEach(t),IQe=r(B7," \u2014 "),Ix=n(B7,"A",{href:!0});var Pjr=s(Ix);jQe=r(Pjr,"CamembertTokenizer"),Pjr.forEach(t),DQe=r(B7," or "),jx=n(B7,"A",{href:!0});var $jr=s(jx);NQe=r($jr,"CamembertTokenizerFast"),$jr.forEach(t),qQe=r(B7," (CamemBERT model)"),B7.forEach(t),GQe=i(y),Yg=n(y,"LI",{});var FFe=s(Yg);xJ=n(FFe,"STRONG",{});var Ijr=s(xJ);OQe=r(Ijr,"canine"),Ijr.forEach(t),XQe=r(FFe," \u2014 "),Dx=n(FFe,"A",{href:!0});var jjr=s(Dx);VQe=r(jjr,"CanineTokenizer"),jjr.forEach(t),zQe=r(FFe," (Canine model)"),FFe.forEach(t),WQe=i(y),ns=n(y,"LI",{});var x7=s(ns);kJ=n(x7,"STRONG",{});var Djr=s(kJ);QQe=r(Djr,"clip"),Djr.forEach(t),HQe=r(x7," \u2014 "),Nx=n(x7,"A",{href:!0});var Njr=s(Nx);UQe=r(Njr,"CLIPTokenizer"),Njr.forEach(t),JQe=r(x7," or "),qx=n(x7,"A",{href:!0});var qjr=s(qx);YQe=r(qjr,"CLIPTokenizerFast"),qjr.forEach(t),KQe=r(x7," (CLIP model)"),x7.forEach(t),ZQe=i(y),ss=n(y,"LI",{});var k7=s(ss);RJ=n(k7,"STRONG",{});var Gjr=s(RJ);eHe=r(Gjr,"convbert"),Gjr.forEach(t),oHe=r(k7," \u2014 "),Gx=n(k7,"A",{href:!0});var Ojr=s(Gx);rHe=r(Ojr,"ConvBertTokenizer"),Ojr.forEach(t),tHe=r(k7," or "),Ox=n(k7,"A",{href:!0});var Xjr=s(Ox);aHe=r(Xjr,"ConvBertTokenizerFast"),Xjr.forEach(t),nHe=r(k7," (ConvBERT model)"),k7.forEach(t),sHe=i(y),ls=n(y,"LI",{});var R7=s(ls);SJ=n(R7,"STRONG",{});var Vjr=s(SJ);lHe=r(Vjr,"cpm"),Vjr.forEach(t),iHe=r(R7," \u2014 "),Xx=n(R7,"A",{href:!0});var zjr=s(Xx);dHe=r(zjr,"CpmTokenizer"),zjr.forEach(t),cHe=r(R7," or "),PJ=n(R7,"CODE",{});var Wjr=s(PJ);fHe=r(Wjr,"CpmTokenizerFast"),Wjr.forEach(t),mHe=r(R7," (CPM model)"),R7.forEach(t),gHe=i(y),Kg=n(y,"LI",{});var CFe=s(Kg);$J=n(CFe,"STRONG",{});var Qjr=s($J);hHe=r(Qjr,"ctrl"),Qjr.forEach(t),pHe=r(CFe," \u2014 "),Vx=n(CFe,"A",{href:!0});var Hjr=s(Vx);_He=r(Hjr,"CTRLTokenizer"),Hjr.forEach(t),uHe=r(CFe," (CTRL model)"),CFe.forEach(t),bHe=i(y),is=n(y,"LI",{});var S7=s(is);IJ=n(S7,"STRONG",{});var Ujr=s(IJ);vHe=r(Ujr,"deberta"),Ujr.forEach(t),THe=r(S7," \u2014 "),zx=n(S7,"A",{href:!0});var Jjr=s(zx);FHe=r(Jjr,"DebertaTokenizer"),Jjr.forEach(t),CHe=r(S7," or "),Wx=n(S7,"A",{href:!0});var Yjr=s(Wx);MHe=r(Yjr,"DebertaTokenizerFast"),Yjr.forEach(t),EHe=r(S7," (DeBERTa model)"),S7.forEach(t),yHe=i(y),Zg=n(y,"LI",{});var MFe=s(Zg);jJ=n(MFe,"STRONG",{});var Kjr=s(jJ);wHe=r(Kjr,"deberta-v2"),Kjr.forEach(t),AHe=r(MFe," \u2014 "),Qx=n(MFe,"A",{href:!0});var Zjr=s(Qx);LHe=r(Zjr,"DebertaV2Tokenizer"),Zjr.forEach(t),BHe=r(MFe," (DeBERTa-v2 model)"),MFe.forEach(t),xHe=i(y),ds=n(y,"LI",{});var P7=s(ds);DJ=n(P7,"STRONG",{});var eDr=s(DJ);kHe=r(eDr,"distilbert"),eDr.forEach(t),RHe=r(P7," \u2014 "),Hx=n(P7,"A",{href:!0});var oDr=s(Hx);SHe=r(oDr,"DistilBertTokenizer"),oDr.forEach(t),PHe=r(P7," or "),Ux=n(P7,"A",{href:!0});var rDr=s(Ux);$He=r(rDr,"DistilBertTokenizerFast"),rDr.forEach(t),IHe=r(P7," (DistilBERT model)"),P7.forEach(t),jHe=i(y),cs=n(y,"LI",{});var $7=s(cs);NJ=n($7,"STRONG",{});var tDr=s(NJ);DHe=r(tDr,"dpr"),tDr.forEach(t),NHe=r($7," \u2014 "),Jx=n($7,"A",{href:!0});var aDr=s(Jx);qHe=r(aDr,"DPRQuestionEncoderTokenizer"),aDr.forEach(t),GHe=r($7," or "),Yx=n($7,"A",{href:!0});var nDr=s(Yx);OHe=r(nDr,"DPRQuestionEncoderTokenizerFast"),nDr.forEach(t),XHe=r($7," (DPR model)"),$7.forEach(t),VHe=i(y),fs=n(y,"LI",{});var I7=s(fs);qJ=n(I7,"STRONG",{});var sDr=s(qJ);zHe=r(sDr,"electra"),sDr.forEach(t),WHe=r(I7," \u2014 "),Kx=n(I7,"A",{href:!0});var lDr=s(Kx);QHe=r(lDr,"ElectraTokenizer"),lDr.forEach(t),HHe=r(I7," or "),Zx=n(I7,"A",{href:!0});var iDr=s(Zx);UHe=r(iDr,"ElectraTokenizerFast"),iDr.forEach(t),JHe=r(I7," (ELECTRA model)"),I7.forEach(t),YHe=i(y),eh=n(y,"LI",{});var EFe=s(eh);GJ=n(EFe,"STRONG",{});var dDr=s(GJ);KHe=r(dDr,"flaubert"),dDr.forEach(t),ZHe=r(EFe," \u2014 "),ek=n(EFe,"A",{href:!0});var cDr=s(ek);eUe=r(cDr,"FlaubertTokenizer"),cDr.forEach(t),oUe=r(EFe," (FlauBERT model)"),EFe.forEach(t),rUe=i(y),ms=n(y,"LI",{});var j7=s(ms);OJ=n(j7,"STRONG",{});var fDr=s(OJ);tUe=r(fDr,"fnet"),fDr.forEach(t),aUe=r(j7," \u2014 "),ok=n(j7,"A",{href:!0});var mDr=s(ok);nUe=r(mDr,"FNetTokenizer"),mDr.forEach(t),sUe=r(j7," or "),rk=n(j7,"A",{href:!0});var gDr=s(rk);lUe=r(gDr,"FNetTokenizerFast"),gDr.forEach(t),iUe=r(j7," (FNet model)"),j7.forEach(t),dUe=i(y),oh=n(y,"LI",{});var yFe=s(oh);XJ=n(yFe,"STRONG",{});var hDr=s(XJ);cUe=r(hDr,"fsmt"),hDr.forEach(t),fUe=r(yFe," \u2014 "),tk=n(yFe,"A",{href:!0});var pDr=s(tk);mUe=r(pDr,"FSMTTokenizer"),pDr.forEach(t),gUe=r(yFe," (FairSeq Machine-Translation model)"),yFe.forEach(t),hUe=i(y),gs=n(y,"LI",{});var D7=s(gs);VJ=n(D7,"STRONG",{});var _Dr=s(VJ);pUe=r(_Dr,"funnel"),_Dr.forEach(t),_Ue=r(D7," \u2014 "),ak=n(D7,"A",{href:!0});var uDr=s(ak);uUe=r(uDr,"FunnelTokenizer"),uDr.forEach(t),bUe=r(D7," or "),nk=n(D7,"A",{href:!0});var bDr=s(nk);vUe=r(bDr,"FunnelTokenizerFast"),bDr.forEach(t),TUe=r(D7," (Funnel Transformer model)"),D7.forEach(t),FUe=i(y),hs=n(y,"LI",{});var N7=s(hs);zJ=n(N7,"STRONG",{});var vDr=s(zJ);CUe=r(vDr,"gpt2"),vDr.forEach(t),MUe=r(N7," \u2014 "),sk=n(N7,"A",{href:!0});var TDr=s(sk);EUe=r(TDr,"GPT2Tokenizer"),TDr.forEach(t),yUe=r(N7," or "),lk=n(N7,"A",{href:!0});var FDr=s(lk);wUe=r(FDr,"GPT2TokenizerFast"),FDr.forEach(t),AUe=r(N7," (OpenAI GPT-2 model)"),N7.forEach(t),LUe=i(y),ps=n(y,"LI",{});var q7=s(ps);WJ=n(q7,"STRONG",{});var CDr=s(WJ);BUe=r(CDr,"gpt_neo"),CDr.forEach(t),xUe=r(q7," \u2014 "),ik=n(q7,"A",{href:!0});var MDr=s(ik);kUe=r(MDr,"GPT2Tokenizer"),MDr.forEach(t),RUe=r(q7," or "),dk=n(q7,"A",{href:!0});var EDr=s(dk);SUe=r(EDr,"GPT2TokenizerFast"),EDr.forEach(t),PUe=r(q7," (GPT Neo model)"),q7.forEach(t),$Ue=i(y),_s=n(y,"LI",{});var G7=s(_s);QJ=n(G7,"STRONG",{});var yDr=s(QJ);IUe=r(yDr,"herbert"),yDr.forEach(t),jUe=r(G7," \u2014 "),ck=n(G7,"A",{href:!0});var wDr=s(ck);DUe=r(wDr,"HerbertTokenizer"),wDr.forEach(t),NUe=r(G7," or "),fk=n(G7,"A",{href:!0});var ADr=s(fk);qUe=r(ADr,"HerbertTokenizerFast"),ADr.forEach(t),GUe=r(G7," (HerBERT model)"),G7.forEach(t),OUe=i(y),rh=n(y,"LI",{});var wFe=s(rh);HJ=n(wFe,"STRONG",{});var LDr=s(HJ);XUe=r(LDr,"hubert"),LDr.forEach(t),VUe=r(wFe," \u2014 "),mk=n(wFe,"A",{href:!0});var BDr=s(mk);zUe=r(BDr,"Wav2Vec2CTCTokenizer"),BDr.forEach(t),WUe=r(wFe," (Hubert model)"),wFe.forEach(t),QUe=i(y),us=n(y,"LI",{});var O7=s(us);UJ=n(O7,"STRONG",{});var xDr=s(UJ);HUe=r(xDr,"ibert"),xDr.forEach(t),UUe=r(O7," \u2014 "),gk=n(O7,"A",{href:!0});var kDr=s(gk);JUe=r(kDr,"RobertaTokenizer"),kDr.forEach(t),YUe=r(O7," or "),hk=n(O7,"A",{href:!0});var RDr=s(hk);KUe=r(RDr,"RobertaTokenizerFast"),RDr.forEach(t),ZUe=r(O7," (I-BERT model)"),O7.forEach(t),eJe=i(y),bs=n(y,"LI",{});var X7=s(bs);JJ=n(X7,"STRONG",{});var SDr=s(JJ);oJe=r(SDr,"layoutlm"),SDr.forEach(t),rJe=r(X7," \u2014 "),pk=n(X7,"A",{href:!0});var PDr=s(pk);tJe=r(PDr,"LayoutLMTokenizer"),PDr.forEach(t),aJe=r(X7," or "),_k=n(X7,"A",{href:!0});var $Dr=s(_k);nJe=r($Dr,"LayoutLMTokenizerFast"),$Dr.forEach(t),sJe=r(X7," (LayoutLM model)"),X7.forEach(t),lJe=i(y),vs=n(y,"LI",{});var V7=s(vs);YJ=n(V7,"STRONG",{});var IDr=s(YJ);iJe=r(IDr,"layoutlmv2"),IDr.forEach(t),dJe=r(V7," \u2014 "),uk=n(V7,"A",{href:!0});var jDr=s(uk);cJe=r(jDr,"LayoutLMv2Tokenizer"),jDr.forEach(t),fJe=r(V7," or "),bk=n(V7,"A",{href:!0});var DDr=s(bk);mJe=r(DDr,"LayoutLMv2TokenizerFast"),DDr.forEach(t),gJe=r(V7," (LayoutLMv2 model)"),V7.forEach(t),hJe=i(y),Ts=n(y,"LI",{});var z7=s(Ts);KJ=n(z7,"STRONG",{});var NDr=s(KJ);pJe=r(NDr,"layoutxlm"),NDr.forEach(t),_Je=r(z7," \u2014 "),vk=n(z7,"A",{href:!0});var qDr=s(vk);uJe=r(qDr,"LayoutXLMTokenizer"),qDr.forEach(t),bJe=r(z7," or "),Tk=n(z7,"A",{href:!0});var GDr=s(Tk);vJe=r(GDr,"LayoutXLMTokenizerFast"),GDr.forEach(t),TJe=r(z7," (LayoutXLM model)"),z7.forEach(t),FJe=i(y),Fs=n(y,"LI",{});var W7=s(Fs);ZJ=n(W7,"STRONG",{});var ODr=s(ZJ);CJe=r(ODr,"led"),ODr.forEach(t),MJe=r(W7," \u2014 "),Fk=n(W7,"A",{href:!0});var XDr=s(Fk);EJe=r(XDr,"LEDTokenizer"),XDr.forEach(t),yJe=r(W7," or "),Ck=n(W7,"A",{href:!0});var VDr=s(Ck);wJe=r(VDr,"LEDTokenizerFast"),VDr.forEach(t),AJe=r(W7," (LED model)"),W7.forEach(t),LJe=i(y),Cs=n(y,"LI",{});var Q7=s(Cs);eY=n(Q7,"STRONG",{});var zDr=s(eY);BJe=r(zDr,"longformer"),zDr.forEach(t),xJe=r(Q7," \u2014 "),Mk=n(Q7,"A",{href:!0});var WDr=s(Mk);kJe=r(WDr,"LongformerTokenizer"),WDr.forEach(t),RJe=r(Q7," or "),Ek=n(Q7,"A",{href:!0});var QDr=s(Ek);SJe=r(QDr,"LongformerTokenizerFast"),QDr.forEach(t),PJe=r(Q7," (Longformer model)"),Q7.forEach(t),$Je=i(y),th=n(y,"LI",{});var AFe=s(th);oY=n(AFe,"STRONG",{});var HDr=s(oY);IJe=r(HDr,"luke"),HDr.forEach(t),jJe=r(AFe," \u2014 "),yk=n(AFe,"A",{href:!0});var UDr=s(yk);DJe=r(UDr,"LukeTokenizer"),UDr.forEach(t),NJe=r(AFe," (LUKE model)"),AFe.forEach(t),qJe=i(y),Ms=n(y,"LI",{});var H7=s(Ms);rY=n(H7,"STRONG",{});var JDr=s(rY);GJe=r(JDr,"lxmert"),JDr.forEach(t),OJe=r(H7," \u2014 "),wk=n(H7,"A",{href:!0});var YDr=s(wk);XJe=r(YDr,"LxmertTokenizer"),YDr.forEach(t),VJe=r(H7," or "),Ak=n(H7,"A",{href:!0});var KDr=s(Ak);zJe=r(KDr,"LxmertTokenizerFast"),KDr.forEach(t),WJe=r(H7," (LXMERT model)"),H7.forEach(t),QJe=i(y),ah=n(y,"LI",{});var LFe=s(ah);tY=n(LFe,"STRONG",{});var ZDr=s(tY);HJe=r(ZDr,"m2m_100"),ZDr.forEach(t),UJe=r(LFe," \u2014 "),Lk=n(LFe,"A",{href:!0});var eNr=s(Lk);JJe=r(eNr,"M2M100Tokenizer"),eNr.forEach(t),YJe=r(LFe," (M2M100 model)"),LFe.forEach(t),KJe=i(y),nh=n(y,"LI",{});var BFe=s(nh);aY=n(BFe,"STRONG",{});var oNr=s(aY);ZJe=r(oNr,"marian"),oNr.forEach(t),eYe=r(BFe," \u2014 "),Bk=n(BFe,"A",{href:!0});var rNr=s(Bk);oYe=r(rNr,"MarianTokenizer"),rNr.forEach(t),rYe=r(BFe," (Marian model)"),BFe.forEach(t),tYe=i(y),Es=n(y,"LI",{});var U7=s(Es);nY=n(U7,"STRONG",{});var tNr=s(nY);aYe=r(tNr,"mbart"),tNr.forEach(t),nYe=r(U7," \u2014 "),xk=n(U7,"A",{href:!0});var aNr=s(xk);sYe=r(aNr,"MBartTokenizer"),aNr.forEach(t),lYe=r(U7," or "),kk=n(U7,"A",{href:!0});var nNr=s(kk);iYe=r(nNr,"MBartTokenizerFast"),nNr.forEach(t),dYe=r(U7," (mBART model)"),U7.forEach(t),cYe=i(y),ys=n(y,"LI",{});var J7=s(ys);sY=n(J7,"STRONG",{});var sNr=s(sY);fYe=r(sNr,"mbart50"),sNr.forEach(t),mYe=r(J7," \u2014 "),Rk=n(J7,"A",{href:!0});var lNr=s(Rk);gYe=r(lNr,"MBart50Tokenizer"),lNr.forEach(t),hYe=r(J7," or "),Sk=n(J7,"A",{href:!0});var iNr=s(Sk);pYe=r(iNr,"MBart50TokenizerFast"),iNr.forEach(t),_Ye=r(J7," (mBART-50 model)"),J7.forEach(t),uYe=i(y),sh=n(y,"LI",{});var xFe=s(sh);lY=n(xFe,"STRONG",{});var dNr=s(lY);bYe=r(dNr,"mluke"),dNr.forEach(t),vYe=r(xFe," \u2014 "),Pk=n(xFe,"A",{href:!0});var cNr=s(Pk);TYe=r(cNr,"MLukeTokenizer"),cNr.forEach(t),FYe=r(xFe," (mLUKE model)"),xFe.forEach(t),CYe=i(y),ws=n(y,"LI",{});var Y7=s(ws);iY=n(Y7,"STRONG",{});var fNr=s(iY);MYe=r(fNr,"mobilebert"),fNr.forEach(t),EYe=r(Y7," \u2014 "),$k=n(Y7,"A",{href:!0});var mNr=s($k);yYe=r(mNr,"MobileBertTokenizer"),mNr.forEach(t),wYe=r(Y7," or "),Ik=n(Y7,"A",{href:!0});var gNr=s(Ik);AYe=r(gNr,"MobileBertTokenizerFast"),gNr.forEach(t),LYe=r(Y7," (MobileBERT model)"),Y7.forEach(t),BYe=i(y),As=n(y,"LI",{});var K7=s(As);dY=n(K7,"STRONG",{});var hNr=s(dY);xYe=r(hNr,"mpnet"),hNr.forEach(t),kYe=r(K7," \u2014 "),jk=n(K7,"A",{href:!0});var pNr=s(jk);RYe=r(pNr,"MPNetTokenizer"),pNr.forEach(t),SYe=r(K7," or "),Dk=n(K7,"A",{href:!0});var _Nr=s(Dk);PYe=r(_Nr,"MPNetTokenizerFast"),_Nr.forEach(t),$Ye=r(K7," (MPNet model)"),K7.forEach(t),IYe=i(y),Ls=n(y,"LI",{});var Z7=s(Ls);cY=n(Z7,"STRONG",{});var uNr=s(cY);jYe=r(uNr,"mt5"),uNr.forEach(t),DYe=r(Z7," \u2014 "),Nk=n(Z7,"A",{href:!0});var bNr=s(Nk);NYe=r(bNr,"MT5Tokenizer"),bNr.forEach(t),qYe=r(Z7," or "),qk=n(Z7,"A",{href:!0});var vNr=s(qk);GYe=r(vNr,"MT5TokenizerFast"),vNr.forEach(t),OYe=r(Z7," (mT5 model)"),Z7.forEach(t),XYe=i(y),Bs=n(y,"LI",{});var e9=s(Bs);fY=n(e9,"STRONG",{});var TNr=s(fY);VYe=r(TNr,"openai-gpt"),TNr.forEach(t),zYe=r(e9," \u2014 "),Gk=n(e9,"A",{href:!0});var FNr=s(Gk);WYe=r(FNr,"OpenAIGPTTokenizer"),FNr.forEach(t),QYe=r(e9," or "),Ok=n(e9,"A",{href:!0});var CNr=s(Ok);HYe=r(CNr,"OpenAIGPTTokenizerFast"),CNr.forEach(t),UYe=r(e9," (OpenAI GPT model)"),e9.forEach(t),JYe=i(y),xs=n(y,"LI",{});var o9=s(xs);mY=n(o9,"STRONG",{});var MNr=s(mY);YYe=r(MNr,"pegasus"),MNr.forEach(t),KYe=r(o9," \u2014 "),Xk=n(o9,"A",{href:!0});var ENr=s(Xk);ZYe=r(ENr,"PegasusTokenizer"),ENr.forEach(t),eKe=r(o9," or "),Vk=n(o9,"A",{href:!0});var yNr=s(Vk);oKe=r(yNr,"PegasusTokenizerFast"),yNr.forEach(t),rKe=r(o9," (Pegasus model)"),o9.forEach(t),tKe=i(y),lh=n(y,"LI",{});var kFe=s(lh);gY=n(kFe,"STRONG",{});var wNr=s(gY);aKe=r(wNr,"perceiver"),wNr.forEach(t),nKe=r(kFe," \u2014 "),zk=n(kFe,"A",{href:!0});var ANr=s(zk);sKe=r(ANr,"PerceiverTokenizer"),ANr.forEach(t),lKe=r(kFe," (Perceiver model)"),kFe.forEach(t),iKe=i(y),ih=n(y,"LI",{});var RFe=s(ih);hY=n(RFe,"STRONG",{});var LNr=s(hY);dKe=r(LNr,"phobert"),LNr.forEach(t),cKe=r(RFe," \u2014 "),Wk=n(RFe,"A",{href:!0});var BNr=s(Wk);fKe=r(BNr,"PhobertTokenizer"),BNr.forEach(t),mKe=r(RFe," (PhoBERT model)"),RFe.forEach(t),gKe=i(y),dh=n(y,"LI",{});var SFe=s(dh);pY=n(SFe,"STRONG",{});var xNr=s(pY);hKe=r(xNr,"plbart"),xNr.forEach(t),pKe=r(SFe," \u2014 "),Qk=n(SFe,"A",{href:!0});var kNr=s(Qk);_Ke=r(kNr,"PLBartTokenizer"),kNr.forEach(t),uKe=r(SFe," (PLBart model)"),SFe.forEach(t),bKe=i(y),ch=n(y,"LI",{});var PFe=s(ch);_Y=n(PFe,"STRONG",{});var RNr=s(_Y);vKe=r(RNr,"prophetnet"),RNr.forEach(t),TKe=r(PFe," \u2014 "),Hk=n(PFe,"A",{href:!0});var SNr=s(Hk);FKe=r(SNr,"ProphetNetTokenizer"),SNr.forEach(t),CKe=r(PFe," (ProphetNet model)"),PFe.forEach(t),MKe=i(y),ks=n(y,"LI",{});var r9=s(ks);uY=n(r9,"STRONG",{});var PNr=s(uY);EKe=r(PNr,"qdqbert"),PNr.forEach(t),yKe=r(r9," \u2014 "),Uk=n(r9,"A",{href:!0});var $Nr=s(Uk);wKe=r($Nr,"BertTokenizer"),$Nr.forEach(t),AKe=r(r9," or "),Jk=n(r9,"A",{href:!0});var INr=s(Jk);LKe=r(INr,"BertTokenizerFast"),INr.forEach(t),BKe=r(r9," (QDQBert model)"),r9.forEach(t),xKe=i(y),fh=n(y,"LI",{});var $Fe=s(fh);bY=n($Fe,"STRONG",{});var jNr=s(bY);kKe=r(jNr,"rag"),jNr.forEach(t),RKe=r($Fe," \u2014 "),Yk=n($Fe,"A",{href:!0});var DNr=s(Yk);SKe=r(DNr,"RagTokenizer"),DNr.forEach(t),PKe=r($Fe," (RAG model)"),$Fe.forEach(t),$Ke=i(y),Rs=n(y,"LI",{});var t9=s(Rs);vY=n(t9,"STRONG",{});var NNr=s(vY);IKe=r(NNr,"realm"),NNr.forEach(t),jKe=r(t9," \u2014 "),Kk=n(t9,"A",{href:!0});var qNr=s(Kk);DKe=r(qNr,"RealmTokenizer"),qNr.forEach(t),NKe=r(t9," or "),Zk=n(t9,"A",{href:!0});var GNr=s(Zk);qKe=r(GNr,"RealmTokenizerFast"),GNr.forEach(t),GKe=r(t9," (Realm model)"),t9.forEach(t),OKe=i(y),Ss=n(y,"LI",{});var a9=s(Ss);TY=n(a9,"STRONG",{});var ONr=s(TY);XKe=r(ONr,"reformer"),ONr.forEach(t),VKe=r(a9," \u2014 "),eR=n(a9,"A",{href:!0});var XNr=s(eR);zKe=r(XNr,"ReformerTokenizer"),XNr.forEach(t),WKe=r(a9," or "),oR=n(a9,"A",{href:!0});var VNr=s(oR);QKe=r(VNr,"ReformerTokenizerFast"),VNr.forEach(t),HKe=r(a9," (Reformer model)"),a9.forEach(t),UKe=i(y),Ps=n(y,"LI",{});var n9=s(Ps);FY=n(n9,"STRONG",{});var zNr=s(FY);JKe=r(zNr,"rembert"),zNr.forEach(t),YKe=r(n9," \u2014 "),rR=n(n9,"A",{href:!0});var WNr=s(rR);KKe=r(WNr,"RemBertTokenizer"),WNr.forEach(t),ZKe=r(n9," or "),tR=n(n9,"A",{href:!0});var QNr=s(tR);eZe=r(QNr,"RemBertTokenizerFast"),QNr.forEach(t),oZe=r(n9," (RemBERT model)"),n9.forEach(t),rZe=i(y),$s=n(y,"LI",{});var s9=s($s);CY=n(s9,"STRONG",{});var HNr=s(CY);tZe=r(HNr,"retribert"),HNr.forEach(t),aZe=r(s9," \u2014 "),aR=n(s9,"A",{href:!0});var UNr=s(aR);nZe=r(UNr,"RetriBertTokenizer"),UNr.forEach(t),sZe=r(s9," or "),nR=n(s9,"A",{href:!0});var JNr=s(nR);lZe=r(JNr,"RetriBertTokenizerFast"),JNr.forEach(t),iZe=r(s9," (RetriBERT model)"),s9.forEach(t),dZe=i(y),Is=n(y,"LI",{});var l9=s(Is);MY=n(l9,"STRONG",{});var YNr=s(MY);cZe=r(YNr,"roberta"),YNr.forEach(t),fZe=r(l9," \u2014 "),sR=n(l9,"A",{href:!0});var KNr=s(sR);mZe=r(KNr,"RobertaTokenizer"),KNr.forEach(t),gZe=r(l9," or "),lR=n(l9,"A",{href:!0});var ZNr=s(lR);hZe=r(ZNr,"RobertaTokenizerFast"),ZNr.forEach(t),pZe=r(l9," (RoBERTa model)"),l9.forEach(t),_Ze=i(y),js=n(y,"LI",{});var i9=s(js);EY=n(i9,"STRONG",{});var eqr=s(EY);uZe=r(eqr,"roformer"),eqr.forEach(t),bZe=r(i9," \u2014 "),iR=n(i9,"A",{href:!0});var oqr=s(iR);vZe=r(oqr,"RoFormerTokenizer"),oqr.forEach(t),TZe=r(i9," or "),dR=n(i9,"A",{href:!0});var rqr=s(dR);FZe=r(rqr,"RoFormerTokenizerFast"),rqr.forEach(t),CZe=r(i9," (RoFormer model)"),i9.forEach(t),MZe=i(y),mh=n(y,"LI",{});var IFe=s(mh);yY=n(IFe,"STRONG",{});var tqr=s(yY);EZe=r(tqr,"speech_to_text"),tqr.forEach(t),yZe=r(IFe," \u2014 "),cR=n(IFe,"A",{href:!0});var aqr=s(cR);wZe=r(aqr,"Speech2TextTokenizer"),aqr.forEach(t),AZe=r(IFe," (Speech2Text model)"),IFe.forEach(t),LZe=i(y),gh=n(y,"LI",{});var jFe=s(gh);wY=n(jFe,"STRONG",{});var nqr=s(wY);BZe=r(nqr,"speech_to_text_2"),nqr.forEach(t),xZe=r(jFe," \u2014 "),fR=n(jFe,"A",{href:!0});var sqr=s(fR);kZe=r(sqr,"Speech2Text2Tokenizer"),sqr.forEach(t),RZe=r(jFe," (Speech2Text2 model)"),jFe.forEach(t),SZe=i(y),Ds=n(y,"LI",{});var d9=s(Ds);AY=n(d9,"STRONG",{});var lqr=s(AY);PZe=r(lqr,"splinter"),lqr.forEach(t),$Ze=r(d9," \u2014 "),mR=n(d9,"A",{href:!0});var iqr=s(mR);IZe=r(iqr,"SplinterTokenizer"),iqr.forEach(t),jZe=r(d9," or "),gR=n(d9,"A",{href:!0});var dqr=s(gR);DZe=r(dqr,"SplinterTokenizerFast"),dqr.forEach(t),NZe=r(d9," (Splinter model)"),d9.forEach(t),qZe=i(y),Ns=n(y,"LI",{});var c9=s(Ns);LY=n(c9,"STRONG",{});var cqr=s(LY);GZe=r(cqr,"squeezebert"),cqr.forEach(t),OZe=r(c9," \u2014 "),hR=n(c9,"A",{href:!0});var fqr=s(hR);XZe=r(fqr,"SqueezeBertTokenizer"),fqr.forEach(t),VZe=r(c9," or "),pR=n(c9,"A",{href:!0});var mqr=s(pR);zZe=r(mqr,"SqueezeBertTokenizerFast"),mqr.forEach(t),WZe=r(c9," (SqueezeBERT model)"),c9.forEach(t),QZe=i(y),qs=n(y,"LI",{});var f9=s(qs);BY=n(f9,"STRONG",{});var gqr=s(BY);HZe=r(gqr,"t5"),gqr.forEach(t),UZe=r(f9," \u2014 "),_R=n(f9,"A",{href:!0});var hqr=s(_R);JZe=r(hqr,"T5Tokenizer"),hqr.forEach(t),YZe=r(f9," or "),uR=n(f9,"A",{href:!0});var pqr=s(uR);KZe=r(pqr,"T5TokenizerFast"),pqr.forEach(t),ZZe=r(f9," (T5 model)"),f9.forEach(t),eeo=i(y),hh=n(y,"LI",{});var DFe=s(hh);xY=n(DFe,"STRONG",{});var _qr=s(xY);oeo=r(_qr,"tapas"),_qr.forEach(t),reo=r(DFe," \u2014 "),bR=n(DFe,"A",{href:!0});var uqr=s(bR);teo=r(uqr,"TapasTokenizer"),uqr.forEach(t),aeo=r(DFe," (TAPAS model)"),DFe.forEach(t),neo=i(y),ph=n(y,"LI",{});var NFe=s(ph);kY=n(NFe,"STRONG",{});var bqr=s(kY);seo=r(bqr,"transfo-xl"),bqr.forEach(t),leo=r(NFe," \u2014 "),vR=n(NFe,"A",{href:!0});var vqr=s(vR);ieo=r(vqr,"TransfoXLTokenizer"),vqr.forEach(t),deo=r(NFe," (Transformer-XL model)"),NFe.forEach(t),ceo=i(y),_h=n(y,"LI",{});var qFe=s(_h);RY=n(qFe,"STRONG",{});var Tqr=s(RY);feo=r(Tqr,"wav2vec2"),Tqr.forEach(t),meo=r(qFe," \u2014 "),TR=n(qFe,"A",{href:!0});var Fqr=s(TR);geo=r(Fqr,"Wav2Vec2CTCTokenizer"),Fqr.forEach(t),heo=r(qFe," (Wav2Vec2 model)"),qFe.forEach(t),peo=i(y),uh=n(y,"LI",{});var GFe=s(uh);SY=n(GFe,"STRONG",{});var Cqr=s(SY);_eo=r(Cqr,"wav2vec2_phoneme"),Cqr.forEach(t),ueo=r(GFe," \u2014 "),FR=n(GFe,"A",{href:!0});var Mqr=s(FR);beo=r(Mqr,"Wav2Vec2PhonemeCTCTokenizer"),Mqr.forEach(t),veo=r(GFe," (Wav2Vec2Phoneme model)"),GFe.forEach(t),Teo=i(y),Gs=n(y,"LI",{});var m9=s(Gs);PY=n(m9,"STRONG",{});var Eqr=s(PY);Feo=r(Eqr,"xglm"),Eqr.forEach(t),Ceo=r(m9," \u2014 "),CR=n(m9,"A",{href:!0});var yqr=s(CR);Meo=r(yqr,"XGLMTokenizer"),yqr.forEach(t),Eeo=r(m9," or "),MR=n(m9,"A",{href:!0});var wqr=s(MR);yeo=r(wqr,"XGLMTokenizerFast"),wqr.forEach(t),weo=r(m9," (XGLM model)"),m9.forEach(t),Aeo=i(y),bh=n(y,"LI",{});var OFe=s(bh);$Y=n(OFe,"STRONG",{});var Aqr=s($Y);Leo=r(Aqr,"xlm"),Aqr.forEach(t),Beo=r(OFe," \u2014 "),ER=n(OFe,"A",{href:!0});var Lqr=s(ER);xeo=r(Lqr,"XLMTokenizer"),Lqr.forEach(t),keo=r(OFe," (XLM model)"),OFe.forEach(t),Reo=i(y),vh=n(y,"LI",{});var XFe=s(vh);IY=n(XFe,"STRONG",{});var Bqr=s(IY);Seo=r(Bqr,"xlm-prophetnet"),Bqr.forEach(t),Peo=r(XFe," \u2014 "),yR=n(XFe,"A",{href:!0});var xqr=s(yR);$eo=r(xqr,"XLMProphetNetTokenizer"),xqr.forEach(t),Ieo=r(XFe," (XLMProphetNet model)"),XFe.forEach(t),jeo=i(y),Os=n(y,"LI",{});var g9=s(Os);jY=n(g9,"STRONG",{});var kqr=s(jY);Deo=r(kqr,"xlm-roberta"),kqr.forEach(t),Neo=r(g9," \u2014 "),wR=n(g9,"A",{href:!0});var Rqr=s(wR);qeo=r(Rqr,"XLMRobertaTokenizer"),Rqr.forEach(t),Geo=r(g9," or "),AR=n(g9,"A",{href:!0});var Sqr=s(AR);Oeo=r(Sqr,"XLMRobertaTokenizerFast"),Sqr.forEach(t),Xeo=r(g9," (XLM-RoBERTa model)"),g9.forEach(t),Veo=i(y),Xs=n(y,"LI",{});var h9=s(Xs);DY=n(h9,"STRONG",{});var Pqr=s(DY);zeo=r(Pqr,"xlnet"),Pqr.forEach(t),Weo=r(h9," \u2014 "),LR=n(h9,"A",{href:!0});var $qr=s(LR);Qeo=r($qr,"XLNetTokenizer"),$qr.forEach(t),Heo=r(h9," or "),BR=n(h9,"A",{href:!0});var Iqr=s(BR);Ueo=r(Iqr,"XLNetTokenizerFast"),Iqr.forEach(t),Jeo=r(h9," (XLNet model)"),h9.forEach(t),y.forEach(t),Yeo=i(ua),NY=n(ua,"P",{});var jqr=s(NY);Keo=r(jqr,"Examples:"),jqr.forEach(t),Zeo=i(ua),m(I4.$$.fragment,ua),ua.forEach(t),eoo=i(Hs),Th=n(Hs,"DIV",{class:!0});var oPe=s(Th);m(j4.$$.fragment,oPe),ooo=i(oPe),qY=n(oPe,"P",{});var Dqr=s(qY);roo=r(Dqr,"Register a new tokenizer in this mapping."),Dqr.forEach(t),oPe.forEach(t),Hs.forEach(t),Uke=i(d),ed=n(d,"H2",{class:!0});var rPe=s(ed);Fh=n(rPe,"A",{id:!0,class:!0,href:!0});var Nqr=s(Fh);GY=n(Nqr,"SPAN",{});var qqr=s(GY);m(D4.$$.fragment,qqr),qqr.forEach(t),Nqr.forEach(t),too=i(rPe),OY=n(rPe,"SPAN",{});var Gqr=s(OY);aoo=r(Gqr,"AutoFeatureExtractor"),Gqr.forEach(t),rPe.forEach(t),Jke=i(d),Uo=n(d,"DIV",{class:!0});var Us=s(Uo);m(N4.$$.fragment,Us),noo=i(Us),q4=n(Us,"P",{});var tPe=s(q4);soo=r(tPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),xR=n(tPe,"A",{href:!0});var Oqr=s(xR);loo=r(Oqr,"AutoFeatureExtractor.from_pretrained()"),Oqr.forEach(t),ioo=r(tPe," class method."),tPe.forEach(t),doo=i(Us),G4=n(Us,"P",{});var aPe=s(G4);coo=r(aPe,"This class cannot be instantiated directly using "),XY=n(aPe,"CODE",{});var Xqr=s(XY);foo=r(Xqr,"__init__()"),Xqr.forEach(t),moo=r(aPe," (throws an error)."),aPe.forEach(t),goo=i(Us),$e=n(Us,"DIV",{class:!0});var Gt=s($e);m(O4.$$.fragment,Gt),hoo=i(Gt),VY=n(Gt,"P",{});var Vqr=s(VY);poo=r(Vqr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Vqr.forEach(t),_oo=i(Gt),Qa=n(Gt,"P",{});var TM=s(Qa);uoo=r(TM,"The feature extractor class to instantiate is selected based on the "),zY=n(TM,"CODE",{});var zqr=s(zY);boo=r(zqr,"model_type"),zqr.forEach(t),voo=r(TM,` property of the config object
(either passed as an argument or loaded from `),WY=n(TM,"CODE",{});var Wqr=s(WY);Too=r(Wqr,"pretrained_model_name_or_path"),Wqr.forEach(t),Foo=r(TM,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),QY=n(TM,"CODE",{});var Qqr=s(QY);Coo=r(Qqr,"pretrained_model_name_or_path"),Qqr.forEach(t),Moo=r(TM,":"),TM.forEach(t),Eoo=i(Gt),re=n(Gt,"UL",{});var ne=s(re);Ch=n(ne,"LI",{});var VFe=s(Ch);HY=n(VFe,"STRONG",{});var Hqr=s(HY);yoo=r(Hqr,"beit"),Hqr.forEach(t),woo=r(VFe," \u2014 "),kR=n(VFe,"A",{href:!0});var Uqr=s(kR);Aoo=r(Uqr,"BeitFeatureExtractor"),Uqr.forEach(t),Loo=r(VFe," (BEiT model)"),VFe.forEach(t),Boo=i(ne),Mh=n(ne,"LI",{});var zFe=s(Mh);UY=n(zFe,"STRONG",{});var Jqr=s(UY);xoo=r(Jqr,"clip"),Jqr.forEach(t),koo=r(zFe," \u2014 "),RR=n(zFe,"A",{href:!0});var Yqr=s(RR);Roo=r(Yqr,"CLIPFeatureExtractor"),Yqr.forEach(t),Soo=r(zFe," (CLIP model)"),zFe.forEach(t),Poo=i(ne),Eh=n(ne,"LI",{});var WFe=s(Eh);JY=n(WFe,"STRONG",{});var Kqr=s(JY);$oo=r(Kqr,"convnext"),Kqr.forEach(t),Ioo=r(WFe," \u2014 "),SR=n(WFe,"A",{href:!0});var Zqr=s(SR);joo=r(Zqr,"ConvNextFeatureExtractor"),Zqr.forEach(t),Doo=r(WFe," (ConvNext model)"),WFe.forEach(t),Noo=i(ne),yh=n(ne,"LI",{});var QFe=s(yh);YY=n(QFe,"STRONG",{});var eGr=s(YY);qoo=r(eGr,"deit"),eGr.forEach(t),Goo=r(QFe," \u2014 "),PR=n(QFe,"A",{href:!0});var oGr=s(PR);Ooo=r(oGr,"DeiTFeatureExtractor"),oGr.forEach(t),Xoo=r(QFe," (DeiT model)"),QFe.forEach(t),Voo=i(ne),wh=n(ne,"LI",{});var HFe=s(wh);KY=n(HFe,"STRONG",{});var rGr=s(KY);zoo=r(rGr,"detr"),rGr.forEach(t),Woo=r(HFe," \u2014 "),$R=n(HFe,"A",{href:!0});var tGr=s($R);Qoo=r(tGr,"DetrFeatureExtractor"),tGr.forEach(t),Hoo=r(HFe," (DETR model)"),HFe.forEach(t),Uoo=i(ne),Ah=n(ne,"LI",{});var UFe=s(Ah);ZY=n(UFe,"STRONG",{});var aGr=s(ZY);Joo=r(aGr,"hubert"),aGr.forEach(t),Yoo=r(UFe," \u2014 "),IR=n(UFe,"A",{href:!0});var nGr=s(IR);Koo=r(nGr,"Wav2Vec2FeatureExtractor"),nGr.forEach(t),Zoo=r(UFe," (Hubert model)"),UFe.forEach(t),ero=i(ne),Lh=n(ne,"LI",{});var JFe=s(Lh);eK=n(JFe,"STRONG",{});var sGr=s(eK);oro=r(sGr,"layoutlmv2"),sGr.forEach(t),rro=r(JFe," \u2014 "),jR=n(JFe,"A",{href:!0});var lGr=s(jR);tro=r(lGr,"LayoutLMv2FeatureExtractor"),lGr.forEach(t),aro=r(JFe," (LayoutLMv2 model)"),JFe.forEach(t),nro=i(ne),Bh=n(ne,"LI",{});var YFe=s(Bh);oK=n(YFe,"STRONG",{});var iGr=s(oK);sro=r(iGr,"maskformer"),iGr.forEach(t),lro=r(YFe," \u2014 "),DR=n(YFe,"A",{href:!0});var dGr=s(DR);iro=r(dGr,"MaskFormerFeatureExtractor"),dGr.forEach(t),dro=r(YFe," (MaskFormer model)"),YFe.forEach(t),cro=i(ne),xh=n(ne,"LI",{});var KFe=s(xh);rK=n(KFe,"STRONG",{});var cGr=s(rK);fro=r(cGr,"perceiver"),cGr.forEach(t),mro=r(KFe," \u2014 "),NR=n(KFe,"A",{href:!0});var fGr=s(NR);gro=r(fGr,"PerceiverFeatureExtractor"),fGr.forEach(t),hro=r(KFe," (Perceiver model)"),KFe.forEach(t),pro=i(ne),kh=n(ne,"LI",{});var ZFe=s(kh);tK=n(ZFe,"STRONG",{});var mGr=s(tK);_ro=r(mGr,"poolformer"),mGr.forEach(t),uro=r(ZFe," \u2014 "),qR=n(ZFe,"A",{href:!0});var gGr=s(qR);bro=r(gGr,"PoolFormerFeatureExtractor"),gGr.forEach(t),vro=r(ZFe," (PoolFormer model)"),ZFe.forEach(t),Tro=i(ne),Rh=n(ne,"LI",{});var eCe=s(Rh);aK=n(eCe,"STRONG",{});var hGr=s(aK);Fro=r(hGr,"resnet"),hGr.forEach(t),Cro=r(eCe," \u2014 "),GR=n(eCe,"A",{href:!0});var pGr=s(GR);Mro=r(pGr,"ConvNextFeatureExtractor"),pGr.forEach(t),Ero=r(eCe," (ResNet model)"),eCe.forEach(t),yro=i(ne),Sh=n(ne,"LI",{});var oCe=s(Sh);nK=n(oCe,"STRONG",{});var _Gr=s(nK);wro=r(_Gr,"segformer"),_Gr.forEach(t),Aro=r(oCe," \u2014 "),OR=n(oCe,"A",{href:!0});var uGr=s(OR);Lro=r(uGr,"SegformerFeatureExtractor"),uGr.forEach(t),Bro=r(oCe," (SegFormer model)"),oCe.forEach(t),xro=i(ne),Ph=n(ne,"LI",{});var rCe=s(Ph);sK=n(rCe,"STRONG",{});var bGr=s(sK);kro=r(bGr,"speech_to_text"),bGr.forEach(t),Rro=r(rCe," \u2014 "),XR=n(rCe,"A",{href:!0});var vGr=s(XR);Sro=r(vGr,"Speech2TextFeatureExtractor"),vGr.forEach(t),Pro=r(rCe," (Speech2Text model)"),rCe.forEach(t),$ro=i(ne),$h=n(ne,"LI",{});var tCe=s($h);lK=n(tCe,"STRONG",{});var TGr=s(lK);Iro=r(TGr,"swin"),TGr.forEach(t),jro=r(tCe," \u2014 "),VR=n(tCe,"A",{href:!0});var FGr=s(VR);Dro=r(FGr,"ViTFeatureExtractor"),FGr.forEach(t),Nro=r(tCe," (Swin model)"),tCe.forEach(t),qro=i(ne),Ih=n(ne,"LI",{});var aCe=s(Ih);iK=n(aCe,"STRONG",{});var CGr=s(iK);Gro=r(CGr,"van"),CGr.forEach(t),Oro=r(aCe," \u2014 "),zR=n(aCe,"A",{href:!0});var MGr=s(zR);Xro=r(MGr,"ConvNextFeatureExtractor"),MGr.forEach(t),Vro=r(aCe," (VAN model)"),aCe.forEach(t),zro=i(ne),jh=n(ne,"LI",{});var nCe=s(jh);dK=n(nCe,"STRONG",{});var EGr=s(dK);Wro=r(EGr,"vit"),EGr.forEach(t),Qro=r(nCe," \u2014 "),WR=n(nCe,"A",{href:!0});var yGr=s(WR);Hro=r(yGr,"ViTFeatureExtractor"),yGr.forEach(t),Uro=r(nCe," (ViT model)"),nCe.forEach(t),Jro=i(ne),Dh=n(ne,"LI",{});var sCe=s(Dh);cK=n(sCe,"STRONG",{});var wGr=s(cK);Yro=r(wGr,"vit_mae"),wGr.forEach(t),Kro=r(sCe," \u2014 "),QR=n(sCe,"A",{href:!0});var AGr=s(QR);Zro=r(AGr,"ViTFeatureExtractor"),AGr.forEach(t),eto=r(sCe," (ViTMAE model)"),sCe.forEach(t),oto=i(ne),Nh=n(ne,"LI",{});var lCe=s(Nh);fK=n(lCe,"STRONG",{});var LGr=s(fK);rto=r(LGr,"wav2vec2"),LGr.forEach(t),tto=r(lCe," \u2014 "),HR=n(lCe,"A",{href:!0});var BGr=s(HR);ato=r(BGr,"Wav2Vec2FeatureExtractor"),BGr.forEach(t),nto=r(lCe," (Wav2Vec2 model)"),lCe.forEach(t),ne.forEach(t),sto=i(Gt),m(qh.$$.fragment,Gt),lto=i(Gt),mK=n(Gt,"P",{});var xGr=s(mK);ito=r(xGr,"Examples:"),xGr.forEach(t),dto=i(Gt),m(X4.$$.fragment,Gt),Gt.forEach(t),cto=i(Us),Gh=n(Us,"DIV",{class:!0});var nPe=s(Gh);m(V4.$$.fragment,nPe),fto=i(nPe),gK=n(nPe,"P",{});var kGr=s(gK);mto=r(kGr,"Register a new feature extractor for this class."),kGr.forEach(t),nPe.forEach(t),Us.forEach(t),Yke=i(d),od=n(d,"H2",{class:!0});var sPe=s(od);Oh=n(sPe,"A",{id:!0,class:!0,href:!0});var RGr=s(Oh);hK=n(RGr,"SPAN",{});var SGr=s(hK);m(z4.$$.fragment,SGr),SGr.forEach(t),RGr.forEach(t),gto=i(sPe),pK=n(sPe,"SPAN",{});var PGr=s(pK);hto=r(PGr,"AutoProcessor"),PGr.forEach(t),sPe.forEach(t),Kke=i(d),Jo=n(d,"DIV",{class:!0});var Js=s(Jo);m(W4.$$.fragment,Js),pto=i(Js),Q4=n(Js,"P",{});var lPe=s(Q4);_to=r(lPe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),UR=n(lPe,"A",{href:!0});var $Gr=s(UR);uto=r($Gr,"AutoProcessor.from_pretrained()"),$Gr.forEach(t),bto=r(lPe," class method."),lPe.forEach(t),vto=i(Js),H4=n(Js,"P",{});var iPe=s(H4);Tto=r(iPe,"This class cannot be instantiated directly using "),_K=n(iPe,"CODE",{});var IGr=s(_K);Fto=r(IGr,"__init__()"),IGr.forEach(t),Cto=r(iPe," (throws an error)."),iPe.forEach(t),Mto=i(Js),Ie=n(Js,"DIV",{class:!0});var Ot=s(Ie);m(U4.$$.fragment,Ot),Eto=i(Ot),uK=n(Ot,"P",{});var jGr=s(uK);yto=r(jGr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),jGr.forEach(t),wto=i(Ot),rd=n(Ot,"P",{});var pW=s(rd);Ato=r(pW,"The processor class to instantiate is selected based on the "),bK=n(pW,"CODE",{});var DGr=s(bK);Lto=r(DGr,"model_type"),DGr.forEach(t),Bto=r(pW,` property of the config object (either
passed as an argument or loaded from `),vK=n(pW,"CODE",{});var NGr=s(vK);xto=r(NGr,"pretrained_model_name_or_path"),NGr.forEach(t),kto=r(pW," if possible):"),pW.forEach(t),Rto=i(Ot),xe=n(Ot,"UL",{});var qo=s(xe);Xh=n(qo,"LI",{});var iCe=s(Xh);TK=n(iCe,"STRONG",{});var qGr=s(TK);Sto=r(qGr,"clip"),qGr.forEach(t),Pto=r(iCe," \u2014 "),JR=n(iCe,"A",{href:!0});var GGr=s(JR);$to=r(GGr,"CLIPProcessor"),GGr.forEach(t),Ito=r(iCe," (CLIP model)"),iCe.forEach(t),jto=i(qo),Vh=n(qo,"LI",{});var dCe=s(Vh);FK=n(dCe,"STRONG",{});var OGr=s(FK);Dto=r(OGr,"layoutlmv2"),OGr.forEach(t),Nto=r(dCe," \u2014 "),YR=n(dCe,"A",{href:!0});var XGr=s(YR);qto=r(XGr,"LayoutLMv2Processor"),XGr.forEach(t),Gto=r(dCe," (LayoutLMv2 model)"),dCe.forEach(t),Oto=i(qo),zh=n(qo,"LI",{});var cCe=s(zh);CK=n(cCe,"STRONG",{});var VGr=s(CK);Xto=r(VGr,"layoutxlm"),VGr.forEach(t),Vto=r(cCe," \u2014 "),KR=n(cCe,"A",{href:!0});var zGr=s(KR);zto=r(zGr,"LayoutXLMProcessor"),zGr.forEach(t),Wto=r(cCe," (LayoutXLM model)"),cCe.forEach(t),Qto=i(qo),Wh=n(qo,"LI",{});var fCe=s(Wh);MK=n(fCe,"STRONG",{});var WGr=s(MK);Hto=r(WGr,"speech_to_text"),WGr.forEach(t),Uto=r(fCe," \u2014 "),ZR=n(fCe,"A",{href:!0});var QGr=s(ZR);Jto=r(QGr,"Speech2TextProcessor"),QGr.forEach(t),Yto=r(fCe," (Speech2Text model)"),fCe.forEach(t),Kto=i(qo),Qh=n(qo,"LI",{});var mCe=s(Qh);EK=n(mCe,"STRONG",{});var HGr=s(EK);Zto=r(HGr,"speech_to_text_2"),HGr.forEach(t),eao=r(mCe," \u2014 "),eS=n(mCe,"A",{href:!0});var UGr=s(eS);oao=r(UGr,"Speech2Text2Processor"),UGr.forEach(t),rao=r(mCe," (Speech2Text2 model)"),mCe.forEach(t),tao=i(qo),Hh=n(qo,"LI",{});var gCe=s(Hh);yK=n(gCe,"STRONG",{});var JGr=s(yK);aao=r(JGr,"trocr"),JGr.forEach(t),nao=r(gCe," \u2014 "),oS=n(gCe,"A",{href:!0});var YGr=s(oS);sao=r(YGr,"TrOCRProcessor"),YGr.forEach(t),lao=r(gCe," (TrOCR model)"),gCe.forEach(t),iao=i(qo),Uh=n(qo,"LI",{});var hCe=s(Uh);wK=n(hCe,"STRONG",{});var KGr=s(wK);dao=r(KGr,"vision-text-dual-encoder"),KGr.forEach(t),cao=r(hCe," \u2014 "),rS=n(hCe,"A",{href:!0});var ZGr=s(rS);fao=r(ZGr,"VisionTextDualEncoderProcessor"),ZGr.forEach(t),mao=r(hCe," (VisionTextDualEncoder model)"),hCe.forEach(t),gao=i(qo),Jh=n(qo,"LI",{});var pCe=s(Jh);AK=n(pCe,"STRONG",{});var eOr=s(AK);hao=r(eOr,"wav2vec2"),eOr.forEach(t),pao=r(pCe," \u2014 "),tS=n(pCe,"A",{href:!0});var oOr=s(tS);_ao=r(oOr,"Wav2Vec2Processor"),oOr.forEach(t),uao=r(pCe," (Wav2Vec2 model)"),pCe.forEach(t),qo.forEach(t),bao=i(Ot),m(Yh.$$.fragment,Ot),vao=i(Ot),LK=n(Ot,"P",{});var rOr=s(LK);Tao=r(rOr,"Examples:"),rOr.forEach(t),Fao=i(Ot),m(J4.$$.fragment,Ot),Ot.forEach(t),Cao=i(Js),Kh=n(Js,"DIV",{class:!0});var dPe=s(Kh);m(Y4.$$.fragment,dPe),Mao=i(dPe),BK=n(dPe,"P",{});var tOr=s(BK);Eao=r(tOr,"Register a new processor for this class."),tOr.forEach(t),dPe.forEach(t),Js.forEach(t),Zke=i(d),td=n(d,"H2",{class:!0});var cPe=s(td);Zh=n(cPe,"A",{id:!0,class:!0,href:!0});var aOr=s(Zh);xK=n(aOr,"SPAN",{});var nOr=s(xK);m(K4.$$.fragment,nOr),nOr.forEach(t),aOr.forEach(t),yao=i(cPe),kK=n(cPe,"SPAN",{});var sOr=s(kK);wao=r(sOr,"AutoModel"),sOr.forEach(t),cPe.forEach(t),eRe=i(d),Yo=n(d,"DIV",{class:!0});var Ys=s(Yo);m(Z4.$$.fragment,Ys),Aao=i(Ys),ad=n(Ys,"P",{});var _W=s(ad);Lao=r(_W,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),RK=n(_W,"CODE",{});var lOr=s(RK);Bao=r(lOr,"from_pretrained()"),lOr.forEach(t),xao=r(_W,"class method or the "),SK=n(_W,"CODE",{});var iOr=s(SK);kao=r(iOr,"from_config()"),iOr.forEach(t),Rao=r(_W,`class
method.`),_W.forEach(t),Sao=i(Ys),eE=n(Ys,"P",{});var fPe=s(eE);Pao=r(fPe,"This class cannot be instantiated directly using "),PK=n(fPe,"CODE",{});var dOr=s(PK);$ao=r(dOr,"__init__()"),dOr.forEach(t),Iao=r(fPe," (throws an error)."),fPe.forEach(t),jao=i(Ys),Wr=n(Ys,"DIV",{class:!0});var Ks=s(Wr);m(oE.$$.fragment,Ks),Dao=i(Ks),$K=n(Ks,"P",{});var cOr=s($K);Nao=r(cOr,"Instantiates one of the base model classes of the library from a configuration."),cOr.forEach(t),qao=i(Ks),nd=n(Ks,"P",{});var uW=s(nd);Gao=r(uW,`Note:
Loading a model from its configuration file does `),IK=n(uW,"STRONG",{});var fOr=s(IK);Oao=r(fOr,"not"),fOr.forEach(t),Xao=r(uW,` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=n(uW,"CODE",{});var mOr=s(jK);Vao=r(mOr,"from_pretrained()"),mOr.forEach(t),zao=r(uW,"to load the model weights."),uW.forEach(t),Wao=i(Ks),DK=n(Ks,"P",{});var gOr=s(DK);Qao=r(gOr,"Examples:"),gOr.forEach(t),Hao=i(Ks),m(rE.$$.fragment,Ks),Ks.forEach(t),Uao=i(Ys),je=n(Ys,"DIV",{class:!0});var Xt=s(je);m(tE.$$.fragment,Xt),Jao=i(Xt),NK=n(Xt,"P",{});var hOr=s(NK);Yao=r(hOr,"Instantiate one of the base model classes of the library from a pretrained model."),hOr.forEach(t),Kao=i(Xt),Ha=n(Xt,"P",{});var FM=s(Ha);Zao=r(FM,"The model class to instantiate is selected based on the "),qK=n(FM,"CODE",{});var pOr=s(qK);eno=r(pOr,"model_type"),pOr.forEach(t),ono=r(FM,` property of the config object (either
passed as an argument or loaded from `),GK=n(FM,"CODE",{});var _Or=s(GK);rno=r(_Or,"pretrained_model_name_or_path"),_Or.forEach(t),tno=r(FM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OK=n(FM,"CODE",{});var uOr=s(OK);ano=r(uOr,"pretrained_model_name_or_path"),uOr.forEach(t),nno=r(FM,":"),FM.forEach(t),sno=i(Xt),F=n(Xt,"UL",{});var C=s(F);ep=n(C,"LI",{});var _Ce=s(ep);XK=n(_Ce,"STRONG",{});var bOr=s(XK);lno=r(bOr,"albert"),bOr.forEach(t),ino=r(_Ce," \u2014 "),aS=n(_Ce,"A",{href:!0});var vOr=s(aS);dno=r(vOr,"AlbertModel"),vOr.forEach(t),cno=r(_Ce," (ALBERT model)"),_Ce.forEach(t),fno=i(C),op=n(C,"LI",{});var uCe=s(op);VK=n(uCe,"STRONG",{});var TOr=s(VK);mno=r(TOr,"bart"),TOr.forEach(t),gno=r(uCe," \u2014 "),nS=n(uCe,"A",{href:!0});var FOr=s(nS);hno=r(FOr,"BartModel"),FOr.forEach(t),pno=r(uCe," (BART model)"),uCe.forEach(t),_no=i(C),rp=n(C,"LI",{});var bCe=s(rp);zK=n(bCe,"STRONG",{});var COr=s(zK);uno=r(COr,"beit"),COr.forEach(t),bno=r(bCe," \u2014 "),sS=n(bCe,"A",{href:!0});var MOr=s(sS);vno=r(MOr,"BeitModel"),MOr.forEach(t),Tno=r(bCe," (BEiT model)"),bCe.forEach(t),Fno=i(C),tp=n(C,"LI",{});var vCe=s(tp);WK=n(vCe,"STRONG",{});var EOr=s(WK);Cno=r(EOr,"bert"),EOr.forEach(t),Mno=r(vCe," \u2014 "),lS=n(vCe,"A",{href:!0});var yOr=s(lS);Eno=r(yOr,"BertModel"),yOr.forEach(t),yno=r(vCe," (BERT model)"),vCe.forEach(t),wno=i(C),ap=n(C,"LI",{});var TCe=s(ap);QK=n(TCe,"STRONG",{});var wOr=s(QK);Ano=r(wOr,"bert-generation"),wOr.forEach(t),Lno=r(TCe," \u2014 "),iS=n(TCe,"A",{href:!0});var AOr=s(iS);Bno=r(AOr,"BertGenerationEncoder"),AOr.forEach(t),xno=r(TCe," (Bert Generation model)"),TCe.forEach(t),kno=i(C),np=n(C,"LI",{});var FCe=s(np);HK=n(FCe,"STRONG",{});var LOr=s(HK);Rno=r(LOr,"big_bird"),LOr.forEach(t),Sno=r(FCe," \u2014 "),dS=n(FCe,"A",{href:!0});var BOr=s(dS);Pno=r(BOr,"BigBirdModel"),BOr.forEach(t),$no=r(FCe," (BigBird model)"),FCe.forEach(t),Ino=i(C),sp=n(C,"LI",{});var CCe=s(sp);UK=n(CCe,"STRONG",{});var xOr=s(UK);jno=r(xOr,"bigbird_pegasus"),xOr.forEach(t),Dno=r(CCe," \u2014 "),cS=n(CCe,"A",{href:!0});var kOr=s(cS);Nno=r(kOr,"BigBirdPegasusModel"),kOr.forEach(t),qno=r(CCe," (BigBirdPegasus model)"),CCe.forEach(t),Gno=i(C),lp=n(C,"LI",{});var MCe=s(lp);JK=n(MCe,"STRONG",{});var ROr=s(JK);Ono=r(ROr,"blenderbot"),ROr.forEach(t),Xno=r(MCe," \u2014 "),fS=n(MCe,"A",{href:!0});var SOr=s(fS);Vno=r(SOr,"BlenderbotModel"),SOr.forEach(t),zno=r(MCe," (Blenderbot model)"),MCe.forEach(t),Wno=i(C),ip=n(C,"LI",{});var ECe=s(ip);YK=n(ECe,"STRONG",{});var POr=s(YK);Qno=r(POr,"blenderbot-small"),POr.forEach(t),Hno=r(ECe," \u2014 "),mS=n(ECe,"A",{href:!0});var $Or=s(mS);Uno=r($Or,"BlenderbotSmallModel"),$Or.forEach(t),Jno=r(ECe," (BlenderbotSmall model)"),ECe.forEach(t),Yno=i(C),dp=n(C,"LI",{});var yCe=s(dp);KK=n(yCe,"STRONG",{});var IOr=s(KK);Kno=r(IOr,"camembert"),IOr.forEach(t),Zno=r(yCe," \u2014 "),gS=n(yCe,"A",{href:!0});var jOr=s(gS);eso=r(jOr,"CamembertModel"),jOr.forEach(t),oso=r(yCe," (CamemBERT model)"),yCe.forEach(t),rso=i(C),cp=n(C,"LI",{});var wCe=s(cp);ZK=n(wCe,"STRONG",{});var DOr=s(ZK);tso=r(DOr,"canine"),DOr.forEach(t),aso=r(wCe," \u2014 "),hS=n(wCe,"A",{href:!0});var NOr=s(hS);nso=r(NOr,"CanineModel"),NOr.forEach(t),sso=r(wCe," (Canine model)"),wCe.forEach(t),lso=i(C),fp=n(C,"LI",{});var ACe=s(fp);eZ=n(ACe,"STRONG",{});var qOr=s(eZ);iso=r(qOr,"clip"),qOr.forEach(t),dso=r(ACe," \u2014 "),pS=n(ACe,"A",{href:!0});var GOr=s(pS);cso=r(GOr,"CLIPModel"),GOr.forEach(t),fso=r(ACe," (CLIP model)"),ACe.forEach(t),mso=i(C),mp=n(C,"LI",{});var LCe=s(mp);oZ=n(LCe,"STRONG",{});var OOr=s(oZ);gso=r(OOr,"convbert"),OOr.forEach(t),hso=r(LCe," \u2014 "),_S=n(LCe,"A",{href:!0});var XOr=s(_S);pso=r(XOr,"ConvBertModel"),XOr.forEach(t),_so=r(LCe," (ConvBERT model)"),LCe.forEach(t),uso=i(C),gp=n(C,"LI",{});var BCe=s(gp);rZ=n(BCe,"STRONG",{});var VOr=s(rZ);bso=r(VOr,"convnext"),VOr.forEach(t),vso=r(BCe," \u2014 "),uS=n(BCe,"A",{href:!0});var zOr=s(uS);Tso=r(zOr,"ConvNextModel"),zOr.forEach(t),Fso=r(BCe," (ConvNext model)"),BCe.forEach(t),Cso=i(C),hp=n(C,"LI",{});var xCe=s(hp);tZ=n(xCe,"STRONG",{});var WOr=s(tZ);Mso=r(WOr,"ctrl"),WOr.forEach(t),Eso=r(xCe," \u2014 "),bS=n(xCe,"A",{href:!0});var QOr=s(bS);yso=r(QOr,"CTRLModel"),QOr.forEach(t),wso=r(xCe," (CTRL model)"),xCe.forEach(t),Aso=i(C),pp=n(C,"LI",{});var kCe=s(pp);aZ=n(kCe,"STRONG",{});var HOr=s(aZ);Lso=r(HOr,"data2vec-audio"),HOr.forEach(t),Bso=r(kCe," \u2014 "),vS=n(kCe,"A",{href:!0});var UOr=s(vS);xso=r(UOr,"Data2VecAudioModel"),UOr.forEach(t),kso=r(kCe," (Data2VecAudio model)"),kCe.forEach(t),Rso=i(C),_p=n(C,"LI",{});var RCe=s(_p);nZ=n(RCe,"STRONG",{});var JOr=s(nZ);Sso=r(JOr,"data2vec-text"),JOr.forEach(t),Pso=r(RCe," \u2014 "),TS=n(RCe,"A",{href:!0});var YOr=s(TS);$so=r(YOr,"Data2VecTextModel"),YOr.forEach(t),Iso=r(RCe," (Data2VecText model)"),RCe.forEach(t),jso=i(C),up=n(C,"LI",{});var SCe=s(up);sZ=n(SCe,"STRONG",{});var KOr=s(sZ);Dso=r(KOr,"deberta"),KOr.forEach(t),Nso=r(SCe," \u2014 "),FS=n(SCe,"A",{href:!0});var ZOr=s(FS);qso=r(ZOr,"DebertaModel"),ZOr.forEach(t),Gso=r(SCe," (DeBERTa model)"),SCe.forEach(t),Oso=i(C),bp=n(C,"LI",{});var PCe=s(bp);lZ=n(PCe,"STRONG",{});var eXr=s(lZ);Xso=r(eXr,"deberta-v2"),eXr.forEach(t),Vso=r(PCe," \u2014 "),CS=n(PCe,"A",{href:!0});var oXr=s(CS);zso=r(oXr,"DebertaV2Model"),oXr.forEach(t),Wso=r(PCe," (DeBERTa-v2 model)"),PCe.forEach(t),Qso=i(C),vp=n(C,"LI",{});var $Ce=s(vp);iZ=n($Ce,"STRONG",{});var rXr=s(iZ);Hso=r(rXr,"decision_transformer"),rXr.forEach(t),Uso=r($Ce," \u2014 "),MS=n($Ce,"A",{href:!0});var tXr=s(MS);Jso=r(tXr,"DecisionTransformerModel"),tXr.forEach(t),Yso=r($Ce," (Decision Transformer model)"),$Ce.forEach(t),Kso=i(C),Tp=n(C,"LI",{});var ICe=s(Tp);dZ=n(ICe,"STRONG",{});var aXr=s(dZ);Zso=r(aXr,"deit"),aXr.forEach(t),elo=r(ICe," \u2014 "),ES=n(ICe,"A",{href:!0});var nXr=s(ES);olo=r(nXr,"DeiTModel"),nXr.forEach(t),rlo=r(ICe," (DeiT model)"),ICe.forEach(t),tlo=i(C),Fp=n(C,"LI",{});var jCe=s(Fp);cZ=n(jCe,"STRONG",{});var sXr=s(cZ);alo=r(sXr,"detr"),sXr.forEach(t),nlo=r(jCe," \u2014 "),yS=n(jCe,"A",{href:!0});var lXr=s(yS);slo=r(lXr,"DetrModel"),lXr.forEach(t),llo=r(jCe," (DETR model)"),jCe.forEach(t),ilo=i(C),Cp=n(C,"LI",{});var DCe=s(Cp);fZ=n(DCe,"STRONG",{});var iXr=s(fZ);dlo=r(iXr,"distilbert"),iXr.forEach(t),clo=r(DCe," \u2014 "),wS=n(DCe,"A",{href:!0});var dXr=s(wS);flo=r(dXr,"DistilBertModel"),dXr.forEach(t),mlo=r(DCe," (DistilBERT model)"),DCe.forEach(t),glo=i(C),Mp=n(C,"LI",{});var NCe=s(Mp);mZ=n(NCe,"STRONG",{});var cXr=s(mZ);hlo=r(cXr,"dpr"),cXr.forEach(t),plo=r(NCe," \u2014 "),AS=n(NCe,"A",{href:!0});var fXr=s(AS);_lo=r(fXr,"DPRQuestionEncoder"),fXr.forEach(t),ulo=r(NCe," (DPR model)"),NCe.forEach(t),blo=i(C),Ep=n(C,"LI",{});var qCe=s(Ep);gZ=n(qCe,"STRONG",{});var mXr=s(gZ);vlo=r(mXr,"electra"),mXr.forEach(t),Tlo=r(qCe," \u2014 "),LS=n(qCe,"A",{href:!0});var gXr=s(LS);Flo=r(gXr,"ElectraModel"),gXr.forEach(t),Clo=r(qCe," (ELECTRA model)"),qCe.forEach(t),Mlo=i(C),yp=n(C,"LI",{});var GCe=s(yp);hZ=n(GCe,"STRONG",{});var hXr=s(hZ);Elo=r(hXr,"flaubert"),hXr.forEach(t),ylo=r(GCe," \u2014 "),BS=n(GCe,"A",{href:!0});var pXr=s(BS);wlo=r(pXr,"FlaubertModel"),pXr.forEach(t),Alo=r(GCe," (FlauBERT model)"),GCe.forEach(t),Llo=i(C),wp=n(C,"LI",{});var OCe=s(wp);pZ=n(OCe,"STRONG",{});var _Xr=s(pZ);Blo=r(_Xr,"fnet"),_Xr.forEach(t),xlo=r(OCe," \u2014 "),xS=n(OCe,"A",{href:!0});var uXr=s(xS);klo=r(uXr,"FNetModel"),uXr.forEach(t),Rlo=r(OCe," (FNet model)"),OCe.forEach(t),Slo=i(C),Ap=n(C,"LI",{});var XCe=s(Ap);_Z=n(XCe,"STRONG",{});var bXr=s(_Z);Plo=r(bXr,"fsmt"),bXr.forEach(t),$lo=r(XCe," \u2014 "),kS=n(XCe,"A",{href:!0});var vXr=s(kS);Ilo=r(vXr,"FSMTModel"),vXr.forEach(t),jlo=r(XCe," (FairSeq Machine-Translation model)"),XCe.forEach(t),Dlo=i(C),Vs=n(C,"LI",{});var p9=s(Vs);uZ=n(p9,"STRONG",{});var TXr=s(uZ);Nlo=r(TXr,"funnel"),TXr.forEach(t),qlo=r(p9," \u2014 "),RS=n(p9,"A",{href:!0});var FXr=s(RS);Glo=r(FXr,"FunnelModel"),FXr.forEach(t),Olo=r(p9," or "),SS=n(p9,"A",{href:!0});var CXr=s(SS);Xlo=r(CXr,"FunnelBaseModel"),CXr.forEach(t),Vlo=r(p9," (Funnel Transformer model)"),p9.forEach(t),zlo=i(C),Lp=n(C,"LI",{});var VCe=s(Lp);bZ=n(VCe,"STRONG",{});var MXr=s(bZ);Wlo=r(MXr,"glpn"),MXr.forEach(t),Qlo=r(VCe," \u2014 "),PS=n(VCe,"A",{href:!0});var EXr=s(PS);Hlo=r(EXr,"GLPNModel"),EXr.forEach(t),Ulo=r(VCe," (GLPN model)"),VCe.forEach(t),Jlo=i(C),Bp=n(C,"LI",{});var zCe=s(Bp);vZ=n(zCe,"STRONG",{});var yXr=s(vZ);Ylo=r(yXr,"gpt2"),yXr.forEach(t),Klo=r(zCe," \u2014 "),$S=n(zCe,"A",{href:!0});var wXr=s($S);Zlo=r(wXr,"GPT2Model"),wXr.forEach(t),eio=r(zCe," (OpenAI GPT-2 model)"),zCe.forEach(t),oio=i(C),xp=n(C,"LI",{});var WCe=s(xp);TZ=n(WCe,"STRONG",{});var AXr=s(TZ);rio=r(AXr,"gpt_neo"),AXr.forEach(t),tio=r(WCe," \u2014 "),IS=n(WCe,"A",{href:!0});var LXr=s(IS);aio=r(LXr,"GPTNeoModel"),LXr.forEach(t),nio=r(WCe," (GPT Neo model)"),WCe.forEach(t),sio=i(C),kp=n(C,"LI",{});var QCe=s(kp);FZ=n(QCe,"STRONG",{});var BXr=s(FZ);lio=r(BXr,"gptj"),BXr.forEach(t),iio=r(QCe," \u2014 "),jS=n(QCe,"A",{href:!0});var xXr=s(jS);dio=r(xXr,"GPTJModel"),xXr.forEach(t),cio=r(QCe," (GPT-J model)"),QCe.forEach(t),fio=i(C),Rp=n(C,"LI",{});var HCe=s(Rp);CZ=n(HCe,"STRONG",{});var kXr=s(CZ);mio=r(kXr,"hubert"),kXr.forEach(t),gio=r(HCe," \u2014 "),DS=n(HCe,"A",{href:!0});var RXr=s(DS);hio=r(RXr,"HubertModel"),RXr.forEach(t),pio=r(HCe," (Hubert model)"),HCe.forEach(t),_io=i(C),Sp=n(C,"LI",{});var UCe=s(Sp);MZ=n(UCe,"STRONG",{});var SXr=s(MZ);uio=r(SXr,"ibert"),SXr.forEach(t),bio=r(UCe," \u2014 "),NS=n(UCe,"A",{href:!0});var PXr=s(NS);vio=r(PXr,"IBertModel"),PXr.forEach(t),Tio=r(UCe," (I-BERT model)"),UCe.forEach(t),Fio=i(C),Pp=n(C,"LI",{});var JCe=s(Pp);EZ=n(JCe,"STRONG",{});var $Xr=s(EZ);Cio=r($Xr,"imagegpt"),$Xr.forEach(t),Mio=r(JCe," \u2014 "),qS=n(JCe,"A",{href:!0});var IXr=s(qS);Eio=r(IXr,"ImageGPTModel"),IXr.forEach(t),yio=r(JCe," (ImageGPT model)"),JCe.forEach(t),wio=i(C),$p=n(C,"LI",{});var YCe=s($p);yZ=n(YCe,"STRONG",{});var jXr=s(yZ);Aio=r(jXr,"layoutlm"),jXr.forEach(t),Lio=r(YCe," \u2014 "),GS=n(YCe,"A",{href:!0});var DXr=s(GS);Bio=r(DXr,"LayoutLMModel"),DXr.forEach(t),xio=r(YCe," (LayoutLM model)"),YCe.forEach(t),kio=i(C),Ip=n(C,"LI",{});var KCe=s(Ip);wZ=n(KCe,"STRONG",{});var NXr=s(wZ);Rio=r(NXr,"layoutlmv2"),NXr.forEach(t),Sio=r(KCe," \u2014 "),OS=n(KCe,"A",{href:!0});var qXr=s(OS);Pio=r(qXr,"LayoutLMv2Model"),qXr.forEach(t),$io=r(KCe," (LayoutLMv2 model)"),KCe.forEach(t),Iio=i(C),jp=n(C,"LI",{});var ZCe=s(jp);AZ=n(ZCe,"STRONG",{});var GXr=s(AZ);jio=r(GXr,"led"),GXr.forEach(t),Dio=r(ZCe," \u2014 "),XS=n(ZCe,"A",{href:!0});var OXr=s(XS);Nio=r(OXr,"LEDModel"),OXr.forEach(t),qio=r(ZCe," (LED model)"),ZCe.forEach(t),Gio=i(C),Dp=n(C,"LI",{});var eMe=s(Dp);LZ=n(eMe,"STRONG",{});var XXr=s(LZ);Oio=r(XXr,"longformer"),XXr.forEach(t),Xio=r(eMe," \u2014 "),VS=n(eMe,"A",{href:!0});var VXr=s(VS);Vio=r(VXr,"LongformerModel"),VXr.forEach(t),zio=r(eMe," (Longformer model)"),eMe.forEach(t),Wio=i(C),Np=n(C,"LI",{});var oMe=s(Np);BZ=n(oMe,"STRONG",{});var zXr=s(BZ);Qio=r(zXr,"luke"),zXr.forEach(t),Hio=r(oMe," \u2014 "),zS=n(oMe,"A",{href:!0});var WXr=s(zS);Uio=r(WXr,"LukeModel"),WXr.forEach(t),Jio=r(oMe," (LUKE model)"),oMe.forEach(t),Yio=i(C),qp=n(C,"LI",{});var rMe=s(qp);xZ=n(rMe,"STRONG",{});var QXr=s(xZ);Kio=r(QXr,"lxmert"),QXr.forEach(t),Zio=r(rMe," \u2014 "),WS=n(rMe,"A",{href:!0});var HXr=s(WS);edo=r(HXr,"LxmertModel"),HXr.forEach(t),odo=r(rMe," (LXMERT model)"),rMe.forEach(t),rdo=i(C),Gp=n(C,"LI",{});var tMe=s(Gp);kZ=n(tMe,"STRONG",{});var UXr=s(kZ);tdo=r(UXr,"m2m_100"),UXr.forEach(t),ado=r(tMe," \u2014 "),QS=n(tMe,"A",{href:!0});var JXr=s(QS);ndo=r(JXr,"M2M100Model"),JXr.forEach(t),sdo=r(tMe," (M2M100 model)"),tMe.forEach(t),ldo=i(C),Op=n(C,"LI",{});var aMe=s(Op);RZ=n(aMe,"STRONG",{});var YXr=s(RZ);ido=r(YXr,"marian"),YXr.forEach(t),ddo=r(aMe," \u2014 "),HS=n(aMe,"A",{href:!0});var KXr=s(HS);cdo=r(KXr,"MarianModel"),KXr.forEach(t),fdo=r(aMe," (Marian model)"),aMe.forEach(t),mdo=i(C),Xp=n(C,"LI",{});var nMe=s(Xp);SZ=n(nMe,"STRONG",{});var ZXr=s(SZ);gdo=r(ZXr,"maskformer"),ZXr.forEach(t),hdo=r(nMe," \u2014 "),US=n(nMe,"A",{href:!0});var eVr=s(US);pdo=r(eVr,"MaskFormerModel"),eVr.forEach(t),_do=r(nMe," (MaskFormer model)"),nMe.forEach(t),udo=i(C),Vp=n(C,"LI",{});var sMe=s(Vp);PZ=n(sMe,"STRONG",{});var oVr=s(PZ);bdo=r(oVr,"mbart"),oVr.forEach(t),vdo=r(sMe," \u2014 "),JS=n(sMe,"A",{href:!0});var rVr=s(JS);Tdo=r(rVr,"MBartModel"),rVr.forEach(t),Fdo=r(sMe," (mBART model)"),sMe.forEach(t),Cdo=i(C),zp=n(C,"LI",{});var lMe=s(zp);$Z=n(lMe,"STRONG",{});var tVr=s($Z);Mdo=r(tVr,"megatron-bert"),tVr.forEach(t),Edo=r(lMe," \u2014 "),YS=n(lMe,"A",{href:!0});var aVr=s(YS);ydo=r(aVr,"MegatronBertModel"),aVr.forEach(t),wdo=r(lMe," (MegatronBert model)"),lMe.forEach(t),Ado=i(C),Wp=n(C,"LI",{});var iMe=s(Wp);IZ=n(iMe,"STRONG",{});var nVr=s(IZ);Ldo=r(nVr,"mobilebert"),nVr.forEach(t),Bdo=r(iMe," \u2014 "),KS=n(iMe,"A",{href:!0});var sVr=s(KS);xdo=r(sVr,"MobileBertModel"),sVr.forEach(t),kdo=r(iMe," (MobileBERT model)"),iMe.forEach(t),Rdo=i(C),Qp=n(C,"LI",{});var dMe=s(Qp);jZ=n(dMe,"STRONG",{});var lVr=s(jZ);Sdo=r(lVr,"mpnet"),lVr.forEach(t),Pdo=r(dMe," \u2014 "),ZS=n(dMe,"A",{href:!0});var iVr=s(ZS);$do=r(iVr,"MPNetModel"),iVr.forEach(t),Ido=r(dMe," (MPNet model)"),dMe.forEach(t),jdo=i(C),Hp=n(C,"LI",{});var cMe=s(Hp);DZ=n(cMe,"STRONG",{});var dVr=s(DZ);Ddo=r(dVr,"mt5"),dVr.forEach(t),Ndo=r(cMe," \u2014 "),eP=n(cMe,"A",{href:!0});var cVr=s(eP);qdo=r(cVr,"MT5Model"),cVr.forEach(t),Gdo=r(cMe," (mT5 model)"),cMe.forEach(t),Odo=i(C),Up=n(C,"LI",{});var fMe=s(Up);NZ=n(fMe,"STRONG",{});var fVr=s(NZ);Xdo=r(fVr,"nystromformer"),fVr.forEach(t),Vdo=r(fMe," \u2014 "),oP=n(fMe,"A",{href:!0});var mVr=s(oP);zdo=r(mVr,"NystromformerModel"),mVr.forEach(t),Wdo=r(fMe," (Nystromformer model)"),fMe.forEach(t),Qdo=i(C),Jp=n(C,"LI",{});var mMe=s(Jp);qZ=n(mMe,"STRONG",{});var gVr=s(qZ);Hdo=r(gVr,"openai-gpt"),gVr.forEach(t),Udo=r(mMe," \u2014 "),rP=n(mMe,"A",{href:!0});var hVr=s(rP);Jdo=r(hVr,"OpenAIGPTModel"),hVr.forEach(t),Ydo=r(mMe," (OpenAI GPT model)"),mMe.forEach(t),Kdo=i(C),Yp=n(C,"LI",{});var gMe=s(Yp);GZ=n(gMe,"STRONG",{});var pVr=s(GZ);Zdo=r(pVr,"pegasus"),pVr.forEach(t),eco=r(gMe," \u2014 "),tP=n(gMe,"A",{href:!0});var _Vr=s(tP);oco=r(_Vr,"PegasusModel"),_Vr.forEach(t),rco=r(gMe," (Pegasus model)"),gMe.forEach(t),tco=i(C),Kp=n(C,"LI",{});var hMe=s(Kp);OZ=n(hMe,"STRONG",{});var uVr=s(OZ);aco=r(uVr,"perceiver"),uVr.forEach(t),nco=r(hMe," \u2014 "),aP=n(hMe,"A",{href:!0});var bVr=s(aP);sco=r(bVr,"PerceiverModel"),bVr.forEach(t),lco=r(hMe," (Perceiver model)"),hMe.forEach(t),ico=i(C),Zp=n(C,"LI",{});var pMe=s(Zp);XZ=n(pMe,"STRONG",{});var vVr=s(XZ);dco=r(vVr,"plbart"),vVr.forEach(t),cco=r(pMe," \u2014 "),nP=n(pMe,"A",{href:!0});var TVr=s(nP);fco=r(TVr,"PLBartModel"),TVr.forEach(t),mco=r(pMe," (PLBart model)"),pMe.forEach(t),gco=i(C),e_=n(C,"LI",{});var _Me=s(e_);VZ=n(_Me,"STRONG",{});var FVr=s(VZ);hco=r(FVr,"poolformer"),FVr.forEach(t),pco=r(_Me," \u2014 "),sP=n(_Me,"A",{href:!0});var CVr=s(sP);_co=r(CVr,"PoolFormerModel"),CVr.forEach(t),uco=r(_Me," (PoolFormer model)"),_Me.forEach(t),bco=i(C),o_=n(C,"LI",{});var uMe=s(o_);zZ=n(uMe,"STRONG",{});var MVr=s(zZ);vco=r(MVr,"prophetnet"),MVr.forEach(t),Tco=r(uMe," \u2014 "),lP=n(uMe,"A",{href:!0});var EVr=s(lP);Fco=r(EVr,"ProphetNetModel"),EVr.forEach(t),Cco=r(uMe," (ProphetNet model)"),uMe.forEach(t),Mco=i(C),r_=n(C,"LI",{});var bMe=s(r_);WZ=n(bMe,"STRONG",{});var yVr=s(WZ);Eco=r(yVr,"qdqbert"),yVr.forEach(t),yco=r(bMe," \u2014 "),iP=n(bMe,"A",{href:!0});var wVr=s(iP);wco=r(wVr,"QDQBertModel"),wVr.forEach(t),Aco=r(bMe," (QDQBert model)"),bMe.forEach(t),Lco=i(C),t_=n(C,"LI",{});var vMe=s(t_);QZ=n(vMe,"STRONG",{});var AVr=s(QZ);Bco=r(AVr,"reformer"),AVr.forEach(t),xco=r(vMe," \u2014 "),dP=n(vMe,"A",{href:!0});var LVr=s(dP);kco=r(LVr,"ReformerModel"),LVr.forEach(t),Rco=r(vMe," (Reformer model)"),vMe.forEach(t),Sco=i(C),a_=n(C,"LI",{});var TMe=s(a_);HZ=n(TMe,"STRONG",{});var BVr=s(HZ);Pco=r(BVr,"rembert"),BVr.forEach(t),$co=r(TMe," \u2014 "),cP=n(TMe,"A",{href:!0});var xVr=s(cP);Ico=r(xVr,"RemBertModel"),xVr.forEach(t),jco=r(TMe," (RemBERT model)"),TMe.forEach(t),Dco=i(C),n_=n(C,"LI",{});var FMe=s(n_);UZ=n(FMe,"STRONG",{});var kVr=s(UZ);Nco=r(kVr,"resnet"),kVr.forEach(t),qco=r(FMe," \u2014 "),fP=n(FMe,"A",{href:!0});var RVr=s(fP);Gco=r(RVr,"ResNetModel"),RVr.forEach(t),Oco=r(FMe," (ResNet model)"),FMe.forEach(t),Xco=i(C),s_=n(C,"LI",{});var CMe=s(s_);JZ=n(CMe,"STRONG",{});var SVr=s(JZ);Vco=r(SVr,"retribert"),SVr.forEach(t),zco=r(CMe," \u2014 "),mP=n(CMe,"A",{href:!0});var PVr=s(mP);Wco=r(PVr,"RetriBertModel"),PVr.forEach(t),Qco=r(CMe," (RetriBERT model)"),CMe.forEach(t),Hco=i(C),l_=n(C,"LI",{});var MMe=s(l_);YZ=n(MMe,"STRONG",{});var $Vr=s(YZ);Uco=r($Vr,"roberta"),$Vr.forEach(t),Jco=r(MMe," \u2014 "),gP=n(MMe,"A",{href:!0});var IVr=s(gP);Yco=r(IVr,"RobertaModel"),IVr.forEach(t),Kco=r(MMe," (RoBERTa model)"),MMe.forEach(t),Zco=i(C),i_=n(C,"LI",{});var EMe=s(i_);KZ=n(EMe,"STRONG",{});var jVr=s(KZ);efo=r(jVr,"roformer"),jVr.forEach(t),ofo=r(EMe," \u2014 "),hP=n(EMe,"A",{href:!0});var DVr=s(hP);rfo=r(DVr,"RoFormerModel"),DVr.forEach(t),tfo=r(EMe," (RoFormer model)"),EMe.forEach(t),afo=i(C),d_=n(C,"LI",{});var yMe=s(d_);ZZ=n(yMe,"STRONG",{});var NVr=s(ZZ);nfo=r(NVr,"segformer"),NVr.forEach(t),sfo=r(yMe," \u2014 "),pP=n(yMe,"A",{href:!0});var qVr=s(pP);lfo=r(qVr,"SegformerModel"),qVr.forEach(t),ifo=r(yMe," (SegFormer model)"),yMe.forEach(t),dfo=i(C),c_=n(C,"LI",{});var wMe=s(c_);eee=n(wMe,"STRONG",{});var GVr=s(eee);cfo=r(GVr,"sew"),GVr.forEach(t),ffo=r(wMe," \u2014 "),_P=n(wMe,"A",{href:!0});var OVr=s(_P);mfo=r(OVr,"SEWModel"),OVr.forEach(t),gfo=r(wMe," (SEW model)"),wMe.forEach(t),hfo=i(C),f_=n(C,"LI",{});var AMe=s(f_);oee=n(AMe,"STRONG",{});var XVr=s(oee);pfo=r(XVr,"sew-d"),XVr.forEach(t),_fo=r(AMe," \u2014 "),uP=n(AMe,"A",{href:!0});var VVr=s(uP);ufo=r(VVr,"SEWDModel"),VVr.forEach(t),bfo=r(AMe," (SEW-D model)"),AMe.forEach(t),vfo=i(C),m_=n(C,"LI",{});var LMe=s(m_);ree=n(LMe,"STRONG",{});var zVr=s(ree);Tfo=r(zVr,"speech_to_text"),zVr.forEach(t),Ffo=r(LMe," \u2014 "),bP=n(LMe,"A",{href:!0});var WVr=s(bP);Cfo=r(WVr,"Speech2TextModel"),WVr.forEach(t),Mfo=r(LMe," (Speech2Text model)"),LMe.forEach(t),Efo=i(C),g_=n(C,"LI",{});var BMe=s(g_);tee=n(BMe,"STRONG",{});var QVr=s(tee);yfo=r(QVr,"splinter"),QVr.forEach(t),wfo=r(BMe," \u2014 "),vP=n(BMe,"A",{href:!0});var HVr=s(vP);Afo=r(HVr,"SplinterModel"),HVr.forEach(t),Lfo=r(BMe," (Splinter model)"),BMe.forEach(t),Bfo=i(C),h_=n(C,"LI",{});var xMe=s(h_);aee=n(xMe,"STRONG",{});var UVr=s(aee);xfo=r(UVr,"squeezebert"),UVr.forEach(t),kfo=r(xMe," \u2014 "),TP=n(xMe,"A",{href:!0});var JVr=s(TP);Rfo=r(JVr,"SqueezeBertModel"),JVr.forEach(t),Sfo=r(xMe," (SqueezeBERT model)"),xMe.forEach(t),Pfo=i(C),p_=n(C,"LI",{});var kMe=s(p_);nee=n(kMe,"STRONG",{});var YVr=s(nee);$fo=r(YVr,"swin"),YVr.forEach(t),Ifo=r(kMe," \u2014 "),FP=n(kMe,"A",{href:!0});var KVr=s(FP);jfo=r(KVr,"SwinModel"),KVr.forEach(t),Dfo=r(kMe," (Swin model)"),kMe.forEach(t),Nfo=i(C),__=n(C,"LI",{});var RMe=s(__);see=n(RMe,"STRONG",{});var ZVr=s(see);qfo=r(ZVr,"t5"),ZVr.forEach(t),Gfo=r(RMe," \u2014 "),CP=n(RMe,"A",{href:!0});var ezr=s(CP);Ofo=r(ezr,"T5Model"),ezr.forEach(t),Xfo=r(RMe," (T5 model)"),RMe.forEach(t),Vfo=i(C),u_=n(C,"LI",{});var SMe=s(u_);lee=n(SMe,"STRONG",{});var ozr=s(lee);zfo=r(ozr,"tapas"),ozr.forEach(t),Wfo=r(SMe," \u2014 "),MP=n(SMe,"A",{href:!0});var rzr=s(MP);Qfo=r(rzr,"TapasModel"),rzr.forEach(t),Hfo=r(SMe," (TAPAS model)"),SMe.forEach(t),Ufo=i(C),b_=n(C,"LI",{});var PMe=s(b_);iee=n(PMe,"STRONG",{});var tzr=s(iee);Jfo=r(tzr,"transfo-xl"),tzr.forEach(t),Yfo=r(PMe," \u2014 "),EP=n(PMe,"A",{href:!0});var azr=s(EP);Kfo=r(azr,"TransfoXLModel"),azr.forEach(t),Zfo=r(PMe," (Transformer-XL model)"),PMe.forEach(t),emo=i(C),v_=n(C,"LI",{});var $Me=s(v_);dee=n($Me,"STRONG",{});var nzr=s(dee);omo=r(nzr,"unispeech"),nzr.forEach(t),rmo=r($Me," \u2014 "),yP=n($Me,"A",{href:!0});var szr=s(yP);tmo=r(szr,"UniSpeechModel"),szr.forEach(t),amo=r($Me," (UniSpeech model)"),$Me.forEach(t),nmo=i(C),T_=n(C,"LI",{});var IMe=s(T_);cee=n(IMe,"STRONG",{});var lzr=s(cee);smo=r(lzr,"unispeech-sat"),lzr.forEach(t),lmo=r(IMe," \u2014 "),wP=n(IMe,"A",{href:!0});var izr=s(wP);imo=r(izr,"UniSpeechSatModel"),izr.forEach(t),dmo=r(IMe," (UniSpeechSat model)"),IMe.forEach(t),cmo=i(C),F_=n(C,"LI",{});var jMe=s(F_);fee=n(jMe,"STRONG",{});var dzr=s(fee);fmo=r(dzr,"van"),dzr.forEach(t),mmo=r(jMe," \u2014 "),AP=n(jMe,"A",{href:!0});var czr=s(AP);gmo=r(czr,"VanModel"),czr.forEach(t),hmo=r(jMe," (VAN model)"),jMe.forEach(t),pmo=i(C),C_=n(C,"LI",{});var DMe=s(C_);mee=n(DMe,"STRONG",{});var fzr=s(mee);_mo=r(fzr,"vilt"),fzr.forEach(t),umo=r(DMe," \u2014 "),LP=n(DMe,"A",{href:!0});var mzr=s(LP);bmo=r(mzr,"ViltModel"),mzr.forEach(t),vmo=r(DMe," (ViLT model)"),DMe.forEach(t),Tmo=i(C),M_=n(C,"LI",{});var NMe=s(M_);gee=n(NMe,"STRONG",{});var gzr=s(gee);Fmo=r(gzr,"vision-text-dual-encoder"),gzr.forEach(t),Cmo=r(NMe," \u2014 "),BP=n(NMe,"A",{href:!0});var hzr=s(BP);Mmo=r(hzr,"VisionTextDualEncoderModel"),hzr.forEach(t),Emo=r(NMe," (VisionTextDualEncoder model)"),NMe.forEach(t),ymo=i(C),E_=n(C,"LI",{});var qMe=s(E_);hee=n(qMe,"STRONG",{});var pzr=s(hee);wmo=r(pzr,"visual_bert"),pzr.forEach(t),Amo=r(qMe," \u2014 "),xP=n(qMe,"A",{href:!0});var _zr=s(xP);Lmo=r(_zr,"VisualBertModel"),_zr.forEach(t),Bmo=r(qMe," (VisualBert model)"),qMe.forEach(t),xmo=i(C),y_=n(C,"LI",{});var GMe=s(y_);pee=n(GMe,"STRONG",{});var uzr=s(pee);kmo=r(uzr,"vit"),uzr.forEach(t),Rmo=r(GMe," \u2014 "),kP=n(GMe,"A",{href:!0});var bzr=s(kP);Smo=r(bzr,"ViTModel"),bzr.forEach(t),Pmo=r(GMe," (ViT model)"),GMe.forEach(t),$mo=i(C),w_=n(C,"LI",{});var OMe=s(w_);_ee=n(OMe,"STRONG",{});var vzr=s(_ee);Imo=r(vzr,"vit_mae"),vzr.forEach(t),jmo=r(OMe," \u2014 "),RP=n(OMe,"A",{href:!0});var Tzr=s(RP);Dmo=r(Tzr,"ViTMAEModel"),Tzr.forEach(t),Nmo=r(OMe," (ViTMAE model)"),OMe.forEach(t),qmo=i(C),A_=n(C,"LI",{});var XMe=s(A_);uee=n(XMe,"STRONG",{});var Fzr=s(uee);Gmo=r(Fzr,"wav2vec2"),Fzr.forEach(t),Omo=r(XMe," \u2014 "),SP=n(XMe,"A",{href:!0});var Czr=s(SP);Xmo=r(Czr,"Wav2Vec2Model"),Czr.forEach(t),Vmo=r(XMe," (Wav2Vec2 model)"),XMe.forEach(t),zmo=i(C),L_=n(C,"LI",{});var VMe=s(L_);bee=n(VMe,"STRONG",{});var Mzr=s(bee);Wmo=r(Mzr,"wavlm"),Mzr.forEach(t),Qmo=r(VMe," \u2014 "),PP=n(VMe,"A",{href:!0});var Ezr=s(PP);Hmo=r(Ezr,"WavLMModel"),Ezr.forEach(t),Umo=r(VMe," (WavLM model)"),VMe.forEach(t),Jmo=i(C),B_=n(C,"LI",{});var zMe=s(B_);vee=n(zMe,"STRONG",{});var yzr=s(vee);Ymo=r(yzr,"xglm"),yzr.forEach(t),Kmo=r(zMe," \u2014 "),$P=n(zMe,"A",{href:!0});var wzr=s($P);Zmo=r(wzr,"XGLMModel"),wzr.forEach(t),ego=r(zMe," (XGLM model)"),zMe.forEach(t),ogo=i(C),x_=n(C,"LI",{});var WMe=s(x_);Tee=n(WMe,"STRONG",{});var Azr=s(Tee);rgo=r(Azr,"xlm"),Azr.forEach(t),tgo=r(WMe," \u2014 "),IP=n(WMe,"A",{href:!0});var Lzr=s(IP);ago=r(Lzr,"XLMModel"),Lzr.forEach(t),ngo=r(WMe," (XLM model)"),WMe.forEach(t),sgo=i(C),k_=n(C,"LI",{});var QMe=s(k_);Fee=n(QMe,"STRONG",{});var Bzr=s(Fee);lgo=r(Bzr,"xlm-prophetnet"),Bzr.forEach(t),igo=r(QMe," \u2014 "),jP=n(QMe,"A",{href:!0});var xzr=s(jP);dgo=r(xzr,"XLMProphetNetModel"),xzr.forEach(t),cgo=r(QMe," (XLMProphetNet model)"),QMe.forEach(t),fgo=i(C),R_=n(C,"LI",{});var HMe=s(R_);Cee=n(HMe,"STRONG",{});var kzr=s(Cee);mgo=r(kzr,"xlm-roberta"),kzr.forEach(t),ggo=r(HMe," \u2014 "),DP=n(HMe,"A",{href:!0});var Rzr=s(DP);hgo=r(Rzr,"XLMRobertaModel"),Rzr.forEach(t),pgo=r(HMe," (XLM-RoBERTa model)"),HMe.forEach(t),_go=i(C),S_=n(C,"LI",{});var UMe=s(S_);Mee=n(UMe,"STRONG",{});var Szr=s(Mee);ugo=r(Szr,"xlm-roberta-xl"),Szr.forEach(t),bgo=r(UMe," \u2014 "),NP=n(UMe,"A",{href:!0});var Pzr=s(NP);vgo=r(Pzr,"XLMRobertaXLModel"),Pzr.forEach(t),Tgo=r(UMe," (XLM-RoBERTa-XL model)"),UMe.forEach(t),Fgo=i(C),P_=n(C,"LI",{});var JMe=s(P_);Eee=n(JMe,"STRONG",{});var $zr=s(Eee);Cgo=r($zr,"xlnet"),$zr.forEach(t),Mgo=r(JMe," \u2014 "),qP=n(JMe,"A",{href:!0});var Izr=s(qP);Ego=r(Izr,"XLNetModel"),Izr.forEach(t),ygo=r(JMe," (XLNet model)"),JMe.forEach(t),wgo=i(C),$_=n(C,"LI",{});var YMe=s($_);yee=n(YMe,"STRONG",{});var jzr=s(yee);Ago=r(jzr,"yoso"),jzr.forEach(t),Lgo=r(YMe," \u2014 "),GP=n(YMe,"A",{href:!0});var Dzr=s(GP);Bgo=r(Dzr,"YosoModel"),Dzr.forEach(t),xgo=r(YMe," (YOSO model)"),YMe.forEach(t),C.forEach(t),kgo=i(Xt),I_=n(Xt,"P",{});var KMe=s(I_);Rgo=r(KMe,"The model is set in evaluation mode by default using "),wee=n(KMe,"CODE",{});var Nzr=s(wee);Sgo=r(Nzr,"model.eval()"),Nzr.forEach(t),Pgo=r(KMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aee=n(KMe,"CODE",{});var qzr=s(Aee);$go=r(qzr,"model.train()"),qzr.forEach(t),KMe.forEach(t),Igo=i(Xt),Lee=n(Xt,"P",{});var Gzr=s(Lee);jgo=r(Gzr,"Examples:"),Gzr.forEach(t),Dgo=i(Xt),m(aE.$$.fragment,Xt),Xt.forEach(t),Ys.forEach(t),oRe=i(d),sd=n(d,"H2",{class:!0});var mPe=s(sd);j_=n(mPe,"A",{id:!0,class:!0,href:!0});var Ozr=s(j_);Bee=n(Ozr,"SPAN",{});var Xzr=s(Bee);m(nE.$$.fragment,Xzr),Xzr.forEach(t),Ozr.forEach(t),Ngo=i(mPe),xee=n(mPe,"SPAN",{});var Vzr=s(xee);qgo=r(Vzr,"AutoModelForPreTraining"),Vzr.forEach(t),mPe.forEach(t),rRe=i(d),Ko=n(d,"DIV",{class:!0});var Zs=s(Ko);m(sE.$$.fragment,Zs),Ggo=i(Zs),ld=n(Zs,"P",{});var bW=s(ld);Ogo=r(bW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kee=n(bW,"CODE",{});var zzr=s(kee);Xgo=r(zzr,"from_pretrained()"),zzr.forEach(t),Vgo=r(bW,"class method or the "),Ree=n(bW,"CODE",{});var Wzr=s(Ree);zgo=r(Wzr,"from_config()"),Wzr.forEach(t),Wgo=r(bW,`class
method.`),bW.forEach(t),Qgo=i(Zs),lE=n(Zs,"P",{});var gPe=s(lE);Hgo=r(gPe,"This class cannot be instantiated directly using "),See=n(gPe,"CODE",{});var Qzr=s(See);Ugo=r(Qzr,"__init__()"),Qzr.forEach(t),Jgo=r(gPe," (throws an error)."),gPe.forEach(t),Ygo=i(Zs),Qr=n(Zs,"DIV",{class:!0});var el=s(Qr);m(iE.$$.fragment,el),Kgo=i(el),Pee=n(el,"P",{});var Hzr=s(Pee);Zgo=r(Hzr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Hzr.forEach(t),eho=i(el),id=n(el,"P",{});var vW=s(id);oho=r(vW,`Note:
Loading a model from its configuration file does `),$ee=n(vW,"STRONG",{});var Uzr=s($ee);rho=r(Uzr,"not"),Uzr.forEach(t),tho=r(vW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iee=n(vW,"CODE",{});var Jzr=s(Iee);aho=r(Jzr,"from_pretrained()"),Jzr.forEach(t),nho=r(vW,"to load the model weights."),vW.forEach(t),sho=i(el),jee=n(el,"P",{});var Yzr=s(jee);lho=r(Yzr,"Examples:"),Yzr.forEach(t),iho=i(el),m(dE.$$.fragment,el),el.forEach(t),dho=i(Zs),De=n(Zs,"DIV",{class:!0});var Vt=s(De);m(cE.$$.fragment,Vt),cho=i(Vt),Dee=n(Vt,"P",{});var Kzr=s(Dee);fho=r(Kzr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Kzr.forEach(t),mho=i(Vt),Ua=n(Vt,"P",{});var CM=s(Ua);gho=r(CM,"The model class to instantiate is selected based on the "),Nee=n(CM,"CODE",{});var Zzr=s(Nee);hho=r(Zzr,"model_type"),Zzr.forEach(t),pho=r(CM,` property of the config object (either
passed as an argument or loaded from `),qee=n(CM,"CODE",{});var eWr=s(qee);_ho=r(eWr,"pretrained_model_name_or_path"),eWr.forEach(t),uho=r(CM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gee=n(CM,"CODE",{});var oWr=s(Gee);bho=r(oWr,"pretrained_model_name_or_path"),oWr.forEach(t),vho=r(CM,":"),CM.forEach(t),Tho=i(Vt),k=n(Vt,"UL",{});var S=s(k);D_=n(S,"LI",{});var ZMe=s(D_);Oee=n(ZMe,"STRONG",{});var rWr=s(Oee);Fho=r(rWr,"albert"),rWr.forEach(t),Cho=r(ZMe," \u2014 "),OP=n(ZMe,"A",{href:!0});var tWr=s(OP);Mho=r(tWr,"AlbertForPreTraining"),tWr.forEach(t),Eho=r(ZMe," (ALBERT model)"),ZMe.forEach(t),yho=i(S),N_=n(S,"LI",{});var e4e=s(N_);Xee=n(e4e,"STRONG",{});var aWr=s(Xee);who=r(aWr,"bart"),aWr.forEach(t),Aho=r(e4e," \u2014 "),XP=n(e4e,"A",{href:!0});var nWr=s(XP);Lho=r(nWr,"BartForConditionalGeneration"),nWr.forEach(t),Bho=r(e4e," (BART model)"),e4e.forEach(t),xho=i(S),q_=n(S,"LI",{});var o4e=s(q_);Vee=n(o4e,"STRONG",{});var sWr=s(Vee);kho=r(sWr,"bert"),sWr.forEach(t),Rho=r(o4e," \u2014 "),VP=n(o4e,"A",{href:!0});var lWr=s(VP);Sho=r(lWr,"BertForPreTraining"),lWr.forEach(t),Pho=r(o4e," (BERT model)"),o4e.forEach(t),$ho=i(S),G_=n(S,"LI",{});var r4e=s(G_);zee=n(r4e,"STRONG",{});var iWr=s(zee);Iho=r(iWr,"big_bird"),iWr.forEach(t),jho=r(r4e," \u2014 "),zP=n(r4e,"A",{href:!0});var dWr=s(zP);Dho=r(dWr,"BigBirdForPreTraining"),dWr.forEach(t),Nho=r(r4e," (BigBird model)"),r4e.forEach(t),qho=i(S),O_=n(S,"LI",{});var t4e=s(O_);Wee=n(t4e,"STRONG",{});var cWr=s(Wee);Gho=r(cWr,"camembert"),cWr.forEach(t),Oho=r(t4e," \u2014 "),WP=n(t4e,"A",{href:!0});var fWr=s(WP);Xho=r(fWr,"CamembertForMaskedLM"),fWr.forEach(t),Vho=r(t4e," (CamemBERT model)"),t4e.forEach(t),zho=i(S),X_=n(S,"LI",{});var a4e=s(X_);Qee=n(a4e,"STRONG",{});var mWr=s(Qee);Who=r(mWr,"ctrl"),mWr.forEach(t),Qho=r(a4e," \u2014 "),QP=n(a4e,"A",{href:!0});var gWr=s(QP);Hho=r(gWr,"CTRLLMHeadModel"),gWr.forEach(t),Uho=r(a4e," (CTRL model)"),a4e.forEach(t),Jho=i(S),V_=n(S,"LI",{});var n4e=s(V_);Hee=n(n4e,"STRONG",{});var hWr=s(Hee);Yho=r(hWr,"data2vec-text"),hWr.forEach(t),Kho=r(n4e," \u2014 "),HP=n(n4e,"A",{href:!0});var pWr=s(HP);Zho=r(pWr,"Data2VecTextForMaskedLM"),pWr.forEach(t),epo=r(n4e," (Data2VecText model)"),n4e.forEach(t),opo=i(S),z_=n(S,"LI",{});var s4e=s(z_);Uee=n(s4e,"STRONG",{});var _Wr=s(Uee);rpo=r(_Wr,"deberta"),_Wr.forEach(t),tpo=r(s4e," \u2014 "),UP=n(s4e,"A",{href:!0});var uWr=s(UP);apo=r(uWr,"DebertaForMaskedLM"),uWr.forEach(t),npo=r(s4e," (DeBERTa model)"),s4e.forEach(t),spo=i(S),W_=n(S,"LI",{});var l4e=s(W_);Jee=n(l4e,"STRONG",{});var bWr=s(Jee);lpo=r(bWr,"deberta-v2"),bWr.forEach(t),ipo=r(l4e," \u2014 "),JP=n(l4e,"A",{href:!0});var vWr=s(JP);dpo=r(vWr,"DebertaV2ForMaskedLM"),vWr.forEach(t),cpo=r(l4e," (DeBERTa-v2 model)"),l4e.forEach(t),fpo=i(S),Q_=n(S,"LI",{});var i4e=s(Q_);Yee=n(i4e,"STRONG",{});var TWr=s(Yee);mpo=r(TWr,"distilbert"),TWr.forEach(t),gpo=r(i4e," \u2014 "),YP=n(i4e,"A",{href:!0});var FWr=s(YP);hpo=r(FWr,"DistilBertForMaskedLM"),FWr.forEach(t),ppo=r(i4e," (DistilBERT model)"),i4e.forEach(t),_po=i(S),H_=n(S,"LI",{});var d4e=s(H_);Kee=n(d4e,"STRONG",{});var CWr=s(Kee);upo=r(CWr,"electra"),CWr.forEach(t),bpo=r(d4e," \u2014 "),KP=n(d4e,"A",{href:!0});var MWr=s(KP);vpo=r(MWr,"ElectraForPreTraining"),MWr.forEach(t),Tpo=r(d4e," (ELECTRA model)"),d4e.forEach(t),Fpo=i(S),U_=n(S,"LI",{});var c4e=s(U_);Zee=n(c4e,"STRONG",{});var EWr=s(Zee);Cpo=r(EWr,"flaubert"),EWr.forEach(t),Mpo=r(c4e," \u2014 "),ZP=n(c4e,"A",{href:!0});var yWr=s(ZP);Epo=r(yWr,"FlaubertWithLMHeadModel"),yWr.forEach(t),ypo=r(c4e," (FlauBERT model)"),c4e.forEach(t),wpo=i(S),J_=n(S,"LI",{});var f4e=s(J_);eoe=n(f4e,"STRONG",{});var wWr=s(eoe);Apo=r(wWr,"fnet"),wWr.forEach(t),Lpo=r(f4e," \u2014 "),e$=n(f4e,"A",{href:!0});var AWr=s(e$);Bpo=r(AWr,"FNetForPreTraining"),AWr.forEach(t),xpo=r(f4e," (FNet model)"),f4e.forEach(t),kpo=i(S),Y_=n(S,"LI",{});var m4e=s(Y_);ooe=n(m4e,"STRONG",{});var LWr=s(ooe);Rpo=r(LWr,"fsmt"),LWr.forEach(t),Spo=r(m4e," \u2014 "),o$=n(m4e,"A",{href:!0});var BWr=s(o$);Ppo=r(BWr,"FSMTForConditionalGeneration"),BWr.forEach(t),$po=r(m4e," (FairSeq Machine-Translation model)"),m4e.forEach(t),Ipo=i(S),K_=n(S,"LI",{});var g4e=s(K_);roe=n(g4e,"STRONG",{});var xWr=s(roe);jpo=r(xWr,"funnel"),xWr.forEach(t),Dpo=r(g4e," \u2014 "),r$=n(g4e,"A",{href:!0});var kWr=s(r$);Npo=r(kWr,"FunnelForPreTraining"),kWr.forEach(t),qpo=r(g4e," (Funnel Transformer model)"),g4e.forEach(t),Gpo=i(S),Z_=n(S,"LI",{});var h4e=s(Z_);toe=n(h4e,"STRONG",{});var RWr=s(toe);Opo=r(RWr,"gpt2"),RWr.forEach(t),Xpo=r(h4e," \u2014 "),t$=n(h4e,"A",{href:!0});var SWr=s(t$);Vpo=r(SWr,"GPT2LMHeadModel"),SWr.forEach(t),zpo=r(h4e," (OpenAI GPT-2 model)"),h4e.forEach(t),Wpo=i(S),eu=n(S,"LI",{});var p4e=s(eu);aoe=n(p4e,"STRONG",{});var PWr=s(aoe);Qpo=r(PWr,"ibert"),PWr.forEach(t),Hpo=r(p4e," \u2014 "),a$=n(p4e,"A",{href:!0});var $Wr=s(a$);Upo=r($Wr,"IBertForMaskedLM"),$Wr.forEach(t),Jpo=r(p4e," (I-BERT model)"),p4e.forEach(t),Ypo=i(S),ou=n(S,"LI",{});var _4e=s(ou);noe=n(_4e,"STRONG",{});var IWr=s(noe);Kpo=r(IWr,"layoutlm"),IWr.forEach(t),Zpo=r(_4e," \u2014 "),n$=n(_4e,"A",{href:!0});var jWr=s(n$);e_o=r(jWr,"LayoutLMForMaskedLM"),jWr.forEach(t),o_o=r(_4e," (LayoutLM model)"),_4e.forEach(t),r_o=i(S),ru=n(S,"LI",{});var u4e=s(ru);soe=n(u4e,"STRONG",{});var DWr=s(soe);t_o=r(DWr,"longformer"),DWr.forEach(t),a_o=r(u4e," \u2014 "),s$=n(u4e,"A",{href:!0});var NWr=s(s$);n_o=r(NWr,"LongformerForMaskedLM"),NWr.forEach(t),s_o=r(u4e," (Longformer model)"),u4e.forEach(t),l_o=i(S),tu=n(S,"LI",{});var b4e=s(tu);loe=n(b4e,"STRONG",{});var qWr=s(loe);i_o=r(qWr,"lxmert"),qWr.forEach(t),d_o=r(b4e," \u2014 "),l$=n(b4e,"A",{href:!0});var GWr=s(l$);c_o=r(GWr,"LxmertForPreTraining"),GWr.forEach(t),f_o=r(b4e," (LXMERT model)"),b4e.forEach(t),m_o=i(S),au=n(S,"LI",{});var v4e=s(au);ioe=n(v4e,"STRONG",{});var OWr=s(ioe);g_o=r(OWr,"megatron-bert"),OWr.forEach(t),h_o=r(v4e," \u2014 "),i$=n(v4e,"A",{href:!0});var XWr=s(i$);p_o=r(XWr,"MegatronBertForPreTraining"),XWr.forEach(t),__o=r(v4e," (MegatronBert model)"),v4e.forEach(t),u_o=i(S),nu=n(S,"LI",{});var T4e=s(nu);doe=n(T4e,"STRONG",{});var VWr=s(doe);b_o=r(VWr,"mobilebert"),VWr.forEach(t),v_o=r(T4e," \u2014 "),d$=n(T4e,"A",{href:!0});var zWr=s(d$);T_o=r(zWr,"MobileBertForPreTraining"),zWr.forEach(t),F_o=r(T4e," (MobileBERT model)"),T4e.forEach(t),C_o=i(S),su=n(S,"LI",{});var F4e=s(su);coe=n(F4e,"STRONG",{});var WWr=s(coe);M_o=r(WWr,"mpnet"),WWr.forEach(t),E_o=r(F4e," \u2014 "),c$=n(F4e,"A",{href:!0});var QWr=s(c$);y_o=r(QWr,"MPNetForMaskedLM"),QWr.forEach(t),w_o=r(F4e," (MPNet model)"),F4e.forEach(t),A_o=i(S),lu=n(S,"LI",{});var C4e=s(lu);foe=n(C4e,"STRONG",{});var HWr=s(foe);L_o=r(HWr,"openai-gpt"),HWr.forEach(t),B_o=r(C4e," \u2014 "),f$=n(C4e,"A",{href:!0});var UWr=s(f$);x_o=r(UWr,"OpenAIGPTLMHeadModel"),UWr.forEach(t),k_o=r(C4e," (OpenAI GPT model)"),C4e.forEach(t),R_o=i(S),iu=n(S,"LI",{});var M4e=s(iu);moe=n(M4e,"STRONG",{});var JWr=s(moe);S_o=r(JWr,"retribert"),JWr.forEach(t),P_o=r(M4e," \u2014 "),m$=n(M4e,"A",{href:!0});var YWr=s(m$);$_o=r(YWr,"RetriBertModel"),YWr.forEach(t),I_o=r(M4e," (RetriBERT model)"),M4e.forEach(t),j_o=i(S),du=n(S,"LI",{});var E4e=s(du);goe=n(E4e,"STRONG",{});var KWr=s(goe);D_o=r(KWr,"roberta"),KWr.forEach(t),N_o=r(E4e," \u2014 "),g$=n(E4e,"A",{href:!0});var ZWr=s(g$);q_o=r(ZWr,"RobertaForMaskedLM"),ZWr.forEach(t),G_o=r(E4e," (RoBERTa model)"),E4e.forEach(t),O_o=i(S),cu=n(S,"LI",{});var y4e=s(cu);hoe=n(y4e,"STRONG",{});var eQr=s(hoe);X_o=r(eQr,"squeezebert"),eQr.forEach(t),V_o=r(y4e," \u2014 "),h$=n(y4e,"A",{href:!0});var oQr=s(h$);z_o=r(oQr,"SqueezeBertForMaskedLM"),oQr.forEach(t),W_o=r(y4e," (SqueezeBERT model)"),y4e.forEach(t),Q_o=i(S),fu=n(S,"LI",{});var w4e=s(fu);poe=n(w4e,"STRONG",{});var rQr=s(poe);H_o=r(rQr,"t5"),rQr.forEach(t),U_o=r(w4e," \u2014 "),p$=n(w4e,"A",{href:!0});var tQr=s(p$);J_o=r(tQr,"T5ForConditionalGeneration"),tQr.forEach(t),Y_o=r(w4e," (T5 model)"),w4e.forEach(t),K_o=i(S),mu=n(S,"LI",{});var A4e=s(mu);_oe=n(A4e,"STRONG",{});var aQr=s(_oe);Z_o=r(aQr,"tapas"),aQr.forEach(t),euo=r(A4e," \u2014 "),_$=n(A4e,"A",{href:!0});var nQr=s(_$);ouo=r(nQr,"TapasForMaskedLM"),nQr.forEach(t),ruo=r(A4e," (TAPAS model)"),A4e.forEach(t),tuo=i(S),gu=n(S,"LI",{});var L4e=s(gu);uoe=n(L4e,"STRONG",{});var sQr=s(uoe);auo=r(sQr,"transfo-xl"),sQr.forEach(t),nuo=r(L4e," \u2014 "),u$=n(L4e,"A",{href:!0});var lQr=s(u$);suo=r(lQr,"TransfoXLLMHeadModel"),lQr.forEach(t),luo=r(L4e," (Transformer-XL model)"),L4e.forEach(t),iuo=i(S),hu=n(S,"LI",{});var B4e=s(hu);boe=n(B4e,"STRONG",{});var iQr=s(boe);duo=r(iQr,"unispeech"),iQr.forEach(t),cuo=r(B4e," \u2014 "),b$=n(B4e,"A",{href:!0});var dQr=s(b$);fuo=r(dQr,"UniSpeechForPreTraining"),dQr.forEach(t),muo=r(B4e," (UniSpeech model)"),B4e.forEach(t),guo=i(S),pu=n(S,"LI",{});var x4e=s(pu);voe=n(x4e,"STRONG",{});var cQr=s(voe);huo=r(cQr,"unispeech-sat"),cQr.forEach(t),puo=r(x4e," \u2014 "),v$=n(x4e,"A",{href:!0});var fQr=s(v$);_uo=r(fQr,"UniSpeechSatForPreTraining"),fQr.forEach(t),uuo=r(x4e," (UniSpeechSat model)"),x4e.forEach(t),buo=i(S),_u=n(S,"LI",{});var k4e=s(_u);Toe=n(k4e,"STRONG",{});var mQr=s(Toe);vuo=r(mQr,"visual_bert"),mQr.forEach(t),Tuo=r(k4e," \u2014 "),T$=n(k4e,"A",{href:!0});var gQr=s(T$);Fuo=r(gQr,"VisualBertForPreTraining"),gQr.forEach(t),Cuo=r(k4e," (VisualBert model)"),k4e.forEach(t),Muo=i(S),uu=n(S,"LI",{});var R4e=s(uu);Foe=n(R4e,"STRONG",{});var hQr=s(Foe);Euo=r(hQr,"vit_mae"),hQr.forEach(t),yuo=r(R4e," \u2014 "),F$=n(R4e,"A",{href:!0});var pQr=s(F$);wuo=r(pQr,"ViTMAEForPreTraining"),pQr.forEach(t),Auo=r(R4e," (ViTMAE model)"),R4e.forEach(t),Luo=i(S),bu=n(S,"LI",{});var S4e=s(bu);Coe=n(S4e,"STRONG",{});var _Qr=s(Coe);Buo=r(_Qr,"wav2vec2"),_Qr.forEach(t),xuo=r(S4e," \u2014 "),C$=n(S4e,"A",{href:!0});var uQr=s(C$);kuo=r(uQr,"Wav2Vec2ForPreTraining"),uQr.forEach(t),Ruo=r(S4e," (Wav2Vec2 model)"),S4e.forEach(t),Suo=i(S),vu=n(S,"LI",{});var P4e=s(vu);Moe=n(P4e,"STRONG",{});var bQr=s(Moe);Puo=r(bQr,"xlm"),bQr.forEach(t),$uo=r(P4e," \u2014 "),M$=n(P4e,"A",{href:!0});var vQr=s(M$);Iuo=r(vQr,"XLMWithLMHeadModel"),vQr.forEach(t),juo=r(P4e," (XLM model)"),P4e.forEach(t),Duo=i(S),Tu=n(S,"LI",{});var $4e=s(Tu);Eoe=n($4e,"STRONG",{});var TQr=s(Eoe);Nuo=r(TQr,"xlm-roberta"),TQr.forEach(t),quo=r($4e," \u2014 "),E$=n($4e,"A",{href:!0});var FQr=s(E$);Guo=r(FQr,"XLMRobertaForMaskedLM"),FQr.forEach(t),Ouo=r($4e," (XLM-RoBERTa model)"),$4e.forEach(t),Xuo=i(S),Fu=n(S,"LI",{});var I4e=s(Fu);yoe=n(I4e,"STRONG",{});var CQr=s(yoe);Vuo=r(CQr,"xlm-roberta-xl"),CQr.forEach(t),zuo=r(I4e," \u2014 "),y$=n(I4e,"A",{href:!0});var MQr=s(y$);Wuo=r(MQr,"XLMRobertaXLForMaskedLM"),MQr.forEach(t),Quo=r(I4e," (XLM-RoBERTa-XL model)"),I4e.forEach(t),Huo=i(S),Cu=n(S,"LI",{});var j4e=s(Cu);woe=n(j4e,"STRONG",{});var EQr=s(woe);Uuo=r(EQr,"xlnet"),EQr.forEach(t),Juo=r(j4e," \u2014 "),w$=n(j4e,"A",{href:!0});var yQr=s(w$);Yuo=r(yQr,"XLNetLMHeadModel"),yQr.forEach(t),Kuo=r(j4e," (XLNet model)"),j4e.forEach(t),S.forEach(t),Zuo=i(Vt),Mu=n(Vt,"P",{});var D4e=s(Mu);e1o=r(D4e,"The model is set in evaluation mode by default using "),Aoe=n(D4e,"CODE",{});var wQr=s(Aoe);o1o=r(wQr,"model.eval()"),wQr.forEach(t),r1o=r(D4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Loe=n(D4e,"CODE",{});var AQr=s(Loe);t1o=r(AQr,"model.train()"),AQr.forEach(t),D4e.forEach(t),a1o=i(Vt),Boe=n(Vt,"P",{});var LQr=s(Boe);n1o=r(LQr,"Examples:"),LQr.forEach(t),s1o=i(Vt),m(fE.$$.fragment,Vt),Vt.forEach(t),Zs.forEach(t),tRe=i(d),dd=n(d,"H2",{class:!0});var hPe=s(dd);Eu=n(hPe,"A",{id:!0,class:!0,href:!0});var BQr=s(Eu);xoe=n(BQr,"SPAN",{});var xQr=s(xoe);m(mE.$$.fragment,xQr),xQr.forEach(t),BQr.forEach(t),l1o=i(hPe),koe=n(hPe,"SPAN",{});var kQr=s(koe);i1o=r(kQr,"AutoModelForCausalLM"),kQr.forEach(t),hPe.forEach(t),aRe=i(d),Zo=n(d,"DIV",{class:!0});var ol=s(Zo);m(gE.$$.fragment,ol),d1o=i(ol),cd=n(ol,"P",{});var TW=s(cd);c1o=r(TW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Roe=n(TW,"CODE",{});var RQr=s(Roe);f1o=r(RQr,"from_pretrained()"),RQr.forEach(t),m1o=r(TW,"class method or the "),Soe=n(TW,"CODE",{});var SQr=s(Soe);g1o=r(SQr,"from_config()"),SQr.forEach(t),h1o=r(TW,`class
method.`),TW.forEach(t),p1o=i(ol),hE=n(ol,"P",{});var pPe=s(hE);_1o=r(pPe,"This class cannot be instantiated directly using "),Poe=n(pPe,"CODE",{});var PQr=s(Poe);u1o=r(PQr,"__init__()"),PQr.forEach(t),b1o=r(pPe," (throws an error)."),pPe.forEach(t),v1o=i(ol),Hr=n(ol,"DIV",{class:!0});var rl=s(Hr);m(pE.$$.fragment,rl),T1o=i(rl),$oe=n(rl,"P",{});var $Qr=s($oe);F1o=r($Qr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$Qr.forEach(t),C1o=i(rl),fd=n(rl,"P",{});var FW=s(fd);M1o=r(FW,`Note:
Loading a model from its configuration file does `),Ioe=n(FW,"STRONG",{});var IQr=s(Ioe);E1o=r(IQr,"not"),IQr.forEach(t),y1o=r(FW,` load the model weights. It only affects the
model\u2019s configuration. Use `),joe=n(FW,"CODE",{});var jQr=s(joe);w1o=r(jQr,"from_pretrained()"),jQr.forEach(t),A1o=r(FW,"to load the model weights."),FW.forEach(t),L1o=i(rl),Doe=n(rl,"P",{});var DQr=s(Doe);B1o=r(DQr,"Examples:"),DQr.forEach(t),x1o=i(rl),m(_E.$$.fragment,rl),rl.forEach(t),k1o=i(ol),Ne=n(ol,"DIV",{class:!0});var zt=s(Ne);m(uE.$$.fragment,zt),R1o=i(zt),Noe=n(zt,"P",{});var NQr=s(Noe);S1o=r(NQr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),NQr.forEach(t),P1o=i(zt),Ja=n(zt,"P",{});var MM=s(Ja);$1o=r(MM,"The model class to instantiate is selected based on the "),qoe=n(MM,"CODE",{});var qQr=s(qoe);I1o=r(qQr,"model_type"),qQr.forEach(t),j1o=r(MM,` property of the config object (either
passed as an argument or loaded from `),Goe=n(MM,"CODE",{});var GQr=s(Goe);D1o=r(GQr,"pretrained_model_name_or_path"),GQr.forEach(t),N1o=r(MM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ooe=n(MM,"CODE",{});var OQr=s(Ooe);q1o=r(OQr,"pretrained_model_name_or_path"),OQr.forEach(t),G1o=r(MM,":"),MM.forEach(t),O1o=i(zt),$=n(zt,"UL",{});var j=s($);yu=n(j,"LI",{});var N4e=s(yu);Xoe=n(N4e,"STRONG",{});var XQr=s(Xoe);X1o=r(XQr,"bart"),XQr.forEach(t),V1o=r(N4e," \u2014 "),A$=n(N4e,"A",{href:!0});var VQr=s(A$);z1o=r(VQr,"BartForCausalLM"),VQr.forEach(t),W1o=r(N4e," (BART model)"),N4e.forEach(t),Q1o=i(j),wu=n(j,"LI",{});var q4e=s(wu);Voe=n(q4e,"STRONG",{});var zQr=s(Voe);H1o=r(zQr,"bert"),zQr.forEach(t),U1o=r(q4e," \u2014 "),L$=n(q4e,"A",{href:!0});var WQr=s(L$);J1o=r(WQr,"BertLMHeadModel"),WQr.forEach(t),Y1o=r(q4e," (BERT model)"),q4e.forEach(t),K1o=i(j),Au=n(j,"LI",{});var G4e=s(Au);zoe=n(G4e,"STRONG",{});var QQr=s(zoe);Z1o=r(QQr,"bert-generation"),QQr.forEach(t),ebo=r(G4e," \u2014 "),B$=n(G4e,"A",{href:!0});var HQr=s(B$);obo=r(HQr,"BertGenerationDecoder"),HQr.forEach(t),rbo=r(G4e," (Bert Generation model)"),G4e.forEach(t),tbo=i(j),Lu=n(j,"LI",{});var O4e=s(Lu);Woe=n(O4e,"STRONG",{});var UQr=s(Woe);abo=r(UQr,"big_bird"),UQr.forEach(t),nbo=r(O4e," \u2014 "),x$=n(O4e,"A",{href:!0});var JQr=s(x$);sbo=r(JQr,"BigBirdForCausalLM"),JQr.forEach(t),lbo=r(O4e," (BigBird model)"),O4e.forEach(t),ibo=i(j),Bu=n(j,"LI",{});var X4e=s(Bu);Qoe=n(X4e,"STRONG",{});var YQr=s(Qoe);dbo=r(YQr,"bigbird_pegasus"),YQr.forEach(t),cbo=r(X4e," \u2014 "),k$=n(X4e,"A",{href:!0});var KQr=s(k$);fbo=r(KQr,"BigBirdPegasusForCausalLM"),KQr.forEach(t),mbo=r(X4e," (BigBirdPegasus model)"),X4e.forEach(t),gbo=i(j),xu=n(j,"LI",{});var V4e=s(xu);Hoe=n(V4e,"STRONG",{});var ZQr=s(Hoe);hbo=r(ZQr,"blenderbot"),ZQr.forEach(t),pbo=r(V4e," \u2014 "),R$=n(V4e,"A",{href:!0});var eHr=s(R$);_bo=r(eHr,"BlenderbotForCausalLM"),eHr.forEach(t),ubo=r(V4e," (Blenderbot model)"),V4e.forEach(t),bbo=i(j),ku=n(j,"LI",{});var z4e=s(ku);Uoe=n(z4e,"STRONG",{});var oHr=s(Uoe);vbo=r(oHr,"blenderbot-small"),oHr.forEach(t),Tbo=r(z4e," \u2014 "),S$=n(z4e,"A",{href:!0});var rHr=s(S$);Fbo=r(rHr,"BlenderbotSmallForCausalLM"),rHr.forEach(t),Cbo=r(z4e," (BlenderbotSmall model)"),z4e.forEach(t),Mbo=i(j),Ru=n(j,"LI",{});var W4e=s(Ru);Joe=n(W4e,"STRONG",{});var tHr=s(Joe);Ebo=r(tHr,"camembert"),tHr.forEach(t),ybo=r(W4e," \u2014 "),P$=n(W4e,"A",{href:!0});var aHr=s(P$);wbo=r(aHr,"CamembertForCausalLM"),aHr.forEach(t),Abo=r(W4e," (CamemBERT model)"),W4e.forEach(t),Lbo=i(j),Su=n(j,"LI",{});var Q4e=s(Su);Yoe=n(Q4e,"STRONG",{});var nHr=s(Yoe);Bbo=r(nHr,"ctrl"),nHr.forEach(t),xbo=r(Q4e," \u2014 "),$$=n(Q4e,"A",{href:!0});var sHr=s($$);kbo=r(sHr,"CTRLLMHeadModel"),sHr.forEach(t),Rbo=r(Q4e," (CTRL model)"),Q4e.forEach(t),Sbo=i(j),Pu=n(j,"LI",{});var H4e=s(Pu);Koe=n(H4e,"STRONG",{});var lHr=s(Koe);Pbo=r(lHr,"data2vec-text"),lHr.forEach(t),$bo=r(H4e," \u2014 "),I$=n(H4e,"A",{href:!0});var iHr=s(I$);Ibo=r(iHr,"Data2VecTextForCausalLM"),iHr.forEach(t),jbo=r(H4e," (Data2VecText model)"),H4e.forEach(t),Dbo=i(j),$u=n(j,"LI",{});var U4e=s($u);Zoe=n(U4e,"STRONG",{});var dHr=s(Zoe);Nbo=r(dHr,"electra"),dHr.forEach(t),qbo=r(U4e," \u2014 "),j$=n(U4e,"A",{href:!0});var cHr=s(j$);Gbo=r(cHr,"ElectraForCausalLM"),cHr.forEach(t),Obo=r(U4e," (ELECTRA model)"),U4e.forEach(t),Xbo=i(j),Iu=n(j,"LI",{});var J4e=s(Iu);ere=n(J4e,"STRONG",{});var fHr=s(ere);Vbo=r(fHr,"gpt2"),fHr.forEach(t),zbo=r(J4e," \u2014 "),D$=n(J4e,"A",{href:!0});var mHr=s(D$);Wbo=r(mHr,"GPT2LMHeadModel"),mHr.forEach(t),Qbo=r(J4e," (OpenAI GPT-2 model)"),J4e.forEach(t),Hbo=i(j),ju=n(j,"LI",{});var Y4e=s(ju);ore=n(Y4e,"STRONG",{});var gHr=s(ore);Ubo=r(gHr,"gpt_neo"),gHr.forEach(t),Jbo=r(Y4e," \u2014 "),N$=n(Y4e,"A",{href:!0});var hHr=s(N$);Ybo=r(hHr,"GPTNeoForCausalLM"),hHr.forEach(t),Kbo=r(Y4e," (GPT Neo model)"),Y4e.forEach(t),Zbo=i(j),Du=n(j,"LI",{});var K4e=s(Du);rre=n(K4e,"STRONG",{});var pHr=s(rre);e5o=r(pHr,"gptj"),pHr.forEach(t),o5o=r(K4e," \u2014 "),q$=n(K4e,"A",{href:!0});var _Hr=s(q$);r5o=r(_Hr,"GPTJForCausalLM"),_Hr.forEach(t),t5o=r(K4e," (GPT-J model)"),K4e.forEach(t),a5o=i(j),Nu=n(j,"LI",{});var Z4e=s(Nu);tre=n(Z4e,"STRONG",{});var uHr=s(tre);n5o=r(uHr,"marian"),uHr.forEach(t),s5o=r(Z4e," \u2014 "),G$=n(Z4e,"A",{href:!0});var bHr=s(G$);l5o=r(bHr,"MarianForCausalLM"),bHr.forEach(t),i5o=r(Z4e," (Marian model)"),Z4e.forEach(t),d5o=i(j),qu=n(j,"LI",{});var eEe=s(qu);are=n(eEe,"STRONG",{});var vHr=s(are);c5o=r(vHr,"mbart"),vHr.forEach(t),f5o=r(eEe," \u2014 "),O$=n(eEe,"A",{href:!0});var THr=s(O$);m5o=r(THr,"MBartForCausalLM"),THr.forEach(t),g5o=r(eEe," (mBART model)"),eEe.forEach(t),h5o=i(j),Gu=n(j,"LI",{});var oEe=s(Gu);nre=n(oEe,"STRONG",{});var FHr=s(nre);p5o=r(FHr,"megatron-bert"),FHr.forEach(t),_5o=r(oEe," \u2014 "),X$=n(oEe,"A",{href:!0});var CHr=s(X$);u5o=r(CHr,"MegatronBertForCausalLM"),CHr.forEach(t),b5o=r(oEe," (MegatronBert model)"),oEe.forEach(t),v5o=i(j),Ou=n(j,"LI",{});var rEe=s(Ou);sre=n(rEe,"STRONG",{});var MHr=s(sre);T5o=r(MHr,"openai-gpt"),MHr.forEach(t),F5o=r(rEe," \u2014 "),V$=n(rEe,"A",{href:!0});var EHr=s(V$);C5o=r(EHr,"OpenAIGPTLMHeadModel"),EHr.forEach(t),M5o=r(rEe," (OpenAI GPT model)"),rEe.forEach(t),E5o=i(j),Xu=n(j,"LI",{});var tEe=s(Xu);lre=n(tEe,"STRONG",{});var yHr=s(lre);y5o=r(yHr,"pegasus"),yHr.forEach(t),w5o=r(tEe," \u2014 "),z$=n(tEe,"A",{href:!0});var wHr=s(z$);A5o=r(wHr,"PegasusForCausalLM"),wHr.forEach(t),L5o=r(tEe," (Pegasus model)"),tEe.forEach(t),B5o=i(j),Vu=n(j,"LI",{});var aEe=s(Vu);ire=n(aEe,"STRONG",{});var AHr=s(ire);x5o=r(AHr,"plbart"),AHr.forEach(t),k5o=r(aEe," \u2014 "),W$=n(aEe,"A",{href:!0});var LHr=s(W$);R5o=r(LHr,"PLBartForCausalLM"),LHr.forEach(t),S5o=r(aEe," (PLBart model)"),aEe.forEach(t),P5o=i(j),zu=n(j,"LI",{});var nEe=s(zu);dre=n(nEe,"STRONG",{});var BHr=s(dre);$5o=r(BHr,"prophetnet"),BHr.forEach(t),I5o=r(nEe," \u2014 "),Q$=n(nEe,"A",{href:!0});var xHr=s(Q$);j5o=r(xHr,"ProphetNetForCausalLM"),xHr.forEach(t),D5o=r(nEe," (ProphetNet model)"),nEe.forEach(t),N5o=i(j),Wu=n(j,"LI",{});var sEe=s(Wu);cre=n(sEe,"STRONG",{});var kHr=s(cre);q5o=r(kHr,"qdqbert"),kHr.forEach(t),G5o=r(sEe," \u2014 "),H$=n(sEe,"A",{href:!0});var RHr=s(H$);O5o=r(RHr,"QDQBertLMHeadModel"),RHr.forEach(t),X5o=r(sEe," (QDQBert model)"),sEe.forEach(t),V5o=i(j),Qu=n(j,"LI",{});var lEe=s(Qu);fre=n(lEe,"STRONG",{});var SHr=s(fre);z5o=r(SHr,"reformer"),SHr.forEach(t),W5o=r(lEe," \u2014 "),U$=n(lEe,"A",{href:!0});var PHr=s(U$);Q5o=r(PHr,"ReformerModelWithLMHead"),PHr.forEach(t),H5o=r(lEe," (Reformer model)"),lEe.forEach(t),U5o=i(j),Hu=n(j,"LI",{});var iEe=s(Hu);mre=n(iEe,"STRONG",{});var $Hr=s(mre);J5o=r($Hr,"rembert"),$Hr.forEach(t),Y5o=r(iEe," \u2014 "),J$=n(iEe,"A",{href:!0});var IHr=s(J$);K5o=r(IHr,"RemBertForCausalLM"),IHr.forEach(t),Z5o=r(iEe," (RemBERT model)"),iEe.forEach(t),e2o=i(j),Uu=n(j,"LI",{});var dEe=s(Uu);gre=n(dEe,"STRONG",{});var jHr=s(gre);o2o=r(jHr,"roberta"),jHr.forEach(t),r2o=r(dEe," \u2014 "),Y$=n(dEe,"A",{href:!0});var DHr=s(Y$);t2o=r(DHr,"RobertaForCausalLM"),DHr.forEach(t),a2o=r(dEe," (RoBERTa model)"),dEe.forEach(t),n2o=i(j),Ju=n(j,"LI",{});var cEe=s(Ju);hre=n(cEe,"STRONG",{});var NHr=s(hre);s2o=r(NHr,"roformer"),NHr.forEach(t),l2o=r(cEe," \u2014 "),K$=n(cEe,"A",{href:!0});var qHr=s(K$);i2o=r(qHr,"RoFormerForCausalLM"),qHr.forEach(t),d2o=r(cEe," (RoFormer model)"),cEe.forEach(t),c2o=i(j),Yu=n(j,"LI",{});var fEe=s(Yu);pre=n(fEe,"STRONG",{});var GHr=s(pre);f2o=r(GHr,"speech_to_text_2"),GHr.forEach(t),m2o=r(fEe," \u2014 "),Z$=n(fEe,"A",{href:!0});var OHr=s(Z$);g2o=r(OHr,"Speech2Text2ForCausalLM"),OHr.forEach(t),h2o=r(fEe," (Speech2Text2 model)"),fEe.forEach(t),p2o=i(j),Ku=n(j,"LI",{});var mEe=s(Ku);_re=n(mEe,"STRONG",{});var XHr=s(_re);_2o=r(XHr,"transfo-xl"),XHr.forEach(t),u2o=r(mEe," \u2014 "),eI=n(mEe,"A",{href:!0});var VHr=s(eI);b2o=r(VHr,"TransfoXLLMHeadModel"),VHr.forEach(t),v2o=r(mEe," (Transformer-XL model)"),mEe.forEach(t),T2o=i(j),Zu=n(j,"LI",{});var gEe=s(Zu);ure=n(gEe,"STRONG",{});var zHr=s(ure);F2o=r(zHr,"trocr"),zHr.forEach(t),C2o=r(gEe," \u2014 "),oI=n(gEe,"A",{href:!0});var WHr=s(oI);M2o=r(WHr,"TrOCRForCausalLM"),WHr.forEach(t),E2o=r(gEe," (TrOCR model)"),gEe.forEach(t),y2o=i(j),e1=n(j,"LI",{});var hEe=s(e1);bre=n(hEe,"STRONG",{});var QHr=s(bre);w2o=r(QHr,"xglm"),QHr.forEach(t),A2o=r(hEe," \u2014 "),rI=n(hEe,"A",{href:!0});var HHr=s(rI);L2o=r(HHr,"XGLMForCausalLM"),HHr.forEach(t),B2o=r(hEe," (XGLM model)"),hEe.forEach(t),x2o=i(j),o1=n(j,"LI",{});var pEe=s(o1);vre=n(pEe,"STRONG",{});var UHr=s(vre);k2o=r(UHr,"xlm"),UHr.forEach(t),R2o=r(pEe," \u2014 "),tI=n(pEe,"A",{href:!0});var JHr=s(tI);S2o=r(JHr,"XLMWithLMHeadModel"),JHr.forEach(t),P2o=r(pEe," (XLM model)"),pEe.forEach(t),$2o=i(j),r1=n(j,"LI",{});var _Ee=s(r1);Tre=n(_Ee,"STRONG",{});var YHr=s(Tre);I2o=r(YHr,"xlm-prophetnet"),YHr.forEach(t),j2o=r(_Ee," \u2014 "),aI=n(_Ee,"A",{href:!0});var KHr=s(aI);D2o=r(KHr,"XLMProphetNetForCausalLM"),KHr.forEach(t),N2o=r(_Ee," (XLMProphetNet model)"),_Ee.forEach(t),q2o=i(j),t1=n(j,"LI",{});var uEe=s(t1);Fre=n(uEe,"STRONG",{});var ZHr=s(Fre);G2o=r(ZHr,"xlm-roberta"),ZHr.forEach(t),O2o=r(uEe," \u2014 "),nI=n(uEe,"A",{href:!0});var eUr=s(nI);X2o=r(eUr,"XLMRobertaForCausalLM"),eUr.forEach(t),V2o=r(uEe," (XLM-RoBERTa model)"),uEe.forEach(t),z2o=i(j),a1=n(j,"LI",{});var bEe=s(a1);Cre=n(bEe,"STRONG",{});var oUr=s(Cre);W2o=r(oUr,"xlm-roberta-xl"),oUr.forEach(t),Q2o=r(bEe," \u2014 "),sI=n(bEe,"A",{href:!0});var rUr=s(sI);H2o=r(rUr,"XLMRobertaXLForCausalLM"),rUr.forEach(t),U2o=r(bEe," (XLM-RoBERTa-XL model)"),bEe.forEach(t),J2o=i(j),n1=n(j,"LI",{});var vEe=s(n1);Mre=n(vEe,"STRONG",{});var tUr=s(Mre);Y2o=r(tUr,"xlnet"),tUr.forEach(t),K2o=r(vEe," \u2014 "),lI=n(vEe,"A",{href:!0});var aUr=s(lI);Z2o=r(aUr,"XLNetLMHeadModel"),aUr.forEach(t),evo=r(vEe," (XLNet model)"),vEe.forEach(t),j.forEach(t),ovo=i(zt),s1=n(zt,"P",{});var TEe=s(s1);rvo=r(TEe,"The model is set in evaluation mode by default using "),Ere=n(TEe,"CODE",{});var nUr=s(Ere);tvo=r(nUr,"model.eval()"),nUr.forEach(t),avo=r(TEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yre=n(TEe,"CODE",{});var sUr=s(yre);nvo=r(sUr,"model.train()"),sUr.forEach(t),TEe.forEach(t),svo=i(zt),wre=n(zt,"P",{});var lUr=s(wre);lvo=r(lUr,"Examples:"),lUr.forEach(t),ivo=i(zt),m(bE.$$.fragment,zt),zt.forEach(t),ol.forEach(t),nRe=i(d),md=n(d,"H2",{class:!0});var _Pe=s(md);l1=n(_Pe,"A",{id:!0,class:!0,href:!0});var iUr=s(l1);Are=n(iUr,"SPAN",{});var dUr=s(Are);m(vE.$$.fragment,dUr),dUr.forEach(t),iUr.forEach(t),dvo=i(_Pe),Lre=n(_Pe,"SPAN",{});var cUr=s(Lre);cvo=r(cUr,"AutoModelForMaskedLM"),cUr.forEach(t),_Pe.forEach(t),sRe=i(d),er=n(d,"DIV",{class:!0});var tl=s(er);m(TE.$$.fragment,tl),fvo=i(tl),gd=n(tl,"P",{});var CW=s(gd);mvo=r(CW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Bre=n(CW,"CODE",{});var fUr=s(Bre);gvo=r(fUr,"from_pretrained()"),fUr.forEach(t),hvo=r(CW,"class method or the "),xre=n(CW,"CODE",{});var mUr=s(xre);pvo=r(mUr,"from_config()"),mUr.forEach(t),_vo=r(CW,`class
method.`),CW.forEach(t),uvo=i(tl),FE=n(tl,"P",{});var uPe=s(FE);bvo=r(uPe,"This class cannot be instantiated directly using "),kre=n(uPe,"CODE",{});var gUr=s(kre);vvo=r(gUr,"__init__()"),gUr.forEach(t),Tvo=r(uPe," (throws an error)."),uPe.forEach(t),Fvo=i(tl),Ur=n(tl,"DIV",{class:!0});var al=s(Ur);m(CE.$$.fragment,al),Cvo=i(al),Rre=n(al,"P",{});var hUr=s(Rre);Mvo=r(hUr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),hUr.forEach(t),Evo=i(al),hd=n(al,"P",{});var MW=s(hd);yvo=r(MW,`Note:
Loading a model from its configuration file does `),Sre=n(MW,"STRONG",{});var pUr=s(Sre);wvo=r(pUr,"not"),pUr.forEach(t),Avo=r(MW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pre=n(MW,"CODE",{});var _Ur=s(Pre);Lvo=r(_Ur,"from_pretrained()"),_Ur.forEach(t),Bvo=r(MW,"to load the model weights."),MW.forEach(t),xvo=i(al),$re=n(al,"P",{});var uUr=s($re);kvo=r(uUr,"Examples:"),uUr.forEach(t),Rvo=i(al),m(ME.$$.fragment,al),al.forEach(t),Svo=i(tl),qe=n(tl,"DIV",{class:!0});var Wt=s(qe);m(EE.$$.fragment,Wt),Pvo=i(Wt),Ire=n(Wt,"P",{});var bUr=s(Ire);$vo=r(bUr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),bUr.forEach(t),Ivo=i(Wt),Ya=n(Wt,"P",{});var EM=s(Ya);jvo=r(EM,"The model class to instantiate is selected based on the "),jre=n(EM,"CODE",{});var vUr=s(jre);Dvo=r(vUr,"model_type"),vUr.forEach(t),Nvo=r(EM,` property of the config object (either
passed as an argument or loaded from `),Dre=n(EM,"CODE",{});var TUr=s(Dre);qvo=r(TUr,"pretrained_model_name_or_path"),TUr.forEach(t),Gvo=r(EM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nre=n(EM,"CODE",{});var FUr=s(Nre);Ovo=r(FUr,"pretrained_model_name_or_path"),FUr.forEach(t),Xvo=r(EM,":"),EM.forEach(t),Vvo=i(Wt),I=n(Wt,"UL",{});var D=s(I);i1=n(D,"LI",{});var FEe=s(i1);qre=n(FEe,"STRONG",{});var CUr=s(qre);zvo=r(CUr,"albert"),CUr.forEach(t),Wvo=r(FEe," \u2014 "),iI=n(FEe,"A",{href:!0});var MUr=s(iI);Qvo=r(MUr,"AlbertForMaskedLM"),MUr.forEach(t),Hvo=r(FEe," (ALBERT model)"),FEe.forEach(t),Uvo=i(D),d1=n(D,"LI",{});var CEe=s(d1);Gre=n(CEe,"STRONG",{});var EUr=s(Gre);Jvo=r(EUr,"bart"),EUr.forEach(t),Yvo=r(CEe," \u2014 "),dI=n(CEe,"A",{href:!0});var yUr=s(dI);Kvo=r(yUr,"BartForConditionalGeneration"),yUr.forEach(t),Zvo=r(CEe," (BART model)"),CEe.forEach(t),e6o=i(D),c1=n(D,"LI",{});var MEe=s(c1);Ore=n(MEe,"STRONG",{});var wUr=s(Ore);o6o=r(wUr,"bert"),wUr.forEach(t),r6o=r(MEe," \u2014 "),cI=n(MEe,"A",{href:!0});var AUr=s(cI);t6o=r(AUr,"BertForMaskedLM"),AUr.forEach(t),a6o=r(MEe," (BERT model)"),MEe.forEach(t),n6o=i(D),f1=n(D,"LI",{});var EEe=s(f1);Xre=n(EEe,"STRONG",{});var LUr=s(Xre);s6o=r(LUr,"big_bird"),LUr.forEach(t),l6o=r(EEe," \u2014 "),fI=n(EEe,"A",{href:!0});var BUr=s(fI);i6o=r(BUr,"BigBirdForMaskedLM"),BUr.forEach(t),d6o=r(EEe," (BigBird model)"),EEe.forEach(t),c6o=i(D),m1=n(D,"LI",{});var yEe=s(m1);Vre=n(yEe,"STRONG",{});var xUr=s(Vre);f6o=r(xUr,"camembert"),xUr.forEach(t),m6o=r(yEe," \u2014 "),mI=n(yEe,"A",{href:!0});var kUr=s(mI);g6o=r(kUr,"CamembertForMaskedLM"),kUr.forEach(t),h6o=r(yEe," (CamemBERT model)"),yEe.forEach(t),p6o=i(D),g1=n(D,"LI",{});var wEe=s(g1);zre=n(wEe,"STRONG",{});var RUr=s(zre);_6o=r(RUr,"convbert"),RUr.forEach(t),u6o=r(wEe," \u2014 "),gI=n(wEe,"A",{href:!0});var SUr=s(gI);b6o=r(SUr,"ConvBertForMaskedLM"),SUr.forEach(t),v6o=r(wEe," (ConvBERT model)"),wEe.forEach(t),T6o=i(D),h1=n(D,"LI",{});var AEe=s(h1);Wre=n(AEe,"STRONG",{});var PUr=s(Wre);F6o=r(PUr,"data2vec-text"),PUr.forEach(t),C6o=r(AEe," \u2014 "),hI=n(AEe,"A",{href:!0});var $Ur=s(hI);M6o=r($Ur,"Data2VecTextForMaskedLM"),$Ur.forEach(t),E6o=r(AEe," (Data2VecText model)"),AEe.forEach(t),y6o=i(D),p1=n(D,"LI",{});var LEe=s(p1);Qre=n(LEe,"STRONG",{});var IUr=s(Qre);w6o=r(IUr,"deberta"),IUr.forEach(t),A6o=r(LEe," \u2014 "),pI=n(LEe,"A",{href:!0});var jUr=s(pI);L6o=r(jUr,"DebertaForMaskedLM"),jUr.forEach(t),B6o=r(LEe," (DeBERTa model)"),LEe.forEach(t),x6o=i(D),_1=n(D,"LI",{});var BEe=s(_1);Hre=n(BEe,"STRONG",{});var DUr=s(Hre);k6o=r(DUr,"deberta-v2"),DUr.forEach(t),R6o=r(BEe," \u2014 "),_I=n(BEe,"A",{href:!0});var NUr=s(_I);S6o=r(NUr,"DebertaV2ForMaskedLM"),NUr.forEach(t),P6o=r(BEe," (DeBERTa-v2 model)"),BEe.forEach(t),$6o=i(D),u1=n(D,"LI",{});var xEe=s(u1);Ure=n(xEe,"STRONG",{});var qUr=s(Ure);I6o=r(qUr,"distilbert"),qUr.forEach(t),j6o=r(xEe," \u2014 "),uI=n(xEe,"A",{href:!0});var GUr=s(uI);D6o=r(GUr,"DistilBertForMaskedLM"),GUr.forEach(t),N6o=r(xEe," (DistilBERT model)"),xEe.forEach(t),q6o=i(D),b1=n(D,"LI",{});var kEe=s(b1);Jre=n(kEe,"STRONG",{});var OUr=s(Jre);G6o=r(OUr,"electra"),OUr.forEach(t),O6o=r(kEe," \u2014 "),bI=n(kEe,"A",{href:!0});var XUr=s(bI);X6o=r(XUr,"ElectraForMaskedLM"),XUr.forEach(t),V6o=r(kEe," (ELECTRA model)"),kEe.forEach(t),z6o=i(D),v1=n(D,"LI",{});var REe=s(v1);Yre=n(REe,"STRONG",{});var VUr=s(Yre);W6o=r(VUr,"flaubert"),VUr.forEach(t),Q6o=r(REe," \u2014 "),vI=n(REe,"A",{href:!0});var zUr=s(vI);H6o=r(zUr,"FlaubertWithLMHeadModel"),zUr.forEach(t),U6o=r(REe," (FlauBERT model)"),REe.forEach(t),J6o=i(D),T1=n(D,"LI",{});var SEe=s(T1);Kre=n(SEe,"STRONG",{});var WUr=s(Kre);Y6o=r(WUr,"fnet"),WUr.forEach(t),K6o=r(SEe," \u2014 "),TI=n(SEe,"A",{href:!0});var QUr=s(TI);Z6o=r(QUr,"FNetForMaskedLM"),QUr.forEach(t),e0o=r(SEe," (FNet model)"),SEe.forEach(t),o0o=i(D),F1=n(D,"LI",{});var PEe=s(F1);Zre=n(PEe,"STRONG",{});var HUr=s(Zre);r0o=r(HUr,"funnel"),HUr.forEach(t),t0o=r(PEe," \u2014 "),FI=n(PEe,"A",{href:!0});var UUr=s(FI);a0o=r(UUr,"FunnelForMaskedLM"),UUr.forEach(t),n0o=r(PEe," (Funnel Transformer model)"),PEe.forEach(t),s0o=i(D),C1=n(D,"LI",{});var $Ee=s(C1);ete=n($Ee,"STRONG",{});var JUr=s(ete);l0o=r(JUr,"ibert"),JUr.forEach(t),i0o=r($Ee," \u2014 "),CI=n($Ee,"A",{href:!0});var YUr=s(CI);d0o=r(YUr,"IBertForMaskedLM"),YUr.forEach(t),c0o=r($Ee," (I-BERT model)"),$Ee.forEach(t),f0o=i(D),M1=n(D,"LI",{});var IEe=s(M1);ote=n(IEe,"STRONG",{});var KUr=s(ote);m0o=r(KUr,"layoutlm"),KUr.forEach(t),g0o=r(IEe," \u2014 "),MI=n(IEe,"A",{href:!0});var ZUr=s(MI);h0o=r(ZUr,"LayoutLMForMaskedLM"),ZUr.forEach(t),p0o=r(IEe," (LayoutLM model)"),IEe.forEach(t),_0o=i(D),E1=n(D,"LI",{});var jEe=s(E1);rte=n(jEe,"STRONG",{});var eJr=s(rte);u0o=r(eJr,"longformer"),eJr.forEach(t),b0o=r(jEe," \u2014 "),EI=n(jEe,"A",{href:!0});var oJr=s(EI);v0o=r(oJr,"LongformerForMaskedLM"),oJr.forEach(t),T0o=r(jEe," (Longformer model)"),jEe.forEach(t),F0o=i(D),y1=n(D,"LI",{});var DEe=s(y1);tte=n(DEe,"STRONG",{});var rJr=s(tte);C0o=r(rJr,"mbart"),rJr.forEach(t),M0o=r(DEe," \u2014 "),yI=n(DEe,"A",{href:!0});var tJr=s(yI);E0o=r(tJr,"MBartForConditionalGeneration"),tJr.forEach(t),y0o=r(DEe," (mBART model)"),DEe.forEach(t),w0o=i(D),w1=n(D,"LI",{});var NEe=s(w1);ate=n(NEe,"STRONG",{});var aJr=s(ate);A0o=r(aJr,"megatron-bert"),aJr.forEach(t),L0o=r(NEe," \u2014 "),wI=n(NEe,"A",{href:!0});var nJr=s(wI);B0o=r(nJr,"MegatronBertForMaskedLM"),nJr.forEach(t),x0o=r(NEe," (MegatronBert model)"),NEe.forEach(t),k0o=i(D),A1=n(D,"LI",{});var qEe=s(A1);nte=n(qEe,"STRONG",{});var sJr=s(nte);R0o=r(sJr,"mobilebert"),sJr.forEach(t),S0o=r(qEe," \u2014 "),AI=n(qEe,"A",{href:!0});var lJr=s(AI);P0o=r(lJr,"MobileBertForMaskedLM"),lJr.forEach(t),$0o=r(qEe," (MobileBERT model)"),qEe.forEach(t),I0o=i(D),L1=n(D,"LI",{});var GEe=s(L1);ste=n(GEe,"STRONG",{});var iJr=s(ste);j0o=r(iJr,"mpnet"),iJr.forEach(t),D0o=r(GEe," \u2014 "),LI=n(GEe,"A",{href:!0});var dJr=s(LI);N0o=r(dJr,"MPNetForMaskedLM"),dJr.forEach(t),q0o=r(GEe," (MPNet model)"),GEe.forEach(t),G0o=i(D),B1=n(D,"LI",{});var OEe=s(B1);lte=n(OEe,"STRONG",{});var cJr=s(lte);O0o=r(cJr,"nystromformer"),cJr.forEach(t),X0o=r(OEe," \u2014 "),BI=n(OEe,"A",{href:!0});var fJr=s(BI);V0o=r(fJr,"NystromformerForMaskedLM"),fJr.forEach(t),z0o=r(OEe," (Nystromformer model)"),OEe.forEach(t),W0o=i(D),x1=n(D,"LI",{});var XEe=s(x1);ite=n(XEe,"STRONG",{});var mJr=s(ite);Q0o=r(mJr,"perceiver"),mJr.forEach(t),H0o=r(XEe," \u2014 "),xI=n(XEe,"A",{href:!0});var gJr=s(xI);U0o=r(gJr,"PerceiverForMaskedLM"),gJr.forEach(t),J0o=r(XEe," (Perceiver model)"),XEe.forEach(t),Y0o=i(D),k1=n(D,"LI",{});var VEe=s(k1);dte=n(VEe,"STRONG",{});var hJr=s(dte);K0o=r(hJr,"qdqbert"),hJr.forEach(t),Z0o=r(VEe," \u2014 "),kI=n(VEe,"A",{href:!0});var pJr=s(kI);eTo=r(pJr,"QDQBertForMaskedLM"),pJr.forEach(t),oTo=r(VEe," (QDQBert model)"),VEe.forEach(t),rTo=i(D),R1=n(D,"LI",{});var zEe=s(R1);cte=n(zEe,"STRONG",{});var _Jr=s(cte);tTo=r(_Jr,"reformer"),_Jr.forEach(t),aTo=r(zEe," \u2014 "),RI=n(zEe,"A",{href:!0});var uJr=s(RI);nTo=r(uJr,"ReformerForMaskedLM"),uJr.forEach(t),sTo=r(zEe," (Reformer model)"),zEe.forEach(t),lTo=i(D),S1=n(D,"LI",{});var WEe=s(S1);fte=n(WEe,"STRONG",{});var bJr=s(fte);iTo=r(bJr,"rembert"),bJr.forEach(t),dTo=r(WEe," \u2014 "),SI=n(WEe,"A",{href:!0});var vJr=s(SI);cTo=r(vJr,"RemBertForMaskedLM"),vJr.forEach(t),fTo=r(WEe," (RemBERT model)"),WEe.forEach(t),mTo=i(D),P1=n(D,"LI",{});var QEe=s(P1);mte=n(QEe,"STRONG",{});var TJr=s(mte);gTo=r(TJr,"roberta"),TJr.forEach(t),hTo=r(QEe," \u2014 "),PI=n(QEe,"A",{href:!0});var FJr=s(PI);pTo=r(FJr,"RobertaForMaskedLM"),FJr.forEach(t),_To=r(QEe," (RoBERTa model)"),QEe.forEach(t),uTo=i(D),$1=n(D,"LI",{});var HEe=s($1);gte=n(HEe,"STRONG",{});var CJr=s(gte);bTo=r(CJr,"roformer"),CJr.forEach(t),vTo=r(HEe," \u2014 "),$I=n(HEe,"A",{href:!0});var MJr=s($I);TTo=r(MJr,"RoFormerForMaskedLM"),MJr.forEach(t),FTo=r(HEe," (RoFormer model)"),HEe.forEach(t),CTo=i(D),I1=n(D,"LI",{});var UEe=s(I1);hte=n(UEe,"STRONG",{});var EJr=s(hte);MTo=r(EJr,"squeezebert"),EJr.forEach(t),ETo=r(UEe," \u2014 "),II=n(UEe,"A",{href:!0});var yJr=s(II);yTo=r(yJr,"SqueezeBertForMaskedLM"),yJr.forEach(t),wTo=r(UEe," (SqueezeBERT model)"),UEe.forEach(t),ATo=i(D),j1=n(D,"LI",{});var JEe=s(j1);pte=n(JEe,"STRONG",{});var wJr=s(pte);LTo=r(wJr,"tapas"),wJr.forEach(t),BTo=r(JEe," \u2014 "),jI=n(JEe,"A",{href:!0});var AJr=s(jI);xTo=r(AJr,"TapasForMaskedLM"),AJr.forEach(t),kTo=r(JEe," (TAPAS model)"),JEe.forEach(t),RTo=i(D),D1=n(D,"LI",{});var YEe=s(D1);_te=n(YEe,"STRONG",{});var LJr=s(_te);STo=r(LJr,"wav2vec2"),LJr.forEach(t),PTo=r(YEe," \u2014 "),ute=n(YEe,"CODE",{});var BJr=s(ute);$To=r(BJr,"Wav2Vec2ForMaskedLM"),BJr.forEach(t),ITo=r(YEe,"(Wav2Vec2 model)"),YEe.forEach(t),jTo=i(D),N1=n(D,"LI",{});var KEe=s(N1);bte=n(KEe,"STRONG",{});var xJr=s(bte);DTo=r(xJr,"xlm"),xJr.forEach(t),NTo=r(KEe," \u2014 "),DI=n(KEe,"A",{href:!0});var kJr=s(DI);qTo=r(kJr,"XLMWithLMHeadModel"),kJr.forEach(t),GTo=r(KEe," (XLM model)"),KEe.forEach(t),OTo=i(D),q1=n(D,"LI",{});var ZEe=s(q1);vte=n(ZEe,"STRONG",{});var RJr=s(vte);XTo=r(RJr,"xlm-roberta"),RJr.forEach(t),VTo=r(ZEe," \u2014 "),NI=n(ZEe,"A",{href:!0});var SJr=s(NI);zTo=r(SJr,"XLMRobertaForMaskedLM"),SJr.forEach(t),WTo=r(ZEe," (XLM-RoBERTa model)"),ZEe.forEach(t),QTo=i(D),G1=n(D,"LI",{});var e3e=s(G1);Tte=n(e3e,"STRONG",{});var PJr=s(Tte);HTo=r(PJr,"xlm-roberta-xl"),PJr.forEach(t),UTo=r(e3e," \u2014 "),qI=n(e3e,"A",{href:!0});var $Jr=s(qI);JTo=r($Jr,"XLMRobertaXLForMaskedLM"),$Jr.forEach(t),YTo=r(e3e," (XLM-RoBERTa-XL model)"),e3e.forEach(t),KTo=i(D),O1=n(D,"LI",{});var o3e=s(O1);Fte=n(o3e,"STRONG",{});var IJr=s(Fte);ZTo=r(IJr,"yoso"),IJr.forEach(t),e8o=r(o3e," \u2014 "),GI=n(o3e,"A",{href:!0});var jJr=s(GI);o8o=r(jJr,"YosoForMaskedLM"),jJr.forEach(t),r8o=r(o3e," (YOSO model)"),o3e.forEach(t),D.forEach(t),t8o=i(Wt),X1=n(Wt,"P",{});var r3e=s(X1);a8o=r(r3e,"The model is set in evaluation mode by default using "),Cte=n(r3e,"CODE",{});var DJr=s(Cte);n8o=r(DJr,"model.eval()"),DJr.forEach(t),s8o=r(r3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mte=n(r3e,"CODE",{});var NJr=s(Mte);l8o=r(NJr,"model.train()"),NJr.forEach(t),r3e.forEach(t),i8o=i(Wt),Ete=n(Wt,"P",{});var qJr=s(Ete);d8o=r(qJr,"Examples:"),qJr.forEach(t),c8o=i(Wt),m(yE.$$.fragment,Wt),Wt.forEach(t),tl.forEach(t),lRe=i(d),pd=n(d,"H2",{class:!0});var bPe=s(pd);V1=n(bPe,"A",{id:!0,class:!0,href:!0});var GJr=s(V1);yte=n(GJr,"SPAN",{});var OJr=s(yte);m(wE.$$.fragment,OJr),OJr.forEach(t),GJr.forEach(t),f8o=i(bPe),wte=n(bPe,"SPAN",{});var XJr=s(wte);m8o=r(XJr,"AutoModelForSeq2SeqLM"),XJr.forEach(t),bPe.forEach(t),iRe=i(d),or=n(d,"DIV",{class:!0});var nl=s(or);m(AE.$$.fragment,nl),g8o=i(nl),_d=n(nl,"P",{});var EW=s(_d);h8o=r(EW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Ate=n(EW,"CODE",{});var VJr=s(Ate);p8o=r(VJr,"from_pretrained()"),VJr.forEach(t),_8o=r(EW,"class method or the "),Lte=n(EW,"CODE",{});var zJr=s(Lte);u8o=r(zJr,"from_config()"),zJr.forEach(t),b8o=r(EW,`class
method.`),EW.forEach(t),v8o=i(nl),LE=n(nl,"P",{});var vPe=s(LE);T8o=r(vPe,"This class cannot be instantiated directly using "),Bte=n(vPe,"CODE",{});var WJr=s(Bte);F8o=r(WJr,"__init__()"),WJr.forEach(t),C8o=r(vPe," (throws an error)."),vPe.forEach(t),M8o=i(nl),Jr=n(nl,"DIV",{class:!0});var sl=s(Jr);m(BE.$$.fragment,sl),E8o=i(sl),xte=n(sl,"P",{});var QJr=s(xte);y8o=r(QJr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),QJr.forEach(t),w8o=i(sl),ud=n(sl,"P",{});var yW=s(ud);A8o=r(yW,`Note:
Loading a model from its configuration file does `),kte=n(yW,"STRONG",{});var HJr=s(kte);L8o=r(HJr,"not"),HJr.forEach(t),B8o=r(yW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rte=n(yW,"CODE",{});var UJr=s(Rte);x8o=r(UJr,"from_pretrained()"),UJr.forEach(t),k8o=r(yW,"to load the model weights."),yW.forEach(t),R8o=i(sl),Ste=n(sl,"P",{});var JJr=s(Ste);S8o=r(JJr,"Examples:"),JJr.forEach(t),P8o=i(sl),m(xE.$$.fragment,sl),sl.forEach(t),$8o=i(nl),Ge=n(nl,"DIV",{class:!0});var Qt=s(Ge);m(kE.$$.fragment,Qt),I8o=i(Qt),Pte=n(Qt,"P",{});var YJr=s(Pte);j8o=r(YJr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),YJr.forEach(t),D8o=i(Qt),Ka=n(Qt,"P",{});var yM=s(Ka);N8o=r(yM,"The model class to instantiate is selected based on the "),$te=n(yM,"CODE",{});var KJr=s($te);q8o=r(KJr,"model_type"),KJr.forEach(t),G8o=r(yM,` property of the config object (either
passed as an argument or loaded from `),Ite=n(yM,"CODE",{});var ZJr=s(Ite);O8o=r(ZJr,"pretrained_model_name_or_path"),ZJr.forEach(t),X8o=r(yM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jte=n(yM,"CODE",{});var eYr=s(jte);V8o=r(eYr,"pretrained_model_name_or_path"),eYr.forEach(t),z8o=r(yM,":"),yM.forEach(t),W8o=i(Qt),se=n(Qt,"UL",{});var ie=s(se);z1=n(ie,"LI",{});var t3e=s(z1);Dte=n(t3e,"STRONG",{});var oYr=s(Dte);Q8o=r(oYr,"bart"),oYr.forEach(t),H8o=r(t3e," \u2014 "),OI=n(t3e,"A",{href:!0});var rYr=s(OI);U8o=r(rYr,"BartForConditionalGeneration"),rYr.forEach(t),J8o=r(t3e," (BART model)"),t3e.forEach(t),Y8o=i(ie),W1=n(ie,"LI",{});var a3e=s(W1);Nte=n(a3e,"STRONG",{});var tYr=s(Nte);K8o=r(tYr,"bigbird_pegasus"),tYr.forEach(t),Z8o=r(a3e," \u2014 "),XI=n(a3e,"A",{href:!0});var aYr=s(XI);eFo=r(aYr,"BigBirdPegasusForConditionalGeneration"),aYr.forEach(t),oFo=r(a3e," (BigBirdPegasus model)"),a3e.forEach(t),rFo=i(ie),Q1=n(ie,"LI",{});var n3e=s(Q1);qte=n(n3e,"STRONG",{});var nYr=s(qte);tFo=r(nYr,"blenderbot"),nYr.forEach(t),aFo=r(n3e," \u2014 "),VI=n(n3e,"A",{href:!0});var sYr=s(VI);nFo=r(sYr,"BlenderbotForConditionalGeneration"),sYr.forEach(t),sFo=r(n3e," (Blenderbot model)"),n3e.forEach(t),lFo=i(ie),H1=n(ie,"LI",{});var s3e=s(H1);Gte=n(s3e,"STRONG",{});var lYr=s(Gte);iFo=r(lYr,"blenderbot-small"),lYr.forEach(t),dFo=r(s3e," \u2014 "),zI=n(s3e,"A",{href:!0});var iYr=s(zI);cFo=r(iYr,"BlenderbotSmallForConditionalGeneration"),iYr.forEach(t),fFo=r(s3e," (BlenderbotSmall model)"),s3e.forEach(t),mFo=i(ie),U1=n(ie,"LI",{});var l3e=s(U1);Ote=n(l3e,"STRONG",{});var dYr=s(Ote);gFo=r(dYr,"encoder-decoder"),dYr.forEach(t),hFo=r(l3e," \u2014 "),WI=n(l3e,"A",{href:!0});var cYr=s(WI);pFo=r(cYr,"EncoderDecoderModel"),cYr.forEach(t),_Fo=r(l3e," (Encoder decoder model)"),l3e.forEach(t),uFo=i(ie),J1=n(ie,"LI",{});var i3e=s(J1);Xte=n(i3e,"STRONG",{});var fYr=s(Xte);bFo=r(fYr,"fsmt"),fYr.forEach(t),vFo=r(i3e," \u2014 "),QI=n(i3e,"A",{href:!0});var mYr=s(QI);TFo=r(mYr,"FSMTForConditionalGeneration"),mYr.forEach(t),FFo=r(i3e," (FairSeq Machine-Translation model)"),i3e.forEach(t),CFo=i(ie),Y1=n(ie,"LI",{});var d3e=s(Y1);Vte=n(d3e,"STRONG",{});var gYr=s(Vte);MFo=r(gYr,"led"),gYr.forEach(t),EFo=r(d3e," \u2014 "),HI=n(d3e,"A",{href:!0});var hYr=s(HI);yFo=r(hYr,"LEDForConditionalGeneration"),hYr.forEach(t),wFo=r(d3e," (LED model)"),d3e.forEach(t),AFo=i(ie),K1=n(ie,"LI",{});var c3e=s(K1);zte=n(c3e,"STRONG",{});var pYr=s(zte);LFo=r(pYr,"m2m_100"),pYr.forEach(t),BFo=r(c3e," \u2014 "),UI=n(c3e,"A",{href:!0});var _Yr=s(UI);xFo=r(_Yr,"M2M100ForConditionalGeneration"),_Yr.forEach(t),kFo=r(c3e," (M2M100 model)"),c3e.forEach(t),RFo=i(ie),Z1=n(ie,"LI",{});var f3e=s(Z1);Wte=n(f3e,"STRONG",{});var uYr=s(Wte);SFo=r(uYr,"marian"),uYr.forEach(t),PFo=r(f3e," \u2014 "),JI=n(f3e,"A",{href:!0});var bYr=s(JI);$Fo=r(bYr,"MarianMTModel"),bYr.forEach(t),IFo=r(f3e," (Marian model)"),f3e.forEach(t),jFo=i(ie),eb=n(ie,"LI",{});var m3e=s(eb);Qte=n(m3e,"STRONG",{});var vYr=s(Qte);DFo=r(vYr,"mbart"),vYr.forEach(t),NFo=r(m3e," \u2014 "),YI=n(m3e,"A",{href:!0});var TYr=s(YI);qFo=r(TYr,"MBartForConditionalGeneration"),TYr.forEach(t),GFo=r(m3e," (mBART model)"),m3e.forEach(t),OFo=i(ie),ob=n(ie,"LI",{});var g3e=s(ob);Hte=n(g3e,"STRONG",{});var FYr=s(Hte);XFo=r(FYr,"mt5"),FYr.forEach(t),VFo=r(g3e," \u2014 "),KI=n(g3e,"A",{href:!0});var CYr=s(KI);zFo=r(CYr,"MT5ForConditionalGeneration"),CYr.forEach(t),WFo=r(g3e," (mT5 model)"),g3e.forEach(t),QFo=i(ie),rb=n(ie,"LI",{});var h3e=s(rb);Ute=n(h3e,"STRONG",{});var MYr=s(Ute);HFo=r(MYr,"pegasus"),MYr.forEach(t),UFo=r(h3e," \u2014 "),ZI=n(h3e,"A",{href:!0});var EYr=s(ZI);JFo=r(EYr,"PegasusForConditionalGeneration"),EYr.forEach(t),YFo=r(h3e," (Pegasus model)"),h3e.forEach(t),KFo=i(ie),tb=n(ie,"LI",{});var p3e=s(tb);Jte=n(p3e,"STRONG",{});var yYr=s(Jte);ZFo=r(yYr,"plbart"),yYr.forEach(t),eCo=r(p3e," \u2014 "),ej=n(p3e,"A",{href:!0});var wYr=s(ej);oCo=r(wYr,"PLBartForConditionalGeneration"),wYr.forEach(t),rCo=r(p3e," (PLBart model)"),p3e.forEach(t),tCo=i(ie),ab=n(ie,"LI",{});var _3e=s(ab);Yte=n(_3e,"STRONG",{});var AYr=s(Yte);aCo=r(AYr,"prophetnet"),AYr.forEach(t),nCo=r(_3e," \u2014 "),oj=n(_3e,"A",{href:!0});var LYr=s(oj);sCo=r(LYr,"ProphetNetForConditionalGeneration"),LYr.forEach(t),lCo=r(_3e," (ProphetNet model)"),_3e.forEach(t),iCo=i(ie),nb=n(ie,"LI",{});var u3e=s(nb);Kte=n(u3e,"STRONG",{});var BYr=s(Kte);dCo=r(BYr,"t5"),BYr.forEach(t),cCo=r(u3e," \u2014 "),rj=n(u3e,"A",{href:!0});var xYr=s(rj);fCo=r(xYr,"T5ForConditionalGeneration"),xYr.forEach(t),mCo=r(u3e," (T5 model)"),u3e.forEach(t),gCo=i(ie),sb=n(ie,"LI",{});var b3e=s(sb);Zte=n(b3e,"STRONG",{});var kYr=s(Zte);hCo=r(kYr,"xlm-prophetnet"),kYr.forEach(t),pCo=r(b3e," \u2014 "),tj=n(b3e,"A",{href:!0});var RYr=s(tj);_Co=r(RYr,"XLMProphetNetForConditionalGeneration"),RYr.forEach(t),uCo=r(b3e," (XLMProphetNet model)"),b3e.forEach(t),ie.forEach(t),bCo=i(Qt),lb=n(Qt,"P",{});var v3e=s(lb);vCo=r(v3e,"The model is set in evaluation mode by default using "),eae=n(v3e,"CODE",{});var SYr=s(eae);TCo=r(SYr,"model.eval()"),SYr.forEach(t),FCo=r(v3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oae=n(v3e,"CODE",{});var PYr=s(oae);CCo=r(PYr,"model.train()"),PYr.forEach(t),v3e.forEach(t),MCo=i(Qt),rae=n(Qt,"P",{});var $Yr=s(rae);ECo=r($Yr,"Examples:"),$Yr.forEach(t),yCo=i(Qt),m(RE.$$.fragment,Qt),Qt.forEach(t),nl.forEach(t),dRe=i(d),bd=n(d,"H2",{class:!0});var TPe=s(bd);ib=n(TPe,"A",{id:!0,class:!0,href:!0});var IYr=s(ib);tae=n(IYr,"SPAN",{});var jYr=s(tae);m(SE.$$.fragment,jYr),jYr.forEach(t),IYr.forEach(t),wCo=i(TPe),aae=n(TPe,"SPAN",{});var DYr=s(aae);ACo=r(DYr,"AutoModelForSequenceClassification"),DYr.forEach(t),TPe.forEach(t),cRe=i(d),rr=n(d,"DIV",{class:!0});var ll=s(rr);m(PE.$$.fragment,ll),LCo=i(ll),vd=n(ll,"P",{});var wW=s(vd);BCo=r(wW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nae=n(wW,"CODE",{});var NYr=s(nae);xCo=r(NYr,"from_pretrained()"),NYr.forEach(t),kCo=r(wW,"class method or the "),sae=n(wW,"CODE",{});var qYr=s(sae);RCo=r(qYr,"from_config()"),qYr.forEach(t),SCo=r(wW,`class
method.`),wW.forEach(t),PCo=i(ll),$E=n(ll,"P",{});var FPe=s($E);$Co=r(FPe,"This class cannot be instantiated directly using "),lae=n(FPe,"CODE",{});var GYr=s(lae);ICo=r(GYr,"__init__()"),GYr.forEach(t),jCo=r(FPe," (throws an error)."),FPe.forEach(t),DCo=i(ll),Yr=n(ll,"DIV",{class:!0});var il=s(Yr);m(IE.$$.fragment,il),NCo=i(il),iae=n(il,"P",{});var OYr=s(iae);qCo=r(OYr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),OYr.forEach(t),GCo=i(il),Td=n(il,"P",{});var AW=s(Td);OCo=r(AW,`Note:
Loading a model from its configuration file does `),dae=n(AW,"STRONG",{});var XYr=s(dae);XCo=r(XYr,"not"),XYr.forEach(t),VCo=r(AW,` load the model weights. It only affects the
model\u2019s configuration. Use `),cae=n(AW,"CODE",{});var VYr=s(cae);zCo=r(VYr,"from_pretrained()"),VYr.forEach(t),WCo=r(AW,"to load the model weights."),AW.forEach(t),QCo=i(il),fae=n(il,"P",{});var zYr=s(fae);HCo=r(zYr,"Examples:"),zYr.forEach(t),UCo=i(il),m(jE.$$.fragment,il),il.forEach(t),JCo=i(ll),Oe=n(ll,"DIV",{class:!0});var Ht=s(Oe);m(DE.$$.fragment,Ht),YCo=i(Ht),mae=n(Ht,"P",{});var WYr=s(mae);KCo=r(WYr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),WYr.forEach(t),ZCo=i(Ht),Za=n(Ht,"P",{});var wM=s(Za);eMo=r(wM,"The model class to instantiate is selected based on the "),gae=n(wM,"CODE",{});var QYr=s(gae);oMo=r(QYr,"model_type"),QYr.forEach(t),rMo=r(wM,` property of the config object (either
passed as an argument or loaded from `),hae=n(wM,"CODE",{});var HYr=s(hae);tMo=r(HYr,"pretrained_model_name_or_path"),HYr.forEach(t),aMo=r(wM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pae=n(wM,"CODE",{});var UYr=s(pae);nMo=r(UYr,"pretrained_model_name_or_path"),UYr.forEach(t),sMo=r(wM,":"),wM.forEach(t),lMo=i(Ht),A=n(Ht,"UL",{});var L=s(A);db=n(L,"LI",{});var T3e=s(db);_ae=n(T3e,"STRONG",{});var JYr=s(_ae);iMo=r(JYr,"albert"),JYr.forEach(t),dMo=r(T3e," \u2014 "),aj=n(T3e,"A",{href:!0});var YYr=s(aj);cMo=r(YYr,"AlbertForSequenceClassification"),YYr.forEach(t),fMo=r(T3e," (ALBERT model)"),T3e.forEach(t),mMo=i(L),cb=n(L,"LI",{});var F3e=s(cb);uae=n(F3e,"STRONG",{});var KYr=s(uae);gMo=r(KYr,"bart"),KYr.forEach(t),hMo=r(F3e," \u2014 "),nj=n(F3e,"A",{href:!0});var ZYr=s(nj);pMo=r(ZYr,"BartForSequenceClassification"),ZYr.forEach(t),_Mo=r(F3e," (BART model)"),F3e.forEach(t),uMo=i(L),fb=n(L,"LI",{});var C3e=s(fb);bae=n(C3e,"STRONG",{});var eKr=s(bae);bMo=r(eKr,"bert"),eKr.forEach(t),vMo=r(C3e," \u2014 "),sj=n(C3e,"A",{href:!0});var oKr=s(sj);TMo=r(oKr,"BertForSequenceClassification"),oKr.forEach(t),FMo=r(C3e," (BERT model)"),C3e.forEach(t),CMo=i(L),mb=n(L,"LI",{});var M3e=s(mb);vae=n(M3e,"STRONG",{});var rKr=s(vae);MMo=r(rKr,"big_bird"),rKr.forEach(t),EMo=r(M3e," \u2014 "),lj=n(M3e,"A",{href:!0});var tKr=s(lj);yMo=r(tKr,"BigBirdForSequenceClassification"),tKr.forEach(t),wMo=r(M3e," (BigBird model)"),M3e.forEach(t),AMo=i(L),gb=n(L,"LI",{});var E3e=s(gb);Tae=n(E3e,"STRONG",{});var aKr=s(Tae);LMo=r(aKr,"bigbird_pegasus"),aKr.forEach(t),BMo=r(E3e," \u2014 "),ij=n(E3e,"A",{href:!0});var nKr=s(ij);xMo=r(nKr,"BigBirdPegasusForSequenceClassification"),nKr.forEach(t),kMo=r(E3e," (BigBirdPegasus model)"),E3e.forEach(t),RMo=i(L),hb=n(L,"LI",{});var y3e=s(hb);Fae=n(y3e,"STRONG",{});var sKr=s(Fae);SMo=r(sKr,"camembert"),sKr.forEach(t),PMo=r(y3e," \u2014 "),dj=n(y3e,"A",{href:!0});var lKr=s(dj);$Mo=r(lKr,"CamembertForSequenceClassification"),lKr.forEach(t),IMo=r(y3e," (CamemBERT model)"),y3e.forEach(t),jMo=i(L),pb=n(L,"LI",{});var w3e=s(pb);Cae=n(w3e,"STRONG",{});var iKr=s(Cae);DMo=r(iKr,"canine"),iKr.forEach(t),NMo=r(w3e," \u2014 "),cj=n(w3e,"A",{href:!0});var dKr=s(cj);qMo=r(dKr,"CanineForSequenceClassification"),dKr.forEach(t),GMo=r(w3e," (Canine model)"),w3e.forEach(t),OMo=i(L),_b=n(L,"LI",{});var A3e=s(_b);Mae=n(A3e,"STRONG",{});var cKr=s(Mae);XMo=r(cKr,"convbert"),cKr.forEach(t),VMo=r(A3e," \u2014 "),fj=n(A3e,"A",{href:!0});var fKr=s(fj);zMo=r(fKr,"ConvBertForSequenceClassification"),fKr.forEach(t),WMo=r(A3e," (ConvBERT model)"),A3e.forEach(t),QMo=i(L),ub=n(L,"LI",{});var L3e=s(ub);Eae=n(L3e,"STRONG",{});var mKr=s(Eae);HMo=r(mKr,"ctrl"),mKr.forEach(t),UMo=r(L3e," \u2014 "),mj=n(L3e,"A",{href:!0});var gKr=s(mj);JMo=r(gKr,"CTRLForSequenceClassification"),gKr.forEach(t),YMo=r(L3e," (CTRL model)"),L3e.forEach(t),KMo=i(L),bb=n(L,"LI",{});var B3e=s(bb);yae=n(B3e,"STRONG",{});var hKr=s(yae);ZMo=r(hKr,"data2vec-text"),hKr.forEach(t),e4o=r(B3e," \u2014 "),gj=n(B3e,"A",{href:!0});var pKr=s(gj);o4o=r(pKr,"Data2VecTextForSequenceClassification"),pKr.forEach(t),r4o=r(B3e," (Data2VecText model)"),B3e.forEach(t),t4o=i(L),vb=n(L,"LI",{});var x3e=s(vb);wae=n(x3e,"STRONG",{});var _Kr=s(wae);a4o=r(_Kr,"deberta"),_Kr.forEach(t),n4o=r(x3e," \u2014 "),hj=n(x3e,"A",{href:!0});var uKr=s(hj);s4o=r(uKr,"DebertaForSequenceClassification"),uKr.forEach(t),l4o=r(x3e," (DeBERTa model)"),x3e.forEach(t),i4o=i(L),Tb=n(L,"LI",{});var k3e=s(Tb);Aae=n(k3e,"STRONG",{});var bKr=s(Aae);d4o=r(bKr,"deberta-v2"),bKr.forEach(t),c4o=r(k3e," \u2014 "),pj=n(k3e,"A",{href:!0});var vKr=s(pj);f4o=r(vKr,"DebertaV2ForSequenceClassification"),vKr.forEach(t),m4o=r(k3e," (DeBERTa-v2 model)"),k3e.forEach(t),g4o=i(L),Fb=n(L,"LI",{});var R3e=s(Fb);Lae=n(R3e,"STRONG",{});var TKr=s(Lae);h4o=r(TKr,"distilbert"),TKr.forEach(t),p4o=r(R3e," \u2014 "),_j=n(R3e,"A",{href:!0});var FKr=s(_j);_4o=r(FKr,"DistilBertForSequenceClassification"),FKr.forEach(t),u4o=r(R3e," (DistilBERT model)"),R3e.forEach(t),b4o=i(L),Cb=n(L,"LI",{});var S3e=s(Cb);Bae=n(S3e,"STRONG",{});var CKr=s(Bae);v4o=r(CKr,"electra"),CKr.forEach(t),T4o=r(S3e," \u2014 "),uj=n(S3e,"A",{href:!0});var MKr=s(uj);F4o=r(MKr,"ElectraForSequenceClassification"),MKr.forEach(t),C4o=r(S3e," (ELECTRA model)"),S3e.forEach(t),M4o=i(L),Mb=n(L,"LI",{});var P3e=s(Mb);xae=n(P3e,"STRONG",{});var EKr=s(xae);E4o=r(EKr,"flaubert"),EKr.forEach(t),y4o=r(P3e," \u2014 "),bj=n(P3e,"A",{href:!0});var yKr=s(bj);w4o=r(yKr,"FlaubertForSequenceClassification"),yKr.forEach(t),A4o=r(P3e," (FlauBERT model)"),P3e.forEach(t),L4o=i(L),Eb=n(L,"LI",{});var $3e=s(Eb);kae=n($3e,"STRONG",{});var wKr=s(kae);B4o=r(wKr,"fnet"),wKr.forEach(t),x4o=r($3e," \u2014 "),vj=n($3e,"A",{href:!0});var AKr=s(vj);k4o=r(AKr,"FNetForSequenceClassification"),AKr.forEach(t),R4o=r($3e," (FNet model)"),$3e.forEach(t),S4o=i(L),yb=n(L,"LI",{});var I3e=s(yb);Rae=n(I3e,"STRONG",{});var LKr=s(Rae);P4o=r(LKr,"funnel"),LKr.forEach(t),$4o=r(I3e," \u2014 "),Tj=n(I3e,"A",{href:!0});var BKr=s(Tj);I4o=r(BKr,"FunnelForSequenceClassification"),BKr.forEach(t),j4o=r(I3e," (Funnel Transformer model)"),I3e.forEach(t),D4o=i(L),wb=n(L,"LI",{});var j3e=s(wb);Sae=n(j3e,"STRONG",{});var xKr=s(Sae);N4o=r(xKr,"gpt2"),xKr.forEach(t),q4o=r(j3e," \u2014 "),Fj=n(j3e,"A",{href:!0});var kKr=s(Fj);G4o=r(kKr,"GPT2ForSequenceClassification"),kKr.forEach(t),O4o=r(j3e," (OpenAI GPT-2 model)"),j3e.forEach(t),X4o=i(L),Ab=n(L,"LI",{});var D3e=s(Ab);Pae=n(D3e,"STRONG",{});var RKr=s(Pae);V4o=r(RKr,"gpt_neo"),RKr.forEach(t),z4o=r(D3e," \u2014 "),Cj=n(D3e,"A",{href:!0});var SKr=s(Cj);W4o=r(SKr,"GPTNeoForSequenceClassification"),SKr.forEach(t),Q4o=r(D3e," (GPT Neo model)"),D3e.forEach(t),H4o=i(L),Lb=n(L,"LI",{});var N3e=s(Lb);$ae=n(N3e,"STRONG",{});var PKr=s($ae);U4o=r(PKr,"gptj"),PKr.forEach(t),J4o=r(N3e," \u2014 "),Mj=n(N3e,"A",{href:!0});var $Kr=s(Mj);Y4o=r($Kr,"GPTJForSequenceClassification"),$Kr.forEach(t),K4o=r(N3e," (GPT-J model)"),N3e.forEach(t),Z4o=i(L),Bb=n(L,"LI",{});var q3e=s(Bb);Iae=n(q3e,"STRONG",{});var IKr=s(Iae);eEo=r(IKr,"ibert"),IKr.forEach(t),oEo=r(q3e," \u2014 "),Ej=n(q3e,"A",{href:!0});var jKr=s(Ej);rEo=r(jKr,"IBertForSequenceClassification"),jKr.forEach(t),tEo=r(q3e," (I-BERT model)"),q3e.forEach(t),aEo=i(L),xb=n(L,"LI",{});var G3e=s(xb);jae=n(G3e,"STRONG",{});var DKr=s(jae);nEo=r(DKr,"layoutlm"),DKr.forEach(t),sEo=r(G3e," \u2014 "),yj=n(G3e,"A",{href:!0});var NKr=s(yj);lEo=r(NKr,"LayoutLMForSequenceClassification"),NKr.forEach(t),iEo=r(G3e," (LayoutLM model)"),G3e.forEach(t),dEo=i(L),kb=n(L,"LI",{});var O3e=s(kb);Dae=n(O3e,"STRONG",{});var qKr=s(Dae);cEo=r(qKr,"layoutlmv2"),qKr.forEach(t),fEo=r(O3e," \u2014 "),wj=n(O3e,"A",{href:!0});var GKr=s(wj);mEo=r(GKr,"LayoutLMv2ForSequenceClassification"),GKr.forEach(t),gEo=r(O3e," (LayoutLMv2 model)"),O3e.forEach(t),hEo=i(L),Rb=n(L,"LI",{});var X3e=s(Rb);Nae=n(X3e,"STRONG",{});var OKr=s(Nae);pEo=r(OKr,"led"),OKr.forEach(t),_Eo=r(X3e," \u2014 "),Aj=n(X3e,"A",{href:!0});var XKr=s(Aj);uEo=r(XKr,"LEDForSequenceClassification"),XKr.forEach(t),bEo=r(X3e," (LED model)"),X3e.forEach(t),vEo=i(L),Sb=n(L,"LI",{});var V3e=s(Sb);qae=n(V3e,"STRONG",{});var VKr=s(qae);TEo=r(VKr,"longformer"),VKr.forEach(t),FEo=r(V3e," \u2014 "),Lj=n(V3e,"A",{href:!0});var zKr=s(Lj);CEo=r(zKr,"LongformerForSequenceClassification"),zKr.forEach(t),MEo=r(V3e," (Longformer model)"),V3e.forEach(t),EEo=i(L),Pb=n(L,"LI",{});var z3e=s(Pb);Gae=n(z3e,"STRONG",{});var WKr=s(Gae);yEo=r(WKr,"mbart"),WKr.forEach(t),wEo=r(z3e," \u2014 "),Bj=n(z3e,"A",{href:!0});var QKr=s(Bj);AEo=r(QKr,"MBartForSequenceClassification"),QKr.forEach(t),LEo=r(z3e," (mBART model)"),z3e.forEach(t),BEo=i(L),$b=n(L,"LI",{});var W3e=s($b);Oae=n(W3e,"STRONG",{});var HKr=s(Oae);xEo=r(HKr,"megatron-bert"),HKr.forEach(t),kEo=r(W3e," \u2014 "),xj=n(W3e,"A",{href:!0});var UKr=s(xj);REo=r(UKr,"MegatronBertForSequenceClassification"),UKr.forEach(t),SEo=r(W3e," (MegatronBert model)"),W3e.forEach(t),PEo=i(L),Ib=n(L,"LI",{});var Q3e=s(Ib);Xae=n(Q3e,"STRONG",{});var JKr=s(Xae);$Eo=r(JKr,"mobilebert"),JKr.forEach(t),IEo=r(Q3e," \u2014 "),kj=n(Q3e,"A",{href:!0});var YKr=s(kj);jEo=r(YKr,"MobileBertForSequenceClassification"),YKr.forEach(t),DEo=r(Q3e," (MobileBERT model)"),Q3e.forEach(t),NEo=i(L),jb=n(L,"LI",{});var H3e=s(jb);Vae=n(H3e,"STRONG",{});var KKr=s(Vae);qEo=r(KKr,"mpnet"),KKr.forEach(t),GEo=r(H3e," \u2014 "),Rj=n(H3e,"A",{href:!0});var ZKr=s(Rj);OEo=r(ZKr,"MPNetForSequenceClassification"),ZKr.forEach(t),XEo=r(H3e," (MPNet model)"),H3e.forEach(t),VEo=i(L),Db=n(L,"LI",{});var U3e=s(Db);zae=n(U3e,"STRONG",{});var eZr=s(zae);zEo=r(eZr,"nystromformer"),eZr.forEach(t),WEo=r(U3e," \u2014 "),Sj=n(U3e,"A",{href:!0});var oZr=s(Sj);QEo=r(oZr,"NystromformerForSequenceClassification"),oZr.forEach(t),HEo=r(U3e," (Nystromformer model)"),U3e.forEach(t),UEo=i(L),Nb=n(L,"LI",{});var J3e=s(Nb);Wae=n(J3e,"STRONG",{});var rZr=s(Wae);JEo=r(rZr,"openai-gpt"),rZr.forEach(t),YEo=r(J3e," \u2014 "),Pj=n(J3e,"A",{href:!0});var tZr=s(Pj);KEo=r(tZr,"OpenAIGPTForSequenceClassification"),tZr.forEach(t),ZEo=r(J3e," (OpenAI GPT model)"),J3e.forEach(t),e3o=i(L),qb=n(L,"LI",{});var Y3e=s(qb);Qae=n(Y3e,"STRONG",{});var aZr=s(Qae);o3o=r(aZr,"perceiver"),aZr.forEach(t),r3o=r(Y3e," \u2014 "),$j=n(Y3e,"A",{href:!0});var nZr=s($j);t3o=r(nZr,"PerceiverForSequenceClassification"),nZr.forEach(t),a3o=r(Y3e," (Perceiver model)"),Y3e.forEach(t),n3o=i(L),Gb=n(L,"LI",{});var K3e=s(Gb);Hae=n(K3e,"STRONG",{});var sZr=s(Hae);s3o=r(sZr,"plbart"),sZr.forEach(t),l3o=r(K3e," \u2014 "),Ij=n(K3e,"A",{href:!0});var lZr=s(Ij);i3o=r(lZr,"PLBartForSequenceClassification"),lZr.forEach(t),d3o=r(K3e," (PLBart model)"),K3e.forEach(t),c3o=i(L),Ob=n(L,"LI",{});var Z3e=s(Ob);Uae=n(Z3e,"STRONG",{});var iZr=s(Uae);f3o=r(iZr,"qdqbert"),iZr.forEach(t),m3o=r(Z3e," \u2014 "),jj=n(Z3e,"A",{href:!0});var dZr=s(jj);g3o=r(dZr,"QDQBertForSequenceClassification"),dZr.forEach(t),h3o=r(Z3e," (QDQBert model)"),Z3e.forEach(t),p3o=i(L),Xb=n(L,"LI",{});var eye=s(Xb);Jae=n(eye,"STRONG",{});var cZr=s(Jae);_3o=r(cZr,"reformer"),cZr.forEach(t),u3o=r(eye," \u2014 "),Dj=n(eye,"A",{href:!0});var fZr=s(Dj);b3o=r(fZr,"ReformerForSequenceClassification"),fZr.forEach(t),v3o=r(eye," (Reformer model)"),eye.forEach(t),T3o=i(L),Vb=n(L,"LI",{});var oye=s(Vb);Yae=n(oye,"STRONG",{});var mZr=s(Yae);F3o=r(mZr,"rembert"),mZr.forEach(t),C3o=r(oye," \u2014 "),Nj=n(oye,"A",{href:!0});var gZr=s(Nj);M3o=r(gZr,"RemBertForSequenceClassification"),gZr.forEach(t),E3o=r(oye," (RemBERT model)"),oye.forEach(t),y3o=i(L),zb=n(L,"LI",{});var rye=s(zb);Kae=n(rye,"STRONG",{});var hZr=s(Kae);w3o=r(hZr,"roberta"),hZr.forEach(t),A3o=r(rye," \u2014 "),qj=n(rye,"A",{href:!0});var pZr=s(qj);L3o=r(pZr,"RobertaForSequenceClassification"),pZr.forEach(t),B3o=r(rye," (RoBERTa model)"),rye.forEach(t),x3o=i(L),Wb=n(L,"LI",{});var tye=s(Wb);Zae=n(tye,"STRONG",{});var _Zr=s(Zae);k3o=r(_Zr,"roformer"),_Zr.forEach(t),R3o=r(tye," \u2014 "),Gj=n(tye,"A",{href:!0});var uZr=s(Gj);S3o=r(uZr,"RoFormerForSequenceClassification"),uZr.forEach(t),P3o=r(tye," (RoFormer model)"),tye.forEach(t),$3o=i(L),Qb=n(L,"LI",{});var aye=s(Qb);ene=n(aye,"STRONG",{});var bZr=s(ene);I3o=r(bZr,"squeezebert"),bZr.forEach(t),j3o=r(aye," \u2014 "),Oj=n(aye,"A",{href:!0});var vZr=s(Oj);D3o=r(vZr,"SqueezeBertForSequenceClassification"),vZr.forEach(t),N3o=r(aye," (SqueezeBERT model)"),aye.forEach(t),q3o=i(L),Hb=n(L,"LI",{});var nye=s(Hb);one=n(nye,"STRONG",{});var TZr=s(one);G3o=r(TZr,"tapas"),TZr.forEach(t),O3o=r(nye," \u2014 "),Xj=n(nye,"A",{href:!0});var FZr=s(Xj);X3o=r(FZr,"TapasForSequenceClassification"),FZr.forEach(t),V3o=r(nye," (TAPAS model)"),nye.forEach(t),z3o=i(L),Ub=n(L,"LI",{});var sye=s(Ub);rne=n(sye,"STRONG",{});var CZr=s(rne);W3o=r(CZr,"transfo-xl"),CZr.forEach(t),Q3o=r(sye," \u2014 "),Vj=n(sye,"A",{href:!0});var MZr=s(Vj);H3o=r(MZr,"TransfoXLForSequenceClassification"),MZr.forEach(t),U3o=r(sye," (Transformer-XL model)"),sye.forEach(t),J3o=i(L),Jb=n(L,"LI",{});var lye=s(Jb);tne=n(lye,"STRONG",{});var EZr=s(tne);Y3o=r(EZr,"xlm"),EZr.forEach(t),K3o=r(lye," \u2014 "),zj=n(lye,"A",{href:!0});var yZr=s(zj);Z3o=r(yZr,"XLMForSequenceClassification"),yZr.forEach(t),eyo=r(lye," (XLM model)"),lye.forEach(t),oyo=i(L),Yb=n(L,"LI",{});var iye=s(Yb);ane=n(iye,"STRONG",{});var wZr=s(ane);ryo=r(wZr,"xlm-roberta"),wZr.forEach(t),tyo=r(iye," \u2014 "),Wj=n(iye,"A",{href:!0});var AZr=s(Wj);ayo=r(AZr,"XLMRobertaForSequenceClassification"),AZr.forEach(t),nyo=r(iye," (XLM-RoBERTa model)"),iye.forEach(t),syo=i(L),Kb=n(L,"LI",{});var dye=s(Kb);nne=n(dye,"STRONG",{});var LZr=s(nne);lyo=r(LZr,"xlm-roberta-xl"),LZr.forEach(t),iyo=r(dye," \u2014 "),Qj=n(dye,"A",{href:!0});var BZr=s(Qj);dyo=r(BZr,"XLMRobertaXLForSequenceClassification"),BZr.forEach(t),cyo=r(dye," (XLM-RoBERTa-XL model)"),dye.forEach(t),fyo=i(L),Zb=n(L,"LI",{});var cye=s(Zb);sne=n(cye,"STRONG",{});var xZr=s(sne);myo=r(xZr,"xlnet"),xZr.forEach(t),gyo=r(cye," \u2014 "),Hj=n(cye,"A",{href:!0});var kZr=s(Hj);hyo=r(kZr,"XLNetForSequenceClassification"),kZr.forEach(t),pyo=r(cye," (XLNet model)"),cye.forEach(t),_yo=i(L),e5=n(L,"LI",{});var fye=s(e5);lne=n(fye,"STRONG",{});var RZr=s(lne);uyo=r(RZr,"yoso"),RZr.forEach(t),byo=r(fye," \u2014 "),Uj=n(fye,"A",{href:!0});var SZr=s(Uj);vyo=r(SZr,"YosoForSequenceClassification"),SZr.forEach(t),Tyo=r(fye," (YOSO model)"),fye.forEach(t),L.forEach(t),Fyo=i(Ht),o5=n(Ht,"P",{});var mye=s(o5);Cyo=r(mye,"The model is set in evaluation mode by default using "),ine=n(mye,"CODE",{});var PZr=s(ine);Myo=r(PZr,"model.eval()"),PZr.forEach(t),Eyo=r(mye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dne=n(mye,"CODE",{});var $Zr=s(dne);yyo=r($Zr,"model.train()"),$Zr.forEach(t),mye.forEach(t),wyo=i(Ht),cne=n(Ht,"P",{});var IZr=s(cne);Ayo=r(IZr,"Examples:"),IZr.forEach(t),Lyo=i(Ht),m(NE.$$.fragment,Ht),Ht.forEach(t),ll.forEach(t),fRe=i(d),Fd=n(d,"H2",{class:!0});var CPe=s(Fd);r5=n(CPe,"A",{id:!0,class:!0,href:!0});var jZr=s(r5);fne=n(jZr,"SPAN",{});var DZr=s(fne);m(qE.$$.fragment,DZr),DZr.forEach(t),jZr.forEach(t),Byo=i(CPe),mne=n(CPe,"SPAN",{});var NZr=s(mne);xyo=r(NZr,"AutoModelForMultipleChoice"),NZr.forEach(t),CPe.forEach(t),mRe=i(d),tr=n(d,"DIV",{class:!0});var dl=s(tr);m(GE.$$.fragment,dl),kyo=i(dl),Cd=n(dl,"P",{});var LW=s(Cd);Ryo=r(LW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),gne=n(LW,"CODE",{});var qZr=s(gne);Syo=r(qZr,"from_pretrained()"),qZr.forEach(t),Pyo=r(LW,"class method or the "),hne=n(LW,"CODE",{});var GZr=s(hne);$yo=r(GZr,"from_config()"),GZr.forEach(t),Iyo=r(LW,`class
method.`),LW.forEach(t),jyo=i(dl),OE=n(dl,"P",{});var MPe=s(OE);Dyo=r(MPe,"This class cannot be instantiated directly using "),pne=n(MPe,"CODE",{});var OZr=s(pne);Nyo=r(OZr,"__init__()"),OZr.forEach(t),qyo=r(MPe," (throws an error)."),MPe.forEach(t),Gyo=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(XE.$$.fragment,cl),Oyo=i(cl),_ne=n(cl,"P",{});var XZr=s(_ne);Xyo=r(XZr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),XZr.forEach(t),Vyo=i(cl),Md=n(cl,"P",{});var BW=s(Md);zyo=r(BW,`Note:
Loading a model from its configuration file does `),une=n(BW,"STRONG",{});var VZr=s(une);Wyo=r(VZr,"not"),VZr.forEach(t),Qyo=r(BW,` load the model weights. It only affects the
model\u2019s configuration. Use `),bne=n(BW,"CODE",{});var zZr=s(bne);Hyo=r(zZr,"from_pretrained()"),zZr.forEach(t),Uyo=r(BW,"to load the model weights."),BW.forEach(t),Jyo=i(cl),vne=n(cl,"P",{});var WZr=s(vne);Yyo=r(WZr,"Examples:"),WZr.forEach(t),Kyo=i(cl),m(VE.$$.fragment,cl),cl.forEach(t),Zyo=i(dl),Xe=n(dl,"DIV",{class:!0});var Ut=s(Xe);m(zE.$$.fragment,Ut),ewo=i(Ut),Tne=n(Ut,"P",{});var QZr=s(Tne);owo=r(QZr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),QZr.forEach(t),rwo=i(Ut),en=n(Ut,"P",{});var AM=s(en);two=r(AM,"The model class to instantiate is selected based on the "),Fne=n(AM,"CODE",{});var HZr=s(Fne);awo=r(HZr,"model_type"),HZr.forEach(t),nwo=r(AM,` property of the config object (either
passed as an argument or loaded from `),Cne=n(AM,"CODE",{});var UZr=s(Cne);swo=r(UZr,"pretrained_model_name_or_path"),UZr.forEach(t),lwo=r(AM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mne=n(AM,"CODE",{});var JZr=s(Mne);iwo=r(JZr,"pretrained_model_name_or_path"),JZr.forEach(t),dwo=r(AM,":"),AM.forEach(t),cwo=i(Ut),G=n(Ut,"UL",{});var O=s(G);t5=n(O,"LI",{});var gye=s(t5);Ene=n(gye,"STRONG",{});var YZr=s(Ene);fwo=r(YZr,"albert"),YZr.forEach(t),mwo=r(gye," \u2014 "),Jj=n(gye,"A",{href:!0});var KZr=s(Jj);gwo=r(KZr,"AlbertForMultipleChoice"),KZr.forEach(t),hwo=r(gye," (ALBERT model)"),gye.forEach(t),pwo=i(O),a5=n(O,"LI",{});var hye=s(a5);yne=n(hye,"STRONG",{});var ZZr=s(yne);_wo=r(ZZr,"bert"),ZZr.forEach(t),uwo=r(hye," \u2014 "),Yj=n(hye,"A",{href:!0});var eet=s(Yj);bwo=r(eet,"BertForMultipleChoice"),eet.forEach(t),vwo=r(hye," (BERT model)"),hye.forEach(t),Two=i(O),n5=n(O,"LI",{});var pye=s(n5);wne=n(pye,"STRONG",{});var oet=s(wne);Fwo=r(oet,"big_bird"),oet.forEach(t),Cwo=r(pye," \u2014 "),Kj=n(pye,"A",{href:!0});var ret=s(Kj);Mwo=r(ret,"BigBirdForMultipleChoice"),ret.forEach(t),Ewo=r(pye," (BigBird model)"),pye.forEach(t),ywo=i(O),s5=n(O,"LI",{});var _ye=s(s5);Ane=n(_ye,"STRONG",{});var tet=s(Ane);wwo=r(tet,"camembert"),tet.forEach(t),Awo=r(_ye," \u2014 "),Zj=n(_ye,"A",{href:!0});var aet=s(Zj);Lwo=r(aet,"CamembertForMultipleChoice"),aet.forEach(t),Bwo=r(_ye," (CamemBERT model)"),_ye.forEach(t),xwo=i(O),l5=n(O,"LI",{});var uye=s(l5);Lne=n(uye,"STRONG",{});var net=s(Lne);kwo=r(net,"canine"),net.forEach(t),Rwo=r(uye," \u2014 "),eD=n(uye,"A",{href:!0});var set=s(eD);Swo=r(set,"CanineForMultipleChoice"),set.forEach(t),Pwo=r(uye," (Canine model)"),uye.forEach(t),$wo=i(O),i5=n(O,"LI",{});var bye=s(i5);Bne=n(bye,"STRONG",{});var iet=s(Bne);Iwo=r(iet,"convbert"),iet.forEach(t),jwo=r(bye," \u2014 "),oD=n(bye,"A",{href:!0});var det=s(oD);Dwo=r(det,"ConvBertForMultipleChoice"),det.forEach(t),Nwo=r(bye," (ConvBERT model)"),bye.forEach(t),qwo=i(O),d5=n(O,"LI",{});var vye=s(d5);xne=n(vye,"STRONG",{});var cet=s(xne);Gwo=r(cet,"data2vec-text"),cet.forEach(t),Owo=r(vye," \u2014 "),rD=n(vye,"A",{href:!0});var fet=s(rD);Xwo=r(fet,"Data2VecTextForMultipleChoice"),fet.forEach(t),Vwo=r(vye," (Data2VecText model)"),vye.forEach(t),zwo=i(O),c5=n(O,"LI",{});var Tye=s(c5);kne=n(Tye,"STRONG",{});var met=s(kne);Wwo=r(met,"distilbert"),met.forEach(t),Qwo=r(Tye," \u2014 "),tD=n(Tye,"A",{href:!0});var get=s(tD);Hwo=r(get,"DistilBertForMultipleChoice"),get.forEach(t),Uwo=r(Tye," (DistilBERT model)"),Tye.forEach(t),Jwo=i(O),f5=n(O,"LI",{});var Fye=s(f5);Rne=n(Fye,"STRONG",{});var het=s(Rne);Ywo=r(het,"electra"),het.forEach(t),Kwo=r(Fye," \u2014 "),aD=n(Fye,"A",{href:!0});var pet=s(aD);Zwo=r(pet,"ElectraForMultipleChoice"),pet.forEach(t),eAo=r(Fye," (ELECTRA model)"),Fye.forEach(t),oAo=i(O),m5=n(O,"LI",{});var Cye=s(m5);Sne=n(Cye,"STRONG",{});var _et=s(Sne);rAo=r(_et,"flaubert"),_et.forEach(t),tAo=r(Cye," \u2014 "),nD=n(Cye,"A",{href:!0});var uet=s(nD);aAo=r(uet,"FlaubertForMultipleChoice"),uet.forEach(t),nAo=r(Cye," (FlauBERT model)"),Cye.forEach(t),sAo=i(O),g5=n(O,"LI",{});var Mye=s(g5);Pne=n(Mye,"STRONG",{});var bet=s(Pne);lAo=r(bet,"fnet"),bet.forEach(t),iAo=r(Mye," \u2014 "),sD=n(Mye,"A",{href:!0});var vet=s(sD);dAo=r(vet,"FNetForMultipleChoice"),vet.forEach(t),cAo=r(Mye," (FNet model)"),Mye.forEach(t),fAo=i(O),h5=n(O,"LI",{});var Eye=s(h5);$ne=n(Eye,"STRONG",{});var Tet=s($ne);mAo=r(Tet,"funnel"),Tet.forEach(t),gAo=r(Eye," \u2014 "),lD=n(Eye,"A",{href:!0});var Fet=s(lD);hAo=r(Fet,"FunnelForMultipleChoice"),Fet.forEach(t),pAo=r(Eye," (Funnel Transformer model)"),Eye.forEach(t),_Ao=i(O),p5=n(O,"LI",{});var yye=s(p5);Ine=n(yye,"STRONG",{});var Cet=s(Ine);uAo=r(Cet,"ibert"),Cet.forEach(t),bAo=r(yye," \u2014 "),iD=n(yye,"A",{href:!0});var Met=s(iD);vAo=r(Met,"IBertForMultipleChoice"),Met.forEach(t),TAo=r(yye," (I-BERT model)"),yye.forEach(t),FAo=i(O),_5=n(O,"LI",{});var wye=s(_5);jne=n(wye,"STRONG",{});var Eet=s(jne);CAo=r(Eet,"longformer"),Eet.forEach(t),MAo=r(wye," \u2014 "),dD=n(wye,"A",{href:!0});var yet=s(dD);EAo=r(yet,"LongformerForMultipleChoice"),yet.forEach(t),yAo=r(wye," (Longformer model)"),wye.forEach(t),wAo=i(O),u5=n(O,"LI",{});var Aye=s(u5);Dne=n(Aye,"STRONG",{});var wet=s(Dne);AAo=r(wet,"megatron-bert"),wet.forEach(t),LAo=r(Aye," \u2014 "),cD=n(Aye,"A",{href:!0});var Aet=s(cD);BAo=r(Aet,"MegatronBertForMultipleChoice"),Aet.forEach(t),xAo=r(Aye," (MegatronBert model)"),Aye.forEach(t),kAo=i(O),b5=n(O,"LI",{});var Lye=s(b5);Nne=n(Lye,"STRONG",{});var Let=s(Nne);RAo=r(Let,"mobilebert"),Let.forEach(t),SAo=r(Lye," \u2014 "),fD=n(Lye,"A",{href:!0});var Bet=s(fD);PAo=r(Bet,"MobileBertForMultipleChoice"),Bet.forEach(t),$Ao=r(Lye," (MobileBERT model)"),Lye.forEach(t),IAo=i(O),v5=n(O,"LI",{});var Bye=s(v5);qne=n(Bye,"STRONG",{});var xet=s(qne);jAo=r(xet,"mpnet"),xet.forEach(t),DAo=r(Bye," \u2014 "),mD=n(Bye,"A",{href:!0});var ket=s(mD);NAo=r(ket,"MPNetForMultipleChoice"),ket.forEach(t),qAo=r(Bye," (MPNet model)"),Bye.forEach(t),GAo=i(O),T5=n(O,"LI",{});var xye=s(T5);Gne=n(xye,"STRONG",{});var Ret=s(Gne);OAo=r(Ret,"nystromformer"),Ret.forEach(t),XAo=r(xye," \u2014 "),gD=n(xye,"A",{href:!0});var Set=s(gD);VAo=r(Set,"NystromformerForMultipleChoice"),Set.forEach(t),zAo=r(xye," (Nystromformer model)"),xye.forEach(t),WAo=i(O),F5=n(O,"LI",{});var kye=s(F5);One=n(kye,"STRONG",{});var Pet=s(One);QAo=r(Pet,"qdqbert"),Pet.forEach(t),HAo=r(kye," \u2014 "),hD=n(kye,"A",{href:!0});var $et=s(hD);UAo=r($et,"QDQBertForMultipleChoice"),$et.forEach(t),JAo=r(kye," (QDQBert model)"),kye.forEach(t),YAo=i(O),C5=n(O,"LI",{});var Rye=s(C5);Xne=n(Rye,"STRONG",{});var Iet=s(Xne);KAo=r(Iet,"rembert"),Iet.forEach(t),ZAo=r(Rye," \u2014 "),pD=n(Rye,"A",{href:!0});var jet=s(pD);eLo=r(jet,"RemBertForMultipleChoice"),jet.forEach(t),oLo=r(Rye," (RemBERT model)"),Rye.forEach(t),rLo=i(O),M5=n(O,"LI",{});var Sye=s(M5);Vne=n(Sye,"STRONG",{});var Det=s(Vne);tLo=r(Det,"roberta"),Det.forEach(t),aLo=r(Sye," \u2014 "),_D=n(Sye,"A",{href:!0});var Net=s(_D);nLo=r(Net,"RobertaForMultipleChoice"),Net.forEach(t),sLo=r(Sye," (RoBERTa model)"),Sye.forEach(t),lLo=i(O),E5=n(O,"LI",{});var Pye=s(E5);zne=n(Pye,"STRONG",{});var qet=s(zne);iLo=r(qet,"roformer"),qet.forEach(t),dLo=r(Pye," \u2014 "),uD=n(Pye,"A",{href:!0});var Get=s(uD);cLo=r(Get,"RoFormerForMultipleChoice"),Get.forEach(t),fLo=r(Pye," (RoFormer model)"),Pye.forEach(t),mLo=i(O),y5=n(O,"LI",{});var $ye=s(y5);Wne=n($ye,"STRONG",{});var Oet=s(Wne);gLo=r(Oet,"squeezebert"),Oet.forEach(t),hLo=r($ye," \u2014 "),bD=n($ye,"A",{href:!0});var Xet=s(bD);pLo=r(Xet,"SqueezeBertForMultipleChoice"),Xet.forEach(t),_Lo=r($ye," (SqueezeBERT model)"),$ye.forEach(t),uLo=i(O),w5=n(O,"LI",{});var Iye=s(w5);Qne=n(Iye,"STRONG",{});var Vet=s(Qne);bLo=r(Vet,"xlm"),Vet.forEach(t),vLo=r(Iye," \u2014 "),vD=n(Iye,"A",{href:!0});var zet=s(vD);TLo=r(zet,"XLMForMultipleChoice"),zet.forEach(t),FLo=r(Iye," (XLM model)"),Iye.forEach(t),CLo=i(O),A5=n(O,"LI",{});var jye=s(A5);Hne=n(jye,"STRONG",{});var Wet=s(Hne);MLo=r(Wet,"xlm-roberta"),Wet.forEach(t),ELo=r(jye," \u2014 "),TD=n(jye,"A",{href:!0});var Qet=s(TD);yLo=r(Qet,"XLMRobertaForMultipleChoice"),Qet.forEach(t),wLo=r(jye," (XLM-RoBERTa model)"),jye.forEach(t),ALo=i(O),L5=n(O,"LI",{});var Dye=s(L5);Une=n(Dye,"STRONG",{});var Het=s(Une);LLo=r(Het,"xlm-roberta-xl"),Het.forEach(t),BLo=r(Dye," \u2014 "),FD=n(Dye,"A",{href:!0});var Uet=s(FD);xLo=r(Uet,"XLMRobertaXLForMultipleChoice"),Uet.forEach(t),kLo=r(Dye," (XLM-RoBERTa-XL model)"),Dye.forEach(t),RLo=i(O),B5=n(O,"LI",{});var Nye=s(B5);Jne=n(Nye,"STRONG",{});var Jet=s(Jne);SLo=r(Jet,"xlnet"),Jet.forEach(t),PLo=r(Nye," \u2014 "),CD=n(Nye,"A",{href:!0});var Yet=s(CD);$Lo=r(Yet,"XLNetForMultipleChoice"),Yet.forEach(t),ILo=r(Nye," (XLNet model)"),Nye.forEach(t),jLo=i(O),x5=n(O,"LI",{});var qye=s(x5);Yne=n(qye,"STRONG",{});var Ket=s(Yne);DLo=r(Ket,"yoso"),Ket.forEach(t),NLo=r(qye," \u2014 "),MD=n(qye,"A",{href:!0});var Zet=s(MD);qLo=r(Zet,"YosoForMultipleChoice"),Zet.forEach(t),GLo=r(qye," (YOSO model)"),qye.forEach(t),O.forEach(t),OLo=i(Ut),k5=n(Ut,"P",{});var Gye=s(k5);XLo=r(Gye,"The model is set in evaluation mode by default using "),Kne=n(Gye,"CODE",{});var eot=s(Kne);VLo=r(eot,"model.eval()"),eot.forEach(t),zLo=r(Gye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zne=n(Gye,"CODE",{});var oot=s(Zne);WLo=r(oot,"model.train()"),oot.forEach(t),Gye.forEach(t),QLo=i(Ut),ese=n(Ut,"P",{});var rot=s(ese);HLo=r(rot,"Examples:"),rot.forEach(t),ULo=i(Ut),m(WE.$$.fragment,Ut),Ut.forEach(t),dl.forEach(t),gRe=i(d),Ed=n(d,"H2",{class:!0});var EPe=s(Ed);R5=n(EPe,"A",{id:!0,class:!0,href:!0});var tot=s(R5);ose=n(tot,"SPAN",{});var aot=s(ose);m(QE.$$.fragment,aot),aot.forEach(t),tot.forEach(t),JLo=i(EPe),rse=n(EPe,"SPAN",{});var not=s(rse);YLo=r(not,"AutoModelForNextSentencePrediction"),not.forEach(t),EPe.forEach(t),hRe=i(d),ar=n(d,"DIV",{class:!0});var fl=s(ar);m(HE.$$.fragment,fl),KLo=i(fl),yd=n(fl,"P",{});var xW=s(yd);ZLo=r(xW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tse=n(xW,"CODE",{});var sot=s(tse);e7o=r(sot,"from_pretrained()"),sot.forEach(t),o7o=r(xW,"class method or the "),ase=n(xW,"CODE",{});var lot=s(ase);r7o=r(lot,"from_config()"),lot.forEach(t),t7o=r(xW,`class
method.`),xW.forEach(t),a7o=i(fl),UE=n(fl,"P",{});var yPe=s(UE);n7o=r(yPe,"This class cannot be instantiated directly using "),nse=n(yPe,"CODE",{});var iot=s(nse);s7o=r(iot,"__init__()"),iot.forEach(t),l7o=r(yPe," (throws an error)."),yPe.forEach(t),i7o=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(JE.$$.fragment,ml),d7o=i(ml),sse=n(ml,"P",{});var dot=s(sse);c7o=r(dot,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dot.forEach(t),f7o=i(ml),wd=n(ml,"P",{});var kW=s(wd);m7o=r(kW,`Note:
Loading a model from its configuration file does `),lse=n(kW,"STRONG",{});var cot=s(lse);g7o=r(cot,"not"),cot.forEach(t),h7o=r(kW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ise=n(kW,"CODE",{});var fot=s(ise);p7o=r(fot,"from_pretrained()"),fot.forEach(t),_7o=r(kW,"to load the model weights."),kW.forEach(t),u7o=i(ml),dse=n(ml,"P",{});var mot=s(dse);b7o=r(mot,"Examples:"),mot.forEach(t),v7o=i(ml),m(YE.$$.fragment,ml),ml.forEach(t),T7o=i(fl),Ve=n(fl,"DIV",{class:!0});var Jt=s(Ve);m(KE.$$.fragment,Jt),F7o=i(Jt),cse=n(Jt,"P",{});var got=s(cse);C7o=r(got,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),got.forEach(t),M7o=i(Jt),on=n(Jt,"P",{});var LM=s(on);E7o=r(LM,"The model class to instantiate is selected based on the "),fse=n(LM,"CODE",{});var hot=s(fse);y7o=r(hot,"model_type"),hot.forEach(t),w7o=r(LM,` property of the config object (either
passed as an argument or loaded from `),mse=n(LM,"CODE",{});var pot=s(mse);A7o=r(pot,"pretrained_model_name_or_path"),pot.forEach(t),L7o=r(LM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gse=n(LM,"CODE",{});var _ot=s(gse);B7o=r(_ot,"pretrained_model_name_or_path"),_ot.forEach(t),x7o=r(LM,":"),LM.forEach(t),k7o=i(Jt),ma=n(Jt,"UL",{});var gl=s(ma);S5=n(gl,"LI",{});var Oye=s(S5);hse=n(Oye,"STRONG",{});var uot=s(hse);R7o=r(uot,"bert"),uot.forEach(t),S7o=r(Oye," \u2014 "),ED=n(Oye,"A",{href:!0});var bot=s(ED);P7o=r(bot,"BertForNextSentencePrediction"),bot.forEach(t),$7o=r(Oye," (BERT model)"),Oye.forEach(t),I7o=i(gl),P5=n(gl,"LI",{});var Xye=s(P5);pse=n(Xye,"STRONG",{});var vot=s(pse);j7o=r(vot,"fnet"),vot.forEach(t),D7o=r(Xye," \u2014 "),yD=n(Xye,"A",{href:!0});var Tot=s(yD);N7o=r(Tot,"FNetForNextSentencePrediction"),Tot.forEach(t),q7o=r(Xye," (FNet model)"),Xye.forEach(t),G7o=i(gl),$5=n(gl,"LI",{});var Vye=s($5);_se=n(Vye,"STRONG",{});var Fot=s(_se);O7o=r(Fot,"megatron-bert"),Fot.forEach(t),X7o=r(Vye," \u2014 "),wD=n(Vye,"A",{href:!0});var Cot=s(wD);V7o=r(Cot,"MegatronBertForNextSentencePrediction"),Cot.forEach(t),z7o=r(Vye," (MegatronBert model)"),Vye.forEach(t),W7o=i(gl),I5=n(gl,"LI",{});var zye=s(I5);use=n(zye,"STRONG",{});var Mot=s(use);Q7o=r(Mot,"mobilebert"),Mot.forEach(t),H7o=r(zye," \u2014 "),AD=n(zye,"A",{href:!0});var Eot=s(AD);U7o=r(Eot,"MobileBertForNextSentencePrediction"),Eot.forEach(t),J7o=r(zye," (MobileBERT model)"),zye.forEach(t),Y7o=i(gl),j5=n(gl,"LI",{});var Wye=s(j5);bse=n(Wye,"STRONG",{});var yot=s(bse);K7o=r(yot,"qdqbert"),yot.forEach(t),Z7o=r(Wye," \u2014 "),LD=n(Wye,"A",{href:!0});var wot=s(LD);e9o=r(wot,"QDQBertForNextSentencePrediction"),wot.forEach(t),o9o=r(Wye," (QDQBert model)"),Wye.forEach(t),gl.forEach(t),r9o=i(Jt),D5=n(Jt,"P",{});var Qye=s(D5);t9o=r(Qye,"The model is set in evaluation mode by default using "),vse=n(Qye,"CODE",{});var Aot=s(vse);a9o=r(Aot,"model.eval()"),Aot.forEach(t),n9o=r(Qye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tse=n(Qye,"CODE",{});var Lot=s(Tse);s9o=r(Lot,"model.train()"),Lot.forEach(t),Qye.forEach(t),l9o=i(Jt),Fse=n(Jt,"P",{});var Bot=s(Fse);i9o=r(Bot,"Examples:"),Bot.forEach(t),d9o=i(Jt),m(ZE.$$.fragment,Jt),Jt.forEach(t),fl.forEach(t),pRe=i(d),Ad=n(d,"H2",{class:!0});var wPe=s(Ad);N5=n(wPe,"A",{id:!0,class:!0,href:!0});var xot=s(N5);Cse=n(xot,"SPAN",{});var kot=s(Cse);m(e3.$$.fragment,kot),kot.forEach(t),xot.forEach(t),c9o=i(wPe),Mse=n(wPe,"SPAN",{});var Rot=s(Mse);f9o=r(Rot,"AutoModelForTokenClassification"),Rot.forEach(t),wPe.forEach(t),_Re=i(d),nr=n(d,"DIV",{class:!0});var hl=s(nr);m(o3.$$.fragment,hl),m9o=i(hl),Ld=n(hl,"P",{});var RW=s(Ld);g9o=r(RW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Ese=n(RW,"CODE",{});var Sot=s(Ese);h9o=r(Sot,"from_pretrained()"),Sot.forEach(t),p9o=r(RW,"class method or the "),yse=n(RW,"CODE",{});var Pot=s(yse);_9o=r(Pot,"from_config()"),Pot.forEach(t),u9o=r(RW,`class
method.`),RW.forEach(t),b9o=i(hl),r3=n(hl,"P",{});var APe=s(r3);v9o=r(APe,"This class cannot be instantiated directly using "),wse=n(APe,"CODE",{});var $ot=s(wse);T9o=r($ot,"__init__()"),$ot.forEach(t),F9o=r(APe," (throws an error)."),APe.forEach(t),C9o=i(hl),et=n(hl,"DIV",{class:!0});var pl=s(et);m(t3.$$.fragment,pl),M9o=i(pl),Ase=n(pl,"P",{});var Iot=s(Ase);E9o=r(Iot,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Iot.forEach(t),y9o=i(pl),Bd=n(pl,"P",{});var SW=s(Bd);w9o=r(SW,`Note:
Loading a model from its configuration file does `),Lse=n(SW,"STRONG",{});var jot=s(Lse);A9o=r(jot,"not"),jot.forEach(t),L9o=r(SW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bse=n(SW,"CODE",{});var Dot=s(Bse);B9o=r(Dot,"from_pretrained()"),Dot.forEach(t),x9o=r(SW,"to load the model weights."),SW.forEach(t),k9o=i(pl),xse=n(pl,"P",{});var Not=s(xse);R9o=r(Not,"Examples:"),Not.forEach(t),S9o=i(pl),m(a3.$$.fragment,pl),pl.forEach(t),P9o=i(hl),ze=n(hl,"DIV",{class:!0});var Yt=s(ze);m(n3.$$.fragment,Yt),$9o=i(Yt),kse=n(Yt,"P",{});var qot=s(kse);I9o=r(qot,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qot.forEach(t),j9o=i(Yt),rn=n(Yt,"P",{});var BM=s(rn);D9o=r(BM,"The model class to instantiate is selected based on the "),Rse=n(BM,"CODE",{});var Got=s(Rse);N9o=r(Got,"model_type"),Got.forEach(t),q9o=r(BM,` property of the config object (either
passed as an argument or loaded from `),Sse=n(BM,"CODE",{});var Oot=s(Sse);G9o=r(Oot,"pretrained_model_name_or_path"),Oot.forEach(t),O9o=r(BM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pse=n(BM,"CODE",{});var Xot=s(Pse);X9o=r(Xot,"pretrained_model_name_or_path"),Xot.forEach(t),V9o=r(BM,":"),BM.forEach(t),z9o=i(Yt),N=n(Yt,"UL",{});var q=s(N);q5=n(q,"LI",{});var Hye=s(q5);$se=n(Hye,"STRONG",{});var Vot=s($se);W9o=r(Vot,"albert"),Vot.forEach(t),Q9o=r(Hye," \u2014 "),BD=n(Hye,"A",{href:!0});var zot=s(BD);H9o=r(zot,"AlbertForTokenClassification"),zot.forEach(t),U9o=r(Hye," (ALBERT model)"),Hye.forEach(t),J9o=i(q),G5=n(q,"LI",{});var Uye=s(G5);Ise=n(Uye,"STRONG",{});var Wot=s(Ise);Y9o=r(Wot,"bert"),Wot.forEach(t),K9o=r(Uye," \u2014 "),xD=n(Uye,"A",{href:!0});var Qot=s(xD);Z9o=r(Qot,"BertForTokenClassification"),Qot.forEach(t),eBo=r(Uye," (BERT model)"),Uye.forEach(t),oBo=i(q),O5=n(q,"LI",{});var Jye=s(O5);jse=n(Jye,"STRONG",{});var Hot=s(jse);rBo=r(Hot,"big_bird"),Hot.forEach(t),tBo=r(Jye," \u2014 "),kD=n(Jye,"A",{href:!0});var Uot=s(kD);aBo=r(Uot,"BigBirdForTokenClassification"),Uot.forEach(t),nBo=r(Jye," (BigBird model)"),Jye.forEach(t),sBo=i(q),X5=n(q,"LI",{});var Yye=s(X5);Dse=n(Yye,"STRONG",{});var Jot=s(Dse);lBo=r(Jot,"camembert"),Jot.forEach(t),iBo=r(Yye," \u2014 "),RD=n(Yye,"A",{href:!0});var Yot=s(RD);dBo=r(Yot,"CamembertForTokenClassification"),Yot.forEach(t),cBo=r(Yye," (CamemBERT model)"),Yye.forEach(t),fBo=i(q),V5=n(q,"LI",{});var Kye=s(V5);Nse=n(Kye,"STRONG",{});var Kot=s(Nse);mBo=r(Kot,"canine"),Kot.forEach(t),gBo=r(Kye," \u2014 "),SD=n(Kye,"A",{href:!0});var Zot=s(SD);hBo=r(Zot,"CanineForTokenClassification"),Zot.forEach(t),pBo=r(Kye," (Canine model)"),Kye.forEach(t),_Bo=i(q),z5=n(q,"LI",{});var Zye=s(z5);qse=n(Zye,"STRONG",{});var ert=s(qse);uBo=r(ert,"convbert"),ert.forEach(t),bBo=r(Zye," \u2014 "),PD=n(Zye,"A",{href:!0});var ort=s(PD);vBo=r(ort,"ConvBertForTokenClassification"),ort.forEach(t),TBo=r(Zye," (ConvBERT model)"),Zye.forEach(t),FBo=i(q),W5=n(q,"LI",{});var ewe=s(W5);Gse=n(ewe,"STRONG",{});var rrt=s(Gse);CBo=r(rrt,"data2vec-text"),rrt.forEach(t),MBo=r(ewe," \u2014 "),$D=n(ewe,"A",{href:!0});var trt=s($D);EBo=r(trt,"Data2VecTextForTokenClassification"),trt.forEach(t),yBo=r(ewe," (Data2VecText model)"),ewe.forEach(t),wBo=i(q),Q5=n(q,"LI",{});var owe=s(Q5);Ose=n(owe,"STRONG",{});var art=s(Ose);ABo=r(art,"deberta"),art.forEach(t),LBo=r(owe," \u2014 "),ID=n(owe,"A",{href:!0});var nrt=s(ID);BBo=r(nrt,"DebertaForTokenClassification"),nrt.forEach(t),xBo=r(owe," (DeBERTa model)"),owe.forEach(t),kBo=i(q),H5=n(q,"LI",{});var rwe=s(H5);Xse=n(rwe,"STRONG",{});var srt=s(Xse);RBo=r(srt,"deberta-v2"),srt.forEach(t),SBo=r(rwe," \u2014 "),jD=n(rwe,"A",{href:!0});var lrt=s(jD);PBo=r(lrt,"DebertaV2ForTokenClassification"),lrt.forEach(t),$Bo=r(rwe," (DeBERTa-v2 model)"),rwe.forEach(t),IBo=i(q),U5=n(q,"LI",{});var twe=s(U5);Vse=n(twe,"STRONG",{});var irt=s(Vse);jBo=r(irt,"distilbert"),irt.forEach(t),DBo=r(twe," \u2014 "),DD=n(twe,"A",{href:!0});var drt=s(DD);NBo=r(drt,"DistilBertForTokenClassification"),drt.forEach(t),qBo=r(twe," (DistilBERT model)"),twe.forEach(t),GBo=i(q),J5=n(q,"LI",{});var awe=s(J5);zse=n(awe,"STRONG",{});var crt=s(zse);OBo=r(crt,"electra"),crt.forEach(t),XBo=r(awe," \u2014 "),ND=n(awe,"A",{href:!0});var frt=s(ND);VBo=r(frt,"ElectraForTokenClassification"),frt.forEach(t),zBo=r(awe," (ELECTRA model)"),awe.forEach(t),WBo=i(q),Y5=n(q,"LI",{});var nwe=s(Y5);Wse=n(nwe,"STRONG",{});var mrt=s(Wse);QBo=r(mrt,"flaubert"),mrt.forEach(t),HBo=r(nwe," \u2014 "),qD=n(nwe,"A",{href:!0});var grt=s(qD);UBo=r(grt,"FlaubertForTokenClassification"),grt.forEach(t),JBo=r(nwe," (FlauBERT model)"),nwe.forEach(t),YBo=i(q),K5=n(q,"LI",{});var swe=s(K5);Qse=n(swe,"STRONG",{});var hrt=s(Qse);KBo=r(hrt,"fnet"),hrt.forEach(t),ZBo=r(swe," \u2014 "),GD=n(swe,"A",{href:!0});var prt=s(GD);exo=r(prt,"FNetForTokenClassification"),prt.forEach(t),oxo=r(swe," (FNet model)"),swe.forEach(t),rxo=i(q),Z5=n(q,"LI",{});var lwe=s(Z5);Hse=n(lwe,"STRONG",{});var _rt=s(Hse);txo=r(_rt,"funnel"),_rt.forEach(t),axo=r(lwe," \u2014 "),OD=n(lwe,"A",{href:!0});var urt=s(OD);nxo=r(urt,"FunnelForTokenClassification"),urt.forEach(t),sxo=r(lwe," (Funnel Transformer model)"),lwe.forEach(t),lxo=i(q),e2=n(q,"LI",{});var iwe=s(e2);Use=n(iwe,"STRONG",{});var brt=s(Use);ixo=r(brt,"gpt2"),brt.forEach(t),dxo=r(iwe," \u2014 "),XD=n(iwe,"A",{href:!0});var vrt=s(XD);cxo=r(vrt,"GPT2ForTokenClassification"),vrt.forEach(t),fxo=r(iwe," (OpenAI GPT-2 model)"),iwe.forEach(t),mxo=i(q),o2=n(q,"LI",{});var dwe=s(o2);Jse=n(dwe,"STRONG",{});var Trt=s(Jse);gxo=r(Trt,"ibert"),Trt.forEach(t),hxo=r(dwe," \u2014 "),VD=n(dwe,"A",{href:!0});var Frt=s(VD);pxo=r(Frt,"IBertForTokenClassification"),Frt.forEach(t),_xo=r(dwe," (I-BERT model)"),dwe.forEach(t),uxo=i(q),r2=n(q,"LI",{});var cwe=s(r2);Yse=n(cwe,"STRONG",{});var Crt=s(Yse);bxo=r(Crt,"layoutlm"),Crt.forEach(t),vxo=r(cwe," \u2014 "),zD=n(cwe,"A",{href:!0});var Mrt=s(zD);Txo=r(Mrt,"LayoutLMForTokenClassification"),Mrt.forEach(t),Fxo=r(cwe," (LayoutLM model)"),cwe.forEach(t),Cxo=i(q),t2=n(q,"LI",{});var fwe=s(t2);Kse=n(fwe,"STRONG",{});var Ert=s(Kse);Mxo=r(Ert,"layoutlmv2"),Ert.forEach(t),Exo=r(fwe," \u2014 "),WD=n(fwe,"A",{href:!0});var yrt=s(WD);yxo=r(yrt,"LayoutLMv2ForTokenClassification"),yrt.forEach(t),wxo=r(fwe," (LayoutLMv2 model)"),fwe.forEach(t),Axo=i(q),a2=n(q,"LI",{});var mwe=s(a2);Zse=n(mwe,"STRONG",{});var wrt=s(Zse);Lxo=r(wrt,"longformer"),wrt.forEach(t),Bxo=r(mwe," \u2014 "),QD=n(mwe,"A",{href:!0});var Art=s(QD);xxo=r(Art,"LongformerForTokenClassification"),Art.forEach(t),kxo=r(mwe," (Longformer model)"),mwe.forEach(t),Rxo=i(q),n2=n(q,"LI",{});var gwe=s(n2);ele=n(gwe,"STRONG",{});var Lrt=s(ele);Sxo=r(Lrt,"megatron-bert"),Lrt.forEach(t),Pxo=r(gwe," \u2014 "),HD=n(gwe,"A",{href:!0});var Brt=s(HD);$xo=r(Brt,"MegatronBertForTokenClassification"),Brt.forEach(t),Ixo=r(gwe," (MegatronBert model)"),gwe.forEach(t),jxo=i(q),s2=n(q,"LI",{});var hwe=s(s2);ole=n(hwe,"STRONG",{});var xrt=s(ole);Dxo=r(xrt,"mobilebert"),xrt.forEach(t),Nxo=r(hwe," \u2014 "),UD=n(hwe,"A",{href:!0});var krt=s(UD);qxo=r(krt,"MobileBertForTokenClassification"),krt.forEach(t),Gxo=r(hwe," (MobileBERT model)"),hwe.forEach(t),Oxo=i(q),l2=n(q,"LI",{});var pwe=s(l2);rle=n(pwe,"STRONG",{});var Rrt=s(rle);Xxo=r(Rrt,"mpnet"),Rrt.forEach(t),Vxo=r(pwe," \u2014 "),JD=n(pwe,"A",{href:!0});var Srt=s(JD);zxo=r(Srt,"MPNetForTokenClassification"),Srt.forEach(t),Wxo=r(pwe," (MPNet model)"),pwe.forEach(t),Qxo=i(q),i2=n(q,"LI",{});var _we=s(i2);tle=n(_we,"STRONG",{});var Prt=s(tle);Hxo=r(Prt,"nystromformer"),Prt.forEach(t),Uxo=r(_we," \u2014 "),YD=n(_we,"A",{href:!0});var $rt=s(YD);Jxo=r($rt,"NystromformerForTokenClassification"),$rt.forEach(t),Yxo=r(_we," (Nystromformer model)"),_we.forEach(t),Kxo=i(q),d2=n(q,"LI",{});var uwe=s(d2);ale=n(uwe,"STRONG",{});var Irt=s(ale);Zxo=r(Irt,"qdqbert"),Irt.forEach(t),eko=r(uwe," \u2014 "),KD=n(uwe,"A",{href:!0});var jrt=s(KD);oko=r(jrt,"QDQBertForTokenClassification"),jrt.forEach(t),rko=r(uwe," (QDQBert model)"),uwe.forEach(t),tko=i(q),c2=n(q,"LI",{});var bwe=s(c2);nle=n(bwe,"STRONG",{});var Drt=s(nle);ako=r(Drt,"rembert"),Drt.forEach(t),nko=r(bwe," \u2014 "),ZD=n(bwe,"A",{href:!0});var Nrt=s(ZD);sko=r(Nrt,"RemBertForTokenClassification"),Nrt.forEach(t),lko=r(bwe," (RemBERT model)"),bwe.forEach(t),iko=i(q),f2=n(q,"LI",{});var vwe=s(f2);sle=n(vwe,"STRONG",{});var qrt=s(sle);dko=r(qrt,"roberta"),qrt.forEach(t),cko=r(vwe," \u2014 "),eN=n(vwe,"A",{href:!0});var Grt=s(eN);fko=r(Grt,"RobertaForTokenClassification"),Grt.forEach(t),mko=r(vwe," (RoBERTa model)"),vwe.forEach(t),gko=i(q),m2=n(q,"LI",{});var Twe=s(m2);lle=n(Twe,"STRONG",{});var Ort=s(lle);hko=r(Ort,"roformer"),Ort.forEach(t),pko=r(Twe," \u2014 "),oN=n(Twe,"A",{href:!0});var Xrt=s(oN);_ko=r(Xrt,"RoFormerForTokenClassification"),Xrt.forEach(t),uko=r(Twe," (RoFormer model)"),Twe.forEach(t),bko=i(q),g2=n(q,"LI",{});var Fwe=s(g2);ile=n(Fwe,"STRONG",{});var Vrt=s(ile);vko=r(Vrt,"squeezebert"),Vrt.forEach(t),Tko=r(Fwe," \u2014 "),rN=n(Fwe,"A",{href:!0});var zrt=s(rN);Fko=r(zrt,"SqueezeBertForTokenClassification"),zrt.forEach(t),Cko=r(Fwe," (SqueezeBERT model)"),Fwe.forEach(t),Mko=i(q),h2=n(q,"LI",{});var Cwe=s(h2);dle=n(Cwe,"STRONG",{});var Wrt=s(dle);Eko=r(Wrt,"xlm"),Wrt.forEach(t),yko=r(Cwe," \u2014 "),tN=n(Cwe,"A",{href:!0});var Qrt=s(tN);wko=r(Qrt,"XLMForTokenClassification"),Qrt.forEach(t),Ako=r(Cwe," (XLM model)"),Cwe.forEach(t),Lko=i(q),p2=n(q,"LI",{});var Mwe=s(p2);cle=n(Mwe,"STRONG",{});var Hrt=s(cle);Bko=r(Hrt,"xlm-roberta"),Hrt.forEach(t),xko=r(Mwe," \u2014 "),aN=n(Mwe,"A",{href:!0});var Urt=s(aN);kko=r(Urt,"XLMRobertaForTokenClassification"),Urt.forEach(t),Rko=r(Mwe," (XLM-RoBERTa model)"),Mwe.forEach(t),Sko=i(q),_2=n(q,"LI",{});var Ewe=s(_2);fle=n(Ewe,"STRONG",{});var Jrt=s(fle);Pko=r(Jrt,"xlm-roberta-xl"),Jrt.forEach(t),$ko=r(Ewe," \u2014 "),nN=n(Ewe,"A",{href:!0});var Yrt=s(nN);Iko=r(Yrt,"XLMRobertaXLForTokenClassification"),Yrt.forEach(t),jko=r(Ewe," (XLM-RoBERTa-XL model)"),Ewe.forEach(t),Dko=i(q),u2=n(q,"LI",{});var ywe=s(u2);mle=n(ywe,"STRONG",{});var Krt=s(mle);Nko=r(Krt,"xlnet"),Krt.forEach(t),qko=r(ywe," \u2014 "),sN=n(ywe,"A",{href:!0});var Zrt=s(sN);Gko=r(Zrt,"XLNetForTokenClassification"),Zrt.forEach(t),Oko=r(ywe," (XLNet model)"),ywe.forEach(t),Xko=i(q),b2=n(q,"LI",{});var wwe=s(b2);gle=n(wwe,"STRONG",{});var ett=s(gle);Vko=r(ett,"yoso"),ett.forEach(t),zko=r(wwe," \u2014 "),lN=n(wwe,"A",{href:!0});var ott=s(lN);Wko=r(ott,"YosoForTokenClassification"),ott.forEach(t),Qko=r(wwe," (YOSO model)"),wwe.forEach(t),q.forEach(t),Hko=i(Yt),v2=n(Yt,"P",{});var Awe=s(v2);Uko=r(Awe,"The model is set in evaluation mode by default using "),hle=n(Awe,"CODE",{});var rtt=s(hle);Jko=r(rtt,"model.eval()"),rtt.forEach(t),Yko=r(Awe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ple=n(Awe,"CODE",{});var ttt=s(ple);Kko=r(ttt,"model.train()"),ttt.forEach(t),Awe.forEach(t),Zko=i(Yt),_le=n(Yt,"P",{});var att=s(_le);eRo=r(att,"Examples:"),att.forEach(t),oRo=i(Yt),m(s3.$$.fragment,Yt),Yt.forEach(t),hl.forEach(t),uRe=i(d),xd=n(d,"H2",{class:!0});var LPe=s(xd);T2=n(LPe,"A",{id:!0,class:!0,href:!0});var ntt=s(T2);ule=n(ntt,"SPAN",{});var stt=s(ule);m(l3.$$.fragment,stt),stt.forEach(t),ntt.forEach(t),rRo=i(LPe),ble=n(LPe,"SPAN",{});var ltt=s(ble);tRo=r(ltt,"AutoModelForQuestionAnswering"),ltt.forEach(t),LPe.forEach(t),bRe=i(d),sr=n(d,"DIV",{class:!0});var _l=s(sr);m(i3.$$.fragment,_l),aRo=i(_l),kd=n(_l,"P",{});var PW=s(kd);nRo=r(PW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vle=n(PW,"CODE",{});var itt=s(vle);sRo=r(itt,"from_pretrained()"),itt.forEach(t),lRo=r(PW,"class method or the "),Tle=n(PW,"CODE",{});var dtt=s(Tle);iRo=r(dtt,"from_config()"),dtt.forEach(t),dRo=r(PW,`class
method.`),PW.forEach(t),cRo=i(_l),d3=n(_l,"P",{});var BPe=s(d3);fRo=r(BPe,"This class cannot be instantiated directly using "),Fle=n(BPe,"CODE",{});var ctt=s(Fle);mRo=r(ctt,"__init__()"),ctt.forEach(t),gRo=r(BPe," (throws an error)."),BPe.forEach(t),hRo=i(_l),ot=n(_l,"DIV",{class:!0});var ul=s(ot);m(c3.$$.fragment,ul),pRo=i(ul),Cle=n(ul,"P",{});var ftt=s(Cle);_Ro=r(ftt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ftt.forEach(t),uRo=i(ul),Rd=n(ul,"P",{});var $W=s(Rd);bRo=r($W,`Note:
Loading a model from its configuration file does `),Mle=n($W,"STRONG",{});var mtt=s(Mle);vRo=r(mtt,"not"),mtt.forEach(t),TRo=r($W,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ele=n($W,"CODE",{});var gtt=s(Ele);FRo=r(gtt,"from_pretrained()"),gtt.forEach(t),CRo=r($W,"to load the model weights."),$W.forEach(t),MRo=i(ul),yle=n(ul,"P",{});var htt=s(yle);ERo=r(htt,"Examples:"),htt.forEach(t),yRo=i(ul),m(f3.$$.fragment,ul),ul.forEach(t),wRo=i(_l),We=n(_l,"DIV",{class:!0});var Kt=s(We);m(m3.$$.fragment,Kt),ARo=i(Kt),wle=n(Kt,"P",{});var ptt=s(wle);LRo=r(ptt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ptt.forEach(t),BRo=i(Kt),tn=n(Kt,"P",{});var xM=s(tn);xRo=r(xM,"The model class to instantiate is selected based on the "),Ale=n(xM,"CODE",{});var _tt=s(Ale);kRo=r(_tt,"model_type"),_tt.forEach(t),RRo=r(xM,` property of the config object (either
passed as an argument or loaded from `),Lle=n(xM,"CODE",{});var utt=s(Lle);SRo=r(utt,"pretrained_model_name_or_path"),utt.forEach(t),PRo=r(xM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ble=n(xM,"CODE",{});var btt=s(Ble);$Ro=r(btt,"pretrained_model_name_or_path"),btt.forEach(t),IRo=r(xM,":"),xM.forEach(t),jRo=i(Kt),R=n(Kt,"UL",{});var P=s(R);F2=n(P,"LI",{});var Lwe=s(F2);xle=n(Lwe,"STRONG",{});var vtt=s(xle);DRo=r(vtt,"albert"),vtt.forEach(t),NRo=r(Lwe," \u2014 "),iN=n(Lwe,"A",{href:!0});var Ttt=s(iN);qRo=r(Ttt,"AlbertForQuestionAnswering"),Ttt.forEach(t),GRo=r(Lwe," (ALBERT model)"),Lwe.forEach(t),ORo=i(P),C2=n(P,"LI",{});var Bwe=s(C2);kle=n(Bwe,"STRONG",{});var Ftt=s(kle);XRo=r(Ftt,"bart"),Ftt.forEach(t),VRo=r(Bwe," \u2014 "),dN=n(Bwe,"A",{href:!0});var Ctt=s(dN);zRo=r(Ctt,"BartForQuestionAnswering"),Ctt.forEach(t),WRo=r(Bwe," (BART model)"),Bwe.forEach(t),QRo=i(P),M2=n(P,"LI",{});var xwe=s(M2);Rle=n(xwe,"STRONG",{});var Mtt=s(Rle);HRo=r(Mtt,"bert"),Mtt.forEach(t),URo=r(xwe," \u2014 "),cN=n(xwe,"A",{href:!0});var Ett=s(cN);JRo=r(Ett,"BertForQuestionAnswering"),Ett.forEach(t),YRo=r(xwe," (BERT model)"),xwe.forEach(t),KRo=i(P),E2=n(P,"LI",{});var kwe=s(E2);Sle=n(kwe,"STRONG",{});var ytt=s(Sle);ZRo=r(ytt,"big_bird"),ytt.forEach(t),eSo=r(kwe," \u2014 "),fN=n(kwe,"A",{href:!0});var wtt=s(fN);oSo=r(wtt,"BigBirdForQuestionAnswering"),wtt.forEach(t),rSo=r(kwe," (BigBird model)"),kwe.forEach(t),tSo=i(P),y2=n(P,"LI",{});var Rwe=s(y2);Ple=n(Rwe,"STRONG",{});var Att=s(Ple);aSo=r(Att,"bigbird_pegasus"),Att.forEach(t),nSo=r(Rwe," \u2014 "),mN=n(Rwe,"A",{href:!0});var Ltt=s(mN);sSo=r(Ltt,"BigBirdPegasusForQuestionAnswering"),Ltt.forEach(t),lSo=r(Rwe," (BigBirdPegasus model)"),Rwe.forEach(t),iSo=i(P),w2=n(P,"LI",{});var Swe=s(w2);$le=n(Swe,"STRONG",{});var Btt=s($le);dSo=r(Btt,"camembert"),Btt.forEach(t),cSo=r(Swe," \u2014 "),gN=n(Swe,"A",{href:!0});var xtt=s(gN);fSo=r(xtt,"CamembertForQuestionAnswering"),xtt.forEach(t),mSo=r(Swe," (CamemBERT model)"),Swe.forEach(t),gSo=i(P),A2=n(P,"LI",{});var Pwe=s(A2);Ile=n(Pwe,"STRONG",{});var ktt=s(Ile);hSo=r(ktt,"canine"),ktt.forEach(t),pSo=r(Pwe," \u2014 "),hN=n(Pwe,"A",{href:!0});var Rtt=s(hN);_So=r(Rtt,"CanineForQuestionAnswering"),Rtt.forEach(t),uSo=r(Pwe," (Canine model)"),Pwe.forEach(t),bSo=i(P),L2=n(P,"LI",{});var $we=s(L2);jle=n($we,"STRONG",{});var Stt=s(jle);vSo=r(Stt,"convbert"),Stt.forEach(t),TSo=r($we," \u2014 "),pN=n($we,"A",{href:!0});var Ptt=s(pN);FSo=r(Ptt,"ConvBertForQuestionAnswering"),Ptt.forEach(t),CSo=r($we," (ConvBERT model)"),$we.forEach(t),MSo=i(P),B2=n(P,"LI",{});var Iwe=s(B2);Dle=n(Iwe,"STRONG",{});var $tt=s(Dle);ESo=r($tt,"data2vec-text"),$tt.forEach(t),ySo=r(Iwe," \u2014 "),_N=n(Iwe,"A",{href:!0});var Itt=s(_N);wSo=r(Itt,"Data2VecTextForQuestionAnswering"),Itt.forEach(t),ASo=r(Iwe," (Data2VecText model)"),Iwe.forEach(t),LSo=i(P),x2=n(P,"LI",{});var jwe=s(x2);Nle=n(jwe,"STRONG",{});var jtt=s(Nle);BSo=r(jtt,"deberta"),jtt.forEach(t),xSo=r(jwe," \u2014 "),uN=n(jwe,"A",{href:!0});var Dtt=s(uN);kSo=r(Dtt,"DebertaForQuestionAnswering"),Dtt.forEach(t),RSo=r(jwe," (DeBERTa model)"),jwe.forEach(t),SSo=i(P),k2=n(P,"LI",{});var Dwe=s(k2);qle=n(Dwe,"STRONG",{});var Ntt=s(qle);PSo=r(Ntt,"deberta-v2"),Ntt.forEach(t),$So=r(Dwe," \u2014 "),bN=n(Dwe,"A",{href:!0});var qtt=s(bN);ISo=r(qtt,"DebertaV2ForQuestionAnswering"),qtt.forEach(t),jSo=r(Dwe," (DeBERTa-v2 model)"),Dwe.forEach(t),DSo=i(P),R2=n(P,"LI",{});var Nwe=s(R2);Gle=n(Nwe,"STRONG",{});var Gtt=s(Gle);NSo=r(Gtt,"distilbert"),Gtt.forEach(t),qSo=r(Nwe," \u2014 "),vN=n(Nwe,"A",{href:!0});var Ott=s(vN);GSo=r(Ott,"DistilBertForQuestionAnswering"),Ott.forEach(t),OSo=r(Nwe," (DistilBERT model)"),Nwe.forEach(t),XSo=i(P),S2=n(P,"LI",{});var qwe=s(S2);Ole=n(qwe,"STRONG",{});var Xtt=s(Ole);VSo=r(Xtt,"electra"),Xtt.forEach(t),zSo=r(qwe," \u2014 "),TN=n(qwe,"A",{href:!0});var Vtt=s(TN);WSo=r(Vtt,"ElectraForQuestionAnswering"),Vtt.forEach(t),QSo=r(qwe," (ELECTRA model)"),qwe.forEach(t),HSo=i(P),P2=n(P,"LI",{});var Gwe=s(P2);Xle=n(Gwe,"STRONG",{});var ztt=s(Xle);USo=r(ztt,"flaubert"),ztt.forEach(t),JSo=r(Gwe," \u2014 "),FN=n(Gwe,"A",{href:!0});var Wtt=s(FN);YSo=r(Wtt,"FlaubertForQuestionAnsweringSimple"),Wtt.forEach(t),KSo=r(Gwe," (FlauBERT model)"),Gwe.forEach(t),ZSo=i(P),$2=n(P,"LI",{});var Owe=s($2);Vle=n(Owe,"STRONG",{});var Qtt=s(Vle);ePo=r(Qtt,"fnet"),Qtt.forEach(t),oPo=r(Owe," \u2014 "),CN=n(Owe,"A",{href:!0});var Htt=s(CN);rPo=r(Htt,"FNetForQuestionAnswering"),Htt.forEach(t),tPo=r(Owe," (FNet model)"),Owe.forEach(t),aPo=i(P),I2=n(P,"LI",{});var Xwe=s(I2);zle=n(Xwe,"STRONG",{});var Utt=s(zle);nPo=r(Utt,"funnel"),Utt.forEach(t),sPo=r(Xwe," \u2014 "),MN=n(Xwe,"A",{href:!0});var Jtt=s(MN);lPo=r(Jtt,"FunnelForQuestionAnswering"),Jtt.forEach(t),iPo=r(Xwe," (Funnel Transformer model)"),Xwe.forEach(t),dPo=i(P),j2=n(P,"LI",{});var Vwe=s(j2);Wle=n(Vwe,"STRONG",{});var Ytt=s(Wle);cPo=r(Ytt,"gptj"),Ytt.forEach(t),fPo=r(Vwe," \u2014 "),EN=n(Vwe,"A",{href:!0});var Ktt=s(EN);mPo=r(Ktt,"GPTJForQuestionAnswering"),Ktt.forEach(t),gPo=r(Vwe," (GPT-J model)"),Vwe.forEach(t),hPo=i(P),D2=n(P,"LI",{});var zwe=s(D2);Qle=n(zwe,"STRONG",{});var Ztt=s(Qle);pPo=r(Ztt,"ibert"),Ztt.forEach(t),_Po=r(zwe," \u2014 "),yN=n(zwe,"A",{href:!0});var eat=s(yN);uPo=r(eat,"IBertForQuestionAnswering"),eat.forEach(t),bPo=r(zwe," (I-BERT model)"),zwe.forEach(t),vPo=i(P),N2=n(P,"LI",{});var Wwe=s(N2);Hle=n(Wwe,"STRONG",{});var oat=s(Hle);TPo=r(oat,"layoutlmv2"),oat.forEach(t),FPo=r(Wwe," \u2014 "),wN=n(Wwe,"A",{href:!0});var rat=s(wN);CPo=r(rat,"LayoutLMv2ForQuestionAnswering"),rat.forEach(t),MPo=r(Wwe," (LayoutLMv2 model)"),Wwe.forEach(t),EPo=i(P),q2=n(P,"LI",{});var Qwe=s(q2);Ule=n(Qwe,"STRONG",{});var tat=s(Ule);yPo=r(tat,"led"),tat.forEach(t),wPo=r(Qwe," \u2014 "),AN=n(Qwe,"A",{href:!0});var aat=s(AN);APo=r(aat,"LEDForQuestionAnswering"),aat.forEach(t),LPo=r(Qwe," (LED model)"),Qwe.forEach(t),BPo=i(P),G2=n(P,"LI",{});var Hwe=s(G2);Jle=n(Hwe,"STRONG",{});var nat=s(Jle);xPo=r(nat,"longformer"),nat.forEach(t),kPo=r(Hwe," \u2014 "),LN=n(Hwe,"A",{href:!0});var sat=s(LN);RPo=r(sat,"LongformerForQuestionAnswering"),sat.forEach(t),SPo=r(Hwe," (Longformer model)"),Hwe.forEach(t),PPo=i(P),O2=n(P,"LI",{});var Uwe=s(O2);Yle=n(Uwe,"STRONG",{});var lat=s(Yle);$Po=r(lat,"lxmert"),lat.forEach(t),IPo=r(Uwe," \u2014 "),BN=n(Uwe,"A",{href:!0});var iat=s(BN);jPo=r(iat,"LxmertForQuestionAnswering"),iat.forEach(t),DPo=r(Uwe," (LXMERT model)"),Uwe.forEach(t),NPo=i(P),X2=n(P,"LI",{});var Jwe=s(X2);Kle=n(Jwe,"STRONG",{});var dat=s(Kle);qPo=r(dat,"mbart"),dat.forEach(t),GPo=r(Jwe," \u2014 "),xN=n(Jwe,"A",{href:!0});var cat=s(xN);OPo=r(cat,"MBartForQuestionAnswering"),cat.forEach(t),XPo=r(Jwe," (mBART model)"),Jwe.forEach(t),VPo=i(P),V2=n(P,"LI",{});var Ywe=s(V2);Zle=n(Ywe,"STRONG",{});var fat=s(Zle);zPo=r(fat,"megatron-bert"),fat.forEach(t),WPo=r(Ywe," \u2014 "),kN=n(Ywe,"A",{href:!0});var mat=s(kN);QPo=r(mat,"MegatronBertForQuestionAnswering"),mat.forEach(t),HPo=r(Ywe," (MegatronBert model)"),Ywe.forEach(t),UPo=i(P),z2=n(P,"LI",{});var Kwe=s(z2);eie=n(Kwe,"STRONG",{});var gat=s(eie);JPo=r(gat,"mobilebert"),gat.forEach(t),YPo=r(Kwe," \u2014 "),RN=n(Kwe,"A",{href:!0});var hat=s(RN);KPo=r(hat,"MobileBertForQuestionAnswering"),hat.forEach(t),ZPo=r(Kwe," (MobileBERT model)"),Kwe.forEach(t),e$o=i(P),W2=n(P,"LI",{});var Zwe=s(W2);oie=n(Zwe,"STRONG",{});var pat=s(oie);o$o=r(pat,"mpnet"),pat.forEach(t),r$o=r(Zwe," \u2014 "),SN=n(Zwe,"A",{href:!0});var _at=s(SN);t$o=r(_at,"MPNetForQuestionAnswering"),_at.forEach(t),a$o=r(Zwe," (MPNet model)"),Zwe.forEach(t),n$o=i(P),Q2=n(P,"LI",{});var eAe=s(Q2);rie=n(eAe,"STRONG",{});var uat=s(rie);s$o=r(uat,"nystromformer"),uat.forEach(t),l$o=r(eAe," \u2014 "),PN=n(eAe,"A",{href:!0});var bat=s(PN);i$o=r(bat,"NystromformerForQuestionAnswering"),bat.forEach(t),d$o=r(eAe," (Nystromformer model)"),eAe.forEach(t),c$o=i(P),H2=n(P,"LI",{});var oAe=s(H2);tie=n(oAe,"STRONG",{});var vat=s(tie);f$o=r(vat,"qdqbert"),vat.forEach(t),m$o=r(oAe," \u2014 "),$N=n(oAe,"A",{href:!0});var Tat=s($N);g$o=r(Tat,"QDQBertForQuestionAnswering"),Tat.forEach(t),h$o=r(oAe," (QDQBert model)"),oAe.forEach(t),p$o=i(P),U2=n(P,"LI",{});var rAe=s(U2);aie=n(rAe,"STRONG",{});var Fat=s(aie);_$o=r(Fat,"reformer"),Fat.forEach(t),u$o=r(rAe," \u2014 "),IN=n(rAe,"A",{href:!0});var Cat=s(IN);b$o=r(Cat,"ReformerForQuestionAnswering"),Cat.forEach(t),v$o=r(rAe," (Reformer model)"),rAe.forEach(t),T$o=i(P),J2=n(P,"LI",{});var tAe=s(J2);nie=n(tAe,"STRONG",{});var Mat=s(nie);F$o=r(Mat,"rembert"),Mat.forEach(t),C$o=r(tAe," \u2014 "),jN=n(tAe,"A",{href:!0});var Eat=s(jN);M$o=r(Eat,"RemBertForQuestionAnswering"),Eat.forEach(t),E$o=r(tAe," (RemBERT model)"),tAe.forEach(t),y$o=i(P),Y2=n(P,"LI",{});var aAe=s(Y2);sie=n(aAe,"STRONG",{});var yat=s(sie);w$o=r(yat,"roberta"),yat.forEach(t),A$o=r(aAe," \u2014 "),DN=n(aAe,"A",{href:!0});var wat=s(DN);L$o=r(wat,"RobertaForQuestionAnswering"),wat.forEach(t),B$o=r(aAe," (RoBERTa model)"),aAe.forEach(t),x$o=i(P),K2=n(P,"LI",{});var nAe=s(K2);lie=n(nAe,"STRONG",{});var Aat=s(lie);k$o=r(Aat,"roformer"),Aat.forEach(t),R$o=r(nAe," \u2014 "),NN=n(nAe,"A",{href:!0});var Lat=s(NN);S$o=r(Lat,"RoFormerForQuestionAnswering"),Lat.forEach(t),P$o=r(nAe," (RoFormer model)"),nAe.forEach(t),$$o=i(P),Z2=n(P,"LI",{});var sAe=s(Z2);iie=n(sAe,"STRONG",{});var Bat=s(iie);I$o=r(Bat,"splinter"),Bat.forEach(t),j$o=r(sAe," \u2014 "),qN=n(sAe,"A",{href:!0});var xat=s(qN);D$o=r(xat,"SplinterForQuestionAnswering"),xat.forEach(t),N$o=r(sAe," (Splinter model)"),sAe.forEach(t),q$o=i(P),ev=n(P,"LI",{});var lAe=s(ev);die=n(lAe,"STRONG",{});var kat=s(die);G$o=r(kat,"squeezebert"),kat.forEach(t),O$o=r(lAe," \u2014 "),GN=n(lAe,"A",{href:!0});var Rat=s(GN);X$o=r(Rat,"SqueezeBertForQuestionAnswering"),Rat.forEach(t),V$o=r(lAe," (SqueezeBERT model)"),lAe.forEach(t),z$o=i(P),ov=n(P,"LI",{});var iAe=s(ov);cie=n(iAe,"STRONG",{});var Sat=s(cie);W$o=r(Sat,"xlm"),Sat.forEach(t),Q$o=r(iAe," \u2014 "),ON=n(iAe,"A",{href:!0});var Pat=s(ON);H$o=r(Pat,"XLMForQuestionAnsweringSimple"),Pat.forEach(t),U$o=r(iAe," (XLM model)"),iAe.forEach(t),J$o=i(P),rv=n(P,"LI",{});var dAe=s(rv);fie=n(dAe,"STRONG",{});var $at=s(fie);Y$o=r($at,"xlm-roberta"),$at.forEach(t),K$o=r(dAe," \u2014 "),XN=n(dAe,"A",{href:!0});var Iat=s(XN);Z$o=r(Iat,"XLMRobertaForQuestionAnswering"),Iat.forEach(t),eIo=r(dAe," (XLM-RoBERTa model)"),dAe.forEach(t),oIo=i(P),tv=n(P,"LI",{});var cAe=s(tv);mie=n(cAe,"STRONG",{});var jat=s(mie);rIo=r(jat,"xlm-roberta-xl"),jat.forEach(t),tIo=r(cAe," \u2014 "),VN=n(cAe,"A",{href:!0});var Dat=s(VN);aIo=r(Dat,"XLMRobertaXLForQuestionAnswering"),Dat.forEach(t),nIo=r(cAe," (XLM-RoBERTa-XL model)"),cAe.forEach(t),sIo=i(P),av=n(P,"LI",{});var fAe=s(av);gie=n(fAe,"STRONG",{});var Nat=s(gie);lIo=r(Nat,"xlnet"),Nat.forEach(t),iIo=r(fAe," \u2014 "),zN=n(fAe,"A",{href:!0});var qat=s(zN);dIo=r(qat,"XLNetForQuestionAnsweringSimple"),qat.forEach(t),cIo=r(fAe," (XLNet model)"),fAe.forEach(t),fIo=i(P),nv=n(P,"LI",{});var mAe=s(nv);hie=n(mAe,"STRONG",{});var Gat=s(hie);mIo=r(Gat,"yoso"),Gat.forEach(t),gIo=r(mAe," \u2014 "),WN=n(mAe,"A",{href:!0});var Oat=s(WN);hIo=r(Oat,"YosoForQuestionAnswering"),Oat.forEach(t),pIo=r(mAe," (YOSO model)"),mAe.forEach(t),P.forEach(t),_Io=i(Kt),sv=n(Kt,"P",{});var gAe=s(sv);uIo=r(gAe,"The model is set in evaluation mode by default using "),pie=n(gAe,"CODE",{});var Xat=s(pie);bIo=r(Xat,"model.eval()"),Xat.forEach(t),vIo=r(gAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ie=n(gAe,"CODE",{});var Vat=s(_ie);TIo=r(Vat,"model.train()"),Vat.forEach(t),gAe.forEach(t),FIo=i(Kt),uie=n(Kt,"P",{});var zat=s(uie);CIo=r(zat,"Examples:"),zat.forEach(t),MIo=i(Kt),m(g3.$$.fragment,Kt),Kt.forEach(t),_l.forEach(t),vRe=i(d),Sd=n(d,"H2",{class:!0});var xPe=s(Sd);lv=n(xPe,"A",{id:!0,class:!0,href:!0});var Wat=s(lv);bie=n(Wat,"SPAN",{});var Qat=s(bie);m(h3.$$.fragment,Qat),Qat.forEach(t),Wat.forEach(t),EIo=i(xPe),vie=n(xPe,"SPAN",{});var Hat=s(vie);yIo=r(Hat,"AutoModelForTableQuestionAnswering"),Hat.forEach(t),xPe.forEach(t),TRe=i(d),lr=n(d,"DIV",{class:!0});var bl=s(lr);m(p3.$$.fragment,bl),wIo=i(bl),Pd=n(bl,"P",{});var IW=s(Pd);AIo=r(IW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Tie=n(IW,"CODE",{});var Uat=s(Tie);LIo=r(Uat,"from_pretrained()"),Uat.forEach(t),BIo=r(IW,"class method or the "),Fie=n(IW,"CODE",{});var Jat=s(Fie);xIo=r(Jat,"from_config()"),Jat.forEach(t),kIo=r(IW,`class
method.`),IW.forEach(t),RIo=i(bl),_3=n(bl,"P",{});var kPe=s(_3);SIo=r(kPe,"This class cannot be instantiated directly using "),Cie=n(kPe,"CODE",{});var Yat=s(Cie);PIo=r(Yat,"__init__()"),Yat.forEach(t),$Io=r(kPe," (throws an error)."),kPe.forEach(t),IIo=i(bl),rt=n(bl,"DIV",{class:!0});var vl=s(rt);m(u3.$$.fragment,vl),jIo=i(vl),Mie=n(vl,"P",{});var Kat=s(Mie);DIo=r(Kat,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Kat.forEach(t),NIo=i(vl),$d=n(vl,"P",{});var jW=s($d);qIo=r(jW,`Note:
Loading a model from its configuration file does `),Eie=n(jW,"STRONG",{});var Zat=s(Eie);GIo=r(Zat,"not"),Zat.forEach(t),OIo=r(jW,` load the model weights. It only affects the
model\u2019s configuration. Use `),yie=n(jW,"CODE",{});var ent=s(yie);XIo=r(ent,"from_pretrained()"),ent.forEach(t),VIo=r(jW,"to load the model weights."),jW.forEach(t),zIo=i(vl),wie=n(vl,"P",{});var ont=s(wie);WIo=r(ont,"Examples:"),ont.forEach(t),QIo=i(vl),m(b3.$$.fragment,vl),vl.forEach(t),HIo=i(bl),Qe=n(bl,"DIV",{class:!0});var Zt=s(Qe);m(v3.$$.fragment,Zt),UIo=i(Zt),Aie=n(Zt,"P",{});var rnt=s(Aie);JIo=r(rnt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),rnt.forEach(t),YIo=i(Zt),an=n(Zt,"P",{});var kM=s(an);KIo=r(kM,"The model class to instantiate is selected based on the "),Lie=n(kM,"CODE",{});var tnt=s(Lie);ZIo=r(tnt,"model_type"),tnt.forEach(t),ejo=r(kM,` property of the config object (either
passed as an argument or loaded from `),Bie=n(kM,"CODE",{});var ant=s(Bie);ojo=r(ant,"pretrained_model_name_or_path"),ant.forEach(t),rjo=r(kM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xie=n(kM,"CODE",{});var nnt=s(xie);tjo=r(nnt,"pretrained_model_name_or_path"),nnt.forEach(t),ajo=r(kM,":"),kM.forEach(t),njo=i(Zt),kie=n(Zt,"UL",{});var snt=s(kie);iv=n(snt,"LI",{});var hAe=s(iv);Rie=n(hAe,"STRONG",{});var lnt=s(Rie);sjo=r(lnt,"tapas"),lnt.forEach(t),ljo=r(hAe," \u2014 "),QN=n(hAe,"A",{href:!0});var int=s(QN);ijo=r(int,"TapasForQuestionAnswering"),int.forEach(t),djo=r(hAe," (TAPAS model)"),hAe.forEach(t),snt.forEach(t),cjo=i(Zt),dv=n(Zt,"P",{});var pAe=s(dv);fjo=r(pAe,"The model is set in evaluation mode by default using "),Sie=n(pAe,"CODE",{});var dnt=s(Sie);mjo=r(dnt,"model.eval()"),dnt.forEach(t),gjo=r(pAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pie=n(pAe,"CODE",{});var cnt=s(Pie);hjo=r(cnt,"model.train()"),cnt.forEach(t),pAe.forEach(t),pjo=i(Zt),$ie=n(Zt,"P",{});var fnt=s($ie);_jo=r(fnt,"Examples:"),fnt.forEach(t),ujo=i(Zt),m(T3.$$.fragment,Zt),Zt.forEach(t),bl.forEach(t),FRe=i(d),Id=n(d,"H2",{class:!0});var RPe=s(Id);cv=n(RPe,"A",{id:!0,class:!0,href:!0});var mnt=s(cv);Iie=n(mnt,"SPAN",{});var gnt=s(Iie);m(F3.$$.fragment,gnt),gnt.forEach(t),mnt.forEach(t),bjo=i(RPe),jie=n(RPe,"SPAN",{});var hnt=s(jie);vjo=r(hnt,"AutoModelForImageClassification"),hnt.forEach(t),RPe.forEach(t),CRe=i(d),ir=n(d,"DIV",{class:!0});var Tl=s(ir);m(C3.$$.fragment,Tl),Tjo=i(Tl),jd=n(Tl,"P",{});var DW=s(jd);Fjo=r(DW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Die=n(DW,"CODE",{});var pnt=s(Die);Cjo=r(pnt,"from_pretrained()"),pnt.forEach(t),Mjo=r(DW,"class method or the "),Nie=n(DW,"CODE",{});var _nt=s(Nie);Ejo=r(_nt,"from_config()"),_nt.forEach(t),yjo=r(DW,`class
method.`),DW.forEach(t),wjo=i(Tl),M3=n(Tl,"P",{});var SPe=s(M3);Ajo=r(SPe,"This class cannot be instantiated directly using "),qie=n(SPe,"CODE",{});var unt=s(qie);Ljo=r(unt,"__init__()"),unt.forEach(t),Bjo=r(SPe," (throws an error)."),SPe.forEach(t),xjo=i(Tl),tt=n(Tl,"DIV",{class:!0});var Fl=s(tt);m(E3.$$.fragment,Fl),kjo=i(Fl),Gie=n(Fl,"P",{});var bnt=s(Gie);Rjo=r(bnt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bnt.forEach(t),Sjo=i(Fl),Dd=n(Fl,"P",{});var NW=s(Dd);Pjo=r(NW,`Note:
Loading a model from its configuration file does `),Oie=n(NW,"STRONG",{});var vnt=s(Oie);$jo=r(vnt,"not"),vnt.forEach(t),Ijo=r(NW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xie=n(NW,"CODE",{});var Tnt=s(Xie);jjo=r(Tnt,"from_pretrained()"),Tnt.forEach(t),Djo=r(NW,"to load the model weights."),NW.forEach(t),Njo=i(Fl),Vie=n(Fl,"P",{});var Fnt=s(Vie);qjo=r(Fnt,"Examples:"),Fnt.forEach(t),Gjo=i(Fl),m(y3.$$.fragment,Fl),Fl.forEach(t),Ojo=i(Tl),He=n(Tl,"DIV",{class:!0});var ea=s(He);m(w3.$$.fragment,ea),Xjo=i(ea),zie=n(ea,"P",{});var Cnt=s(zie);Vjo=r(Cnt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Cnt.forEach(t),zjo=i(ea),nn=n(ea,"P",{});var RM=s(nn);Wjo=r(RM,"The model class to instantiate is selected based on the "),Wie=n(RM,"CODE",{});var Mnt=s(Wie);Qjo=r(Mnt,"model_type"),Mnt.forEach(t),Hjo=r(RM,` property of the config object (either
passed as an argument or loaded from `),Qie=n(RM,"CODE",{});var Ent=s(Qie);Ujo=r(Ent,"pretrained_model_name_or_path"),Ent.forEach(t),Jjo=r(RM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hie=n(RM,"CODE",{});var ynt=s(Hie);Yjo=r(ynt,"pretrained_model_name_or_path"),ynt.forEach(t),Kjo=r(RM,":"),RM.forEach(t),Zjo=i(ea),me=n(ea,"UL",{});var Te=s(me);fv=n(Te,"LI",{});var _Ae=s(fv);Uie=n(_Ae,"STRONG",{});var wnt=s(Uie);eDo=r(wnt,"beit"),wnt.forEach(t),oDo=r(_Ae," \u2014 "),HN=n(_Ae,"A",{href:!0});var Ant=s(HN);rDo=r(Ant,"BeitForImageClassification"),Ant.forEach(t),tDo=r(_Ae," (BEiT model)"),_Ae.forEach(t),aDo=i(Te),mv=n(Te,"LI",{});var uAe=s(mv);Jie=n(uAe,"STRONG",{});var Lnt=s(Jie);nDo=r(Lnt,"convnext"),Lnt.forEach(t),sDo=r(uAe," \u2014 "),UN=n(uAe,"A",{href:!0});var Bnt=s(UN);lDo=r(Bnt,"ConvNextForImageClassification"),Bnt.forEach(t),iDo=r(uAe," (ConvNext model)"),uAe.forEach(t),dDo=i(Te),zs=n(Te,"LI",{});var _9=s(zs);Yie=n(_9,"STRONG",{});var xnt=s(Yie);cDo=r(xnt,"deit"),xnt.forEach(t),fDo=r(_9," \u2014 "),JN=n(_9,"A",{href:!0});var knt=s(JN);mDo=r(knt,"DeiTForImageClassification"),knt.forEach(t),gDo=r(_9," or "),YN=n(_9,"A",{href:!0});var Rnt=s(YN);hDo=r(Rnt,"DeiTForImageClassificationWithTeacher"),Rnt.forEach(t),pDo=r(_9," (DeiT model)"),_9.forEach(t),_Do=i(Te),gv=n(Te,"LI",{});var bAe=s(gv);Kie=n(bAe,"STRONG",{});var Snt=s(Kie);uDo=r(Snt,"imagegpt"),Snt.forEach(t),bDo=r(bAe," \u2014 "),KN=n(bAe,"A",{href:!0});var Pnt=s(KN);vDo=r(Pnt,"ImageGPTForImageClassification"),Pnt.forEach(t),TDo=r(bAe," (ImageGPT model)"),bAe.forEach(t),FDo=i(Te),pa=n(Te,"LI",{});var Vf=s(pa);Zie=n(Vf,"STRONG",{});var $nt=s(Zie);CDo=r($nt,"perceiver"),$nt.forEach(t),MDo=r(Vf," \u2014 "),ZN=n(Vf,"A",{href:!0});var Int=s(ZN);EDo=r(Int,"PerceiverForImageClassificationLearned"),Int.forEach(t),yDo=r(Vf," or "),eq=n(Vf,"A",{href:!0});var jnt=s(eq);wDo=r(jnt,"PerceiverForImageClassificationFourier"),jnt.forEach(t),ADo=r(Vf," or "),oq=n(Vf,"A",{href:!0});var Dnt=s(oq);LDo=r(Dnt,"PerceiverForImageClassificationConvProcessing"),Dnt.forEach(t),BDo=r(Vf," (Perceiver model)"),Vf.forEach(t),xDo=i(Te),hv=n(Te,"LI",{});var vAe=s(hv);ede=n(vAe,"STRONG",{});var Nnt=s(ede);kDo=r(Nnt,"poolformer"),Nnt.forEach(t),RDo=r(vAe," \u2014 "),rq=n(vAe,"A",{href:!0});var qnt=s(rq);SDo=r(qnt,"PoolFormerForImageClassification"),qnt.forEach(t),PDo=r(vAe," (PoolFormer model)"),vAe.forEach(t),$Do=i(Te),pv=n(Te,"LI",{});var TAe=s(pv);ode=n(TAe,"STRONG",{});var Gnt=s(ode);IDo=r(Gnt,"resnet"),Gnt.forEach(t),jDo=r(TAe," \u2014 "),tq=n(TAe,"A",{href:!0});var Ont=s(tq);DDo=r(Ont,"ResNetForImageClassification"),Ont.forEach(t),NDo=r(TAe," (ResNet model)"),TAe.forEach(t),qDo=i(Te),_v=n(Te,"LI",{});var FAe=s(_v);rde=n(FAe,"STRONG",{});var Xnt=s(rde);GDo=r(Xnt,"segformer"),Xnt.forEach(t),ODo=r(FAe," \u2014 "),aq=n(FAe,"A",{href:!0});var Vnt=s(aq);XDo=r(Vnt,"SegformerForImageClassification"),Vnt.forEach(t),VDo=r(FAe," (SegFormer model)"),FAe.forEach(t),zDo=i(Te),uv=n(Te,"LI",{});var CAe=s(uv);tde=n(CAe,"STRONG",{});var znt=s(tde);WDo=r(znt,"swin"),znt.forEach(t),QDo=r(CAe," \u2014 "),nq=n(CAe,"A",{href:!0});var Wnt=s(nq);HDo=r(Wnt,"SwinForImageClassification"),Wnt.forEach(t),UDo=r(CAe," (Swin model)"),CAe.forEach(t),JDo=i(Te),bv=n(Te,"LI",{});var MAe=s(bv);ade=n(MAe,"STRONG",{});var Qnt=s(ade);YDo=r(Qnt,"van"),Qnt.forEach(t),KDo=r(MAe," \u2014 "),sq=n(MAe,"A",{href:!0});var Hnt=s(sq);ZDo=r(Hnt,"VanForImageClassification"),Hnt.forEach(t),eNo=r(MAe," (VAN model)"),MAe.forEach(t),oNo=i(Te),vv=n(Te,"LI",{});var EAe=s(vv);nde=n(EAe,"STRONG",{});var Unt=s(nde);rNo=r(Unt,"vit"),Unt.forEach(t),tNo=r(EAe," \u2014 "),lq=n(EAe,"A",{href:!0});var Jnt=s(lq);aNo=r(Jnt,"ViTForImageClassification"),Jnt.forEach(t),nNo=r(EAe," (ViT model)"),EAe.forEach(t),Te.forEach(t),sNo=i(ea),Tv=n(ea,"P",{});var yAe=s(Tv);lNo=r(yAe,"The model is set in evaluation mode by default using "),sde=n(yAe,"CODE",{});var Ynt=s(sde);iNo=r(Ynt,"model.eval()"),Ynt.forEach(t),dNo=r(yAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lde=n(yAe,"CODE",{});var Knt=s(lde);cNo=r(Knt,"model.train()"),Knt.forEach(t),yAe.forEach(t),fNo=i(ea),ide=n(ea,"P",{});var Znt=s(ide);mNo=r(Znt,"Examples:"),Znt.forEach(t),gNo=i(ea),m(A3.$$.fragment,ea),ea.forEach(t),Tl.forEach(t),MRe=i(d),Nd=n(d,"H2",{class:!0});var PPe=s(Nd);Fv=n(PPe,"A",{id:!0,class:!0,href:!0});var est=s(Fv);dde=n(est,"SPAN",{});var ost=s(dde);m(L3.$$.fragment,ost),ost.forEach(t),est.forEach(t),hNo=i(PPe),cde=n(PPe,"SPAN",{});var rst=s(cde);pNo=r(rst,"AutoModelForVision2Seq"),rst.forEach(t),PPe.forEach(t),ERe=i(d),dr=n(d,"DIV",{class:!0});var Cl=s(dr);m(B3.$$.fragment,Cl),_No=i(Cl),qd=n(Cl,"P",{});var qW=s(qd);uNo=r(qW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fde=n(qW,"CODE",{});var tst=s(fde);bNo=r(tst,"from_pretrained()"),tst.forEach(t),vNo=r(qW,"class method or the "),mde=n(qW,"CODE",{});var ast=s(mde);TNo=r(ast,"from_config()"),ast.forEach(t),FNo=r(qW,`class
method.`),qW.forEach(t),CNo=i(Cl),x3=n(Cl,"P",{});var $Pe=s(x3);MNo=r($Pe,"This class cannot be instantiated directly using "),gde=n($Pe,"CODE",{});var nst=s(gde);ENo=r(nst,"__init__()"),nst.forEach(t),yNo=r($Pe," (throws an error)."),$Pe.forEach(t),wNo=i(Cl),at=n(Cl,"DIV",{class:!0});var Ml=s(at);m(k3.$$.fragment,Ml),ANo=i(Ml),hde=n(Ml,"P",{});var sst=s(hde);LNo=r(sst,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sst.forEach(t),BNo=i(Ml),Gd=n(Ml,"P",{});var GW=s(Gd);xNo=r(GW,`Note:
Loading a model from its configuration file does `),pde=n(GW,"STRONG",{});var lst=s(pde);kNo=r(lst,"not"),lst.forEach(t),RNo=r(GW,` load the model weights. It only affects the
model\u2019s configuration. Use `),_de=n(GW,"CODE",{});var ist=s(_de);SNo=r(ist,"from_pretrained()"),ist.forEach(t),PNo=r(GW,"to load the model weights."),GW.forEach(t),$No=i(Ml),ude=n(Ml,"P",{});var dst=s(ude);INo=r(dst,"Examples:"),dst.forEach(t),jNo=i(Ml),m(R3.$$.fragment,Ml),Ml.forEach(t),DNo=i(Cl),Ue=n(Cl,"DIV",{class:!0});var oa=s(Ue);m(S3.$$.fragment,oa),NNo=i(oa),bde=n(oa,"P",{});var cst=s(bde);qNo=r(cst,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cst.forEach(t),GNo=i(oa),sn=n(oa,"P",{});var SM=s(sn);ONo=r(SM,"The model class to instantiate is selected based on the "),vde=n(SM,"CODE",{});var fst=s(vde);XNo=r(fst,"model_type"),fst.forEach(t),VNo=r(SM,` property of the config object (either
passed as an argument or loaded from `),Tde=n(SM,"CODE",{});var mst=s(Tde);zNo=r(mst,"pretrained_model_name_or_path"),mst.forEach(t),WNo=r(SM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=n(SM,"CODE",{});var gst=s(Fde);QNo=r(gst,"pretrained_model_name_or_path"),gst.forEach(t),HNo=r(SM,":"),SM.forEach(t),UNo=i(oa),Cde=n(oa,"UL",{});var hst=s(Cde);Cv=n(hst,"LI",{});var wAe=s(Cv);Mde=n(wAe,"STRONG",{});var pst=s(Mde);JNo=r(pst,"vision-encoder-decoder"),pst.forEach(t),YNo=r(wAe," \u2014 "),iq=n(wAe,"A",{href:!0});var _st=s(iq);KNo=r(_st,"VisionEncoderDecoderModel"),_st.forEach(t),ZNo=r(wAe," (Vision Encoder decoder model)"),wAe.forEach(t),hst.forEach(t),eqo=i(oa),Mv=n(oa,"P",{});var AAe=s(Mv);oqo=r(AAe,"The model is set in evaluation mode by default using "),Ede=n(AAe,"CODE",{});var ust=s(Ede);rqo=r(ust,"model.eval()"),ust.forEach(t),tqo=r(AAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yde=n(AAe,"CODE",{});var bst=s(yde);aqo=r(bst,"model.train()"),bst.forEach(t),AAe.forEach(t),nqo=i(oa),wde=n(oa,"P",{});var vst=s(wde);sqo=r(vst,"Examples:"),vst.forEach(t),lqo=i(oa),m(P3.$$.fragment,oa),oa.forEach(t),Cl.forEach(t),yRe=i(d),Od=n(d,"H2",{class:!0});var IPe=s(Od);Ev=n(IPe,"A",{id:!0,class:!0,href:!0});var Tst=s(Ev);Ade=n(Tst,"SPAN",{});var Fst=s(Ade);m($3.$$.fragment,Fst),Fst.forEach(t),Tst.forEach(t),iqo=i(IPe),Lde=n(IPe,"SPAN",{});var Cst=s(Lde);dqo=r(Cst,"AutoModelForAudioClassification"),Cst.forEach(t),IPe.forEach(t),wRe=i(d),cr=n(d,"DIV",{class:!0});var El=s(cr);m(I3.$$.fragment,El),cqo=i(El),Xd=n(El,"P",{});var OW=s(Xd);fqo=r(OW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Bde=n(OW,"CODE",{});var Mst=s(Bde);mqo=r(Mst,"from_pretrained()"),Mst.forEach(t),gqo=r(OW,"class method or the "),xde=n(OW,"CODE",{});var Est=s(xde);hqo=r(Est,"from_config()"),Est.forEach(t),pqo=r(OW,`class
method.`),OW.forEach(t),_qo=i(El),j3=n(El,"P",{});var jPe=s(j3);uqo=r(jPe,"This class cannot be instantiated directly using "),kde=n(jPe,"CODE",{});var yst=s(kde);bqo=r(yst,"__init__()"),yst.forEach(t),vqo=r(jPe," (throws an error)."),jPe.forEach(t),Tqo=i(El),nt=n(El,"DIV",{class:!0});var yl=s(nt);m(D3.$$.fragment,yl),Fqo=i(yl),Rde=n(yl,"P",{});var wst=s(Rde);Cqo=r(wst,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),wst.forEach(t),Mqo=i(yl),Vd=n(yl,"P",{});var XW=s(Vd);Eqo=r(XW,`Note:
Loading a model from its configuration file does `),Sde=n(XW,"STRONG",{});var Ast=s(Sde);yqo=r(Ast,"not"),Ast.forEach(t),wqo=r(XW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pde=n(XW,"CODE",{});var Lst=s(Pde);Aqo=r(Lst,"from_pretrained()"),Lst.forEach(t),Lqo=r(XW,"to load the model weights."),XW.forEach(t),Bqo=i(yl),$de=n(yl,"P",{});var Bst=s($de);xqo=r(Bst,"Examples:"),Bst.forEach(t),kqo=i(yl),m(N3.$$.fragment,yl),yl.forEach(t),Rqo=i(El),Je=n(El,"DIV",{class:!0});var ra=s(Je);m(q3.$$.fragment,ra),Sqo=i(ra),Ide=n(ra,"P",{});var xst=s(Ide);Pqo=r(xst,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),xst.forEach(t),$qo=i(ra),ln=n(ra,"P",{});var PM=s(ln);Iqo=r(PM,"The model class to instantiate is selected based on the "),jde=n(PM,"CODE",{});var kst=s(jde);jqo=r(kst,"model_type"),kst.forEach(t),Dqo=r(PM,` property of the config object (either
passed as an argument or loaded from `),Dde=n(PM,"CODE",{});var Rst=s(Dde);Nqo=r(Rst,"pretrained_model_name_or_path"),Rst.forEach(t),qqo=r(PM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nde=n(PM,"CODE",{});var Sst=s(Nde);Gqo=r(Sst,"pretrained_model_name_or_path"),Sst.forEach(t),Oqo=r(PM,":"),PM.forEach(t),Xqo=i(ra),ke=n(ra,"UL",{});var Go=s(ke);yv=n(Go,"LI",{});var LAe=s(yv);qde=n(LAe,"STRONG",{});var Pst=s(qde);Vqo=r(Pst,"data2vec-audio"),Pst.forEach(t),zqo=r(LAe," \u2014 "),dq=n(LAe,"A",{href:!0});var $st=s(dq);Wqo=r($st,"Data2VecAudioForSequenceClassification"),$st.forEach(t),Qqo=r(LAe," (Data2VecAudio model)"),LAe.forEach(t),Hqo=i(Go),wv=n(Go,"LI",{});var BAe=s(wv);Gde=n(BAe,"STRONG",{});var Ist=s(Gde);Uqo=r(Ist,"hubert"),Ist.forEach(t),Jqo=r(BAe," \u2014 "),cq=n(BAe,"A",{href:!0});var jst=s(cq);Yqo=r(jst,"HubertForSequenceClassification"),jst.forEach(t),Kqo=r(BAe," (Hubert model)"),BAe.forEach(t),Zqo=i(Go),Av=n(Go,"LI",{});var xAe=s(Av);Ode=n(xAe,"STRONG",{});var Dst=s(Ode);eGo=r(Dst,"sew"),Dst.forEach(t),oGo=r(xAe," \u2014 "),fq=n(xAe,"A",{href:!0});var Nst=s(fq);rGo=r(Nst,"SEWForSequenceClassification"),Nst.forEach(t),tGo=r(xAe," (SEW model)"),xAe.forEach(t),aGo=i(Go),Lv=n(Go,"LI",{});var kAe=s(Lv);Xde=n(kAe,"STRONG",{});var qst=s(Xde);nGo=r(qst,"sew-d"),qst.forEach(t),sGo=r(kAe," \u2014 "),mq=n(kAe,"A",{href:!0});var Gst=s(mq);lGo=r(Gst,"SEWDForSequenceClassification"),Gst.forEach(t),iGo=r(kAe," (SEW-D model)"),kAe.forEach(t),dGo=i(Go),Bv=n(Go,"LI",{});var RAe=s(Bv);Vde=n(RAe,"STRONG",{});var Ost=s(Vde);cGo=r(Ost,"unispeech"),Ost.forEach(t),fGo=r(RAe," \u2014 "),gq=n(RAe,"A",{href:!0});var Xst=s(gq);mGo=r(Xst,"UniSpeechForSequenceClassification"),Xst.forEach(t),gGo=r(RAe," (UniSpeech model)"),RAe.forEach(t),hGo=i(Go),xv=n(Go,"LI",{});var SAe=s(xv);zde=n(SAe,"STRONG",{});var Vst=s(zde);pGo=r(Vst,"unispeech-sat"),Vst.forEach(t),_Go=r(SAe," \u2014 "),hq=n(SAe,"A",{href:!0});var zst=s(hq);uGo=r(zst,"UniSpeechSatForSequenceClassification"),zst.forEach(t),bGo=r(SAe," (UniSpeechSat model)"),SAe.forEach(t),vGo=i(Go),kv=n(Go,"LI",{});var PAe=s(kv);Wde=n(PAe,"STRONG",{});var Wst=s(Wde);TGo=r(Wst,"wav2vec2"),Wst.forEach(t),FGo=r(PAe," \u2014 "),pq=n(PAe,"A",{href:!0});var Qst=s(pq);CGo=r(Qst,"Wav2Vec2ForSequenceClassification"),Qst.forEach(t),MGo=r(PAe," (Wav2Vec2 model)"),PAe.forEach(t),EGo=i(Go),Rv=n(Go,"LI",{});var $Ae=s(Rv);Qde=n($Ae,"STRONG",{});var Hst=s(Qde);yGo=r(Hst,"wavlm"),Hst.forEach(t),wGo=r($Ae," \u2014 "),_q=n($Ae,"A",{href:!0});var Ust=s(_q);AGo=r(Ust,"WavLMForSequenceClassification"),Ust.forEach(t),LGo=r($Ae," (WavLM model)"),$Ae.forEach(t),Go.forEach(t),BGo=i(ra),Sv=n(ra,"P",{});var IAe=s(Sv);xGo=r(IAe,"The model is set in evaluation mode by default using "),Hde=n(IAe,"CODE",{});var Jst=s(Hde);kGo=r(Jst,"model.eval()"),Jst.forEach(t),RGo=r(IAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ude=n(IAe,"CODE",{});var Yst=s(Ude);SGo=r(Yst,"model.train()"),Yst.forEach(t),IAe.forEach(t),PGo=i(ra),Jde=n(ra,"P",{});var Kst=s(Jde);$Go=r(Kst,"Examples:"),Kst.forEach(t),IGo=i(ra),m(G3.$$.fragment,ra),ra.forEach(t),El.forEach(t),ARe=i(d),zd=n(d,"H2",{class:!0});var DPe=s(zd);Pv=n(DPe,"A",{id:!0,class:!0,href:!0});var Zst=s(Pv);Yde=n(Zst,"SPAN",{});var elt=s(Yde);m(O3.$$.fragment,elt),elt.forEach(t),Zst.forEach(t),jGo=i(DPe),Kde=n(DPe,"SPAN",{});var olt=s(Kde);DGo=r(olt,"AutoModelForAudioFrameClassification"),olt.forEach(t),DPe.forEach(t),LRe=i(d),fr=n(d,"DIV",{class:!0});var wl=s(fr);m(X3.$$.fragment,wl),NGo=i(wl),Wd=n(wl,"P",{});var VW=s(Wd);qGo=r(VW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Zde=n(VW,"CODE",{});var rlt=s(Zde);GGo=r(rlt,"from_pretrained()"),rlt.forEach(t),OGo=r(VW,"class method or the "),ece=n(VW,"CODE",{});var tlt=s(ece);XGo=r(tlt,"from_config()"),tlt.forEach(t),VGo=r(VW,`class
method.`),VW.forEach(t),zGo=i(wl),V3=n(wl,"P",{});var NPe=s(V3);WGo=r(NPe,"This class cannot be instantiated directly using "),oce=n(NPe,"CODE",{});var alt=s(oce);QGo=r(alt,"__init__()"),alt.forEach(t),HGo=r(NPe," (throws an error)."),NPe.forEach(t),UGo=i(wl),st=n(wl,"DIV",{class:!0});var Al=s(st);m(z3.$$.fragment,Al),JGo=i(Al),rce=n(Al,"P",{});var nlt=s(rce);YGo=r(nlt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),nlt.forEach(t),KGo=i(Al),Qd=n(Al,"P",{});var zW=s(Qd);ZGo=r(zW,`Note:
Loading a model from its configuration file does `),tce=n(zW,"STRONG",{});var slt=s(tce);eOo=r(slt,"not"),slt.forEach(t),oOo=r(zW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ace=n(zW,"CODE",{});var llt=s(ace);rOo=r(llt,"from_pretrained()"),llt.forEach(t),tOo=r(zW,"to load the model weights."),zW.forEach(t),aOo=i(Al),nce=n(Al,"P",{});var ilt=s(nce);nOo=r(ilt,"Examples:"),ilt.forEach(t),sOo=i(Al),m(W3.$$.fragment,Al),Al.forEach(t),lOo=i(wl),Ye=n(wl,"DIV",{class:!0});var ta=s(Ye);m(Q3.$$.fragment,ta),iOo=i(ta),sce=n(ta,"P",{});var dlt=s(sce);dOo=r(dlt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),dlt.forEach(t),cOo=i(ta),dn=n(ta,"P",{});var $M=s(dn);fOo=r($M,"The model class to instantiate is selected based on the "),lce=n($M,"CODE",{});var clt=s(lce);mOo=r(clt,"model_type"),clt.forEach(t),gOo=r($M,` property of the config object (either
passed as an argument or loaded from `),ice=n($M,"CODE",{});var flt=s(ice);hOo=r(flt,"pretrained_model_name_or_path"),flt.forEach(t),pOo=r($M,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dce=n($M,"CODE",{});var mlt=s(dce);_Oo=r(mlt,"pretrained_model_name_or_path"),mlt.forEach(t),uOo=r($M,":"),$M.forEach(t),bOo=i(ta),cn=n(ta,"UL",{});var IM=s(cn);$v=n(IM,"LI",{});var jAe=s($v);cce=n(jAe,"STRONG",{});var glt=s(cce);vOo=r(glt,"data2vec-audio"),glt.forEach(t),TOo=r(jAe," \u2014 "),uq=n(jAe,"A",{href:!0});var hlt=s(uq);FOo=r(hlt,"Data2VecAudioForAudioFrameClassification"),hlt.forEach(t),COo=r(jAe," (Data2VecAudio model)"),jAe.forEach(t),MOo=i(IM),Iv=n(IM,"LI",{});var DAe=s(Iv);fce=n(DAe,"STRONG",{});var plt=s(fce);EOo=r(plt,"unispeech-sat"),plt.forEach(t),yOo=r(DAe," \u2014 "),bq=n(DAe,"A",{href:!0});var _lt=s(bq);wOo=r(_lt,"UniSpeechSatForAudioFrameClassification"),_lt.forEach(t),AOo=r(DAe," (UniSpeechSat model)"),DAe.forEach(t),LOo=i(IM),jv=n(IM,"LI",{});var NAe=s(jv);mce=n(NAe,"STRONG",{});var ult=s(mce);BOo=r(ult,"wav2vec2"),ult.forEach(t),xOo=r(NAe," \u2014 "),vq=n(NAe,"A",{href:!0});var blt=s(vq);kOo=r(blt,"Wav2Vec2ForAudioFrameClassification"),blt.forEach(t),ROo=r(NAe," (Wav2Vec2 model)"),NAe.forEach(t),SOo=i(IM),Dv=n(IM,"LI",{});var qAe=s(Dv);gce=n(qAe,"STRONG",{});var vlt=s(gce);POo=r(vlt,"wavlm"),vlt.forEach(t),$Oo=r(qAe," \u2014 "),Tq=n(qAe,"A",{href:!0});var Tlt=s(Tq);IOo=r(Tlt,"WavLMForAudioFrameClassification"),Tlt.forEach(t),jOo=r(qAe," (WavLM model)"),qAe.forEach(t),IM.forEach(t),DOo=i(ta),Nv=n(ta,"P",{});var GAe=s(Nv);NOo=r(GAe,"The model is set in evaluation mode by default using "),hce=n(GAe,"CODE",{});var Flt=s(hce);qOo=r(Flt,"model.eval()"),Flt.forEach(t),GOo=r(GAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pce=n(GAe,"CODE",{});var Clt=s(pce);OOo=r(Clt,"model.train()"),Clt.forEach(t),GAe.forEach(t),XOo=i(ta),_ce=n(ta,"P",{});var Mlt=s(_ce);VOo=r(Mlt,"Examples:"),Mlt.forEach(t),zOo=i(ta),m(H3.$$.fragment,ta),ta.forEach(t),wl.forEach(t),BRe=i(d),Hd=n(d,"H2",{class:!0});var qPe=s(Hd);qv=n(qPe,"A",{id:!0,class:!0,href:!0});var Elt=s(qv);uce=n(Elt,"SPAN",{});var ylt=s(uce);m(U3.$$.fragment,ylt),ylt.forEach(t),Elt.forEach(t),WOo=i(qPe),bce=n(qPe,"SPAN",{});var wlt=s(bce);QOo=r(wlt,"AutoModelForCTC"),wlt.forEach(t),qPe.forEach(t),xRe=i(d),mr=n(d,"DIV",{class:!0});var Ll=s(mr);m(J3.$$.fragment,Ll),HOo=i(Ll),Ud=n(Ll,"P",{});var WW=s(Ud);UOo=r(WW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),vce=n(WW,"CODE",{});var Alt=s(vce);JOo=r(Alt,"from_pretrained()"),Alt.forEach(t),YOo=r(WW,"class method or the "),Tce=n(WW,"CODE",{});var Llt=s(Tce);KOo=r(Llt,"from_config()"),Llt.forEach(t),ZOo=r(WW,`class
method.`),WW.forEach(t),eXo=i(Ll),Y3=n(Ll,"P",{});var GPe=s(Y3);oXo=r(GPe,"This class cannot be instantiated directly using "),Fce=n(GPe,"CODE",{});var Blt=s(Fce);rXo=r(Blt,"__init__()"),Blt.forEach(t),tXo=r(GPe," (throws an error)."),GPe.forEach(t),aXo=i(Ll),lt=n(Ll,"DIV",{class:!0});var Bl=s(lt);m(K3.$$.fragment,Bl),nXo=i(Bl),Cce=n(Bl,"P",{});var xlt=s(Cce);sXo=r(xlt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),xlt.forEach(t),lXo=i(Bl),Jd=n(Bl,"P",{});var QW=s(Jd);iXo=r(QW,`Note:
Loading a model from its configuration file does `),Mce=n(QW,"STRONG",{});var klt=s(Mce);dXo=r(klt,"not"),klt.forEach(t),cXo=r(QW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ece=n(QW,"CODE",{});var Rlt=s(Ece);fXo=r(Rlt,"from_pretrained()"),Rlt.forEach(t),mXo=r(QW,"to load the model weights."),QW.forEach(t),gXo=i(Bl),yce=n(Bl,"P",{});var Slt=s(yce);hXo=r(Slt,"Examples:"),Slt.forEach(t),pXo=i(Bl),m(Z3.$$.fragment,Bl),Bl.forEach(t),_Xo=i(Ll),Ke=n(Ll,"DIV",{class:!0});var aa=s(Ke);m(ey.$$.fragment,aa),uXo=i(aa),wce=n(aa,"P",{});var Plt=s(wce);bXo=r(Plt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Plt.forEach(t),vXo=i(aa),fn=n(aa,"P",{});var jM=s(fn);TXo=r(jM,"The model class to instantiate is selected based on the "),Ace=n(jM,"CODE",{});var $lt=s(Ace);FXo=r($lt,"model_type"),$lt.forEach(t),CXo=r(jM,` property of the config object (either
passed as an argument or loaded from `),Lce=n(jM,"CODE",{});var Ilt=s(Lce);MXo=r(Ilt,"pretrained_model_name_or_path"),Ilt.forEach(t),EXo=r(jM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bce=n(jM,"CODE",{});var jlt=s(Bce);yXo=r(jlt,"pretrained_model_name_or_path"),jlt.forEach(t),wXo=r(jM,":"),jM.forEach(t),AXo=i(aa),Re=n(aa,"UL",{});var Oo=s(Re);Gv=n(Oo,"LI",{});var OAe=s(Gv);xce=n(OAe,"STRONG",{});var Dlt=s(xce);LXo=r(Dlt,"data2vec-audio"),Dlt.forEach(t),BXo=r(OAe," \u2014 "),Fq=n(OAe,"A",{href:!0});var Nlt=s(Fq);xXo=r(Nlt,"Data2VecAudioForCTC"),Nlt.forEach(t),kXo=r(OAe," (Data2VecAudio model)"),OAe.forEach(t),RXo=i(Oo),Ov=n(Oo,"LI",{});var XAe=s(Ov);kce=n(XAe,"STRONG",{});var qlt=s(kce);SXo=r(qlt,"hubert"),qlt.forEach(t),PXo=r(XAe," \u2014 "),Cq=n(XAe,"A",{href:!0});var Glt=s(Cq);$Xo=r(Glt,"HubertForCTC"),Glt.forEach(t),IXo=r(XAe," (Hubert model)"),XAe.forEach(t),jXo=i(Oo),Xv=n(Oo,"LI",{});var VAe=s(Xv);Rce=n(VAe,"STRONG",{});var Olt=s(Rce);DXo=r(Olt,"sew"),Olt.forEach(t),NXo=r(VAe," \u2014 "),Mq=n(VAe,"A",{href:!0});var Xlt=s(Mq);qXo=r(Xlt,"SEWForCTC"),Xlt.forEach(t),GXo=r(VAe," (SEW model)"),VAe.forEach(t),OXo=i(Oo),Vv=n(Oo,"LI",{});var zAe=s(Vv);Sce=n(zAe,"STRONG",{});var Vlt=s(Sce);XXo=r(Vlt,"sew-d"),Vlt.forEach(t),VXo=r(zAe," \u2014 "),Eq=n(zAe,"A",{href:!0});var zlt=s(Eq);zXo=r(zlt,"SEWDForCTC"),zlt.forEach(t),WXo=r(zAe," (SEW-D model)"),zAe.forEach(t),QXo=i(Oo),zv=n(Oo,"LI",{});var WAe=s(zv);Pce=n(WAe,"STRONG",{});var Wlt=s(Pce);HXo=r(Wlt,"unispeech"),Wlt.forEach(t),UXo=r(WAe," \u2014 "),yq=n(WAe,"A",{href:!0});var Qlt=s(yq);JXo=r(Qlt,"UniSpeechForCTC"),Qlt.forEach(t),YXo=r(WAe," (UniSpeech model)"),WAe.forEach(t),KXo=i(Oo),Wv=n(Oo,"LI",{});var QAe=s(Wv);$ce=n(QAe,"STRONG",{});var Hlt=s($ce);ZXo=r(Hlt,"unispeech-sat"),Hlt.forEach(t),eVo=r(QAe," \u2014 "),wq=n(QAe,"A",{href:!0});var Ult=s(wq);oVo=r(Ult,"UniSpeechSatForCTC"),Ult.forEach(t),rVo=r(QAe," (UniSpeechSat model)"),QAe.forEach(t),tVo=i(Oo),Qv=n(Oo,"LI",{});var HAe=s(Qv);Ice=n(HAe,"STRONG",{});var Jlt=s(Ice);aVo=r(Jlt,"wav2vec2"),Jlt.forEach(t),nVo=r(HAe," \u2014 "),Aq=n(HAe,"A",{href:!0});var Ylt=s(Aq);sVo=r(Ylt,"Wav2Vec2ForCTC"),Ylt.forEach(t),lVo=r(HAe," (Wav2Vec2 model)"),HAe.forEach(t),iVo=i(Oo),Hv=n(Oo,"LI",{});var UAe=s(Hv);jce=n(UAe,"STRONG",{});var Klt=s(jce);dVo=r(Klt,"wavlm"),Klt.forEach(t),cVo=r(UAe," \u2014 "),Lq=n(UAe,"A",{href:!0});var Zlt=s(Lq);fVo=r(Zlt,"WavLMForCTC"),Zlt.forEach(t),mVo=r(UAe," (WavLM model)"),UAe.forEach(t),Oo.forEach(t),gVo=i(aa),Uv=n(aa,"P",{});var JAe=s(Uv);hVo=r(JAe,"The model is set in evaluation mode by default using "),Dce=n(JAe,"CODE",{});var eit=s(Dce);pVo=r(eit,"model.eval()"),eit.forEach(t),_Vo=r(JAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nce=n(JAe,"CODE",{});var oit=s(Nce);uVo=r(oit,"model.train()"),oit.forEach(t),JAe.forEach(t),bVo=i(aa),qce=n(aa,"P",{});var rit=s(qce);vVo=r(rit,"Examples:"),rit.forEach(t),TVo=i(aa),m(oy.$$.fragment,aa),aa.forEach(t),Ll.forEach(t),kRe=i(d),Yd=n(d,"H2",{class:!0});var OPe=s(Yd);Jv=n(OPe,"A",{id:!0,class:!0,href:!0});var tit=s(Jv);Gce=n(tit,"SPAN",{});var ait=s(Gce);m(ry.$$.fragment,ait),ait.forEach(t),tit.forEach(t),FVo=i(OPe),Oce=n(OPe,"SPAN",{});var nit=s(Oce);CVo=r(nit,"AutoModelForSpeechSeq2Seq"),nit.forEach(t),OPe.forEach(t),RRe=i(d),gr=n(d,"DIV",{class:!0});var xl=s(gr);m(ty.$$.fragment,xl),MVo=i(xl),Kd=n(xl,"P",{});var HW=s(Kd);EVo=r(HW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Xce=n(HW,"CODE",{});var sit=s(Xce);yVo=r(sit,"from_pretrained()"),sit.forEach(t),wVo=r(HW,"class method or the "),Vce=n(HW,"CODE",{});var lit=s(Vce);AVo=r(lit,"from_config()"),lit.forEach(t),LVo=r(HW,`class
method.`),HW.forEach(t),BVo=i(xl),ay=n(xl,"P",{});var XPe=s(ay);xVo=r(XPe,"This class cannot be instantiated directly using "),zce=n(XPe,"CODE",{});var iit=s(zce);kVo=r(iit,"__init__()"),iit.forEach(t),RVo=r(XPe," (throws an error)."),XPe.forEach(t),SVo=i(xl),it=n(xl,"DIV",{class:!0});var kl=s(it);m(ny.$$.fragment,kl),PVo=i(kl),Wce=n(kl,"P",{});var dit=s(Wce);$Vo=r(dit,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),dit.forEach(t),IVo=i(kl),Zd=n(kl,"P",{});var UW=s(Zd);jVo=r(UW,`Note:
Loading a model from its configuration file does `),Qce=n(UW,"STRONG",{});var cit=s(Qce);DVo=r(cit,"not"),cit.forEach(t),NVo=r(UW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hce=n(UW,"CODE",{});var fit=s(Hce);qVo=r(fit,"from_pretrained()"),fit.forEach(t),GVo=r(UW,"to load the model weights."),UW.forEach(t),OVo=i(kl),Uce=n(kl,"P",{});var mit=s(Uce);XVo=r(mit,"Examples:"),mit.forEach(t),VVo=i(kl),m(sy.$$.fragment,kl),kl.forEach(t),zVo=i(xl),Ze=n(xl,"DIV",{class:!0});var na=s(Ze);m(ly.$$.fragment,na),WVo=i(na),Jce=n(na,"P",{});var git=s(Jce);QVo=r(git,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),git.forEach(t),HVo=i(na),mn=n(na,"P",{});var DM=s(mn);UVo=r(DM,"The model class to instantiate is selected based on the "),Yce=n(DM,"CODE",{});var hit=s(Yce);JVo=r(hit,"model_type"),hit.forEach(t),YVo=r(DM,` property of the config object (either
passed as an argument or loaded from `),Kce=n(DM,"CODE",{});var pit=s(Kce);KVo=r(pit,"pretrained_model_name_or_path"),pit.forEach(t),ZVo=r(DM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zce=n(DM,"CODE",{});var _it=s(Zce);ezo=r(_it,"pretrained_model_name_or_path"),_it.forEach(t),ozo=r(DM,":"),DM.forEach(t),rzo=i(na),iy=n(na,"UL",{});var VPe=s(iy);Yv=n(VPe,"LI",{});var YAe=s(Yv);efe=n(YAe,"STRONG",{});var uit=s(efe);tzo=r(uit,"speech-encoder-decoder"),uit.forEach(t),azo=r(YAe," \u2014 "),Bq=n(YAe,"A",{href:!0});var bit=s(Bq);nzo=r(bit,"SpeechEncoderDecoderModel"),bit.forEach(t),szo=r(YAe," (Speech Encoder decoder model)"),YAe.forEach(t),lzo=i(VPe),Kv=n(VPe,"LI",{});var KAe=s(Kv);ofe=n(KAe,"STRONG",{});var vit=s(ofe);izo=r(vit,"speech_to_text"),vit.forEach(t),dzo=r(KAe," \u2014 "),xq=n(KAe,"A",{href:!0});var Tit=s(xq);czo=r(Tit,"Speech2TextForConditionalGeneration"),Tit.forEach(t),fzo=r(KAe," (Speech2Text model)"),KAe.forEach(t),VPe.forEach(t),mzo=i(na),Zv=n(na,"P",{});var ZAe=s(Zv);gzo=r(ZAe,"The model is set in evaluation mode by default using "),rfe=n(ZAe,"CODE",{});var Fit=s(rfe);hzo=r(Fit,"model.eval()"),Fit.forEach(t),pzo=r(ZAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tfe=n(ZAe,"CODE",{});var Cit=s(tfe);_zo=r(Cit,"model.train()"),Cit.forEach(t),ZAe.forEach(t),uzo=i(na),afe=n(na,"P",{});var Mit=s(afe);bzo=r(Mit,"Examples:"),Mit.forEach(t),vzo=i(na),m(dy.$$.fragment,na),na.forEach(t),xl.forEach(t),SRe=i(d),ec=n(d,"H2",{class:!0});var zPe=s(ec);e6=n(zPe,"A",{id:!0,class:!0,href:!0});var Eit=s(e6);nfe=n(Eit,"SPAN",{});var yit=s(nfe);m(cy.$$.fragment,yit),yit.forEach(t),Eit.forEach(t),Tzo=i(zPe),sfe=n(zPe,"SPAN",{});var wit=s(sfe);Fzo=r(wit,"AutoModelForAudioXVector"),wit.forEach(t),zPe.forEach(t),PRe=i(d),hr=n(d,"DIV",{class:!0});var Rl=s(hr);m(fy.$$.fragment,Rl),Czo=i(Rl),oc=n(Rl,"P",{});var JW=s(oc);Mzo=r(JW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),lfe=n(JW,"CODE",{});var Ait=s(lfe);Ezo=r(Ait,"from_pretrained()"),Ait.forEach(t),yzo=r(JW,"class method or the "),ife=n(JW,"CODE",{});var Lit=s(ife);wzo=r(Lit,"from_config()"),Lit.forEach(t),Azo=r(JW,`class
method.`),JW.forEach(t),Lzo=i(Rl),my=n(Rl,"P",{});var WPe=s(my);Bzo=r(WPe,"This class cannot be instantiated directly using "),dfe=n(WPe,"CODE",{});var Bit=s(dfe);xzo=r(Bit,"__init__()"),Bit.forEach(t),kzo=r(WPe," (throws an error)."),WPe.forEach(t),Rzo=i(Rl),dt=n(Rl,"DIV",{class:!0});var Sl=s(dt);m(gy.$$.fragment,Sl),Szo=i(Sl),cfe=n(Sl,"P",{});var xit=s(cfe);Pzo=r(xit,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),xit.forEach(t),$zo=i(Sl),rc=n(Sl,"P",{});var YW=s(rc);Izo=r(YW,`Note:
Loading a model from its configuration file does `),ffe=n(YW,"STRONG",{});var kit=s(ffe);jzo=r(kit,"not"),kit.forEach(t),Dzo=r(YW,` load the model weights. It only affects the
model\u2019s configuration. Use `),mfe=n(YW,"CODE",{});var Rit=s(mfe);Nzo=r(Rit,"from_pretrained()"),Rit.forEach(t),qzo=r(YW,"to load the model weights."),YW.forEach(t),Gzo=i(Sl),gfe=n(Sl,"P",{});var Sit=s(gfe);Ozo=r(Sit,"Examples:"),Sit.forEach(t),Xzo=i(Sl),m(hy.$$.fragment,Sl),Sl.forEach(t),Vzo=i(Rl),eo=n(Rl,"DIV",{class:!0});var sa=s(eo);m(py.$$.fragment,sa),zzo=i(sa),hfe=n(sa,"P",{});var Pit=s(hfe);Wzo=r(Pit,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Pit.forEach(t),Qzo=i(sa),gn=n(sa,"P",{});var NM=s(gn);Hzo=r(NM,"The model class to instantiate is selected based on the "),pfe=n(NM,"CODE",{});var $it=s(pfe);Uzo=r($it,"model_type"),$it.forEach(t),Jzo=r(NM,` property of the config object (either
passed as an argument or loaded from `),_fe=n(NM,"CODE",{});var Iit=s(_fe);Yzo=r(Iit,"pretrained_model_name_or_path"),Iit.forEach(t),Kzo=r(NM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ufe=n(NM,"CODE",{});var jit=s(ufe);Zzo=r(jit,"pretrained_model_name_or_path"),jit.forEach(t),eWo=r(NM,":"),NM.forEach(t),oWo=i(sa),hn=n(sa,"UL",{});var qM=s(hn);o6=n(qM,"LI",{});var eLe=s(o6);bfe=n(eLe,"STRONG",{});var Dit=s(bfe);rWo=r(Dit,"data2vec-audio"),Dit.forEach(t),tWo=r(eLe," \u2014 "),kq=n(eLe,"A",{href:!0});var Nit=s(kq);aWo=r(Nit,"Data2VecAudioForXVector"),Nit.forEach(t),nWo=r(eLe," (Data2VecAudio model)"),eLe.forEach(t),sWo=i(qM),r6=n(qM,"LI",{});var oLe=s(r6);vfe=n(oLe,"STRONG",{});var qit=s(vfe);lWo=r(qit,"unispeech-sat"),qit.forEach(t),iWo=r(oLe," \u2014 "),Rq=n(oLe,"A",{href:!0});var Git=s(Rq);dWo=r(Git,"UniSpeechSatForXVector"),Git.forEach(t),cWo=r(oLe," (UniSpeechSat model)"),oLe.forEach(t),fWo=i(qM),t6=n(qM,"LI",{});var rLe=s(t6);Tfe=n(rLe,"STRONG",{});var Oit=s(Tfe);mWo=r(Oit,"wav2vec2"),Oit.forEach(t),gWo=r(rLe," \u2014 "),Sq=n(rLe,"A",{href:!0});var Xit=s(Sq);hWo=r(Xit,"Wav2Vec2ForXVector"),Xit.forEach(t),pWo=r(rLe," (Wav2Vec2 model)"),rLe.forEach(t),_Wo=i(qM),a6=n(qM,"LI",{});var tLe=s(a6);Ffe=n(tLe,"STRONG",{});var Vit=s(Ffe);uWo=r(Vit,"wavlm"),Vit.forEach(t),bWo=r(tLe," \u2014 "),Pq=n(tLe,"A",{href:!0});var zit=s(Pq);vWo=r(zit,"WavLMForXVector"),zit.forEach(t),TWo=r(tLe," (WavLM model)"),tLe.forEach(t),qM.forEach(t),FWo=i(sa),n6=n(sa,"P",{});var aLe=s(n6);CWo=r(aLe,"The model is set in evaluation mode by default using "),Cfe=n(aLe,"CODE",{});var Wit=s(Cfe);MWo=r(Wit,"model.eval()"),Wit.forEach(t),EWo=r(aLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mfe=n(aLe,"CODE",{});var Qit=s(Mfe);yWo=r(Qit,"model.train()"),Qit.forEach(t),aLe.forEach(t),wWo=i(sa),Efe=n(sa,"P",{});var Hit=s(Efe);AWo=r(Hit,"Examples:"),Hit.forEach(t),LWo=i(sa),m(_y.$$.fragment,sa),sa.forEach(t),Rl.forEach(t),$Re=i(d),tc=n(d,"H2",{class:!0});var QPe=s(tc);s6=n(QPe,"A",{id:!0,class:!0,href:!0});var Uit=s(s6);yfe=n(Uit,"SPAN",{});var Jit=s(yfe);m(uy.$$.fragment,Jit),Jit.forEach(t),Uit.forEach(t),BWo=i(QPe),wfe=n(QPe,"SPAN",{});var Yit=s(wfe);xWo=r(Yit,"AutoModelForMaskedImageModeling"),Yit.forEach(t),QPe.forEach(t),IRe=i(d),pr=n(d,"DIV",{class:!0});var Pl=s(pr);m(by.$$.fragment,Pl),kWo=i(Pl),ac=n(Pl,"P",{});var KW=s(ac);RWo=r(KW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Afe=n(KW,"CODE",{});var Kit=s(Afe);SWo=r(Kit,"from_pretrained()"),Kit.forEach(t),PWo=r(KW,"class method or the "),Lfe=n(KW,"CODE",{});var Zit=s(Lfe);$Wo=r(Zit,"from_config()"),Zit.forEach(t),IWo=r(KW,`class
method.`),KW.forEach(t),jWo=i(Pl),vy=n(Pl,"P",{});var HPe=s(vy);DWo=r(HPe,"This class cannot be instantiated directly using "),Bfe=n(HPe,"CODE",{});var edt=s(Bfe);NWo=r(edt,"__init__()"),edt.forEach(t),qWo=r(HPe," (throws an error)."),HPe.forEach(t),GWo=i(Pl),ct=n(Pl,"DIV",{class:!0});var $l=s(ct);m(Ty.$$.fragment,$l),OWo=i($l),xfe=n($l,"P",{});var odt=s(xfe);XWo=r(odt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),odt.forEach(t),VWo=i($l),nc=n($l,"P",{});var ZW=s(nc);zWo=r(ZW,`Note:
Loading a model from its configuration file does `),kfe=n(ZW,"STRONG",{});var rdt=s(kfe);WWo=r(rdt,"not"),rdt.forEach(t),QWo=r(ZW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rfe=n(ZW,"CODE",{});var tdt=s(Rfe);HWo=r(tdt,"from_pretrained()"),tdt.forEach(t),UWo=r(ZW,"to load the model weights."),ZW.forEach(t),JWo=i($l),Sfe=n($l,"P",{});var adt=s(Sfe);YWo=r(adt,"Examples:"),adt.forEach(t),KWo=i($l),m(Fy.$$.fragment,$l),$l.forEach(t),ZWo=i(Pl),oo=n(Pl,"DIV",{class:!0});var la=s(oo);m(Cy.$$.fragment,la),eQo=i(la),Pfe=n(la,"P",{});var ndt=s(Pfe);oQo=r(ndt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),ndt.forEach(t),rQo=i(la),pn=n(la,"P",{});var GM=s(pn);tQo=r(GM,"The model class to instantiate is selected based on the "),$fe=n(GM,"CODE",{});var sdt=s($fe);aQo=r(sdt,"model_type"),sdt.forEach(t),nQo=r(GM,` property of the config object (either
passed as an argument or loaded from `),Ife=n(GM,"CODE",{});var ldt=s(Ife);sQo=r(ldt,"pretrained_model_name_or_path"),ldt.forEach(t),lQo=r(GM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jfe=n(GM,"CODE",{});var idt=s(jfe);iQo=r(idt,"pretrained_model_name_or_path"),idt.forEach(t),dQo=r(GM,":"),GM.forEach(t),cQo=i(la),sc=n(la,"UL",{});var eQ=s(sc);l6=n(eQ,"LI",{});var nLe=s(l6);Dfe=n(nLe,"STRONG",{});var ddt=s(Dfe);fQo=r(ddt,"deit"),ddt.forEach(t),mQo=r(nLe," \u2014 "),$q=n(nLe,"A",{href:!0});var cdt=s($q);gQo=r(cdt,"DeiTForMaskedImageModeling"),cdt.forEach(t),hQo=r(nLe," (DeiT model)"),nLe.forEach(t),pQo=i(eQ),i6=n(eQ,"LI",{});var sLe=s(i6);Nfe=n(sLe,"STRONG",{});var fdt=s(Nfe);_Qo=r(fdt,"swin"),fdt.forEach(t),uQo=r(sLe," \u2014 "),Iq=n(sLe,"A",{href:!0});var mdt=s(Iq);bQo=r(mdt,"SwinForMaskedImageModeling"),mdt.forEach(t),vQo=r(sLe," (Swin model)"),sLe.forEach(t),TQo=i(eQ),d6=n(eQ,"LI",{});var lLe=s(d6);qfe=n(lLe,"STRONG",{});var gdt=s(qfe);FQo=r(gdt,"vit"),gdt.forEach(t),CQo=r(lLe," \u2014 "),jq=n(lLe,"A",{href:!0});var hdt=s(jq);MQo=r(hdt,"ViTForMaskedImageModeling"),hdt.forEach(t),EQo=r(lLe," (ViT model)"),lLe.forEach(t),eQ.forEach(t),yQo=i(la),c6=n(la,"P",{});var iLe=s(c6);wQo=r(iLe,"The model is set in evaluation mode by default using "),Gfe=n(iLe,"CODE",{});var pdt=s(Gfe);AQo=r(pdt,"model.eval()"),pdt.forEach(t),LQo=r(iLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ofe=n(iLe,"CODE",{});var _dt=s(Ofe);BQo=r(_dt,"model.train()"),_dt.forEach(t),iLe.forEach(t),xQo=i(la),Xfe=n(la,"P",{});var udt=s(Xfe);kQo=r(udt,"Examples:"),udt.forEach(t),RQo=i(la),m(My.$$.fragment,la),la.forEach(t),Pl.forEach(t),jRe=i(d),lc=n(d,"H2",{class:!0});var UPe=s(lc);f6=n(UPe,"A",{id:!0,class:!0,href:!0});var bdt=s(f6);Vfe=n(bdt,"SPAN",{});var vdt=s(Vfe);m(Ey.$$.fragment,vdt),vdt.forEach(t),bdt.forEach(t),SQo=i(UPe),zfe=n(UPe,"SPAN",{});var Tdt=s(zfe);PQo=r(Tdt,"AutoModelForObjectDetection"),Tdt.forEach(t),UPe.forEach(t),DRe=i(d),_r=n(d,"DIV",{class:!0});var Il=s(_r);m(yy.$$.fragment,Il),$Qo=i(Il),ic=n(Il,"P",{});var oQ=s(ic);IQo=r(oQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Wfe=n(oQ,"CODE",{});var Fdt=s(Wfe);jQo=r(Fdt,"from_pretrained()"),Fdt.forEach(t),DQo=r(oQ,"class method or the "),Qfe=n(oQ,"CODE",{});var Cdt=s(Qfe);NQo=r(Cdt,"from_config()"),Cdt.forEach(t),qQo=r(oQ,`class
method.`),oQ.forEach(t),GQo=i(Il),wy=n(Il,"P",{});var JPe=s(wy);OQo=r(JPe,"This class cannot be instantiated directly using "),Hfe=n(JPe,"CODE",{});var Mdt=s(Hfe);XQo=r(Mdt,"__init__()"),Mdt.forEach(t),VQo=r(JPe," (throws an error)."),JPe.forEach(t),zQo=i(Il),ft=n(Il,"DIV",{class:!0});var jl=s(ft);m(Ay.$$.fragment,jl),WQo=i(jl),Ufe=n(jl,"P",{});var Edt=s(Ufe);QQo=r(Edt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Edt.forEach(t),HQo=i(jl),dc=n(jl,"P",{});var rQ=s(dc);UQo=r(rQ,`Note:
Loading a model from its configuration file does `),Jfe=n(rQ,"STRONG",{});var ydt=s(Jfe);JQo=r(ydt,"not"),ydt.forEach(t),YQo=r(rQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yfe=n(rQ,"CODE",{});var wdt=s(Yfe);KQo=r(wdt,"from_pretrained()"),wdt.forEach(t),ZQo=r(rQ,"to load the model weights."),rQ.forEach(t),eHo=i(jl),Kfe=n(jl,"P",{});var Adt=s(Kfe);oHo=r(Adt,"Examples:"),Adt.forEach(t),rHo=i(jl),m(Ly.$$.fragment,jl),jl.forEach(t),tHo=i(Il),ro=n(Il,"DIV",{class:!0});var ia=s(ro);m(By.$$.fragment,ia),aHo=i(ia),Zfe=n(ia,"P",{});var Ldt=s(Zfe);nHo=r(Ldt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Ldt.forEach(t),sHo=i(ia),_n=n(ia,"P",{});var OM=s(_n);lHo=r(OM,"The model class to instantiate is selected based on the "),eme=n(OM,"CODE",{});var Bdt=s(eme);iHo=r(Bdt,"model_type"),Bdt.forEach(t),dHo=r(OM,` property of the config object (either
passed as an argument or loaded from `),ome=n(OM,"CODE",{});var xdt=s(ome);cHo=r(xdt,"pretrained_model_name_or_path"),xdt.forEach(t),fHo=r(OM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rme=n(OM,"CODE",{});var kdt=s(rme);mHo=r(kdt,"pretrained_model_name_or_path"),kdt.forEach(t),gHo=r(OM,":"),OM.forEach(t),hHo=i(ia),tme=n(ia,"UL",{});var Rdt=s(tme);m6=n(Rdt,"LI",{});var dLe=s(m6);ame=n(dLe,"STRONG",{});var Sdt=s(ame);pHo=r(Sdt,"detr"),Sdt.forEach(t),_Ho=r(dLe," \u2014 "),Dq=n(dLe,"A",{href:!0});var Pdt=s(Dq);uHo=r(Pdt,"DetrForObjectDetection"),Pdt.forEach(t),bHo=r(dLe," (DETR model)"),dLe.forEach(t),Rdt.forEach(t),vHo=i(ia),g6=n(ia,"P",{});var cLe=s(g6);THo=r(cLe,"The model is set in evaluation mode by default using "),nme=n(cLe,"CODE",{});var $dt=s(nme);FHo=r($dt,"model.eval()"),$dt.forEach(t),CHo=r(cLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sme=n(cLe,"CODE",{});var Idt=s(sme);MHo=r(Idt,"model.train()"),Idt.forEach(t),cLe.forEach(t),EHo=i(ia),lme=n(ia,"P",{});var jdt=s(lme);yHo=r(jdt,"Examples:"),jdt.forEach(t),wHo=i(ia),m(xy.$$.fragment,ia),ia.forEach(t),Il.forEach(t),NRe=i(d),cc=n(d,"H2",{class:!0});var YPe=s(cc);h6=n(YPe,"A",{id:!0,class:!0,href:!0});var Ddt=s(h6);ime=n(Ddt,"SPAN",{});var Ndt=s(ime);m(ky.$$.fragment,Ndt),Ndt.forEach(t),Ddt.forEach(t),AHo=i(YPe),dme=n(YPe,"SPAN",{});var qdt=s(dme);LHo=r(qdt,"AutoModelForImageSegmentation"),qdt.forEach(t),YPe.forEach(t),qRe=i(d),ur=n(d,"DIV",{class:!0});var Dl=s(ur);m(Ry.$$.fragment,Dl),BHo=i(Dl),fc=n(Dl,"P",{});var tQ=s(fc);xHo=r(tQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),cme=n(tQ,"CODE",{});var Gdt=s(cme);kHo=r(Gdt,"from_pretrained()"),Gdt.forEach(t),RHo=r(tQ,"class method or the "),fme=n(tQ,"CODE",{});var Odt=s(fme);SHo=r(Odt,"from_config()"),Odt.forEach(t),PHo=r(tQ,`class
method.`),tQ.forEach(t),$Ho=i(Dl),Sy=n(Dl,"P",{});var KPe=s(Sy);IHo=r(KPe,"This class cannot be instantiated directly using "),mme=n(KPe,"CODE",{});var Xdt=s(mme);jHo=r(Xdt,"__init__()"),Xdt.forEach(t),DHo=r(KPe," (throws an error)."),KPe.forEach(t),NHo=i(Dl),mt=n(Dl,"DIV",{class:!0});var Nl=s(mt);m(Py.$$.fragment,Nl),qHo=i(Nl),gme=n(Nl,"P",{});var Vdt=s(gme);GHo=r(Vdt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Vdt.forEach(t),OHo=i(Nl),mc=n(Nl,"P",{});var aQ=s(mc);XHo=r(aQ,`Note:
Loading a model from its configuration file does `),hme=n(aQ,"STRONG",{});var zdt=s(hme);VHo=r(zdt,"not"),zdt.forEach(t),zHo=r(aQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pme=n(aQ,"CODE",{});var Wdt=s(pme);WHo=r(Wdt,"from_pretrained()"),Wdt.forEach(t),QHo=r(aQ,"to load the model weights."),aQ.forEach(t),HHo=i(Nl),_me=n(Nl,"P",{});var Qdt=s(_me);UHo=r(Qdt,"Examples:"),Qdt.forEach(t),JHo=i(Nl),m($y.$$.fragment,Nl),Nl.forEach(t),YHo=i(Dl),to=n(Dl,"DIV",{class:!0});var da=s(to);m(Iy.$$.fragment,da),KHo=i(da),ume=n(da,"P",{});var Hdt=s(ume);ZHo=r(Hdt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Hdt.forEach(t),eUo=i(da),un=n(da,"P",{});var XM=s(un);oUo=r(XM,"The model class to instantiate is selected based on the "),bme=n(XM,"CODE",{});var Udt=s(bme);rUo=r(Udt,"model_type"),Udt.forEach(t),tUo=r(XM,` property of the config object (either
passed as an argument or loaded from `),vme=n(XM,"CODE",{});var Jdt=s(vme);aUo=r(Jdt,"pretrained_model_name_or_path"),Jdt.forEach(t),nUo=r(XM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tme=n(XM,"CODE",{});var Ydt=s(Tme);sUo=r(Ydt,"pretrained_model_name_or_path"),Ydt.forEach(t),lUo=r(XM,":"),XM.forEach(t),iUo=i(da),Fme=n(da,"UL",{});var Kdt=s(Fme);p6=n(Kdt,"LI",{});var fLe=s(p6);Cme=n(fLe,"STRONG",{});var Zdt=s(Cme);dUo=r(Zdt,"detr"),Zdt.forEach(t),cUo=r(fLe," \u2014 "),Nq=n(fLe,"A",{href:!0});var ect=s(Nq);fUo=r(ect,"DetrForSegmentation"),ect.forEach(t),mUo=r(fLe," (DETR model)"),fLe.forEach(t),Kdt.forEach(t),gUo=i(da),_6=n(da,"P",{});var mLe=s(_6);hUo=r(mLe,"The model is set in evaluation mode by default using "),Mme=n(mLe,"CODE",{});var oct=s(Mme);pUo=r(oct,"model.eval()"),oct.forEach(t),_Uo=r(mLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eme=n(mLe,"CODE",{});var rct=s(Eme);uUo=r(rct,"model.train()"),rct.forEach(t),mLe.forEach(t),bUo=i(da),yme=n(da,"P",{});var tct=s(yme);vUo=r(tct,"Examples:"),tct.forEach(t),TUo=i(da),m(jy.$$.fragment,da),da.forEach(t),Dl.forEach(t),GRe=i(d),gc=n(d,"H2",{class:!0});var ZPe=s(gc);u6=n(ZPe,"A",{id:!0,class:!0,href:!0});var act=s(u6);wme=n(act,"SPAN",{});var nct=s(wme);m(Dy.$$.fragment,nct),nct.forEach(t),act.forEach(t),FUo=i(ZPe),Ame=n(ZPe,"SPAN",{});var sct=s(Ame);CUo=r(sct,"AutoModelForSemanticSegmentation"),sct.forEach(t),ZPe.forEach(t),ORe=i(d),br=n(d,"DIV",{class:!0});var ql=s(br);m(Ny.$$.fragment,ql),MUo=i(ql),hc=n(ql,"P",{});var nQ=s(hc);EUo=r(nQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Lme=n(nQ,"CODE",{});var lct=s(Lme);yUo=r(lct,"from_pretrained()"),lct.forEach(t),wUo=r(nQ,"class method or the "),Bme=n(nQ,"CODE",{});var ict=s(Bme);AUo=r(ict,"from_config()"),ict.forEach(t),LUo=r(nQ,`class
method.`),nQ.forEach(t),BUo=i(ql),qy=n(ql,"P",{});var e$e=s(qy);xUo=r(e$e,"This class cannot be instantiated directly using "),xme=n(e$e,"CODE",{});var dct=s(xme);kUo=r(dct,"__init__()"),dct.forEach(t),RUo=r(e$e," (throws an error)."),e$e.forEach(t),SUo=i(ql),gt=n(ql,"DIV",{class:!0});var Gl=s(gt);m(Gy.$$.fragment,Gl),PUo=i(Gl),kme=n(Gl,"P",{});var cct=s(kme);$Uo=r(cct,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),cct.forEach(t),IUo=i(Gl),pc=n(Gl,"P",{});var sQ=s(pc);jUo=r(sQ,`Note:
Loading a model from its configuration file does `),Rme=n(sQ,"STRONG",{});var fct=s(Rme);DUo=r(fct,"not"),fct.forEach(t),NUo=r(sQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sme=n(sQ,"CODE",{});var mct=s(Sme);qUo=r(mct,"from_pretrained()"),mct.forEach(t),GUo=r(sQ,"to load the model weights."),sQ.forEach(t),OUo=i(Gl),Pme=n(Gl,"P",{});var gct=s(Pme);XUo=r(gct,"Examples:"),gct.forEach(t),VUo=i(Gl),m(Oy.$$.fragment,Gl),Gl.forEach(t),zUo=i(ql),ao=n(ql,"DIV",{class:!0});var ca=s(ao);m(Xy.$$.fragment,ca),WUo=i(ca),$me=n(ca,"P",{});var hct=s($me);QUo=r(hct,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),hct.forEach(t),HUo=i(ca),bn=n(ca,"P",{});var VM=s(bn);UUo=r(VM,"The model class to instantiate is selected based on the "),Ime=n(VM,"CODE",{});var pct=s(Ime);JUo=r(pct,"model_type"),pct.forEach(t),YUo=r(VM,` property of the config object (either
passed as an argument or loaded from `),jme=n(VM,"CODE",{});var _ct=s(jme);KUo=r(_ct,"pretrained_model_name_or_path"),_ct.forEach(t),ZUo=r(VM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dme=n(VM,"CODE",{});var uct=s(Dme);eJo=r(uct,"pretrained_model_name_or_path"),uct.forEach(t),oJo=r(VM,":"),VM.forEach(t),rJo=i(ca),Vy=n(ca,"UL",{});var o$e=s(Vy);b6=n(o$e,"LI",{});var gLe=s(b6);Nme=n(gLe,"STRONG",{});var bct=s(Nme);tJo=r(bct,"beit"),bct.forEach(t),aJo=r(gLe," \u2014 "),qq=n(gLe,"A",{href:!0});var vct=s(qq);nJo=r(vct,"BeitForSemanticSegmentation"),vct.forEach(t),sJo=r(gLe," (BEiT model)"),gLe.forEach(t),lJo=i(o$e),v6=n(o$e,"LI",{});var hLe=s(v6);qme=n(hLe,"STRONG",{});var Tct=s(qme);iJo=r(Tct,"segformer"),Tct.forEach(t),dJo=r(hLe," \u2014 "),Gq=n(hLe,"A",{href:!0});var Fct=s(Gq);cJo=r(Fct,"SegformerForSemanticSegmentation"),Fct.forEach(t),fJo=r(hLe," (SegFormer model)"),hLe.forEach(t),o$e.forEach(t),mJo=i(ca),T6=n(ca,"P",{});var pLe=s(T6);gJo=r(pLe,"The model is set in evaluation mode by default using "),Gme=n(pLe,"CODE",{});var Cct=s(Gme);hJo=r(Cct,"model.eval()"),Cct.forEach(t),pJo=r(pLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ome=n(pLe,"CODE",{});var Mct=s(Ome);_Jo=r(Mct,"model.train()"),Mct.forEach(t),pLe.forEach(t),uJo=i(ca),Xme=n(ca,"P",{});var Ect=s(Xme);bJo=r(Ect,"Examples:"),Ect.forEach(t),vJo=i(ca),m(zy.$$.fragment,ca),ca.forEach(t),ql.forEach(t),XRe=i(d),_c=n(d,"H2",{class:!0});var r$e=s(_c);F6=n(r$e,"A",{id:!0,class:!0,href:!0});var yct=s(F6);Vme=n(yct,"SPAN",{});var wct=s(Vme);m(Wy.$$.fragment,wct),wct.forEach(t),yct.forEach(t),TJo=i(r$e),zme=n(r$e,"SPAN",{});var Act=s(zme);FJo=r(Act,"AutoModelForInstanceSegmentation"),Act.forEach(t),r$e.forEach(t),VRe=i(d),vr=n(d,"DIV",{class:!0});var Ol=s(vr);m(Qy.$$.fragment,Ol),CJo=i(Ol),uc=n(Ol,"P",{});var lQ=s(uc);MJo=r(lQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Wme=n(lQ,"CODE",{});var Lct=s(Wme);EJo=r(Lct,"from_pretrained()"),Lct.forEach(t),yJo=r(lQ,"class method or the "),Qme=n(lQ,"CODE",{});var Bct=s(Qme);wJo=r(Bct,"from_config()"),Bct.forEach(t),AJo=r(lQ,`class
method.`),lQ.forEach(t),LJo=i(Ol),Hy=n(Ol,"P",{});var t$e=s(Hy);BJo=r(t$e,"This class cannot be instantiated directly using "),Hme=n(t$e,"CODE",{});var xct=s(Hme);xJo=r(xct,"__init__()"),xct.forEach(t),kJo=r(t$e," (throws an error)."),t$e.forEach(t),RJo=i(Ol),ht=n(Ol,"DIV",{class:!0});var Xl=s(ht);m(Uy.$$.fragment,Xl),SJo=i(Xl),Ume=n(Xl,"P",{});var kct=s(Ume);PJo=r(kct,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),kct.forEach(t),$Jo=i(Xl),bc=n(Xl,"P",{});var iQ=s(bc);IJo=r(iQ,`Note:
Loading a model from its configuration file does `),Jme=n(iQ,"STRONG",{});var Rct=s(Jme);jJo=r(Rct,"not"),Rct.forEach(t),DJo=r(iQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yme=n(iQ,"CODE",{});var Sct=s(Yme);NJo=r(Sct,"from_pretrained()"),Sct.forEach(t),qJo=r(iQ,"to load the model weights."),iQ.forEach(t),GJo=i(Xl),Kme=n(Xl,"P",{});var Pct=s(Kme);OJo=r(Pct,"Examples:"),Pct.forEach(t),XJo=i(Xl),m(Jy.$$.fragment,Xl),Xl.forEach(t),VJo=i(Ol),no=n(Ol,"DIV",{class:!0});var fa=s(no);m(Yy.$$.fragment,fa),zJo=i(fa),Zme=n(fa,"P",{});var $ct=s(Zme);WJo=r($ct,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),$ct.forEach(t),QJo=i(fa),vn=n(fa,"P",{});var zM=s(vn);HJo=r(zM,"The model class to instantiate is selected based on the "),ege=n(zM,"CODE",{});var Ict=s(ege);UJo=r(Ict,"model_type"),Ict.forEach(t),JJo=r(zM,` property of the config object (either
passed as an argument or loaded from `),oge=n(zM,"CODE",{});var jct=s(oge);YJo=r(jct,"pretrained_model_name_or_path"),jct.forEach(t),KJo=r(zM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rge=n(zM,"CODE",{});var Dct=s(rge);ZJo=r(Dct,"pretrained_model_name_or_path"),Dct.forEach(t),eYo=r(zM,":"),zM.forEach(t),oYo=i(fa),tge=n(fa,"UL",{});var Nct=s(tge);C6=n(Nct,"LI",{});var _Le=s(C6);age=n(_Le,"STRONG",{});var qct=s(age);rYo=r(qct,"maskformer"),qct.forEach(t),tYo=r(_Le," \u2014 "),Oq=n(_Le,"A",{href:!0});var Gct=s(Oq);aYo=r(Gct,"MaskFormerForInstanceSegmentation"),Gct.forEach(t),nYo=r(_Le," (MaskFormer model)"),_Le.forEach(t),Nct.forEach(t),sYo=i(fa),M6=n(fa,"P",{});var uLe=s(M6);lYo=r(uLe,"The model is set in evaluation mode by default using "),nge=n(uLe,"CODE",{});var Oct=s(nge);iYo=r(Oct,"model.eval()"),Oct.forEach(t),dYo=r(uLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sge=n(uLe,"CODE",{});var Xct=s(sge);cYo=r(Xct,"model.train()"),Xct.forEach(t),uLe.forEach(t),fYo=i(fa),lge=n(fa,"P",{});var Vct=s(lge);mYo=r(Vct,"Examples:"),Vct.forEach(t),gYo=i(fa),m(Ky.$$.fragment,fa),fa.forEach(t),Ol.forEach(t),zRe=i(d),vc=n(d,"H2",{class:!0});var a$e=s(vc);E6=n(a$e,"A",{id:!0,class:!0,href:!0});var zct=s(E6);ige=n(zct,"SPAN",{});var Wct=s(ige);m(Zy.$$.fragment,Wct),Wct.forEach(t),zct.forEach(t),hYo=i(a$e),dge=n(a$e,"SPAN",{});var Qct=s(dge);pYo=r(Qct,"TFAutoModel"),Qct.forEach(t),a$e.forEach(t),WRe=i(d),Tr=n(d,"DIV",{class:!0});var Vl=s(Tr);m(ew.$$.fragment,Vl),_Yo=i(Vl),Tc=n(Vl,"P",{});var dQ=s(Tc);uYo=r(dQ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cge=n(dQ,"CODE",{});var Hct=s(cge);bYo=r(Hct,"from_pretrained()"),Hct.forEach(t),vYo=r(dQ,"class method or the "),fge=n(dQ,"CODE",{});var Uct=s(fge);TYo=r(Uct,"from_config()"),Uct.forEach(t),FYo=r(dQ,`class
method.`),dQ.forEach(t),CYo=i(Vl),ow=n(Vl,"P",{});var n$e=s(ow);MYo=r(n$e,"This class cannot be instantiated directly using "),mge=n(n$e,"CODE",{});var Jct=s(mge);EYo=r(Jct,"__init__()"),Jct.forEach(t),yYo=r(n$e," (throws an error)."),n$e.forEach(t),wYo=i(Vl),pt=n(Vl,"DIV",{class:!0});var zl=s(pt);m(rw.$$.fragment,zl),AYo=i(zl),gge=n(zl,"P",{});var Yct=s(gge);LYo=r(Yct,"Instantiates one of the base model classes of the library from a configuration."),Yct.forEach(t),BYo=i(zl),Fc=n(zl,"P",{});var cQ=s(Fc);xYo=r(cQ,`Note:
Loading a model from its configuration file does `),hge=n(cQ,"STRONG",{});var Kct=s(hge);kYo=r(Kct,"not"),Kct.forEach(t),RYo=r(cQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pge=n(cQ,"CODE",{});var Zct=s(pge);SYo=r(Zct,"from_pretrained()"),Zct.forEach(t),PYo=r(cQ,"to load the model weights."),cQ.forEach(t),$Yo=i(zl),_ge=n(zl,"P",{});var eft=s(_ge);IYo=r(eft,"Examples:"),eft.forEach(t),jYo=i(zl),m(tw.$$.fragment,zl),zl.forEach(t),DYo=i(Vl),ho=n(Vl,"DIV",{class:!0});var ba=s(ho);m(aw.$$.fragment,ba),NYo=i(ba),uge=n(ba,"P",{});var oft=s(uge);qYo=r(oft,"Instantiate one of the base model classes of the library from a pretrained model."),oft.forEach(t),GYo=i(ba),Tn=n(ba,"P",{});var WM=s(Tn);OYo=r(WM,"The model class to instantiate is selected based on the "),bge=n(WM,"CODE",{});var rft=s(bge);XYo=r(rft,"model_type"),rft.forEach(t),VYo=r(WM,` property of the config object (either
passed as an argument or loaded from `),vge=n(WM,"CODE",{});var tft=s(vge);zYo=r(tft,"pretrained_model_name_or_path"),tft.forEach(t),WYo=r(WM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tge=n(WM,"CODE",{});var aft=s(Tge);QYo=r(aft,"pretrained_model_name_or_path"),aft.forEach(t),HYo=r(WM,":"),WM.forEach(t),UYo=i(ba),B=n(ba,"UL",{});var x=s(B);y6=n(x,"LI",{});var bLe=s(y6);Fge=n(bLe,"STRONG",{});var nft=s(Fge);JYo=r(nft,"albert"),nft.forEach(t),YYo=r(bLe," \u2014 "),Xq=n(bLe,"A",{href:!0});var sft=s(Xq);KYo=r(sft,"TFAlbertModel"),sft.forEach(t),ZYo=r(bLe," (ALBERT model)"),bLe.forEach(t),eKo=i(x),w6=n(x,"LI",{});var vLe=s(w6);Cge=n(vLe,"STRONG",{});var lft=s(Cge);oKo=r(lft,"bart"),lft.forEach(t),rKo=r(vLe," \u2014 "),Vq=n(vLe,"A",{href:!0});var ift=s(Vq);tKo=r(ift,"TFBartModel"),ift.forEach(t),aKo=r(vLe," (BART model)"),vLe.forEach(t),nKo=i(x),A6=n(x,"LI",{});var TLe=s(A6);Mge=n(TLe,"STRONG",{});var dft=s(Mge);sKo=r(dft,"bert"),dft.forEach(t),lKo=r(TLe," \u2014 "),zq=n(TLe,"A",{href:!0});var cft=s(zq);iKo=r(cft,"TFBertModel"),cft.forEach(t),dKo=r(TLe," (BERT model)"),TLe.forEach(t),cKo=i(x),L6=n(x,"LI",{});var FLe=s(L6);Ege=n(FLe,"STRONG",{});var fft=s(Ege);fKo=r(fft,"blenderbot"),fft.forEach(t),mKo=r(FLe," \u2014 "),Wq=n(FLe,"A",{href:!0});var mft=s(Wq);gKo=r(mft,"TFBlenderbotModel"),mft.forEach(t),hKo=r(FLe," (Blenderbot model)"),FLe.forEach(t),pKo=i(x),B6=n(x,"LI",{});var CLe=s(B6);yge=n(CLe,"STRONG",{});var gft=s(yge);_Ko=r(gft,"blenderbot-small"),gft.forEach(t),uKo=r(CLe," \u2014 "),Qq=n(CLe,"A",{href:!0});var hft=s(Qq);bKo=r(hft,"TFBlenderbotSmallModel"),hft.forEach(t),vKo=r(CLe," (BlenderbotSmall model)"),CLe.forEach(t),TKo=i(x),x6=n(x,"LI",{});var MLe=s(x6);wge=n(MLe,"STRONG",{});var pft=s(wge);FKo=r(pft,"camembert"),pft.forEach(t),CKo=r(MLe," \u2014 "),Hq=n(MLe,"A",{href:!0});var _ft=s(Hq);MKo=r(_ft,"TFCamembertModel"),_ft.forEach(t),EKo=r(MLe," (CamemBERT model)"),MLe.forEach(t),yKo=i(x),k6=n(x,"LI",{});var ELe=s(k6);Age=n(ELe,"STRONG",{});var uft=s(Age);wKo=r(uft,"clip"),uft.forEach(t),AKo=r(ELe," \u2014 "),Uq=n(ELe,"A",{href:!0});var bft=s(Uq);LKo=r(bft,"TFCLIPModel"),bft.forEach(t),BKo=r(ELe," (CLIP model)"),ELe.forEach(t),xKo=i(x),R6=n(x,"LI",{});var yLe=s(R6);Lge=n(yLe,"STRONG",{});var vft=s(Lge);kKo=r(vft,"convbert"),vft.forEach(t),RKo=r(yLe," \u2014 "),Jq=n(yLe,"A",{href:!0});var Tft=s(Jq);SKo=r(Tft,"TFConvBertModel"),Tft.forEach(t),PKo=r(yLe," (ConvBERT model)"),yLe.forEach(t),$Ko=i(x),S6=n(x,"LI",{});var wLe=s(S6);Bge=n(wLe,"STRONG",{});var Fft=s(Bge);IKo=r(Fft,"convnext"),Fft.forEach(t),jKo=r(wLe," \u2014 "),Yq=n(wLe,"A",{href:!0});var Cft=s(Yq);DKo=r(Cft,"TFConvNextModel"),Cft.forEach(t),NKo=r(wLe," (ConvNext model)"),wLe.forEach(t),qKo=i(x),P6=n(x,"LI",{});var ALe=s(P6);xge=n(ALe,"STRONG",{});var Mft=s(xge);GKo=r(Mft,"ctrl"),Mft.forEach(t),OKo=r(ALe," \u2014 "),Kq=n(ALe,"A",{href:!0});var Eft=s(Kq);XKo=r(Eft,"TFCTRLModel"),Eft.forEach(t),VKo=r(ALe," (CTRL model)"),ALe.forEach(t),zKo=i(x),$6=n(x,"LI",{});var LLe=s($6);kge=n(LLe,"STRONG",{});var yft=s(kge);WKo=r(yft,"deberta"),yft.forEach(t),QKo=r(LLe," \u2014 "),Zq=n(LLe,"A",{href:!0});var wft=s(Zq);HKo=r(wft,"TFDebertaModel"),wft.forEach(t),UKo=r(LLe," (DeBERTa model)"),LLe.forEach(t),JKo=i(x),I6=n(x,"LI",{});var BLe=s(I6);Rge=n(BLe,"STRONG",{});var Aft=s(Rge);YKo=r(Aft,"deberta-v2"),Aft.forEach(t),KKo=r(BLe," \u2014 "),eG=n(BLe,"A",{href:!0});var Lft=s(eG);ZKo=r(Lft,"TFDebertaV2Model"),Lft.forEach(t),eZo=r(BLe," (DeBERTa-v2 model)"),BLe.forEach(t),oZo=i(x),j6=n(x,"LI",{});var xLe=s(j6);Sge=n(xLe,"STRONG",{});var Bft=s(Sge);rZo=r(Bft,"distilbert"),Bft.forEach(t),tZo=r(xLe," \u2014 "),oG=n(xLe,"A",{href:!0});var xft=s(oG);aZo=r(xft,"TFDistilBertModel"),xft.forEach(t),nZo=r(xLe," (DistilBERT model)"),xLe.forEach(t),sZo=i(x),D6=n(x,"LI",{});var kLe=s(D6);Pge=n(kLe,"STRONG",{});var kft=s(Pge);lZo=r(kft,"dpr"),kft.forEach(t),iZo=r(kLe," \u2014 "),rG=n(kLe,"A",{href:!0});var Rft=s(rG);dZo=r(Rft,"TFDPRQuestionEncoder"),Rft.forEach(t),cZo=r(kLe," (DPR model)"),kLe.forEach(t),fZo=i(x),N6=n(x,"LI",{});var RLe=s(N6);$ge=n(RLe,"STRONG",{});var Sft=s($ge);mZo=r(Sft,"electra"),Sft.forEach(t),gZo=r(RLe," \u2014 "),tG=n(RLe,"A",{href:!0});var Pft=s(tG);hZo=r(Pft,"TFElectraModel"),Pft.forEach(t),pZo=r(RLe," (ELECTRA model)"),RLe.forEach(t),_Zo=i(x),q6=n(x,"LI",{});var SLe=s(q6);Ige=n(SLe,"STRONG",{});var $ft=s(Ige);uZo=r($ft,"flaubert"),$ft.forEach(t),bZo=r(SLe," \u2014 "),aG=n(SLe,"A",{href:!0});var Ift=s(aG);vZo=r(Ift,"TFFlaubertModel"),Ift.forEach(t),TZo=r(SLe," (FlauBERT model)"),SLe.forEach(t),FZo=i(x),Ws=n(x,"LI",{});var u9=s(Ws);jge=n(u9,"STRONG",{});var jft=s(jge);CZo=r(jft,"funnel"),jft.forEach(t),MZo=r(u9," \u2014 "),nG=n(u9,"A",{href:!0});var Dft=s(nG);EZo=r(Dft,"TFFunnelModel"),Dft.forEach(t),yZo=r(u9," or "),sG=n(u9,"A",{href:!0});var Nft=s(sG);wZo=r(Nft,"TFFunnelBaseModel"),Nft.forEach(t),AZo=r(u9," (Funnel Transformer model)"),u9.forEach(t),LZo=i(x),G6=n(x,"LI",{});var PLe=s(G6);Dge=n(PLe,"STRONG",{});var qft=s(Dge);BZo=r(qft,"gpt2"),qft.forEach(t),xZo=r(PLe," \u2014 "),lG=n(PLe,"A",{href:!0});var Gft=s(lG);kZo=r(Gft,"TFGPT2Model"),Gft.forEach(t),RZo=r(PLe," (OpenAI GPT-2 model)"),PLe.forEach(t),SZo=i(x),O6=n(x,"LI",{});var $Le=s(O6);Nge=n($Le,"STRONG",{});var Oft=s(Nge);PZo=r(Oft,"hubert"),Oft.forEach(t),$Zo=r($Le," \u2014 "),iG=n($Le,"A",{href:!0});var Xft=s(iG);IZo=r(Xft,"TFHubertModel"),Xft.forEach(t),jZo=r($Le," (Hubert model)"),$Le.forEach(t),DZo=i(x),X6=n(x,"LI",{});var ILe=s(X6);qge=n(ILe,"STRONG",{});var Vft=s(qge);NZo=r(Vft,"layoutlm"),Vft.forEach(t),qZo=r(ILe," \u2014 "),dG=n(ILe,"A",{href:!0});var zft=s(dG);GZo=r(zft,"TFLayoutLMModel"),zft.forEach(t),OZo=r(ILe," (LayoutLM model)"),ILe.forEach(t),XZo=i(x),V6=n(x,"LI",{});var jLe=s(V6);Gge=n(jLe,"STRONG",{});var Wft=s(Gge);VZo=r(Wft,"led"),Wft.forEach(t),zZo=r(jLe," \u2014 "),cG=n(jLe,"A",{href:!0});var Qft=s(cG);WZo=r(Qft,"TFLEDModel"),Qft.forEach(t),QZo=r(jLe," (LED model)"),jLe.forEach(t),HZo=i(x),z6=n(x,"LI",{});var DLe=s(z6);Oge=n(DLe,"STRONG",{});var Hft=s(Oge);UZo=r(Hft,"longformer"),Hft.forEach(t),JZo=r(DLe," \u2014 "),fG=n(DLe,"A",{href:!0});var Uft=s(fG);YZo=r(Uft,"TFLongformerModel"),Uft.forEach(t),KZo=r(DLe," (Longformer model)"),DLe.forEach(t),ZZo=i(x),W6=n(x,"LI",{});var NLe=s(W6);Xge=n(NLe,"STRONG",{});var Jft=s(Xge);eer=r(Jft,"lxmert"),Jft.forEach(t),oer=r(NLe," \u2014 "),mG=n(NLe,"A",{href:!0});var Yft=s(mG);rer=r(Yft,"TFLxmertModel"),Yft.forEach(t),ter=r(NLe," (LXMERT model)"),NLe.forEach(t),aer=i(x),Q6=n(x,"LI",{});var qLe=s(Q6);Vge=n(qLe,"STRONG",{});var Kft=s(Vge);ner=r(Kft,"marian"),Kft.forEach(t),ser=r(qLe," \u2014 "),gG=n(qLe,"A",{href:!0});var Zft=s(gG);ler=r(Zft,"TFMarianModel"),Zft.forEach(t),ier=r(qLe," (Marian model)"),qLe.forEach(t),der=i(x),H6=n(x,"LI",{});var GLe=s(H6);zge=n(GLe,"STRONG",{});var emt=s(zge);cer=r(emt,"mbart"),emt.forEach(t),fer=r(GLe," \u2014 "),hG=n(GLe,"A",{href:!0});var omt=s(hG);mer=r(omt,"TFMBartModel"),omt.forEach(t),ger=r(GLe," (mBART model)"),GLe.forEach(t),her=i(x),U6=n(x,"LI",{});var OLe=s(U6);Wge=n(OLe,"STRONG",{});var rmt=s(Wge);per=r(rmt,"mobilebert"),rmt.forEach(t),_er=r(OLe," \u2014 "),pG=n(OLe,"A",{href:!0});var tmt=s(pG);uer=r(tmt,"TFMobileBertModel"),tmt.forEach(t),ber=r(OLe," (MobileBERT model)"),OLe.forEach(t),ver=i(x),J6=n(x,"LI",{});var XLe=s(J6);Qge=n(XLe,"STRONG",{});var amt=s(Qge);Ter=r(amt,"mpnet"),amt.forEach(t),Fer=r(XLe," \u2014 "),_G=n(XLe,"A",{href:!0});var nmt=s(_G);Cer=r(nmt,"TFMPNetModel"),nmt.forEach(t),Mer=r(XLe," (MPNet model)"),XLe.forEach(t),Eer=i(x),Y6=n(x,"LI",{});var VLe=s(Y6);Hge=n(VLe,"STRONG",{});var smt=s(Hge);yer=r(smt,"mt5"),smt.forEach(t),wer=r(VLe," \u2014 "),uG=n(VLe,"A",{href:!0});var lmt=s(uG);Aer=r(lmt,"TFMT5Model"),lmt.forEach(t),Ler=r(VLe," (mT5 model)"),VLe.forEach(t),Ber=i(x),K6=n(x,"LI",{});var zLe=s(K6);Uge=n(zLe,"STRONG",{});var imt=s(Uge);xer=r(imt,"openai-gpt"),imt.forEach(t),ker=r(zLe," \u2014 "),bG=n(zLe,"A",{href:!0});var dmt=s(bG);Rer=r(dmt,"TFOpenAIGPTModel"),dmt.forEach(t),Ser=r(zLe," (OpenAI GPT model)"),zLe.forEach(t),Per=i(x),Z6=n(x,"LI",{});var WLe=s(Z6);Jge=n(WLe,"STRONG",{});var cmt=s(Jge);$er=r(cmt,"pegasus"),cmt.forEach(t),Ier=r(WLe," \u2014 "),vG=n(WLe,"A",{href:!0});var fmt=s(vG);jer=r(fmt,"TFPegasusModel"),fmt.forEach(t),Der=r(WLe," (Pegasus model)"),WLe.forEach(t),Ner=i(x),e0=n(x,"LI",{});var QLe=s(e0);Yge=n(QLe,"STRONG",{});var mmt=s(Yge);qer=r(mmt,"rembert"),mmt.forEach(t),Ger=r(QLe," \u2014 "),TG=n(QLe,"A",{href:!0});var gmt=s(TG);Oer=r(gmt,"TFRemBertModel"),gmt.forEach(t),Xer=r(QLe," (RemBERT model)"),QLe.forEach(t),Ver=i(x),o0=n(x,"LI",{});var HLe=s(o0);Kge=n(HLe,"STRONG",{});var hmt=s(Kge);zer=r(hmt,"roberta"),hmt.forEach(t),Wer=r(HLe," \u2014 "),FG=n(HLe,"A",{href:!0});var pmt=s(FG);Qer=r(pmt,"TFRobertaModel"),pmt.forEach(t),Her=r(HLe," (RoBERTa model)"),HLe.forEach(t),Uer=i(x),r0=n(x,"LI",{});var ULe=s(r0);Zge=n(ULe,"STRONG",{});var _mt=s(Zge);Jer=r(_mt,"roformer"),_mt.forEach(t),Yer=r(ULe," \u2014 "),CG=n(ULe,"A",{href:!0});var umt=s(CG);Ker=r(umt,"TFRoFormerModel"),umt.forEach(t),Zer=r(ULe," (RoFormer model)"),ULe.forEach(t),eor=i(x),t0=n(x,"LI",{});var JLe=s(t0);ehe=n(JLe,"STRONG",{});var bmt=s(ehe);oor=r(bmt,"speech_to_text"),bmt.forEach(t),ror=r(JLe," \u2014 "),MG=n(JLe,"A",{href:!0});var vmt=s(MG);tor=r(vmt,"TFSpeech2TextModel"),vmt.forEach(t),aor=r(JLe," (Speech2Text model)"),JLe.forEach(t),nor=i(x),a0=n(x,"LI",{});var YLe=s(a0);ohe=n(YLe,"STRONG",{});var Tmt=s(ohe);sor=r(Tmt,"t5"),Tmt.forEach(t),lor=r(YLe," \u2014 "),EG=n(YLe,"A",{href:!0});var Fmt=s(EG);ior=r(Fmt,"TFT5Model"),Fmt.forEach(t),dor=r(YLe," (T5 model)"),YLe.forEach(t),cor=i(x),n0=n(x,"LI",{});var KLe=s(n0);rhe=n(KLe,"STRONG",{});var Cmt=s(rhe);mor=r(Cmt,"tapas"),Cmt.forEach(t),gor=r(KLe," \u2014 "),yG=n(KLe,"A",{href:!0});var Mmt=s(yG);hor=r(Mmt,"TFTapasModel"),Mmt.forEach(t),por=r(KLe," (TAPAS model)"),KLe.forEach(t),_or=i(x),s0=n(x,"LI",{});var ZLe=s(s0);the=n(ZLe,"STRONG",{});var Emt=s(the);uor=r(Emt,"transfo-xl"),Emt.forEach(t),bor=r(ZLe," \u2014 "),wG=n(ZLe,"A",{href:!0});var ymt=s(wG);vor=r(ymt,"TFTransfoXLModel"),ymt.forEach(t),Tor=r(ZLe," (Transformer-XL model)"),ZLe.forEach(t),For=i(x),l0=n(x,"LI",{});var e7e=s(l0);ahe=n(e7e,"STRONG",{});var wmt=s(ahe);Cor=r(wmt,"vit"),wmt.forEach(t),Mor=r(e7e," \u2014 "),AG=n(e7e,"A",{href:!0});var Amt=s(AG);Eor=r(Amt,"TFViTModel"),Amt.forEach(t),yor=r(e7e," (ViT model)"),e7e.forEach(t),wor=i(x),i0=n(x,"LI",{});var o7e=s(i0);nhe=n(o7e,"STRONG",{});var Lmt=s(nhe);Aor=r(Lmt,"wav2vec2"),Lmt.forEach(t),Lor=r(o7e," \u2014 "),LG=n(o7e,"A",{href:!0});var Bmt=s(LG);Bor=r(Bmt,"TFWav2Vec2Model"),Bmt.forEach(t),xor=r(o7e," (Wav2Vec2 model)"),o7e.forEach(t),kor=i(x),d0=n(x,"LI",{});var r7e=s(d0);she=n(r7e,"STRONG",{});var xmt=s(she);Ror=r(xmt,"xlm"),xmt.forEach(t),Sor=r(r7e," \u2014 "),BG=n(r7e,"A",{href:!0});var kmt=s(BG);Por=r(kmt,"TFXLMModel"),kmt.forEach(t),$or=r(r7e," (XLM model)"),r7e.forEach(t),Ior=i(x),c0=n(x,"LI",{});var t7e=s(c0);lhe=n(t7e,"STRONG",{});var Rmt=s(lhe);jor=r(Rmt,"xlm-roberta"),Rmt.forEach(t),Dor=r(t7e," \u2014 "),xG=n(t7e,"A",{href:!0});var Smt=s(xG);Nor=r(Smt,"TFXLMRobertaModel"),Smt.forEach(t),qor=r(t7e," (XLM-RoBERTa model)"),t7e.forEach(t),Gor=i(x),f0=n(x,"LI",{});var a7e=s(f0);ihe=n(a7e,"STRONG",{});var Pmt=s(ihe);Oor=r(Pmt,"xlnet"),Pmt.forEach(t),Xor=r(a7e," \u2014 "),kG=n(a7e,"A",{href:!0});var $mt=s(kG);Vor=r($mt,"TFXLNetModel"),$mt.forEach(t),zor=r(a7e," (XLNet model)"),a7e.forEach(t),x.forEach(t),Wor=i(ba),dhe=n(ba,"P",{});var Imt=s(dhe);Qor=r(Imt,"Examples:"),Imt.forEach(t),Hor=i(ba),m(nw.$$.fragment,ba),ba.forEach(t),Vl.forEach(t),QRe=i(d),Cc=n(d,"H2",{class:!0});var s$e=s(Cc);m0=n(s$e,"A",{id:!0,class:!0,href:!0});var jmt=s(m0);che=n(jmt,"SPAN",{});var Dmt=s(che);m(sw.$$.fragment,Dmt),Dmt.forEach(t),jmt.forEach(t),Uor=i(s$e),fhe=n(s$e,"SPAN",{});var Nmt=s(fhe);Jor=r(Nmt,"TFAutoModelForPreTraining"),Nmt.forEach(t),s$e.forEach(t),HRe=i(d),Fr=n(d,"DIV",{class:!0});var Wl=s(Fr);m(lw.$$.fragment,Wl),Yor=i(Wl),Mc=n(Wl,"P",{});var fQ=s(Mc);Kor=r(fQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),mhe=n(fQ,"CODE",{});var qmt=s(mhe);Zor=r(qmt,"from_pretrained()"),qmt.forEach(t),err=r(fQ,"class method or the "),ghe=n(fQ,"CODE",{});var Gmt=s(ghe);orr=r(Gmt,"from_config()"),Gmt.forEach(t),rrr=r(fQ,`class
method.`),fQ.forEach(t),trr=i(Wl),iw=n(Wl,"P",{});var l$e=s(iw);arr=r(l$e,"This class cannot be instantiated directly using "),hhe=n(l$e,"CODE",{});var Omt=s(hhe);nrr=r(Omt,"__init__()"),Omt.forEach(t),srr=r(l$e," (throws an error)."),l$e.forEach(t),lrr=i(Wl),_t=n(Wl,"DIV",{class:!0});var Ql=s(_t);m(dw.$$.fragment,Ql),irr=i(Ql),phe=n(Ql,"P",{});var Xmt=s(phe);drr=r(Xmt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Xmt.forEach(t),crr=i(Ql),Ec=n(Ql,"P",{});var mQ=s(Ec);frr=r(mQ,`Note:
Loading a model from its configuration file does `),_he=n(mQ,"STRONG",{});var Vmt=s(_he);mrr=r(Vmt,"not"),Vmt.forEach(t),grr=r(mQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uhe=n(mQ,"CODE",{});var zmt=s(uhe);hrr=r(zmt,"from_pretrained()"),zmt.forEach(t),prr=r(mQ,"to load the model weights."),mQ.forEach(t),_rr=i(Ql),bhe=n(Ql,"P",{});var Wmt=s(bhe);urr=r(Wmt,"Examples:"),Wmt.forEach(t),brr=i(Ql),m(cw.$$.fragment,Ql),Ql.forEach(t),vrr=i(Wl),po=n(Wl,"DIV",{class:!0});var va=s(po);m(fw.$$.fragment,va),Trr=i(va),vhe=n(va,"P",{});var Qmt=s(vhe);Frr=r(Qmt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Qmt.forEach(t),Crr=i(va),Fn=n(va,"P",{});var QM=s(Fn);Mrr=r(QM,"The model class to instantiate is selected based on the "),The=n(QM,"CODE",{});var Hmt=s(The);Err=r(Hmt,"model_type"),Hmt.forEach(t),yrr=r(QM,` property of the config object (either
passed as an argument or loaded from `),Fhe=n(QM,"CODE",{});var Umt=s(Fhe);wrr=r(Umt,"pretrained_model_name_or_path"),Umt.forEach(t),Arr=r(QM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Che=n(QM,"CODE",{});var Jmt=s(Che);Lrr=r(Jmt,"pretrained_model_name_or_path"),Jmt.forEach(t),Brr=r(QM,":"),QM.forEach(t),xrr=i(va),H=n(va,"UL",{});var U=s(H);g0=n(U,"LI",{});var n7e=s(g0);Mhe=n(n7e,"STRONG",{});var Ymt=s(Mhe);krr=r(Ymt,"albert"),Ymt.forEach(t),Rrr=r(n7e," \u2014 "),RG=n(n7e,"A",{href:!0});var Kmt=s(RG);Srr=r(Kmt,"TFAlbertForPreTraining"),Kmt.forEach(t),Prr=r(n7e," (ALBERT model)"),n7e.forEach(t),$rr=i(U),h0=n(U,"LI",{});var s7e=s(h0);Ehe=n(s7e,"STRONG",{});var Zmt=s(Ehe);Irr=r(Zmt,"bart"),Zmt.forEach(t),jrr=r(s7e," \u2014 "),SG=n(s7e,"A",{href:!0});var egt=s(SG);Drr=r(egt,"TFBartForConditionalGeneration"),egt.forEach(t),Nrr=r(s7e," (BART model)"),s7e.forEach(t),qrr=i(U),p0=n(U,"LI",{});var l7e=s(p0);yhe=n(l7e,"STRONG",{});var ogt=s(yhe);Grr=r(ogt,"bert"),ogt.forEach(t),Orr=r(l7e," \u2014 "),PG=n(l7e,"A",{href:!0});var rgt=s(PG);Xrr=r(rgt,"TFBertForPreTraining"),rgt.forEach(t),Vrr=r(l7e," (BERT model)"),l7e.forEach(t),zrr=i(U),_0=n(U,"LI",{});var i7e=s(_0);whe=n(i7e,"STRONG",{});var tgt=s(whe);Wrr=r(tgt,"camembert"),tgt.forEach(t),Qrr=r(i7e," \u2014 "),$G=n(i7e,"A",{href:!0});var agt=s($G);Hrr=r(agt,"TFCamembertForMaskedLM"),agt.forEach(t),Urr=r(i7e," (CamemBERT model)"),i7e.forEach(t),Jrr=i(U),u0=n(U,"LI",{});var d7e=s(u0);Ahe=n(d7e,"STRONG",{});var ngt=s(Ahe);Yrr=r(ngt,"ctrl"),ngt.forEach(t),Krr=r(d7e," \u2014 "),IG=n(d7e,"A",{href:!0});var sgt=s(IG);Zrr=r(sgt,"TFCTRLLMHeadModel"),sgt.forEach(t),etr=r(d7e," (CTRL model)"),d7e.forEach(t),otr=i(U),b0=n(U,"LI",{});var c7e=s(b0);Lhe=n(c7e,"STRONG",{});var lgt=s(Lhe);rtr=r(lgt,"distilbert"),lgt.forEach(t),ttr=r(c7e," \u2014 "),jG=n(c7e,"A",{href:!0});var igt=s(jG);atr=r(igt,"TFDistilBertForMaskedLM"),igt.forEach(t),ntr=r(c7e," (DistilBERT model)"),c7e.forEach(t),str=i(U),v0=n(U,"LI",{});var f7e=s(v0);Bhe=n(f7e,"STRONG",{});var dgt=s(Bhe);ltr=r(dgt,"electra"),dgt.forEach(t),itr=r(f7e," \u2014 "),DG=n(f7e,"A",{href:!0});var cgt=s(DG);dtr=r(cgt,"TFElectraForPreTraining"),cgt.forEach(t),ctr=r(f7e," (ELECTRA model)"),f7e.forEach(t),ftr=i(U),T0=n(U,"LI",{});var m7e=s(T0);xhe=n(m7e,"STRONG",{});var fgt=s(xhe);mtr=r(fgt,"flaubert"),fgt.forEach(t),gtr=r(m7e," \u2014 "),NG=n(m7e,"A",{href:!0});var mgt=s(NG);htr=r(mgt,"TFFlaubertWithLMHeadModel"),mgt.forEach(t),ptr=r(m7e," (FlauBERT model)"),m7e.forEach(t),_tr=i(U),F0=n(U,"LI",{});var g7e=s(F0);khe=n(g7e,"STRONG",{});var ggt=s(khe);utr=r(ggt,"funnel"),ggt.forEach(t),btr=r(g7e," \u2014 "),qG=n(g7e,"A",{href:!0});var hgt=s(qG);vtr=r(hgt,"TFFunnelForPreTraining"),hgt.forEach(t),Ttr=r(g7e," (Funnel Transformer model)"),g7e.forEach(t),Ftr=i(U),C0=n(U,"LI",{});var h7e=s(C0);Rhe=n(h7e,"STRONG",{});var pgt=s(Rhe);Ctr=r(pgt,"gpt2"),pgt.forEach(t),Mtr=r(h7e," \u2014 "),GG=n(h7e,"A",{href:!0});var _gt=s(GG);Etr=r(_gt,"TFGPT2LMHeadModel"),_gt.forEach(t),ytr=r(h7e," (OpenAI GPT-2 model)"),h7e.forEach(t),wtr=i(U),M0=n(U,"LI",{});var p7e=s(M0);She=n(p7e,"STRONG",{});var ugt=s(She);Atr=r(ugt,"layoutlm"),ugt.forEach(t),Ltr=r(p7e," \u2014 "),OG=n(p7e,"A",{href:!0});var bgt=s(OG);Btr=r(bgt,"TFLayoutLMForMaskedLM"),bgt.forEach(t),xtr=r(p7e," (LayoutLM model)"),p7e.forEach(t),ktr=i(U),E0=n(U,"LI",{});var _7e=s(E0);Phe=n(_7e,"STRONG",{});var vgt=s(Phe);Rtr=r(vgt,"lxmert"),vgt.forEach(t),Str=r(_7e," \u2014 "),XG=n(_7e,"A",{href:!0});var Tgt=s(XG);Ptr=r(Tgt,"TFLxmertForPreTraining"),Tgt.forEach(t),$tr=r(_7e," (LXMERT model)"),_7e.forEach(t),Itr=i(U),y0=n(U,"LI",{});var u7e=s(y0);$he=n(u7e,"STRONG",{});var Fgt=s($he);jtr=r(Fgt,"mobilebert"),Fgt.forEach(t),Dtr=r(u7e," \u2014 "),VG=n(u7e,"A",{href:!0});var Cgt=s(VG);Ntr=r(Cgt,"TFMobileBertForPreTraining"),Cgt.forEach(t),qtr=r(u7e," (MobileBERT model)"),u7e.forEach(t),Gtr=i(U),w0=n(U,"LI",{});var b7e=s(w0);Ihe=n(b7e,"STRONG",{});var Mgt=s(Ihe);Otr=r(Mgt,"mpnet"),Mgt.forEach(t),Xtr=r(b7e," \u2014 "),zG=n(b7e,"A",{href:!0});var Egt=s(zG);Vtr=r(Egt,"TFMPNetForMaskedLM"),Egt.forEach(t),ztr=r(b7e," (MPNet model)"),b7e.forEach(t),Wtr=i(U),A0=n(U,"LI",{});var v7e=s(A0);jhe=n(v7e,"STRONG",{});var ygt=s(jhe);Qtr=r(ygt,"openai-gpt"),ygt.forEach(t),Htr=r(v7e," \u2014 "),WG=n(v7e,"A",{href:!0});var wgt=s(WG);Utr=r(wgt,"TFOpenAIGPTLMHeadModel"),wgt.forEach(t),Jtr=r(v7e," (OpenAI GPT model)"),v7e.forEach(t),Ytr=i(U),L0=n(U,"LI",{});var T7e=s(L0);Dhe=n(T7e,"STRONG",{});var Agt=s(Dhe);Ktr=r(Agt,"roberta"),Agt.forEach(t),Ztr=r(T7e," \u2014 "),QG=n(T7e,"A",{href:!0});var Lgt=s(QG);ear=r(Lgt,"TFRobertaForMaskedLM"),Lgt.forEach(t),oar=r(T7e," (RoBERTa model)"),T7e.forEach(t),rar=i(U),B0=n(U,"LI",{});var F7e=s(B0);Nhe=n(F7e,"STRONG",{});var Bgt=s(Nhe);tar=r(Bgt,"t5"),Bgt.forEach(t),aar=r(F7e," \u2014 "),HG=n(F7e,"A",{href:!0});var xgt=s(HG);nar=r(xgt,"TFT5ForConditionalGeneration"),xgt.forEach(t),sar=r(F7e," (T5 model)"),F7e.forEach(t),lar=i(U),x0=n(U,"LI",{});var C7e=s(x0);qhe=n(C7e,"STRONG",{});var kgt=s(qhe);iar=r(kgt,"tapas"),kgt.forEach(t),dar=r(C7e," \u2014 "),UG=n(C7e,"A",{href:!0});var Rgt=s(UG);car=r(Rgt,"TFTapasForMaskedLM"),Rgt.forEach(t),far=r(C7e," (TAPAS model)"),C7e.forEach(t),mar=i(U),k0=n(U,"LI",{});var M7e=s(k0);Ghe=n(M7e,"STRONG",{});var Sgt=s(Ghe);gar=r(Sgt,"transfo-xl"),Sgt.forEach(t),har=r(M7e," \u2014 "),JG=n(M7e,"A",{href:!0});var Pgt=s(JG);par=r(Pgt,"TFTransfoXLLMHeadModel"),Pgt.forEach(t),_ar=r(M7e," (Transformer-XL model)"),M7e.forEach(t),uar=i(U),R0=n(U,"LI",{});var E7e=s(R0);Ohe=n(E7e,"STRONG",{});var $gt=s(Ohe);bar=r($gt,"xlm"),$gt.forEach(t),Tar=r(E7e," \u2014 "),YG=n(E7e,"A",{href:!0});var Igt=s(YG);Far=r(Igt,"TFXLMWithLMHeadModel"),Igt.forEach(t),Car=r(E7e," (XLM model)"),E7e.forEach(t),Mar=i(U),S0=n(U,"LI",{});var y7e=s(S0);Xhe=n(y7e,"STRONG",{});var jgt=s(Xhe);Ear=r(jgt,"xlm-roberta"),jgt.forEach(t),yar=r(y7e," \u2014 "),KG=n(y7e,"A",{href:!0});var Dgt=s(KG);war=r(Dgt,"TFXLMRobertaForMaskedLM"),Dgt.forEach(t),Aar=r(y7e," (XLM-RoBERTa model)"),y7e.forEach(t),Lar=i(U),P0=n(U,"LI",{});var w7e=s(P0);Vhe=n(w7e,"STRONG",{});var Ngt=s(Vhe);Bar=r(Ngt,"xlnet"),Ngt.forEach(t),xar=r(w7e," \u2014 "),ZG=n(w7e,"A",{href:!0});var qgt=s(ZG);kar=r(qgt,"TFXLNetLMHeadModel"),qgt.forEach(t),Rar=r(w7e," (XLNet model)"),w7e.forEach(t),U.forEach(t),Sar=i(va),zhe=n(va,"P",{});var Ggt=s(zhe);Par=r(Ggt,"Examples:"),Ggt.forEach(t),$ar=i(va),m(mw.$$.fragment,va),va.forEach(t),Wl.forEach(t),URe=i(d),yc=n(d,"H2",{class:!0});var i$e=s(yc);$0=n(i$e,"A",{id:!0,class:!0,href:!0});var Ogt=s($0);Whe=n(Ogt,"SPAN",{});var Xgt=s(Whe);m(gw.$$.fragment,Xgt),Xgt.forEach(t),Ogt.forEach(t),Iar=i(i$e),Qhe=n(i$e,"SPAN",{});var Vgt=s(Qhe);jar=r(Vgt,"TFAutoModelForCausalLM"),Vgt.forEach(t),i$e.forEach(t),JRe=i(d),Cr=n(d,"DIV",{class:!0});var Hl=s(Cr);m(hw.$$.fragment,Hl),Dar=i(Hl),wc=n(Hl,"P",{});var gQ=s(wc);Nar=r(gQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Hhe=n(gQ,"CODE",{});var zgt=s(Hhe);qar=r(zgt,"from_pretrained()"),zgt.forEach(t),Gar=r(gQ,"class method or the "),Uhe=n(gQ,"CODE",{});var Wgt=s(Uhe);Oar=r(Wgt,"from_config()"),Wgt.forEach(t),Xar=r(gQ,`class
method.`),gQ.forEach(t),Var=i(Hl),pw=n(Hl,"P",{});var d$e=s(pw);zar=r(d$e,"This class cannot be instantiated directly using "),Jhe=n(d$e,"CODE",{});var Qgt=s(Jhe);War=r(Qgt,"__init__()"),Qgt.forEach(t),Qar=r(d$e," (throws an error)."),d$e.forEach(t),Har=i(Hl),ut=n(Hl,"DIV",{class:!0});var Ul=s(ut);m(_w.$$.fragment,Ul),Uar=i(Ul),Yhe=n(Ul,"P",{});var Hgt=s(Yhe);Jar=r(Hgt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Hgt.forEach(t),Yar=i(Ul),Ac=n(Ul,"P",{});var hQ=s(Ac);Kar=r(hQ,`Note:
Loading a model from its configuration file does `),Khe=n(hQ,"STRONG",{});var Ugt=s(Khe);Zar=r(Ugt,"not"),Ugt.forEach(t),enr=r(hQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zhe=n(hQ,"CODE",{});var Jgt=s(Zhe);onr=r(Jgt,"from_pretrained()"),Jgt.forEach(t),rnr=r(hQ,"to load the model weights."),hQ.forEach(t),tnr=i(Ul),epe=n(Ul,"P",{});var Ygt=s(epe);anr=r(Ygt,"Examples:"),Ygt.forEach(t),nnr=i(Ul),m(uw.$$.fragment,Ul),Ul.forEach(t),snr=i(Hl),_o=n(Hl,"DIV",{class:!0});var Ta=s(_o);m(bw.$$.fragment,Ta),lnr=i(Ta),ope=n(Ta,"P",{});var Kgt=s(ope);inr=r(Kgt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Kgt.forEach(t),dnr=i(Ta),Cn=n(Ta,"P",{});var HM=s(Cn);cnr=r(HM,"The model class to instantiate is selected based on the "),rpe=n(HM,"CODE",{});var Zgt=s(rpe);fnr=r(Zgt,"model_type"),Zgt.forEach(t),mnr=r(HM,` property of the config object (either
passed as an argument or loaded from `),tpe=n(HM,"CODE",{});var eht=s(tpe);gnr=r(eht,"pretrained_model_name_or_path"),eht.forEach(t),hnr=r(HM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ape=n(HM,"CODE",{});var oht=s(ape);pnr=r(oht,"pretrained_model_name_or_path"),oht.forEach(t),_nr=r(HM,":"),HM.forEach(t),unr=i(Ta),ge=n(Ta,"UL",{});var Fe=s(ge);I0=n(Fe,"LI",{});var A7e=s(I0);npe=n(A7e,"STRONG",{});var rht=s(npe);bnr=r(rht,"bert"),rht.forEach(t),vnr=r(A7e," \u2014 "),eO=n(A7e,"A",{href:!0});var tht=s(eO);Tnr=r(tht,"TFBertLMHeadModel"),tht.forEach(t),Fnr=r(A7e," (BERT model)"),A7e.forEach(t),Cnr=i(Fe),j0=n(Fe,"LI",{});var L7e=s(j0);spe=n(L7e,"STRONG",{});var aht=s(spe);Mnr=r(aht,"camembert"),aht.forEach(t),Enr=r(L7e," \u2014 "),oO=n(L7e,"A",{href:!0});var nht=s(oO);ynr=r(nht,"TFCamembertForCausalLM"),nht.forEach(t),wnr=r(L7e," (CamemBERT model)"),L7e.forEach(t),Anr=i(Fe),D0=n(Fe,"LI",{});var B7e=s(D0);lpe=n(B7e,"STRONG",{});var sht=s(lpe);Lnr=r(sht,"ctrl"),sht.forEach(t),Bnr=r(B7e," \u2014 "),rO=n(B7e,"A",{href:!0});var lht=s(rO);xnr=r(lht,"TFCTRLLMHeadModel"),lht.forEach(t),knr=r(B7e," (CTRL model)"),B7e.forEach(t),Rnr=i(Fe),N0=n(Fe,"LI",{});var x7e=s(N0);ipe=n(x7e,"STRONG",{});var iht=s(ipe);Snr=r(iht,"gpt2"),iht.forEach(t),Pnr=r(x7e," \u2014 "),tO=n(x7e,"A",{href:!0});var dht=s(tO);$nr=r(dht,"TFGPT2LMHeadModel"),dht.forEach(t),Inr=r(x7e," (OpenAI GPT-2 model)"),x7e.forEach(t),jnr=i(Fe),q0=n(Fe,"LI",{});var k7e=s(q0);dpe=n(k7e,"STRONG",{});var cht=s(dpe);Dnr=r(cht,"openai-gpt"),cht.forEach(t),Nnr=r(k7e," \u2014 "),aO=n(k7e,"A",{href:!0});var fht=s(aO);qnr=r(fht,"TFOpenAIGPTLMHeadModel"),fht.forEach(t),Gnr=r(k7e," (OpenAI GPT model)"),k7e.forEach(t),Onr=i(Fe),G0=n(Fe,"LI",{});var R7e=s(G0);cpe=n(R7e,"STRONG",{});var mht=s(cpe);Xnr=r(mht,"rembert"),mht.forEach(t),Vnr=r(R7e," \u2014 "),nO=n(R7e,"A",{href:!0});var ght=s(nO);znr=r(ght,"TFRemBertForCausalLM"),ght.forEach(t),Wnr=r(R7e," (RemBERT model)"),R7e.forEach(t),Qnr=i(Fe),O0=n(Fe,"LI",{});var S7e=s(O0);fpe=n(S7e,"STRONG",{});var hht=s(fpe);Hnr=r(hht,"roberta"),hht.forEach(t),Unr=r(S7e," \u2014 "),sO=n(S7e,"A",{href:!0});var pht=s(sO);Jnr=r(pht,"TFRobertaForCausalLM"),pht.forEach(t),Ynr=r(S7e," (RoBERTa model)"),S7e.forEach(t),Knr=i(Fe),X0=n(Fe,"LI",{});var P7e=s(X0);mpe=n(P7e,"STRONG",{});var _ht=s(mpe);Znr=r(_ht,"roformer"),_ht.forEach(t),esr=r(P7e," \u2014 "),lO=n(P7e,"A",{href:!0});var uht=s(lO);osr=r(uht,"TFRoFormerForCausalLM"),uht.forEach(t),rsr=r(P7e," (RoFormer model)"),P7e.forEach(t),tsr=i(Fe),V0=n(Fe,"LI",{});var $7e=s(V0);gpe=n($7e,"STRONG",{});var bht=s(gpe);asr=r(bht,"transfo-xl"),bht.forEach(t),nsr=r($7e," \u2014 "),iO=n($7e,"A",{href:!0});var vht=s(iO);ssr=r(vht,"TFTransfoXLLMHeadModel"),vht.forEach(t),lsr=r($7e," (Transformer-XL model)"),$7e.forEach(t),isr=i(Fe),z0=n(Fe,"LI",{});var I7e=s(z0);hpe=n(I7e,"STRONG",{});var Tht=s(hpe);dsr=r(Tht,"xlm"),Tht.forEach(t),csr=r(I7e," \u2014 "),dO=n(I7e,"A",{href:!0});var Fht=s(dO);fsr=r(Fht,"TFXLMWithLMHeadModel"),Fht.forEach(t),msr=r(I7e," (XLM model)"),I7e.forEach(t),gsr=i(Fe),W0=n(Fe,"LI",{});var j7e=s(W0);ppe=n(j7e,"STRONG",{});var Cht=s(ppe);hsr=r(Cht,"xlnet"),Cht.forEach(t),psr=r(j7e," \u2014 "),cO=n(j7e,"A",{href:!0});var Mht=s(cO);_sr=r(Mht,"TFXLNetLMHeadModel"),Mht.forEach(t),usr=r(j7e," (XLNet model)"),j7e.forEach(t),Fe.forEach(t),bsr=i(Ta),_pe=n(Ta,"P",{});var Eht=s(_pe);vsr=r(Eht,"Examples:"),Eht.forEach(t),Tsr=i(Ta),m(vw.$$.fragment,Ta),Ta.forEach(t),Hl.forEach(t),YRe=i(d),Lc=n(d,"H2",{class:!0});var c$e=s(Lc);Q0=n(c$e,"A",{id:!0,class:!0,href:!0});var yht=s(Q0);upe=n(yht,"SPAN",{});var wht=s(upe);m(Tw.$$.fragment,wht),wht.forEach(t),yht.forEach(t),Fsr=i(c$e),bpe=n(c$e,"SPAN",{});var Aht=s(bpe);Csr=r(Aht,"TFAutoModelForImageClassification"),Aht.forEach(t),c$e.forEach(t),KRe=i(d),Mr=n(d,"DIV",{class:!0});var Jl=s(Mr);m(Fw.$$.fragment,Jl),Msr=i(Jl),Bc=n(Jl,"P",{});var pQ=s(Bc);Esr=r(pQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vpe=n(pQ,"CODE",{});var Lht=s(vpe);ysr=r(Lht,"from_pretrained()"),Lht.forEach(t),wsr=r(pQ,"class method or the "),Tpe=n(pQ,"CODE",{});var Bht=s(Tpe);Asr=r(Bht,"from_config()"),Bht.forEach(t),Lsr=r(pQ,`class
method.`),pQ.forEach(t),Bsr=i(Jl),Cw=n(Jl,"P",{});var f$e=s(Cw);xsr=r(f$e,"This class cannot be instantiated directly using "),Fpe=n(f$e,"CODE",{});var xht=s(Fpe);ksr=r(xht,"__init__()"),xht.forEach(t),Rsr=r(f$e," (throws an error)."),f$e.forEach(t),Ssr=i(Jl),bt=n(Jl,"DIV",{class:!0});var Yl=s(bt);m(Mw.$$.fragment,Yl),Psr=i(Yl),Cpe=n(Yl,"P",{});var kht=s(Cpe);$sr=r(kht,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kht.forEach(t),Isr=i(Yl),xc=n(Yl,"P",{});var _Q=s(xc);jsr=r(_Q,`Note:
Loading a model from its configuration file does `),Mpe=n(_Q,"STRONG",{});var Rht=s(Mpe);Dsr=r(Rht,"not"),Rht.forEach(t),Nsr=r(_Q,` load the model weights. It only affects the
model\u2019s configuration. Use `),Epe=n(_Q,"CODE",{});var Sht=s(Epe);qsr=r(Sht,"from_pretrained()"),Sht.forEach(t),Gsr=r(_Q,"to load the model weights."),_Q.forEach(t),Osr=i(Yl),ype=n(Yl,"P",{});var Pht=s(ype);Xsr=r(Pht,"Examples:"),Pht.forEach(t),Vsr=i(Yl),m(Ew.$$.fragment,Yl),Yl.forEach(t),zsr=i(Jl),uo=n(Jl,"DIV",{class:!0});var Fa=s(uo);m(yw.$$.fragment,Fa),Wsr=i(Fa),wpe=n(Fa,"P",{});var $ht=s(wpe);Qsr=r($ht,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$ht.forEach(t),Hsr=i(Fa),Mn=n(Fa,"P",{});var UM=s(Mn);Usr=r(UM,"The model class to instantiate is selected based on the "),Ape=n(UM,"CODE",{});var Iht=s(Ape);Jsr=r(Iht,"model_type"),Iht.forEach(t),Ysr=r(UM,` property of the config object (either
passed as an argument or loaded from `),Lpe=n(UM,"CODE",{});var jht=s(Lpe);Ksr=r(jht,"pretrained_model_name_or_path"),jht.forEach(t),Zsr=r(UM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=n(UM,"CODE",{});var Dht=s(Bpe);elr=r(Dht,"pretrained_model_name_or_path"),Dht.forEach(t),olr=r(UM,":"),UM.forEach(t),rlr=i(Fa),ww=n(Fa,"UL",{});var m$e=s(ww);H0=n(m$e,"LI",{});var D7e=s(H0);xpe=n(D7e,"STRONG",{});var Nht=s(xpe);tlr=r(Nht,"convnext"),Nht.forEach(t),alr=r(D7e," \u2014 "),fO=n(D7e,"A",{href:!0});var qht=s(fO);nlr=r(qht,"TFConvNextForImageClassification"),qht.forEach(t),slr=r(D7e," (ConvNext model)"),D7e.forEach(t),llr=i(m$e),U0=n(m$e,"LI",{});var N7e=s(U0);kpe=n(N7e,"STRONG",{});var Ght=s(kpe);ilr=r(Ght,"vit"),Ght.forEach(t),dlr=r(N7e," \u2014 "),mO=n(N7e,"A",{href:!0});var Oht=s(mO);clr=r(Oht,"TFViTForImageClassification"),Oht.forEach(t),flr=r(N7e," (ViT model)"),N7e.forEach(t),m$e.forEach(t),mlr=i(Fa),Rpe=n(Fa,"P",{});var Xht=s(Rpe);glr=r(Xht,"Examples:"),Xht.forEach(t),hlr=i(Fa),m(Aw.$$.fragment,Fa),Fa.forEach(t),Jl.forEach(t),ZRe=i(d),kc=n(d,"H2",{class:!0});var g$e=s(kc);J0=n(g$e,"A",{id:!0,class:!0,href:!0});var Vht=s(J0);Spe=n(Vht,"SPAN",{});var zht=s(Spe);m(Lw.$$.fragment,zht),zht.forEach(t),Vht.forEach(t),plr=i(g$e),Ppe=n(g$e,"SPAN",{});var Wht=s(Ppe);_lr=r(Wht,"TFAutoModelForMaskedLM"),Wht.forEach(t),g$e.forEach(t),eSe=i(d),Er=n(d,"DIV",{class:!0});var Kl=s(Er);m(Bw.$$.fragment,Kl),ulr=i(Kl),Rc=n(Kl,"P",{});var uQ=s(Rc);blr=r(uQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$pe=n(uQ,"CODE",{});var Qht=s($pe);vlr=r(Qht,"from_pretrained()"),Qht.forEach(t),Tlr=r(uQ,"class method or the "),Ipe=n(uQ,"CODE",{});var Hht=s(Ipe);Flr=r(Hht,"from_config()"),Hht.forEach(t),Clr=r(uQ,`class
method.`),uQ.forEach(t),Mlr=i(Kl),xw=n(Kl,"P",{});var h$e=s(xw);Elr=r(h$e,"This class cannot be instantiated directly using "),jpe=n(h$e,"CODE",{});var Uht=s(jpe);ylr=r(Uht,"__init__()"),Uht.forEach(t),wlr=r(h$e," (throws an error)."),h$e.forEach(t),Alr=i(Kl),vt=n(Kl,"DIV",{class:!0});var Zl=s(vt);m(kw.$$.fragment,Zl),Llr=i(Zl),Dpe=n(Zl,"P",{});var Jht=s(Dpe);Blr=r(Jht,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Jht.forEach(t),xlr=i(Zl),Sc=n(Zl,"P",{});var bQ=s(Sc);klr=r(bQ,`Note:
Loading a model from its configuration file does `),Npe=n(bQ,"STRONG",{});var Yht=s(Npe);Rlr=r(Yht,"not"),Yht.forEach(t),Slr=r(bQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qpe=n(bQ,"CODE",{});var Kht=s(qpe);Plr=r(Kht,"from_pretrained()"),Kht.forEach(t),$lr=r(bQ,"to load the model weights."),bQ.forEach(t),Ilr=i(Zl),Gpe=n(Zl,"P",{});var Zht=s(Gpe);jlr=r(Zht,"Examples:"),Zht.forEach(t),Dlr=i(Zl),m(Rw.$$.fragment,Zl),Zl.forEach(t),Nlr=i(Kl),bo=n(Kl,"DIV",{class:!0});var Ca=s(bo);m(Sw.$$.fragment,Ca),qlr=i(Ca),Ope=n(Ca,"P",{});var ept=s(Ope);Glr=r(ept,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ept.forEach(t),Olr=i(Ca),En=n(Ca,"P",{});var JM=s(En);Xlr=r(JM,"The model class to instantiate is selected based on the "),Xpe=n(JM,"CODE",{});var opt=s(Xpe);Vlr=r(opt,"model_type"),opt.forEach(t),zlr=r(JM,` property of the config object (either
passed as an argument or loaded from `),Vpe=n(JM,"CODE",{});var rpt=s(Vpe);Wlr=r(rpt,"pretrained_model_name_or_path"),rpt.forEach(t),Qlr=r(JM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zpe=n(JM,"CODE",{});var tpt=s(zpe);Hlr=r(tpt,"pretrained_model_name_or_path"),tpt.forEach(t),Ulr=r(JM,":"),JM.forEach(t),Jlr=i(Ca),J=n(Ca,"UL",{});var ee=s(J);Y0=n(ee,"LI",{});var q7e=s(Y0);Wpe=n(q7e,"STRONG",{});var apt=s(Wpe);Ylr=r(apt,"albert"),apt.forEach(t),Klr=r(q7e," \u2014 "),gO=n(q7e,"A",{href:!0});var npt=s(gO);Zlr=r(npt,"TFAlbertForMaskedLM"),npt.forEach(t),eir=r(q7e," (ALBERT model)"),q7e.forEach(t),oir=i(ee),K0=n(ee,"LI",{});var G7e=s(K0);Qpe=n(G7e,"STRONG",{});var spt=s(Qpe);rir=r(spt,"bert"),spt.forEach(t),tir=r(G7e," \u2014 "),hO=n(G7e,"A",{href:!0});var lpt=s(hO);air=r(lpt,"TFBertForMaskedLM"),lpt.forEach(t),nir=r(G7e," (BERT model)"),G7e.forEach(t),sir=i(ee),Z0=n(ee,"LI",{});var O7e=s(Z0);Hpe=n(O7e,"STRONG",{});var ipt=s(Hpe);lir=r(ipt,"camembert"),ipt.forEach(t),iir=r(O7e," \u2014 "),pO=n(O7e,"A",{href:!0});var dpt=s(pO);dir=r(dpt,"TFCamembertForMaskedLM"),dpt.forEach(t),cir=r(O7e," (CamemBERT model)"),O7e.forEach(t),fir=i(ee),eT=n(ee,"LI",{});var X7e=s(eT);Upe=n(X7e,"STRONG",{});var cpt=s(Upe);mir=r(cpt,"convbert"),cpt.forEach(t),gir=r(X7e," \u2014 "),_O=n(X7e,"A",{href:!0});var fpt=s(_O);hir=r(fpt,"TFConvBertForMaskedLM"),fpt.forEach(t),pir=r(X7e," (ConvBERT model)"),X7e.forEach(t),_ir=i(ee),oT=n(ee,"LI",{});var V7e=s(oT);Jpe=n(V7e,"STRONG",{});var mpt=s(Jpe);uir=r(mpt,"deberta"),mpt.forEach(t),bir=r(V7e," \u2014 "),uO=n(V7e,"A",{href:!0});var gpt=s(uO);vir=r(gpt,"TFDebertaForMaskedLM"),gpt.forEach(t),Tir=r(V7e," (DeBERTa model)"),V7e.forEach(t),Fir=i(ee),rT=n(ee,"LI",{});var z7e=s(rT);Ype=n(z7e,"STRONG",{});var hpt=s(Ype);Cir=r(hpt,"deberta-v2"),hpt.forEach(t),Mir=r(z7e," \u2014 "),bO=n(z7e,"A",{href:!0});var ppt=s(bO);Eir=r(ppt,"TFDebertaV2ForMaskedLM"),ppt.forEach(t),yir=r(z7e," (DeBERTa-v2 model)"),z7e.forEach(t),wir=i(ee),tT=n(ee,"LI",{});var W7e=s(tT);Kpe=n(W7e,"STRONG",{});var _pt=s(Kpe);Air=r(_pt,"distilbert"),_pt.forEach(t),Lir=r(W7e," \u2014 "),vO=n(W7e,"A",{href:!0});var upt=s(vO);Bir=r(upt,"TFDistilBertForMaskedLM"),upt.forEach(t),xir=r(W7e," (DistilBERT model)"),W7e.forEach(t),kir=i(ee),aT=n(ee,"LI",{});var Q7e=s(aT);Zpe=n(Q7e,"STRONG",{});var bpt=s(Zpe);Rir=r(bpt,"electra"),bpt.forEach(t),Sir=r(Q7e," \u2014 "),TO=n(Q7e,"A",{href:!0});var vpt=s(TO);Pir=r(vpt,"TFElectraForMaskedLM"),vpt.forEach(t),$ir=r(Q7e," (ELECTRA model)"),Q7e.forEach(t),Iir=i(ee),nT=n(ee,"LI",{});var H7e=s(nT);e_e=n(H7e,"STRONG",{});var Tpt=s(e_e);jir=r(Tpt,"flaubert"),Tpt.forEach(t),Dir=r(H7e," \u2014 "),FO=n(H7e,"A",{href:!0});var Fpt=s(FO);Nir=r(Fpt,"TFFlaubertWithLMHeadModel"),Fpt.forEach(t),qir=r(H7e," (FlauBERT model)"),H7e.forEach(t),Gir=i(ee),sT=n(ee,"LI",{});var U7e=s(sT);o_e=n(U7e,"STRONG",{});var Cpt=s(o_e);Oir=r(Cpt,"funnel"),Cpt.forEach(t),Xir=r(U7e," \u2014 "),CO=n(U7e,"A",{href:!0});var Mpt=s(CO);Vir=r(Mpt,"TFFunnelForMaskedLM"),Mpt.forEach(t),zir=r(U7e," (Funnel Transformer model)"),U7e.forEach(t),Wir=i(ee),lT=n(ee,"LI",{});var J7e=s(lT);r_e=n(J7e,"STRONG",{});var Ept=s(r_e);Qir=r(Ept,"layoutlm"),Ept.forEach(t),Hir=r(J7e," \u2014 "),MO=n(J7e,"A",{href:!0});var ypt=s(MO);Uir=r(ypt,"TFLayoutLMForMaskedLM"),ypt.forEach(t),Jir=r(J7e," (LayoutLM model)"),J7e.forEach(t),Yir=i(ee),iT=n(ee,"LI",{});var Y7e=s(iT);t_e=n(Y7e,"STRONG",{});var wpt=s(t_e);Kir=r(wpt,"longformer"),wpt.forEach(t),Zir=r(Y7e," \u2014 "),EO=n(Y7e,"A",{href:!0});var Apt=s(EO);edr=r(Apt,"TFLongformerForMaskedLM"),Apt.forEach(t),odr=r(Y7e," (Longformer model)"),Y7e.forEach(t),rdr=i(ee),dT=n(ee,"LI",{});var K7e=s(dT);a_e=n(K7e,"STRONG",{});var Lpt=s(a_e);tdr=r(Lpt,"mobilebert"),Lpt.forEach(t),adr=r(K7e," \u2014 "),yO=n(K7e,"A",{href:!0});var Bpt=s(yO);ndr=r(Bpt,"TFMobileBertForMaskedLM"),Bpt.forEach(t),sdr=r(K7e," (MobileBERT model)"),K7e.forEach(t),ldr=i(ee),cT=n(ee,"LI",{});var Z7e=s(cT);n_e=n(Z7e,"STRONG",{});var xpt=s(n_e);idr=r(xpt,"mpnet"),xpt.forEach(t),ddr=r(Z7e," \u2014 "),wO=n(Z7e,"A",{href:!0});var kpt=s(wO);cdr=r(kpt,"TFMPNetForMaskedLM"),kpt.forEach(t),fdr=r(Z7e," (MPNet model)"),Z7e.forEach(t),mdr=i(ee),fT=n(ee,"LI",{});var e9e=s(fT);s_e=n(e9e,"STRONG",{});var Rpt=s(s_e);gdr=r(Rpt,"rembert"),Rpt.forEach(t),hdr=r(e9e," \u2014 "),AO=n(e9e,"A",{href:!0});var Spt=s(AO);pdr=r(Spt,"TFRemBertForMaskedLM"),Spt.forEach(t),_dr=r(e9e," (RemBERT model)"),e9e.forEach(t),udr=i(ee),mT=n(ee,"LI",{});var o9e=s(mT);l_e=n(o9e,"STRONG",{});var Ppt=s(l_e);bdr=r(Ppt,"roberta"),Ppt.forEach(t),vdr=r(o9e," \u2014 "),LO=n(o9e,"A",{href:!0});var $pt=s(LO);Tdr=r($pt,"TFRobertaForMaskedLM"),$pt.forEach(t),Fdr=r(o9e," (RoBERTa model)"),o9e.forEach(t),Cdr=i(ee),gT=n(ee,"LI",{});var r9e=s(gT);i_e=n(r9e,"STRONG",{});var Ipt=s(i_e);Mdr=r(Ipt,"roformer"),Ipt.forEach(t),Edr=r(r9e," \u2014 "),BO=n(r9e,"A",{href:!0});var jpt=s(BO);ydr=r(jpt,"TFRoFormerForMaskedLM"),jpt.forEach(t),wdr=r(r9e," (RoFormer model)"),r9e.forEach(t),Adr=i(ee),hT=n(ee,"LI",{});var t9e=s(hT);d_e=n(t9e,"STRONG",{});var Dpt=s(d_e);Ldr=r(Dpt,"tapas"),Dpt.forEach(t),Bdr=r(t9e," \u2014 "),xO=n(t9e,"A",{href:!0});var Npt=s(xO);xdr=r(Npt,"TFTapasForMaskedLM"),Npt.forEach(t),kdr=r(t9e," (TAPAS model)"),t9e.forEach(t),Rdr=i(ee),pT=n(ee,"LI",{});var a9e=s(pT);c_e=n(a9e,"STRONG",{});var qpt=s(c_e);Sdr=r(qpt,"xlm"),qpt.forEach(t),Pdr=r(a9e," \u2014 "),kO=n(a9e,"A",{href:!0});var Gpt=s(kO);$dr=r(Gpt,"TFXLMWithLMHeadModel"),Gpt.forEach(t),Idr=r(a9e," (XLM model)"),a9e.forEach(t),jdr=i(ee),_T=n(ee,"LI",{});var n9e=s(_T);f_e=n(n9e,"STRONG",{});var Opt=s(f_e);Ddr=r(Opt,"xlm-roberta"),Opt.forEach(t),Ndr=r(n9e," \u2014 "),RO=n(n9e,"A",{href:!0});var Xpt=s(RO);qdr=r(Xpt,"TFXLMRobertaForMaskedLM"),Xpt.forEach(t),Gdr=r(n9e," (XLM-RoBERTa model)"),n9e.forEach(t),ee.forEach(t),Odr=i(Ca),m_e=n(Ca,"P",{});var Vpt=s(m_e);Xdr=r(Vpt,"Examples:"),Vpt.forEach(t),Vdr=i(Ca),m(Pw.$$.fragment,Ca),Ca.forEach(t),Kl.forEach(t),oSe=i(d),Pc=n(d,"H2",{class:!0});var p$e=s(Pc);uT=n(p$e,"A",{id:!0,class:!0,href:!0});var zpt=s(uT);g_e=n(zpt,"SPAN",{});var Wpt=s(g_e);m($w.$$.fragment,Wpt),Wpt.forEach(t),zpt.forEach(t),zdr=i(p$e),h_e=n(p$e,"SPAN",{});var Qpt=s(h_e);Wdr=r(Qpt,"TFAutoModelForSeq2SeqLM"),Qpt.forEach(t),p$e.forEach(t),rSe=i(d),yr=n(d,"DIV",{class:!0});var ei=s(yr);m(Iw.$$.fragment,ei),Qdr=i(ei),$c=n(ei,"P",{});var vQ=s($c);Hdr=r(vQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),p_e=n(vQ,"CODE",{});var Hpt=s(p_e);Udr=r(Hpt,"from_pretrained()"),Hpt.forEach(t),Jdr=r(vQ,"class method or the "),__e=n(vQ,"CODE",{});var Upt=s(__e);Ydr=r(Upt,"from_config()"),Upt.forEach(t),Kdr=r(vQ,`class
method.`),vQ.forEach(t),Zdr=i(ei),jw=n(ei,"P",{});var _$e=s(jw);ecr=r(_$e,"This class cannot be instantiated directly using "),u_e=n(_$e,"CODE",{});var Jpt=s(u_e);ocr=r(Jpt,"__init__()"),Jpt.forEach(t),rcr=r(_$e," (throws an error)."),_$e.forEach(t),tcr=i(ei),Tt=n(ei,"DIV",{class:!0});var oi=s(Tt);m(Dw.$$.fragment,oi),acr=i(oi),b_e=n(oi,"P",{});var Ypt=s(b_e);ncr=r(Ypt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Ypt.forEach(t),scr=i(oi),Ic=n(oi,"P",{});var TQ=s(Ic);lcr=r(TQ,`Note:
Loading a model from its configuration file does `),v_e=n(TQ,"STRONG",{});var Kpt=s(v_e);icr=r(Kpt,"not"),Kpt.forEach(t),dcr=r(TQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),T_e=n(TQ,"CODE",{});var Zpt=s(T_e);ccr=r(Zpt,"from_pretrained()"),Zpt.forEach(t),fcr=r(TQ,"to load the model weights."),TQ.forEach(t),mcr=i(oi),F_e=n(oi,"P",{});var e_t=s(F_e);gcr=r(e_t,"Examples:"),e_t.forEach(t),hcr=i(oi),m(Nw.$$.fragment,oi),oi.forEach(t),pcr=i(ei),vo=n(ei,"DIV",{class:!0});var Ma=s(vo);m(qw.$$.fragment,Ma),_cr=i(Ma),C_e=n(Ma,"P",{});var o_t=s(C_e);ucr=r(o_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),o_t.forEach(t),bcr=i(Ma),yn=n(Ma,"P",{});var YM=s(yn);vcr=r(YM,"The model class to instantiate is selected based on the "),M_e=n(YM,"CODE",{});var r_t=s(M_e);Tcr=r(r_t,"model_type"),r_t.forEach(t),Fcr=r(YM,` property of the config object (either
passed as an argument or loaded from `),E_e=n(YM,"CODE",{});var t_t=s(E_e);Ccr=r(t_t,"pretrained_model_name_or_path"),t_t.forEach(t),Mcr=r(YM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y_e=n(YM,"CODE",{});var a_t=s(y_e);Ecr=r(a_t,"pretrained_model_name_or_path"),a_t.forEach(t),ycr=r(YM,":"),YM.forEach(t),wcr=i(Ma),_e=n(Ma,"UL",{});var ye=s(_e);bT=n(ye,"LI",{});var s9e=s(bT);w_e=n(s9e,"STRONG",{});var n_t=s(w_e);Acr=r(n_t,"bart"),n_t.forEach(t),Lcr=r(s9e," \u2014 "),SO=n(s9e,"A",{href:!0});var s_t=s(SO);Bcr=r(s_t,"TFBartForConditionalGeneration"),s_t.forEach(t),xcr=r(s9e," (BART model)"),s9e.forEach(t),kcr=i(ye),vT=n(ye,"LI",{});var l9e=s(vT);A_e=n(l9e,"STRONG",{});var l_t=s(A_e);Rcr=r(l_t,"blenderbot"),l_t.forEach(t),Scr=r(l9e," \u2014 "),PO=n(l9e,"A",{href:!0});var i_t=s(PO);Pcr=r(i_t,"TFBlenderbotForConditionalGeneration"),i_t.forEach(t),$cr=r(l9e," (Blenderbot model)"),l9e.forEach(t),Icr=i(ye),TT=n(ye,"LI",{});var i9e=s(TT);L_e=n(i9e,"STRONG",{});var d_t=s(L_e);jcr=r(d_t,"blenderbot-small"),d_t.forEach(t),Dcr=r(i9e," \u2014 "),$O=n(i9e,"A",{href:!0});var c_t=s($O);Ncr=r(c_t,"TFBlenderbotSmallForConditionalGeneration"),c_t.forEach(t),qcr=r(i9e," (BlenderbotSmall model)"),i9e.forEach(t),Gcr=i(ye),FT=n(ye,"LI",{});var d9e=s(FT);B_e=n(d9e,"STRONG",{});var f_t=s(B_e);Ocr=r(f_t,"encoder-decoder"),f_t.forEach(t),Xcr=r(d9e," \u2014 "),IO=n(d9e,"A",{href:!0});var m_t=s(IO);Vcr=r(m_t,"TFEncoderDecoderModel"),m_t.forEach(t),zcr=r(d9e," (Encoder decoder model)"),d9e.forEach(t),Wcr=i(ye),CT=n(ye,"LI",{});var c9e=s(CT);x_e=n(c9e,"STRONG",{});var g_t=s(x_e);Qcr=r(g_t,"led"),g_t.forEach(t),Hcr=r(c9e," \u2014 "),jO=n(c9e,"A",{href:!0});var h_t=s(jO);Ucr=r(h_t,"TFLEDForConditionalGeneration"),h_t.forEach(t),Jcr=r(c9e," (LED model)"),c9e.forEach(t),Ycr=i(ye),MT=n(ye,"LI",{});var f9e=s(MT);k_e=n(f9e,"STRONG",{});var p_t=s(k_e);Kcr=r(p_t,"marian"),p_t.forEach(t),Zcr=r(f9e," \u2014 "),DO=n(f9e,"A",{href:!0});var __t=s(DO);efr=r(__t,"TFMarianMTModel"),__t.forEach(t),ofr=r(f9e," (Marian model)"),f9e.forEach(t),rfr=i(ye),ET=n(ye,"LI",{});var m9e=s(ET);R_e=n(m9e,"STRONG",{});var u_t=s(R_e);tfr=r(u_t,"mbart"),u_t.forEach(t),afr=r(m9e," \u2014 "),NO=n(m9e,"A",{href:!0});var b_t=s(NO);nfr=r(b_t,"TFMBartForConditionalGeneration"),b_t.forEach(t),sfr=r(m9e," (mBART model)"),m9e.forEach(t),lfr=i(ye),yT=n(ye,"LI",{});var g9e=s(yT);S_e=n(g9e,"STRONG",{});var v_t=s(S_e);ifr=r(v_t,"mt5"),v_t.forEach(t),dfr=r(g9e," \u2014 "),qO=n(g9e,"A",{href:!0});var T_t=s(qO);cfr=r(T_t,"TFMT5ForConditionalGeneration"),T_t.forEach(t),ffr=r(g9e," (mT5 model)"),g9e.forEach(t),mfr=i(ye),wT=n(ye,"LI",{});var h9e=s(wT);P_e=n(h9e,"STRONG",{});var F_t=s(P_e);gfr=r(F_t,"pegasus"),F_t.forEach(t),hfr=r(h9e," \u2014 "),GO=n(h9e,"A",{href:!0});var C_t=s(GO);pfr=r(C_t,"TFPegasusForConditionalGeneration"),C_t.forEach(t),_fr=r(h9e," (Pegasus model)"),h9e.forEach(t),ufr=i(ye),AT=n(ye,"LI",{});var p9e=s(AT);$_e=n(p9e,"STRONG",{});var M_t=s($_e);bfr=r(M_t,"t5"),M_t.forEach(t),vfr=r(p9e," \u2014 "),OO=n(p9e,"A",{href:!0});var E_t=s(OO);Tfr=r(E_t,"TFT5ForConditionalGeneration"),E_t.forEach(t),Ffr=r(p9e," (T5 model)"),p9e.forEach(t),ye.forEach(t),Cfr=i(Ma),I_e=n(Ma,"P",{});var y_t=s(I_e);Mfr=r(y_t,"Examples:"),y_t.forEach(t),Efr=i(Ma),m(Gw.$$.fragment,Ma),Ma.forEach(t),ei.forEach(t),tSe=i(d),jc=n(d,"H2",{class:!0});var u$e=s(jc);LT=n(u$e,"A",{id:!0,class:!0,href:!0});var w_t=s(LT);j_e=n(w_t,"SPAN",{});var A_t=s(j_e);m(Ow.$$.fragment,A_t),A_t.forEach(t),w_t.forEach(t),yfr=i(u$e),D_e=n(u$e,"SPAN",{});var L_t=s(D_e);wfr=r(L_t,"TFAutoModelForSequenceClassification"),L_t.forEach(t),u$e.forEach(t),aSe=i(d),wr=n(d,"DIV",{class:!0});var ri=s(wr);m(Xw.$$.fragment,ri),Afr=i(ri),Dc=n(ri,"P",{});var FQ=s(Dc);Lfr=r(FQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),N_e=n(FQ,"CODE",{});var B_t=s(N_e);Bfr=r(B_t,"from_pretrained()"),B_t.forEach(t),xfr=r(FQ,"class method or the "),q_e=n(FQ,"CODE",{});var x_t=s(q_e);kfr=r(x_t,"from_config()"),x_t.forEach(t),Rfr=r(FQ,`class
method.`),FQ.forEach(t),Sfr=i(ri),Vw=n(ri,"P",{});var b$e=s(Vw);Pfr=r(b$e,"This class cannot be instantiated directly using "),G_e=n(b$e,"CODE",{});var k_t=s(G_e);$fr=r(k_t,"__init__()"),k_t.forEach(t),Ifr=r(b$e," (throws an error)."),b$e.forEach(t),jfr=i(ri),Ft=n(ri,"DIV",{class:!0});var ti=s(Ft);m(zw.$$.fragment,ti),Dfr=i(ti),O_e=n(ti,"P",{});var R_t=s(O_e);Nfr=r(R_t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),R_t.forEach(t),qfr=i(ti),Nc=n(ti,"P",{});var CQ=s(Nc);Gfr=r(CQ,`Note:
Loading a model from its configuration file does `),X_e=n(CQ,"STRONG",{});var S_t=s(X_e);Ofr=r(S_t,"not"),S_t.forEach(t),Xfr=r(CQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),V_e=n(CQ,"CODE",{});var P_t=s(V_e);Vfr=r(P_t,"from_pretrained()"),P_t.forEach(t),zfr=r(CQ,"to load the model weights."),CQ.forEach(t),Wfr=i(ti),z_e=n(ti,"P",{});var $_t=s(z_e);Qfr=r($_t,"Examples:"),$_t.forEach(t),Hfr=i(ti),m(Ww.$$.fragment,ti),ti.forEach(t),Ufr=i(ri),To=n(ri,"DIV",{class:!0});var Ea=s(To);m(Qw.$$.fragment,Ea),Jfr=i(Ea),W_e=n(Ea,"P",{});var I_t=s(W_e);Yfr=r(I_t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),I_t.forEach(t),Kfr=i(Ea),wn=n(Ea,"P",{});var KM=s(wn);Zfr=r(KM,"The model class to instantiate is selected based on the "),Q_e=n(KM,"CODE",{});var j_t=s(Q_e);emr=r(j_t,"model_type"),j_t.forEach(t),omr=r(KM,` property of the config object (either
passed as an argument or loaded from `),H_e=n(KM,"CODE",{});var D_t=s(H_e);rmr=r(D_t,"pretrained_model_name_or_path"),D_t.forEach(t),tmr=r(KM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=n(KM,"CODE",{});var N_t=s(U_e);amr=r(N_t,"pretrained_model_name_or_path"),N_t.forEach(t),nmr=r(KM,":"),KM.forEach(t),smr=i(Ea),V=n(Ea,"UL",{});var W=s(V);BT=n(W,"LI",{});var _9e=s(BT);J_e=n(_9e,"STRONG",{});var q_t=s(J_e);lmr=r(q_t,"albert"),q_t.forEach(t),imr=r(_9e," \u2014 "),XO=n(_9e,"A",{href:!0});var G_t=s(XO);dmr=r(G_t,"TFAlbertForSequenceClassification"),G_t.forEach(t),cmr=r(_9e," (ALBERT model)"),_9e.forEach(t),fmr=i(W),xT=n(W,"LI",{});var u9e=s(xT);Y_e=n(u9e,"STRONG",{});var O_t=s(Y_e);mmr=r(O_t,"bert"),O_t.forEach(t),gmr=r(u9e," \u2014 "),VO=n(u9e,"A",{href:!0});var X_t=s(VO);hmr=r(X_t,"TFBertForSequenceClassification"),X_t.forEach(t),pmr=r(u9e," (BERT model)"),u9e.forEach(t),_mr=i(W),kT=n(W,"LI",{});var b9e=s(kT);K_e=n(b9e,"STRONG",{});var V_t=s(K_e);umr=r(V_t,"camembert"),V_t.forEach(t),bmr=r(b9e," \u2014 "),zO=n(b9e,"A",{href:!0});var z_t=s(zO);vmr=r(z_t,"TFCamembertForSequenceClassification"),z_t.forEach(t),Tmr=r(b9e," (CamemBERT model)"),b9e.forEach(t),Fmr=i(W),RT=n(W,"LI",{});var v9e=s(RT);Z_e=n(v9e,"STRONG",{});var W_t=s(Z_e);Cmr=r(W_t,"convbert"),W_t.forEach(t),Mmr=r(v9e," \u2014 "),WO=n(v9e,"A",{href:!0});var Q_t=s(WO);Emr=r(Q_t,"TFConvBertForSequenceClassification"),Q_t.forEach(t),ymr=r(v9e," (ConvBERT model)"),v9e.forEach(t),wmr=i(W),ST=n(W,"LI",{});var T9e=s(ST);eue=n(T9e,"STRONG",{});var H_t=s(eue);Amr=r(H_t,"ctrl"),H_t.forEach(t),Lmr=r(T9e," \u2014 "),QO=n(T9e,"A",{href:!0});var U_t=s(QO);Bmr=r(U_t,"TFCTRLForSequenceClassification"),U_t.forEach(t),xmr=r(T9e," (CTRL model)"),T9e.forEach(t),kmr=i(W),PT=n(W,"LI",{});var F9e=s(PT);oue=n(F9e,"STRONG",{});var J_t=s(oue);Rmr=r(J_t,"deberta"),J_t.forEach(t),Smr=r(F9e," \u2014 "),HO=n(F9e,"A",{href:!0});var Y_t=s(HO);Pmr=r(Y_t,"TFDebertaForSequenceClassification"),Y_t.forEach(t),$mr=r(F9e," (DeBERTa model)"),F9e.forEach(t),Imr=i(W),$T=n(W,"LI",{});var C9e=s($T);rue=n(C9e,"STRONG",{});var K_t=s(rue);jmr=r(K_t,"deberta-v2"),K_t.forEach(t),Dmr=r(C9e," \u2014 "),UO=n(C9e,"A",{href:!0});var Z_t=s(UO);Nmr=r(Z_t,"TFDebertaV2ForSequenceClassification"),Z_t.forEach(t),qmr=r(C9e," (DeBERTa-v2 model)"),C9e.forEach(t),Gmr=i(W),IT=n(W,"LI",{});var M9e=s(IT);tue=n(M9e,"STRONG",{});var eut=s(tue);Omr=r(eut,"distilbert"),eut.forEach(t),Xmr=r(M9e," \u2014 "),JO=n(M9e,"A",{href:!0});var out=s(JO);Vmr=r(out,"TFDistilBertForSequenceClassification"),out.forEach(t),zmr=r(M9e," (DistilBERT model)"),M9e.forEach(t),Wmr=i(W),jT=n(W,"LI",{});var E9e=s(jT);aue=n(E9e,"STRONG",{});var rut=s(aue);Qmr=r(rut,"electra"),rut.forEach(t),Hmr=r(E9e," \u2014 "),YO=n(E9e,"A",{href:!0});var tut=s(YO);Umr=r(tut,"TFElectraForSequenceClassification"),tut.forEach(t),Jmr=r(E9e," (ELECTRA model)"),E9e.forEach(t),Ymr=i(W),DT=n(W,"LI",{});var y9e=s(DT);nue=n(y9e,"STRONG",{});var aut=s(nue);Kmr=r(aut,"flaubert"),aut.forEach(t),Zmr=r(y9e," \u2014 "),KO=n(y9e,"A",{href:!0});var nut=s(KO);egr=r(nut,"TFFlaubertForSequenceClassification"),nut.forEach(t),ogr=r(y9e," (FlauBERT model)"),y9e.forEach(t),rgr=i(W),NT=n(W,"LI",{});var w9e=s(NT);sue=n(w9e,"STRONG",{});var sut=s(sue);tgr=r(sut,"funnel"),sut.forEach(t),agr=r(w9e," \u2014 "),ZO=n(w9e,"A",{href:!0});var lut=s(ZO);ngr=r(lut,"TFFunnelForSequenceClassification"),lut.forEach(t),sgr=r(w9e," (Funnel Transformer model)"),w9e.forEach(t),lgr=i(W),qT=n(W,"LI",{});var A9e=s(qT);lue=n(A9e,"STRONG",{});var iut=s(lue);igr=r(iut,"gpt2"),iut.forEach(t),dgr=r(A9e," \u2014 "),eX=n(A9e,"A",{href:!0});var dut=s(eX);cgr=r(dut,"TFGPT2ForSequenceClassification"),dut.forEach(t),fgr=r(A9e," (OpenAI GPT-2 model)"),A9e.forEach(t),mgr=i(W),GT=n(W,"LI",{});var L9e=s(GT);iue=n(L9e,"STRONG",{});var cut=s(iue);ggr=r(cut,"layoutlm"),cut.forEach(t),hgr=r(L9e," \u2014 "),oX=n(L9e,"A",{href:!0});var fut=s(oX);pgr=r(fut,"TFLayoutLMForSequenceClassification"),fut.forEach(t),_gr=r(L9e," (LayoutLM model)"),L9e.forEach(t),ugr=i(W),OT=n(W,"LI",{});var B9e=s(OT);due=n(B9e,"STRONG",{});var mut=s(due);bgr=r(mut,"longformer"),mut.forEach(t),vgr=r(B9e," \u2014 "),rX=n(B9e,"A",{href:!0});var gut=s(rX);Tgr=r(gut,"TFLongformerForSequenceClassification"),gut.forEach(t),Fgr=r(B9e," (Longformer model)"),B9e.forEach(t),Cgr=i(W),XT=n(W,"LI",{});var x9e=s(XT);cue=n(x9e,"STRONG",{});var hut=s(cue);Mgr=r(hut,"mobilebert"),hut.forEach(t),Egr=r(x9e," \u2014 "),tX=n(x9e,"A",{href:!0});var put=s(tX);ygr=r(put,"TFMobileBertForSequenceClassification"),put.forEach(t),wgr=r(x9e," (MobileBERT model)"),x9e.forEach(t),Agr=i(W),VT=n(W,"LI",{});var k9e=s(VT);fue=n(k9e,"STRONG",{});var _ut=s(fue);Lgr=r(_ut,"mpnet"),_ut.forEach(t),Bgr=r(k9e," \u2014 "),aX=n(k9e,"A",{href:!0});var uut=s(aX);xgr=r(uut,"TFMPNetForSequenceClassification"),uut.forEach(t),kgr=r(k9e," (MPNet model)"),k9e.forEach(t),Rgr=i(W),zT=n(W,"LI",{});var R9e=s(zT);mue=n(R9e,"STRONG",{});var but=s(mue);Sgr=r(but,"openai-gpt"),but.forEach(t),Pgr=r(R9e," \u2014 "),nX=n(R9e,"A",{href:!0});var vut=s(nX);$gr=r(vut,"TFOpenAIGPTForSequenceClassification"),vut.forEach(t),Igr=r(R9e," (OpenAI GPT model)"),R9e.forEach(t),jgr=i(W),WT=n(W,"LI",{});var S9e=s(WT);gue=n(S9e,"STRONG",{});var Tut=s(gue);Dgr=r(Tut,"rembert"),Tut.forEach(t),Ngr=r(S9e," \u2014 "),sX=n(S9e,"A",{href:!0});var Fut=s(sX);qgr=r(Fut,"TFRemBertForSequenceClassification"),Fut.forEach(t),Ggr=r(S9e," (RemBERT model)"),S9e.forEach(t),Ogr=i(W),QT=n(W,"LI",{});var P9e=s(QT);hue=n(P9e,"STRONG",{});var Cut=s(hue);Xgr=r(Cut,"roberta"),Cut.forEach(t),Vgr=r(P9e," \u2014 "),lX=n(P9e,"A",{href:!0});var Mut=s(lX);zgr=r(Mut,"TFRobertaForSequenceClassification"),Mut.forEach(t),Wgr=r(P9e," (RoBERTa model)"),P9e.forEach(t),Qgr=i(W),HT=n(W,"LI",{});var $9e=s(HT);pue=n($9e,"STRONG",{});var Eut=s(pue);Hgr=r(Eut,"roformer"),Eut.forEach(t),Ugr=r($9e," \u2014 "),iX=n($9e,"A",{href:!0});var yut=s(iX);Jgr=r(yut,"TFRoFormerForSequenceClassification"),yut.forEach(t),Ygr=r($9e," (RoFormer model)"),$9e.forEach(t),Kgr=i(W),UT=n(W,"LI",{});var I9e=s(UT);_ue=n(I9e,"STRONG",{});var wut=s(_ue);Zgr=r(wut,"tapas"),wut.forEach(t),ehr=r(I9e," \u2014 "),dX=n(I9e,"A",{href:!0});var Aut=s(dX);ohr=r(Aut,"TFTapasForSequenceClassification"),Aut.forEach(t),rhr=r(I9e," (TAPAS model)"),I9e.forEach(t),thr=i(W),JT=n(W,"LI",{});var j9e=s(JT);uue=n(j9e,"STRONG",{});var Lut=s(uue);ahr=r(Lut,"transfo-xl"),Lut.forEach(t),nhr=r(j9e," \u2014 "),cX=n(j9e,"A",{href:!0});var But=s(cX);shr=r(But,"TFTransfoXLForSequenceClassification"),But.forEach(t),lhr=r(j9e," (Transformer-XL model)"),j9e.forEach(t),ihr=i(W),YT=n(W,"LI",{});var D9e=s(YT);bue=n(D9e,"STRONG",{});var xut=s(bue);dhr=r(xut,"xlm"),xut.forEach(t),chr=r(D9e," \u2014 "),fX=n(D9e,"A",{href:!0});var kut=s(fX);fhr=r(kut,"TFXLMForSequenceClassification"),kut.forEach(t),mhr=r(D9e," (XLM model)"),D9e.forEach(t),ghr=i(W),KT=n(W,"LI",{});var N9e=s(KT);vue=n(N9e,"STRONG",{});var Rut=s(vue);hhr=r(Rut,"xlm-roberta"),Rut.forEach(t),phr=r(N9e," \u2014 "),mX=n(N9e,"A",{href:!0});var Sut=s(mX);_hr=r(Sut,"TFXLMRobertaForSequenceClassification"),Sut.forEach(t),uhr=r(N9e," (XLM-RoBERTa model)"),N9e.forEach(t),bhr=i(W),ZT=n(W,"LI",{});var q9e=s(ZT);Tue=n(q9e,"STRONG",{});var Put=s(Tue);vhr=r(Put,"xlnet"),Put.forEach(t),Thr=r(q9e," \u2014 "),gX=n(q9e,"A",{href:!0});var $ut=s(gX);Fhr=r($ut,"TFXLNetForSequenceClassification"),$ut.forEach(t),Chr=r(q9e," (XLNet model)"),q9e.forEach(t),W.forEach(t),Mhr=i(Ea),Fue=n(Ea,"P",{});var Iut=s(Fue);Ehr=r(Iut,"Examples:"),Iut.forEach(t),yhr=i(Ea),m(Hw.$$.fragment,Ea),Ea.forEach(t),ri.forEach(t),nSe=i(d),qc=n(d,"H2",{class:!0});var v$e=s(qc);e8=n(v$e,"A",{id:!0,class:!0,href:!0});var jut=s(e8);Cue=n(jut,"SPAN",{});var Dut=s(Cue);m(Uw.$$.fragment,Dut),Dut.forEach(t),jut.forEach(t),whr=i(v$e),Mue=n(v$e,"SPAN",{});var Nut=s(Mue);Ahr=r(Nut,"TFAutoModelForMultipleChoice"),Nut.forEach(t),v$e.forEach(t),sSe=i(d),Ar=n(d,"DIV",{class:!0});var ai=s(Ar);m(Jw.$$.fragment,ai),Lhr=i(ai),Gc=n(ai,"P",{});var MQ=s(Gc);Bhr=r(MQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Eue=n(MQ,"CODE",{});var qut=s(Eue);xhr=r(qut,"from_pretrained()"),qut.forEach(t),khr=r(MQ,"class method or the "),yue=n(MQ,"CODE",{});var Gut=s(yue);Rhr=r(Gut,"from_config()"),Gut.forEach(t),Shr=r(MQ,`class
method.`),MQ.forEach(t),Phr=i(ai),Yw=n(ai,"P",{});var T$e=s(Yw);$hr=r(T$e,"This class cannot be instantiated directly using "),wue=n(T$e,"CODE",{});var Out=s(wue);Ihr=r(Out,"__init__()"),Out.forEach(t),jhr=r(T$e," (throws an error)."),T$e.forEach(t),Dhr=i(ai),Ct=n(ai,"DIV",{class:!0});var ni=s(Ct);m(Kw.$$.fragment,ni),Nhr=i(ni),Aue=n(ni,"P",{});var Xut=s(Aue);qhr=r(Xut,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Xut.forEach(t),Ghr=i(ni),Oc=n(ni,"P",{});var EQ=s(Oc);Ohr=r(EQ,`Note:
Loading a model from its configuration file does `),Lue=n(EQ,"STRONG",{});var Vut=s(Lue);Xhr=r(Vut,"not"),Vut.forEach(t),Vhr=r(EQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bue=n(EQ,"CODE",{});var zut=s(Bue);zhr=r(zut,"from_pretrained()"),zut.forEach(t),Whr=r(EQ,"to load the model weights."),EQ.forEach(t),Qhr=i(ni),xue=n(ni,"P",{});var Wut=s(xue);Hhr=r(Wut,"Examples:"),Wut.forEach(t),Uhr=i(ni),m(Zw.$$.fragment,ni),ni.forEach(t),Jhr=i(ai),Fo=n(ai,"DIV",{class:!0});var ya=s(Fo);m(eA.$$.fragment,ya),Yhr=i(ya),kue=n(ya,"P",{});var Qut=s(kue);Khr=r(Qut,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Qut.forEach(t),Zhr=i(ya),An=n(ya,"P",{});var ZM=s(An);epr=r(ZM,"The model class to instantiate is selected based on the "),Rue=n(ZM,"CODE",{});var Hut=s(Rue);opr=r(Hut,"model_type"),Hut.forEach(t),rpr=r(ZM,` property of the config object (either
passed as an argument or loaded from `),Sue=n(ZM,"CODE",{});var Uut=s(Sue);tpr=r(Uut,"pretrained_model_name_or_path"),Uut.forEach(t),apr=r(ZM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=n(ZM,"CODE",{});var Jut=s(Pue);npr=r(Jut,"pretrained_model_name_or_path"),Jut.forEach(t),spr=r(ZM,":"),ZM.forEach(t),lpr=i(ya),ae=n(ya,"UL",{});var le=s(ae);o8=n(le,"LI",{});var G9e=s(o8);$ue=n(G9e,"STRONG",{});var Yut=s($ue);ipr=r(Yut,"albert"),Yut.forEach(t),dpr=r(G9e," \u2014 "),hX=n(G9e,"A",{href:!0});var Kut=s(hX);cpr=r(Kut,"TFAlbertForMultipleChoice"),Kut.forEach(t),fpr=r(G9e," (ALBERT model)"),G9e.forEach(t),mpr=i(le),r8=n(le,"LI",{});var O9e=s(r8);Iue=n(O9e,"STRONG",{});var Zut=s(Iue);gpr=r(Zut,"bert"),Zut.forEach(t),hpr=r(O9e," \u2014 "),pX=n(O9e,"A",{href:!0});var e1t=s(pX);ppr=r(e1t,"TFBertForMultipleChoice"),e1t.forEach(t),_pr=r(O9e," (BERT model)"),O9e.forEach(t),upr=i(le),t8=n(le,"LI",{});var X9e=s(t8);jue=n(X9e,"STRONG",{});var o1t=s(jue);bpr=r(o1t,"camembert"),o1t.forEach(t),vpr=r(X9e," \u2014 "),_X=n(X9e,"A",{href:!0});var r1t=s(_X);Tpr=r(r1t,"TFCamembertForMultipleChoice"),r1t.forEach(t),Fpr=r(X9e," (CamemBERT model)"),X9e.forEach(t),Cpr=i(le),a8=n(le,"LI",{});var V9e=s(a8);Due=n(V9e,"STRONG",{});var t1t=s(Due);Mpr=r(t1t,"convbert"),t1t.forEach(t),Epr=r(V9e," \u2014 "),uX=n(V9e,"A",{href:!0});var a1t=s(uX);ypr=r(a1t,"TFConvBertForMultipleChoice"),a1t.forEach(t),wpr=r(V9e," (ConvBERT model)"),V9e.forEach(t),Apr=i(le),n8=n(le,"LI",{});var z9e=s(n8);Nue=n(z9e,"STRONG",{});var n1t=s(Nue);Lpr=r(n1t,"distilbert"),n1t.forEach(t),Bpr=r(z9e," \u2014 "),bX=n(z9e,"A",{href:!0});var s1t=s(bX);xpr=r(s1t,"TFDistilBertForMultipleChoice"),s1t.forEach(t),kpr=r(z9e," (DistilBERT model)"),z9e.forEach(t),Rpr=i(le),s8=n(le,"LI",{});var W9e=s(s8);que=n(W9e,"STRONG",{});var l1t=s(que);Spr=r(l1t,"electra"),l1t.forEach(t),Ppr=r(W9e," \u2014 "),vX=n(W9e,"A",{href:!0});var i1t=s(vX);$pr=r(i1t,"TFElectraForMultipleChoice"),i1t.forEach(t),Ipr=r(W9e," (ELECTRA model)"),W9e.forEach(t),jpr=i(le),l8=n(le,"LI",{});var Q9e=s(l8);Gue=n(Q9e,"STRONG",{});var d1t=s(Gue);Dpr=r(d1t,"flaubert"),d1t.forEach(t),Npr=r(Q9e," \u2014 "),TX=n(Q9e,"A",{href:!0});var c1t=s(TX);qpr=r(c1t,"TFFlaubertForMultipleChoice"),c1t.forEach(t),Gpr=r(Q9e," (FlauBERT model)"),Q9e.forEach(t),Opr=i(le),i8=n(le,"LI",{});var H9e=s(i8);Oue=n(H9e,"STRONG",{});var f1t=s(Oue);Xpr=r(f1t,"funnel"),f1t.forEach(t),Vpr=r(H9e," \u2014 "),FX=n(H9e,"A",{href:!0});var m1t=s(FX);zpr=r(m1t,"TFFunnelForMultipleChoice"),m1t.forEach(t),Wpr=r(H9e," (Funnel Transformer model)"),H9e.forEach(t),Qpr=i(le),d8=n(le,"LI",{});var U9e=s(d8);Xue=n(U9e,"STRONG",{});var g1t=s(Xue);Hpr=r(g1t,"longformer"),g1t.forEach(t),Upr=r(U9e," \u2014 "),CX=n(U9e,"A",{href:!0});var h1t=s(CX);Jpr=r(h1t,"TFLongformerForMultipleChoice"),h1t.forEach(t),Ypr=r(U9e," (Longformer model)"),U9e.forEach(t),Kpr=i(le),c8=n(le,"LI",{});var J9e=s(c8);Vue=n(J9e,"STRONG",{});var p1t=s(Vue);Zpr=r(p1t,"mobilebert"),p1t.forEach(t),e_r=r(J9e," \u2014 "),MX=n(J9e,"A",{href:!0});var _1t=s(MX);o_r=r(_1t,"TFMobileBertForMultipleChoice"),_1t.forEach(t),r_r=r(J9e," (MobileBERT model)"),J9e.forEach(t),t_r=i(le),f8=n(le,"LI",{});var Y9e=s(f8);zue=n(Y9e,"STRONG",{});var u1t=s(zue);a_r=r(u1t,"mpnet"),u1t.forEach(t),n_r=r(Y9e," \u2014 "),EX=n(Y9e,"A",{href:!0});var b1t=s(EX);s_r=r(b1t,"TFMPNetForMultipleChoice"),b1t.forEach(t),l_r=r(Y9e," (MPNet model)"),Y9e.forEach(t),i_r=i(le),m8=n(le,"LI",{});var K9e=s(m8);Wue=n(K9e,"STRONG",{});var v1t=s(Wue);d_r=r(v1t,"rembert"),v1t.forEach(t),c_r=r(K9e," \u2014 "),yX=n(K9e,"A",{href:!0});var T1t=s(yX);f_r=r(T1t,"TFRemBertForMultipleChoice"),T1t.forEach(t),m_r=r(K9e," (RemBERT model)"),K9e.forEach(t),g_r=i(le),g8=n(le,"LI",{});var Z9e=s(g8);Que=n(Z9e,"STRONG",{});var F1t=s(Que);h_r=r(F1t,"roberta"),F1t.forEach(t),p_r=r(Z9e," \u2014 "),wX=n(Z9e,"A",{href:!0});var C1t=s(wX);__r=r(C1t,"TFRobertaForMultipleChoice"),C1t.forEach(t),u_r=r(Z9e," (RoBERTa model)"),Z9e.forEach(t),b_r=i(le),h8=n(le,"LI",{});var eBe=s(h8);Hue=n(eBe,"STRONG",{});var M1t=s(Hue);v_r=r(M1t,"roformer"),M1t.forEach(t),T_r=r(eBe," \u2014 "),AX=n(eBe,"A",{href:!0});var E1t=s(AX);F_r=r(E1t,"TFRoFormerForMultipleChoice"),E1t.forEach(t),C_r=r(eBe," (RoFormer model)"),eBe.forEach(t),M_r=i(le),p8=n(le,"LI",{});var oBe=s(p8);Uue=n(oBe,"STRONG",{});var y1t=s(Uue);E_r=r(y1t,"xlm"),y1t.forEach(t),y_r=r(oBe," \u2014 "),LX=n(oBe,"A",{href:!0});var w1t=s(LX);w_r=r(w1t,"TFXLMForMultipleChoice"),w1t.forEach(t),A_r=r(oBe," (XLM model)"),oBe.forEach(t),L_r=i(le),_8=n(le,"LI",{});var rBe=s(_8);Jue=n(rBe,"STRONG",{});var A1t=s(Jue);B_r=r(A1t,"xlm-roberta"),A1t.forEach(t),x_r=r(rBe," \u2014 "),BX=n(rBe,"A",{href:!0});var L1t=s(BX);k_r=r(L1t,"TFXLMRobertaForMultipleChoice"),L1t.forEach(t),R_r=r(rBe," (XLM-RoBERTa model)"),rBe.forEach(t),S_r=i(le),u8=n(le,"LI",{});var tBe=s(u8);Yue=n(tBe,"STRONG",{});var B1t=s(Yue);P_r=r(B1t,"xlnet"),B1t.forEach(t),$_r=r(tBe," \u2014 "),xX=n(tBe,"A",{href:!0});var x1t=s(xX);I_r=r(x1t,"TFXLNetForMultipleChoice"),x1t.forEach(t),j_r=r(tBe," (XLNet model)"),tBe.forEach(t),le.forEach(t),D_r=i(ya),Kue=n(ya,"P",{});var k1t=s(Kue);N_r=r(k1t,"Examples:"),k1t.forEach(t),q_r=i(ya),m(oA.$$.fragment,ya),ya.forEach(t),ai.forEach(t),lSe=i(d),Xc=n(d,"H2",{class:!0});var F$e=s(Xc);b8=n(F$e,"A",{id:!0,class:!0,href:!0});var R1t=s(b8);Zue=n(R1t,"SPAN",{});var S1t=s(Zue);m(rA.$$.fragment,S1t),S1t.forEach(t),R1t.forEach(t),G_r=i(F$e),e1e=n(F$e,"SPAN",{});var P1t=s(e1e);O_r=r(P1t,"TFAutoModelForTableQuestionAnswering"),P1t.forEach(t),F$e.forEach(t),iSe=i(d),Lr=n(d,"DIV",{class:!0});var si=s(Lr);m(tA.$$.fragment,si),X_r=i(si),Vc=n(si,"P",{});var yQ=s(Vc);V_r=r(yQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),o1e=n(yQ,"CODE",{});var $1t=s(o1e);z_r=r($1t,"from_pretrained()"),$1t.forEach(t),W_r=r(yQ,"class method or the "),r1e=n(yQ,"CODE",{});var I1t=s(r1e);Q_r=r(I1t,"from_config()"),I1t.forEach(t),H_r=r(yQ,`class
method.`),yQ.forEach(t),U_r=i(si),aA=n(si,"P",{});var C$e=s(aA);J_r=r(C$e,"This class cannot be instantiated directly using "),t1e=n(C$e,"CODE",{});var j1t=s(t1e);Y_r=r(j1t,"__init__()"),j1t.forEach(t),K_r=r(C$e," (throws an error)."),C$e.forEach(t),Z_r=i(si),Mt=n(si,"DIV",{class:!0});var li=s(Mt);m(nA.$$.fragment,li),eur=i(li),a1e=n(li,"P",{});var D1t=s(a1e);our=r(D1t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),D1t.forEach(t),rur=i(li),zc=n(li,"P",{});var wQ=s(zc);tur=r(wQ,`Note:
Loading a model from its configuration file does `),n1e=n(wQ,"STRONG",{});var N1t=s(n1e);aur=r(N1t,"not"),N1t.forEach(t),nur=r(wQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),s1e=n(wQ,"CODE",{});var q1t=s(s1e);sur=r(q1t,"from_pretrained()"),q1t.forEach(t),lur=r(wQ,"to load the model weights."),wQ.forEach(t),iur=i(li),l1e=n(li,"P",{});var G1t=s(l1e);dur=r(G1t,"Examples:"),G1t.forEach(t),cur=i(li),m(sA.$$.fragment,li),li.forEach(t),fur=i(si),Co=n(si,"DIV",{class:!0});var wa=s(Co);m(lA.$$.fragment,wa),mur=i(wa),i1e=n(wa,"P",{});var O1t=s(i1e);gur=r(O1t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),O1t.forEach(t),hur=i(wa),Ln=n(wa,"P",{});var e4=s(Ln);pur=r(e4,"The model class to instantiate is selected based on the "),d1e=n(e4,"CODE",{});var X1t=s(d1e);_ur=r(X1t,"model_type"),X1t.forEach(t),uur=r(e4,` property of the config object (either
passed as an argument or loaded from `),c1e=n(e4,"CODE",{});var V1t=s(c1e);bur=r(V1t,"pretrained_model_name_or_path"),V1t.forEach(t),vur=r(e4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f1e=n(e4,"CODE",{});var z1t=s(f1e);Tur=r(z1t,"pretrained_model_name_or_path"),z1t.forEach(t),Fur=r(e4,":"),e4.forEach(t),Cur=i(wa),m1e=n(wa,"UL",{});var W1t=s(m1e);v8=n(W1t,"LI",{});var aBe=s(v8);g1e=n(aBe,"STRONG",{});var Q1t=s(g1e);Mur=r(Q1t,"tapas"),Q1t.forEach(t),Eur=r(aBe," \u2014 "),kX=n(aBe,"A",{href:!0});var H1t=s(kX);yur=r(H1t,"TFTapasForQuestionAnswering"),H1t.forEach(t),wur=r(aBe," (TAPAS model)"),aBe.forEach(t),W1t.forEach(t),Aur=i(wa),h1e=n(wa,"P",{});var U1t=s(h1e);Lur=r(U1t,"Examples:"),U1t.forEach(t),Bur=i(wa),m(iA.$$.fragment,wa),wa.forEach(t),si.forEach(t),dSe=i(d),Wc=n(d,"H2",{class:!0});var M$e=s(Wc);T8=n(M$e,"A",{id:!0,class:!0,href:!0});var J1t=s(T8);p1e=n(J1t,"SPAN",{});var Y1t=s(p1e);m(dA.$$.fragment,Y1t),Y1t.forEach(t),J1t.forEach(t),xur=i(M$e),_1e=n(M$e,"SPAN",{});var K1t=s(_1e);kur=r(K1t,"TFAutoModelForTokenClassification"),K1t.forEach(t),M$e.forEach(t),cSe=i(d),Br=n(d,"DIV",{class:!0});var ii=s(Br);m(cA.$$.fragment,ii),Rur=i(ii),Qc=n(ii,"P",{});var AQ=s(Qc);Sur=r(AQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),u1e=n(AQ,"CODE",{});var Z1t=s(u1e);Pur=r(Z1t,"from_pretrained()"),Z1t.forEach(t),$ur=r(AQ,"class method or the "),b1e=n(AQ,"CODE",{});var ebt=s(b1e);Iur=r(ebt,"from_config()"),ebt.forEach(t),jur=r(AQ,`class
method.`),AQ.forEach(t),Dur=i(ii),fA=n(ii,"P",{});var E$e=s(fA);Nur=r(E$e,"This class cannot be instantiated directly using "),v1e=n(E$e,"CODE",{});var obt=s(v1e);qur=r(obt,"__init__()"),obt.forEach(t),Gur=r(E$e," (throws an error)."),E$e.forEach(t),Our=i(ii),Et=n(ii,"DIV",{class:!0});var di=s(Et);m(mA.$$.fragment,di),Xur=i(di),T1e=n(di,"P",{});var rbt=s(T1e);Vur=r(rbt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rbt.forEach(t),zur=i(di),Hc=n(di,"P",{});var LQ=s(Hc);Wur=r(LQ,`Note:
Loading a model from its configuration file does `),F1e=n(LQ,"STRONG",{});var tbt=s(F1e);Qur=r(tbt,"not"),tbt.forEach(t),Hur=r(LQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),C1e=n(LQ,"CODE",{});var abt=s(C1e);Uur=r(abt,"from_pretrained()"),abt.forEach(t),Jur=r(LQ,"to load the model weights."),LQ.forEach(t),Yur=i(di),M1e=n(di,"P",{});var nbt=s(M1e);Kur=r(nbt,"Examples:"),nbt.forEach(t),Zur=i(di),m(gA.$$.fragment,di),di.forEach(t),e1r=i(ii),Mo=n(ii,"DIV",{class:!0});var Aa=s(Mo);m(hA.$$.fragment,Aa),o1r=i(Aa),E1e=n(Aa,"P",{});var sbt=s(E1e);r1r=r(sbt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sbt.forEach(t),t1r=i(Aa),Bn=n(Aa,"P",{});var o4=s(Bn);a1r=r(o4,"The model class to instantiate is selected based on the "),y1e=n(o4,"CODE",{});var lbt=s(y1e);n1r=r(lbt,"model_type"),lbt.forEach(t),s1r=r(o4,` property of the config object (either
passed as an argument or loaded from `),w1e=n(o4,"CODE",{});var ibt=s(w1e);l1r=r(ibt,"pretrained_model_name_or_path"),ibt.forEach(t),i1r=r(o4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A1e=n(o4,"CODE",{});var dbt=s(A1e);d1r=r(dbt,"pretrained_model_name_or_path"),dbt.forEach(t),c1r=r(o4,":"),o4.forEach(t),f1r=i(Aa),Y=n(Aa,"UL",{});var oe=s(Y);F8=n(oe,"LI",{});var nBe=s(F8);L1e=n(nBe,"STRONG",{});var cbt=s(L1e);m1r=r(cbt,"albert"),cbt.forEach(t),g1r=r(nBe," \u2014 "),RX=n(nBe,"A",{href:!0});var fbt=s(RX);h1r=r(fbt,"TFAlbertForTokenClassification"),fbt.forEach(t),p1r=r(nBe," (ALBERT model)"),nBe.forEach(t),_1r=i(oe),C8=n(oe,"LI",{});var sBe=s(C8);B1e=n(sBe,"STRONG",{});var mbt=s(B1e);u1r=r(mbt,"bert"),mbt.forEach(t),b1r=r(sBe," \u2014 "),SX=n(sBe,"A",{href:!0});var gbt=s(SX);v1r=r(gbt,"TFBertForTokenClassification"),gbt.forEach(t),T1r=r(sBe," (BERT model)"),sBe.forEach(t),F1r=i(oe),M8=n(oe,"LI",{});var lBe=s(M8);x1e=n(lBe,"STRONG",{});var hbt=s(x1e);C1r=r(hbt,"camembert"),hbt.forEach(t),M1r=r(lBe," \u2014 "),PX=n(lBe,"A",{href:!0});var pbt=s(PX);E1r=r(pbt,"TFCamembertForTokenClassification"),pbt.forEach(t),y1r=r(lBe," (CamemBERT model)"),lBe.forEach(t),w1r=i(oe),E8=n(oe,"LI",{});var iBe=s(E8);k1e=n(iBe,"STRONG",{});var _bt=s(k1e);A1r=r(_bt,"convbert"),_bt.forEach(t),L1r=r(iBe," \u2014 "),$X=n(iBe,"A",{href:!0});var ubt=s($X);B1r=r(ubt,"TFConvBertForTokenClassification"),ubt.forEach(t),x1r=r(iBe," (ConvBERT model)"),iBe.forEach(t),k1r=i(oe),y8=n(oe,"LI",{});var dBe=s(y8);R1e=n(dBe,"STRONG",{});var bbt=s(R1e);R1r=r(bbt,"deberta"),bbt.forEach(t),S1r=r(dBe," \u2014 "),IX=n(dBe,"A",{href:!0});var vbt=s(IX);P1r=r(vbt,"TFDebertaForTokenClassification"),vbt.forEach(t),$1r=r(dBe," (DeBERTa model)"),dBe.forEach(t),I1r=i(oe),w8=n(oe,"LI",{});var cBe=s(w8);S1e=n(cBe,"STRONG",{});var Tbt=s(S1e);j1r=r(Tbt,"deberta-v2"),Tbt.forEach(t),D1r=r(cBe," \u2014 "),jX=n(cBe,"A",{href:!0});var Fbt=s(jX);N1r=r(Fbt,"TFDebertaV2ForTokenClassification"),Fbt.forEach(t),q1r=r(cBe," (DeBERTa-v2 model)"),cBe.forEach(t),G1r=i(oe),A8=n(oe,"LI",{});var fBe=s(A8);P1e=n(fBe,"STRONG",{});var Cbt=s(P1e);O1r=r(Cbt,"distilbert"),Cbt.forEach(t),X1r=r(fBe," \u2014 "),DX=n(fBe,"A",{href:!0});var Mbt=s(DX);V1r=r(Mbt,"TFDistilBertForTokenClassification"),Mbt.forEach(t),z1r=r(fBe," (DistilBERT model)"),fBe.forEach(t),W1r=i(oe),L8=n(oe,"LI",{});var mBe=s(L8);$1e=n(mBe,"STRONG",{});var Ebt=s($1e);Q1r=r(Ebt,"electra"),Ebt.forEach(t),H1r=r(mBe," \u2014 "),NX=n(mBe,"A",{href:!0});var ybt=s(NX);U1r=r(ybt,"TFElectraForTokenClassification"),ybt.forEach(t),J1r=r(mBe," (ELECTRA model)"),mBe.forEach(t),Y1r=i(oe),B8=n(oe,"LI",{});var gBe=s(B8);I1e=n(gBe,"STRONG",{});var wbt=s(I1e);K1r=r(wbt,"flaubert"),wbt.forEach(t),Z1r=r(gBe," \u2014 "),qX=n(gBe,"A",{href:!0});var Abt=s(qX);ebr=r(Abt,"TFFlaubertForTokenClassification"),Abt.forEach(t),obr=r(gBe," (FlauBERT model)"),gBe.forEach(t),rbr=i(oe),x8=n(oe,"LI",{});var hBe=s(x8);j1e=n(hBe,"STRONG",{});var Lbt=s(j1e);tbr=r(Lbt,"funnel"),Lbt.forEach(t),abr=r(hBe," \u2014 "),GX=n(hBe,"A",{href:!0});var Bbt=s(GX);nbr=r(Bbt,"TFFunnelForTokenClassification"),Bbt.forEach(t),sbr=r(hBe," (Funnel Transformer model)"),hBe.forEach(t),lbr=i(oe),k8=n(oe,"LI",{});var pBe=s(k8);D1e=n(pBe,"STRONG",{});var xbt=s(D1e);ibr=r(xbt,"layoutlm"),xbt.forEach(t),dbr=r(pBe," \u2014 "),OX=n(pBe,"A",{href:!0});var kbt=s(OX);cbr=r(kbt,"TFLayoutLMForTokenClassification"),kbt.forEach(t),fbr=r(pBe," (LayoutLM model)"),pBe.forEach(t),mbr=i(oe),R8=n(oe,"LI",{});var _Be=s(R8);N1e=n(_Be,"STRONG",{});var Rbt=s(N1e);gbr=r(Rbt,"longformer"),Rbt.forEach(t),hbr=r(_Be," \u2014 "),XX=n(_Be,"A",{href:!0});var Sbt=s(XX);pbr=r(Sbt,"TFLongformerForTokenClassification"),Sbt.forEach(t),_br=r(_Be," (Longformer model)"),_Be.forEach(t),ubr=i(oe),S8=n(oe,"LI",{});var uBe=s(S8);q1e=n(uBe,"STRONG",{});var Pbt=s(q1e);bbr=r(Pbt,"mobilebert"),Pbt.forEach(t),vbr=r(uBe," \u2014 "),VX=n(uBe,"A",{href:!0});var $bt=s(VX);Tbr=r($bt,"TFMobileBertForTokenClassification"),$bt.forEach(t),Fbr=r(uBe," (MobileBERT model)"),uBe.forEach(t),Cbr=i(oe),P8=n(oe,"LI",{});var bBe=s(P8);G1e=n(bBe,"STRONG",{});var Ibt=s(G1e);Mbr=r(Ibt,"mpnet"),Ibt.forEach(t),Ebr=r(bBe," \u2014 "),zX=n(bBe,"A",{href:!0});var jbt=s(zX);ybr=r(jbt,"TFMPNetForTokenClassification"),jbt.forEach(t),wbr=r(bBe," (MPNet model)"),bBe.forEach(t),Abr=i(oe),$8=n(oe,"LI",{});var vBe=s($8);O1e=n(vBe,"STRONG",{});var Dbt=s(O1e);Lbr=r(Dbt,"rembert"),Dbt.forEach(t),Bbr=r(vBe," \u2014 "),WX=n(vBe,"A",{href:!0});var Nbt=s(WX);xbr=r(Nbt,"TFRemBertForTokenClassification"),Nbt.forEach(t),kbr=r(vBe," (RemBERT model)"),vBe.forEach(t),Rbr=i(oe),I8=n(oe,"LI",{});var TBe=s(I8);X1e=n(TBe,"STRONG",{});var qbt=s(X1e);Sbr=r(qbt,"roberta"),qbt.forEach(t),Pbr=r(TBe," \u2014 "),QX=n(TBe,"A",{href:!0});var Gbt=s(QX);$br=r(Gbt,"TFRobertaForTokenClassification"),Gbt.forEach(t),Ibr=r(TBe," (RoBERTa model)"),TBe.forEach(t),jbr=i(oe),j8=n(oe,"LI",{});var FBe=s(j8);V1e=n(FBe,"STRONG",{});var Obt=s(V1e);Dbr=r(Obt,"roformer"),Obt.forEach(t),Nbr=r(FBe," \u2014 "),HX=n(FBe,"A",{href:!0});var Xbt=s(HX);qbr=r(Xbt,"TFRoFormerForTokenClassification"),Xbt.forEach(t),Gbr=r(FBe," (RoFormer model)"),FBe.forEach(t),Obr=i(oe),D8=n(oe,"LI",{});var CBe=s(D8);z1e=n(CBe,"STRONG",{});var Vbt=s(z1e);Xbr=r(Vbt,"xlm"),Vbt.forEach(t),Vbr=r(CBe," \u2014 "),UX=n(CBe,"A",{href:!0});var zbt=s(UX);zbr=r(zbt,"TFXLMForTokenClassification"),zbt.forEach(t),Wbr=r(CBe," (XLM model)"),CBe.forEach(t),Qbr=i(oe),N8=n(oe,"LI",{});var MBe=s(N8);W1e=n(MBe,"STRONG",{});var Wbt=s(W1e);Hbr=r(Wbt,"xlm-roberta"),Wbt.forEach(t),Ubr=r(MBe," \u2014 "),JX=n(MBe,"A",{href:!0});var Qbt=s(JX);Jbr=r(Qbt,"TFXLMRobertaForTokenClassification"),Qbt.forEach(t),Ybr=r(MBe," (XLM-RoBERTa model)"),MBe.forEach(t),Kbr=i(oe),q8=n(oe,"LI",{});var EBe=s(q8);Q1e=n(EBe,"STRONG",{});var Hbt=s(Q1e);Zbr=r(Hbt,"xlnet"),Hbt.forEach(t),e5r=r(EBe," \u2014 "),YX=n(EBe,"A",{href:!0});var Ubt=s(YX);o5r=r(Ubt,"TFXLNetForTokenClassification"),Ubt.forEach(t),r5r=r(EBe," (XLNet model)"),EBe.forEach(t),oe.forEach(t),t5r=i(Aa),H1e=n(Aa,"P",{});var Jbt=s(H1e);a5r=r(Jbt,"Examples:"),Jbt.forEach(t),n5r=i(Aa),m(pA.$$.fragment,Aa),Aa.forEach(t),ii.forEach(t),fSe=i(d),Uc=n(d,"H2",{class:!0});var y$e=s(Uc);G8=n(y$e,"A",{id:!0,class:!0,href:!0});var Ybt=s(G8);U1e=n(Ybt,"SPAN",{});var Kbt=s(U1e);m(_A.$$.fragment,Kbt),Kbt.forEach(t),Ybt.forEach(t),s5r=i(y$e),J1e=n(y$e,"SPAN",{});var Zbt=s(J1e);l5r=r(Zbt,"TFAutoModelForQuestionAnswering"),Zbt.forEach(t),y$e.forEach(t),mSe=i(d),xr=n(d,"DIV",{class:!0});var ci=s(xr);m(uA.$$.fragment,ci),i5r=i(ci),Jc=n(ci,"P",{});var BQ=s(Jc);d5r=r(BQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Y1e=n(BQ,"CODE",{});var e5t=s(Y1e);c5r=r(e5t,"from_pretrained()"),e5t.forEach(t),f5r=r(BQ,"class method or the "),K1e=n(BQ,"CODE",{});var o5t=s(K1e);m5r=r(o5t,"from_config()"),o5t.forEach(t),g5r=r(BQ,`class
method.`),BQ.forEach(t),h5r=i(ci),bA=n(ci,"P",{});var w$e=s(bA);p5r=r(w$e,"This class cannot be instantiated directly using "),Z1e=n(w$e,"CODE",{});var r5t=s(Z1e);_5r=r(r5t,"__init__()"),r5t.forEach(t),u5r=r(w$e," (throws an error)."),w$e.forEach(t),b5r=i(ci),yt=n(ci,"DIV",{class:!0});var fi=s(yt);m(vA.$$.fragment,fi),v5r=i(fi),ebe=n(fi,"P",{});var t5t=s(ebe);T5r=r(t5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),t5t.forEach(t),F5r=i(fi),Yc=n(fi,"P",{});var xQ=s(Yc);C5r=r(xQ,`Note:
Loading a model from its configuration file does `),obe=n(xQ,"STRONG",{});var a5t=s(obe);M5r=r(a5t,"not"),a5t.forEach(t),E5r=r(xQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rbe=n(xQ,"CODE",{});var n5t=s(rbe);y5r=r(n5t,"from_pretrained()"),n5t.forEach(t),w5r=r(xQ,"to load the model weights."),xQ.forEach(t),A5r=i(fi),tbe=n(fi,"P",{});var s5t=s(tbe);L5r=r(s5t,"Examples:"),s5t.forEach(t),B5r=i(fi),m(TA.$$.fragment,fi),fi.forEach(t),x5r=i(ci),Eo=n(ci,"DIV",{class:!0});var La=s(Eo);m(FA.$$.fragment,La),k5r=i(La),abe=n(La,"P",{});var l5t=s(abe);R5r=r(l5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),l5t.forEach(t),S5r=i(La),xn=n(La,"P",{});var r4=s(xn);P5r=r(r4,"The model class to instantiate is selected based on the "),nbe=n(r4,"CODE",{});var i5t=s(nbe);$5r=r(i5t,"model_type"),i5t.forEach(t),I5r=r(r4,` property of the config object (either
passed as an argument or loaded from `),sbe=n(r4,"CODE",{});var d5t=s(sbe);j5r=r(d5t,"pretrained_model_name_or_path"),d5t.forEach(t),D5r=r(r4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=n(r4,"CODE",{});var c5t=s(lbe);N5r=r(c5t,"pretrained_model_name_or_path"),c5t.forEach(t),q5r=r(r4,":"),r4.forEach(t),G5r=i(La),Z=n(La,"UL",{});var te=s(Z);O8=n(te,"LI",{});var yBe=s(O8);ibe=n(yBe,"STRONG",{});var f5t=s(ibe);O5r=r(f5t,"albert"),f5t.forEach(t),X5r=r(yBe," \u2014 "),KX=n(yBe,"A",{href:!0});var m5t=s(KX);V5r=r(m5t,"TFAlbertForQuestionAnswering"),m5t.forEach(t),z5r=r(yBe," (ALBERT model)"),yBe.forEach(t),W5r=i(te),X8=n(te,"LI",{});var wBe=s(X8);dbe=n(wBe,"STRONG",{});var g5t=s(dbe);Q5r=r(g5t,"bert"),g5t.forEach(t),H5r=r(wBe," \u2014 "),ZX=n(wBe,"A",{href:!0});var h5t=s(ZX);U5r=r(h5t,"TFBertForQuestionAnswering"),h5t.forEach(t),J5r=r(wBe," (BERT model)"),wBe.forEach(t),Y5r=i(te),V8=n(te,"LI",{});var ABe=s(V8);cbe=n(ABe,"STRONG",{});var p5t=s(cbe);K5r=r(p5t,"camembert"),p5t.forEach(t),Z5r=r(ABe," \u2014 "),eV=n(ABe,"A",{href:!0});var _5t=s(eV);e2r=r(_5t,"TFCamembertForQuestionAnswering"),_5t.forEach(t),o2r=r(ABe," (CamemBERT model)"),ABe.forEach(t),r2r=i(te),z8=n(te,"LI",{});var LBe=s(z8);fbe=n(LBe,"STRONG",{});var u5t=s(fbe);t2r=r(u5t,"convbert"),u5t.forEach(t),a2r=r(LBe," \u2014 "),oV=n(LBe,"A",{href:!0});var b5t=s(oV);n2r=r(b5t,"TFConvBertForQuestionAnswering"),b5t.forEach(t),s2r=r(LBe," (ConvBERT model)"),LBe.forEach(t),l2r=i(te),W8=n(te,"LI",{});var BBe=s(W8);mbe=n(BBe,"STRONG",{});var v5t=s(mbe);i2r=r(v5t,"deberta"),v5t.forEach(t),d2r=r(BBe," \u2014 "),rV=n(BBe,"A",{href:!0});var T5t=s(rV);c2r=r(T5t,"TFDebertaForQuestionAnswering"),T5t.forEach(t),f2r=r(BBe," (DeBERTa model)"),BBe.forEach(t),m2r=i(te),Q8=n(te,"LI",{});var xBe=s(Q8);gbe=n(xBe,"STRONG",{});var F5t=s(gbe);g2r=r(F5t,"deberta-v2"),F5t.forEach(t),h2r=r(xBe," \u2014 "),tV=n(xBe,"A",{href:!0});var C5t=s(tV);p2r=r(C5t,"TFDebertaV2ForQuestionAnswering"),C5t.forEach(t),_2r=r(xBe," (DeBERTa-v2 model)"),xBe.forEach(t),u2r=i(te),H8=n(te,"LI",{});var kBe=s(H8);hbe=n(kBe,"STRONG",{});var M5t=s(hbe);b2r=r(M5t,"distilbert"),M5t.forEach(t),v2r=r(kBe," \u2014 "),aV=n(kBe,"A",{href:!0});var E5t=s(aV);T2r=r(E5t,"TFDistilBertForQuestionAnswering"),E5t.forEach(t),F2r=r(kBe," (DistilBERT model)"),kBe.forEach(t),C2r=i(te),U8=n(te,"LI",{});var RBe=s(U8);pbe=n(RBe,"STRONG",{});var y5t=s(pbe);M2r=r(y5t,"electra"),y5t.forEach(t),E2r=r(RBe," \u2014 "),nV=n(RBe,"A",{href:!0});var w5t=s(nV);y2r=r(w5t,"TFElectraForQuestionAnswering"),w5t.forEach(t),w2r=r(RBe," (ELECTRA model)"),RBe.forEach(t),A2r=i(te),J8=n(te,"LI",{});var SBe=s(J8);_be=n(SBe,"STRONG",{});var A5t=s(_be);L2r=r(A5t,"flaubert"),A5t.forEach(t),B2r=r(SBe," \u2014 "),sV=n(SBe,"A",{href:!0});var L5t=s(sV);x2r=r(L5t,"TFFlaubertForQuestionAnsweringSimple"),L5t.forEach(t),k2r=r(SBe," (FlauBERT model)"),SBe.forEach(t),R2r=i(te),Y8=n(te,"LI",{});var PBe=s(Y8);ube=n(PBe,"STRONG",{});var B5t=s(ube);S2r=r(B5t,"funnel"),B5t.forEach(t),P2r=r(PBe," \u2014 "),lV=n(PBe,"A",{href:!0});var x5t=s(lV);$2r=r(x5t,"TFFunnelForQuestionAnswering"),x5t.forEach(t),I2r=r(PBe," (Funnel Transformer model)"),PBe.forEach(t),j2r=i(te),K8=n(te,"LI",{});var $Be=s(K8);bbe=n($Be,"STRONG",{});var k5t=s(bbe);D2r=r(k5t,"longformer"),k5t.forEach(t),N2r=r($Be," \u2014 "),iV=n($Be,"A",{href:!0});var R5t=s(iV);q2r=r(R5t,"TFLongformerForQuestionAnswering"),R5t.forEach(t),G2r=r($Be," (Longformer model)"),$Be.forEach(t),O2r=i(te),Z8=n(te,"LI",{});var IBe=s(Z8);vbe=n(IBe,"STRONG",{});var S5t=s(vbe);X2r=r(S5t,"mobilebert"),S5t.forEach(t),V2r=r(IBe," \u2014 "),dV=n(IBe,"A",{href:!0});var P5t=s(dV);z2r=r(P5t,"TFMobileBertForQuestionAnswering"),P5t.forEach(t),W2r=r(IBe," (MobileBERT model)"),IBe.forEach(t),Q2r=i(te),eF=n(te,"LI",{});var jBe=s(eF);Tbe=n(jBe,"STRONG",{});var $5t=s(Tbe);H2r=r($5t,"mpnet"),$5t.forEach(t),U2r=r(jBe," \u2014 "),cV=n(jBe,"A",{href:!0});var I5t=s(cV);J2r=r(I5t,"TFMPNetForQuestionAnswering"),I5t.forEach(t),Y2r=r(jBe," (MPNet model)"),jBe.forEach(t),K2r=i(te),oF=n(te,"LI",{});var DBe=s(oF);Fbe=n(DBe,"STRONG",{});var j5t=s(Fbe);Z2r=r(j5t,"rembert"),j5t.forEach(t),evr=r(DBe," \u2014 "),fV=n(DBe,"A",{href:!0});var D5t=s(fV);ovr=r(D5t,"TFRemBertForQuestionAnswering"),D5t.forEach(t),rvr=r(DBe," (RemBERT model)"),DBe.forEach(t),tvr=i(te),rF=n(te,"LI",{});var NBe=s(rF);Cbe=n(NBe,"STRONG",{});var N5t=s(Cbe);avr=r(N5t,"roberta"),N5t.forEach(t),nvr=r(NBe," \u2014 "),mV=n(NBe,"A",{href:!0});var q5t=s(mV);svr=r(q5t,"TFRobertaForQuestionAnswering"),q5t.forEach(t),lvr=r(NBe," (RoBERTa model)"),NBe.forEach(t),ivr=i(te),tF=n(te,"LI",{});var qBe=s(tF);Mbe=n(qBe,"STRONG",{});var G5t=s(Mbe);dvr=r(G5t,"roformer"),G5t.forEach(t),cvr=r(qBe," \u2014 "),gV=n(qBe,"A",{href:!0});var O5t=s(gV);fvr=r(O5t,"TFRoFormerForQuestionAnswering"),O5t.forEach(t),mvr=r(qBe," (RoFormer model)"),qBe.forEach(t),gvr=i(te),aF=n(te,"LI",{});var GBe=s(aF);Ebe=n(GBe,"STRONG",{});var X5t=s(Ebe);hvr=r(X5t,"xlm"),X5t.forEach(t),pvr=r(GBe," \u2014 "),hV=n(GBe,"A",{href:!0});var V5t=s(hV);_vr=r(V5t,"TFXLMForQuestionAnsweringSimple"),V5t.forEach(t),uvr=r(GBe," (XLM model)"),GBe.forEach(t),bvr=i(te),nF=n(te,"LI",{});var OBe=s(nF);ybe=n(OBe,"STRONG",{});var z5t=s(ybe);vvr=r(z5t,"xlm-roberta"),z5t.forEach(t),Tvr=r(OBe," \u2014 "),pV=n(OBe,"A",{href:!0});var W5t=s(pV);Fvr=r(W5t,"TFXLMRobertaForQuestionAnswering"),W5t.forEach(t),Cvr=r(OBe," (XLM-RoBERTa model)"),OBe.forEach(t),Mvr=i(te),sF=n(te,"LI",{});var XBe=s(sF);wbe=n(XBe,"STRONG",{});var Q5t=s(wbe);Evr=r(Q5t,"xlnet"),Q5t.forEach(t),yvr=r(XBe," \u2014 "),_V=n(XBe,"A",{href:!0});var H5t=s(_V);wvr=r(H5t,"TFXLNetForQuestionAnsweringSimple"),H5t.forEach(t),Avr=r(XBe," (XLNet model)"),XBe.forEach(t),te.forEach(t),Lvr=i(La),Abe=n(La,"P",{});var U5t=s(Abe);Bvr=r(U5t,"Examples:"),U5t.forEach(t),xvr=i(La),m(CA.$$.fragment,La),La.forEach(t),ci.forEach(t),gSe=i(d),Kc=n(d,"H2",{class:!0});var A$e=s(Kc);lF=n(A$e,"A",{id:!0,class:!0,href:!0});var J5t=s(lF);Lbe=n(J5t,"SPAN",{});var Y5t=s(Lbe);m(MA.$$.fragment,Y5t),Y5t.forEach(t),J5t.forEach(t),kvr=i(A$e),Bbe=n(A$e,"SPAN",{});var K5t=s(Bbe);Rvr=r(K5t,"TFAutoModelForVision2Seq"),K5t.forEach(t),A$e.forEach(t),hSe=i(d),kr=n(d,"DIV",{class:!0});var mi=s(kr);m(EA.$$.fragment,mi),Svr=i(mi),Zc=n(mi,"P",{});var kQ=s(Zc);Pvr=r(kQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),xbe=n(kQ,"CODE",{});var Z5t=s(xbe);$vr=r(Z5t,"from_pretrained()"),Z5t.forEach(t),Ivr=r(kQ,"class method or the "),kbe=n(kQ,"CODE",{});var e2t=s(kbe);jvr=r(e2t,"from_config()"),e2t.forEach(t),Dvr=r(kQ,`class
method.`),kQ.forEach(t),Nvr=i(mi),yA=n(mi,"P",{});var L$e=s(yA);qvr=r(L$e,"This class cannot be instantiated directly using "),Rbe=n(L$e,"CODE",{});var o2t=s(Rbe);Gvr=r(o2t,"__init__()"),o2t.forEach(t),Ovr=r(L$e," (throws an error)."),L$e.forEach(t),Xvr=i(mi),wt=n(mi,"DIV",{class:!0});var gi=s(wt);m(wA.$$.fragment,gi),Vvr=i(gi),Sbe=n(gi,"P",{});var r2t=s(Sbe);zvr=r(r2t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),r2t.forEach(t),Wvr=i(gi),ef=n(gi,"P",{});var RQ=s(ef);Qvr=r(RQ,`Note:
Loading a model from its configuration file does `),Pbe=n(RQ,"STRONG",{});var t2t=s(Pbe);Hvr=r(t2t,"not"),t2t.forEach(t),Uvr=r(RQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$be=n(RQ,"CODE",{});var a2t=s($be);Jvr=r(a2t,"from_pretrained()"),a2t.forEach(t),Yvr=r(RQ,"to load the model weights."),RQ.forEach(t),Kvr=i(gi),Ibe=n(gi,"P",{});var n2t=s(Ibe);Zvr=r(n2t,"Examples:"),n2t.forEach(t),e6r=i(gi),m(AA.$$.fragment,gi),gi.forEach(t),o6r=i(mi),yo=n(mi,"DIV",{class:!0});var Ba=s(yo);m(LA.$$.fragment,Ba),r6r=i(Ba),jbe=n(Ba,"P",{});var s2t=s(jbe);t6r=r(s2t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),s2t.forEach(t),a6r=i(Ba),kn=n(Ba,"P",{});var t4=s(kn);n6r=r(t4,"The model class to instantiate is selected based on the "),Dbe=n(t4,"CODE",{});var l2t=s(Dbe);s6r=r(l2t,"model_type"),l2t.forEach(t),l6r=r(t4,` property of the config object (either
passed as an argument or loaded from `),Nbe=n(t4,"CODE",{});var i2t=s(Nbe);i6r=r(i2t,"pretrained_model_name_or_path"),i2t.forEach(t),d6r=r(t4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qbe=n(t4,"CODE",{});var d2t=s(qbe);c6r=r(d2t,"pretrained_model_name_or_path"),d2t.forEach(t),f6r=r(t4,":"),t4.forEach(t),m6r=i(Ba),Gbe=n(Ba,"UL",{});var c2t=s(Gbe);iF=n(c2t,"LI",{});var VBe=s(iF);Obe=n(VBe,"STRONG",{});var f2t=s(Obe);g6r=r(f2t,"vision-encoder-decoder"),f2t.forEach(t),h6r=r(VBe," \u2014 "),uV=n(VBe,"A",{href:!0});var m2t=s(uV);p6r=r(m2t,"TFVisionEncoderDecoderModel"),m2t.forEach(t),_6r=r(VBe," (Vision Encoder decoder model)"),VBe.forEach(t),c2t.forEach(t),u6r=i(Ba),Xbe=n(Ba,"P",{});var g2t=s(Xbe);b6r=r(g2t,"Examples:"),g2t.forEach(t),v6r=i(Ba),m(BA.$$.fragment,Ba),Ba.forEach(t),mi.forEach(t),pSe=i(d),of=n(d,"H2",{class:!0});var B$e=s(of);dF=n(B$e,"A",{id:!0,class:!0,href:!0});var h2t=s(dF);Vbe=n(h2t,"SPAN",{});var p2t=s(Vbe);m(xA.$$.fragment,p2t),p2t.forEach(t),h2t.forEach(t),T6r=i(B$e),zbe=n(B$e,"SPAN",{});var _2t=s(zbe);F6r=r(_2t,"TFAutoModelForSpeechSeq2Seq"),_2t.forEach(t),B$e.forEach(t),_Se=i(d),Rr=n(d,"DIV",{class:!0});var hi=s(Rr);m(kA.$$.fragment,hi),C6r=i(hi),rf=n(hi,"P",{});var SQ=s(rf);M6r=r(SQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Wbe=n(SQ,"CODE",{});var u2t=s(Wbe);E6r=r(u2t,"from_pretrained()"),u2t.forEach(t),y6r=r(SQ,"class method or the "),Qbe=n(SQ,"CODE",{});var b2t=s(Qbe);w6r=r(b2t,"from_config()"),b2t.forEach(t),A6r=r(SQ,`class
method.`),SQ.forEach(t),L6r=i(hi),RA=n(hi,"P",{});var x$e=s(RA);B6r=r(x$e,"This class cannot be instantiated directly using "),Hbe=n(x$e,"CODE",{});var v2t=s(Hbe);x6r=r(v2t,"__init__()"),v2t.forEach(t),k6r=r(x$e," (throws an error)."),x$e.forEach(t),R6r=i(hi),At=n(hi,"DIV",{class:!0});var pi=s(At);m(SA.$$.fragment,pi),S6r=i(pi),Ube=n(pi,"P",{});var T2t=s(Ube);P6r=r(T2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),T2t.forEach(t),$6r=i(pi),tf=n(pi,"P",{});var PQ=s(tf);I6r=r(PQ,`Note:
Loading a model from its configuration file does `),Jbe=n(PQ,"STRONG",{});var F2t=s(Jbe);j6r=r(F2t,"not"),F2t.forEach(t),D6r=r(PQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ybe=n(PQ,"CODE",{});var C2t=s(Ybe);N6r=r(C2t,"from_pretrained()"),C2t.forEach(t),q6r=r(PQ,"to load the model weights."),PQ.forEach(t),G6r=i(pi),Kbe=n(pi,"P",{});var M2t=s(Kbe);O6r=r(M2t,"Examples:"),M2t.forEach(t),X6r=i(pi),m(PA.$$.fragment,pi),pi.forEach(t),V6r=i(hi),wo=n(hi,"DIV",{class:!0});var xa=s(wo);m($A.$$.fragment,xa),z6r=i(xa),Zbe=n(xa,"P",{});var E2t=s(Zbe);W6r=r(E2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),E2t.forEach(t),Q6r=i(xa),Rn=n(xa,"P",{});var a4=s(Rn);H6r=r(a4,"The model class to instantiate is selected based on the "),e5e=n(a4,"CODE",{});var y2t=s(e5e);U6r=r(y2t,"model_type"),y2t.forEach(t),J6r=r(a4,` property of the config object (either
passed as an argument or loaded from `),o5e=n(a4,"CODE",{});var w2t=s(o5e);Y6r=r(w2t,"pretrained_model_name_or_path"),w2t.forEach(t),K6r=r(a4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r5e=n(a4,"CODE",{});var A2t=s(r5e);Z6r=r(A2t,"pretrained_model_name_or_path"),A2t.forEach(t),e0r=r(a4,":"),a4.forEach(t),o0r=i(xa),t5e=n(xa,"UL",{});var L2t=s(t5e);cF=n(L2t,"LI",{});var zBe=s(cF);a5e=n(zBe,"STRONG",{});var B2t=s(a5e);r0r=r(B2t,"speech_to_text"),B2t.forEach(t),t0r=r(zBe," \u2014 "),bV=n(zBe,"A",{href:!0});var x2t=s(bV);a0r=r(x2t,"TFSpeech2TextForConditionalGeneration"),x2t.forEach(t),n0r=r(zBe," (Speech2Text model)"),zBe.forEach(t),L2t.forEach(t),s0r=i(xa),n5e=n(xa,"P",{});var k2t=s(n5e);l0r=r(k2t,"Examples:"),k2t.forEach(t),i0r=i(xa),m(IA.$$.fragment,xa),xa.forEach(t),hi.forEach(t),uSe=i(d),af=n(d,"H2",{class:!0});var k$e=s(af);fF=n(k$e,"A",{id:!0,class:!0,href:!0});var R2t=s(fF);s5e=n(R2t,"SPAN",{});var S2t=s(s5e);m(jA.$$.fragment,S2t),S2t.forEach(t),R2t.forEach(t),d0r=i(k$e),l5e=n(k$e,"SPAN",{});var P2t=s(l5e);c0r=r(P2t,"FlaxAutoModel"),P2t.forEach(t),k$e.forEach(t),bSe=i(d),Sr=n(d,"DIV",{class:!0});var _i=s(Sr);m(DA.$$.fragment,_i),f0r=i(_i),nf=n(_i,"P",{});var $Q=s(nf);m0r=r($Q,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),i5e=n($Q,"CODE",{});var $2t=s(i5e);g0r=r($2t,"from_pretrained()"),$2t.forEach(t),h0r=r($Q,"class method or the "),d5e=n($Q,"CODE",{});var I2t=s(d5e);p0r=r(I2t,"from_config()"),I2t.forEach(t),_0r=r($Q,`class
method.`),$Q.forEach(t),u0r=i(_i),NA=n(_i,"P",{});var R$e=s(NA);b0r=r(R$e,"This class cannot be instantiated directly using "),c5e=n(R$e,"CODE",{});var j2t=s(c5e);v0r=r(j2t,"__init__()"),j2t.forEach(t),T0r=r(R$e," (throws an error)."),R$e.forEach(t),F0r=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(qA.$$.fragment,ui),C0r=i(ui),f5e=n(ui,"P",{});var D2t=s(f5e);M0r=r(D2t,"Instantiates one of the base model classes of the library from a configuration."),D2t.forEach(t),E0r=i(ui),sf=n(ui,"P",{});var IQ=s(sf);y0r=r(IQ,`Note:
Loading a model from its configuration file does `),m5e=n(IQ,"STRONG",{});var N2t=s(m5e);w0r=r(N2t,"not"),N2t.forEach(t),A0r=r(IQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),g5e=n(IQ,"CODE",{});var q2t=s(g5e);L0r=r(q2t,"from_pretrained()"),q2t.forEach(t),B0r=r(IQ,"to load the model weights."),IQ.forEach(t),x0r=i(ui),h5e=n(ui,"P",{});var G2t=s(h5e);k0r=r(G2t,"Examples:"),G2t.forEach(t),R0r=i(ui),m(GA.$$.fragment,ui),ui.forEach(t),S0r=i(_i),Ao=n(_i,"DIV",{class:!0});var ka=s(Ao);m(OA.$$.fragment,ka),P0r=i(ka),p5e=n(ka,"P",{});var O2t=s(p5e);$0r=r(O2t,"Instantiate one of the base model classes of the library from a pretrained model."),O2t.forEach(t),I0r=i(ka),Sn=n(ka,"P",{});var n4=s(Sn);j0r=r(n4,"The model class to instantiate is selected based on the "),_5e=n(n4,"CODE",{});var X2t=s(_5e);D0r=r(X2t,"model_type"),X2t.forEach(t),N0r=r(n4,` property of the config object (either
passed as an argument or loaded from `),u5e=n(n4,"CODE",{});var V2t=s(u5e);q0r=r(V2t,"pretrained_model_name_or_path"),V2t.forEach(t),G0r=r(n4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b5e=n(n4,"CODE",{});var z2t=s(b5e);O0r=r(z2t,"pretrained_model_name_or_path"),z2t.forEach(t),X0r=r(n4,":"),n4.forEach(t),V0r=i(ka),z=n(ka,"UL",{});var Q=s(z);mF=n(Q,"LI",{});var WBe=s(mF);v5e=n(WBe,"STRONG",{});var W2t=s(v5e);z0r=r(W2t,"albert"),W2t.forEach(t),W0r=r(WBe," \u2014 "),vV=n(WBe,"A",{href:!0});var Q2t=s(vV);Q0r=r(Q2t,"FlaxAlbertModel"),Q2t.forEach(t),H0r=r(WBe," (ALBERT model)"),WBe.forEach(t),U0r=i(Q),gF=n(Q,"LI",{});var QBe=s(gF);T5e=n(QBe,"STRONG",{});var H2t=s(T5e);J0r=r(H2t,"bart"),H2t.forEach(t),Y0r=r(QBe," \u2014 "),TV=n(QBe,"A",{href:!0});var U2t=s(TV);K0r=r(U2t,"FlaxBartModel"),U2t.forEach(t),Z0r=r(QBe," (BART model)"),QBe.forEach(t),eTr=i(Q),hF=n(Q,"LI",{});var HBe=s(hF);F5e=n(HBe,"STRONG",{});var J2t=s(F5e);oTr=r(J2t,"beit"),J2t.forEach(t),rTr=r(HBe," \u2014 "),FV=n(HBe,"A",{href:!0});var Y2t=s(FV);tTr=r(Y2t,"FlaxBeitModel"),Y2t.forEach(t),aTr=r(HBe," (BEiT model)"),HBe.forEach(t),nTr=i(Q),pF=n(Q,"LI",{});var UBe=s(pF);C5e=n(UBe,"STRONG",{});var K2t=s(C5e);sTr=r(K2t,"bert"),K2t.forEach(t),lTr=r(UBe," \u2014 "),CV=n(UBe,"A",{href:!0});var Z2t=s(CV);iTr=r(Z2t,"FlaxBertModel"),Z2t.forEach(t),dTr=r(UBe," (BERT model)"),UBe.forEach(t),cTr=i(Q),_F=n(Q,"LI",{});var JBe=s(_F);M5e=n(JBe,"STRONG",{});var evt=s(M5e);fTr=r(evt,"big_bird"),evt.forEach(t),mTr=r(JBe," \u2014 "),MV=n(JBe,"A",{href:!0});var ovt=s(MV);gTr=r(ovt,"FlaxBigBirdModel"),ovt.forEach(t),hTr=r(JBe," (BigBird model)"),JBe.forEach(t),pTr=i(Q),uF=n(Q,"LI",{});var YBe=s(uF);E5e=n(YBe,"STRONG",{});var rvt=s(E5e);_Tr=r(rvt,"blenderbot"),rvt.forEach(t),uTr=r(YBe," \u2014 "),EV=n(YBe,"A",{href:!0});var tvt=s(EV);bTr=r(tvt,"FlaxBlenderbotModel"),tvt.forEach(t),vTr=r(YBe," (Blenderbot model)"),YBe.forEach(t),TTr=i(Q),bF=n(Q,"LI",{});var KBe=s(bF);y5e=n(KBe,"STRONG",{});var avt=s(y5e);FTr=r(avt,"blenderbot-small"),avt.forEach(t),CTr=r(KBe," \u2014 "),yV=n(KBe,"A",{href:!0});var nvt=s(yV);MTr=r(nvt,"FlaxBlenderbotSmallModel"),nvt.forEach(t),ETr=r(KBe," (BlenderbotSmall model)"),KBe.forEach(t),yTr=i(Q),vF=n(Q,"LI",{});var ZBe=s(vF);w5e=n(ZBe,"STRONG",{});var svt=s(w5e);wTr=r(svt,"clip"),svt.forEach(t),ATr=r(ZBe," \u2014 "),wV=n(ZBe,"A",{href:!0});var lvt=s(wV);LTr=r(lvt,"FlaxCLIPModel"),lvt.forEach(t),BTr=r(ZBe," (CLIP model)"),ZBe.forEach(t),xTr=i(Q),TF=n(Q,"LI",{});var exe=s(TF);A5e=n(exe,"STRONG",{});var ivt=s(A5e);kTr=r(ivt,"distilbert"),ivt.forEach(t),RTr=r(exe," \u2014 "),AV=n(exe,"A",{href:!0});var dvt=s(AV);STr=r(dvt,"FlaxDistilBertModel"),dvt.forEach(t),PTr=r(exe," (DistilBERT model)"),exe.forEach(t),$Tr=i(Q),FF=n(Q,"LI",{});var oxe=s(FF);L5e=n(oxe,"STRONG",{});var cvt=s(L5e);ITr=r(cvt,"electra"),cvt.forEach(t),jTr=r(oxe," \u2014 "),LV=n(oxe,"A",{href:!0});var fvt=s(LV);DTr=r(fvt,"FlaxElectraModel"),fvt.forEach(t),NTr=r(oxe," (ELECTRA model)"),oxe.forEach(t),qTr=i(Q),CF=n(Q,"LI",{});var rxe=s(CF);B5e=n(rxe,"STRONG",{});var mvt=s(B5e);GTr=r(mvt,"gpt2"),mvt.forEach(t),OTr=r(rxe," \u2014 "),BV=n(rxe,"A",{href:!0});var gvt=s(BV);XTr=r(gvt,"FlaxGPT2Model"),gvt.forEach(t),VTr=r(rxe," (OpenAI GPT-2 model)"),rxe.forEach(t),zTr=i(Q),MF=n(Q,"LI",{});var txe=s(MF);x5e=n(txe,"STRONG",{});var hvt=s(x5e);WTr=r(hvt,"gpt_neo"),hvt.forEach(t),QTr=r(txe," \u2014 "),xV=n(txe,"A",{href:!0});var pvt=s(xV);HTr=r(pvt,"FlaxGPTNeoModel"),pvt.forEach(t),UTr=r(txe," (GPT Neo model)"),txe.forEach(t),JTr=i(Q),EF=n(Q,"LI",{});var axe=s(EF);k5e=n(axe,"STRONG",{});var _vt=s(k5e);YTr=r(_vt,"gptj"),_vt.forEach(t),KTr=r(axe," \u2014 "),kV=n(axe,"A",{href:!0});var uvt=s(kV);ZTr=r(uvt,"FlaxGPTJModel"),uvt.forEach(t),e8r=r(axe," (GPT-J model)"),axe.forEach(t),o8r=i(Q),yF=n(Q,"LI",{});var nxe=s(yF);R5e=n(nxe,"STRONG",{});var bvt=s(R5e);r8r=r(bvt,"marian"),bvt.forEach(t),t8r=r(nxe," \u2014 "),RV=n(nxe,"A",{href:!0});var vvt=s(RV);a8r=r(vvt,"FlaxMarianModel"),vvt.forEach(t),n8r=r(nxe," (Marian model)"),nxe.forEach(t),s8r=i(Q),wF=n(Q,"LI",{});var sxe=s(wF);S5e=n(sxe,"STRONG",{});var Tvt=s(S5e);l8r=r(Tvt,"mbart"),Tvt.forEach(t),i8r=r(sxe," \u2014 "),SV=n(sxe,"A",{href:!0});var Fvt=s(SV);d8r=r(Fvt,"FlaxMBartModel"),Fvt.forEach(t),c8r=r(sxe," (mBART model)"),sxe.forEach(t),f8r=i(Q),AF=n(Q,"LI",{});var lxe=s(AF);P5e=n(lxe,"STRONG",{});var Cvt=s(P5e);m8r=r(Cvt,"mt5"),Cvt.forEach(t),g8r=r(lxe," \u2014 "),PV=n(lxe,"A",{href:!0});var Mvt=s(PV);h8r=r(Mvt,"FlaxMT5Model"),Mvt.forEach(t),p8r=r(lxe," (mT5 model)"),lxe.forEach(t),_8r=i(Q),LF=n(Q,"LI",{});var ixe=s(LF);$5e=n(ixe,"STRONG",{});var Evt=s($5e);u8r=r(Evt,"pegasus"),Evt.forEach(t),b8r=r(ixe," \u2014 "),$V=n(ixe,"A",{href:!0});var yvt=s($V);v8r=r(yvt,"FlaxPegasusModel"),yvt.forEach(t),T8r=r(ixe," (Pegasus model)"),ixe.forEach(t),F8r=i(Q),BF=n(Q,"LI",{});var dxe=s(BF);I5e=n(dxe,"STRONG",{});var wvt=s(I5e);C8r=r(wvt,"roberta"),wvt.forEach(t),M8r=r(dxe," \u2014 "),IV=n(dxe,"A",{href:!0});var Avt=s(IV);E8r=r(Avt,"FlaxRobertaModel"),Avt.forEach(t),y8r=r(dxe," (RoBERTa model)"),dxe.forEach(t),w8r=i(Q),xF=n(Q,"LI",{});var cxe=s(xF);j5e=n(cxe,"STRONG",{});var Lvt=s(j5e);A8r=r(Lvt,"roformer"),Lvt.forEach(t),L8r=r(cxe," \u2014 "),jV=n(cxe,"A",{href:!0});var Bvt=s(jV);B8r=r(Bvt,"FlaxRoFormerModel"),Bvt.forEach(t),x8r=r(cxe," (RoFormer model)"),cxe.forEach(t),k8r=i(Q),kF=n(Q,"LI",{});var fxe=s(kF);D5e=n(fxe,"STRONG",{});var xvt=s(D5e);R8r=r(xvt,"t5"),xvt.forEach(t),S8r=r(fxe," \u2014 "),DV=n(fxe,"A",{href:!0});var kvt=s(DV);P8r=r(kvt,"FlaxT5Model"),kvt.forEach(t),$8r=r(fxe," (T5 model)"),fxe.forEach(t),I8r=i(Q),RF=n(Q,"LI",{});var mxe=s(RF);N5e=n(mxe,"STRONG",{});var Rvt=s(N5e);j8r=r(Rvt,"vision-text-dual-encoder"),Rvt.forEach(t),D8r=r(mxe," \u2014 "),NV=n(mxe,"A",{href:!0});var Svt=s(NV);N8r=r(Svt,"FlaxVisionTextDualEncoderModel"),Svt.forEach(t),q8r=r(mxe," (VisionTextDualEncoder model)"),mxe.forEach(t),G8r=i(Q),SF=n(Q,"LI",{});var gxe=s(SF);q5e=n(gxe,"STRONG",{});var Pvt=s(q5e);O8r=r(Pvt,"vit"),Pvt.forEach(t),X8r=r(gxe," \u2014 "),qV=n(gxe,"A",{href:!0});var $vt=s(qV);V8r=r($vt,"FlaxViTModel"),$vt.forEach(t),z8r=r(gxe," (ViT model)"),gxe.forEach(t),W8r=i(Q),PF=n(Q,"LI",{});var hxe=s(PF);G5e=n(hxe,"STRONG",{});var Ivt=s(G5e);Q8r=r(Ivt,"wav2vec2"),Ivt.forEach(t),H8r=r(hxe," \u2014 "),GV=n(hxe,"A",{href:!0});var jvt=s(GV);U8r=r(jvt,"FlaxWav2Vec2Model"),jvt.forEach(t),J8r=r(hxe," (Wav2Vec2 model)"),hxe.forEach(t),Y8r=i(Q),$F=n(Q,"LI",{});var pxe=s($F);O5e=n(pxe,"STRONG",{});var Dvt=s(O5e);K8r=r(Dvt,"xglm"),Dvt.forEach(t),Z8r=r(pxe," \u2014 "),OV=n(pxe,"A",{href:!0});var Nvt=s(OV);eFr=r(Nvt,"FlaxXGLMModel"),Nvt.forEach(t),oFr=r(pxe," (XGLM model)"),pxe.forEach(t),rFr=i(Q),IF=n(Q,"LI",{});var _xe=s(IF);X5e=n(_xe,"STRONG",{});var qvt=s(X5e);tFr=r(qvt,"xlm-roberta"),qvt.forEach(t),aFr=r(_xe," \u2014 "),XV=n(_xe,"A",{href:!0});var Gvt=s(XV);nFr=r(Gvt,"FlaxXLMRobertaModel"),Gvt.forEach(t),sFr=r(_xe," (XLM-RoBERTa model)"),_xe.forEach(t),Q.forEach(t),lFr=i(ka),V5e=n(ka,"P",{});var Ovt=s(V5e);iFr=r(Ovt,"Examples:"),Ovt.forEach(t),dFr=i(ka),m(XA.$$.fragment,ka),ka.forEach(t),_i.forEach(t),vSe=i(d),lf=n(d,"H2",{class:!0});var S$e=s(lf);jF=n(S$e,"A",{id:!0,class:!0,href:!0});var Xvt=s(jF);z5e=n(Xvt,"SPAN",{});var Vvt=s(z5e);m(VA.$$.fragment,Vvt),Vvt.forEach(t),Xvt.forEach(t),cFr=i(S$e),W5e=n(S$e,"SPAN",{});var zvt=s(W5e);fFr=r(zvt,"FlaxAutoModelForCausalLM"),zvt.forEach(t),S$e.forEach(t),TSe=i(d),Pr=n(d,"DIV",{class:!0});var bi=s(Pr);m(zA.$$.fragment,bi),mFr=i(bi),df=n(bi,"P",{});var jQ=s(df);gFr=r(jQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Q5e=n(jQ,"CODE",{});var Wvt=s(Q5e);hFr=r(Wvt,"from_pretrained()"),Wvt.forEach(t),pFr=r(jQ,"class method or the "),H5e=n(jQ,"CODE",{});var Qvt=s(H5e);_Fr=r(Qvt,"from_config()"),Qvt.forEach(t),uFr=r(jQ,`class
method.`),jQ.forEach(t),bFr=i(bi),WA=n(bi,"P",{});var P$e=s(WA);vFr=r(P$e,"This class cannot be instantiated directly using "),U5e=n(P$e,"CODE",{});var Hvt=s(U5e);TFr=r(Hvt,"__init__()"),Hvt.forEach(t),FFr=r(P$e," (throws an error)."),P$e.forEach(t),CFr=i(bi),Bt=n(bi,"DIV",{class:!0});var vi=s(Bt);m(QA.$$.fragment,vi),MFr=i(vi),J5e=n(vi,"P",{});var Uvt=s(J5e);EFr=r(Uvt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Uvt.forEach(t),yFr=i(vi),cf=n(vi,"P",{});var DQ=s(cf);wFr=r(DQ,`Note:
Loading a model from its configuration file does `),Y5e=n(DQ,"STRONG",{});var Jvt=s(Y5e);AFr=r(Jvt,"not"),Jvt.forEach(t),LFr=r(DQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),K5e=n(DQ,"CODE",{});var Yvt=s(K5e);BFr=r(Yvt,"from_pretrained()"),Yvt.forEach(t),xFr=r(DQ,"to load the model weights."),DQ.forEach(t),kFr=i(vi),Z5e=n(vi,"P",{});var Kvt=s(Z5e);RFr=r(Kvt,"Examples:"),Kvt.forEach(t),SFr=i(vi),m(HA.$$.fragment,vi),vi.forEach(t),PFr=i(bi),Lo=n(bi,"DIV",{class:!0});var Ra=s(Lo);m(UA.$$.fragment,Ra),$Fr=i(Ra),e2e=n(Ra,"P",{});var Zvt=s(e2e);IFr=r(Zvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Zvt.forEach(t),jFr=i(Ra),Pn=n(Ra,"P",{});var s4=s(Pn);DFr=r(s4,"The model class to instantiate is selected based on the "),o2e=n(s4,"CODE",{});var e6t=s(o2e);NFr=r(e6t,"model_type"),e6t.forEach(t),qFr=r(s4,` property of the config object (either
passed as an argument or loaded from `),r2e=n(s4,"CODE",{});var o6t=s(r2e);GFr=r(o6t,"pretrained_model_name_or_path"),o6t.forEach(t),OFr=r(s4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t2e=n(s4,"CODE",{});var r6t=s(t2e);XFr=r(r6t,"pretrained_model_name_or_path"),r6t.forEach(t),VFr=r(s4,":"),s4.forEach(t),zFr=i(Ra),ga=n(Ra,"UL",{});var Ti=s(ga);DF=n(Ti,"LI",{});var uxe=s(DF);a2e=n(uxe,"STRONG",{});var t6t=s(a2e);WFr=r(t6t,"bart"),t6t.forEach(t),QFr=r(uxe," \u2014 "),VV=n(uxe,"A",{href:!0});var a6t=s(VV);HFr=r(a6t,"FlaxBartForCausalLM"),a6t.forEach(t),UFr=r(uxe," (BART model)"),uxe.forEach(t),JFr=i(Ti),NF=n(Ti,"LI",{});var bxe=s(NF);n2e=n(bxe,"STRONG",{});var n6t=s(n2e);YFr=r(n6t,"gpt2"),n6t.forEach(t),KFr=r(bxe," \u2014 "),zV=n(bxe,"A",{href:!0});var s6t=s(zV);ZFr=r(s6t,"FlaxGPT2LMHeadModel"),s6t.forEach(t),eCr=r(bxe," (OpenAI GPT-2 model)"),bxe.forEach(t),oCr=i(Ti),qF=n(Ti,"LI",{});var vxe=s(qF);s2e=n(vxe,"STRONG",{});var l6t=s(s2e);rCr=r(l6t,"gpt_neo"),l6t.forEach(t),tCr=r(vxe," \u2014 "),WV=n(vxe,"A",{href:!0});var i6t=s(WV);aCr=r(i6t,"FlaxGPTNeoForCausalLM"),i6t.forEach(t),nCr=r(vxe," (GPT Neo model)"),vxe.forEach(t),sCr=i(Ti),GF=n(Ti,"LI",{});var Txe=s(GF);l2e=n(Txe,"STRONG",{});var d6t=s(l2e);lCr=r(d6t,"gptj"),d6t.forEach(t),iCr=r(Txe," \u2014 "),QV=n(Txe,"A",{href:!0});var c6t=s(QV);dCr=r(c6t,"FlaxGPTJForCausalLM"),c6t.forEach(t),cCr=r(Txe," (GPT-J model)"),Txe.forEach(t),fCr=i(Ti),OF=n(Ti,"LI",{});var Fxe=s(OF);i2e=n(Fxe,"STRONG",{});var f6t=s(i2e);mCr=r(f6t,"xglm"),f6t.forEach(t),gCr=r(Fxe," \u2014 "),HV=n(Fxe,"A",{href:!0});var m6t=s(HV);hCr=r(m6t,"FlaxXGLMForCausalLM"),m6t.forEach(t),pCr=r(Fxe," (XGLM model)"),Fxe.forEach(t),Ti.forEach(t),_Cr=i(Ra),d2e=n(Ra,"P",{});var g6t=s(d2e);uCr=r(g6t,"Examples:"),g6t.forEach(t),bCr=i(Ra),m(JA.$$.fragment,Ra),Ra.forEach(t),bi.forEach(t),FSe=i(d),ff=n(d,"H2",{class:!0});var $$e=s(ff);XF=n($$e,"A",{id:!0,class:!0,href:!0});var h6t=s(XF);c2e=n(h6t,"SPAN",{});var p6t=s(c2e);m(YA.$$.fragment,p6t),p6t.forEach(t),h6t.forEach(t),vCr=i($$e),f2e=n($$e,"SPAN",{});var _6t=s(f2e);TCr=r(_6t,"FlaxAutoModelForPreTraining"),_6t.forEach(t),$$e.forEach(t),CSe=i(d),$r=n(d,"DIV",{class:!0});var Fi=s($r);m(KA.$$.fragment,Fi),FCr=i(Fi),mf=n(Fi,"P",{});var NQ=s(mf);CCr=r(NQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),m2e=n(NQ,"CODE",{});var u6t=s(m2e);MCr=r(u6t,"from_pretrained()"),u6t.forEach(t),ECr=r(NQ,"class method or the "),g2e=n(NQ,"CODE",{});var b6t=s(g2e);yCr=r(b6t,"from_config()"),b6t.forEach(t),wCr=r(NQ,`class
method.`),NQ.forEach(t),ACr=i(Fi),ZA=n(Fi,"P",{});var I$e=s(ZA);LCr=r(I$e,"This class cannot be instantiated directly using "),h2e=n(I$e,"CODE",{});var v6t=s(h2e);BCr=r(v6t,"__init__()"),v6t.forEach(t),xCr=r(I$e," (throws an error)."),I$e.forEach(t),kCr=i(Fi),xt=n(Fi,"DIV",{class:!0});var Ci=s(xt);m(eL.$$.fragment,Ci),RCr=i(Ci),p2e=n(Ci,"P",{});var T6t=s(p2e);SCr=r(T6t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),T6t.forEach(t),PCr=i(Ci),gf=n(Ci,"P",{});var qQ=s(gf);$Cr=r(qQ,`Note:
Loading a model from its configuration file does `),_2e=n(qQ,"STRONG",{});var F6t=s(_2e);ICr=r(F6t,"not"),F6t.forEach(t),jCr=r(qQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),u2e=n(qQ,"CODE",{});var C6t=s(u2e);DCr=r(C6t,"from_pretrained()"),C6t.forEach(t),NCr=r(qQ,"to load the model weights."),qQ.forEach(t),qCr=i(Ci),b2e=n(Ci,"P",{});var M6t=s(b2e);GCr=r(M6t,"Examples:"),M6t.forEach(t),OCr=i(Ci),m(oL.$$.fragment,Ci),Ci.forEach(t),XCr=i(Fi),Bo=n(Fi,"DIV",{class:!0});var Sa=s(Bo);m(rL.$$.fragment,Sa),VCr=i(Sa),v2e=n(Sa,"P",{});var E6t=s(v2e);zCr=r(E6t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),E6t.forEach(t),WCr=i(Sa),$n=n(Sa,"P",{});var l4=s($n);QCr=r(l4,"The model class to instantiate is selected based on the "),T2e=n(l4,"CODE",{});var y6t=s(T2e);HCr=r(y6t,"model_type"),y6t.forEach(t),UCr=r(l4,` property of the config object (either
passed as an argument or loaded from `),F2e=n(l4,"CODE",{});var w6t=s(F2e);JCr=r(w6t,"pretrained_model_name_or_path"),w6t.forEach(t),YCr=r(l4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=n(l4,"CODE",{});var A6t=s(C2e);KCr=r(A6t,"pretrained_model_name_or_path"),A6t.forEach(t),ZCr=r(l4,":"),l4.forEach(t),eMr=i(Sa),ce=n(Sa,"UL",{});var he=s(ce);VF=n(he,"LI",{});var Cxe=s(VF);M2e=n(Cxe,"STRONG",{});var L6t=s(M2e);oMr=r(L6t,"albert"),L6t.forEach(t),rMr=r(Cxe," \u2014 "),UV=n(Cxe,"A",{href:!0});var B6t=s(UV);tMr=r(B6t,"FlaxAlbertForPreTraining"),B6t.forEach(t),aMr=r(Cxe," (ALBERT model)"),Cxe.forEach(t),nMr=i(he),zF=n(he,"LI",{});var Mxe=s(zF);E2e=n(Mxe,"STRONG",{});var x6t=s(E2e);sMr=r(x6t,"bart"),x6t.forEach(t),lMr=r(Mxe," \u2014 "),JV=n(Mxe,"A",{href:!0});var k6t=s(JV);iMr=r(k6t,"FlaxBartForConditionalGeneration"),k6t.forEach(t),dMr=r(Mxe," (BART model)"),Mxe.forEach(t),cMr=i(he),WF=n(he,"LI",{});var Exe=s(WF);y2e=n(Exe,"STRONG",{});var R6t=s(y2e);fMr=r(R6t,"bert"),R6t.forEach(t),mMr=r(Exe," \u2014 "),YV=n(Exe,"A",{href:!0});var S6t=s(YV);gMr=r(S6t,"FlaxBertForPreTraining"),S6t.forEach(t),hMr=r(Exe," (BERT model)"),Exe.forEach(t),pMr=i(he),QF=n(he,"LI",{});var yxe=s(QF);w2e=n(yxe,"STRONG",{});var P6t=s(w2e);_Mr=r(P6t,"big_bird"),P6t.forEach(t),uMr=r(yxe," \u2014 "),KV=n(yxe,"A",{href:!0});var $6t=s(KV);bMr=r($6t,"FlaxBigBirdForPreTraining"),$6t.forEach(t),vMr=r(yxe," (BigBird model)"),yxe.forEach(t),TMr=i(he),HF=n(he,"LI",{});var wxe=s(HF);A2e=n(wxe,"STRONG",{});var I6t=s(A2e);FMr=r(I6t,"electra"),I6t.forEach(t),CMr=r(wxe," \u2014 "),ZV=n(wxe,"A",{href:!0});var j6t=s(ZV);MMr=r(j6t,"FlaxElectraForPreTraining"),j6t.forEach(t),EMr=r(wxe," (ELECTRA model)"),wxe.forEach(t),yMr=i(he),UF=n(he,"LI",{});var Axe=s(UF);L2e=n(Axe,"STRONG",{});var D6t=s(L2e);wMr=r(D6t,"mbart"),D6t.forEach(t),AMr=r(Axe," \u2014 "),ez=n(Axe,"A",{href:!0});var N6t=s(ez);LMr=r(N6t,"FlaxMBartForConditionalGeneration"),N6t.forEach(t),BMr=r(Axe," (mBART model)"),Axe.forEach(t),xMr=i(he),JF=n(he,"LI",{});var Lxe=s(JF);B2e=n(Lxe,"STRONG",{});var q6t=s(B2e);kMr=r(q6t,"mt5"),q6t.forEach(t),RMr=r(Lxe," \u2014 "),oz=n(Lxe,"A",{href:!0});var G6t=s(oz);SMr=r(G6t,"FlaxMT5ForConditionalGeneration"),G6t.forEach(t),PMr=r(Lxe," (mT5 model)"),Lxe.forEach(t),$Mr=i(he),YF=n(he,"LI",{});var Bxe=s(YF);x2e=n(Bxe,"STRONG",{});var O6t=s(x2e);IMr=r(O6t,"roberta"),O6t.forEach(t),jMr=r(Bxe," \u2014 "),rz=n(Bxe,"A",{href:!0});var X6t=s(rz);DMr=r(X6t,"FlaxRobertaForMaskedLM"),X6t.forEach(t),NMr=r(Bxe," (RoBERTa model)"),Bxe.forEach(t),qMr=i(he),KF=n(he,"LI",{});var xxe=s(KF);k2e=n(xxe,"STRONG",{});var V6t=s(k2e);GMr=r(V6t,"roformer"),V6t.forEach(t),OMr=r(xxe," \u2014 "),tz=n(xxe,"A",{href:!0});var z6t=s(tz);XMr=r(z6t,"FlaxRoFormerForMaskedLM"),z6t.forEach(t),VMr=r(xxe," (RoFormer model)"),xxe.forEach(t),zMr=i(he),ZF=n(he,"LI",{});var kxe=s(ZF);R2e=n(kxe,"STRONG",{});var W6t=s(R2e);WMr=r(W6t,"t5"),W6t.forEach(t),QMr=r(kxe," \u2014 "),az=n(kxe,"A",{href:!0});var Q6t=s(az);HMr=r(Q6t,"FlaxT5ForConditionalGeneration"),Q6t.forEach(t),UMr=r(kxe," (T5 model)"),kxe.forEach(t),JMr=i(he),eC=n(he,"LI",{});var Rxe=s(eC);S2e=n(Rxe,"STRONG",{});var H6t=s(S2e);YMr=r(H6t,"wav2vec2"),H6t.forEach(t),KMr=r(Rxe," \u2014 "),nz=n(Rxe,"A",{href:!0});var U6t=s(nz);ZMr=r(U6t,"FlaxWav2Vec2ForPreTraining"),U6t.forEach(t),e4r=r(Rxe," (Wav2Vec2 model)"),Rxe.forEach(t),o4r=i(he),oC=n(he,"LI",{});var Sxe=s(oC);P2e=n(Sxe,"STRONG",{});var J6t=s(P2e);r4r=r(J6t,"xlm-roberta"),J6t.forEach(t),t4r=r(Sxe," \u2014 "),sz=n(Sxe,"A",{href:!0});var Y6t=s(sz);a4r=r(Y6t,"FlaxXLMRobertaForMaskedLM"),Y6t.forEach(t),n4r=r(Sxe," (XLM-RoBERTa model)"),Sxe.forEach(t),he.forEach(t),s4r=i(Sa),$2e=n(Sa,"P",{});var K6t=s($2e);l4r=r(K6t,"Examples:"),K6t.forEach(t),i4r=i(Sa),m(tL.$$.fragment,Sa),Sa.forEach(t),Fi.forEach(t),MSe=i(d),hf=n(d,"H2",{class:!0});var j$e=s(hf);rC=n(j$e,"A",{id:!0,class:!0,href:!0});var Z6t=s(rC);I2e=n(Z6t,"SPAN",{});var e0t=s(I2e);m(aL.$$.fragment,e0t),e0t.forEach(t),Z6t.forEach(t),d4r=i(j$e),j2e=n(j$e,"SPAN",{});var o0t=s(j2e);c4r=r(o0t,"FlaxAutoModelForMaskedLM"),o0t.forEach(t),j$e.forEach(t),ESe=i(d),Ir=n(d,"DIV",{class:!0});var Mi=s(Ir);m(nL.$$.fragment,Mi),f4r=i(Mi),pf=n(Mi,"P",{});var GQ=s(pf);m4r=r(GQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),D2e=n(GQ,"CODE",{});var r0t=s(D2e);g4r=r(r0t,"from_pretrained()"),r0t.forEach(t),h4r=r(GQ,"class method or the "),N2e=n(GQ,"CODE",{});var t0t=s(N2e);p4r=r(t0t,"from_config()"),t0t.forEach(t),_4r=r(GQ,`class
method.`),GQ.forEach(t),u4r=i(Mi),sL=n(Mi,"P",{});var D$e=s(sL);b4r=r(D$e,"This class cannot be instantiated directly using "),q2e=n(D$e,"CODE",{});var a0t=s(q2e);v4r=r(a0t,"__init__()"),a0t.forEach(t),T4r=r(D$e," (throws an error)."),D$e.forEach(t),F4r=i(Mi),kt=n(Mi,"DIV",{class:!0});var Ei=s(kt);m(lL.$$.fragment,Ei),C4r=i(Ei),G2e=n(Ei,"P",{});var n0t=s(G2e);M4r=r(n0t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),n0t.forEach(t),E4r=i(Ei),_f=n(Ei,"P",{});var OQ=s(_f);y4r=r(OQ,`Note:
Loading a model from its configuration file does `),O2e=n(OQ,"STRONG",{});var s0t=s(O2e);w4r=r(s0t,"not"),s0t.forEach(t),A4r=r(OQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),X2e=n(OQ,"CODE",{});var l0t=s(X2e);L4r=r(l0t,"from_pretrained()"),l0t.forEach(t),B4r=r(OQ,"to load the model weights."),OQ.forEach(t),x4r=i(Ei),V2e=n(Ei,"P",{});var i0t=s(V2e);k4r=r(i0t,"Examples:"),i0t.forEach(t),R4r=i(Ei),m(iL.$$.fragment,Ei),Ei.forEach(t),S4r=i(Mi),xo=n(Mi,"DIV",{class:!0});var Pa=s(xo);m(dL.$$.fragment,Pa),P4r=i(Pa),z2e=n(Pa,"P",{});var d0t=s(z2e);$4r=r(d0t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),d0t.forEach(t),I4r=i(Pa),In=n(Pa,"P",{});var i4=s(In);j4r=r(i4,"The model class to instantiate is selected based on the "),W2e=n(i4,"CODE",{});var c0t=s(W2e);D4r=r(c0t,"model_type"),c0t.forEach(t),N4r=r(i4,` property of the config object (either
passed as an argument or loaded from `),Q2e=n(i4,"CODE",{});var f0t=s(Q2e);q4r=r(f0t,"pretrained_model_name_or_path"),f0t.forEach(t),G4r=r(i4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H2e=n(i4,"CODE",{});var m0t=s(H2e);O4r=r(m0t,"pretrained_model_name_or_path"),m0t.forEach(t),X4r=r(i4,":"),i4.forEach(t),V4r=i(Pa),ue=n(Pa,"UL",{});var we=s(ue);tC=n(we,"LI",{});var Pxe=s(tC);U2e=n(Pxe,"STRONG",{});var g0t=s(U2e);z4r=r(g0t,"albert"),g0t.forEach(t),W4r=r(Pxe," \u2014 "),lz=n(Pxe,"A",{href:!0});var h0t=s(lz);Q4r=r(h0t,"FlaxAlbertForMaskedLM"),h0t.forEach(t),H4r=r(Pxe," (ALBERT model)"),Pxe.forEach(t),U4r=i(we),aC=n(we,"LI",{});var $xe=s(aC);J2e=n($xe,"STRONG",{});var p0t=s(J2e);J4r=r(p0t,"bart"),p0t.forEach(t),Y4r=r($xe," \u2014 "),iz=n($xe,"A",{href:!0});var _0t=s(iz);K4r=r(_0t,"FlaxBartForConditionalGeneration"),_0t.forEach(t),Z4r=r($xe," (BART model)"),$xe.forEach(t),eEr=i(we),nC=n(we,"LI",{});var Ixe=s(nC);Y2e=n(Ixe,"STRONG",{});var u0t=s(Y2e);oEr=r(u0t,"bert"),u0t.forEach(t),rEr=r(Ixe," \u2014 "),dz=n(Ixe,"A",{href:!0});var b0t=s(dz);tEr=r(b0t,"FlaxBertForMaskedLM"),b0t.forEach(t),aEr=r(Ixe," (BERT model)"),Ixe.forEach(t),nEr=i(we),sC=n(we,"LI",{});var jxe=s(sC);K2e=n(jxe,"STRONG",{});var v0t=s(K2e);sEr=r(v0t,"big_bird"),v0t.forEach(t),lEr=r(jxe," \u2014 "),cz=n(jxe,"A",{href:!0});var T0t=s(cz);iEr=r(T0t,"FlaxBigBirdForMaskedLM"),T0t.forEach(t),dEr=r(jxe," (BigBird model)"),jxe.forEach(t),cEr=i(we),lC=n(we,"LI",{});var Dxe=s(lC);Z2e=n(Dxe,"STRONG",{});var F0t=s(Z2e);fEr=r(F0t,"distilbert"),F0t.forEach(t),mEr=r(Dxe," \u2014 "),fz=n(Dxe,"A",{href:!0});var C0t=s(fz);gEr=r(C0t,"FlaxDistilBertForMaskedLM"),C0t.forEach(t),hEr=r(Dxe," (DistilBERT model)"),Dxe.forEach(t),pEr=i(we),iC=n(we,"LI",{});var Nxe=s(iC);eve=n(Nxe,"STRONG",{});var M0t=s(eve);_Er=r(M0t,"electra"),M0t.forEach(t),uEr=r(Nxe," \u2014 "),mz=n(Nxe,"A",{href:!0});var E0t=s(mz);bEr=r(E0t,"FlaxElectraForMaskedLM"),E0t.forEach(t),vEr=r(Nxe," (ELECTRA model)"),Nxe.forEach(t),TEr=i(we),dC=n(we,"LI",{});var qxe=s(dC);ove=n(qxe,"STRONG",{});var y0t=s(ove);FEr=r(y0t,"mbart"),y0t.forEach(t),CEr=r(qxe," \u2014 "),gz=n(qxe,"A",{href:!0});var w0t=s(gz);MEr=r(w0t,"FlaxMBartForConditionalGeneration"),w0t.forEach(t),EEr=r(qxe," (mBART model)"),qxe.forEach(t),yEr=i(we),cC=n(we,"LI",{});var Gxe=s(cC);rve=n(Gxe,"STRONG",{});var A0t=s(rve);wEr=r(A0t,"roberta"),A0t.forEach(t),AEr=r(Gxe," \u2014 "),hz=n(Gxe,"A",{href:!0});var L0t=s(hz);LEr=r(L0t,"FlaxRobertaForMaskedLM"),L0t.forEach(t),BEr=r(Gxe," (RoBERTa model)"),Gxe.forEach(t),xEr=i(we),fC=n(we,"LI",{});var Oxe=s(fC);tve=n(Oxe,"STRONG",{});var B0t=s(tve);kEr=r(B0t,"roformer"),B0t.forEach(t),REr=r(Oxe," \u2014 "),pz=n(Oxe,"A",{href:!0});var x0t=s(pz);SEr=r(x0t,"FlaxRoFormerForMaskedLM"),x0t.forEach(t),PEr=r(Oxe," (RoFormer model)"),Oxe.forEach(t),$Er=i(we),mC=n(we,"LI",{});var Xxe=s(mC);ave=n(Xxe,"STRONG",{});var k0t=s(ave);IEr=r(k0t,"xlm-roberta"),k0t.forEach(t),jEr=r(Xxe," \u2014 "),_z=n(Xxe,"A",{href:!0});var R0t=s(_z);DEr=r(R0t,"FlaxXLMRobertaForMaskedLM"),R0t.forEach(t),NEr=r(Xxe," (XLM-RoBERTa model)"),Xxe.forEach(t),we.forEach(t),qEr=i(Pa),nve=n(Pa,"P",{});var S0t=s(nve);GEr=r(S0t,"Examples:"),S0t.forEach(t),OEr=i(Pa),m(cL.$$.fragment,Pa),Pa.forEach(t),Mi.forEach(t),ySe=i(d),uf=n(d,"H2",{class:!0});var N$e=s(uf);gC=n(N$e,"A",{id:!0,class:!0,href:!0});var P0t=s(gC);sve=n(P0t,"SPAN",{});var $0t=s(sve);m(fL.$$.fragment,$0t),$0t.forEach(t),P0t.forEach(t),XEr=i(N$e),lve=n(N$e,"SPAN",{});var I0t=s(lve);VEr=r(I0t,"FlaxAutoModelForSeq2SeqLM"),I0t.forEach(t),N$e.forEach(t),wSe=i(d),jr=n(d,"DIV",{class:!0});var yi=s(jr);m(mL.$$.fragment,yi),zEr=i(yi),bf=n(yi,"P",{});var XQ=s(bf);WEr=r(XQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ive=n(XQ,"CODE",{});var j0t=s(ive);QEr=r(j0t,"from_pretrained()"),j0t.forEach(t),HEr=r(XQ,"class method or the "),dve=n(XQ,"CODE",{});var D0t=s(dve);UEr=r(D0t,"from_config()"),D0t.forEach(t),JEr=r(XQ,`class
method.`),XQ.forEach(t),YEr=i(yi),gL=n(yi,"P",{});var q$e=s(gL);KEr=r(q$e,"This class cannot be instantiated directly using "),cve=n(q$e,"CODE",{});var N0t=s(cve);ZEr=r(N0t,"__init__()"),N0t.forEach(t),e3r=r(q$e," (throws an error)."),q$e.forEach(t),o3r=i(yi),Rt=n(yi,"DIV",{class:!0});var wi=s(Rt);m(hL.$$.fragment,wi),r3r=i(wi),fve=n(wi,"P",{});var q0t=s(fve);t3r=r(q0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),q0t.forEach(t),a3r=i(wi),vf=n(wi,"P",{});var VQ=s(vf);n3r=r(VQ,`Note:
Loading a model from its configuration file does `),mve=n(VQ,"STRONG",{});var G0t=s(mve);s3r=r(G0t,"not"),G0t.forEach(t),l3r=r(VQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gve=n(VQ,"CODE",{});var O0t=s(gve);i3r=r(O0t,"from_pretrained()"),O0t.forEach(t),d3r=r(VQ,"to load the model weights."),VQ.forEach(t),c3r=i(wi),hve=n(wi,"P",{});var X0t=s(hve);f3r=r(X0t,"Examples:"),X0t.forEach(t),m3r=i(wi),m(pL.$$.fragment,wi),wi.forEach(t),g3r=i(yi),ko=n(yi,"DIV",{class:!0});var $a=s(ko);m(_L.$$.fragment,$a),h3r=i($a),pve=n($a,"P",{});var V0t=s(pve);p3r=r(V0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),V0t.forEach(t),_3r=i($a),jn=n($a,"P",{});var d4=s(jn);u3r=r(d4,"The model class to instantiate is selected based on the "),_ve=n(d4,"CODE",{});var z0t=s(_ve);b3r=r(z0t,"model_type"),z0t.forEach(t),v3r=r(d4,` property of the config object (either
passed as an argument or loaded from `),uve=n(d4,"CODE",{});var W0t=s(uve);T3r=r(W0t,"pretrained_model_name_or_path"),W0t.forEach(t),F3r=r(d4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=n(d4,"CODE",{});var Q0t=s(bve);C3r=r(Q0t,"pretrained_model_name_or_path"),Q0t.forEach(t),M3r=r(d4,":"),d4.forEach(t),E3r=i($a),Me=n($a,"UL",{});var so=s(Me);hC=n(so,"LI",{});var Vxe=s(hC);vve=n(Vxe,"STRONG",{});var H0t=s(vve);y3r=r(H0t,"bart"),H0t.forEach(t),w3r=r(Vxe," \u2014 "),uz=n(Vxe,"A",{href:!0});var U0t=s(uz);A3r=r(U0t,"FlaxBartForConditionalGeneration"),U0t.forEach(t),L3r=r(Vxe," (BART model)"),Vxe.forEach(t),B3r=i(so),pC=n(so,"LI",{});var zxe=s(pC);Tve=n(zxe,"STRONG",{});var J0t=s(Tve);x3r=r(J0t,"blenderbot"),J0t.forEach(t),k3r=r(zxe," \u2014 "),bz=n(zxe,"A",{href:!0});var Y0t=s(bz);R3r=r(Y0t,"FlaxBlenderbotForConditionalGeneration"),Y0t.forEach(t),S3r=r(zxe," (Blenderbot model)"),zxe.forEach(t),P3r=i(so),_C=n(so,"LI",{});var Wxe=s(_C);Fve=n(Wxe,"STRONG",{});var K0t=s(Fve);$3r=r(K0t,"blenderbot-small"),K0t.forEach(t),I3r=r(Wxe," \u2014 "),vz=n(Wxe,"A",{href:!0});var Z0t=s(vz);j3r=r(Z0t,"FlaxBlenderbotSmallForConditionalGeneration"),Z0t.forEach(t),D3r=r(Wxe," (BlenderbotSmall model)"),Wxe.forEach(t),N3r=i(so),uC=n(so,"LI",{});var Qxe=s(uC);Cve=n(Qxe,"STRONG",{});var eTt=s(Cve);q3r=r(eTt,"encoder-decoder"),eTt.forEach(t),G3r=r(Qxe," \u2014 "),Tz=n(Qxe,"A",{href:!0});var oTt=s(Tz);O3r=r(oTt,"FlaxEncoderDecoderModel"),oTt.forEach(t),X3r=r(Qxe," (Encoder decoder model)"),Qxe.forEach(t),V3r=i(so),bC=n(so,"LI",{});var Hxe=s(bC);Mve=n(Hxe,"STRONG",{});var rTt=s(Mve);z3r=r(rTt,"marian"),rTt.forEach(t),W3r=r(Hxe," \u2014 "),Fz=n(Hxe,"A",{href:!0});var tTt=s(Fz);Q3r=r(tTt,"FlaxMarianMTModel"),tTt.forEach(t),H3r=r(Hxe," (Marian model)"),Hxe.forEach(t),U3r=i(so),vC=n(so,"LI",{});var Uxe=s(vC);Eve=n(Uxe,"STRONG",{});var aTt=s(Eve);J3r=r(aTt,"mbart"),aTt.forEach(t),Y3r=r(Uxe," \u2014 "),Cz=n(Uxe,"A",{href:!0});var nTt=s(Cz);K3r=r(nTt,"FlaxMBartForConditionalGeneration"),nTt.forEach(t),Z3r=r(Uxe," (mBART model)"),Uxe.forEach(t),eyr=i(so),TC=n(so,"LI",{});var Jxe=s(TC);yve=n(Jxe,"STRONG",{});var sTt=s(yve);oyr=r(sTt,"mt5"),sTt.forEach(t),ryr=r(Jxe," \u2014 "),Mz=n(Jxe,"A",{href:!0});var lTt=s(Mz);tyr=r(lTt,"FlaxMT5ForConditionalGeneration"),lTt.forEach(t),ayr=r(Jxe," (mT5 model)"),Jxe.forEach(t),nyr=i(so),FC=n(so,"LI",{});var Yxe=s(FC);wve=n(Yxe,"STRONG",{});var iTt=s(wve);syr=r(iTt,"pegasus"),iTt.forEach(t),lyr=r(Yxe," \u2014 "),Ez=n(Yxe,"A",{href:!0});var dTt=s(Ez);iyr=r(dTt,"FlaxPegasusForConditionalGeneration"),dTt.forEach(t),dyr=r(Yxe," (Pegasus model)"),Yxe.forEach(t),cyr=i(so),CC=n(so,"LI",{});var Kxe=s(CC);Ave=n(Kxe,"STRONG",{});var cTt=s(Ave);fyr=r(cTt,"t5"),cTt.forEach(t),myr=r(Kxe," \u2014 "),yz=n(Kxe,"A",{href:!0});var fTt=s(yz);gyr=r(fTt,"FlaxT5ForConditionalGeneration"),fTt.forEach(t),hyr=r(Kxe," (T5 model)"),Kxe.forEach(t),so.forEach(t),pyr=i($a),Lve=n($a,"P",{});var mTt=s(Lve);_yr=r(mTt,"Examples:"),mTt.forEach(t),uyr=i($a),m(uL.$$.fragment,$a),$a.forEach(t),yi.forEach(t),ASe=i(d),Tf=n(d,"H2",{class:!0});var G$e=s(Tf);MC=n(G$e,"A",{id:!0,class:!0,href:!0});var gTt=s(MC);Bve=n(gTt,"SPAN",{});var hTt=s(Bve);m(bL.$$.fragment,hTt),hTt.forEach(t),gTt.forEach(t),byr=i(G$e),xve=n(G$e,"SPAN",{});var pTt=s(xve);vyr=r(pTt,"FlaxAutoModelForSequenceClassification"),pTt.forEach(t),G$e.forEach(t),LSe=i(d),Dr=n(d,"DIV",{class:!0});var Ai=s(Dr);m(vL.$$.fragment,Ai),Tyr=i(Ai),Ff=n(Ai,"P",{});var zQ=s(Ff);Fyr=r(zQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kve=n(zQ,"CODE",{});var _Tt=s(kve);Cyr=r(_Tt,"from_pretrained()"),_Tt.forEach(t),Myr=r(zQ,"class method or the "),Rve=n(zQ,"CODE",{});var uTt=s(Rve);Eyr=r(uTt,"from_config()"),uTt.forEach(t),yyr=r(zQ,`class
method.`),zQ.forEach(t),wyr=i(Ai),TL=n(Ai,"P",{});var O$e=s(TL);Ayr=r(O$e,"This class cannot be instantiated directly using "),Sve=n(O$e,"CODE",{});var bTt=s(Sve);Lyr=r(bTt,"__init__()"),bTt.forEach(t),Byr=r(O$e," (throws an error)."),O$e.forEach(t),xyr=i(Ai),St=n(Ai,"DIV",{class:!0});var Li=s(St);m(FL.$$.fragment,Li),kyr=i(Li),Pve=n(Li,"P",{});var vTt=s(Pve);Ryr=r(vTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vTt.forEach(t),Syr=i(Li),Cf=n(Li,"P",{});var WQ=s(Cf);Pyr=r(WQ,`Note:
Loading a model from its configuration file does `),$ve=n(WQ,"STRONG",{});var TTt=s($ve);$yr=r(TTt,"not"),TTt.forEach(t),Iyr=r(WQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ive=n(WQ,"CODE",{});var FTt=s(Ive);jyr=r(FTt,"from_pretrained()"),FTt.forEach(t),Dyr=r(WQ,"to load the model weights."),WQ.forEach(t),Nyr=i(Li),jve=n(Li,"P",{});var CTt=s(jve);qyr=r(CTt,"Examples:"),CTt.forEach(t),Gyr=i(Li),m(CL.$$.fragment,Li),Li.forEach(t),Oyr=i(Ai),Ro=n(Ai,"DIV",{class:!0});var Ia=s(Ro);m(ML.$$.fragment,Ia),Xyr=i(Ia),Dve=n(Ia,"P",{});var MTt=s(Dve);Vyr=r(MTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),MTt.forEach(t),zyr=i(Ia),Dn=n(Ia,"P",{});var c4=s(Dn);Wyr=r(c4,"The model class to instantiate is selected based on the "),Nve=n(c4,"CODE",{});var ETt=s(Nve);Qyr=r(ETt,"model_type"),ETt.forEach(t),Hyr=r(c4,` property of the config object (either
passed as an argument or loaded from `),qve=n(c4,"CODE",{});var yTt=s(qve);Uyr=r(yTt,"pretrained_model_name_or_path"),yTt.forEach(t),Jyr=r(c4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=n(c4,"CODE",{});var wTt=s(Gve);Yyr=r(wTt,"pretrained_model_name_or_path"),wTt.forEach(t),Kyr=r(c4,":"),c4.forEach(t),Zyr=i(Ia),be=n(Ia,"UL",{});var Ae=s(be);EC=n(Ae,"LI",{});var Zxe=s(EC);Ove=n(Zxe,"STRONG",{});var ATt=s(Ove);ewr=r(ATt,"albert"),ATt.forEach(t),owr=r(Zxe," \u2014 "),wz=n(Zxe,"A",{href:!0});var LTt=s(wz);rwr=r(LTt,"FlaxAlbertForSequenceClassification"),LTt.forEach(t),twr=r(Zxe," (ALBERT model)"),Zxe.forEach(t),awr=i(Ae),yC=n(Ae,"LI",{});var eke=s(yC);Xve=n(eke,"STRONG",{});var BTt=s(Xve);nwr=r(BTt,"bart"),BTt.forEach(t),swr=r(eke," \u2014 "),Az=n(eke,"A",{href:!0});var xTt=s(Az);lwr=r(xTt,"FlaxBartForSequenceClassification"),xTt.forEach(t),iwr=r(eke," (BART model)"),eke.forEach(t),dwr=i(Ae),wC=n(Ae,"LI",{});var oke=s(wC);Vve=n(oke,"STRONG",{});var kTt=s(Vve);cwr=r(kTt,"bert"),kTt.forEach(t),fwr=r(oke," \u2014 "),Lz=n(oke,"A",{href:!0});var RTt=s(Lz);mwr=r(RTt,"FlaxBertForSequenceClassification"),RTt.forEach(t),gwr=r(oke," (BERT model)"),oke.forEach(t),hwr=i(Ae),AC=n(Ae,"LI",{});var rke=s(AC);zve=n(rke,"STRONG",{});var STt=s(zve);pwr=r(STt,"big_bird"),STt.forEach(t),_wr=r(rke," \u2014 "),Bz=n(rke,"A",{href:!0});var PTt=s(Bz);uwr=r(PTt,"FlaxBigBirdForSequenceClassification"),PTt.forEach(t),bwr=r(rke," (BigBird model)"),rke.forEach(t),vwr=i(Ae),LC=n(Ae,"LI",{});var tke=s(LC);Wve=n(tke,"STRONG",{});var $Tt=s(Wve);Twr=r($Tt,"distilbert"),$Tt.forEach(t),Fwr=r(tke," \u2014 "),xz=n(tke,"A",{href:!0});var ITt=s(xz);Cwr=r(ITt,"FlaxDistilBertForSequenceClassification"),ITt.forEach(t),Mwr=r(tke," (DistilBERT model)"),tke.forEach(t),Ewr=i(Ae),BC=n(Ae,"LI",{});var ake=s(BC);Qve=n(ake,"STRONG",{});var jTt=s(Qve);ywr=r(jTt,"electra"),jTt.forEach(t),wwr=r(ake," \u2014 "),kz=n(ake,"A",{href:!0});var DTt=s(kz);Awr=r(DTt,"FlaxElectraForSequenceClassification"),DTt.forEach(t),Lwr=r(ake," (ELECTRA model)"),ake.forEach(t),Bwr=i(Ae),xC=n(Ae,"LI",{});var nke=s(xC);Hve=n(nke,"STRONG",{});var NTt=s(Hve);xwr=r(NTt,"mbart"),NTt.forEach(t),kwr=r(nke," \u2014 "),Rz=n(nke,"A",{href:!0});var qTt=s(Rz);Rwr=r(qTt,"FlaxMBartForSequenceClassification"),qTt.forEach(t),Swr=r(nke," (mBART model)"),nke.forEach(t),Pwr=i(Ae),kC=n(Ae,"LI",{});var ske=s(kC);Uve=n(ske,"STRONG",{});var GTt=s(Uve);$wr=r(GTt,"roberta"),GTt.forEach(t),Iwr=r(ske," \u2014 "),Sz=n(ske,"A",{href:!0});var OTt=s(Sz);jwr=r(OTt,"FlaxRobertaForSequenceClassification"),OTt.forEach(t),Dwr=r(ske," (RoBERTa model)"),ske.forEach(t),Nwr=i(Ae),RC=n(Ae,"LI",{});var lke=s(RC);Jve=n(lke,"STRONG",{});var XTt=s(Jve);qwr=r(XTt,"roformer"),XTt.forEach(t),Gwr=r(lke," \u2014 "),Pz=n(lke,"A",{href:!0});var VTt=s(Pz);Owr=r(VTt,"FlaxRoFormerForSequenceClassification"),VTt.forEach(t),Xwr=r(lke," (RoFormer model)"),lke.forEach(t),Vwr=i(Ae),SC=n(Ae,"LI",{});var ike=s(SC);Yve=n(ike,"STRONG",{});var zTt=s(Yve);zwr=r(zTt,"xlm-roberta"),zTt.forEach(t),Wwr=r(ike," \u2014 "),$z=n(ike,"A",{href:!0});var WTt=s($z);Qwr=r(WTt,"FlaxXLMRobertaForSequenceClassification"),WTt.forEach(t),Hwr=r(ike," (XLM-RoBERTa model)"),ike.forEach(t),Ae.forEach(t),Uwr=i(Ia),Kve=n(Ia,"P",{});var QTt=s(Kve);Jwr=r(QTt,"Examples:"),QTt.forEach(t),Ywr=i(Ia),m(EL.$$.fragment,Ia),Ia.forEach(t),Ai.forEach(t),BSe=i(d),Mf=n(d,"H2",{class:!0});var X$e=s(Mf);PC=n(X$e,"A",{id:!0,class:!0,href:!0});var HTt=s(PC);Zve=n(HTt,"SPAN",{});var UTt=s(Zve);m(yL.$$.fragment,UTt),UTt.forEach(t),HTt.forEach(t),Kwr=i(X$e),e6e=n(X$e,"SPAN",{});var JTt=s(e6e);Zwr=r(JTt,"FlaxAutoModelForSpeechSeq2Seq"),JTt.forEach(t),X$e.forEach(t),xSe=i(d),Nr=n(d,"DIV",{class:!0});var Bi=s(Nr);m(wL.$$.fragment,Bi),eAr=i(Bi),Ef=n(Bi,"P",{});var QQ=s(Ef);oAr=r(QQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),o6e=n(QQ,"CODE",{});var YTt=s(o6e);rAr=r(YTt,"from_pretrained()"),YTt.forEach(t),tAr=r(QQ,"class method or the "),r6e=n(QQ,"CODE",{});var KTt=s(r6e);aAr=r(KTt,"from_config()"),KTt.forEach(t),nAr=r(QQ,`class
method.`),QQ.forEach(t),sAr=i(Bi),AL=n(Bi,"P",{});var V$e=s(AL);lAr=r(V$e,"This class cannot be instantiated directly using "),t6e=n(V$e,"CODE",{});var ZTt=s(t6e);iAr=r(ZTt,"__init__()"),ZTt.forEach(t),dAr=r(V$e," (throws an error)."),V$e.forEach(t),cAr=i(Bi),Pt=n(Bi,"DIV",{class:!0});var xi=s(Pt);m(LL.$$.fragment,xi),fAr=i(xi),a6e=n(xi,"P",{});var e8t=s(a6e);mAr=r(e8t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),e8t.forEach(t),gAr=i(xi),yf=n(xi,"P",{});var HQ=s(yf);hAr=r(HQ,`Note:
Loading a model from its configuration file does `),n6e=n(HQ,"STRONG",{});var o8t=s(n6e);pAr=r(o8t,"not"),o8t.forEach(t),_Ar=r(HQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),s6e=n(HQ,"CODE",{});var r8t=s(s6e);uAr=r(r8t,"from_pretrained()"),r8t.forEach(t),bAr=r(HQ,"to load the model weights."),HQ.forEach(t),vAr=i(xi),l6e=n(xi,"P",{});var t8t=s(l6e);TAr=r(t8t,"Examples:"),t8t.forEach(t),FAr=i(xi),m(BL.$$.fragment,xi),xi.forEach(t),CAr=i(Bi),So=n(Bi,"DIV",{class:!0});var ja=s(So);m(xL.$$.fragment,ja),MAr=i(ja),i6e=n(ja,"P",{});var a8t=s(i6e);EAr=r(a8t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),a8t.forEach(t),yAr=i(ja),Nn=n(ja,"P",{});var f4=s(Nn);wAr=r(f4,"The model class to instantiate is selected based on the "),d6e=n(f4,"CODE",{});var n8t=s(d6e);AAr=r(n8t,"model_type"),n8t.forEach(t),LAr=r(f4,` property of the config object (either
passed as an argument or loaded from `),c6e=n(f4,"CODE",{});var s8t=s(c6e);BAr=r(s8t,"pretrained_model_name_or_path"),s8t.forEach(t),xAr=r(f4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f6e=n(f4,"CODE",{});var l8t=s(f6e);kAr=r(l8t,"pretrained_model_name_or_path"),l8t.forEach(t),RAr=r(f4,":"),f4.forEach(t),SAr=i(ja),m6e=n(ja,"UL",{});var i8t=s(m6e);$C=n(i8t,"LI",{});var dke=s($C);g6e=n(dke,"STRONG",{});var d8t=s(g6e);PAr=r(d8t,"speech-encoder-decoder"),d8t.forEach(t),$Ar=r(dke," \u2014 "),Iz=n(dke,"A",{href:!0});var c8t=s(Iz);IAr=r(c8t,"FlaxSpeechEncoderDecoderModel"),c8t.forEach(t),jAr=r(dke," (Speech Encoder decoder model)"),dke.forEach(t),i8t.forEach(t),DAr=i(ja),h6e=n(ja,"P",{});var f8t=s(h6e);NAr=r(f8t,"Examples:"),f8t.forEach(t),qAr=i(ja),m(kL.$$.fragment,ja),ja.forEach(t),Bi.forEach(t),kSe=i(d),wf=n(d,"H2",{class:!0});var z$e=s(wf);IC=n(z$e,"A",{id:!0,class:!0,href:!0});var m8t=s(IC);p6e=n(m8t,"SPAN",{});var g8t=s(p6e);m(RL.$$.fragment,g8t),g8t.forEach(t),m8t.forEach(t),GAr=i(z$e),_6e=n(z$e,"SPAN",{});var h8t=s(_6e);OAr=r(h8t,"FlaxAutoModelForQuestionAnswering"),h8t.forEach(t),z$e.forEach(t),RSe=i(d),qr=n(d,"DIV",{class:!0});var ki=s(qr);m(SL.$$.fragment,ki),XAr=i(ki),Af=n(ki,"P",{});var UQ=s(Af);VAr=r(UQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),u6e=n(UQ,"CODE",{});var p8t=s(u6e);zAr=r(p8t,"from_pretrained()"),p8t.forEach(t),WAr=r(UQ,"class method or the "),b6e=n(UQ,"CODE",{});var _8t=s(b6e);QAr=r(_8t,"from_config()"),_8t.forEach(t),HAr=r(UQ,`class
method.`),UQ.forEach(t),UAr=i(ki),PL=n(ki,"P",{});var W$e=s(PL);JAr=r(W$e,"This class cannot be instantiated directly using "),v6e=n(W$e,"CODE",{});var u8t=s(v6e);YAr=r(u8t,"__init__()"),u8t.forEach(t),KAr=r(W$e," (throws an error)."),W$e.forEach(t),ZAr=i(ki),$t=n(ki,"DIV",{class:!0});var Ri=s($t);m($L.$$.fragment,Ri),eLr=i(Ri),T6e=n(Ri,"P",{});var b8t=s(T6e);oLr=r(b8t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),b8t.forEach(t),rLr=i(Ri),Lf=n(Ri,"P",{});var JQ=s(Lf);tLr=r(JQ,`Note:
Loading a model from its configuration file does `),F6e=n(JQ,"STRONG",{});var v8t=s(F6e);aLr=r(v8t,"not"),v8t.forEach(t),nLr=r(JQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),C6e=n(JQ,"CODE",{});var T8t=s(C6e);sLr=r(T8t,"from_pretrained()"),T8t.forEach(t),lLr=r(JQ,"to load the model weights."),JQ.forEach(t),iLr=i(Ri),M6e=n(Ri,"P",{});var F8t=s(M6e);dLr=r(F8t,"Examples:"),F8t.forEach(t),cLr=i(Ri),m(IL.$$.fragment,Ri),Ri.forEach(t),fLr=i(ki),Po=n(ki,"DIV",{class:!0});var Da=s(Po);m(jL.$$.fragment,Da),mLr=i(Da),E6e=n(Da,"P",{});var C8t=s(E6e);gLr=r(C8t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),C8t.forEach(t),hLr=i(Da),qn=n(Da,"P",{});var m4=s(qn);pLr=r(m4,"The model class to instantiate is selected based on the "),y6e=n(m4,"CODE",{});var M8t=s(y6e);_Lr=r(M8t,"model_type"),M8t.forEach(t),uLr=r(m4,` property of the config object (either
passed as an argument or loaded from `),w6e=n(m4,"CODE",{});var E8t=s(w6e);bLr=r(E8t,"pretrained_model_name_or_path"),E8t.forEach(t),vLr=r(m4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A6e=n(m4,"CODE",{});var y8t=s(A6e);TLr=r(y8t,"pretrained_model_name_or_path"),y8t.forEach(t),FLr=r(m4,":"),m4.forEach(t),CLr=i(Da),ve=n(Da,"UL",{});var Le=s(ve);jC=n(Le,"LI",{});var cke=s(jC);L6e=n(cke,"STRONG",{});var w8t=s(L6e);MLr=r(w8t,"albert"),w8t.forEach(t),ELr=r(cke," \u2014 "),jz=n(cke,"A",{href:!0});var A8t=s(jz);yLr=r(A8t,"FlaxAlbertForQuestionAnswering"),A8t.forEach(t),wLr=r(cke," (ALBERT model)"),cke.forEach(t),ALr=i(Le),DC=n(Le,"LI",{});var fke=s(DC);B6e=n(fke,"STRONG",{});var L8t=s(B6e);LLr=r(L8t,"bart"),L8t.forEach(t),BLr=r(fke," \u2014 "),Dz=n(fke,"A",{href:!0});var B8t=s(Dz);xLr=r(B8t,"FlaxBartForQuestionAnswering"),B8t.forEach(t),kLr=r(fke," (BART model)"),fke.forEach(t),RLr=i(Le),NC=n(Le,"LI",{});var mke=s(NC);x6e=n(mke,"STRONG",{});var x8t=s(x6e);SLr=r(x8t,"bert"),x8t.forEach(t),PLr=r(mke," \u2014 "),Nz=n(mke,"A",{href:!0});var k8t=s(Nz);$Lr=r(k8t,"FlaxBertForQuestionAnswering"),k8t.forEach(t),ILr=r(mke," (BERT model)"),mke.forEach(t),jLr=i(Le),qC=n(Le,"LI",{});var gke=s(qC);k6e=n(gke,"STRONG",{});var R8t=s(k6e);DLr=r(R8t,"big_bird"),R8t.forEach(t),NLr=r(gke," \u2014 "),qz=n(gke,"A",{href:!0});var S8t=s(qz);qLr=r(S8t,"FlaxBigBirdForQuestionAnswering"),S8t.forEach(t),GLr=r(gke," (BigBird model)"),gke.forEach(t),OLr=i(Le),GC=n(Le,"LI",{});var hke=s(GC);R6e=n(hke,"STRONG",{});var P8t=s(R6e);XLr=r(P8t,"distilbert"),P8t.forEach(t),VLr=r(hke," \u2014 "),Gz=n(hke,"A",{href:!0});var $8t=s(Gz);zLr=r($8t,"FlaxDistilBertForQuestionAnswering"),$8t.forEach(t),WLr=r(hke," (DistilBERT model)"),hke.forEach(t),QLr=i(Le),OC=n(Le,"LI",{});var pke=s(OC);S6e=n(pke,"STRONG",{});var I8t=s(S6e);HLr=r(I8t,"electra"),I8t.forEach(t),ULr=r(pke," \u2014 "),Oz=n(pke,"A",{href:!0});var j8t=s(Oz);JLr=r(j8t,"FlaxElectraForQuestionAnswering"),j8t.forEach(t),YLr=r(pke," (ELECTRA model)"),pke.forEach(t),KLr=i(Le),XC=n(Le,"LI",{});var _ke=s(XC);P6e=n(_ke,"STRONG",{});var D8t=s(P6e);ZLr=r(D8t,"mbart"),D8t.forEach(t),e7r=r(_ke," \u2014 "),Xz=n(_ke,"A",{href:!0});var N8t=s(Xz);o7r=r(N8t,"FlaxMBartForQuestionAnswering"),N8t.forEach(t),r7r=r(_ke," (mBART model)"),_ke.forEach(t),t7r=i(Le),VC=n(Le,"LI",{});var uke=s(VC);$6e=n(uke,"STRONG",{});var q8t=s($6e);a7r=r(q8t,"roberta"),q8t.forEach(t),n7r=r(uke," \u2014 "),Vz=n(uke,"A",{href:!0});var G8t=s(Vz);s7r=r(G8t,"FlaxRobertaForQuestionAnswering"),G8t.forEach(t),l7r=r(uke," (RoBERTa model)"),uke.forEach(t),i7r=i(Le),zC=n(Le,"LI",{});var bke=s(zC);I6e=n(bke,"STRONG",{});var O8t=s(I6e);d7r=r(O8t,"roformer"),O8t.forEach(t),c7r=r(bke," \u2014 "),zz=n(bke,"A",{href:!0});var X8t=s(zz);f7r=r(X8t,"FlaxRoFormerForQuestionAnswering"),X8t.forEach(t),m7r=r(bke," (RoFormer model)"),bke.forEach(t),g7r=i(Le),WC=n(Le,"LI",{});var vke=s(WC);j6e=n(vke,"STRONG",{});var V8t=s(j6e);h7r=r(V8t,"xlm-roberta"),V8t.forEach(t),p7r=r(vke," \u2014 "),Wz=n(vke,"A",{href:!0});var z8t=s(Wz);_7r=r(z8t,"FlaxXLMRobertaForQuestionAnswering"),z8t.forEach(t),u7r=r(vke," (XLM-RoBERTa model)"),vke.forEach(t),Le.forEach(t),b7r=i(Da),D6e=n(Da,"P",{});var W8t=s(D6e);v7r=r(W8t,"Examples:"),W8t.forEach(t),T7r=i(Da),m(DL.$$.fragment,Da),Da.forEach(t),ki.forEach(t),SSe=i(d),Bf=n(d,"H2",{class:!0});var Q$e=s(Bf);QC=n(Q$e,"A",{id:!0,class:!0,href:!0});var Q8t=s(QC);N6e=n(Q8t,"SPAN",{});var H8t=s(N6e);m(NL.$$.fragment,H8t),H8t.forEach(t),Q8t.forEach(t),F7r=i(Q$e),q6e=n(Q$e,"SPAN",{});var U8t=s(q6e);C7r=r(U8t,"FlaxAutoModelForTokenClassification"),U8t.forEach(t),Q$e.forEach(t),PSe=i(d),Gr=n(d,"DIV",{class:!0});var Si=s(Gr);m(qL.$$.fragment,Si),M7r=i(Si),xf=n(Si,"P",{});var YQ=s(xf);E7r=r(YQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),G6e=n(YQ,"CODE",{});var J8t=s(G6e);y7r=r(J8t,"from_pretrained()"),J8t.forEach(t),w7r=r(YQ,"class method or the "),O6e=n(YQ,"CODE",{});var Y8t=s(O6e);A7r=r(Y8t,"from_config()"),Y8t.forEach(t),L7r=r(YQ,`class
method.`),YQ.forEach(t),B7r=i(Si),GL=n(Si,"P",{});var H$e=s(GL);x7r=r(H$e,"This class cannot be instantiated directly using "),X6e=n(H$e,"CODE",{});var K8t=s(X6e);k7r=r(K8t,"__init__()"),K8t.forEach(t),R7r=r(H$e," (throws an error)."),H$e.forEach(t),S7r=i(Si),It=n(Si,"DIV",{class:!0});var Pi=s(It);m(OL.$$.fragment,Pi),P7r=i(Pi),V6e=n(Pi,"P",{});var Z8t=s(V6e);$7r=r(Z8t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Z8t.forEach(t),I7r=i(Pi),kf=n(Pi,"P",{});var KQ=s(kf);j7r=r(KQ,`Note:
Loading a model from its configuration file does `),z6e=n(KQ,"STRONG",{});var eFt=s(z6e);D7r=r(eFt,"not"),eFt.forEach(t),N7r=r(KQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),W6e=n(KQ,"CODE",{});var oFt=s(W6e);q7r=r(oFt,"from_pretrained()"),oFt.forEach(t),G7r=r(KQ,"to load the model weights."),KQ.forEach(t),O7r=i(Pi),Q6e=n(Pi,"P",{});var rFt=s(Q6e);X7r=r(rFt,"Examples:"),rFt.forEach(t),V7r=i(Pi),m(XL.$$.fragment,Pi),Pi.forEach(t),z7r=i(Si),$o=n(Si,"DIV",{class:!0});var Na=s($o);m(VL.$$.fragment,Na),W7r=i(Na),H6e=n(Na,"P",{});var tFt=s(H6e);Q7r=r(tFt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),tFt.forEach(t),H7r=i(Na),Gn=n(Na,"P",{});var g4=s(Gn);U7r=r(g4,"The model class to instantiate is selected based on the "),U6e=n(g4,"CODE",{});var aFt=s(U6e);J7r=r(aFt,"model_type"),aFt.forEach(t),Y7r=r(g4,` property of the config object (either
passed as an argument or loaded from `),J6e=n(g4,"CODE",{});var nFt=s(J6e);K7r=r(nFt,"pretrained_model_name_or_path"),nFt.forEach(t),Z7r=r(g4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y6e=n(g4,"CODE",{});var sFt=s(Y6e);e9r=r(sFt,"pretrained_model_name_or_path"),sFt.forEach(t),o9r=r(g4,":"),g4.forEach(t),r9r=i(Na),Se=n(Na,"UL",{});var Xo=s(Se);HC=n(Xo,"LI",{});var Tke=s(HC);K6e=n(Tke,"STRONG",{});var lFt=s(K6e);t9r=r(lFt,"albert"),lFt.forEach(t),a9r=r(Tke," \u2014 "),Qz=n(Tke,"A",{href:!0});var iFt=s(Qz);n9r=r(iFt,"FlaxAlbertForTokenClassification"),iFt.forEach(t),s9r=r(Tke," (ALBERT model)"),Tke.forEach(t),l9r=i(Xo),UC=n(Xo,"LI",{});var Fke=s(UC);Z6e=n(Fke,"STRONG",{});var dFt=s(Z6e);i9r=r(dFt,"bert"),dFt.forEach(t),d9r=r(Fke," \u2014 "),Hz=n(Fke,"A",{href:!0});var cFt=s(Hz);c9r=r(cFt,"FlaxBertForTokenClassification"),cFt.forEach(t),f9r=r(Fke," (BERT model)"),Fke.forEach(t),m9r=i(Xo),JC=n(Xo,"LI",{});var Cke=s(JC);e0e=n(Cke,"STRONG",{});var fFt=s(e0e);g9r=r(fFt,"big_bird"),fFt.forEach(t),h9r=r(Cke," \u2014 "),Uz=n(Cke,"A",{href:!0});var mFt=s(Uz);p9r=r(mFt,"FlaxBigBirdForTokenClassification"),mFt.forEach(t),_9r=r(Cke," (BigBird model)"),Cke.forEach(t),u9r=i(Xo),YC=n(Xo,"LI",{});var Mke=s(YC);o0e=n(Mke,"STRONG",{});var gFt=s(o0e);b9r=r(gFt,"distilbert"),gFt.forEach(t),v9r=r(Mke," \u2014 "),Jz=n(Mke,"A",{href:!0});var hFt=s(Jz);T9r=r(hFt,"FlaxDistilBertForTokenClassification"),hFt.forEach(t),F9r=r(Mke," (DistilBERT model)"),Mke.forEach(t),C9r=i(Xo),KC=n(Xo,"LI",{});var Eke=s(KC);r0e=n(Eke,"STRONG",{});var pFt=s(r0e);M9r=r(pFt,"electra"),pFt.forEach(t),E9r=r(Eke," \u2014 "),Yz=n(Eke,"A",{href:!0});var _Ft=s(Yz);y9r=r(_Ft,"FlaxElectraForTokenClassification"),_Ft.forEach(t),w9r=r(Eke," (ELECTRA model)"),Eke.forEach(t),A9r=i(Xo),ZC=n(Xo,"LI",{});var yke=s(ZC);t0e=n(yke,"STRONG",{});var uFt=s(t0e);L9r=r(uFt,"roberta"),uFt.forEach(t),B9r=r(yke," \u2014 "),Kz=n(yke,"A",{href:!0});var bFt=s(Kz);x9r=r(bFt,"FlaxRobertaForTokenClassification"),bFt.forEach(t),k9r=r(yke," (RoBERTa model)"),yke.forEach(t),R9r=i(Xo),eM=n(Xo,"LI",{});var wke=s(eM);a0e=n(wke,"STRONG",{});var vFt=s(a0e);S9r=r(vFt,"roformer"),vFt.forEach(t),P9r=r(wke," \u2014 "),Zz=n(wke,"A",{href:!0});var TFt=s(Zz);$9r=r(TFt,"FlaxRoFormerForTokenClassification"),TFt.forEach(t),I9r=r(wke," (RoFormer model)"),wke.forEach(t),j9r=i(Xo),oM=n(Xo,"LI",{});var Ake=s(oM);n0e=n(Ake,"STRONG",{});var FFt=s(n0e);D9r=r(FFt,"xlm-roberta"),FFt.forEach(t),N9r=r(Ake," \u2014 "),eW=n(Ake,"A",{href:!0});var CFt=s(eW);q9r=r(CFt,"FlaxXLMRobertaForTokenClassification"),CFt.forEach(t),G9r=r(Ake," (XLM-RoBERTa model)"),Ake.forEach(t),Xo.forEach(t),O9r=i(Na),s0e=n(Na,"P",{});var MFt=s(s0e);X9r=r(MFt,"Examples:"),MFt.forEach(t),V9r=i(Na),m(zL.$$.fragment,Na),Na.forEach(t),Si.forEach(t),$Se=i(d),Rf=n(d,"H2",{class:!0});var U$e=s(Rf);rM=n(U$e,"A",{id:!0,class:!0,href:!0});var EFt=s(rM);l0e=n(EFt,"SPAN",{});var yFt=s(l0e);m(WL.$$.fragment,yFt),yFt.forEach(t),EFt.forEach(t),z9r=i(U$e),i0e=n(U$e,"SPAN",{});var wFt=s(i0e);W9r=r(wFt,"FlaxAutoModelForMultipleChoice"),wFt.forEach(t),U$e.forEach(t),ISe=i(d),Or=n(d,"DIV",{class:!0});var $i=s(Or);m(QL.$$.fragment,$i),Q9r=i($i),Sf=n($i,"P",{});var ZQ=s(Sf);H9r=r(ZQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),d0e=n(ZQ,"CODE",{});var AFt=s(d0e);U9r=r(AFt,"from_pretrained()"),AFt.forEach(t),J9r=r(ZQ,"class method or the "),c0e=n(ZQ,"CODE",{});var LFt=s(c0e);Y9r=r(LFt,"from_config()"),LFt.forEach(t),K9r=r(ZQ,`class
method.`),ZQ.forEach(t),Z9r=i($i),HL=n($i,"P",{});var J$e=s(HL);eBr=r(J$e,"This class cannot be instantiated directly using "),f0e=n(J$e,"CODE",{});var BFt=s(f0e);oBr=r(BFt,"__init__()"),BFt.forEach(t),rBr=r(J$e," (throws an error)."),J$e.forEach(t),tBr=i($i),jt=n($i,"DIV",{class:!0});var Ii=s(jt);m(UL.$$.fragment,Ii),aBr=i(Ii),m0e=n(Ii,"P",{});var xFt=s(m0e);nBr=r(xFt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xFt.forEach(t),sBr=i(Ii),Pf=n(Ii,"P",{});var eH=s(Pf);lBr=r(eH,`Note:
Loading a model from its configuration file does `),g0e=n(eH,"STRONG",{});var kFt=s(g0e);iBr=r(kFt,"not"),kFt.forEach(t),dBr=r(eH,` load the model weights. It only affects the
model\u2019s configuration. Use `),h0e=n(eH,"CODE",{});var RFt=s(h0e);cBr=r(RFt,"from_pretrained()"),RFt.forEach(t),fBr=r(eH,"to load the model weights."),eH.forEach(t),mBr=i(Ii),p0e=n(Ii,"P",{});var SFt=s(p0e);gBr=r(SFt,"Examples:"),SFt.forEach(t),hBr=i(Ii),m(JL.$$.fragment,Ii),Ii.forEach(t),pBr=i($i),Io=n($i,"DIV",{class:!0});var qa=s(Io);m(YL.$$.fragment,qa),_Br=i(qa),_0e=n(qa,"P",{});var PFt=s(_0e);uBr=r(PFt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),PFt.forEach(t),bBr=i(qa),On=n(qa,"P",{});var h4=s(On);vBr=r(h4,"The model class to instantiate is selected based on the "),u0e=n(h4,"CODE",{});var $Ft=s(u0e);TBr=r($Ft,"model_type"),$Ft.forEach(t),FBr=r(h4,` property of the config object (either
passed as an argument or loaded from `),b0e=n(h4,"CODE",{});var IFt=s(b0e);CBr=r(IFt,"pretrained_model_name_or_path"),IFt.forEach(t),MBr=r(h4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v0e=n(h4,"CODE",{});var jFt=s(v0e);EBr=r(jFt,"pretrained_model_name_or_path"),jFt.forEach(t),yBr=r(h4,":"),h4.forEach(t),wBr=i(qa),Pe=n(qa,"UL",{});var Vo=s(Pe);tM=n(Vo,"LI",{});var Lke=s(tM);T0e=n(Lke,"STRONG",{});var DFt=s(T0e);ABr=r(DFt,"albert"),DFt.forEach(t),LBr=r(Lke," \u2014 "),oW=n(Lke,"A",{href:!0});var NFt=s(oW);BBr=r(NFt,"FlaxAlbertForMultipleChoice"),NFt.forEach(t),xBr=r(Lke," (ALBERT model)"),Lke.forEach(t),kBr=i(Vo),aM=n(Vo,"LI",{});var Bke=s(aM);F0e=n(Bke,"STRONG",{});var qFt=s(F0e);RBr=r(qFt,"bert"),qFt.forEach(t),SBr=r(Bke," \u2014 "),rW=n(Bke,"A",{href:!0});var GFt=s(rW);PBr=r(GFt,"FlaxBertForMultipleChoice"),GFt.forEach(t),$Br=r(Bke," (BERT model)"),Bke.forEach(t),IBr=i(Vo),nM=n(Vo,"LI",{});var xke=s(nM);C0e=n(xke,"STRONG",{});var OFt=s(C0e);jBr=r(OFt,"big_bird"),OFt.forEach(t),DBr=r(xke," \u2014 "),tW=n(xke,"A",{href:!0});var XFt=s(tW);NBr=r(XFt,"FlaxBigBirdForMultipleChoice"),XFt.forEach(t),qBr=r(xke," (BigBird model)"),xke.forEach(t),GBr=i(Vo),sM=n(Vo,"LI",{});var kke=s(sM);M0e=n(kke,"STRONG",{});var VFt=s(M0e);OBr=r(VFt,"distilbert"),VFt.forEach(t),XBr=r(kke," \u2014 "),aW=n(kke,"A",{href:!0});var zFt=s(aW);VBr=r(zFt,"FlaxDistilBertForMultipleChoice"),zFt.forEach(t),zBr=r(kke," (DistilBERT model)"),kke.forEach(t),WBr=i(Vo),lM=n(Vo,"LI",{});var Rke=s(lM);E0e=n(Rke,"STRONG",{});var WFt=s(E0e);QBr=r(WFt,"electra"),WFt.forEach(t),HBr=r(Rke," \u2014 "),nW=n(Rke,"A",{href:!0});var QFt=s(nW);UBr=r(QFt,"FlaxElectraForMultipleChoice"),QFt.forEach(t),JBr=r(Rke," (ELECTRA model)"),Rke.forEach(t),YBr=i(Vo),iM=n(Vo,"LI",{});var Ske=s(iM);y0e=n(Ske,"STRONG",{});var HFt=s(y0e);KBr=r(HFt,"roberta"),HFt.forEach(t),ZBr=r(Ske," \u2014 "),sW=n(Ske,"A",{href:!0});var UFt=s(sW);exr=r(UFt,"FlaxRobertaForMultipleChoice"),UFt.forEach(t),oxr=r(Ske," (RoBERTa model)"),Ske.forEach(t),rxr=i(Vo),dM=n(Vo,"LI",{});var Pke=s(dM);w0e=n(Pke,"STRONG",{});var JFt=s(w0e);txr=r(JFt,"roformer"),JFt.forEach(t),axr=r(Pke," \u2014 "),lW=n(Pke,"A",{href:!0});var YFt=s(lW);nxr=r(YFt,"FlaxRoFormerForMultipleChoice"),YFt.forEach(t),sxr=r(Pke," (RoFormer model)"),Pke.forEach(t),lxr=i(Vo),cM=n(Vo,"LI",{});var $ke=s(cM);A0e=n($ke,"STRONG",{});var KFt=s(A0e);ixr=r(KFt,"xlm-roberta"),KFt.forEach(t),dxr=r($ke," \u2014 "),iW=n($ke,"A",{href:!0});var ZFt=s(iW);cxr=r(ZFt,"FlaxXLMRobertaForMultipleChoice"),ZFt.forEach(t),fxr=r($ke," (XLM-RoBERTa model)"),$ke.forEach(t),Vo.forEach(t),mxr=i(qa),L0e=n(qa,"P",{});var eCt=s(L0e);gxr=r(eCt,"Examples:"),eCt.forEach(t),hxr=i(qa),m(KL.$$.fragment,qa),qa.forEach(t),$i.forEach(t),jSe=i(d),$f=n(d,"H2",{class:!0});var Y$e=s($f);fM=n(Y$e,"A",{id:!0,class:!0,href:!0});var oCt=s(fM);B0e=n(oCt,"SPAN",{});var rCt=s(B0e);m(ZL.$$.fragment,rCt),rCt.forEach(t),oCt.forEach(t),pxr=i(Y$e),x0e=n(Y$e,"SPAN",{});var tCt=s(x0e);_xr=r(tCt,"FlaxAutoModelForNextSentencePrediction"),tCt.forEach(t),Y$e.forEach(t),DSe=i(d),Xr=n(d,"DIV",{class:!0});var ji=s(Xr);m(e7.$$.fragment,ji),uxr=i(ji),If=n(ji,"P",{});var oH=s(If);bxr=r(oH,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),k0e=n(oH,"CODE",{});var aCt=s(k0e);vxr=r(aCt,"from_pretrained()"),aCt.forEach(t),Txr=r(oH,"class method or the "),R0e=n(oH,"CODE",{});var nCt=s(R0e);Fxr=r(nCt,"from_config()"),nCt.forEach(t),Cxr=r(oH,`class
method.`),oH.forEach(t),Mxr=i(ji),o7=n(ji,"P",{});var K$e=s(o7);Exr=r(K$e,"This class cannot be instantiated directly using "),S0e=n(K$e,"CODE",{});var sCt=s(S0e);yxr=r(sCt,"__init__()"),sCt.forEach(t),wxr=r(K$e," (throws an error)."),K$e.forEach(t),Axr=i(ji),Dt=n(ji,"DIV",{class:!0});var Di=s(Dt);m(r7.$$.fragment,Di),Lxr=i(Di),P0e=n(Di,"P",{});var lCt=s(P0e);Bxr=r(lCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lCt.forEach(t),xxr=i(Di),jf=n(Di,"P",{});var rH=s(jf);kxr=r(rH,`Note:
Loading a model from its configuration file does `),$0e=n(rH,"STRONG",{});var iCt=s($0e);Rxr=r(iCt,"not"),iCt.forEach(t),Sxr=r(rH,` load the model weights. It only affects the
model\u2019s configuration. Use `),I0e=n(rH,"CODE",{});var dCt=s(I0e);Pxr=r(dCt,"from_pretrained()"),dCt.forEach(t),$xr=r(rH,"to load the model weights."),rH.forEach(t),Ixr=i(Di),j0e=n(Di,"P",{});var cCt=s(j0e);jxr=r(cCt,"Examples:"),cCt.forEach(t),Dxr=i(Di),m(t7.$$.fragment,Di),Di.forEach(t),Nxr=i(ji),jo=n(ji,"DIV",{class:!0});var Ga=s(jo);m(a7.$$.fragment,Ga),qxr=i(Ga),D0e=n(Ga,"P",{});var fCt=s(D0e);Gxr=r(fCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),fCt.forEach(t),Oxr=i(Ga),Xn=n(Ga,"P",{});var p4=s(Xn);Xxr=r(p4,"The model class to instantiate is selected based on the "),N0e=n(p4,"CODE",{});var mCt=s(N0e);Vxr=r(mCt,"model_type"),mCt.forEach(t),zxr=r(p4,` property of the config object (either
passed as an argument or loaded from `),q0e=n(p4,"CODE",{});var gCt=s(q0e);Wxr=r(gCt,"pretrained_model_name_or_path"),gCt.forEach(t),Qxr=r(p4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G0e=n(p4,"CODE",{});var hCt=s(G0e);Hxr=r(hCt,"pretrained_model_name_or_path"),hCt.forEach(t),Uxr=r(p4,":"),p4.forEach(t),Jxr=i(Ga),O0e=n(Ga,"UL",{});var pCt=s(O0e);mM=n(pCt,"LI",{});var Ike=s(mM);X0e=n(Ike,"STRONG",{});var _Ct=s(X0e);Yxr=r(_Ct,"bert"),_Ct.forEach(t),Kxr=r(Ike," \u2014 "),dW=n(Ike,"A",{href:!0});var uCt=s(dW);Zxr=r(uCt,"FlaxBertForNextSentencePrediction"),uCt.forEach(t),ekr=r(Ike," (BERT model)"),Ike.forEach(t),pCt.forEach(t),okr=i(Ga),V0e=n(Ga,"P",{});var bCt=s(V0e);rkr=r(bCt,"Examples:"),bCt.forEach(t),tkr=i(Ga),m(n7.$$.fragment,Ga),Ga.forEach(t),ji.forEach(t),NSe=i(d),Df=n(d,"H2",{class:!0});var Z$e=s(Df);gM=n(Z$e,"A",{id:!0,class:!0,href:!0});var vCt=s(gM);z0e=n(vCt,"SPAN",{});var TCt=s(z0e);m(s7.$$.fragment,TCt),TCt.forEach(t),vCt.forEach(t),akr=i(Z$e),W0e=n(Z$e,"SPAN",{});var FCt=s(W0e);nkr=r(FCt,"FlaxAutoModelForImageClassification"),FCt.forEach(t),Z$e.forEach(t),qSe=i(d),Vr=n(d,"DIV",{class:!0});var Ni=s(Vr);m(l7.$$.fragment,Ni),skr=i(Ni),Nf=n(Ni,"P",{});var tH=s(Nf);lkr=r(tH,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Q0e=n(tH,"CODE",{});var CCt=s(Q0e);ikr=r(CCt,"from_pretrained()"),CCt.forEach(t),dkr=r(tH,"class method or the "),H0e=n(tH,"CODE",{});var MCt=s(H0e);ckr=r(MCt,"from_config()"),MCt.forEach(t),fkr=r(tH,`class
method.`),tH.forEach(t),mkr=i(Ni),i7=n(Ni,"P",{});var eIe=s(i7);gkr=r(eIe,"This class cannot be instantiated directly using "),U0e=n(eIe,"CODE",{});var ECt=s(U0e);hkr=r(ECt,"__init__()"),ECt.forEach(t),pkr=r(eIe," (throws an error)."),eIe.forEach(t),_kr=i(Ni),Nt=n(Ni,"DIV",{class:!0});var qi=s(Nt);m(d7.$$.fragment,qi),ukr=i(qi),J0e=n(qi,"P",{});var yCt=s(J0e);bkr=r(yCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),yCt.forEach(t),vkr=i(qi),qf=n(qi,"P",{});var aH=s(qf);Tkr=r(aH,`Note:
Loading a model from its configuration file does `),Y0e=n(aH,"STRONG",{});var wCt=s(Y0e);Fkr=r(wCt,"not"),wCt.forEach(t),Ckr=r(aH,` load the model weights. It only affects the
model\u2019s configuration. Use `),K0e=n(aH,"CODE",{});var ACt=s(K0e);Mkr=r(ACt,"from_pretrained()"),ACt.forEach(t),Ekr=r(aH,"to load the model weights."),aH.forEach(t),ykr=i(qi),Z0e=n(qi,"P",{});var LCt=s(Z0e);wkr=r(LCt,"Examples:"),LCt.forEach(t),Akr=i(qi),m(c7.$$.fragment,qi),qi.forEach(t),Lkr=i(Ni),Do=n(Ni,"DIV",{class:!0});var Oa=s(Do);m(f7.$$.fragment,Oa),Bkr=i(Oa),eTe=n(Oa,"P",{});var BCt=s(eTe);xkr=r(BCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),BCt.forEach(t),kkr=i(Oa),Vn=n(Oa,"P",{});var _4=s(Vn);Rkr=r(_4,"The model class to instantiate is selected based on the "),oTe=n(_4,"CODE",{});var xCt=s(oTe);Skr=r(xCt,"model_type"),xCt.forEach(t),Pkr=r(_4,` property of the config object (either
passed as an argument or loaded from `),rTe=n(_4,"CODE",{});var kCt=s(rTe);$kr=r(kCt,"pretrained_model_name_or_path"),kCt.forEach(t),Ikr=r(_4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tTe=n(_4,"CODE",{});var RCt=s(tTe);jkr=r(RCt,"pretrained_model_name_or_path"),RCt.forEach(t),Dkr=r(_4,":"),_4.forEach(t),Nkr=i(Oa),m7=n(Oa,"UL",{});var oIe=s(m7);hM=n(oIe,"LI",{});var jke=s(hM);aTe=n(jke,"STRONG",{});var SCt=s(aTe);qkr=r(SCt,"beit"),SCt.forEach(t),Gkr=r(jke," \u2014 "),cW=n(jke,"A",{href:!0});var PCt=s(cW);Okr=r(PCt,"FlaxBeitForImageClassification"),PCt.forEach(t),Xkr=r(jke," (BEiT model)"),jke.forEach(t),Vkr=i(oIe),pM=n(oIe,"LI",{});var Dke=s(pM);nTe=n(Dke,"STRONG",{});var $Ct=s(nTe);zkr=r($Ct,"vit"),$Ct.forEach(t),Wkr=r(Dke," \u2014 "),fW=n(Dke,"A",{href:!0});var ICt=s(fW);Qkr=r(ICt,"FlaxViTForImageClassification"),ICt.forEach(t),Hkr=r(Dke," (ViT model)"),Dke.forEach(t),oIe.forEach(t),Ukr=i(Oa),sTe=n(Oa,"P",{});var jCt=s(sTe);Jkr=r(jCt,"Examples:"),jCt.forEach(t),Ykr=i(Oa),m(g7.$$.fragment,Oa),Oa.forEach(t),Ni.forEach(t),GSe=i(d),Gf=n(d,"H2",{class:!0});var rIe=s(Gf);_M=n(rIe,"A",{id:!0,class:!0,href:!0});var DCt=s(_M);lTe=n(DCt,"SPAN",{});var NCt=s(lTe);m(h7.$$.fragment,NCt),NCt.forEach(t),DCt.forEach(t),Kkr=i(rIe),iTe=n(rIe,"SPAN",{});var qCt=s(iTe);Zkr=r(qCt,"FlaxAutoModelForVision2Seq"),qCt.forEach(t),rIe.forEach(t),OSe=i(d),zr=n(d,"DIV",{class:!0});var Gi=s(zr);m(p7.$$.fragment,Gi),eRr=i(Gi),Of=n(Gi,"P",{});var nH=s(Of);oRr=r(nH,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dTe=n(nH,"CODE",{});var GCt=s(dTe);rRr=r(GCt,"from_pretrained()"),GCt.forEach(t),tRr=r(nH,"class method or the "),cTe=n(nH,"CODE",{});var OCt=s(cTe);aRr=r(OCt,"from_config()"),OCt.forEach(t),nRr=r(nH,`class
method.`),nH.forEach(t),sRr=i(Gi),_7=n(Gi,"P",{});var tIe=s(_7);lRr=r(tIe,"This class cannot be instantiated directly using "),fTe=n(tIe,"CODE",{});var XCt=s(fTe);iRr=r(XCt,"__init__()"),XCt.forEach(t),dRr=r(tIe," (throws an error)."),tIe.forEach(t),cRr=i(Gi),qt=n(Gi,"DIV",{class:!0});var Oi=s(qt);m(u7.$$.fragment,Oi),fRr=i(Oi),mTe=n(Oi,"P",{});var VCt=s(mTe);mRr=r(VCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),VCt.forEach(t),gRr=i(Oi),Xf=n(Oi,"P",{});var sH=s(Xf);hRr=r(sH,`Note:
Loading a model from its configuration file does `),gTe=n(sH,"STRONG",{});var zCt=s(gTe);pRr=r(zCt,"not"),zCt.forEach(t),_Rr=r(sH,` load the model weights. It only affects the
model\u2019s configuration. Use `),hTe=n(sH,"CODE",{});var WCt=s(hTe);uRr=r(WCt,"from_pretrained()"),WCt.forEach(t),bRr=r(sH,"to load the model weights."),sH.forEach(t),vRr=i(Oi),pTe=n(Oi,"P",{});var QCt=s(pTe);TRr=r(QCt,"Examples:"),QCt.forEach(t),FRr=i(Oi),m(b7.$$.fragment,Oi),Oi.forEach(t),CRr=i(Gi),No=n(Gi,"DIV",{class:!0});var Xa=s(No);m(v7.$$.fragment,Xa),MRr=i(Xa),_Te=n(Xa,"P",{});var HCt=s(_Te);ERr=r(HCt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),HCt.forEach(t),yRr=i(Xa),zn=n(Xa,"P",{});var u4=s(zn);wRr=r(u4,"The model class to instantiate is selected based on the "),uTe=n(u4,"CODE",{});var UCt=s(uTe);ARr=r(UCt,"model_type"),UCt.forEach(t),LRr=r(u4,` property of the config object (either
passed as an argument or loaded from `),bTe=n(u4,"CODE",{});var JCt=s(bTe);BRr=r(JCt,"pretrained_model_name_or_path"),JCt.forEach(t),xRr=r(u4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vTe=n(u4,"CODE",{});var YCt=s(vTe);kRr=r(YCt,"pretrained_model_name_or_path"),YCt.forEach(t),RRr=r(u4,":"),u4.forEach(t),SRr=i(Xa),TTe=n(Xa,"UL",{});var KCt=s(TTe);uM=n(KCt,"LI",{});var Nke=s(uM);FTe=n(Nke,"STRONG",{});var ZCt=s(FTe);PRr=r(ZCt,"vision-encoder-decoder"),ZCt.forEach(t),$Rr=r(Nke," \u2014 "),mW=n(Nke,"A",{href:!0});var eMt=s(mW);IRr=r(eMt,"FlaxVisionEncoderDecoderModel"),eMt.forEach(t),jRr=r(Nke," (Vision Encoder decoder model)"),Nke.forEach(t),KCt.forEach(t),DRr=i(Xa),CTe=n(Xa,"P",{});var oMt=s(CTe);NRr=r(oMt,"Examples:"),oMt.forEach(t),qRr=i(Xa),m(T7.$$.fragment,Xa),Xa.forEach(t),Gi.forEach(t),this.h()},h(){c(K,"name","hf:doc:metadata"),c(K,"content",JSON.stringify(fMt)),c(Ee,"id","auto-classes"),c(Ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ee,"href","#auto-classes"),c(de,"class","relative group"),c(Wn,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoConfig"),c(Hn,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoModel"),c(Un,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoTokenizer"),c(Ui,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertModel"),c(Jf,"id","extending-the-auto-classes"),c(Jf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jf,"href","#extending-the-auto-classes"),c(Ji,"class","relative group"),c(Kf,"id","transformers.AutoConfig"),c(Kf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kf,"href","#transformers.AutoConfig"),c(Yi,"class","relative group"),c(E9,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(y9,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertConfig"),c(w9,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartConfig"),c(A9,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitConfig"),c(L9,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertConfig"),c(B9,"href","/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(x9,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdConfig"),c(k9,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(R9,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(S9,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(P9,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertConfig"),c($9,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineConfig"),c(I9,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPConfig"),c(j9,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertConfig"),c(D9,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextConfig"),c(N9,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLConfig"),c(q9,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(G9,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(O9,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaConfig"),c(X9,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(V9,"href","/docs/transformers/pr_16058/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(z9,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTConfig"),c(W9,"href","/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrConfig"),c(Q9,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertConfig"),c(H9,"href","/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRConfig"),c(U9,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraConfig"),c(J9,"href","/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Y9,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertConfig"),c(K9,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetConfig"),c(Z9,"href","/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTConfig"),c(eB,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelConfig"),c(oB,"href","/docs/transformers/pr_16058/en/model_doc/glpn#transformers.GLPNConfig"),c(rB,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Config"),c(tB,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(aB,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJConfig"),c(nB,"href","/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertConfig"),c(sB,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertConfig"),c(lB,"href","/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(iB,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(dB,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(cB,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDConfig"),c(fB,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerConfig"),c(mB,"href","/docs/transformers/pr_16058/en/model_doc/luke#transformers.LukeConfig"),c(gB,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertConfig"),c(hB,"href","/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Config"),c(pB,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianConfig"),c(_B,"href","/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(uB,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartConfig"),c(bB,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(vB,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(TB,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetConfig"),c(FB,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Config"),c(CB,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(MB,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(EB,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusConfig"),c(yB,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverConfig"),c(wB,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartConfig"),c(AB,"href","/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(LB,"href","/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(BB,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(xB,"href","/docs/transformers/pr_16058/en/model_doc/rag#transformers.RagConfig"),c(kB,"href","/docs/transformers/pr_16058/en/model_doc/realm#transformers.RealmConfig"),c(RB,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerConfig"),c(SB,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertConfig"),c(PB,"href","/docs/transformers/pr_16058/en/model_doc/resnet#transformers.ResNetConfig"),c($B,"href","/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertConfig"),c(IB,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaConfig"),c(jB,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerConfig"),c(DB,"href","/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerConfig"),c(NB,"href","/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWConfig"),c(qB,"href","/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDConfig"),c(GB,"href","/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(OB,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(XB,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(VB,"href","/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterConfig"),c(zB,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(WB,"href","/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinConfig"),c(QB,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Config"),c(HB,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasConfig"),c(UB,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(JB,"href","/docs/transformers/pr_16058/en/model_doc/trocr#transformers.TrOCRConfig"),c(YB,"href","/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(KB,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(ZB,"href","/docs/transformers/pr_16058/en/model_doc/van#transformers.VanConfig"),c(ex,"href","/docs/transformers/pr_16058/en/model_doc/vilt#transformers.ViltConfig"),c(ox,"href","/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(rx,"href","/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(tx,"href","/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(ax,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTConfig"),c(nx,"href","/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(sx,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(lx,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMConfig"),c(ix,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMConfig"),c(dx,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMConfig"),c(cx,"href","/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(fx,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(mx,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(gx,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetConfig"),c(hx,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoConfig"),c(mo,"class","docstring"),c(Xg,"class","docstring"),c(Qo,"class","docstring"),c(Vg,"id","transformers.AutoTokenizer"),c(Vg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vg,"href","#transformers.AutoTokenizer"),c(Zi,"class","relative group"),c(px,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(_x,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertTokenizer"),c(ux,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(bx,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartTokenizer"),c(vx,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartTokenizerFast"),c(Tx,"href","/docs/transformers/pr_16058/en/model_doc/barthez#transformers.BarthezTokenizer"),c(Fx,"href","/docs/transformers/pr_16058/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(Cx,"href","/docs/transformers/pr_16058/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(Mx,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertTokenizer"),c(Ex,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertTokenizerFast"),c(yx,"href","/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(wx,"href","/docs/transformers/pr_16058/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(Ax,"href","/docs/transformers/pr_16058/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(Lx,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(Bx,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(xx,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(kx,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Rx,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(Sx,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(Px,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c($x,"href","/docs/transformers/pr_16058/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(Ix,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertTokenizer"),c(jx,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(Dx,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineTokenizer"),c(Nx,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPTokenizer"),c(qx,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(Gx,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(Ox,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(Xx,"href","/docs/transformers/pr_16058/en/model_doc/cpm#transformers.CpmTokenizer"),c(Vx,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(zx,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaTokenizer"),c(Wx,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(Qx,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(Hx,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(Ux,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(Jx,"href","/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(Yx,"href","/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(Kx,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraTokenizer"),c(Zx,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(ek,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(ok,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetTokenizer"),c(rk,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(tk,"href","/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(ak,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelTokenizer"),c(nk,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(sk,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(lk,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(ik,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(dk,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(ck,"href","/docs/transformers/pr_16058/en/model_doc/herbert#transformers.HerbertTokenizer"),c(fk,"href","/docs/transformers/pr_16058/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(mk,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(gk,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaTokenizer"),c(hk,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(pk,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(_k,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(uk,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(bk,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(vk,"href","/docs/transformers/pr_16058/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(Tk,"href","/docs/transformers/pr_16058/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(Fk,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDTokenizer"),c(Ck,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDTokenizerFast"),c(Mk,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerTokenizer"),c(Ek,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(yk,"href","/docs/transformers/pr_16058/en/model_doc/luke#transformers.LukeTokenizer"),c(wk,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(Ak,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(Lk,"href","/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(Bk,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianTokenizer"),c(xk,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartTokenizer"),c(kk,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(Rk,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(Sk,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(Pk,"href","/docs/transformers/pr_16058/en/model_doc/mluke#transformers.MLukeTokenizer"),c($k,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(Ik,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(jk,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(Dk,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(Nk,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.T5Tokenizer"),c(qk,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.T5TokenizerFast"),c(Gk,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(Ok,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(Xk,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Vk,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(zk,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(Wk,"href","/docs/transformers/pr_16058/en/model_doc/phobert#transformers.PhobertTokenizer"),c(Qk,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartTokenizer"),c(Hk,"href","/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(Uk,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertTokenizer"),c(Jk,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertTokenizerFast"),c(Yk,"href","/docs/transformers/pr_16058/en/model_doc/rag#transformers.RagTokenizer"),c(Kk,"href","/docs/transformers/pr_16058/en/model_doc/realm#transformers.RealmTokenizer"),c(Zk,"href","/docs/transformers/pr_16058/en/model_doc/realm#transformers.RealmTokenizerFast"),c(eR,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerTokenizer"),c(oR,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(rR,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertTokenizer"),c(tR,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(aR,"href","/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(nR,"href","/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(sR,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaTokenizer"),c(lR,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(iR,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(dR,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(cR,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(fR,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(mR,"href","/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterTokenizer"),c(gR,"href","/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(hR,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(pR,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(_R,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.T5Tokenizer"),c(uR,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.T5TokenizerFast"),c(bR,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasTokenizer"),c(vR,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(TR,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(FR,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(CR,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMTokenizer"),c(MR,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(ER,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMTokenizer"),c(yR,"href","/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(wR,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(AR,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(LR,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(BR,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(go,"class","docstring"),c(Th,"class","docstring"),c(Ho,"class","docstring"),c(Fh,"id","transformers.AutoFeatureExtractor"),c(Fh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fh,"href","#transformers.AutoFeatureExtractor"),c(ed,"class","relative group"),c(xR,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(kR,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(RR,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(SR,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(PR,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c($R,"href","/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(IR,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(jR,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(DR,"href","/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(NR,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(qR,"href","/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(GR,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(OR,"href","/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(XR,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(VR,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(zR,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(WR,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(QR,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(HR,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($e,"class","docstring"),c(Gh,"class","docstring"),c(Uo,"class","docstring"),c(Oh,"id","transformers.AutoProcessor"),c(Oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Oh,"href","#transformers.AutoProcessor"),c(od,"class","relative group"),c(UR,"href","/docs/transformers/pr_16058/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(JR,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPProcessor"),c(YR,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(KR,"href","/docs/transformers/pr_16058/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(ZR,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(eS,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(oS,"href","/docs/transformers/pr_16058/en/model_doc/trocr#transformers.TrOCRProcessor"),c(rS,"href","/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(tS,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ie,"class","docstring"),c(Kh,"class","docstring"),c(Jo,"class","docstring"),c(Zh,"id","transformers.AutoModel"),c(Zh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zh,"href","#transformers.AutoModel"),c(td,"class","relative group"),c(Wr,"class","docstring"),c(aS,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertModel"),c(nS,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartModel"),c(sS,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitModel"),c(lS,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertModel"),c(iS,"href","/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(dS,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdModel"),c(cS,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(fS,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(mS,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(gS,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertModel"),c(hS,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineModel"),c(pS,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.CLIPModel"),c(_S,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertModel"),c(uS,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextModel"),c(bS,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLModel"),c(vS,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(TS,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(FS,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaModel"),c(CS,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(MS,"href","/docs/transformers/pr_16058/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(ES,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTModel"),c(yS,"href","/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrModel"),c(wS,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertModel"),c(AS,"href","/docs/transformers/pr_16058/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(LS,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraModel"),c(BS,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertModel"),c(xS,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetModel"),c(kS,"href","/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTModel"),c(RS,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelModel"),c(SS,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelBaseModel"),c(PS,"href","/docs/transformers/pr_16058/en/model_doc/glpn#transformers.GLPNModel"),c($S,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2Model"),c(IS,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(jS,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJModel"),c(DS,"href","/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertModel"),c(NS,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertModel"),c(qS,"href","/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(GS,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(OS,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(XS,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDModel"),c(VS,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerModel"),c(zS,"href","/docs/transformers/pr_16058/en/model_doc/luke#transformers.LukeModel"),c(WS,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertModel"),c(QS,"href","/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100Model"),c(HS,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianModel"),c(US,"href","/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerModel"),c(JS,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartModel"),c(YS,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(KS,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertModel"),c(ZS,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetModel"),c(eP,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5Model"),c(oP,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerModel"),c(rP,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(tP,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusModel"),c(aP,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverModel"),c(nP,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartModel"),c(sP,"href","/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerModel"),c(lP,"href","/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(iP,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertModel"),c(dP,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerModel"),c(cP,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertModel"),c(fP,"href","/docs/transformers/pr_16058/en/model_doc/resnet#transformers.ResNetModel"),c(mP,"href","/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertModel"),c(gP,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaModel"),c(hP,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerModel"),c(pP,"href","/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerModel"),c(_P,"href","/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWModel"),c(uP,"href","/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDModel"),c(bP,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(vP,"href","/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterModel"),c(TP,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(FP,"href","/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinModel"),c(CP,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5Model"),c(MP,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasModel"),c(EP,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(yP,"href","/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechModel"),c(wP,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(AP,"href","/docs/transformers/pr_16058/en/model_doc/van#transformers.VanModel"),c(LP,"href","/docs/transformers/pr_16058/en/model_doc/vilt#transformers.ViltModel"),c(BP,"href","/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(xP,"href","/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertModel"),c(kP,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTModel"),c(RP,"href","/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(SP,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(PP,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMModel"),c($P,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMModel"),c(IP,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMModel"),c(jP,"href","/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(DP,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(NP,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(qP,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetModel"),c(GP,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoModel"),c(je,"class","docstring"),c(Yo,"class","docstring"),c(j_,"id","transformers.AutoModelForPreTraining"),c(j_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j_,"href","#transformers.AutoModelForPreTraining"),c(sd,"class","relative group"),c(Qr,"class","docstring"),c(OP,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForPreTraining"),c(XP,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(VP,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForPreTraining"),c(zP,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(WP,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(QP,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(HP,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(UP,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(JP,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(YP,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(KP,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForPreTraining"),c(ZP,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(e$,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForPreTraining"),c(o$,"href","/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(r$,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(t$,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(a$,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(n$,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(s$,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(l$,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(i$,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(d$,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(c$,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(f$,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(m$,"href","/docs/transformers/pr_16058/en/model_doc/retribert#transformers.RetriBertModel"),c(g$,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(h$,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(p$,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(_$,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(u$,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(b$,"href","/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(v$,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(T$,"href","/docs/transformers/pr_16058/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(F$,"href","/docs/transformers/pr_16058/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(C$,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(M$,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(E$,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(y$,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(w$,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(De,"class","docstring"),c(Ko,"class","docstring"),c(Eu,"id","transformers.AutoModelForCausalLM"),c(Eu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Eu,"href","#transformers.AutoModelForCausalLM"),c(dd,"class","relative group"),c(Hr,"class","docstring"),c(A$,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForCausalLM"),c(L$,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertLMHeadModel"),c(B$,"href","/docs/transformers/pr_16058/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(x$,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(k$,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(R$,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(S$,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(P$,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForCausalLM"),c($$,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(I$,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(j$,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForCausalLM"),c(D$,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(N$,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(q$,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(G$,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianForCausalLM"),c(O$,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForCausalLM"),c(X$,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(V$,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(z$,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(W$,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Q$,"href","/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(H$,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(U$,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(J$,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Y$,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(K$,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Z$,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(eI,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(oI,"href","/docs/transformers/pr_16058/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(rI,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(tI,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(aI,"href","/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(nI,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(sI,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(lI,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ne,"class","docstring"),c(Zo,"class","docstring"),c(l1,"id","transformers.AutoModelForMaskedLM"),c(l1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l1,"href","#transformers.AutoModelForMaskedLM"),c(md,"class","relative group"),c(Ur,"class","docstring"),c(iI,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(dI,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(cI,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForMaskedLM"),c(fI,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(mI,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(gI,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(hI,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(pI,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(_I,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(uI,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(bI,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(vI,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(TI,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(FI,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(CI,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(MI,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(EI,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(yI,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(wI,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(AI,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(LI,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(BI,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(xI,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(kI,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(RI,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(SI,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(PI,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c($I,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(II,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(jI,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(DI,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(NI,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(qI,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(GI,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(qe,"class","docstring"),c(er,"class","docstring"),c(V1,"id","transformers.AutoModelForSeq2SeqLM"),c(V1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V1,"href","#transformers.AutoModelForSeq2SeqLM"),c(pd,"class","relative group"),c(Jr,"class","docstring"),c(OI,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(XI,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(VI,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(zI,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(WI,"href","/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(QI,"href","/docs/transformers/pr_16058/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(HI,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(UI,"href","/docs/transformers/pr_16058/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(JI,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.MarianMTModel"),c(YI,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(KI,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(ZI,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(ej,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(oj,"href","/docs/transformers/pr_16058/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(rj,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(tj,"href","/docs/transformers/pr_16058/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ge,"class","docstring"),c(or,"class","docstring"),c(ib,"id","transformers.AutoModelForSequenceClassification"),c(ib,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ib,"href","#transformers.AutoModelForSequenceClassification"),c(bd,"class","relative group"),c(Yr,"class","docstring"),c(aj,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(nj,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForSequenceClassification"),c(sj,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForSequenceClassification"),c(lj,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(ij,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(dj,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(cj,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(fj,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(mj,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(gj,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(hj,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(pj,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(_j,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(uj,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(bj,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(vj,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(Tj,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(Fj,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(Cj,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(Mj,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(Ej,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(yj,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(wj,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(Aj,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForSequenceClassification"),c(Lj,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(Bj,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(xj,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(kj,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(Rj,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(Sj,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(Pj,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c($j,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(Ij,"href","/docs/transformers/pr_16058/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(jj,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(Dj,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(Nj,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(qj,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(Gj,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(Oj,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(Xj,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(Vj,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(zj,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(Wj,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(Qj,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(Hj,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(Uj,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Oe,"class","docstring"),c(rr,"class","docstring"),c(r5,"id","transformers.AutoModelForMultipleChoice"),c(r5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r5,"href","#transformers.AutoModelForMultipleChoice"),c(Fd,"class","relative group"),c(Kr,"class","docstring"),c(Jj,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(Yj,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForMultipleChoice"),c(Kj,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(Zj,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(eD,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(oD,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(rD,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(tD,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(aD,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(nD,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(sD,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(lD,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(iD,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(dD,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(cD,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(fD,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(mD,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(gD,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(hD,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(pD,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(_D,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(uD,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(bD,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(vD,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(TD,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(FD,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(CD,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(MD,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Xe,"class","docstring"),c(tr,"class","docstring"),c(R5,"id","transformers.AutoModelForNextSentencePrediction"),c(R5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R5,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ed,"class","relative group"),c(Zr,"class","docstring"),c(ED,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(yD,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(wD,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(AD,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(LD,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(Ve,"class","docstring"),c(ar,"class","docstring"),c(N5,"id","transformers.AutoModelForTokenClassification"),c(N5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N5,"href","#transformers.AutoModelForTokenClassification"),c(Ad,"class","relative group"),c(et,"class","docstring"),c(BD,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(xD,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForTokenClassification"),c(kD,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(RD,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(SD,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForTokenClassification"),c(PD,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c($D,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(ID,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(jD,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(DD,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(ND,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(qD,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(GD,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(OD,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(XD,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(VD,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(zD,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(WD,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(QD,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(HD,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(UD,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(JD,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(YD,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(KD,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(ZD,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(eN,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(oN,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(rN,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(tN,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(aN,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(nN,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(sN,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(lN,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ze,"class","docstring"),c(nr,"class","docstring"),c(T2,"id","transformers.AutoModelForQuestionAnswering"),c(T2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T2,"href","#transformers.AutoModelForQuestionAnswering"),c(xd,"class","relative group"),c(ot,"class","docstring"),c(iN,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(dN,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(cN,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(fN,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(mN,"href","/docs/transformers/pr_16058/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(gN,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(hN,"href","/docs/transformers/pr_16058/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(pN,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(_N,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(uN,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(bN,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(vN,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(TN,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(FN,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(CN,"href","/docs/transformers/pr_16058/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(MN,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(EN,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(yN,"href","/docs/transformers/pr_16058/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(wN,"href","/docs/transformers/pr_16058/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(AN,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(LN,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(BN,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(xN,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(kN,"href","/docs/transformers/pr_16058/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(RN,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(SN,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(PN,"href","/docs/transformers/pr_16058/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c($N,"href","/docs/transformers/pr_16058/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(IN,"href","/docs/transformers/pr_16058/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(jN,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(DN,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(NN,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(qN,"href","/docs/transformers/pr_16058/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(GN,"href","/docs/transformers/pr_16058/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(ON,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(XN,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(VN,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(zN,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(WN,"href","/docs/transformers/pr_16058/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(We,"class","docstring"),c(sr,"class","docstring"),c(lv,"id","transformers.AutoModelForTableQuestionAnswering"),c(lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Sd,"class","relative group"),c(rt,"class","docstring"),c(QN,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(Qe,"class","docstring"),c(lr,"class","docstring"),c(cv,"id","transformers.AutoModelForImageClassification"),c(cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cv,"href","#transformers.AutoModelForImageClassification"),c(Id,"class","relative group"),c(tt,"class","docstring"),c(HN,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitForImageClassification"),c(UN,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(JN,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForImageClassification"),c(YN,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(KN,"href","/docs/transformers/pr_16058/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(ZN,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(eq,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(oq,"href","/docs/transformers/pr_16058/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(rq,"href","/docs/transformers/pr_16058/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(tq,"href","/docs/transformers/pr_16058/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(aq,"href","/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(nq,"href","/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinForImageClassification"),c(sq,"href","/docs/transformers/pr_16058/en/model_doc/van#transformers.VanForImageClassification"),c(lq,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTForImageClassification"),c(He,"class","docstring"),c(ir,"class","docstring"),c(Fv,"id","transformers.AutoModelForVision2Seq"),c(Fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fv,"href","#transformers.AutoModelForVision2Seq"),c(Nd,"class","relative group"),c(at,"class","docstring"),c(iq,"href","/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(Ue,"class","docstring"),c(dr,"class","docstring"),c(Ev,"id","transformers.AutoModelForAudioClassification"),c(Ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ev,"href","#transformers.AutoModelForAudioClassification"),c(Od,"class","relative group"),c(nt,"class","docstring"),c(dq,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(cq,"href","/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(fq,"href","/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(mq,"href","/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(gq,"href","/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(hq,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(pq,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(_q,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(Je,"class","docstring"),c(cr,"class","docstring"),c(Pv,"id","transformers.AutoModelForAudioFrameClassification"),c(Pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pv,"href","#transformers.AutoModelForAudioFrameClassification"),c(zd,"class","relative group"),c(st,"class","docstring"),c(uq,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(bq,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(vq,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(Tq,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(Ye,"class","docstring"),c(fr,"class","docstring"),c(qv,"id","transformers.AutoModelForCTC"),c(qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qv,"href","#transformers.AutoModelForCTC"),c(Hd,"class","relative group"),c(lt,"class","docstring"),c(Fq,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(Cq,"href","/docs/transformers/pr_16058/en/model_doc/hubert#transformers.HubertForCTC"),c(Mq,"href","/docs/transformers/pr_16058/en/model_doc/sew#transformers.SEWForCTC"),c(Eq,"href","/docs/transformers/pr_16058/en/model_doc/sew-d#transformers.SEWDForCTC"),c(yq,"href","/docs/transformers/pr_16058/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(wq,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(Aq,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Lq,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForCTC"),c(Ke,"class","docstring"),c(mr,"class","docstring"),c(Jv,"id","transformers.AutoModelForSpeechSeq2Seq"),c(Jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jv,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Yd,"class","relative group"),c(it,"class","docstring"),c(Bq,"href","/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(xq,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(Ze,"class","docstring"),c(gr,"class","docstring"),c(e6,"id","transformers.AutoModelForAudioXVector"),c(e6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e6,"href","#transformers.AutoModelForAudioXVector"),c(ec,"class","relative group"),c(dt,"class","docstring"),c(kq,"href","/docs/transformers/pr_16058/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(Rq,"href","/docs/transformers/pr_16058/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Sq,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(Pq,"href","/docs/transformers/pr_16058/en/model_doc/wavlm#transformers.WavLMForXVector"),c(eo,"class","docstring"),c(hr,"class","docstring"),c(s6,"id","transformers.AutoModelForMaskedImageModeling"),c(s6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s6,"href","#transformers.AutoModelForMaskedImageModeling"),c(tc,"class","relative group"),c(ct,"class","docstring"),c($q,"href","/docs/transformers/pr_16058/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(Iq,"href","/docs/transformers/pr_16058/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(jq,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(oo,"class","docstring"),c(pr,"class","docstring"),c(f6,"id","transformers.AutoModelForObjectDetection"),c(f6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f6,"href","#transformers.AutoModelForObjectDetection"),c(lc,"class","relative group"),c(ft,"class","docstring"),c(Dq,"href","/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrForObjectDetection"),c(ro,"class","docstring"),c(_r,"class","docstring"),c(h6,"id","transformers.AutoModelForImageSegmentation"),c(h6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h6,"href","#transformers.AutoModelForImageSegmentation"),c(cc,"class","relative group"),c(mt,"class","docstring"),c(Nq,"href","/docs/transformers/pr_16058/en/model_doc/detr#transformers.DetrForSegmentation"),c(to,"class","docstring"),c(ur,"class","docstring"),c(u6,"id","transformers.AutoModelForSemanticSegmentation"),c(u6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u6,"href","#transformers.AutoModelForSemanticSegmentation"),c(gc,"class","relative group"),c(gt,"class","docstring"),c(qq,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(Gq,"href","/docs/transformers/pr_16058/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(ao,"class","docstring"),c(br,"class","docstring"),c(F6,"id","transformers.AutoModelForInstanceSegmentation"),c(F6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F6,"href","#transformers.AutoModelForInstanceSegmentation"),c(_c,"class","relative group"),c(ht,"class","docstring"),c(Oq,"href","/docs/transformers/pr_16058/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(no,"class","docstring"),c(vr,"class","docstring"),c(E6,"id","transformers.TFAutoModel"),c(E6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E6,"href","#transformers.TFAutoModel"),c(vc,"class","relative group"),c(pt,"class","docstring"),c(Xq,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertModel"),c(Vq,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartModel"),c(zq,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertModel"),c(Wq,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Qq,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(Hq,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertModel"),c(Uq,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.TFCLIPModel"),c(Jq,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertModel"),c(Yq,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.TFConvNextModel"),c(Kq,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Zq,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaModel"),c(eG,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(oG,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(rG,"href","/docs/transformers/pr_16058/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(tG,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraModel"),c(aG,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(nG,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelModel"),c(sG,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(lG,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2Model"),c(iG,"href","/docs/transformers/pr_16058/en/model_doc/hubert#transformers.TFHubertModel"),c(dG,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(cG,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.TFLEDModel"),c(fG,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerModel"),c(mG,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.TFLxmertModel"),c(gG,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.TFMarianModel"),c(hG,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.TFMBartModel"),c(pG,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(_G,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetModel"),c(uG,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.TFMT5Model"),c(bG,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(vG,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.TFPegasusModel"),c(TG,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertModel"),c(FG,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaModel"),c(CG,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerModel"),c(MG,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(EG,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5Model"),c(yG,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasModel"),c(wG,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(AG,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.TFViTModel"),c(LG,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(BG,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMModel"),c(xG,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(kG,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetModel"),c(ho,"class","docstring"),c(Tr,"class","docstring"),c(m0,"id","transformers.TFAutoModelForPreTraining"),c(m0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m0,"href","#transformers.TFAutoModelForPreTraining"),c(Cc,"class","relative group"),c(_t,"class","docstring"),c(RG,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(SG,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(PG,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForPreTraining"),c($G,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(IG,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(jG,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(DG,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(NG,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(qG,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(GG,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(OG,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(XG,"href","/docs/transformers/pr_16058/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(VG,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(zG,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(WG,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(QG,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(HG,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(UG,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(JG,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(YG,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(KG,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(ZG,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(po,"class","docstring"),c(Fr,"class","docstring"),c($0,"id","transformers.TFAutoModelForCausalLM"),c($0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($0,"href","#transformers.TFAutoModelForCausalLM"),c(yc,"class","relative group"),c(ut,"class","docstring"),c(eO,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(oO,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(rO,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(tO,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(aO,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(nO,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(sO,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(lO,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(iO,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(dO,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(cO,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(_o,"class","docstring"),c(Cr,"class","docstring"),c(Q0,"id","transformers.TFAutoModelForImageClassification"),c(Q0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q0,"href","#transformers.TFAutoModelForImageClassification"),c(Lc,"class","relative group"),c(bt,"class","docstring"),c(fO,"href","/docs/transformers/pr_16058/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(mO,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.TFViTForImageClassification"),c(uo,"class","docstring"),c(Mr,"class","docstring"),c(J0,"id","transformers.TFAutoModelForMaskedLM"),c(J0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J0,"href","#transformers.TFAutoModelForMaskedLM"),c(kc,"class","relative group"),c(vt,"class","docstring"),c(gO,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(hO,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(pO,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(_O,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(uO,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(bO,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(vO,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(TO,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(FO,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(CO,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(MO,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(EO,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(yO,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(wO,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(AO,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(LO,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(BO,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(xO,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(kO,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(RO,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(bo,"class","docstring"),c(Er,"class","docstring"),c(uT,"id","transformers.TFAutoModelForSeq2SeqLM"),c(uT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uT,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Pc,"class","relative group"),c(Tt,"class","docstring"),c(SO,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(PO,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c($O,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(IO,"href","/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(jO,"href","/docs/transformers/pr_16058/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(DO,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.TFMarianMTModel"),c(NO,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(qO,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(GO,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(OO,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(vo,"class","docstring"),c(yr,"class","docstring"),c(LT,"id","transformers.TFAutoModelForSequenceClassification"),c(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LT,"href","#transformers.TFAutoModelForSequenceClassification"),c(jc,"class","relative group"),c(Ft,"class","docstring"),c(XO,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(VO,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(zO,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(WO,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(QO,"href","/docs/transformers/pr_16058/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(HO,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(UO,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(JO,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(YO,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(KO,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(eX,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(oX,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(rX,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(tX,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(aX,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(nX,"href","/docs/transformers/pr_16058/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(sX,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(lX,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(iX,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(dX,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(cX,"href","/docs/transformers/pr_16058/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(fX,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(mX,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(gX,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(To,"class","docstring"),c(wr,"class","docstring"),c(e8,"id","transformers.TFAutoModelForMultipleChoice"),c(e8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e8,"href","#transformers.TFAutoModelForMultipleChoice"),c(qc,"class","relative group"),c(Ct,"class","docstring"),c(hX,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(pX,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(_X,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(uX,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(bX,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(vX,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(TX,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(FX,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(CX,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(MX,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(EX,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(yX,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(wX,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(AX,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(LX,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(BX,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(xX,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Fo,"class","docstring"),c(Ar,"class","docstring"),c(b8,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(b8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b8,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Xc,"class","relative group"),c(Mt,"class","docstring"),c(kX,"href","/docs/transformers/pr_16058/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Co,"class","docstring"),c(Lr,"class","docstring"),c(T8,"id","transformers.TFAutoModelForTokenClassification"),c(T8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T8,"href","#transformers.TFAutoModelForTokenClassification"),c(Wc,"class","relative group"),c(Et,"class","docstring"),c(RX,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(SX,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(PX,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c($X,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(IX,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(jX,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(DX,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(NX,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(qX,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(GX,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(OX,"href","/docs/transformers/pr_16058/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(XX,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(VX,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(zX,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(WX,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(QX,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(HX,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(UX,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(JX,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(YX,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Mo,"class","docstring"),c(Br,"class","docstring"),c(G8,"id","transformers.TFAutoModelForQuestionAnswering"),c(G8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G8,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Uc,"class","relative group"),c(yt,"class","docstring"),c(KX,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(ZX,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_16058/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_16058/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_16058/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_16058/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_16058/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(lV,"href","/docs/transformers/pr_16058/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_16058/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_16058/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_16058/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_16058/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_16058/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(pV,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_16058/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Eo,"class","docstring"),c(xr,"class","docstring"),c(lF,"id","transformers.TFAutoModelForVision2Seq"),c(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lF,"href","#transformers.TFAutoModelForVision2Seq"),c(Kc,"class","relative group"),c(wt,"class","docstring"),c(uV,"href","/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(yo,"class","docstring"),c(kr,"class","docstring"),c(dF,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dF,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(of,"class","relative group"),c(At,"class","docstring"),c(bV,"href","/docs/transformers/pr_16058/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(wo,"class","docstring"),c(Rr,"class","docstring"),c(fF,"id","transformers.FlaxAutoModel"),c(fF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fF,"href","#transformers.FlaxAutoModel"),c(af,"class","relative group"),c(Lt,"class","docstring"),c(vV,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertModel"),c(TV,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartModel"),c(FV,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.FlaxBeitModel"),c(CV,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertModel"),c(MV,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(EV,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(yV,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(wV,"href","/docs/transformers/pr_16058/en/model_doc/clip#transformers.FlaxCLIPModel"),c(AV,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(LV,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraModel"),c(BV,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(xV,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(kV,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(RV,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.FlaxMarianModel"),c(SV,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartModel"),c(PV,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5Model"),c($V,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(IV,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(jV,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(DV,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5Model"),c(NV,"href","/docs/transformers/pr_16058/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(qV,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.FlaxViTModel"),c(GV,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(OV,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(XV,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Ao,"class","docstring"),c(Sr,"class","docstring"),c(jF,"id","transformers.FlaxAutoModelForCausalLM"),c(jF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jF,"href","#transformers.FlaxAutoModelForCausalLM"),c(lf,"class","relative group"),c(Bt,"class","docstring"),c(VV,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(zV,"href","/docs/transformers/pr_16058/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(WV,"href","/docs/transformers/pr_16058/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(QV,"href","/docs/transformers/pr_16058/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(HV,"href","/docs/transformers/pr_16058/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Lo,"class","docstring"),c(Pr,"class","docstring"),c(XF,"id","transformers.FlaxAutoModelForPreTraining"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.FlaxAutoModelForPreTraining"),c(ff,"class","relative group"),c(xt,"class","docstring"),c(UV,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(JV,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(YV,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(KV,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(ZV,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(ez,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(oz,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(rz,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(tz,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(az,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(nz,"href","/docs/transformers/pr_16058/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(sz,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Bo,"class","docstring"),c($r,"class","docstring"),c(rC,"id","transformers.FlaxAutoModelForMaskedLM"),c(rC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(hf,"class","relative group"),c(kt,"class","docstring"),c(lz,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(iz,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(dz,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(cz,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(fz,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(mz,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(gz,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(hz,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(pz,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(_z,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(xo,"class","docstring"),c(Ir,"class","docstring"),c(gC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(gC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(uf,"class","relative group"),c(Rt,"class","docstring"),c(uz,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(bz,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(vz,"href","/docs/transformers/pr_16058/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Tz,"href","/docs/transformers/pr_16058/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Fz,"href","/docs/transformers/pr_16058/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Cz,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Mz,"href","/docs/transformers/pr_16058/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Ez,"href","/docs/transformers/pr_16058/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(yz,"href","/docs/transformers/pr_16058/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(ko,"class","docstring"),c(jr,"class","docstring"),c(MC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(MC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Tf,"class","relative group"),c(St,"class","docstring"),c(wz,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Az,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Lz,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Bz,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(xz,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(kz,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Rz,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Sz,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Pz,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c($z,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Ro,"class","docstring"),c(Dr,"class","docstring"),c(PC,"id","transformers.FlaxAutoModelForSpeechSeq2Seq"),c(PC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PC,"href","#transformers.FlaxAutoModelForSpeechSeq2Seq"),c(Mf,"class","relative group"),c(Pt,"class","docstring"),c(Iz,"href","/docs/transformers/pr_16058/en/model_doc/speech-encoder-decoder#transformers.FlaxSpeechEncoderDecoderModel"),c(So,"class","docstring"),c(Nr,"class","docstring"),c(IC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(IC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(wf,"class","relative group"),c($t,"class","docstring"),c(jz,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Dz,"href","/docs/transformers/pr_16058/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Nz,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(qz,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Gz,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Oz,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Xz,"href","/docs/transformers/pr_16058/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Vz,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(zz,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Wz,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Po,"class","docstring"),c(qr,"class","docstring"),c(QC,"id","transformers.FlaxAutoModelForTokenClassification"),c(QC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Bf,"class","relative group"),c(It,"class","docstring"),c(Qz,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Hz,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Uz,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Jz,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Yz,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Kz,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Zz,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(eW,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c($o,"class","docstring"),c(Gr,"class","docstring"),c(rM,"id","transformers.FlaxAutoModelForMultipleChoice"),c(rM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rM,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Rf,"class","relative group"),c(jt,"class","docstring"),c(oW,"href","/docs/transformers/pr_16058/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(rW,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(tW,"href","/docs/transformers/pr_16058/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(aW,"href","/docs/transformers/pr_16058/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(nW,"href","/docs/transformers/pr_16058/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(sW,"href","/docs/transformers/pr_16058/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(lW,"href","/docs/transformers/pr_16058/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(iW,"href","/docs/transformers/pr_16058/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Io,"class","docstring"),c(Or,"class","docstring"),c(fM,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(fM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fM,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c($f,"class","relative group"),c(Dt,"class","docstring"),c(dW,"href","/docs/transformers/pr_16058/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(jo,"class","docstring"),c(Xr,"class","docstring"),c(gM,"id","transformers.FlaxAutoModelForImageClassification"),c(gM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gM,"href","#transformers.FlaxAutoModelForImageClassification"),c(Df,"class","relative group"),c(Nt,"class","docstring"),c(cW,"href","/docs/transformers/pr_16058/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(fW,"href","/docs/transformers/pr_16058/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Do,"class","docstring"),c(Vr,"class","docstring"),c(_M,"id","transformers.FlaxAutoModelForVision2Seq"),c(_M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_M,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Gf,"class","relative group"),c(qt,"class","docstring"),c(mW,"href","/docs/transformers/pr_16058/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(No,"class","docstring"),c(zr,"class","docstring")},m(d,u){e(document.head,K),b(d,io,u),b(d,de,u),e(de,Ee),e(Ee,lo),g(fe,lo,null),e(de,Ce),e(de,zo),e(zo,Xi),b(d,Wf,u),b(d,ha,u),e(ha,Vi),e(ha,zi),e(zi,b4),e(ha,Qf),b(d,Be,u),b(d,co,u),e(co,Wi),e(co,Wn),e(Wn,v4),e(co,Qn),e(co,Hn),e(Hn,T4),e(co,Qi),e(co,Un),e(Un,F4),e(co,Hi),b(d,Hf,u),g(Va,d,u),b(d,fo,u),b(d,pe,u),e(pe,b9),e(pe,Ui),e(Ui,v9),e(pe,T9),b(d,Wo,u),b(d,za,u),e(za,F9),e(za,Uf),e(Uf,C9),e(za,aIe),b(d,qke,u),b(d,Ji,u),e(Ji,Jf),e(Jf,lH),g(C4,lH,null),e(Ji,nIe),e(Ji,iH),e(iH,sIe),b(d,Gke,u),b(d,Jn,u),e(Jn,lIe),e(Jn,dH),e(dH,iIe),e(Jn,dIe),e(Jn,cH),e(cH,cIe),e(Jn,fIe),b(d,Oke,u),g(M4,d,u),b(d,Xke,u),b(d,M9,u),e(M9,mIe),b(d,Vke,u),g(Yf,d,u),b(d,zke,u),b(d,Yi,u),e(Yi,Kf),e(Kf,fH),g(E4,fH,null),e(Yi,gIe),e(Yi,mH),e(mH,hIe),b(d,Wke,u),b(d,Qo,u),g(y4,Qo,null),e(Qo,pIe),e(Qo,w4),e(w4,_Ie),e(w4,E9),e(E9,uIe),e(w4,bIe),e(Qo,vIe),e(Qo,A4),e(A4,TIe),e(A4,gH),e(gH,FIe),e(A4,CIe),e(Qo,MIe),e(Qo,mo),g(L4,mo,null),e(mo,EIe),e(mo,hH),e(hH,yIe),e(mo,wIe),e(mo,Ki),e(Ki,AIe),e(Ki,pH),e(pH,LIe),e(Ki,BIe),e(Ki,_H),e(_H,xIe),e(Ki,kIe),e(mo,RIe),e(mo,v),e(v,Zf),e(Zf,uH),e(uH,SIe),e(Zf,PIe),e(Zf,y9),e(y9,$Ie),e(Zf,IIe),e(v,jIe),e(v,em),e(em,bH),e(bH,DIe),e(em,NIe),e(em,w9),e(w9,qIe),e(em,GIe),e(v,OIe),e(v,om),e(om,vH),e(vH,XIe),e(om,VIe),e(om,A9),e(A9,zIe),e(om,WIe),e(v,QIe),e(v,rm),e(rm,TH),e(TH,HIe),e(rm,UIe),e(rm,L9),e(L9,JIe),e(rm,YIe),e(v,KIe),e(v,tm),e(tm,FH),e(FH,ZIe),e(tm,eje),e(tm,B9),e(B9,oje),e(tm,rje),e(v,tje),e(v,am),e(am,CH),e(CH,aje),e(am,nje),e(am,x9),e(x9,sje),e(am,lje),e(v,ije),e(v,nm),e(nm,MH),e(MH,dje),e(nm,cje),e(nm,k9),e(k9,fje),e(nm,mje),e(v,gje),e(v,sm),e(sm,EH),e(EH,hje),e(sm,pje),e(sm,R9),e(R9,_je),e(sm,uje),e(v,bje),e(v,lm),e(lm,yH),e(yH,vje),e(lm,Tje),e(lm,S9),e(S9,Fje),e(lm,Cje),e(v,Mje),e(v,im),e(im,wH),e(wH,Eje),e(im,yje),e(im,P9),e(P9,wje),e(im,Aje),e(v,Lje),e(v,dm),e(dm,AH),e(AH,Bje),e(dm,xje),e(dm,$9),e($9,kje),e(dm,Rje),e(v,Sje),e(v,cm),e(cm,LH),e(LH,Pje),e(cm,$je),e(cm,I9),e(I9,Ije),e(cm,jje),e(v,Dje),e(v,fm),e(fm,BH),e(BH,Nje),e(fm,qje),e(fm,j9),e(j9,Gje),e(fm,Oje),e(v,Xje),e(v,mm),e(mm,xH),e(xH,Vje),e(mm,zje),e(mm,D9),e(D9,Wje),e(mm,Qje),e(v,Hje),e(v,gm),e(gm,kH),e(kH,Uje),e(gm,Jje),e(gm,N9),e(N9,Yje),e(gm,Kje),e(v,Zje),e(v,hm),e(hm,RH),e(RH,eDe),e(hm,oDe),e(hm,q9),e(q9,rDe),e(hm,tDe),e(v,aDe),e(v,pm),e(pm,SH),e(SH,nDe),e(pm,sDe),e(pm,G9),e(G9,lDe),e(pm,iDe),e(v,dDe),e(v,_m),e(_m,PH),e(PH,cDe),e(_m,fDe),e(_m,O9),e(O9,mDe),e(_m,gDe),e(v,hDe),e(v,um),e(um,$H),e($H,pDe),e(um,_De),e(um,X9),e(X9,uDe),e(um,bDe),e(v,vDe),e(v,bm),e(bm,IH),e(IH,TDe),e(bm,FDe),e(bm,V9),e(V9,CDe),e(bm,MDe),e(v,EDe),e(v,vm),e(vm,jH),e(jH,yDe),e(vm,wDe),e(vm,z9),e(z9,ADe),e(vm,LDe),e(v,BDe),e(v,Tm),e(Tm,DH),e(DH,xDe),e(Tm,kDe),e(Tm,W9),e(W9,RDe),e(Tm,SDe),e(v,PDe),e(v,Fm),e(Fm,NH),e(NH,$De),e(Fm,IDe),e(Fm,Q9),e(Q9,jDe),e(Fm,DDe),e(v,NDe),e(v,Cm),e(Cm,qH),e(qH,qDe),e(Cm,GDe),e(Cm,H9),e(H9,ODe),e(Cm,XDe),e(v,VDe),e(v,Mm),e(Mm,GH),e(GH,zDe),e(Mm,WDe),e(Mm,U9),e(U9,QDe),e(Mm,HDe),e(v,UDe),e(v,Em),e(Em,OH),e(OH,JDe),e(Em,YDe),e(Em,J9),e(J9,KDe),e(Em,ZDe),e(v,eNe),e(v,ym),e(ym,XH),e(XH,oNe),e(ym,rNe),e(ym,Y9),e(Y9,tNe),e(ym,aNe),e(v,nNe),e(v,wm),e(wm,VH),e(VH,sNe),e(wm,lNe),e(wm,K9),e(K9,iNe),e(wm,dNe),e(v,cNe),e(v,Am),e(Am,zH),e(zH,fNe),e(Am,mNe),e(Am,Z9),e(Z9,gNe),e(Am,hNe),e(v,pNe),e(v,Lm),e(Lm,WH),e(WH,_Ne),e(Lm,uNe),e(Lm,eB),e(eB,bNe),e(Lm,vNe),e(v,TNe),e(v,Bm),e(Bm,QH),e(QH,FNe),e(Bm,CNe),e(Bm,oB),e(oB,MNe),e(Bm,ENe),e(v,yNe),e(v,xm),e(xm,HH),e(HH,wNe),e(xm,ANe),e(xm,rB),e(rB,LNe),e(xm,BNe),e(v,xNe),e(v,km),e(km,UH),e(UH,kNe),e(km,RNe),e(km,tB),e(tB,SNe),e(km,PNe),e(v,$Ne),e(v,Rm),e(Rm,JH),e(JH,INe),e(Rm,jNe),e(Rm,aB),e(aB,DNe),e(Rm,NNe),e(v,qNe),e(v,Sm),e(Sm,YH),e(YH,GNe),e(Sm,ONe),e(Sm,nB),e(nB,XNe),e(Sm,VNe),e(v,zNe),e(v,Pm),e(Pm,KH),e(KH,WNe),e(Pm,QNe),e(Pm,sB),e(sB,HNe),e(Pm,UNe),e(v,JNe),e(v,$m),e($m,ZH),e(ZH,YNe),e($m,KNe),e($m,lB),e(lB,ZNe),e($m,eqe),e(v,oqe),e(v,Im),e(Im,eU),e(eU,rqe),e(Im,tqe),e(Im,iB),e(iB,aqe),e(Im,nqe),e(v,sqe),e(v,jm),e(jm,oU),e(oU,lqe),e(jm,iqe),e(jm,dB),e(dB,dqe),e(jm,cqe),e(v,fqe),e(v,Dm),e(Dm,rU),e(rU,mqe),e(Dm,gqe),e(Dm,cB),e(cB,hqe),e(Dm,pqe),e(v,_qe),e(v,Nm),e(Nm,tU),e(tU,uqe),e(Nm,bqe),e(Nm,fB),e(fB,vqe),e(Nm,Tqe),e(v,Fqe),e(v,qm),e(qm,aU),e(aU,Cqe),e(qm,Mqe),e(qm,mB),e(mB,Eqe),e(qm,yqe),e(v,wqe),e(v,Gm),e(Gm,nU),e(nU,Aqe),e(Gm,Lqe),e(Gm,gB),e(gB,Bqe),e(Gm,xqe),e(v,kqe),e(v,Om),e(Om,sU),e(sU,Rqe),e(Om,Sqe),e(Om,hB),e(hB,Pqe),e(Om,$qe),e(v,Iqe),e(v,Xm),e(Xm,lU),e(lU,jqe),e(Xm,Dqe),e(Xm,pB),e(pB,Nqe),e(Xm,qqe),e(v,Gqe),e(v,Vm),e(Vm,iU),e(iU,Oqe),e(Vm,Xqe),e(Vm,_B),e(_B,Vqe),e(Vm,zqe),e(v,Wqe),e(v,zm),e(zm,dU),e(dU,Qqe),e(zm,Hqe),e(zm,uB),e(uB,Uqe),e(zm,Jqe),e(v,Yqe),e(v,Wm),e(Wm,cU),e(cU,Kqe),e(Wm,Zqe),e(Wm,bB),e(bB,eGe),e(Wm,oGe),e(v,rGe),e(v,Qm),e(Qm,fU),e(fU,tGe),e(Qm,aGe),e(Qm,vB),e(vB,nGe),e(Qm,sGe),e(v,lGe),e(v,Hm),e(Hm,mU),e(mU,iGe),e(Hm,dGe),e(Hm,TB),e(TB,cGe),e(Hm,fGe),e(v,mGe),e(v,Um),e(Um,gU),e(gU,gGe),e(Um,hGe),e(Um,FB),e(FB,pGe),e(Um,_Ge),e(v,uGe),e(v,Jm),e(Jm,hU),e(hU,bGe),e(Jm,vGe),e(Jm,CB),e(CB,TGe),e(Jm,FGe),e(v,CGe),e(v,Ym),e(Ym,pU),e(pU,MGe),e(Ym,EGe),e(Ym,MB),e(MB,yGe),e(Ym,wGe),e(v,AGe),e(v,Km),e(Km,_U),e(_U,LGe),e(Km,BGe),e(Km,EB),e(EB,xGe),e(Km,kGe),e(v,RGe),e(v,Zm),e(Zm,uU),e(uU,SGe),e(Zm,PGe),e(Zm,yB),e(yB,$Ge),e(Zm,IGe),e(v,jGe),e(v,eg),e(eg,bU),e(bU,DGe),e(eg,NGe),e(eg,wB),e(wB,qGe),e(eg,GGe),e(v,OGe),e(v,og),e(og,vU),e(vU,XGe),e(og,VGe),e(og,AB),e(AB,zGe),e(og,WGe),e(v,QGe),e(v,rg),e(rg,TU),e(TU,HGe),e(rg,UGe),e(rg,LB),e(LB,JGe),e(rg,YGe),e(v,KGe),e(v,tg),e(tg,FU),e(FU,ZGe),e(tg,eOe),e(tg,BB),e(BB,oOe),e(tg,rOe),e(v,tOe),e(v,ag),e(ag,CU),e(CU,aOe),e(ag,nOe),e(ag,xB),e(xB,sOe),e(ag,lOe),e(v,iOe),e(v,ng),e(ng,MU),e(MU,dOe),e(ng,cOe),e(ng,kB),e(kB,fOe),e(ng,mOe),e(v,gOe),e(v,sg),e(sg,EU),e(EU,hOe),e(sg,pOe),e(sg,RB),e(RB,_Oe),e(sg,uOe),e(v,bOe),e(v,lg),e(lg,yU),e(yU,vOe),e(lg,TOe),e(lg,SB),e(SB,FOe),e(lg,COe),e(v,MOe),e(v,ig),e(ig,wU),e(wU,EOe),e(ig,yOe),e(ig,PB),e(PB,wOe),e(ig,AOe),e(v,LOe),e(v,dg),e(dg,AU),e(AU,BOe),e(dg,xOe),e(dg,$B),e($B,kOe),e(dg,ROe),e(v,SOe),e(v,cg),e(cg,LU),e(LU,POe),e(cg,$Oe),e(cg,IB),e(IB,IOe),e(cg,jOe),e(v,DOe),e(v,fg),e(fg,BU),e(BU,NOe),e(fg,qOe),e(fg,jB),e(jB,GOe),e(fg,OOe),e(v,XOe),e(v,mg),e(mg,xU),e(xU,VOe),e(mg,zOe),e(mg,DB),e(DB,WOe),e(mg,QOe),e(v,HOe),e(v,gg),e(gg,kU),e(kU,UOe),e(gg,JOe),e(gg,NB),e(NB,YOe),e(gg,KOe),e(v,ZOe),e(v,hg),e(hg,RU),e(RU,eXe),e(hg,oXe),e(hg,qB),e(qB,rXe),e(hg,tXe),e(v,aXe),e(v,pg),e(pg,SU),e(SU,nXe),e(pg,sXe),e(pg,GB),e(GB,lXe),e(pg,iXe),e(v,dXe),e(v,_g),e(_g,PU),e(PU,cXe),e(_g,fXe),e(_g,OB),e(OB,mXe),e(_g,gXe),e(v,hXe),e(v,ug),e(ug,$U),e($U,pXe),e(ug,_Xe),e(ug,XB),e(XB,uXe),e(ug,bXe),e(v,vXe),e(v,bg),e(bg,IU),e(IU,TXe),e(bg,FXe),e(bg,VB),e(VB,CXe),e(bg,MXe),e(v,EXe),e(v,vg),e(vg,jU),e(jU,yXe),e(vg,wXe),e(vg,zB),e(zB,AXe),e(vg,LXe),e(v,BXe),e(v,Tg),e(Tg,DU),e(DU,xXe),e(Tg,kXe),e(Tg,WB),e(WB,RXe),e(Tg,SXe),e(v,PXe),e(v,Fg),e(Fg,NU),e(NU,$Xe),e(Fg,IXe),e(Fg,QB),e(QB,jXe),e(Fg,DXe),e(v,NXe),e(v,Cg),e(Cg,qU),e(qU,qXe),e(Cg,GXe),e(Cg,HB),e(HB,OXe),e(Cg,XXe),e(v,VXe),e(v,Mg),e(Mg,GU),e(GU,zXe),e(Mg,WXe),e(Mg,UB),e(UB,QXe),e(Mg,HXe),e(v,UXe),e(v,Eg),e(Eg,OU),e(OU,JXe),e(Eg,YXe),e(Eg,JB),e(JB,KXe),e(Eg,ZXe),e(v,eVe),e(v,yg),e(yg,XU),e(XU,oVe),e(yg,rVe),e(yg,YB),e(YB,tVe),e(yg,aVe),e(v,nVe),e(v,wg),e(wg,VU),e(VU,sVe),e(wg,lVe),e(wg,KB),e(KB,iVe),e(wg,dVe),e(v,cVe),e(v,Ag),e(Ag,zU),e(zU,fVe),e(Ag,mVe),e(Ag,ZB),e(ZB,gVe),e(Ag,hVe),e(v,pVe),e(v,Lg),e(Lg,WU),e(WU,_Ve),e(Lg,uVe),e(Lg,ex),e(ex,bVe),e(Lg,vVe),e(v,TVe),e(v,Bg),e(Bg,QU),e(QU,FVe),e(Bg,CVe),e(Bg,ox),e(ox,MVe),e(Bg,EVe),e(v,yVe),e(v,xg),e(xg,HU),e(HU,wVe),e(xg,AVe),e(xg,rx),e(rx,LVe),e(xg,BVe),e(v,xVe),e(v,kg),e(kg,UU),e(UU,kVe),e(kg,RVe),e(kg,tx),e(tx,SVe),e(kg,PVe),e(v,$Ve),e(v,Rg),e(Rg,JU),e(JU,IVe),e(Rg,jVe),e(Rg,ax),e(ax,DVe),e(Rg,NVe),e(v,qVe),e(v,Sg),e(Sg,YU),e(YU,GVe),e(Sg,OVe),e(Sg,nx),e(nx,XVe),e(Sg,VVe),e(v,zVe),e(v,Pg),e(Pg,KU),e(KU,WVe),e(Pg,QVe),e(Pg,sx),e(sx,HVe),e(Pg,UVe),e(v,JVe),e(v,$g),e($g,ZU),e(ZU,YVe),e($g,KVe),e($g,lx),e(lx,ZVe),e($g,eze),e(v,oze),e(v,Ig),e(Ig,eJ),e(eJ,rze),e(Ig,tze),e(Ig,ix),e(ix,aze),e(Ig,nze),e(v,sze),e(v,jg),e(jg,oJ),e(oJ,lze),e(jg,ize),e(jg,dx),e(dx,dze),e(jg,cze),e(v,fze),e(v,Dg),e(Dg,rJ),e(rJ,mze),e(Dg,gze),e(Dg,cx),e(cx,hze),e(Dg,pze),e(v,_ze),e(v,Ng),e(Ng,tJ),e(tJ,uze),e(Ng,bze),e(Ng,fx),e(fx,vze),e(Ng,Tze),e(v,Fze),e(v,qg),e(qg,aJ),e(aJ,Cze),e(qg,Mze),e(qg,mx),e(mx,Eze),e(qg,yze),e(v,wze),e(v,Gg),e(Gg,nJ),e(nJ,Aze),e(Gg,Lze),e(Gg,gx),e(gx,Bze),e(Gg,xze),e(v,kze),e(v,Og),e(Og,sJ),e(sJ,Rze),e(Og,Sze),e(Og,hx),e(hx,Pze),e(Og,$ze),e(mo,Ize),e(mo,lJ),e(lJ,jze),e(mo,Dze),g(B4,mo,null),e(Qo,Nze),e(Qo,Xg),g(x4,Xg,null),e(Xg,qze),e(Xg,iJ),e(iJ,Gze),b(d,Qke,u),b(d,Zi,u),e(Zi,Vg),e(Vg,dJ),g(k4,dJ,null),e(Zi,Oze),e(Zi,cJ),e(cJ,Xze),b(d,Hke,u),b(d,Ho,u),g(R4,Ho,null),e(Ho,Vze),e(Ho,S4),e(S4,zze),e(S4,px),e(px,Wze),e(S4,Qze),e(Ho,Hze),e(Ho,P4),e(P4,Uze),e(P4,fJ),e(fJ,Jze),e(P4,Yze),e(Ho,Kze),e(Ho,go),g($4,go,null),e(go,Zze),e(go,mJ),e(mJ,eWe),e(go,oWe),e(go,Wa),e(Wa,rWe),e(Wa,gJ),e(gJ,tWe),e(Wa,aWe),e(Wa,hJ),e(hJ,nWe),e(Wa,sWe),e(Wa,pJ),e(pJ,lWe),e(Wa,iWe),e(go,dWe),e(go,E),e(E,Yn),e(Yn,_J),e(_J,cWe),e(Yn,fWe),e(Yn,_x),e(_x,mWe),e(Yn,gWe),e(Yn,ux),e(ux,hWe),e(Yn,pWe),e(E,_We),e(E,Kn),e(Kn,uJ),e(uJ,uWe),e(Kn,bWe),e(Kn,bx),e(bx,vWe),e(Kn,TWe),e(Kn,vx),e(vx,FWe),e(Kn,CWe),e(E,MWe),e(E,Zn),e(Zn,bJ),e(bJ,EWe),e(Zn,yWe),e(Zn,Tx),e(Tx,wWe),e(Zn,AWe),e(Zn,Fx),e(Fx,LWe),e(Zn,BWe),e(E,xWe),e(E,zg),e(zg,vJ),e(vJ,kWe),e(zg,RWe),e(zg,Cx),e(Cx,SWe),e(zg,PWe),e(E,$We),e(E,es),e(es,TJ),e(TJ,IWe),e(es,jWe),e(es,Mx),e(Mx,DWe),e(es,NWe),e(es,Ex),e(Ex,qWe),e(es,GWe),e(E,OWe),e(E,Wg),e(Wg,FJ),e(FJ,XWe),e(Wg,VWe),e(Wg,yx),e(yx,zWe),e(Wg,WWe),e(E,QWe),e(E,Qg),e(Qg,CJ),e(CJ,HWe),e(Qg,UWe),e(Qg,wx),e(wx,JWe),e(Qg,YWe),e(E,KWe),e(E,Hg),e(Hg,MJ),e(MJ,ZWe),e(Hg,eQe),e(Hg,Ax),e(Ax,oQe),e(Hg,rQe),e(E,tQe),e(E,os),e(os,EJ),e(EJ,aQe),e(os,nQe),e(os,Lx),e(Lx,sQe),e(os,lQe),e(os,Bx),e(Bx,iQe),e(os,dQe),e(E,cQe),e(E,rs),e(rs,yJ),e(yJ,fQe),e(rs,mQe),e(rs,xx),e(xx,gQe),e(rs,hQe),e(rs,kx),e(kx,pQe),e(rs,_Qe),e(E,uQe),e(E,ts),e(ts,wJ),e(wJ,bQe),e(ts,vQe),e(ts,Rx),e(Rx,TQe),e(ts,FQe),e(ts,Sx),e(Sx,CQe),e(ts,MQe),e(E,EQe),e(E,Ug),e(Ug,AJ),e(AJ,yQe),e(Ug,wQe),e(Ug,Px),e(Px,AQe),e(Ug,LQe),e(E,BQe),e(E,Jg),e(Jg,LJ),e(LJ,xQe),e(Jg,kQe),e(Jg,$x),e($x,RQe),e(Jg,SQe),e(E,PQe),e(E,as),e(as,BJ),e(BJ,$Qe),e(as,IQe),e(as,Ix),e(Ix,jQe),e(as,DQe),e(as,jx),e(jx,NQe),e(as,qQe),e(E,GQe),e(E,Yg),e(Yg,xJ),e(xJ,OQe),e(Yg,XQe),e(Yg,Dx),e(Dx,VQe),e(Yg,zQe),e(E,WQe),e(E,ns),e(ns,kJ),e(kJ,QQe),e(ns,HQe),e(ns,Nx),e(Nx,UQe),e(ns,JQe),e(ns,qx),e(qx,YQe),e(ns,KQe),e(E,ZQe),e(E,ss),e(ss,RJ),e(RJ,eHe),e(ss,oHe),e(ss,Gx),e(Gx,rHe),e(ss,tHe),e(ss,Ox),e(Ox,aHe),e(ss,nHe),e(E,sHe),e(E,ls),e(ls,SJ),e(SJ,lHe),e(ls,iHe),e(ls,Xx),e(Xx,dHe),e(ls,cHe),e(ls,PJ),e(PJ,fHe),e(ls,mHe),e(E,gHe),e(E,Kg),e(Kg,$J),e($J,hHe),e(Kg,pHe),e(Kg,Vx),e(Vx,_He),e(Kg,uHe),e(E,bHe),e(E,is),e(is,IJ),e(IJ,vHe),e(is,THe),e(is,zx),e(zx,FHe),e(is,CHe),e(is,Wx),e(Wx,MHe),e(is,EHe),e(E,yHe),e(E,Zg),e(Zg,jJ),e(jJ,wHe),e(Zg,AHe),e(Zg,Qx),e(Qx,LHe),e(Zg,BHe),e(E,xHe),e(E,ds),e(ds,DJ),e(DJ,kHe),e(ds,RHe),e(ds,Hx),e(Hx,SHe),e(ds,PHe),e(ds,Ux),e(Ux,$He),e(ds,IHe),e(E,jHe),e(E,cs),e(cs,NJ),e(NJ,DHe),e(cs,NHe),e(cs,Jx),e(Jx,qHe),e(cs,GHe),e(cs,Yx),e(Yx,OHe),e(cs,XHe),e(E,VHe),e(E,fs),e(fs,qJ),e(qJ,zHe),e(fs,WHe),e(fs,Kx),e(Kx,QHe),e(fs,HHe),e(fs,Zx),e(Zx,UHe),e(fs,JHe),e(E,YHe),e(E,eh),e(eh,GJ),e(GJ,KHe),e(eh,ZHe),e(eh,ek),e(ek,eUe),e(eh,oUe),e(E,rUe),e(E,ms),e(ms,OJ),e(OJ,tUe),e(ms,aUe),e(ms,ok),e(ok,nUe),e(ms,sUe),e(ms,rk),e(rk,lUe),e(ms,iUe),e(E,dUe),e(E,oh),e(oh,XJ),e(XJ,cUe),e(oh,fUe),e(oh,tk),e(tk,mUe),e(oh,gUe),e(E,hUe),e(E,gs),e(gs,VJ),e(VJ,pUe),e(gs,_Ue),e(gs,ak),e(ak,uUe),e(gs,bUe),e(gs,nk),e(nk,vUe),e(gs,TUe),e(E,FUe),e(E,hs),e(hs,zJ),e(zJ,CUe),e(hs,MUe),e(hs,sk),e(sk,EUe),e(hs,yUe),e(hs,lk),e(lk,wUe),e(hs,AUe),e(E,LUe),e(E,ps),e(ps,WJ),e(WJ,BUe),e(ps,xUe),e(ps,ik),e(ik,kUe),e(ps,RUe),e(ps,dk),e(dk,SUe),e(ps,PUe),e(E,$Ue),e(E,_s),e(_s,QJ),e(QJ,IUe),e(_s,jUe),e(_s,ck),e(ck,DUe),e(_s,NUe),e(_s,fk),e(fk,qUe),e(_s,GUe),e(E,OUe),e(E,rh),e(rh,HJ),e(HJ,XUe),e(rh,VUe),e(rh,mk),e(mk,zUe),e(rh,WUe),e(E,QUe),e(E,us),e(us,UJ),e(UJ,HUe),e(us,UUe),e(us,gk),e(gk,JUe),e(us,YUe),e(us,hk),e(hk,KUe),e(us,ZUe),e(E,eJe),e(E,bs),e(bs,JJ),e(JJ,oJe),e(bs,rJe),e(bs,pk),e(pk,tJe),e(bs,aJe),e(bs,_k),e(_k,nJe),e(bs,sJe),e(E,lJe),e(E,vs),e(vs,YJ),e(YJ,iJe),e(vs,dJe),e(vs,uk),e(uk,cJe),e(vs,fJe),e(vs,bk),e(bk,mJe),e(vs,gJe),e(E,hJe),e(E,Ts),e(Ts,KJ),e(KJ,pJe),e(Ts,_Je),e(Ts,vk),e(vk,uJe),e(Ts,bJe),e(Ts,Tk),e(Tk,vJe),e(Ts,TJe),e(E,FJe),e(E,Fs),e(Fs,ZJ),e(ZJ,CJe),e(Fs,MJe),e(Fs,Fk),e(Fk,EJe),e(Fs,yJe),e(Fs,Ck),e(Ck,wJe),e(Fs,AJe),e(E,LJe),e(E,Cs),e(Cs,eY),e(eY,BJe),e(Cs,xJe),e(Cs,Mk),e(Mk,kJe),e(Cs,RJe),e(Cs,Ek),e(Ek,SJe),e(Cs,PJe),e(E,$Je),e(E,th),e(th,oY),e(oY,IJe),e(th,jJe),e(th,yk),e(yk,DJe),e(th,NJe),e(E,qJe),e(E,Ms),e(Ms,rY),e(rY,GJe),e(Ms,OJe),e(Ms,wk),e(wk,XJe),e(Ms,VJe),e(Ms,Ak),e(Ak,zJe),e(Ms,WJe),e(E,QJe),e(E,ah),e(ah,tY),e(tY,HJe),e(ah,UJe),e(ah,Lk),e(Lk,JJe),e(ah,YJe),e(E,KJe),e(E,nh),e(nh,aY),e(aY,ZJe),e(nh,eYe),e(nh,Bk),e(Bk,oYe),e(nh,rYe),e(E,tYe),e(E,Es),e(Es,nY),e(nY,aYe),e(Es,nYe),e(Es,xk),e(xk,sYe),e(Es,lYe),e(Es,kk),e(kk,iYe),e(Es,dYe),e(E,cYe),e(E,ys),e(ys,sY),e(sY,fYe),e(ys,mYe),e(ys,Rk),e(Rk,gYe),e(ys,hYe),e(ys,Sk),e(Sk,pYe),e(ys,_Ye),e(E,uYe),e(E,sh),e(sh,lY),e(lY,bYe),e(sh,vYe),e(sh,Pk),e(Pk,TYe),e(sh,FYe),e(E,CYe),e(E,ws),e(ws,iY),e(iY,MYe),e(ws,EYe),e(ws,$k),e($k,yYe),e(ws,wYe),e(ws,Ik),e(Ik,AYe),e(ws,LYe),e(E,BYe),e(E,As),e(As,dY),e(dY,xYe),e(As,kYe),e(As,jk),e(jk,RYe),e(As,SYe),e(As,Dk),e(Dk,PYe),e(As,$Ye),e(E,IYe),e(E,Ls),e(Ls,cY),e(cY,jYe),e(Ls,DYe),e(Ls,Nk),e(Nk,NYe),e(Ls,qYe),e(Ls,qk),e(qk,GYe),e(Ls,OYe),e(E,XYe),e(E,Bs),e(Bs,fY),e(fY,VYe),e(Bs,zYe),e(Bs,Gk),e(Gk,WYe),e(Bs,QYe),e(Bs,Ok),e(Ok,HYe),e(Bs,UYe),e(E,JYe),e(E,xs),e(xs,mY),e(mY,YYe),e(xs,KYe),e(xs,Xk),e(Xk,ZYe),e(xs,eKe),e(xs,Vk),e(Vk,oKe),e(xs,rKe),e(E,tKe),e(E,lh),e(lh,gY),e(gY,aKe),e(lh,nKe),e(lh,zk),e(zk,sKe),e(lh,lKe),e(E,iKe),e(E,ih),e(ih,hY),e(hY,dKe),e(ih,cKe),e(ih,Wk),e(Wk,fKe),e(ih,mKe),e(E,gKe),e(E,dh),e(dh,pY),e(pY,hKe),e(dh,pKe),e(dh,Qk),e(Qk,_Ke),e(dh,uKe),e(E,bKe),e(E,ch),e(ch,_Y),e(_Y,vKe),e(ch,TKe),e(ch,Hk),e(Hk,FKe),e(ch,CKe),e(E,MKe),e(E,ks),e(ks,uY),e(uY,EKe),e(ks,yKe),e(ks,Uk),e(Uk,wKe),e(ks,AKe),e(ks,Jk),e(Jk,LKe),e(ks,BKe),e(E,xKe),e(E,fh),e(fh,bY),e(bY,kKe),e(fh,RKe),e(fh,Yk),e(Yk,SKe),e(fh,PKe),e(E,$Ke),e(E,Rs),e(Rs,vY),e(vY,IKe),e(Rs,jKe),e(Rs,Kk),e(Kk,DKe),e(Rs,NKe),e(Rs,Zk),e(Zk,qKe),e(Rs,GKe),e(E,OKe),e(E,Ss),e(Ss,TY),e(TY,XKe),e(Ss,VKe),e(Ss,eR),e(eR,zKe),e(Ss,WKe),e(Ss,oR),e(oR,QKe),e(Ss,HKe),e(E,UKe),e(E,Ps),e(Ps,FY),e(FY,JKe),e(Ps,YKe),e(Ps,rR),e(rR,KKe),e(Ps,ZKe),e(Ps,tR),e(tR,eZe),e(Ps,oZe),e(E,rZe),e(E,$s),e($s,CY),e(CY,tZe),e($s,aZe),e($s,aR),e(aR,nZe),e($s,sZe),e($s,nR),e(nR,lZe),e($s,iZe),e(E,dZe),e(E,Is),e(Is,MY),e(MY,cZe),e(Is,fZe),e(Is,sR),e(sR,mZe),e(Is,gZe),e(Is,lR),e(lR,hZe),e(Is,pZe),e(E,_Ze),e(E,js),e(js,EY),e(EY,uZe),e(js,bZe),e(js,iR),e(iR,vZe),e(js,TZe),e(js,dR),e(dR,FZe),e(js,CZe),e(E,MZe),e(E,mh),e(mh,yY),e(yY,EZe),e(mh,yZe),e(mh,cR),e(cR,wZe),e(mh,AZe),e(E,LZe),e(E,gh),e(gh,wY),e(wY,BZe),e(gh,xZe),e(gh,fR),e(fR,kZe),e(gh,RZe),e(E,SZe),e(E,Ds),e(Ds,AY),e(AY,PZe),e(Ds,$Ze),e(Ds,mR),e(mR,IZe),e(Ds,jZe),e(Ds,gR),e(gR,DZe),e(Ds,NZe),e(E,qZe),e(E,Ns),e(Ns,LY),e(LY,GZe),e(Ns,OZe),e(Ns,hR),e(hR,XZe),e(Ns,VZe),e(Ns,pR),e(pR,zZe),e(Ns,WZe),e(E,QZe),e(E,qs),e(qs,BY),e(BY,HZe),e(qs,UZe),e(qs,_R),e(_R,JZe),e(qs,YZe),e(qs,uR),e(uR,KZe),e(qs,ZZe),e(E,eeo),e(E,hh),e(hh,xY),e(xY,oeo),e(hh,reo),e(hh,bR),e(bR,teo),e(hh,aeo),e(E,neo),e(E,ph),e(ph,kY),e(kY,seo),e(ph,leo),e(ph,vR),e(vR,ieo),e(ph,deo),e(E,ceo),e(E,_h),e(_h,RY),e(RY,feo),e(_h,meo),e(_h,TR),e(TR,geo),e(_h,heo),e(E,peo),e(E,uh),e(uh,SY),e(SY,_eo),e(uh,ueo),e(uh,FR),e(FR,beo),e(uh,veo),e(E,Teo),e(E,Gs),e(Gs,PY),e(PY,Feo),e(Gs,Ceo),e(Gs,CR),e(CR,Meo),e(Gs,Eeo),e(Gs,MR),e(MR,yeo),e(Gs,weo),e(E,Aeo),e(E,bh),e(bh,$Y),e($Y,Leo),e(bh,Beo),e(bh,ER),e(ER,xeo),e(bh,keo),e(E,Reo),e(E,vh),e(vh,IY),e(IY,Seo),e(vh,Peo),e(vh,yR),e(yR,$eo),e(vh,Ieo),e(E,jeo),e(E,Os),e(Os,jY),e(jY,Deo),e(Os,Neo),e(Os,wR),e(wR,qeo),e(Os,Geo),e(Os,AR),e(AR,Oeo),e(Os,Xeo),e(E,Veo),e(E,Xs),e(Xs,DY),e(DY,zeo),e(Xs,Weo),e(Xs,LR),e(LR,Qeo),e(Xs,Heo),e(Xs,BR),e(BR,Ueo),e(Xs,Jeo),e(go,Yeo),e(go,NY),e(NY,Keo),e(go,Zeo),g(I4,go,null),e(Ho,eoo),e(Ho,Th),g(j4,Th,null),e(Th,ooo),e(Th,qY),e(qY,roo),b(d,Uke,u),b(d,ed,u),e(ed,Fh),e(Fh,GY),g(D4,GY,null),e(ed,too),e(ed,OY),e(OY,aoo),b(d,Jke,u),b(d,Uo,u),g(N4,Uo,null),e(Uo,noo),e(Uo,q4),e(q4,soo),e(q4,xR),e(xR,loo),e(q4,ioo),e(Uo,doo),e(Uo,G4),e(G4,coo),e(G4,XY),e(XY,foo),e(G4,moo),e(Uo,goo),e(Uo,$e),g(O4,$e,null),e($e,hoo),e($e,VY),e(VY,poo),e($e,_oo),e($e,Qa),e(Qa,uoo),e(Qa,zY),e(zY,boo),e(Qa,voo),e(Qa,WY),e(WY,Too),e(Qa,Foo),e(Qa,QY),e(QY,Coo),e(Qa,Moo),e($e,Eoo),e($e,re),e(re,Ch),e(Ch,HY),e(HY,yoo),e(Ch,woo),e(Ch,kR),e(kR,Aoo),e(Ch,Loo),e(re,Boo),e(re,Mh),e(Mh,UY),e(UY,xoo),e(Mh,koo),e(Mh,RR),e(RR,Roo),e(Mh,Soo),e(re,Poo),e(re,Eh),e(Eh,JY),e(JY,$oo),e(Eh,Ioo),e(Eh,SR),e(SR,joo),e(Eh,Doo),e(re,Noo),e(re,yh),e(yh,YY),e(YY,qoo),e(yh,Goo),e(yh,PR),e(PR,Ooo),e(yh,Xoo),e(re,Voo),e(re,wh),e(wh,KY),e(KY,zoo),e(wh,Woo),e(wh,$R),e($R,Qoo),e(wh,Hoo),e(re,Uoo),e(re,Ah),e(Ah,ZY),e(ZY,Joo),e(Ah,Yoo),e(Ah,IR),e(IR,Koo),e(Ah,Zoo),e(re,ero),e(re,Lh),e(Lh,eK),e(eK,oro),e(Lh,rro),e(Lh,jR),e(jR,tro),e(Lh,aro),e(re,nro),e(re,Bh),e(Bh,oK),e(oK,sro),e(Bh,lro),e(Bh,DR),e(DR,iro),e(Bh,dro),e(re,cro),e(re,xh),e(xh,rK),e(rK,fro),e(xh,mro),e(xh,NR),e(NR,gro),e(xh,hro),e(re,pro),e(re,kh),e(kh,tK),e(tK,_ro),e(kh,uro),e(kh,qR),e(qR,bro),e(kh,vro),e(re,Tro),e(re,Rh),e(Rh,aK),e(aK,Fro),e(Rh,Cro),e(Rh,GR),e(GR,Mro),e(Rh,Ero),e(re,yro),e(re,Sh),e(Sh,nK),e(nK,wro),e(Sh,Aro),e(Sh,OR),e(OR,Lro),e(Sh,Bro),e(re,xro),e(re,Ph),e(Ph,sK),e(sK,kro),e(Ph,Rro),e(Ph,XR),e(XR,Sro),e(Ph,Pro),e(re,$ro),e(re,$h),e($h,lK),e(lK,Iro),e($h,jro),e($h,VR),e(VR,Dro),e($h,Nro),e(re,qro),e(re,Ih),e(Ih,iK),e(iK,Gro),e(Ih,Oro),e(Ih,zR),e(zR,Xro),e(Ih,Vro),e(re,zro),e(re,jh),e(jh,dK),e(dK,Wro),e(jh,Qro),e(jh,WR),e(WR,Hro),e(jh,Uro),e(re,Jro),e(re,Dh),e(Dh,cK),e(cK,Yro),e(Dh,Kro),e(Dh,QR),e(QR,Zro),e(Dh,eto),e(re,oto),e(re,Nh),e(Nh,fK),e(fK,rto),e(Nh,tto),e(Nh,HR),e(HR,ato),e(Nh,nto),e($e,sto),g(qh,$e,null),e($e,lto),e($e,mK),e(mK,ito),e($e,dto),g(X4,$e,null),e(Uo,cto),e(Uo,Gh),g(V4,Gh,null),e(Gh,fto),e(Gh,gK),e(gK,mto),b(d,Yke,u),b(d,od,u),e(od,Oh),e(Oh,hK),g(z4,hK,null),e(od,gto),e(od,pK),e(pK,hto),b(d,Kke,u),b(d,Jo,u),g(W4,Jo,null),e(Jo,pto),e(Jo,Q4),e(Q4,_to),e(Q4,UR),e(UR,uto),e(Q4,bto),e(Jo,vto),e(Jo,H4),e(H4,Tto),e(H4,_K),e(_K,Fto),e(H4,Cto),e(Jo,Mto),e(Jo,Ie),g(U4,Ie,null),e(Ie,Eto),e(Ie,uK),e(uK,yto),e(Ie,wto),e(Ie,rd),e(rd,Ato),e(rd,bK),e(bK,Lto),e(rd,Bto),e(rd,vK),e(vK,xto),e(rd,kto),e(Ie,Rto),e(Ie,xe),e(xe,Xh),e(Xh,TK),e(TK,Sto),e(Xh,Pto),e(Xh,JR),e(JR,$to),e(Xh,Ito),e(xe,jto),e(xe,Vh),e(Vh,FK),e(FK,Dto),e(Vh,Nto),e(Vh,YR),e(YR,qto),e(Vh,Gto),e(xe,Oto),e(xe,zh),e(zh,CK),e(CK,Xto),e(zh,Vto),e(zh,KR),e(KR,zto),e(zh,Wto),e(xe,Qto),e(xe,Wh),e(Wh,MK),e(MK,Hto),e(Wh,Uto),e(Wh,ZR),e(ZR,Jto),e(Wh,Yto),e(xe,Kto),e(xe,Qh),e(Qh,EK),e(EK,Zto),e(Qh,eao),e(Qh,eS),e(eS,oao),e(Qh,rao),e(xe,tao),e(xe,Hh),e(Hh,yK),e(yK,aao),e(Hh,nao),e(Hh,oS),e(oS,sao),e(Hh,lao),e(xe,iao),e(xe,Uh),e(Uh,wK),e(wK,dao),e(Uh,cao),e(Uh,rS),e(rS,fao),e(Uh,mao),e(xe,gao),e(xe,Jh),e(Jh,AK),e(AK,hao),e(Jh,pao),e(Jh,tS),e(tS,_ao),e(Jh,uao),e(Ie,bao),g(Yh,Ie,null),e(Ie,vao),e(Ie,LK),e(LK,Tao),e(Ie,Fao),g(J4,Ie,null),e(Jo,Cao),e(Jo,Kh),g(Y4,Kh,null),e(Kh,Mao),e(Kh,BK),e(BK,Eao),b(d,Zke,u),b(d,td,u),e(td,Zh),e(Zh,xK),g(K4,xK,null),e(td,yao),e(td,kK),e(kK,wao),b(d,eRe,u),b(d,Yo,u),g(Z4,Yo,null),e(Yo,Aao),e(Yo,ad),e(ad,Lao),e(ad,RK),e(RK,Bao),e(ad,xao),e(ad,SK),e(SK,kao),e(ad,Rao),e(Yo,Sao),e(Yo,eE),e(eE,Pao),e(eE,PK),e(PK,$ao),e(eE,Iao),e(Yo,jao),e(Yo,Wr),g(oE,Wr,null),e(Wr,Dao),e(Wr,$K),e($K,Nao),e(Wr,qao),e(Wr,nd),e(nd,Gao),e(nd,IK),e(IK,Oao),e(nd,Xao),e(nd,jK),e(jK,Vao),e(nd,zao),e(Wr,Wao),e(Wr,DK),e(DK,Qao),e(Wr,Hao),g(rE,Wr,null),e(Yo,Uao),e(Yo,je),g(tE,je,null),e(je,Jao),e(je,NK),e(NK,Yao),e(je,Kao),e(je,Ha),e(Ha,Zao),e(Ha,qK),e(qK,eno),e(Ha,ono),e(Ha,GK),e(GK,rno),e(Ha,tno),e(Ha,OK),e(OK,ano),e(Ha,nno),e(je,sno),e(je,F),e(F,ep),e(ep,XK),e(XK,lno),e(ep,ino),e(ep,aS),e(aS,dno),e(ep,cno),e(F,fno),e(F,op),e(op,VK),e(VK,mno),e(op,gno),e(op,nS),e(nS,hno),e(op,pno),e(F,_no),e(F,rp),e(rp,zK),e(zK,uno),e(rp,bno),e(rp,sS),e(sS,vno),e(rp,Tno),e(F,Fno),e(F,tp),e(tp,WK),e(WK,Cno),e(tp,Mno),e(tp,lS),e(lS,Eno),e(tp,yno),e(F,wno),e(F,ap),e(ap,QK),e(QK,Ano),e(ap,Lno),e(ap,iS),e(iS,Bno),e(ap,xno),e(F,kno),e(F,np),e(np,HK),e(HK,Rno),e(np,Sno),e(np,dS),e(dS,Pno),e(np,$no),e(F,Ino),e(F,sp),e(sp,UK),e(UK,jno),e(sp,Dno),e(sp,cS),e(cS,Nno),e(sp,qno),e(F,Gno),e(F,lp),e(lp,JK),e(JK,Ono),e(lp,Xno),e(lp,fS),e(fS,Vno),e(lp,zno),e(F,Wno),e(F,ip),e(ip,YK),e(YK,Qno),e(ip,Hno),e(ip,mS),e(mS,Uno),e(ip,Jno),e(F,Yno),e(F,dp),e(dp,KK),e(KK,Kno),e(dp,Zno),e(dp,gS),e(gS,eso),e(dp,oso),e(F,rso),e(F,cp),e(cp,ZK),e(ZK,tso),e(cp,aso),e(cp,hS),e(hS,nso),e(cp,sso),e(F,lso),e(F,fp),e(fp,eZ),e(eZ,iso),e(fp,dso),e(fp,pS),e(pS,cso),e(fp,fso),e(F,mso),e(F,mp),e(mp,oZ),e(oZ,gso),e(mp,hso),e(mp,_S),e(_S,pso),e(mp,_so),e(F,uso),e(F,gp),e(gp,rZ),e(rZ,bso),e(gp,vso),e(gp,uS),e(uS,Tso),e(gp,Fso),e(F,Cso),e(F,hp),e(hp,tZ),e(tZ,Mso),e(hp,Eso),e(hp,bS),e(bS,yso),e(hp,wso),e(F,Aso),e(F,pp),e(pp,aZ),e(aZ,Lso),e(pp,Bso),e(pp,vS),e(vS,xso),e(pp,kso),e(F,Rso),e(F,_p),e(_p,nZ),e(nZ,Sso),e(_p,Pso),e(_p,TS),e(TS,$so),e(_p,Iso),e(F,jso),e(F,up),e(up,sZ),e(sZ,Dso),e(up,Nso),e(up,FS),e(FS,qso),e(up,Gso),e(F,Oso),e(F,bp),e(bp,lZ),e(lZ,Xso),e(bp,Vso),e(bp,CS),e(CS,zso),e(bp,Wso),e(F,Qso),e(F,vp),e(vp,iZ),e(iZ,Hso),e(vp,Uso),e(vp,MS),e(MS,Jso),e(vp,Yso),e(F,Kso),e(F,Tp),e(Tp,dZ),e(dZ,Zso),e(Tp,elo),e(Tp,ES),e(ES,olo),e(Tp,rlo),e(F,tlo),e(F,Fp),e(Fp,cZ),e(cZ,alo),e(Fp,nlo),e(Fp,yS),e(yS,slo),e(Fp,llo),e(F,ilo),e(F,Cp),e(Cp,fZ),e(fZ,dlo),e(Cp,clo),e(Cp,wS),e(wS,flo),e(Cp,mlo),e(F,glo),e(F,Mp),e(Mp,mZ),e(mZ,hlo),e(Mp,plo),e(Mp,AS),e(AS,_lo),e(Mp,ulo),e(F,blo),e(F,Ep),e(Ep,gZ),e(gZ,vlo),e(Ep,Tlo),e(Ep,LS),e(LS,Flo),e(Ep,Clo),e(F,Mlo),e(F,yp),e(yp,hZ),e(hZ,Elo),e(yp,ylo),e(yp,BS),e(BS,wlo),e(yp,Alo),e(F,Llo),e(F,wp),e(wp,pZ),e(pZ,Blo),e(wp,xlo),e(wp,xS),e(xS,klo),e(wp,Rlo),e(F,Slo),e(F,Ap),e(Ap,_Z),e(_Z,Plo),e(Ap,$lo),e(Ap,kS),e(kS,Ilo),e(Ap,jlo),e(F,Dlo),e(F,Vs),e(Vs,uZ),e(uZ,Nlo),e(Vs,qlo),e(Vs,RS),e(RS,Glo),e(Vs,Olo),e(Vs,SS),e(SS,Xlo),e(Vs,Vlo),e(F,zlo),e(F,Lp),e(Lp,bZ),e(bZ,Wlo),e(Lp,Qlo),e(Lp,PS),e(PS,Hlo),e(Lp,Ulo),e(F,Jlo),e(F,Bp),e(Bp,vZ),e(vZ,Ylo),e(Bp,Klo),e(Bp,$S),e($S,Zlo),e(Bp,eio),e(F,oio),e(F,xp),e(xp,TZ),e(TZ,rio),e(xp,tio),e(xp,IS),e(IS,aio),e(xp,nio),e(F,sio),e(F,kp),e(kp,FZ),e(FZ,lio),e(kp,iio),e(kp,jS),e(jS,dio),e(kp,cio),e(F,fio),e(F,Rp),e(Rp,CZ),e(CZ,mio),e(Rp,gio),e(Rp,DS),e(DS,hio),e(Rp,pio),e(F,_io),e(F,Sp),e(Sp,MZ),e(MZ,uio),e(Sp,bio),e(Sp,NS),e(NS,vio),e(Sp,Tio),e(F,Fio),e(F,Pp),e(Pp,EZ),e(EZ,Cio),e(Pp,Mio),e(Pp,qS),e(qS,Eio),e(Pp,yio),e(F,wio),e(F,$p),e($p,yZ),e(yZ,Aio),e($p,Lio),e($p,GS),e(GS,Bio),e($p,xio),e(F,kio),e(F,Ip),e(Ip,wZ),e(wZ,Rio),e(Ip,Sio),e(Ip,OS),e(OS,Pio),e(Ip,$io),e(F,Iio),e(F,jp),e(jp,AZ),e(AZ,jio),e(jp,Dio),e(jp,XS),e(XS,Nio),e(jp,qio),e(F,Gio),e(F,Dp),e(Dp,LZ),e(LZ,Oio),e(Dp,Xio),e(Dp,VS),e(VS,Vio),e(Dp,zio),e(F,Wio),e(F,Np),e(Np,BZ),e(BZ,Qio),e(Np,Hio),e(Np,zS),e(zS,Uio),e(Np,Jio),e(F,Yio),e(F,qp),e(qp,xZ),e(xZ,Kio),e(qp,Zio),e(qp,WS),e(WS,edo),e(qp,odo),e(F,rdo),e(F,Gp),e(Gp,kZ),e(kZ,tdo),e(Gp,ado),e(Gp,QS),e(QS,ndo),e(Gp,sdo),e(F,ldo),e(F,Op),e(Op,RZ),e(RZ,ido),e(Op,ddo),e(Op,HS),e(HS,cdo),e(Op,fdo),e(F,mdo),e(F,Xp),e(Xp,SZ),e(SZ,gdo),e(Xp,hdo),e(Xp,US),e(US,pdo),e(Xp,_do),e(F,udo),e(F,Vp),e(Vp,PZ),e(PZ,bdo),e(Vp,vdo),e(Vp,JS),e(JS,Tdo),e(Vp,Fdo),e(F,Cdo),e(F,zp),e(zp,$Z),e($Z,Mdo),e(zp,Edo),e(zp,YS),e(YS,ydo),e(zp,wdo),e(F,Ado),e(F,Wp),e(Wp,IZ),e(IZ,Ldo),e(Wp,Bdo),e(Wp,KS),e(KS,xdo),e(Wp,kdo),e(F,Rdo),e(F,Qp),e(Qp,jZ),e(jZ,Sdo),e(Qp,Pdo),e(Qp,ZS),e(ZS,$do),e(Qp,Ido),e(F,jdo),e(F,Hp),e(Hp,DZ),e(DZ,Ddo),e(Hp,Ndo),e(Hp,eP),e(eP,qdo),e(Hp,Gdo),e(F,Odo),e(F,Up),e(Up,NZ),e(NZ,Xdo),e(Up,Vdo),e(Up,oP),e(oP,zdo),e(Up,Wdo),e(F,Qdo),e(F,Jp),e(Jp,qZ),e(qZ,Hdo),e(Jp,Udo),e(Jp,rP),e(rP,Jdo),e(Jp,Ydo),e(F,Kdo),e(F,Yp),e(Yp,GZ),e(GZ,Zdo),e(Yp,eco),e(Yp,tP),e(tP,oco),e(Yp,rco),e(F,tco),e(F,Kp),e(Kp,OZ),e(OZ,aco),e(Kp,nco),e(Kp,aP),e(aP,sco),e(Kp,lco),e(F,ico),e(F,Zp),e(Zp,XZ),e(XZ,dco),e(Zp,cco),e(Zp,nP),e(nP,fco),e(Zp,mco),e(F,gco),e(F,e_),e(e_,VZ),e(VZ,hco),e(e_,pco),e(e_,sP),e(sP,_co),e(e_,uco),e(F,bco),e(F,o_),e(o_,zZ),e(zZ,vco),e(o_,Tco),e(o_,lP),e(lP,Fco),e(o_,Cco),e(F,Mco),e(F,r_),e(r_,WZ),e(WZ,Eco),e(r_,yco),e(r_,iP),e(iP,wco),e(r_,Aco),e(F,Lco),e(F,t_),e(t_,QZ),e(QZ,Bco),e(t_,xco),e(t_,dP),e(dP,kco),e(t_,Rco),e(F,Sco),e(F,a_),e(a_,HZ),e(HZ,Pco),e(a_,$co),e(a_,cP),e(cP,Ico),e(a_,jco),e(F,Dco),e(F,n_),e(n_,UZ),e(UZ,Nco),e(n_,qco),e(n_,fP),e(fP,Gco),e(n_,Oco),e(F,Xco),e(F,s_),e(s_,JZ),e(JZ,Vco),e(s_,zco),e(s_,mP),e(mP,Wco),e(s_,Qco),e(F,Hco),e(F,l_),e(l_,YZ),e(YZ,Uco),e(l_,Jco),e(l_,gP),e(gP,Yco),e(l_,Kco),e(F,Zco),e(F,i_),e(i_,KZ),e(KZ,efo),e(i_,ofo),e(i_,hP),e(hP,rfo),e(i_,tfo),e(F,afo),e(F,d_),e(d_,ZZ),e(ZZ,nfo),e(d_,sfo),e(d_,pP),e(pP,lfo),e(d_,ifo),e(F,dfo),e(F,c_),e(c_,eee),e(eee,cfo),e(c_,ffo),e(c_,_P),e(_P,mfo),e(c_,gfo),e(F,hfo),e(F,f_),e(f_,oee),e(oee,pfo),e(f_,_fo),e(f_,uP),e(uP,ufo),e(f_,bfo),e(F,vfo),e(F,m_),e(m_,ree),e(ree,Tfo),e(m_,Ffo),e(m_,bP),e(bP,Cfo),e(m_,Mfo),e(F,Efo),e(F,g_),e(g_,tee),e(tee,yfo),e(g_,wfo),e(g_,vP),e(vP,Afo),e(g_,Lfo),e(F,Bfo),e(F,h_),e(h_,aee),e(aee,xfo),e(h_,kfo),e(h_,TP),e(TP,Rfo),e(h_,Sfo),e(F,Pfo),e(F,p_),e(p_,nee),e(nee,$fo),e(p_,Ifo),e(p_,FP),e(FP,jfo),e(p_,Dfo),e(F,Nfo),e(F,__),e(__,see),e(see,qfo),e(__,Gfo),e(__,CP),e(CP,Ofo),e(__,Xfo),e(F,Vfo),e(F,u_),e(u_,lee),e(lee,zfo),e(u_,Wfo),e(u_,MP),e(MP,Qfo),e(u_,Hfo),e(F,Ufo),e(F,b_),e(b_,iee),e(iee,Jfo),e(b_,Yfo),e(b_,EP),e(EP,Kfo),e(b_,Zfo),e(F,emo),e(F,v_),e(v_,dee),e(dee,omo),e(v_,rmo),e(v_,yP),e(yP,tmo),e(v_,amo),e(F,nmo),e(F,T_),e(T_,cee),e(cee,smo),e(T_,lmo),e(T_,wP),e(wP,imo),e(T_,dmo),e(F,cmo),e(F,F_),e(F_,fee),e(fee,fmo),e(F_,mmo),e(F_,AP),e(AP,gmo),e(F_,hmo),e(F,pmo),e(F,C_),e(C_,mee),e(mee,_mo),e(C_,umo),e(C_,LP),e(LP,bmo),e(C_,vmo),e(F,Tmo),e(F,M_),e(M_,gee),e(gee,Fmo),e(M_,Cmo),e(M_,BP),e(BP,Mmo),e(M_,Emo),e(F,ymo),e(F,E_),e(E_,hee),e(hee,wmo),e(E_,Amo),e(E_,xP),e(xP,Lmo),e(E_,Bmo),e(F,xmo),e(F,y_),e(y_,pee),e(pee,kmo),e(y_,Rmo),e(y_,kP),e(kP,Smo),e(y_,Pmo),e(F,$mo),e(F,w_),e(w_,_ee),e(_ee,Imo),e(w_,jmo),e(w_,RP),e(RP,Dmo),e(w_,Nmo),e(F,qmo),e(F,A_),e(A_,uee),e(uee,Gmo),e(A_,Omo),e(A_,SP),e(SP,Xmo),e(A_,Vmo),e(F,zmo),e(F,L_),e(L_,bee),e(bee,Wmo),e(L_,Qmo),e(L_,PP),e(PP,Hmo),e(L_,Umo),e(F,Jmo),e(F,B_),e(B_,vee),e(vee,Ymo),e(B_,Kmo),e(B_,$P),e($P,Zmo),e(B_,ego),e(F,ogo),e(F,x_),e(x_,Tee),e(Tee,rgo),e(x_,tgo),e(x_,IP),e(IP,ago),e(x_,ngo),e(F,sgo),e(F,k_),e(k_,Fee),e(Fee,lgo),e(k_,igo),e(k_,jP),e(jP,dgo),e(k_,cgo),e(F,fgo),e(F,R_),e(R_,Cee),e(Cee,mgo),e(R_,ggo),e(R_,DP),e(DP,hgo),e(R_,pgo),e(F,_go),e(F,S_),e(S_,Mee),e(Mee,ugo),e(S_,bgo),e(S_,NP),e(NP,vgo),e(S_,Tgo),e(F,Fgo),e(F,P_),e(P_,Eee),e(Eee,Cgo),e(P_,Mgo),e(P_,qP),e(qP,Ego),e(P_,ygo),e(F,wgo),e(F,$_),e($_,yee),e(yee,Ago),e($_,Lgo),e($_,GP),e(GP,Bgo),e($_,xgo),e(je,kgo),e(je,I_),e(I_,Rgo),e(I_,wee),e(wee,Sgo),e(I_,Pgo),e(I_,Aee),e(Aee,$go),e(je,Igo),e(je,Lee),e(Lee,jgo),e(je,Dgo),g(aE,je,null),b(d,oRe,u),b(d,sd,u),e(sd,j_),e(j_,Bee),g(nE,Bee,null),e(sd,Ngo),e(sd,xee),e(xee,qgo),b(d,rRe,u),b(d,Ko,u),g(sE,Ko,null),e(Ko,Ggo),e(Ko,ld),e(ld,Ogo),e(ld,kee),e(kee,Xgo),e(ld,Vgo),e(ld,Ree),e(Ree,zgo),e(ld,Wgo),e(Ko,Qgo),e(Ko,lE),e(lE,Hgo),e(lE,See),e(See,Ugo),e(lE,Jgo),e(Ko,Ygo),e(Ko,Qr),g(iE,Qr,null),e(Qr,Kgo),e(Qr,Pee),e(Pee,Zgo),e(Qr,eho),e(Qr,id),e(id,oho),e(id,$ee),e($ee,rho),e(id,tho),e(id,Iee),e(Iee,aho),e(id,nho),e(Qr,sho),e(Qr,jee),e(jee,lho),e(Qr,iho),g(dE,Qr,null),e(Ko,dho),e(Ko,De),g(cE,De,null),e(De,cho),e(De,Dee),e(Dee,fho),e(De,mho),e(De,Ua),e(Ua,gho),e(Ua,Nee),e(Nee,hho),e(Ua,pho),e(Ua,qee),e(qee,_ho),e(Ua,uho),e(Ua,Gee),e(Gee,bho),e(Ua,vho),e(De,Tho),e(De,k),e(k,D_),e(D_,Oee),e(Oee,Fho),e(D_,Cho),e(D_,OP),e(OP,Mho),e(D_,Eho),e(k,yho),e(k,N_),e(N_,Xee),e(Xee,who),e(N_,Aho),e(N_,XP),e(XP,Lho),e(N_,Bho),e(k,xho),e(k,q_),e(q_,Vee),e(Vee,kho),e(q_,Rho),e(q_,VP),e(VP,Sho),e(q_,Pho),e(k,$ho),e(k,G_),e(G_,zee),e(zee,Iho),e(G_,jho),e(G_,zP),e(zP,Dho),e(G_,Nho),e(k,qho),e(k,O_),e(O_,Wee),e(Wee,Gho),e(O_,Oho),e(O_,WP),e(WP,Xho),e(O_,Vho),e(k,zho),e(k,X_),e(X_,Qee),e(Qee,Who),e(X_,Qho),e(X_,QP),e(QP,Hho),e(X_,Uho),e(k,Jho),e(k,V_),e(V_,Hee),e(Hee,Yho),e(V_,Kho),e(V_,HP),e(HP,Zho),e(V_,epo),e(k,opo),e(k,z_),e(z_,Uee),e(Uee,rpo),e(z_,tpo),e(z_,UP),e(UP,apo),e(z_,npo),e(k,spo),e(k,W_),e(W_,Jee),e(Jee,lpo),e(W_,ipo),e(W_,JP),e(JP,dpo),e(W_,cpo),e(k,fpo),e(k,Q_),e(Q_,Yee),e(Yee,mpo),e(Q_,gpo),e(Q_,YP),e(YP,hpo),e(Q_,ppo),e(k,_po),e(k,H_),e(H_,Kee),e(Kee,upo),e(H_,bpo),e(H_,KP),e(KP,vpo),e(H_,Tpo),e(k,Fpo),e(k,U_),e(U_,Zee),e(Zee,Cpo),e(U_,Mpo),e(U_,ZP),e(ZP,Epo),e(U_,ypo),e(k,wpo),e(k,J_),e(J_,eoe),e(eoe,Apo),e(J_,Lpo),e(J_,e$),e(e$,Bpo),e(J_,xpo),e(k,kpo),e(k,Y_),e(Y_,ooe),e(ooe,Rpo),e(Y_,Spo),e(Y_,o$),e(o$,Ppo),e(Y_,$po),e(k,Ipo),e(k,K_),e(K_,roe),e(roe,jpo),e(K_,Dpo),e(K_,r$),e(r$,Npo),e(K_,qpo),e(k,Gpo),e(k,Z_),e(Z_,toe),e(toe,Opo),e(Z_,Xpo),e(Z_,t$),e(t$,Vpo),e(Z_,zpo),e(k,Wpo),e(k,eu),e(eu,aoe),e(aoe,Qpo),e(eu,Hpo),e(eu,a$),e(a$,Upo),e(eu,Jpo),e(k,Ypo),e(k,ou),e(ou,noe),e(noe,Kpo),e(ou,Zpo),e(ou,n$),e(n$,e_o),e(ou,o_o),e(k,r_o),e(k,ru),e(ru,soe),e(soe,t_o),e(ru,a_o),e(ru,s$),e(s$,n_o),e(ru,s_o),e(k,l_o),e(k,tu),e(tu,loe),e(loe,i_o),e(tu,d_o),e(tu,l$),e(l$,c_o),e(tu,f_o),e(k,m_o),e(k,au),e(au,ioe),e(ioe,g_o),e(au,h_o),e(au,i$),e(i$,p_o),e(au,__o),e(k,u_o),e(k,nu),e(nu,doe),e(doe,b_o),e(nu,v_o),e(nu,d$),e(d$,T_o),e(nu,F_o),e(k,C_o),e(k,su),e(su,coe),e(coe,M_o),e(su,E_o),e(su,c$),e(c$,y_o),e(su,w_o),e(k,A_o),e(k,lu),e(lu,foe),e(foe,L_o),e(lu,B_o),e(lu,f$),e(f$,x_o),e(lu,k_o),e(k,R_o),e(k,iu),e(iu,moe),e(moe,S_o),e(iu,P_o),e(iu,m$),e(m$,$_o),e(iu,I_o),e(k,j_o),e(k,du),e(du,goe),e(goe,D_o),e(du,N_o),e(du,g$),e(g$,q_o),e(du,G_o),e(k,O_o),e(k,cu),e(cu,hoe),e(hoe,X_o),e(cu,V_o),e(cu,h$),e(h$,z_o),e(cu,W_o),e(k,Q_o),e(k,fu),e(fu,poe),e(poe,H_o),e(fu,U_o),e(fu,p$),e(p$,J_o),e(fu,Y_o),e(k,K_o),e(k,mu),e(mu,_oe),e(_oe,Z_o),e(mu,euo),e(mu,_$),e(_$,ouo),e(mu,ruo),e(k,tuo),e(k,gu),e(gu,uoe),e(uoe,auo),e(gu,nuo),e(gu,u$),e(u$,suo),e(gu,luo),e(k,iuo),e(k,hu),e(hu,boe),e(boe,duo),e(hu,cuo),e(hu,b$),e(b$,fuo),e(hu,muo),e(k,guo),e(k,pu),e(pu,voe),e(voe,huo),e(pu,puo),e(pu,v$),e(v$,_uo),e(pu,uuo),e(k,buo),e(k,_u),e(_u,Toe),e(Toe,vuo),e(_u,Tuo),e(_u,T$),e(T$,Fuo),e(_u,Cuo),e(k,Muo),e(k,uu),e(uu,Foe),e(Foe,Euo),e(uu,yuo),e(uu,F$),e(F$,wuo),e(uu,Auo),e(k,Luo),e(k,bu),e(bu,Coe),e(Coe,Buo),e(bu,xuo),e(bu,C$),e(C$,kuo),e(bu,Ruo),e(k,Suo),e(k,vu),e(vu,Moe),e(Moe,Puo),e(vu,$uo),e(vu,M$),e(M$,Iuo),e(vu,juo),e(k,Duo),e(k,Tu),e(Tu,Eoe),e(Eoe,Nuo),e(Tu,quo),e(Tu,E$),e(E$,Guo),e(Tu,Ouo),e(k,Xuo),e(k,Fu),e(Fu,yoe),e(yoe,Vuo),e(Fu,zuo),e(Fu,y$),e(y$,Wuo),e(Fu,Quo),e(k,Huo),e(k,Cu),e(Cu,woe),e(woe,Uuo),e(Cu,Juo),e(Cu,w$),e(w$,Yuo),e(Cu,Kuo),e(De,Zuo),e(De,Mu),e(Mu,e1o),e(Mu,Aoe),e(Aoe,o1o),e(Mu,r1o),e(Mu,Loe),e(Loe,t1o),e(De,a1o),e(De,Boe),e(Boe,n1o),e(De,s1o),g(fE,De,null),b(d,tRe,u),b(d,dd,u),e(dd,Eu),e(Eu,xoe),g(mE,xoe,null),e(dd,l1o),e(dd,koe),e(koe,i1o),b(d,aRe,u),b(d,Zo,u),g(gE,Zo,null),e(Zo,d1o),e(Zo,cd),e(cd,c1o),e(cd,Roe),e(Roe,f1o),e(cd,m1o),e(cd,Soe),e(Soe,g1o),e(cd,h1o),e(Zo,p1o),e(Zo,hE),e(hE,_1o),e(hE,Poe),e(Poe,u1o),e(hE,b1o),e(Zo,v1o),e(Zo,Hr),g(pE,Hr,null),e(Hr,T1o),e(Hr,$oe),e($oe,F1o),e(Hr,C1o),e(Hr,fd),e(fd,M1o),e(fd,Ioe),e(Ioe,E1o),e(fd,y1o),e(fd,joe),e(joe,w1o),e(fd,A1o),e(Hr,L1o),e(Hr,Doe),e(Doe,B1o),e(Hr,x1o),g(_E,Hr,null),e(Zo,k1o),e(Zo,Ne),g(uE,Ne,null),e(Ne,R1o),e(Ne,Noe),e(Noe,S1o),e(Ne,P1o),e(Ne,Ja),e(Ja,$1o),e(Ja,qoe),e(qoe,I1o),e(Ja,j1o),e(Ja,Goe),e(Goe,D1o),e(Ja,N1o),e(Ja,Ooe),e(Ooe,q1o),e(Ja,G1o),e(Ne,O1o),e(Ne,$),e($,yu),e(yu,Xoe),e(Xoe,X1o),e(yu,V1o),e(yu,A$),e(A$,z1o),e(yu,W1o),e($,Q1o),e($,wu),e(wu,Voe),e(Voe,H1o),e(wu,U1o),e(wu,L$),e(L$,J1o),e(wu,Y1o),e($,K1o),e($,Au),e(Au,zoe),e(zoe,Z1o),e(Au,ebo),e(Au,B$),e(B$,obo),e(Au,rbo),e($,tbo),e($,Lu),e(Lu,Woe),e(Woe,abo),e(Lu,nbo),e(Lu,x$),e(x$,sbo),e(Lu,lbo),e($,ibo),e($,Bu),e(Bu,Qoe),e(Qoe,dbo),e(Bu,cbo),e(Bu,k$),e(k$,fbo),e(Bu,mbo),e($,gbo),e($,xu),e(xu,Hoe),e(Hoe,hbo),e(xu,pbo),e(xu,R$),e(R$,_bo),e(xu,ubo),e($,bbo),e($,ku),e(ku,Uoe),e(Uoe,vbo),e(ku,Tbo),e(ku,S$),e(S$,Fbo),e(ku,Cbo),e($,Mbo),e($,Ru),e(Ru,Joe),e(Joe,Ebo),e(Ru,ybo),e(Ru,P$),e(P$,wbo),e(Ru,Abo),e($,Lbo),e($,Su),e(Su,Yoe),e(Yoe,Bbo),e(Su,xbo),e(Su,$$),e($$,kbo),e(Su,Rbo),e($,Sbo),e($,Pu),e(Pu,Koe),e(Koe,Pbo),e(Pu,$bo),e(Pu,I$),e(I$,Ibo),e(Pu,jbo),e($,Dbo),e($,$u),e($u,Zoe),e(Zoe,Nbo),e($u,qbo),e($u,j$),e(j$,Gbo),e($u,Obo),e($,Xbo),e($,Iu),e(Iu,ere),e(ere,Vbo),e(Iu,zbo),e(Iu,D$),e(D$,Wbo),e(Iu,Qbo),e($,Hbo),e($,ju),e(ju,ore),e(ore,Ubo),e(ju,Jbo),e(ju,N$),e(N$,Ybo),e(ju,Kbo),e($,Zbo),e($,Du),e(Du,rre),e(rre,e5o),e(Du,o5o),e(Du,q$),e(q$,r5o),e(Du,t5o),e($,a5o),e($,Nu),e(Nu,tre),e(tre,n5o),e(Nu,s5o),e(Nu,G$),e(G$,l5o),e(Nu,i5o),e($,d5o),e($,qu),e(qu,are),e(are,c5o),e(qu,f5o),e(qu,O$),e(O$,m5o),e(qu,g5o),e($,h5o),e($,Gu),e(Gu,nre),e(nre,p5o),e(Gu,_5o),e(Gu,X$),e(X$,u5o),e(Gu,b5o),e($,v5o),e($,Ou),e(Ou,sre),e(sre,T5o),e(Ou,F5o),e(Ou,V$),e(V$,C5o),e(Ou,M5o),e($,E5o),e($,Xu),e(Xu,lre),e(lre,y5o),e(Xu,w5o),e(Xu,z$),e(z$,A5o),e(Xu,L5o),e($,B5o),e($,Vu),e(Vu,ire),e(ire,x5o),e(Vu,k5o),e(Vu,W$),e(W$,R5o),e(Vu,S5o),e($,P5o),e($,zu),e(zu,dre),e(dre,$5o),e(zu,I5o),e(zu,Q$),e(Q$,j5o),e(zu,D5o),e($,N5o),e($,Wu),e(Wu,cre),e(cre,q5o),e(Wu,G5o),e(Wu,H$),e(H$,O5o),e(Wu,X5o),e($,V5o),e($,Qu),e(Qu,fre),e(fre,z5o),e(Qu,W5o),e(Qu,U$),e(U$,Q5o),e(Qu,H5o),e($,U5o),e($,Hu),e(Hu,mre),e(mre,J5o),e(Hu,Y5o),e(Hu,J$),e(J$,K5o),e(Hu,Z5o),e($,e2o),e($,Uu),e(Uu,gre),e(gre,o2o),e(Uu,r2o),e(Uu,Y$),e(Y$,t2o),e(Uu,a2o),e($,n2o),e($,Ju),e(Ju,hre),e(hre,s2o),e(Ju,l2o),e(Ju,K$),e(K$,i2o),e(Ju,d2o),e($,c2o),e($,Yu),e(Yu,pre),e(pre,f2o),e(Yu,m2o),e(Yu,Z$),e(Z$,g2o),e(Yu,h2o),e($,p2o),e($,Ku),e(Ku,_re),e(_re,_2o),e(Ku,u2o),e(Ku,eI),e(eI,b2o),e(Ku,v2o),e($,T2o),e($,Zu),e(Zu,ure),e(ure,F2o),e(Zu,C2o),e(Zu,oI),e(oI,M2o),e(Zu,E2o),e($,y2o),e($,e1),e(e1,bre),e(bre,w2o),e(e1,A2o),e(e1,rI),e(rI,L2o),e(e1,B2o),e($,x2o),e($,o1),e(o1,vre),e(vre,k2o),e(o1,R2o),e(o1,tI),e(tI,S2o),e(o1,P2o),e($,$2o),e($,r1),e(r1,Tre),e(Tre,I2o),e(r1,j2o),e(r1,aI),e(aI,D2o),e(r1,N2o),e($,q2o),e($,t1),e(t1,Fre),e(Fre,G2o),e(t1,O2o),e(t1,nI),e(nI,X2o),e(t1,V2o),e($,z2o),e($,a1),e(a1,Cre),e(Cre,W2o),e(a1,Q2o),e(a1,sI),e(sI,H2o),e(a1,U2o),e($,J2o),e($,n1),e(n1,Mre),e(Mre,Y2o),e(n1,K2o),e(n1,lI),e(lI,Z2o),e(n1,evo),e(Ne,ovo),e(Ne,s1),e(s1,rvo),e(s1,Ere),e(Ere,tvo),e(s1,avo),e(s1,yre),e(yre,nvo),e(Ne,svo),e(Ne,wre),e(wre,lvo),e(Ne,ivo),g(bE,Ne,null),b(d,nRe,u),b(d,md,u),e(md,l1),e(l1,Are),g(vE,Are,null),e(md,dvo),e(md,Lre),e(Lre,cvo),b(d,sRe,u),b(d,er,u),g(TE,er,null),e(er,fvo),e(er,gd),e(gd,mvo),e(gd,Bre),e(Bre,gvo),e(gd,hvo),e(gd,xre),e(xre,pvo),e(gd,_vo),e(er,uvo),e(er,FE),e(FE,bvo),e(FE,kre),e(kre,vvo),e(FE,Tvo),e(er,Fvo),e(er,Ur),g(CE,Ur,null),e(Ur,Cvo),e(Ur,Rre),e(Rre,Mvo),e(Ur,Evo),e(Ur,hd),e(hd,yvo),e(hd,Sre),e(Sre,wvo),e(hd,Avo),e(hd,Pre),e(Pre,Lvo),e(hd,Bvo),e(Ur,xvo),e(Ur,$re),e($re,kvo),e(Ur,Rvo),g(ME,Ur,null),e(er,Svo),e(er,qe),g(EE,qe,null),e(qe,Pvo),e(qe,Ire),e(Ire,$vo),e(qe,Ivo),e(qe,Ya),e(Ya,jvo),e(Ya,jre),e(jre,Dvo),e(Ya,Nvo),e(Ya,Dre),e(Dre,qvo),e(Ya,Gvo),e(Ya,Nre),e(Nre,Ovo),e(Ya,Xvo),e(qe,Vvo),e(qe,I),e(I,i1),e(i1,qre),e(qre,zvo),e(i1,Wvo),e(i1,iI),e(iI,Qvo),e(i1,Hvo),e(I,Uvo),e(I,d1),e(d1,Gre),e(Gre,Jvo),e(d1,Yvo),e(d1,dI),e(dI,Kvo),e(d1,Zvo),e(I,e6o),e(I,c1),e(c1,Ore),e(Ore,o6o),e(c1,r6o),e(c1,cI),e(cI,t6o),e(c1,a6o),e(I,n6o),e(I,f1),e(f1,Xre),e(Xre,s6o),e(f1,l6o),e(f1,fI),e(fI,i6o),e(f1,d6o),e(I,c6o),e(I,m1),e(m1,Vre),e(Vre,f6o),e(m1,m6o),e(m1,mI),e(mI,g6o),e(m1,h6o),e(I,p6o),e(I,g1),e(g1,zre),e(zre,_6o),e(g1,u6o),e(g1,gI),e(gI,b6o),e(g1,v6o),e(I,T6o),e(I,h1),e(h1,Wre),e(Wre,F6o),e(h1,C6o),e(h1,hI),e(hI,M6o),e(h1,E6o),e(I,y6o),e(I,p1),e(p1,Qre),e(Qre,w6o),e(p1,A6o),e(p1,pI),e(pI,L6o),e(p1,B6o),e(I,x6o),e(I,_1),e(_1,Hre),e(Hre,k6o),e(_1,R6o),e(_1,_I),e(_I,S6o),e(_1,P6o),e(I,$6o),e(I,u1),e(u1,Ure),e(Ure,I6o),e(u1,j6o),e(u1,uI),e(uI,D6o),e(u1,N6o),e(I,q6o),e(I,b1),e(b1,Jre),e(Jre,G6o),e(b1,O6o),e(b1,bI),e(bI,X6o),e(b1,V6o),e(I,z6o),e(I,v1),e(v1,Yre),e(Yre,W6o),e(v1,Q6o),e(v1,vI),e(vI,H6o),e(v1,U6o),e(I,J6o),e(I,T1),e(T1,Kre),e(Kre,Y6o),e(T1,K6o),e(T1,TI),e(TI,Z6o),e(T1,e0o),e(I,o0o),e(I,F1),e(F1,Zre),e(Zre,r0o),e(F1,t0o),e(F1,FI),e(FI,a0o),e(F1,n0o),e(I,s0o),e(I,C1),e(C1,ete),e(ete,l0o),e(C1,i0o),e(C1,CI),e(CI,d0o),e(C1,c0o),e(I,f0o),e(I,M1),e(M1,ote),e(ote,m0o),e(M1,g0o),e(M1,MI),e(MI,h0o),e(M1,p0o),e(I,_0o),e(I,E1),e(E1,rte),e(rte,u0o),e(E1,b0o),e(E1,EI),e(EI,v0o),e(E1,T0o),e(I,F0o),e(I,y1),e(y1,tte),e(tte,C0o),e(y1,M0o),e(y1,yI),e(yI,E0o),e(y1,y0o),e(I,w0o),e(I,w1),e(w1,ate),e(ate,A0o),e(w1,L0o),e(w1,wI),e(wI,B0o),e(w1,x0o),e(I,k0o),e(I,A1),e(A1,nte),e(nte,R0o),e(A1,S0o),e(A1,AI),e(AI,P0o),e(A1,$0o),e(I,I0o),e(I,L1),e(L1,ste),e(ste,j0o),e(L1,D0o),e(L1,LI),e(LI,N0o),e(L1,q0o),e(I,G0o),e(I,B1),e(B1,lte),e(lte,O0o),e(B1,X0o),e(B1,BI),e(BI,V0o),e(B1,z0o),e(I,W0o),e(I,x1),e(x1,ite),e(ite,Q0o),e(x1,H0o),e(x1,xI),e(xI,U0o),e(x1,J0o),e(I,Y0o),e(I,k1),e(k1,dte),e(dte,K0o),e(k1,Z0o),e(k1,kI),e(kI,eTo),e(k1,oTo),e(I,rTo),e(I,R1),e(R1,cte),e(cte,tTo),e(R1,aTo),e(R1,RI),e(RI,nTo),e(R1,sTo),e(I,lTo),e(I,S1),e(S1,fte),e(fte,iTo),e(S1,dTo),e(S1,SI),e(SI,cTo),e(S1,fTo),e(I,mTo),e(I,P1),e(P1,mte),e(mte,gTo),e(P1,hTo),e(P1,PI),e(PI,pTo),e(P1,_To),e(I,uTo),e(I,$1),e($1,gte),e(gte,bTo),e($1,vTo),e($1,$I),e($I,TTo),e($1,FTo),e(I,CTo),e(I,I1),e(I1,hte),e(hte,MTo),e(I1,ETo),e(I1,II),e(II,yTo),e(I1,wTo),e(I,ATo),e(I,j1),e(j1,pte),e(pte,LTo),e(j1,BTo),e(j1,jI),e(jI,xTo),e(j1,kTo),e(I,RTo),e(I,D1),e(D1,_te),e(_te,STo),e(D1,PTo),e(D1,ute),e(ute,$To),e(D1,ITo),e(I,jTo),e(I,N1),e(N1,bte),e(bte,DTo),e(N1,NTo),e(N1,DI),e(DI,qTo),e(N1,GTo),e(I,OTo),e(I,q1),e(q1,vte),e(vte,XTo),e(q1,VTo),e(q1,NI),e(NI,zTo),e(q1,WTo),e(I,QTo),e(I,G1),e(G1,Tte),e(Tte,HTo),e(G1,UTo),e(G1,qI),e(qI,JTo),e(G1,YTo),e(I,KTo),e(I,O1),e(O1,Fte),e(Fte,ZTo),e(O1,e8o),e(O1,GI),e(GI,o8o),e(O1,r8o),e(qe,t8o),e(qe,X1),e(X1,a8o),e(X1,Cte),e(Cte,n8o),e(X1,s8o),e(X1,Mte),e(Mte,l8o),e(qe,i8o),e(qe,Ete),e(Ete,d8o),e(qe,c8o),g(yE,qe,null),b(d,lRe,u),b(d,pd,u),e(pd,V1),e(V1,yte),g(wE,yte,null),e(pd,f8o),e(pd,wte),e(wte,m8o),b(d,iRe,u),b(d,or,u),g(AE,or,null),e(or,g8o),e(or,_d),e(_d,h8o),e(_d,Ate),e(Ate,p8o),e(_d,_8o),e(_d,Lte),e(Lte,u8o),e(_d,b8o),e(or,v8o),e(or,LE),e(LE,T8o),e(LE,Bte),e(Bte,F8o),e(LE,C8o),e(or,M8o),e(or,Jr),g(BE,Jr,null),e(Jr,E8o),e(Jr,xte),e(xte,y8o),e(Jr,w8o),e(Jr,ud),e(ud,A8o),e(ud,kte),e(kte,L8o),e(ud,B8o),e(ud,Rte),e(Rte,x8o),e(ud,k8o),e(Jr,R8o),e(Jr,Ste),e(Ste,S8o),e(Jr,P8o),g(xE,Jr,null),e(or,$8o),e(or,Ge),g(kE,Ge,null),e(Ge,I8o),e(Ge,Pte),e(Pte,j8o),e(Ge,D8o),e(Ge,Ka),e(Ka,N8o),e(Ka,$te),e($te,q8o),e(Ka,G8o),e(Ka,Ite),e(Ite,O8o),e(Ka,X8o),e(Ka,jte),e(jte,V8o),e(Ka,z8o),e(Ge,W8o),e(Ge,se),e(se,z1),e(z1,Dte),e(Dte,Q8o),e(z1,H8o),e(z1,OI),e(OI,U8o),e(z1,J8o),e(se,Y8o),e(se,W1),e(W1,Nte),e(Nte,K8o),e(W1,Z8o),e(W1,XI),e(XI,eFo),e(W1,oFo),e(se,rFo),e(se,Q1),e(Q1,qte),e(qte,tFo),e(Q1,aFo),e(Q1,VI),e(VI,nFo),e(Q1,sFo),e(se,lFo),e(se,H1),e(H1,Gte),e(Gte,iFo),e(H1,dFo),e(H1,zI),e(zI,cFo),e(H1,fFo),e(se,mFo),e(se,U1),e(U1,Ote),e(Ote,gFo),e(U1,hFo),e(U1,WI),e(WI,pFo),e(U1,_Fo),e(se,uFo),e(se,J1),e(J1,Xte),e(Xte,bFo),e(J1,vFo),e(J1,QI),e(QI,TFo),e(J1,FFo),e(se,CFo),e(se,Y1),e(Y1,Vte),e(Vte,MFo),e(Y1,EFo),e(Y1,HI),e(HI,yFo),e(Y1,wFo),e(se,AFo),e(se,K1),e(K1,zte),e(zte,LFo),e(K1,BFo),e(K1,UI),e(UI,xFo),e(K1,kFo),e(se,RFo),e(se,Z1),e(Z1,Wte),e(Wte,SFo),e(Z1,PFo),e(Z1,JI),e(JI,$Fo),e(Z1,IFo),e(se,jFo),e(se,eb),e(eb,Qte),e(Qte,DFo),e(eb,NFo),e(eb,YI),e(YI,qFo),e(eb,GFo),e(se,OFo),e(se,ob),e(ob,Hte),e(Hte,XFo),e(ob,VFo),e(ob,KI),e(KI,zFo),e(ob,WFo),e(se,QFo),e(se,rb),e(rb,Ute),e(Ute,HFo),e(rb,UFo),e(rb,ZI),e(ZI,JFo),e(rb,YFo),e(se,KFo),e(se,tb),e(tb,Jte),e(Jte,ZFo),e(tb,eCo),e(tb,ej),e(ej,oCo),e(tb,rCo),e(se,tCo),e(se,ab),e(ab,Yte),e(Yte,aCo),e(ab,nCo),e(ab,oj),e(oj,sCo),e(ab,lCo),e(se,iCo),e(se,nb),e(nb,Kte),e(Kte,dCo),e(nb,cCo),e(nb,rj),e(rj,fCo),e(nb,mCo),e(se,gCo),e(se,sb),e(sb,Zte),e(Zte,hCo),e(sb,pCo),e(sb,tj),e(tj,_Co),e(sb,uCo),e(Ge,bCo),e(Ge,lb),e(lb,vCo),e(lb,eae),e(eae,TCo),e(lb,FCo),e(lb,oae),e(oae,CCo),e(Ge,MCo),e(Ge,rae),e(rae,ECo),e(Ge,yCo),g(RE,Ge,null),b(d,dRe,u),b(d,bd,u),e(bd,ib),e(ib,tae),g(SE,tae,null),e(bd,wCo),e(bd,aae),e(aae,ACo),b(d,cRe,u),b(d,rr,u),g(PE,rr,null),e(rr,LCo),e(rr,vd),e(vd,BCo),e(vd,nae),e(nae,xCo),e(vd,kCo),e(vd,sae),e(sae,RCo),e(vd,SCo),e(rr,PCo),e(rr,$E),e($E,$Co),e($E,lae),e(lae,ICo),e($E,jCo),e(rr,DCo),e(rr,Yr),g(IE,Yr,null),e(Yr,NCo),e(Yr,iae),e(iae,qCo),e(Yr,GCo),e(Yr,Td),e(Td,OCo),e(Td,dae),e(dae,XCo),e(Td,VCo),e(Td,cae),e(cae,zCo),e(Td,WCo),e(Yr,QCo),e(Yr,fae),e(fae,HCo),e(Yr,UCo),g(jE,Yr,null),e(rr,JCo),e(rr,Oe),g(DE,Oe,null),e(Oe,YCo),e(Oe,mae),e(mae,KCo),e(Oe,ZCo),e(Oe,Za),e(Za,eMo),e(Za,gae),e(gae,oMo),e(Za,rMo),e(Za,hae),e(hae,tMo),e(Za,aMo),e(Za,pae),e(pae,nMo),e(Za,sMo),e(Oe,lMo),e(Oe,A),e(A,db),e(db,_ae),e(_ae,iMo),e(db,dMo),e(db,aj),e(aj,cMo),e(db,fMo),e(A,mMo),e(A,cb),e(cb,uae),e(uae,gMo),e(cb,hMo),e(cb,nj),e(nj,pMo),e(cb,_Mo),e(A,uMo),e(A,fb),e(fb,bae),e(bae,bMo),e(fb,vMo),e(fb,sj),e(sj,TMo),e(fb,FMo),e(A,CMo),e(A,mb),e(mb,vae),e(vae,MMo),e(mb,EMo),e(mb,lj),e(lj,yMo),e(mb,wMo),e(A,AMo),e(A,gb),e(gb,Tae),e(Tae,LMo),e(gb,BMo),e(gb,ij),e(ij,xMo),e(gb,kMo),e(A,RMo),e(A,hb),e(hb,Fae),e(Fae,SMo),e(hb,PMo),e(hb,dj),e(dj,$Mo),e(hb,IMo),e(A,jMo),e(A,pb),e(pb,Cae),e(Cae,DMo),e(pb,NMo),e(pb,cj),e(cj,qMo),e(pb,GMo),e(A,OMo),e(A,_b),e(_b,Mae),e(Mae,XMo),e(_b,VMo),e(_b,fj),e(fj,zMo),e(_b,WMo),e(A,QMo),e(A,ub),e(ub,Eae),e(Eae,HMo),e(ub,UMo),e(ub,mj),e(mj,JMo),e(ub,YMo),e(A,KMo),e(A,bb),e(bb,yae),e(yae,ZMo),e(bb,e4o),e(bb,gj),e(gj,o4o),e(bb,r4o),e(A,t4o),e(A,vb),e(vb,wae),e(wae,a4o),e(vb,n4o),e(vb,hj),e(hj,s4o),e(vb,l4o),e(A,i4o),e(A,Tb),e(Tb,Aae),e(Aae,d4o),e(Tb,c4o),e(Tb,pj),e(pj,f4o),e(Tb,m4o),e(A,g4o),e(A,Fb),e(Fb,Lae),e(Lae,h4o),e(Fb,p4o),e(Fb,_j),e(_j,_4o),e(Fb,u4o),e(A,b4o),e(A,Cb),e(Cb,Bae),e(Bae,v4o),e(Cb,T4o),e(Cb,uj),e(uj,F4o),e(Cb,C4o),e(A,M4o),e(A,Mb),e(Mb,xae),e(xae,E4o),e(Mb,y4o),e(Mb,bj),e(bj,w4o),e(Mb,A4o),e(A,L4o),e(A,Eb),e(Eb,kae),e(kae,B4o),e(Eb,x4o),e(Eb,vj),e(vj,k4o),e(Eb,R4o),e(A,S4o),e(A,yb),e(yb,Rae),e(Rae,P4o),e(yb,$4o),e(yb,Tj),e(Tj,I4o),e(yb,j4o),e(A,D4o),e(A,wb),e(wb,Sae),e(Sae,N4o),e(wb,q4o),e(wb,Fj),e(Fj,G4o),e(wb,O4o),e(A,X4o),e(A,Ab),e(Ab,Pae),e(Pae,V4o),e(Ab,z4o),e(Ab,Cj),e(Cj,W4o),e(Ab,Q4o),e(A,H4o),e(A,Lb),e(Lb,$ae),e($ae,U4o),e(Lb,J4o),e(Lb,Mj),e(Mj,Y4o),e(Lb,K4o),e(A,Z4o),e(A,Bb),e(Bb,Iae),e(Iae,eEo),e(Bb,oEo),e(Bb,Ej),e(Ej,rEo),e(Bb,tEo),e(A,aEo),e(A,xb),e(xb,jae),e(jae,nEo),e(xb,sEo),e(xb,yj),e(yj,lEo),e(xb,iEo),e(A,dEo),e(A,kb),e(kb,Dae),e(Dae,cEo),e(kb,fEo),e(kb,wj),e(wj,mEo),e(kb,gEo),e(A,hEo),e(A,Rb),e(Rb,Nae),e(Nae,pEo),e(Rb,_Eo),e(Rb,Aj),e(Aj,uEo),e(Rb,bEo),e(A,vEo),e(A,Sb),e(Sb,qae),e(qae,TEo),e(Sb,FEo),e(Sb,Lj),e(Lj,CEo),e(Sb,MEo),e(A,EEo),e(A,Pb),e(Pb,Gae),e(Gae,yEo),e(Pb,wEo),e(Pb,Bj),e(Bj,AEo),e(Pb,LEo),e(A,BEo),e(A,$b),e($b,Oae),e(Oae,xEo),e($b,kEo),e($b,xj),e(xj,REo),e($b,SEo),e(A,PEo),e(A,Ib),e(Ib,Xae),e(Xae,$Eo),e(Ib,IEo),e(Ib,kj),e(kj,jEo),e(Ib,DEo),e(A,NEo),e(A,jb),e(jb,Vae),e(Vae,qEo),e(jb,GEo),e(jb,Rj),e(Rj,OEo),e(jb,XEo),e(A,VEo),e(A,Db),e(Db,zae),e(zae,zEo),e(Db,WEo),e(Db,Sj),e(Sj,QEo),e(Db,HEo),e(A,UEo),e(A,Nb),e(Nb,Wae),e(Wae,JEo),e(Nb,YEo),e(Nb,Pj),e(Pj,KEo),e(Nb,ZEo),e(A,e3o),e(A,qb),e(qb,Qae),e(Qae,o3o),e(qb,r3o),e(qb,$j),e($j,t3o),e(qb,a3o),e(A,n3o),e(A,Gb),e(Gb,Hae),e(Hae,s3o),e(Gb,l3o),e(Gb,Ij),e(Ij,i3o),e(Gb,d3o),e(A,c3o),e(A,Ob),e(Ob,Uae),e(Uae,f3o),e(Ob,m3o),e(Ob,jj),e(jj,g3o),e(Ob,h3o),e(A,p3o),e(A,Xb),e(Xb,Jae),e(Jae,_3o),e(Xb,u3o),e(Xb,Dj),e(Dj,b3o),e(Xb,v3o),e(A,T3o),e(A,Vb),e(Vb,Yae),e(Yae,F3o),e(Vb,C3o),e(Vb,Nj),e(Nj,M3o),e(Vb,E3o),e(A,y3o),e(A,zb),e(zb,Kae),e(Kae,w3o),e(zb,A3o),e(zb,qj),e(qj,L3o),e(zb,B3o),e(A,x3o),e(A,Wb),e(Wb,Zae),e(Zae,k3o),e(Wb,R3o),e(Wb,Gj),e(Gj,S3o),e(Wb,P3o),e(A,$3o),e(A,Qb),e(Qb,ene),e(ene,I3o),e(Qb,j3o),e(Qb,Oj),e(Oj,D3o),e(Qb,N3o),e(A,q3o),e(A,Hb),e(Hb,one),e(one,G3o),e(Hb,O3o),e(Hb,Xj),e(Xj,X3o),e(Hb,V3o),e(A,z3o),e(A,Ub),e(Ub,rne),e(rne,W3o),e(Ub,Q3o),e(Ub,Vj),e(Vj,H3o),e(Ub,U3o),e(A,J3o),e(A,Jb),e(Jb,tne),e(tne,Y3o),e(Jb,K3o),e(Jb,zj),e(zj,Z3o),e(Jb,eyo),e(A,oyo),e(A,Yb),e(Yb,ane),e(ane,ryo),e(Yb,tyo),e(Yb,Wj),e(Wj,ayo),e(Yb,nyo),e(A,syo),e(A,Kb),e(Kb,nne),e(nne,lyo),e(Kb,iyo),e(Kb,Qj),e(Qj,dyo),e(Kb,cyo),e(A,fyo),e(A,Zb),e(Zb,sne),e(sne,myo),e(Zb,gyo),e(Zb,Hj),e(Hj,hyo),e(Zb,pyo),e(A,_yo),e(A,e5),e(e5,lne),e(lne,uyo),e(e5,byo),e(e5,Uj),e(Uj,vyo),e(e5,Tyo),e(Oe,Fyo),e(Oe,o5),e(o5,Cyo),e(o5,ine),e(ine,Myo),e(o5,Eyo),e(o5,dne),e(dne,yyo),e(Oe,wyo),e(Oe,cne),e(cne,Ayo),e(Oe,Lyo),g(NE,Oe,null),b(d,fRe,u),b(d,Fd,u),e(Fd,r5),e(r5,fne),g(qE,fne,null),e(Fd,Byo),e(Fd,mne),e(mne,xyo),b(d,mRe,u),b(d,tr,u),g(GE,tr,null),e(tr,kyo),e(tr,Cd),e(Cd,Ryo),e(Cd,gne),e(gne,Syo),e(Cd,Pyo),e(Cd,hne),e(hne,$yo),e(Cd,Iyo),e(tr,jyo),e(tr,OE),e(OE,Dyo),e(OE,pne),e(pne,Nyo),e(OE,qyo),e(tr,Gyo),e(tr,Kr),g(XE,Kr,null),e(Kr,Oyo),e(Kr,_ne),e(_ne,Xyo),e(Kr,Vyo),e(Kr,Md),e(Md,zyo),e(Md,une),e(une,Wyo),e(Md,Qyo),e(Md,bne),e(bne,Hyo),e(Md,Uyo),e(Kr,Jyo),e(Kr,vne),e(vne,Yyo),e(Kr,Kyo),g(VE,Kr,null),e(tr,Zyo),e(tr,Xe),g(zE,Xe,null),e(Xe,ewo),e(Xe,Tne),e(Tne,owo),e(Xe,rwo),e(Xe,en),e(en,two),e(en,Fne),e(Fne,awo),e(en,nwo),e(en,Cne),e(Cne,swo),e(en,lwo),e(en,Mne),e(Mne,iwo),e(en,dwo),e(Xe,cwo),e(Xe,G),e(G,t5),e(t5,Ene),e(Ene,fwo),e(t5,mwo),e(t5,Jj),e(Jj,gwo),e(t5,hwo),e(G,pwo),e(G,a5),e(a5,yne),e(yne,_wo),e(a5,uwo),e(a5,Yj),e(Yj,bwo),e(a5,vwo),e(G,Two),e(G,n5),e(n5,wne),e(wne,Fwo),e(n5,Cwo),e(n5,Kj),e(Kj,Mwo),e(n5,Ewo),e(G,ywo),e(G,s5),e(s5,Ane),e(Ane,wwo),e(s5,Awo),e(s5,Zj),e(Zj,Lwo),e(s5,Bwo),e(G,xwo),e(G,l5),e(l5,Lne),e(Lne,kwo),e(l5,Rwo),e(l5,eD),e(eD,Swo),e(l5,Pwo),e(G,$wo),e(G,i5),e(i5,Bne),e(Bne,Iwo),e(i5,jwo),e(i5,oD),e(oD,Dwo),e(i5,Nwo),e(G,qwo),e(G,d5),e(d5,xne),e(xne,Gwo),e(d5,Owo),e(d5,rD),e(rD,Xwo),e(d5,Vwo),e(G,zwo),e(G,c5),e(c5,kne),e(kne,Wwo),e(c5,Qwo),e(c5,tD),e(tD,Hwo),e(c5,Uwo),e(G,Jwo),e(G,f5),e(f5,Rne),e(Rne,Ywo),e(f5,Kwo),e(f5,aD),e(aD,Zwo),e(f5,eAo),e(G,oAo),e(G,m5),e(m5,Sne),e(Sne,rAo),e(m5,tAo),e(m5,nD),e(nD,aAo),e(m5,nAo),e(G,sAo),e(G,g5),e(g5,Pne),e(Pne,lAo),e(g5,iAo),e(g5,sD),e(sD,dAo),e(g5,cAo),e(G,fAo),e(G,h5),e(h5,$ne),e($ne,mAo),e(h5,gAo),e(h5,lD),e(lD,hAo),e(h5,pAo),e(G,_Ao),e(G,p5),e(p5,Ine),e(Ine,uAo),e(p5,bAo),e(p5,iD),e(iD,vAo),e(p5,TAo),e(G,FAo),e(G,_5),e(_5,jne),e(jne,CAo),e(_5,MAo),e(_5,dD),e(dD,EAo),e(_5,yAo),e(G,wAo),e(G,u5),e(u5,Dne),e(Dne,AAo),e(u5,LAo),e(u5,cD),e(cD,BAo),e(u5,xAo),e(G,kAo),e(G,b5),e(b5,Nne),e(Nne,RAo),e(b5,SAo),e(b5,fD),e(fD,PAo),e(b5,$Ao),e(G,IAo),e(G,v5),e(v5,qne),e(qne,jAo),e(v5,DAo),e(v5,mD),e(mD,NAo),e(v5,qAo),e(G,GAo),e(G,T5),e(T5,Gne),e(Gne,OAo),e(T5,XAo),e(T5,gD),e(gD,VAo),e(T5,zAo),e(G,WAo),e(G,F5),e(F5,One),e(One,QAo),e(F5,HAo),e(F5,hD),e(hD,UAo),e(F5,JAo),e(G,YAo),e(G,C5),e(C5,Xne),e(Xne,KAo),e(C5,ZAo),e(C5,pD),e(pD,eLo),e(C5,oLo),e(G,rLo),e(G,M5),e(M5,Vne),e(Vne,tLo),e(M5,aLo),e(M5,_D),e(_D,nLo),e(M5,sLo),e(G,lLo),e(G,E5),e(E5,zne),e(zne,iLo),e(E5,dLo),e(E5,uD),e(uD,cLo),e(E5,fLo),e(G,mLo),e(G,y5),e(y5,Wne),e(Wne,gLo),e(y5,hLo),e(y5,bD),e(bD,pLo),e(y5,_Lo),e(G,uLo),e(G,w5),e(w5,Qne),e(Qne,bLo),e(w5,vLo),e(w5,vD),e(vD,TLo),e(w5,FLo),e(G,CLo),e(G,A5),e(A5,Hne),e(Hne,MLo),e(A5,ELo),e(A5,TD),e(TD,yLo),e(A5,wLo),e(G,ALo),e(G,L5),e(L5,Une),e(Une,LLo),e(L5,BLo),e(L5,FD),e(FD,xLo),e(L5,kLo),e(G,RLo),e(G,B5),e(B5,Jne),e(Jne,SLo),e(B5,PLo),e(B5,CD),e(CD,$Lo),e(B5,ILo),e(G,jLo),e(G,x5),e(x5,Yne),e(Yne,DLo),e(x5,NLo),e(x5,MD),e(MD,qLo),e(x5,GLo),e(Xe,OLo),e(Xe,k5),e(k5,XLo),e(k5,Kne),e(Kne,VLo),e(k5,zLo),e(k5,Zne),e(Zne,WLo),e(Xe,QLo),e(Xe,ese),e(ese,HLo),e(Xe,ULo),g(WE,Xe,null),b(d,gRe,u),b(d,Ed,u),e(Ed,R5),e(R5,ose),g(QE,ose,null),e(Ed,JLo),e(Ed,rse),e(rse,YLo),b(d,hRe,u),b(d,ar,u),g(HE,ar,null),e(ar,KLo),e(ar,yd),e(yd,ZLo),e(yd,tse),e(tse,e7o),e(yd,o7o),e(yd,ase),e(ase,r7o),e(yd,t7o),e(ar,a7o),e(ar,UE),e(UE,n7o),e(UE,nse),e(nse,s7o),e(UE,l7o),e(ar,i7o),e(ar,Zr),g(JE,Zr,null),e(Zr,d7o),e(Zr,sse),e(sse,c7o),e(Zr,f7o),e(Zr,wd),e(wd,m7o),e(wd,lse),e(lse,g7o),e(wd,h7o),e(wd,ise),e(ise,p7o),e(wd,_7o),e(Zr,u7o),e(Zr,dse),e(dse,b7o),e(Zr,v7o),g(YE,Zr,null),e(ar,T7o),e(ar,Ve),g(KE,Ve,null),e(Ve,F7o),e(Ve,cse),e(cse,C7o),e(Ve,M7o),e(Ve,on),e(on,E7o),e(on,fse),e(fse,y7o),e(on,w7o),e(on,mse),e(mse,A7o),e(on,L7o),e(on,gse),e(gse,B7o),e(on,x7o),e(Ve,k7o),e(Ve,ma),e(ma,S5),e(S5,hse),e(hse,R7o),e(S5,S7o),e(S5,ED),e(ED,P7o),e(S5,$7o),e(ma,I7o),e(ma,P5),e(P5,pse),e(pse,j7o),e(P5,D7o),e(P5,yD),e(yD,N7o),e(P5,q7o),e(ma,G7o),e(ma,$5),e($5,_se),e(_se,O7o),e($5,X7o),e($5,wD),e(wD,V7o),e($5,z7o),e(ma,W7o),e(ma,I5),e(I5,use),e(use,Q7o),e(I5,H7o),e(I5,AD),e(AD,U7o),e(I5,J7o),e(ma,Y7o),e(ma,j5),e(j5,bse),e(bse,K7o),e(j5,Z7o),e(j5,LD),e(LD,e9o),e(j5,o9o),e(Ve,r9o),e(Ve,D5),e(D5,t9o),e(D5,vse),e(vse,a9o),e(D5,n9o),e(D5,Tse),e(Tse,s9o),e(Ve,l9o),e(Ve,Fse),e(Fse,i9o),e(Ve,d9o),g(ZE,Ve,null),b(d,pRe,u),b(d,Ad,u),e(Ad,N5),e(N5,Cse),g(e3,Cse,null),e(Ad,c9o),e(Ad,Mse),e(Mse,f9o),b(d,_Re,u),b(d,nr,u),g(o3,nr,null),e(nr,m9o),e(nr,Ld),e(Ld,g9o),e(Ld,Ese),e(Ese,h9o),e(Ld,p9o),e(Ld,yse),e(yse,_9o),e(Ld,u9o),e(nr,b9o),e(nr,r3),e(r3,v9o),e(r3,wse),e(wse,T9o),e(r3,F9o),e(nr,C9o),e(nr,et),g(t3,et,null),e(et,M9o),e(et,Ase),e(Ase,E9o),e(et,y9o),e(et,Bd),e(Bd,w9o),e(Bd,Lse),e(Lse,A9o),e(Bd,L9o),e(Bd,Bse),e(Bse,B9o),e(Bd,x9o),e(et,k9o),e(et,xse),e(xse,R9o),e(et,S9o),g(a3,et,null),e(nr,P9o),e(nr,ze),g(n3,ze,null),e(ze,$9o),e(ze,kse),e(kse,I9o),e(ze,j9o),e(ze,rn),e(rn,D9o),e(rn,Rse),e(Rse,N9o),e(rn,q9o),e(rn,Sse),e(Sse,G9o),e(rn,O9o),e(rn,Pse),e(Pse,X9o),e(rn,V9o),e(ze,z9o),e(ze,N),e(N,q5),e(q5,$se),e($se,W9o),e(q5,Q9o),e(q5,BD),e(BD,H9o),e(q5,U9o),e(N,J9o),e(N,G5),e(G5,Ise),e(Ise,Y9o),e(G5,K9o),e(G5,xD),e(xD,Z9o),e(G5,eBo),e(N,oBo),e(N,O5),e(O5,jse),e(jse,rBo),e(O5,tBo),e(O5,kD),e(kD,aBo),e(O5,nBo),e(N,sBo),e(N,X5),e(X5,Dse),e(Dse,lBo),e(X5,iBo),e(X5,RD),e(RD,dBo),e(X5,cBo),e(N,fBo),e(N,V5),e(V5,Nse),e(Nse,mBo),e(V5,gBo),e(V5,SD),e(SD,hBo),e(V5,pBo),e(N,_Bo),e(N,z5),e(z5,qse),e(qse,uBo),e(z5,bBo),e(z5,PD),e(PD,vBo),e(z5,TBo),e(N,FBo),e(N,W5),e(W5,Gse),e(Gse,CBo),e(W5,MBo),e(W5,$D),e($D,EBo),e(W5,yBo),e(N,wBo),e(N,Q5),e(Q5,Ose),e(Ose,ABo),e(Q5,LBo),e(Q5,ID),e(ID,BBo),e(Q5,xBo),e(N,kBo),e(N,H5),e(H5,Xse),e(Xse,RBo),e(H5,SBo),e(H5,jD),e(jD,PBo),e(H5,$Bo),e(N,IBo),e(N,U5),e(U5,Vse),e(Vse,jBo),e(U5,DBo),e(U5,DD),e(DD,NBo),e(U5,qBo),e(N,GBo),e(N,J5),e(J5,zse),e(zse,OBo),e(J5,XBo),e(J5,ND),e(ND,VBo),e(J5,zBo),e(N,WBo),e(N,Y5),e(Y5,Wse),e(Wse,QBo),e(Y5,HBo),e(Y5,qD),e(qD,UBo),e(Y5,JBo),e(N,YBo),e(N,K5),e(K5,Qse),e(Qse,KBo),e(K5,ZBo),e(K5,GD),e(GD,exo),e(K5,oxo),e(N,rxo),e(N,Z5),e(Z5,Hse),e(Hse,txo),e(Z5,axo),e(Z5,OD),e(OD,nxo),e(Z5,sxo),e(N,lxo),e(N,e2),e(e2,Use),e(Use,ixo),e(e2,dxo),e(e2,XD),e(XD,cxo),e(e2,fxo),e(N,mxo),e(N,o2),e(o2,Jse),e(Jse,gxo),e(o2,hxo),e(o2,VD),e(VD,pxo),e(o2,_xo),e(N,uxo),e(N,r2),e(r2,Yse),e(Yse,bxo),e(r2,vxo),e(r2,zD),e(zD,Txo),e(r2,Fxo),e(N,Cxo),e(N,t2),e(t2,Kse),e(Kse,Mxo),e(t2,Exo),e(t2,WD),e(WD,yxo),e(t2,wxo),e(N,Axo),e(N,a2),e(a2,Zse),e(Zse,Lxo),e(a2,Bxo),e(a2,QD),e(QD,xxo),e(a2,kxo),e(N,Rxo),e(N,n2),e(n2,ele),e(ele,Sxo),e(n2,Pxo),e(n2,HD),e(HD,$xo),e(n2,Ixo),e(N,jxo),e(N,s2),e(s2,ole),e(ole,Dxo),e(s2,Nxo),e(s2,UD),e(UD,qxo),e(s2,Gxo),e(N,Oxo),e(N,l2),e(l2,rle),e(rle,Xxo),e(l2,Vxo),e(l2,JD),e(JD,zxo),e(l2,Wxo),e(N,Qxo),e(N,i2),e(i2,tle),e(tle,Hxo),e(i2,Uxo),e(i2,YD),e(YD,Jxo),e(i2,Yxo),e(N,Kxo),e(N,d2),e(d2,ale),e(ale,Zxo),e(d2,eko),e(d2,KD),e(KD,oko),e(d2,rko),e(N,tko),e(N,c2),e(c2,nle),e(nle,ako),e(c2,nko),e(c2,ZD),e(ZD,sko),e(c2,lko),e(N,iko),e(N,f2),e(f2,sle),e(sle,dko),e(f2,cko),e(f2,eN),e(eN,fko),e(f2,mko),e(N,gko),e(N,m2),e(m2,lle),e(lle,hko),e(m2,pko),e(m2,oN),e(oN,_ko),e(m2,uko),e(N,bko),e(N,g2),e(g2,ile),e(ile,vko),e(g2,Tko),e(g2,rN),e(rN,Fko),e(g2,Cko),e(N,Mko),e(N,h2),e(h2,dle),e(dle,Eko),e(h2,yko),e(h2,tN),e(tN,wko),e(h2,Ako),e(N,Lko),e(N,p2),e(p2,cle),e(cle,Bko),e(p2,xko),e(p2,aN),e(aN,kko),e(p2,Rko),e(N,Sko),e(N,_2),e(_2,fle),e(fle,Pko),e(_2,$ko),e(_2,nN),e(nN,Iko),e(_2,jko),e(N,Dko),e(N,u2),e(u2,mle),e(mle,Nko),e(u2,qko),e(u2,sN),e(sN,Gko),e(u2,Oko),e(N,Xko),e(N,b2),e(b2,gle),e(gle,Vko),e(b2,zko),e(b2,lN),e(lN,Wko),e(b2,Qko),e(ze,Hko),e(ze,v2),e(v2,Uko),e(v2,hle),e(hle,Jko),e(v2,Yko),e(v2,ple),e(ple,Kko),e(ze,Zko),e(ze,_le),e(_le,eRo),e(ze,oRo),g(s3,ze,null),b(d,uRe,u),b(d,xd,u),e(xd,T2),e(T2,ule),g(l3,ule,null),e(xd,rRo),e(xd,ble),e(ble,tRo),b(d,bRe,u),b(d,sr,u),g(i3,sr,null),e(sr,aRo),e(sr,kd),e(kd,nRo),e(kd,vle),e(vle,sRo),e(kd,lRo),e(kd,Tle),e(Tle,iRo),e(kd,dRo),e(sr,cRo),e(sr,d3),e(d3,fRo),e(d3,Fle),e(Fle,mRo),e(d3,gRo),e(sr,hRo),e(sr,ot),g(c3,ot,null),e(ot,pRo),e(ot,Cle),e(Cle,_Ro),e(ot,uRo),e(ot,Rd),e(Rd,bRo),e(Rd,Mle),e(Mle,vRo),e(Rd,TRo),e(Rd,Ele),e(Ele,FRo),e(Rd,CRo),e(ot,MRo),e(ot,yle),e(yle,ERo),e(ot,yRo),g(f3,ot,null),e(sr,wRo),e(sr,We),g(m3,We,null),e(We,ARo),e(We,wle),e(wle,LRo),e(We,BRo),e(We,tn),e(tn,xRo),e(tn,Ale),e(Ale,kRo),e(tn,RRo),e(tn,Lle),e(Lle,SRo),e(tn,PRo),e(tn,Ble),e(Ble,$Ro),e(tn,IRo),e(We,jRo),e(We,R),e(R,F2),e(F2,xle),e(xle,DRo),e(F2,NRo),e(F2,iN),e(iN,qRo),e(F2,GRo),e(R,ORo),e(R,C2),e(C2,kle),e(kle,XRo),e(C2,VRo),e(C2,dN),e(dN,zRo),e(C2,WRo),e(R,QRo),e(R,M2),e(M2,Rle),e(Rle,HRo),e(M2,URo),e(M2,cN),e(cN,JRo),e(M2,YRo),e(R,KRo),e(R,E2),e(E2,Sle),e(Sle,ZRo),e(E2,eSo),e(E2,fN),e(fN,oSo),e(E2,rSo),e(R,tSo),e(R,y2),e(y2,Ple),e(Ple,aSo),e(y2,nSo),e(y2,mN),e(mN,sSo),e(y2,lSo),e(R,iSo),e(R,w2),e(w2,$le),e($le,dSo),e(w2,cSo),e(w2,gN),e(gN,fSo),e(w2,mSo),e(R,gSo),e(R,A2),e(A2,Ile),e(Ile,hSo),e(A2,pSo),e(A2,hN),e(hN,_So),e(A2,uSo),e(R,bSo),e(R,L2),e(L2,jle),e(jle,vSo),e(L2,TSo),e(L2,pN),e(pN,FSo),e(L2,CSo),e(R,MSo),e(R,B2),e(B2,Dle),e(Dle,ESo),e(B2,ySo),e(B2,_N),e(_N,wSo),e(B2,ASo),e(R,LSo),e(R,x2),e(x2,Nle),e(Nle,BSo),e(x2,xSo),e(x2,uN),e(uN,kSo),e(x2,RSo),e(R,SSo),e(R,k2),e(k2,qle),e(qle,PSo),e(k2,$So),e(k2,bN),e(bN,ISo),e(k2,jSo),e(R,DSo),e(R,R2),e(R2,Gle),e(Gle,NSo),e(R2,qSo),e(R2,vN),e(vN,GSo),e(R2,OSo),e(R,XSo),e(R,S2),e(S2,Ole),e(Ole,VSo),e(S2,zSo),e(S2,TN),e(TN,WSo),e(S2,QSo),e(R,HSo),e(R,P2),e(P2,Xle),e(Xle,USo),e(P2,JSo),e(P2,FN),e(FN,YSo),e(P2,KSo),e(R,ZSo),e(R,$2),e($2,Vle),e(Vle,ePo),e($2,oPo),e($2,CN),e(CN,rPo),e($2,tPo),e(R,aPo),e(R,I2),e(I2,zle),e(zle,nPo),e(I2,sPo),e(I2,MN),e(MN,lPo),e(I2,iPo),e(R,dPo),e(R,j2),e(j2,Wle),e(Wle,cPo),e(j2,fPo),e(j2,EN),e(EN,mPo),e(j2,gPo),e(R,hPo),e(R,D2),e(D2,Qle),e(Qle,pPo),e(D2,_Po),e(D2,yN),e(yN,uPo),e(D2,bPo),e(R,vPo),e(R,N2),e(N2,Hle),e(Hle,TPo),e(N2,FPo),e(N2,wN),e(wN,CPo),e(N2,MPo),e(R,EPo),e(R,q2),e(q2,Ule),e(Ule,yPo),e(q2,wPo),e(q2,AN),e(AN,APo),e(q2,LPo),e(R,BPo),e(R,G2),e(G2,Jle),e(Jle,xPo),e(G2,kPo),e(G2,LN),e(LN,RPo),e(G2,SPo),e(R,PPo),e(R,O2),e(O2,Yle),e(Yle,$Po),e(O2,IPo),e(O2,BN),e(BN,jPo),e(O2,DPo),e(R,NPo),e(R,X2),e(X2,Kle),e(Kle,qPo),e(X2,GPo),e(X2,xN),e(xN,OPo),e(X2,XPo),e(R,VPo),e(R,V2),e(V2,Zle),e(Zle,zPo),e(V2,WPo),e(V2,kN),e(kN,QPo),e(V2,HPo),e(R,UPo),e(R,z2),e(z2,eie),e(eie,JPo),e(z2,YPo),e(z2,RN),e(RN,KPo),e(z2,ZPo),e(R,e$o),e(R,W2),e(W2,oie),e(oie,o$o),e(W2,r$o),e(W2,SN),e(SN,t$o),e(W2,a$o),e(R,n$o),e(R,Q2),e(Q2,rie),e(rie,s$o),e(Q2,l$o),e(Q2,PN),e(PN,i$o),e(Q2,d$o),e(R,c$o),e(R,H2),e(H2,tie),e(tie,f$o),e(H2,m$o),e(H2,$N),e($N,g$o),e(H2,h$o),e(R,p$o),e(R,U2),e(U2,aie),e(aie,_$o),e(U2,u$o),e(U2,IN),e(IN,b$o),e(U2,v$o),e(R,T$o),e(R,J2),e(J2,nie),e(nie,F$o),e(J2,C$o),e(J2,jN),e(jN,M$o),e(J2,E$o),e(R,y$o),e(R,Y2),e(Y2,sie),e(sie,w$o),e(Y2,A$o),e(Y2,DN),e(DN,L$o),e(Y2,B$o),e(R,x$o),e(R,K2),e(K2,lie),e(lie,k$o),e(K2,R$o),e(K2,NN),e(NN,S$o),e(K2,P$o),e(R,$$o),e(R,Z2),e(Z2,iie),e(iie,I$o),e(Z2,j$o),e(Z2,qN),e(qN,D$o),e(Z2,N$o),e(R,q$o),e(R,ev),e(ev,die),e(die,G$o),e(ev,O$o),e(ev,GN),e(GN,X$o),e(ev,V$o),e(R,z$o),e(R,ov),e(ov,cie),e(cie,W$o),e(ov,Q$o),e(ov,ON),e(ON,H$o),e(ov,U$o),e(R,J$o),e(R,rv),e(rv,fie),e(fie,Y$o),e(rv,K$o),e(rv,XN),e(XN,Z$o),e(rv,eIo),e(R,oIo),e(R,tv),e(tv,mie),e(mie,rIo),e(tv,tIo),e(tv,VN),e(VN,aIo),e(tv,nIo),e(R,sIo),e(R,av),e(av,gie),e(gie,lIo),e(av,iIo),e(av,zN),e(zN,dIo),e(av,cIo),e(R,fIo),e(R,nv),e(nv,hie),e(hie,mIo),e(nv,gIo),e(nv,WN),e(WN,hIo),e(nv,pIo),e(We,_Io),e(We,sv),e(sv,uIo),e(sv,pie),e(pie,bIo),e(sv,vIo),e(sv,_ie),e(_ie,TIo),e(We,FIo),e(We,uie),e(uie,CIo),e(We,MIo),g(g3,We,null),b(d,vRe,u),b(d,Sd,u),e(Sd,lv),e(lv,bie),g(h3,bie,null),e(Sd,EIo),e(Sd,vie),e(vie,yIo),b(d,TRe,u),b(d,lr,u),g(p3,lr,null),e(lr,wIo),e(lr,Pd),e(Pd,AIo),e(Pd,Tie),e(Tie,LIo),e(Pd,BIo),e(Pd,Fie),e(Fie,xIo),e(Pd,kIo),e(lr,RIo),e(lr,_3),e(_3,SIo),e(_3,Cie),e(Cie,PIo),e(_3,$Io),e(lr,IIo),e(lr,rt),g(u3,rt,null),e(rt,jIo),e(rt,Mie),e(Mie,DIo),e(rt,NIo),e(rt,$d),e($d,qIo),e($d,Eie),e(Eie,GIo),e($d,OIo),e($d,yie),e(yie,XIo),e($d,VIo),e(rt,zIo),e(rt,wie),e(wie,WIo),e(rt,QIo),g(b3,rt,null),e(lr,HIo),e(lr,Qe),g(v3,Qe,null),e(Qe,UIo),e(Qe,Aie),e(Aie,JIo),e(Qe,YIo),e(Qe,an),e(an,KIo),e(an,Lie),e(Lie,ZIo),e(an,ejo),e(an,Bie),e(Bie,ojo),e(an,rjo),e(an,xie),e(xie,tjo),e(an,ajo),e(Qe,njo),e(Qe,kie),e(kie,iv),e(iv,Rie),e(Rie,sjo),e(iv,ljo),e(iv,QN),e(QN,ijo),e(iv,djo),e(Qe,cjo),e(Qe,dv),e(dv,fjo),e(dv,Sie),e(Sie,mjo),e(dv,gjo),e(dv,Pie),e(Pie,hjo),e(Qe,pjo),e(Qe,$ie),e($ie,_jo),e(Qe,ujo),g(T3,Qe,null),b(d,FRe,u),b(d,Id,u),e(Id,cv),e(cv,Iie),g(F3,Iie,null),e(Id,bjo),e(Id,jie),e(jie,vjo),b(d,CRe,u),b(d,ir,u),g(C3,ir,null),e(ir,Tjo),e(ir,jd),e(jd,Fjo),e(jd,Die),e(Die,Cjo),e(jd,Mjo),e(jd,Nie),e(Nie,Ejo),e(jd,yjo),e(ir,wjo),e(ir,M3),e(M3,Ajo),e(M3,qie),e(qie,Ljo),e(M3,Bjo),e(ir,xjo),e(ir,tt),g(E3,tt,null),e(tt,kjo),e(tt,Gie),e(Gie,Rjo),e(tt,Sjo),e(tt,Dd),e(Dd,Pjo),e(Dd,Oie),e(Oie,$jo),e(Dd,Ijo),e(Dd,Xie),e(Xie,jjo),e(Dd,Djo),e(tt,Njo),e(tt,Vie),e(Vie,qjo),e(tt,Gjo),g(y3,tt,null),e(ir,Ojo),e(ir,He),g(w3,He,null),e(He,Xjo),e(He,zie),e(zie,Vjo),e(He,zjo),e(He,nn),e(nn,Wjo),e(nn,Wie),e(Wie,Qjo),e(nn,Hjo),e(nn,Qie),e(Qie,Ujo),e(nn,Jjo),e(nn,Hie),e(Hie,Yjo),e(nn,Kjo),e(He,Zjo),e(He,me),e(me,fv),e(fv,Uie),e(Uie,eDo),e(fv,oDo),e(fv,HN),e(HN,rDo),e(fv,tDo),e(me,aDo),e(me,mv),e(mv,Jie),e(Jie,nDo),e(mv,sDo),e(mv,UN),e(UN,lDo),e(mv,iDo),e(me,dDo),e(me,zs),e(zs,Yie),e(Yie,cDo),e(zs,fDo),e(zs,JN),e(JN,mDo),e(zs,gDo),e(zs,YN),e(YN,hDo),e(zs,pDo),e(me,_Do),e(me,gv),e(gv,Kie),e(Kie,uDo),e(gv,bDo),e(gv,KN),e(KN,vDo),e(gv,TDo),e(me,FDo),e(me,pa),e(pa,Zie),e(Zie,CDo),e(pa,MDo),e(pa,ZN),e(ZN,EDo),e(pa,yDo),e(pa,eq),e(eq,wDo),e(pa,ADo),e(pa,oq),e(oq,LDo),e(pa,BDo),e(me,xDo),e(me,hv),e(hv,ede),e(ede,kDo),e(hv,RDo),e(hv,rq),e(rq,SDo),e(hv,PDo),e(me,$Do),e(me,pv),e(pv,ode),e(ode,IDo),e(pv,jDo),e(pv,tq),e(tq,DDo),e(pv,NDo),e(me,qDo),e(me,_v),e(_v,rde),e(rde,GDo),e(_v,ODo),e(_v,aq),e(aq,XDo),e(_v,VDo),e(me,zDo),e(me,uv),e(uv,tde),e(tde,WDo),e(uv,QDo),e(uv,nq),e(nq,HDo),e(uv,UDo),e(me,JDo),e(me,bv),e(bv,ade),e(ade,YDo),e(bv,KDo),e(bv,sq),e(sq,ZDo),e(bv,eNo),e(me,oNo),e(me,vv),e(vv,nde),e(nde,rNo),e(vv,tNo),e(vv,lq),e(lq,aNo),e(vv,nNo),e(He,sNo),e(He,Tv),e(Tv,lNo),e(Tv,sde),e(sde,iNo),e(Tv,dNo),e(Tv,lde),e(lde,cNo),e(He,fNo),e(He,ide),e(ide,mNo),e(He,gNo),g(A3,He,null),b(d,MRe,u),b(d,Nd,u),e(Nd,Fv),e(Fv,dde),g(L3,dde,null),e(Nd,hNo),e(Nd,cde),e(cde,pNo),b(d,ERe,u),b(d,dr,u),g(B3,dr,null),e(dr,_No),e(dr,qd),e(qd,uNo),e(qd,fde),e(fde,bNo),e(qd,vNo),e(qd,mde),e(mde,TNo),e(qd,FNo),e(dr,CNo),e(dr,x3),e(x3,MNo),e(x3,gde),e(gde,ENo),e(x3,yNo),e(dr,wNo),e(dr,at),g(k3,at,null),e(at,ANo),e(at,hde),e(hde,LNo),e(at,BNo),e(at,Gd),e(Gd,xNo),e(Gd,pde),e(pde,kNo),e(Gd,RNo),e(Gd,_de),e(_de,SNo),e(Gd,PNo),e(at,$No),e(at,ude),e(ude,INo),e(at,jNo),g(R3,at,null),e(dr,DNo),e(dr,Ue),g(S3,Ue,null),e(Ue,NNo),e(Ue,bde),e(bde,qNo),e(Ue,GNo),e(Ue,sn),e(sn,ONo),e(sn,vde),e(vde,XNo),e(sn,VNo),e(sn,Tde),e(Tde,zNo),e(sn,WNo),e(sn,Fde),e(Fde,QNo),e(sn,HNo),e(Ue,UNo),e(Ue,Cde),e(Cde,Cv),e(Cv,Mde),e(Mde,JNo),e(Cv,YNo),e(Cv,iq),e(iq,KNo),e(Cv,ZNo),e(Ue,eqo),e(Ue,Mv),e(Mv,oqo),e(Mv,Ede),e(Ede,rqo),e(Mv,tqo),e(Mv,yde),e(yde,aqo),e(Ue,nqo),e(Ue,wde),e(wde,sqo),e(Ue,lqo),g(P3,Ue,null),b(d,yRe,u),b(d,Od,u),e(Od,Ev),e(Ev,Ade),g($3,Ade,null),e(Od,iqo),e(Od,Lde),e(Lde,dqo),b(d,wRe,u),b(d,cr,u),g(I3,cr,null),e(cr,cqo),e(cr,Xd),e(Xd,fqo),e(Xd,Bde),e(Bde,mqo),e(Xd,gqo),e(Xd,xde),e(xde,hqo),e(Xd,pqo),e(cr,_qo),e(cr,j3),e(j3,uqo),e(j3,kde),e(kde,bqo),e(j3,vqo),e(cr,Tqo),e(cr,nt),g(D3,nt,null),e(nt,Fqo),e(nt,Rde),e(Rde,Cqo),e(nt,Mqo),e(nt,Vd),e(Vd,Eqo),e(Vd,Sde),e(Sde,yqo),e(Vd,wqo),e(Vd,Pde),e(Pde,Aqo),e(Vd,Lqo),e(nt,Bqo),e(nt,$de),e($de,xqo),e(nt,kqo),g(N3,nt,null),e(cr,Rqo),e(cr,Je),g(q3,Je,null),e(Je,Sqo),e(Je,Ide),e(Ide,Pqo),e(Je,$qo),e(Je,ln),e(ln,Iqo),e(ln,jde),e(jde,jqo),e(ln,Dqo),e(ln,Dde),e(Dde,Nqo),e(ln,qqo),e(ln,Nde),e(Nde,Gqo),e(ln,Oqo),e(Je,Xqo),e(Je,ke),e(ke,yv),e(yv,qde),e(qde,Vqo),e(yv,zqo),e(yv,dq),e(dq,Wqo),e(yv,Qqo),e(ke,Hqo),e(ke,wv),e(wv,Gde),e(Gde,Uqo),e(wv,Jqo),e(wv,cq),e(cq,Yqo),e(wv,Kqo),e(ke,Zqo),e(ke,Av),e(Av,Ode),e(Ode,eGo),e(Av,oGo),e(Av,fq),e(fq,rGo),e(Av,tGo),e(ke,aGo),e(ke,Lv),e(Lv,Xde),e(Xde,nGo),e(Lv,sGo),e(Lv,mq),e(mq,lGo),e(Lv,iGo),e(ke,dGo),e(ke,Bv),e(Bv,Vde),e(Vde,cGo),e(Bv,fGo),e(Bv,gq),e(gq,mGo),e(Bv,gGo),e(ke,hGo),e(ke,xv),e(xv,zde),e(zde,pGo),e(xv,_Go),e(xv,hq),e(hq,uGo),e(xv,bGo),e(ke,vGo),e(ke,kv),e(kv,Wde),e(Wde,TGo),e(kv,FGo),e(kv,pq),e(pq,CGo),e(kv,MGo),e(ke,EGo),e(ke,Rv),e(Rv,Qde),e(Qde,yGo),e(Rv,wGo),e(Rv,_q),e(_q,AGo),e(Rv,LGo),e(Je,BGo),e(Je,Sv),e(Sv,xGo),e(Sv,Hde),e(Hde,kGo),e(Sv,RGo),e(Sv,Ude),e(Ude,SGo),e(Je,PGo),e(Je,Jde),e(Jde,$Go),e(Je,IGo),g(G3,Je,null),b(d,ARe,u),b(d,zd,u),e(zd,Pv),e(Pv,Yde),g(O3,Yde,null),e(zd,jGo),e(zd,Kde),e(Kde,DGo),b(d,LRe,u),b(d,fr,u),g(X3,fr,null),e(fr,NGo),e(fr,Wd),e(Wd,qGo),e(Wd,Zde),e(Zde,GGo),e(Wd,OGo),e(Wd,ece),e(ece,XGo),e(Wd,VGo),e(fr,zGo),e(fr,V3),e(V3,WGo),e(V3,oce),e(oce,QGo),e(V3,HGo),e(fr,UGo),e(fr,st),g(z3,st,null),e(st,JGo),e(st,rce),e(rce,YGo),e(st,KGo),e(st,Qd),e(Qd,ZGo),e(Qd,tce),e(tce,eOo),e(Qd,oOo),e(Qd,ace),e(ace,rOo),e(Qd,tOo),e(st,aOo),e(st,nce),e(nce,nOo),e(st,sOo),g(W3,st,null),e(fr,lOo),e(fr,Ye),g(Q3,Ye,null),e(Ye,iOo),e(Ye,sce),e(sce,dOo),e(Ye,cOo),e(Ye,dn),e(dn,fOo),e(dn,lce),e(lce,mOo),e(dn,gOo),e(dn,ice),e(ice,hOo),e(dn,pOo),e(dn,dce),e(dce,_Oo),e(dn,uOo),e(Ye,bOo),e(Ye,cn),e(cn,$v),e($v,cce),e(cce,vOo),e($v,TOo),e($v,uq),e(uq,FOo),e($v,COo),e(cn,MOo),e(cn,Iv),e(Iv,fce),e(fce,EOo),e(Iv,yOo),e(Iv,bq),e(bq,wOo),e(Iv,AOo),e(cn,LOo),e(cn,jv),e(jv,mce),e(mce,BOo),e(jv,xOo),e(jv,vq),e(vq,kOo),e(jv,ROo),e(cn,SOo),e(cn,Dv),e(Dv,gce),e(gce,POo),e(Dv,$Oo),e(Dv,Tq),e(Tq,IOo),e(Dv,jOo),e(Ye,DOo),e(Ye,Nv),e(Nv,NOo),e(Nv,hce),e(hce,qOo),e(Nv,GOo),e(Nv,pce),e(pce,OOo),e(Ye,XOo),e(Ye,_ce),e(_ce,VOo),e(Ye,zOo),g(H3,Ye,null),b(d,BRe,u),b(d,Hd,u),e(Hd,qv),e(qv,uce),g(U3,uce,null),e(Hd,WOo),e(Hd,bce),e(bce,QOo),b(d,xRe,u),b(d,mr,u),g(J3,mr,null),e(mr,HOo),e(mr,Ud),e(Ud,UOo),e(Ud,vce),e(vce,JOo),e(Ud,YOo),e(Ud,Tce),e(Tce,KOo),e(Ud,ZOo),e(mr,eXo),e(mr,Y3),e(Y3,oXo),e(Y3,Fce),e(Fce,rXo),e(Y3,tXo),e(mr,aXo),e(mr,lt),g(K3,lt,null),e(lt,nXo),e(lt,Cce),e(Cce,sXo),e(lt,lXo),e(lt,Jd),e(Jd,iXo),e(Jd,Mce),e(Mce,dXo),e(Jd,cXo),e(Jd,Ece),e(Ece,fXo),e(Jd,mXo),e(lt,gXo),e(lt,yce),e(yce,hXo),e(lt,pXo),g(Z3,lt,null),e(mr,_Xo),e(mr,Ke),g(ey,Ke,null),e(Ke,uXo),e(Ke,wce),e(wce,bXo),e(Ke,vXo),e(Ke,fn),e(fn,TXo),e(fn,Ace),e(Ace,FXo),e(fn,CXo),e(fn,Lce),e(Lce,MXo),e(fn,EXo),e(fn,Bce),e(Bce,yXo),e(fn,wXo),e(Ke,AXo),e(Ke,Re),e(Re,Gv),e(Gv,xce),e(xce,LXo),e(Gv,BXo),e(Gv,Fq),e(Fq,xXo),e(Gv,kXo),e(Re,RXo),e(Re,Ov),e(Ov,kce),e(kce,SXo),e(Ov,PXo),e(Ov,Cq),e(Cq,$Xo),e(Ov,IXo),e(Re,jXo),e(Re,Xv),e(Xv,Rce),e(Rce,DXo),e(Xv,NXo),e(Xv,Mq),e(Mq,qXo),e(Xv,GXo),e(Re,OXo),e(Re,Vv),e(Vv,Sce),e(Sce,XXo),e(Vv,VXo),e(Vv,Eq),e(Eq,zXo),e(Vv,WXo),e(Re,QXo),e(Re,zv),e(zv,Pce),e(Pce,HXo),e(zv,UXo),e(zv,yq),e(yq,JXo),e(zv,YXo),e(Re,KXo),e(Re,Wv),e(Wv,$ce),e($ce,ZXo),e(Wv,eVo),e(Wv,wq),e(wq,oVo),e(Wv,rVo),e(Re,tVo),e(Re,Qv),e(Qv,Ice),e(Ice,aVo),e(Qv,nVo),e(Qv,Aq),e(Aq,sVo),e(Qv,lVo),e(Re,iVo),e(Re,Hv),e(Hv,jce),e(jce,dVo),e(Hv,cVo),e(Hv,Lq),e(Lq,fVo),e(Hv,mVo),e(Ke,gVo),e(Ke,Uv),e(Uv,hVo),e(Uv,Dce),e(Dce,pVo),e(Uv,_Vo),e(Uv,Nce),e(Nce,uVo),e(Ke,bVo),e(Ke,qce),e(qce,vVo),e(Ke,TVo),g(oy,Ke,null),b(d,kRe,u),b(d,Yd,u),e(Yd,Jv),e(Jv,Gce),g(ry,Gce,null),e(Yd,FVo),e(Yd,Oce),e(Oce,CVo),b(d,RRe,u),b(d,gr,u),g(ty,gr,null),e(gr,MVo),e(gr,Kd),e(Kd,EVo),e(Kd,Xce),e(Xce,yVo),e(Kd,wVo),e(Kd,Vce),e(Vce,AVo),e(Kd,LVo),e(gr,BVo),e(gr,ay),e(ay,xVo),e(ay,zce),e(zce,kVo),e(ay,RVo),e(gr,SVo),e(gr,it),g(ny,it,null),e(it,PVo),e(it,Wce),e(Wce,$Vo),e(it,IVo),e(it,Zd),e(Zd,jVo),e(Zd,Qce),e(Qce,DVo),e(Zd,NVo),e(Zd,Hce),e(Hce,qVo),e(Zd,GVo),e(it,OVo),e(it,Uce),e(Uce,XVo),e(it,VVo),g(sy,it,null),e(gr,zVo),e(gr,Ze),g(ly,Ze,null),e(Ze,WVo),e(Ze,Jce),e(Jce,QVo),e(Ze,HVo),e(Ze,mn),e(mn,UVo),e(mn,Yce),e(Yce,JVo),e(mn,YVo),e(mn,Kce),e(Kce,KVo),e(mn,ZVo),e(mn,Zce),e(Zce,ezo),e(mn,ozo),e(Ze,rzo),e(Ze,iy),e(iy,Yv),e(Yv,efe),e(efe,tzo),e(Yv,azo),e(Yv,Bq),e(Bq,nzo),e(Yv,szo),e(iy,lzo),e(iy,Kv),e(Kv,ofe),e(ofe,izo),e(Kv,dzo),e(Kv,xq),e(xq,czo),e(Kv,fzo),e(Ze,mzo),e(Ze,Zv),e(Zv,gzo),e(Zv,rfe),e(rfe,hzo),e(Zv,pzo),e(Zv,tfe),e(tfe,_zo),e(Ze,uzo),e(Ze,afe),e(afe,bzo),e(Ze,vzo),g(dy,Ze,null),b(d,SRe,u),b(d,ec,u),e(ec,e6),e(e6,nfe),g(cy,nfe,null),e(ec,Tzo),e(ec,sfe),e(sfe,Fzo),b(d,PRe,u),b(d,hr,u),g(fy,hr,null),e(hr,Czo),e(hr,oc),e(oc,Mzo),e(oc,lfe),e(lfe,Ezo),e(oc,yzo),e(oc,ife),e(ife,wzo),e(oc,Azo),e(hr,Lzo),e(hr,my),e(my,Bzo),e(my,dfe),e(dfe,xzo),e(my,kzo),e(hr,Rzo),e(hr,dt),g(gy,dt,null),e(dt,Szo),e(dt,cfe),e(cfe,Pzo),e(dt,$zo),e(dt,rc),e(rc,Izo),e(rc,ffe),e(ffe,jzo),e(rc,Dzo),e(rc,mfe),e(mfe,Nzo),e(rc,qzo),e(dt,Gzo),e(dt,gfe),e(gfe,Ozo),e(dt,Xzo),g(hy,dt,null),e(hr,Vzo),e(hr,eo),g(py,eo,null),e(eo,zzo),e(eo,hfe),e(hfe,Wzo),e(eo,Qzo),e(eo,gn),e(gn,Hzo),e(gn,pfe),e(pfe,Uzo),e(gn,Jzo),e(gn,_fe),e(_fe,Yzo),e(gn,Kzo),e(gn,ufe),e(ufe,Zzo),e(gn,eWo),e(eo,oWo),e(eo,hn),e(hn,o6),e(o6,bfe),e(bfe,rWo),e(o6,tWo),e(o6,kq),e(kq,aWo),e(o6,nWo),e(hn,sWo),e(hn,r6),e(r6,vfe),e(vfe,lWo),e(r6,iWo),e(r6,Rq),e(Rq,dWo),e(r6,cWo),e(hn,fWo),e(hn,t6),e(t6,Tfe),e(Tfe,mWo),e(t6,gWo),e(t6,Sq),e(Sq,hWo),e(t6,pWo),e(hn,_Wo),e(hn,a6),e(a6,Ffe),e(Ffe,uWo),e(a6,bWo),e(a6,Pq),e(Pq,vWo),e(a6,TWo),e(eo,FWo),e(eo,n6),e(n6,CWo),e(n6,Cfe),e(Cfe,MWo),e(n6,EWo),e(n6,Mfe),e(Mfe,yWo),e(eo,wWo),e(eo,Efe),e(Efe,AWo),e(eo,LWo),g(_y,eo,null),b(d,$Re,u),b(d,tc,u),e(tc,s6),e(s6,yfe),g(uy,yfe,null),e(tc,BWo),e(tc,wfe),e(wfe,xWo),b(d,IRe,u),b(d,pr,u),g(by,pr,null),e(pr,kWo),e(pr,ac),e(ac,RWo),e(ac,Afe),e(Afe,SWo),e(ac,PWo),e(ac,Lfe),e(Lfe,$Wo),e(ac,IWo),e(pr,jWo),e(pr,vy),e(vy,DWo),e(vy,Bfe),e(Bfe,NWo),e(vy,qWo),e(pr,GWo),e(pr,ct),g(Ty,ct,null),e(ct,OWo),e(ct,xfe),e(xfe,XWo),e(ct,VWo),e(ct,nc),e(nc,zWo),e(nc,kfe),e(kfe,WWo),e(nc,QWo),e(nc,Rfe),e(Rfe,HWo),e(nc,UWo),e(ct,JWo),e(ct,Sfe),e(Sfe,YWo),e(ct,KWo),g(Fy,ct,null),e(pr,ZWo),e(pr,oo),g(Cy,oo,null),e(oo,eQo),e(oo,Pfe),e(Pfe,oQo),e(oo,rQo),e(oo,pn),e(pn,tQo),e(pn,$fe),e($fe,aQo),e(pn,nQo),e(pn,Ife),e(Ife,sQo),e(pn,lQo),e(pn,jfe),e(jfe,iQo),e(pn,dQo),e(oo,cQo),e(oo,sc),e(sc,l6),e(l6,Dfe),e(Dfe,fQo),e(l6,mQo),e(l6,$q),e($q,gQo),e(l6,hQo),e(sc,pQo),e(sc,i6),e(i6,Nfe),e(Nfe,_Qo),e(i6,uQo),e(i6,Iq),e(Iq,bQo),e(i6,vQo),e(sc,TQo),e(sc,d6),e(d6,qfe),e(qfe,FQo),e(d6,CQo),e(d6,jq),e(jq,MQo),e(d6,EQo),e(oo,yQo),e(oo,c6),e(c6,wQo),e(c6,Gfe),e(Gfe,AQo),e(c6,LQo),e(c6,Ofe),e(Ofe,BQo),e(oo,xQo),e(oo,Xfe),e(Xfe,kQo),e(oo,RQo),g(My,oo,null),b(d,jRe,u),b(d,lc,u),e(lc,f6),e(f6,Vfe),g(Ey,Vfe,null),e(lc,SQo),e(lc,zfe),e(zfe,PQo),b(d,DRe,u),b(d,_r,u),g(yy,_r,null),e(_r,$Qo),e(_r,ic),e(ic,IQo),e(ic,Wfe),e(Wfe,jQo),e(ic,DQo),e(ic,Qfe),e(Qfe,NQo),e(ic,qQo),e(_r,GQo),e(_r,wy),e(wy,OQo),e(wy,Hfe),e(Hfe,XQo),e(wy,VQo),e(_r,zQo),e(_r,ft),g(Ay,ft,null),e(ft,WQo),e(ft,Ufe),e(Ufe,QQo),e(ft,HQo),e(ft,dc),e(dc,UQo),e(dc,Jfe),e(Jfe,JQo),e(dc,YQo),e(dc,Yfe),e(Yfe,KQo),e(dc,ZQo),e(ft,eHo),e(ft,Kfe),e(Kfe,oHo),e(ft,rHo),g(Ly,ft,null),e(_r,tHo),e(_r,ro),g(By,ro,null),e(ro,aHo),e(ro,Zfe),e(Zfe,nHo),e(ro,sHo),e(ro,_n),e(_n,lHo),e(_n,eme),e(eme,iHo),e(_n,dHo),e(_n,ome),e(ome,cHo),e(_n,fHo),e(_n,rme),e(rme,mHo),e(_n,gHo),e(ro,hHo),e(ro,tme),e(tme,m6),e(m6,ame),e(ame,pHo),e(m6,_Ho),e(m6,Dq),e(Dq,uHo),e(m6,bHo),e(ro,vHo),e(ro,g6),e(g6,THo),e(g6,nme),e(nme,FHo),e(g6,CHo),e(g6,sme),e(sme,MHo),e(ro,EHo),e(ro,lme),e(lme,yHo),e(ro,wHo),g(xy,ro,null),b(d,NRe,u),b(d,cc,u),e(cc,h6),e(h6,ime),g(ky,ime,null),e(cc,AHo),e(cc,dme),e(dme,LHo),b(d,qRe,u),b(d,ur,u),g(Ry,ur,null),e(ur,BHo),e(ur,fc),e(fc,xHo),e(fc,cme),e(cme,kHo),e(fc,RHo),e(fc,fme),e(fme,SHo),e(fc,PHo),e(ur,$Ho),e(ur,Sy),e(Sy,IHo),e(Sy,mme),e(mme,jHo),e(Sy,DHo),e(ur,NHo),e(ur,mt),g(Py,mt,null),e(mt,qHo),e(mt,gme),e(gme,GHo),e(mt,OHo),e(mt,mc),e(mc,XHo),e(mc,hme),e(hme,VHo),e(mc,zHo),e(mc,pme),e(pme,WHo),e(mc,QHo),e(mt,HHo),e(mt,_me),e(_me,UHo),e(mt,JHo),g($y,mt,null),e(ur,YHo),e(ur,to),g(Iy,to,null),e(to,KHo),e(to,ume),e(ume,ZHo),e(to,eUo),e(to,un),e(un,oUo),e(un,bme),e(bme,rUo),e(un,tUo),e(un,vme),e(vme,aUo),e(un,nUo),e(un,Tme),e(Tme,sUo),e(un,lUo),e(to,iUo),e(to,Fme),e(Fme,p6),e(p6,Cme),e(Cme,dUo),e(p6,cUo),e(p6,Nq),e(Nq,fUo),e(p6,mUo),e(to,gUo),e(to,_6),e(_6,hUo),e(_6,Mme),e(Mme,pUo),e(_6,_Uo),e(_6,Eme),e(Eme,uUo),e(to,bUo),e(to,yme),e(yme,vUo),e(to,TUo),g(jy,to,null),b(d,GRe,u),b(d,gc,u),e(gc,u6),e(u6,wme),g(Dy,wme,null),e(gc,FUo),e(gc,Ame),e(Ame,CUo),b(d,ORe,u),b(d,br,u),g(Ny,br,null),e(br,MUo),e(br,hc),e(hc,EUo),e(hc,Lme),e(Lme,yUo),e(hc,wUo),e(hc,Bme),e(Bme,AUo),e(hc,LUo),e(br,BUo),e(br,qy),e(qy,xUo),e(qy,xme),e(xme,kUo),e(qy,RUo),e(br,SUo),e(br,gt),g(Gy,gt,null),e(gt,PUo),e(gt,kme),e(kme,$Uo),e(gt,IUo),e(gt,pc),e(pc,jUo),e(pc,Rme),e(Rme,DUo),e(pc,NUo),e(pc,Sme),e(Sme,qUo),e(pc,GUo),e(gt,OUo),e(gt,Pme),e(Pme,XUo),e(gt,VUo),g(Oy,gt,null),e(br,zUo),e(br,ao),g(Xy,ao,null),e(ao,WUo),e(ao,$me),e($me,QUo),e(ao,HUo),e(ao,bn),e(bn,UUo),e(bn,Ime),e(Ime,JUo),e(bn,YUo),e(bn,jme),e(jme,KUo),e(bn,ZUo),e(bn,Dme),e(Dme,eJo),e(bn,oJo),e(ao,rJo),e(ao,Vy),e(Vy,b6),e(b6,Nme),e(Nme,tJo),e(b6,aJo),e(b6,qq),e(qq,nJo),e(b6,sJo),e(Vy,lJo),e(Vy,v6),e(v6,qme),e(qme,iJo),e(v6,dJo),e(v6,Gq),e(Gq,cJo),e(v6,fJo),e(ao,mJo),e(ao,T6),e(T6,gJo),e(T6,Gme),e(Gme,hJo),e(T6,pJo),e(T6,Ome),e(Ome,_Jo),e(ao,uJo),e(ao,Xme),e(Xme,bJo),e(ao,vJo),g(zy,ao,null),b(d,XRe,u),b(d,_c,u),e(_c,F6),e(F6,Vme),g(Wy,Vme,null),e(_c,TJo),e(_c,zme),e(zme,FJo),b(d,VRe,u),b(d,vr,u),g(Qy,vr,null),e(vr,CJo),e(vr,uc),e(uc,MJo),e(uc,Wme),e(Wme,EJo),e(uc,yJo),e(uc,Qme),e(Qme,wJo),e(uc,AJo),e(vr,LJo),e(vr,Hy),e(Hy,BJo),e(Hy,Hme),e(Hme,xJo),e(Hy,kJo),e(vr,RJo),e(vr,ht),g(Uy,ht,null),e(ht,SJo),e(ht,Ume),e(Ume,PJo),e(ht,$Jo),e(ht,bc),e(bc,IJo),e(bc,Jme),e(Jme,jJo),e(bc,DJo),e(bc,Yme),e(Yme,NJo),e(bc,qJo),e(ht,GJo),e(ht,Kme),e(Kme,OJo),e(ht,XJo),g(Jy,ht,null),e(vr,VJo),e(vr,no),g(Yy,no,null),e(no,zJo),e(no,Zme),e(Zme,WJo),e(no,QJo),e(no,vn),e(vn,HJo),e(vn,ege),e(ege,UJo),e(vn,JJo),e(vn,oge),e(oge,YJo),e(vn,KJo),e(vn,rge),e(rge,ZJo),e(vn,eYo),e(no,oYo),e(no,tge),e(tge,C6),e(C6,age),e(age,rYo),e(C6,tYo),e(C6,Oq),e(Oq,aYo),e(C6,nYo),e(no,sYo),e(no,M6),e(M6,lYo),e(M6,nge),e(nge,iYo),e(M6,dYo),e(M6,sge),e(sge,cYo),e(no,fYo),e(no,lge),e(lge,mYo),e(no,gYo),g(Ky,no,null),b(d,zRe,u),b(d,vc,u),e(vc,E6),e(E6,ige),g(Zy,ige,null),e(vc,hYo),e(vc,dge),e(dge,pYo),b(d,WRe,u),b(d,Tr,u),g(ew,Tr,null),e(Tr,_Yo),e(Tr,Tc),e(Tc,uYo),e(Tc,cge),e(cge,bYo),e(Tc,vYo),e(Tc,fge),e(fge,TYo),e(Tc,FYo),e(Tr,CYo),e(Tr,ow),e(ow,MYo),e(ow,mge),e(mge,EYo),e(ow,yYo),e(Tr,wYo),e(Tr,pt),g(rw,pt,null),e(pt,AYo),e(pt,gge),e(gge,LYo),e(pt,BYo),e(pt,Fc),e(Fc,xYo),e(Fc,hge),e(hge,kYo),e(Fc,RYo),e(Fc,pge),e(pge,SYo),e(Fc,PYo),e(pt,$Yo),e(pt,_ge),e(_ge,IYo),e(pt,jYo),g(tw,pt,null),e(Tr,DYo),e(Tr,ho),g(aw,ho,null),e(ho,NYo),e(ho,uge),e(uge,qYo),e(ho,GYo),e(ho,Tn),e(Tn,OYo),e(Tn,bge),e(bge,XYo),e(Tn,VYo),e(Tn,vge),e(vge,zYo),e(Tn,WYo),e(Tn,Tge),e(Tge,QYo),e(Tn,HYo),e(ho,UYo),e(ho,B),e(B,y6),e(y6,Fge),e(Fge,JYo),e(y6,YYo),e(y6,Xq),e(Xq,KYo),e(y6,ZYo),e(B,eKo),e(B,w6),e(w6,Cge),e(Cge,oKo),e(w6,rKo),e(w6,Vq),e(Vq,tKo),e(w6,aKo),e(B,nKo),e(B,A6),e(A6,Mge),e(Mge,sKo),e(A6,lKo),e(A6,zq),e(zq,iKo),e(A6,dKo),e(B,cKo),e(B,L6),e(L6,Ege),e(Ege,fKo),e(L6,mKo),e(L6,Wq),e(Wq,gKo),e(L6,hKo),e(B,pKo),e(B,B6),e(B6,yge),e(yge,_Ko),e(B6,uKo),e(B6,Qq),e(Qq,bKo),e(B6,vKo),e(B,TKo),e(B,x6),e(x6,wge),e(wge,FKo),e(x6,CKo),e(x6,Hq),e(Hq,MKo),e(x6,EKo),e(B,yKo),e(B,k6),e(k6,Age),e(Age,wKo),e(k6,AKo),e(k6,Uq),e(Uq,LKo),e(k6,BKo),e(B,xKo),e(B,R6),e(R6,Lge),e(Lge,kKo),e(R6,RKo),e(R6,Jq),e(Jq,SKo),e(R6,PKo),e(B,$Ko),e(B,S6),e(S6,Bge),e(Bge,IKo),e(S6,jKo),e(S6,Yq),e(Yq,DKo),e(S6,NKo),e(B,qKo),e(B,P6),e(P6,xge),e(xge,GKo),e(P6,OKo),e(P6,Kq),e(Kq,XKo),e(P6,VKo),e(B,zKo),e(B,$6),e($6,kge),e(kge,WKo),e($6,QKo),e($6,Zq),e(Zq,HKo),e($6,UKo),e(B,JKo),e(B,I6),e(I6,Rge),e(Rge,YKo),e(I6,KKo),e(I6,eG),e(eG,ZKo),e(I6,eZo),e(B,oZo),e(B,j6),e(j6,Sge),e(Sge,rZo),e(j6,tZo),e(j6,oG),e(oG,aZo),e(j6,nZo),e(B,sZo),e(B,D6),e(D6,Pge),e(Pge,lZo),e(D6,iZo),e(D6,rG),e(rG,dZo),e(D6,cZo),e(B,fZo),e(B,N6),e(N6,$ge),e($ge,mZo),e(N6,gZo),e(N6,tG),e(tG,hZo),e(N6,pZo),e(B,_Zo),e(B,q6),e(q6,Ige),e(Ige,uZo),e(q6,bZo),e(q6,aG),e(aG,vZo),e(q6,TZo),e(B,FZo),e(B,Ws),e(Ws,jge),e(jge,CZo),e(Ws,MZo),e(Ws,nG),e(nG,EZo),e(Ws,yZo),e(Ws,sG),e(sG,wZo),e(Ws,AZo),e(B,LZo),e(B,G6),e(G6,Dge),e(Dge,BZo),e(G6,xZo),e(G6,lG),e(lG,kZo),e(G6,RZo),e(B,SZo),e(B,O6),e(O6,Nge),e(Nge,PZo),e(O6,$Zo),e(O6,iG),e(iG,IZo),e(O6,jZo),e(B,DZo),e(B,X6),e(X6,qge),e(qge,NZo),e(X6,qZo),e(X6,dG),e(dG,GZo),e(X6,OZo),e(B,XZo),e(B,V6),e(V6,Gge),e(Gge,VZo),e(V6,zZo),e(V6,cG),e(cG,WZo),e(V6,QZo),e(B,HZo),e(B,z6),e(z6,Oge),e(Oge,UZo),e(z6,JZo),e(z6,fG),e(fG,YZo),e(z6,KZo),e(B,ZZo),e(B,W6),e(W6,Xge),e(Xge,eer),e(W6,oer),e(W6,mG),e(mG,rer),e(W6,ter),e(B,aer),e(B,Q6),e(Q6,Vge),e(Vge,ner),e(Q6,ser),e(Q6,gG),e(gG,ler),e(Q6,ier),e(B,der),e(B,H6),e(H6,zge),e(zge,cer),e(H6,fer),e(H6,hG),e(hG,mer),e(H6,ger),e(B,her),e(B,U6),e(U6,Wge),e(Wge,per),e(U6,_er),e(U6,pG),e(pG,uer),e(U6,ber),e(B,ver),e(B,J6),e(J6,Qge),e(Qge,Ter),e(J6,Fer),e(J6,_G),e(_G,Cer),e(J6,Mer),e(B,Eer),e(B,Y6),e(Y6,Hge),e(Hge,yer),e(Y6,wer),e(Y6,uG),e(uG,Aer),e(Y6,Ler),e(B,Ber),e(B,K6),e(K6,Uge),e(Uge,xer),e(K6,ker),e(K6,bG),e(bG,Rer),e(K6,Ser),e(B,Per),e(B,Z6),e(Z6,Jge),e(Jge,$er),e(Z6,Ier),e(Z6,vG),e(vG,jer),e(Z6,Der),e(B,Ner),e(B,e0),e(e0,Yge),e(Yge,qer),e(e0,Ger),e(e0,TG),e(TG,Oer),e(e0,Xer),e(B,Ver),e(B,o0),e(o0,Kge),e(Kge,zer),e(o0,Wer),e(o0,FG),e(FG,Qer),e(o0,Her),e(B,Uer),e(B,r0),e(r0,Zge),e(Zge,Jer),e(r0,Yer),e(r0,CG),e(CG,Ker),e(r0,Zer),e(B,eor),e(B,t0),e(t0,ehe),e(ehe,oor),e(t0,ror),e(t0,MG),e(MG,tor),e(t0,aor),e(B,nor),e(B,a0),e(a0,ohe),e(ohe,sor),e(a0,lor),e(a0,EG),e(EG,ior),e(a0,dor),e(B,cor),e(B,n0),e(n0,rhe),e(rhe,mor),e(n0,gor),e(n0,yG),e(yG,hor),e(n0,por),e(B,_or),e(B,s0),e(s0,the),e(the,uor),e(s0,bor),e(s0,wG),e(wG,vor),e(s0,Tor),e(B,For),e(B,l0),e(l0,ahe),e(ahe,Cor),e(l0,Mor),e(l0,AG),e(AG,Eor),e(l0,yor),e(B,wor),e(B,i0),e(i0,nhe),e(nhe,Aor),e(i0,Lor),e(i0,LG),e(LG,Bor),e(i0,xor),e(B,kor),e(B,d0),e(d0,she),e(she,Ror),e(d0,Sor),e(d0,BG),e(BG,Por),e(d0,$or),e(B,Ior),e(B,c0),e(c0,lhe),e(lhe,jor),e(c0,Dor),e(c0,xG),e(xG,Nor),e(c0,qor),e(B,Gor),e(B,f0),e(f0,ihe),e(ihe,Oor),e(f0,Xor),e(f0,kG),e(kG,Vor),e(f0,zor),e(ho,Wor),e(ho,dhe),e(dhe,Qor),e(ho,Hor),g(nw,ho,null),b(d,QRe,u),b(d,Cc,u),e(Cc,m0),e(m0,che),g(sw,che,null),e(Cc,Uor),e(Cc,fhe),e(fhe,Jor),b(d,HRe,u),b(d,Fr,u),g(lw,Fr,null),e(Fr,Yor),e(Fr,Mc),e(Mc,Kor),e(Mc,mhe),e(mhe,Zor),e(Mc,err),e(Mc,ghe),e(ghe,orr),e(Mc,rrr),e(Fr,trr),e(Fr,iw),e(iw,arr),e(iw,hhe),e(hhe,nrr),e(iw,srr),e(Fr,lrr),e(Fr,_t),g(dw,_t,null),e(_t,irr),e(_t,phe),e(phe,drr),e(_t,crr),e(_t,Ec),e(Ec,frr),e(Ec,_he),e(_he,mrr),e(Ec,grr),e(Ec,uhe),e(uhe,hrr),e(Ec,prr),e(_t,_rr),e(_t,bhe),e(bhe,urr),e(_t,brr),g(cw,_t,null),e(Fr,vrr),e(Fr,po),g(fw,po,null),e(po,Trr),e(po,vhe),e(vhe,Frr),e(po,Crr),e(po,Fn),e(Fn,Mrr),e(Fn,The),e(The,Err),e(Fn,yrr),e(Fn,Fhe),e(Fhe,wrr),e(Fn,Arr),e(Fn,Che),e(Che,Lrr),e(Fn,Brr),e(po,xrr),e(po,H),e(H,g0),e(g0,Mhe),e(Mhe,krr),e(g0,Rrr),e(g0,RG),e(RG,Srr),e(g0,Prr),e(H,$rr),e(H,h0),e(h0,Ehe),e(Ehe,Irr),e(h0,jrr),e(h0,SG),e(SG,Drr),e(h0,Nrr),e(H,qrr),e(H,p0),e(p0,yhe),e(yhe,Grr),e(p0,Orr),e(p0,PG),e(PG,Xrr),e(p0,Vrr),e(H,zrr),e(H,_0),e(_0,whe),e(whe,Wrr),e(_0,Qrr),e(_0,$G),e($G,Hrr),e(_0,Urr),e(H,Jrr),e(H,u0),e(u0,Ahe),e(Ahe,Yrr),e(u0,Krr),e(u0,IG),e(IG,Zrr),e(u0,etr),e(H,otr),e(H,b0),e(b0,Lhe),e(Lhe,rtr),e(b0,ttr),e(b0,jG),e(jG,atr),e(b0,ntr),e(H,str),e(H,v0),e(v0,Bhe),e(Bhe,ltr),e(v0,itr),e(v0,DG),e(DG,dtr),e(v0,ctr),e(H,ftr),e(H,T0),e(T0,xhe),e(xhe,mtr),e(T0,gtr),e(T0,NG),e(NG,htr),e(T0,ptr),e(H,_tr),e(H,F0),e(F0,khe),e(khe,utr),e(F0,btr),e(F0,qG),e(qG,vtr),e(F0,Ttr),e(H,Ftr),e(H,C0),e(C0,Rhe),e(Rhe,Ctr),e(C0,Mtr),e(C0,GG),e(GG,Etr),e(C0,ytr),e(H,wtr),e(H,M0),e(M0,She),e(She,Atr),e(M0,Ltr),e(M0,OG),e(OG,Btr),e(M0,xtr),e(H,ktr),e(H,E0),e(E0,Phe),e(Phe,Rtr),e(E0,Str),e(E0,XG),e(XG,Ptr),e(E0,$tr),e(H,Itr),e(H,y0),e(y0,$he),e($he,jtr),e(y0,Dtr),e(y0,VG),e(VG,Ntr),e(y0,qtr),e(H,Gtr),e(H,w0),e(w0,Ihe),e(Ihe,Otr),e(w0,Xtr),e(w0,zG),e(zG,Vtr),e(w0,ztr),e(H,Wtr),e(H,A0),e(A0,jhe),e(jhe,Qtr),e(A0,Htr),e(A0,WG),e(WG,Utr),e(A0,Jtr),e(H,Ytr),e(H,L0),e(L0,Dhe),e(Dhe,Ktr),e(L0,Ztr),e(L0,QG),e(QG,ear),e(L0,oar),e(H,rar),e(H,B0),e(B0,Nhe),e(Nhe,tar),e(B0,aar),e(B0,HG),e(HG,nar),e(B0,sar),e(H,lar),e(H,x0),e(x0,qhe),e(qhe,iar),e(x0,dar),e(x0,UG),e(UG,car),e(x0,far),e(H,mar),e(H,k0),e(k0,Ghe),e(Ghe,gar),e(k0,har),e(k0,JG),e(JG,par),e(k0,_ar),e(H,uar),e(H,R0),e(R0,Ohe),e(Ohe,bar),e(R0,Tar),e(R0,YG),e(YG,Far),e(R0,Car),e(H,Mar),e(H,S0),e(S0,Xhe),e(Xhe,Ear),e(S0,yar),e(S0,KG),e(KG,war),e(S0,Aar),e(H,Lar),e(H,P0),e(P0,Vhe),e(Vhe,Bar),e(P0,xar),e(P0,ZG),e(ZG,kar),e(P0,Rar),e(po,Sar),e(po,zhe),e(zhe,Par),e(po,$ar),g(mw,po,null),b(d,URe,u),b(d,yc,u),e(yc,$0),e($0,Whe),g(gw,Whe,null),e(yc,Iar),e(yc,Qhe),e(Qhe,jar),b(d,JRe,u),b(d,Cr,u),g(hw,Cr,null),e(Cr,Dar),e(Cr,wc),e(wc,Nar),e(wc,Hhe),e(Hhe,qar),e(wc,Gar),e(wc,Uhe),e(Uhe,Oar),e(wc,Xar),e(Cr,Var),e(Cr,pw),e(pw,zar),e(pw,Jhe),e(Jhe,War),e(pw,Qar),e(Cr,Har),e(Cr,ut),g(_w,ut,null),e(ut,Uar),e(ut,Yhe),e(Yhe,Jar),e(ut,Yar),e(ut,Ac),e(Ac,Kar),e(Ac,Khe),e(Khe,Zar),e(Ac,enr),e(Ac,Zhe),e(Zhe,onr),e(Ac,rnr),e(ut,tnr),e(ut,epe),e(epe,anr),e(ut,nnr),g(uw,ut,null),e(Cr,snr),e(Cr,_o),g(bw,_o,null),e(_o,lnr),e(_o,ope),e(ope,inr),e(_o,dnr),e(_o,Cn),e(Cn,cnr),e(Cn,rpe),e(rpe,fnr),e(Cn,mnr),e(Cn,tpe),e(tpe,gnr),e(Cn,hnr),e(Cn,ape),e(ape,pnr),e(Cn,_nr),e(_o,unr),e(_o,ge),e(ge,I0),e(I0,npe),e(npe,bnr),e(I0,vnr),e(I0,eO),e(eO,Tnr),e(I0,Fnr),e(ge,Cnr),e(ge,j0),e(j0,spe),e(spe,Mnr),e(j0,Enr),e(j0,oO),e(oO,ynr),e(j0,wnr),e(ge,Anr),e(ge,D0),e(D0,lpe),e(lpe,Lnr),e(D0,Bnr),e(D0,rO),e(rO,xnr),e(D0,knr),e(ge,Rnr),e(ge,N0),e(N0,ipe),e(ipe,Snr),e(N0,Pnr),e(N0,tO),e(tO,$nr),e(N0,Inr),e(ge,jnr),e(ge,q0),e(q0,dpe),e(dpe,Dnr),e(q0,Nnr),e(q0,aO),e(aO,qnr),e(q0,Gnr),e(ge,Onr),e(ge,G0),e(G0,cpe),e(cpe,Xnr),e(G0,Vnr),e(G0,nO),e(nO,znr),e(G0,Wnr),e(ge,Qnr),e(ge,O0),e(O0,fpe),e(fpe,Hnr),e(O0,Unr),e(O0,sO),e(sO,Jnr),e(O0,Ynr),e(ge,Knr),e(ge,X0),e(X0,mpe),e(mpe,Znr),e(X0,esr),e(X0,lO),e(lO,osr),e(X0,rsr),e(ge,tsr),e(ge,V0),e(V0,gpe),e(gpe,asr),e(V0,nsr),e(V0,iO),e(iO,ssr),e(V0,lsr),e(ge,isr),e(ge,z0),e(z0,hpe),e(hpe,dsr),e(z0,csr),e(z0,dO),e(dO,fsr),e(z0,msr),e(ge,gsr),e(ge,W0),e(W0,ppe),e(ppe,hsr),e(W0,psr),e(W0,cO),e(cO,_sr),e(W0,usr),e(_o,bsr),e(_o,_pe),e(_pe,vsr),e(_o,Tsr),g(vw,_o,null),b(d,YRe,u),b(d,Lc,u),e(Lc,Q0),e(Q0,upe),g(Tw,upe,null),e(Lc,Fsr),e(Lc,bpe),e(bpe,Csr),b(d,KRe,u),b(d,Mr,u),g(Fw,Mr,null),e(Mr,Msr),e(Mr,Bc),e(Bc,Esr),e(Bc,vpe),e(vpe,ysr),e(Bc,wsr),e(Bc,Tpe),e(Tpe,Asr),e(Bc,Lsr),e(Mr,Bsr),e(Mr,Cw),e(Cw,xsr),e(Cw,Fpe),e(Fpe,ksr),e(Cw,Rsr),e(Mr,Ssr),e(Mr,bt),g(Mw,bt,null),e(bt,Psr),e(bt,Cpe),e(Cpe,$sr),e(bt,Isr),e(bt,xc),e(xc,jsr),e(xc,Mpe),e(Mpe,Dsr),e(xc,Nsr),e(xc,Epe),e(Epe,qsr),e(xc,Gsr),e(bt,Osr),e(bt,ype),e(ype,Xsr),e(bt,Vsr),g(Ew,bt,null),e(Mr,zsr),e(Mr,uo),g(yw,uo,null),e(uo,Wsr),e(uo,wpe),e(wpe,Qsr),e(uo,Hsr),e(uo,Mn),e(Mn,Usr),e(Mn,Ape),e(Ape,Jsr),e(Mn,Ysr),e(Mn,Lpe),e(Lpe,Ksr),e(Mn,Zsr),e(Mn,Bpe),e(Bpe,elr),e(Mn,olr),e(uo,rlr),e(uo,ww),e(ww,H0),e(H0,xpe),e(xpe,tlr),e(H0,alr),e(H0,fO),e(fO,nlr),e(H0,slr),e(ww,llr),e(ww,U0),e(U0,kpe),e(kpe,ilr),e(U0,dlr),e(U0,mO),e(mO,clr),e(U0,flr),e(uo,mlr),e(uo,Rpe),e(Rpe,glr),e(uo,hlr),g(Aw,uo,null),b(d,ZRe,u),b(d,kc,u),e(kc,J0),e(J0,Spe),g(Lw,Spe,null),e(kc,plr),e(kc,Ppe),e(Ppe,_lr),b(d,eSe,u),b(d,Er,u),g(Bw,Er,null),e(Er,ulr),e(Er,Rc),e(Rc,blr),e(Rc,$pe),e($pe,vlr),e(Rc,Tlr),e(Rc,Ipe),e(Ipe,Flr),e(Rc,Clr),e(Er,Mlr),e(Er,xw),e(xw,Elr),e(xw,jpe),e(jpe,ylr),e(xw,wlr),e(Er,Alr),e(Er,vt),g(kw,vt,null),e(vt,Llr),e(vt,Dpe),e(Dpe,Blr),e(vt,xlr),e(vt,Sc),e(Sc,klr),e(Sc,Npe),e(Npe,Rlr),e(Sc,Slr),e(Sc,qpe),e(qpe,Plr),e(Sc,$lr),e(vt,Ilr),e(vt,Gpe),e(Gpe,jlr),e(vt,Dlr),g(Rw,vt,null),e(Er,Nlr),e(Er,bo),g(Sw,bo,null),e(bo,qlr),e(bo,Ope),e(Ope,Glr),e(bo,Olr),e(bo,En),e(En,Xlr),e(En,Xpe),e(Xpe,Vlr),e(En,zlr),e(En,Vpe),e(Vpe,Wlr),e(En,Qlr),e(En,zpe),e(zpe,Hlr),e(En,Ulr),e(bo,Jlr),e(bo,J),e(J,Y0),e(Y0,Wpe),e(Wpe,Ylr),e(Y0,Klr),e(Y0,gO),e(gO,Zlr),e(Y0,eir),e(J,oir),e(J,K0),e(K0,Qpe),e(Qpe,rir),e(K0,tir),e(K0,hO),e(hO,air),e(K0,nir),e(J,sir),e(J,Z0),e(Z0,Hpe),e(Hpe,lir),e(Z0,iir),e(Z0,pO),e(pO,dir),e(Z0,cir),e(J,fir),e(J,eT),e(eT,Upe),e(Upe,mir),e(eT,gir),e(eT,_O),e(_O,hir),e(eT,pir),e(J,_ir),e(J,oT),e(oT,Jpe),e(Jpe,uir),e(oT,bir),e(oT,uO),e(uO,vir),e(oT,Tir),e(J,Fir),e(J,rT),e(rT,Ype),e(Ype,Cir),e(rT,Mir),e(rT,bO),e(bO,Eir),e(rT,yir),e(J,wir),e(J,tT),e(tT,Kpe),e(Kpe,Air),e(tT,Lir),e(tT,vO),e(vO,Bir),e(tT,xir),e(J,kir),e(J,aT),e(aT,Zpe),e(Zpe,Rir),e(aT,Sir),e(aT,TO),e(TO,Pir),e(aT,$ir),e(J,Iir),e(J,nT),e(nT,e_e),e(e_e,jir),e(nT,Dir),e(nT,FO),e(FO,Nir),e(nT,qir),e(J,Gir),e(J,sT),e(sT,o_e),e(o_e,Oir),e(sT,Xir),e(sT,CO),e(CO,Vir),e(sT,zir),e(J,Wir),e(J,lT),e(lT,r_e),e(r_e,Qir),e(lT,Hir),e(lT,MO),e(MO,Uir),e(lT,Jir),e(J,Yir),e(J,iT),e(iT,t_e),e(t_e,Kir),e(iT,Zir),e(iT,EO),e(EO,edr),e(iT,odr),e(J,rdr),e(J,dT),e(dT,a_e),e(a_e,tdr),e(dT,adr),e(dT,yO),e(yO,ndr),e(dT,sdr),e(J,ldr),e(J,cT),e(cT,n_e),e(n_e,idr),e(cT,ddr),e(cT,wO),e(wO,cdr),e(cT,fdr),e(J,mdr),e(J,fT),e(fT,s_e),e(s_e,gdr),e(fT,hdr),e(fT,AO),e(AO,pdr),e(fT,_dr),e(J,udr),e(J,mT),e(mT,l_e),e(l_e,bdr),e(mT,vdr),e(mT,LO),e(LO,Tdr),e(mT,Fdr),e(J,Cdr),e(J,gT),e(gT,i_e),e(i_e,Mdr),e(gT,Edr),e(gT,BO),e(BO,ydr),e(gT,wdr),e(J,Adr),e(J,hT),e(hT,d_e),e(d_e,Ldr),e(hT,Bdr),e(hT,xO),e(xO,xdr),e(hT,kdr),e(J,Rdr),e(J,pT),e(pT,c_e),e(c_e,Sdr),e(pT,Pdr),e(pT,kO),e(kO,$dr),e(pT,Idr),e(J,jdr),e(J,_T),e(_T,f_e),e(f_e,Ddr),e(_T,Ndr),e(_T,RO),e(RO,qdr),e(_T,Gdr),e(bo,Odr),e(bo,m_e),e(m_e,Xdr),e(bo,Vdr),g(Pw,bo,null),b(d,oSe,u),b(d,Pc,u),e(Pc,uT),e(uT,g_e),g($w,g_e,null),e(Pc,zdr),e(Pc,h_e),e(h_e,Wdr),b(d,rSe,u),b(d,yr,u),g(Iw,yr,null),e(yr,Qdr),e(yr,$c),e($c,Hdr),e($c,p_e),e(p_e,Udr),e($c,Jdr),e($c,__e),e(__e,Ydr),e($c,Kdr),e(yr,Zdr),e(yr,jw),e(jw,ecr),e(jw,u_e),e(u_e,ocr),e(jw,rcr),e(yr,tcr),e(yr,Tt),g(Dw,Tt,null),e(Tt,acr),e(Tt,b_e),e(b_e,ncr),e(Tt,scr),e(Tt,Ic),e(Ic,lcr),e(Ic,v_e),e(v_e,icr),e(Ic,dcr),e(Ic,T_e),e(T_e,ccr),e(Ic,fcr),e(Tt,mcr),e(Tt,F_e),e(F_e,gcr),e(Tt,hcr),g(Nw,Tt,null),e(yr,pcr),e(yr,vo),g(qw,vo,null),e(vo,_cr),e(vo,C_e),e(C_e,ucr),e(vo,bcr),e(vo,yn),e(yn,vcr),e(yn,M_e),e(M_e,Tcr),e(yn,Fcr),e(yn,E_e),e(E_e,Ccr),e(yn,Mcr),e(yn,y_e),e(y_e,Ecr),e(yn,ycr),e(vo,wcr),e(vo,_e),e(_e,bT),e(bT,w_e),e(w_e,Acr),e(bT,Lcr),e(bT,SO),e(SO,Bcr),e(bT,xcr),e(_e,kcr),e(_e,vT),e(vT,A_e),e(A_e,Rcr),e(vT,Scr),e(vT,PO),e(PO,Pcr),e(vT,$cr),e(_e,Icr),e(_e,TT),e(TT,L_e),e(L_e,jcr),e(TT,Dcr),e(TT,$O),e($O,Ncr),e(TT,qcr),e(_e,Gcr),e(_e,FT),e(FT,B_e),e(B_e,Ocr),e(FT,Xcr),e(FT,IO),e(IO,Vcr),e(FT,zcr),e(_e,Wcr),e(_e,CT),e(CT,x_e),e(x_e,Qcr),e(CT,Hcr),e(CT,jO),e(jO,Ucr),e(CT,Jcr),e(_e,Ycr),e(_e,MT),e(MT,k_e),e(k_e,Kcr),e(MT,Zcr),e(MT,DO),e(DO,efr),e(MT,ofr),e(_e,rfr),e(_e,ET),e(ET,R_e),e(R_e,tfr),e(ET,afr),e(ET,NO),e(NO,nfr),e(ET,sfr),e(_e,lfr),e(_e,yT),e(yT,S_e),e(S_e,ifr),e(yT,dfr),e(yT,qO),e(qO,cfr),e(yT,ffr),e(_e,mfr),e(_e,wT),e(wT,P_e),e(P_e,gfr),e(wT,hfr),e(wT,GO),e(GO,pfr),e(wT,_fr),e(_e,ufr),e(_e,AT),e(AT,$_e),e($_e,bfr),e(AT,vfr),e(AT,OO),e(OO,Tfr),e(AT,Ffr),e(vo,Cfr),e(vo,I_e),e(I_e,Mfr),e(vo,Efr),g(Gw,vo,null),b(d,tSe,u),b(d,jc,u),e(jc,LT),e(LT,j_e),g(Ow,j_e,null),e(jc,yfr),e(jc,D_e),e(D_e,wfr),b(d,aSe,u),b(d,wr,u),g(Xw,wr,null),e(wr,Afr),e(wr,Dc),e(Dc,Lfr),e(Dc,N_e),e(N_e,Bfr),e(Dc,xfr),e(Dc,q_e),e(q_e,kfr),e(Dc,Rfr),e(wr,Sfr),e(wr,Vw),e(Vw,Pfr),e(Vw,G_e),e(G_e,$fr),e(Vw,Ifr),e(wr,jfr),e(wr,Ft),g(zw,Ft,null),e(Ft,Dfr),e(Ft,O_e),e(O_e,Nfr),e(Ft,qfr),e(Ft,Nc),e(Nc,Gfr),e(Nc,X_e),e(X_e,Ofr),e(Nc,Xfr),e(Nc,V_e),e(V_e,Vfr),e(Nc,zfr),e(Ft,Wfr),e(Ft,z_e),e(z_e,Qfr),e(Ft,Hfr),g(Ww,Ft,null),e(wr,Ufr),e(wr,To),g(Qw,To,null),e(To,Jfr),e(To,W_e),e(W_e,Yfr),e(To,Kfr),e(To,wn),e(wn,Zfr),e(wn,Q_e),e(Q_e,emr),e(wn,omr),e(wn,H_e),e(H_e,rmr),e(wn,tmr),e(wn,U_e),e(U_e,amr),e(wn,nmr),e(To,smr),e(To,V),e(V,BT),e(BT,J_e),e(J_e,lmr),e(BT,imr),e(BT,XO),e(XO,dmr),e(BT,cmr),e(V,fmr),e(V,xT),e(xT,Y_e),e(Y_e,mmr),e(xT,gmr),e(xT,VO),e(VO,hmr),e(xT,pmr),e(V,_mr),e(V,kT),e(kT,K_e),e(K_e,umr),e(kT,bmr),e(kT,zO),e(zO,vmr),e(kT,Tmr),e(V,Fmr),e(V,RT),e(RT,Z_e),e(Z_e,Cmr),e(RT,Mmr),e(RT,WO),e(WO,Emr),e(RT,ymr),e(V,wmr),e(V,ST),e(ST,eue),e(eue,Amr),e(ST,Lmr),e(ST,QO),e(QO,Bmr),e(ST,xmr),e(V,kmr),e(V,PT),e(PT,oue),e(oue,Rmr),e(PT,Smr),e(PT,HO),e(HO,Pmr),e(PT,$mr),e(V,Imr),e(V,$T),e($T,rue),e(rue,jmr),e($T,Dmr),e($T,UO),e(UO,Nmr),e($T,qmr),e(V,Gmr),e(V,IT),e(IT,tue),e(tue,Omr),e(IT,Xmr),e(IT,JO),e(JO,Vmr),e(IT,zmr),e(V,Wmr),e(V,jT),e(jT,aue),e(aue,Qmr),e(jT,Hmr),e(jT,YO),e(YO,Umr),e(jT,Jmr),e(V,Ymr),e(V,DT),e(DT,nue),e(nue,Kmr),e(DT,Zmr),e(DT,KO),e(KO,egr),e(DT,ogr),e(V,rgr),e(V,NT),e(NT,sue),e(sue,tgr),e(NT,agr),e(NT,ZO),e(ZO,ngr),e(NT,sgr),e(V,lgr),e(V,qT),e(qT,lue),e(lue,igr),e(qT,dgr),e(qT,eX),e(eX,cgr),e(qT,fgr),e(V,mgr),e(V,GT),e(GT,iue),e(iue,ggr),e(GT,hgr),e(GT,oX),e(oX,pgr),e(GT,_gr),e(V,ugr),e(V,OT),e(OT,due),e(due,bgr),e(OT,vgr),e(OT,rX),e(rX,Tgr),e(OT,Fgr),e(V,Cgr),e(V,XT),e(XT,cue),e(cue,Mgr),e(XT,Egr),e(XT,tX),e(tX,ygr),e(XT,wgr),e(V,Agr),e(V,VT),e(VT,fue),e(fue,Lgr),e(VT,Bgr),e(VT,aX),e(aX,xgr),e(VT,kgr),e(V,Rgr),e(V,zT),e(zT,mue),e(mue,Sgr),e(zT,Pgr),e(zT,nX),e(nX,$gr),e(zT,Igr),e(V,jgr),e(V,WT),e(WT,gue),e(gue,Dgr),e(WT,Ngr),e(WT,sX),e(sX,qgr),e(WT,Ggr),e(V,Ogr),e(V,QT),e(QT,hue),e(hue,Xgr),e(QT,Vgr),e(QT,lX),e(lX,zgr),e(QT,Wgr),e(V,Qgr),e(V,HT),e(HT,pue),e(pue,Hgr),e(HT,Ugr),e(HT,iX),e(iX,Jgr),e(HT,Ygr),e(V,Kgr),e(V,UT),e(UT,_ue),e(_ue,Zgr),e(UT,ehr),e(UT,dX),e(dX,ohr),e(UT,rhr),e(V,thr),e(V,JT),e(JT,uue),e(uue,ahr),e(JT,nhr),e(JT,cX),e(cX,shr),e(JT,lhr),e(V,ihr),e(V,YT),e(YT,bue),e(bue,dhr),e(YT,chr),e(YT,fX),e(fX,fhr),e(YT,mhr),e(V,ghr),e(V,KT),e(KT,vue),e(vue,hhr),e(KT,phr),e(KT,mX),e(mX,_hr),e(KT,uhr),e(V,bhr),e(V,ZT),e(ZT,Tue),e(Tue,vhr),e(ZT,Thr),e(ZT,gX),e(gX,Fhr),e(ZT,Chr),e(To,Mhr),e(To,Fue),e(Fue,Ehr),e(To,yhr),g(Hw,To,null),b(d,nSe,u),b(d,qc,u),e(qc,e8),e(e8,Cue),g(Uw,Cue,null),e(qc,whr),e(qc,Mue),e(Mue,Ahr),b(d,sSe,u),b(d,Ar,u),g(Jw,Ar,null),e(Ar,Lhr),e(Ar,Gc),e(Gc,Bhr),e(Gc,Eue),e(Eue,xhr),e(Gc,khr),e(Gc,yue),e(yue,Rhr),e(Gc,Shr),e(Ar,Phr),e(Ar,Yw),e(Yw,$hr),e(Yw,wue),e(wue,Ihr),e(Yw,jhr),e(Ar,Dhr),e(Ar,Ct),g(Kw,Ct,null),e(Ct,Nhr),e(Ct,Aue),e(Aue,qhr),e(Ct,Ghr),e(Ct,Oc),e(Oc,Ohr),e(Oc,Lue),e(Lue,Xhr),e(Oc,Vhr),e(Oc,Bue),e(Bue,zhr),e(Oc,Whr),e(Ct,Qhr),e(Ct,xue),e(xue,Hhr),e(Ct,Uhr),g(Zw,Ct,null),e(Ar,Jhr),e(Ar,Fo),g(eA,Fo,null),e(Fo,Yhr),e(Fo,kue),e(kue,Khr),e(Fo,Zhr),e(Fo,An),e(An,epr),e(An,Rue),e(Rue,opr),e(An,rpr),e(An,Sue),e(Sue,tpr),e(An,apr),e(An,Pue),e(Pue,npr),e(An,spr),e(Fo,lpr),e(Fo,ae),e(ae,o8),e(o8,$ue),e($ue,ipr),e(o8,dpr),e(o8,hX),e(hX,cpr),e(o8,fpr),e(ae,mpr),e(ae,r8),e(r8,Iue),e(Iue,gpr),e(r8,hpr),e(r8,pX),e(pX,ppr),e(r8,_pr),e(ae,upr),e(ae,t8),e(t8,jue),e(jue,bpr),e(t8,vpr),e(t8,_X),e(_X,Tpr),e(t8,Fpr),e(ae,Cpr),e(ae,a8),e(a8,Due),e(Due,Mpr),e(a8,Epr),e(a8,uX),e(uX,ypr),e(a8,wpr),e(ae,Apr),e(ae,n8),e(n8,Nue),e(Nue,Lpr),e(n8,Bpr),e(n8,bX),e(bX,xpr),e(n8,kpr),e(ae,Rpr),e(ae,s8),e(s8,que),e(que,Spr),e(s8,Ppr),e(s8,vX),e(vX,$pr),e(s8,Ipr),e(ae,jpr),e(ae,l8),e(l8,Gue),e(Gue,Dpr),e(l8,Npr),e(l8,TX),e(TX,qpr),e(l8,Gpr),e(ae,Opr),e(ae,i8),e(i8,Oue),e(Oue,Xpr),e(i8,Vpr),e(i8,FX),e(FX,zpr),e(i8,Wpr),e(ae,Qpr),e(ae,d8),e(d8,Xue),e(Xue,Hpr),e(d8,Upr),e(d8,CX),e(CX,Jpr),e(d8,Ypr),e(ae,Kpr),e(ae,c8),e(c8,Vue),e(Vue,Zpr),e(c8,e_r),e(c8,MX),e(MX,o_r),e(c8,r_r),e(ae,t_r),e(ae,f8),e(f8,zue),e(zue,a_r),e(f8,n_r),e(f8,EX),e(EX,s_r),e(f8,l_r),e(ae,i_r),e(ae,m8),e(m8,Wue),e(Wue,d_r),e(m8,c_r),e(m8,yX),e(yX,f_r),e(m8,m_r),e(ae,g_r),e(ae,g8),e(g8,Que),e(Que,h_r),e(g8,p_r),e(g8,wX),e(wX,__r),e(g8,u_r),e(ae,b_r),e(ae,h8),e(h8,Hue),e(Hue,v_r),e(h8,T_r),e(h8,AX),e(AX,F_r),e(h8,C_r),e(ae,M_r),e(ae,p8),e(p8,Uue),e(Uue,E_r),e(p8,y_r),e(p8,LX),e(LX,w_r),e(p8,A_r),e(ae,L_r),e(ae,_8),e(_8,Jue),e(Jue,B_r),e(_8,x_r),e(_8,BX),e(BX,k_r),e(_8,R_r),e(ae,S_r),e(ae,u8),e(u8,Yue),e(Yue,P_r),e(u8,$_r),e(u8,xX),e(xX,I_r),e(u8,j_r),e(Fo,D_r),e(Fo,Kue),e(Kue,N_r),e(Fo,q_r),g(oA,Fo,null),b(d,lSe,u),b(d,Xc,u),e(Xc,b8),e(b8,Zue),g(rA,Zue,null),e(Xc,G_r),e(Xc,e1e),e(e1e,O_r),b(d,iSe,u),b(d,Lr,u),g(tA,Lr,null),e(Lr,X_r),e(Lr,Vc),e(Vc,V_r),e(Vc,o1e),e(o1e,z_r),e(Vc,W_r),e(Vc,r1e),e(r1e,Q_r),e(Vc,H_r),e(Lr,U_r),e(Lr,aA),e(aA,J_r),e(aA,t1e),e(t1e,Y_r),e(aA,K_r),e(Lr,Z_r),e(Lr,Mt),g(nA,Mt,null),e(Mt,eur),e(Mt,a1e),e(a1e,our),e(Mt,rur),e(Mt,zc),e(zc,tur),e(zc,n1e),e(n1e,aur),e(zc,nur),e(zc,s1e),e(s1e,sur),e(zc,lur),e(Mt,iur),e(Mt,l1e),e(l1e,dur),e(Mt,cur),g(sA,Mt,null),e(Lr,fur),e(Lr,Co),g(lA,Co,null),e(Co,mur),e(Co,i1e),e(i1e,gur),e(Co,hur),e(Co,Ln),e(Ln,pur),e(Ln,d1e),e(d1e,_ur),e(Ln,uur),e(Ln,c1e),e(c1e,bur),e(Ln,vur),e(Ln,f1e),e(f1e,Tur),e(Ln,Fur),e(Co,Cur),e(Co,m1e),e(m1e,v8),e(v8,g1e),e(g1e,Mur),e(v8,Eur),e(v8,kX),e(kX,yur),e(v8,wur),e(Co,Aur),e(Co,h1e),e(h1e,Lur),e(Co,Bur),g(iA,Co,null),b(d,dSe,u),b(d,Wc,u),e(Wc,T8),e(T8,p1e),g(dA,p1e,null),e(Wc,xur),e(Wc,_1e),e(_1e,kur),b(d,cSe,u),b(d,Br,u),g(cA,Br,null),e(Br,Rur),e(Br,Qc),e(Qc,Sur),e(Qc,u1e),e(u1e,Pur),e(Qc,$ur),e(Qc,b1e),e(b1e,Iur),e(Qc,jur),e(Br,Dur),e(Br,fA),e(fA,Nur),e(fA,v1e),e(v1e,qur),e(fA,Gur),e(Br,Our),e(Br,Et),g(mA,Et,null),e(Et,Xur),e(Et,T1e),e(T1e,Vur),e(Et,zur),e(Et,Hc),e(Hc,Wur),e(Hc,F1e),e(F1e,Qur),e(Hc,Hur),e(Hc,C1e),e(C1e,Uur),e(Hc,Jur),e(Et,Yur),e(Et,M1e),e(M1e,Kur),e(Et,Zur),g(gA,Et,null),e(Br,e1r),e(Br,Mo),g(hA,Mo,null),e(Mo,o1r),e(Mo,E1e),e(E1e,r1r),e(Mo,t1r),e(Mo,Bn),e(Bn,a1r),e(Bn,y1e),e(y1e,n1r),e(Bn,s1r),e(Bn,w1e),e(w1e,l1r),e(Bn,i1r),e(Bn,A1e),e(A1e,d1r),e(Bn,c1r),e(Mo,f1r),e(Mo,Y),e(Y,F8),e(F8,L1e),e(L1e,m1r),e(F8,g1r),e(F8,RX),e(RX,h1r),e(F8,p1r),e(Y,_1r),e(Y,C8),e(C8,B1e),e(B1e,u1r),e(C8,b1r),e(C8,SX),e(SX,v1r),e(C8,T1r),e(Y,F1r),e(Y,M8),e(M8,x1e),e(x1e,C1r),e(M8,M1r),e(M8,PX),e(PX,E1r),e(M8,y1r),e(Y,w1r),e(Y,E8),e(E8,k1e),e(k1e,A1r),e(E8,L1r),e(E8,$X),e($X,B1r),e(E8,x1r),e(Y,k1r),e(Y,y8),e(y8,R1e),e(R1e,R1r),e(y8,S1r),e(y8,IX),e(IX,P1r),e(y8,$1r),e(Y,I1r),e(Y,w8),e(w8,S1e),e(S1e,j1r),e(w8,D1r),e(w8,jX),e(jX,N1r),e(w8,q1r),e(Y,G1r),e(Y,A8),e(A8,P1e),e(P1e,O1r),e(A8,X1r),e(A8,DX),e(DX,V1r),e(A8,z1r),e(Y,W1r),e(Y,L8),e(L8,$1e),e($1e,Q1r),e(L8,H1r),e(L8,NX),e(NX,U1r),e(L8,J1r),e(Y,Y1r),e(Y,B8),e(B8,I1e),e(I1e,K1r),e(B8,Z1r),e(B8,qX),e(qX,ebr),e(B8,obr),e(Y,rbr),e(Y,x8),e(x8,j1e),e(j1e,tbr),e(x8,abr),e(x8,GX),e(GX,nbr),e(x8,sbr),e(Y,lbr),e(Y,k8),e(k8,D1e),e(D1e,ibr),e(k8,dbr),e(k8,OX),e(OX,cbr),e(k8,fbr),e(Y,mbr),e(Y,R8),e(R8,N1e),e(N1e,gbr),e(R8,hbr),e(R8,XX),e(XX,pbr),e(R8,_br),e(Y,ubr),e(Y,S8),e(S8,q1e),e(q1e,bbr),e(S8,vbr),e(S8,VX),e(VX,Tbr),e(S8,Fbr),e(Y,Cbr),e(Y,P8),e(P8,G1e),e(G1e,Mbr),e(P8,Ebr),e(P8,zX),e(zX,ybr),e(P8,wbr),e(Y,Abr),e(Y,$8),e($8,O1e),e(O1e,Lbr),e($8,Bbr),e($8,WX),e(WX,xbr),e($8,kbr),e(Y,Rbr),e(Y,I8),e(I8,X1e),e(X1e,Sbr),e(I8,Pbr),e(I8,QX),e(QX,$br),e(I8,Ibr),e(Y,jbr),e(Y,j8),e(j8,V1e),e(V1e,Dbr),e(j8,Nbr),e(j8,HX),e(HX,qbr),e(j8,Gbr),e(Y,Obr),e(Y,D8),e(D8,z1e),e(z1e,Xbr),e(D8,Vbr),e(D8,UX),e(UX,zbr),e(D8,Wbr),e(Y,Qbr),e(Y,N8),e(N8,W1e),e(W1e,Hbr),e(N8,Ubr),e(N8,JX),e(JX,Jbr),e(N8,Ybr),e(Y,Kbr),e(Y,q8),e(q8,Q1e),e(Q1e,Zbr),e(q8,e5r),e(q8,YX),e(YX,o5r),e(q8,r5r),e(Mo,t5r),e(Mo,H1e),e(H1e,a5r),e(Mo,n5r),g(pA,Mo,null),b(d,fSe,u),b(d,Uc,u),e(Uc,G8),e(G8,U1e),g(_A,U1e,null),e(Uc,s5r),e(Uc,J1e),e(J1e,l5r),b(d,mSe,u),b(d,xr,u),g(uA,xr,null),e(xr,i5r),e(xr,Jc),e(Jc,d5r),e(Jc,Y1e),e(Y1e,c5r),e(Jc,f5r),e(Jc,K1e),e(K1e,m5r),e(Jc,g5r),e(xr,h5r),e(xr,bA),e(bA,p5r),e(bA,Z1e),e(Z1e,_5r),e(bA,u5r),e(xr,b5r),e(xr,yt),g(vA,yt,null),e(yt,v5r),e(yt,ebe),e(ebe,T5r),e(yt,F5r),e(yt,Yc),e(Yc,C5r),e(Yc,obe),e(obe,M5r),e(Yc,E5r),e(Yc,rbe),e(rbe,y5r),e(Yc,w5r),e(yt,A5r),e(yt,tbe),e(tbe,L5r),e(yt,B5r),g(TA,yt,null),e(xr,x5r),e(xr,Eo),g(FA,Eo,null),e(Eo,k5r),e(Eo,abe),e(abe,R5r),e(Eo,S5r),e(Eo,xn),e(xn,P5r),e(xn,nbe),e(nbe,$5r),e(xn,I5r),e(xn,sbe),e(sbe,j5r),e(xn,D5r),e(xn,lbe),e(lbe,N5r),e(xn,q5r),e(Eo,G5r),e(Eo,Z),e(Z,O8),e(O8,ibe),e(ibe,O5r),e(O8,X5r),e(O8,KX),e(KX,V5r),e(O8,z5r),e(Z,W5r),e(Z,X8),e(X8,dbe),e(dbe,Q5r),e(X8,H5r),e(X8,ZX),e(ZX,U5r),e(X8,J5r),e(Z,Y5r),e(Z,V8),e(V8,cbe),e(cbe,K5r),e(V8,Z5r),e(V8,eV),e(eV,e2r),e(V8,o2r),e(Z,r2r),e(Z,z8),e(z8,fbe),e(fbe,t2r),e(z8,a2r),e(z8,oV),e(oV,n2r),e(z8,s2r),e(Z,l2r),e(Z,W8),e(W8,mbe),e(mbe,i2r),e(W8,d2r),e(W8,rV),e(rV,c2r),e(W8,f2r),e(Z,m2r),e(Z,Q8),e(Q8,gbe),e(gbe,g2r),e(Q8,h2r),e(Q8,tV),e(tV,p2r),e(Q8,_2r),e(Z,u2r),e(Z,H8),e(H8,hbe),e(hbe,b2r),e(H8,v2r),e(H8,aV),e(aV,T2r),e(H8,F2r),e(Z,C2r),e(Z,U8),e(U8,pbe),e(pbe,M2r),e(U8,E2r),e(U8,nV),e(nV,y2r),e(U8,w2r),e(Z,A2r),e(Z,J8),e(J8,_be),e(_be,L2r),e(J8,B2r),e(J8,sV),e(sV,x2r),e(J8,k2r),e(Z,R2r),e(Z,Y8),e(Y8,ube),e(ube,S2r),e(Y8,P2r),e(Y8,lV),e(lV,$2r),e(Y8,I2r),e(Z,j2r),e(Z,K8),e(K8,bbe),e(bbe,D2r),e(K8,N2r),e(K8,iV),e(iV,q2r),e(K8,G2r),e(Z,O2r),e(Z,Z8),e(Z8,vbe),e(vbe,X2r),e(Z8,V2r),e(Z8,dV),e(dV,z2r),e(Z8,W2r),e(Z,Q2r),e(Z,eF),e(eF,Tbe),e(Tbe,H2r),e(eF,U2r),e(eF,cV),e(cV,J2r),e(eF,Y2r),e(Z,K2r),e(Z,oF),e(oF,Fbe),e(Fbe,Z2r),e(oF,evr),e(oF,fV),e(fV,ovr),e(oF,rvr),e(Z,tvr),e(Z,rF),e(rF,Cbe),e(Cbe,avr),e(rF,nvr),e(rF,mV),e(mV,svr),e(rF,lvr),e(Z,ivr),e(Z,tF),e(tF,Mbe),e(Mbe,dvr),e(tF,cvr),e(tF,gV),e(gV,fvr),e(tF,mvr),e(Z,gvr),e(Z,aF),e(aF,Ebe),e(Ebe,hvr),e(aF,pvr),e(aF,hV),e(hV,_vr),e(aF,uvr),e(Z,bvr),e(Z,nF),e(nF,ybe),e(ybe,vvr),e(nF,Tvr),e(nF,pV),e(pV,Fvr),e(nF,Cvr),e(Z,Mvr),e(Z,sF),e(sF,wbe),e(wbe,Evr),e(sF,yvr),e(sF,_V),e(_V,wvr),e(sF,Avr),e(Eo,Lvr),e(Eo,Abe),e(Abe,Bvr),e(Eo,xvr),g(CA,Eo,null),b(d,gSe,u),b(d,Kc,u),e(Kc,lF),e(lF,Lbe),g(MA,Lbe,null),e(Kc,kvr),e(Kc,Bbe),e(Bbe,Rvr),b(d,hSe,u),b(d,kr,u),g(EA,kr,null),e(kr,Svr),e(kr,Zc),e(Zc,Pvr),e(Zc,xbe),e(xbe,$vr),e(Zc,Ivr),e(Zc,kbe),e(kbe,jvr),e(Zc,Dvr),e(kr,Nvr),e(kr,yA),e(yA,qvr),e(yA,Rbe),e(Rbe,Gvr),e(yA,Ovr),e(kr,Xvr),e(kr,wt),g(wA,wt,null),e(wt,Vvr),e(wt,Sbe),e(Sbe,zvr),e(wt,Wvr),e(wt,ef),e(ef,Qvr),e(ef,Pbe),e(Pbe,Hvr),e(ef,Uvr),e(ef,$be),e($be,Jvr),e(ef,Yvr),e(wt,Kvr),e(wt,Ibe),e(Ibe,Zvr),e(wt,e6r),g(AA,wt,null),e(kr,o6r),e(kr,yo),g(LA,yo,null),e(yo,r6r),e(yo,jbe),e(jbe,t6r),e(yo,a6r),e(yo,kn),e(kn,n6r),e(kn,Dbe),e(Dbe,s6r),e(kn,l6r),e(kn,Nbe),e(Nbe,i6r),e(kn,d6r),e(kn,qbe),e(qbe,c6r),e(kn,f6r),e(yo,m6r),e(yo,Gbe),e(Gbe,iF),e(iF,Obe),e(Obe,g6r),e(iF,h6r),e(iF,uV),e(uV,p6r),e(iF,_6r),e(yo,u6r),e(yo,Xbe),e(Xbe,b6r),e(yo,v6r),g(BA,yo,null),b(d,pSe,u),b(d,of,u),e(of,dF),e(dF,Vbe),g(xA,Vbe,null),e(of,T6r),e(of,zbe),e(zbe,F6r),b(d,_Se,u),b(d,Rr,u),g(kA,Rr,null),e(Rr,C6r),e(Rr,rf),e(rf,M6r),e(rf,Wbe),e(Wbe,E6r),e(rf,y6r),e(rf,Qbe),e(Qbe,w6r),e(rf,A6r),e(Rr,L6r),e(Rr,RA),e(RA,B6r),e(RA,Hbe),e(Hbe,x6r),e(RA,k6r),e(Rr,R6r),e(Rr,At),g(SA,At,null),e(At,S6r),e(At,Ube),e(Ube,P6r),e(At,$6r),e(At,tf),e(tf,I6r),e(tf,Jbe),e(Jbe,j6r),e(tf,D6r),e(tf,Ybe),e(Ybe,N6r),e(tf,q6r),e(At,G6r),e(At,Kbe),e(Kbe,O6r),e(At,X6r),g(PA,At,null),e(Rr,V6r),e(Rr,wo),g($A,wo,null),e(wo,z6r),e(wo,Zbe),e(Zbe,W6r),e(wo,Q6r),e(wo,Rn),e(Rn,H6r),e(Rn,e5e),e(e5e,U6r),e(Rn,J6r),e(Rn,o5e),e(o5e,Y6r),e(Rn,K6r),e(Rn,r5e),e(r5e,Z6r),e(Rn,e0r),e(wo,o0r),e(wo,t5e),e(t5e,cF),e(cF,a5e),e(a5e,r0r),e(cF,t0r),e(cF,bV),e(bV,a0r),e(cF,n0r),e(wo,s0r),e(wo,n5e),e(n5e,l0r),e(wo,i0r),g(IA,wo,null),b(d,uSe,u),b(d,af,u),e(af,fF),e(fF,s5e),g(jA,s5e,null),e(af,d0r),e(af,l5e),e(l5e,c0r),b(d,bSe,u),b(d,Sr,u),g(DA,Sr,null),e(Sr,f0r),e(Sr,nf),e(nf,m0r),e(nf,i5e),e(i5e,g0r),e(nf,h0r),e(nf,d5e),e(d5e,p0r),e(nf,_0r),e(Sr,u0r),e(Sr,NA),e(NA,b0r),e(NA,c5e),e(c5e,v0r),e(NA,T0r),e(Sr,F0r),e(Sr,Lt),g(qA,Lt,null),e(Lt,C0r),e(Lt,f5e),e(f5e,M0r),e(Lt,E0r),e(Lt,sf),e(sf,y0r),e(sf,m5e),e(m5e,w0r),e(sf,A0r),e(sf,g5e),e(g5e,L0r),e(sf,B0r),e(Lt,x0r),e(Lt,h5e),e(h5e,k0r),e(Lt,R0r),g(GA,Lt,null),e(Sr,S0r),e(Sr,Ao),g(OA,Ao,null),e(Ao,P0r),e(Ao,p5e),e(p5e,$0r),e(Ao,I0r),e(Ao,Sn),e(Sn,j0r),e(Sn,_5e),e(_5e,D0r),e(Sn,N0r),e(Sn,u5e),e(u5e,q0r),e(Sn,G0r),e(Sn,b5e),e(b5e,O0r),e(Sn,X0r),e(Ao,V0r),e(Ao,z),e(z,mF),e(mF,v5e),e(v5e,z0r),e(mF,W0r),e(mF,vV),e(vV,Q0r),e(mF,H0r),e(z,U0r),e(z,gF),e(gF,T5e),e(T5e,J0r),e(gF,Y0r),e(gF,TV),e(TV,K0r),e(gF,Z0r),e(z,eTr),e(z,hF),e(hF,F5e),e(F5e,oTr),e(hF,rTr),e(hF,FV),e(FV,tTr),e(hF,aTr),e(z,nTr),e(z,pF),e(pF,C5e),e(C5e,sTr),e(pF,lTr),e(pF,CV),e(CV,iTr),e(pF,dTr),e(z,cTr),e(z,_F),e(_F,M5e),e(M5e,fTr),e(_F,mTr),e(_F,MV),e(MV,gTr),e(_F,hTr),e(z,pTr),e(z,uF),e(uF,E5e),e(E5e,_Tr),e(uF,uTr),e(uF,EV),e(EV,bTr),e(uF,vTr),e(z,TTr),e(z,bF),e(bF,y5e),e(y5e,FTr),e(bF,CTr),e(bF,yV),e(yV,MTr),e(bF,ETr),e(z,yTr),e(z,vF),e(vF,w5e),e(w5e,wTr),e(vF,ATr),e(vF,wV),e(wV,LTr),e(vF,BTr),e(z,xTr),e(z,TF),e(TF,A5e),e(A5e,kTr),e(TF,RTr),e(TF,AV),e(AV,STr),e(TF,PTr),e(z,$Tr),e(z,FF),e(FF,L5e),e(L5e,ITr),e(FF,jTr),e(FF,LV),e(LV,DTr),e(FF,NTr),e(z,qTr),e(z,CF),e(CF,B5e),e(B5e,GTr),e(CF,OTr),e(CF,BV),e(BV,XTr),e(CF,VTr),e(z,zTr),e(z,MF),e(MF,x5e),e(x5e,WTr),e(MF,QTr),e(MF,xV),e(xV,HTr),e(MF,UTr),e(z,JTr),e(z,EF),e(EF,k5e),e(k5e,YTr),e(EF,KTr),e(EF,kV),e(kV,ZTr),e(EF,e8r),e(z,o8r),e(z,yF),e(yF,R5e),e(R5e,r8r),e(yF,t8r),e(yF,RV),e(RV,a8r),e(yF,n8r),e(z,s8r),e(z,wF),e(wF,S5e),e(S5e,l8r),e(wF,i8r),e(wF,SV),e(SV,d8r),e(wF,c8r),e(z,f8r),e(z,AF),e(AF,P5e),e(P5e,m8r),e(AF,g8r),e(AF,PV),e(PV,h8r),e(AF,p8r),e(z,_8r),e(z,LF),e(LF,$5e),e($5e,u8r),e(LF,b8r),e(LF,$V),e($V,v8r),e(LF,T8r),e(z,F8r),e(z,BF),e(BF,I5e),e(I5e,C8r),e(BF,M8r),e(BF,IV),e(IV,E8r),e(BF,y8r),e(z,w8r),e(z,xF),e(xF,j5e),e(j5e,A8r),e(xF,L8r),e(xF,jV),e(jV,B8r),e(xF,x8r),e(z,k8r),e(z,kF),e(kF,D5e),e(D5e,R8r),e(kF,S8r),e(kF,DV),e(DV,P8r),e(kF,$8r),e(z,I8r),e(z,RF),e(RF,N5e),e(N5e,j8r),e(RF,D8r),e(RF,NV),e(NV,N8r),e(RF,q8r),e(z,G8r),e(z,SF),e(SF,q5e),e(q5e,O8r),e(SF,X8r),e(SF,qV),e(qV,V8r),e(SF,z8r),e(z,W8r),e(z,PF),e(PF,G5e),e(G5e,Q8r),e(PF,H8r),e(PF,GV),e(GV,U8r),e(PF,J8r),e(z,Y8r),e(z,$F),e($F,O5e),e(O5e,K8r),e($F,Z8r),e($F,OV),e(OV,eFr),e($F,oFr),e(z,rFr),e(z,IF),e(IF,X5e),e(X5e,tFr),e(IF,aFr),e(IF,XV),e(XV,nFr),e(IF,sFr),e(Ao,lFr),e(Ao,V5e),e(V5e,iFr),e(Ao,dFr),g(XA,Ao,null),b(d,vSe,u),b(d,lf,u),e(lf,jF),e(jF,z5e),g(VA,z5e,null),e(lf,cFr),e(lf,W5e),e(W5e,fFr),b(d,TSe,u),b(d,Pr,u),g(zA,Pr,null),e(Pr,mFr),e(Pr,df),e(df,gFr),e(df,Q5e),e(Q5e,hFr),e(df,pFr),e(df,H5e),e(H5e,_Fr),e(df,uFr),e(Pr,bFr),e(Pr,WA),e(WA,vFr),e(WA,U5e),e(U5e,TFr),e(WA,FFr),e(Pr,CFr),e(Pr,Bt),g(QA,Bt,null),e(Bt,MFr),e(Bt,J5e),e(J5e,EFr),e(Bt,yFr),e(Bt,cf),e(cf,wFr),e(cf,Y5e),e(Y5e,AFr),e(cf,LFr),e(cf,K5e),e(K5e,BFr),e(cf,xFr),e(Bt,kFr),e(Bt,Z5e),e(Z5e,RFr),e(Bt,SFr),g(HA,Bt,null),e(Pr,PFr),e(Pr,Lo),g(UA,Lo,null),e(Lo,$Fr),e(Lo,e2e),e(e2e,IFr),e(Lo,jFr),e(Lo,Pn),e(Pn,DFr),e(Pn,o2e),e(o2e,NFr),e(Pn,qFr),e(Pn,r2e),e(r2e,GFr),e(Pn,OFr),e(Pn,t2e),e(t2e,XFr),e(Pn,VFr),e(Lo,zFr),e(Lo,ga),e(ga,DF),e(DF,a2e),e(a2e,WFr),e(DF,QFr),e(DF,VV),e(VV,HFr),e(DF,UFr),e(ga,JFr),e(ga,NF),e(NF,n2e),e(n2e,YFr),e(NF,KFr),e(NF,zV),e(zV,ZFr),e(NF,eCr),e(ga,oCr),e(ga,qF),e(qF,s2e),e(s2e,rCr),e(qF,tCr),e(qF,WV),e(WV,aCr),e(qF,nCr),e(ga,sCr),e(ga,GF),e(GF,l2e),e(l2e,lCr),e(GF,iCr),e(GF,QV),e(QV,dCr),e(GF,cCr),e(ga,fCr),e(ga,OF),e(OF,i2e),e(i2e,mCr),e(OF,gCr),e(OF,HV),e(HV,hCr),e(OF,pCr),e(Lo,_Cr),e(Lo,d2e),e(d2e,uCr),e(Lo,bCr),g(JA,Lo,null),b(d,FSe,u),b(d,ff,u),e(ff,XF),e(XF,c2e),g(YA,c2e,null),e(ff,vCr),e(ff,f2e),e(f2e,TCr),b(d,CSe,u),b(d,$r,u),g(KA,$r,null),e($r,FCr),e($r,mf),e(mf,CCr),e(mf,m2e),e(m2e,MCr),e(mf,ECr),e(mf,g2e),e(g2e,yCr),e(mf,wCr),e($r,ACr),e($r,ZA),e(ZA,LCr),e(ZA,h2e),e(h2e,BCr),e(ZA,xCr),e($r,kCr),e($r,xt),g(eL,xt,null),e(xt,RCr),e(xt,p2e),e(p2e,SCr),e(xt,PCr),e(xt,gf),e(gf,$Cr),e(gf,_2e),e(_2e,ICr),e(gf,jCr),e(gf,u2e),e(u2e,DCr),e(gf,NCr),e(xt,qCr),e(xt,b2e),e(b2e,GCr),e(xt,OCr),g(oL,xt,null),e($r,XCr),e($r,Bo),g(rL,Bo,null),e(Bo,VCr),e(Bo,v2e),e(v2e,zCr),e(Bo,WCr),e(Bo,$n),e($n,QCr),e($n,T2e),e(T2e,HCr),e($n,UCr),e($n,F2e),e(F2e,JCr),e($n,YCr),e($n,C2e),e(C2e,KCr),e($n,ZCr),e(Bo,eMr),e(Bo,ce),e(ce,VF),e(VF,M2e),e(M2e,oMr),e(VF,rMr),e(VF,UV),e(UV,tMr),e(VF,aMr),e(ce,nMr),e(ce,zF),e(zF,E2e),e(E2e,sMr),e(zF,lMr),e(zF,JV),e(JV,iMr),e(zF,dMr),e(ce,cMr),e(ce,WF),e(WF,y2e),e(y2e,fMr),e(WF,mMr),e(WF,YV),e(YV,gMr),e(WF,hMr),e(ce,pMr),e(ce,QF),e(QF,w2e),e(w2e,_Mr),e(QF,uMr),e(QF,KV),e(KV,bMr),e(QF,vMr),e(ce,TMr),e(ce,HF),e(HF,A2e),e(A2e,FMr),e(HF,CMr),e(HF,ZV),e(ZV,MMr),e(HF,EMr),e(ce,yMr),e(ce,UF),e(UF,L2e),e(L2e,wMr),e(UF,AMr),e(UF,ez),e(ez,LMr),e(UF,BMr),e(ce,xMr),e(ce,JF),e(JF,B2e),e(B2e,kMr),e(JF,RMr),e(JF,oz),e(oz,SMr),e(JF,PMr),e(ce,$Mr),e(ce,YF),e(YF,x2e),e(x2e,IMr),e(YF,jMr),e(YF,rz),e(rz,DMr),e(YF,NMr),e(ce,qMr),e(ce,KF),e(KF,k2e),e(k2e,GMr),e(KF,OMr),e(KF,tz),e(tz,XMr),e(KF,VMr),e(ce,zMr),e(ce,ZF),e(ZF,R2e),e(R2e,WMr),e(ZF,QMr),e(ZF,az),e(az,HMr),e(ZF,UMr),e(ce,JMr),e(ce,eC),e(eC,S2e),e(S2e,YMr),e(eC,KMr),e(eC,nz),e(nz,ZMr),e(eC,e4r),e(ce,o4r),e(ce,oC),e(oC,P2e),e(P2e,r4r),e(oC,t4r),e(oC,sz),e(sz,a4r),e(oC,n4r),e(Bo,s4r),e(Bo,$2e),e($2e,l4r),e(Bo,i4r),g(tL,Bo,null),b(d,MSe,u),b(d,hf,u),e(hf,rC),e(rC,I2e),g(aL,I2e,null),e(hf,d4r),e(hf,j2e),e(j2e,c4r),b(d,ESe,u),b(d,Ir,u),g(nL,Ir,null),e(Ir,f4r),e(Ir,pf),e(pf,m4r),e(pf,D2e),e(D2e,g4r),e(pf,h4r),e(pf,N2e),e(N2e,p4r),e(pf,_4r),e(Ir,u4r),e(Ir,sL),e(sL,b4r),e(sL,q2e),e(q2e,v4r),e(sL,T4r),e(Ir,F4r),e(Ir,kt),g(lL,kt,null),e(kt,C4r),e(kt,G2e),e(G2e,M4r),e(kt,E4r),e(kt,_f),e(_f,y4r),e(_f,O2e),e(O2e,w4r),e(_f,A4r),e(_f,X2e),e(X2e,L4r),e(_f,B4r),e(kt,x4r),e(kt,V2e),e(V2e,k4r),e(kt,R4r),g(iL,kt,null),e(Ir,S4r),e(Ir,xo),g(dL,xo,null),e(xo,P4r),e(xo,z2e),e(z2e,$4r),e(xo,I4r),e(xo,In),e(In,j4r),e(In,W2e),e(W2e,D4r),e(In,N4r),e(In,Q2e),e(Q2e,q4r),e(In,G4r),e(In,H2e),e(H2e,O4r),e(In,X4r),e(xo,V4r),e(xo,ue),e(ue,tC),e(tC,U2e),e(U2e,z4r),e(tC,W4r),e(tC,lz),e(lz,Q4r),e(tC,H4r),e(ue,U4r),e(ue,aC),e(aC,J2e),e(J2e,J4r),e(aC,Y4r),e(aC,iz),e(iz,K4r),e(aC,Z4r),e(ue,eEr),e(ue,nC),e(nC,Y2e),e(Y2e,oEr),e(nC,rEr),e(nC,dz),e(dz,tEr),e(nC,aEr),e(ue,nEr),e(ue,sC),e(sC,K2e),e(K2e,sEr),e(sC,lEr),e(sC,cz),e(cz,iEr),e(sC,dEr),e(ue,cEr),e(ue,lC),e(lC,Z2e),e(Z2e,fEr),e(lC,mEr),e(lC,fz),e(fz,gEr),e(lC,hEr),e(ue,pEr),e(ue,iC),e(iC,eve),e(eve,_Er),e(iC,uEr),e(iC,mz),e(mz,bEr),e(iC,vEr),e(ue,TEr),e(ue,dC),e(dC,ove),e(ove,FEr),e(dC,CEr),e(dC,gz),e(gz,MEr),e(dC,EEr),e(ue,yEr),e(ue,cC),e(cC,rve),e(rve,wEr),e(cC,AEr),e(cC,hz),e(hz,LEr),e(cC,BEr),e(ue,xEr),e(ue,fC),e(fC,tve),e(tve,kEr),e(fC,REr),e(fC,pz),e(pz,SEr),e(fC,PEr),e(ue,$Er),e(ue,mC),e(mC,ave),e(ave,IEr),e(mC,jEr),e(mC,_z),e(_z,DEr),e(mC,NEr),e(xo,qEr),e(xo,nve),e(nve,GEr),e(xo,OEr),g(cL,xo,null),b(d,ySe,u),b(d,uf,u),e(uf,gC),e(gC,sve),g(fL,sve,null),e(uf,XEr),e(uf,lve),e(lve,VEr),b(d,wSe,u),b(d,jr,u),g(mL,jr,null),e(jr,zEr),e(jr,bf),e(bf,WEr),e(bf,ive),e(ive,QEr),e(bf,HEr),e(bf,dve),e(dve,UEr),e(bf,JEr),e(jr,YEr),e(jr,gL),e(gL,KEr),e(gL,cve),e(cve,ZEr),e(gL,e3r),e(jr,o3r),e(jr,Rt),g(hL,Rt,null),e(Rt,r3r),e(Rt,fve),e(fve,t3r),e(Rt,a3r),e(Rt,vf),e(vf,n3r),e(vf,mve),e(mve,s3r),e(vf,l3r),e(vf,gve),e(gve,i3r),e(vf,d3r),e(Rt,c3r),e(Rt,hve),e(hve,f3r),e(Rt,m3r),g(pL,Rt,null),e(jr,g3r),e(jr,ko),g(_L,ko,null),e(ko,h3r),e(ko,pve),e(pve,p3r),e(ko,_3r),e(ko,jn),e(jn,u3r),e(jn,_ve),e(_ve,b3r),e(jn,v3r),e(jn,uve),e(uve,T3r),e(jn,F3r),e(jn,bve),e(bve,C3r),e(jn,M3r),e(ko,E3r),e(ko,Me),e(Me,hC),e(hC,vve),e(vve,y3r),e(hC,w3r),e(hC,uz),e(uz,A3r),e(hC,L3r),e(Me,B3r),e(Me,pC),e(pC,Tve),e(Tve,x3r),e(pC,k3r),e(pC,bz),e(bz,R3r),e(pC,S3r),e(Me,P3r),e(Me,_C),e(_C,Fve),e(Fve,$3r),e(_C,I3r),e(_C,vz),e(vz,j3r),e(_C,D3r),e(Me,N3r),e(Me,uC),e(uC,Cve),e(Cve,q3r),e(uC,G3r),e(uC,Tz),e(Tz,O3r),e(uC,X3r),e(Me,V3r),e(Me,bC),e(bC,Mve),e(Mve,z3r),e(bC,W3r),e(bC,Fz),e(Fz,Q3r),e(bC,H3r),e(Me,U3r),e(Me,vC),e(vC,Eve),e(Eve,J3r),e(vC,Y3r),e(vC,Cz),e(Cz,K3r),e(vC,Z3r),e(Me,eyr),e(Me,TC),e(TC,yve),e(yve,oyr),e(TC,ryr),e(TC,Mz),e(Mz,tyr),e(TC,ayr),e(Me,nyr),e(Me,FC),e(FC,wve),e(wve,syr),e(FC,lyr),e(FC,Ez),e(Ez,iyr),e(FC,dyr),e(Me,cyr),e(Me,CC),e(CC,Ave),e(Ave,fyr),e(CC,myr),e(CC,yz),e(yz,gyr),e(CC,hyr),e(ko,pyr),e(ko,Lve),e(Lve,_yr),e(ko,uyr),g(uL,ko,null),b(d,ASe,u),b(d,Tf,u),e(Tf,MC),e(MC,Bve),g(bL,Bve,null),e(Tf,byr),e(Tf,xve),e(xve,vyr),b(d,LSe,u),b(d,Dr,u),g(vL,Dr,null),e(Dr,Tyr),e(Dr,Ff),e(Ff,Fyr),e(Ff,kve),e(kve,Cyr),e(Ff,Myr),e(Ff,Rve),e(Rve,Eyr),e(Ff,yyr),e(Dr,wyr),e(Dr,TL),e(TL,Ayr),e(TL,Sve),e(Sve,Lyr),e(TL,Byr),e(Dr,xyr),e(Dr,St),g(FL,St,null),e(St,kyr),e(St,Pve),e(Pve,Ryr),e(St,Syr),e(St,Cf),e(Cf,Pyr),e(Cf,$ve),e($ve,$yr),e(Cf,Iyr),e(Cf,Ive),e(Ive,jyr),e(Cf,Dyr),e(St,Nyr),e(St,jve),e(jve,qyr),e(St,Gyr),g(CL,St,null),e(Dr,Oyr),e(Dr,Ro),g(ML,Ro,null),e(Ro,Xyr),e(Ro,Dve),e(Dve,Vyr),e(Ro,zyr),e(Ro,Dn),e(Dn,Wyr),e(Dn,Nve),e(Nve,Qyr),e(Dn,Hyr),e(Dn,qve),e(qve,Uyr),e(Dn,Jyr),e(Dn,Gve),e(Gve,Yyr),e(Dn,Kyr),e(Ro,Zyr),e(Ro,be),e(be,EC),e(EC,Ove),e(Ove,ewr),e(EC,owr),e(EC,wz),e(wz,rwr),e(EC,twr),e(be,awr),e(be,yC),e(yC,Xve),e(Xve,nwr),e(yC,swr),e(yC,Az),e(Az,lwr),e(yC,iwr),e(be,dwr),e(be,wC),e(wC,Vve),e(Vve,cwr),e(wC,fwr),e(wC,Lz),e(Lz,mwr),e(wC,gwr),e(be,hwr),e(be,AC),e(AC,zve),e(zve,pwr),e(AC,_wr),e(AC,Bz),e(Bz,uwr),e(AC,bwr),e(be,vwr),e(be,LC),e(LC,Wve),e(Wve,Twr),e(LC,Fwr),e(LC,xz),e(xz,Cwr),e(LC,Mwr),e(be,Ewr),e(be,BC),e(BC,Qve),e(Qve,ywr),e(BC,wwr),e(BC,kz),e(kz,Awr),e(BC,Lwr),e(be,Bwr),e(be,xC),e(xC,Hve),e(Hve,xwr),e(xC,kwr),e(xC,Rz),e(Rz,Rwr),e(xC,Swr),e(be,Pwr),e(be,kC),e(kC,Uve),e(Uve,$wr),e(kC,Iwr),e(kC,Sz),e(Sz,jwr),e(kC,Dwr),e(be,Nwr),e(be,RC),e(RC,Jve),e(Jve,qwr),e(RC,Gwr),e(RC,Pz),e(Pz,Owr),e(RC,Xwr),e(be,Vwr),e(be,SC),e(SC,Yve),e(Yve,zwr),e(SC,Wwr),e(SC,$z),e($z,Qwr),e(SC,Hwr),e(Ro,Uwr),e(Ro,Kve),e(Kve,Jwr),e(Ro,Ywr),g(EL,Ro,null),b(d,BSe,u),b(d,Mf,u),e(Mf,PC),e(PC,Zve),g(yL,Zve,null),e(Mf,Kwr),e(Mf,e6e),e(e6e,Zwr),b(d,xSe,u),b(d,Nr,u),g(wL,Nr,null),e(Nr,eAr),e(Nr,Ef),e(Ef,oAr),e(Ef,o6e),e(o6e,rAr),e(Ef,tAr),e(Ef,r6e),e(r6e,aAr),e(Ef,nAr),e(Nr,sAr),e(Nr,AL),e(AL,lAr),e(AL,t6e),e(t6e,iAr),e(AL,dAr),e(Nr,cAr),e(Nr,Pt),g(LL,Pt,null),e(Pt,fAr),e(Pt,a6e),e(a6e,mAr),e(Pt,gAr),e(Pt,yf),e(yf,hAr),e(yf,n6e),e(n6e,pAr),e(yf,_Ar),e(yf,s6e),e(s6e,uAr),e(yf,bAr),e(Pt,vAr),e(Pt,l6e),e(l6e,TAr),e(Pt,FAr),g(BL,Pt,null),e(Nr,CAr),e(Nr,So),g(xL,So,null),e(So,MAr),e(So,i6e),e(i6e,EAr),e(So,yAr),e(So,Nn),e(Nn,wAr),e(Nn,d6e),e(d6e,AAr),e(Nn,LAr),e(Nn,c6e),e(c6e,BAr),e(Nn,xAr),e(Nn,f6e),e(f6e,kAr),e(Nn,RAr),e(So,SAr),e(So,m6e),e(m6e,$C),e($C,g6e),e(g6e,PAr),e($C,$Ar),e($C,Iz),e(Iz,IAr),e($C,jAr),e(So,DAr),e(So,h6e),e(h6e,NAr),e(So,qAr),g(kL,So,null),b(d,kSe,u),b(d,wf,u),e(wf,IC),e(IC,p6e),g(RL,p6e,null),e(wf,GAr),e(wf,_6e),e(_6e,OAr),b(d,RSe,u),b(d,qr,u),g(SL,qr,null),e(qr,XAr),e(qr,Af),e(Af,VAr),e(Af,u6e),e(u6e,zAr),e(Af,WAr),e(Af,b6e),e(b6e,QAr),e(Af,HAr),e(qr,UAr),e(qr,PL),e(PL,JAr),e(PL,v6e),e(v6e,YAr),e(PL,KAr),e(qr,ZAr),e(qr,$t),g($L,$t,null),e($t,eLr),e($t,T6e),e(T6e,oLr),e($t,rLr),e($t,Lf),e(Lf,tLr),e(Lf,F6e),e(F6e,aLr),e(Lf,nLr),e(Lf,C6e),e(C6e,sLr),e(Lf,lLr),e($t,iLr),e($t,M6e),e(M6e,dLr),e($t,cLr),g(IL,$t,null),e(qr,fLr),e(qr,Po),g(jL,Po,null),e(Po,mLr),e(Po,E6e),e(E6e,gLr),e(Po,hLr),e(Po,qn),e(qn,pLr),e(qn,y6e),e(y6e,_Lr),e(qn,uLr),e(qn,w6e),e(w6e,bLr),e(qn,vLr),e(qn,A6e),e(A6e,TLr),e(qn,FLr),e(Po,CLr),e(Po,ve),e(ve,jC),e(jC,L6e),e(L6e,MLr),e(jC,ELr),e(jC,jz),e(jz,yLr),e(jC,wLr),e(ve,ALr),e(ve,DC),e(DC,B6e),e(B6e,LLr),e(DC,BLr),e(DC,Dz),e(Dz,xLr),e(DC,kLr),e(ve,RLr),e(ve,NC),e(NC,x6e),e(x6e,SLr),e(NC,PLr),e(NC,Nz),e(Nz,$Lr),e(NC,ILr),e(ve,jLr),e(ve,qC),e(qC,k6e),e(k6e,DLr),e(qC,NLr),e(qC,qz),e(qz,qLr),e(qC,GLr),e(ve,OLr),e(ve,GC),e(GC,R6e),e(R6e,XLr),e(GC,VLr),e(GC,Gz),e(Gz,zLr),e(GC,WLr),e(ve,QLr),e(ve,OC),e(OC,S6e),e(S6e,HLr),e(OC,ULr),e(OC,Oz),e(Oz,JLr),e(OC,YLr),e(ve,KLr),e(ve,XC),e(XC,P6e),e(P6e,ZLr),e(XC,e7r),e(XC,Xz),e(Xz,o7r),e(XC,r7r),e(ve,t7r),e(ve,VC),e(VC,$6e),e($6e,a7r),e(VC,n7r),e(VC,Vz),e(Vz,s7r),e(VC,l7r),e(ve,i7r),e(ve,zC),e(zC,I6e),e(I6e,d7r),e(zC,c7r),e(zC,zz),e(zz,f7r),e(zC,m7r),e(ve,g7r),e(ve,WC),e(WC,j6e),e(j6e,h7r),e(WC,p7r),e(WC,Wz),e(Wz,_7r),e(WC,u7r),e(Po,b7r),e(Po,D6e),e(D6e,v7r),e(Po,T7r),g(DL,Po,null),b(d,SSe,u),b(d,Bf,u),e(Bf,QC),e(QC,N6e),g(NL,N6e,null),e(Bf,F7r),e(Bf,q6e),e(q6e,C7r),b(d,PSe,u),b(d,Gr,u),g(qL,Gr,null),e(Gr,M7r),e(Gr,xf),e(xf,E7r),e(xf,G6e),e(G6e,y7r),e(xf,w7r),e(xf,O6e),e(O6e,A7r),e(xf,L7r),e(Gr,B7r),e(Gr,GL),e(GL,x7r),e(GL,X6e),e(X6e,k7r),e(GL,R7r),e(Gr,S7r),e(Gr,It),g(OL,It,null),e(It,P7r),e(It,V6e),e(V6e,$7r),e(It,I7r),e(It,kf),e(kf,j7r),e(kf,z6e),e(z6e,D7r),e(kf,N7r),e(kf,W6e),e(W6e,q7r),e(kf,G7r),e(It,O7r),e(It,Q6e),e(Q6e,X7r),e(It,V7r),g(XL,It,null),e(Gr,z7r),e(Gr,$o),g(VL,$o,null),e($o,W7r),e($o,H6e),e(H6e,Q7r),e($o,H7r),e($o,Gn),e(Gn,U7r),e(Gn,U6e),e(U6e,J7r),e(Gn,Y7r),e(Gn,J6e),e(J6e,K7r),e(Gn,Z7r),e(Gn,Y6e),e(Y6e,e9r),e(Gn,o9r),e($o,r9r),e($o,Se),e(Se,HC),e(HC,K6e),e(K6e,t9r),e(HC,a9r),e(HC,Qz),e(Qz,n9r),e(HC,s9r),e(Se,l9r),e(Se,UC),e(UC,Z6e),e(Z6e,i9r),e(UC,d9r),e(UC,Hz),e(Hz,c9r),e(UC,f9r),e(Se,m9r),e(Se,JC),e(JC,e0e),e(e0e,g9r),e(JC,h9r),e(JC,Uz),e(Uz,p9r),e(JC,_9r),e(Se,u9r),e(Se,YC),e(YC,o0e),e(o0e,b9r),e(YC,v9r),e(YC,Jz),e(Jz,T9r),e(YC,F9r),e(Se,C9r),e(Se,KC),e(KC,r0e),e(r0e,M9r),e(KC,E9r),e(KC,Yz),e(Yz,y9r),e(KC,w9r),e(Se,A9r),e(Se,ZC),e(ZC,t0e),e(t0e,L9r),e(ZC,B9r),e(ZC,Kz),e(Kz,x9r),e(ZC,k9r),e(Se,R9r),e(Se,eM),e(eM,a0e),e(a0e,S9r),e(eM,P9r),e(eM,Zz),e(Zz,$9r),e(eM,I9r),e(Se,j9r),e(Se,oM),e(oM,n0e),e(n0e,D9r),e(oM,N9r),e(oM,eW),e(eW,q9r),e(oM,G9r),e($o,O9r),e($o,s0e),e(s0e,X9r),e($o,V9r),g(zL,$o,null),b(d,$Se,u),b(d,Rf,u),e(Rf,rM),e(rM,l0e),g(WL,l0e,null),e(Rf,z9r),e(Rf,i0e),e(i0e,W9r),b(d,ISe,u),b(d,Or,u),g(QL,Or,null),e(Or,Q9r),e(Or,Sf),e(Sf,H9r),e(Sf,d0e),e(d0e,U9r),e(Sf,J9r),e(Sf,c0e),e(c0e,Y9r),e(Sf,K9r),e(Or,Z9r),e(Or,HL),e(HL,eBr),e(HL,f0e),e(f0e,oBr),e(HL,rBr),e(Or,tBr),e(Or,jt),g(UL,jt,null),e(jt,aBr),e(jt,m0e),e(m0e,nBr),e(jt,sBr),e(jt,Pf),e(Pf,lBr),e(Pf,g0e),e(g0e,iBr),e(Pf,dBr),e(Pf,h0e),e(h0e,cBr),e(Pf,fBr),e(jt,mBr),e(jt,p0e),e(p0e,gBr),e(jt,hBr),g(JL,jt,null),e(Or,pBr),e(Or,Io),g(YL,Io,null),e(Io,_Br),e(Io,_0e),e(_0e,uBr),e(Io,bBr),e(Io,On),e(On,vBr),e(On,u0e),e(u0e,TBr),e(On,FBr),e(On,b0e),e(b0e,CBr),e(On,MBr),e(On,v0e),e(v0e,EBr),e(On,yBr),e(Io,wBr),e(Io,Pe),e(Pe,tM),e(tM,T0e),e(T0e,ABr),e(tM,LBr),e(tM,oW),e(oW,BBr),e(tM,xBr),e(Pe,kBr),e(Pe,aM),e(aM,F0e),e(F0e,RBr),e(aM,SBr),e(aM,rW),e(rW,PBr),e(aM,$Br),e(Pe,IBr),e(Pe,nM),e(nM,C0e),e(C0e,jBr),e(nM,DBr),e(nM,tW),e(tW,NBr),e(nM,qBr),e(Pe,GBr),e(Pe,sM),e(sM,M0e),e(M0e,OBr),e(sM,XBr),e(sM,aW),e(aW,VBr),e(sM,zBr),e(Pe,WBr),e(Pe,lM),e(lM,E0e),e(E0e,QBr),e(lM,HBr),e(lM,nW),e(nW,UBr),e(lM,JBr),e(Pe,YBr),e(Pe,iM),e(iM,y0e),e(y0e,KBr),e(iM,ZBr),e(iM,sW),e(sW,exr),e(iM,oxr),e(Pe,rxr),e(Pe,dM),e(dM,w0e),e(w0e,txr),e(dM,axr),e(dM,lW),e(lW,nxr),e(dM,sxr),e(Pe,lxr),e(Pe,cM),e(cM,A0e),e(A0e,ixr),e(cM,dxr),e(cM,iW),e(iW,cxr),e(cM,fxr),e(Io,mxr),e(Io,L0e),e(L0e,gxr),e(Io,hxr),g(KL,Io,null),b(d,jSe,u),b(d,$f,u),e($f,fM),e(fM,B0e),g(ZL,B0e,null),e($f,pxr),e($f,x0e),e(x0e,_xr),b(d,DSe,u),b(d,Xr,u),g(e7,Xr,null),e(Xr,uxr),e(Xr,If),e(If,bxr),e(If,k0e),e(k0e,vxr),e(If,Txr),e(If,R0e),e(R0e,Fxr),e(If,Cxr),e(Xr,Mxr),e(Xr,o7),e(o7,Exr),e(o7,S0e),e(S0e,yxr),e(o7,wxr),e(Xr,Axr),e(Xr,Dt),g(r7,Dt,null),e(Dt,Lxr),e(Dt,P0e),e(P0e,Bxr),e(Dt,xxr),e(Dt,jf),e(jf,kxr),e(jf,$0e),e($0e,Rxr),e(jf,Sxr),e(jf,I0e),e(I0e,Pxr),e(jf,$xr),e(Dt,Ixr),e(Dt,j0e),e(j0e,jxr),e(Dt,Dxr),g(t7,Dt,null),e(Xr,Nxr),e(Xr,jo),g(a7,jo,null),e(jo,qxr),e(jo,D0e),e(D0e,Gxr),e(jo,Oxr),e(jo,Xn),e(Xn,Xxr),e(Xn,N0e),e(N0e,Vxr),e(Xn,zxr),e(Xn,q0e),e(q0e,Wxr),e(Xn,Qxr),e(Xn,G0e),e(G0e,Hxr),e(Xn,Uxr),e(jo,Jxr),e(jo,O0e),e(O0e,mM),e(mM,X0e),e(X0e,Yxr),e(mM,Kxr),e(mM,dW),e(dW,Zxr),e(mM,ekr),e(jo,okr),e(jo,V0e),e(V0e,rkr),e(jo,tkr),g(n7,jo,null),b(d,NSe,u),b(d,Df,u),e(Df,gM),e(gM,z0e),g(s7,z0e,null),e(Df,akr),e(Df,W0e),e(W0e,nkr),b(d,qSe,u),b(d,Vr,u),g(l7,Vr,null),e(Vr,skr),e(Vr,Nf),e(Nf,lkr),e(Nf,Q0e),e(Q0e,ikr),e(Nf,dkr),e(Nf,H0e),e(H0e,ckr),e(Nf,fkr),e(Vr,mkr),e(Vr,i7),e(i7,gkr),e(i7,U0e),e(U0e,hkr),e(i7,pkr),e(Vr,_kr),e(Vr,Nt),g(d7,Nt,null),e(Nt,ukr),e(Nt,J0e),e(J0e,bkr),e(Nt,vkr),e(Nt,qf),e(qf,Tkr),e(qf,Y0e),e(Y0e,Fkr),e(qf,Ckr),e(qf,K0e),e(K0e,Mkr),e(qf,Ekr),e(Nt,ykr),e(Nt,Z0e),e(Z0e,wkr),e(Nt,Akr),g(c7,Nt,null),e(Vr,Lkr),e(Vr,Do),g(f7,Do,null),e(Do,Bkr),e(Do,eTe),e(eTe,xkr),e(Do,kkr),e(Do,Vn),e(Vn,Rkr),e(Vn,oTe),e(oTe,Skr),e(Vn,Pkr),e(Vn,rTe),e(rTe,$kr),e(Vn,Ikr),e(Vn,tTe),e(tTe,jkr),e(Vn,Dkr),e(Do,Nkr),e(Do,m7),e(m7,hM),e(hM,aTe),e(aTe,qkr),e(hM,Gkr),e(hM,cW),e(cW,Okr),e(hM,Xkr),e(m7,Vkr),e(m7,pM),e(pM,nTe),e(nTe,zkr),e(pM,Wkr),e(pM,fW),e(fW,Qkr),e(pM,Hkr),e(Do,Ukr),e(Do,sTe),e(sTe,Jkr),e(Do,Ykr),g(g7,Do,null),b(d,GSe,u),b(d,Gf,u),e(Gf,_M),e(_M,lTe),g(h7,lTe,null),e(Gf,Kkr),e(Gf,iTe),e(iTe,Zkr),b(d,OSe,u),b(d,zr,u),g(p7,zr,null),e(zr,eRr),e(zr,Of),e(Of,oRr),e(Of,dTe),e(dTe,rRr),e(Of,tRr),e(Of,cTe),e(cTe,aRr),e(Of,nRr),e(zr,sRr),e(zr,_7),e(_7,lRr),e(_7,fTe),e(fTe,iRr),e(_7,dRr),e(zr,cRr),e(zr,qt),g(u7,qt,null),e(qt,fRr),e(qt,mTe),e(mTe,mRr),e(qt,gRr),e(qt,Xf),e(Xf,hRr),e(Xf,gTe),e(gTe,pRr),e(Xf,_Rr),e(Xf,hTe),e(hTe,uRr),e(Xf,bRr),e(qt,vRr),e(qt,pTe),e(pTe,TRr),e(qt,FRr),g(b7,qt,null),e(zr,CRr),e(zr,No),g(v7,No,null),e(No,MRr),e(No,_Te),e(_Te,ERr),e(No,yRr),e(No,zn),e(zn,wRr),e(zn,uTe),e(uTe,ARr),e(zn,LRr),e(zn,bTe),e(bTe,BRr),e(zn,xRr),e(zn,vTe),e(vTe,kRr),e(zn,RRr),e(No,SRr),e(No,TTe),e(TTe,uM),e(uM,FTe),e(FTe,PRr),e(uM,$Rr),e(uM,mW),e(mW,IRr),e(uM,jRr),e(No,DRr),e(No,CTe),e(CTe,NRr),e(No,qRr),g(T7,No,null),XSe=!0},p(d,[u]){const F7={};u&2&&(F7.$$scope={dirty:u,ctx:d}),Yf.$set(F7);const MTe={};u&2&&(MTe.$$scope={dirty:u,ctx:d}),qh.$set(MTe);const ETe={};u&2&&(ETe.$$scope={dirty:u,ctx:d}),Yh.$set(ETe)},i(d){XSe||(h(fe.$$.fragment,d),h(Va.$$.fragment,d),h(C4.$$.fragment,d),h(M4.$$.fragment,d),h(Yf.$$.fragment,d),h(E4.$$.fragment,d),h(y4.$$.fragment,d),h(L4.$$.fragment,d),h(B4.$$.fragment,d),h(x4.$$.fragment,d),h(k4.$$.fragment,d),h(R4.$$.fragment,d),h($4.$$.fragment,d),h(I4.$$.fragment,d),h(j4.$$.fragment,d),h(D4.$$.fragment,d),h(N4.$$.fragment,d),h(O4.$$.fragment,d),h(qh.$$.fragment,d),h(X4.$$.fragment,d),h(V4.$$.fragment,d),h(z4.$$.fragment,d),h(W4.$$.fragment,d),h(U4.$$.fragment,d),h(Yh.$$.fragment,d),h(J4.$$.fragment,d),h(Y4.$$.fragment,d),h(K4.$$.fragment,d),h(Z4.$$.fragment,d),h(oE.$$.fragment,d),h(rE.$$.fragment,d),h(tE.$$.fragment,d),h(aE.$$.fragment,d),h(nE.$$.fragment,d),h(sE.$$.fragment,d),h(iE.$$.fragment,d),h(dE.$$.fragment,d),h(cE.$$.fragment,d),h(fE.$$.fragment,d),h(mE.$$.fragment,d),h(gE.$$.fragment,d),h(pE.$$.fragment,d),h(_E.$$.fragment,d),h(uE.$$.fragment,d),h(bE.$$.fragment,d),h(vE.$$.fragment,d),h(TE.$$.fragment,d),h(CE.$$.fragment,d),h(ME.$$.fragment,d),h(EE.$$.fragment,d),h(yE.$$.fragment,d),h(wE.$$.fragment,d),h(AE.$$.fragment,d),h(BE.$$.fragment,d),h(xE.$$.fragment,d),h(kE.$$.fragment,d),h(RE.$$.fragment,d),h(SE.$$.fragment,d),h(PE.$$.fragment,d),h(IE.$$.fragment,d),h(jE.$$.fragment,d),h(DE.$$.fragment,d),h(NE.$$.fragment,d),h(qE.$$.fragment,d),h(GE.$$.fragment,d),h(XE.$$.fragment,d),h(VE.$$.fragment,d),h(zE.$$.fragment,d),h(WE.$$.fragment,d),h(QE.$$.fragment,d),h(HE.$$.fragment,d),h(JE.$$.fragment,d),h(YE.$$.fragment,d),h(KE.$$.fragment,d),h(ZE.$$.fragment,d),h(e3.$$.fragment,d),h(o3.$$.fragment,d),h(t3.$$.fragment,d),h(a3.$$.fragment,d),h(n3.$$.fragment,d),h(s3.$$.fragment,d),h(l3.$$.fragment,d),h(i3.$$.fragment,d),h(c3.$$.fragment,d),h(f3.$$.fragment,d),h(m3.$$.fragment,d),h(g3.$$.fragment,d),h(h3.$$.fragment,d),h(p3.$$.fragment,d),h(u3.$$.fragment,d),h(b3.$$.fragment,d),h(v3.$$.fragment,d),h(T3.$$.fragment,d),h(F3.$$.fragment,d),h(C3.$$.fragment,d),h(E3.$$.fragment,d),h(y3.$$.fragment,d),h(w3.$$.fragment,d),h(A3.$$.fragment,d),h(L3.$$.fragment,d),h(B3.$$.fragment,d),h(k3.$$.fragment,d),h(R3.$$.fragment,d),h(S3.$$.fragment,d),h(P3.$$.fragment,d),h($3.$$.fragment,d),h(I3.$$.fragment,d),h(D3.$$.fragment,d),h(N3.$$.fragment,d),h(q3.$$.fragment,d),h(G3.$$.fragment,d),h(O3.$$.fragment,d),h(X3.$$.fragment,d),h(z3.$$.fragment,d),h(W3.$$.fragment,d),h(Q3.$$.fragment,d),h(H3.$$.fragment,d),h(U3.$$.fragment,d),h(J3.$$.fragment,d),h(K3.$$.fragment,d),h(Z3.$$.fragment,d),h(ey.$$.fragment,d),h(oy.$$.fragment,d),h(ry.$$.fragment,d),h(ty.$$.fragment,d),h(ny.$$.fragment,d),h(sy.$$.fragment,d),h(ly.$$.fragment,d),h(dy.$$.fragment,d),h(cy.$$.fragment,d),h(fy.$$.fragment,d),h(gy.$$.fragment,d),h(hy.$$.fragment,d),h(py.$$.fragment,d),h(_y.$$.fragment,d),h(uy.$$.fragment,d),h(by.$$.fragment,d),h(Ty.$$.fragment,d),h(Fy.$$.fragment,d),h(Cy.$$.fragment,d),h(My.$$.fragment,d),h(Ey.$$.fragment,d),h(yy.$$.fragment,d),h(Ay.$$.fragment,d),h(Ly.$$.fragment,d),h(By.$$.fragment,d),h(xy.$$.fragment,d),h(ky.$$.fragment,d),h(Ry.$$.fragment,d),h(Py.$$.fragment,d),h($y.$$.fragment,d),h(Iy.$$.fragment,d),h(jy.$$.fragment,d),h(Dy.$$.fragment,d),h(Ny.$$.fragment,d),h(Gy.$$.fragment,d),h(Oy.$$.fragment,d),h(Xy.$$.fragment,d),h(zy.$$.fragment,d),h(Wy.$$.fragment,d),h(Qy.$$.fragment,d),h(Uy.$$.fragment,d),h(Jy.$$.fragment,d),h(Yy.$$.fragment,d),h(Ky.$$.fragment,d),h(Zy.$$.fragment,d),h(ew.$$.fragment,d),h(rw.$$.fragment,d),h(tw.$$.fragment,d),h(aw.$$.fragment,d),h(nw.$$.fragment,d),h(sw.$$.fragment,d),h(lw.$$.fragment,d),h(dw.$$.fragment,d),h(cw.$$.fragment,d),h(fw.$$.fragment,d),h(mw.$$.fragment,d),h(gw.$$.fragment,d),h(hw.$$.fragment,d),h(_w.$$.fragment,d),h(uw.$$.fragment,d),h(bw.$$.fragment,d),h(vw.$$.fragment,d),h(Tw.$$.fragment,d),h(Fw.$$.fragment,d),h(Mw.$$.fragment,d),h(Ew.$$.fragment,d),h(yw.$$.fragment,d),h(Aw.$$.fragment,d),h(Lw.$$.fragment,d),h(Bw.$$.fragment,d),h(kw.$$.fragment,d),h(Rw.$$.fragment,d),h(Sw.$$.fragment,d),h(Pw.$$.fragment,d),h($w.$$.fragment,d),h(Iw.$$.fragment,d),h(Dw.$$.fragment,d),h(Nw.$$.fragment,d),h(qw.$$.fragment,d),h(Gw.$$.fragment,d),h(Ow.$$.fragment,d),h(Xw.$$.fragment,d),h(zw.$$.fragment,d),h(Ww.$$.fragment,d),h(Qw.$$.fragment,d),h(Hw.$$.fragment,d),h(Uw.$$.fragment,d),h(Jw.$$.fragment,d),h(Kw.$$.fragment,d),h(Zw.$$.fragment,d),h(eA.$$.fragment,d),h(oA.$$.fragment,d),h(rA.$$.fragment,d),h(tA.$$.fragment,d),h(nA.$$.fragment,d),h(sA.$$.fragment,d),h(lA.$$.fragment,d),h(iA.$$.fragment,d),h(dA.$$.fragment,d),h(cA.$$.fragment,d),h(mA.$$.fragment,d),h(gA.$$.fragment,d),h(hA.$$.fragment,d),h(pA.$$.fragment,d),h(_A.$$.fragment,d),h(uA.$$.fragment,d),h(vA.$$.fragment,d),h(TA.$$.fragment,d),h(FA.$$.fragment,d),h(CA.$$.fragment,d),h(MA.$$.fragment,d),h(EA.$$.fragment,d),h(wA.$$.fragment,d),h(AA.$$.fragment,d),h(LA.$$.fragment,d),h(BA.$$.fragment,d),h(xA.$$.fragment,d),h(kA.$$.fragment,d),h(SA.$$.fragment,d),h(PA.$$.fragment,d),h($A.$$.fragment,d),h(IA.$$.fragment,d),h(jA.$$.fragment,d),h(DA.$$.fragment,d),h(qA.$$.fragment,d),h(GA.$$.fragment,d),h(OA.$$.fragment,d),h(XA.$$.fragment,d),h(VA.$$.fragment,d),h(zA.$$.fragment,d),h(QA.$$.fragment,d),h(HA.$$.fragment,d),h(UA.$$.fragment,d),h(JA.$$.fragment,d),h(YA.$$.fragment,d),h(KA.$$.fragment,d),h(eL.$$.fragment,d),h(oL.$$.fragment,d),h(rL.$$.fragment,d),h(tL.$$.fragment,d),h(aL.$$.fragment,d),h(nL.$$.fragment,d),h(lL.$$.fragment,d),h(iL.$$.fragment,d),h(dL.$$.fragment,d),h(cL.$$.fragment,d),h(fL.$$.fragment,d),h(mL.$$.fragment,d),h(hL.$$.fragment,d),h(pL.$$.fragment,d),h(_L.$$.fragment,d),h(uL.$$.fragment,d),h(bL.$$.fragment,d),h(vL.$$.fragment,d),h(FL.$$.fragment,d),h(CL.$$.fragment,d),h(ML.$$.fragment,d),h(EL.$$.fragment,d),h(yL.$$.fragment,d),h(wL.$$.fragment,d),h(LL.$$.fragment,d),h(BL.$$.fragment,d),h(xL.$$.fragment,d),h(kL.$$.fragment,d),h(RL.$$.fragment,d),h(SL.$$.fragment,d),h($L.$$.fragment,d),h(IL.$$.fragment,d),h(jL.$$.fragment,d),h(DL.$$.fragment,d),h(NL.$$.fragment,d),h(qL.$$.fragment,d),h(OL.$$.fragment,d),h(XL.$$.fragment,d),h(VL.$$.fragment,d),h(zL.$$.fragment,d),h(WL.$$.fragment,d),h(QL.$$.fragment,d),h(UL.$$.fragment,d),h(JL.$$.fragment,d),h(YL.$$.fragment,d),h(KL.$$.fragment,d),h(ZL.$$.fragment,d),h(e7.$$.fragment,d),h(r7.$$.fragment,d),h(t7.$$.fragment,d),h(a7.$$.fragment,d),h(n7.$$.fragment,d),h(s7.$$.fragment,d),h(l7.$$.fragment,d),h(d7.$$.fragment,d),h(c7.$$.fragment,d),h(f7.$$.fragment,d),h(g7.$$.fragment,d),h(h7.$$.fragment,d),h(p7.$$.fragment,d),h(u7.$$.fragment,d),h(b7.$$.fragment,d),h(v7.$$.fragment,d),h(T7.$$.fragment,d),XSe=!0)},o(d){p(fe.$$.fragment,d),p(Va.$$.fragment,d),p(C4.$$.fragment,d),p(M4.$$.fragment,d),p(Yf.$$.fragment,d),p(E4.$$.fragment,d),p(y4.$$.fragment,d),p(L4.$$.fragment,d),p(B4.$$.fragment,d),p(x4.$$.fragment,d),p(k4.$$.fragment,d),p(R4.$$.fragment,d),p($4.$$.fragment,d),p(I4.$$.fragment,d),p(j4.$$.fragment,d),p(D4.$$.fragment,d),p(N4.$$.fragment,d),p(O4.$$.fragment,d),p(qh.$$.fragment,d),p(X4.$$.fragment,d),p(V4.$$.fragment,d),p(z4.$$.fragment,d),p(W4.$$.fragment,d),p(U4.$$.fragment,d),p(Yh.$$.fragment,d),p(J4.$$.fragment,d),p(Y4.$$.fragment,d),p(K4.$$.fragment,d),p(Z4.$$.fragment,d),p(oE.$$.fragment,d),p(rE.$$.fragment,d),p(tE.$$.fragment,d),p(aE.$$.fragment,d),p(nE.$$.fragment,d),p(sE.$$.fragment,d),p(iE.$$.fragment,d),p(dE.$$.fragment,d),p(cE.$$.fragment,d),p(fE.$$.fragment,d),p(mE.$$.fragment,d),p(gE.$$.fragment,d),p(pE.$$.fragment,d),p(_E.$$.fragment,d),p(uE.$$.fragment,d),p(bE.$$.fragment,d),p(vE.$$.fragment,d),p(TE.$$.fragment,d),p(CE.$$.fragment,d),p(ME.$$.fragment,d),p(EE.$$.fragment,d),p(yE.$$.fragment,d),p(wE.$$.fragment,d),p(AE.$$.fragment,d),p(BE.$$.fragment,d),p(xE.$$.fragment,d),p(kE.$$.fragment,d),p(RE.$$.fragment,d),p(SE.$$.fragment,d),p(PE.$$.fragment,d),p(IE.$$.fragment,d),p(jE.$$.fragment,d),p(DE.$$.fragment,d),p(NE.$$.fragment,d),p(qE.$$.fragment,d),p(GE.$$.fragment,d),p(XE.$$.fragment,d),p(VE.$$.fragment,d),p(zE.$$.fragment,d),p(WE.$$.fragment,d),p(QE.$$.fragment,d),p(HE.$$.fragment,d),p(JE.$$.fragment,d),p(YE.$$.fragment,d),p(KE.$$.fragment,d),p(ZE.$$.fragment,d),p(e3.$$.fragment,d),p(o3.$$.fragment,d),p(t3.$$.fragment,d),p(a3.$$.fragment,d),p(n3.$$.fragment,d),p(s3.$$.fragment,d),p(l3.$$.fragment,d),p(i3.$$.fragment,d),p(c3.$$.fragment,d),p(f3.$$.fragment,d),p(m3.$$.fragment,d),p(g3.$$.fragment,d),p(h3.$$.fragment,d),p(p3.$$.fragment,d),p(u3.$$.fragment,d),p(b3.$$.fragment,d),p(v3.$$.fragment,d),p(T3.$$.fragment,d),p(F3.$$.fragment,d),p(C3.$$.fragment,d),p(E3.$$.fragment,d),p(y3.$$.fragment,d),p(w3.$$.fragment,d),p(A3.$$.fragment,d),p(L3.$$.fragment,d),p(B3.$$.fragment,d),p(k3.$$.fragment,d),p(R3.$$.fragment,d),p(S3.$$.fragment,d),p(P3.$$.fragment,d),p($3.$$.fragment,d),p(I3.$$.fragment,d),p(D3.$$.fragment,d),p(N3.$$.fragment,d),p(q3.$$.fragment,d),p(G3.$$.fragment,d),p(O3.$$.fragment,d),p(X3.$$.fragment,d),p(z3.$$.fragment,d),p(W3.$$.fragment,d),p(Q3.$$.fragment,d),p(H3.$$.fragment,d),p(U3.$$.fragment,d),p(J3.$$.fragment,d),p(K3.$$.fragment,d),p(Z3.$$.fragment,d),p(ey.$$.fragment,d),p(oy.$$.fragment,d),p(ry.$$.fragment,d),p(ty.$$.fragment,d),p(ny.$$.fragment,d),p(sy.$$.fragment,d),p(ly.$$.fragment,d),p(dy.$$.fragment,d),p(cy.$$.fragment,d),p(fy.$$.fragment,d),p(gy.$$.fragment,d),p(hy.$$.fragment,d),p(py.$$.fragment,d),p(_y.$$.fragment,d),p(uy.$$.fragment,d),p(by.$$.fragment,d),p(Ty.$$.fragment,d),p(Fy.$$.fragment,d),p(Cy.$$.fragment,d),p(My.$$.fragment,d),p(Ey.$$.fragment,d),p(yy.$$.fragment,d),p(Ay.$$.fragment,d),p(Ly.$$.fragment,d),p(By.$$.fragment,d),p(xy.$$.fragment,d),p(ky.$$.fragment,d),p(Ry.$$.fragment,d),p(Py.$$.fragment,d),p($y.$$.fragment,d),p(Iy.$$.fragment,d),p(jy.$$.fragment,d),p(Dy.$$.fragment,d),p(Ny.$$.fragment,d),p(Gy.$$.fragment,d),p(Oy.$$.fragment,d),p(Xy.$$.fragment,d),p(zy.$$.fragment,d),p(Wy.$$.fragment,d),p(Qy.$$.fragment,d),p(Uy.$$.fragment,d),p(Jy.$$.fragment,d),p(Yy.$$.fragment,d),p(Ky.$$.fragment,d),p(Zy.$$.fragment,d),p(ew.$$.fragment,d),p(rw.$$.fragment,d),p(tw.$$.fragment,d),p(aw.$$.fragment,d),p(nw.$$.fragment,d),p(sw.$$.fragment,d),p(lw.$$.fragment,d),p(dw.$$.fragment,d),p(cw.$$.fragment,d),p(fw.$$.fragment,d),p(mw.$$.fragment,d),p(gw.$$.fragment,d),p(hw.$$.fragment,d),p(_w.$$.fragment,d),p(uw.$$.fragment,d),p(bw.$$.fragment,d),p(vw.$$.fragment,d),p(Tw.$$.fragment,d),p(Fw.$$.fragment,d),p(Mw.$$.fragment,d),p(Ew.$$.fragment,d),p(yw.$$.fragment,d),p(Aw.$$.fragment,d),p(Lw.$$.fragment,d),p(Bw.$$.fragment,d),p(kw.$$.fragment,d),p(Rw.$$.fragment,d),p(Sw.$$.fragment,d),p(Pw.$$.fragment,d),p($w.$$.fragment,d),p(Iw.$$.fragment,d),p(Dw.$$.fragment,d),p(Nw.$$.fragment,d),p(qw.$$.fragment,d),p(Gw.$$.fragment,d),p(Ow.$$.fragment,d),p(Xw.$$.fragment,d),p(zw.$$.fragment,d),p(Ww.$$.fragment,d),p(Qw.$$.fragment,d),p(Hw.$$.fragment,d),p(Uw.$$.fragment,d),p(Jw.$$.fragment,d),p(Kw.$$.fragment,d),p(Zw.$$.fragment,d),p(eA.$$.fragment,d),p(oA.$$.fragment,d),p(rA.$$.fragment,d),p(tA.$$.fragment,d),p(nA.$$.fragment,d),p(sA.$$.fragment,d),p(lA.$$.fragment,d),p(iA.$$.fragment,d),p(dA.$$.fragment,d),p(cA.$$.fragment,d),p(mA.$$.fragment,d),p(gA.$$.fragment,d),p(hA.$$.fragment,d),p(pA.$$.fragment,d),p(_A.$$.fragment,d),p(uA.$$.fragment,d),p(vA.$$.fragment,d),p(TA.$$.fragment,d),p(FA.$$.fragment,d),p(CA.$$.fragment,d),p(MA.$$.fragment,d),p(EA.$$.fragment,d),p(wA.$$.fragment,d),p(AA.$$.fragment,d),p(LA.$$.fragment,d),p(BA.$$.fragment,d),p(xA.$$.fragment,d),p(kA.$$.fragment,d),p(SA.$$.fragment,d),p(PA.$$.fragment,d),p($A.$$.fragment,d),p(IA.$$.fragment,d),p(jA.$$.fragment,d),p(DA.$$.fragment,d),p(qA.$$.fragment,d),p(GA.$$.fragment,d),p(OA.$$.fragment,d),p(XA.$$.fragment,d),p(VA.$$.fragment,d),p(zA.$$.fragment,d),p(QA.$$.fragment,d),p(HA.$$.fragment,d),p(UA.$$.fragment,d),p(JA.$$.fragment,d),p(YA.$$.fragment,d),p(KA.$$.fragment,d),p(eL.$$.fragment,d),p(oL.$$.fragment,d),p(rL.$$.fragment,d),p(tL.$$.fragment,d),p(aL.$$.fragment,d),p(nL.$$.fragment,d),p(lL.$$.fragment,d),p(iL.$$.fragment,d),p(dL.$$.fragment,d),p(cL.$$.fragment,d),p(fL.$$.fragment,d),p(mL.$$.fragment,d),p(hL.$$.fragment,d),p(pL.$$.fragment,d),p(_L.$$.fragment,d),p(uL.$$.fragment,d),p(bL.$$.fragment,d),p(vL.$$.fragment,d),p(FL.$$.fragment,d),p(CL.$$.fragment,d),p(ML.$$.fragment,d),p(EL.$$.fragment,d),p(yL.$$.fragment,d),p(wL.$$.fragment,d),p(LL.$$.fragment,d),p(BL.$$.fragment,d),p(xL.$$.fragment,d),p(kL.$$.fragment,d),p(RL.$$.fragment,d),p(SL.$$.fragment,d),p($L.$$.fragment,d),p(IL.$$.fragment,d),p(jL.$$.fragment,d),p(DL.$$.fragment,d),p(NL.$$.fragment,d),p(qL.$$.fragment,d),p(OL.$$.fragment,d),p(XL.$$.fragment,d),p(VL.$$.fragment,d),p(zL.$$.fragment,d),p(WL.$$.fragment,d),p(QL.$$.fragment,d),p(UL.$$.fragment,d),p(JL.$$.fragment,d),p(YL.$$.fragment,d),p(KL.$$.fragment,d),p(ZL.$$.fragment,d),p(e7.$$.fragment,d),p(r7.$$.fragment,d),p(t7.$$.fragment,d),p(a7.$$.fragment,d),p(n7.$$.fragment,d),p(s7.$$.fragment,d),p(l7.$$.fragment,d),p(d7.$$.fragment,d),p(c7.$$.fragment,d),p(f7.$$.fragment,d),p(g7.$$.fragment,d),p(h7.$$.fragment,d),p(p7.$$.fragment,d),p(u7.$$.fragment,d),p(b7.$$.fragment,d),p(v7.$$.fragment,d),p(T7.$$.fragment,d),XSe=!1},d(d){t(K),d&&t(io),d&&t(de),_(fe),d&&t(Wf),d&&t(ha),d&&t(Be),d&&t(co),d&&t(Hf),_(Va,d),d&&t(fo),d&&t(pe),d&&t(Wo),d&&t(za),d&&t(qke),d&&t(Ji),_(C4),d&&t(Gke),d&&t(Jn),d&&t(Oke),_(M4,d),d&&t(Xke),d&&t(M9),d&&t(Vke),_(Yf,d),d&&t(zke),d&&t(Yi),_(E4),d&&t(Wke),d&&t(Qo),_(y4),_(L4),_(B4),_(x4),d&&t(Qke),d&&t(Zi),_(k4),d&&t(Hke),d&&t(Ho),_(R4),_($4),_(I4),_(j4),d&&t(Uke),d&&t(ed),_(D4),d&&t(Jke),d&&t(Uo),_(N4),_(O4),_(qh),_(X4),_(V4),d&&t(Yke),d&&t(od),_(z4),d&&t(Kke),d&&t(Jo),_(W4),_(U4),_(Yh),_(J4),_(Y4),d&&t(Zke),d&&t(td),_(K4),d&&t(eRe),d&&t(Yo),_(Z4),_(oE),_(rE),_(tE),_(aE),d&&t(oRe),d&&t(sd),_(nE),d&&t(rRe),d&&t(Ko),_(sE),_(iE),_(dE),_(cE),_(fE),d&&t(tRe),d&&t(dd),_(mE),d&&t(aRe),d&&t(Zo),_(gE),_(pE),_(_E),_(uE),_(bE),d&&t(nRe),d&&t(md),_(vE),d&&t(sRe),d&&t(er),_(TE),_(CE),_(ME),_(EE),_(yE),d&&t(lRe),d&&t(pd),_(wE),d&&t(iRe),d&&t(or),_(AE),_(BE),_(xE),_(kE),_(RE),d&&t(dRe),d&&t(bd),_(SE),d&&t(cRe),d&&t(rr),_(PE),_(IE),_(jE),_(DE),_(NE),d&&t(fRe),d&&t(Fd),_(qE),d&&t(mRe),d&&t(tr),_(GE),_(XE),_(VE),_(zE),_(WE),d&&t(gRe),d&&t(Ed),_(QE),d&&t(hRe),d&&t(ar),_(HE),_(JE),_(YE),_(KE),_(ZE),d&&t(pRe),d&&t(Ad),_(e3),d&&t(_Re),d&&t(nr),_(o3),_(t3),_(a3),_(n3),_(s3),d&&t(uRe),d&&t(xd),_(l3),d&&t(bRe),d&&t(sr),_(i3),_(c3),_(f3),_(m3),_(g3),d&&t(vRe),d&&t(Sd),_(h3),d&&t(TRe),d&&t(lr),_(p3),_(u3),_(b3),_(v3),_(T3),d&&t(FRe),d&&t(Id),_(F3),d&&t(CRe),d&&t(ir),_(C3),_(E3),_(y3),_(w3),_(A3),d&&t(MRe),d&&t(Nd),_(L3),d&&t(ERe),d&&t(dr),_(B3),_(k3),_(R3),_(S3),_(P3),d&&t(yRe),d&&t(Od),_($3),d&&t(wRe),d&&t(cr),_(I3),_(D3),_(N3),_(q3),_(G3),d&&t(ARe),d&&t(zd),_(O3),d&&t(LRe),d&&t(fr),_(X3),_(z3),_(W3),_(Q3),_(H3),d&&t(BRe),d&&t(Hd),_(U3),d&&t(xRe),d&&t(mr),_(J3),_(K3),_(Z3),_(ey),_(oy),d&&t(kRe),d&&t(Yd),_(ry),d&&t(RRe),d&&t(gr),_(ty),_(ny),_(sy),_(ly),_(dy),d&&t(SRe),d&&t(ec),_(cy),d&&t(PRe),d&&t(hr),_(fy),_(gy),_(hy),_(py),_(_y),d&&t($Re),d&&t(tc),_(uy),d&&t(IRe),d&&t(pr),_(by),_(Ty),_(Fy),_(Cy),_(My),d&&t(jRe),d&&t(lc),_(Ey),d&&t(DRe),d&&t(_r),_(yy),_(Ay),_(Ly),_(By),_(xy),d&&t(NRe),d&&t(cc),_(ky),d&&t(qRe),d&&t(ur),_(Ry),_(Py),_($y),_(Iy),_(jy),d&&t(GRe),d&&t(gc),_(Dy),d&&t(ORe),d&&t(br),_(Ny),_(Gy),_(Oy),_(Xy),_(zy),d&&t(XRe),d&&t(_c),_(Wy),d&&t(VRe),d&&t(vr),_(Qy),_(Uy),_(Jy),_(Yy),_(Ky),d&&t(zRe),d&&t(vc),_(Zy),d&&t(WRe),d&&t(Tr),_(ew),_(rw),_(tw),_(aw),_(nw),d&&t(QRe),d&&t(Cc),_(sw),d&&t(HRe),d&&t(Fr),_(lw),_(dw),_(cw),_(fw),_(mw),d&&t(URe),d&&t(yc),_(gw),d&&t(JRe),d&&t(Cr),_(hw),_(_w),_(uw),_(bw),_(vw),d&&t(YRe),d&&t(Lc),_(Tw),d&&t(KRe),d&&t(Mr),_(Fw),_(Mw),_(Ew),_(yw),_(Aw),d&&t(ZRe),d&&t(kc),_(Lw),d&&t(eSe),d&&t(Er),_(Bw),_(kw),_(Rw),_(Sw),_(Pw),d&&t(oSe),d&&t(Pc),_($w),d&&t(rSe),d&&t(yr),_(Iw),_(Dw),_(Nw),_(qw),_(Gw),d&&t(tSe),d&&t(jc),_(Ow),d&&t(aSe),d&&t(wr),_(Xw),_(zw),_(Ww),_(Qw),_(Hw),d&&t(nSe),d&&t(qc),_(Uw),d&&t(sSe),d&&t(Ar),_(Jw),_(Kw),_(Zw),_(eA),_(oA),d&&t(lSe),d&&t(Xc),_(rA),d&&t(iSe),d&&t(Lr),_(tA),_(nA),_(sA),_(lA),_(iA),d&&t(dSe),d&&t(Wc),_(dA),d&&t(cSe),d&&t(Br),_(cA),_(mA),_(gA),_(hA),_(pA),d&&t(fSe),d&&t(Uc),_(_A),d&&t(mSe),d&&t(xr),_(uA),_(vA),_(TA),_(FA),_(CA),d&&t(gSe),d&&t(Kc),_(MA),d&&t(hSe),d&&t(kr),_(EA),_(wA),_(AA),_(LA),_(BA),d&&t(pSe),d&&t(of),_(xA),d&&t(_Se),d&&t(Rr),_(kA),_(SA),_(PA),_($A),_(IA),d&&t(uSe),d&&t(af),_(jA),d&&t(bSe),d&&t(Sr),_(DA),_(qA),_(GA),_(OA),_(XA),d&&t(vSe),d&&t(lf),_(VA),d&&t(TSe),d&&t(Pr),_(zA),_(QA),_(HA),_(UA),_(JA),d&&t(FSe),d&&t(ff),_(YA),d&&t(CSe),d&&t($r),_(KA),_(eL),_(oL),_(rL),_(tL),d&&t(MSe),d&&t(hf),_(aL),d&&t(ESe),d&&t(Ir),_(nL),_(lL),_(iL),_(dL),_(cL),d&&t(ySe),d&&t(uf),_(fL),d&&t(wSe),d&&t(jr),_(mL),_(hL),_(pL),_(_L),_(uL),d&&t(ASe),d&&t(Tf),_(bL),d&&t(LSe),d&&t(Dr),_(vL),_(FL),_(CL),_(ML),_(EL),d&&t(BSe),d&&t(Mf),_(yL),d&&t(xSe),d&&t(Nr),_(wL),_(LL),_(BL),_(xL),_(kL),d&&t(kSe),d&&t(wf),_(RL),d&&t(RSe),d&&t(qr),_(SL),_($L),_(IL),_(jL),_(DL),d&&t(SSe),d&&t(Bf),_(NL),d&&t(PSe),d&&t(Gr),_(qL),_(OL),_(XL),_(VL),_(zL),d&&t($Se),d&&t(Rf),_(WL),d&&t(ISe),d&&t(Or),_(QL),_(UL),_(JL),_(YL),_(KL),d&&t(jSe),d&&t($f),_(ZL),d&&t(DSe),d&&t(Xr),_(e7),_(r7),_(t7),_(a7),_(n7),d&&t(NSe),d&&t(Df),_(s7),d&&t(qSe),d&&t(Vr),_(l7),_(d7),_(c7),_(f7),_(g7),d&&t(GSe),d&&t(Gf),_(h7),d&&t(OSe),d&&t(zr),_(p7),_(u7),_(b7),_(v7),_(T7)}}}const fMt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForSpeechSeq2Seq",title:"FlaxAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function mMt(zf){return sMt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class bMt extends rMt{constructor(K){super();tMt(this,K,mMt,cMt,aMt,{})}}export{bMt as default,fMt as metadata};
