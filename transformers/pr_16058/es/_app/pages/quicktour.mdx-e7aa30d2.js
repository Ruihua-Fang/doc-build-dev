import{D as Jp,S as We,i as Ye,s as Ge,O as F,P as L,a as n,d as r,b as d,g as $,F as s,L as le,t as i,h as p,e as u,w as x,k as g,c as f,x as S,m as v,y as M,Q as oi,q as j,o as q,B as P,n as ya,p as Aa,Y as Zp,v as Gp,Z as oo,X as Qp,V as Xp,H as Os,I as Fs,J as Ls,K as Ns,M as ec}from"../chunks/vendor-c570b7f7.js";import{T as ja}from"../chunks/Tip-4965f0b6.js";import{Y as Hp}from"../chunks/Youtube-ea859fc9.js";import{I as Et,C as G}from"../chunks/CodeBlock-8a2530c2.js";import{D as tc}from"../chunks/DocNotebookDropdown-e51be72e.js";var Le=(m=>(m.OPEN="OPEN",m.CLOSED="CLOSED",m.HASHASHLINK="HASHASHLINK",m))(Le||{});const ri={};function ac(m){return ri[m]||(ri[m]=Jp("OPEN")),ri[m]}function sc(m){let e,l,a,o,c,_;return{c(){e=F("svg"),l=F("defs"),a=F("clipPath"),o=F("rect"),c=F("g"),_=F("path"),this.h()},l(E){e=L(E,"svg",{class:!0,xmlns:!0,"xmlns:xlink":!0,"aria-hidden":!0,focusable:!0,role:!0,width:!0,height:!0,preserveAspectRatio:!0,viewBox:!0});var b=n(e);l=L(b,"defs",{});var A=n(l);a=L(A,"clipPath",{id:!0});var y=n(a);o=L(y,"rect",{x:!0,y:!0,width:!0,height:!0,fill:!0}),n(o).forEach(r),y.forEach(r),A.forEach(r),c=L(b,"g",{"clip-path":!0});var C=n(c);_=L(C,"path",{d:!0,fill:!0}),n(_).forEach(r),C.forEach(r),b.forEach(r),this.h()},h(){d(o,"x","3.05"),d(o,"y","0.5"),d(o,"width","25.73"),d(o,"height","31"),d(o,"fill","none"),d(a,"id","a"),d(_,"d","M24.94,9.51a12.81,12.81,0,0,1,0,18.16,12.68,12.68,0,0,1-18,0,12.81,12.81,0,0,1,0-18.16l9-9V5l-.84.83-6,6a9.58,9.58,0,1,0,13.55,0ZM20.44,9a1.68,1.68,0,1,1,1.67-1.67A1.68,1.68,0,0,1,20.44,9Z"),d(_,"fill","#ee4c2c"),d(c,"clip-path","url(#a)"),d(e,"class",m[0]),d(e,"xmlns","http://www.w3.org/2000/svg"),d(e,"xmlns:xlink","http://www.w3.org/1999/xlink"),d(e,"aria-hidden","true"),d(e,"focusable","false"),d(e,"role","img"),d(e,"width","1em"),d(e,"height","1em"),d(e,"preserveAspectRatio","xMidYMid meet"),d(e,"viewBox","0 0 32 32")},m(E,b){$(E,e,b),s(e,l),s(l,a),s(a,o),s(e,c),s(c,_)},p(E,[b]){b&1&&d(e,"class",E[0])},i:le,o:le,d(E){E&&r(e)}}}function rc(m,e,l){let{classNames:a=""}=e;return m.$$set=o=>{"classNames"in o&&l(0,a=o.classNames)},[a]}class oc extends We{constructor(e){super();Ye(this,e,rc,sc,Ge,{classNames:0})}}function lc(m){let e,l,a,o;return{c(){e=F("svg"),l=F("path"),a=F("path"),o=F("path"),this.h()},l(c){e=L(c,"svg",{class:!0,xmlns:!0,"xmlns:xlink":!0,"aria-hidden":!0,focusable:!0,role:!0,width:!0,height:!0,preserveAspectRatio:!0,viewBox:!0});var _=n(e);l=L(_,"path",{d:!0,fill:!0}),n(l).forEach(r),a=L(_,"path",{d:!0,fill:!0}),n(a).forEach(r),o=L(_,"path",{d:!0,fill:!0}),n(o).forEach(r),_.forEach(r),this.h()},h(){d(l,"d","M145.726 42.065v42.07l72.861 42.07v-42.07l-72.86-42.07zM0 84.135v42.07l36.43 21.03V105.17L0 84.135zm109.291 21.035l-36.43 21.034v126.2l36.43 21.035v-84.135l36.435 21.035v-42.07l-36.435-21.034V105.17z"),d(l,"fill","#E55B2D"),d(a,"d","M145.726 42.065L36.43 105.17v42.065l72.861-42.065v42.065l36.435-21.03v-84.14zM255.022 63.1l-36.435 21.035v42.07l36.435-21.035V63.1zm-72.865 84.135l-36.43 21.035v42.07l36.43-21.036v-42.07zm-36.43 63.104l-36.436-21.035v84.135l36.435-21.035V210.34z"),d(a,"fill","#ED8E24"),d(o,"d","M145.726 0L0 84.135l36.43 21.035l109.296-63.105l72.861 42.07L255.022 63.1L145.726 0zm0 126.204l-36.435 21.03l36.435 21.036l36.43-21.035l-36.43-21.03z"),d(o,"fill","#F8BF3C"),d(e,"class",m[0]),d(e,"xmlns","http://www.w3.org/2000/svg"),d(e,"xmlns:xlink","http://www.w3.org/1999/xlink"),d(e,"aria-hidden","true"),d(e,"focusable","false"),d(e,"role","img"),d(e,"width","0.94em"),d(e,"height","1em"),d(e,"preserveAspectRatio","xMidYMid meet"),d(e,"viewBox","0 0 256 274")},m(c,_){$(c,e,_),s(e,l),s(e,a),s(e,o)},p(c,[_]){_&1&&d(e,"class",c[0])},i:le,o:le,d(c){c&&r(e)}}}function nc(m,e,l){let{classNames:a=""}=e;return m.$$set=o=>{"classNames"in o&&l(0,a=o.classNames)},[a]}class ic extends We{constructor(e){super();Ye(this,e,nc,lc,Ge,{classNames:0})}}function pc(m){let e,l,a,o,c,_,E,b,A,y,C,k,z,U,w,N,O,H,K,ae,I,W,J,R,Y,oe,Z,de,re,me,pe,X,Q,ce,D,B,se,T,V,ue,he;return{c(){e=F("svg"),l=F("style"),a=i(`.J {
			stroke: #dce0df;
		}
		.K {
			stroke-linejoin: round;
		}
	`),o=F("g"),c=F("path"),_=F("path"),E=F("path"),b=F("path"),A=F("path"),y=F("path"),C=F("path"),k=F("path"),z=F("g"),U=F("path"),w=F("path"),N=F("path"),O=F("g"),H=F("path"),K=F("path"),ae=F("path"),I=F("g"),W=F("path"),J=F("path"),R=F("g"),Y=F("path"),oe=F("path"),Z=F("path"),de=F("path"),re=F("path"),me=F("path"),pe=F("path"),X=F("path"),Q=F("g"),ce=F("path"),D=F("path"),B=F("path"),se=F("path"),T=F("g"),V=F("path"),ue=F("path"),he=F("path"),this.h()},l(ne){e=L(ne,"svg",{class:!0,xmlns:!0,"xmlns:xlink":!0,"aria-hidden":!0,focusable:!0,role:!0,width:!0,height:!0,preserveAspectRatio:!0,viewBox:!0});var te=n(e);l=L(te,"style",{});var ve=n(l);a=p(ve,`.J {
			stroke: #dce0df;
		}
		.K {
			stroke-linejoin: round;
		}
	`),ve.forEach(r),o=L(te,"g",{fill:!0,class:!0});var ie=n(o);c=L(ie,"path",{d:!0}),n(c).forEach(r),_=L(ie,"path",{d:!0}),n(_).forEach(r),E=L(ie,"path",{d:!0}),n(E).forEach(r),b=L(ie,"path",{d:!0}),n(b).forEach(r),A=L(ie,"path",{d:!0}),n(A).forEach(r),y=L(ie,"path",{d:!0}),n(y).forEach(r),C=L(ie,"path",{d:!0}),n(C).forEach(r),k=L(ie,"path",{d:!0}),n(k).forEach(r),ie.forEach(r),z=L(te,"g",{fill:!0,class:!0});var $e=n(z);U=L($e,"path",{d:!0}),n(U).forEach(r),w=L($e,"path",{d:!0}),n(w).forEach(r),N=L($e,"path",{d:!0}),n(N).forEach(r),$e.forEach(r),O=L(te,"g",{fill:!0,class:!0});var Ae=n(O);H=L(Ae,"path",{d:!0}),n(H).forEach(r),K=L(Ae,"path",{d:!0}),n(K).forEach(r),Ae.forEach(r),ae=L(te,"path",{d:!0,fill:!0,class:!0}),n(ae).forEach(r),I=L(te,"g",{fill:!0,class:!0});var qe=n(I);W=L(qe,"path",{d:!0}),n(W).forEach(r),J=L(qe,"path",{d:!0}),n(J).forEach(r),qe.forEach(r),R=L(te,"g",{fill:!0,class:!0});var we=n(R);Y=L(we,"path",{d:!0}),n(Y).forEach(r),oe=L(we,"path",{d:!0}),n(oe).forEach(r),Z=L(we,"path",{d:!0}),n(Z).forEach(r),de=L(we,"path",{d:!0}),n(de).forEach(r),re=L(we,"path",{d:!0}),n(re).forEach(r),me=L(we,"path",{d:!0}),n(me).forEach(r),pe=L(we,"path",{d:!0}),n(pe).forEach(r),we.forEach(r),X=L(te,"path",{d:!0,fill:!0,class:!0}),n(X).forEach(r),Q=L(te,"g",{fill:!0,class:!0});var ee=n(Q);ce=L(ee,"path",{d:!0}),n(ce).forEach(r),D=L(ee,"path",{d:!0}),n(D).forEach(r),B=L(ee,"path",{d:!0}),n(B).forEach(r),se=L(ee,"path",{d:!0}),n(se).forEach(r),ee.forEach(r),T=L(te,"g",{fill:!0,class:!0});var ze=n(T);V=L(ze,"path",{d:!0}),n(V).forEach(r),ue=L(ze,"path",{d:!0}),n(ue).forEach(r),he=L(ze,"path",{d:!0}),n(he).forEach(r),ze.forEach(r),te.forEach(r),this.h()},h(){d(c,"d","M50.5 130.4l-25 43.31h50l25-43.31h-50z"),d(_,"d","M.5 217.01l25-43.3h50l-25 43.3H.5z"),d(E,"d","M125.5 173.71h-50l-25 43.3h50l25-43.3z"),d(b,"d","M175.5 173.71h-50l-25 43.3h50l25-43.3z"),d(A,"d","M150.5 130.4l-25 43.31h50l25-43.31h-50z"),d(y,"d","M175.5 87.1l-25 43.3h50l25-43.3h-50z"),d(C,"d","M200.5 43.8l-25 43.3h50l25-43.3h-50z"),d(k,"d","M225.5.5l-25 43.3h50l25-43.3h-50z"),d(o,"fill","#5e97f6"),d(o,"class","J K"),d(U,"d","M.5 217.01l25 43.3h50l-25-43.3H.5z"),d(w,"d","M125.5 260.31h-50l-25-43.3h50l25 43.3z"),d(N,"d","M175.5 260.31h-50l-25-43.3h50l25 43.3z"),d(z,"fill","#2a56c6"),d(z,"class","J K"),d(H,"d","M200.5 217.01l-25-43.3-25 43.3 25 43.3 25-43.3zm50-86.61l-25-43.3-25 43.3h50z"),d(K,"d","M250.5 43.8l-25 43.3 25 43.3 25-43.3-25-43.3z"),d(O,"fill","#00796b"),d(O,"class","J K"),d(ae,"d","M125.5 173.71l-25-43.31-25 43.31h50z"),d(ae,"fill","#3367d6"),d(ae,"class","J K"),d(W,"d","M250.5 130.4h-50l-25 43.31h50l25-43.31z"),d(J,"d","M300.5 130.4h-50l-25 43.31h50l25-43.31z"),d(I,"fill","#26a69a"),d(I,"class","J K"),d(Y,"d","M350.5 43.8L325.5.5l-25 43.3 25 43.3 25-43.3z"),d(oe,"d","M375.5 87.1l-25-43.3-25 43.3 25 43.3 25-43.3z"),d(Z,"d","M400.5 130.4l-25-43.3-25 43.3 25 43.31 25-43.31z"),d(de,"d","M425.5 173.71l-25-43.31-25 43.31 25 43.3 25-43.3z"),d(re,"d","M450.5 217.01l-25-43.3-25 43.3 25 43.3 25-43.3zM425.5.5l-25 43.3 25 43.3 25-43.3-25-43.3z"),d(me,"d","M375.5 87.1l25-43.3 25 43.3-25 43.3-25-43.3zm-25 43.3l-25 43.31 25 43.3 25-43.3-25-43.31z"),d(pe,"d","M325.5 260.31l-25-43.3 25-43.3 25 43.3-25 43.3z"),d(R,"fill","#9c27b0"),d(R,"class","J K"),d(X,"d","M275.5 260.31l-25-43.3h50l25 43.3h-50z"),d(X,"fill","#6a1b9a"),d(X,"class","J K"),d(ce,"d","M225.5 173.71h-50l25 43.3h50l-25-43.3z"),d(D,"d","M275.5 173.71h-50l25 43.3 25-43.3zm0-86.61l25 43.3h50l-25-43.3h-50z"),d(B,"d","M300.5 43.8h-50l25 43.3h50l-25-43.3zm125 216.51l-25-43.3h-50l25 43.3h50z"),d(se,"d","M375.5 173.71l-25 43.3h50l-25-43.3z"),d(Q,"fill","#00695c"),d(Q,"class","J K"),d(V,"d","M325.5.5h-50l-25 43.3h50l25-43.3zm0 173.21h-50l-25 43.3h50l25-43.3z"),d(ue,"d","M350.5 130.4h-50l-25 43.31h50l25-43.31zM425.5.5h-50l-25 43.3h50l25-43.3z"),d(he,"d","M375.5 87.1l-25-43.3h50l-25 43.3z"),d(T,"fill","#ea80fc"),d(T,"class","J K"),d(e,"class",m[0]),d(e,"xmlns","http://www.w3.org/2000/svg"),d(e,"xmlns:xlink","http://www.w3.org/1999/xlink"),d(e,"aria-hidden","true"),d(e,"focusable","false"),d(e,"role","img"),d(e,"width","1.73em"),d(e,"height","1em"),d(e,"preserveAspectRatio","xMidYMid meet"),d(e,"viewBox","0 0 451 260.81")},m(ne,te){$(ne,e,te),s(e,l),s(l,a),s(e,o),s(o,c),s(o,_),s(o,E),s(o,b),s(o,A),s(o,y),s(o,C),s(o,k),s(e,z),s(z,U),s(z,w),s(z,N),s(e,O),s(O,H),s(O,K),s(e,ae),s(e,I),s(I,W),s(I,J),s(e,R),s(R,Y),s(R,oe),s(R,Z),s(R,de),s(R,re),s(R,me),s(R,pe),s(e,X),s(e,Q),s(Q,ce),s(Q,D),s(Q,B),s(Q,se),s(e,T),s(T,V),s(T,ue),s(T,he)},p(ne,[te]){te&1&&d(e,"class",ne[0])},i:le,o:le,d(ne){ne&&r(e)}}}function cc(m,e,l){let{classNames:a=""}=e;return m.$$set=o=>{"classNames"in o&&l(0,a=o.classNames)},[a]}class uc extends We{constructor(e){super();Ye(this,e,cc,pc,Ge,{classNames:0})}}function fc(m){let e,l;return{c(){e=F("svg"),l=F("path"),this.h()},l(a){e=L(a,"svg",{class:!0,width:!0,height:!0,viewBox:!0,fill:!0,xmlns:!0});var o=n(e);l=L(o,"path",{d:!0,fill:!0}),n(l).forEach(r),o.forEach(r),this.h()},h(){d(l,"d","M0 4.50001C0.390979 2.37042 2.25728 0.756592 4.5 0.756592C6.74272 0.756592 8.60861 2.37042 9 4.50001C8.60902 6.62959 6.74272 8.24342 4.5 8.24342C2.25728 8.24342 0.391395 6.62959 0 4.50001ZM4.5 6.57968C5.05156 6.57968 5.58054 6.36057 5.97055 5.97056C6.36057 5.58054 6.57967 5.05157 6.57967 4.50001C6.57967 3.94844 6.36057 3.41947 5.97055 3.02945C5.58054 2.63944 5.05156 2.42033 4.5 2.42033C3.94844 2.42033 3.41946 2.63944 3.02945 3.02945C2.63943 3.41947 2.42033 3.94844 2.42033 4.50001C2.42033 5.05157 2.63943 5.58054 3.02945 5.97056C3.41946 6.36057 3.94844 6.57968 4.5 6.57968ZM4.5 5.74781C4.16906 5.74781 3.85168 5.61635 3.61767 5.38234C3.38366 5.14833 3.2522 4.83094 3.2522 4.50001C3.2522 4.16907 3.38366 3.85168 3.61767 3.61767C3.85168 3.38367 4.16906 3.2522 4.5 3.2522C4.83094 3.2522 5.14832 3.38367 5.38233 3.61767C5.61634 3.85168 5.7478 4.16907 5.7478 4.50001C5.7478 4.83094 5.61634 5.14833 5.38233 5.38234C5.14832 5.61635 4.83094 5.74781 4.5 5.74781Z"),d(l,"fill","currentColor"),d(e,"class",m[0]),d(e,"width",m[1]),d(e,"height",m[1]),d(e,"viewBox","0 0 9 9"),d(e,"fill","currentColor"),d(e,"xmlns","http://www.w3.org/2000/svg")},m(a,o){$(a,e,o),s(e,l)},p(a,[o]){o&1&&d(e,"class",a[0]),o&2&&d(e,"width",a[1]),o&2&&d(e,"height",a[1])},i:le,o:le,d(a){a&&r(e)}}}function dc(m,e,l){let{classNames:a=""}=e,{size:o="1em"}=e;return m.$$set=c=>{"classNames"in c&&l(0,a=c.classNames),"size"in c&&l(1,o=c.size)},[a,o]}class mc extends We{constructor(e){super();Ye(this,e,dc,fc,Ge,{classNames:0,size:1})}}function hc(m){let e,l;return{c(){e=F("svg"),l=F("path"),this.h()},l(a){e=L(a,"svg",{class:!0,width:!0,height:!0,viewBox:!0,fill:!0,xmlns:!0});var o=n(e);l=L(o,"path",{d:!0,fill:!0}),n(l).forEach(r),o.forEach(r),this.h()},h(){d(l,"d","M1.39125 1.9725L0.0883333 0.669997L0.677917 0.0804138L8.9275 8.33041L8.33792 8.91958L6.95875 7.54041C6.22592 8.00523 5.37572 8.25138 4.50792 8.25C2.26125 8.25 0.392083 6.63333 0 4.5C0.179179 3.52946 0.667345 2.64287 1.39167 1.9725H1.39125ZM5.65667 6.23833L5.04667 5.62833C4.81335 5.73996 4.55116 5.77647 4.29622 5.73282C4.04129 5.68918 3.80617 5.56752 3.62328 5.38463C3.44039 5.20175 3.31874 4.96663 3.27509 4.71169C3.23144 4.45676 3.26795 4.19456 3.37958 3.96125L2.76958 3.35125C2.50447 3.75187 2.38595 4.2318 2.4341 4.70978C2.48225 5.18777 2.6941 5.63442 3.0338 5.97411C3.37349 6.31381 3.82015 6.52567 4.29813 6.57382C4.77611 6.62197 5.25605 6.50345 5.65667 6.23833ZM2.83042 1.06666C3.35 0.862497 3.91625 0.749997 4.50792 0.749997C6.75458 0.749997 8.62375 2.36666 9.01583 4.5C8.88816 5.19404 8.60119 5.84899 8.1775 6.41333L6.56917 4.805C6.61694 4.48317 6.58868 4.15463 6.48664 3.84569C6.3846 3.53675 6.21162 3.256 5.98156 3.02594C5.7515 2.79588 5.47075 2.6229 5.16181 2.52086C4.85287 2.41882 4.52433 2.39056 4.2025 2.43833L2.83042 1.06708V1.06666Z"),d(l,"fill","currentColor"),d(e,"class",m[0]),d(e,"width",m[1]),d(e,"height",m[1]),d(e,"viewBox","0 0 10 9"),d(e,"fill","currentColor"),d(e,"xmlns","http://www.w3.org/2000/svg")},m(a,o){$(a,e,o),s(e,l)},p(a,[o]){o&1&&d(e,"class",a[0]),o&2&&d(e,"width",a[1]),o&2&&d(e,"height",a[1])},i:le,o:le,d(a){a&&r(e)}}}function $c(m,e,l){let{classNames:a=""}=e,{size:o="1em"}=e;return m.$$set=c=>{"classNames"in c&&l(0,a=c.classNames),"size"in c&&l(1,o=c.size)},[a,o]}class _c extends We{constructor(e){super();Ye(this,e,$c,hc,Ge,{classNames:0,size:1})}}const{window:gc}=Qp;function Rp(m){let e,l,a,o,c,_,E,b,A,y;return l=new _c({props:{size:"0.9em"}}),{c(){e=u("div"),x(l.$$.fragment),a=g(),o=u("span"),c=i("Hide "),_=i(m[3]),E=i(" content"),this.h()},l(C){e=f(C,"DIV",{class:!0});var k=n(e);S(l.$$.fragment,k),a=v(k),o=f(k,"SPAN",{});var z=n(o);c=p(z,"Hide "),_=p(z,m[3]),E=p(z," content"),z.forEach(r),k.forEach(r),this.h()},h(){d(e,"class","cursor-pointer flex items-center justify-center space-x-1 text-sm px-2 bg-white dark:bg-gray-950 hover:underline leading-none")},m(C,k){$(C,e,k),M(l,e,null),s(e,a),s(e,o),s(o,c),s(o,_),s(o,E),b=!0,A||(y=oi(e,"click",m[5]),A=!0)},p:le,i(C){b||(j(l.$$.fragment,C),b=!0)},o(C){q(l.$$.fragment,C),b=!1},d(C){C&&r(e),P(l),A=!1,y()}}}function vc(m){let e,l;const a=m[10].default,o=Os(a,m,m[9],null);return{c(){e=u("div"),o&&o.c(),this.h()},l(c){e=f(c,"DIV",{class:!0});var _=n(e);o&&o.l(_),_.forEach(r),this.h()},h(){d(e,"class","framework-content")},m(c,_){$(c,e,_),o&&o.m(e,null),l=!0},p(c,_){o&&o.p&&(!l||_&512)&&Fs(o,a,c,c[9],l?Ns(a,c[9],_,null):Ls(c[9]),null)},i(c){l||(j(o,c),l=!0)},o(c){q(o,c),l=!1},d(c){c&&r(e),o&&o.d(c)}}}function bc(m){let e,l,a,o,c,_,E,b,A,y;return l=new mc({props:{size:"0.9em"}}),{c(){e=u("div"),x(l.$$.fragment),a=g(),o=u("span"),c=i("Show "),_=i(m[3]),E=i(" content"),this.h()},l(C){e=f(C,"DIV",{class:!0});var k=n(e);S(l.$$.fragment,k),a=v(k),o=f(k,"SPAN",{});var z=n(o);c=p(z,"Show "),_=p(z,m[3]),E=p(z," content"),z.forEach(r),k.forEach(r),this.h()},h(){d(e,"class","cursor-pointer mt-[-12.5px] flex items-center justify-center space-x-1 py-4 text-sm hover:underline leading-none")},m(C,k){$(C,e,k),M(l,e,null),s(e,a),s(e,o),s(o,c),s(o,_),s(o,E),b=!0,A||(y=oi(e,"click",m[5]),A=!0)},p:le,i(C){b||(j(l.$$.fragment,C),b=!0)},o(C){q(l.$$.fragment,C),b=!1},d(C){C&&r(e),P(l),A=!1,y()}}}function Ec(m){let e,l,a,o,c,_,E,b,A,y,C,k,z,U;var w=m[2];function N(I){return{}}w&&(o=new w(N()));let O=!m[1]&&Rp(m);const H=[bc,vc],K=[];function ae(I,W){return I[1]?0:1}return y=ae(m),C=K[y]=H[y](m),{c(){e=u("div"),l=u("div"),a=u("div"),o&&x(o.$$.fragment),c=g(),_=u("span"),E=i(m[3]),b=g(),O&&O.c(),A=g(),C.c(),this.h()},l(I){e=f(I,"DIV",{class:!0});var W=n(e);l=f(W,"DIV",{class:!0});var J=n(l);a=f(J,"DIV",{class:!0});var R=n(a);o&&S(o.$$.fragment,R),c=v(R),_=f(R,"SPAN",{});var Y=n(_);E=p(Y,m[3]),Y.forEach(r),R.forEach(r),b=v(J),O&&O.l(J),J.forEach(r),A=v(W),C.l(W),W.forEach(r),this.h()},h(){d(a,"class","flex px-1 items-center space-x-1 bg-white dark:bg-gray-950"),d(l,"class","flex h-[22px] mt-[-12.5px] justify-between leading-none"),d(e,"class","border border-gray-200 rounded-xl px-4 relative")},m(I,W){$(I,e,W),s(e,l),s(l,a),o&&M(o,a,null),s(a,c),s(a,_),s(_,E),s(l,b),O&&O.m(l,null),s(e,A),K[y].m(e,null),m[11](e),k=!0,z||(U=oi(gc,"hashchange",m[6]),z=!0)},p(I,[W]){if(w!==(w=I[2])){if(o){ya();const R=o;q(R.$$.fragment,1,0,()=>{P(R,1)}),Aa()}w?(o=new w(N()),x(o.$$.fragment),j(o.$$.fragment,1),M(o,a,c)):o=null}I[1]?O&&(ya(),q(O,1,1,()=>{O=null}),Aa()):O?(O.p(I,W),W&2&&j(O,1)):(O=Rp(I),O.c(),j(O,1),O.m(l,null));let J=y;y=ae(I),y===J?K[y].p(I,W):(ya(),q(K[J],1,1,()=>{K[J]=null}),Aa(),C=K[y],C?C.p(I,W):(C=K[y]=H[y](I),C.c()),j(C,1),C.m(e,null))},i(I){k||(o&&j(o.$$.fragment,I),j(O),j(C),k=!0)},o(I){o&&q(o.$$.fragment,I),q(O),q(C),k=!1},d(I){I&&r(e),o&&P(o),O&&O.d(),K[y].d(),m[11](null),z=!1,U()}}}function wc(m,e,l){let a,o,{$$slots:c={},$$scope:_}=e,{framework:E}=e,b,A=new Set;const y={pytorch:{Icon:oc,label:"Pytorch"},tensorflow:{Icon:ic,label:"TensorFlow"},jax:{Icon:uc,label:"JAX"}},{Icon:C,label:k}=y[E],z=`hf_doc_framework_${E}_is_hidden`,U=ac(E);Zp(m,U,H=>l(8,o=H));function w(){oo(U,o=o!==Le.CLOSED?Le.CLOSED:Le.OPEN,o),localStorage.setItem(z,o)}function N(){const H=window.location.hash.slice(1);A.has(H)&&(oo(U,o=Le.HASHASHLINK,o),localStorage.setItem(z,o))}Gp(()=>{const H=window.location.hash.slice(1),K="header-link",ae=b.querySelectorAll(`.${K}`);A=new Set([...ae].map(W=>W.id));const I=localStorage.getItem(z);A.has(H)?oo(U,o=Le.HASHASHLINK,o):I===Le.CLOSED&&o!==Le.HASHASHLINK&&oo(U,o=Le.CLOSED,o)});function O(H){Xp[H?"unshift":"push"](()=>{b=H,l(0,b)})}return m.$$set=H=>{"framework"in H&&l(7,E=H.framework),"$$scope"in H&&l(9,_=H.$$scope)},m.$$.update=()=>{m.$$.dirty&256&&l(1,a=o===Le.CLOSED)},[b,a,C,k,U,w,N,E,o,_,c,O]}class li extends We{constructor(e){super();Ye(this,e,wc,Ec,Ge,{framework:7})}}const kc=m=>({}),Up=m=>({}),jc=m=>({}),Bp=m=>({}),yc=m=>({}),Vp=m=>({});function Kp(m){let e,l;return e=new li({props:{framework:"pytorch",$$slots:{default:[Ac]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){S(e.$$.fragment,a)},m(a,o){M(e,a,o),l=!0},p(a,o){const c={};o&16&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function Ac(m){let e;const l=m[3].pytorch,a=Os(l,m,m[4],Vp);return{c(){a&&a.c()},l(o){a&&a.l(o)},m(o,c){a&&a.m(o,c),e=!0},p(o,c){a&&a.p&&(!e||c&16)&&Fs(a,l,o,o[4],e?Ns(l,o[4],c,yc):Ls(o[4]),Vp)},i(o){e||(j(a,o),e=!0)},o(o){q(a,o),e=!1},d(o){a&&a.d(o)}}}function Wp(m){let e,l;return e=new li({props:{framework:"tensorflow",$$slots:{default:[qc]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){S(e.$$.fragment,a)},m(a,o){M(e,a,o),l=!0},p(a,o){const c={};o&16&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function qc(m){let e;const l=m[3].tensorflow,a=Os(l,m,m[4],Bp);return{c(){a&&a.c()},l(o){a&&a.l(o)},m(o,c){a&&a.m(o,c),e=!0},p(o,c){a&&a.p&&(!e||c&16)&&Fs(a,l,o,o[4],e?Ns(l,o[4],c,jc):Ls(o[4]),Bp)},i(o){e||(j(a,o),e=!0)},o(o){q(a,o),e=!1},d(o){a&&a.d(o)}}}function Yp(m){let e,l;return e=new li({props:{framework:"jax",$$slots:{default:[zc]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){S(e.$$.fragment,a)},m(a,o){M(e,a,o),l=!0},p(a,o){const c={};o&16&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function zc(m){let e;const l=m[3].jax,a=Os(l,m,m[4],Up);return{c(){a&&a.c()},l(o){a&&a.l(o)},m(o,c){a&&a.m(o,c),e=!0},p(o,c){a&&a.p&&(!e||c&16)&&Fs(a,l,o,o[4],e?Ns(l,o[4],c,kc):Ls(o[4]),Up)},i(o){e||(j(a,o),e=!0)},o(o){q(a,o),e=!1},d(o){a&&a.d(o)}}}function Cc(m){let e,l,a,o,c=m[0]&&Kp(m),_=m[1]&&Wp(m),E=m[2]&&Yp(m);return{c(){e=u("div"),c&&c.c(),l=g(),_&&_.c(),a=g(),E&&E.c(),this.h()},l(b){e=f(b,"DIV",{class:!0});var A=n(e);c&&c.l(A),l=v(A),_&&_.l(A),a=v(A),E&&E.l(A),A.forEach(r),this.h()},h(){d(e,"class","space-y-10 py-6 2xl:py-8 2xl:-mx-4")},m(b,A){$(b,e,A),c&&c.m(e,null),s(e,l),_&&_.m(e,null),s(e,a),E&&E.m(e,null),o=!0},p(b,[A]){b[0]?c?(c.p(b,A),A&1&&j(c,1)):(c=Kp(b),c.c(),j(c,1),c.m(e,l)):c&&(ya(),q(c,1,1,()=>{c=null}),Aa()),b[1]?_?(_.p(b,A),A&2&&j(_,1)):(_=Wp(b),_.c(),j(_,1),_.m(e,a)):_&&(ya(),q(_,1,1,()=>{_=null}),Aa()),b[2]?E?(E.p(b,A),A&4&&j(E,1)):(E=Yp(b),E.c(),j(E,1),E.m(e,null)):E&&(ya(),q(E,1,1,()=>{E=null}),Aa())},i(b){o||(j(c),j(_),j(E),o=!0)},o(b){q(c),q(_),q(E),o=!1},d(b){b&&r(e),c&&c.d(),_&&_.d(),E&&E.d()}}}function Tc(m,e,l){let{$$slots:a={},$$scope:o}=e,{pytorch:c=!1}=e,{tensorflow:_=!1}=e,{jax:E=!1}=e;return m.$$set=b=>{"pytorch"in b&&l(0,c=b.pytorch),"tensorflow"in b&&l(1,_=b.tensorflow),"jax"in b&&l(2,E=b.jax),"$$scope"in b&&l(4,o=b.$$scope)},[c,_,E,a,o]}class ka extends We{constructor(e){super();Ye(this,e,Tc,Cc,Ge,{pytorch:0,tensorflow:1,jax:2})}}function xc(m){let e;const l=m[1].default,a=Os(l,m,m[0],null);return{c(){a&&a.c()},l(o){a&&a.l(o)},m(o,c){a&&a.m(o,c),e=!0},p(o,[c]){a&&a.p&&(!e||c&1)&&Fs(a,l,o,o[0],e?Ns(l,o[0],c,null):Ls(o[0]),null)},i(o){e||(j(a,o),e=!0)},o(o){q(a,o),e=!1},d(o){a&&a.d(o)}}}function Mc(m,e,l){let{$$slots:a={},$$scope:o}=e;return m.$$set=c=>{"$$scope"in c&&l(0,o=c.$$scope)},[o,a]}class ye extends We{constructor(e){super();Ye(this,e,Mc,xc,Ge,{})}}function Pc(m){let e,l;return{c(){e=u("p"),l=i(`Todos los ejemplos de c\xF3digo presentados en la documentaci\xF3n tienen un bot\xF3n arriba a la izquierda para elegir entre Pytorch y TensorFlow.
Si no fuese as\xED, se espera que el c\xF3digo funcione para ambos backends sin ning\xFAn cambio.`)},l(a){e=f(a,"P",{});var o=n(e);l=p(o,`Todos los ejemplos de c\xF3digo presentados en la documentaci\xF3n tienen un bot\xF3n arriba a la izquierda para elegir entre Pytorch y TensorFlow.
Si no fuese as\xED, se espera que el c\xF3digo funcione para ambos backends sin ning\xFAn cambio.`),o.forEach(r)},m(a,o){$(a,e,o),s(e,l)},d(a){a&&r(e)}}}function Sc(m){let e,l,a,o,c,_,E,b;return{c(){e=u("p"),l=i("Para m\xE1s detalles acerca del "),a=u("code"),o=i("pipeline()"),c=i("y tareas asociadas, consulta la documentaci\xF3n "),_=u("a"),E=i("aqu\xED"),b=i("."),this.h()},l(A){e=f(A,"P",{});var y=n(e);l=p(y,"Para m\xE1s detalles acerca del "),a=f(y,"CODE",{});var C=n(a);o=p(C,"pipeline()"),C.forEach(r),c=p(y,"y tareas asociadas, consulta la documentaci\xF3n "),_=f(y,"A",{href:!0});var k=n(_);E=p(k,"aqu\xED"),k.forEach(r),b=p(y,"."),y.forEach(r),this.h()},h(){d(_,"href","./main_classes/pipelines")},m(A,y){$(A,e,y),s(e,l),s(e,a),s(a,o),s(e,c),s(e,_),s(_,E),s(e,b)},d(A){A&&r(e)}}}function Dc(m){let e,l;return e=new G({props:{code:"pip install torch",highlighted:"pip install torch"}}),{c(){x(e.$$.fragment)},l(a){S(e.$$.fragment,a)},m(a,o){M(e,a,o),l=!0},p:le,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function Oc(m){let e,l;return e=new ye({props:{$$slots:{default:[Dc]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){S(e.$$.fragment,a)},m(a,o){M(e,a,o),l=!0},p(a,o){const c={};o&2&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function Fc(m){let e,l;return e=new G({props:{code:"pip install tensorflow",highlighted:"pip install tensorflow"}}),{c(){x(e.$$.fragment)},l(a){S(e.$$.fragment,a)},m(a,o){M(e,a,o),l=!0},p:le,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function Lc(m){let e,l;return e=new ye({props:{$$slots:{default:[Fc]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){S(e.$$.fragment,a)},m(a,o){M(e,a,o),l=!0},p(a,o){const c={};o&2&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function Nc(m){let e,l,a,o,c,_,E,b,A,y,C;return y=new G({props:{code:`from transformers import AutoTokenizer, AutoModelForSequenceClassification

model = AutoModelForSequenceClassification.from_pretrained(model_name)
tokenizer = AutoTokenizer.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(model_name)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(model_name)`}}),{c(){e=u("p"),l=i("Usa "),a=u("code"),o=i("AutoModelForSequenceClassification"),c=i("y [\u2018AutoTokenizer\u2019] para cargar un modelo preentrenado y un tokenizador asociado (m\xE1s en un "),_=u("code"),E=i("AutoClass"),b=i(" debajo):"),A=g(),x(y.$$.fragment)},l(k){e=f(k,"P",{});var z=n(e);l=p(z,"Usa "),a=f(z,"CODE",{});var U=n(a);o=p(U,"AutoModelForSequenceClassification"),U.forEach(r),c=p(z,"y [\u2018AutoTokenizer\u2019] para cargar un modelo preentrenado y un tokenizador asociado (m\xE1s en un "),_=f(z,"CODE",{});var w=n(_);E=p(w,"AutoClass"),w.forEach(r),b=p(z," debajo):"),z.forEach(r),A=v(k),S(y.$$.fragment,k)},m(k,z){$(k,e,z),s(e,l),s(e,a),s(a,o),s(e,c),s(e,_),s(_,E),s(e,b),$(k,A,z),M(y,k,z),C=!0},p:le,i(k){C||(j(y.$$.fragment,k),C=!0)},o(k){q(y.$$.fragment,k),C=!1},d(k){k&&r(e),k&&r(A),P(y,k)}}}function Ic(m){let e,l;return e=new ye({props:{$$slots:{default:[Nc]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){S(e.$$.fragment,a)},m(a,o){M(e,a,o),l=!0},p(a,o){const c={};o&2&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function Hc(m){let e,l,a,o,c,_,E,b,A,y,C;return y=new G({props:{code:`from transformers import AutoTokenizer, TFAutoModelForSequenceClassification

model = TFAutoModelForSequenceClassification.from_pretrained(model_name)
tokenizer = AutoTokenizer.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(model_name)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(model_name)`}}),{c(){e=u("p"),l=i("Usa "),a=u("code"),o=i("TFAutoModelForSequenceClassification"),c=i("y [\u2018AutoTokenizer\u2019] para cargar un modelo preentrenado y un tokenizador asociado (m\xE1s en un "),_=u("code"),E=i("TFAutoClass"),b=i(" debajo):"),A=g(),x(y.$$.fragment)},l(k){e=f(k,"P",{});var z=n(e);l=p(z,"Usa "),a=f(z,"CODE",{});var U=n(a);o=p(U,"TFAutoModelForSequenceClassification"),U.forEach(r),c=p(z,"y [\u2018AutoTokenizer\u2019] para cargar un modelo preentrenado y un tokenizador asociado (m\xE1s en un "),_=f(z,"CODE",{});var w=n(_);E=p(w,"TFAutoClass"),w.forEach(r),b=p(z," debajo):"),z.forEach(r),A=v(k),S(y.$$.fragment,k)},m(k,z){$(k,e,z),s(e,l),s(e,a),s(a,o),s(e,c),s(e,_),s(_,E),s(e,b),$(k,A,z),M(y,k,z),C=!0},p:le,i(k){C||(j(y.$$.fragment,k),C=!0)},o(k){q(y.$$.fragment,k),C=!1},d(k){k&&r(e),k&&r(A),P(y,k)}}}function Rc(m){let e,l;return e=new ye({props:{$$slots:{default:[Hc]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){S(e.$$.fragment,a)},m(a,o){M(e,a,o),l=!0},p(a,o){const c={};o&2&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function Uc(m){let e,l;return e=new G({props:{code:`pt_batch = tokenizer(
    ["We are very happy to show you the \u{1F917} Transformers library.", "We hope you don't hate it."],
    padding=True,
    truncation=True,
    max_length=512,
    return_tensors="pt",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>pt_batch = tokenizer(
<span class="hljs-meta">... </span>    [<span class="hljs-string">&quot;We are very happy to show you the \u{1F917} Transformers library.&quot;</span>, <span class="hljs-string">&quot;We hope you don&#x27;t hate it.&quot;</span>],
<span class="hljs-meta">... </span>    padding=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    truncation=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    max_length=<span class="hljs-number">512</span>,
<span class="hljs-meta">... </span>    return_tensors=<span class="hljs-string">&quot;pt&quot;</span>,
<span class="hljs-meta">... </span>)`}}),{c(){x(e.$$.fragment)},l(a){S(e.$$.fragment,a)},m(a,o){M(e,a,o),l=!0},p:le,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function Bc(m){let e,l;return e=new ye({props:{$$slots:{default:[Uc]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){S(e.$$.fragment,a)},m(a,o){M(e,a,o),l=!0},p(a,o){const c={};o&2&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function Vc(m){let e,l;return e=new G({props:{code:`tf_batch = tokenizer(
    ["We are very happy to show you the \u{1F917} Transformers library.", "We hope you don't hate it."],
    padding=True,
    truncation=True,
    max_length=512,
    return_tensors="tf",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>tf_batch = tokenizer(
<span class="hljs-meta">... </span>    [<span class="hljs-string">&quot;We are very happy to show you the \u{1F917} Transformers library.&quot;</span>, <span class="hljs-string">&quot;We hope you don&#x27;t hate it.&quot;</span>],
<span class="hljs-meta">... </span>    padding=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    truncation=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    max_length=<span class="hljs-number">512</span>,
<span class="hljs-meta">... </span>    return_tensors=<span class="hljs-string">&quot;tf&quot;</span>,
<span class="hljs-meta">... </span>)`}}),{c(){x(e.$$.fragment)},l(a){S(e.$$.fragment,a)},m(a,o){M(e,a,o),l=!0},p:le,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function Kc(m){let e,l;return e=new ye({props:{$$slots:{default:[Vc]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){S(e.$$.fragment,a)},m(a,o){M(e,a,o),l=!0},p(a,o){const c={};o&2&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function Wc(m){let e,l,a,o,c,_,E,b;return{c(){e=u("p"),l=i("Ve el "),a=u("a"),o=i("task summary"),c=i(" para revisar qu\xE9 clase del "),_=u("code"),E=i("AutoModel"),b=i("deber\xEDas usar para cada tarea."),this.h()},l(A){e=f(A,"P",{});var y=n(e);l=p(y,"Ve el "),a=f(y,"A",{href:!0});var C=n(a);o=p(C,"task summary"),C.forEach(r),c=p(y," para revisar qu\xE9 clase del "),_=f(y,"CODE",{});var k=n(_);E=p(k,"AutoModel"),k.forEach(r),b=p(y,"deber\xEDas usar para cada tarea."),y.forEach(r),this.h()},h(){d(a,"href","./task_summary")},m(A,y){$(A,e,y),s(e,l),s(e,a),s(a,o),s(e,c),s(e,_),s(_,E),s(e,b)},d(A){A&&r(e)}}}function Yc(m){let e,l,a,o,c,_,E,b,A,y,C,k,z,U,w,N,O,H,K,ae,I,W,J,R,Y,oe,Z,de,re,me,pe,X,Q,ce,D,B,se;return w=new G({props:{code:`from transformers import AutoModelForSequenceClassification

model_name = "nlptown/bert-base-multilingual-uncased-sentiment"
pt_model = AutoModelForSequenceClassification.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;nlptown/bert-base-multilingual-uncased-sentiment&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model = AutoModelForSequenceClassification.from_pretrained(model_name)`}}),O=new ja({props:{$$slots:{default:[Wc]},$$scope:{ctx:m}}}),Y=new G({props:{code:"pt_outputs = pt_model(**pt_batch)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>pt_outputs = pt_model(**pt_batch)'}}),B=new G({props:{code:`from torch import nn

pt_predictions = nn.functional.softmax(pt_outputs.logits, dim=-1)
print(pt_predictions)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn

<span class="hljs-meta">&gt;&gt;&gt; </span>pt_predictions = nn.functional.softmax(pt_outputs.logits, dim=-<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(pt_predictions)
tensor([[<span class="hljs-number">0.0021</span>, <span class="hljs-number">0.0018</span>, <span class="hljs-number">0.0115</span>, <span class="hljs-number">0.2121</span>, <span class="hljs-number">0.7725</span>],
        [<span class="hljs-number">0.2084</span>, <span class="hljs-number">0.1826</span>, <span class="hljs-number">0.1969</span>, <span class="hljs-number">0.1755</span>, <span class="hljs-number">0.2365</span>]], grad_fn=&lt;SoftmaxBackward0&gt;)`}}),{c(){e=u("p"),l=i("\u{1F917} Transformers provee una forma simple y unificada de cargar tus instancias preentrenadas. Esto significa que puedes cargar un "),a=u("code"),o=i("AutoModel"),c=i("como cargar\xEDas un "),_=u("code"),E=i("AutoTokenizer"),b=i(" La \xFAnica diferencia es seleccionar el "),A=u("code"),y=i("AutoModel"),C=i("correcto para la tarea. Ya que est\xE1s clasificando texto, o secuencias, carga "),k=u("code"),z=i("AutoModelForSequenceClassification"),U=g(),x(w.$$.fragment),N=g(),x(O.$$.fragment),H=g(),K=u("p"),ae=i("Ahora puedes pasar tu lote (batch) preprocesado de inputs directamente al modelo. Solo tienes que desempacar el diccionario a\xF1adiendo "),I=u("code"),W=i("**"),J=i(":"),R=g(),x(Y.$$.fragment),oe=g(),Z=u("p"),de=i("El modelo producir\xE1 las activaciones finales en el atributo "),re=u("code"),me=i("logits"),pe=i(". Aplica la funci\xF3n softmax a "),X=u("code"),Q=i("logits"),ce=i(" para obtener las probabilidades:"),D=g(),x(B.$$.fragment)},l(T){e=f(T,"P",{});var V=n(e);l=p(V,"\u{1F917} Transformers provee una forma simple y unificada de cargar tus instancias preentrenadas. Esto significa que puedes cargar un "),a=f(V,"CODE",{});var ue=n(a);o=p(ue,"AutoModel"),ue.forEach(r),c=p(V,"como cargar\xEDas un "),_=f(V,"CODE",{});var he=n(_);E=p(he,"AutoTokenizer"),he.forEach(r),b=p(V," La \xFAnica diferencia es seleccionar el "),A=f(V,"CODE",{});var ne=n(A);y=p(ne,"AutoModel"),ne.forEach(r),C=p(V,"correcto para la tarea. Ya que est\xE1s clasificando texto, o secuencias, carga "),k=f(V,"CODE",{});var te=n(k);z=p(te,"AutoModelForSequenceClassification"),te.forEach(r),V.forEach(r),U=v(T),S(w.$$.fragment,T),N=v(T),S(O.$$.fragment,T),H=v(T),K=f(T,"P",{});var ve=n(K);ae=p(ve,"Ahora puedes pasar tu lote (batch) preprocesado de inputs directamente al modelo. Solo tienes que desempacar el diccionario a\xF1adiendo "),I=f(ve,"CODE",{});var ie=n(I);W=p(ie,"**"),ie.forEach(r),J=p(ve,":"),ve.forEach(r),R=v(T),S(Y.$$.fragment,T),oe=v(T),Z=f(T,"P",{});var $e=n(Z);de=p($e,"El modelo producir\xE1 las activaciones finales en el atributo "),re=f($e,"CODE",{});var Ae=n(re);me=p(Ae,"logits"),Ae.forEach(r),pe=p($e,". Aplica la funci\xF3n softmax a "),X=f($e,"CODE",{});var qe=n(X);Q=p(qe,"logits"),qe.forEach(r),ce=p($e," para obtener las probabilidades:"),$e.forEach(r),D=v(T),S(B.$$.fragment,T)},m(T,V){$(T,e,V),s(e,l),s(e,a),s(a,o),s(e,c),s(e,_),s(_,E),s(e,b),s(e,A),s(A,y),s(e,C),s(e,k),s(k,z),$(T,U,V),M(w,T,V),$(T,N,V),M(O,T,V),$(T,H,V),$(T,K,V),s(K,ae),s(K,I),s(I,W),s(K,J),$(T,R,V),M(Y,T,V),$(T,oe,V),$(T,Z,V),s(Z,de),s(Z,re),s(re,me),s(Z,pe),s(Z,X),s(X,Q),s(Z,ce),$(T,D,V),M(B,T,V),se=!0},p(T,V){const ue={};V&2&&(ue.$$scope={dirty:V,ctx:T}),O.$set(ue)},i(T){se||(j(w.$$.fragment,T),j(O.$$.fragment,T),j(Y.$$.fragment,T),j(B.$$.fragment,T),se=!0)},o(T){q(w.$$.fragment,T),q(O.$$.fragment,T),q(Y.$$.fragment,T),q(B.$$.fragment,T),se=!1},d(T){T&&r(e),T&&r(U),P(w,T),T&&r(N),P(O,T),T&&r(H),T&&r(K),T&&r(R),P(Y,T),T&&r(oe),T&&r(Z),T&&r(D),P(B,T)}}}function Gc(m){let e,l;return e=new ye({props:{$$slots:{default:[Yc]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){S(e.$$.fragment,a)},m(a,o){M(e,a,o),l=!0},p(a,o){const c={};o&2&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function Jc(m){let e;return{c(){e=i("Ve el [task summary](./task_summary) para revisar qu\xE9 clase del `AutoModel`  deber\xEDas usar para cada tarea.")},l(l){e=p(l,"Ve el [task summary](./task_summary) para revisar qu\xE9 clase del `AutoModel`  deber\xEDas usar para cada tarea.")},m(l,a){$(l,e,a)},d(l){l&&r(e)}}}function Zc(m){let e,l,a,o,c,_,E,b,A,y,C,k,z,U,w,N,O,H,K,ae,I,W,J,R,Y,oe,Z,de,re,me,pe,X,Q,ce;return w=new G({props:{code:`from transformers import TFAutoModelForSequenceClassification

model_name = "nlptown/bert-base-multilingual-uncased-sentiment"
tf_model = TFAutoModelForSequenceClassification.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;nlptown/bert-base-multilingual-uncased-sentiment&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFAutoModelForSequenceClassification.from_pretrained(model_name)`}}),O=new ja({props:{$$slots:{default:[Jc]},$$scope:{ctx:m}}}),W=new G({props:{code:"tf_outputs = tf_model(tf_batch)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tf_outputs = tf_model(tf_batch)'}}),Q=new G({props:{code:`import tensorflow as tf

tf_predictions = tf.nn.softmax(tf_outputs.logits, axis=-1)
print(tf.math.round(tf_predictions * 10**4) / 10**4)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf

<span class="hljs-meta">&gt;&gt;&gt; </span>tf_predictions = tf.nn.softmax(tf_outputs.logits, axis=-<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(tf.math.<span class="hljs-built_in">round</span>(tf_predictions * <span class="hljs-number">10</span>**<span class="hljs-number">4</span>) / <span class="hljs-number">10</span>**<span class="hljs-number">4</span>)
tf.Tensor(
[[<span class="hljs-number">0.0021</span> <span class="hljs-number">0.0018</span> <span class="hljs-number">0.0116</span> <span class="hljs-number">0.2121</span> <span class="hljs-number">0.7725</span>]
 [<span class="hljs-number">0.2084</span> <span class="hljs-number">0.1826</span> <span class="hljs-number">0.1969</span> <span class="hljs-number">0.1755</span>  <span class="hljs-number">0.2365</span>]], shape=(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>), dtype=float32)`}}),{c(){e=u("p"),l=i("\u{1F917} Transformers provee una forma simple y unificada de cargar tus instancias preentrenadas. Esto significa que puedes cargar un "),a=u("code"),o=i("TFAutoModel"),c=i("como cargar\xEDas un "),_=u("code"),E=i("AutoTokenizer"),b=i(" La \xFAnica diferencia es seleccionar el "),A=u("code"),y=i("TFAutoModel"),C=i("correcto para la tarea. Ya que est\xE1s clasificando texto, o secuencias, carga "),k=u("code"),z=i("TFAutoModelForSequenceClassification"),U=g(),x(w.$$.fragment),N=g(),x(O.$$.fragment),H=g(),K=u("p"),ae=i("Ahora puedes pasar tu lote preprocesado de inputs directamente al modelo pasando las llaves del diccionario directamente a los tensores:"),I=g(),x(W.$$.fragment),J=g(),R=u("p"),Y=i("El modelo producir\xE1 las activaciones finales en el atributo "),oe=u("code"),Z=i("logits"),de=i(". Aplica la funci\xF3n softmax a "),re=u("code"),me=i("logits"),pe=i(" para obtener las probabilidades:"),X=g(),x(Q.$$.fragment)},l(D){e=f(D,"P",{});var B=n(e);l=p(B,"\u{1F917} Transformers provee una forma simple y unificada de cargar tus instancias preentrenadas. Esto significa que puedes cargar un "),a=f(B,"CODE",{});var se=n(a);o=p(se,"TFAutoModel"),se.forEach(r),c=p(B,"como cargar\xEDas un "),_=f(B,"CODE",{});var T=n(_);E=p(T,"AutoTokenizer"),T.forEach(r),b=p(B," La \xFAnica diferencia es seleccionar el "),A=f(B,"CODE",{});var V=n(A);y=p(V,"TFAutoModel"),V.forEach(r),C=p(B,"correcto para la tarea. Ya que est\xE1s clasificando texto, o secuencias, carga "),k=f(B,"CODE",{});var ue=n(k);z=p(ue,"TFAutoModelForSequenceClassification"),ue.forEach(r),B.forEach(r),U=v(D),S(w.$$.fragment,D),N=v(D),S(O.$$.fragment,D),H=v(D),K=f(D,"P",{});var he=n(K);ae=p(he,"Ahora puedes pasar tu lote preprocesado de inputs directamente al modelo pasando las llaves del diccionario directamente a los tensores:"),he.forEach(r),I=v(D),S(W.$$.fragment,D),J=v(D),R=f(D,"P",{});var ne=n(R);Y=p(ne,"El modelo producir\xE1 las activaciones finales en el atributo "),oe=f(ne,"CODE",{});var te=n(oe);Z=p(te,"logits"),te.forEach(r),de=p(ne,". Aplica la funci\xF3n softmax a "),re=f(ne,"CODE",{});var ve=n(re);me=p(ve,"logits"),ve.forEach(r),pe=p(ne," para obtener las probabilidades:"),ne.forEach(r),X=v(D),S(Q.$$.fragment,D)},m(D,B){$(D,e,B),s(e,l),s(e,a),s(a,o),s(e,c),s(e,_),s(_,E),s(e,b),s(e,A),s(A,y),s(e,C),s(e,k),s(k,z),$(D,U,B),M(w,D,B),$(D,N,B),M(O,D,B),$(D,H,B),$(D,K,B),s(K,ae),$(D,I,B),M(W,D,B),$(D,J,B),$(D,R,B),s(R,Y),s(R,oe),s(oe,Z),s(R,de),s(R,re),s(re,me),s(R,pe),$(D,X,B),M(Q,D,B),ce=!0},p(D,B){const se={};B&2&&(se.$$scope={dirty:B,ctx:D}),O.$set(se)},i(D){ce||(j(w.$$.fragment,D),j(O.$$.fragment,D),j(W.$$.fragment,D),j(Q.$$.fragment,D),ce=!0)},o(D){q(w.$$.fragment,D),q(O.$$.fragment,D),q(W.$$.fragment,D),q(Q.$$.fragment,D),ce=!1},d(D){D&&r(e),D&&r(U),P(w,D),D&&r(N),P(O,D),D&&r(H),D&&r(K),D&&r(I),P(W,D),D&&r(J),D&&r(R),D&&r(X),P(Q,D)}}}function Qc(m){let e,l;return e=new ye({props:{$$slots:{default:[Zc]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){S(e.$$.fragment,a)},m(a,o){M(e,a,o),l=!0},p(a,o){const c={};o&2&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function Xc(m){let e,l,a,o,c;return{c(){e=u("p"),l=i("Todos los modelos de \u{1F917} Transformers (PyTorch o TensorFlow) producir\xE1n los tensores "),a=u("em"),o=i("antes"),c=i(` de la funci\xF3n de activaci\xF3n
final (como softmax) porque la funci\xF3n de activaci\xF3n final es com\xFAnmente fusionada con la p\xE9rdida.`)},l(_){e=f(_,"P",{});var E=n(e);l=p(E,"Todos los modelos de \u{1F917} Transformers (PyTorch o TensorFlow) producir\xE1n los tensores "),a=f(E,"EM",{});var b=n(a);o=p(b,"antes"),b.forEach(r),c=p(E,` de la funci\xF3n de activaci\xF3n
final (como softmax) porque la funci\xF3n de activaci\xF3n final es com\xFAnmente fusionada con la p\xE9rdida.`),E.forEach(r)},m(_,E){$(_,e,E),s(e,l),s(e,a),s(a,o),s(e,c)},d(_){_&&r(e)}}}function eu(m){let e,l,a,o,c;return{c(){e=u("p"),l=i(`Los outputs del modelo de \u{1F917} Transformers son dataclasses especiales por lo que sus atributos pueden ser completados en un IDE.
Los outputs del modelo tambi\xE9n se comportan como tuplas o diccionarios (e.g., puedes indexar con un entero, un slice o una cadena) en cuyo caso los atributos que son `),a=u("code"),o=i("None"),c=i(" son ignorados.")},l(_){e=f(_,"P",{});var E=n(e);l=p(E,`Los outputs del modelo de \u{1F917} Transformers son dataclasses especiales por lo que sus atributos pueden ser completados en un IDE.
Los outputs del modelo tambi\xE9n se comportan como tuplas o diccionarios (e.g., puedes indexar con un entero, un slice o una cadena) en cuyo caso los atributos que son `),a=f(E,"CODE",{});var b=n(a);o=p(b,"None"),b.forEach(r),c=p(E," son ignorados."),E.forEach(r)},m(_,E){$(_,e,E),s(e,l),s(e,a),s(a,o),s(e,c)},d(_){_&&r(e)}}}function tu(m){let e,l,a,o,c,_,E,b,A,y,C,k,z,U;return _=new G({props:{code:`pt_save_directory = "./pt_save_pretrained"
tokenizer.save_pretrained(pt_save_directory)
pt_model.save_pretrained(pt_save_directory)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>pt_save_directory = <span class="hljs-string">&quot;./pt_save_pretrained&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(pt_save_directory)
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model.save_pretrained(pt_save_directory)`}}),z=new G({props:{code:'pt_model = AutoModelForSequenceClassification.from_pretrained("./pt_save_pretrained")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;./pt_save_pretrained&quot;</span>)'}}),{c(){e=u("p"),l=i("Una vez que tu modelo est\xE9 fine-tuned puedes guardarlo con tu tokenizador usando "),a=u("code"),o=i("PreTrainedModel.save_pretrained()"),c=g(),x(_.$$.fragment),E=g(),b=u("p"),A=i("Cuando quieras usar el modelo otra vez c\xE1rgalo con "),y=u("code"),C=i("PreTrainedModel.from_pretrained()"),k=g(),x(z.$$.fragment)},l(w){e=f(w,"P",{});var N=n(e);l=p(N,"Una vez que tu modelo est\xE9 fine-tuned puedes guardarlo con tu tokenizador usando "),a=f(N,"CODE",{});var O=n(a);o=p(O,"PreTrainedModel.save_pretrained()"),O.forEach(r),N.forEach(r),c=v(w),S(_.$$.fragment,w),E=v(w),b=f(w,"P",{});var H=n(b);A=p(H,"Cuando quieras usar el modelo otra vez c\xE1rgalo con "),y=f(H,"CODE",{});var K=n(y);C=p(K,"PreTrainedModel.from_pretrained()"),K.forEach(r),H.forEach(r),k=v(w),S(z.$$.fragment,w)},m(w,N){$(w,e,N),s(e,l),s(e,a),s(a,o),$(w,c,N),M(_,w,N),$(w,E,N),$(w,b,N),s(b,A),s(b,y),s(y,C),$(w,k,N),M(z,w,N),U=!0},p:le,i(w){U||(j(_.$$.fragment,w),j(z.$$.fragment,w),U=!0)},o(w){q(_.$$.fragment,w),q(z.$$.fragment,w),U=!1},d(w){w&&r(e),w&&r(c),P(_,w),w&&r(E),w&&r(b),w&&r(k),P(z,w)}}}function au(m){let e,l;return e=new ye({props:{$$slots:{default:[tu]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){S(e.$$.fragment,a)},m(a,o){M(e,a,o),l=!0},p(a,o){const c={};o&2&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function su(m){let e,l,a,o,c,_,E,b,A,y,C,k,z,U;return _=new G({props:{code:`tf_save_directory = "./tf_save_pretrained"
tokenizer.save_pretrained(tf_save_directory)
tf_model.save_pretrained(tf_save_directory)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>tf_save_directory = <span class="hljs-string">&quot;./tf_save_pretrained&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(tf_save_directory)
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model.save_pretrained(tf_save_directory)`}}),z=new G({props:{code:'tf_model = TFAutoModelForSequenceClassification.from_pretrained("./tf_save_pretrained")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;./tf_save_pretrained&quot;</span>)'}}),{c(){e=u("p"),l=i("Una vez que tu modelo est\xE9 fine-tuned puedes guardarlo con tu tokenizador usando "),a=u("code"),o=i("TFPreTrainedModel.save_pretrained()"),c=g(),x(_.$$.fragment),E=g(),b=u("p"),A=i("Cuando quieras usar el modelo otra vez c\xE1rgalo con "),y=u("code"),C=i("TFPreTrainedModel.from_pretrained()"),k=g(),x(z.$$.fragment)},l(w){e=f(w,"P",{});var N=n(e);l=p(N,"Una vez que tu modelo est\xE9 fine-tuned puedes guardarlo con tu tokenizador usando "),a=f(N,"CODE",{});var O=n(a);o=p(O,"TFPreTrainedModel.save_pretrained()"),O.forEach(r),N.forEach(r),c=v(w),S(_.$$.fragment,w),E=v(w),b=f(w,"P",{});var H=n(b);A=p(H,"Cuando quieras usar el modelo otra vez c\xE1rgalo con "),y=f(H,"CODE",{});var K=n(y);C=p(K,"TFPreTrainedModel.from_pretrained()"),K.forEach(r),H.forEach(r),k=v(w),S(z.$$.fragment,w)},m(w,N){$(w,e,N),s(e,l),s(e,a),s(a,o),$(w,c,N),M(_,w,N),$(w,E,N),$(w,b,N),s(b,A),s(b,y),s(y,C),$(w,k,N),M(z,w,N),U=!0},p:le,i(w){U||(j(_.$$.fragment,w),j(z.$$.fragment,w),U=!0)},o(w){q(_.$$.fragment,w),q(z.$$.fragment,w),U=!1},d(w){w&&r(e),w&&r(c),P(_,w),w&&r(E),w&&r(b),w&&r(k),P(z,w)}}}function ru(m){let e,l;return e=new ye({props:{$$slots:{default:[su]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){S(e.$$.fragment,a)},m(a,o){M(e,a,o),l=!0},p(a,o){const c={};o&2&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function ou(m){let e,l;return e=new G({props:{code:`from transformers import AutoModel

tokenizer = AutoTokenizer.from_pretrained(tf_save_directory)
pt_model = AutoModelForSequenceClassification.from_pretrained(tf_save_directory, from_tf=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(tf_save_directory)
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model = AutoModelForSequenceClassification.from_pretrained(tf_save_directory, from_tf=<span class="hljs-literal">True</span>)`}}),{c(){x(e.$$.fragment)},l(a){S(e.$$.fragment,a)},m(a,o){M(e,a,o),l=!0},p:le,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function lu(m){let e,l;return e=new ye({props:{$$slots:{default:[ou]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){S(e.$$.fragment,a)},m(a,o){M(e,a,o),l=!0},p(a,o){const c={};o&2&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function nu(m){let e,l;return e=new G({props:{code:`from transformers import TFAutoModel

tokenizer = AutoTokenizer.from_pretrained(pt_save_directory)
tf_model = TFAutoModelForSequenceClassification.from_pretrained(pt_save_directory, from_pt=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(pt_save_directory)
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFAutoModelForSequenceClassification.from_pretrained(pt_save_directory, from_pt=<span class="hljs-literal">True</span>)`}}),{c(){x(e.$$.fragment)},l(a){S(e.$$.fragment,a)},m(a,o){M(e,a,o),l=!0},p:le,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function iu(m){let e,l;return e=new ye({props:{$$slots:{default:[nu]},$$scope:{ctx:m}}}),{c(){x(e.$$.fragment)},l(a){S(e.$$.fragment,a)},m(a,o){M(e,a,o),l=!0},p(a,o){const c={};o&2&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){P(e,a)}}}function pu(m){let e,l,a,o,c,_,E,b,A,y,C,k,z,U,w,N,O,H,K,ae,I,W,J,R,Y,oe,Z,de,re,me,pe,X,Q,ce,D,B,se,T,V,ue,he,ne,te,ve,ie,$e,Ae,qe,we,ee,ze,lo,no,qa,io,po,za,co,uo,Ca,fo,mo,Ta,ho,$o,xa,_o,go,Ma,vo,bo,Pa,Eo,Is,wt,Sa,wo,ko,Hs,Ce,Da,jo,yo,Oa,Ao,qo,Fa,zo,Rs,kt,La,Co,To,Us,Je,Na,xo,Mo,Ia,Po,Bs,Ze,Vs,Ne,Qe,Ha,jt,So,Ra,Do,Ks,Xe,Oo,Ua,Fo,Lo,Ws,ea,No,Ys,et,Gs,tt,Io,Ba,Ho,Ro,Js,yt,Zs,Te,Uo,At,Bo,Vo,Va,Ko,Wo,Qs,qt,Xs,at,Yo,Ka,Go,Jo,er,zt,tr,xe,Zo,Wa,Qo,Xo,Ct,el,tl,ar,Tt,sr,je,al,Ya,sl,rl,Ga,ol,ll,Ja,nl,il,rr,xt,or,Me,pl,Mt,cl,ul,Pt,fl,dl,lr,St,nr,ta,ml,ir,Dt,pr,st,hl,aa,$l,_l,cr,Ie,rt,Za,Ot,gl,Qa,vl,ur,be,bl,Xa,El,wl,Ft,kl,jl,es,yl,Al,Lt,ql,zl,fr,Nt,dr,ot,mr,Pe,Cl,ts,Tl,xl,as,Ml,Pl,hr,It,$r,Se,Sl,sa,Dl,Ol,ra,Fl,Ll,_r,He,lt,ss,Ht,Nl,rs,Il,gr,Rt,vr,_e,Hl,os,Rl,Ul,ls,Bl,Vl,ns,Kl,Wl,oa,Yl,Gl,is,Jl,Zl,ps,Ql,br,Re,Xl,cs,en,tn,us,an,Er,Ue,nt,fs,Ut,sn,ds,rn,wr,De,on,ms,ln,nn,la,pn,cn,kr,Bt,un,hs,fn,jr,Vt,yr,it,dn,$s,mn,hn,Ar,na,$n,qr,Kt,zr,ia,_n,Cr,pt,pa,ca,gn,vn,bn,ua,fa,En,wn,Tr,ct,kn,_s,jn,yn,xr,ut,Mr,ft,An,da,qn,zn,Pr,Be,dt,gs,Wt,Cn,vs,Tn,Sr,mt,Dr,ht,Or,fe,xn,Yt,bs,Mn,Pn,Gt,Es,Sn,Dn,ws,On,Fn,ks,Ln,Nn,Jt,In,Hn,ma,Rn,Un,Fr,$t,Lr,Ve,_t,js,Zt,Bn,ys,Vn,Nr,gt,Ir,Oe,Kn,As,Wn,Yn,qs,Gn,Jn,Hr,vt,Rr;return _=new Et({}),C=new tc({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Mixed",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/transformers_doc/es/quicktour.ipynb"},{label:"PyTorch",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/transformers_doc/es/pytorch/quicktour.ipynb"},{label:"TensorFlow",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/transformers_doc/es/tensorflow/quicktour.ipynb"},{label:"Mixed",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/transformers_doc/es/quicktour.ipynb"},{label:"PyTorch",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/transformers_doc/es/pytorch/quicktour.ipynb"},{label:"TensorFlow",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/transformers_doc/es/tensorflow/quicktour.ipynb"}]}}),W=new ja({props:{$$slots:{default:[Pc]},$$scope:{ctx:m}}}),Z=new Et({}),se=new Hp({props:{id:"tiZFewofSLM"}}),Ze=new ja({props:{$$slots:{default:[Sc]},$$scope:{ctx:m}}}),jt=new Et({}),et=new ka({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[Lc],pytorch:[Oc]},$$scope:{ctx:m}}}),yt=new G({props:{code:`from transformers import pipeline

classifier = pipeline("sentiment-analysis")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>classifier = pipeline(<span class="hljs-string">&quot;sentiment-analysis&quot;</span>)`}}),qt=new G({props:{code:'classifier("We are very happy to show you the \u{1F917} Transformers library.")',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>classifier(<span class="hljs-string">&quot;We are very happy to show you the \u{1F917} Transformers library.&quot;</span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;POSITIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9998</span>}]`}}),zt=new G({props:{code:`results = classifier(["We are very happy to show you the \u{1F917} Transformers library.", "We hope you don't hate it."])
for result in results:
    print(f"label: {result['label']}, with score: {round(result['score'], 4)}")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>results = classifier([<span class="hljs-string">&quot;We are very happy to show you the \u{1F917} Transformers library.&quot;</span>, <span class="hljs-string">&quot;We hope you don&#x27;t hate it.&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> result <span class="hljs-keyword">in</span> results:
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;label: <span class="hljs-subst">{result[<span class="hljs-string">&#x27;label&#x27;</span>]}</span>, with score: <span class="hljs-subst">{<span class="hljs-built_in">round</span>(result[<span class="hljs-string">&#x27;score&#x27;</span>], <span class="hljs-number">4</span>)}</span>&quot;</span>)
label: POSITIVE, <span class="hljs-keyword">with</span> score: <span class="hljs-number">0.9998</span>
label: NEGATIVE, <span class="hljs-keyword">with</span> score: <span class="hljs-number">0.5309</span>`}}),Tt=new G({props:{code:"pip install datasets",highlighted:"pip install datasets"}}),xt=new G({props:{code:`import torch
from transformers import pipeline

speech_recognizer = pipeline("automatic-speech-recognition", model="facebook/wav2vec2-base-960h", device=0)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>speech_recognizer = pipeline(<span class="hljs-string">&quot;automatic-speech-recognition&quot;</span>, model=<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>, device=<span class="hljs-number">0</span>)`}}),St=new G({props:{code:`import datasets

dataset = datasets.load_dataset("superb", name="asr", split="test")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = datasets.load_dataset(<span class="hljs-string">&quot;superb&quot;</span>, name=<span class="hljs-string">&quot;asr&quot;</span>, split=<span class="hljs-string">&quot;test&quot;</span>)`}}),Dt=new G({props:{code:`files = dataset["file"]
speech_recognizer(files[:4])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>files = dataset[<span class="hljs-string">&quot;file&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>speech_recognizer(files[:<span class="hljs-number">4</span>])
[{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;HE HOPED THERE WOULD BE STEW FOR DINNER TURNIPS AND CARROTS AND BRUISED POTATOES AND FAT MUTTON PIECES TO BE LADLED OUT IN THICK PEPPERED FLOWER FAT AND SAUCE&#x27;</span>},
 {<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;STUFFERED INTO YOU HIS BELLY COUNSELLED HIM&#x27;</span>},
 {<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;AFTER EARLY NIGHTFALL THE YELLOW LAMPS WOULD LIGHT UP HERE AND THERE THE SQUALID QUARTER OF THE BROTHELS&#x27;</span>},
 {<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;HO BERTIE ANY GOOD IN YOUR MIND&#x27;</span>}]`}}),Ot=new Et({}),Nt=new G({props:{code:'model_name = "nlptown/bert-base-multilingual-uncased-sentiment"',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;nlptown/bert-base-multilingual-uncased-sentiment&quot;</span>'}}),ot=new ka({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[Rc],pytorch:[Ic]},$$scope:{ctx:m}}}),It=new G({props:{code:`classifier = pipeline("sentiment-analysis", model=model, tokenizer=tokenizer)
classifier("Nous sommes tr\xE8s heureux de vous pr\xE9senter la biblioth\xE8que \u{1F917} Transformers.")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>classifier = pipeline(<span class="hljs-string">&quot;sentiment-analysis&quot;</span>, model=model, tokenizer=tokenizer)
<span class="hljs-meta">&gt;&gt;&gt; </span>classifier(<span class="hljs-string">&quot;Nous sommes tr\xE8s heureux de vous pr\xE9senter la biblioth\xE8que \u{1F917} Transformers.&quot;</span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;5 stars&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.7273</span>}]`}}),Ht=new Et({}),Rt=new Hp({props:{id:"AhChOFRegn4"}}),Ut=new Et({}),Vt=new G({props:{code:`from transformers import AutoTokenizer

model_name = "nlptown/bert-base-multilingual-uncased-sentiment"
tokenizer = AutoTokenizer.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;nlptown/bert-base-multilingual-uncased-sentiment&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(model_name)`}}),Kt=new G({props:{code:`encoding = tokenizer("We are very happy to show you the \u{1F917} Transformers library.")
print(encoding)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>encoding = tokenizer(<span class="hljs-string">&quot;We are very happy to show you the \u{1F917} Transformers library.&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(encoding)
{<span class="hljs-string">&#x27;input_ids&#x27;</span>: [<span class="hljs-number">101</span>, <span class="hljs-number">11312</span>, <span class="hljs-number">10320</span>, <span class="hljs-number">12495</span>, <span class="hljs-number">19308</span>, <span class="hljs-number">10114</span>, <span class="hljs-number">11391</span>, <span class="hljs-number">10855</span>, <span class="hljs-number">10103</span>, <span class="hljs-number">100</span>, <span class="hljs-number">58263</span>, <span class="hljs-number">13299</span>, <span class="hljs-number">119</span>, <span class="hljs-number">102</span>],
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
 <span class="hljs-string">&#x27;attention_mask&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]}`}}),ut=new ka({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[Kc],pytorch:[Bc]},$$scope:{ctx:m}}}),Wt=new Et({}),mt=new ka({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[Qc],pytorch:[Gc]},$$scope:{ctx:m}}}),ht=new ja({props:{$$slots:{default:[Xc]},$$scope:{ctx:m}}}),$t=new ja({props:{$$slots:{default:[eu]},$$scope:{ctx:m}}}),Zt=new Et({}),gt=new ka({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[ru],pytorch:[au]},$$scope:{ctx:m}}}),vt=new ka({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[iu],pytorch:[lu]},$$scope:{ctx:m}}}),{c(){e=u("meta"),l=g(),a=u("h1"),o=u("a"),c=u("span"),x(_.$$.fragment),E=g(),b=u("span"),A=i("Quick tour"),y=g(),x(C.$$.fragment),k=g(),z=u("p"),U=i("\xA1Entra en marcha con los \u{1F917} Transformers! Comienza usando "),w=u("code"),N=i("pipeline()"),O=i("para una inferencia veloz, carga un modelo preentrenado y un tokenizador con una "),H=u("a"),K=i("AutoClass"),ae=i(" para resolver tu tarea de texto, visi\xF3n o audio."),I=g(),x(W.$$.fragment),J=g(),R=u("h2"),Y=u("a"),oe=u("span"),x(Z.$$.fragment),de=g(),re=u("span"),me=i("Pipeline"),pe=g(),X=u("p"),Q=u("code"),ce=i("pipeline()"),D=i("es la forma m\xE1s f\xE1cil de usar un modelo preentrenado para una tarea dada."),B=g(),x(se.$$.fragment),T=g(),V=u("p"),ue=i("El "),he=u("code"),ne=i("pipeline()"),te=i("soporta muchas tareas comunes listas para usar:"),ve=g(),ie=u("p"),$e=u("strong"),Ae=i("Texto"),qe=i(":"),we=g(),ee=u("ul"),ze=u("li"),lo=i("An\xE1lisis de Sentimientos: clasifica la polaridad de un texto dado."),no=g(),qa=u("li"),io=i("Generaci\xF3n de texto (solo en ingl\xE9s): genera texto a partir de un input dado."),po=g(),za=u("li"),co=i("Name entity recognition (NER): etiqueta cada palabra con la entidad que representa (persona, fecha, ubicaci\xF3n, etc.)."),uo=g(),Ca=u("li"),fo=i("Responder preguntas: extrae la respuesta del contexto dado un contexto y una pregunta."),mo=g(),Ta=u("li"),ho=i("Fill-mask: rellena el espacio faltante dado un texto con palabras enmascaradas."),$o=g(),xa=u("li"),_o=i("Summarization: genera un resumen de una secuencia larga de texto o un documento."),go=g(),Ma=u("li"),vo=i("Traducci\xF3n: traduce un texto a otro idioma."),bo=g(),Pa=u("li"),Eo=i("Extracci\xF3n de caracter\xEDsticas: crea una representaci\xF3n tensorial del texto."),Is=g(),wt=u("p"),Sa=u("strong"),wo=i("Imagen"),ko=i(":"),Hs=g(),Ce=u("ul"),Da=u("li"),jo=i("Clasificaci\xF3n de im\xE1genes: clasifica una imagen."),yo=g(),Oa=u("li"),Ao=i("Segmentaci\xF3n de im\xE1genes: clasifica cada pixel de una imagen."),qo=g(),Fa=u("li"),zo=i("Detecci\xF3n de objetos: detecta objetos dentro de una imagen."),Rs=g(),kt=u("p"),La=u("strong"),Co=i("Audio"),To=i(":"),Us=g(),Je=u("ul"),Na=u("li"),xo=i("Clasificaci\xF3n de audios: asigna una etiqueta a un segmento de audio."),Mo=g(),Ia=u("li"),Po=i("Automatic speech recognition (ASR): transcribe datos de audio a un texto."),Bs=g(),x(Ze.$$.fragment),Vs=g(),Ne=u("h3"),Qe=u("a"),Ha=u("span"),x(jt.$$.fragment),So=g(),Ra=u("span"),Do=i("Uso del Pipeline"),Ks=g(),Xe=u("p"),Oo=i("En el siguiente ejemplo, usar\xE1s el "),Ua=u("code"),Fo=i("pipeline()"),Lo=i("para an\xE1lisis de sentimiento."),Ws=g(),ea=u("p"),No=i("Instala las siguientes dependencias si a\xFAn no lo has hecho:"),Ys=g(),x(et.$$.fragment),Gs=g(),tt=u("p"),Io=i("Importa "),Ba=u("code"),Ho=i("pipeline()"),Ro=i("y especifica la tarea que deseas completar:"),Js=g(),x(yt.$$.fragment),Zs=g(),Te=u("p"),Uo=i("El pipeline descarga y almacena en cach\xE9 un "),At=u("a"),Bo=i("modelo preentrenado"),Vo=i(" por defecto y tokeniza para an\xE1lisis de sentimiento. Ahora puedes usar "),Va=u("code"),Ko=i("classifier"),Wo=i(" en tu texto objetivo:"),Qs=g(),x(qt.$$.fragment),Xs=g(),at=u("p"),Yo=i("Para m\xE1s de un enunciado entrega una lista de frases al "),Ka=u("code"),Go=i("pipeline()"),Jo=i("que devolver\xE1 una lista de diccionarios:"),er=g(),x(zt.$$.fragment),tr=g(),xe=u("p"),Zo=i("El "),Wa=u("code"),Qo=i("pipeline()"),Xo=i("tambi\xE9n puede iterar sobre un dataset entero. Comienza instalando la biblioteca "),Ct=u("a"),el=i("\u{1F917} Datasets"),tl=i(":"),ar=g(),x(Tt.$$.fragment),sr=g(),je=u("p"),al=i("Crea un "),Ya=u("code"),sl=i("pipeline()"),rl=i("con la tarea que deseas resolver y el modelo que quieres usar. Coloca el par\xE1metro "),Ga=u("code"),ol=i("device"),ll=i(" a "),Ja=u("code"),nl=i("0"),il=i(" para poner los tensores en un dispositivo CUDA:"),rr=g(),x(xt.$$.fragment),or=g(),Me=u("p"),pl=i("A continuaci\xF3n, carga el dataset (ve \u{1F917} Datasets "),Mt=u("a"),cl=i("Quick Start"),ul=i(" para m\xE1s detalles) sobre el que quisieras iterar. Por ejemplo, vamos a cargar el dataset "),Pt=u("a"),fl=i("SUPERB"),dl=i(":"),lr=g(),x(St.$$.fragment),nr=g(),ta=u("p"),ml=i("Puedes pasar un pipeline para un dataset:"),ir=g(),x(Dt.$$.fragment),pr=g(),st=u("p"),hl=i("Para un dataset m\xE1s grande, donde los inputs son de mayor tama\xF1o (como en habla/audio o visi\xF3n), querr\xE1s pasar un generador en lugar de una lista que carga todos los inputs en memoria. Ve la "),aa=u("a"),$l=i("documentaci\xF3n del pipeline"),_l=i(" para m\xE1s informaci\xF3n."),cr=g(),Ie=u("h3"),rt=u("a"),Za=u("span"),x(Ot.$$.fragment),gl=g(),Qa=u("span"),vl=i("Use otro modelo y otro tokenizador en el pipeline"),ur=g(),be=u("p"),bl=i("El "),Xa=u("code"),El=i("pipeline()"),wl=i("puede adaptarse a cualquier modelo del "),Ft=u("a"),kl=i("Model Hub"),jl=i(" haciendo m\xE1s f\xE1cil adaptar el "),es=u("code"),yl=i("pipeline()"),Al=i("para otros casos de uso. Por ejemplo, si quisieras un modelo capaz de manejar texto en franc\xE9s, usa los tags en el Model Hub para filtrar entre los modelos apropiados. El resultado mejor filtrado devuelve un "),Lt=u("a"),ql=i("modelo BERT"),zl=i(" multilingual fine-tuned para el an\xE1lisis de sentimiento. Genial, \xA1vamos a usar este modelo!"),fr=g(),x(Nt.$$.fragment),dr=g(),x(ot.$$.fragment),mr=g(),Pe=u("p"),Cl=i("Despu\xE9s puedes especificar el modelo y el tokenizador en el "),ts=u("code"),Tl=i("pipeline()"),xl=i(" y aplicar el "),as=u("code"),Ml=i("classifier"),Pl=i(" en tu texto objetivo:"),hr=g(),x(It.$$.fragment),$r=g(),Se=u("p"),Sl=i("Si no pudieras encontrar el modelo para tu caso respectivo de uso necesitar\xE1s ajustar un modelo preentrenado a tus datos. Mira nuestro "),sa=u("a"),Dl=i("tutorial de fine-tuning"),Ol=i(" para aprender c\xF3mo. Finalmente, despu\xE9s de que has ajustado tu modelo preentrenado, \xA1por favor considera compartirlo (ve el tutorial "),ra=u("a"),Fl=i("aqu\xED"),Ll=i(") con la comunidad en el Model Hub para democratizar el NLP! \u{1F917}"),_r=g(),He=u("h2"),lt=u("a"),ss=u("span"),x(Ht.$$.fragment),Nl=g(),rs=u("span"),Il=i("AutoClass"),gr=g(),x(Rt.$$.fragment),vr=g(),_e=u("p"),Hl=i("Debajo del cap\xF3, las clases "),os=u("code"),Rl=i("AutoModelForSequenceClassification"),Ul=i("y "),ls=u("code"),Bl=i("AutoTokenizer"),Vl=i("trabajan juntas para dar poder al "),ns=u("code"),Kl=i("pipeline()"),Wl=i(" Una "),oa=u("a"),Yl=i("AutoClass"),Gl=i(" es un atajo que autom\xE1ticamente recupera la arquitectura de un modelo preentrenado con su nombre o el path. S\xF3lo necesitar\xE1s seleccionar el "),is=u("code"),Jl=i("AutoClass"),Zl=i(" apropiado para tu tarea y tu tokenizador asociado con "),ps=u("code"),Ql=i("AutoTokenizer"),br=g(),Re=u("p"),Xl=i("Regresemos a nuestro ejemplo y veamos c\xF3mo puedes usar el "),cs=u("code"),en=i("AutoClass"),tn=i(" para reproducir los resultados del "),us=u("code"),an=i("pipeline()"),Er=g(),Ue=u("h3"),nt=u("a"),fs=u("span"),x(Ut.$$.fragment),sn=g(),ds=u("span"),rn=i("AutoTokenizer"),wr=g(),De=u("p"),on=i("Un tokenizador es responsable de procesar el texto a un formato que sea entendible para el modelo. Primero, el tokenizador separar\xE1 el texto en palabras llamadas "),ms=u("em"),ln=i("tokens"),nn=i(". Hay m\xFAltiples reglas que gobiernan el proceso de tokenizaci\xF3n incluyendo el c\xF3mo separar una palabra y en qu\xE9 nivel (aprende m\xE1s sobre tokenizaci\xF3n "),la=u("a"),pn=i("aqu\xED"),cn=i("). Lo m\xE1s importante es recordar que necesitar\xE1s instanciar el tokenizador con el mismo nombre del modelo para asegurar que est\xE1s usando las mismas reglas de tokenizaci\xF3n con las que el modelo fue preentrenado."),kr=g(),Bt=u("p"),un=i("Carga un tokenizador con "),hs=u("code"),fn=i("AutoTokenizer"),jr=g(),x(Vt.$$.fragment),yr=g(),it=u("p"),dn=i("Despu\xE9s, el tokenizador convierte los tokens a n\xFAmeros para construir un tensor que servir\xE1 como input para el modelo. Esto es conocido como el "),$s=u("em"),mn=i("vocabulario"),hn=i(" del modelo."),Ar=g(),na=u("p"),$n=i("Pasa tu texto al tokenizador:"),qr=g(),x(Kt.$$.fragment),zr=g(),ia=u("p"),_n=i("El tokenizador devolver\xE1 un diccionario conteniendo:"),Cr=g(),pt=u("ul"),pa=u("li"),ca=u("a"),gn=i("input_ids"),vn=i(": representaciones num\xE9ricas de los tokens."),bn=g(),ua=u("li"),fa=u("a"),En=i("atttention_mask"),wn=i(": indica cu\xE1les tokens deben ser atendidos."),Tr=g(),ct=u("p"),kn=i("Como con el "),_s=u("code"),jn=i("pipeline()"),yn=i(" el tokenizador aceptar\xE1 una lista de inputs. Adem\xE1s, el tokenizador tambi\xE9n puede rellenar (pad, en ingl\xE9s) y truncar el texto para devolver un lote (batch, en ingl\xE9s) de longitud uniforme:"),xr=g(),x(ut.$$.fragment),Mr=g(),ft=u("p"),An=i("Lee el tutorial de "),da=u("a"),qn=i("preprocessing"),zn=i(" para m\xE1s detalles acerca de la tokenizaci\xF3n."),Pr=g(),Be=u("h3"),dt=u("a"),gs=u("span"),x(Wt.$$.fragment),Cn=g(),vs=u("span"),Tn=i("AutoModel"),Sr=g(),x(mt.$$.fragment),Dr=g(),x(ht.$$.fragment),Or=g(),fe=u("p"),xn=i("Los modelos son "),Yt=u("a"),bs=u("code"),Mn=i("torch.nn.Module"),Pn=i(" o "),Gt=u("a"),Es=u("code"),Sn=i("tf.keras.Model"),Dn=i(" est\xE1ndares as\xED que podr\xE1s usarlos en tu training loop usual. Sin embargo, para facilitar las cosas, \u{1F917} Transformers provee una clase "),ws=u("code"),On=i("Trainer"),Fn=i("para PyTorch que a\xF1ade funcionalidades para entrenamiento distribuido, precici\xF3n mixta, y m\xE1s. Para TensorFlow, puedes usar el m\xE9todo "),ks=u("code"),Ln=i("fit"),Nn=i(" desde "),Jt=u("a"),In=i("Keras"),Hn=i(". Consulta el "),ma=u("a"),Rn=i("tutorial de entrenamiento"),Un=i(" para m\xE1s detalles."),Fr=g(),x($t.$$.fragment),Lr=g(),Ve=u("h3"),_t=u("a"),js=u("span"),x(Zt.$$.fragment),Bn=g(),ys=u("span"),Vn=i("Guarda un modelo"),Nr=g(),x(gt.$$.fragment),Ir=g(),Oe=u("p"),Kn=i("Una caracter\xEDstica particularmente cool de \u{1F917} Transformers es la habilidad de guardar el modelo y cargarlo como un modelo de PyTorch o TensorFlow. El par\xE1metro "),As=u("code"),Wn=i("from_pt"),Yn=i(" o "),qs=u("code"),Gn=i("from_tf"),Jn=i(" puede convertir el modelo de un framework al otro:"),Hr=g(),x(vt.$$.fragment),this.h()},l(t){const h=ec('[data-svelte="svelte-1phssyn"]',document.head);e=f(h,"META",{name:!0,content:!0}),h.forEach(r),l=v(t),a=f(t,"H1",{class:!0});var Qt=n(a);o=f(Qt,"A",{id:!0,class:!0,href:!0});var zs=n(o);c=f(zs,"SPAN",{});var Cs=n(c);S(_.$$.fragment,Cs),Cs.forEach(r),zs.forEach(r),E=v(Qt),b=f(Qt,"SPAN",{});var Ts=n(b);A=p(Ts,"Quick tour"),Ts.forEach(r),Qt.forEach(r),y=v(t),S(C.$$.fragment,t),k=v(t),z=f(t,"P",{});var Ke=n(z);U=p(Ke,"\xA1Entra en marcha con los \u{1F917} Transformers! Comienza usando "),w=f(Ke,"CODE",{});var xs=n(w);N=p(xs,"pipeline()"),xs.forEach(r),O=p(Ke,"para una inferencia veloz, carga un modelo preentrenado y un tokenizador con una "),H=f(Ke,"A",{href:!0});var Ms=n(H);K=p(Ms,"AutoClass"),Ms.forEach(r),ae=p(Ke," para resolver tu tarea de texto, visi\xF3n o audio."),Ke.forEach(r),I=v(t),S(W.$$.fragment,t),J=v(t),R=f(t,"H2",{class:!0});var Xt=n(R);Y=f(Xt,"A",{id:!0,class:!0,href:!0});var Ps=n(Y);oe=f(Ps,"SPAN",{});var Ss=n(oe);S(Z.$$.fragment,Ss),Ss.forEach(r),Ps.forEach(r),de=v(Xt),re=f(Xt,"SPAN",{});var ni=n(re);me=p(ni,"Pipeline"),ni.forEach(r),Xt.forEach(r),pe=v(t),X=f(t,"P",{});var Zn=n(X);Q=f(Zn,"CODE",{});var ii=n(Q);ce=p(ii,"pipeline()"),ii.forEach(r),D=p(Zn,"es la forma m\xE1s f\xE1cil de usar un modelo preentrenado para una tarea dada."),Zn.forEach(r),B=v(t),S(se.$$.fragment,t),T=v(t),V=f(t,"P",{});var Ur=n(V);ue=p(Ur,"El "),he=f(Ur,"CODE",{});var pi=n(he);ne=p(pi,"pipeline()"),pi.forEach(r),te=p(Ur,"soporta muchas tareas comunes listas para usar:"),Ur.forEach(r),ve=v(t),ie=f(t,"P",{});var Qn=n(ie);$e=f(Qn,"STRONG",{});var ci=n($e);Ae=p(ci,"Texto"),ci.forEach(r),qe=p(Qn,":"),Qn.forEach(r),we=v(t),ee=f(t,"UL",{});var ge=n(ee);ze=f(ge,"LI",{});var ui=n(ze);lo=p(ui,"An\xE1lisis de Sentimientos: clasifica la polaridad de un texto dado."),ui.forEach(r),no=v(ge),qa=f(ge,"LI",{});var fi=n(qa);io=p(fi,"Generaci\xF3n de texto (solo en ingl\xE9s): genera texto a partir de un input dado."),fi.forEach(r),po=v(ge),za=f(ge,"LI",{});var di=n(za);co=p(di,"Name entity recognition (NER): etiqueta cada palabra con la entidad que representa (persona, fecha, ubicaci\xF3n, etc.)."),di.forEach(r),uo=v(ge),Ca=f(ge,"LI",{});var mi=n(Ca);fo=p(mi,"Responder preguntas: extrae la respuesta del contexto dado un contexto y una pregunta."),mi.forEach(r),mo=v(ge),Ta=f(ge,"LI",{});var hi=n(Ta);ho=p(hi,"Fill-mask: rellena el espacio faltante dado un texto con palabras enmascaradas."),hi.forEach(r),$o=v(ge),xa=f(ge,"LI",{});var $i=n(xa);_o=p($i,"Summarization: genera un resumen de una secuencia larga de texto o un documento."),$i.forEach(r),go=v(ge),Ma=f(ge,"LI",{});var _i=n(Ma);vo=p(_i,"Traducci\xF3n: traduce un texto a otro idioma."),_i.forEach(r),bo=v(ge),Pa=f(ge,"LI",{});var gi=n(Pa);Eo=p(gi,"Extracci\xF3n de caracter\xEDsticas: crea una representaci\xF3n tensorial del texto."),gi.forEach(r),ge.forEach(r),Is=v(t),wt=f(t,"P",{});var Xn=n(wt);Sa=f(Xn,"STRONG",{});var vi=n(Sa);wo=p(vi,"Imagen"),vi.forEach(r),ko=p(Xn,":"),Xn.forEach(r),Hs=v(t),Ce=f(t,"UL",{});var ha=n(Ce);Da=f(ha,"LI",{});var bi=n(Da);jo=p(bi,"Clasificaci\xF3n de im\xE1genes: clasifica una imagen."),bi.forEach(r),yo=v(ha),Oa=f(ha,"LI",{});var Ei=n(Oa);Ao=p(Ei,"Segmentaci\xF3n de im\xE1genes: clasifica cada pixel de una imagen."),Ei.forEach(r),qo=v(ha),Fa=f(ha,"LI",{});var wi=n(Fa);zo=p(wi,"Detecci\xF3n de objetos: detecta objetos dentro de una imagen."),wi.forEach(r),ha.forEach(r),Rs=v(t),kt=f(t,"P",{});var ei=n(kt);La=f(ei,"STRONG",{});var ki=n(La);Co=p(ki,"Audio"),ki.forEach(r),To=p(ei,":"),ei.forEach(r),Us=v(t),Je=f(t,"UL",{});var Br=n(Je);Na=f(Br,"LI",{});var ji=n(Na);xo=p(ji,"Clasificaci\xF3n de audios: asigna una etiqueta a un segmento de audio."),ji.forEach(r),Mo=v(Br),Ia=f(Br,"LI",{});var yi=n(Ia);Po=p(yi,"Automatic speech recognition (ASR): transcribe datos de audio a un texto."),yi.forEach(r),Br.forEach(r),Bs=v(t),S(Ze.$$.fragment,t),Vs=v(t),Ne=f(t,"H3",{class:!0});var Vr=n(Ne);Qe=f(Vr,"A",{id:!0,class:!0,href:!0});var Ai=n(Qe);Ha=f(Ai,"SPAN",{});var qi=n(Ha);S(jt.$$.fragment,qi),qi.forEach(r),Ai.forEach(r),So=v(Vr),Ra=f(Vr,"SPAN",{});var zi=n(Ra);Do=p(zi,"Uso del Pipeline"),zi.forEach(r),Vr.forEach(r),Ks=v(t),Xe=f(t,"P",{});var Kr=n(Xe);Oo=p(Kr,"En el siguiente ejemplo, usar\xE1s el "),Ua=f(Kr,"CODE",{});var Ci=n(Ua);Fo=p(Ci,"pipeline()"),Ci.forEach(r),Lo=p(Kr,"para an\xE1lisis de sentimiento."),Kr.forEach(r),Ws=v(t),ea=f(t,"P",{});var Ti=n(ea);No=p(Ti,"Instala las siguientes dependencias si a\xFAn no lo has hecho:"),Ti.forEach(r),Ys=v(t),S(et.$$.fragment,t),Gs=v(t),tt=f(t,"P",{});var Wr=n(tt);Io=p(Wr,"Importa "),Ba=f(Wr,"CODE",{});var xi=n(Ba);Ho=p(xi,"pipeline()"),xi.forEach(r),Ro=p(Wr,"y especifica la tarea que deseas completar:"),Wr.forEach(r),Js=v(t),S(yt.$$.fragment,t),Zs=v(t),Te=f(t,"P",{});var $a=n(Te);Uo=p($a,"El pipeline descarga y almacena en cach\xE9 un "),At=f($a,"A",{href:!0,rel:!0});var Mi=n(At);Bo=p(Mi,"modelo preentrenado"),Mi.forEach(r),Vo=p($a," por defecto y tokeniza para an\xE1lisis de sentimiento. Ahora puedes usar "),Va=f($a,"CODE",{});var Pi=n(Va);Ko=p(Pi,"classifier"),Pi.forEach(r),Wo=p($a," en tu texto objetivo:"),$a.forEach(r),Qs=v(t),S(qt.$$.fragment,t),Xs=v(t),at=f(t,"P",{});var Yr=n(at);Yo=p(Yr,"Para m\xE1s de un enunciado entrega una lista de frases al "),Ka=f(Yr,"CODE",{});var Si=n(Ka);Go=p(Si,"pipeline()"),Si.forEach(r),Jo=p(Yr,"que devolver\xE1 una lista de diccionarios:"),Yr.forEach(r),er=v(t),S(zt.$$.fragment,t),tr=v(t),xe=f(t,"P",{});var _a=n(xe);Zo=p(_a,"El "),Wa=f(_a,"CODE",{});var Di=n(Wa);Qo=p(Di,"pipeline()"),Di.forEach(r),Xo=p(_a,"tambi\xE9n puede iterar sobre un dataset entero. Comienza instalando la biblioteca "),Ct=f(_a,"A",{href:!0,rel:!0});var Oi=n(Ct);el=p(Oi,"\u{1F917} Datasets"),Oi.forEach(r),tl=p(_a,":"),_a.forEach(r),ar=v(t),S(Tt.$$.fragment,t),sr=v(t),je=f(t,"P",{});var bt=n(je);al=p(bt,"Crea un "),Ya=f(bt,"CODE",{});var Fi=n(Ya);sl=p(Fi,"pipeline()"),Fi.forEach(r),rl=p(bt,"con la tarea que deseas resolver y el modelo que quieres usar. Coloca el par\xE1metro "),Ga=f(bt,"CODE",{});var Li=n(Ga);ol=p(Li,"device"),Li.forEach(r),ll=p(bt," a "),Ja=f(bt,"CODE",{});var Ni=n(Ja);nl=p(Ni,"0"),Ni.forEach(r),il=p(bt," para poner los tensores en un dispositivo CUDA:"),bt.forEach(r),rr=v(t),S(xt.$$.fragment,t),or=v(t),Me=f(t,"P",{});var ga=n(Me);pl=p(ga,"A continuaci\xF3n, carga el dataset (ve \u{1F917} Datasets "),Mt=f(ga,"A",{href:!0,rel:!0});var Ii=n(Mt);cl=p(Ii,"Quick Start"),Ii.forEach(r),ul=p(ga," para m\xE1s detalles) sobre el que quisieras iterar. Por ejemplo, vamos a cargar el dataset "),Pt=f(ga,"A",{href:!0,rel:!0});var Hi=n(Pt);fl=p(Hi,"SUPERB"),Hi.forEach(r),dl=p(ga,":"),ga.forEach(r),lr=v(t),S(St.$$.fragment,t),nr=v(t),ta=f(t,"P",{});var Ri=n(ta);ml=p(Ri,"Puedes pasar un pipeline para un dataset:"),Ri.forEach(r),ir=v(t),S(Dt.$$.fragment,t),pr=v(t),st=f(t,"P",{});var Gr=n(st);hl=p(Gr,"Para un dataset m\xE1s grande, donde los inputs son de mayor tama\xF1o (como en habla/audio o visi\xF3n), querr\xE1s pasar un generador en lugar de una lista que carga todos los inputs en memoria. Ve la "),aa=f(Gr,"A",{href:!0});var Ui=n(aa);$l=p(Ui,"documentaci\xF3n del pipeline"),Ui.forEach(r),_l=p(Gr," para m\xE1s informaci\xF3n."),Gr.forEach(r),cr=v(t),Ie=f(t,"H3",{class:!0});var Jr=n(Ie);rt=f(Jr,"A",{id:!0,class:!0,href:!0});var Bi=n(rt);Za=f(Bi,"SPAN",{});var Vi=n(Za);S(Ot.$$.fragment,Vi),Vi.forEach(r),Bi.forEach(r),gl=v(Jr),Qa=f(Jr,"SPAN",{});var Ki=n(Qa);vl=p(Ki,"Use otro modelo y otro tokenizador en el pipeline"),Ki.forEach(r),Jr.forEach(r),ur=v(t),be=f(t,"P",{});var Fe=n(be);bl=p(Fe,"El "),Xa=f(Fe,"CODE",{});var Wi=n(Xa);El=p(Wi,"pipeline()"),Wi.forEach(r),wl=p(Fe,"puede adaptarse a cualquier modelo del "),Ft=f(Fe,"A",{href:!0,rel:!0});var Yi=n(Ft);kl=p(Yi,"Model Hub"),Yi.forEach(r),jl=p(Fe," haciendo m\xE1s f\xE1cil adaptar el "),es=f(Fe,"CODE",{});var Gi=n(es);yl=p(Gi,"pipeline()"),Gi.forEach(r),Al=p(Fe,"para otros casos de uso. Por ejemplo, si quisieras un modelo capaz de manejar texto en franc\xE9s, usa los tags en el Model Hub para filtrar entre los modelos apropiados. El resultado mejor filtrado devuelve un "),Lt=f(Fe,"A",{href:!0,rel:!0});var Ji=n(Lt);ql=p(Ji,"modelo BERT"),Ji.forEach(r),zl=p(Fe," multilingual fine-tuned para el an\xE1lisis de sentimiento. Genial, \xA1vamos a usar este modelo!"),Fe.forEach(r),fr=v(t),S(Nt.$$.fragment,t),dr=v(t),S(ot.$$.fragment,t),mr=v(t),Pe=f(t,"P",{});var va=n(Pe);Cl=p(va,"Despu\xE9s puedes especificar el modelo y el tokenizador en el "),ts=f(va,"CODE",{});var Zi=n(ts);Tl=p(Zi,"pipeline()"),Zi.forEach(r),xl=p(va," y aplicar el "),as=f(va,"CODE",{});var Qi=n(as);Ml=p(Qi,"classifier"),Qi.forEach(r),Pl=p(va," en tu texto objetivo:"),va.forEach(r),hr=v(t),S(It.$$.fragment,t),$r=v(t),Se=f(t,"P",{});var ba=n(Se);Sl=p(ba,"Si no pudieras encontrar el modelo para tu caso respectivo de uso necesitar\xE1s ajustar un modelo preentrenado a tus datos. Mira nuestro "),sa=f(ba,"A",{href:!0});var Xi=n(sa);Dl=p(Xi,"tutorial de fine-tuning"),Xi.forEach(r),Ol=p(ba," para aprender c\xF3mo. Finalmente, despu\xE9s de que has ajustado tu modelo preentrenado, \xA1por favor considera compartirlo (ve el tutorial "),ra=f(ba,"A",{href:!0});var ep=n(ra);Fl=p(ep,"aqu\xED"),ep.forEach(r),Ll=p(ba,") con la comunidad en el Model Hub para democratizar el NLP! \u{1F917}"),ba.forEach(r),_r=v(t),He=f(t,"H2",{class:!0});var Zr=n(He);lt=f(Zr,"A",{id:!0,class:!0,href:!0});var tp=n(lt);ss=f(tp,"SPAN",{});var ap=n(ss);S(Ht.$$.fragment,ap),ap.forEach(r),tp.forEach(r),Nl=v(Zr),rs=f(Zr,"SPAN",{});var sp=n(rs);Il=p(sp,"AutoClass"),sp.forEach(r),Zr.forEach(r),gr=v(t),S(Rt.$$.fragment,t),vr=v(t),_e=f(t,"P",{});var ke=n(_e);Hl=p(ke,"Debajo del cap\xF3, las clases "),os=f(ke,"CODE",{});var rp=n(os);Rl=p(rp,"AutoModelForSequenceClassification"),rp.forEach(r),Ul=p(ke,"y "),ls=f(ke,"CODE",{});var op=n(ls);Bl=p(op,"AutoTokenizer"),op.forEach(r),Vl=p(ke,"trabajan juntas para dar poder al "),ns=f(ke,"CODE",{});var lp=n(ns);Kl=p(lp,"pipeline()"),lp.forEach(r),Wl=p(ke," Una "),oa=f(ke,"A",{href:!0});var np=n(oa);Yl=p(np,"AutoClass"),np.forEach(r),Gl=p(ke," es un atajo que autom\xE1ticamente recupera la arquitectura de un modelo preentrenado con su nombre o el path. S\xF3lo necesitar\xE1s seleccionar el "),is=f(ke,"CODE",{});var ip=n(is);Jl=p(ip,"AutoClass"),ip.forEach(r),Zl=p(ke," apropiado para tu tarea y tu tokenizador asociado con "),ps=f(ke,"CODE",{});var pp=n(ps);Ql=p(pp,"AutoTokenizer"),pp.forEach(r),ke.forEach(r),br=v(t),Re=f(t,"P",{});var Ds=n(Re);Xl=p(Ds,"Regresemos a nuestro ejemplo y veamos c\xF3mo puedes usar el "),cs=f(Ds,"CODE",{});var cp=n(cs);en=p(cp,"AutoClass"),cp.forEach(r),tn=p(Ds," para reproducir los resultados del "),us=f(Ds,"CODE",{});var up=n(us);an=p(up,"pipeline()"),up.forEach(r),Ds.forEach(r),Er=v(t),Ue=f(t,"H3",{class:!0});var Qr=n(Ue);nt=f(Qr,"A",{id:!0,class:!0,href:!0});var fp=n(nt);fs=f(fp,"SPAN",{});var dp=n(fs);S(Ut.$$.fragment,dp),dp.forEach(r),fp.forEach(r),sn=v(Qr),ds=f(Qr,"SPAN",{});var mp=n(ds);rn=p(mp,"AutoTokenizer"),mp.forEach(r),Qr.forEach(r),wr=v(t),De=f(t,"P",{});var Ea=n(De);on=p(Ea,"Un tokenizador es responsable de procesar el texto a un formato que sea entendible para el modelo. Primero, el tokenizador separar\xE1 el texto en palabras llamadas "),ms=f(Ea,"EM",{});var hp=n(ms);ln=p(hp,"tokens"),hp.forEach(r),nn=p(Ea,". Hay m\xFAltiples reglas que gobiernan el proceso de tokenizaci\xF3n incluyendo el c\xF3mo separar una palabra y en qu\xE9 nivel (aprende m\xE1s sobre tokenizaci\xF3n "),la=f(Ea,"A",{href:!0});var $p=n(la);pn=p($p,"aqu\xED"),$p.forEach(r),cn=p(Ea,"). Lo m\xE1s importante es recordar que necesitar\xE1s instanciar el tokenizador con el mismo nombre del modelo para asegurar que est\xE1s usando las mismas reglas de tokenizaci\xF3n con las que el modelo fue preentrenado."),Ea.forEach(r),kr=v(t),Bt=f(t,"P",{});var ti=n(Bt);un=p(ti,"Carga un tokenizador con "),hs=f(ti,"CODE",{});var _p=n(hs);fn=p(_p,"AutoTokenizer"),_p.forEach(r),ti.forEach(r),jr=v(t),S(Vt.$$.fragment,t),yr=v(t),it=f(t,"P",{});var Xr=n(it);dn=p(Xr,"Despu\xE9s, el tokenizador convierte los tokens a n\xFAmeros para construir un tensor que servir\xE1 como input para el modelo. Esto es conocido como el "),$s=f(Xr,"EM",{});var gp=n($s);mn=p(gp,"vocabulario"),gp.forEach(r),hn=p(Xr," del modelo."),Xr.forEach(r),Ar=v(t),na=f(t,"P",{});var vp=n(na);$n=p(vp,"Pasa tu texto al tokenizador:"),vp.forEach(r),qr=v(t),S(Kt.$$.fragment,t),zr=v(t),ia=f(t,"P",{});var bp=n(ia);_n=p(bp,"El tokenizador devolver\xE1 un diccionario conteniendo:"),bp.forEach(r),Cr=v(t),pt=f(t,"UL",{});var eo=n(pt);pa=f(eo,"LI",{});var ai=n(pa);ca=f(ai,"A",{href:!0});var Ep=n(ca);gn=p(Ep,"input_ids"),Ep.forEach(r),vn=p(ai,": representaciones num\xE9ricas de los tokens."),ai.forEach(r),bn=v(eo),ua=f(eo,"LI",{});var si=n(ua);fa=f(si,"A",{href:!0});var wp=n(fa);En=p(wp,"atttention_mask"),wp.forEach(r),wn=p(si,": indica cu\xE1les tokens deben ser atendidos."),si.forEach(r),eo.forEach(r),Tr=v(t),ct=f(t,"P",{});var to=n(ct);kn=p(to,"Como con el "),_s=f(to,"CODE",{});var kp=n(_s);jn=p(kp,"pipeline()"),kp.forEach(r),yn=p(to," el tokenizador aceptar\xE1 una lista de inputs. Adem\xE1s, el tokenizador tambi\xE9n puede rellenar (pad, en ingl\xE9s) y truncar el texto para devolver un lote (batch, en ingl\xE9s) de longitud uniforme:"),to.forEach(r),xr=v(t),S(ut.$$.fragment,t),Mr=v(t),ft=f(t,"P",{});var ao=n(ft);An=p(ao,"Lee el tutorial de "),da=f(ao,"A",{href:!0});var jp=n(da);qn=p(jp,"preprocessing"),jp.forEach(r),zn=p(ao," para m\xE1s detalles acerca de la tokenizaci\xF3n."),ao.forEach(r),Pr=v(t),Be=f(t,"H3",{class:!0});var so=n(Be);dt=f(so,"A",{id:!0,class:!0,href:!0});var yp=n(dt);gs=f(yp,"SPAN",{});var Ap=n(gs);S(Wt.$$.fragment,Ap),Ap.forEach(r),yp.forEach(r),Cn=v(so),vs=f(so,"SPAN",{});var qp=n(vs);Tn=p(qp,"AutoModel"),qp.forEach(r),so.forEach(r),Sr=v(t),S(mt.$$.fragment,t),Dr=v(t),S(ht.$$.fragment,t),Or=v(t),fe=f(t,"P",{});var Ee=n(fe);xn=p(Ee,"Los modelos son "),Yt=f(Ee,"A",{href:!0,rel:!0});var zp=n(Yt);bs=f(zp,"CODE",{});var Cp=n(bs);Mn=p(Cp,"torch.nn.Module"),Cp.forEach(r),zp.forEach(r),Pn=p(Ee," o "),Gt=f(Ee,"A",{href:!0,rel:!0});var Tp=n(Gt);Es=f(Tp,"CODE",{});var xp=n(Es);Sn=p(xp,"tf.keras.Model"),xp.forEach(r),Tp.forEach(r),Dn=p(Ee," est\xE1ndares as\xED que podr\xE1s usarlos en tu training loop usual. Sin embargo, para facilitar las cosas, \u{1F917} Transformers provee una clase "),ws=f(Ee,"CODE",{});var Mp=n(ws);On=p(Mp,"Trainer"),Mp.forEach(r),Fn=p(Ee,"para PyTorch que a\xF1ade funcionalidades para entrenamiento distribuido, precici\xF3n mixta, y m\xE1s. Para TensorFlow, puedes usar el m\xE9todo "),ks=f(Ee,"CODE",{});var Pp=n(ks);Ln=p(Pp,"fit"),Pp.forEach(r),Nn=p(Ee," desde "),Jt=f(Ee,"A",{href:!0,rel:!0});var Sp=n(Jt);In=p(Sp,"Keras"),Sp.forEach(r),Hn=p(Ee,". Consulta el "),ma=f(Ee,"A",{href:!0});var Dp=n(ma);Rn=p(Dp,"tutorial de entrenamiento"),Dp.forEach(r),Un=p(Ee," para m\xE1s detalles."),Ee.forEach(r),Fr=v(t),S($t.$$.fragment,t),Lr=v(t),Ve=f(t,"H3",{class:!0});var ro=n(Ve);_t=f(ro,"A",{id:!0,class:!0,href:!0});var Op=n(_t);js=f(Op,"SPAN",{});var Fp=n(js);S(Zt.$$.fragment,Fp),Fp.forEach(r),Op.forEach(r),Bn=v(ro),ys=f(ro,"SPAN",{});var Lp=n(ys);Vn=p(Lp,"Guarda un modelo"),Lp.forEach(r),ro.forEach(r),Nr=v(t),S(gt.$$.fragment,t),Ir=v(t),Oe=f(t,"P",{});var wa=n(Oe);Kn=p(wa,"Una caracter\xEDstica particularmente cool de \u{1F917} Transformers es la habilidad de guardar el modelo y cargarlo como un modelo de PyTorch o TensorFlow. El par\xE1metro "),As=f(wa,"CODE",{});var Np=n(As);Wn=p(Np,"from_pt"),Np.forEach(r),Yn=p(wa," o "),qs=f(wa,"CODE",{});var Ip=n(qs);Gn=p(Ip,"from_tf"),Ip.forEach(r),Jn=p(wa," puede convertir el modelo de un framework al otro:"),wa.forEach(r),Hr=v(t),S(vt.$$.fragment,t),this.h()},h(){d(e,"name","hf:doc:metadata"),d(e,"content",JSON.stringify(cu)),d(o,"id","quick-tour"),d(o,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o,"href","#quick-tour"),d(a,"class","relative group"),d(H,"href","./model_doc/auto"),d(Y,"id","pipeline"),d(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y,"href","#pipeline"),d(R,"class","relative group"),d(Qe,"id","uso-del-pipeline"),d(Qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qe,"href","#uso-del-pipeline"),d(Ne,"class","relative group"),d(At,"href","https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english"),d(At,"rel","nofollow"),d(Ct,"href","https://huggingface.co/docs/datasets/"),d(Ct,"rel","nofollow"),d(Mt,"href","https://huggingface.co/docs/datasets/quickstart.html"),d(Mt,"rel","nofollow"),d(Pt,"href","https://huggingface.co/datasets/superb"),d(Pt,"rel","nofollow"),d(aa,"href","./main_classes/pipelines"),d(rt,"id","use-otro-modelo-y-otro-tokenizador-en-el-pipeline"),d(rt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rt,"href","#use-otro-modelo-y-otro-tokenizador-en-el-pipeline"),d(Ie,"class","relative group"),d(Ft,"href","https://huggingface.co/models"),d(Ft,"rel","nofollow"),d(Lt,"href","https://huggingface.co/nlptown/bert-base-multilingual-uncased-sentiment"),d(Lt,"rel","nofollow"),d(sa,"href","./training"),d(ra,"href","./model_sharing"),d(lt,"id","autoclass"),d(lt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lt,"href","#autoclass"),d(He,"class","relative group"),d(oa,"href","./model_doc/auto"),d(nt,"id","autotokenizer"),d(nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nt,"href","#autotokenizer"),d(Ue,"class","relative group"),d(la,"href","./tokenizer_summary"),d(ca,"href","./glossary#input-ids"),d(fa,"href",".glossary#attention-mask"),d(da,"href","./preprocessing"),d(dt,"id","automodel"),d(dt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dt,"href","#automodel"),d(Be,"class","relative group"),d(Yt,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(Yt,"rel","nofollow"),d(Gt,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),d(Gt,"rel","nofollow"),d(Jt,"href","https://keras.io/"),d(Jt,"rel","nofollow"),d(ma,"href","./training"),d(_t,"id","guarda-un-modelo"),d(_t,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_t,"href","#guarda-un-modelo"),d(Ve,"class","relative group")},m(t,h){s(document.head,e),$(t,l,h),$(t,a,h),s(a,o),s(o,c),M(_,c,null),s(a,E),s(a,b),s(b,A),$(t,y,h),M(C,t,h),$(t,k,h),$(t,z,h),s(z,U),s(z,w),s(w,N),s(z,O),s(z,H),s(H,K),s(z,ae),$(t,I,h),M(W,t,h),$(t,J,h),$(t,R,h),s(R,Y),s(Y,oe),M(Z,oe,null),s(R,de),s(R,re),s(re,me),$(t,pe,h),$(t,X,h),s(X,Q),s(Q,ce),s(X,D),$(t,B,h),M(se,t,h),$(t,T,h),$(t,V,h),s(V,ue),s(V,he),s(he,ne),s(V,te),$(t,ve,h),$(t,ie,h),s(ie,$e),s($e,Ae),s(ie,qe),$(t,we,h),$(t,ee,h),s(ee,ze),s(ze,lo),s(ee,no),s(ee,qa),s(qa,io),s(ee,po),s(ee,za),s(za,co),s(ee,uo),s(ee,Ca),s(Ca,fo),s(ee,mo),s(ee,Ta),s(Ta,ho),s(ee,$o),s(ee,xa),s(xa,_o),s(ee,go),s(ee,Ma),s(Ma,vo),s(ee,bo),s(ee,Pa),s(Pa,Eo),$(t,Is,h),$(t,wt,h),s(wt,Sa),s(Sa,wo),s(wt,ko),$(t,Hs,h),$(t,Ce,h),s(Ce,Da),s(Da,jo),s(Ce,yo),s(Ce,Oa),s(Oa,Ao),s(Ce,qo),s(Ce,Fa),s(Fa,zo),$(t,Rs,h),$(t,kt,h),s(kt,La),s(La,Co),s(kt,To),$(t,Us,h),$(t,Je,h),s(Je,Na),s(Na,xo),s(Je,Mo),s(Je,Ia),s(Ia,Po),$(t,Bs,h),M(Ze,t,h),$(t,Vs,h),$(t,Ne,h),s(Ne,Qe),s(Qe,Ha),M(jt,Ha,null),s(Ne,So),s(Ne,Ra),s(Ra,Do),$(t,Ks,h),$(t,Xe,h),s(Xe,Oo),s(Xe,Ua),s(Ua,Fo),s(Xe,Lo),$(t,Ws,h),$(t,ea,h),s(ea,No),$(t,Ys,h),M(et,t,h),$(t,Gs,h),$(t,tt,h),s(tt,Io),s(tt,Ba),s(Ba,Ho),s(tt,Ro),$(t,Js,h),M(yt,t,h),$(t,Zs,h),$(t,Te,h),s(Te,Uo),s(Te,At),s(At,Bo),s(Te,Vo),s(Te,Va),s(Va,Ko),s(Te,Wo),$(t,Qs,h),M(qt,t,h),$(t,Xs,h),$(t,at,h),s(at,Yo),s(at,Ka),s(Ka,Go),s(at,Jo),$(t,er,h),M(zt,t,h),$(t,tr,h),$(t,xe,h),s(xe,Zo),s(xe,Wa),s(Wa,Qo),s(xe,Xo),s(xe,Ct),s(Ct,el),s(xe,tl),$(t,ar,h),M(Tt,t,h),$(t,sr,h),$(t,je,h),s(je,al),s(je,Ya),s(Ya,sl),s(je,rl),s(je,Ga),s(Ga,ol),s(je,ll),s(je,Ja),s(Ja,nl),s(je,il),$(t,rr,h),M(xt,t,h),$(t,or,h),$(t,Me,h),s(Me,pl),s(Me,Mt),s(Mt,cl),s(Me,ul),s(Me,Pt),s(Pt,fl),s(Me,dl),$(t,lr,h),M(St,t,h),$(t,nr,h),$(t,ta,h),s(ta,ml),$(t,ir,h),M(Dt,t,h),$(t,pr,h),$(t,st,h),s(st,hl),s(st,aa),s(aa,$l),s(st,_l),$(t,cr,h),$(t,Ie,h),s(Ie,rt),s(rt,Za),M(Ot,Za,null),s(Ie,gl),s(Ie,Qa),s(Qa,vl),$(t,ur,h),$(t,be,h),s(be,bl),s(be,Xa),s(Xa,El),s(be,wl),s(be,Ft),s(Ft,kl),s(be,jl),s(be,es),s(es,yl),s(be,Al),s(be,Lt),s(Lt,ql),s(be,zl),$(t,fr,h),M(Nt,t,h),$(t,dr,h),M(ot,t,h),$(t,mr,h),$(t,Pe,h),s(Pe,Cl),s(Pe,ts),s(ts,Tl),s(Pe,xl),s(Pe,as),s(as,Ml),s(Pe,Pl),$(t,hr,h),M(It,t,h),$(t,$r,h),$(t,Se,h),s(Se,Sl),s(Se,sa),s(sa,Dl),s(Se,Ol),s(Se,ra),s(ra,Fl),s(Se,Ll),$(t,_r,h),$(t,He,h),s(He,lt),s(lt,ss),M(Ht,ss,null),s(He,Nl),s(He,rs),s(rs,Il),$(t,gr,h),M(Rt,t,h),$(t,vr,h),$(t,_e,h),s(_e,Hl),s(_e,os),s(os,Rl),s(_e,Ul),s(_e,ls),s(ls,Bl),s(_e,Vl),s(_e,ns),s(ns,Kl),s(_e,Wl),s(_e,oa),s(oa,Yl),s(_e,Gl),s(_e,is),s(is,Jl),s(_e,Zl),s(_e,ps),s(ps,Ql),$(t,br,h),$(t,Re,h),s(Re,Xl),s(Re,cs),s(cs,en),s(Re,tn),s(Re,us),s(us,an),$(t,Er,h),$(t,Ue,h),s(Ue,nt),s(nt,fs),M(Ut,fs,null),s(Ue,sn),s(Ue,ds),s(ds,rn),$(t,wr,h),$(t,De,h),s(De,on),s(De,ms),s(ms,ln),s(De,nn),s(De,la),s(la,pn),s(De,cn),$(t,kr,h),$(t,Bt,h),s(Bt,un),s(Bt,hs),s(hs,fn),$(t,jr,h),M(Vt,t,h),$(t,yr,h),$(t,it,h),s(it,dn),s(it,$s),s($s,mn),s(it,hn),$(t,Ar,h),$(t,na,h),s(na,$n),$(t,qr,h),M(Kt,t,h),$(t,zr,h),$(t,ia,h),s(ia,_n),$(t,Cr,h),$(t,pt,h),s(pt,pa),s(pa,ca),s(ca,gn),s(pa,vn),s(pt,bn),s(pt,ua),s(ua,fa),s(fa,En),s(ua,wn),$(t,Tr,h),$(t,ct,h),s(ct,kn),s(ct,_s),s(_s,jn),s(ct,yn),$(t,xr,h),M(ut,t,h),$(t,Mr,h),$(t,ft,h),s(ft,An),s(ft,da),s(da,qn),s(ft,zn),$(t,Pr,h),$(t,Be,h),s(Be,dt),s(dt,gs),M(Wt,gs,null),s(Be,Cn),s(Be,vs),s(vs,Tn),$(t,Sr,h),M(mt,t,h),$(t,Dr,h),M(ht,t,h),$(t,Or,h),$(t,fe,h),s(fe,xn),s(fe,Yt),s(Yt,bs),s(bs,Mn),s(fe,Pn),s(fe,Gt),s(Gt,Es),s(Es,Sn),s(fe,Dn),s(fe,ws),s(ws,On),s(fe,Fn),s(fe,ks),s(ks,Ln),s(fe,Nn),s(fe,Jt),s(Jt,In),s(fe,Hn),s(fe,ma),s(ma,Rn),s(fe,Un),$(t,Fr,h),M($t,t,h),$(t,Lr,h),$(t,Ve,h),s(Ve,_t),s(_t,js),M(Zt,js,null),s(Ve,Bn),s(Ve,ys),s(ys,Vn),$(t,Nr,h),M(gt,t,h),$(t,Ir,h),$(t,Oe,h),s(Oe,Kn),s(Oe,As),s(As,Wn),s(Oe,Yn),s(Oe,qs),s(qs,Gn),s(Oe,Jn),$(t,Hr,h),M(vt,t,h),Rr=!0},p(t,[h]){const Qt={};h&2&&(Qt.$$scope={dirty:h,ctx:t}),W.$set(Qt);const zs={};h&2&&(zs.$$scope={dirty:h,ctx:t}),Ze.$set(zs);const Cs={};h&2&&(Cs.$$scope={dirty:h,ctx:t}),et.$set(Cs);const Ts={};h&2&&(Ts.$$scope={dirty:h,ctx:t}),ot.$set(Ts);const Ke={};h&2&&(Ke.$$scope={dirty:h,ctx:t}),ut.$set(Ke);const xs={};h&2&&(xs.$$scope={dirty:h,ctx:t}),mt.$set(xs);const Ms={};h&2&&(Ms.$$scope={dirty:h,ctx:t}),ht.$set(Ms);const Xt={};h&2&&(Xt.$$scope={dirty:h,ctx:t}),$t.$set(Xt);const Ps={};h&2&&(Ps.$$scope={dirty:h,ctx:t}),gt.$set(Ps);const Ss={};h&2&&(Ss.$$scope={dirty:h,ctx:t}),vt.$set(Ss)},i(t){Rr||(j(_.$$.fragment,t),j(C.$$.fragment,t),j(W.$$.fragment,t),j(Z.$$.fragment,t),j(se.$$.fragment,t),j(Ze.$$.fragment,t),j(jt.$$.fragment,t),j(et.$$.fragment,t),j(yt.$$.fragment,t),j(qt.$$.fragment,t),j(zt.$$.fragment,t),j(Tt.$$.fragment,t),j(xt.$$.fragment,t),j(St.$$.fragment,t),j(Dt.$$.fragment,t),j(Ot.$$.fragment,t),j(Nt.$$.fragment,t),j(ot.$$.fragment,t),j(It.$$.fragment,t),j(Ht.$$.fragment,t),j(Rt.$$.fragment,t),j(Ut.$$.fragment,t),j(Vt.$$.fragment,t),j(Kt.$$.fragment,t),j(ut.$$.fragment,t),j(Wt.$$.fragment,t),j(mt.$$.fragment,t),j(ht.$$.fragment,t),j($t.$$.fragment,t),j(Zt.$$.fragment,t),j(gt.$$.fragment,t),j(vt.$$.fragment,t),Rr=!0)},o(t){q(_.$$.fragment,t),q(C.$$.fragment,t),q(W.$$.fragment,t),q(Z.$$.fragment,t),q(se.$$.fragment,t),q(Ze.$$.fragment,t),q(jt.$$.fragment,t),q(et.$$.fragment,t),q(yt.$$.fragment,t),q(qt.$$.fragment,t),q(zt.$$.fragment,t),q(Tt.$$.fragment,t),q(xt.$$.fragment,t),q(St.$$.fragment,t),q(Dt.$$.fragment,t),q(Ot.$$.fragment,t),q(Nt.$$.fragment,t),q(ot.$$.fragment,t),q(It.$$.fragment,t),q(Ht.$$.fragment,t),q(Rt.$$.fragment,t),q(Ut.$$.fragment,t),q(Vt.$$.fragment,t),q(Kt.$$.fragment,t),q(ut.$$.fragment,t),q(Wt.$$.fragment,t),q(mt.$$.fragment,t),q(ht.$$.fragment,t),q($t.$$.fragment,t),q(Zt.$$.fragment,t),q(gt.$$.fragment,t),q(vt.$$.fragment,t),Rr=!1},d(t){r(e),t&&r(l),t&&r(a),P(_),t&&r(y),P(C,t),t&&r(k),t&&r(z),t&&r(I),P(W,t),t&&r(J),t&&r(R),P(Z),t&&r(pe),t&&r(X),t&&r(B),P(se,t),t&&r(T),t&&r(V),t&&r(ve),t&&r(ie),t&&r(we),t&&r(ee),t&&r(Is),t&&r(wt),t&&r(Hs),t&&r(Ce),t&&r(Rs),t&&r(kt),t&&r(Us),t&&r(Je),t&&r(Bs),P(Ze,t),t&&r(Vs),t&&r(Ne),P(jt),t&&r(Ks),t&&r(Xe),t&&r(Ws),t&&r(ea),t&&r(Ys),P(et,t),t&&r(Gs),t&&r(tt),t&&r(Js),P(yt,t),t&&r(Zs),t&&r(Te),t&&r(Qs),P(qt,t),t&&r(Xs),t&&r(at),t&&r(er),P(zt,t),t&&r(tr),t&&r(xe),t&&r(ar),P(Tt,t),t&&r(sr),t&&r(je),t&&r(rr),P(xt,t),t&&r(or),t&&r(Me),t&&r(lr),P(St,t),t&&r(nr),t&&r(ta),t&&r(ir),P(Dt,t),t&&r(pr),t&&r(st),t&&r(cr),t&&r(Ie),P(Ot),t&&r(ur),t&&r(be),t&&r(fr),P(Nt,t),t&&r(dr),P(ot,t),t&&r(mr),t&&r(Pe),t&&r(hr),P(It,t),t&&r($r),t&&r(Se),t&&r(_r),t&&r(He),P(Ht),t&&r(gr),P(Rt,t),t&&r(vr),t&&r(_e),t&&r(br),t&&r(Re),t&&r(Er),t&&r(Ue),P(Ut),t&&r(wr),t&&r(De),t&&r(kr),t&&r(Bt),t&&r(jr),P(Vt,t),t&&r(yr),t&&r(it),t&&r(Ar),t&&r(na),t&&r(qr),P(Kt,t),t&&r(zr),t&&r(ia),t&&r(Cr),t&&r(pt),t&&r(Tr),t&&r(ct),t&&r(xr),P(ut,t),t&&r(Mr),t&&r(ft),t&&r(Pr),t&&r(Be),P(Wt),t&&r(Sr),P(mt,t),t&&r(Dr),P(ht,t),t&&r(Or),t&&r(fe),t&&r(Fr),P($t,t),t&&r(Lr),t&&r(Ve),P(Zt),t&&r(Nr),P(gt,t),t&&r(Ir),t&&r(Oe),t&&r(Hr),P(vt,t)}}}const cu={local:"quick-tour",sections:[{local:"pipeline",sections:[{local:"uso-del-pipeline",title:"Uso del Pipeline"},{local:"use-otro-modelo-y-otro-tokenizador-en-el-pipeline",title:"Use otro modelo y otro tokenizador en el pipeline"}],title:"Pipeline"},{local:"autoclass",sections:[{local:"autotokenizer",title:"AutoTokenizer"},{local:"automodel",title:"AutoModel"},{local:"guarda-un-modelo",title:"Guarda un modelo"}],title:"AutoClass"}],title:"Quick tour"};function uu(m){return Gp(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class _u extends We{constructor(e){super();Ye(this,e,uu,pu,Ge,{})}}export{_u as default,cu as metadata};
