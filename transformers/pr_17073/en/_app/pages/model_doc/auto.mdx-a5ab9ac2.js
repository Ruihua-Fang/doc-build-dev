import{S as qEt,i as NEt,s as jEt,e as a,k as l,w as F,t as o,M as DEt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as GEt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as KBr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function OEt(L){let g,v,p,m,u,d,h,Mo,oi,of,Kr,ri,ti,_A,rf,qe,Xe,ai,Mn,bA,En,Cn,vA,ni,wn,FA,si,tf,va;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),oi=a("code"),of=o("model_type"),Kr=o(" attribute is set to the same key you use when registering the config (here "),ri=a("code"),ti=o('"new-model"'),_A=o(")."),rf=l(),qe=a("p"),Xe=o("Likewise, if your "),ai=a("code"),Mn=o("NewModel"),bA=o(" is a subclass of "),En=a("a"),Cn=o("PreTrainedModel"),vA=o(`, make sure its
`),ni=a("code"),wn=o("config_class"),FA=o(` attribute is set to the same class you use when registering the model (here
`),si=a("code"),tf=o("NewModelConfig"),va=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var R9=s(p);m=r(R9,"NewModelConfig"),R9.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var li=s(d);h=r(li,"PretrainedConfig"),li.forEach(t),Mo=r(Ae,`, make sure its
`),oi=n(Ae,"CODE",{});var B9=s(oi);of=r(B9,"model_type"),B9.forEach(t),Kr=r(Ae," attribute is set to the same key you use when registering the config (here "),ri=n(Ae,"CODE",{});var P9=s(ri);ti=r(P9,'"new-model"'),P9.forEach(t),_A=r(Ae,")."),Ae.forEach(t),rf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ai=n(Eo,"CODE",{});var Fa=s(ai);Mn=r(Fa,"NewModel"),Fa.forEach(t),bA=r(Eo," is a subclass of "),En=n(Eo,"A",{href:!0});var I9=s(En);Cn=r(I9,"PreTrainedModel"),I9.forEach(t),vA=r(Eo,`, make sure its
`),ni=n(Eo,"CODE",{});var af=s(ni);wn=r(af,"config_class"),af.forEach(t),FA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),si=n(Eo,"CODE",{});var q9=s(si);tf=r(q9,"NewModelConfig"),q9.forEach(t),va=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(En,"href","/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,oi),e(oi,of),e(g,Kr),e(g,ri),e(ri,ti),e(g,_A),b(ze,rf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ai),e(ai,Mn),e(qe,bA),e(qe,En),e(En,Cn),e(qe,vA),e(qe,ni),e(ni,wn),e(qe,FA),e(qe,si),e(si,tf),e(qe,va)},d(ze){ze&&t(g),ze&&t(rf),ze&&t(qe)}}}function VEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zEt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function QEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WEt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function HEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ct(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ECt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ACt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ct(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ICt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qCt(L){let g,v,p,m,u,d,h,Mo,oi,of,Kr,ri,ti,_A,rf,qe,Xe,ai,Mn,bA,En,Cn,vA,ni,wn,FA,si,tf,va,ze,Ae,R9,li,B9,P9,Eo,Fa,I9,af,q9,mNe,nBe,ii,nf,eZ,TA,gNe,oZ,hNe,sBe,An,pNe,rZ,uNe,_Ne,tZ,bNe,vNe,lBe,MA,iBe,N9,FNe,dBe,sf,cBe,di,lf,aZ,EA,TNe,nZ,MNe,fBe,Co,CA,ENe,wA,CNe,j9,wNe,ANe,yNe,AA,LNe,sZ,xNe,$Ne,kNe,Mr,yA,SNe,lZ,RNe,BNe,ci,PNe,iZ,INe,qNe,dZ,NNe,jNe,DNe,A,df,cZ,GNe,ONe,D9,VNe,XNe,zNe,cf,fZ,QNe,WNe,G9,HNe,UNe,JNe,ff,mZ,YNe,KNe,O9,ZNe,eje,oje,mf,gZ,rje,tje,V9,aje,nje,sje,gf,hZ,lje,ije,X9,dje,cje,fje,hf,pZ,mje,gje,z9,hje,pje,uje,pf,uZ,_je,bje,Q9,vje,Fje,Tje,uf,_Z,Mje,Eje,W9,Cje,wje,Aje,_f,bZ,yje,Lje,H9,xje,$je,kje,bf,vZ,Sje,Rje,U9,Bje,Pje,Ije,vf,FZ,qje,Nje,J9,jje,Dje,Gje,Ff,TZ,Oje,Vje,Y9,Xje,zje,Qje,Tf,MZ,Wje,Hje,K9,Uje,Jje,Yje,Mf,EZ,Kje,Zje,Z9,eDe,oDe,rDe,Ef,CZ,tDe,aDe,e$,nDe,sDe,lDe,Cf,wZ,iDe,dDe,o$,cDe,fDe,mDe,wf,AZ,gDe,hDe,r$,pDe,uDe,_De,Af,yZ,bDe,vDe,t$,FDe,TDe,MDe,yf,LZ,EDe,CDe,a$,wDe,ADe,yDe,Lf,xZ,LDe,xDe,n$,$De,kDe,SDe,xf,$Z,RDe,BDe,s$,PDe,IDe,qDe,$f,kZ,NDe,jDe,l$,DDe,GDe,ODe,kf,SZ,VDe,XDe,i$,zDe,QDe,WDe,Sf,RZ,HDe,UDe,d$,JDe,YDe,KDe,Rf,BZ,ZDe,eGe,c$,oGe,rGe,tGe,Bf,PZ,aGe,nGe,f$,sGe,lGe,iGe,Pf,IZ,dGe,cGe,m$,fGe,mGe,gGe,If,qZ,hGe,pGe,g$,uGe,_Ge,bGe,qf,NZ,vGe,FGe,h$,TGe,MGe,EGe,Nf,jZ,CGe,wGe,p$,AGe,yGe,LGe,jf,DZ,xGe,$Ge,u$,kGe,SGe,RGe,Df,GZ,BGe,PGe,_$,IGe,qGe,NGe,Gf,OZ,jGe,DGe,b$,GGe,OGe,VGe,Of,VZ,XGe,zGe,v$,QGe,WGe,HGe,Vf,XZ,UGe,JGe,F$,YGe,KGe,ZGe,Xf,zZ,eOe,oOe,T$,rOe,tOe,aOe,zf,QZ,nOe,sOe,M$,lOe,iOe,dOe,Qf,WZ,cOe,fOe,E$,mOe,gOe,hOe,Wf,HZ,pOe,uOe,C$,_Oe,bOe,vOe,Hf,UZ,FOe,TOe,w$,MOe,EOe,COe,Uf,JZ,wOe,AOe,A$,yOe,LOe,xOe,Jf,YZ,$Oe,kOe,y$,SOe,ROe,BOe,Yf,KZ,POe,IOe,L$,qOe,NOe,jOe,Kf,ZZ,DOe,GOe,x$,OOe,VOe,XOe,Zf,eee,zOe,QOe,$$,WOe,HOe,UOe,em,oee,JOe,YOe,k$,KOe,ZOe,eVe,om,ree,oVe,rVe,S$,tVe,aVe,nVe,rm,tee,sVe,lVe,R$,iVe,dVe,cVe,tm,aee,fVe,mVe,B$,gVe,hVe,pVe,am,nee,uVe,_Ve,P$,bVe,vVe,FVe,nm,see,TVe,MVe,I$,EVe,CVe,wVe,sm,lee,AVe,yVe,q$,LVe,xVe,$Ve,lm,iee,kVe,SVe,N$,RVe,BVe,PVe,im,dee,IVe,qVe,j$,NVe,jVe,DVe,dm,cee,GVe,OVe,D$,VVe,XVe,zVe,cm,fee,QVe,WVe,G$,HVe,UVe,JVe,fm,mee,YVe,KVe,O$,ZVe,eXe,oXe,mm,gee,rXe,tXe,V$,aXe,nXe,sXe,gm,hee,lXe,iXe,X$,dXe,cXe,fXe,hm,pee,mXe,gXe,z$,hXe,pXe,uXe,pm,uee,_Xe,bXe,Q$,vXe,FXe,TXe,um,_ee,MXe,EXe,W$,CXe,wXe,AXe,_m,bee,yXe,LXe,H$,xXe,$Xe,kXe,bm,vee,SXe,RXe,U$,BXe,PXe,IXe,vm,Fee,qXe,NXe,J$,jXe,DXe,GXe,Fm,Tee,OXe,VXe,Y$,XXe,zXe,QXe,Tm,Mee,WXe,HXe,K$,UXe,JXe,YXe,Mm,Eee,KXe,ZXe,Z$,eze,oze,rze,Em,Cee,tze,aze,ek,nze,sze,lze,Cm,wee,ize,dze,ok,cze,fze,mze,wm,Aee,gze,hze,rk,pze,uze,_ze,Am,yee,bze,vze,tk,Fze,Tze,Mze,ym,Lee,Eze,Cze,ak,wze,Aze,yze,Lm,xee,Lze,xze,nk,$ze,kze,Sze,xm,$ee,Rze,Bze,sk,Pze,Ize,qze,$m,kee,Nze,jze,lk,Dze,Gze,Oze,km,See,Vze,Xze,ik,zze,Qze,Wze,Sm,Ree,Hze,Uze,dk,Jze,Yze,Kze,Rm,Bee,Zze,eQe,ck,oQe,rQe,tQe,Bm,Pee,aQe,nQe,fk,sQe,lQe,iQe,Pm,Iee,dQe,cQe,mk,fQe,mQe,gQe,Im,qee,hQe,pQe,gk,uQe,_Qe,bQe,qm,Nee,vQe,FQe,hk,TQe,MQe,EQe,Nm,jee,CQe,wQe,pk,AQe,yQe,LQe,jm,Dee,xQe,$Qe,uk,kQe,SQe,RQe,Dm,Gee,BQe,PQe,_k,IQe,qQe,NQe,Gm,Oee,jQe,DQe,bk,GQe,OQe,VQe,Om,Vee,XQe,zQe,vk,QQe,WQe,HQe,Vm,Xee,UQe,JQe,Fk,YQe,KQe,ZQe,Xm,zee,eWe,oWe,Tk,rWe,tWe,aWe,zm,Qee,nWe,sWe,Mk,lWe,iWe,dWe,Qm,Wee,cWe,fWe,Ek,mWe,gWe,hWe,Wm,Hee,pWe,uWe,Ck,_We,bWe,vWe,Hm,Uee,FWe,TWe,wk,MWe,EWe,CWe,Um,Jee,wWe,AWe,Ak,yWe,LWe,xWe,Jm,Yee,$We,kWe,yk,SWe,RWe,BWe,Ym,Kee,PWe,IWe,Lk,qWe,NWe,jWe,Km,Zee,DWe,GWe,xk,OWe,VWe,XWe,Zm,eoe,zWe,QWe,$k,WWe,HWe,UWe,eg,ooe,JWe,YWe,kk,KWe,ZWe,eHe,og,roe,oHe,rHe,Sk,tHe,aHe,nHe,rg,toe,sHe,lHe,Rk,iHe,dHe,cHe,tg,aoe,fHe,mHe,Bk,gHe,hHe,pHe,ag,uHe,ng,LA,_He,noe,bHe,mBe,fi,sg,soe,xA,vHe,loe,FHe,gBe,wo,$A,THe,kA,MHe,Pk,EHe,CHe,wHe,SA,AHe,ioe,yHe,LHe,xHe,Er,RA,$He,doe,kHe,SHe,Ta,RHe,coe,BHe,PHe,foe,IHe,qHe,moe,NHe,jHe,DHe,k,yn,goe,GHe,OHe,Ik,VHe,XHe,qk,zHe,QHe,WHe,Ln,hoe,HHe,UHe,Nk,JHe,YHe,jk,KHe,ZHe,eUe,xn,poe,oUe,rUe,Dk,tUe,aUe,Gk,nUe,sUe,lUe,lg,uoe,iUe,dUe,Ok,cUe,fUe,mUe,$n,_oe,gUe,hUe,Vk,pUe,uUe,Xk,_Ue,bUe,vUe,ig,boe,FUe,TUe,zk,MUe,EUe,CUe,dg,voe,wUe,AUe,Qk,yUe,LUe,xUe,cg,Foe,$Ue,kUe,Wk,SUe,RUe,BUe,kn,Toe,PUe,IUe,Hk,qUe,NUe,Uk,jUe,DUe,GUe,Sn,Moe,OUe,VUe,Jk,XUe,zUe,Yk,QUe,WUe,HUe,Rn,Eoe,UUe,JUe,Kk,YUe,KUe,Zk,ZUe,eJe,oJe,fg,Coe,rJe,tJe,eS,aJe,nJe,sJe,mg,woe,lJe,iJe,oS,dJe,cJe,fJe,Bn,Aoe,mJe,gJe,rS,hJe,pJe,tS,uJe,_Je,bJe,gg,yoe,vJe,FJe,aS,TJe,MJe,EJe,Pn,Loe,CJe,wJe,nS,AJe,yJe,sS,LJe,xJe,$Je,In,xoe,kJe,SJe,lS,RJe,BJe,iS,PJe,IJe,qJe,qn,$oe,NJe,jJe,dS,DJe,GJe,cS,OJe,VJe,XJe,hg,koe,zJe,QJe,fS,WJe,HJe,UJe,Nn,Soe,JJe,YJe,mS,KJe,ZJe,gS,eYe,oYe,rYe,jn,Roe,tYe,aYe,hS,nYe,sYe,pS,lYe,iYe,dYe,Dn,Boe,cYe,fYe,uS,mYe,gYe,_S,hYe,pYe,uYe,Gn,Poe,_Ye,bYe,bS,vYe,FYe,vS,TYe,MYe,EYe,On,Ioe,CYe,wYe,FS,AYe,yYe,TS,LYe,xYe,$Ye,Vn,qoe,kYe,SYe,MS,RYe,BYe,ES,PYe,IYe,qYe,pg,Noe,NYe,jYe,CS,DYe,GYe,OYe,Xn,joe,VYe,XYe,wS,zYe,QYe,AS,WYe,HYe,UYe,ug,Doe,JYe,YYe,yS,KYe,ZYe,eKe,zn,Goe,oKe,rKe,LS,tKe,aKe,xS,nKe,sKe,lKe,Qn,Ooe,iKe,dKe,$S,cKe,fKe,kS,mKe,gKe,hKe,Wn,Voe,pKe,uKe,SS,_Ke,bKe,RS,vKe,FKe,TKe,Hn,Xoe,MKe,EKe,BS,CKe,wKe,PS,AKe,yKe,LKe,Un,zoe,xKe,$Ke,IS,kKe,SKe,qS,RKe,BKe,PKe,_g,Qoe,IKe,qKe,NS,NKe,jKe,DKe,Jn,Woe,GKe,OKe,jS,VKe,XKe,DS,zKe,QKe,WKe,Yn,Hoe,HKe,UKe,GS,JKe,YKe,OS,KKe,ZKe,eZe,Kn,Uoe,oZe,rZe,VS,tZe,aZe,XS,nZe,sZe,lZe,Zn,Joe,iZe,dZe,zS,cZe,fZe,QS,mZe,gZe,hZe,es,Yoe,pZe,uZe,WS,_Ze,bZe,HS,vZe,FZe,TZe,os,Koe,MZe,EZe,US,CZe,wZe,JS,AZe,yZe,LZe,bg,Zoe,xZe,$Ze,YS,kZe,SZe,RZe,rs,ere,BZe,PZe,KS,IZe,qZe,ZS,NZe,jZe,DZe,vg,ore,GZe,OZe,eR,VZe,XZe,zZe,Fg,rre,QZe,WZe,oR,HZe,UZe,JZe,ts,tre,YZe,KZe,rR,ZZe,eeo,tR,oeo,reo,teo,as,are,aeo,neo,aR,seo,leo,nR,ieo,deo,ceo,ns,nre,feo,meo,sR,geo,heo,lR,peo,ueo,_eo,Tg,sre,beo,veo,iR,Feo,Teo,Meo,ss,lre,Eeo,Ceo,dR,weo,Aeo,cR,yeo,Leo,xeo,ls,ire,$eo,keo,fR,Seo,Reo,mR,Beo,Peo,Ieo,is,dre,qeo,Neo,gR,jeo,Deo,hR,Geo,Oeo,Veo,ds,cre,Xeo,zeo,pR,Qeo,Weo,uR,Heo,Ueo,Jeo,cs,fre,Yeo,Keo,_R,Zeo,eoo,bR,ooo,roo,too,fs,mre,aoo,noo,vR,soo,loo,FR,ioo,doo,coo,Mg,gre,foo,moo,TR,goo,hoo,poo,Eg,hre,uoo,_oo,MR,boo,voo,Foo,Cg,pre,Too,Moo,ER,Eoo,Coo,woo,wg,ure,Aoo,yoo,CR,Loo,xoo,$oo,ms,_re,koo,Soo,wR,Roo,Boo,AR,Poo,Ioo,qoo,Ag,bre,Noo,joo,yR,Doo,Goo,Ooo,gs,vre,Voo,Xoo,LR,zoo,Qoo,xR,Woo,Hoo,Uoo,hs,Fre,Joo,Yoo,$R,Koo,Zoo,kR,ero,oro,rro,ps,Tre,tro,aro,SR,nro,sro,RR,lro,iro,dro,us,Mre,cro,fro,BR,mro,gro,PR,hro,pro,uro,_s,Ere,_ro,bro,IR,vro,Fro,qR,Tro,Mro,Ero,bs,Cre,Cro,wro,NR,Aro,yro,jR,Lro,xro,$ro,yg,wre,kro,Sro,DR,Rro,Bro,Pro,Lg,Are,Iro,qro,GR,Nro,jro,Dro,vs,yre,Gro,Oro,OR,Vro,Xro,VR,zro,Qro,Wro,Fs,Lre,Hro,Uro,XR,Jro,Yro,zR,Kro,Zro,eto,Ts,xre,oto,rto,QR,tto,ato,WR,nto,sto,lto,xg,$re,ito,dto,HR,cto,fto,mto,$g,kre,gto,hto,UR,pto,uto,_to,kg,Sre,bto,vto,JR,Fto,Tto,Mto,Ms,Rre,Eto,Cto,YR,wto,Ato,KR,yto,Lto,xto,Sg,Bre,$to,kto,ZR,Sto,Rto,Bto,Rg,Pre,Pto,Ito,eB,qto,Nto,jto,Es,Ire,Dto,Gto,oB,Oto,Vto,rB,Xto,zto,Qto,Bg,qre,Wto,Hto,tB,Uto,Jto,Yto,Pg,Nre,Kto,Zto,aB,eao,oao,rao,Cs,jre,tao,aao,nB,nao,sao,sB,lao,iao,dao,ws,Dre,cao,fao,lB,mao,gao,iB,hao,pao,uao,As,Gre,_ao,bao,dB,vao,Fao,cB,Tao,Mao,Eao,ys,Ore,Cao,wao,fB,Aao,yao,mB,Lao,xao,$ao,Ig,kao,qg,BA,Sao,Vre,Rao,hBe,mi,Ng,Xre,PA,Bao,zre,Pao,pBe,Ao,IA,Iao,qA,qao,gB,Nao,jao,Dao,NA,Gao,Qre,Oao,Vao,Xao,Qe,jA,zao,Wre,Qao,Wao,Ma,Hao,Hre,Uao,Jao,Ure,Yao,Kao,Jre,Zao,eno,ono,te,jg,Yre,rno,tno,hB,ano,nno,sno,Dg,Kre,lno,ino,pB,dno,cno,fno,Gg,Zre,mno,gno,uB,hno,pno,uno,Og,ete,_no,bno,_B,vno,Fno,Tno,Vg,ote,Mno,Eno,bB,Cno,wno,Ano,Xg,rte,yno,Lno,vB,xno,$no,kno,zg,tte,Sno,Rno,FB,Bno,Pno,Ino,Qg,ate,qno,Nno,TB,jno,Dno,Gno,Wg,nte,Ono,Vno,MB,Xno,zno,Qno,Hg,ste,Wno,Hno,EB,Uno,Jno,Yno,Ug,lte,Kno,Zno,CB,eso,oso,rso,Jg,ite,tso,aso,wB,nso,sso,lso,Yg,dte,iso,dso,AB,cso,fso,mso,Kg,cte,gso,hso,yB,pso,uso,_so,Zg,fte,bso,vso,LB,Fso,Tso,Mso,eh,mte,Eso,Cso,xB,wso,Aso,yso,oh,gte,Lso,xso,$B,$so,kso,Sso,rh,hte,Rso,Bso,kB,Pso,Iso,qso,th,pte,Nso,jso,SB,Dso,Gso,Oso,ah,ute,Vso,Xso,RB,zso,Qso,Wso,nh,_te,Hso,Uso,BB,Jso,Yso,Kso,sh,bte,Zso,elo,PB,olo,rlo,tlo,lh,vte,alo,nlo,IB,slo,llo,ilo,ih,Fte,dlo,clo,qB,flo,mlo,glo,dh,hlo,ch,plo,fh,DA,ulo,Tte,_lo,uBe,gi,mh,Mte,GA,blo,Ete,vlo,_Be,yo,OA,Flo,VA,Tlo,NB,Mlo,Elo,Clo,XA,wlo,Cte,Alo,ylo,Llo,We,zA,xlo,wte,$lo,klo,hi,Slo,Ate,Rlo,Blo,yte,Plo,Ilo,qlo,be,gh,Lte,Nlo,jlo,jB,Dlo,Glo,Olo,hh,xte,Vlo,Xlo,DB,zlo,Qlo,Wlo,ph,$te,Hlo,Ulo,GB,Jlo,Ylo,Klo,uh,kte,Zlo,eio,OB,oio,rio,tio,_h,Ste,aio,nio,VB,sio,lio,iio,bh,Rte,dio,cio,XB,fio,mio,gio,vh,Bte,hio,pio,zB,uio,_io,bio,Fh,Pte,vio,Fio,QB,Tio,Mio,Eio,Th,Ite,Cio,wio,WB,Aio,yio,Lio,Mh,qte,xio,$io,HB,kio,Sio,Rio,Eh,Nte,Bio,Pio,UB,Iio,qio,Nio,Ch,jte,jio,Dio,JB,Gio,Oio,Vio,wh,Dte,Xio,zio,YB,Qio,Wio,Hio,Ah,Gte,Uio,Jio,KB,Yio,Kio,Zio,yh,edo,Lh,odo,xh,QA,rdo,Ote,tdo,bBe,pi,$h,Vte,WA,ado,Xte,ndo,vBe,Lo,HA,sdo,ui,ldo,ZB,ido,ddo,eP,cdo,fdo,mdo,UA,gdo,zte,hdo,pdo,udo,Zr,JA,_do,Qte,bdo,vdo,_i,Fdo,Wte,Tdo,Mdo,oP,Edo,Cdo,wdo,kh,Ado,He,YA,ydo,Hte,Ldo,xdo,Ea,$do,Ute,kdo,Sdo,Jte,Rdo,Bdo,Yte,Pdo,Ido,qdo,x,Sh,Kte,Ndo,jdo,rP,Ddo,Gdo,Odo,Rh,Zte,Vdo,Xdo,tP,zdo,Qdo,Wdo,Bh,eae,Hdo,Udo,aP,Jdo,Ydo,Kdo,Ph,oae,Zdo,eco,nP,oco,rco,tco,Ih,rae,aco,nco,sP,sco,lco,ico,qh,tae,dco,cco,lP,fco,mco,gco,Nh,aae,hco,pco,iP,uco,_co,bco,jh,nae,vco,Fco,dP,Tco,Mco,Eco,Dh,sae,Cco,wco,cP,Aco,yco,Lco,Gh,lae,xco,$co,fP,kco,Sco,Rco,Oh,iae,Bco,Pco,mP,Ico,qco,Nco,Vh,dae,jco,Dco,gP,Gco,Oco,Vco,Xh,cae,Xco,zco,hP,Qco,Wco,Hco,zh,fae,Uco,Jco,pP,Yco,Kco,Zco,Qh,mae,efo,ofo,uP,rfo,tfo,afo,Wh,gae,nfo,sfo,_P,lfo,ifo,dfo,Hh,hae,cfo,ffo,bP,mfo,gfo,hfo,Uh,pae,pfo,ufo,vP,_fo,bfo,vfo,Jh,uae,Ffo,Tfo,FP,Mfo,Efo,Cfo,Yh,_ae,wfo,Afo,TP,yfo,Lfo,xfo,Kh,bae,$fo,kfo,MP,Sfo,Rfo,Bfo,Zh,vae,Pfo,Ifo,EP,qfo,Nfo,jfo,ep,Fae,Dfo,Gfo,CP,Ofo,Vfo,Xfo,op,Tae,zfo,Qfo,wP,Wfo,Hfo,Ufo,rp,Mae,Jfo,Yfo,AP,Kfo,Zfo,emo,tp,Eae,omo,rmo,yP,tmo,amo,nmo,ap,Cae,smo,lmo,LP,imo,dmo,cmo,np,wae,fmo,mmo,xP,gmo,hmo,pmo,sp,Aae,umo,_mo,$P,bmo,vmo,Fmo,lp,yae,Tmo,Mmo,kP,Emo,Cmo,wmo,Ls,Lae,Amo,ymo,SP,Lmo,xmo,RP,$mo,kmo,Smo,ip,xae,Rmo,Bmo,BP,Pmo,Imo,qmo,dp,$ae,Nmo,jmo,PP,Dmo,Gmo,Omo,cp,kae,Vmo,Xmo,IP,zmo,Qmo,Wmo,fp,Sae,Hmo,Umo,qP,Jmo,Ymo,Kmo,mp,Rae,Zmo,ego,NP,ogo,rgo,tgo,gp,Bae,ago,ngo,jP,sgo,lgo,igo,hp,Pae,dgo,cgo,DP,fgo,mgo,ggo,pp,Iae,hgo,pgo,GP,ugo,_go,bgo,up,qae,vgo,Fgo,OP,Tgo,Mgo,Ego,_p,Nae,Cgo,wgo,VP,Ago,ygo,Lgo,bp,jae,xgo,$go,XP,kgo,Sgo,Rgo,vp,Dae,Bgo,Pgo,zP,Igo,qgo,Ngo,Fp,Gae,jgo,Dgo,QP,Ggo,Ogo,Vgo,Tp,Oae,Xgo,zgo,WP,Qgo,Wgo,Hgo,Mp,Vae,Ugo,Jgo,HP,Ygo,Kgo,Zgo,Ep,Xae,eho,oho,UP,rho,tho,aho,Cp,zae,nho,sho,JP,lho,iho,dho,wp,Qae,cho,fho,YP,mho,gho,hho,Ap,Wae,pho,uho,KP,_ho,bho,vho,yp,Hae,Fho,Tho,ZP,Mho,Eho,Cho,Lp,Uae,who,Aho,eI,yho,Lho,xho,xp,Jae,$ho,kho,oI,Sho,Rho,Bho,$p,Yae,Pho,Iho,rI,qho,Nho,jho,kp,Kae,Dho,Gho,tI,Oho,Vho,Xho,Sp,Zae,zho,Qho,aI,Who,Hho,Uho,Rp,ene,Jho,Yho,nI,Kho,Zho,epo,Bp,one,opo,rpo,sI,tpo,apo,npo,Pp,rne,spo,lpo,lI,ipo,dpo,cpo,Ip,tne,fpo,mpo,iI,gpo,hpo,ppo,qp,ane,upo,_po,dI,bpo,vpo,Fpo,Np,nne,Tpo,Mpo,cI,Epo,Cpo,wpo,jp,sne,Apo,ypo,fI,Lpo,xpo,$po,Dp,lne,kpo,Spo,mI,Rpo,Bpo,Ppo,Gp,ine,Ipo,qpo,gI,Npo,jpo,Dpo,Op,dne,Gpo,Opo,hI,Vpo,Xpo,zpo,Vp,cne,Qpo,Wpo,pI,Hpo,Upo,Jpo,Xp,fne,Ypo,Kpo,uI,Zpo,euo,ouo,zp,mne,ruo,tuo,_I,auo,nuo,suo,Qp,gne,luo,iuo,bI,duo,cuo,fuo,Wp,hne,muo,guo,vI,huo,puo,uuo,Hp,pne,_uo,buo,FI,vuo,Fuo,Tuo,Up,une,Muo,Euo,TI,Cuo,wuo,Auo,Jp,_ne,yuo,Luo,MI,xuo,$uo,kuo,Yp,bne,Suo,Ruo,EI,Buo,Puo,Iuo,Kp,vne,quo,Nuo,CI,juo,Duo,Guo,Zp,Fne,Ouo,Vuo,wI,Xuo,zuo,Quo,eu,Tne,Wuo,Huo,AI,Uuo,Juo,Yuo,ou,Mne,Kuo,Zuo,yI,e_o,o_o,r_o,ru,Ene,t_o,a_o,LI,n_o,s_o,l_o,tu,Cne,i_o,d_o,xI,c_o,f_o,m_o,au,wne,g_o,h_o,$I,p_o,u_o,__o,nu,Ane,b_o,v_o,kI,F_o,T_o,M_o,su,yne,E_o,C_o,SI,w_o,A_o,y_o,lu,Lne,L_o,x_o,RI,$_o,k_o,S_o,iu,xne,R_o,B_o,BI,P_o,I_o,q_o,du,$ne,N_o,j_o,PI,D_o,G_o,O_o,cu,kne,V_o,X_o,II,z_o,Q_o,W_o,fu,Sne,H_o,U_o,qI,J_o,Y_o,K_o,mu,Rne,Z_o,e1o,NI,o1o,r1o,t1o,gu,Bne,a1o,n1o,jI,s1o,l1o,i1o,hu,Pne,d1o,c1o,DI,f1o,m1o,g1o,pu,Ine,h1o,p1o,GI,u1o,_1o,b1o,uu,qne,v1o,F1o,OI,T1o,M1o,E1o,_u,Nne,C1o,w1o,VI,A1o,y1o,L1o,bu,x1o,jne,$1o,k1o,Dne,S1o,R1o,vu,FBe,bi,Fu,Gne,KA,B1o,One,P1o,TBe,xo,ZA,I1o,vi,q1o,XI,N1o,j1o,zI,D1o,G1o,O1o,e6,V1o,Vne,X1o,z1o,Q1o,et,o6,W1o,Xne,H1o,U1o,Fi,J1o,zne,Y1o,K1o,QI,Z1o,e7o,o7o,Tu,r7o,Ue,r6,t7o,Qne,a7o,n7o,Ca,s7o,Wne,l7o,i7o,Hne,d7o,c7o,Une,f7o,m7o,g7o,G,Mu,Jne,h7o,p7o,WI,u7o,_7o,b7o,Eu,Yne,v7o,F7o,HI,T7o,M7o,E7o,Cu,Kne,C7o,w7o,UI,A7o,y7o,L7o,wu,Zne,x7o,$7o,JI,k7o,S7o,R7o,Au,ese,B7o,P7o,YI,I7o,q7o,N7o,yu,ose,j7o,D7o,KI,G7o,O7o,V7o,Lu,rse,X7o,z7o,ZI,Q7o,W7o,H7o,xu,tse,U7o,J7o,eq,Y7o,K7o,Z7o,$u,ase,ebo,obo,oq,rbo,tbo,abo,ku,nse,nbo,sbo,rq,lbo,ibo,dbo,Su,sse,cbo,fbo,tq,mbo,gbo,hbo,Ru,lse,pbo,ubo,aq,_bo,bbo,vbo,Bu,ise,Fbo,Tbo,nq,Mbo,Ebo,Cbo,Pu,dse,wbo,Abo,sq,ybo,Lbo,xbo,Iu,cse,$bo,kbo,lq,Sbo,Rbo,Bbo,qu,fse,Pbo,Ibo,iq,qbo,Nbo,jbo,Nu,mse,Dbo,Gbo,dq,Obo,Vbo,Xbo,ju,gse,zbo,Qbo,cq,Wbo,Hbo,Ubo,Du,hse,Jbo,Ybo,fq,Kbo,Zbo,e2o,Gu,pse,o2o,r2o,mq,t2o,a2o,n2o,Ou,use,s2o,l2o,gq,i2o,d2o,c2o,Vu,_se,f2o,m2o,hq,g2o,h2o,p2o,Xu,bse,u2o,_2o,pq,b2o,v2o,F2o,zu,vse,T2o,M2o,uq,E2o,C2o,w2o,Qu,Fse,A2o,y2o,_q,L2o,x2o,$2o,Wu,Tse,k2o,S2o,bq,R2o,B2o,P2o,Hu,Mse,I2o,q2o,vq,N2o,j2o,D2o,Uu,Ese,G2o,O2o,Fq,V2o,X2o,z2o,Ju,Cse,Q2o,W2o,Tq,H2o,U2o,J2o,Yu,wse,Y2o,K2o,Mq,Z2o,e3o,o3o,Ku,Ase,r3o,t3o,Eq,a3o,n3o,s3o,Zu,yse,l3o,i3o,Cq,d3o,c3o,f3o,e_,Lse,m3o,g3o,wq,h3o,p3o,u3o,o_,xse,_3o,b3o,Aq,v3o,F3o,T3o,r_,$se,M3o,E3o,yq,C3o,w3o,A3o,t_,kse,y3o,L3o,Lq,x3o,$3o,k3o,a_,Sse,S3o,R3o,xq,B3o,P3o,I3o,n_,Rse,q3o,N3o,$q,j3o,D3o,G3o,s_,Bse,O3o,V3o,kq,X3o,z3o,Q3o,l_,W3o,Pse,H3o,U3o,Ise,J3o,Y3o,i_,MBe,Ti,d_,qse,t6,K3o,Nse,Z3o,EBe,$o,a6,evo,Mi,ovo,Sq,rvo,tvo,Rq,avo,nvo,svo,n6,lvo,jse,ivo,dvo,cvo,ot,s6,fvo,Dse,mvo,gvo,Ei,hvo,Gse,pvo,uvo,Bq,_vo,bvo,vvo,c_,Fvo,Je,l6,Tvo,Ose,Mvo,Evo,wa,Cvo,Vse,wvo,Avo,Xse,yvo,Lvo,zse,xvo,$vo,kvo,z,f_,Qse,Svo,Rvo,Pq,Bvo,Pvo,Ivo,m_,Wse,qvo,Nvo,Iq,jvo,Dvo,Gvo,g_,Hse,Ovo,Vvo,qq,Xvo,zvo,Qvo,h_,Use,Wvo,Hvo,Nq,Uvo,Jvo,Yvo,p_,Jse,Kvo,Zvo,jq,eFo,oFo,rFo,u_,Yse,tFo,aFo,Dq,nFo,sFo,lFo,__,Kse,iFo,dFo,Gq,cFo,fFo,mFo,b_,Zse,gFo,hFo,Oq,pFo,uFo,_Fo,v_,ele,bFo,vFo,Vq,FFo,TFo,MFo,F_,ole,EFo,CFo,Xq,wFo,AFo,yFo,T_,rle,LFo,xFo,zq,$Fo,kFo,SFo,M_,tle,RFo,BFo,Qq,PFo,IFo,qFo,E_,ale,NFo,jFo,Wq,DFo,GFo,OFo,C_,nle,VFo,XFo,Hq,zFo,QFo,WFo,w_,sle,HFo,UFo,Uq,JFo,YFo,KFo,A_,lle,ZFo,e0o,Jq,o0o,r0o,t0o,y_,ile,a0o,n0o,Yq,s0o,l0o,i0o,L_,dle,d0o,c0o,Kq,f0o,m0o,g0o,x_,cle,h0o,p0o,Zq,u0o,_0o,b0o,$_,fle,v0o,F0o,eN,T0o,M0o,E0o,k_,mle,C0o,w0o,oN,A0o,y0o,L0o,S_,gle,x0o,$0o,rN,k0o,S0o,R0o,R_,hle,B0o,P0o,tN,I0o,q0o,N0o,B_,ple,j0o,D0o,aN,G0o,O0o,V0o,P_,ule,X0o,z0o,nN,Q0o,W0o,H0o,I_,_le,U0o,J0o,sN,Y0o,K0o,Z0o,q_,ble,eTo,oTo,lN,rTo,tTo,aTo,N_,vle,nTo,sTo,iN,lTo,iTo,dTo,j_,Fle,cTo,fTo,dN,mTo,gTo,hTo,D_,Tle,pTo,uTo,cN,_To,bTo,vTo,G_,Mle,FTo,TTo,fN,MTo,ETo,CTo,O_,Ele,wTo,ATo,mN,yTo,LTo,xTo,V_,Cle,$To,kTo,gN,STo,RTo,BTo,X_,wle,PTo,ITo,hN,qTo,NTo,jTo,z_,Ale,DTo,GTo,pN,OTo,VTo,XTo,Q_,zTo,yle,QTo,WTo,Lle,HTo,UTo,W_,CBe,Ci,H_,xle,i6,JTo,$le,YTo,wBe,ko,d6,KTo,wi,ZTo,uN,eMo,oMo,_N,rMo,tMo,aMo,c6,nMo,kle,sMo,lMo,iMo,rt,f6,dMo,Sle,cMo,fMo,Ai,mMo,Rle,gMo,hMo,bN,pMo,uMo,_Mo,U_,bMo,Ye,m6,vMo,Ble,FMo,TMo,Aa,MMo,Ple,EMo,CMo,Ile,wMo,AMo,qle,yMo,LMo,xMo,Q,J_,Nle,$Mo,kMo,vN,SMo,RMo,BMo,Y_,jle,PMo,IMo,FN,qMo,NMo,jMo,K_,Dle,DMo,GMo,TN,OMo,VMo,XMo,Z_,Gle,zMo,QMo,MN,WMo,HMo,UMo,e1,Ole,JMo,YMo,EN,KMo,ZMo,e4o,o1,Vle,o4o,r4o,CN,t4o,a4o,n4o,r1,Xle,s4o,l4o,wN,i4o,d4o,c4o,t1,zle,f4o,m4o,AN,g4o,h4o,p4o,a1,Qle,u4o,_4o,yN,b4o,v4o,F4o,n1,Wle,T4o,M4o,LN,E4o,C4o,w4o,s1,Hle,A4o,y4o,xN,L4o,x4o,$4o,l1,Ule,k4o,S4o,$N,R4o,B4o,P4o,i1,Jle,I4o,q4o,kN,N4o,j4o,D4o,d1,Yle,G4o,O4o,SN,V4o,X4o,z4o,c1,Kle,Q4o,W4o,RN,H4o,U4o,J4o,f1,Zle,Y4o,K4o,BN,Z4o,eEo,oEo,m1,eie,rEo,tEo,PN,aEo,nEo,sEo,g1,oie,lEo,iEo,IN,dEo,cEo,fEo,h1,rie,mEo,gEo,qN,hEo,pEo,uEo,p1,tie,_Eo,bEo,NN,vEo,FEo,TEo,u1,aie,MEo,EEo,jN,CEo,wEo,AEo,_1,nie,yEo,LEo,DN,xEo,$Eo,kEo,b1,sie,SEo,REo,GN,BEo,PEo,IEo,v1,lie,qEo,NEo,ON,jEo,DEo,GEo,F1,iie,OEo,VEo,VN,XEo,zEo,QEo,T1,die,WEo,HEo,XN,UEo,JEo,YEo,M1,cie,KEo,ZEo,zN,e5o,o5o,r5o,E1,fie,t5o,a5o,QN,n5o,s5o,l5o,C1,mie,i5o,d5o,WN,c5o,f5o,m5o,w1,gie,g5o,h5o,HN,p5o,u5o,_5o,A1,hie,b5o,v5o,pie,F5o,T5o,M5o,y1,uie,E5o,C5o,UN,w5o,A5o,y5o,L1,_ie,L5o,x5o,JN,$5o,k5o,S5o,x1,bie,R5o,B5o,YN,P5o,I5o,q5o,$1,vie,N5o,j5o,KN,D5o,G5o,O5o,k1,V5o,Fie,X5o,z5o,Tie,Q5o,W5o,S1,ABe,yi,R1,Mie,g6,H5o,Eie,U5o,yBe,So,h6,J5o,Li,Y5o,ZN,K5o,Z5o,ej,eCo,oCo,rCo,p6,tCo,Cie,aCo,nCo,sCo,tt,u6,lCo,wie,iCo,dCo,xi,cCo,Aie,fCo,mCo,oj,gCo,hCo,pCo,B1,uCo,Ke,_6,_Co,yie,bCo,vCo,ya,FCo,Lie,TCo,MCo,xie,ECo,CCo,$ie,wCo,ACo,yCo,he,P1,kie,LCo,xCo,rj,$Co,kCo,SCo,I1,Sie,RCo,BCo,tj,PCo,ICo,qCo,q1,Rie,NCo,jCo,aj,DCo,GCo,OCo,N1,Bie,VCo,XCo,nj,zCo,QCo,WCo,j1,Pie,HCo,UCo,sj,JCo,YCo,KCo,D1,Iie,ZCo,ewo,lj,owo,rwo,two,G1,qie,awo,nwo,ij,swo,lwo,iwo,O1,Nie,dwo,cwo,dj,fwo,mwo,gwo,V1,jie,hwo,pwo,cj,uwo,_wo,bwo,X1,Die,vwo,Fwo,fj,Two,Mwo,Ewo,z1,Gie,Cwo,wwo,mj,Awo,ywo,Lwo,Q1,Oie,xwo,$wo,gj,kwo,Swo,Rwo,W1,Vie,Bwo,Pwo,hj,Iwo,qwo,Nwo,H1,Xie,jwo,Dwo,pj,Gwo,Owo,Vwo,U1,zie,Xwo,zwo,uj,Qwo,Wwo,Hwo,J1,Qie,Uwo,Jwo,_j,Ywo,Kwo,Zwo,Y1,Wie,eAo,oAo,bj,rAo,tAo,aAo,K1,nAo,Hie,sAo,lAo,Uie,iAo,dAo,Z1,LBe,$i,e7,Jie,b6,cAo,Yie,fAo,xBe,Ro,v6,mAo,ki,gAo,vj,hAo,pAo,Fj,uAo,_Ao,bAo,F6,vAo,Kie,FAo,TAo,MAo,at,T6,EAo,Zie,CAo,wAo,Si,AAo,ede,yAo,LAo,Tj,xAo,$Ao,kAo,o7,SAo,Ze,M6,RAo,ode,BAo,PAo,La,IAo,rde,qAo,NAo,tde,jAo,DAo,ade,GAo,OAo,VAo,q,r7,nde,XAo,zAo,Mj,QAo,WAo,HAo,t7,sde,UAo,JAo,Ej,YAo,KAo,ZAo,a7,lde,e6o,o6o,Cj,r6o,t6o,a6o,n7,ide,n6o,s6o,wj,l6o,i6o,d6o,s7,dde,c6o,f6o,Aj,m6o,g6o,h6o,l7,cde,p6o,u6o,yj,_6o,b6o,v6o,i7,fde,F6o,T6o,Lj,M6o,E6o,C6o,d7,mde,w6o,A6o,xj,y6o,L6o,x6o,c7,gde,$6o,k6o,$j,S6o,R6o,B6o,f7,hde,P6o,I6o,kj,q6o,N6o,j6o,m7,pde,D6o,G6o,Sj,O6o,V6o,X6o,g7,ude,z6o,Q6o,Rj,W6o,H6o,U6o,h7,_de,J6o,Y6o,Bj,K6o,Z6o,eyo,p7,bde,oyo,ryo,Pj,tyo,ayo,nyo,u7,vde,syo,lyo,Ij,iyo,dyo,cyo,_7,Fde,fyo,myo,qj,gyo,hyo,pyo,b7,Tde,uyo,_yo,Nj,byo,vyo,Fyo,v7,Mde,Tyo,Myo,jj,Eyo,Cyo,wyo,F7,Ede,Ayo,yyo,Dj,Lyo,xyo,$yo,T7,Cde,kyo,Syo,Gj,Ryo,Byo,Pyo,M7,wde,Iyo,qyo,Oj,Nyo,jyo,Dyo,E7,Ade,Gyo,Oyo,Vj,Vyo,Xyo,zyo,C7,yde,Qyo,Wyo,Xj,Hyo,Uyo,Jyo,w7,Lde,Yyo,Kyo,zj,Zyo,eLo,oLo,A7,xde,rLo,tLo,Qj,aLo,nLo,sLo,y7,$de,lLo,iLo,Wj,dLo,cLo,fLo,L7,kde,mLo,gLo,Hj,hLo,pLo,uLo,x7,Sde,_Lo,bLo,Uj,vLo,FLo,TLo,$7,Rde,MLo,ELo,Jj,CLo,wLo,ALo,k7,Bde,yLo,LLo,Yj,xLo,$Lo,kLo,S7,Pde,SLo,RLo,Kj,BLo,PLo,ILo,R7,Ide,qLo,NLo,Zj,jLo,DLo,GLo,B7,qde,OLo,VLo,eD,XLo,zLo,QLo,P7,Nde,WLo,HLo,oD,ULo,JLo,YLo,I7,jde,KLo,ZLo,rD,e8o,o8o,r8o,q7,Dde,t8o,a8o,tD,n8o,s8o,l8o,N7,Gde,i8o,d8o,aD,c8o,f8o,m8o,j7,Ode,g8o,h8o,nD,p8o,u8o,_8o,D7,Vde,b8o,v8o,sD,F8o,T8o,M8o,G7,Xde,E8o,C8o,lD,w8o,A8o,y8o,O7,zde,L8o,x8o,iD,$8o,k8o,S8o,V7,Qde,R8o,B8o,dD,P8o,I8o,q8o,X7,Wde,N8o,j8o,cD,D8o,G8o,O8o,z7,Hde,V8o,X8o,fD,z8o,Q8o,W8o,Q7,Ude,H8o,U8o,mD,J8o,Y8o,K8o,W7,Jde,Z8o,exo,gD,oxo,rxo,txo,H7,Yde,axo,nxo,hD,sxo,lxo,ixo,U7,dxo,Kde,cxo,fxo,Zde,mxo,gxo,J7,$Be,Ri,Y7,ece,E6,hxo,oce,pxo,kBe,Bo,C6,uxo,Bi,_xo,pD,bxo,vxo,uD,Fxo,Txo,Mxo,w6,Exo,rce,Cxo,wxo,Axo,nt,A6,yxo,tce,Lxo,xxo,Pi,$xo,ace,kxo,Sxo,_D,Rxo,Bxo,Pxo,K7,Ixo,eo,y6,qxo,nce,Nxo,jxo,xa,Dxo,sce,Gxo,Oxo,lce,Vxo,Xxo,ice,zxo,Qxo,Wxo,Y,Z7,dce,Hxo,Uxo,bD,Jxo,Yxo,Kxo,eb,cce,Zxo,e9o,vD,o9o,r9o,t9o,ob,fce,a9o,n9o,FD,s9o,l9o,i9o,rb,mce,d9o,c9o,TD,f9o,m9o,g9o,tb,gce,h9o,p9o,MD,u9o,_9o,b9o,ab,hce,v9o,F9o,ED,T9o,M9o,E9o,nb,pce,C9o,w9o,CD,A9o,y9o,L9o,sb,uce,x9o,$9o,wD,k9o,S9o,R9o,lb,_ce,B9o,P9o,AD,I9o,q9o,N9o,ib,bce,j9o,D9o,yD,G9o,O9o,V9o,db,vce,X9o,z9o,LD,Q9o,W9o,H9o,cb,Fce,U9o,J9o,xD,Y9o,K9o,Z9o,fb,Tce,e$o,o$o,$D,r$o,t$o,a$o,mb,Mce,n$o,s$o,kD,l$o,i$o,d$o,gb,Ece,c$o,f$o,SD,m$o,g$o,h$o,hb,Cce,p$o,u$o,RD,_$o,b$o,v$o,pb,wce,F$o,T$o,BD,M$o,E$o,C$o,ub,Ace,w$o,A$o,PD,y$o,L$o,x$o,_b,yce,$$o,k$o,ID,S$o,R$o,B$o,bb,Lce,P$o,I$o,qD,q$o,N$o,j$o,vb,xce,D$o,G$o,ND,O$o,V$o,X$o,Fb,$ce,z$o,Q$o,jD,W$o,H$o,U$o,Tb,kce,J$o,Y$o,DD,K$o,Z$o,eko,Mb,Sce,oko,rko,GD,tko,ako,nko,Eb,Rce,sko,lko,OD,iko,dko,cko,Cb,Bce,fko,mko,VD,gko,hko,pko,wb,Pce,uko,_ko,XD,bko,vko,Fko,Ab,Ice,Tko,Mko,zD,Eko,Cko,wko,yb,Ako,qce,yko,Lko,Nce,xko,$ko,Lb,SBe,Ii,xb,jce,L6,kko,Dce,Sko,RBe,Po,x6,Rko,qi,Bko,QD,Pko,Iko,WD,qko,Nko,jko,$6,Dko,Gce,Gko,Oko,Vko,st,k6,Xko,Oce,zko,Qko,Ni,Wko,Vce,Hko,Uko,HD,Jko,Yko,Kko,$b,Zko,oo,S6,eSo,Xce,oSo,rSo,$a,tSo,zce,aSo,nSo,Qce,sSo,lSo,Wce,iSo,dSo,cSo,Ur,kb,Hce,fSo,mSo,UD,gSo,hSo,pSo,Sb,Uce,uSo,_So,JD,bSo,vSo,FSo,Rb,Jce,TSo,MSo,YD,ESo,CSo,wSo,Bb,Yce,ASo,ySo,KD,LSo,xSo,$So,Pb,Kce,kSo,SSo,ZD,RSo,BSo,PSo,Ib,ISo,Zce,qSo,NSo,efe,jSo,DSo,qb,BBe,ji,Nb,ofe,R6,GSo,rfe,OSo,PBe,Io,B6,VSo,Di,XSo,eG,zSo,QSo,oG,WSo,HSo,USo,P6,JSo,tfe,YSo,KSo,ZSo,lt,I6,eRo,afe,oRo,rRo,Gi,tRo,nfe,aRo,nRo,rG,sRo,lRo,iRo,jb,dRo,ro,q6,cRo,sfe,fRo,mRo,ka,gRo,lfe,hRo,pRo,ife,uRo,_Ro,dfe,bRo,vRo,FRo,U,Db,cfe,TRo,MRo,tG,ERo,CRo,wRo,Gb,ffe,ARo,yRo,aG,LRo,xRo,$Ro,Ob,mfe,kRo,SRo,nG,RRo,BRo,PRo,Vb,gfe,IRo,qRo,sG,NRo,jRo,DRo,Xb,hfe,GRo,ORo,lG,VRo,XRo,zRo,zb,pfe,QRo,WRo,iG,HRo,URo,JRo,Qb,ufe,YRo,KRo,dG,ZRo,eBo,oBo,Wb,_fe,rBo,tBo,cG,aBo,nBo,sBo,Hb,bfe,lBo,iBo,fG,dBo,cBo,fBo,Ub,vfe,mBo,gBo,mG,hBo,pBo,uBo,Jb,Ffe,_Bo,bBo,gG,vBo,FBo,TBo,Yb,Tfe,MBo,EBo,hG,CBo,wBo,ABo,Kb,Mfe,yBo,LBo,pG,xBo,$Bo,kBo,Zb,Efe,SBo,RBo,uG,BBo,PBo,IBo,e2,Cfe,qBo,NBo,_G,jBo,DBo,GBo,o2,wfe,OBo,VBo,bG,XBo,zBo,QBo,r2,Afe,WBo,HBo,vG,UBo,JBo,YBo,t2,yfe,KBo,ZBo,FG,ePo,oPo,rPo,a2,Lfe,tPo,aPo,TG,nPo,sPo,lPo,n2,xfe,iPo,dPo,MG,cPo,fPo,mPo,s2,$fe,gPo,hPo,EG,pPo,uPo,_Po,l2,kfe,bPo,vPo,CG,FPo,TPo,MPo,i2,Sfe,EPo,CPo,wG,wPo,APo,yPo,d2,Rfe,LPo,xPo,AG,$Po,kPo,SPo,c2,Bfe,RPo,BPo,yG,PPo,IPo,qPo,f2,Pfe,NPo,jPo,LG,DPo,GPo,OPo,m2,Ife,VPo,XPo,xG,zPo,QPo,WPo,g2,qfe,HPo,UPo,$G,JPo,YPo,KPo,h2,Nfe,ZPo,eIo,kG,oIo,rIo,tIo,p2,jfe,aIo,nIo,SG,sIo,lIo,iIo,u2,Dfe,dIo,cIo,RG,fIo,mIo,gIo,_2,Gfe,hIo,pIo,BG,uIo,_Io,bIo,b2,Ofe,vIo,FIo,PG,TIo,MIo,EIo,v2,CIo,Vfe,wIo,AIo,Xfe,yIo,LIo,F2,IBe,Oi,T2,zfe,N6,xIo,Qfe,$Io,qBe,qo,j6,kIo,Vi,SIo,IG,RIo,BIo,qG,PIo,IIo,qIo,D6,NIo,Wfe,jIo,DIo,GIo,it,G6,OIo,Hfe,VIo,XIo,Xi,zIo,Ufe,QIo,WIo,NG,HIo,UIo,JIo,M2,YIo,to,O6,KIo,Jfe,ZIo,eqo,Sa,oqo,Yfe,rqo,tqo,Kfe,aqo,nqo,Zfe,sqo,lqo,iqo,O,E2,eme,dqo,cqo,jG,fqo,mqo,gqo,C2,ome,hqo,pqo,DG,uqo,_qo,bqo,w2,rme,vqo,Fqo,GG,Tqo,Mqo,Eqo,A2,tme,Cqo,wqo,OG,Aqo,yqo,Lqo,y2,ame,xqo,$qo,VG,kqo,Sqo,Rqo,L2,nme,Bqo,Pqo,XG,Iqo,qqo,Nqo,x2,sme,jqo,Dqo,zG,Gqo,Oqo,Vqo,$2,lme,Xqo,zqo,QG,Qqo,Wqo,Hqo,k2,ime,Uqo,Jqo,WG,Yqo,Kqo,Zqo,S2,dme,eNo,oNo,HG,rNo,tNo,aNo,R2,cme,nNo,sNo,UG,lNo,iNo,dNo,B2,fme,cNo,fNo,JG,mNo,gNo,hNo,P2,mme,pNo,uNo,YG,_No,bNo,vNo,I2,gme,FNo,TNo,KG,MNo,ENo,CNo,q2,hme,wNo,ANo,ZG,yNo,LNo,xNo,N2,pme,$No,kNo,eO,SNo,RNo,BNo,j2,ume,PNo,INo,oO,qNo,NNo,jNo,D2,_me,DNo,GNo,rO,ONo,VNo,XNo,G2,bme,zNo,QNo,tO,WNo,HNo,UNo,O2,vme,JNo,YNo,aO,KNo,ZNo,ejo,V2,Fme,ojo,rjo,nO,tjo,ajo,njo,X2,Tme,sjo,ljo,sO,ijo,djo,cjo,z2,Mme,fjo,mjo,lO,gjo,hjo,pjo,Q2,Eme,ujo,_jo,iO,bjo,vjo,Fjo,W2,Cme,Tjo,Mjo,dO,Ejo,Cjo,wjo,H2,wme,Ajo,yjo,cO,Ljo,xjo,$jo,U2,Ame,kjo,Sjo,fO,Rjo,Bjo,Pjo,J2,yme,Ijo,qjo,mO,Njo,jjo,Djo,Y2,Lme,Gjo,Ojo,gO,Vjo,Xjo,zjo,K2,xme,Qjo,Wjo,hO,Hjo,Ujo,Jjo,Z2,$me,Yjo,Kjo,pO,Zjo,eDo,oDo,e3,kme,rDo,tDo,uO,aDo,nDo,sDo,o3,Sme,lDo,iDo,_O,dDo,cDo,fDo,r3,Rme,mDo,gDo,bO,hDo,pDo,uDo,t3,Bme,_Do,bDo,vO,vDo,FDo,TDo,a3,Pme,MDo,EDo,FO,CDo,wDo,ADo,n3,Ime,yDo,LDo,TO,xDo,$Do,kDo,s3,qme,SDo,RDo,MO,BDo,PDo,IDo,l3,Nme,qDo,NDo,EO,jDo,DDo,GDo,i3,ODo,jme,VDo,XDo,Dme,zDo,QDo,d3,NBe,zi,c3,Gme,V6,WDo,Ome,HDo,jBe,No,X6,UDo,Qi,JDo,CO,YDo,KDo,wO,ZDo,eGo,oGo,z6,rGo,Vme,tGo,aGo,nGo,dt,Q6,sGo,Xme,lGo,iGo,Wi,dGo,zme,cGo,fGo,AO,mGo,gGo,hGo,f3,pGo,ao,W6,uGo,Qme,_Go,bGo,Ra,vGo,Wme,FGo,TGo,Hme,MGo,EGo,Ume,CGo,wGo,AGo,Jme,m3,Yme,yGo,LGo,yO,xGo,$Go,kGo,g3,SGo,Kme,RGo,BGo,Zme,PGo,IGo,h3,DBe,Hi,p3,ege,H6,qGo,oge,NGo,GBe,jo,U6,jGo,Ui,DGo,LO,GGo,OGo,xO,VGo,XGo,zGo,J6,QGo,rge,WGo,HGo,UGo,ct,Y6,JGo,tge,YGo,KGo,Ji,ZGo,age,eOo,oOo,$O,rOo,tOo,aOo,u3,nOo,no,K6,sOo,nge,lOo,iOo,Ba,dOo,sge,cOo,fOo,lge,mOo,gOo,ige,hOo,pOo,uOo,ve,_3,dge,_Oo,bOo,kO,vOo,FOo,TOo,b3,cge,MOo,EOo,SO,COo,wOo,AOo,v3,fge,yOo,LOo,RO,xOo,$Oo,kOo,xs,mge,SOo,ROo,BO,BOo,POo,PO,IOo,qOo,NOo,F3,gge,jOo,DOo,IO,GOo,OOo,VOo,ft,hge,XOo,zOo,qO,QOo,WOo,NO,HOo,UOo,jO,JOo,YOo,KOo,T3,pge,ZOo,eVo,DO,oVo,rVo,tVo,M3,uge,aVo,nVo,GO,sVo,lVo,iVo,E3,_ge,dVo,cVo,OO,fVo,mVo,gVo,C3,bge,hVo,pVo,VO,uVo,_Vo,bVo,w3,vge,vVo,FVo,XO,TVo,MVo,EVo,A3,Fge,CVo,wVo,zO,AVo,yVo,LVo,y3,Tge,xVo,$Vo,QO,kVo,SVo,RVo,L3,BVo,Mge,PVo,IVo,Ege,qVo,NVo,x3,OBe,Yi,$3,Cge,Z6,jVo,wge,DVo,VBe,Do,ey,GVo,Ki,OVo,WO,VVo,XVo,HO,zVo,QVo,WVo,oy,HVo,Age,UVo,JVo,YVo,mt,ry,KVo,yge,ZVo,eXo,Zi,oXo,Lge,rXo,tXo,UO,aXo,nXo,sXo,k3,lXo,so,ty,iXo,xge,dXo,cXo,Pa,fXo,$ge,mXo,gXo,kge,hXo,pXo,Sge,uXo,_Xo,bXo,Rge,S3,Bge,vXo,FXo,JO,TXo,MXo,EXo,R3,CXo,Pge,wXo,AXo,Ige,yXo,LXo,B3,XBe,ed,P3,qge,ay,xXo,Nge,$Xo,zBe,Go,ny,kXo,od,SXo,YO,RXo,BXo,KO,PXo,IXo,qXo,sy,NXo,jge,jXo,DXo,GXo,gt,ly,OXo,Dge,VXo,XXo,rd,zXo,Gge,QXo,WXo,ZO,HXo,UXo,JXo,I3,YXo,lo,iy,KXo,Oge,ZXo,ezo,Ia,ozo,Vge,rzo,tzo,Xge,azo,nzo,zge,szo,lzo,izo,Ne,q3,Qge,dzo,czo,eV,fzo,mzo,gzo,N3,Wge,hzo,pzo,oV,uzo,_zo,bzo,j3,Hge,vzo,Fzo,rV,Tzo,Mzo,Ezo,D3,Uge,Czo,wzo,tV,Azo,yzo,Lzo,G3,Jge,xzo,$zo,aV,kzo,Szo,Rzo,O3,Yge,Bzo,Pzo,nV,Izo,qzo,Nzo,V3,Kge,jzo,Dzo,sV,Gzo,Ozo,Vzo,X3,Zge,Xzo,zzo,lV,Qzo,Wzo,Hzo,z3,Uzo,ehe,Jzo,Yzo,ohe,Kzo,Zzo,Q3,QBe,td,W3,rhe,dy,eQo,the,oQo,WBe,Oo,cy,rQo,ad,tQo,iV,aQo,nQo,dV,sQo,lQo,iQo,fy,dQo,ahe,cQo,fQo,mQo,ht,my,gQo,nhe,hQo,pQo,nd,uQo,she,_Qo,bQo,cV,vQo,FQo,TQo,H3,MQo,io,gy,EQo,lhe,CQo,wQo,qa,AQo,ihe,yQo,LQo,dhe,xQo,$Qo,che,kQo,SQo,RQo,Na,U3,fhe,BQo,PQo,fV,IQo,qQo,NQo,J3,mhe,jQo,DQo,mV,GQo,OQo,VQo,Y3,ghe,XQo,zQo,gV,QQo,WQo,HQo,K3,hhe,UQo,JQo,hV,YQo,KQo,ZQo,Z3,eWo,phe,oWo,rWo,uhe,tWo,aWo,ev,HBe,sd,ov,_he,hy,nWo,bhe,sWo,UBe,Vo,py,lWo,ld,iWo,pV,dWo,cWo,uV,fWo,mWo,gWo,uy,hWo,vhe,pWo,uWo,_Wo,pt,_y,bWo,Fhe,vWo,FWo,id,TWo,The,MWo,EWo,_V,CWo,wWo,AWo,rv,yWo,co,by,LWo,Mhe,xWo,$Wo,ja,kWo,Ehe,SWo,RWo,Che,BWo,PWo,whe,IWo,qWo,NWo,je,tv,Ahe,jWo,DWo,bV,GWo,OWo,VWo,av,yhe,XWo,zWo,vV,QWo,WWo,HWo,nv,Lhe,UWo,JWo,FV,YWo,KWo,ZWo,sv,xhe,eHo,oHo,TV,rHo,tHo,aHo,lv,$he,nHo,sHo,MV,lHo,iHo,dHo,iv,khe,cHo,fHo,EV,mHo,gHo,hHo,dv,She,pHo,uHo,CV,_Ho,bHo,vHo,cv,Rhe,FHo,THo,wV,MHo,EHo,CHo,fv,wHo,Bhe,AHo,yHo,Phe,LHo,xHo,mv,JBe,dd,gv,Ihe,vy,$Ho,qhe,kHo,YBe,Xo,Fy,SHo,cd,RHo,AV,BHo,PHo,yV,IHo,qHo,NHo,Ty,jHo,Nhe,DHo,GHo,OHo,ut,My,VHo,jhe,XHo,zHo,fd,QHo,Dhe,WHo,HHo,LV,UHo,JHo,YHo,hv,KHo,fo,Ey,ZHo,Ghe,eUo,oUo,Da,rUo,Ohe,tUo,aUo,Vhe,nUo,sUo,Xhe,lUo,iUo,dUo,Cy,pv,zhe,cUo,fUo,xV,mUo,gUo,hUo,uv,Qhe,pUo,uUo,$V,_Uo,bUo,vUo,_v,FUo,Whe,TUo,MUo,Hhe,EUo,CUo,bv,KBe,md,vv,Uhe,wy,wUo,Jhe,AUo,ZBe,zo,Ay,yUo,gd,LUo,kV,xUo,$Uo,SV,kUo,SUo,RUo,yy,BUo,Yhe,PUo,IUo,qUo,_t,Ly,NUo,Khe,jUo,DUo,hd,GUo,Zhe,OUo,VUo,RV,XUo,zUo,QUo,Fv,WUo,mo,xy,HUo,epe,UUo,JUo,Ga,YUo,ope,KUo,ZUo,rpe,eJo,oJo,tpe,rJo,tJo,aJo,Oa,Tv,ape,nJo,sJo,BV,lJo,iJo,dJo,Mv,npe,cJo,fJo,PV,mJo,gJo,hJo,Ev,spe,pJo,uJo,IV,_Jo,bJo,vJo,Cv,lpe,FJo,TJo,qV,MJo,EJo,CJo,wv,wJo,ipe,AJo,yJo,dpe,LJo,xJo,Av,ePe,pd,yv,cpe,$y,$Jo,fpe,kJo,oPe,Qo,ky,SJo,ud,RJo,NV,BJo,PJo,jV,IJo,qJo,NJo,Sy,jJo,mpe,DJo,GJo,OJo,bt,Ry,VJo,gpe,XJo,zJo,_d,QJo,hpe,WJo,HJo,DV,UJo,JJo,YJo,Lv,KJo,go,By,ZJo,ppe,eYo,oYo,Va,rYo,upe,tYo,aYo,_pe,nYo,sYo,bpe,lYo,iYo,dYo,bd,xv,vpe,cYo,fYo,GV,mYo,gYo,hYo,$v,Fpe,pYo,uYo,OV,_Yo,bYo,vYo,kv,Tpe,FYo,TYo,VV,MYo,EYo,CYo,Sv,wYo,Mpe,AYo,yYo,Epe,LYo,xYo,Rv,rPe,vd,Bv,Cpe,Py,$Yo,wpe,kYo,tPe,Wo,Iy,SYo,Fd,RYo,XV,BYo,PYo,zV,IYo,qYo,NYo,qy,jYo,Ape,DYo,GYo,OYo,vt,Ny,VYo,ype,XYo,zYo,Td,QYo,Lpe,WYo,HYo,QV,UYo,JYo,YYo,Pv,KYo,ho,jy,ZYo,xpe,eKo,oKo,Xa,rKo,$pe,tKo,aKo,kpe,nKo,sKo,Spe,lKo,iKo,dKo,Dy,Iv,Rpe,cKo,fKo,WV,mKo,gKo,hKo,qv,Bpe,pKo,uKo,HV,_Ko,bKo,vKo,Nv,FKo,Ppe,TKo,MKo,Ipe,EKo,CKo,jv,aPe,Md,Dv,qpe,Gy,wKo,Npe,AKo,nPe,Ho,Oy,yKo,Ed,LKo,UV,xKo,$Ko,JV,kKo,SKo,RKo,Vy,BKo,jpe,PKo,IKo,qKo,Ft,Xy,NKo,Dpe,jKo,DKo,Cd,GKo,Gpe,OKo,VKo,YV,XKo,zKo,QKo,Gv,WKo,po,zy,HKo,Ope,UKo,JKo,za,YKo,Vpe,KKo,ZKo,Xpe,eZo,oZo,zpe,rZo,tZo,aZo,Qpe,Ov,Wpe,nZo,sZo,KV,lZo,iZo,dZo,Vv,cZo,Hpe,fZo,mZo,Upe,gZo,hZo,Xv,sPe,wd,zv,Jpe,Qy,pZo,Ype,uZo,lPe,Uo,Wy,_Zo,Ad,bZo,ZV,vZo,FZo,eX,TZo,MZo,EZo,Hy,CZo,Kpe,wZo,AZo,yZo,Tt,Uy,LZo,Zpe,xZo,$Zo,yd,kZo,eue,SZo,RZo,oX,BZo,PZo,IZo,Qv,qZo,uo,Jy,NZo,oue,jZo,DZo,Qa,GZo,rue,OZo,VZo,tue,XZo,zZo,aue,QZo,WZo,HZo,Wa,Wv,nue,UZo,JZo,rX,YZo,KZo,ZZo,Hv,sue,eer,oer,tX,rer,ter,aer,Uv,lue,ner,ser,aX,ler,ier,der,Jv,iue,cer,fer,nX,mer,ger,her,Yv,per,due,uer,_er,cue,ber,ver,Kv,iPe,Ld,Zv,fue,Yy,Fer,mue,Ter,dPe,Jo,Ky,Mer,xd,Eer,sX,Cer,wer,lX,Aer,yer,Ler,Zy,xer,gue,$er,ker,Ser,Mt,eL,Rer,hue,Ber,Per,$d,Ier,pue,qer,Ner,iX,jer,Der,Ger,eF,Oer,_o,oL,Ver,uue,Xer,zer,Ha,Qer,_ue,Wer,Her,bue,Uer,Jer,vue,Yer,Ker,Zer,Fue,oF,Tue,eor,oor,dX,ror,tor,aor,rF,nor,Mue,sor,lor,Eue,ior,dor,tF,cPe,kd,aF,Cue,rL,cor,wue,mor,fPe,Yo,tL,gor,Sd,hor,cX,por,uor,fX,_or,bor,vor,aL,For,Aue,Tor,Mor,Eor,Et,nL,Cor,yue,wor,Aor,Rd,yor,Lue,Lor,xor,mX,$or,kor,Sor,nF,Ror,Cr,sL,Bor,xue,Por,Ior,Ua,qor,$ue,Nor,jor,kue,Dor,Gor,Sue,Oor,Vor,Xor,j,sF,Rue,zor,Qor,gX,Wor,Hor,Uor,lF,Bue,Jor,Yor,hX,Kor,Zor,err,iF,Pue,orr,rrr,pX,trr,arr,nrr,dF,Iue,srr,lrr,uX,irr,drr,crr,cF,que,frr,mrr,_X,grr,hrr,prr,fF,Nue,urr,_rr,bX,brr,vrr,Frr,mF,jue,Trr,Mrr,vX,Err,Crr,wrr,gF,Due,Arr,yrr,FX,Lrr,xrr,$rr,hF,Gue,krr,Srr,TX,Rrr,Brr,Prr,pF,Oue,Irr,qrr,MX,Nrr,jrr,Drr,uF,Vue,Grr,Orr,EX,Vrr,Xrr,zrr,_F,Xue,Qrr,Wrr,CX,Hrr,Urr,Jrr,bF,zue,Yrr,Krr,wX,Zrr,etr,otr,vF,Que,rtr,ttr,AX,atr,ntr,str,FF,Wue,ltr,itr,yX,dtr,ctr,ftr,TF,Hue,mtr,gtr,LX,htr,ptr,utr,$s,Uue,_tr,btr,xX,vtr,Ftr,$X,Ttr,Mtr,Etr,MF,Jue,Ctr,wtr,kX,Atr,ytr,Ltr,EF,Yue,xtr,$tr,SX,ktr,Str,Rtr,CF,Kue,Btr,Ptr,RX,Itr,qtr,Ntr,wF,Zue,jtr,Dtr,BX,Gtr,Otr,Vtr,AF,e_e,Xtr,ztr,PX,Qtr,Wtr,Htr,yF,o_e,Utr,Jtr,IX,Ytr,Ktr,Ztr,LF,r_e,ear,oar,qX,rar,tar,aar,xF,t_e,nar,sar,NX,lar,iar,dar,$F,a_e,car,far,jX,mar,gar,har,kF,n_e,par,uar,DX,_ar,bar,Far,SF,s_e,Tar,Mar,GX,Ear,Car,war,RF,l_e,Aar,yar,OX,Lar,xar,$ar,BF,i_e,kar,Sar,VX,Rar,Bar,Par,PF,d_e,Iar,qar,XX,Nar,jar,Dar,IF,c_e,Gar,Oar,zX,Var,Xar,zar,qF,f_e,Qar,War,QX,Har,Uar,Jar,NF,m_e,Yar,Kar,WX,Zar,enr,onr,jF,g_e,rnr,tnr,HX,anr,nnr,snr,DF,h_e,lnr,inr,UX,dnr,cnr,fnr,GF,p_e,mnr,gnr,JX,hnr,pnr,unr,OF,u_e,_nr,bnr,YX,vnr,Fnr,Tnr,VF,__e,Mnr,Enr,KX,Cnr,wnr,Anr,XF,b_e,ynr,Lnr,ZX,xnr,$nr,knr,zF,v_e,Snr,Rnr,ez,Bnr,Pnr,Inr,QF,F_e,qnr,Nnr,oz,jnr,Dnr,Gnr,WF,T_e,Onr,Vnr,rz,Xnr,znr,Qnr,HF,M_e,Wnr,Hnr,tz,Unr,Jnr,Ynr,UF,mPe,Bd,JF,E_e,lL,Knr,C_e,Znr,gPe,Ko,iL,esr,Pd,osr,az,rsr,tsr,nz,asr,nsr,ssr,dL,lsr,w_e,isr,dsr,csr,Ct,cL,fsr,A_e,msr,gsr,Id,hsr,y_e,psr,usr,sz,_sr,bsr,vsr,YF,Fsr,wr,fL,Tsr,L_e,Msr,Esr,Ja,Csr,x_e,wsr,Asr,$_e,ysr,Lsr,k_e,xsr,$sr,ksr,ne,KF,S_e,Ssr,Rsr,lz,Bsr,Psr,Isr,ZF,R_e,qsr,Nsr,iz,jsr,Dsr,Gsr,e0,B_e,Osr,Vsr,dz,Xsr,zsr,Qsr,o0,P_e,Wsr,Hsr,cz,Usr,Jsr,Ysr,r0,I_e,Ksr,Zsr,fz,elr,olr,rlr,t0,q_e,tlr,alr,mz,nlr,slr,llr,a0,N_e,ilr,dlr,gz,clr,flr,mlr,n0,j_e,glr,hlr,hz,plr,ulr,_lr,s0,D_e,blr,vlr,pz,Flr,Tlr,Mlr,l0,G_e,Elr,Clr,uz,wlr,Alr,ylr,i0,O_e,Llr,xlr,_z,$lr,klr,Slr,d0,V_e,Rlr,Blr,bz,Plr,Ilr,qlr,c0,X_e,Nlr,jlr,vz,Dlr,Glr,Olr,f0,z_e,Vlr,Xlr,Fz,zlr,Qlr,Wlr,m0,Q_e,Hlr,Ulr,Tz,Jlr,Ylr,Klr,g0,W_e,Zlr,eir,Mz,oir,rir,tir,h0,H_e,air,nir,Ez,sir,lir,iir,p0,U_e,dir,cir,Cz,fir,mir,gir,u0,J_e,hir,pir,wz,uir,_ir,bir,_0,Y_e,vir,Fir,Az,Tir,Mir,Eir,b0,K_e,Cir,wir,yz,Air,yir,Lir,v0,Z_e,xir,$ir,Lz,kir,Sir,Rir,F0,e1e,Bir,Pir,xz,Iir,qir,Nir,T0,hPe,qd,M0,o1e,mL,jir,r1e,Dir,pPe,Zo,gL,Gir,Nd,Oir,$z,Vir,Xir,kz,zir,Qir,Wir,hL,Hir,t1e,Uir,Jir,Yir,wt,pL,Kir,a1e,Zir,edr,jd,odr,n1e,rdr,tdr,Sz,adr,ndr,sdr,E0,ldr,Ar,uL,idr,s1e,ddr,cdr,Ya,fdr,l1e,mdr,gdr,i1e,hdr,pdr,d1e,udr,_dr,bdr,Te,C0,c1e,vdr,Fdr,Rz,Tdr,Mdr,Edr,w0,f1e,Cdr,wdr,Bz,Adr,ydr,Ldr,A0,m1e,xdr,$dr,Pz,kdr,Sdr,Rdr,y0,g1e,Bdr,Pdr,Iz,Idr,qdr,Ndr,L0,h1e,jdr,Ddr,qz,Gdr,Odr,Vdr,x0,p1e,Xdr,zdr,Nz,Qdr,Wdr,Hdr,$0,u1e,Udr,Jdr,jz,Ydr,Kdr,Zdr,k0,_1e,ecr,ocr,Dz,rcr,tcr,acr,S0,b1e,ncr,scr,Gz,lcr,icr,dcr,R0,v1e,ccr,fcr,Oz,mcr,gcr,hcr,B0,F1e,pcr,ucr,Vz,_cr,bcr,vcr,P0,T1e,Fcr,Tcr,Xz,Mcr,Ecr,Ccr,I0,uPe,Dd,q0,M1e,_L,wcr,E1e,Acr,_Pe,er,bL,ycr,Gd,Lcr,zz,xcr,$cr,Qz,kcr,Scr,Rcr,vL,Bcr,C1e,Pcr,Icr,qcr,At,FL,Ncr,w1e,jcr,Dcr,Od,Gcr,A1e,Ocr,Vcr,Wz,Xcr,zcr,Qcr,N0,Wcr,yr,TL,Hcr,y1e,Ucr,Jcr,Ka,Ycr,L1e,Kcr,Zcr,x1e,efr,ofr,$1e,rfr,tfr,afr,ML,j0,k1e,nfr,sfr,Hz,lfr,ifr,dfr,D0,S1e,cfr,ffr,Uz,mfr,gfr,hfr,G0,bPe,Vd,O0,R1e,EL,pfr,B1e,ufr,vPe,or,CL,_fr,Xd,bfr,Jz,vfr,Ffr,Yz,Tfr,Mfr,Efr,wL,Cfr,P1e,wfr,Afr,yfr,yt,AL,Lfr,I1e,xfr,$fr,zd,kfr,q1e,Sfr,Rfr,Kz,Bfr,Pfr,Ifr,V0,qfr,Lr,yL,Nfr,N1e,jfr,Dfr,Za,Gfr,j1e,Ofr,Vfr,D1e,Xfr,zfr,G1e,Qfr,Wfr,Hfr,ie,X0,O1e,Ufr,Jfr,Zz,Yfr,Kfr,Zfr,z0,V1e,emr,omr,eQ,rmr,tmr,amr,Q0,X1e,nmr,smr,oQ,lmr,imr,dmr,W0,z1e,cmr,fmr,rQ,mmr,gmr,hmr,H0,Q1e,pmr,umr,tQ,_mr,bmr,vmr,U0,W1e,Fmr,Tmr,aQ,Mmr,Emr,Cmr,J0,H1e,wmr,Amr,nQ,ymr,Lmr,xmr,Y0,U1e,$mr,kmr,sQ,Smr,Rmr,Bmr,K0,J1e,Pmr,Imr,lQ,qmr,Nmr,jmr,Z0,Y1e,Dmr,Gmr,iQ,Omr,Vmr,Xmr,eT,K1e,zmr,Qmr,dQ,Wmr,Hmr,Umr,oT,Z1e,Jmr,Ymr,cQ,Kmr,Zmr,egr,rT,e7e,ogr,rgr,fQ,tgr,agr,ngr,tT,o7e,sgr,lgr,mQ,igr,dgr,cgr,aT,r7e,fgr,mgr,gQ,ggr,hgr,pgr,nT,t7e,ugr,_gr,hQ,bgr,vgr,Fgr,sT,a7e,Tgr,Mgr,pQ,Egr,Cgr,wgr,lT,n7e,Agr,ygr,uQ,Lgr,xgr,$gr,iT,s7e,kgr,Sgr,_Q,Rgr,Bgr,Pgr,dT,l7e,Igr,qgr,bQ,Ngr,jgr,Dgr,cT,FPe,Qd,fT,i7e,LL,Ggr,d7e,Ogr,TPe,rr,xL,Vgr,Wd,Xgr,vQ,zgr,Qgr,FQ,Wgr,Hgr,Ugr,$L,Jgr,c7e,Ygr,Kgr,Zgr,Lt,kL,ehr,f7e,ohr,rhr,Hd,thr,m7e,ahr,nhr,TQ,shr,lhr,ihr,mT,dhr,xr,SL,chr,g7e,fhr,mhr,en,ghr,h7e,hhr,phr,p7e,uhr,_hr,u7e,bhr,vhr,Fhr,ye,gT,_7e,Thr,Mhr,MQ,Ehr,Chr,whr,hT,b7e,Ahr,yhr,EQ,Lhr,xhr,$hr,pT,v7e,khr,Shr,CQ,Rhr,Bhr,Phr,uT,F7e,Ihr,qhr,wQ,Nhr,jhr,Dhr,_T,T7e,Ghr,Ohr,AQ,Vhr,Xhr,zhr,bT,M7e,Qhr,Whr,yQ,Hhr,Uhr,Jhr,vT,E7e,Yhr,Khr,LQ,Zhr,epr,opr,FT,C7e,rpr,tpr,xQ,apr,npr,spr,TT,w7e,lpr,ipr,$Q,dpr,cpr,fpr,MT,A7e,mpr,gpr,kQ,hpr,ppr,upr,ET,MPe,Ud,CT,y7e,RL,_pr,L7e,bpr,EPe,tr,BL,vpr,Jd,Fpr,SQ,Tpr,Mpr,RQ,Epr,Cpr,wpr,PL,Apr,x7e,ypr,Lpr,xpr,xt,IL,$pr,$7e,kpr,Spr,Yd,Rpr,k7e,Bpr,Ppr,BQ,Ipr,qpr,Npr,wT,jpr,$r,qL,Dpr,S7e,Gpr,Opr,on,Vpr,R7e,Xpr,zpr,B7e,Qpr,Wpr,P7e,Hpr,Upr,Jpr,Z,AT,I7e,Ypr,Kpr,PQ,Zpr,eur,our,yT,q7e,rur,tur,IQ,aur,nur,sur,LT,N7e,lur,iur,qQ,dur,cur,fur,xT,j7e,mur,gur,NQ,hur,pur,uur,$T,D7e,_ur,bur,jQ,vur,Fur,Tur,kT,G7e,Mur,Eur,DQ,Cur,wur,Aur,ST,O7e,yur,Lur,GQ,xur,$ur,kur,RT,V7e,Sur,Rur,OQ,Bur,Pur,Iur,BT,X7e,qur,Nur,VQ,jur,Dur,Gur,PT,z7e,Our,Vur,XQ,Xur,zur,Qur,IT,Q7e,Wur,Hur,zQ,Uur,Jur,Yur,qT,W7e,Kur,Zur,QQ,e_r,o_r,r_r,NT,H7e,t_r,a_r,WQ,n_r,s_r,l_r,jT,U7e,i_r,d_r,HQ,c_r,f_r,m_r,DT,J7e,g_r,h_r,UQ,p_r,u_r,__r,GT,Y7e,b_r,v_r,JQ,F_r,T_r,M_r,OT,K7e,E_r,C_r,YQ,w_r,A_r,y_r,VT,Z7e,L_r,x_r,KQ,$_r,k_r,S_r,XT,ebe,R_r,B_r,ZQ,P_r,I_r,q_r,zT,obe,N_r,j_r,eW,D_r,G_r,O_r,QT,rbe,V_r,X_r,oW,z_r,Q_r,W_r,WT,tbe,H_r,U_r,rW,J_r,Y_r,K_r,HT,abe,Z_r,e1r,tW,o1r,r1r,t1r,UT,nbe,a1r,n1r,aW,s1r,l1r,i1r,JT,sbe,d1r,c1r,nW,f1r,m1r,g1r,YT,lbe,h1r,p1r,sW,u1r,_1r,b1r,KT,CPe,Kd,ZT,ibe,NL,v1r,dbe,F1r,wPe,ar,jL,T1r,Zd,M1r,lW,E1r,C1r,iW,w1r,A1r,y1r,DL,L1r,cbe,x1r,$1r,k1r,$t,GL,S1r,fbe,R1r,B1r,ec,P1r,mbe,I1r,q1r,dW,N1r,j1r,D1r,eM,G1r,kr,OL,O1r,gbe,V1r,X1r,rn,z1r,hbe,Q1r,W1r,pbe,H1r,U1r,ube,J1r,Y1r,K1r,pe,oM,_be,Z1r,e7r,cW,o7r,r7r,t7r,rM,bbe,a7r,n7r,fW,s7r,l7r,i7r,tM,vbe,d7r,c7r,mW,f7r,m7r,g7r,aM,Fbe,h7r,p7r,gW,u7r,_7r,b7r,nM,Tbe,v7r,F7r,hW,T7r,M7r,E7r,sM,Mbe,C7r,w7r,pW,A7r,y7r,L7r,lM,Ebe,x7r,$7r,uW,k7r,S7r,R7r,iM,Cbe,B7r,P7r,_W,I7r,q7r,N7r,dM,wbe,j7r,D7r,bW,G7r,O7r,V7r,cM,Abe,X7r,z7r,vW,Q7r,W7r,H7r,fM,ybe,U7r,J7r,FW,Y7r,K7r,Z7r,mM,Lbe,ebr,obr,TW,rbr,tbr,abr,gM,xbe,nbr,sbr,MW,lbr,ibr,dbr,hM,$be,cbr,fbr,EW,mbr,gbr,hbr,pM,kbe,pbr,ubr,CW,_br,bbr,vbr,uM,Sbe,Fbr,Tbr,wW,Mbr,Ebr,Cbr,_M,Rbe,wbr,Abr,AW,ybr,Lbr,xbr,bM,APe,oc,vM,Bbe,VL,$br,Pbe,kbr,yPe,nr,XL,Sbr,rc,Rbr,yW,Bbr,Pbr,LW,Ibr,qbr,Nbr,zL,jbr,Ibe,Dbr,Gbr,Obr,kt,QL,Vbr,qbe,Xbr,zbr,tc,Qbr,Nbe,Wbr,Hbr,xW,Ubr,Jbr,Ybr,FM,Kbr,Sr,WL,Zbr,jbe,e2r,o2r,tn,r2r,Dbe,t2r,a2r,Gbe,n2r,s2r,Obe,l2r,i2r,d2r,Vbe,TM,Xbe,c2r,f2r,$W,m2r,g2r,h2r,MM,LPe,ac,EM,zbe,HL,p2r,Qbe,u2r,xPe,sr,UL,_2r,nc,b2r,kW,v2r,F2r,SW,T2r,M2r,E2r,JL,C2r,Wbe,w2r,A2r,y2r,St,YL,L2r,Hbe,x2r,$2r,sc,k2r,Ube,S2r,R2r,RW,B2r,P2r,I2r,CM,q2r,Rr,KL,N2r,Jbe,j2r,D2r,an,G2r,Ybe,O2r,V2r,Kbe,X2r,z2r,Zbe,Q2r,W2r,H2r,de,wM,e2e,U2r,J2r,BW,Y2r,K2r,Z2r,AM,o2e,e3r,o3r,PW,r3r,t3r,a3r,yM,r2e,n3r,s3r,IW,l3r,i3r,d3r,LM,t2e,c3r,f3r,qW,m3r,g3r,h3r,xM,a2e,p3r,u3r,NW,_3r,b3r,v3r,$M,n2e,F3r,T3r,jW,M3r,E3r,C3r,kM,s2e,w3r,A3r,DW,y3r,L3r,x3r,SM,l2e,$3r,k3r,GW,S3r,R3r,B3r,RM,i2e,P3r,I3r,OW,q3r,N3r,j3r,BM,d2e,D3r,G3r,VW,O3r,V3r,X3r,PM,c2e,z3r,Q3r,XW,W3r,H3r,U3r,IM,f2e,J3r,Y3r,zW,K3r,Z3r,evr,qM,m2e,ovr,rvr,QW,tvr,avr,nvr,NM,g2e,svr,lvr,WW,ivr,dvr,cvr,jM,h2e,fvr,mvr,HW,gvr,hvr,pvr,DM,p2e,uvr,_vr,UW,bvr,vvr,Fvr,GM,u2e,Tvr,Mvr,JW,Evr,Cvr,wvr,OM,_2e,Avr,yvr,YW,Lvr,xvr,$vr,VM,b2e,kvr,Svr,KW,Rvr,Bvr,Pvr,XM,v2e,Ivr,qvr,ZW,Nvr,jvr,Dvr,zM,$Pe,lc,QM,F2e,ZL,Gvr,T2e,Ovr,kPe,lr,e8,Vvr,ic,Xvr,eH,zvr,Qvr,oH,Wvr,Hvr,Uvr,o8,Jvr,M2e,Yvr,Kvr,Zvr,Rt,r8,eFr,E2e,oFr,rFr,dc,tFr,C2e,aFr,nFr,rH,sFr,lFr,iFr,WM,dFr,Br,t8,cFr,w2e,fFr,mFr,nn,gFr,A2e,hFr,pFr,y2e,uFr,_Fr,L2e,bFr,vFr,FFr,ce,HM,x2e,TFr,MFr,tH,EFr,CFr,wFr,UM,$2e,AFr,yFr,aH,LFr,xFr,$Fr,JM,k2e,kFr,SFr,nH,RFr,BFr,PFr,YM,S2e,IFr,qFr,sH,NFr,jFr,DFr,KM,R2e,GFr,OFr,lH,VFr,XFr,zFr,ZM,B2e,QFr,WFr,iH,HFr,UFr,JFr,e4,P2e,YFr,KFr,dH,ZFr,e0r,o0r,o4,I2e,r0r,t0r,cH,a0r,n0r,s0r,r4,q2e,l0r,i0r,fH,d0r,c0r,f0r,t4,N2e,m0r,g0r,mH,h0r,p0r,u0r,a4,j2e,_0r,b0r,gH,v0r,F0r,T0r,n4,D2e,M0r,E0r,hH,C0r,w0r,A0r,s4,G2e,y0r,L0r,pH,x0r,$0r,k0r,l4,O2e,S0r,R0r,uH,B0r,P0r,I0r,i4,V2e,q0r,N0r,_H,j0r,D0r,G0r,d4,X2e,O0r,V0r,bH,X0r,z0r,Q0r,c4,z2e,W0r,H0r,vH,U0r,J0r,Y0r,f4,Q2e,K0r,Z0r,FH,eTr,oTr,rTr,m4,W2e,tTr,aTr,TH,nTr,sTr,lTr,g4,H2e,iTr,dTr,MH,cTr,fTr,mTr,h4,SPe,cc,p4,U2e,a8,gTr,J2e,hTr,RPe,ir,n8,pTr,fc,uTr,EH,_Tr,bTr,CH,vTr,FTr,TTr,s8,MTr,Y2e,ETr,CTr,wTr,Bt,l8,ATr,K2e,yTr,LTr,mc,xTr,Z2e,$Tr,kTr,wH,STr,RTr,BTr,u4,PTr,Pr,i8,ITr,e3e,qTr,NTr,sn,jTr,o3e,DTr,GTr,r3e,OTr,VTr,t3e,XTr,zTr,QTr,a3e,_4,n3e,WTr,HTr,AH,UTr,JTr,YTr,b4,BPe,gc,v4,s3e,d8,KTr,l3e,ZTr,PPe,dr,c8,eMr,hc,oMr,yH,rMr,tMr,LH,aMr,nMr,sMr,f8,lMr,i3e,iMr,dMr,cMr,Pt,m8,fMr,d3e,mMr,gMr,pc,hMr,c3e,pMr,uMr,xH,_Mr,bMr,vMr,F4,FMr,Ir,g8,TMr,f3e,MMr,EMr,ln,CMr,m3e,wMr,AMr,g3e,yMr,LMr,h3e,xMr,$Mr,kMr,p3e,T4,u3e,SMr,RMr,$H,BMr,PMr,IMr,M4,IPe,uc,E4,_3e,h8,qMr,b3e,NMr,qPe,cr,p8,jMr,_c,DMr,kH,GMr,OMr,SH,VMr,XMr,zMr,u8,QMr,v3e,WMr,HMr,UMr,It,_8,JMr,F3e,YMr,KMr,bc,ZMr,T3e,e4r,o4r,RH,r4r,t4r,a4r,C4,n4r,qr,b8,s4r,M3e,l4r,i4r,dn,d4r,E3e,c4r,f4r,C3e,m4r,g4r,w3e,h4r,p4r,u4r,oe,w4,A3e,_4r,b4r,BH,v4r,F4r,T4r,A4,y3e,M4r,E4r,PH,C4r,w4r,A4r,y4,L3e,y4r,L4r,IH,x4r,$4r,k4r,L4,x3e,S4r,R4r,qH,B4r,P4r,I4r,x4,$3e,q4r,N4r,NH,j4r,D4r,G4r,$4,k3e,O4r,V4r,jH,X4r,z4r,Q4r,k4,S3e,W4r,H4r,DH,U4r,J4r,Y4r,S4,R3e,K4r,Z4r,GH,eEr,oEr,rEr,R4,B3e,tEr,aEr,OH,nEr,sEr,lEr,B4,P3e,iEr,dEr,VH,cEr,fEr,mEr,P4,I3e,gEr,hEr,XH,pEr,uEr,_Er,I4,q3e,bEr,vEr,zH,FEr,TEr,MEr,q4,N3e,EEr,CEr,QH,wEr,AEr,yEr,N4,j3e,LEr,xEr,WH,$Er,kEr,SEr,j4,D3e,REr,BEr,HH,PEr,IEr,qEr,D4,G3e,NEr,jEr,UH,DEr,GEr,OEr,G4,O3e,VEr,XEr,JH,zEr,QEr,WEr,O4,V3e,HEr,UEr,YH,JEr,YEr,KEr,V4,X3e,ZEr,e5r,KH,o5r,r5r,t5r,X4,z3e,a5r,n5r,ZH,s5r,l5r,i5r,z4,Q3e,d5r,c5r,eU,f5r,m5r,g5r,Q4,W3e,h5r,p5r,oU,u5r,_5r,b5r,W4,H3e,v5r,F5r,rU,T5r,M5r,E5r,H4,U3e,C5r,w5r,tU,A5r,y5r,L5r,U4,J3e,x5r,$5r,aU,k5r,S5r,R5r,J4,NPe,vc,Y4,Y3e,v8,B5r,K3e,P5r,jPe,fr,F8,I5r,Fc,q5r,nU,N5r,j5r,sU,D5r,G5r,O5r,T8,V5r,Z3e,X5r,z5r,Q5r,qt,M8,W5r,eve,H5r,U5r,Tc,J5r,ove,Y5r,K5r,lU,Z5r,eCr,oCr,K4,rCr,Nr,E8,tCr,rve,aCr,nCr,cn,sCr,tve,lCr,iCr,ave,dCr,cCr,nve,fCr,mCr,gCr,ke,Z4,sve,hCr,pCr,iU,uCr,_Cr,bCr,eE,lve,vCr,FCr,dU,TCr,MCr,ECr,oE,ive,CCr,wCr,cU,ACr,yCr,LCr,rE,dve,xCr,$Cr,fU,kCr,SCr,RCr,tE,cve,BCr,PCr,mU,ICr,qCr,NCr,aE,fve,jCr,DCr,gU,GCr,OCr,VCr,nE,mve,XCr,zCr,hU,QCr,WCr,HCr,sE,gve,UCr,JCr,pU,YCr,KCr,ZCr,lE,hve,ewr,owr,uU,rwr,twr,awr,iE,DPe,Mc,dE,pve,C8,nwr,uve,swr,GPe,mr,w8,lwr,Ec,iwr,_U,dwr,cwr,bU,fwr,mwr,gwr,A8,hwr,_ve,pwr,uwr,_wr,Nt,y8,bwr,bve,vwr,Fwr,Cc,Twr,vve,Mwr,Ewr,vU,Cwr,wwr,Awr,cE,ywr,jr,L8,Lwr,Fve,xwr,$wr,fn,kwr,Tve,Swr,Rwr,Mve,Bwr,Pwr,Eve,Iwr,qwr,Nwr,Me,fE,Cve,jwr,Dwr,FU,Gwr,Owr,Vwr,mE,wve,Xwr,zwr,TU,Qwr,Wwr,Hwr,gE,Ave,Uwr,Jwr,MU,Ywr,Kwr,Zwr,hE,yve,eAr,oAr,EU,rAr,tAr,aAr,pE,Lve,nAr,sAr,CU,lAr,iAr,dAr,uE,xve,cAr,fAr,wU,mAr,gAr,hAr,_E,$ve,pAr,uAr,AU,_Ar,bAr,vAr,bE,kve,FAr,TAr,yU,MAr,EAr,CAr,vE,Sve,wAr,AAr,LU,yAr,LAr,xAr,FE,Rve,$Ar,kAr,xU,SAr,RAr,BAr,TE,Bve,PAr,IAr,$U,qAr,NAr,jAr,ME,Pve,DAr,GAr,kU,OAr,VAr,XAr,EE,OPe,wc,CE,Ive,x8,zAr,qve,QAr,VPe,gr,$8,WAr,Ac,HAr,SU,UAr,JAr,RU,YAr,KAr,ZAr,k8,e6r,Nve,o6r,r6r,t6r,jt,S8,a6r,jve,n6r,s6r,yc,l6r,Dve,i6r,d6r,BU,c6r,f6r,m6r,wE,g6r,Dr,R8,h6r,Gve,p6r,u6r,mn,_6r,Ove,b6r,v6r,Vve,F6r,T6r,Xve,M6r,E6r,C6r,Le,AE,zve,w6r,A6r,PU,y6r,L6r,x6r,yE,Qve,$6r,k6r,IU,S6r,R6r,B6r,LE,Wve,P6r,I6r,qU,q6r,N6r,j6r,xE,Hve,D6r,G6r,NU,O6r,V6r,X6r,$E,Uve,z6r,Q6r,jU,W6r,H6r,U6r,kE,Jve,J6r,Y6r,DU,K6r,Z6r,eyr,SE,Yve,oyr,ryr,GU,tyr,ayr,nyr,RE,Kve,syr,lyr,OU,iyr,dyr,cyr,BE,Zve,fyr,myr,VU,gyr,hyr,pyr,PE,eFe,uyr,_yr,XU,byr,vyr,Fyr,IE,XPe,Lc,qE,oFe,B8,Tyr,rFe,Myr,zPe,hr,P8,Eyr,xc,Cyr,zU,wyr,Ayr,QU,yyr,Lyr,xyr,I8,$yr,tFe,kyr,Syr,Ryr,Dt,q8,Byr,aFe,Pyr,Iyr,$c,qyr,nFe,Nyr,jyr,WU,Dyr,Gyr,Oyr,NE,Vyr,Gr,N8,Xyr,sFe,zyr,Qyr,gn,Wyr,lFe,Hyr,Uyr,iFe,Jyr,Yyr,dFe,Kyr,Zyr,eLr,Se,jE,cFe,oLr,rLr,HU,tLr,aLr,nLr,DE,fFe,sLr,lLr,UU,iLr,dLr,cLr,GE,mFe,fLr,mLr,JU,gLr,hLr,pLr,OE,gFe,uLr,_Lr,YU,bLr,vLr,FLr,VE,hFe,TLr,MLr,KU,ELr,CLr,wLr,XE,pFe,ALr,yLr,ZU,LLr,xLr,$Lr,zE,uFe,kLr,SLr,eJ,RLr,BLr,PLr,QE,_Fe,ILr,qLr,oJ,NLr,jLr,DLr,WE,bFe,GLr,OLr,rJ,VLr,XLr,zLr,HE,QPe,kc,UE,vFe,j8,QLr,FFe,WLr,WPe,pr,D8,HLr,Sc,ULr,tJ,JLr,YLr,aJ,KLr,ZLr,e8r,G8,o8r,TFe,r8r,t8r,a8r,Gt,O8,n8r,MFe,s8r,l8r,Rc,i8r,EFe,d8r,c8r,nJ,f8r,m8r,g8r,JE,h8r,Or,V8,p8r,CFe,u8r,_8r,hn,b8r,wFe,v8r,F8r,AFe,T8r,M8r,yFe,E8r,C8r,w8r,xe,YE,LFe,A8r,y8r,sJ,L8r,x8r,$8r,KE,xFe,k8r,S8r,lJ,R8r,B8r,P8r,ZE,$Fe,I8r,q8r,iJ,N8r,j8r,D8r,e5,kFe,G8r,O8r,dJ,V8r,X8r,z8r,o5,SFe,Q8r,W8r,cJ,H8r,U8r,J8r,r5,RFe,Y8r,K8r,fJ,Z8r,exr,oxr,t5,BFe,rxr,txr,mJ,axr,nxr,sxr,a5,PFe,lxr,ixr,gJ,dxr,cxr,fxr,n5,IFe,mxr,gxr,hJ,hxr,pxr,uxr,s5,qFe,_xr,bxr,pJ,vxr,Fxr,Txr,l5,HPe,Bc,i5,NFe,X8,Mxr,jFe,Exr,UPe,ur,z8,Cxr,Pc,wxr,uJ,Axr,yxr,_J,Lxr,xxr,$xr,Q8,kxr,DFe,Sxr,Rxr,Bxr,Ot,W8,Pxr,GFe,Ixr,qxr,Ic,Nxr,OFe,jxr,Dxr,bJ,Gxr,Oxr,Vxr,d5,Xxr,Vr,H8,zxr,VFe,Qxr,Wxr,pn,Hxr,XFe,Uxr,Jxr,zFe,Yxr,Kxr,QFe,Zxr,e9r,o9r,$e,c5,WFe,r9r,t9r,vJ,a9r,n9r,s9r,f5,HFe,l9r,i9r,FJ,d9r,c9r,f9r,m5,UFe,m9r,g9r,TJ,h9r,p9r,u9r,g5,JFe,_9r,b9r,MJ,v9r,F9r,T9r,h5,YFe,M9r,E9r,EJ,C9r,w9r,A9r,p5,KFe,y9r,L9r,CJ,x9r,$9r,k9r,u5,ZFe,S9r,R9r,wJ,B9r,P9r,I9r,_5,e0e,q9r,N9r,AJ,j9r,D9r,G9r,b5,o0e,O9r,V9r,yJ,X9r,z9r,Q9r,v5,r0e,W9r,H9r,LJ,U9r,J9r,Y9r,F5,JPe,qc,T5,t0e,U8,K9r,a0e,Z9r,YPe,_r,J8,e$r,Nc,o$r,xJ,r$r,t$r,$J,a$r,n$r,s$r,Y8,l$r,n0e,i$r,d$r,c$r,Vt,K8,f$r,s0e,m$r,g$r,jc,h$r,l0e,p$r,u$r,kJ,_$r,b$r,v$r,M5,F$r,Xr,Z8,T$r,i0e,M$r,E$r,un,C$r,d0e,w$r,A$r,c0e,y$r,L$r,f0e,x$r,$$r,k$r,De,E5,m0e,S$r,R$r,SJ,B$r,P$r,I$r,C5,g0e,q$r,N$r,RJ,j$r,D$r,G$r,w5,h0e,O$r,V$r,BJ,X$r,z$r,Q$r,A5,p0e,W$r,H$r,PJ,U$r,J$r,Y$r,y5,u0e,K$r,Z$r,IJ,ekr,okr,rkr,L5,_0e,tkr,akr,qJ,nkr,skr,lkr,x5,b0e,ikr,dkr,NJ,ckr,fkr,mkr,$5,v0e,gkr,hkr,jJ,pkr,ukr,_kr,k5,KPe,Dc,S5,F0e,ex,bkr,T0e,vkr,ZPe,br,ox,Fkr,Gc,Tkr,DJ,Mkr,Ekr,GJ,Ckr,wkr,Akr,rx,ykr,M0e,Lkr,xkr,$kr,Xt,tx,kkr,E0e,Skr,Rkr,Oc,Bkr,C0e,Pkr,Ikr,OJ,qkr,Nkr,jkr,R5,Dkr,zr,ax,Gkr,w0e,Okr,Vkr,_n,Xkr,A0e,zkr,Qkr,y0e,Wkr,Hkr,L0e,Ukr,Jkr,Ykr,Ge,B5,x0e,Kkr,Zkr,VJ,eSr,oSr,rSr,P5,$0e,tSr,aSr,XJ,nSr,sSr,lSr,I5,k0e,iSr,dSr,zJ,cSr,fSr,mSr,q5,S0e,gSr,hSr,QJ,pSr,uSr,_Sr,N5,R0e,bSr,vSr,WJ,FSr,TSr,MSr,j5,B0e,ESr,CSr,HJ,wSr,ASr,ySr,D5,P0e,LSr,xSr,UJ,$Sr,kSr,SSr,G5,I0e,RSr,BSr,JJ,PSr,ISr,qSr,O5,eIe,Vc,V5,q0e,nx,NSr,N0e,jSr,oIe,vr,sx,DSr,Xc,GSr,YJ,OSr,VSr,KJ,XSr,zSr,QSr,lx,WSr,j0e,HSr,USr,JSr,zt,ix,YSr,D0e,KSr,ZSr,zc,eRr,G0e,oRr,rRr,ZJ,tRr,aRr,nRr,X5,sRr,Qr,dx,lRr,O0e,iRr,dRr,bn,cRr,V0e,fRr,mRr,X0e,gRr,hRr,z0e,pRr,uRr,_Rr,Q0e,z5,W0e,bRr,vRr,eY,FRr,TRr,MRr,Q5,rIe,Qc,W5,H0e,cx,ERr,U0e,CRr,tIe,Fr,fx,wRr,Wc,ARr,oY,yRr,LRr,rY,xRr,$Rr,kRr,mx,SRr,J0e,RRr,BRr,PRr,Qt,gx,IRr,Y0e,qRr,NRr,Hc,jRr,K0e,DRr,GRr,tY,ORr,VRr,XRr,H5,zRr,Wr,hx,QRr,Z0e,WRr,HRr,vn,URr,eTe,JRr,YRr,oTe,KRr,ZRr,rTe,eBr,oBr,rBr,px,U5,tTe,tBr,aBr,aY,nBr,sBr,lBr,J5,aTe,iBr,dBr,nY,cBr,fBr,mBr,Y5,aIe,Uc,K5,nTe,ux,gBr,sTe,hBr,nIe,Tr,_x,pBr,Jc,uBr,sY,_Br,bBr,lY,vBr,FBr,TBr,bx,MBr,lTe,EBr,CBr,wBr,Wt,vx,ABr,iTe,yBr,LBr,Yc,xBr,dTe,$Br,kBr,iY,SBr,RBr,BBr,Z5,PBr,Hr,Fx,IBr,cTe,qBr,NBr,Fn,jBr,fTe,DBr,GBr,mTe,OBr,VBr,gTe,XBr,zBr,QBr,hTe,eC,pTe,WBr,HBr,dY,UBr,JBr,YBr,oC,sIe;return d=new ee({}),va=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),TA=new ee({}),MA=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),sf=new KBr({props:{warning:!0,$$slots:{default:[OEt]},$$scope:{ctx:L}}}),EA=new ee({}),CA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/configuration_auto.py#L563"}}),yA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/configuration_auto.py#L586"}}),ag=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[VEt]},$$scope:{ctx:L}}}),LA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/configuration_auto.py#L708"}}),xA=new ee({}),$A=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/tokenization_auto.py#L377"}}),RA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17073/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/tokenization_auto.py#L391"}}),Ig=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[XEt]},$$scope:{ctx:L}}}),BA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/tokenization_auto.py#L587"}}),PA=new ee({}),IA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/feature_extraction_auto.py#L177"}}),jA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17073/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),dh=new KBr({props:{$$slots:{default:[zEt]},$$scope:{ctx:L}}}),ch=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[QEt]},$$scope:{ctx:L}}}),DA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/feature_extraction_auto.py#L318"}}),GA=new ee({}),OA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/processing_auto.py#L76"}}),zA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/processing_auto.py#L90"}}),yh=new KBr({props:{$$slots:{default:[WEt]},$$scope:{ctx:L}}}),Lh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[HEt]},$$scope:{ctx:L}}}),QA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/processing_auto.py#L243"}}),WA=new ee({}),HA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_auto.py#L716"}}),JA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),kh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[UEt]},$$scope:{ctx:L}}}),YA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),vu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[JEt]},$$scope:{ctx:L}}}),KA=new ee({}),ZA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_auto.py#L723"}}),o6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),Tu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[YEt]},$$scope:{ctx:L}}}),r6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),i_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[KEt]},$$scope:{ctx:L}}}),t6=new ee({}),a6=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_auto.py#L738"}}),s6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),c_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[ZEt]},$$scope:{ctx:L}}}),l6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),W_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[e5t]},$$scope:{ctx:L}}}),i6=new ee({}),d6=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_auto.py#L745"}}),f6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),U_=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[o5t]},$$scope:{ctx:L}}}),m6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),S1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[r5t]},$$scope:{ctx:L}}}),g6=new ee({}),h6=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_auto.py#L752"}}),u6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),B1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[t5t]},$$scope:{ctx:L}}}),_6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),Z1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[a5t]},$$scope:{ctx:L}}}),b6=new ee({}),v6=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_auto.py#L761"}}),T6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),o7=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[n5t]},$$scope:{ctx:L}}}),M6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),J7=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[s5t]},$$scope:{ctx:L}}}),E6=new ee({}),C6=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_auto.py#L795"}}),A6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),K7=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[l5t]},$$scope:{ctx:L}}}),y6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),Lb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[i5t]},$$scope:{ctx:L}}}),L6=new ee({}),x6=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_auto.py#L802"}}),k6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),$b=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[d5t]},$$scope:{ctx:L}}}),S6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),qb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[c5t]},$$scope:{ctx:L}}}),R6=new ee({}),B6=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_auto.py#L788"}}),I6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),jb=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[f5t]},$$scope:{ctx:L}}}),q6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),F2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[m5t]},$$scope:{ctx:L}}}),N6=new ee({}),j6=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_auto.py#L770"}}),G6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),M2=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[g5t]},$$scope:{ctx:L}}}),O6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),d3=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[h5t]},$$scope:{ctx:L}}}),V6=new ee({}),X6=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_auto.py#L777"}}),Q6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),f3=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[p5t]},$$scope:{ctx:L}}}),W6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),h3=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[u5t]},$$scope:{ctx:L}}}),H6=new ee({}),U6=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_auto.py#L811"}}),Y6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17073/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17073/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17073/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),u3=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[_5t]},$$scope:{ctx:L}}}),K6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),x3=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[b5t]},$$scope:{ctx:L}}}),Z6=new ee({}),ey=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_auto.py#L850"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),k3=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[v5t]},$$scope:{ctx:L}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),B3=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[F5t]},$$scope:{ctx:L}}}),ay=new ee({}),ny=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_auto.py#L857"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),I3=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[T5t]},$$scope:{ctx:L}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),Q3=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[M5t]},$$scope:{ctx:L}}}),dy=new ee({}),cy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_auto.py#L880"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),H3=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[E5t]},$$scope:{ctx:L}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),ev=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[C5t]},$$scope:{ctx:L}}}),hy=new ee({}),py=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_auto.py#L864"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),rv=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[w5t]},$$scope:{ctx:L}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),mv=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[A5t]},$$scope:{ctx:L}}}),vy=new ee({}),Fy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_auto.py#L871"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),hv=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[y5t]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),bv=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[L5t]},$$scope:{ctx:L}}}),wy=new ee({}),Ay=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_auto.py#L889"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),Fv=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[x5t]},$$scope:{ctx:L}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),Av=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[$5t]},$$scope:{ctx:L}}}),$y=new ee({}),ky=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_auto.py#L896"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),Lv=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[k5t]},$$scope:{ctx:L}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),Rv=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[S5t]},$$scope:{ctx:L}}}),Py=new ee({}),Iy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_auto.py#L843"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),Pv=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[R5t]},$$scope:{ctx:L}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),jv=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[B5t]},$$scope:{ctx:L}}}),Gy=new ee({}),Oy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_auto.py#L818"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),Gv=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[P5t]},$$scope:{ctx:L}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),Xv=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[I5t]},$$scope:{ctx:L}}}),Qy=new ee({}),Wy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_auto.py#L825"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),Qv=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[q5t]},$$scope:{ctx:L}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),Kv=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[N5t]},$$scope:{ctx:L}}}),Yy=new ee({}),Ky=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_auto.py#L834"}}),eL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),eF=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[j5t]},$$scope:{ctx:L}}}),oL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),tF=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[D5t]},$$scope:{ctx:L}}}),rL=new ee({}),tL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),nL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),nF=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[G5t]},$$scope:{ctx:L}}}),sL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),UF=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[O5t]},$$scope:{ctx:L}}}),lL=new ee({}),iL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),cL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),YF=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[V5t]},$$scope:{ctx:L}}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),T0=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[X5t]},$$scope:{ctx:L}}}),mL=new ee({}),gL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),pL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),E0=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[z5t]},$$scope:{ctx:L}}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),I0=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Q5t]},$$scope:{ctx:L}}}),_L=new ee({}),bL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),FL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),N0=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[W5t]},$$scope:{ctx:L}}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),G0=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[H5t]},$$scope:{ctx:L}}}),EL=new ee({}),CL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_tf_auto.py#L426"}}),AL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),V0=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[U5t]},$$scope:{ctx:L}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),cT=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[J5t]},$$scope:{ctx:L}}}),LL=new ee({}),xL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),kL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),mT=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Y5t]},$$scope:{ctx:L}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),ET=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[K5t]},$$scope:{ctx:L}}}),RL=new ee({}),BL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),IL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),wT=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Z5t]},$$scope:{ctx:L}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),KT=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[eCt]},$$scope:{ctx:L}}}),NL=new ee({}),jL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),GL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),eM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[oCt]},$$scope:{ctx:L}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),bM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[rCt]},$$scope:{ctx:L}}}),VL=new ee({}),XL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_tf_auto.py#L458"}}),QL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),FM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[tCt]},$$scope:{ctx:L}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),MM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[aCt]},$$scope:{ctx:L}}}),HL=new ee({}),UL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),YL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),CM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[nCt]},$$scope:{ctx:L}}}),KL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),zM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[sCt]},$$scope:{ctx:L}}}),ZL=new ee({}),e8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),r8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),WM=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[lCt]},$$scope:{ctx:L}}}),t8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),h4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[iCt]},$$scope:{ctx:L}}}),a8=new ee({}),n8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_tf_auto.py#L419"}}),l8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),u4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[dCt]},$$scope:{ctx:L}}}),i8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),b4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[cCt]},$$scope:{ctx:L}}}),d8=new ee({}),c8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),m8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),F4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[fCt]},$$scope:{ctx:L}}}),g8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),M4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[mCt]},$$scope:{ctx:L}}}),h8=new ee({}),p8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),_8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),C4=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[gCt]},$$scope:{ctx:L}}}),b8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),J4=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[hCt]},$$scope:{ctx:L}}}),v8=new ee({}),F8=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),M8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),K4=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[pCt]},$$scope:{ctx:L}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),iE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[uCt]},$$scope:{ctx:L}}}),C8=new ee({}),w8=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),y8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),cE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[_Ct]},$$scope:{ctx:L}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),EE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[bCt]},$$scope:{ctx:L}}}),x8=new ee({}),$8=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),S8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),wE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[vCt]},$$scope:{ctx:L}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),IE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[FCt]},$$scope:{ctx:L}}}),B8=new ee({}),P8=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),q8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),NE=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[TCt]},$$scope:{ctx:L}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),HE=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[MCt]},$$scope:{ctx:L}}}),j8=new ee({}),D8=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),O8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),JE=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[ECt]},$$scope:{ctx:L}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),l5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[CCt]},$$scope:{ctx:L}}}),X8=new ee({}),z8=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),W8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),d5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[wCt]},$$scope:{ctx:L}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),F5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ACt]},$$scope:{ctx:L}}}),U8=new ee({}),J8=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),K8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),M5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[yCt]},$$scope:{ctx:L}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),k5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[LCt]},$$scope:{ctx:L}}}),ex=new ee({}),ox=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),R5=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[xCt]},$$scope:{ctx:L}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),O5=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[$Ct]},$$scope:{ctx:L}}}),nx=new ee({}),sx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),X5=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[kCt]},$$scope:{ctx:L}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),Q5=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[SCt]},$$scope:{ctx:L}}}),cx=new ee({}),fx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17073/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),H5=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[RCt]},$$scope:{ctx:L}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),Y5=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[BCt]},$$scope:{ctx:L}}}),ux=new ee({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17073/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17073/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L389"}}),Z5=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[PCt]},$$scope:{ctx:L}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17073/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17073/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17073/src/transformers/models/auto/auto_factory.py#L417"}}),oC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ICt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),oi=o("Auto Classes"),of=l(),Kr=a("p"),ri=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=a("code"),_A=o("from_pretrained()"),rf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ai=o("Instantiating one of "),Mn=a("a"),bA=o("AutoConfig"),En=o(", "),Cn=a("a"),vA=o("AutoModel"),ni=o(`, and
`),wn=a("a"),FA=o("AutoTokenizer"),si=o(" will directly create a class of the relevant architecture. For instance"),tf=l(),F(va.$$.fragment),ze=l(),Ae=a("p"),R9=o("will create a model that is an instance of "),li=a("a"),B9=o("BertModel"),P9=o("."),Eo=l(),Fa=a("p"),I9=o("There is one class of "),af=a("code"),q9=o("AutoModel"),mNe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),nBe=l(),ii=a("h2"),nf=a("a"),eZ=a("span"),F(TA.$$.fragment),gNe=l(),oZ=a("span"),hNe=o("Extending the Auto Classes"),sBe=l(),An=a("p"),pNe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),rZ=a("code"),uNe=o("NewModel"),_Ne=o(", make sure you have a "),tZ=a("code"),bNe=o("NewModelConfig"),vNe=o(` then you can add those to the auto
classes like this:`),lBe=l(),F(MA.$$.fragment),iBe=l(),N9=a("p"),FNe=o("You will then be able to use the auto classes like you would usually do!"),dBe=l(),F(sf.$$.fragment),cBe=l(),di=a("h2"),lf=a("a"),aZ=a("span"),F(EA.$$.fragment),TNe=l(),nZ=a("span"),MNe=o("AutoConfig"),fBe=l(),Co=a("div"),F(CA.$$.fragment),ENe=l(),wA=a("p"),CNe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),j9=a("a"),wNe=o("from_pretrained()"),ANe=o(" class method."),yNe=l(),AA=a("p"),LNe=o("This class cannot be instantiated directly using "),sZ=a("code"),xNe=o("__init__()"),$Ne=o(" (throws an error)."),kNe=l(),Mr=a("div"),F(yA.$$.fragment),SNe=l(),lZ=a("p"),RNe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),BNe=l(),ci=a("p"),PNe=o("The configuration class to instantiate is selected based on the "),iZ=a("code"),INe=o("model_type"),qNe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),dZ=a("code"),NNe=o("pretrained_model_name_or_path"),jNe=o(":"),DNe=l(),A=a("ul"),df=a("li"),cZ=a("strong"),GNe=o("albert"),ONe=o(" \u2014 "),D9=a("a"),VNe=o("AlbertConfig"),XNe=o(" (ALBERT model)"),zNe=l(),cf=a("li"),fZ=a("strong"),QNe=o("bart"),WNe=o(" \u2014 "),G9=a("a"),HNe=o("BartConfig"),UNe=o(" (BART model)"),JNe=l(),ff=a("li"),mZ=a("strong"),YNe=o("beit"),KNe=o(" \u2014 "),O9=a("a"),ZNe=o("BeitConfig"),eje=o(" (BEiT model)"),oje=l(),mf=a("li"),gZ=a("strong"),rje=o("bert"),tje=o(" \u2014 "),V9=a("a"),aje=o("BertConfig"),nje=o(" (BERT model)"),sje=l(),gf=a("li"),hZ=a("strong"),lje=o("bert-generation"),ije=o(" \u2014 "),X9=a("a"),dje=o("BertGenerationConfig"),cje=o(" (Bert Generation model)"),fje=l(),hf=a("li"),pZ=a("strong"),mje=o("big_bird"),gje=o(" \u2014 "),z9=a("a"),hje=o("BigBirdConfig"),pje=o(" (BigBird model)"),uje=l(),pf=a("li"),uZ=a("strong"),_je=o("bigbird_pegasus"),bje=o(" \u2014 "),Q9=a("a"),vje=o("BigBirdPegasusConfig"),Fje=o(" (BigBirdPegasus model)"),Tje=l(),uf=a("li"),_Z=a("strong"),Mje=o("blenderbot"),Eje=o(" \u2014 "),W9=a("a"),Cje=o("BlenderbotConfig"),wje=o(" (Blenderbot model)"),Aje=l(),_f=a("li"),bZ=a("strong"),yje=o("blenderbot-small"),Lje=o(" \u2014 "),H9=a("a"),xje=o("BlenderbotSmallConfig"),$je=o(" (BlenderbotSmall model)"),kje=l(),bf=a("li"),vZ=a("strong"),Sje=o("camembert"),Rje=o(" \u2014 "),U9=a("a"),Bje=o("CamembertConfig"),Pje=o(" (CamemBERT model)"),Ije=l(),vf=a("li"),FZ=a("strong"),qje=o("canine"),Nje=o(" \u2014 "),J9=a("a"),jje=o("CanineConfig"),Dje=o(" (Canine model)"),Gje=l(),Ff=a("li"),TZ=a("strong"),Oje=o("clip"),Vje=o(" \u2014 "),Y9=a("a"),Xje=o("CLIPConfig"),zje=o(" (CLIP model)"),Qje=l(),Tf=a("li"),MZ=a("strong"),Wje=o("convbert"),Hje=o(" \u2014 "),K9=a("a"),Uje=o("ConvBertConfig"),Jje=o(" (ConvBERT model)"),Yje=l(),Mf=a("li"),EZ=a("strong"),Kje=o("convnext"),Zje=o(" \u2014 "),Z9=a("a"),eDe=o("ConvNextConfig"),oDe=o(" (ConvNext model)"),rDe=l(),Ef=a("li"),CZ=a("strong"),tDe=o("ctrl"),aDe=o(" \u2014 "),e$=a("a"),nDe=o("CTRLConfig"),sDe=o(" (CTRL model)"),lDe=l(),Cf=a("li"),wZ=a("strong"),iDe=o("data2vec-audio"),dDe=o(" \u2014 "),o$=a("a"),cDe=o("Data2VecAudioConfig"),fDe=o(" (Data2VecAudio model)"),mDe=l(),wf=a("li"),AZ=a("strong"),gDe=o("data2vec-text"),hDe=o(" \u2014 "),r$=a("a"),pDe=o("Data2VecTextConfig"),uDe=o(" (Data2VecText model)"),_De=l(),Af=a("li"),yZ=a("strong"),bDe=o("data2vec-vision"),vDe=o(" \u2014 "),t$=a("a"),FDe=o("Data2VecVisionConfig"),TDe=o(" (Data2VecVision model)"),MDe=l(),yf=a("li"),LZ=a("strong"),EDe=o("deberta"),CDe=o(" \u2014 "),a$=a("a"),wDe=o("DebertaConfig"),ADe=o(" (DeBERTa model)"),yDe=l(),Lf=a("li"),xZ=a("strong"),LDe=o("deberta-v2"),xDe=o(" \u2014 "),n$=a("a"),$De=o("DebertaV2Config"),kDe=o(" (DeBERTa-v2 model)"),SDe=l(),xf=a("li"),$Z=a("strong"),RDe=o("decision_transformer"),BDe=o(" \u2014 "),s$=a("a"),PDe=o("DecisionTransformerConfig"),IDe=o(" (Decision Transformer model)"),qDe=l(),$f=a("li"),kZ=a("strong"),NDe=o("deit"),jDe=o(" \u2014 "),l$=a("a"),DDe=o("DeiTConfig"),GDe=o(" (DeiT model)"),ODe=l(),kf=a("li"),SZ=a("strong"),VDe=o("detr"),XDe=o(" \u2014 "),i$=a("a"),zDe=o("DetrConfig"),QDe=o(" (DETR model)"),WDe=l(),Sf=a("li"),RZ=a("strong"),HDe=o("distilbert"),UDe=o(" \u2014 "),d$=a("a"),JDe=o("DistilBertConfig"),YDe=o(" (DistilBERT model)"),KDe=l(),Rf=a("li"),BZ=a("strong"),ZDe=o("dpr"),eGe=o(" \u2014 "),c$=a("a"),oGe=o("DPRConfig"),rGe=o(" (DPR model)"),tGe=l(),Bf=a("li"),PZ=a("strong"),aGe=o("dpt"),nGe=o(" \u2014 "),f$=a("a"),sGe=o("DPTConfig"),lGe=o(" (DPT model)"),iGe=l(),Pf=a("li"),IZ=a("strong"),dGe=o("electra"),cGe=o(" \u2014 "),m$=a("a"),fGe=o("ElectraConfig"),mGe=o(" (ELECTRA model)"),gGe=l(),If=a("li"),qZ=a("strong"),hGe=o("encoder-decoder"),pGe=o(" \u2014 "),g$=a("a"),uGe=o("EncoderDecoderConfig"),_Ge=o(" (Encoder decoder model)"),bGe=l(),qf=a("li"),NZ=a("strong"),vGe=o("flaubert"),FGe=o(" \u2014 "),h$=a("a"),TGe=o("FlaubertConfig"),MGe=o(" (FlauBERT model)"),EGe=l(),Nf=a("li"),jZ=a("strong"),CGe=o("fnet"),wGe=o(" \u2014 "),p$=a("a"),AGe=o("FNetConfig"),yGe=o(" (FNet model)"),LGe=l(),jf=a("li"),DZ=a("strong"),xGe=o("fsmt"),$Ge=o(" \u2014 "),u$=a("a"),kGe=o("FSMTConfig"),SGe=o(" (FairSeq Machine-Translation model)"),RGe=l(),Df=a("li"),GZ=a("strong"),BGe=o("funnel"),PGe=o(" \u2014 "),_$=a("a"),IGe=o("FunnelConfig"),qGe=o(" (Funnel Transformer model)"),NGe=l(),Gf=a("li"),OZ=a("strong"),jGe=o("glpn"),DGe=o(" \u2014 "),b$=a("a"),GGe=o("GLPNConfig"),OGe=o(" (GLPN model)"),VGe=l(),Of=a("li"),VZ=a("strong"),XGe=o("gpt2"),zGe=o(" \u2014 "),v$=a("a"),QGe=o("GPT2Config"),WGe=o(" (OpenAI GPT-2 model)"),HGe=l(),Vf=a("li"),XZ=a("strong"),UGe=o("gpt_neo"),JGe=o(" \u2014 "),F$=a("a"),YGe=o("GPTNeoConfig"),KGe=o(" (GPT Neo model)"),ZGe=l(),Xf=a("li"),zZ=a("strong"),eOe=o("gptj"),oOe=o(" \u2014 "),T$=a("a"),rOe=o("GPTJConfig"),tOe=o(" (GPT-J model)"),aOe=l(),zf=a("li"),QZ=a("strong"),nOe=o("hubert"),sOe=o(" \u2014 "),M$=a("a"),lOe=o("HubertConfig"),iOe=o(" (Hubert model)"),dOe=l(),Qf=a("li"),WZ=a("strong"),cOe=o("ibert"),fOe=o(" \u2014 "),E$=a("a"),mOe=o("IBertConfig"),gOe=o(" (I-BERT model)"),hOe=l(),Wf=a("li"),HZ=a("strong"),pOe=o("imagegpt"),uOe=o(" \u2014 "),C$=a("a"),_Oe=o("ImageGPTConfig"),bOe=o(" (ImageGPT model)"),vOe=l(),Hf=a("li"),UZ=a("strong"),FOe=o("layoutlm"),TOe=o(" \u2014 "),w$=a("a"),MOe=o("LayoutLMConfig"),EOe=o(" (LayoutLM model)"),COe=l(),Uf=a("li"),JZ=a("strong"),wOe=o("layoutlmv2"),AOe=o(" \u2014 "),A$=a("a"),yOe=o("LayoutLMv2Config"),LOe=o(" (LayoutLMv2 model)"),xOe=l(),Jf=a("li"),YZ=a("strong"),$Oe=o("led"),kOe=o(" \u2014 "),y$=a("a"),SOe=o("LEDConfig"),ROe=o(" (LED model)"),BOe=l(),Yf=a("li"),KZ=a("strong"),POe=o("longformer"),IOe=o(" \u2014 "),L$=a("a"),qOe=o("LongformerConfig"),NOe=o(" (Longformer model)"),jOe=l(),Kf=a("li"),ZZ=a("strong"),DOe=o("luke"),GOe=o(" \u2014 "),x$=a("a"),OOe=o("LukeConfig"),VOe=o(" (LUKE model)"),XOe=l(),Zf=a("li"),eee=a("strong"),zOe=o("lxmert"),QOe=o(" \u2014 "),$$=a("a"),WOe=o("LxmertConfig"),HOe=o(" (LXMERT model)"),UOe=l(),em=a("li"),oee=a("strong"),JOe=o("m2m_100"),YOe=o(" \u2014 "),k$=a("a"),KOe=o("M2M100Config"),ZOe=o(" (M2M100 model)"),eVe=l(),om=a("li"),ree=a("strong"),oVe=o("marian"),rVe=o(" \u2014 "),S$=a("a"),tVe=o("MarianConfig"),aVe=o(" (Marian model)"),nVe=l(),rm=a("li"),tee=a("strong"),sVe=o("maskformer"),lVe=o(" \u2014 "),R$=a("a"),iVe=o("MaskFormerConfig"),dVe=o(" (MaskFormer model)"),cVe=l(),tm=a("li"),aee=a("strong"),fVe=o("mbart"),mVe=o(" \u2014 "),B$=a("a"),gVe=o("MBartConfig"),hVe=o(" (mBART model)"),pVe=l(),am=a("li"),nee=a("strong"),uVe=o("megatron-bert"),_Ve=o(" \u2014 "),P$=a("a"),bVe=o("MegatronBertConfig"),vVe=o(" (MegatronBert model)"),FVe=l(),nm=a("li"),see=a("strong"),TVe=o("mobilebert"),MVe=o(" \u2014 "),I$=a("a"),EVe=o("MobileBertConfig"),CVe=o(" (MobileBERT model)"),wVe=l(),sm=a("li"),lee=a("strong"),AVe=o("mpnet"),yVe=o(" \u2014 "),q$=a("a"),LVe=o("MPNetConfig"),xVe=o(" (MPNet model)"),$Ve=l(),lm=a("li"),iee=a("strong"),kVe=o("mt5"),SVe=o(" \u2014 "),N$=a("a"),RVe=o("MT5Config"),BVe=o(" (mT5 model)"),PVe=l(),im=a("li"),dee=a("strong"),IVe=o("nystromformer"),qVe=o(" \u2014 "),j$=a("a"),NVe=o("NystromformerConfig"),jVe=o(" (Nystromformer model)"),DVe=l(),dm=a("li"),cee=a("strong"),GVe=o("openai-gpt"),OVe=o(" \u2014 "),D$=a("a"),VVe=o("OpenAIGPTConfig"),XVe=o(" (OpenAI GPT model)"),zVe=l(),cm=a("li"),fee=a("strong"),QVe=o("pegasus"),WVe=o(" \u2014 "),G$=a("a"),HVe=o("PegasusConfig"),UVe=o(" (Pegasus model)"),JVe=l(),fm=a("li"),mee=a("strong"),YVe=o("perceiver"),KVe=o(" \u2014 "),O$=a("a"),ZVe=o("PerceiverConfig"),eXe=o(" (Perceiver model)"),oXe=l(),mm=a("li"),gee=a("strong"),rXe=o("plbart"),tXe=o(" \u2014 "),V$=a("a"),aXe=o("PLBartConfig"),nXe=o(" (PLBart model)"),sXe=l(),gm=a("li"),hee=a("strong"),lXe=o("poolformer"),iXe=o(" \u2014 "),X$=a("a"),dXe=o("PoolFormerConfig"),cXe=o(" (PoolFormer model)"),fXe=l(),hm=a("li"),pee=a("strong"),mXe=o("prophetnet"),gXe=o(" \u2014 "),z$=a("a"),hXe=o("ProphetNetConfig"),pXe=o(" (ProphetNet model)"),uXe=l(),pm=a("li"),uee=a("strong"),_Xe=o("qdqbert"),bXe=o(" \u2014 "),Q$=a("a"),vXe=o("QDQBertConfig"),FXe=o(" (QDQBert model)"),TXe=l(),um=a("li"),_ee=a("strong"),MXe=o("rag"),EXe=o(" \u2014 "),W$=a("a"),CXe=o("RagConfig"),wXe=o(" (RAG model)"),AXe=l(),_m=a("li"),bee=a("strong"),yXe=o("realm"),LXe=o(" \u2014 "),H$=a("a"),xXe=o("RealmConfig"),$Xe=o(" (Realm model)"),kXe=l(),bm=a("li"),vee=a("strong"),SXe=o("reformer"),RXe=o(" \u2014 "),U$=a("a"),BXe=o("ReformerConfig"),PXe=o(" (Reformer model)"),IXe=l(),vm=a("li"),Fee=a("strong"),qXe=o("regnet"),NXe=o(" \u2014 "),J$=a("a"),jXe=o("RegNetConfig"),DXe=o(" (RegNet model)"),GXe=l(),Fm=a("li"),Tee=a("strong"),OXe=o("rembert"),VXe=o(" \u2014 "),Y$=a("a"),XXe=o("RemBertConfig"),zXe=o(" (RemBERT model)"),QXe=l(),Tm=a("li"),Mee=a("strong"),WXe=o("resnet"),HXe=o(" \u2014 "),K$=a("a"),UXe=o("ResNetConfig"),JXe=o(" (ResNet model)"),YXe=l(),Mm=a("li"),Eee=a("strong"),KXe=o("retribert"),ZXe=o(" \u2014 "),Z$=a("a"),eze=o("RetriBertConfig"),oze=o(" (RetriBERT model)"),rze=l(),Em=a("li"),Cee=a("strong"),tze=o("roberta"),aze=o(" \u2014 "),ek=a("a"),nze=o("RobertaConfig"),sze=o(" (RoBERTa model)"),lze=l(),Cm=a("li"),wee=a("strong"),ize=o("roformer"),dze=o(" \u2014 "),ok=a("a"),cze=o("RoFormerConfig"),fze=o(" (RoFormer model)"),mze=l(),wm=a("li"),Aee=a("strong"),gze=o("segformer"),hze=o(" \u2014 "),rk=a("a"),pze=o("SegformerConfig"),uze=o(" (SegFormer model)"),_ze=l(),Am=a("li"),yee=a("strong"),bze=o("sew"),vze=o(" \u2014 "),tk=a("a"),Fze=o("SEWConfig"),Tze=o(" (SEW model)"),Mze=l(),ym=a("li"),Lee=a("strong"),Eze=o("sew-d"),Cze=o(" \u2014 "),ak=a("a"),wze=o("SEWDConfig"),Aze=o(" (SEW-D model)"),yze=l(),Lm=a("li"),xee=a("strong"),Lze=o("speech-encoder-decoder"),xze=o(" \u2014 "),nk=a("a"),$ze=o("SpeechEncoderDecoderConfig"),kze=o(" (Speech Encoder decoder model)"),Sze=l(),xm=a("li"),$ee=a("strong"),Rze=o("speech_to_text"),Bze=o(" \u2014 "),sk=a("a"),Pze=o("Speech2TextConfig"),Ize=o(" (Speech2Text model)"),qze=l(),$m=a("li"),kee=a("strong"),Nze=o("speech_to_text_2"),jze=o(" \u2014 "),lk=a("a"),Dze=o("Speech2Text2Config"),Gze=o(" (Speech2Text2 model)"),Oze=l(),km=a("li"),See=a("strong"),Vze=o("splinter"),Xze=o(" \u2014 "),ik=a("a"),zze=o("SplinterConfig"),Qze=o(" (Splinter model)"),Wze=l(),Sm=a("li"),Ree=a("strong"),Hze=o("squeezebert"),Uze=o(" \u2014 "),dk=a("a"),Jze=o("SqueezeBertConfig"),Yze=o(" (SqueezeBERT model)"),Kze=l(),Rm=a("li"),Bee=a("strong"),Zze=o("swin"),eQe=o(" \u2014 "),ck=a("a"),oQe=o("SwinConfig"),rQe=o(" (Swin model)"),tQe=l(),Bm=a("li"),Pee=a("strong"),aQe=o("t5"),nQe=o(" \u2014 "),fk=a("a"),sQe=o("T5Config"),lQe=o(" (T5 model)"),iQe=l(),Pm=a("li"),Iee=a("strong"),dQe=o("tapas"),cQe=o(" \u2014 "),mk=a("a"),fQe=o("TapasConfig"),mQe=o(" (TAPAS model)"),gQe=l(),Im=a("li"),qee=a("strong"),hQe=o("tapex"),pQe=o(" \u2014 "),gk=a("a"),uQe=o("BartConfig"),_Qe=o(" (TAPEX model)"),bQe=l(),qm=a("li"),Nee=a("strong"),vQe=o("transfo-xl"),FQe=o(" \u2014 "),hk=a("a"),TQe=o("TransfoXLConfig"),MQe=o(" (Transformer-XL model)"),EQe=l(),Nm=a("li"),jee=a("strong"),CQe=o("trocr"),wQe=o(" \u2014 "),pk=a("a"),AQe=o("TrOCRConfig"),yQe=o(" (TrOCR model)"),LQe=l(),jm=a("li"),Dee=a("strong"),xQe=o("unispeech"),$Qe=o(" \u2014 "),uk=a("a"),kQe=o("UniSpeechConfig"),SQe=o(" (UniSpeech model)"),RQe=l(),Dm=a("li"),Gee=a("strong"),BQe=o("unispeech-sat"),PQe=o(" \u2014 "),_k=a("a"),IQe=o("UniSpeechSatConfig"),qQe=o(" (UniSpeechSat model)"),NQe=l(),Gm=a("li"),Oee=a("strong"),jQe=o("van"),DQe=o(" \u2014 "),bk=a("a"),GQe=o("VanConfig"),OQe=o(" (VAN model)"),VQe=l(),Om=a("li"),Vee=a("strong"),XQe=o("vilt"),zQe=o(" \u2014 "),vk=a("a"),QQe=o("ViltConfig"),WQe=o(" (ViLT model)"),HQe=l(),Vm=a("li"),Xee=a("strong"),UQe=o("vision-encoder-decoder"),JQe=o(" \u2014 "),Fk=a("a"),YQe=o("VisionEncoderDecoderConfig"),KQe=o(" (Vision Encoder decoder model)"),ZQe=l(),Xm=a("li"),zee=a("strong"),eWe=o("vision-text-dual-encoder"),oWe=o(" \u2014 "),Tk=a("a"),rWe=o("VisionTextDualEncoderConfig"),tWe=o(" (VisionTextDualEncoder model)"),aWe=l(),zm=a("li"),Qee=a("strong"),nWe=o("visual_bert"),sWe=o(" \u2014 "),Mk=a("a"),lWe=o("VisualBertConfig"),iWe=o(" (VisualBert model)"),dWe=l(),Qm=a("li"),Wee=a("strong"),cWe=o("vit"),fWe=o(" \u2014 "),Ek=a("a"),mWe=o("ViTConfig"),gWe=o(" (ViT model)"),hWe=l(),Wm=a("li"),Hee=a("strong"),pWe=o("vit_mae"),uWe=o(" \u2014 "),Ck=a("a"),_We=o("ViTMAEConfig"),bWe=o(" (ViTMAE model)"),vWe=l(),Hm=a("li"),Uee=a("strong"),FWe=o("wav2vec2"),TWe=o(" \u2014 "),wk=a("a"),MWe=o("Wav2Vec2Config"),EWe=o(" (Wav2Vec2 model)"),CWe=l(),Um=a("li"),Jee=a("strong"),wWe=o("wavlm"),AWe=o(" \u2014 "),Ak=a("a"),yWe=o("WavLMConfig"),LWe=o(" (WavLM model)"),xWe=l(),Jm=a("li"),Yee=a("strong"),$We=o("xglm"),kWe=o(" \u2014 "),yk=a("a"),SWe=o("XGLMConfig"),RWe=o(" (XGLM model)"),BWe=l(),Ym=a("li"),Kee=a("strong"),PWe=o("xlm"),IWe=o(" \u2014 "),Lk=a("a"),qWe=o("XLMConfig"),NWe=o(" (XLM model)"),jWe=l(),Km=a("li"),Zee=a("strong"),DWe=o("xlm-prophetnet"),GWe=o(" \u2014 "),xk=a("a"),OWe=o("XLMProphetNetConfig"),VWe=o(" (XLMProphetNet model)"),XWe=l(),Zm=a("li"),eoe=a("strong"),zWe=o("xlm-roberta"),QWe=o(" \u2014 "),$k=a("a"),WWe=o("XLMRobertaConfig"),HWe=o(" (XLM-RoBERTa model)"),UWe=l(),eg=a("li"),ooe=a("strong"),JWe=o("xlm-roberta-xl"),YWe=o(" \u2014 "),kk=a("a"),KWe=o("XLMRobertaXLConfig"),ZWe=o(" (XLM-RoBERTa-XL model)"),eHe=l(),og=a("li"),roe=a("strong"),oHe=o("xlnet"),rHe=o(" \u2014 "),Sk=a("a"),tHe=o("XLNetConfig"),aHe=o(" (XLNet model)"),nHe=l(),rg=a("li"),toe=a("strong"),sHe=o("yolos"),lHe=o(" \u2014 "),Rk=a("a"),iHe=o("YolosConfig"),dHe=o(" (YOLOS model)"),cHe=l(),tg=a("li"),aoe=a("strong"),fHe=o("yoso"),mHe=o(" \u2014 "),Bk=a("a"),gHe=o("YosoConfig"),hHe=o(" (YOSO model)"),pHe=l(),F(ag.$$.fragment),uHe=l(),ng=a("div"),F(LA.$$.fragment),_He=l(),noe=a("p"),bHe=o("Register a new configuration for this class."),mBe=l(),fi=a("h2"),sg=a("a"),soe=a("span"),F(xA.$$.fragment),vHe=l(),loe=a("span"),FHe=o("AutoTokenizer"),gBe=l(),wo=a("div"),F($A.$$.fragment),THe=l(),kA=a("p"),MHe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Pk=a("a"),EHe=o("AutoTokenizer.from_pretrained()"),CHe=o(" class method."),wHe=l(),SA=a("p"),AHe=o("This class cannot be instantiated directly using "),ioe=a("code"),yHe=o("__init__()"),LHe=o(" (throws an error)."),xHe=l(),Er=a("div"),F(RA.$$.fragment),$He=l(),doe=a("p"),kHe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),SHe=l(),Ta=a("p"),RHe=o("The tokenizer class to instantiate is selected based on the "),coe=a("code"),BHe=o("model_type"),PHe=o(` property of the config object (either
passed as an argument or loaded from `),foe=a("code"),IHe=o("pretrained_model_name_or_path"),qHe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),moe=a("code"),NHe=o("pretrained_model_name_or_path"),jHe=o(":"),DHe=l(),k=a("ul"),yn=a("li"),goe=a("strong"),GHe=o("albert"),OHe=o(" \u2014 "),Ik=a("a"),VHe=o("AlbertTokenizer"),XHe=o(" or "),qk=a("a"),zHe=o("AlbertTokenizerFast"),QHe=o(" (ALBERT model)"),WHe=l(),Ln=a("li"),hoe=a("strong"),HHe=o("bart"),UHe=o(" \u2014 "),Nk=a("a"),JHe=o("BartTokenizer"),YHe=o(" or "),jk=a("a"),KHe=o("BartTokenizerFast"),ZHe=o(" (BART model)"),eUe=l(),xn=a("li"),poe=a("strong"),oUe=o("barthez"),rUe=o(" \u2014 "),Dk=a("a"),tUe=o("BarthezTokenizer"),aUe=o(" or "),Gk=a("a"),nUe=o("BarthezTokenizerFast"),sUe=o(" (BARThez model)"),lUe=l(),lg=a("li"),uoe=a("strong"),iUe=o("bartpho"),dUe=o(" \u2014 "),Ok=a("a"),cUe=o("BartphoTokenizer"),fUe=o(" (BARTpho model)"),mUe=l(),$n=a("li"),_oe=a("strong"),gUe=o("bert"),hUe=o(" \u2014 "),Vk=a("a"),pUe=o("BertTokenizer"),uUe=o(" or "),Xk=a("a"),_Ue=o("BertTokenizerFast"),bUe=o(" (BERT model)"),vUe=l(),ig=a("li"),boe=a("strong"),FUe=o("bert-generation"),TUe=o(" \u2014 "),zk=a("a"),MUe=o("BertGenerationTokenizer"),EUe=o(" (Bert Generation model)"),CUe=l(),dg=a("li"),voe=a("strong"),wUe=o("bert-japanese"),AUe=o(" \u2014 "),Qk=a("a"),yUe=o("BertJapaneseTokenizer"),LUe=o(" (BertJapanese model)"),xUe=l(),cg=a("li"),Foe=a("strong"),$Ue=o("bertweet"),kUe=o(" \u2014 "),Wk=a("a"),SUe=o("BertweetTokenizer"),RUe=o(" (Bertweet model)"),BUe=l(),kn=a("li"),Toe=a("strong"),PUe=o("big_bird"),IUe=o(" \u2014 "),Hk=a("a"),qUe=o("BigBirdTokenizer"),NUe=o(" or "),Uk=a("a"),jUe=o("BigBirdTokenizerFast"),DUe=o(" (BigBird model)"),GUe=l(),Sn=a("li"),Moe=a("strong"),OUe=o("bigbird_pegasus"),VUe=o(" \u2014 "),Jk=a("a"),XUe=o("PegasusTokenizer"),zUe=o(" or "),Yk=a("a"),QUe=o("PegasusTokenizerFast"),WUe=o(" (BigBirdPegasus model)"),HUe=l(),Rn=a("li"),Eoe=a("strong"),UUe=o("blenderbot"),JUe=o(" \u2014 "),Kk=a("a"),YUe=o("BlenderbotTokenizer"),KUe=o(" or "),Zk=a("a"),ZUe=o("BlenderbotTokenizerFast"),eJe=o(" (Blenderbot model)"),oJe=l(),fg=a("li"),Coe=a("strong"),rJe=o("blenderbot-small"),tJe=o(" \u2014 "),eS=a("a"),aJe=o("BlenderbotSmallTokenizer"),nJe=o(" (BlenderbotSmall model)"),sJe=l(),mg=a("li"),woe=a("strong"),lJe=o("byt5"),iJe=o(" \u2014 "),oS=a("a"),dJe=o("ByT5Tokenizer"),cJe=o(" (ByT5 model)"),fJe=l(),Bn=a("li"),Aoe=a("strong"),mJe=o("camembert"),gJe=o(" \u2014 "),rS=a("a"),hJe=o("CamembertTokenizer"),pJe=o(" or "),tS=a("a"),uJe=o("CamembertTokenizerFast"),_Je=o(" (CamemBERT model)"),bJe=l(),gg=a("li"),yoe=a("strong"),vJe=o("canine"),FJe=o(" \u2014 "),aS=a("a"),TJe=o("CanineTokenizer"),MJe=o(" (Canine model)"),EJe=l(),Pn=a("li"),Loe=a("strong"),CJe=o("clip"),wJe=o(" \u2014 "),nS=a("a"),AJe=o("CLIPTokenizer"),yJe=o(" or "),sS=a("a"),LJe=o("CLIPTokenizerFast"),xJe=o(" (CLIP model)"),$Je=l(),In=a("li"),xoe=a("strong"),kJe=o("convbert"),SJe=o(" \u2014 "),lS=a("a"),RJe=o("ConvBertTokenizer"),BJe=o(" or "),iS=a("a"),PJe=o("ConvBertTokenizerFast"),IJe=o(" (ConvBERT model)"),qJe=l(),qn=a("li"),$oe=a("strong"),NJe=o("cpm"),jJe=o(" \u2014 "),dS=a("a"),DJe=o("CpmTokenizer"),GJe=o(" or "),cS=a("a"),OJe=o("CpmTokenizerFast"),VJe=o(" (CPM model)"),XJe=l(),hg=a("li"),koe=a("strong"),zJe=o("ctrl"),QJe=o(" \u2014 "),fS=a("a"),WJe=o("CTRLTokenizer"),HJe=o(" (CTRL model)"),UJe=l(),Nn=a("li"),Soe=a("strong"),JJe=o("data2vec-text"),YJe=o(" \u2014 "),mS=a("a"),KJe=o("RobertaTokenizer"),ZJe=o(" or "),gS=a("a"),eYe=o("RobertaTokenizerFast"),oYe=o(" (Data2VecText model)"),rYe=l(),jn=a("li"),Roe=a("strong"),tYe=o("deberta"),aYe=o(" \u2014 "),hS=a("a"),nYe=o("DebertaTokenizer"),sYe=o(" or "),pS=a("a"),lYe=o("DebertaTokenizerFast"),iYe=o(" (DeBERTa model)"),dYe=l(),Dn=a("li"),Boe=a("strong"),cYe=o("deberta-v2"),fYe=o(" \u2014 "),uS=a("a"),mYe=o("DebertaV2Tokenizer"),gYe=o(" or "),_S=a("a"),hYe=o("DebertaV2TokenizerFast"),pYe=o(" (DeBERTa-v2 model)"),uYe=l(),Gn=a("li"),Poe=a("strong"),_Ye=o("distilbert"),bYe=o(" \u2014 "),bS=a("a"),vYe=o("DistilBertTokenizer"),FYe=o(" or "),vS=a("a"),TYe=o("DistilBertTokenizerFast"),MYe=o(" (DistilBERT model)"),EYe=l(),On=a("li"),Ioe=a("strong"),CYe=o("dpr"),wYe=o(" \u2014 "),FS=a("a"),AYe=o("DPRQuestionEncoderTokenizer"),yYe=o(" or "),TS=a("a"),LYe=o("DPRQuestionEncoderTokenizerFast"),xYe=o(" (DPR model)"),$Ye=l(),Vn=a("li"),qoe=a("strong"),kYe=o("electra"),SYe=o(" \u2014 "),MS=a("a"),RYe=o("ElectraTokenizer"),BYe=o(" or "),ES=a("a"),PYe=o("ElectraTokenizerFast"),IYe=o(" (ELECTRA model)"),qYe=l(),pg=a("li"),Noe=a("strong"),NYe=o("flaubert"),jYe=o(" \u2014 "),CS=a("a"),DYe=o("FlaubertTokenizer"),GYe=o(" (FlauBERT model)"),OYe=l(),Xn=a("li"),joe=a("strong"),VYe=o("fnet"),XYe=o(" \u2014 "),wS=a("a"),zYe=o("FNetTokenizer"),QYe=o(" or "),AS=a("a"),WYe=o("FNetTokenizerFast"),HYe=o(" (FNet model)"),UYe=l(),ug=a("li"),Doe=a("strong"),JYe=o("fsmt"),YYe=o(" \u2014 "),yS=a("a"),KYe=o("FSMTTokenizer"),ZYe=o(" (FairSeq Machine-Translation model)"),eKe=l(),zn=a("li"),Goe=a("strong"),oKe=o("funnel"),rKe=o(" \u2014 "),LS=a("a"),tKe=o("FunnelTokenizer"),aKe=o(" or "),xS=a("a"),nKe=o("FunnelTokenizerFast"),sKe=o(" (Funnel Transformer model)"),lKe=l(),Qn=a("li"),Ooe=a("strong"),iKe=o("gpt2"),dKe=o(" \u2014 "),$S=a("a"),cKe=o("GPT2Tokenizer"),fKe=o(" or "),kS=a("a"),mKe=o("GPT2TokenizerFast"),gKe=o(" (OpenAI GPT-2 model)"),hKe=l(),Wn=a("li"),Voe=a("strong"),pKe=o("gpt_neo"),uKe=o(" \u2014 "),SS=a("a"),_Ke=o("GPT2Tokenizer"),bKe=o(" or "),RS=a("a"),vKe=o("GPT2TokenizerFast"),FKe=o(" (GPT Neo model)"),TKe=l(),Hn=a("li"),Xoe=a("strong"),MKe=o("gptj"),EKe=o(" \u2014 "),BS=a("a"),CKe=o("GPT2Tokenizer"),wKe=o(" or "),PS=a("a"),AKe=o("GPT2TokenizerFast"),yKe=o(" (GPT-J model)"),LKe=l(),Un=a("li"),zoe=a("strong"),xKe=o("herbert"),$Ke=o(" \u2014 "),IS=a("a"),kKe=o("HerbertTokenizer"),SKe=o(" or "),qS=a("a"),RKe=o("HerbertTokenizerFast"),BKe=o(" (HerBERT model)"),PKe=l(),_g=a("li"),Qoe=a("strong"),IKe=o("hubert"),qKe=o(" \u2014 "),NS=a("a"),NKe=o("Wav2Vec2CTCTokenizer"),jKe=o(" (Hubert model)"),DKe=l(),Jn=a("li"),Woe=a("strong"),GKe=o("ibert"),OKe=o(" \u2014 "),jS=a("a"),VKe=o("RobertaTokenizer"),XKe=o(" or "),DS=a("a"),zKe=o("RobertaTokenizerFast"),QKe=o(" (I-BERT model)"),WKe=l(),Yn=a("li"),Hoe=a("strong"),HKe=o("layoutlm"),UKe=o(" \u2014 "),GS=a("a"),JKe=o("LayoutLMTokenizer"),YKe=o(" or "),OS=a("a"),KKe=o("LayoutLMTokenizerFast"),ZKe=o(" (LayoutLM model)"),eZe=l(),Kn=a("li"),Uoe=a("strong"),oZe=o("layoutlmv2"),rZe=o(" \u2014 "),VS=a("a"),tZe=o("LayoutLMv2Tokenizer"),aZe=o(" or "),XS=a("a"),nZe=o("LayoutLMv2TokenizerFast"),sZe=o(" (LayoutLMv2 model)"),lZe=l(),Zn=a("li"),Joe=a("strong"),iZe=o("layoutxlm"),dZe=o(" \u2014 "),zS=a("a"),cZe=o("LayoutXLMTokenizer"),fZe=o(" or "),QS=a("a"),mZe=o("LayoutXLMTokenizerFast"),gZe=o(" (LayoutXLM model)"),hZe=l(),es=a("li"),Yoe=a("strong"),pZe=o("led"),uZe=o(" \u2014 "),WS=a("a"),_Ze=o("LEDTokenizer"),bZe=o(" or "),HS=a("a"),vZe=o("LEDTokenizerFast"),FZe=o(" (LED model)"),TZe=l(),os=a("li"),Koe=a("strong"),MZe=o("longformer"),EZe=o(" \u2014 "),US=a("a"),CZe=o("LongformerTokenizer"),wZe=o(" or "),JS=a("a"),AZe=o("LongformerTokenizerFast"),yZe=o(" (Longformer model)"),LZe=l(),bg=a("li"),Zoe=a("strong"),xZe=o("luke"),$Ze=o(" \u2014 "),YS=a("a"),kZe=o("LukeTokenizer"),SZe=o(" (LUKE model)"),RZe=l(),rs=a("li"),ere=a("strong"),BZe=o("lxmert"),PZe=o(" \u2014 "),KS=a("a"),IZe=o("LxmertTokenizer"),qZe=o(" or "),ZS=a("a"),NZe=o("LxmertTokenizerFast"),jZe=o(" (LXMERT model)"),DZe=l(),vg=a("li"),ore=a("strong"),GZe=o("m2m_100"),OZe=o(" \u2014 "),eR=a("a"),VZe=o("M2M100Tokenizer"),XZe=o(" (M2M100 model)"),zZe=l(),Fg=a("li"),rre=a("strong"),QZe=o("marian"),WZe=o(" \u2014 "),oR=a("a"),HZe=o("MarianTokenizer"),UZe=o(" (Marian model)"),JZe=l(),ts=a("li"),tre=a("strong"),YZe=o("mbart"),KZe=o(" \u2014 "),rR=a("a"),ZZe=o("MBartTokenizer"),eeo=o(" or "),tR=a("a"),oeo=o("MBartTokenizerFast"),reo=o(" (mBART model)"),teo=l(),as=a("li"),are=a("strong"),aeo=o("mbart50"),neo=o(" \u2014 "),aR=a("a"),seo=o("MBart50Tokenizer"),leo=o(" or "),nR=a("a"),ieo=o("MBart50TokenizerFast"),deo=o(" (mBART-50 model)"),ceo=l(),ns=a("li"),nre=a("strong"),feo=o("megatron-bert"),meo=o(" \u2014 "),sR=a("a"),geo=o("BertTokenizer"),heo=o(" or "),lR=a("a"),peo=o("BertTokenizerFast"),ueo=o(" (MegatronBert model)"),_eo=l(),Tg=a("li"),sre=a("strong"),beo=o("mluke"),veo=o(" \u2014 "),iR=a("a"),Feo=o("MLukeTokenizer"),Teo=o(" (mLUKE model)"),Meo=l(),ss=a("li"),lre=a("strong"),Eeo=o("mobilebert"),Ceo=o(" \u2014 "),dR=a("a"),weo=o("MobileBertTokenizer"),Aeo=o(" or "),cR=a("a"),yeo=o("MobileBertTokenizerFast"),Leo=o(" (MobileBERT model)"),xeo=l(),ls=a("li"),ire=a("strong"),$eo=o("mpnet"),keo=o(" \u2014 "),fR=a("a"),Seo=o("MPNetTokenizer"),Reo=o(" or "),mR=a("a"),Beo=o("MPNetTokenizerFast"),Peo=o(" (MPNet model)"),Ieo=l(),is=a("li"),dre=a("strong"),qeo=o("mt5"),Neo=o(" \u2014 "),gR=a("a"),jeo=o("MT5Tokenizer"),Deo=o(" or "),hR=a("a"),Geo=o("MT5TokenizerFast"),Oeo=o(" (mT5 model)"),Veo=l(),ds=a("li"),cre=a("strong"),Xeo=o("nystromformer"),zeo=o(" \u2014 "),pR=a("a"),Qeo=o("AlbertTokenizer"),Weo=o(" or "),uR=a("a"),Heo=o("AlbertTokenizerFast"),Ueo=o(" (Nystromformer model)"),Jeo=l(),cs=a("li"),fre=a("strong"),Yeo=o("openai-gpt"),Keo=o(" \u2014 "),_R=a("a"),Zeo=o("OpenAIGPTTokenizer"),eoo=o(" or "),bR=a("a"),ooo=o("OpenAIGPTTokenizerFast"),roo=o(" (OpenAI GPT model)"),too=l(),fs=a("li"),mre=a("strong"),aoo=o("pegasus"),noo=o(" \u2014 "),vR=a("a"),soo=o("PegasusTokenizer"),loo=o(" or "),FR=a("a"),ioo=o("PegasusTokenizerFast"),doo=o(" (Pegasus model)"),coo=l(),Mg=a("li"),gre=a("strong"),foo=o("perceiver"),moo=o(" \u2014 "),TR=a("a"),goo=o("PerceiverTokenizer"),hoo=o(" (Perceiver model)"),poo=l(),Eg=a("li"),hre=a("strong"),uoo=o("phobert"),_oo=o(" \u2014 "),MR=a("a"),boo=o("PhobertTokenizer"),voo=o(" (PhoBERT model)"),Foo=l(),Cg=a("li"),pre=a("strong"),Too=o("plbart"),Moo=o(" \u2014 "),ER=a("a"),Eoo=o("PLBartTokenizer"),Coo=o(" (PLBart model)"),woo=l(),wg=a("li"),ure=a("strong"),Aoo=o("prophetnet"),yoo=o(" \u2014 "),CR=a("a"),Loo=o("ProphetNetTokenizer"),xoo=o(" (ProphetNet model)"),$oo=l(),ms=a("li"),_re=a("strong"),koo=o("qdqbert"),Soo=o(" \u2014 "),wR=a("a"),Roo=o("BertTokenizer"),Boo=o(" or "),AR=a("a"),Poo=o("BertTokenizerFast"),Ioo=o(" (QDQBert model)"),qoo=l(),Ag=a("li"),bre=a("strong"),Noo=o("rag"),joo=o(" \u2014 "),yR=a("a"),Doo=o("RagTokenizer"),Goo=o(" (RAG model)"),Ooo=l(),gs=a("li"),vre=a("strong"),Voo=o("realm"),Xoo=o(" \u2014 "),LR=a("a"),zoo=o("RealmTokenizer"),Qoo=o(" or "),xR=a("a"),Woo=o("RealmTokenizerFast"),Hoo=o(" (Realm model)"),Uoo=l(),hs=a("li"),Fre=a("strong"),Joo=o("reformer"),Yoo=o(" \u2014 "),$R=a("a"),Koo=o("ReformerTokenizer"),Zoo=o(" or "),kR=a("a"),ero=o("ReformerTokenizerFast"),oro=o(" (Reformer model)"),rro=l(),ps=a("li"),Tre=a("strong"),tro=o("rembert"),aro=o(" \u2014 "),SR=a("a"),nro=o("RemBertTokenizer"),sro=o(" or "),RR=a("a"),lro=o("RemBertTokenizerFast"),iro=o(" (RemBERT model)"),dro=l(),us=a("li"),Mre=a("strong"),cro=o("retribert"),fro=o(" \u2014 "),BR=a("a"),mro=o("RetriBertTokenizer"),gro=o(" or "),PR=a("a"),hro=o("RetriBertTokenizerFast"),pro=o(" (RetriBERT model)"),uro=l(),_s=a("li"),Ere=a("strong"),_ro=o("roberta"),bro=o(" \u2014 "),IR=a("a"),vro=o("RobertaTokenizer"),Fro=o(" or "),qR=a("a"),Tro=o("RobertaTokenizerFast"),Mro=o(" (RoBERTa model)"),Ero=l(),bs=a("li"),Cre=a("strong"),Cro=o("roformer"),wro=o(" \u2014 "),NR=a("a"),Aro=o("RoFormerTokenizer"),yro=o(" or "),jR=a("a"),Lro=o("RoFormerTokenizerFast"),xro=o(" (RoFormer model)"),$ro=l(),yg=a("li"),wre=a("strong"),kro=o("speech_to_text"),Sro=o(" \u2014 "),DR=a("a"),Rro=o("Speech2TextTokenizer"),Bro=o(" (Speech2Text model)"),Pro=l(),Lg=a("li"),Are=a("strong"),Iro=o("speech_to_text_2"),qro=o(" \u2014 "),GR=a("a"),Nro=o("Speech2Text2Tokenizer"),jro=o(" (Speech2Text2 model)"),Dro=l(),vs=a("li"),yre=a("strong"),Gro=o("splinter"),Oro=o(" \u2014 "),OR=a("a"),Vro=o("SplinterTokenizer"),Xro=o(" or "),VR=a("a"),zro=o("SplinterTokenizerFast"),Qro=o(" (Splinter model)"),Wro=l(),Fs=a("li"),Lre=a("strong"),Hro=o("squeezebert"),Uro=o(" \u2014 "),XR=a("a"),Jro=o("SqueezeBertTokenizer"),Yro=o(" or "),zR=a("a"),Kro=o("SqueezeBertTokenizerFast"),Zro=o(" (SqueezeBERT model)"),eto=l(),Ts=a("li"),xre=a("strong"),oto=o("t5"),rto=o(" \u2014 "),QR=a("a"),tto=o("T5Tokenizer"),ato=o(" or "),WR=a("a"),nto=o("T5TokenizerFast"),sto=o(" (T5 model)"),lto=l(),xg=a("li"),$re=a("strong"),ito=o("tapas"),dto=o(" \u2014 "),HR=a("a"),cto=o("TapasTokenizer"),fto=o(" (TAPAS model)"),mto=l(),$g=a("li"),kre=a("strong"),gto=o("tapex"),hto=o(" \u2014 "),UR=a("a"),pto=o("TapexTokenizer"),uto=o(" (TAPEX model)"),_to=l(),kg=a("li"),Sre=a("strong"),bto=o("transfo-xl"),vto=o(" \u2014 "),JR=a("a"),Fto=o("TransfoXLTokenizer"),Tto=o(" (Transformer-XL model)"),Mto=l(),Ms=a("li"),Rre=a("strong"),Eto=o("visual_bert"),Cto=o(" \u2014 "),YR=a("a"),wto=o("BertTokenizer"),Ato=o(" or "),KR=a("a"),yto=o("BertTokenizerFast"),Lto=o(" (VisualBert model)"),xto=l(),Sg=a("li"),Bre=a("strong"),$to=o("wav2vec2"),kto=o(" \u2014 "),ZR=a("a"),Sto=o("Wav2Vec2CTCTokenizer"),Rto=o(" (Wav2Vec2 model)"),Bto=l(),Rg=a("li"),Pre=a("strong"),Pto=o("wav2vec2_phoneme"),Ito=o(" \u2014 "),eB=a("a"),qto=o("Wav2Vec2PhonemeCTCTokenizer"),Nto=o(" (Wav2Vec2Phoneme model)"),jto=l(),Es=a("li"),Ire=a("strong"),Dto=o("xglm"),Gto=o(" \u2014 "),oB=a("a"),Oto=o("XGLMTokenizer"),Vto=o(" or "),rB=a("a"),Xto=o("XGLMTokenizerFast"),zto=o(" (XGLM model)"),Qto=l(),Bg=a("li"),qre=a("strong"),Wto=o("xlm"),Hto=o(" \u2014 "),tB=a("a"),Uto=o("XLMTokenizer"),Jto=o(" (XLM model)"),Yto=l(),Pg=a("li"),Nre=a("strong"),Kto=o("xlm-prophetnet"),Zto=o(" \u2014 "),aB=a("a"),eao=o("XLMProphetNetTokenizer"),oao=o(" (XLMProphetNet model)"),rao=l(),Cs=a("li"),jre=a("strong"),tao=o("xlm-roberta"),aao=o(" \u2014 "),nB=a("a"),nao=o("XLMRobertaTokenizer"),sao=o(" or "),sB=a("a"),lao=o("XLMRobertaTokenizerFast"),iao=o(" (XLM-RoBERTa model)"),dao=l(),ws=a("li"),Dre=a("strong"),cao=o("xlm-roberta-xl"),fao=o(" \u2014 "),lB=a("a"),mao=o("RobertaTokenizer"),gao=o(" or "),iB=a("a"),hao=o("RobertaTokenizerFast"),pao=o(" (XLM-RoBERTa-XL model)"),uao=l(),As=a("li"),Gre=a("strong"),_ao=o("xlnet"),bao=o(" \u2014 "),dB=a("a"),vao=o("XLNetTokenizer"),Fao=o(" or "),cB=a("a"),Tao=o("XLNetTokenizerFast"),Mao=o(" (XLNet model)"),Eao=l(),ys=a("li"),Ore=a("strong"),Cao=o("yoso"),wao=o(" \u2014 "),fB=a("a"),Aao=o("AlbertTokenizer"),yao=o(" or "),mB=a("a"),Lao=o("AlbertTokenizerFast"),xao=o(" (YOSO model)"),$ao=l(),F(Ig.$$.fragment),kao=l(),qg=a("div"),F(BA.$$.fragment),Sao=l(),Vre=a("p"),Rao=o("Register a new tokenizer in this mapping."),hBe=l(),mi=a("h2"),Ng=a("a"),Xre=a("span"),F(PA.$$.fragment),Bao=l(),zre=a("span"),Pao=o("AutoFeatureExtractor"),pBe=l(),Ao=a("div"),F(IA.$$.fragment),Iao=l(),qA=a("p"),qao=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),gB=a("a"),Nao=o("AutoFeatureExtractor.from_pretrained()"),jao=o(" class method."),Dao=l(),NA=a("p"),Gao=o("This class cannot be instantiated directly using "),Qre=a("code"),Oao=o("__init__()"),Vao=o(" (throws an error)."),Xao=l(),Qe=a("div"),F(jA.$$.fragment),zao=l(),Wre=a("p"),Qao=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Wao=l(),Ma=a("p"),Hao=o("The feature extractor class to instantiate is selected based on the "),Hre=a("code"),Uao=o("model_type"),Jao=o(` property of the config object
(either passed as an argument or loaded from `),Ure=a("code"),Yao=o("pretrained_model_name_or_path"),Kao=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Jre=a("code"),Zao=o("pretrained_model_name_or_path"),eno=o(":"),ono=l(),te=a("ul"),jg=a("li"),Yre=a("strong"),rno=o("beit"),tno=o(" \u2014 "),hB=a("a"),ano=o("BeitFeatureExtractor"),nno=o(" (BEiT model)"),sno=l(),Dg=a("li"),Kre=a("strong"),lno=o("clip"),ino=o(" \u2014 "),pB=a("a"),dno=o("CLIPFeatureExtractor"),cno=o(" (CLIP model)"),fno=l(),Gg=a("li"),Zre=a("strong"),mno=o("convnext"),gno=o(" \u2014 "),uB=a("a"),hno=o("ConvNextFeatureExtractor"),pno=o(" (ConvNext model)"),uno=l(),Og=a("li"),ete=a("strong"),_no=o("data2vec-audio"),bno=o(" \u2014 "),_B=a("a"),vno=o("Wav2Vec2FeatureExtractor"),Fno=o(" (Data2VecAudio model)"),Tno=l(),Vg=a("li"),ote=a("strong"),Mno=o("data2vec-vision"),Eno=o(" \u2014 "),bB=a("a"),Cno=o("BeitFeatureExtractor"),wno=o(" (Data2VecVision model)"),Ano=l(),Xg=a("li"),rte=a("strong"),yno=o("deit"),Lno=o(" \u2014 "),vB=a("a"),xno=o("DeiTFeatureExtractor"),$no=o(" (DeiT model)"),kno=l(),zg=a("li"),tte=a("strong"),Sno=o("detr"),Rno=o(" \u2014 "),FB=a("a"),Bno=o("DetrFeatureExtractor"),Pno=o(" (DETR model)"),Ino=l(),Qg=a("li"),ate=a("strong"),qno=o("dpt"),Nno=o(" \u2014 "),TB=a("a"),jno=o("DPTFeatureExtractor"),Dno=o(" (DPT model)"),Gno=l(),Wg=a("li"),nte=a("strong"),Ono=o("glpn"),Vno=o(" \u2014 "),MB=a("a"),Xno=o("GLPNFeatureExtractor"),zno=o(" (GLPN model)"),Qno=l(),Hg=a("li"),ste=a("strong"),Wno=o("hubert"),Hno=o(" \u2014 "),EB=a("a"),Uno=o("Wav2Vec2FeatureExtractor"),Jno=o(" (Hubert model)"),Yno=l(),Ug=a("li"),lte=a("strong"),Kno=o("layoutlmv2"),Zno=o(" \u2014 "),CB=a("a"),eso=o("LayoutLMv2FeatureExtractor"),oso=o(" (LayoutLMv2 model)"),rso=l(),Jg=a("li"),ite=a("strong"),tso=o("maskformer"),aso=o(" \u2014 "),wB=a("a"),nso=o("MaskFormerFeatureExtractor"),sso=o(" (MaskFormer model)"),lso=l(),Yg=a("li"),dte=a("strong"),iso=o("perceiver"),dso=o(" \u2014 "),AB=a("a"),cso=o("PerceiverFeatureExtractor"),fso=o(" (Perceiver model)"),mso=l(),Kg=a("li"),cte=a("strong"),gso=o("poolformer"),hso=o(" \u2014 "),yB=a("a"),pso=o("PoolFormerFeatureExtractor"),uso=o(" (PoolFormer model)"),_so=l(),Zg=a("li"),fte=a("strong"),bso=o("regnet"),vso=o(" \u2014 "),LB=a("a"),Fso=o("ConvNextFeatureExtractor"),Tso=o(" (RegNet model)"),Mso=l(),eh=a("li"),mte=a("strong"),Eso=o("resnet"),Cso=o(" \u2014 "),xB=a("a"),wso=o("ConvNextFeatureExtractor"),Aso=o(" (ResNet model)"),yso=l(),oh=a("li"),gte=a("strong"),Lso=o("segformer"),xso=o(" \u2014 "),$B=a("a"),$so=o("SegformerFeatureExtractor"),kso=o(" (SegFormer model)"),Sso=l(),rh=a("li"),hte=a("strong"),Rso=o("speech_to_text"),Bso=o(" \u2014 "),kB=a("a"),Pso=o("Speech2TextFeatureExtractor"),Iso=o(" (Speech2Text model)"),qso=l(),th=a("li"),pte=a("strong"),Nso=o("swin"),jso=o(" \u2014 "),SB=a("a"),Dso=o("ViTFeatureExtractor"),Gso=o(" (Swin model)"),Oso=l(),ah=a("li"),ute=a("strong"),Vso=o("van"),Xso=o(" \u2014 "),RB=a("a"),zso=o("ConvNextFeatureExtractor"),Qso=o(" (VAN model)"),Wso=l(),nh=a("li"),_te=a("strong"),Hso=o("vit"),Uso=o(" \u2014 "),BB=a("a"),Jso=o("ViTFeatureExtractor"),Yso=o(" (ViT model)"),Kso=l(),sh=a("li"),bte=a("strong"),Zso=o("vit_mae"),elo=o(" \u2014 "),PB=a("a"),olo=o("ViTFeatureExtractor"),rlo=o(" (ViTMAE model)"),tlo=l(),lh=a("li"),vte=a("strong"),alo=o("wav2vec2"),nlo=o(" \u2014 "),IB=a("a"),slo=o("Wav2Vec2FeatureExtractor"),llo=o(" (Wav2Vec2 model)"),ilo=l(),ih=a("li"),Fte=a("strong"),dlo=o("yolos"),clo=o(" \u2014 "),qB=a("a"),flo=o("YolosFeatureExtractor"),mlo=o(" (YOLOS model)"),glo=l(),F(dh.$$.fragment),hlo=l(),F(ch.$$.fragment),plo=l(),fh=a("div"),F(DA.$$.fragment),ulo=l(),Tte=a("p"),_lo=o("Register a new feature extractor for this class."),uBe=l(),gi=a("h2"),mh=a("a"),Mte=a("span"),F(GA.$$.fragment),blo=l(),Ete=a("span"),vlo=o("AutoProcessor"),_Be=l(),yo=a("div"),F(OA.$$.fragment),Flo=l(),VA=a("p"),Tlo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),NB=a("a"),Mlo=o("AutoProcessor.from_pretrained()"),Elo=o(" class method."),Clo=l(),XA=a("p"),wlo=o("This class cannot be instantiated directly using "),Cte=a("code"),Alo=o("__init__()"),ylo=o(" (throws an error)."),Llo=l(),We=a("div"),F(zA.$$.fragment),xlo=l(),wte=a("p"),$lo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),klo=l(),hi=a("p"),Slo=o("The processor class to instantiate is selected based on the "),Ate=a("code"),Rlo=o("model_type"),Blo=o(` property of the config object (either
passed as an argument or loaded from `),yte=a("code"),Plo=o("pretrained_model_name_or_path"),Ilo=o(" if possible):"),qlo=l(),be=a("ul"),gh=a("li"),Lte=a("strong"),Nlo=o("clip"),jlo=o(" \u2014 "),jB=a("a"),Dlo=o("CLIPProcessor"),Glo=o(" (CLIP model)"),Olo=l(),hh=a("li"),xte=a("strong"),Vlo=o("layoutlmv2"),Xlo=o(" \u2014 "),DB=a("a"),zlo=o("LayoutLMv2Processor"),Qlo=o(" (LayoutLMv2 model)"),Wlo=l(),ph=a("li"),$te=a("strong"),Hlo=o("layoutxlm"),Ulo=o(" \u2014 "),GB=a("a"),Jlo=o("LayoutXLMProcessor"),Ylo=o(" (LayoutXLM model)"),Klo=l(),uh=a("li"),kte=a("strong"),Zlo=o("sew"),eio=o(" \u2014 "),OB=a("a"),oio=o("Wav2Vec2Processor"),rio=o(" (SEW model)"),tio=l(),_h=a("li"),Ste=a("strong"),aio=o("sew-d"),nio=o(" \u2014 "),VB=a("a"),sio=o("Wav2Vec2Processor"),lio=o(" (SEW-D model)"),iio=l(),bh=a("li"),Rte=a("strong"),dio=o("speech_to_text"),cio=o(" \u2014 "),XB=a("a"),fio=o("Speech2TextProcessor"),mio=o(" (Speech2Text model)"),gio=l(),vh=a("li"),Bte=a("strong"),hio=o("speech_to_text_2"),pio=o(" \u2014 "),zB=a("a"),uio=o("Speech2Text2Processor"),_io=o(" (Speech2Text2 model)"),bio=l(),Fh=a("li"),Pte=a("strong"),vio=o("trocr"),Fio=o(" \u2014 "),QB=a("a"),Tio=o("TrOCRProcessor"),Mio=o(" (TrOCR model)"),Eio=l(),Th=a("li"),Ite=a("strong"),Cio=o("unispeech"),wio=o(" \u2014 "),WB=a("a"),Aio=o("Wav2Vec2Processor"),yio=o(" (UniSpeech model)"),Lio=l(),Mh=a("li"),qte=a("strong"),xio=o("unispeech-sat"),$io=o(" \u2014 "),HB=a("a"),kio=o("Wav2Vec2Processor"),Sio=o(" (UniSpeechSat model)"),Rio=l(),Eh=a("li"),Nte=a("strong"),Bio=o("vilt"),Pio=o(" \u2014 "),UB=a("a"),Iio=o("ViltProcessor"),qio=o(" (ViLT model)"),Nio=l(),Ch=a("li"),jte=a("strong"),jio=o("vision-text-dual-encoder"),Dio=o(" \u2014 "),JB=a("a"),Gio=o("VisionTextDualEncoderProcessor"),Oio=o(" (VisionTextDualEncoder model)"),Vio=l(),wh=a("li"),Dte=a("strong"),Xio=o("wav2vec2"),zio=o(" \u2014 "),YB=a("a"),Qio=o("Wav2Vec2Processor"),Wio=o(" (Wav2Vec2 model)"),Hio=l(),Ah=a("li"),Gte=a("strong"),Uio=o("wavlm"),Jio=o(" \u2014 "),KB=a("a"),Yio=o("Wav2Vec2Processor"),Kio=o(" (WavLM model)"),Zio=l(),F(yh.$$.fragment),edo=l(),F(Lh.$$.fragment),odo=l(),xh=a("div"),F(QA.$$.fragment),rdo=l(),Ote=a("p"),tdo=o("Register a new processor for this class."),bBe=l(),pi=a("h2"),$h=a("a"),Vte=a("span"),F(WA.$$.fragment),ado=l(),Xte=a("span"),ndo=o("AutoModel"),vBe=l(),Lo=a("div"),F(HA.$$.fragment),sdo=l(),ui=a("p"),ldo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZB=a("a"),ido=o("from_pretrained()"),ddo=o(" class method or the "),eP=a("a"),cdo=o("from_config()"),fdo=o(` class
method.`),mdo=l(),UA=a("p"),gdo=o("This class cannot be instantiated directly using "),zte=a("code"),hdo=o("__init__()"),pdo=o(" (throws an error)."),udo=l(),Zr=a("div"),F(JA.$$.fragment),_do=l(),Qte=a("p"),bdo=o("Instantiates one of the base model classes of the library from a configuration."),vdo=l(),_i=a("p"),Fdo=o(`Note:
Loading a model from its configuration file does `),Wte=a("strong"),Tdo=o("not"),Mdo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oP=a("a"),Edo=o("from_pretrained()"),Cdo=o(" to load the model weights."),wdo=l(),F(kh.$$.fragment),Ado=l(),He=a("div"),F(YA.$$.fragment),ydo=l(),Hte=a("p"),Ldo=o("Instantiate one of the base model classes of the library from a pretrained model."),xdo=l(),Ea=a("p"),$do=o("The model class to instantiate is selected based on the "),Ute=a("code"),kdo=o("model_type"),Sdo=o(` property of the config object (either
passed as an argument or loaded from `),Jte=a("code"),Rdo=o("pretrained_model_name_or_path"),Bdo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yte=a("code"),Pdo=o("pretrained_model_name_or_path"),Ido=o(":"),qdo=l(),x=a("ul"),Sh=a("li"),Kte=a("strong"),Ndo=o("albert"),jdo=o(" \u2014 "),rP=a("a"),Ddo=o("AlbertModel"),Gdo=o(" (ALBERT model)"),Odo=l(),Rh=a("li"),Zte=a("strong"),Vdo=o("bart"),Xdo=o(" \u2014 "),tP=a("a"),zdo=o("BartModel"),Qdo=o(" (BART model)"),Wdo=l(),Bh=a("li"),eae=a("strong"),Hdo=o("beit"),Udo=o(" \u2014 "),aP=a("a"),Jdo=o("BeitModel"),Ydo=o(" (BEiT model)"),Kdo=l(),Ph=a("li"),oae=a("strong"),Zdo=o("bert"),eco=o(" \u2014 "),nP=a("a"),oco=o("BertModel"),rco=o(" (BERT model)"),tco=l(),Ih=a("li"),rae=a("strong"),aco=o("bert-generation"),nco=o(" \u2014 "),sP=a("a"),sco=o("BertGenerationEncoder"),lco=o(" (Bert Generation model)"),ico=l(),qh=a("li"),tae=a("strong"),dco=o("big_bird"),cco=o(" \u2014 "),lP=a("a"),fco=o("BigBirdModel"),mco=o(" (BigBird model)"),gco=l(),Nh=a("li"),aae=a("strong"),hco=o("bigbird_pegasus"),pco=o(" \u2014 "),iP=a("a"),uco=o("BigBirdPegasusModel"),_co=o(" (BigBirdPegasus model)"),bco=l(),jh=a("li"),nae=a("strong"),vco=o("blenderbot"),Fco=o(" \u2014 "),dP=a("a"),Tco=o("BlenderbotModel"),Mco=o(" (Blenderbot model)"),Eco=l(),Dh=a("li"),sae=a("strong"),Cco=o("blenderbot-small"),wco=o(" \u2014 "),cP=a("a"),Aco=o("BlenderbotSmallModel"),yco=o(" (BlenderbotSmall model)"),Lco=l(),Gh=a("li"),lae=a("strong"),xco=o("camembert"),$co=o(" \u2014 "),fP=a("a"),kco=o("CamembertModel"),Sco=o(" (CamemBERT model)"),Rco=l(),Oh=a("li"),iae=a("strong"),Bco=o("canine"),Pco=o(" \u2014 "),mP=a("a"),Ico=o("CanineModel"),qco=o(" (Canine model)"),Nco=l(),Vh=a("li"),dae=a("strong"),jco=o("clip"),Dco=o(" \u2014 "),gP=a("a"),Gco=o("CLIPModel"),Oco=o(" (CLIP model)"),Vco=l(),Xh=a("li"),cae=a("strong"),Xco=o("convbert"),zco=o(" \u2014 "),hP=a("a"),Qco=o("ConvBertModel"),Wco=o(" (ConvBERT model)"),Hco=l(),zh=a("li"),fae=a("strong"),Uco=o("convnext"),Jco=o(" \u2014 "),pP=a("a"),Yco=o("ConvNextModel"),Kco=o(" (ConvNext model)"),Zco=l(),Qh=a("li"),mae=a("strong"),efo=o("ctrl"),ofo=o(" \u2014 "),uP=a("a"),rfo=o("CTRLModel"),tfo=o(" (CTRL model)"),afo=l(),Wh=a("li"),gae=a("strong"),nfo=o("data2vec-audio"),sfo=o(" \u2014 "),_P=a("a"),lfo=o("Data2VecAudioModel"),ifo=o(" (Data2VecAudio model)"),dfo=l(),Hh=a("li"),hae=a("strong"),cfo=o("data2vec-text"),ffo=o(" \u2014 "),bP=a("a"),mfo=o("Data2VecTextModel"),gfo=o(" (Data2VecText model)"),hfo=l(),Uh=a("li"),pae=a("strong"),pfo=o("data2vec-vision"),ufo=o(" \u2014 "),vP=a("a"),_fo=o("Data2VecVisionModel"),bfo=o(" (Data2VecVision model)"),vfo=l(),Jh=a("li"),uae=a("strong"),Ffo=o("deberta"),Tfo=o(" \u2014 "),FP=a("a"),Mfo=o("DebertaModel"),Efo=o(" (DeBERTa model)"),Cfo=l(),Yh=a("li"),_ae=a("strong"),wfo=o("deberta-v2"),Afo=o(" \u2014 "),TP=a("a"),yfo=o("DebertaV2Model"),Lfo=o(" (DeBERTa-v2 model)"),xfo=l(),Kh=a("li"),bae=a("strong"),$fo=o("decision_transformer"),kfo=o(" \u2014 "),MP=a("a"),Sfo=o("DecisionTransformerModel"),Rfo=o(" (Decision Transformer model)"),Bfo=l(),Zh=a("li"),vae=a("strong"),Pfo=o("deit"),Ifo=o(" \u2014 "),EP=a("a"),qfo=o("DeiTModel"),Nfo=o(" (DeiT model)"),jfo=l(),ep=a("li"),Fae=a("strong"),Dfo=o("detr"),Gfo=o(" \u2014 "),CP=a("a"),Ofo=o("DetrModel"),Vfo=o(" (DETR model)"),Xfo=l(),op=a("li"),Tae=a("strong"),zfo=o("distilbert"),Qfo=o(" \u2014 "),wP=a("a"),Wfo=o("DistilBertModel"),Hfo=o(" (DistilBERT model)"),Ufo=l(),rp=a("li"),Mae=a("strong"),Jfo=o("dpr"),Yfo=o(" \u2014 "),AP=a("a"),Kfo=o("DPRQuestionEncoder"),Zfo=o(" (DPR model)"),emo=l(),tp=a("li"),Eae=a("strong"),omo=o("dpt"),rmo=o(" \u2014 "),yP=a("a"),tmo=o("DPTModel"),amo=o(" (DPT model)"),nmo=l(),ap=a("li"),Cae=a("strong"),smo=o("electra"),lmo=o(" \u2014 "),LP=a("a"),imo=o("ElectraModel"),dmo=o(" (ELECTRA model)"),cmo=l(),np=a("li"),wae=a("strong"),fmo=o("flaubert"),mmo=o(" \u2014 "),xP=a("a"),gmo=o("FlaubertModel"),hmo=o(" (FlauBERT model)"),pmo=l(),sp=a("li"),Aae=a("strong"),umo=o("fnet"),_mo=o(" \u2014 "),$P=a("a"),bmo=o("FNetModel"),vmo=o(" (FNet model)"),Fmo=l(),lp=a("li"),yae=a("strong"),Tmo=o("fsmt"),Mmo=o(" \u2014 "),kP=a("a"),Emo=o("FSMTModel"),Cmo=o(" (FairSeq Machine-Translation model)"),wmo=l(),Ls=a("li"),Lae=a("strong"),Amo=o("funnel"),ymo=o(" \u2014 "),SP=a("a"),Lmo=o("FunnelModel"),xmo=o(" or "),RP=a("a"),$mo=o("FunnelBaseModel"),kmo=o(" (Funnel Transformer model)"),Smo=l(),ip=a("li"),xae=a("strong"),Rmo=o("glpn"),Bmo=o(" \u2014 "),BP=a("a"),Pmo=o("GLPNModel"),Imo=o(" (GLPN model)"),qmo=l(),dp=a("li"),$ae=a("strong"),Nmo=o("gpt2"),jmo=o(" \u2014 "),PP=a("a"),Dmo=o("GPT2Model"),Gmo=o(" (OpenAI GPT-2 model)"),Omo=l(),cp=a("li"),kae=a("strong"),Vmo=o("gpt_neo"),Xmo=o(" \u2014 "),IP=a("a"),zmo=o("GPTNeoModel"),Qmo=o(" (GPT Neo model)"),Wmo=l(),fp=a("li"),Sae=a("strong"),Hmo=o("gptj"),Umo=o(" \u2014 "),qP=a("a"),Jmo=o("GPTJModel"),Ymo=o(" (GPT-J model)"),Kmo=l(),mp=a("li"),Rae=a("strong"),Zmo=o("hubert"),ego=o(" \u2014 "),NP=a("a"),ogo=o("HubertModel"),rgo=o(" (Hubert model)"),tgo=l(),gp=a("li"),Bae=a("strong"),ago=o("ibert"),ngo=o(" \u2014 "),jP=a("a"),sgo=o("IBertModel"),lgo=o(" (I-BERT model)"),igo=l(),hp=a("li"),Pae=a("strong"),dgo=o("imagegpt"),cgo=o(" \u2014 "),DP=a("a"),fgo=o("ImageGPTModel"),mgo=o(" (ImageGPT model)"),ggo=l(),pp=a("li"),Iae=a("strong"),hgo=o("layoutlm"),pgo=o(" \u2014 "),GP=a("a"),ugo=o("LayoutLMModel"),_go=o(" (LayoutLM model)"),bgo=l(),up=a("li"),qae=a("strong"),vgo=o("layoutlmv2"),Fgo=o(" \u2014 "),OP=a("a"),Tgo=o("LayoutLMv2Model"),Mgo=o(" (LayoutLMv2 model)"),Ego=l(),_p=a("li"),Nae=a("strong"),Cgo=o("led"),wgo=o(" \u2014 "),VP=a("a"),Ago=o("LEDModel"),ygo=o(" (LED model)"),Lgo=l(),bp=a("li"),jae=a("strong"),xgo=o("longformer"),$go=o(" \u2014 "),XP=a("a"),kgo=o("LongformerModel"),Sgo=o(" (Longformer model)"),Rgo=l(),vp=a("li"),Dae=a("strong"),Bgo=o("luke"),Pgo=o(" \u2014 "),zP=a("a"),Igo=o("LukeModel"),qgo=o(" (LUKE model)"),Ngo=l(),Fp=a("li"),Gae=a("strong"),jgo=o("lxmert"),Dgo=o(" \u2014 "),QP=a("a"),Ggo=o("LxmertModel"),Ogo=o(" (LXMERT model)"),Vgo=l(),Tp=a("li"),Oae=a("strong"),Xgo=o("m2m_100"),zgo=o(" \u2014 "),WP=a("a"),Qgo=o("M2M100Model"),Wgo=o(" (M2M100 model)"),Hgo=l(),Mp=a("li"),Vae=a("strong"),Ugo=o("marian"),Jgo=o(" \u2014 "),HP=a("a"),Ygo=o("MarianModel"),Kgo=o(" (Marian model)"),Zgo=l(),Ep=a("li"),Xae=a("strong"),eho=o("maskformer"),oho=o(" \u2014 "),UP=a("a"),rho=o("MaskFormerModel"),tho=o(" (MaskFormer model)"),aho=l(),Cp=a("li"),zae=a("strong"),nho=o("mbart"),sho=o(" \u2014 "),JP=a("a"),lho=o("MBartModel"),iho=o(" (mBART model)"),dho=l(),wp=a("li"),Qae=a("strong"),cho=o("megatron-bert"),fho=o(" \u2014 "),YP=a("a"),mho=o("MegatronBertModel"),gho=o(" (MegatronBert model)"),hho=l(),Ap=a("li"),Wae=a("strong"),pho=o("mobilebert"),uho=o(" \u2014 "),KP=a("a"),_ho=o("MobileBertModel"),bho=o(" (MobileBERT model)"),vho=l(),yp=a("li"),Hae=a("strong"),Fho=o("mpnet"),Tho=o(" \u2014 "),ZP=a("a"),Mho=o("MPNetModel"),Eho=o(" (MPNet model)"),Cho=l(),Lp=a("li"),Uae=a("strong"),who=o("mt5"),Aho=o(" \u2014 "),eI=a("a"),yho=o("MT5Model"),Lho=o(" (mT5 model)"),xho=l(),xp=a("li"),Jae=a("strong"),$ho=o("nystromformer"),kho=o(" \u2014 "),oI=a("a"),Sho=o("NystromformerModel"),Rho=o(" (Nystromformer model)"),Bho=l(),$p=a("li"),Yae=a("strong"),Pho=o("openai-gpt"),Iho=o(" \u2014 "),rI=a("a"),qho=o("OpenAIGPTModel"),Nho=o(" (OpenAI GPT model)"),jho=l(),kp=a("li"),Kae=a("strong"),Dho=o("pegasus"),Gho=o(" \u2014 "),tI=a("a"),Oho=o("PegasusModel"),Vho=o(" (Pegasus model)"),Xho=l(),Sp=a("li"),Zae=a("strong"),zho=o("perceiver"),Qho=o(" \u2014 "),aI=a("a"),Who=o("PerceiverModel"),Hho=o(" (Perceiver model)"),Uho=l(),Rp=a("li"),ene=a("strong"),Jho=o("plbart"),Yho=o(" \u2014 "),nI=a("a"),Kho=o("PLBartModel"),Zho=o(" (PLBart model)"),epo=l(),Bp=a("li"),one=a("strong"),opo=o("poolformer"),rpo=o(" \u2014 "),sI=a("a"),tpo=o("PoolFormerModel"),apo=o(" (PoolFormer model)"),npo=l(),Pp=a("li"),rne=a("strong"),spo=o("prophetnet"),lpo=o(" \u2014 "),lI=a("a"),ipo=o("ProphetNetModel"),dpo=o(" (ProphetNet model)"),cpo=l(),Ip=a("li"),tne=a("strong"),fpo=o("qdqbert"),mpo=o(" \u2014 "),iI=a("a"),gpo=o("QDQBertModel"),hpo=o(" (QDQBert model)"),ppo=l(),qp=a("li"),ane=a("strong"),upo=o("reformer"),_po=o(" \u2014 "),dI=a("a"),bpo=o("ReformerModel"),vpo=o(" (Reformer model)"),Fpo=l(),Np=a("li"),nne=a("strong"),Tpo=o("regnet"),Mpo=o(" \u2014 "),cI=a("a"),Epo=o("RegNetModel"),Cpo=o(" (RegNet model)"),wpo=l(),jp=a("li"),sne=a("strong"),Apo=o("rembert"),ypo=o(" \u2014 "),fI=a("a"),Lpo=o("RemBertModel"),xpo=o(" (RemBERT model)"),$po=l(),Dp=a("li"),lne=a("strong"),kpo=o("resnet"),Spo=o(" \u2014 "),mI=a("a"),Rpo=o("ResNetModel"),Bpo=o(" (ResNet model)"),Ppo=l(),Gp=a("li"),ine=a("strong"),Ipo=o("retribert"),qpo=o(" \u2014 "),gI=a("a"),Npo=o("RetriBertModel"),jpo=o(" (RetriBERT model)"),Dpo=l(),Op=a("li"),dne=a("strong"),Gpo=o("roberta"),Opo=o(" \u2014 "),hI=a("a"),Vpo=o("RobertaModel"),Xpo=o(" (RoBERTa model)"),zpo=l(),Vp=a("li"),cne=a("strong"),Qpo=o("roformer"),Wpo=o(" \u2014 "),pI=a("a"),Hpo=o("RoFormerModel"),Upo=o(" (RoFormer model)"),Jpo=l(),Xp=a("li"),fne=a("strong"),Ypo=o("segformer"),Kpo=o(" \u2014 "),uI=a("a"),Zpo=o("SegformerModel"),euo=o(" (SegFormer model)"),ouo=l(),zp=a("li"),mne=a("strong"),ruo=o("sew"),tuo=o(" \u2014 "),_I=a("a"),auo=o("SEWModel"),nuo=o(" (SEW model)"),suo=l(),Qp=a("li"),gne=a("strong"),luo=o("sew-d"),iuo=o(" \u2014 "),bI=a("a"),duo=o("SEWDModel"),cuo=o(" (SEW-D model)"),fuo=l(),Wp=a("li"),hne=a("strong"),muo=o("speech_to_text"),guo=o(" \u2014 "),vI=a("a"),huo=o("Speech2TextModel"),puo=o(" (Speech2Text model)"),uuo=l(),Hp=a("li"),pne=a("strong"),_uo=o("splinter"),buo=o(" \u2014 "),FI=a("a"),vuo=o("SplinterModel"),Fuo=o(" (Splinter model)"),Tuo=l(),Up=a("li"),une=a("strong"),Muo=o("squeezebert"),Euo=o(" \u2014 "),TI=a("a"),Cuo=o("SqueezeBertModel"),wuo=o(" (SqueezeBERT model)"),Auo=l(),Jp=a("li"),_ne=a("strong"),yuo=o("swin"),Luo=o(" \u2014 "),MI=a("a"),xuo=o("SwinModel"),$uo=o(" (Swin model)"),kuo=l(),Yp=a("li"),bne=a("strong"),Suo=o("t5"),Ruo=o(" \u2014 "),EI=a("a"),Buo=o("T5Model"),Puo=o(" (T5 model)"),Iuo=l(),Kp=a("li"),vne=a("strong"),quo=o("tapas"),Nuo=o(" \u2014 "),CI=a("a"),juo=o("TapasModel"),Duo=o(" (TAPAS model)"),Guo=l(),Zp=a("li"),Fne=a("strong"),Ouo=o("transfo-xl"),Vuo=o(" \u2014 "),wI=a("a"),Xuo=o("TransfoXLModel"),zuo=o(" (Transformer-XL model)"),Quo=l(),eu=a("li"),Tne=a("strong"),Wuo=o("unispeech"),Huo=o(" \u2014 "),AI=a("a"),Uuo=o("UniSpeechModel"),Juo=o(" (UniSpeech model)"),Yuo=l(),ou=a("li"),Mne=a("strong"),Kuo=o("unispeech-sat"),Zuo=o(" \u2014 "),yI=a("a"),e_o=o("UniSpeechSatModel"),o_o=o(" (UniSpeechSat model)"),r_o=l(),ru=a("li"),Ene=a("strong"),t_o=o("van"),a_o=o(" \u2014 "),LI=a("a"),n_o=o("VanModel"),s_o=o(" (VAN model)"),l_o=l(),tu=a("li"),Cne=a("strong"),i_o=o("vilt"),d_o=o(" \u2014 "),xI=a("a"),c_o=o("ViltModel"),f_o=o(" (ViLT model)"),m_o=l(),au=a("li"),wne=a("strong"),g_o=o("vision-text-dual-encoder"),h_o=o(" \u2014 "),$I=a("a"),p_o=o("VisionTextDualEncoderModel"),u_o=o(" (VisionTextDualEncoder model)"),__o=l(),nu=a("li"),Ane=a("strong"),b_o=o("visual_bert"),v_o=o(" \u2014 "),kI=a("a"),F_o=o("VisualBertModel"),T_o=o(" (VisualBert model)"),M_o=l(),su=a("li"),yne=a("strong"),E_o=o("vit"),C_o=o(" \u2014 "),SI=a("a"),w_o=o("ViTModel"),A_o=o(" (ViT model)"),y_o=l(),lu=a("li"),Lne=a("strong"),L_o=o("vit_mae"),x_o=o(" \u2014 "),RI=a("a"),$_o=o("ViTMAEModel"),k_o=o(" (ViTMAE model)"),S_o=l(),iu=a("li"),xne=a("strong"),R_o=o("wav2vec2"),B_o=o(" \u2014 "),BI=a("a"),P_o=o("Wav2Vec2Model"),I_o=o(" (Wav2Vec2 model)"),q_o=l(),du=a("li"),$ne=a("strong"),N_o=o("wavlm"),j_o=o(" \u2014 "),PI=a("a"),D_o=o("WavLMModel"),G_o=o(" (WavLM model)"),O_o=l(),cu=a("li"),kne=a("strong"),V_o=o("xglm"),X_o=o(" \u2014 "),II=a("a"),z_o=o("XGLMModel"),Q_o=o(" (XGLM model)"),W_o=l(),fu=a("li"),Sne=a("strong"),H_o=o("xlm"),U_o=o(" \u2014 "),qI=a("a"),J_o=o("XLMModel"),Y_o=o(" (XLM model)"),K_o=l(),mu=a("li"),Rne=a("strong"),Z_o=o("xlm-prophetnet"),e1o=o(" \u2014 "),NI=a("a"),o1o=o("XLMProphetNetModel"),r1o=o(" (XLMProphetNet model)"),t1o=l(),gu=a("li"),Bne=a("strong"),a1o=o("xlm-roberta"),n1o=o(" \u2014 "),jI=a("a"),s1o=o("XLMRobertaModel"),l1o=o(" (XLM-RoBERTa model)"),i1o=l(),hu=a("li"),Pne=a("strong"),d1o=o("xlm-roberta-xl"),c1o=o(" \u2014 "),DI=a("a"),f1o=o("XLMRobertaXLModel"),m1o=o(" (XLM-RoBERTa-XL model)"),g1o=l(),pu=a("li"),Ine=a("strong"),h1o=o("xlnet"),p1o=o(" \u2014 "),GI=a("a"),u1o=o("XLNetModel"),_1o=o(" (XLNet model)"),b1o=l(),uu=a("li"),qne=a("strong"),v1o=o("yolos"),F1o=o(" \u2014 "),OI=a("a"),T1o=o("YolosModel"),M1o=o(" (YOLOS model)"),E1o=l(),_u=a("li"),Nne=a("strong"),C1o=o("yoso"),w1o=o(" \u2014 "),VI=a("a"),A1o=o("YosoModel"),y1o=o(" (YOSO model)"),L1o=l(),bu=a("p"),x1o=o("The model is set in evaluation mode by default using "),jne=a("code"),$1o=o("model.eval()"),k1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dne=a("code"),S1o=o("model.train()"),R1o=l(),F(vu.$$.fragment),FBe=l(),bi=a("h2"),Fu=a("a"),Gne=a("span"),F(KA.$$.fragment),B1o=l(),One=a("span"),P1o=o("AutoModelForPreTraining"),TBe=l(),xo=a("div"),F(ZA.$$.fragment),I1o=l(),vi=a("p"),q1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),XI=a("a"),N1o=o("from_pretrained()"),j1o=o(" class method or the "),zI=a("a"),D1o=o("from_config()"),G1o=o(` class
method.`),O1o=l(),e6=a("p"),V1o=o("This class cannot be instantiated directly using "),Vne=a("code"),X1o=o("__init__()"),z1o=o(" (throws an error)."),Q1o=l(),et=a("div"),F(o6.$$.fragment),W1o=l(),Xne=a("p"),H1o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),U1o=l(),Fi=a("p"),J1o=o(`Note:
Loading a model from its configuration file does `),zne=a("strong"),Y1o=o("not"),K1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QI=a("a"),Z1o=o("from_pretrained()"),e7o=o(" to load the model weights."),o7o=l(),F(Tu.$$.fragment),r7o=l(),Ue=a("div"),F(r6.$$.fragment),t7o=l(),Qne=a("p"),a7o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),n7o=l(),Ca=a("p"),s7o=o("The model class to instantiate is selected based on the "),Wne=a("code"),l7o=o("model_type"),i7o=o(` property of the config object (either
passed as an argument or loaded from `),Hne=a("code"),d7o=o("pretrained_model_name_or_path"),c7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Une=a("code"),f7o=o("pretrained_model_name_or_path"),m7o=o(":"),g7o=l(),G=a("ul"),Mu=a("li"),Jne=a("strong"),h7o=o("albert"),p7o=o(" \u2014 "),WI=a("a"),u7o=o("AlbertForPreTraining"),_7o=o(" (ALBERT model)"),b7o=l(),Eu=a("li"),Yne=a("strong"),v7o=o("bart"),F7o=o(" \u2014 "),HI=a("a"),T7o=o("BartForConditionalGeneration"),M7o=o(" (BART model)"),E7o=l(),Cu=a("li"),Kne=a("strong"),C7o=o("bert"),w7o=o(" \u2014 "),UI=a("a"),A7o=o("BertForPreTraining"),y7o=o(" (BERT model)"),L7o=l(),wu=a("li"),Zne=a("strong"),x7o=o("big_bird"),$7o=o(" \u2014 "),JI=a("a"),k7o=o("BigBirdForPreTraining"),S7o=o(" (BigBird model)"),R7o=l(),Au=a("li"),ese=a("strong"),B7o=o("camembert"),P7o=o(" \u2014 "),YI=a("a"),I7o=o("CamembertForMaskedLM"),q7o=o(" (CamemBERT model)"),N7o=l(),yu=a("li"),ose=a("strong"),j7o=o("ctrl"),D7o=o(" \u2014 "),KI=a("a"),G7o=o("CTRLLMHeadModel"),O7o=o(" (CTRL model)"),V7o=l(),Lu=a("li"),rse=a("strong"),X7o=o("data2vec-text"),z7o=o(" \u2014 "),ZI=a("a"),Q7o=o("Data2VecTextForMaskedLM"),W7o=o(" (Data2VecText model)"),H7o=l(),xu=a("li"),tse=a("strong"),U7o=o("deberta"),J7o=o(" \u2014 "),eq=a("a"),Y7o=o("DebertaForMaskedLM"),K7o=o(" (DeBERTa model)"),Z7o=l(),$u=a("li"),ase=a("strong"),ebo=o("deberta-v2"),obo=o(" \u2014 "),oq=a("a"),rbo=o("DebertaV2ForMaskedLM"),tbo=o(" (DeBERTa-v2 model)"),abo=l(),ku=a("li"),nse=a("strong"),nbo=o("distilbert"),sbo=o(" \u2014 "),rq=a("a"),lbo=o("DistilBertForMaskedLM"),ibo=o(" (DistilBERT model)"),dbo=l(),Su=a("li"),sse=a("strong"),cbo=o("electra"),fbo=o(" \u2014 "),tq=a("a"),mbo=o("ElectraForPreTraining"),gbo=o(" (ELECTRA model)"),hbo=l(),Ru=a("li"),lse=a("strong"),pbo=o("flaubert"),ubo=o(" \u2014 "),aq=a("a"),_bo=o("FlaubertWithLMHeadModel"),bbo=o(" (FlauBERT model)"),vbo=l(),Bu=a("li"),ise=a("strong"),Fbo=o("fnet"),Tbo=o(" \u2014 "),nq=a("a"),Mbo=o("FNetForPreTraining"),Ebo=o(" (FNet model)"),Cbo=l(),Pu=a("li"),dse=a("strong"),wbo=o("fsmt"),Abo=o(" \u2014 "),sq=a("a"),ybo=o("FSMTForConditionalGeneration"),Lbo=o(" (FairSeq Machine-Translation model)"),xbo=l(),Iu=a("li"),cse=a("strong"),$bo=o("funnel"),kbo=o(" \u2014 "),lq=a("a"),Sbo=o("FunnelForPreTraining"),Rbo=o(" (Funnel Transformer model)"),Bbo=l(),qu=a("li"),fse=a("strong"),Pbo=o("gpt2"),Ibo=o(" \u2014 "),iq=a("a"),qbo=o("GPT2LMHeadModel"),Nbo=o(" (OpenAI GPT-2 model)"),jbo=l(),Nu=a("li"),mse=a("strong"),Dbo=o("ibert"),Gbo=o(" \u2014 "),dq=a("a"),Obo=o("IBertForMaskedLM"),Vbo=o(" (I-BERT model)"),Xbo=l(),ju=a("li"),gse=a("strong"),zbo=o("layoutlm"),Qbo=o(" \u2014 "),cq=a("a"),Wbo=o("LayoutLMForMaskedLM"),Hbo=o(" (LayoutLM model)"),Ubo=l(),Du=a("li"),hse=a("strong"),Jbo=o("longformer"),Ybo=o(" \u2014 "),fq=a("a"),Kbo=o("LongformerForMaskedLM"),Zbo=o(" (Longformer model)"),e2o=l(),Gu=a("li"),pse=a("strong"),o2o=o("lxmert"),r2o=o(" \u2014 "),mq=a("a"),t2o=o("LxmertForPreTraining"),a2o=o(" (LXMERT model)"),n2o=l(),Ou=a("li"),use=a("strong"),s2o=o("megatron-bert"),l2o=o(" \u2014 "),gq=a("a"),i2o=o("MegatronBertForPreTraining"),d2o=o(" (MegatronBert model)"),c2o=l(),Vu=a("li"),_se=a("strong"),f2o=o("mobilebert"),m2o=o(" \u2014 "),hq=a("a"),g2o=o("MobileBertForPreTraining"),h2o=o(" (MobileBERT model)"),p2o=l(),Xu=a("li"),bse=a("strong"),u2o=o("mpnet"),_2o=o(" \u2014 "),pq=a("a"),b2o=o("MPNetForMaskedLM"),v2o=o(" (MPNet model)"),F2o=l(),zu=a("li"),vse=a("strong"),T2o=o("openai-gpt"),M2o=o(" \u2014 "),uq=a("a"),E2o=o("OpenAIGPTLMHeadModel"),C2o=o(" (OpenAI GPT model)"),w2o=l(),Qu=a("li"),Fse=a("strong"),A2o=o("retribert"),y2o=o(" \u2014 "),_q=a("a"),L2o=o("RetriBertModel"),x2o=o(" (RetriBERT model)"),$2o=l(),Wu=a("li"),Tse=a("strong"),k2o=o("roberta"),S2o=o(" \u2014 "),bq=a("a"),R2o=o("RobertaForMaskedLM"),B2o=o(" (RoBERTa model)"),P2o=l(),Hu=a("li"),Mse=a("strong"),I2o=o("squeezebert"),q2o=o(" \u2014 "),vq=a("a"),N2o=o("SqueezeBertForMaskedLM"),j2o=o(" (SqueezeBERT model)"),D2o=l(),Uu=a("li"),Ese=a("strong"),G2o=o("t5"),O2o=o(" \u2014 "),Fq=a("a"),V2o=o("T5ForConditionalGeneration"),X2o=o(" (T5 model)"),z2o=l(),Ju=a("li"),Cse=a("strong"),Q2o=o("tapas"),W2o=o(" \u2014 "),Tq=a("a"),H2o=o("TapasForMaskedLM"),U2o=o(" (TAPAS model)"),J2o=l(),Yu=a("li"),wse=a("strong"),Y2o=o("transfo-xl"),K2o=o(" \u2014 "),Mq=a("a"),Z2o=o("TransfoXLLMHeadModel"),e3o=o(" (Transformer-XL model)"),o3o=l(),Ku=a("li"),Ase=a("strong"),r3o=o("unispeech"),t3o=o(" \u2014 "),Eq=a("a"),a3o=o("UniSpeechForPreTraining"),n3o=o(" (UniSpeech model)"),s3o=l(),Zu=a("li"),yse=a("strong"),l3o=o("unispeech-sat"),i3o=o(" \u2014 "),Cq=a("a"),d3o=o("UniSpeechSatForPreTraining"),c3o=o(" (UniSpeechSat model)"),f3o=l(),e_=a("li"),Lse=a("strong"),m3o=o("visual_bert"),g3o=o(" \u2014 "),wq=a("a"),h3o=o("VisualBertForPreTraining"),p3o=o(" (VisualBert model)"),u3o=l(),o_=a("li"),xse=a("strong"),_3o=o("vit_mae"),b3o=o(" \u2014 "),Aq=a("a"),v3o=o("ViTMAEForPreTraining"),F3o=o(" (ViTMAE model)"),T3o=l(),r_=a("li"),$se=a("strong"),M3o=o("wav2vec2"),E3o=o(" \u2014 "),yq=a("a"),C3o=o("Wav2Vec2ForPreTraining"),w3o=o(" (Wav2Vec2 model)"),A3o=l(),t_=a("li"),kse=a("strong"),y3o=o("xlm"),L3o=o(" \u2014 "),Lq=a("a"),x3o=o("XLMWithLMHeadModel"),$3o=o(" (XLM model)"),k3o=l(),a_=a("li"),Sse=a("strong"),S3o=o("xlm-roberta"),R3o=o(" \u2014 "),xq=a("a"),B3o=o("XLMRobertaForMaskedLM"),P3o=o(" (XLM-RoBERTa model)"),I3o=l(),n_=a("li"),Rse=a("strong"),q3o=o("xlm-roberta-xl"),N3o=o(" \u2014 "),$q=a("a"),j3o=o("XLMRobertaXLForMaskedLM"),D3o=o(" (XLM-RoBERTa-XL model)"),G3o=l(),s_=a("li"),Bse=a("strong"),O3o=o("xlnet"),V3o=o(" \u2014 "),kq=a("a"),X3o=o("XLNetLMHeadModel"),z3o=o(" (XLNet model)"),Q3o=l(),l_=a("p"),W3o=o("The model is set in evaluation mode by default using "),Pse=a("code"),H3o=o("model.eval()"),U3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ise=a("code"),J3o=o("model.train()"),Y3o=l(),F(i_.$$.fragment),MBe=l(),Ti=a("h2"),d_=a("a"),qse=a("span"),F(t6.$$.fragment),K3o=l(),Nse=a("span"),Z3o=o("AutoModelForCausalLM"),EBe=l(),$o=a("div"),F(a6.$$.fragment),evo=l(),Mi=a("p"),ovo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Sq=a("a"),rvo=o("from_pretrained()"),tvo=o(" class method or the "),Rq=a("a"),avo=o("from_config()"),nvo=o(` class
method.`),svo=l(),n6=a("p"),lvo=o("This class cannot be instantiated directly using "),jse=a("code"),ivo=o("__init__()"),dvo=o(" (throws an error)."),cvo=l(),ot=a("div"),F(s6.$$.fragment),fvo=l(),Dse=a("p"),mvo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gvo=l(),Ei=a("p"),hvo=o(`Note:
Loading a model from its configuration file does `),Gse=a("strong"),pvo=o("not"),uvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bq=a("a"),_vo=o("from_pretrained()"),bvo=o(" to load the model weights."),vvo=l(),F(c_.$$.fragment),Fvo=l(),Je=a("div"),F(l6.$$.fragment),Tvo=l(),Ose=a("p"),Mvo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Evo=l(),wa=a("p"),Cvo=o("The model class to instantiate is selected based on the "),Vse=a("code"),wvo=o("model_type"),Avo=o(` property of the config object (either
passed as an argument or loaded from `),Xse=a("code"),yvo=o("pretrained_model_name_or_path"),Lvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zse=a("code"),xvo=o("pretrained_model_name_or_path"),$vo=o(":"),kvo=l(),z=a("ul"),f_=a("li"),Qse=a("strong"),Svo=o("bart"),Rvo=o(" \u2014 "),Pq=a("a"),Bvo=o("BartForCausalLM"),Pvo=o(" (BART model)"),Ivo=l(),m_=a("li"),Wse=a("strong"),qvo=o("bert"),Nvo=o(" \u2014 "),Iq=a("a"),jvo=o("BertLMHeadModel"),Dvo=o(" (BERT model)"),Gvo=l(),g_=a("li"),Hse=a("strong"),Ovo=o("bert-generation"),Vvo=o(" \u2014 "),qq=a("a"),Xvo=o("BertGenerationDecoder"),zvo=o(" (Bert Generation model)"),Qvo=l(),h_=a("li"),Use=a("strong"),Wvo=o("big_bird"),Hvo=o(" \u2014 "),Nq=a("a"),Uvo=o("BigBirdForCausalLM"),Jvo=o(" (BigBird model)"),Yvo=l(),p_=a("li"),Jse=a("strong"),Kvo=o("bigbird_pegasus"),Zvo=o(" \u2014 "),jq=a("a"),eFo=o("BigBirdPegasusForCausalLM"),oFo=o(" (BigBirdPegasus model)"),rFo=l(),u_=a("li"),Yse=a("strong"),tFo=o("blenderbot"),aFo=o(" \u2014 "),Dq=a("a"),nFo=o("BlenderbotForCausalLM"),sFo=o(" (Blenderbot model)"),lFo=l(),__=a("li"),Kse=a("strong"),iFo=o("blenderbot-small"),dFo=o(" \u2014 "),Gq=a("a"),cFo=o("BlenderbotSmallForCausalLM"),fFo=o(" (BlenderbotSmall model)"),mFo=l(),b_=a("li"),Zse=a("strong"),gFo=o("camembert"),hFo=o(" \u2014 "),Oq=a("a"),pFo=o("CamembertForCausalLM"),uFo=o(" (CamemBERT model)"),_Fo=l(),v_=a("li"),ele=a("strong"),bFo=o("ctrl"),vFo=o(" \u2014 "),Vq=a("a"),FFo=o("CTRLLMHeadModel"),TFo=o(" (CTRL model)"),MFo=l(),F_=a("li"),ole=a("strong"),EFo=o("data2vec-text"),CFo=o(" \u2014 "),Xq=a("a"),wFo=o("Data2VecTextForCausalLM"),AFo=o(" (Data2VecText model)"),yFo=l(),T_=a("li"),rle=a("strong"),LFo=o("electra"),xFo=o(" \u2014 "),zq=a("a"),$Fo=o("ElectraForCausalLM"),kFo=o(" (ELECTRA model)"),SFo=l(),M_=a("li"),tle=a("strong"),RFo=o("gpt2"),BFo=o(" \u2014 "),Qq=a("a"),PFo=o("GPT2LMHeadModel"),IFo=o(" (OpenAI GPT-2 model)"),qFo=l(),E_=a("li"),ale=a("strong"),NFo=o("gpt_neo"),jFo=o(" \u2014 "),Wq=a("a"),DFo=o("GPTNeoForCausalLM"),GFo=o(" (GPT Neo model)"),OFo=l(),C_=a("li"),nle=a("strong"),VFo=o("gptj"),XFo=o(" \u2014 "),Hq=a("a"),zFo=o("GPTJForCausalLM"),QFo=o(" (GPT-J model)"),WFo=l(),w_=a("li"),sle=a("strong"),HFo=o("marian"),UFo=o(" \u2014 "),Uq=a("a"),JFo=o("MarianForCausalLM"),YFo=o(" (Marian model)"),KFo=l(),A_=a("li"),lle=a("strong"),ZFo=o("mbart"),e0o=o(" \u2014 "),Jq=a("a"),o0o=o("MBartForCausalLM"),r0o=o(" (mBART model)"),t0o=l(),y_=a("li"),ile=a("strong"),a0o=o("megatron-bert"),n0o=o(" \u2014 "),Yq=a("a"),s0o=o("MegatronBertForCausalLM"),l0o=o(" (MegatronBert model)"),i0o=l(),L_=a("li"),dle=a("strong"),d0o=o("openai-gpt"),c0o=o(" \u2014 "),Kq=a("a"),f0o=o("OpenAIGPTLMHeadModel"),m0o=o(" (OpenAI GPT model)"),g0o=l(),x_=a("li"),cle=a("strong"),h0o=o("pegasus"),p0o=o(" \u2014 "),Zq=a("a"),u0o=o("PegasusForCausalLM"),_0o=o(" (Pegasus model)"),b0o=l(),$_=a("li"),fle=a("strong"),v0o=o("plbart"),F0o=o(" \u2014 "),eN=a("a"),T0o=o("PLBartForCausalLM"),M0o=o(" (PLBart model)"),E0o=l(),k_=a("li"),mle=a("strong"),C0o=o("prophetnet"),w0o=o(" \u2014 "),oN=a("a"),A0o=o("ProphetNetForCausalLM"),y0o=o(" (ProphetNet model)"),L0o=l(),S_=a("li"),gle=a("strong"),x0o=o("qdqbert"),$0o=o(" \u2014 "),rN=a("a"),k0o=o("QDQBertLMHeadModel"),S0o=o(" (QDQBert model)"),R0o=l(),R_=a("li"),hle=a("strong"),B0o=o("reformer"),P0o=o(" \u2014 "),tN=a("a"),I0o=o("ReformerModelWithLMHead"),q0o=o(" (Reformer model)"),N0o=l(),B_=a("li"),ple=a("strong"),j0o=o("rembert"),D0o=o(" \u2014 "),aN=a("a"),G0o=o("RemBertForCausalLM"),O0o=o(" (RemBERT model)"),V0o=l(),P_=a("li"),ule=a("strong"),X0o=o("roberta"),z0o=o(" \u2014 "),nN=a("a"),Q0o=o("RobertaForCausalLM"),W0o=o(" (RoBERTa model)"),H0o=l(),I_=a("li"),_le=a("strong"),U0o=o("roformer"),J0o=o(" \u2014 "),sN=a("a"),Y0o=o("RoFormerForCausalLM"),K0o=o(" (RoFormer model)"),Z0o=l(),q_=a("li"),ble=a("strong"),eTo=o("speech_to_text_2"),oTo=o(" \u2014 "),lN=a("a"),rTo=o("Speech2Text2ForCausalLM"),tTo=o(" (Speech2Text2 model)"),aTo=l(),N_=a("li"),vle=a("strong"),nTo=o("transfo-xl"),sTo=o(" \u2014 "),iN=a("a"),lTo=o("TransfoXLLMHeadModel"),iTo=o(" (Transformer-XL model)"),dTo=l(),j_=a("li"),Fle=a("strong"),cTo=o("trocr"),fTo=o(" \u2014 "),dN=a("a"),mTo=o("TrOCRForCausalLM"),gTo=o(" (TrOCR model)"),hTo=l(),D_=a("li"),Tle=a("strong"),pTo=o("xglm"),uTo=o(" \u2014 "),cN=a("a"),_To=o("XGLMForCausalLM"),bTo=o(" (XGLM model)"),vTo=l(),G_=a("li"),Mle=a("strong"),FTo=o("xlm"),TTo=o(" \u2014 "),fN=a("a"),MTo=o("XLMWithLMHeadModel"),ETo=o(" (XLM model)"),CTo=l(),O_=a("li"),Ele=a("strong"),wTo=o("xlm-prophetnet"),ATo=o(" \u2014 "),mN=a("a"),yTo=o("XLMProphetNetForCausalLM"),LTo=o(" (XLMProphetNet model)"),xTo=l(),V_=a("li"),Cle=a("strong"),$To=o("xlm-roberta"),kTo=o(" \u2014 "),gN=a("a"),STo=o("XLMRobertaForCausalLM"),RTo=o(" (XLM-RoBERTa model)"),BTo=l(),X_=a("li"),wle=a("strong"),PTo=o("xlm-roberta-xl"),ITo=o(" \u2014 "),hN=a("a"),qTo=o("XLMRobertaXLForCausalLM"),NTo=o(" (XLM-RoBERTa-XL model)"),jTo=l(),z_=a("li"),Ale=a("strong"),DTo=o("xlnet"),GTo=o(" \u2014 "),pN=a("a"),OTo=o("XLNetLMHeadModel"),VTo=o(" (XLNet model)"),XTo=l(),Q_=a("p"),zTo=o("The model is set in evaluation mode by default using "),yle=a("code"),QTo=o("model.eval()"),WTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lle=a("code"),HTo=o("model.train()"),UTo=l(),F(W_.$$.fragment),CBe=l(),Ci=a("h2"),H_=a("a"),xle=a("span"),F(i6.$$.fragment),JTo=l(),$le=a("span"),YTo=o("AutoModelForMaskedLM"),wBe=l(),ko=a("div"),F(d6.$$.fragment),KTo=l(),wi=a("p"),ZTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uN=a("a"),eMo=o("from_pretrained()"),oMo=o(" class method or the "),_N=a("a"),rMo=o("from_config()"),tMo=o(` class
method.`),aMo=l(),c6=a("p"),nMo=o("This class cannot be instantiated directly using "),kle=a("code"),sMo=o("__init__()"),lMo=o(" (throws an error)."),iMo=l(),rt=a("div"),F(f6.$$.fragment),dMo=l(),Sle=a("p"),cMo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),fMo=l(),Ai=a("p"),mMo=o(`Note:
Loading a model from its configuration file does `),Rle=a("strong"),gMo=o("not"),hMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bN=a("a"),pMo=o("from_pretrained()"),uMo=o(" to load the model weights."),_Mo=l(),F(U_.$$.fragment),bMo=l(),Ye=a("div"),F(m6.$$.fragment),vMo=l(),Ble=a("p"),FMo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),TMo=l(),Aa=a("p"),MMo=o("The model class to instantiate is selected based on the "),Ple=a("code"),EMo=o("model_type"),CMo=o(` property of the config object (either
passed as an argument or loaded from `),Ile=a("code"),wMo=o("pretrained_model_name_or_path"),AMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qle=a("code"),yMo=o("pretrained_model_name_or_path"),LMo=o(":"),xMo=l(),Q=a("ul"),J_=a("li"),Nle=a("strong"),$Mo=o("albert"),kMo=o(" \u2014 "),vN=a("a"),SMo=o("AlbertForMaskedLM"),RMo=o(" (ALBERT model)"),BMo=l(),Y_=a("li"),jle=a("strong"),PMo=o("bart"),IMo=o(" \u2014 "),FN=a("a"),qMo=o("BartForConditionalGeneration"),NMo=o(" (BART model)"),jMo=l(),K_=a("li"),Dle=a("strong"),DMo=o("bert"),GMo=o(" \u2014 "),TN=a("a"),OMo=o("BertForMaskedLM"),VMo=o(" (BERT model)"),XMo=l(),Z_=a("li"),Gle=a("strong"),zMo=o("big_bird"),QMo=o(" \u2014 "),MN=a("a"),WMo=o("BigBirdForMaskedLM"),HMo=o(" (BigBird model)"),UMo=l(),e1=a("li"),Ole=a("strong"),JMo=o("camembert"),YMo=o(" \u2014 "),EN=a("a"),KMo=o("CamembertForMaskedLM"),ZMo=o(" (CamemBERT model)"),e4o=l(),o1=a("li"),Vle=a("strong"),o4o=o("convbert"),r4o=o(" \u2014 "),CN=a("a"),t4o=o("ConvBertForMaskedLM"),a4o=o(" (ConvBERT model)"),n4o=l(),r1=a("li"),Xle=a("strong"),s4o=o("data2vec-text"),l4o=o(" \u2014 "),wN=a("a"),i4o=o("Data2VecTextForMaskedLM"),d4o=o(" (Data2VecText model)"),c4o=l(),t1=a("li"),zle=a("strong"),f4o=o("deberta"),m4o=o(" \u2014 "),AN=a("a"),g4o=o("DebertaForMaskedLM"),h4o=o(" (DeBERTa model)"),p4o=l(),a1=a("li"),Qle=a("strong"),u4o=o("deberta-v2"),_4o=o(" \u2014 "),yN=a("a"),b4o=o("DebertaV2ForMaskedLM"),v4o=o(" (DeBERTa-v2 model)"),F4o=l(),n1=a("li"),Wle=a("strong"),T4o=o("distilbert"),M4o=o(" \u2014 "),LN=a("a"),E4o=o("DistilBertForMaskedLM"),C4o=o(" (DistilBERT model)"),w4o=l(),s1=a("li"),Hle=a("strong"),A4o=o("electra"),y4o=o(" \u2014 "),xN=a("a"),L4o=o("ElectraForMaskedLM"),x4o=o(" (ELECTRA model)"),$4o=l(),l1=a("li"),Ule=a("strong"),k4o=o("flaubert"),S4o=o(" \u2014 "),$N=a("a"),R4o=o("FlaubertWithLMHeadModel"),B4o=o(" (FlauBERT model)"),P4o=l(),i1=a("li"),Jle=a("strong"),I4o=o("fnet"),q4o=o(" \u2014 "),kN=a("a"),N4o=o("FNetForMaskedLM"),j4o=o(" (FNet model)"),D4o=l(),d1=a("li"),Yle=a("strong"),G4o=o("funnel"),O4o=o(" \u2014 "),SN=a("a"),V4o=o("FunnelForMaskedLM"),X4o=o(" (Funnel Transformer model)"),z4o=l(),c1=a("li"),Kle=a("strong"),Q4o=o("ibert"),W4o=o(" \u2014 "),RN=a("a"),H4o=o("IBertForMaskedLM"),U4o=o(" (I-BERT model)"),J4o=l(),f1=a("li"),Zle=a("strong"),Y4o=o("layoutlm"),K4o=o(" \u2014 "),BN=a("a"),Z4o=o("LayoutLMForMaskedLM"),eEo=o(" (LayoutLM model)"),oEo=l(),m1=a("li"),eie=a("strong"),rEo=o("longformer"),tEo=o(" \u2014 "),PN=a("a"),aEo=o("LongformerForMaskedLM"),nEo=o(" (Longformer model)"),sEo=l(),g1=a("li"),oie=a("strong"),lEo=o("mbart"),iEo=o(" \u2014 "),IN=a("a"),dEo=o("MBartForConditionalGeneration"),cEo=o(" (mBART model)"),fEo=l(),h1=a("li"),rie=a("strong"),mEo=o("megatron-bert"),gEo=o(" \u2014 "),qN=a("a"),hEo=o("MegatronBertForMaskedLM"),pEo=o(" (MegatronBert model)"),uEo=l(),p1=a("li"),tie=a("strong"),_Eo=o("mobilebert"),bEo=o(" \u2014 "),NN=a("a"),vEo=o("MobileBertForMaskedLM"),FEo=o(" (MobileBERT model)"),TEo=l(),u1=a("li"),aie=a("strong"),MEo=o("mpnet"),EEo=o(" \u2014 "),jN=a("a"),CEo=o("MPNetForMaskedLM"),wEo=o(" (MPNet model)"),AEo=l(),_1=a("li"),nie=a("strong"),yEo=o("nystromformer"),LEo=o(" \u2014 "),DN=a("a"),xEo=o("NystromformerForMaskedLM"),$Eo=o(" (Nystromformer model)"),kEo=l(),b1=a("li"),sie=a("strong"),SEo=o("perceiver"),REo=o(" \u2014 "),GN=a("a"),BEo=o("PerceiverForMaskedLM"),PEo=o(" (Perceiver model)"),IEo=l(),v1=a("li"),lie=a("strong"),qEo=o("qdqbert"),NEo=o(" \u2014 "),ON=a("a"),jEo=o("QDQBertForMaskedLM"),DEo=o(" (QDQBert model)"),GEo=l(),F1=a("li"),iie=a("strong"),OEo=o("reformer"),VEo=o(" \u2014 "),VN=a("a"),XEo=o("ReformerForMaskedLM"),zEo=o(" (Reformer model)"),QEo=l(),T1=a("li"),die=a("strong"),WEo=o("rembert"),HEo=o(" \u2014 "),XN=a("a"),UEo=o("RemBertForMaskedLM"),JEo=o(" (RemBERT model)"),YEo=l(),M1=a("li"),cie=a("strong"),KEo=o("roberta"),ZEo=o(" \u2014 "),zN=a("a"),e5o=o("RobertaForMaskedLM"),o5o=o(" (RoBERTa model)"),r5o=l(),E1=a("li"),fie=a("strong"),t5o=o("roformer"),a5o=o(" \u2014 "),QN=a("a"),n5o=o("RoFormerForMaskedLM"),s5o=o(" (RoFormer model)"),l5o=l(),C1=a("li"),mie=a("strong"),i5o=o("squeezebert"),d5o=o(" \u2014 "),WN=a("a"),c5o=o("SqueezeBertForMaskedLM"),f5o=o(" (SqueezeBERT model)"),m5o=l(),w1=a("li"),gie=a("strong"),g5o=o("tapas"),h5o=o(" \u2014 "),HN=a("a"),p5o=o("TapasForMaskedLM"),u5o=o(" (TAPAS model)"),_5o=l(),A1=a("li"),hie=a("strong"),b5o=o("wav2vec2"),v5o=o(" \u2014 "),pie=a("code"),F5o=o("Wav2Vec2ForMaskedLM"),T5o=o(" (Wav2Vec2 model)"),M5o=l(),y1=a("li"),uie=a("strong"),E5o=o("xlm"),C5o=o(" \u2014 "),UN=a("a"),w5o=o("XLMWithLMHeadModel"),A5o=o(" (XLM model)"),y5o=l(),L1=a("li"),_ie=a("strong"),L5o=o("xlm-roberta"),x5o=o(" \u2014 "),JN=a("a"),$5o=o("XLMRobertaForMaskedLM"),k5o=o(" (XLM-RoBERTa model)"),S5o=l(),x1=a("li"),bie=a("strong"),R5o=o("xlm-roberta-xl"),B5o=o(" \u2014 "),YN=a("a"),P5o=o("XLMRobertaXLForMaskedLM"),I5o=o(" (XLM-RoBERTa-XL model)"),q5o=l(),$1=a("li"),vie=a("strong"),N5o=o("yoso"),j5o=o(" \u2014 "),KN=a("a"),D5o=o("YosoForMaskedLM"),G5o=o(" (YOSO model)"),O5o=l(),k1=a("p"),V5o=o("The model is set in evaluation mode by default using "),Fie=a("code"),X5o=o("model.eval()"),z5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tie=a("code"),Q5o=o("model.train()"),W5o=l(),F(S1.$$.fragment),ABe=l(),yi=a("h2"),R1=a("a"),Mie=a("span"),F(g6.$$.fragment),H5o=l(),Eie=a("span"),U5o=o("AutoModelForSeq2SeqLM"),yBe=l(),So=a("div"),F(h6.$$.fragment),J5o=l(),Li=a("p"),Y5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ZN=a("a"),K5o=o("from_pretrained()"),Z5o=o(" class method or the "),ej=a("a"),eCo=o("from_config()"),oCo=o(` class
method.`),rCo=l(),p6=a("p"),tCo=o("This class cannot be instantiated directly using "),Cie=a("code"),aCo=o("__init__()"),nCo=o(" (throws an error)."),sCo=l(),tt=a("div"),F(u6.$$.fragment),lCo=l(),wie=a("p"),iCo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),dCo=l(),xi=a("p"),cCo=o(`Note:
Loading a model from its configuration file does `),Aie=a("strong"),fCo=o("not"),mCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oj=a("a"),gCo=o("from_pretrained()"),hCo=o(" to load the model weights."),pCo=l(),F(B1.$$.fragment),uCo=l(),Ke=a("div"),F(_6.$$.fragment),_Co=l(),yie=a("p"),bCo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),vCo=l(),ya=a("p"),FCo=o("The model class to instantiate is selected based on the "),Lie=a("code"),TCo=o("model_type"),MCo=o(` property of the config object (either
passed as an argument or loaded from `),xie=a("code"),ECo=o("pretrained_model_name_or_path"),CCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ie=a("code"),wCo=o("pretrained_model_name_or_path"),ACo=o(":"),yCo=l(),he=a("ul"),P1=a("li"),kie=a("strong"),LCo=o("bart"),xCo=o(" \u2014 "),rj=a("a"),$Co=o("BartForConditionalGeneration"),kCo=o(" (BART model)"),SCo=l(),I1=a("li"),Sie=a("strong"),RCo=o("bigbird_pegasus"),BCo=o(" \u2014 "),tj=a("a"),PCo=o("BigBirdPegasusForConditionalGeneration"),ICo=o(" (BigBirdPegasus model)"),qCo=l(),q1=a("li"),Rie=a("strong"),NCo=o("blenderbot"),jCo=o(" \u2014 "),aj=a("a"),DCo=o("BlenderbotForConditionalGeneration"),GCo=o(" (Blenderbot model)"),OCo=l(),N1=a("li"),Bie=a("strong"),VCo=o("blenderbot-small"),XCo=o(" \u2014 "),nj=a("a"),zCo=o("BlenderbotSmallForConditionalGeneration"),QCo=o(" (BlenderbotSmall model)"),WCo=l(),j1=a("li"),Pie=a("strong"),HCo=o("encoder-decoder"),UCo=o(" \u2014 "),sj=a("a"),JCo=o("EncoderDecoderModel"),YCo=o(" (Encoder decoder model)"),KCo=l(),D1=a("li"),Iie=a("strong"),ZCo=o("fsmt"),ewo=o(" \u2014 "),lj=a("a"),owo=o("FSMTForConditionalGeneration"),rwo=o(" (FairSeq Machine-Translation model)"),two=l(),G1=a("li"),qie=a("strong"),awo=o("led"),nwo=o(" \u2014 "),ij=a("a"),swo=o("LEDForConditionalGeneration"),lwo=o(" (LED model)"),iwo=l(),O1=a("li"),Nie=a("strong"),dwo=o("m2m_100"),cwo=o(" \u2014 "),dj=a("a"),fwo=o("M2M100ForConditionalGeneration"),mwo=o(" (M2M100 model)"),gwo=l(),V1=a("li"),jie=a("strong"),hwo=o("marian"),pwo=o(" \u2014 "),cj=a("a"),uwo=o("MarianMTModel"),_wo=o(" (Marian model)"),bwo=l(),X1=a("li"),Die=a("strong"),vwo=o("mbart"),Fwo=o(" \u2014 "),fj=a("a"),Two=o("MBartForConditionalGeneration"),Mwo=o(" (mBART model)"),Ewo=l(),z1=a("li"),Gie=a("strong"),Cwo=o("mt5"),wwo=o(" \u2014 "),mj=a("a"),Awo=o("MT5ForConditionalGeneration"),ywo=o(" (mT5 model)"),Lwo=l(),Q1=a("li"),Oie=a("strong"),xwo=o("pegasus"),$wo=o(" \u2014 "),gj=a("a"),kwo=o("PegasusForConditionalGeneration"),Swo=o(" (Pegasus model)"),Rwo=l(),W1=a("li"),Vie=a("strong"),Bwo=o("plbart"),Pwo=o(" \u2014 "),hj=a("a"),Iwo=o("PLBartForConditionalGeneration"),qwo=o(" (PLBart model)"),Nwo=l(),H1=a("li"),Xie=a("strong"),jwo=o("prophetnet"),Dwo=o(" \u2014 "),pj=a("a"),Gwo=o("ProphetNetForConditionalGeneration"),Owo=o(" (ProphetNet model)"),Vwo=l(),U1=a("li"),zie=a("strong"),Xwo=o("t5"),zwo=o(" \u2014 "),uj=a("a"),Qwo=o("T5ForConditionalGeneration"),Wwo=o(" (T5 model)"),Hwo=l(),J1=a("li"),Qie=a("strong"),Uwo=o("tapex"),Jwo=o(" \u2014 "),_j=a("a"),Ywo=o("BartForConditionalGeneration"),Kwo=o(" (TAPEX model)"),Zwo=l(),Y1=a("li"),Wie=a("strong"),eAo=o("xlm-prophetnet"),oAo=o(" \u2014 "),bj=a("a"),rAo=o("XLMProphetNetForConditionalGeneration"),tAo=o(" (XLMProphetNet model)"),aAo=l(),K1=a("p"),nAo=o("The model is set in evaluation mode by default using "),Hie=a("code"),sAo=o("model.eval()"),lAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uie=a("code"),iAo=o("model.train()"),dAo=l(),F(Z1.$$.fragment),LBe=l(),$i=a("h2"),e7=a("a"),Jie=a("span"),F(b6.$$.fragment),cAo=l(),Yie=a("span"),fAo=o("AutoModelForSequenceClassification"),xBe=l(),Ro=a("div"),F(v6.$$.fragment),mAo=l(),ki=a("p"),gAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vj=a("a"),hAo=o("from_pretrained()"),pAo=o(" class method or the "),Fj=a("a"),uAo=o("from_config()"),_Ao=o(` class
method.`),bAo=l(),F6=a("p"),vAo=o("This class cannot be instantiated directly using "),Kie=a("code"),FAo=o("__init__()"),TAo=o(" (throws an error)."),MAo=l(),at=a("div"),F(T6.$$.fragment),EAo=l(),Zie=a("p"),CAo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),wAo=l(),Si=a("p"),AAo=o(`Note:
Loading a model from its configuration file does `),ede=a("strong"),yAo=o("not"),LAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tj=a("a"),xAo=o("from_pretrained()"),$Ao=o(" to load the model weights."),kAo=l(),F(o7.$$.fragment),SAo=l(),Ze=a("div"),F(M6.$$.fragment),RAo=l(),ode=a("p"),BAo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),PAo=l(),La=a("p"),IAo=o("The model class to instantiate is selected based on the "),rde=a("code"),qAo=o("model_type"),NAo=o(` property of the config object (either
passed as an argument or loaded from `),tde=a("code"),jAo=o("pretrained_model_name_or_path"),DAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=a("code"),GAo=o("pretrained_model_name_or_path"),OAo=o(":"),VAo=l(),q=a("ul"),r7=a("li"),nde=a("strong"),XAo=o("albert"),zAo=o(" \u2014 "),Mj=a("a"),QAo=o("AlbertForSequenceClassification"),WAo=o(" (ALBERT model)"),HAo=l(),t7=a("li"),sde=a("strong"),UAo=o("bart"),JAo=o(" \u2014 "),Ej=a("a"),YAo=o("BartForSequenceClassification"),KAo=o(" (BART model)"),ZAo=l(),a7=a("li"),lde=a("strong"),e6o=o("bert"),o6o=o(" \u2014 "),Cj=a("a"),r6o=o("BertForSequenceClassification"),t6o=o(" (BERT model)"),a6o=l(),n7=a("li"),ide=a("strong"),n6o=o("big_bird"),s6o=o(" \u2014 "),wj=a("a"),l6o=o("BigBirdForSequenceClassification"),i6o=o(" (BigBird model)"),d6o=l(),s7=a("li"),dde=a("strong"),c6o=o("bigbird_pegasus"),f6o=o(" \u2014 "),Aj=a("a"),m6o=o("BigBirdPegasusForSequenceClassification"),g6o=o(" (BigBirdPegasus model)"),h6o=l(),l7=a("li"),cde=a("strong"),p6o=o("camembert"),u6o=o(" \u2014 "),yj=a("a"),_6o=o("CamembertForSequenceClassification"),b6o=o(" (CamemBERT model)"),v6o=l(),i7=a("li"),fde=a("strong"),F6o=o("canine"),T6o=o(" \u2014 "),Lj=a("a"),M6o=o("CanineForSequenceClassification"),E6o=o(" (Canine model)"),C6o=l(),d7=a("li"),mde=a("strong"),w6o=o("convbert"),A6o=o(" \u2014 "),xj=a("a"),y6o=o("ConvBertForSequenceClassification"),L6o=o(" (ConvBERT model)"),x6o=l(),c7=a("li"),gde=a("strong"),$6o=o("ctrl"),k6o=o(" \u2014 "),$j=a("a"),S6o=o("CTRLForSequenceClassification"),R6o=o(" (CTRL model)"),B6o=l(),f7=a("li"),hde=a("strong"),P6o=o("data2vec-text"),I6o=o(" \u2014 "),kj=a("a"),q6o=o("Data2VecTextForSequenceClassification"),N6o=o(" (Data2VecText model)"),j6o=l(),m7=a("li"),pde=a("strong"),D6o=o("deberta"),G6o=o(" \u2014 "),Sj=a("a"),O6o=o("DebertaForSequenceClassification"),V6o=o(" (DeBERTa model)"),X6o=l(),g7=a("li"),ude=a("strong"),z6o=o("deberta-v2"),Q6o=o(" \u2014 "),Rj=a("a"),W6o=o("DebertaV2ForSequenceClassification"),H6o=o(" (DeBERTa-v2 model)"),U6o=l(),h7=a("li"),_de=a("strong"),J6o=o("distilbert"),Y6o=o(" \u2014 "),Bj=a("a"),K6o=o("DistilBertForSequenceClassification"),Z6o=o(" (DistilBERT model)"),eyo=l(),p7=a("li"),bde=a("strong"),oyo=o("electra"),ryo=o(" \u2014 "),Pj=a("a"),tyo=o("ElectraForSequenceClassification"),ayo=o(" (ELECTRA model)"),nyo=l(),u7=a("li"),vde=a("strong"),syo=o("flaubert"),lyo=o(" \u2014 "),Ij=a("a"),iyo=o("FlaubertForSequenceClassification"),dyo=o(" (FlauBERT model)"),cyo=l(),_7=a("li"),Fde=a("strong"),fyo=o("fnet"),myo=o(" \u2014 "),qj=a("a"),gyo=o("FNetForSequenceClassification"),hyo=o(" (FNet model)"),pyo=l(),b7=a("li"),Tde=a("strong"),uyo=o("funnel"),_yo=o(" \u2014 "),Nj=a("a"),byo=o("FunnelForSequenceClassification"),vyo=o(" (Funnel Transformer model)"),Fyo=l(),v7=a("li"),Mde=a("strong"),Tyo=o("gpt2"),Myo=o(" \u2014 "),jj=a("a"),Eyo=o("GPT2ForSequenceClassification"),Cyo=o(" (OpenAI GPT-2 model)"),wyo=l(),F7=a("li"),Ede=a("strong"),Ayo=o("gpt_neo"),yyo=o(" \u2014 "),Dj=a("a"),Lyo=o("GPTNeoForSequenceClassification"),xyo=o(" (GPT Neo model)"),$yo=l(),T7=a("li"),Cde=a("strong"),kyo=o("gptj"),Syo=o(" \u2014 "),Gj=a("a"),Ryo=o("GPTJForSequenceClassification"),Byo=o(" (GPT-J model)"),Pyo=l(),M7=a("li"),wde=a("strong"),Iyo=o("ibert"),qyo=o(" \u2014 "),Oj=a("a"),Nyo=o("IBertForSequenceClassification"),jyo=o(" (I-BERT model)"),Dyo=l(),E7=a("li"),Ade=a("strong"),Gyo=o("layoutlm"),Oyo=o(" \u2014 "),Vj=a("a"),Vyo=o("LayoutLMForSequenceClassification"),Xyo=o(" (LayoutLM model)"),zyo=l(),C7=a("li"),yde=a("strong"),Qyo=o("layoutlmv2"),Wyo=o(" \u2014 "),Xj=a("a"),Hyo=o("LayoutLMv2ForSequenceClassification"),Uyo=o(" (LayoutLMv2 model)"),Jyo=l(),w7=a("li"),Lde=a("strong"),Yyo=o("led"),Kyo=o(" \u2014 "),zj=a("a"),Zyo=o("LEDForSequenceClassification"),eLo=o(" (LED model)"),oLo=l(),A7=a("li"),xde=a("strong"),rLo=o("longformer"),tLo=o(" \u2014 "),Qj=a("a"),aLo=o("LongformerForSequenceClassification"),nLo=o(" (Longformer model)"),sLo=l(),y7=a("li"),$de=a("strong"),lLo=o("mbart"),iLo=o(" \u2014 "),Wj=a("a"),dLo=o("MBartForSequenceClassification"),cLo=o(" (mBART model)"),fLo=l(),L7=a("li"),kde=a("strong"),mLo=o("megatron-bert"),gLo=o(" \u2014 "),Hj=a("a"),hLo=o("MegatronBertForSequenceClassification"),pLo=o(" (MegatronBert model)"),uLo=l(),x7=a("li"),Sde=a("strong"),_Lo=o("mobilebert"),bLo=o(" \u2014 "),Uj=a("a"),vLo=o("MobileBertForSequenceClassification"),FLo=o(" (MobileBERT model)"),TLo=l(),$7=a("li"),Rde=a("strong"),MLo=o("mpnet"),ELo=o(" \u2014 "),Jj=a("a"),CLo=o("MPNetForSequenceClassification"),wLo=o(" (MPNet model)"),ALo=l(),k7=a("li"),Bde=a("strong"),yLo=o("nystromformer"),LLo=o(" \u2014 "),Yj=a("a"),xLo=o("NystromformerForSequenceClassification"),$Lo=o(" (Nystromformer model)"),kLo=l(),S7=a("li"),Pde=a("strong"),SLo=o("openai-gpt"),RLo=o(" \u2014 "),Kj=a("a"),BLo=o("OpenAIGPTForSequenceClassification"),PLo=o(" (OpenAI GPT model)"),ILo=l(),R7=a("li"),Ide=a("strong"),qLo=o("perceiver"),NLo=o(" \u2014 "),Zj=a("a"),jLo=o("PerceiverForSequenceClassification"),DLo=o(" (Perceiver model)"),GLo=l(),B7=a("li"),qde=a("strong"),OLo=o("plbart"),VLo=o(" \u2014 "),eD=a("a"),XLo=o("PLBartForSequenceClassification"),zLo=o(" (PLBart model)"),QLo=l(),P7=a("li"),Nde=a("strong"),WLo=o("qdqbert"),HLo=o(" \u2014 "),oD=a("a"),ULo=o("QDQBertForSequenceClassification"),JLo=o(" (QDQBert model)"),YLo=l(),I7=a("li"),jde=a("strong"),KLo=o("reformer"),ZLo=o(" \u2014 "),rD=a("a"),e8o=o("ReformerForSequenceClassification"),o8o=o(" (Reformer model)"),r8o=l(),q7=a("li"),Dde=a("strong"),t8o=o("rembert"),a8o=o(" \u2014 "),tD=a("a"),n8o=o("RemBertForSequenceClassification"),s8o=o(" (RemBERT model)"),l8o=l(),N7=a("li"),Gde=a("strong"),i8o=o("roberta"),d8o=o(" \u2014 "),aD=a("a"),c8o=o("RobertaForSequenceClassification"),f8o=o(" (RoBERTa model)"),m8o=l(),j7=a("li"),Ode=a("strong"),g8o=o("roformer"),h8o=o(" \u2014 "),nD=a("a"),p8o=o("RoFormerForSequenceClassification"),u8o=o(" (RoFormer model)"),_8o=l(),D7=a("li"),Vde=a("strong"),b8o=o("squeezebert"),v8o=o(" \u2014 "),sD=a("a"),F8o=o("SqueezeBertForSequenceClassification"),T8o=o(" (SqueezeBERT model)"),M8o=l(),G7=a("li"),Xde=a("strong"),E8o=o("tapas"),C8o=o(" \u2014 "),lD=a("a"),w8o=o("TapasForSequenceClassification"),A8o=o(" (TAPAS model)"),y8o=l(),O7=a("li"),zde=a("strong"),L8o=o("tapex"),x8o=o(" \u2014 "),iD=a("a"),$8o=o("BartForSequenceClassification"),k8o=o(" (TAPEX model)"),S8o=l(),V7=a("li"),Qde=a("strong"),R8o=o("transfo-xl"),B8o=o(" \u2014 "),dD=a("a"),P8o=o("TransfoXLForSequenceClassification"),I8o=o(" (Transformer-XL model)"),q8o=l(),X7=a("li"),Wde=a("strong"),N8o=o("xlm"),j8o=o(" \u2014 "),cD=a("a"),D8o=o("XLMForSequenceClassification"),G8o=o(" (XLM model)"),O8o=l(),z7=a("li"),Hde=a("strong"),V8o=o("xlm-roberta"),X8o=o(" \u2014 "),fD=a("a"),z8o=o("XLMRobertaForSequenceClassification"),Q8o=o(" (XLM-RoBERTa model)"),W8o=l(),Q7=a("li"),Ude=a("strong"),H8o=o("xlm-roberta-xl"),U8o=o(" \u2014 "),mD=a("a"),J8o=o("XLMRobertaXLForSequenceClassification"),Y8o=o(" (XLM-RoBERTa-XL model)"),K8o=l(),W7=a("li"),Jde=a("strong"),Z8o=o("xlnet"),exo=o(" \u2014 "),gD=a("a"),oxo=o("XLNetForSequenceClassification"),rxo=o(" (XLNet model)"),txo=l(),H7=a("li"),Yde=a("strong"),axo=o("yoso"),nxo=o(" \u2014 "),hD=a("a"),sxo=o("YosoForSequenceClassification"),lxo=o(" (YOSO model)"),ixo=l(),U7=a("p"),dxo=o("The model is set in evaluation mode by default using "),Kde=a("code"),cxo=o("model.eval()"),fxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zde=a("code"),mxo=o("model.train()"),gxo=l(),F(J7.$$.fragment),$Be=l(),Ri=a("h2"),Y7=a("a"),ece=a("span"),F(E6.$$.fragment),hxo=l(),oce=a("span"),pxo=o("AutoModelForMultipleChoice"),kBe=l(),Bo=a("div"),F(C6.$$.fragment),uxo=l(),Bi=a("p"),_xo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pD=a("a"),bxo=o("from_pretrained()"),vxo=o(" class method or the "),uD=a("a"),Fxo=o("from_config()"),Txo=o(` class
method.`),Mxo=l(),w6=a("p"),Exo=o("This class cannot be instantiated directly using "),rce=a("code"),Cxo=o("__init__()"),wxo=o(" (throws an error)."),Axo=l(),nt=a("div"),F(A6.$$.fragment),yxo=l(),tce=a("p"),Lxo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xxo=l(),Pi=a("p"),$xo=o(`Note:
Loading a model from its configuration file does `),ace=a("strong"),kxo=o("not"),Sxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_D=a("a"),Rxo=o("from_pretrained()"),Bxo=o(" to load the model weights."),Pxo=l(),F(K7.$$.fragment),Ixo=l(),eo=a("div"),F(y6.$$.fragment),qxo=l(),nce=a("p"),Nxo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),jxo=l(),xa=a("p"),Dxo=o("The model class to instantiate is selected based on the "),sce=a("code"),Gxo=o("model_type"),Oxo=o(` property of the config object (either
passed as an argument or loaded from `),lce=a("code"),Vxo=o("pretrained_model_name_or_path"),Xxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ice=a("code"),zxo=o("pretrained_model_name_or_path"),Qxo=o(":"),Wxo=l(),Y=a("ul"),Z7=a("li"),dce=a("strong"),Hxo=o("albert"),Uxo=o(" \u2014 "),bD=a("a"),Jxo=o("AlbertForMultipleChoice"),Yxo=o(" (ALBERT model)"),Kxo=l(),eb=a("li"),cce=a("strong"),Zxo=o("bert"),e9o=o(" \u2014 "),vD=a("a"),o9o=o("BertForMultipleChoice"),r9o=o(" (BERT model)"),t9o=l(),ob=a("li"),fce=a("strong"),a9o=o("big_bird"),n9o=o(" \u2014 "),FD=a("a"),s9o=o("BigBirdForMultipleChoice"),l9o=o(" (BigBird model)"),i9o=l(),rb=a("li"),mce=a("strong"),d9o=o("camembert"),c9o=o(" \u2014 "),TD=a("a"),f9o=o("CamembertForMultipleChoice"),m9o=o(" (CamemBERT model)"),g9o=l(),tb=a("li"),gce=a("strong"),h9o=o("canine"),p9o=o(" \u2014 "),MD=a("a"),u9o=o("CanineForMultipleChoice"),_9o=o(" (Canine model)"),b9o=l(),ab=a("li"),hce=a("strong"),v9o=o("convbert"),F9o=o(" \u2014 "),ED=a("a"),T9o=o("ConvBertForMultipleChoice"),M9o=o(" (ConvBERT model)"),E9o=l(),nb=a("li"),pce=a("strong"),C9o=o("data2vec-text"),w9o=o(" \u2014 "),CD=a("a"),A9o=o("Data2VecTextForMultipleChoice"),y9o=o(" (Data2VecText model)"),L9o=l(),sb=a("li"),uce=a("strong"),x9o=o("distilbert"),$9o=o(" \u2014 "),wD=a("a"),k9o=o("DistilBertForMultipleChoice"),S9o=o(" (DistilBERT model)"),R9o=l(),lb=a("li"),_ce=a("strong"),B9o=o("electra"),P9o=o(" \u2014 "),AD=a("a"),I9o=o("ElectraForMultipleChoice"),q9o=o(" (ELECTRA model)"),N9o=l(),ib=a("li"),bce=a("strong"),j9o=o("flaubert"),D9o=o(" \u2014 "),yD=a("a"),G9o=o("FlaubertForMultipleChoice"),O9o=o(" (FlauBERT model)"),V9o=l(),db=a("li"),vce=a("strong"),X9o=o("fnet"),z9o=o(" \u2014 "),LD=a("a"),Q9o=o("FNetForMultipleChoice"),W9o=o(" (FNet model)"),H9o=l(),cb=a("li"),Fce=a("strong"),U9o=o("funnel"),J9o=o(" \u2014 "),xD=a("a"),Y9o=o("FunnelForMultipleChoice"),K9o=o(" (Funnel Transformer model)"),Z9o=l(),fb=a("li"),Tce=a("strong"),e$o=o("ibert"),o$o=o(" \u2014 "),$D=a("a"),r$o=o("IBertForMultipleChoice"),t$o=o(" (I-BERT model)"),a$o=l(),mb=a("li"),Mce=a("strong"),n$o=o("longformer"),s$o=o(" \u2014 "),kD=a("a"),l$o=o("LongformerForMultipleChoice"),i$o=o(" (Longformer model)"),d$o=l(),gb=a("li"),Ece=a("strong"),c$o=o("megatron-bert"),f$o=o(" \u2014 "),SD=a("a"),m$o=o("MegatronBertForMultipleChoice"),g$o=o(" (MegatronBert model)"),h$o=l(),hb=a("li"),Cce=a("strong"),p$o=o("mobilebert"),u$o=o(" \u2014 "),RD=a("a"),_$o=o("MobileBertForMultipleChoice"),b$o=o(" (MobileBERT model)"),v$o=l(),pb=a("li"),wce=a("strong"),F$o=o("mpnet"),T$o=o(" \u2014 "),BD=a("a"),M$o=o("MPNetForMultipleChoice"),E$o=o(" (MPNet model)"),C$o=l(),ub=a("li"),Ace=a("strong"),w$o=o("nystromformer"),A$o=o(" \u2014 "),PD=a("a"),y$o=o("NystromformerForMultipleChoice"),L$o=o(" (Nystromformer model)"),x$o=l(),_b=a("li"),yce=a("strong"),$$o=o("qdqbert"),k$o=o(" \u2014 "),ID=a("a"),S$o=o("QDQBertForMultipleChoice"),R$o=o(" (QDQBert model)"),B$o=l(),bb=a("li"),Lce=a("strong"),P$o=o("rembert"),I$o=o(" \u2014 "),qD=a("a"),q$o=o("RemBertForMultipleChoice"),N$o=o(" (RemBERT model)"),j$o=l(),vb=a("li"),xce=a("strong"),D$o=o("roberta"),G$o=o(" \u2014 "),ND=a("a"),O$o=o("RobertaForMultipleChoice"),V$o=o(" (RoBERTa model)"),X$o=l(),Fb=a("li"),$ce=a("strong"),z$o=o("roformer"),Q$o=o(" \u2014 "),jD=a("a"),W$o=o("RoFormerForMultipleChoice"),H$o=o(" (RoFormer model)"),U$o=l(),Tb=a("li"),kce=a("strong"),J$o=o("squeezebert"),Y$o=o(" \u2014 "),DD=a("a"),K$o=o("SqueezeBertForMultipleChoice"),Z$o=o(" (SqueezeBERT model)"),eko=l(),Mb=a("li"),Sce=a("strong"),oko=o("xlm"),rko=o(" \u2014 "),GD=a("a"),tko=o("XLMForMultipleChoice"),ako=o(" (XLM model)"),nko=l(),Eb=a("li"),Rce=a("strong"),sko=o("xlm-roberta"),lko=o(" \u2014 "),OD=a("a"),iko=o("XLMRobertaForMultipleChoice"),dko=o(" (XLM-RoBERTa model)"),cko=l(),Cb=a("li"),Bce=a("strong"),fko=o("xlm-roberta-xl"),mko=o(" \u2014 "),VD=a("a"),gko=o("XLMRobertaXLForMultipleChoice"),hko=o(" (XLM-RoBERTa-XL model)"),pko=l(),wb=a("li"),Pce=a("strong"),uko=o("xlnet"),_ko=o(" \u2014 "),XD=a("a"),bko=o("XLNetForMultipleChoice"),vko=o(" (XLNet model)"),Fko=l(),Ab=a("li"),Ice=a("strong"),Tko=o("yoso"),Mko=o(" \u2014 "),zD=a("a"),Eko=o("YosoForMultipleChoice"),Cko=o(" (YOSO model)"),wko=l(),yb=a("p"),Ako=o("The model is set in evaluation mode by default using "),qce=a("code"),yko=o("model.eval()"),Lko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nce=a("code"),xko=o("model.train()"),$ko=l(),F(Lb.$$.fragment),SBe=l(),Ii=a("h2"),xb=a("a"),jce=a("span"),F(L6.$$.fragment),kko=l(),Dce=a("span"),Sko=o("AutoModelForNextSentencePrediction"),RBe=l(),Po=a("div"),F(x6.$$.fragment),Rko=l(),qi=a("p"),Bko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),QD=a("a"),Pko=o("from_pretrained()"),Iko=o(" class method or the "),WD=a("a"),qko=o("from_config()"),Nko=o(` class
method.`),jko=l(),$6=a("p"),Dko=o("This class cannot be instantiated directly using "),Gce=a("code"),Gko=o("__init__()"),Oko=o(" (throws an error)."),Vko=l(),st=a("div"),F(k6.$$.fragment),Xko=l(),Oce=a("p"),zko=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Qko=l(),Ni=a("p"),Wko=o(`Note:
Loading a model from its configuration file does `),Vce=a("strong"),Hko=o("not"),Uko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HD=a("a"),Jko=o("from_pretrained()"),Yko=o(" to load the model weights."),Kko=l(),F($b.$$.fragment),Zko=l(),oo=a("div"),F(S6.$$.fragment),eSo=l(),Xce=a("p"),oSo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),rSo=l(),$a=a("p"),tSo=o("The model class to instantiate is selected based on the "),zce=a("code"),aSo=o("model_type"),nSo=o(` property of the config object (either
passed as an argument or loaded from `),Qce=a("code"),sSo=o("pretrained_model_name_or_path"),lSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wce=a("code"),iSo=o("pretrained_model_name_or_path"),dSo=o(":"),cSo=l(),Ur=a("ul"),kb=a("li"),Hce=a("strong"),fSo=o("bert"),mSo=o(" \u2014 "),UD=a("a"),gSo=o("BertForNextSentencePrediction"),hSo=o(" (BERT model)"),pSo=l(),Sb=a("li"),Uce=a("strong"),uSo=o("fnet"),_So=o(" \u2014 "),JD=a("a"),bSo=o("FNetForNextSentencePrediction"),vSo=o(" (FNet model)"),FSo=l(),Rb=a("li"),Jce=a("strong"),TSo=o("megatron-bert"),MSo=o(" \u2014 "),YD=a("a"),ESo=o("MegatronBertForNextSentencePrediction"),CSo=o(" (MegatronBert model)"),wSo=l(),Bb=a("li"),Yce=a("strong"),ASo=o("mobilebert"),ySo=o(" \u2014 "),KD=a("a"),LSo=o("MobileBertForNextSentencePrediction"),xSo=o(" (MobileBERT model)"),$So=l(),Pb=a("li"),Kce=a("strong"),kSo=o("qdqbert"),SSo=o(" \u2014 "),ZD=a("a"),RSo=o("QDQBertForNextSentencePrediction"),BSo=o(" (QDQBert model)"),PSo=l(),Ib=a("p"),ISo=o("The model is set in evaluation mode by default using "),Zce=a("code"),qSo=o("model.eval()"),NSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),efe=a("code"),jSo=o("model.train()"),DSo=l(),F(qb.$$.fragment),BBe=l(),ji=a("h2"),Nb=a("a"),ofe=a("span"),F(R6.$$.fragment),GSo=l(),rfe=a("span"),OSo=o("AutoModelForTokenClassification"),PBe=l(),Io=a("div"),F(B6.$$.fragment),VSo=l(),Di=a("p"),XSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),eG=a("a"),zSo=o("from_pretrained()"),QSo=o(" class method or the "),oG=a("a"),WSo=o("from_config()"),HSo=o(` class
method.`),USo=l(),P6=a("p"),JSo=o("This class cannot be instantiated directly using "),tfe=a("code"),YSo=o("__init__()"),KSo=o(" (throws an error)."),ZSo=l(),lt=a("div"),F(I6.$$.fragment),eRo=l(),afe=a("p"),oRo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rRo=l(),Gi=a("p"),tRo=o(`Note:
Loading a model from its configuration file does `),nfe=a("strong"),aRo=o("not"),nRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rG=a("a"),sRo=o("from_pretrained()"),lRo=o(" to load the model weights."),iRo=l(),F(jb.$$.fragment),dRo=l(),ro=a("div"),F(q6.$$.fragment),cRo=l(),sfe=a("p"),fRo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),mRo=l(),ka=a("p"),gRo=o("The model class to instantiate is selected based on the "),lfe=a("code"),hRo=o("model_type"),pRo=o(` property of the config object (either
passed as an argument or loaded from `),ife=a("code"),uRo=o("pretrained_model_name_or_path"),_Ro=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dfe=a("code"),bRo=o("pretrained_model_name_or_path"),vRo=o(":"),FRo=l(),U=a("ul"),Db=a("li"),cfe=a("strong"),TRo=o("albert"),MRo=o(" \u2014 "),tG=a("a"),ERo=o("AlbertForTokenClassification"),CRo=o(" (ALBERT model)"),wRo=l(),Gb=a("li"),ffe=a("strong"),ARo=o("bert"),yRo=o(" \u2014 "),aG=a("a"),LRo=o("BertForTokenClassification"),xRo=o(" (BERT model)"),$Ro=l(),Ob=a("li"),mfe=a("strong"),kRo=o("big_bird"),SRo=o(" \u2014 "),nG=a("a"),RRo=o("BigBirdForTokenClassification"),BRo=o(" (BigBird model)"),PRo=l(),Vb=a("li"),gfe=a("strong"),IRo=o("camembert"),qRo=o(" \u2014 "),sG=a("a"),NRo=o("CamembertForTokenClassification"),jRo=o(" (CamemBERT model)"),DRo=l(),Xb=a("li"),hfe=a("strong"),GRo=o("canine"),ORo=o(" \u2014 "),lG=a("a"),VRo=o("CanineForTokenClassification"),XRo=o(" (Canine model)"),zRo=l(),zb=a("li"),pfe=a("strong"),QRo=o("convbert"),WRo=o(" \u2014 "),iG=a("a"),HRo=o("ConvBertForTokenClassification"),URo=o(" (ConvBERT model)"),JRo=l(),Qb=a("li"),ufe=a("strong"),YRo=o("data2vec-text"),KRo=o(" \u2014 "),dG=a("a"),ZRo=o("Data2VecTextForTokenClassification"),eBo=o(" (Data2VecText model)"),oBo=l(),Wb=a("li"),_fe=a("strong"),rBo=o("deberta"),tBo=o(" \u2014 "),cG=a("a"),aBo=o("DebertaForTokenClassification"),nBo=o(" (DeBERTa model)"),sBo=l(),Hb=a("li"),bfe=a("strong"),lBo=o("deberta-v2"),iBo=o(" \u2014 "),fG=a("a"),dBo=o("DebertaV2ForTokenClassification"),cBo=o(" (DeBERTa-v2 model)"),fBo=l(),Ub=a("li"),vfe=a("strong"),mBo=o("distilbert"),gBo=o(" \u2014 "),mG=a("a"),hBo=o("DistilBertForTokenClassification"),pBo=o(" (DistilBERT model)"),uBo=l(),Jb=a("li"),Ffe=a("strong"),_Bo=o("electra"),bBo=o(" \u2014 "),gG=a("a"),vBo=o("ElectraForTokenClassification"),FBo=o(" (ELECTRA model)"),TBo=l(),Yb=a("li"),Tfe=a("strong"),MBo=o("flaubert"),EBo=o(" \u2014 "),hG=a("a"),CBo=o("FlaubertForTokenClassification"),wBo=o(" (FlauBERT model)"),ABo=l(),Kb=a("li"),Mfe=a("strong"),yBo=o("fnet"),LBo=o(" \u2014 "),pG=a("a"),xBo=o("FNetForTokenClassification"),$Bo=o(" (FNet model)"),kBo=l(),Zb=a("li"),Efe=a("strong"),SBo=o("funnel"),RBo=o(" \u2014 "),uG=a("a"),BBo=o("FunnelForTokenClassification"),PBo=o(" (Funnel Transformer model)"),IBo=l(),e2=a("li"),Cfe=a("strong"),qBo=o("gpt2"),NBo=o(" \u2014 "),_G=a("a"),jBo=o("GPT2ForTokenClassification"),DBo=o(" (OpenAI GPT-2 model)"),GBo=l(),o2=a("li"),wfe=a("strong"),OBo=o("ibert"),VBo=o(" \u2014 "),bG=a("a"),XBo=o("IBertForTokenClassification"),zBo=o(" (I-BERT model)"),QBo=l(),r2=a("li"),Afe=a("strong"),WBo=o("layoutlm"),HBo=o(" \u2014 "),vG=a("a"),UBo=o("LayoutLMForTokenClassification"),JBo=o(" (LayoutLM model)"),YBo=l(),t2=a("li"),yfe=a("strong"),KBo=o("layoutlmv2"),ZBo=o(" \u2014 "),FG=a("a"),ePo=o("LayoutLMv2ForTokenClassification"),oPo=o(" (LayoutLMv2 model)"),rPo=l(),a2=a("li"),Lfe=a("strong"),tPo=o("longformer"),aPo=o(" \u2014 "),TG=a("a"),nPo=o("LongformerForTokenClassification"),sPo=o(" (Longformer model)"),lPo=l(),n2=a("li"),xfe=a("strong"),iPo=o("megatron-bert"),dPo=o(" \u2014 "),MG=a("a"),cPo=o("MegatronBertForTokenClassification"),fPo=o(" (MegatronBert model)"),mPo=l(),s2=a("li"),$fe=a("strong"),gPo=o("mobilebert"),hPo=o(" \u2014 "),EG=a("a"),pPo=o("MobileBertForTokenClassification"),uPo=o(" (MobileBERT model)"),_Po=l(),l2=a("li"),kfe=a("strong"),bPo=o("mpnet"),vPo=o(" \u2014 "),CG=a("a"),FPo=o("MPNetForTokenClassification"),TPo=o(" (MPNet model)"),MPo=l(),i2=a("li"),Sfe=a("strong"),EPo=o("nystromformer"),CPo=o(" \u2014 "),wG=a("a"),wPo=o("NystromformerForTokenClassification"),APo=o(" (Nystromformer model)"),yPo=l(),d2=a("li"),Rfe=a("strong"),LPo=o("qdqbert"),xPo=o(" \u2014 "),AG=a("a"),$Po=o("QDQBertForTokenClassification"),kPo=o(" (QDQBert model)"),SPo=l(),c2=a("li"),Bfe=a("strong"),RPo=o("rembert"),BPo=o(" \u2014 "),yG=a("a"),PPo=o("RemBertForTokenClassification"),IPo=o(" (RemBERT model)"),qPo=l(),f2=a("li"),Pfe=a("strong"),NPo=o("roberta"),jPo=o(" \u2014 "),LG=a("a"),DPo=o("RobertaForTokenClassification"),GPo=o(" (RoBERTa model)"),OPo=l(),m2=a("li"),Ife=a("strong"),VPo=o("roformer"),XPo=o(" \u2014 "),xG=a("a"),zPo=o("RoFormerForTokenClassification"),QPo=o(" (RoFormer model)"),WPo=l(),g2=a("li"),qfe=a("strong"),HPo=o("squeezebert"),UPo=o(" \u2014 "),$G=a("a"),JPo=o("SqueezeBertForTokenClassification"),YPo=o(" (SqueezeBERT model)"),KPo=l(),h2=a("li"),Nfe=a("strong"),ZPo=o("xlm"),eIo=o(" \u2014 "),kG=a("a"),oIo=o("XLMForTokenClassification"),rIo=o(" (XLM model)"),tIo=l(),p2=a("li"),jfe=a("strong"),aIo=o("xlm-roberta"),nIo=o(" \u2014 "),SG=a("a"),sIo=o("XLMRobertaForTokenClassification"),lIo=o(" (XLM-RoBERTa model)"),iIo=l(),u2=a("li"),Dfe=a("strong"),dIo=o("xlm-roberta-xl"),cIo=o(" \u2014 "),RG=a("a"),fIo=o("XLMRobertaXLForTokenClassification"),mIo=o(" (XLM-RoBERTa-XL model)"),gIo=l(),_2=a("li"),Gfe=a("strong"),hIo=o("xlnet"),pIo=o(" \u2014 "),BG=a("a"),uIo=o("XLNetForTokenClassification"),_Io=o(" (XLNet model)"),bIo=l(),b2=a("li"),Ofe=a("strong"),vIo=o("yoso"),FIo=o(" \u2014 "),PG=a("a"),TIo=o("YosoForTokenClassification"),MIo=o(" (YOSO model)"),EIo=l(),v2=a("p"),CIo=o("The model is set in evaluation mode by default using "),Vfe=a("code"),wIo=o("model.eval()"),AIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xfe=a("code"),yIo=o("model.train()"),LIo=l(),F(F2.$$.fragment),IBe=l(),Oi=a("h2"),T2=a("a"),zfe=a("span"),F(N6.$$.fragment),xIo=l(),Qfe=a("span"),$Io=o("AutoModelForQuestionAnswering"),qBe=l(),qo=a("div"),F(j6.$$.fragment),kIo=l(),Vi=a("p"),SIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IG=a("a"),RIo=o("from_pretrained()"),BIo=o(" class method or the "),qG=a("a"),PIo=o("from_config()"),IIo=o(` class
method.`),qIo=l(),D6=a("p"),NIo=o("This class cannot be instantiated directly using "),Wfe=a("code"),jIo=o("__init__()"),DIo=o(" (throws an error)."),GIo=l(),it=a("div"),F(G6.$$.fragment),OIo=l(),Hfe=a("p"),VIo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),XIo=l(),Xi=a("p"),zIo=o(`Note:
Loading a model from its configuration file does `),Ufe=a("strong"),QIo=o("not"),WIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=a("a"),HIo=o("from_pretrained()"),UIo=o(" to load the model weights."),JIo=l(),F(M2.$$.fragment),YIo=l(),to=a("div"),F(O6.$$.fragment),KIo=l(),Jfe=a("p"),ZIo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),eqo=l(),Sa=a("p"),oqo=o("The model class to instantiate is selected based on the "),Yfe=a("code"),rqo=o("model_type"),tqo=o(` property of the config object (either
passed as an argument or loaded from `),Kfe=a("code"),aqo=o("pretrained_model_name_or_path"),nqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zfe=a("code"),sqo=o("pretrained_model_name_or_path"),lqo=o(":"),iqo=l(),O=a("ul"),E2=a("li"),eme=a("strong"),dqo=o("albert"),cqo=o(" \u2014 "),jG=a("a"),fqo=o("AlbertForQuestionAnswering"),mqo=o(" (ALBERT model)"),gqo=l(),C2=a("li"),ome=a("strong"),hqo=o("bart"),pqo=o(" \u2014 "),DG=a("a"),uqo=o("BartForQuestionAnswering"),_qo=o(" (BART model)"),bqo=l(),w2=a("li"),rme=a("strong"),vqo=o("bert"),Fqo=o(" \u2014 "),GG=a("a"),Tqo=o("BertForQuestionAnswering"),Mqo=o(" (BERT model)"),Eqo=l(),A2=a("li"),tme=a("strong"),Cqo=o("big_bird"),wqo=o(" \u2014 "),OG=a("a"),Aqo=o("BigBirdForQuestionAnswering"),yqo=o(" (BigBird model)"),Lqo=l(),y2=a("li"),ame=a("strong"),xqo=o("bigbird_pegasus"),$qo=o(" \u2014 "),VG=a("a"),kqo=o("BigBirdPegasusForQuestionAnswering"),Sqo=o(" (BigBirdPegasus model)"),Rqo=l(),L2=a("li"),nme=a("strong"),Bqo=o("camembert"),Pqo=o(" \u2014 "),XG=a("a"),Iqo=o("CamembertForQuestionAnswering"),qqo=o(" (CamemBERT model)"),Nqo=l(),x2=a("li"),sme=a("strong"),jqo=o("canine"),Dqo=o(" \u2014 "),zG=a("a"),Gqo=o("CanineForQuestionAnswering"),Oqo=o(" (Canine model)"),Vqo=l(),$2=a("li"),lme=a("strong"),Xqo=o("convbert"),zqo=o(" \u2014 "),QG=a("a"),Qqo=o("ConvBertForQuestionAnswering"),Wqo=o(" (ConvBERT model)"),Hqo=l(),k2=a("li"),ime=a("strong"),Uqo=o("data2vec-text"),Jqo=o(" \u2014 "),WG=a("a"),Yqo=o("Data2VecTextForQuestionAnswering"),Kqo=o(" (Data2VecText model)"),Zqo=l(),S2=a("li"),dme=a("strong"),eNo=o("deberta"),oNo=o(" \u2014 "),HG=a("a"),rNo=o("DebertaForQuestionAnswering"),tNo=o(" (DeBERTa model)"),aNo=l(),R2=a("li"),cme=a("strong"),nNo=o("deberta-v2"),sNo=o(" \u2014 "),UG=a("a"),lNo=o("DebertaV2ForQuestionAnswering"),iNo=o(" (DeBERTa-v2 model)"),dNo=l(),B2=a("li"),fme=a("strong"),cNo=o("distilbert"),fNo=o(" \u2014 "),JG=a("a"),mNo=o("DistilBertForQuestionAnswering"),gNo=o(" (DistilBERT model)"),hNo=l(),P2=a("li"),mme=a("strong"),pNo=o("electra"),uNo=o(" \u2014 "),YG=a("a"),_No=o("ElectraForQuestionAnswering"),bNo=o(" (ELECTRA model)"),vNo=l(),I2=a("li"),gme=a("strong"),FNo=o("flaubert"),TNo=o(" \u2014 "),KG=a("a"),MNo=o("FlaubertForQuestionAnsweringSimple"),ENo=o(" (FlauBERT model)"),CNo=l(),q2=a("li"),hme=a("strong"),wNo=o("fnet"),ANo=o(" \u2014 "),ZG=a("a"),yNo=o("FNetForQuestionAnswering"),LNo=o(" (FNet model)"),xNo=l(),N2=a("li"),pme=a("strong"),$No=o("funnel"),kNo=o(" \u2014 "),eO=a("a"),SNo=o("FunnelForQuestionAnswering"),RNo=o(" (Funnel Transformer model)"),BNo=l(),j2=a("li"),ume=a("strong"),PNo=o("gptj"),INo=o(" \u2014 "),oO=a("a"),qNo=o("GPTJForQuestionAnswering"),NNo=o(" (GPT-J model)"),jNo=l(),D2=a("li"),_me=a("strong"),DNo=o("ibert"),GNo=o(" \u2014 "),rO=a("a"),ONo=o("IBertForQuestionAnswering"),VNo=o(" (I-BERT model)"),XNo=l(),G2=a("li"),bme=a("strong"),zNo=o("layoutlmv2"),QNo=o(" \u2014 "),tO=a("a"),WNo=o("LayoutLMv2ForQuestionAnswering"),HNo=o(" (LayoutLMv2 model)"),UNo=l(),O2=a("li"),vme=a("strong"),JNo=o("led"),YNo=o(" \u2014 "),aO=a("a"),KNo=o("LEDForQuestionAnswering"),ZNo=o(" (LED model)"),ejo=l(),V2=a("li"),Fme=a("strong"),ojo=o("longformer"),rjo=o(" \u2014 "),nO=a("a"),tjo=o("LongformerForQuestionAnswering"),ajo=o(" (Longformer model)"),njo=l(),X2=a("li"),Tme=a("strong"),sjo=o("lxmert"),ljo=o(" \u2014 "),sO=a("a"),ijo=o("LxmertForQuestionAnswering"),djo=o(" (LXMERT model)"),cjo=l(),z2=a("li"),Mme=a("strong"),fjo=o("mbart"),mjo=o(" \u2014 "),lO=a("a"),gjo=o("MBartForQuestionAnswering"),hjo=o(" (mBART model)"),pjo=l(),Q2=a("li"),Eme=a("strong"),ujo=o("megatron-bert"),_jo=o(" \u2014 "),iO=a("a"),bjo=o("MegatronBertForQuestionAnswering"),vjo=o(" (MegatronBert model)"),Fjo=l(),W2=a("li"),Cme=a("strong"),Tjo=o("mobilebert"),Mjo=o(" \u2014 "),dO=a("a"),Ejo=o("MobileBertForQuestionAnswering"),Cjo=o(" (MobileBERT model)"),wjo=l(),H2=a("li"),wme=a("strong"),Ajo=o("mpnet"),yjo=o(" \u2014 "),cO=a("a"),Ljo=o("MPNetForQuestionAnswering"),xjo=o(" (MPNet model)"),$jo=l(),U2=a("li"),Ame=a("strong"),kjo=o("nystromformer"),Sjo=o(" \u2014 "),fO=a("a"),Rjo=o("NystromformerForQuestionAnswering"),Bjo=o(" (Nystromformer model)"),Pjo=l(),J2=a("li"),yme=a("strong"),Ijo=o("qdqbert"),qjo=o(" \u2014 "),mO=a("a"),Njo=o("QDQBertForQuestionAnswering"),jjo=o(" (QDQBert model)"),Djo=l(),Y2=a("li"),Lme=a("strong"),Gjo=o("reformer"),Ojo=o(" \u2014 "),gO=a("a"),Vjo=o("ReformerForQuestionAnswering"),Xjo=o(" (Reformer model)"),zjo=l(),K2=a("li"),xme=a("strong"),Qjo=o("rembert"),Wjo=o(" \u2014 "),hO=a("a"),Hjo=o("RemBertForQuestionAnswering"),Ujo=o(" (RemBERT model)"),Jjo=l(),Z2=a("li"),$me=a("strong"),Yjo=o("roberta"),Kjo=o(" \u2014 "),pO=a("a"),Zjo=o("RobertaForQuestionAnswering"),eDo=o(" (RoBERTa model)"),oDo=l(),e3=a("li"),kme=a("strong"),rDo=o("roformer"),tDo=o(" \u2014 "),uO=a("a"),aDo=o("RoFormerForQuestionAnswering"),nDo=o(" (RoFormer model)"),sDo=l(),o3=a("li"),Sme=a("strong"),lDo=o("splinter"),iDo=o(" \u2014 "),_O=a("a"),dDo=o("SplinterForQuestionAnswering"),cDo=o(" (Splinter model)"),fDo=l(),r3=a("li"),Rme=a("strong"),mDo=o("squeezebert"),gDo=o(" \u2014 "),bO=a("a"),hDo=o("SqueezeBertForQuestionAnswering"),pDo=o(" (SqueezeBERT model)"),uDo=l(),t3=a("li"),Bme=a("strong"),_Do=o("xlm"),bDo=o(" \u2014 "),vO=a("a"),vDo=o("XLMForQuestionAnsweringSimple"),FDo=o(" (XLM model)"),TDo=l(),a3=a("li"),Pme=a("strong"),MDo=o("xlm-roberta"),EDo=o(" \u2014 "),FO=a("a"),CDo=o("XLMRobertaForQuestionAnswering"),wDo=o(" (XLM-RoBERTa model)"),ADo=l(),n3=a("li"),Ime=a("strong"),yDo=o("xlm-roberta-xl"),LDo=o(" \u2014 "),TO=a("a"),xDo=o("XLMRobertaXLForQuestionAnswering"),$Do=o(" (XLM-RoBERTa-XL model)"),kDo=l(),s3=a("li"),qme=a("strong"),SDo=o("xlnet"),RDo=o(" \u2014 "),MO=a("a"),BDo=o("XLNetForQuestionAnsweringSimple"),PDo=o(" (XLNet model)"),IDo=l(),l3=a("li"),Nme=a("strong"),qDo=o("yoso"),NDo=o(" \u2014 "),EO=a("a"),jDo=o("YosoForQuestionAnswering"),DDo=o(" (YOSO model)"),GDo=l(),i3=a("p"),ODo=o("The model is set in evaluation mode by default using "),jme=a("code"),VDo=o("model.eval()"),XDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=a("code"),zDo=o("model.train()"),QDo=l(),F(d3.$$.fragment),NBe=l(),zi=a("h2"),c3=a("a"),Gme=a("span"),F(V6.$$.fragment),WDo=l(),Ome=a("span"),HDo=o("AutoModelForTableQuestionAnswering"),jBe=l(),No=a("div"),F(X6.$$.fragment),UDo=l(),Qi=a("p"),JDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),CO=a("a"),YDo=o("from_pretrained()"),KDo=o(" class method or the "),wO=a("a"),ZDo=o("from_config()"),eGo=o(` class
method.`),oGo=l(),z6=a("p"),rGo=o("This class cannot be instantiated directly using "),Vme=a("code"),tGo=o("__init__()"),aGo=o(" (throws an error)."),nGo=l(),dt=a("div"),F(Q6.$$.fragment),sGo=l(),Xme=a("p"),lGo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),iGo=l(),Wi=a("p"),dGo=o(`Note:
Loading a model from its configuration file does `),zme=a("strong"),cGo=o("not"),fGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AO=a("a"),mGo=o("from_pretrained()"),gGo=o(" to load the model weights."),hGo=l(),F(f3.$$.fragment),pGo=l(),ao=a("div"),F(W6.$$.fragment),uGo=l(),Qme=a("p"),_Go=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),bGo=l(),Ra=a("p"),vGo=o("The model class to instantiate is selected based on the "),Wme=a("code"),FGo=o("model_type"),TGo=o(` property of the config object (either
passed as an argument or loaded from `),Hme=a("code"),MGo=o("pretrained_model_name_or_path"),EGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ume=a("code"),CGo=o("pretrained_model_name_or_path"),wGo=o(":"),AGo=l(),Jme=a("ul"),m3=a("li"),Yme=a("strong"),yGo=o("tapas"),LGo=o(" \u2014 "),yO=a("a"),xGo=o("TapasForQuestionAnswering"),$Go=o(" (TAPAS model)"),kGo=l(),g3=a("p"),SGo=o("The model is set in evaluation mode by default using "),Kme=a("code"),RGo=o("model.eval()"),BGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zme=a("code"),PGo=o("model.train()"),IGo=l(),F(h3.$$.fragment),DBe=l(),Hi=a("h2"),p3=a("a"),ege=a("span"),F(H6.$$.fragment),qGo=l(),oge=a("span"),NGo=o("AutoModelForImageClassification"),GBe=l(),jo=a("div"),F(U6.$$.fragment),jGo=l(),Ui=a("p"),DGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),LO=a("a"),GGo=o("from_pretrained()"),OGo=o(" class method or the "),xO=a("a"),VGo=o("from_config()"),XGo=o(` class
method.`),zGo=l(),J6=a("p"),QGo=o("This class cannot be instantiated directly using "),rge=a("code"),WGo=o("__init__()"),HGo=o(" (throws an error)."),UGo=l(),ct=a("div"),F(Y6.$$.fragment),JGo=l(),tge=a("p"),YGo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),KGo=l(),Ji=a("p"),ZGo=o(`Note:
Loading a model from its configuration file does `),age=a("strong"),eOo=o("not"),oOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$O=a("a"),rOo=o("from_pretrained()"),tOo=o(" to load the model weights."),aOo=l(),F(u3.$$.fragment),nOo=l(),no=a("div"),F(K6.$$.fragment),sOo=l(),nge=a("p"),lOo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),iOo=l(),Ba=a("p"),dOo=o("The model class to instantiate is selected based on the "),sge=a("code"),cOo=o("model_type"),fOo=o(` property of the config object (either
passed as an argument or loaded from `),lge=a("code"),mOo=o("pretrained_model_name_or_path"),gOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ige=a("code"),hOo=o("pretrained_model_name_or_path"),pOo=o(":"),uOo=l(),ve=a("ul"),_3=a("li"),dge=a("strong"),_Oo=o("beit"),bOo=o(" \u2014 "),kO=a("a"),vOo=o("BeitForImageClassification"),FOo=o(" (BEiT model)"),TOo=l(),b3=a("li"),cge=a("strong"),MOo=o("convnext"),EOo=o(" \u2014 "),SO=a("a"),COo=o("ConvNextForImageClassification"),wOo=o(" (ConvNext model)"),AOo=l(),v3=a("li"),fge=a("strong"),yOo=o("data2vec-vision"),LOo=o(" \u2014 "),RO=a("a"),xOo=o("Data2VecVisionForImageClassification"),$Oo=o(" (Data2VecVision model)"),kOo=l(),xs=a("li"),mge=a("strong"),SOo=o("deit"),ROo=o(" \u2014 "),BO=a("a"),BOo=o("DeiTForImageClassification"),POo=o(" or "),PO=a("a"),IOo=o("DeiTForImageClassificationWithTeacher"),qOo=o(" (DeiT model)"),NOo=l(),F3=a("li"),gge=a("strong"),jOo=o("imagegpt"),DOo=o(" \u2014 "),IO=a("a"),GOo=o("ImageGPTForImageClassification"),OOo=o(" (ImageGPT model)"),VOo=l(),ft=a("li"),hge=a("strong"),XOo=o("perceiver"),zOo=o(" \u2014 "),qO=a("a"),QOo=o("PerceiverForImageClassificationLearned"),WOo=o(" or "),NO=a("a"),HOo=o("PerceiverForImageClassificationFourier"),UOo=o(" or "),jO=a("a"),JOo=o("PerceiverForImageClassificationConvProcessing"),YOo=o(" (Perceiver model)"),KOo=l(),T3=a("li"),pge=a("strong"),ZOo=o("poolformer"),eVo=o(" \u2014 "),DO=a("a"),oVo=o("PoolFormerForImageClassification"),rVo=o(" (PoolFormer model)"),tVo=l(),M3=a("li"),uge=a("strong"),aVo=o("regnet"),nVo=o(" \u2014 "),GO=a("a"),sVo=o("RegNetForImageClassification"),lVo=o(" (RegNet model)"),iVo=l(),E3=a("li"),_ge=a("strong"),dVo=o("resnet"),cVo=o(" \u2014 "),OO=a("a"),fVo=o("ResNetForImageClassification"),mVo=o(" (ResNet model)"),gVo=l(),C3=a("li"),bge=a("strong"),hVo=o("segformer"),pVo=o(" \u2014 "),VO=a("a"),uVo=o("SegformerForImageClassification"),_Vo=o(" (SegFormer model)"),bVo=l(),w3=a("li"),vge=a("strong"),vVo=o("swin"),FVo=o(" \u2014 "),XO=a("a"),TVo=o("SwinForImageClassification"),MVo=o(" (Swin model)"),EVo=l(),A3=a("li"),Fge=a("strong"),CVo=o("van"),wVo=o(" \u2014 "),zO=a("a"),AVo=o("VanForImageClassification"),yVo=o(" (VAN model)"),LVo=l(),y3=a("li"),Tge=a("strong"),xVo=o("vit"),$Vo=o(" \u2014 "),QO=a("a"),kVo=o("ViTForImageClassification"),SVo=o(" (ViT model)"),RVo=l(),L3=a("p"),BVo=o("The model is set in evaluation mode by default using "),Mge=a("code"),PVo=o("model.eval()"),IVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ege=a("code"),qVo=o("model.train()"),NVo=l(),F(x3.$$.fragment),OBe=l(),Yi=a("h2"),$3=a("a"),Cge=a("span"),F(Z6.$$.fragment),jVo=l(),wge=a("span"),DVo=o("AutoModelForVision2Seq"),VBe=l(),Do=a("div"),F(ey.$$.fragment),GVo=l(),Ki=a("p"),OVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WO=a("a"),VVo=o("from_pretrained()"),XVo=o(" class method or the "),HO=a("a"),zVo=o("from_config()"),QVo=o(` class
method.`),WVo=l(),oy=a("p"),HVo=o("This class cannot be instantiated directly using "),Age=a("code"),UVo=o("__init__()"),JVo=o(" (throws an error)."),YVo=l(),mt=a("div"),F(ry.$$.fragment),KVo=l(),yge=a("p"),ZVo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),eXo=l(),Zi=a("p"),oXo=o(`Note:
Loading a model from its configuration file does `),Lge=a("strong"),rXo=o("not"),tXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UO=a("a"),aXo=o("from_pretrained()"),nXo=o(" to load the model weights."),sXo=l(),F(k3.$$.fragment),lXo=l(),so=a("div"),F(ty.$$.fragment),iXo=l(),xge=a("p"),dXo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cXo=l(),Pa=a("p"),fXo=o("The model class to instantiate is selected based on the "),$ge=a("code"),mXo=o("model_type"),gXo=o(` property of the config object (either
passed as an argument or loaded from `),kge=a("code"),hXo=o("pretrained_model_name_or_path"),pXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sge=a("code"),uXo=o("pretrained_model_name_or_path"),_Xo=o(":"),bXo=l(),Rge=a("ul"),S3=a("li"),Bge=a("strong"),vXo=o("vision-encoder-decoder"),FXo=o(" \u2014 "),JO=a("a"),TXo=o("VisionEncoderDecoderModel"),MXo=o(" (Vision Encoder decoder model)"),EXo=l(),R3=a("p"),CXo=o("The model is set in evaluation mode by default using "),Pge=a("code"),wXo=o("model.eval()"),AXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ige=a("code"),yXo=o("model.train()"),LXo=l(),F(B3.$$.fragment),XBe=l(),ed=a("h2"),P3=a("a"),qge=a("span"),F(ay.$$.fragment),xXo=l(),Nge=a("span"),$Xo=o("AutoModelForAudioClassification"),zBe=l(),Go=a("div"),F(ny.$$.fragment),kXo=l(),od=a("p"),SXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),YO=a("a"),RXo=o("from_pretrained()"),BXo=o(" class method or the "),KO=a("a"),PXo=o("from_config()"),IXo=o(` class
method.`),qXo=l(),sy=a("p"),NXo=o("This class cannot be instantiated directly using "),jge=a("code"),jXo=o("__init__()"),DXo=o(" (throws an error)."),GXo=l(),gt=a("div"),F(ly.$$.fragment),OXo=l(),Dge=a("p"),VXo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),XXo=l(),rd=a("p"),zXo=o(`Note:
Loading a model from its configuration file does `),Gge=a("strong"),QXo=o("not"),WXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZO=a("a"),HXo=o("from_pretrained()"),UXo=o(" to load the model weights."),JXo=l(),F(I3.$$.fragment),YXo=l(),lo=a("div"),F(iy.$$.fragment),KXo=l(),Oge=a("p"),ZXo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ezo=l(),Ia=a("p"),ozo=o("The model class to instantiate is selected based on the "),Vge=a("code"),rzo=o("model_type"),tzo=o(` property of the config object (either
passed as an argument or loaded from `),Xge=a("code"),azo=o("pretrained_model_name_or_path"),nzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zge=a("code"),szo=o("pretrained_model_name_or_path"),lzo=o(":"),izo=l(),Ne=a("ul"),q3=a("li"),Qge=a("strong"),dzo=o("data2vec-audio"),czo=o(" \u2014 "),eV=a("a"),fzo=o("Data2VecAudioForSequenceClassification"),mzo=o(" (Data2VecAudio model)"),gzo=l(),N3=a("li"),Wge=a("strong"),hzo=o("hubert"),pzo=o(" \u2014 "),oV=a("a"),uzo=o("HubertForSequenceClassification"),_zo=o(" (Hubert model)"),bzo=l(),j3=a("li"),Hge=a("strong"),vzo=o("sew"),Fzo=o(" \u2014 "),rV=a("a"),Tzo=o("SEWForSequenceClassification"),Mzo=o(" (SEW model)"),Ezo=l(),D3=a("li"),Uge=a("strong"),Czo=o("sew-d"),wzo=o(" \u2014 "),tV=a("a"),Azo=o("SEWDForSequenceClassification"),yzo=o(" (SEW-D model)"),Lzo=l(),G3=a("li"),Jge=a("strong"),xzo=o("unispeech"),$zo=o(" \u2014 "),aV=a("a"),kzo=o("UniSpeechForSequenceClassification"),Szo=o(" (UniSpeech model)"),Rzo=l(),O3=a("li"),Yge=a("strong"),Bzo=o("unispeech-sat"),Pzo=o(" \u2014 "),nV=a("a"),Izo=o("UniSpeechSatForSequenceClassification"),qzo=o(" (UniSpeechSat model)"),Nzo=l(),V3=a("li"),Kge=a("strong"),jzo=o("wav2vec2"),Dzo=o(" \u2014 "),sV=a("a"),Gzo=o("Wav2Vec2ForSequenceClassification"),Ozo=o(" (Wav2Vec2 model)"),Vzo=l(),X3=a("li"),Zge=a("strong"),Xzo=o("wavlm"),zzo=o(" \u2014 "),lV=a("a"),Qzo=o("WavLMForSequenceClassification"),Wzo=o(" (WavLM model)"),Hzo=l(),z3=a("p"),Uzo=o("The model is set in evaluation mode by default using "),ehe=a("code"),Jzo=o("model.eval()"),Yzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ohe=a("code"),Kzo=o("model.train()"),Zzo=l(),F(Q3.$$.fragment),QBe=l(),td=a("h2"),W3=a("a"),rhe=a("span"),F(dy.$$.fragment),eQo=l(),the=a("span"),oQo=o("AutoModelForAudioFrameClassification"),WBe=l(),Oo=a("div"),F(cy.$$.fragment),rQo=l(),ad=a("p"),tQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),iV=a("a"),aQo=o("from_pretrained()"),nQo=o(" class method or the "),dV=a("a"),sQo=o("from_config()"),lQo=o(` class
method.`),iQo=l(),fy=a("p"),dQo=o("This class cannot be instantiated directly using "),ahe=a("code"),cQo=o("__init__()"),fQo=o(" (throws an error)."),mQo=l(),ht=a("div"),F(my.$$.fragment),gQo=l(),nhe=a("p"),hQo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),pQo=l(),nd=a("p"),uQo=o(`Note:
Loading a model from its configuration file does `),she=a("strong"),_Qo=o("not"),bQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cV=a("a"),vQo=o("from_pretrained()"),FQo=o(" to load the model weights."),TQo=l(),F(H3.$$.fragment),MQo=l(),io=a("div"),F(gy.$$.fragment),EQo=l(),lhe=a("p"),CQo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),wQo=l(),qa=a("p"),AQo=o("The model class to instantiate is selected based on the "),ihe=a("code"),yQo=o("model_type"),LQo=o(` property of the config object (either
passed as an argument or loaded from `),dhe=a("code"),xQo=o("pretrained_model_name_or_path"),$Qo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=a("code"),kQo=o("pretrained_model_name_or_path"),SQo=o(":"),RQo=l(),Na=a("ul"),U3=a("li"),fhe=a("strong"),BQo=o("data2vec-audio"),PQo=o(" \u2014 "),fV=a("a"),IQo=o("Data2VecAudioForAudioFrameClassification"),qQo=o(" (Data2VecAudio model)"),NQo=l(),J3=a("li"),mhe=a("strong"),jQo=o("unispeech-sat"),DQo=o(" \u2014 "),mV=a("a"),GQo=o("UniSpeechSatForAudioFrameClassification"),OQo=o(" (UniSpeechSat model)"),VQo=l(),Y3=a("li"),ghe=a("strong"),XQo=o("wav2vec2"),zQo=o(" \u2014 "),gV=a("a"),QQo=o("Wav2Vec2ForAudioFrameClassification"),WQo=o(" (Wav2Vec2 model)"),HQo=l(),K3=a("li"),hhe=a("strong"),UQo=o("wavlm"),JQo=o(" \u2014 "),hV=a("a"),YQo=o("WavLMForAudioFrameClassification"),KQo=o(" (WavLM model)"),ZQo=l(),Z3=a("p"),eWo=o("The model is set in evaluation mode by default using "),phe=a("code"),oWo=o("model.eval()"),rWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uhe=a("code"),tWo=o("model.train()"),aWo=l(),F(ev.$$.fragment),HBe=l(),sd=a("h2"),ov=a("a"),_he=a("span"),F(hy.$$.fragment),nWo=l(),bhe=a("span"),sWo=o("AutoModelForCTC"),UBe=l(),Vo=a("div"),F(py.$$.fragment),lWo=l(),ld=a("p"),iWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),pV=a("a"),dWo=o("from_pretrained()"),cWo=o(" class method or the "),uV=a("a"),fWo=o("from_config()"),mWo=o(` class
method.`),gWo=l(),uy=a("p"),hWo=o("This class cannot be instantiated directly using "),vhe=a("code"),pWo=o("__init__()"),uWo=o(" (throws an error)."),_Wo=l(),pt=a("div"),F(_y.$$.fragment),bWo=l(),Fhe=a("p"),vWo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),FWo=l(),id=a("p"),TWo=o(`Note:
Loading a model from its configuration file does `),The=a("strong"),MWo=o("not"),EWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=a("a"),CWo=o("from_pretrained()"),wWo=o(" to load the model weights."),AWo=l(),F(rv.$$.fragment),yWo=l(),co=a("div"),F(by.$$.fragment),LWo=l(),Mhe=a("p"),xWo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),$Wo=l(),ja=a("p"),kWo=o("The model class to instantiate is selected based on the "),Ehe=a("code"),SWo=o("model_type"),RWo=o(` property of the config object (either
passed as an argument or loaded from `),Che=a("code"),BWo=o("pretrained_model_name_or_path"),PWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),whe=a("code"),IWo=o("pretrained_model_name_or_path"),qWo=o(":"),NWo=l(),je=a("ul"),tv=a("li"),Ahe=a("strong"),jWo=o("data2vec-audio"),DWo=o(" \u2014 "),bV=a("a"),GWo=o("Data2VecAudioForCTC"),OWo=o(" (Data2VecAudio model)"),VWo=l(),av=a("li"),yhe=a("strong"),XWo=o("hubert"),zWo=o(" \u2014 "),vV=a("a"),QWo=o("HubertForCTC"),WWo=o(" (Hubert model)"),HWo=l(),nv=a("li"),Lhe=a("strong"),UWo=o("sew"),JWo=o(" \u2014 "),FV=a("a"),YWo=o("SEWForCTC"),KWo=o(" (SEW model)"),ZWo=l(),sv=a("li"),xhe=a("strong"),eHo=o("sew-d"),oHo=o(" \u2014 "),TV=a("a"),rHo=o("SEWDForCTC"),tHo=o(" (SEW-D model)"),aHo=l(),lv=a("li"),$he=a("strong"),nHo=o("unispeech"),sHo=o(" \u2014 "),MV=a("a"),lHo=o("UniSpeechForCTC"),iHo=o(" (UniSpeech model)"),dHo=l(),iv=a("li"),khe=a("strong"),cHo=o("unispeech-sat"),fHo=o(" \u2014 "),EV=a("a"),mHo=o("UniSpeechSatForCTC"),gHo=o(" (UniSpeechSat model)"),hHo=l(),dv=a("li"),She=a("strong"),pHo=o("wav2vec2"),uHo=o(" \u2014 "),CV=a("a"),_Ho=o("Wav2Vec2ForCTC"),bHo=o(" (Wav2Vec2 model)"),vHo=l(),cv=a("li"),Rhe=a("strong"),FHo=o("wavlm"),THo=o(" \u2014 "),wV=a("a"),MHo=o("WavLMForCTC"),EHo=o(" (WavLM model)"),CHo=l(),fv=a("p"),wHo=o("The model is set in evaluation mode by default using "),Bhe=a("code"),AHo=o("model.eval()"),yHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Phe=a("code"),LHo=o("model.train()"),xHo=l(),F(mv.$$.fragment),JBe=l(),dd=a("h2"),gv=a("a"),Ihe=a("span"),F(vy.$$.fragment),$Ho=l(),qhe=a("span"),kHo=o("AutoModelForSpeechSeq2Seq"),YBe=l(),Xo=a("div"),F(Fy.$$.fragment),SHo=l(),cd=a("p"),RHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),AV=a("a"),BHo=o("from_pretrained()"),PHo=o(" class method or the "),yV=a("a"),IHo=o("from_config()"),qHo=o(` class
method.`),NHo=l(),Ty=a("p"),jHo=o("This class cannot be instantiated directly using "),Nhe=a("code"),DHo=o("__init__()"),GHo=o(" (throws an error)."),OHo=l(),ut=a("div"),F(My.$$.fragment),VHo=l(),jhe=a("p"),XHo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zHo=l(),fd=a("p"),QHo=o(`Note:
Loading a model from its configuration file does `),Dhe=a("strong"),WHo=o("not"),HHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LV=a("a"),UHo=o("from_pretrained()"),JHo=o(" to load the model weights."),YHo=l(),F(hv.$$.fragment),KHo=l(),fo=a("div"),F(Ey.$$.fragment),ZHo=l(),Ghe=a("p"),eUo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),oUo=l(),Da=a("p"),rUo=o("The model class to instantiate is selected based on the "),Ohe=a("code"),tUo=o("model_type"),aUo=o(` property of the config object (either
passed as an argument or loaded from `),Vhe=a("code"),nUo=o("pretrained_model_name_or_path"),sUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xhe=a("code"),lUo=o("pretrained_model_name_or_path"),iUo=o(":"),dUo=l(),Cy=a("ul"),pv=a("li"),zhe=a("strong"),cUo=o("speech-encoder-decoder"),fUo=o(" \u2014 "),xV=a("a"),mUo=o("SpeechEncoderDecoderModel"),gUo=o(" (Speech Encoder decoder model)"),hUo=l(),uv=a("li"),Qhe=a("strong"),pUo=o("speech_to_text"),uUo=o(" \u2014 "),$V=a("a"),_Uo=o("Speech2TextForConditionalGeneration"),bUo=o(" (Speech2Text model)"),vUo=l(),_v=a("p"),FUo=o("The model is set in evaluation mode by default using "),Whe=a("code"),TUo=o("model.eval()"),MUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hhe=a("code"),EUo=o("model.train()"),CUo=l(),F(bv.$$.fragment),KBe=l(),md=a("h2"),vv=a("a"),Uhe=a("span"),F(wy.$$.fragment),wUo=l(),Jhe=a("span"),AUo=o("AutoModelForAudioXVector"),ZBe=l(),zo=a("div"),F(Ay.$$.fragment),yUo=l(),gd=a("p"),LUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),kV=a("a"),xUo=o("from_pretrained()"),$Uo=o(" class method or the "),SV=a("a"),kUo=o("from_config()"),SUo=o(` class
method.`),RUo=l(),yy=a("p"),BUo=o("This class cannot be instantiated directly using "),Yhe=a("code"),PUo=o("__init__()"),IUo=o(" (throws an error)."),qUo=l(),_t=a("div"),F(Ly.$$.fragment),NUo=l(),Khe=a("p"),jUo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),DUo=l(),hd=a("p"),GUo=o(`Note:
Loading a model from its configuration file does `),Zhe=a("strong"),OUo=o("not"),VUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=a("a"),XUo=o("from_pretrained()"),zUo=o(" to load the model weights."),QUo=l(),F(Fv.$$.fragment),WUo=l(),mo=a("div"),F(xy.$$.fragment),HUo=l(),epe=a("p"),UUo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),JUo=l(),Ga=a("p"),YUo=o("The model class to instantiate is selected based on the "),ope=a("code"),KUo=o("model_type"),ZUo=o(` property of the config object (either
passed as an argument or loaded from `),rpe=a("code"),eJo=o("pretrained_model_name_or_path"),oJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tpe=a("code"),rJo=o("pretrained_model_name_or_path"),tJo=o(":"),aJo=l(),Oa=a("ul"),Tv=a("li"),ape=a("strong"),nJo=o("data2vec-audio"),sJo=o(" \u2014 "),BV=a("a"),lJo=o("Data2VecAudioForXVector"),iJo=o(" (Data2VecAudio model)"),dJo=l(),Mv=a("li"),npe=a("strong"),cJo=o("unispeech-sat"),fJo=o(" \u2014 "),PV=a("a"),mJo=o("UniSpeechSatForXVector"),gJo=o(" (UniSpeechSat model)"),hJo=l(),Ev=a("li"),spe=a("strong"),pJo=o("wav2vec2"),uJo=o(" \u2014 "),IV=a("a"),_Jo=o("Wav2Vec2ForXVector"),bJo=o(" (Wav2Vec2 model)"),vJo=l(),Cv=a("li"),lpe=a("strong"),FJo=o("wavlm"),TJo=o(" \u2014 "),qV=a("a"),MJo=o("WavLMForXVector"),EJo=o(" (WavLM model)"),CJo=l(),wv=a("p"),wJo=o("The model is set in evaluation mode by default using "),ipe=a("code"),AJo=o("model.eval()"),yJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dpe=a("code"),LJo=o("model.train()"),xJo=l(),F(Av.$$.fragment),ePe=l(),pd=a("h2"),yv=a("a"),cpe=a("span"),F($y.$$.fragment),$Jo=l(),fpe=a("span"),kJo=o("AutoModelForMaskedImageModeling"),oPe=l(),Qo=a("div"),F(ky.$$.fragment),SJo=l(),ud=a("p"),RJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),NV=a("a"),BJo=o("from_pretrained()"),PJo=o(" class method or the "),jV=a("a"),IJo=o("from_config()"),qJo=o(` class
method.`),NJo=l(),Sy=a("p"),jJo=o("This class cannot be instantiated directly using "),mpe=a("code"),DJo=o("__init__()"),GJo=o(" (throws an error)."),OJo=l(),bt=a("div"),F(Ry.$$.fragment),VJo=l(),gpe=a("p"),XJo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),zJo=l(),_d=a("p"),QJo=o(`Note:
Loading a model from its configuration file does `),hpe=a("strong"),WJo=o("not"),HJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=a("a"),UJo=o("from_pretrained()"),JJo=o(" to load the model weights."),YJo=l(),F(Lv.$$.fragment),KJo=l(),go=a("div"),F(By.$$.fragment),ZJo=l(),ppe=a("p"),eYo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),oYo=l(),Va=a("p"),rYo=o("The model class to instantiate is selected based on the "),upe=a("code"),tYo=o("model_type"),aYo=o(` property of the config object (either
passed as an argument or loaded from `),_pe=a("code"),nYo=o("pretrained_model_name_or_path"),sYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bpe=a("code"),lYo=o("pretrained_model_name_or_path"),iYo=o(":"),dYo=l(),bd=a("ul"),xv=a("li"),vpe=a("strong"),cYo=o("deit"),fYo=o(" \u2014 "),GV=a("a"),mYo=o("DeiTForMaskedImageModeling"),gYo=o(" (DeiT model)"),hYo=l(),$v=a("li"),Fpe=a("strong"),pYo=o("swin"),uYo=o(" \u2014 "),OV=a("a"),_Yo=o("SwinForMaskedImageModeling"),bYo=o(" (Swin model)"),vYo=l(),kv=a("li"),Tpe=a("strong"),FYo=o("vit"),TYo=o(" \u2014 "),VV=a("a"),MYo=o("ViTForMaskedImageModeling"),EYo=o(" (ViT model)"),CYo=l(),Sv=a("p"),wYo=o("The model is set in evaluation mode by default using "),Mpe=a("code"),AYo=o("model.eval()"),yYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Epe=a("code"),LYo=o("model.train()"),xYo=l(),F(Rv.$$.fragment),rPe=l(),vd=a("h2"),Bv=a("a"),Cpe=a("span"),F(Py.$$.fragment),$Yo=l(),wpe=a("span"),kYo=o("AutoModelForObjectDetection"),tPe=l(),Wo=a("div"),F(Iy.$$.fragment),SYo=l(),Fd=a("p"),RYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),XV=a("a"),BYo=o("from_pretrained()"),PYo=o(" class method or the "),zV=a("a"),IYo=o("from_config()"),qYo=o(` class
method.`),NYo=l(),qy=a("p"),jYo=o("This class cannot be instantiated directly using "),Ape=a("code"),DYo=o("__init__()"),GYo=o(" (throws an error)."),OYo=l(),vt=a("div"),F(Ny.$$.fragment),VYo=l(),ype=a("p"),XYo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),zYo=l(),Td=a("p"),QYo=o(`Note:
Loading a model from its configuration file does `),Lpe=a("strong"),WYo=o("not"),HYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QV=a("a"),UYo=o("from_pretrained()"),JYo=o(" to load the model weights."),YYo=l(),F(Pv.$$.fragment),KYo=l(),ho=a("div"),F(jy.$$.fragment),ZYo=l(),xpe=a("p"),eKo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),oKo=l(),Xa=a("p"),rKo=o("The model class to instantiate is selected based on the "),$pe=a("code"),tKo=o("model_type"),aKo=o(` property of the config object (either
passed as an argument or loaded from `),kpe=a("code"),nKo=o("pretrained_model_name_or_path"),sKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Spe=a("code"),lKo=o("pretrained_model_name_or_path"),iKo=o(":"),dKo=l(),Dy=a("ul"),Iv=a("li"),Rpe=a("strong"),cKo=o("detr"),fKo=o(" \u2014 "),WV=a("a"),mKo=o("DetrForObjectDetection"),gKo=o(" (DETR model)"),hKo=l(),qv=a("li"),Bpe=a("strong"),pKo=o("yolos"),uKo=o(" \u2014 "),HV=a("a"),_Ko=o("YolosForObjectDetection"),bKo=o(" (YOLOS model)"),vKo=l(),Nv=a("p"),FKo=o("The model is set in evaluation mode by default using "),Ppe=a("code"),TKo=o("model.eval()"),MKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ipe=a("code"),EKo=o("model.train()"),CKo=l(),F(jv.$$.fragment),aPe=l(),Md=a("h2"),Dv=a("a"),qpe=a("span"),F(Gy.$$.fragment),wKo=l(),Npe=a("span"),AKo=o("AutoModelForImageSegmentation"),nPe=l(),Ho=a("div"),F(Oy.$$.fragment),yKo=l(),Ed=a("p"),LKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),UV=a("a"),xKo=o("from_pretrained()"),$Ko=o(" class method or the "),JV=a("a"),kKo=o("from_config()"),SKo=o(` class
method.`),RKo=l(),Vy=a("p"),BKo=o("This class cannot be instantiated directly using "),jpe=a("code"),PKo=o("__init__()"),IKo=o(" (throws an error)."),qKo=l(),Ft=a("div"),F(Xy.$$.fragment),NKo=l(),Dpe=a("p"),jKo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),DKo=l(),Cd=a("p"),GKo=o(`Note:
Loading a model from its configuration file does `),Gpe=a("strong"),OKo=o("not"),VKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=a("a"),XKo=o("from_pretrained()"),zKo=o(" to load the model weights."),QKo=l(),F(Gv.$$.fragment),WKo=l(),po=a("div"),F(zy.$$.fragment),HKo=l(),Ope=a("p"),UKo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),JKo=l(),za=a("p"),YKo=o("The model class to instantiate is selected based on the "),Vpe=a("code"),KKo=o("model_type"),ZKo=o(` property of the config object (either
passed as an argument or loaded from `),Xpe=a("code"),eZo=o("pretrained_model_name_or_path"),oZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zpe=a("code"),rZo=o("pretrained_model_name_or_path"),tZo=o(":"),aZo=l(),Qpe=a("ul"),Ov=a("li"),Wpe=a("strong"),nZo=o("detr"),sZo=o(" \u2014 "),KV=a("a"),lZo=o("DetrForSegmentation"),iZo=o(" (DETR model)"),dZo=l(),Vv=a("p"),cZo=o("The model is set in evaluation mode by default using "),Hpe=a("code"),fZo=o("model.eval()"),mZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Upe=a("code"),gZo=o("model.train()"),hZo=l(),F(Xv.$$.fragment),sPe=l(),wd=a("h2"),zv=a("a"),Jpe=a("span"),F(Qy.$$.fragment),pZo=l(),Ype=a("span"),uZo=o("AutoModelForSemanticSegmentation"),lPe=l(),Uo=a("div"),F(Wy.$$.fragment),_Zo=l(),Ad=a("p"),bZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ZV=a("a"),vZo=o("from_pretrained()"),FZo=o(" class method or the "),eX=a("a"),TZo=o("from_config()"),MZo=o(` class
method.`),EZo=l(),Hy=a("p"),CZo=o("This class cannot be instantiated directly using "),Kpe=a("code"),wZo=o("__init__()"),AZo=o(" (throws an error)."),yZo=l(),Tt=a("div"),F(Uy.$$.fragment),LZo=l(),Zpe=a("p"),xZo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),$Zo=l(),yd=a("p"),kZo=o(`Note:
Loading a model from its configuration file does `),eue=a("strong"),SZo=o("not"),RZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=a("a"),BZo=o("from_pretrained()"),PZo=o(" to load the model weights."),IZo=l(),F(Qv.$$.fragment),qZo=l(),uo=a("div"),F(Jy.$$.fragment),NZo=l(),oue=a("p"),jZo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),DZo=l(),Qa=a("p"),GZo=o("The model class to instantiate is selected based on the "),rue=a("code"),OZo=o("model_type"),VZo=o(` property of the config object (either
passed as an argument or loaded from `),tue=a("code"),XZo=o("pretrained_model_name_or_path"),zZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aue=a("code"),QZo=o("pretrained_model_name_or_path"),WZo=o(":"),HZo=l(),Wa=a("ul"),Wv=a("li"),nue=a("strong"),UZo=o("beit"),JZo=o(" \u2014 "),rX=a("a"),YZo=o("BeitForSemanticSegmentation"),KZo=o(" (BEiT model)"),ZZo=l(),Hv=a("li"),sue=a("strong"),eer=o("data2vec-vision"),oer=o(" \u2014 "),tX=a("a"),rer=o("Data2VecVisionForSemanticSegmentation"),ter=o(" (Data2VecVision model)"),aer=l(),Uv=a("li"),lue=a("strong"),ner=o("dpt"),ser=o(" \u2014 "),aX=a("a"),ler=o("DPTForSemanticSegmentation"),ier=o(" (DPT model)"),der=l(),Jv=a("li"),iue=a("strong"),cer=o("segformer"),fer=o(" \u2014 "),nX=a("a"),mer=o("SegformerForSemanticSegmentation"),ger=o(" (SegFormer model)"),her=l(),Yv=a("p"),per=o("The model is set in evaluation mode by default using "),due=a("code"),uer=o("model.eval()"),_er=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=a("code"),ber=o("model.train()"),ver=l(),F(Kv.$$.fragment),iPe=l(),Ld=a("h2"),Zv=a("a"),fue=a("span"),F(Yy.$$.fragment),Fer=l(),mue=a("span"),Ter=o("AutoModelForInstanceSegmentation"),dPe=l(),Jo=a("div"),F(Ky.$$.fragment),Mer=l(),xd=a("p"),Eer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),sX=a("a"),Cer=o("from_pretrained()"),wer=o(" class method or the "),lX=a("a"),Aer=o("from_config()"),yer=o(` class
method.`),Ler=l(),Zy=a("p"),xer=o("This class cannot be instantiated directly using "),gue=a("code"),$er=o("__init__()"),ker=o(" (throws an error)."),Ser=l(),Mt=a("div"),F(eL.$$.fragment),Rer=l(),hue=a("p"),Ber=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Per=l(),$d=a("p"),Ier=o(`Note:
Loading a model from its configuration file does `),pue=a("strong"),qer=o("not"),Ner=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=a("a"),jer=o("from_pretrained()"),Der=o(" to load the model weights."),Ger=l(),F(eF.$$.fragment),Oer=l(),_o=a("div"),F(oL.$$.fragment),Ver=l(),uue=a("p"),Xer=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),zer=l(),Ha=a("p"),Qer=o("The model class to instantiate is selected based on the "),_ue=a("code"),Wer=o("model_type"),Her=o(` property of the config object (either
passed as an argument or loaded from `),bue=a("code"),Uer=o("pretrained_model_name_or_path"),Jer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=a("code"),Yer=o("pretrained_model_name_or_path"),Ker=o(":"),Zer=l(),Fue=a("ul"),oF=a("li"),Tue=a("strong"),eor=o("maskformer"),oor=o(" \u2014 "),dX=a("a"),ror=o("MaskFormerForInstanceSegmentation"),tor=o(" (MaskFormer model)"),aor=l(),rF=a("p"),nor=o("The model is set in evaluation mode by default using "),Mue=a("code"),sor=o("model.eval()"),lor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eue=a("code"),ior=o("model.train()"),dor=l(),F(tF.$$.fragment),cPe=l(),kd=a("h2"),aF=a("a"),Cue=a("span"),F(rL.$$.fragment),cor=l(),wue=a("span"),mor=o("TFAutoModel"),fPe=l(),Yo=a("div"),F(tL.$$.fragment),gor=l(),Sd=a("p"),hor=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cX=a("a"),por=o("from_pretrained()"),uor=o(" class method or the "),fX=a("a"),_or=o("from_config()"),bor=o(` class
method.`),vor=l(),aL=a("p"),For=o("This class cannot be instantiated directly using "),Aue=a("code"),Tor=o("__init__()"),Mor=o(" (throws an error)."),Eor=l(),Et=a("div"),F(nL.$$.fragment),Cor=l(),yue=a("p"),wor=o("Instantiates one of the base model classes of the library from a configuration."),Aor=l(),Rd=a("p"),yor=o(`Note:
Loading a model from its configuration file does `),Lue=a("strong"),Lor=o("not"),xor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=a("a"),$or=o("from_pretrained()"),kor=o(" to load the model weights."),Sor=l(),F(nF.$$.fragment),Ror=l(),Cr=a("div"),F(sL.$$.fragment),Bor=l(),xue=a("p"),Por=o("Instantiate one of the base model classes of the library from a pretrained model."),Ior=l(),Ua=a("p"),qor=o("The model class to instantiate is selected based on the "),$ue=a("code"),Nor=o("model_type"),jor=o(` property of the config object (either
passed as an argument or loaded from `),kue=a("code"),Dor=o("pretrained_model_name_or_path"),Gor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sue=a("code"),Oor=o("pretrained_model_name_or_path"),Vor=o(":"),Xor=l(),j=a("ul"),sF=a("li"),Rue=a("strong"),zor=o("albert"),Qor=o(" \u2014 "),gX=a("a"),Wor=o("TFAlbertModel"),Hor=o(" (ALBERT model)"),Uor=l(),lF=a("li"),Bue=a("strong"),Jor=o("bart"),Yor=o(" \u2014 "),hX=a("a"),Kor=o("TFBartModel"),Zor=o(" (BART model)"),err=l(),iF=a("li"),Pue=a("strong"),orr=o("bert"),rrr=o(" \u2014 "),pX=a("a"),trr=o("TFBertModel"),arr=o(" (BERT model)"),nrr=l(),dF=a("li"),Iue=a("strong"),srr=o("blenderbot"),lrr=o(" \u2014 "),uX=a("a"),irr=o("TFBlenderbotModel"),drr=o(" (Blenderbot model)"),crr=l(),cF=a("li"),que=a("strong"),frr=o("blenderbot-small"),mrr=o(" \u2014 "),_X=a("a"),grr=o("TFBlenderbotSmallModel"),hrr=o(" (BlenderbotSmall model)"),prr=l(),fF=a("li"),Nue=a("strong"),urr=o("camembert"),_rr=o(" \u2014 "),bX=a("a"),brr=o("TFCamembertModel"),vrr=o(" (CamemBERT model)"),Frr=l(),mF=a("li"),jue=a("strong"),Trr=o("clip"),Mrr=o(" \u2014 "),vX=a("a"),Err=o("TFCLIPModel"),Crr=o(" (CLIP model)"),wrr=l(),gF=a("li"),Due=a("strong"),Arr=o("convbert"),yrr=o(" \u2014 "),FX=a("a"),Lrr=o("TFConvBertModel"),xrr=o(" (ConvBERT model)"),$rr=l(),hF=a("li"),Gue=a("strong"),krr=o("convnext"),Srr=o(" \u2014 "),TX=a("a"),Rrr=o("TFConvNextModel"),Brr=o(" (ConvNext model)"),Prr=l(),pF=a("li"),Oue=a("strong"),Irr=o("ctrl"),qrr=o(" \u2014 "),MX=a("a"),Nrr=o("TFCTRLModel"),jrr=o(" (CTRL model)"),Drr=l(),uF=a("li"),Vue=a("strong"),Grr=o("deberta"),Orr=o(" \u2014 "),EX=a("a"),Vrr=o("TFDebertaModel"),Xrr=o(" (DeBERTa model)"),zrr=l(),_F=a("li"),Xue=a("strong"),Qrr=o("deberta-v2"),Wrr=o(" \u2014 "),CX=a("a"),Hrr=o("TFDebertaV2Model"),Urr=o(" (DeBERTa-v2 model)"),Jrr=l(),bF=a("li"),zue=a("strong"),Yrr=o("distilbert"),Krr=o(" \u2014 "),wX=a("a"),Zrr=o("TFDistilBertModel"),etr=o(" (DistilBERT model)"),otr=l(),vF=a("li"),Que=a("strong"),rtr=o("dpr"),ttr=o(" \u2014 "),AX=a("a"),atr=o("TFDPRQuestionEncoder"),ntr=o(" (DPR model)"),str=l(),FF=a("li"),Wue=a("strong"),ltr=o("electra"),itr=o(" \u2014 "),yX=a("a"),dtr=o("TFElectraModel"),ctr=o(" (ELECTRA model)"),ftr=l(),TF=a("li"),Hue=a("strong"),mtr=o("flaubert"),gtr=o(" \u2014 "),LX=a("a"),htr=o("TFFlaubertModel"),ptr=o(" (FlauBERT model)"),utr=l(),$s=a("li"),Uue=a("strong"),_tr=o("funnel"),btr=o(" \u2014 "),xX=a("a"),vtr=o("TFFunnelModel"),Ftr=o(" or "),$X=a("a"),Ttr=o("TFFunnelBaseModel"),Mtr=o(" (Funnel Transformer model)"),Etr=l(),MF=a("li"),Jue=a("strong"),Ctr=o("gpt2"),wtr=o(" \u2014 "),kX=a("a"),Atr=o("TFGPT2Model"),ytr=o(" (OpenAI GPT-2 model)"),Ltr=l(),EF=a("li"),Yue=a("strong"),xtr=o("gptj"),$tr=o(" \u2014 "),SX=a("a"),ktr=o("TFGPTJModel"),Str=o(" (GPT-J model)"),Rtr=l(),CF=a("li"),Kue=a("strong"),Btr=o("hubert"),Ptr=o(" \u2014 "),RX=a("a"),Itr=o("TFHubertModel"),qtr=o(" (Hubert model)"),Ntr=l(),wF=a("li"),Zue=a("strong"),jtr=o("layoutlm"),Dtr=o(" \u2014 "),BX=a("a"),Gtr=o("TFLayoutLMModel"),Otr=o(" (LayoutLM model)"),Vtr=l(),AF=a("li"),e_e=a("strong"),Xtr=o("led"),ztr=o(" \u2014 "),PX=a("a"),Qtr=o("TFLEDModel"),Wtr=o(" (LED model)"),Htr=l(),yF=a("li"),o_e=a("strong"),Utr=o("longformer"),Jtr=o(" \u2014 "),IX=a("a"),Ytr=o("TFLongformerModel"),Ktr=o(" (Longformer model)"),Ztr=l(),LF=a("li"),r_e=a("strong"),ear=o("lxmert"),oar=o(" \u2014 "),qX=a("a"),rar=o("TFLxmertModel"),tar=o(" (LXMERT model)"),aar=l(),xF=a("li"),t_e=a("strong"),nar=o("marian"),sar=o(" \u2014 "),NX=a("a"),lar=o("TFMarianModel"),iar=o(" (Marian model)"),dar=l(),$F=a("li"),a_e=a("strong"),car=o("mbart"),far=o(" \u2014 "),jX=a("a"),mar=o("TFMBartModel"),gar=o(" (mBART model)"),har=l(),kF=a("li"),n_e=a("strong"),par=o("mobilebert"),uar=o(" \u2014 "),DX=a("a"),_ar=o("TFMobileBertModel"),bar=o(" (MobileBERT model)"),Far=l(),SF=a("li"),s_e=a("strong"),Tar=o("mpnet"),Mar=o(" \u2014 "),GX=a("a"),Ear=o("TFMPNetModel"),Car=o(" (MPNet model)"),war=l(),RF=a("li"),l_e=a("strong"),Aar=o("mt5"),yar=o(" \u2014 "),OX=a("a"),Lar=o("TFMT5Model"),xar=o(" (mT5 model)"),$ar=l(),BF=a("li"),i_e=a("strong"),kar=o("openai-gpt"),Sar=o(" \u2014 "),VX=a("a"),Rar=o("TFOpenAIGPTModel"),Bar=o(" (OpenAI GPT model)"),Par=l(),PF=a("li"),d_e=a("strong"),Iar=o("pegasus"),qar=o(" \u2014 "),XX=a("a"),Nar=o("TFPegasusModel"),jar=o(" (Pegasus model)"),Dar=l(),IF=a("li"),c_e=a("strong"),Gar=o("rembert"),Oar=o(" \u2014 "),zX=a("a"),Var=o("TFRemBertModel"),Xar=o(" (RemBERT model)"),zar=l(),qF=a("li"),f_e=a("strong"),Qar=o("roberta"),War=o(" \u2014 "),QX=a("a"),Har=o("TFRobertaModel"),Uar=o(" (RoBERTa model)"),Jar=l(),NF=a("li"),m_e=a("strong"),Yar=o("roformer"),Kar=o(" \u2014 "),WX=a("a"),Zar=o("TFRoFormerModel"),enr=o(" (RoFormer model)"),onr=l(),jF=a("li"),g_e=a("strong"),rnr=o("speech_to_text"),tnr=o(" \u2014 "),HX=a("a"),anr=o("TFSpeech2TextModel"),nnr=o(" (Speech2Text model)"),snr=l(),DF=a("li"),h_e=a("strong"),lnr=o("t5"),inr=o(" \u2014 "),UX=a("a"),dnr=o("TFT5Model"),cnr=o(" (T5 model)"),fnr=l(),GF=a("li"),p_e=a("strong"),mnr=o("tapas"),gnr=o(" \u2014 "),JX=a("a"),hnr=o("TFTapasModel"),pnr=o(" (TAPAS model)"),unr=l(),OF=a("li"),u_e=a("strong"),_nr=o("transfo-xl"),bnr=o(" \u2014 "),YX=a("a"),vnr=o("TFTransfoXLModel"),Fnr=o(" (Transformer-XL model)"),Tnr=l(),VF=a("li"),__e=a("strong"),Mnr=o("vit"),Enr=o(" \u2014 "),KX=a("a"),Cnr=o("TFViTModel"),wnr=o(" (ViT model)"),Anr=l(),XF=a("li"),b_e=a("strong"),ynr=o("vit_mae"),Lnr=o(" \u2014 "),ZX=a("a"),xnr=o("TFViTMAEModel"),$nr=o(" (ViTMAE model)"),knr=l(),zF=a("li"),v_e=a("strong"),Snr=o("wav2vec2"),Rnr=o(" \u2014 "),ez=a("a"),Bnr=o("TFWav2Vec2Model"),Pnr=o(" (Wav2Vec2 model)"),Inr=l(),QF=a("li"),F_e=a("strong"),qnr=o("xlm"),Nnr=o(" \u2014 "),oz=a("a"),jnr=o("TFXLMModel"),Dnr=o(" (XLM model)"),Gnr=l(),WF=a("li"),T_e=a("strong"),Onr=o("xlm-roberta"),Vnr=o(" \u2014 "),rz=a("a"),Xnr=o("TFXLMRobertaModel"),znr=o(" (XLM-RoBERTa model)"),Qnr=l(),HF=a("li"),M_e=a("strong"),Wnr=o("xlnet"),Hnr=o(" \u2014 "),tz=a("a"),Unr=o("TFXLNetModel"),Jnr=o(" (XLNet model)"),Ynr=l(),F(UF.$$.fragment),mPe=l(),Bd=a("h2"),JF=a("a"),E_e=a("span"),F(lL.$$.fragment),Knr=l(),C_e=a("span"),Znr=o("TFAutoModelForPreTraining"),gPe=l(),Ko=a("div"),F(iL.$$.fragment),esr=l(),Pd=a("p"),osr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),az=a("a"),rsr=o("from_pretrained()"),tsr=o(" class method or the "),nz=a("a"),asr=o("from_config()"),nsr=o(` class
method.`),ssr=l(),dL=a("p"),lsr=o("This class cannot be instantiated directly using "),w_e=a("code"),isr=o("__init__()"),dsr=o(" (throws an error)."),csr=l(),Ct=a("div"),F(cL.$$.fragment),fsr=l(),A_e=a("p"),msr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),gsr=l(),Id=a("p"),hsr=o(`Note:
Loading a model from its configuration file does `),y_e=a("strong"),psr=o("not"),usr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=a("a"),_sr=o("from_pretrained()"),bsr=o(" to load the model weights."),vsr=l(),F(YF.$$.fragment),Fsr=l(),wr=a("div"),F(fL.$$.fragment),Tsr=l(),L_e=a("p"),Msr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Esr=l(),Ja=a("p"),Csr=o("The model class to instantiate is selected based on the "),x_e=a("code"),wsr=o("model_type"),Asr=o(` property of the config object (either
passed as an argument or loaded from `),$_e=a("code"),ysr=o("pretrained_model_name_or_path"),Lsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k_e=a("code"),xsr=o("pretrained_model_name_or_path"),$sr=o(":"),ksr=l(),ne=a("ul"),KF=a("li"),S_e=a("strong"),Ssr=o("albert"),Rsr=o(" \u2014 "),lz=a("a"),Bsr=o("TFAlbertForPreTraining"),Psr=o(" (ALBERT model)"),Isr=l(),ZF=a("li"),R_e=a("strong"),qsr=o("bart"),Nsr=o(" \u2014 "),iz=a("a"),jsr=o("TFBartForConditionalGeneration"),Dsr=o(" (BART model)"),Gsr=l(),e0=a("li"),B_e=a("strong"),Osr=o("bert"),Vsr=o(" \u2014 "),dz=a("a"),Xsr=o("TFBertForPreTraining"),zsr=o(" (BERT model)"),Qsr=l(),o0=a("li"),P_e=a("strong"),Wsr=o("camembert"),Hsr=o(" \u2014 "),cz=a("a"),Usr=o("TFCamembertForMaskedLM"),Jsr=o(" (CamemBERT model)"),Ysr=l(),r0=a("li"),I_e=a("strong"),Ksr=o("ctrl"),Zsr=o(" \u2014 "),fz=a("a"),elr=o("TFCTRLLMHeadModel"),olr=o(" (CTRL model)"),rlr=l(),t0=a("li"),q_e=a("strong"),tlr=o("distilbert"),alr=o(" \u2014 "),mz=a("a"),nlr=o("TFDistilBertForMaskedLM"),slr=o(" (DistilBERT model)"),llr=l(),a0=a("li"),N_e=a("strong"),ilr=o("electra"),dlr=o(" \u2014 "),gz=a("a"),clr=o("TFElectraForPreTraining"),flr=o(" (ELECTRA model)"),mlr=l(),n0=a("li"),j_e=a("strong"),glr=o("flaubert"),hlr=o(" \u2014 "),hz=a("a"),plr=o("TFFlaubertWithLMHeadModel"),ulr=o(" (FlauBERT model)"),_lr=l(),s0=a("li"),D_e=a("strong"),blr=o("funnel"),vlr=o(" \u2014 "),pz=a("a"),Flr=o("TFFunnelForPreTraining"),Tlr=o(" (Funnel Transformer model)"),Mlr=l(),l0=a("li"),G_e=a("strong"),Elr=o("gpt2"),Clr=o(" \u2014 "),uz=a("a"),wlr=o("TFGPT2LMHeadModel"),Alr=o(" (OpenAI GPT-2 model)"),ylr=l(),i0=a("li"),O_e=a("strong"),Llr=o("layoutlm"),xlr=o(" \u2014 "),_z=a("a"),$lr=o("TFLayoutLMForMaskedLM"),klr=o(" (LayoutLM model)"),Slr=l(),d0=a("li"),V_e=a("strong"),Rlr=o("lxmert"),Blr=o(" \u2014 "),bz=a("a"),Plr=o("TFLxmertForPreTraining"),Ilr=o(" (LXMERT model)"),qlr=l(),c0=a("li"),X_e=a("strong"),Nlr=o("mobilebert"),jlr=o(" \u2014 "),vz=a("a"),Dlr=o("TFMobileBertForPreTraining"),Glr=o(" (MobileBERT model)"),Olr=l(),f0=a("li"),z_e=a("strong"),Vlr=o("mpnet"),Xlr=o(" \u2014 "),Fz=a("a"),zlr=o("TFMPNetForMaskedLM"),Qlr=o(" (MPNet model)"),Wlr=l(),m0=a("li"),Q_e=a("strong"),Hlr=o("openai-gpt"),Ulr=o(" \u2014 "),Tz=a("a"),Jlr=o("TFOpenAIGPTLMHeadModel"),Ylr=o(" (OpenAI GPT model)"),Klr=l(),g0=a("li"),W_e=a("strong"),Zlr=o("roberta"),eir=o(" \u2014 "),Mz=a("a"),oir=o("TFRobertaForMaskedLM"),rir=o(" (RoBERTa model)"),tir=l(),h0=a("li"),H_e=a("strong"),air=o("t5"),nir=o(" \u2014 "),Ez=a("a"),sir=o("TFT5ForConditionalGeneration"),lir=o(" (T5 model)"),iir=l(),p0=a("li"),U_e=a("strong"),dir=o("tapas"),cir=o(" \u2014 "),Cz=a("a"),fir=o("TFTapasForMaskedLM"),mir=o(" (TAPAS model)"),gir=l(),u0=a("li"),J_e=a("strong"),hir=o("transfo-xl"),pir=o(" \u2014 "),wz=a("a"),uir=o("TFTransfoXLLMHeadModel"),_ir=o(" (Transformer-XL model)"),bir=l(),_0=a("li"),Y_e=a("strong"),vir=o("vit_mae"),Fir=o(" \u2014 "),Az=a("a"),Tir=o("TFViTMAEForPreTraining"),Mir=o(" (ViTMAE model)"),Eir=l(),b0=a("li"),K_e=a("strong"),Cir=o("xlm"),wir=o(" \u2014 "),yz=a("a"),Air=o("TFXLMWithLMHeadModel"),yir=o(" (XLM model)"),Lir=l(),v0=a("li"),Z_e=a("strong"),xir=o("xlm-roberta"),$ir=o(" \u2014 "),Lz=a("a"),kir=o("TFXLMRobertaForMaskedLM"),Sir=o(" (XLM-RoBERTa model)"),Rir=l(),F0=a("li"),e1e=a("strong"),Bir=o("xlnet"),Pir=o(" \u2014 "),xz=a("a"),Iir=o("TFXLNetLMHeadModel"),qir=o(" (XLNet model)"),Nir=l(),F(T0.$$.fragment),hPe=l(),qd=a("h2"),M0=a("a"),o1e=a("span"),F(mL.$$.fragment),jir=l(),r1e=a("span"),Dir=o("TFAutoModelForCausalLM"),pPe=l(),Zo=a("div"),F(gL.$$.fragment),Gir=l(),Nd=a("p"),Oir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$z=a("a"),Vir=o("from_pretrained()"),Xir=o(" class method or the "),kz=a("a"),zir=o("from_config()"),Qir=o(` class
method.`),Wir=l(),hL=a("p"),Hir=o("This class cannot be instantiated directly using "),t1e=a("code"),Uir=o("__init__()"),Jir=o(" (throws an error)."),Yir=l(),wt=a("div"),F(pL.$$.fragment),Kir=l(),a1e=a("p"),Zir=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),edr=l(),jd=a("p"),odr=o(`Note:
Loading a model from its configuration file does `),n1e=a("strong"),rdr=o("not"),tdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=a("a"),adr=o("from_pretrained()"),ndr=o(" to load the model weights."),sdr=l(),F(E0.$$.fragment),ldr=l(),Ar=a("div"),F(uL.$$.fragment),idr=l(),s1e=a("p"),ddr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),cdr=l(),Ya=a("p"),fdr=o("The model class to instantiate is selected based on the "),l1e=a("code"),mdr=o("model_type"),gdr=o(` property of the config object (either
passed as an argument or loaded from `),i1e=a("code"),hdr=o("pretrained_model_name_or_path"),pdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=a("code"),udr=o("pretrained_model_name_or_path"),_dr=o(":"),bdr=l(),Te=a("ul"),C0=a("li"),c1e=a("strong"),vdr=o("bert"),Fdr=o(" \u2014 "),Rz=a("a"),Tdr=o("TFBertLMHeadModel"),Mdr=o(" (BERT model)"),Edr=l(),w0=a("li"),f1e=a("strong"),Cdr=o("camembert"),wdr=o(" \u2014 "),Bz=a("a"),Adr=o("TFCamembertForCausalLM"),ydr=o(" (CamemBERT model)"),Ldr=l(),A0=a("li"),m1e=a("strong"),xdr=o("ctrl"),$dr=o(" \u2014 "),Pz=a("a"),kdr=o("TFCTRLLMHeadModel"),Sdr=o(" (CTRL model)"),Rdr=l(),y0=a("li"),g1e=a("strong"),Bdr=o("gpt2"),Pdr=o(" \u2014 "),Iz=a("a"),Idr=o("TFGPT2LMHeadModel"),qdr=o(" (OpenAI GPT-2 model)"),Ndr=l(),L0=a("li"),h1e=a("strong"),jdr=o("gptj"),Ddr=o(" \u2014 "),qz=a("a"),Gdr=o("TFGPTJForCausalLM"),Odr=o(" (GPT-J model)"),Vdr=l(),x0=a("li"),p1e=a("strong"),Xdr=o("openai-gpt"),zdr=o(" \u2014 "),Nz=a("a"),Qdr=o("TFOpenAIGPTLMHeadModel"),Wdr=o(" (OpenAI GPT model)"),Hdr=l(),$0=a("li"),u1e=a("strong"),Udr=o("rembert"),Jdr=o(" \u2014 "),jz=a("a"),Ydr=o("TFRemBertForCausalLM"),Kdr=o(" (RemBERT model)"),Zdr=l(),k0=a("li"),_1e=a("strong"),ecr=o("roberta"),ocr=o(" \u2014 "),Dz=a("a"),rcr=o("TFRobertaForCausalLM"),tcr=o(" (RoBERTa model)"),acr=l(),S0=a("li"),b1e=a("strong"),ncr=o("roformer"),scr=o(" \u2014 "),Gz=a("a"),lcr=o("TFRoFormerForCausalLM"),icr=o(" (RoFormer model)"),dcr=l(),R0=a("li"),v1e=a("strong"),ccr=o("transfo-xl"),fcr=o(" \u2014 "),Oz=a("a"),mcr=o("TFTransfoXLLMHeadModel"),gcr=o(" (Transformer-XL model)"),hcr=l(),B0=a("li"),F1e=a("strong"),pcr=o("xlm"),ucr=o(" \u2014 "),Vz=a("a"),_cr=o("TFXLMWithLMHeadModel"),bcr=o(" (XLM model)"),vcr=l(),P0=a("li"),T1e=a("strong"),Fcr=o("xlnet"),Tcr=o(" \u2014 "),Xz=a("a"),Mcr=o("TFXLNetLMHeadModel"),Ecr=o(" (XLNet model)"),Ccr=l(),F(I0.$$.fragment),uPe=l(),Dd=a("h2"),q0=a("a"),M1e=a("span"),F(_L.$$.fragment),wcr=l(),E1e=a("span"),Acr=o("TFAutoModelForImageClassification"),_Pe=l(),er=a("div"),F(bL.$$.fragment),ycr=l(),Gd=a("p"),Lcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zz=a("a"),xcr=o("from_pretrained()"),$cr=o(" class method or the "),Qz=a("a"),kcr=o("from_config()"),Scr=o(` class
method.`),Rcr=l(),vL=a("p"),Bcr=o("This class cannot be instantiated directly using "),C1e=a("code"),Pcr=o("__init__()"),Icr=o(" (throws an error)."),qcr=l(),At=a("div"),F(FL.$$.fragment),Ncr=l(),w1e=a("p"),jcr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Dcr=l(),Od=a("p"),Gcr=o(`Note:
Loading a model from its configuration file does `),A1e=a("strong"),Ocr=o("not"),Vcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wz=a("a"),Xcr=o("from_pretrained()"),zcr=o(" to load the model weights."),Qcr=l(),F(N0.$$.fragment),Wcr=l(),yr=a("div"),F(TL.$$.fragment),Hcr=l(),y1e=a("p"),Ucr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Jcr=l(),Ka=a("p"),Ycr=o("The model class to instantiate is selected based on the "),L1e=a("code"),Kcr=o("model_type"),Zcr=o(` property of the config object (either
passed as an argument or loaded from `),x1e=a("code"),efr=o("pretrained_model_name_or_path"),ofr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=a("code"),rfr=o("pretrained_model_name_or_path"),tfr=o(":"),afr=l(),ML=a("ul"),j0=a("li"),k1e=a("strong"),nfr=o("convnext"),sfr=o(" \u2014 "),Hz=a("a"),lfr=o("TFConvNextForImageClassification"),ifr=o(" (ConvNext model)"),dfr=l(),D0=a("li"),S1e=a("strong"),cfr=o("vit"),ffr=o(" \u2014 "),Uz=a("a"),mfr=o("TFViTForImageClassification"),gfr=o(" (ViT model)"),hfr=l(),F(G0.$$.fragment),bPe=l(),Vd=a("h2"),O0=a("a"),R1e=a("span"),F(EL.$$.fragment),pfr=l(),B1e=a("span"),ufr=o("TFAutoModelForMaskedLM"),vPe=l(),or=a("div"),F(CL.$$.fragment),_fr=l(),Xd=a("p"),bfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Jz=a("a"),vfr=o("from_pretrained()"),Ffr=o(" class method or the "),Yz=a("a"),Tfr=o("from_config()"),Mfr=o(` class
method.`),Efr=l(),wL=a("p"),Cfr=o("This class cannot be instantiated directly using "),P1e=a("code"),wfr=o("__init__()"),Afr=o(" (throws an error)."),yfr=l(),yt=a("div"),F(AL.$$.fragment),Lfr=l(),I1e=a("p"),xfr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$fr=l(),zd=a("p"),kfr=o(`Note:
Loading a model from its configuration file does `),q1e=a("strong"),Sfr=o("not"),Rfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=a("a"),Bfr=o("from_pretrained()"),Pfr=o(" to load the model weights."),Ifr=l(),F(V0.$$.fragment),qfr=l(),Lr=a("div"),F(yL.$$.fragment),Nfr=l(),N1e=a("p"),jfr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Dfr=l(),Za=a("p"),Gfr=o("The model class to instantiate is selected based on the "),j1e=a("code"),Ofr=o("model_type"),Vfr=o(` property of the config object (either
passed as an argument or loaded from `),D1e=a("code"),Xfr=o("pretrained_model_name_or_path"),zfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G1e=a("code"),Qfr=o("pretrained_model_name_or_path"),Wfr=o(":"),Hfr=l(),ie=a("ul"),X0=a("li"),O1e=a("strong"),Ufr=o("albert"),Jfr=o(" \u2014 "),Zz=a("a"),Yfr=o("TFAlbertForMaskedLM"),Kfr=o(" (ALBERT model)"),Zfr=l(),z0=a("li"),V1e=a("strong"),emr=o("bert"),omr=o(" \u2014 "),eQ=a("a"),rmr=o("TFBertForMaskedLM"),tmr=o(" (BERT model)"),amr=l(),Q0=a("li"),X1e=a("strong"),nmr=o("camembert"),smr=o(" \u2014 "),oQ=a("a"),lmr=o("TFCamembertForMaskedLM"),imr=o(" (CamemBERT model)"),dmr=l(),W0=a("li"),z1e=a("strong"),cmr=o("convbert"),fmr=o(" \u2014 "),rQ=a("a"),mmr=o("TFConvBertForMaskedLM"),gmr=o(" (ConvBERT model)"),hmr=l(),H0=a("li"),Q1e=a("strong"),pmr=o("deberta"),umr=o(" \u2014 "),tQ=a("a"),_mr=o("TFDebertaForMaskedLM"),bmr=o(" (DeBERTa model)"),vmr=l(),U0=a("li"),W1e=a("strong"),Fmr=o("deberta-v2"),Tmr=o(" \u2014 "),aQ=a("a"),Mmr=o("TFDebertaV2ForMaskedLM"),Emr=o(" (DeBERTa-v2 model)"),Cmr=l(),J0=a("li"),H1e=a("strong"),wmr=o("distilbert"),Amr=o(" \u2014 "),nQ=a("a"),ymr=o("TFDistilBertForMaskedLM"),Lmr=o(" (DistilBERT model)"),xmr=l(),Y0=a("li"),U1e=a("strong"),$mr=o("electra"),kmr=o(" \u2014 "),sQ=a("a"),Smr=o("TFElectraForMaskedLM"),Rmr=o(" (ELECTRA model)"),Bmr=l(),K0=a("li"),J1e=a("strong"),Pmr=o("flaubert"),Imr=o(" \u2014 "),lQ=a("a"),qmr=o("TFFlaubertWithLMHeadModel"),Nmr=o(" (FlauBERT model)"),jmr=l(),Z0=a("li"),Y1e=a("strong"),Dmr=o("funnel"),Gmr=o(" \u2014 "),iQ=a("a"),Omr=o("TFFunnelForMaskedLM"),Vmr=o(" (Funnel Transformer model)"),Xmr=l(),eT=a("li"),K1e=a("strong"),zmr=o("layoutlm"),Qmr=o(" \u2014 "),dQ=a("a"),Wmr=o("TFLayoutLMForMaskedLM"),Hmr=o(" (LayoutLM model)"),Umr=l(),oT=a("li"),Z1e=a("strong"),Jmr=o("longformer"),Ymr=o(" \u2014 "),cQ=a("a"),Kmr=o("TFLongformerForMaskedLM"),Zmr=o(" (Longformer model)"),egr=l(),rT=a("li"),e7e=a("strong"),ogr=o("mobilebert"),rgr=o(" \u2014 "),fQ=a("a"),tgr=o("TFMobileBertForMaskedLM"),agr=o(" (MobileBERT model)"),ngr=l(),tT=a("li"),o7e=a("strong"),sgr=o("mpnet"),lgr=o(" \u2014 "),mQ=a("a"),igr=o("TFMPNetForMaskedLM"),dgr=o(" (MPNet model)"),cgr=l(),aT=a("li"),r7e=a("strong"),fgr=o("rembert"),mgr=o(" \u2014 "),gQ=a("a"),ggr=o("TFRemBertForMaskedLM"),hgr=o(" (RemBERT model)"),pgr=l(),nT=a("li"),t7e=a("strong"),ugr=o("roberta"),_gr=o(" \u2014 "),hQ=a("a"),bgr=o("TFRobertaForMaskedLM"),vgr=o(" (RoBERTa model)"),Fgr=l(),sT=a("li"),a7e=a("strong"),Tgr=o("roformer"),Mgr=o(" \u2014 "),pQ=a("a"),Egr=o("TFRoFormerForMaskedLM"),Cgr=o(" (RoFormer model)"),wgr=l(),lT=a("li"),n7e=a("strong"),Agr=o("tapas"),ygr=o(" \u2014 "),uQ=a("a"),Lgr=o("TFTapasForMaskedLM"),xgr=o(" (TAPAS model)"),$gr=l(),iT=a("li"),s7e=a("strong"),kgr=o("xlm"),Sgr=o(" \u2014 "),_Q=a("a"),Rgr=o("TFXLMWithLMHeadModel"),Bgr=o(" (XLM model)"),Pgr=l(),dT=a("li"),l7e=a("strong"),Igr=o("xlm-roberta"),qgr=o(" \u2014 "),bQ=a("a"),Ngr=o("TFXLMRobertaForMaskedLM"),jgr=o(" (XLM-RoBERTa model)"),Dgr=l(),F(cT.$$.fragment),FPe=l(),Qd=a("h2"),fT=a("a"),i7e=a("span"),F(LL.$$.fragment),Ggr=l(),d7e=a("span"),Ogr=o("TFAutoModelForSeq2SeqLM"),TPe=l(),rr=a("div"),F(xL.$$.fragment),Vgr=l(),Wd=a("p"),Xgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),vQ=a("a"),zgr=o("from_pretrained()"),Qgr=o(" class method or the "),FQ=a("a"),Wgr=o("from_config()"),Hgr=o(` class
method.`),Ugr=l(),$L=a("p"),Jgr=o("This class cannot be instantiated directly using "),c7e=a("code"),Ygr=o("__init__()"),Kgr=o(" (throws an error)."),Zgr=l(),Lt=a("div"),F(kL.$$.fragment),ehr=l(),f7e=a("p"),ohr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rhr=l(),Hd=a("p"),thr=o(`Note:
Loading a model from its configuration file does `),m7e=a("strong"),ahr=o("not"),nhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=a("a"),shr=o("from_pretrained()"),lhr=o(" to load the model weights."),ihr=l(),F(mT.$$.fragment),dhr=l(),xr=a("div"),F(SL.$$.fragment),chr=l(),g7e=a("p"),fhr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mhr=l(),en=a("p"),ghr=o("The model class to instantiate is selected based on the "),h7e=a("code"),hhr=o("model_type"),phr=o(` property of the config object (either
passed as an argument or loaded from `),p7e=a("code"),uhr=o("pretrained_model_name_or_path"),_hr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u7e=a("code"),bhr=o("pretrained_model_name_or_path"),vhr=o(":"),Fhr=l(),ye=a("ul"),gT=a("li"),_7e=a("strong"),Thr=o("bart"),Mhr=o(" \u2014 "),MQ=a("a"),Ehr=o("TFBartForConditionalGeneration"),Chr=o(" (BART model)"),whr=l(),hT=a("li"),b7e=a("strong"),Ahr=o("blenderbot"),yhr=o(" \u2014 "),EQ=a("a"),Lhr=o("TFBlenderbotForConditionalGeneration"),xhr=o(" (Blenderbot model)"),$hr=l(),pT=a("li"),v7e=a("strong"),khr=o("blenderbot-small"),Shr=o(" \u2014 "),CQ=a("a"),Rhr=o("TFBlenderbotSmallForConditionalGeneration"),Bhr=o(" (BlenderbotSmall model)"),Phr=l(),uT=a("li"),F7e=a("strong"),Ihr=o("encoder-decoder"),qhr=o(" \u2014 "),wQ=a("a"),Nhr=o("TFEncoderDecoderModel"),jhr=o(" (Encoder decoder model)"),Dhr=l(),_T=a("li"),T7e=a("strong"),Ghr=o("led"),Ohr=o(" \u2014 "),AQ=a("a"),Vhr=o("TFLEDForConditionalGeneration"),Xhr=o(" (LED model)"),zhr=l(),bT=a("li"),M7e=a("strong"),Qhr=o("marian"),Whr=o(" \u2014 "),yQ=a("a"),Hhr=o("TFMarianMTModel"),Uhr=o(" (Marian model)"),Jhr=l(),vT=a("li"),E7e=a("strong"),Yhr=o("mbart"),Khr=o(" \u2014 "),LQ=a("a"),Zhr=o("TFMBartForConditionalGeneration"),epr=o(" (mBART model)"),opr=l(),FT=a("li"),C7e=a("strong"),rpr=o("mt5"),tpr=o(" \u2014 "),xQ=a("a"),apr=o("TFMT5ForConditionalGeneration"),npr=o(" (mT5 model)"),spr=l(),TT=a("li"),w7e=a("strong"),lpr=o("pegasus"),ipr=o(" \u2014 "),$Q=a("a"),dpr=o("TFPegasusForConditionalGeneration"),cpr=o(" (Pegasus model)"),fpr=l(),MT=a("li"),A7e=a("strong"),mpr=o("t5"),gpr=o(" \u2014 "),kQ=a("a"),hpr=o("TFT5ForConditionalGeneration"),ppr=o(" (T5 model)"),upr=l(),F(ET.$$.fragment),MPe=l(),Ud=a("h2"),CT=a("a"),y7e=a("span"),F(RL.$$.fragment),_pr=l(),L7e=a("span"),bpr=o("TFAutoModelForSequenceClassification"),EPe=l(),tr=a("div"),F(BL.$$.fragment),vpr=l(),Jd=a("p"),Fpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),SQ=a("a"),Tpr=o("from_pretrained()"),Mpr=o(" class method or the "),RQ=a("a"),Epr=o("from_config()"),Cpr=o(` class
method.`),wpr=l(),PL=a("p"),Apr=o("This class cannot be instantiated directly using "),x7e=a("code"),ypr=o("__init__()"),Lpr=o(" (throws an error)."),xpr=l(),xt=a("div"),F(IL.$$.fragment),$pr=l(),$7e=a("p"),kpr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Spr=l(),Yd=a("p"),Rpr=o(`Note:
Loading a model from its configuration file does `),k7e=a("strong"),Bpr=o("not"),Ppr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BQ=a("a"),Ipr=o("from_pretrained()"),qpr=o(" to load the model weights."),Npr=l(),F(wT.$$.fragment),jpr=l(),$r=a("div"),F(qL.$$.fragment),Dpr=l(),S7e=a("p"),Gpr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Opr=l(),on=a("p"),Vpr=o("The model class to instantiate is selected based on the "),R7e=a("code"),Xpr=o("model_type"),zpr=o(` property of the config object (either
passed as an argument or loaded from `),B7e=a("code"),Qpr=o("pretrained_model_name_or_path"),Wpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P7e=a("code"),Hpr=o("pretrained_model_name_or_path"),Upr=o(":"),Jpr=l(),Z=a("ul"),AT=a("li"),I7e=a("strong"),Ypr=o("albert"),Kpr=o(" \u2014 "),PQ=a("a"),Zpr=o("TFAlbertForSequenceClassification"),eur=o(" (ALBERT model)"),our=l(),yT=a("li"),q7e=a("strong"),rur=o("bert"),tur=o(" \u2014 "),IQ=a("a"),aur=o("TFBertForSequenceClassification"),nur=o(" (BERT model)"),sur=l(),LT=a("li"),N7e=a("strong"),lur=o("camembert"),iur=o(" \u2014 "),qQ=a("a"),dur=o("TFCamembertForSequenceClassification"),cur=o(" (CamemBERT model)"),fur=l(),xT=a("li"),j7e=a("strong"),mur=o("convbert"),gur=o(" \u2014 "),NQ=a("a"),hur=o("TFConvBertForSequenceClassification"),pur=o(" (ConvBERT model)"),uur=l(),$T=a("li"),D7e=a("strong"),_ur=o("ctrl"),bur=o(" \u2014 "),jQ=a("a"),vur=o("TFCTRLForSequenceClassification"),Fur=o(" (CTRL model)"),Tur=l(),kT=a("li"),G7e=a("strong"),Mur=o("deberta"),Eur=o(" \u2014 "),DQ=a("a"),Cur=o("TFDebertaForSequenceClassification"),wur=o(" (DeBERTa model)"),Aur=l(),ST=a("li"),O7e=a("strong"),yur=o("deberta-v2"),Lur=o(" \u2014 "),GQ=a("a"),xur=o("TFDebertaV2ForSequenceClassification"),$ur=o(" (DeBERTa-v2 model)"),kur=l(),RT=a("li"),V7e=a("strong"),Sur=o("distilbert"),Rur=o(" \u2014 "),OQ=a("a"),Bur=o("TFDistilBertForSequenceClassification"),Pur=o(" (DistilBERT model)"),Iur=l(),BT=a("li"),X7e=a("strong"),qur=o("electra"),Nur=o(" \u2014 "),VQ=a("a"),jur=o("TFElectraForSequenceClassification"),Dur=o(" (ELECTRA model)"),Gur=l(),PT=a("li"),z7e=a("strong"),Our=o("flaubert"),Vur=o(" \u2014 "),XQ=a("a"),Xur=o("TFFlaubertForSequenceClassification"),zur=o(" (FlauBERT model)"),Qur=l(),IT=a("li"),Q7e=a("strong"),Wur=o("funnel"),Hur=o(" \u2014 "),zQ=a("a"),Uur=o("TFFunnelForSequenceClassification"),Jur=o(" (Funnel Transformer model)"),Yur=l(),qT=a("li"),W7e=a("strong"),Kur=o("gpt2"),Zur=o(" \u2014 "),QQ=a("a"),e_r=o("TFGPT2ForSequenceClassification"),o_r=o(" (OpenAI GPT-2 model)"),r_r=l(),NT=a("li"),H7e=a("strong"),t_r=o("gptj"),a_r=o(" \u2014 "),WQ=a("a"),n_r=o("TFGPTJForSequenceClassification"),s_r=o(" (GPT-J model)"),l_r=l(),jT=a("li"),U7e=a("strong"),i_r=o("layoutlm"),d_r=o(" \u2014 "),HQ=a("a"),c_r=o("TFLayoutLMForSequenceClassification"),f_r=o(" (LayoutLM model)"),m_r=l(),DT=a("li"),J7e=a("strong"),g_r=o("longformer"),h_r=o(" \u2014 "),UQ=a("a"),p_r=o("TFLongformerForSequenceClassification"),u_r=o(" (Longformer model)"),__r=l(),GT=a("li"),Y7e=a("strong"),b_r=o("mobilebert"),v_r=o(" \u2014 "),JQ=a("a"),F_r=o("TFMobileBertForSequenceClassification"),T_r=o(" (MobileBERT model)"),M_r=l(),OT=a("li"),K7e=a("strong"),E_r=o("mpnet"),C_r=o(" \u2014 "),YQ=a("a"),w_r=o("TFMPNetForSequenceClassification"),A_r=o(" (MPNet model)"),y_r=l(),VT=a("li"),Z7e=a("strong"),L_r=o("openai-gpt"),x_r=o(" \u2014 "),KQ=a("a"),$_r=o("TFOpenAIGPTForSequenceClassification"),k_r=o(" (OpenAI GPT model)"),S_r=l(),XT=a("li"),ebe=a("strong"),R_r=o("rembert"),B_r=o(" \u2014 "),ZQ=a("a"),P_r=o("TFRemBertForSequenceClassification"),I_r=o(" (RemBERT model)"),q_r=l(),zT=a("li"),obe=a("strong"),N_r=o("roberta"),j_r=o(" \u2014 "),eW=a("a"),D_r=o("TFRobertaForSequenceClassification"),G_r=o(" (RoBERTa model)"),O_r=l(),QT=a("li"),rbe=a("strong"),V_r=o("roformer"),X_r=o(" \u2014 "),oW=a("a"),z_r=o("TFRoFormerForSequenceClassification"),Q_r=o(" (RoFormer model)"),W_r=l(),WT=a("li"),tbe=a("strong"),H_r=o("tapas"),U_r=o(" \u2014 "),rW=a("a"),J_r=o("TFTapasForSequenceClassification"),Y_r=o(" (TAPAS model)"),K_r=l(),HT=a("li"),abe=a("strong"),Z_r=o("transfo-xl"),e1r=o(" \u2014 "),tW=a("a"),o1r=o("TFTransfoXLForSequenceClassification"),r1r=o(" (Transformer-XL model)"),t1r=l(),UT=a("li"),nbe=a("strong"),a1r=o("xlm"),n1r=o(" \u2014 "),aW=a("a"),s1r=o("TFXLMForSequenceClassification"),l1r=o(" (XLM model)"),i1r=l(),JT=a("li"),sbe=a("strong"),d1r=o("xlm-roberta"),c1r=o(" \u2014 "),nW=a("a"),f1r=o("TFXLMRobertaForSequenceClassification"),m1r=o(" (XLM-RoBERTa model)"),g1r=l(),YT=a("li"),lbe=a("strong"),h1r=o("xlnet"),p1r=o(" \u2014 "),sW=a("a"),u1r=o("TFXLNetForSequenceClassification"),_1r=o(" (XLNet model)"),b1r=l(),F(KT.$$.fragment),CPe=l(),Kd=a("h2"),ZT=a("a"),ibe=a("span"),F(NL.$$.fragment),v1r=l(),dbe=a("span"),F1r=o("TFAutoModelForMultipleChoice"),wPe=l(),ar=a("div"),F(jL.$$.fragment),T1r=l(),Zd=a("p"),M1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lW=a("a"),E1r=o("from_pretrained()"),C1r=o(" class method or the "),iW=a("a"),w1r=o("from_config()"),A1r=o(` class
method.`),y1r=l(),DL=a("p"),L1r=o("This class cannot be instantiated directly using "),cbe=a("code"),x1r=o("__init__()"),$1r=o(" (throws an error)."),k1r=l(),$t=a("div"),F(GL.$$.fragment),S1r=l(),fbe=a("p"),R1r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),B1r=l(),ec=a("p"),P1r=o(`Note:
Loading a model from its configuration file does `),mbe=a("strong"),I1r=o("not"),q1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),N1r=o("from_pretrained()"),j1r=o(" to load the model weights."),D1r=l(),F(eM.$$.fragment),G1r=l(),kr=a("div"),F(OL.$$.fragment),O1r=l(),gbe=a("p"),V1r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),X1r=l(),rn=a("p"),z1r=o("The model class to instantiate is selected based on the "),hbe=a("code"),Q1r=o("model_type"),W1r=o(` property of the config object (either
passed as an argument or loaded from `),pbe=a("code"),H1r=o("pretrained_model_name_or_path"),U1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=a("code"),J1r=o("pretrained_model_name_or_path"),Y1r=o(":"),K1r=l(),pe=a("ul"),oM=a("li"),_be=a("strong"),Z1r=o("albert"),e7r=o(" \u2014 "),cW=a("a"),o7r=o("TFAlbertForMultipleChoice"),r7r=o(" (ALBERT model)"),t7r=l(),rM=a("li"),bbe=a("strong"),a7r=o("bert"),n7r=o(" \u2014 "),fW=a("a"),s7r=o("TFBertForMultipleChoice"),l7r=o(" (BERT model)"),i7r=l(),tM=a("li"),vbe=a("strong"),d7r=o("camembert"),c7r=o(" \u2014 "),mW=a("a"),f7r=o("TFCamembertForMultipleChoice"),m7r=o(" (CamemBERT model)"),g7r=l(),aM=a("li"),Fbe=a("strong"),h7r=o("convbert"),p7r=o(" \u2014 "),gW=a("a"),u7r=o("TFConvBertForMultipleChoice"),_7r=o(" (ConvBERT model)"),b7r=l(),nM=a("li"),Tbe=a("strong"),v7r=o("distilbert"),F7r=o(" \u2014 "),hW=a("a"),T7r=o("TFDistilBertForMultipleChoice"),M7r=o(" (DistilBERT model)"),E7r=l(),sM=a("li"),Mbe=a("strong"),C7r=o("electra"),w7r=o(" \u2014 "),pW=a("a"),A7r=o("TFElectraForMultipleChoice"),y7r=o(" (ELECTRA model)"),L7r=l(),lM=a("li"),Ebe=a("strong"),x7r=o("flaubert"),$7r=o(" \u2014 "),uW=a("a"),k7r=o("TFFlaubertForMultipleChoice"),S7r=o(" (FlauBERT model)"),R7r=l(),iM=a("li"),Cbe=a("strong"),B7r=o("funnel"),P7r=o(" \u2014 "),_W=a("a"),I7r=o("TFFunnelForMultipleChoice"),q7r=o(" (Funnel Transformer model)"),N7r=l(),dM=a("li"),wbe=a("strong"),j7r=o("longformer"),D7r=o(" \u2014 "),bW=a("a"),G7r=o("TFLongformerForMultipleChoice"),O7r=o(" (Longformer model)"),V7r=l(),cM=a("li"),Abe=a("strong"),X7r=o("mobilebert"),z7r=o(" \u2014 "),vW=a("a"),Q7r=o("TFMobileBertForMultipleChoice"),W7r=o(" (MobileBERT model)"),H7r=l(),fM=a("li"),ybe=a("strong"),U7r=o("mpnet"),J7r=o(" \u2014 "),FW=a("a"),Y7r=o("TFMPNetForMultipleChoice"),K7r=o(" (MPNet model)"),Z7r=l(),mM=a("li"),Lbe=a("strong"),ebr=o("rembert"),obr=o(" \u2014 "),TW=a("a"),rbr=o("TFRemBertForMultipleChoice"),tbr=o(" (RemBERT model)"),abr=l(),gM=a("li"),xbe=a("strong"),nbr=o("roberta"),sbr=o(" \u2014 "),MW=a("a"),lbr=o("TFRobertaForMultipleChoice"),ibr=o(" (RoBERTa model)"),dbr=l(),hM=a("li"),$be=a("strong"),cbr=o("roformer"),fbr=o(" \u2014 "),EW=a("a"),mbr=o("TFRoFormerForMultipleChoice"),gbr=o(" (RoFormer model)"),hbr=l(),pM=a("li"),kbe=a("strong"),pbr=o("xlm"),ubr=o(" \u2014 "),CW=a("a"),_br=o("TFXLMForMultipleChoice"),bbr=o(" (XLM model)"),vbr=l(),uM=a("li"),Sbe=a("strong"),Fbr=o("xlm-roberta"),Tbr=o(" \u2014 "),wW=a("a"),Mbr=o("TFXLMRobertaForMultipleChoice"),Ebr=o(" (XLM-RoBERTa model)"),Cbr=l(),_M=a("li"),Rbe=a("strong"),wbr=o("xlnet"),Abr=o(" \u2014 "),AW=a("a"),ybr=o("TFXLNetForMultipleChoice"),Lbr=o(" (XLNet model)"),xbr=l(),F(bM.$$.fragment),APe=l(),oc=a("h2"),vM=a("a"),Bbe=a("span"),F(VL.$$.fragment),$br=l(),Pbe=a("span"),kbr=o("TFAutoModelForTableQuestionAnswering"),yPe=l(),nr=a("div"),F(XL.$$.fragment),Sbr=l(),rc=a("p"),Rbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yW=a("a"),Bbr=o("from_pretrained()"),Pbr=o(" class method or the "),LW=a("a"),Ibr=o("from_config()"),qbr=o(` class
method.`),Nbr=l(),zL=a("p"),jbr=o("This class cannot be instantiated directly using "),Ibe=a("code"),Dbr=o("__init__()"),Gbr=o(" (throws an error)."),Obr=l(),kt=a("div"),F(QL.$$.fragment),Vbr=l(),qbe=a("p"),Xbr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),zbr=l(),tc=a("p"),Qbr=o(`Note:
Loading a model from its configuration file does `),Nbe=a("strong"),Wbr=o("not"),Hbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=a("a"),Ubr=o("from_pretrained()"),Jbr=o(" to load the model weights."),Ybr=l(),F(FM.$$.fragment),Kbr=l(),Sr=a("div"),F(WL.$$.fragment),Zbr=l(),jbe=a("p"),e2r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),o2r=l(),tn=a("p"),r2r=o("The model class to instantiate is selected based on the "),Dbe=a("code"),t2r=o("model_type"),a2r=o(` property of the config object (either
passed as an argument or loaded from `),Gbe=a("code"),n2r=o("pretrained_model_name_or_path"),s2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=a("code"),l2r=o("pretrained_model_name_or_path"),i2r=o(":"),d2r=l(),Vbe=a("ul"),TM=a("li"),Xbe=a("strong"),c2r=o("tapas"),f2r=o(" \u2014 "),$W=a("a"),m2r=o("TFTapasForQuestionAnswering"),g2r=o(" (TAPAS model)"),h2r=l(),F(MM.$$.fragment),LPe=l(),ac=a("h2"),EM=a("a"),zbe=a("span"),F(HL.$$.fragment),p2r=l(),Qbe=a("span"),u2r=o("TFAutoModelForTokenClassification"),xPe=l(),sr=a("div"),F(UL.$$.fragment),_2r=l(),nc=a("p"),b2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kW=a("a"),v2r=o("from_pretrained()"),F2r=o(" class method or the "),SW=a("a"),T2r=o("from_config()"),M2r=o(` class
method.`),E2r=l(),JL=a("p"),C2r=o("This class cannot be instantiated directly using "),Wbe=a("code"),w2r=o("__init__()"),A2r=o(" (throws an error)."),y2r=l(),St=a("div"),F(YL.$$.fragment),L2r=l(),Hbe=a("p"),x2r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),$2r=l(),sc=a("p"),k2r=o(`Note:
Loading a model from its configuration file does `),Ube=a("strong"),S2r=o("not"),R2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=a("a"),B2r=o("from_pretrained()"),P2r=o(" to load the model weights."),I2r=l(),F(CM.$$.fragment),q2r=l(),Rr=a("div"),F(KL.$$.fragment),N2r=l(),Jbe=a("p"),j2r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),D2r=l(),an=a("p"),G2r=o("The model class to instantiate is selected based on the "),Ybe=a("code"),O2r=o("model_type"),V2r=o(` property of the config object (either
passed as an argument or loaded from `),Kbe=a("code"),X2r=o("pretrained_model_name_or_path"),z2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=a("code"),Q2r=o("pretrained_model_name_or_path"),W2r=o(":"),H2r=l(),de=a("ul"),wM=a("li"),e2e=a("strong"),U2r=o("albert"),J2r=o(" \u2014 "),BW=a("a"),Y2r=o("TFAlbertForTokenClassification"),K2r=o(" (ALBERT model)"),Z2r=l(),AM=a("li"),o2e=a("strong"),e3r=o("bert"),o3r=o(" \u2014 "),PW=a("a"),r3r=o("TFBertForTokenClassification"),t3r=o(" (BERT model)"),a3r=l(),yM=a("li"),r2e=a("strong"),n3r=o("camembert"),s3r=o(" \u2014 "),IW=a("a"),l3r=o("TFCamembertForTokenClassification"),i3r=o(" (CamemBERT model)"),d3r=l(),LM=a("li"),t2e=a("strong"),c3r=o("convbert"),f3r=o(" \u2014 "),qW=a("a"),m3r=o("TFConvBertForTokenClassification"),g3r=o(" (ConvBERT model)"),h3r=l(),xM=a("li"),a2e=a("strong"),p3r=o("deberta"),u3r=o(" \u2014 "),NW=a("a"),_3r=o("TFDebertaForTokenClassification"),b3r=o(" (DeBERTa model)"),v3r=l(),$M=a("li"),n2e=a("strong"),F3r=o("deberta-v2"),T3r=o(" \u2014 "),jW=a("a"),M3r=o("TFDebertaV2ForTokenClassification"),E3r=o(" (DeBERTa-v2 model)"),C3r=l(),kM=a("li"),s2e=a("strong"),w3r=o("distilbert"),A3r=o(" \u2014 "),DW=a("a"),y3r=o("TFDistilBertForTokenClassification"),L3r=o(" (DistilBERT model)"),x3r=l(),SM=a("li"),l2e=a("strong"),$3r=o("electra"),k3r=o(" \u2014 "),GW=a("a"),S3r=o("TFElectraForTokenClassification"),R3r=o(" (ELECTRA model)"),B3r=l(),RM=a("li"),i2e=a("strong"),P3r=o("flaubert"),I3r=o(" \u2014 "),OW=a("a"),q3r=o("TFFlaubertForTokenClassification"),N3r=o(" (FlauBERT model)"),j3r=l(),BM=a("li"),d2e=a("strong"),D3r=o("funnel"),G3r=o(" \u2014 "),VW=a("a"),O3r=o("TFFunnelForTokenClassification"),V3r=o(" (Funnel Transformer model)"),X3r=l(),PM=a("li"),c2e=a("strong"),z3r=o("layoutlm"),Q3r=o(" \u2014 "),XW=a("a"),W3r=o("TFLayoutLMForTokenClassification"),H3r=o(" (LayoutLM model)"),U3r=l(),IM=a("li"),f2e=a("strong"),J3r=o("longformer"),Y3r=o(" \u2014 "),zW=a("a"),K3r=o("TFLongformerForTokenClassification"),Z3r=o(" (Longformer model)"),evr=l(),qM=a("li"),m2e=a("strong"),ovr=o("mobilebert"),rvr=o(" \u2014 "),QW=a("a"),tvr=o("TFMobileBertForTokenClassification"),avr=o(" (MobileBERT model)"),nvr=l(),NM=a("li"),g2e=a("strong"),svr=o("mpnet"),lvr=o(" \u2014 "),WW=a("a"),ivr=o("TFMPNetForTokenClassification"),dvr=o(" (MPNet model)"),cvr=l(),jM=a("li"),h2e=a("strong"),fvr=o("rembert"),mvr=o(" \u2014 "),HW=a("a"),gvr=o("TFRemBertForTokenClassification"),hvr=o(" (RemBERT model)"),pvr=l(),DM=a("li"),p2e=a("strong"),uvr=o("roberta"),_vr=o(" \u2014 "),UW=a("a"),bvr=o("TFRobertaForTokenClassification"),vvr=o(" (RoBERTa model)"),Fvr=l(),GM=a("li"),u2e=a("strong"),Tvr=o("roformer"),Mvr=o(" \u2014 "),JW=a("a"),Evr=o("TFRoFormerForTokenClassification"),Cvr=o(" (RoFormer model)"),wvr=l(),OM=a("li"),_2e=a("strong"),Avr=o("xlm"),yvr=o(" \u2014 "),YW=a("a"),Lvr=o("TFXLMForTokenClassification"),xvr=o(" (XLM model)"),$vr=l(),VM=a("li"),b2e=a("strong"),kvr=o("xlm-roberta"),Svr=o(" \u2014 "),KW=a("a"),Rvr=o("TFXLMRobertaForTokenClassification"),Bvr=o(" (XLM-RoBERTa model)"),Pvr=l(),XM=a("li"),v2e=a("strong"),Ivr=o("xlnet"),qvr=o(" \u2014 "),ZW=a("a"),Nvr=o("TFXLNetForTokenClassification"),jvr=o(" (XLNet model)"),Dvr=l(),F(zM.$$.fragment),$Pe=l(),lc=a("h2"),QM=a("a"),F2e=a("span"),F(ZL.$$.fragment),Gvr=l(),T2e=a("span"),Ovr=o("TFAutoModelForQuestionAnswering"),kPe=l(),lr=a("div"),F(e8.$$.fragment),Vvr=l(),ic=a("p"),Xvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eH=a("a"),zvr=o("from_pretrained()"),Qvr=o(" class method or the "),oH=a("a"),Wvr=o("from_config()"),Hvr=o(` class
method.`),Uvr=l(),o8=a("p"),Jvr=o("This class cannot be instantiated directly using "),M2e=a("code"),Yvr=o("__init__()"),Kvr=o(" (throws an error)."),Zvr=l(),Rt=a("div"),F(r8.$$.fragment),eFr=l(),E2e=a("p"),oFr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rFr=l(),dc=a("p"),tFr=o(`Note:
Loading a model from its configuration file does `),C2e=a("strong"),aFr=o("not"),nFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=a("a"),sFr=o("from_pretrained()"),lFr=o(" to load the model weights."),iFr=l(),F(WM.$$.fragment),dFr=l(),Br=a("div"),F(t8.$$.fragment),cFr=l(),w2e=a("p"),fFr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),mFr=l(),nn=a("p"),gFr=o("The model class to instantiate is selected based on the "),A2e=a("code"),hFr=o("model_type"),pFr=o(` property of the config object (either
passed as an argument or loaded from `),y2e=a("code"),uFr=o("pretrained_model_name_or_path"),_Fr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=a("code"),bFr=o("pretrained_model_name_or_path"),vFr=o(":"),FFr=l(),ce=a("ul"),HM=a("li"),x2e=a("strong"),TFr=o("albert"),MFr=o(" \u2014 "),tH=a("a"),EFr=o("TFAlbertForQuestionAnswering"),CFr=o(" (ALBERT model)"),wFr=l(),UM=a("li"),$2e=a("strong"),AFr=o("bert"),yFr=o(" \u2014 "),aH=a("a"),LFr=o("TFBertForQuestionAnswering"),xFr=o(" (BERT model)"),$Fr=l(),JM=a("li"),k2e=a("strong"),kFr=o("camembert"),SFr=o(" \u2014 "),nH=a("a"),RFr=o("TFCamembertForQuestionAnswering"),BFr=o(" (CamemBERT model)"),PFr=l(),YM=a("li"),S2e=a("strong"),IFr=o("convbert"),qFr=o(" \u2014 "),sH=a("a"),NFr=o("TFConvBertForQuestionAnswering"),jFr=o(" (ConvBERT model)"),DFr=l(),KM=a("li"),R2e=a("strong"),GFr=o("deberta"),OFr=o(" \u2014 "),lH=a("a"),VFr=o("TFDebertaForQuestionAnswering"),XFr=o(" (DeBERTa model)"),zFr=l(),ZM=a("li"),B2e=a("strong"),QFr=o("deberta-v2"),WFr=o(" \u2014 "),iH=a("a"),HFr=o("TFDebertaV2ForQuestionAnswering"),UFr=o(" (DeBERTa-v2 model)"),JFr=l(),e4=a("li"),P2e=a("strong"),YFr=o("distilbert"),KFr=o(" \u2014 "),dH=a("a"),ZFr=o("TFDistilBertForQuestionAnswering"),e0r=o(" (DistilBERT model)"),o0r=l(),o4=a("li"),I2e=a("strong"),r0r=o("electra"),t0r=o(" \u2014 "),cH=a("a"),a0r=o("TFElectraForQuestionAnswering"),n0r=o(" (ELECTRA model)"),s0r=l(),r4=a("li"),q2e=a("strong"),l0r=o("flaubert"),i0r=o(" \u2014 "),fH=a("a"),d0r=o("TFFlaubertForQuestionAnsweringSimple"),c0r=o(" (FlauBERT model)"),f0r=l(),t4=a("li"),N2e=a("strong"),m0r=o("funnel"),g0r=o(" \u2014 "),mH=a("a"),h0r=o("TFFunnelForQuestionAnswering"),p0r=o(" (Funnel Transformer model)"),u0r=l(),a4=a("li"),j2e=a("strong"),_0r=o("gptj"),b0r=o(" \u2014 "),gH=a("a"),v0r=o("TFGPTJForQuestionAnswering"),F0r=o(" (GPT-J model)"),T0r=l(),n4=a("li"),D2e=a("strong"),M0r=o("longformer"),E0r=o(" \u2014 "),hH=a("a"),C0r=o("TFLongformerForQuestionAnswering"),w0r=o(" (Longformer model)"),A0r=l(),s4=a("li"),G2e=a("strong"),y0r=o("mobilebert"),L0r=o(" \u2014 "),pH=a("a"),x0r=o("TFMobileBertForQuestionAnswering"),$0r=o(" (MobileBERT model)"),k0r=l(),l4=a("li"),O2e=a("strong"),S0r=o("mpnet"),R0r=o(" \u2014 "),uH=a("a"),B0r=o("TFMPNetForQuestionAnswering"),P0r=o(" (MPNet model)"),I0r=l(),i4=a("li"),V2e=a("strong"),q0r=o("rembert"),N0r=o(" \u2014 "),_H=a("a"),j0r=o("TFRemBertForQuestionAnswering"),D0r=o(" (RemBERT model)"),G0r=l(),d4=a("li"),X2e=a("strong"),O0r=o("roberta"),V0r=o(" \u2014 "),bH=a("a"),X0r=o("TFRobertaForQuestionAnswering"),z0r=o(" (RoBERTa model)"),Q0r=l(),c4=a("li"),z2e=a("strong"),W0r=o("roformer"),H0r=o(" \u2014 "),vH=a("a"),U0r=o("TFRoFormerForQuestionAnswering"),J0r=o(" (RoFormer model)"),Y0r=l(),f4=a("li"),Q2e=a("strong"),K0r=o("xlm"),Z0r=o(" \u2014 "),FH=a("a"),eTr=o("TFXLMForQuestionAnsweringSimple"),oTr=o(" (XLM model)"),rTr=l(),m4=a("li"),W2e=a("strong"),tTr=o("xlm-roberta"),aTr=o(" \u2014 "),TH=a("a"),nTr=o("TFXLMRobertaForQuestionAnswering"),sTr=o(" (XLM-RoBERTa model)"),lTr=l(),g4=a("li"),H2e=a("strong"),iTr=o("xlnet"),dTr=o(" \u2014 "),MH=a("a"),cTr=o("TFXLNetForQuestionAnsweringSimple"),fTr=o(" (XLNet model)"),mTr=l(),F(h4.$$.fragment),SPe=l(),cc=a("h2"),p4=a("a"),U2e=a("span"),F(a8.$$.fragment),gTr=l(),J2e=a("span"),hTr=o("TFAutoModelForVision2Seq"),RPe=l(),ir=a("div"),F(n8.$$.fragment),pTr=l(),fc=a("p"),uTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),EH=a("a"),_Tr=o("from_pretrained()"),bTr=o(" class method or the "),CH=a("a"),vTr=o("from_config()"),FTr=o(` class
method.`),TTr=l(),s8=a("p"),MTr=o("This class cannot be instantiated directly using "),Y2e=a("code"),ETr=o("__init__()"),CTr=o(" (throws an error)."),wTr=l(),Bt=a("div"),F(l8.$$.fragment),ATr=l(),K2e=a("p"),yTr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),LTr=l(),mc=a("p"),xTr=o(`Note:
Loading a model from its configuration file does `),Z2e=a("strong"),$Tr=o("not"),kTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),STr=o("from_pretrained()"),RTr=o(" to load the model weights."),BTr=l(),F(u4.$$.fragment),PTr=l(),Pr=a("div"),F(i8.$$.fragment),ITr=l(),e3e=a("p"),qTr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),NTr=l(),sn=a("p"),jTr=o("The model class to instantiate is selected based on the "),o3e=a("code"),DTr=o("model_type"),GTr=o(` property of the config object (either
passed as an argument or loaded from `),r3e=a("code"),OTr=o("pretrained_model_name_or_path"),VTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t3e=a("code"),XTr=o("pretrained_model_name_or_path"),zTr=o(":"),QTr=l(),a3e=a("ul"),_4=a("li"),n3e=a("strong"),WTr=o("vision-encoder-decoder"),HTr=o(" \u2014 "),AH=a("a"),UTr=o("TFVisionEncoderDecoderModel"),JTr=o(" (Vision Encoder decoder model)"),YTr=l(),F(b4.$$.fragment),BPe=l(),gc=a("h2"),v4=a("a"),s3e=a("span"),F(d8.$$.fragment),KTr=l(),l3e=a("span"),ZTr=o("TFAutoModelForSpeechSeq2Seq"),PPe=l(),dr=a("div"),F(c8.$$.fragment),eMr=l(),hc=a("p"),oMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),yH=a("a"),rMr=o("from_pretrained()"),tMr=o(" class method or the "),LH=a("a"),aMr=o("from_config()"),nMr=o(` class
method.`),sMr=l(),f8=a("p"),lMr=o("This class cannot be instantiated directly using "),i3e=a("code"),iMr=o("__init__()"),dMr=o(" (throws an error)."),cMr=l(),Pt=a("div"),F(m8.$$.fragment),fMr=l(),d3e=a("p"),mMr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),gMr=l(),pc=a("p"),hMr=o(`Note:
Loading a model from its configuration file does `),c3e=a("strong"),pMr=o("not"),uMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=a("a"),_Mr=o("from_pretrained()"),bMr=o(" to load the model weights."),vMr=l(),F(F4.$$.fragment),FMr=l(),Ir=a("div"),F(g8.$$.fragment),TMr=l(),f3e=a("p"),MMr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),EMr=l(),ln=a("p"),CMr=o("The model class to instantiate is selected based on the "),m3e=a("code"),wMr=o("model_type"),AMr=o(` property of the config object (either
passed as an argument or loaded from `),g3e=a("code"),yMr=o("pretrained_model_name_or_path"),LMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h3e=a("code"),xMr=o("pretrained_model_name_or_path"),$Mr=o(":"),kMr=l(),p3e=a("ul"),T4=a("li"),u3e=a("strong"),SMr=o("speech_to_text"),RMr=o(" \u2014 "),$H=a("a"),BMr=o("TFSpeech2TextForConditionalGeneration"),PMr=o(" (Speech2Text model)"),IMr=l(),F(M4.$$.fragment),IPe=l(),uc=a("h2"),E4=a("a"),_3e=a("span"),F(h8.$$.fragment),qMr=l(),b3e=a("span"),NMr=o("FlaxAutoModel"),qPe=l(),cr=a("div"),F(p8.$$.fragment),jMr=l(),_c=a("p"),DMr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kH=a("a"),GMr=o("from_pretrained()"),OMr=o(" class method or the "),SH=a("a"),VMr=o("from_config()"),XMr=o(` class
method.`),zMr=l(),u8=a("p"),QMr=o("This class cannot be instantiated directly using "),v3e=a("code"),WMr=o("__init__()"),HMr=o(" (throws an error)."),UMr=l(),It=a("div"),F(_8.$$.fragment),JMr=l(),F3e=a("p"),YMr=o("Instantiates one of the base model classes of the library from a configuration."),KMr=l(),bc=a("p"),ZMr=o(`Note:
Loading a model from its configuration file does `),T3e=a("strong"),e4r=o("not"),o4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),r4r=o("from_pretrained()"),t4r=o(" to load the model weights."),a4r=l(),F(C4.$$.fragment),n4r=l(),qr=a("div"),F(b8.$$.fragment),s4r=l(),M3e=a("p"),l4r=o("Instantiate one of the base model classes of the library from a pretrained model."),i4r=l(),dn=a("p"),d4r=o("The model class to instantiate is selected based on the "),E3e=a("code"),c4r=o("model_type"),f4r=o(` property of the config object (either
passed as an argument or loaded from `),C3e=a("code"),m4r=o("pretrained_model_name_or_path"),g4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w3e=a("code"),h4r=o("pretrained_model_name_or_path"),p4r=o(":"),u4r=l(),oe=a("ul"),w4=a("li"),A3e=a("strong"),_4r=o("albert"),b4r=o(" \u2014 "),BH=a("a"),v4r=o("FlaxAlbertModel"),F4r=o(" (ALBERT model)"),T4r=l(),A4=a("li"),y3e=a("strong"),M4r=o("bart"),E4r=o(" \u2014 "),PH=a("a"),C4r=o("FlaxBartModel"),w4r=o(" (BART model)"),A4r=l(),y4=a("li"),L3e=a("strong"),y4r=o("beit"),L4r=o(" \u2014 "),IH=a("a"),x4r=o("FlaxBeitModel"),$4r=o(" (BEiT model)"),k4r=l(),L4=a("li"),x3e=a("strong"),S4r=o("bert"),R4r=o(" \u2014 "),qH=a("a"),B4r=o("FlaxBertModel"),P4r=o(" (BERT model)"),I4r=l(),x4=a("li"),$3e=a("strong"),q4r=o("big_bird"),N4r=o(" \u2014 "),NH=a("a"),j4r=o("FlaxBigBirdModel"),D4r=o(" (BigBird model)"),G4r=l(),$4=a("li"),k3e=a("strong"),O4r=o("blenderbot"),V4r=o(" \u2014 "),jH=a("a"),X4r=o("FlaxBlenderbotModel"),z4r=o(" (Blenderbot model)"),Q4r=l(),k4=a("li"),S3e=a("strong"),W4r=o("blenderbot-small"),H4r=o(" \u2014 "),DH=a("a"),U4r=o("FlaxBlenderbotSmallModel"),J4r=o(" (BlenderbotSmall model)"),Y4r=l(),S4=a("li"),R3e=a("strong"),K4r=o("clip"),Z4r=o(" \u2014 "),GH=a("a"),eEr=o("FlaxCLIPModel"),oEr=o(" (CLIP model)"),rEr=l(),R4=a("li"),B3e=a("strong"),tEr=o("distilbert"),aEr=o(" \u2014 "),OH=a("a"),nEr=o("FlaxDistilBertModel"),sEr=o(" (DistilBERT model)"),lEr=l(),B4=a("li"),P3e=a("strong"),iEr=o("electra"),dEr=o(" \u2014 "),VH=a("a"),cEr=o("FlaxElectraModel"),fEr=o(" (ELECTRA model)"),mEr=l(),P4=a("li"),I3e=a("strong"),gEr=o("gpt2"),hEr=o(" \u2014 "),XH=a("a"),pEr=o("FlaxGPT2Model"),uEr=o(" (OpenAI GPT-2 model)"),_Er=l(),I4=a("li"),q3e=a("strong"),bEr=o("gpt_neo"),vEr=o(" \u2014 "),zH=a("a"),FEr=o("FlaxGPTNeoModel"),TEr=o(" (GPT Neo model)"),MEr=l(),q4=a("li"),N3e=a("strong"),EEr=o("gptj"),CEr=o(" \u2014 "),QH=a("a"),wEr=o("FlaxGPTJModel"),AEr=o(" (GPT-J model)"),yEr=l(),N4=a("li"),j3e=a("strong"),LEr=o("marian"),xEr=o(" \u2014 "),WH=a("a"),$Er=o("FlaxMarianModel"),kEr=o(" (Marian model)"),SEr=l(),j4=a("li"),D3e=a("strong"),REr=o("mbart"),BEr=o(" \u2014 "),HH=a("a"),PEr=o("FlaxMBartModel"),IEr=o(" (mBART model)"),qEr=l(),D4=a("li"),G3e=a("strong"),NEr=o("mt5"),jEr=o(" \u2014 "),UH=a("a"),DEr=o("FlaxMT5Model"),GEr=o(" (mT5 model)"),OEr=l(),G4=a("li"),O3e=a("strong"),VEr=o("pegasus"),XEr=o(" \u2014 "),JH=a("a"),zEr=o("FlaxPegasusModel"),QEr=o(" (Pegasus model)"),WEr=l(),O4=a("li"),V3e=a("strong"),HEr=o("roberta"),UEr=o(" \u2014 "),YH=a("a"),JEr=o("FlaxRobertaModel"),YEr=o(" (RoBERTa model)"),KEr=l(),V4=a("li"),X3e=a("strong"),ZEr=o("roformer"),e5r=o(" \u2014 "),KH=a("a"),o5r=o("FlaxRoFormerModel"),r5r=o(" (RoFormer model)"),t5r=l(),X4=a("li"),z3e=a("strong"),a5r=o("t5"),n5r=o(" \u2014 "),ZH=a("a"),s5r=o("FlaxT5Model"),l5r=o(" (T5 model)"),i5r=l(),z4=a("li"),Q3e=a("strong"),d5r=o("vision-text-dual-encoder"),c5r=o(" \u2014 "),eU=a("a"),f5r=o("FlaxVisionTextDualEncoderModel"),m5r=o(" (VisionTextDualEncoder model)"),g5r=l(),Q4=a("li"),W3e=a("strong"),h5r=o("vit"),p5r=o(" \u2014 "),oU=a("a"),u5r=o("FlaxViTModel"),_5r=o(" (ViT model)"),b5r=l(),W4=a("li"),H3e=a("strong"),v5r=o("wav2vec2"),F5r=o(" \u2014 "),rU=a("a"),T5r=o("FlaxWav2Vec2Model"),M5r=o(" (Wav2Vec2 model)"),E5r=l(),H4=a("li"),U3e=a("strong"),C5r=o("xglm"),w5r=o(" \u2014 "),tU=a("a"),A5r=o("FlaxXGLMModel"),y5r=o(" (XGLM model)"),L5r=l(),U4=a("li"),J3e=a("strong"),x5r=o("xlm-roberta"),$5r=o(" \u2014 "),aU=a("a"),k5r=o("FlaxXLMRobertaModel"),S5r=o(" (XLM-RoBERTa model)"),R5r=l(),F(J4.$$.fragment),NPe=l(),vc=a("h2"),Y4=a("a"),Y3e=a("span"),F(v8.$$.fragment),B5r=l(),K3e=a("span"),P5r=o("FlaxAutoModelForCausalLM"),jPe=l(),fr=a("div"),F(F8.$$.fragment),I5r=l(),Fc=a("p"),q5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),nU=a("a"),N5r=o("from_pretrained()"),j5r=o(" class method or the "),sU=a("a"),D5r=o("from_config()"),G5r=o(` class
method.`),O5r=l(),T8=a("p"),V5r=o("This class cannot be instantiated directly using "),Z3e=a("code"),X5r=o("__init__()"),z5r=o(" (throws an error)."),Q5r=l(),qt=a("div"),F(M8.$$.fragment),W5r=l(),eve=a("p"),H5r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),U5r=l(),Tc=a("p"),J5r=o(`Note:
Loading a model from its configuration file does `),ove=a("strong"),Y5r=o("not"),K5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=a("a"),Z5r=o("from_pretrained()"),eCr=o(" to load the model weights."),oCr=l(),F(K4.$$.fragment),rCr=l(),Nr=a("div"),F(E8.$$.fragment),tCr=l(),rve=a("p"),aCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nCr=l(),cn=a("p"),sCr=o("The model class to instantiate is selected based on the "),tve=a("code"),lCr=o("model_type"),iCr=o(` property of the config object (either
passed as an argument or loaded from `),ave=a("code"),dCr=o("pretrained_model_name_or_path"),cCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nve=a("code"),fCr=o("pretrained_model_name_or_path"),mCr=o(":"),gCr=l(),ke=a("ul"),Z4=a("li"),sve=a("strong"),hCr=o("bart"),pCr=o(" \u2014 "),iU=a("a"),uCr=o("FlaxBartForCausalLM"),_Cr=o(" (BART model)"),bCr=l(),eE=a("li"),lve=a("strong"),vCr=o("bert"),FCr=o(" \u2014 "),dU=a("a"),TCr=o("FlaxBertForCausalLM"),MCr=o(" (BERT model)"),ECr=l(),oE=a("li"),ive=a("strong"),CCr=o("big_bird"),wCr=o(" \u2014 "),cU=a("a"),ACr=o("FlaxBigBirdForCausalLM"),yCr=o(" (BigBird model)"),LCr=l(),rE=a("li"),dve=a("strong"),xCr=o("electra"),$Cr=o(" \u2014 "),fU=a("a"),kCr=o("FlaxElectraForCausalLM"),SCr=o(" (ELECTRA model)"),RCr=l(),tE=a("li"),cve=a("strong"),BCr=o("gpt2"),PCr=o(" \u2014 "),mU=a("a"),ICr=o("FlaxGPT2LMHeadModel"),qCr=o(" (OpenAI GPT-2 model)"),NCr=l(),aE=a("li"),fve=a("strong"),jCr=o("gpt_neo"),DCr=o(" \u2014 "),gU=a("a"),GCr=o("FlaxGPTNeoForCausalLM"),OCr=o(" (GPT Neo model)"),VCr=l(),nE=a("li"),mve=a("strong"),XCr=o("gptj"),zCr=o(" \u2014 "),hU=a("a"),QCr=o("FlaxGPTJForCausalLM"),WCr=o(" (GPT-J model)"),HCr=l(),sE=a("li"),gve=a("strong"),UCr=o("roberta"),JCr=o(" \u2014 "),pU=a("a"),YCr=o("FlaxRobertaForCausalLM"),KCr=o(" (RoBERTa model)"),ZCr=l(),lE=a("li"),hve=a("strong"),ewr=o("xglm"),owr=o(" \u2014 "),uU=a("a"),rwr=o("FlaxXGLMForCausalLM"),twr=o(" (XGLM model)"),awr=l(),F(iE.$$.fragment),DPe=l(),Mc=a("h2"),dE=a("a"),pve=a("span"),F(C8.$$.fragment),nwr=l(),uve=a("span"),swr=o("FlaxAutoModelForPreTraining"),GPe=l(),mr=a("div"),F(w8.$$.fragment),lwr=l(),Ec=a("p"),iwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_U=a("a"),dwr=o("from_pretrained()"),cwr=o(" class method or the "),bU=a("a"),fwr=o("from_config()"),mwr=o(` class
method.`),gwr=l(),A8=a("p"),hwr=o("This class cannot be instantiated directly using "),_ve=a("code"),pwr=o("__init__()"),uwr=o(" (throws an error)."),_wr=l(),Nt=a("div"),F(y8.$$.fragment),bwr=l(),bve=a("p"),vwr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Fwr=l(),Cc=a("p"),Twr=o(`Note:
Loading a model from its configuration file does `),vve=a("strong"),Mwr=o("not"),Ewr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),Cwr=o("from_pretrained()"),wwr=o(" to load the model weights."),Awr=l(),F(cE.$$.fragment),ywr=l(),jr=a("div"),F(L8.$$.fragment),Lwr=l(),Fve=a("p"),xwr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$wr=l(),fn=a("p"),kwr=o("The model class to instantiate is selected based on the "),Tve=a("code"),Swr=o("model_type"),Rwr=o(` property of the config object (either
passed as an argument or loaded from `),Mve=a("code"),Bwr=o("pretrained_model_name_or_path"),Pwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eve=a("code"),Iwr=o("pretrained_model_name_or_path"),qwr=o(":"),Nwr=l(),Me=a("ul"),fE=a("li"),Cve=a("strong"),jwr=o("albert"),Dwr=o(" \u2014 "),FU=a("a"),Gwr=o("FlaxAlbertForPreTraining"),Owr=o(" (ALBERT model)"),Vwr=l(),mE=a("li"),wve=a("strong"),Xwr=o("bart"),zwr=o(" \u2014 "),TU=a("a"),Qwr=o("FlaxBartForConditionalGeneration"),Wwr=o(" (BART model)"),Hwr=l(),gE=a("li"),Ave=a("strong"),Uwr=o("bert"),Jwr=o(" \u2014 "),MU=a("a"),Ywr=o("FlaxBertForPreTraining"),Kwr=o(" (BERT model)"),Zwr=l(),hE=a("li"),yve=a("strong"),eAr=o("big_bird"),oAr=o(" \u2014 "),EU=a("a"),rAr=o("FlaxBigBirdForPreTraining"),tAr=o(" (BigBird model)"),aAr=l(),pE=a("li"),Lve=a("strong"),nAr=o("electra"),sAr=o(" \u2014 "),CU=a("a"),lAr=o("FlaxElectraForPreTraining"),iAr=o(" (ELECTRA model)"),dAr=l(),uE=a("li"),xve=a("strong"),cAr=o("mbart"),fAr=o(" \u2014 "),wU=a("a"),mAr=o("FlaxMBartForConditionalGeneration"),gAr=o(" (mBART model)"),hAr=l(),_E=a("li"),$ve=a("strong"),pAr=o("mt5"),uAr=o(" \u2014 "),AU=a("a"),_Ar=o("FlaxMT5ForConditionalGeneration"),bAr=o(" (mT5 model)"),vAr=l(),bE=a("li"),kve=a("strong"),FAr=o("roberta"),TAr=o(" \u2014 "),yU=a("a"),MAr=o("FlaxRobertaForMaskedLM"),EAr=o(" (RoBERTa model)"),CAr=l(),vE=a("li"),Sve=a("strong"),wAr=o("roformer"),AAr=o(" \u2014 "),LU=a("a"),yAr=o("FlaxRoFormerForMaskedLM"),LAr=o(" (RoFormer model)"),xAr=l(),FE=a("li"),Rve=a("strong"),$Ar=o("t5"),kAr=o(" \u2014 "),xU=a("a"),SAr=o("FlaxT5ForConditionalGeneration"),RAr=o(" (T5 model)"),BAr=l(),TE=a("li"),Bve=a("strong"),PAr=o("wav2vec2"),IAr=o(" \u2014 "),$U=a("a"),qAr=o("FlaxWav2Vec2ForPreTraining"),NAr=o(" (Wav2Vec2 model)"),jAr=l(),ME=a("li"),Pve=a("strong"),DAr=o("xlm-roberta"),GAr=o(" \u2014 "),kU=a("a"),OAr=o("FlaxXLMRobertaForMaskedLM"),VAr=o(" (XLM-RoBERTa model)"),XAr=l(),F(EE.$$.fragment),OPe=l(),wc=a("h2"),CE=a("a"),Ive=a("span"),F(x8.$$.fragment),zAr=l(),qve=a("span"),QAr=o("FlaxAutoModelForMaskedLM"),VPe=l(),gr=a("div"),F($8.$$.fragment),WAr=l(),Ac=a("p"),HAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),SU=a("a"),UAr=o("from_pretrained()"),JAr=o(" class method or the "),RU=a("a"),YAr=o("from_config()"),KAr=o(` class
method.`),ZAr=l(),k8=a("p"),e6r=o("This class cannot be instantiated directly using "),Nve=a("code"),o6r=o("__init__()"),r6r=o(" (throws an error)."),t6r=l(),jt=a("div"),F(S8.$$.fragment),a6r=l(),jve=a("p"),n6r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),s6r=l(),yc=a("p"),l6r=o(`Note:
Loading a model from its configuration file does `),Dve=a("strong"),i6r=o("not"),d6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BU=a("a"),c6r=o("from_pretrained()"),f6r=o(" to load the model weights."),m6r=l(),F(wE.$$.fragment),g6r=l(),Dr=a("div"),F(R8.$$.fragment),h6r=l(),Gve=a("p"),p6r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),u6r=l(),mn=a("p"),_6r=o("The model class to instantiate is selected based on the "),Ove=a("code"),b6r=o("model_type"),v6r=o(` property of the config object (either
passed as an argument or loaded from `),Vve=a("code"),F6r=o("pretrained_model_name_or_path"),T6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xve=a("code"),M6r=o("pretrained_model_name_or_path"),E6r=o(":"),C6r=l(),Le=a("ul"),AE=a("li"),zve=a("strong"),w6r=o("albert"),A6r=o(" \u2014 "),PU=a("a"),y6r=o("FlaxAlbertForMaskedLM"),L6r=o(" (ALBERT model)"),x6r=l(),yE=a("li"),Qve=a("strong"),$6r=o("bart"),k6r=o(" \u2014 "),IU=a("a"),S6r=o("FlaxBartForConditionalGeneration"),R6r=o(" (BART model)"),B6r=l(),LE=a("li"),Wve=a("strong"),P6r=o("bert"),I6r=o(" \u2014 "),qU=a("a"),q6r=o("FlaxBertForMaskedLM"),N6r=o(" (BERT model)"),j6r=l(),xE=a("li"),Hve=a("strong"),D6r=o("big_bird"),G6r=o(" \u2014 "),NU=a("a"),O6r=o("FlaxBigBirdForMaskedLM"),V6r=o(" (BigBird model)"),X6r=l(),$E=a("li"),Uve=a("strong"),z6r=o("distilbert"),Q6r=o(" \u2014 "),jU=a("a"),W6r=o("FlaxDistilBertForMaskedLM"),H6r=o(" (DistilBERT model)"),U6r=l(),kE=a("li"),Jve=a("strong"),J6r=o("electra"),Y6r=o(" \u2014 "),DU=a("a"),K6r=o("FlaxElectraForMaskedLM"),Z6r=o(" (ELECTRA model)"),eyr=l(),SE=a("li"),Yve=a("strong"),oyr=o("mbart"),ryr=o(" \u2014 "),GU=a("a"),tyr=o("FlaxMBartForConditionalGeneration"),ayr=o(" (mBART model)"),nyr=l(),RE=a("li"),Kve=a("strong"),syr=o("roberta"),lyr=o(" \u2014 "),OU=a("a"),iyr=o("FlaxRobertaForMaskedLM"),dyr=o(" (RoBERTa model)"),cyr=l(),BE=a("li"),Zve=a("strong"),fyr=o("roformer"),myr=o(" \u2014 "),VU=a("a"),gyr=o("FlaxRoFormerForMaskedLM"),hyr=o(" (RoFormer model)"),pyr=l(),PE=a("li"),eFe=a("strong"),uyr=o("xlm-roberta"),_yr=o(" \u2014 "),XU=a("a"),byr=o("FlaxXLMRobertaForMaskedLM"),vyr=o(" (XLM-RoBERTa model)"),Fyr=l(),F(IE.$$.fragment),XPe=l(),Lc=a("h2"),qE=a("a"),oFe=a("span"),F(B8.$$.fragment),Tyr=l(),rFe=a("span"),Myr=o("FlaxAutoModelForSeq2SeqLM"),zPe=l(),hr=a("div"),F(P8.$$.fragment),Eyr=l(),xc=a("p"),Cyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zU=a("a"),wyr=o("from_pretrained()"),Ayr=o(" class method or the "),QU=a("a"),yyr=o("from_config()"),Lyr=o(` class
method.`),xyr=l(),I8=a("p"),$yr=o("This class cannot be instantiated directly using "),tFe=a("code"),kyr=o("__init__()"),Syr=o(" (throws an error)."),Ryr=l(),Dt=a("div"),F(q8.$$.fragment),Byr=l(),aFe=a("p"),Pyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Iyr=l(),$c=a("p"),qyr=o(`Note:
Loading a model from its configuration file does `),nFe=a("strong"),Nyr=o("not"),jyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WU=a("a"),Dyr=o("from_pretrained()"),Gyr=o(" to load the model weights."),Oyr=l(),F(NE.$$.fragment),Vyr=l(),Gr=a("div"),F(N8.$$.fragment),Xyr=l(),sFe=a("p"),zyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Qyr=l(),gn=a("p"),Wyr=o("The model class to instantiate is selected based on the "),lFe=a("code"),Hyr=o("model_type"),Uyr=o(` property of the config object (either
passed as an argument or loaded from `),iFe=a("code"),Jyr=o("pretrained_model_name_or_path"),Yyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dFe=a("code"),Kyr=o("pretrained_model_name_or_path"),Zyr=o(":"),eLr=l(),Se=a("ul"),jE=a("li"),cFe=a("strong"),oLr=o("bart"),rLr=o(" \u2014 "),HU=a("a"),tLr=o("FlaxBartForConditionalGeneration"),aLr=o(" (BART model)"),nLr=l(),DE=a("li"),fFe=a("strong"),sLr=o("blenderbot"),lLr=o(" \u2014 "),UU=a("a"),iLr=o("FlaxBlenderbotForConditionalGeneration"),dLr=o(" (Blenderbot model)"),cLr=l(),GE=a("li"),mFe=a("strong"),fLr=o("blenderbot-small"),mLr=o(" \u2014 "),JU=a("a"),gLr=o("FlaxBlenderbotSmallForConditionalGeneration"),hLr=o(" (BlenderbotSmall model)"),pLr=l(),OE=a("li"),gFe=a("strong"),uLr=o("encoder-decoder"),_Lr=o(" \u2014 "),YU=a("a"),bLr=o("FlaxEncoderDecoderModel"),vLr=o(" (Encoder decoder model)"),FLr=l(),VE=a("li"),hFe=a("strong"),TLr=o("marian"),MLr=o(" \u2014 "),KU=a("a"),ELr=o("FlaxMarianMTModel"),CLr=o(" (Marian model)"),wLr=l(),XE=a("li"),pFe=a("strong"),ALr=o("mbart"),yLr=o(" \u2014 "),ZU=a("a"),LLr=o("FlaxMBartForConditionalGeneration"),xLr=o(" (mBART model)"),$Lr=l(),zE=a("li"),uFe=a("strong"),kLr=o("mt5"),SLr=o(" \u2014 "),eJ=a("a"),RLr=o("FlaxMT5ForConditionalGeneration"),BLr=o(" (mT5 model)"),PLr=l(),QE=a("li"),_Fe=a("strong"),ILr=o("pegasus"),qLr=o(" \u2014 "),oJ=a("a"),NLr=o("FlaxPegasusForConditionalGeneration"),jLr=o(" (Pegasus model)"),DLr=l(),WE=a("li"),bFe=a("strong"),GLr=o("t5"),OLr=o(" \u2014 "),rJ=a("a"),VLr=o("FlaxT5ForConditionalGeneration"),XLr=o(" (T5 model)"),zLr=l(),F(HE.$$.fragment),QPe=l(),kc=a("h2"),UE=a("a"),vFe=a("span"),F(j8.$$.fragment),QLr=l(),FFe=a("span"),WLr=o("FlaxAutoModelForSequenceClassification"),WPe=l(),pr=a("div"),F(D8.$$.fragment),HLr=l(),Sc=a("p"),ULr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tJ=a("a"),JLr=o("from_pretrained()"),YLr=o(" class method or the "),aJ=a("a"),KLr=o("from_config()"),ZLr=o(` class
method.`),e8r=l(),G8=a("p"),o8r=o("This class cannot be instantiated directly using "),TFe=a("code"),r8r=o("__init__()"),t8r=o(" (throws an error)."),a8r=l(),Gt=a("div"),F(O8.$$.fragment),n8r=l(),MFe=a("p"),s8r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),l8r=l(),Rc=a("p"),i8r=o(`Note:
Loading a model from its configuration file does `),EFe=a("strong"),d8r=o("not"),c8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=a("a"),f8r=o("from_pretrained()"),m8r=o(" to load the model weights."),g8r=l(),F(JE.$$.fragment),h8r=l(),Or=a("div"),F(V8.$$.fragment),p8r=l(),CFe=a("p"),u8r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_8r=l(),hn=a("p"),b8r=o("The model class to instantiate is selected based on the "),wFe=a("code"),v8r=o("model_type"),F8r=o(` property of the config object (either
passed as an argument or loaded from `),AFe=a("code"),T8r=o("pretrained_model_name_or_path"),M8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=a("code"),E8r=o("pretrained_model_name_or_path"),C8r=o(":"),w8r=l(),xe=a("ul"),YE=a("li"),LFe=a("strong"),A8r=o("albert"),y8r=o(" \u2014 "),sJ=a("a"),L8r=o("FlaxAlbertForSequenceClassification"),x8r=o(" (ALBERT model)"),$8r=l(),KE=a("li"),xFe=a("strong"),k8r=o("bart"),S8r=o(" \u2014 "),lJ=a("a"),R8r=o("FlaxBartForSequenceClassification"),B8r=o(" (BART model)"),P8r=l(),ZE=a("li"),$Fe=a("strong"),I8r=o("bert"),q8r=o(" \u2014 "),iJ=a("a"),N8r=o("FlaxBertForSequenceClassification"),j8r=o(" (BERT model)"),D8r=l(),e5=a("li"),kFe=a("strong"),G8r=o("big_bird"),O8r=o(" \u2014 "),dJ=a("a"),V8r=o("FlaxBigBirdForSequenceClassification"),X8r=o(" (BigBird model)"),z8r=l(),o5=a("li"),SFe=a("strong"),Q8r=o("distilbert"),W8r=o(" \u2014 "),cJ=a("a"),H8r=o("FlaxDistilBertForSequenceClassification"),U8r=o(" (DistilBERT model)"),J8r=l(),r5=a("li"),RFe=a("strong"),Y8r=o("electra"),K8r=o(" \u2014 "),fJ=a("a"),Z8r=o("FlaxElectraForSequenceClassification"),exr=o(" (ELECTRA model)"),oxr=l(),t5=a("li"),BFe=a("strong"),rxr=o("mbart"),txr=o(" \u2014 "),mJ=a("a"),axr=o("FlaxMBartForSequenceClassification"),nxr=o(" (mBART model)"),sxr=l(),a5=a("li"),PFe=a("strong"),lxr=o("roberta"),ixr=o(" \u2014 "),gJ=a("a"),dxr=o("FlaxRobertaForSequenceClassification"),cxr=o(" (RoBERTa model)"),fxr=l(),n5=a("li"),IFe=a("strong"),mxr=o("roformer"),gxr=o(" \u2014 "),hJ=a("a"),hxr=o("FlaxRoFormerForSequenceClassification"),pxr=o(" (RoFormer model)"),uxr=l(),s5=a("li"),qFe=a("strong"),_xr=o("xlm-roberta"),bxr=o(" \u2014 "),pJ=a("a"),vxr=o("FlaxXLMRobertaForSequenceClassification"),Fxr=o(" (XLM-RoBERTa model)"),Txr=l(),F(l5.$$.fragment),HPe=l(),Bc=a("h2"),i5=a("a"),NFe=a("span"),F(X8.$$.fragment),Mxr=l(),jFe=a("span"),Exr=o("FlaxAutoModelForQuestionAnswering"),UPe=l(),ur=a("div"),F(z8.$$.fragment),Cxr=l(),Pc=a("p"),wxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uJ=a("a"),Axr=o("from_pretrained()"),yxr=o(" class method or the "),_J=a("a"),Lxr=o("from_config()"),xxr=o(` class
method.`),$xr=l(),Q8=a("p"),kxr=o("This class cannot be instantiated directly using "),DFe=a("code"),Sxr=o("__init__()"),Rxr=o(" (throws an error)."),Bxr=l(),Ot=a("div"),F(W8.$$.fragment),Pxr=l(),GFe=a("p"),Ixr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),qxr=l(),Ic=a("p"),Nxr=o(`Note:
Loading a model from its configuration file does `),OFe=a("strong"),jxr=o("not"),Dxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=a("a"),Gxr=o("from_pretrained()"),Oxr=o(" to load the model weights."),Vxr=l(),F(d5.$$.fragment),Xxr=l(),Vr=a("div"),F(H8.$$.fragment),zxr=l(),VFe=a("p"),Qxr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Wxr=l(),pn=a("p"),Hxr=o("The model class to instantiate is selected based on the "),XFe=a("code"),Uxr=o("model_type"),Jxr=o(` property of the config object (either
passed as an argument or loaded from `),zFe=a("code"),Yxr=o("pretrained_model_name_or_path"),Kxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=a("code"),Zxr=o("pretrained_model_name_or_path"),e9r=o(":"),o9r=l(),$e=a("ul"),c5=a("li"),WFe=a("strong"),r9r=o("albert"),t9r=o(" \u2014 "),vJ=a("a"),a9r=o("FlaxAlbertForQuestionAnswering"),n9r=o(" (ALBERT model)"),s9r=l(),f5=a("li"),HFe=a("strong"),l9r=o("bart"),i9r=o(" \u2014 "),FJ=a("a"),d9r=o("FlaxBartForQuestionAnswering"),c9r=o(" (BART model)"),f9r=l(),m5=a("li"),UFe=a("strong"),m9r=o("bert"),g9r=o(" \u2014 "),TJ=a("a"),h9r=o("FlaxBertForQuestionAnswering"),p9r=o(" (BERT model)"),u9r=l(),g5=a("li"),JFe=a("strong"),_9r=o("big_bird"),b9r=o(" \u2014 "),MJ=a("a"),v9r=o("FlaxBigBirdForQuestionAnswering"),F9r=o(" (BigBird model)"),T9r=l(),h5=a("li"),YFe=a("strong"),M9r=o("distilbert"),E9r=o(" \u2014 "),EJ=a("a"),C9r=o("FlaxDistilBertForQuestionAnswering"),w9r=o(" (DistilBERT model)"),A9r=l(),p5=a("li"),KFe=a("strong"),y9r=o("electra"),L9r=o(" \u2014 "),CJ=a("a"),x9r=o("FlaxElectraForQuestionAnswering"),$9r=o(" (ELECTRA model)"),k9r=l(),u5=a("li"),ZFe=a("strong"),S9r=o("mbart"),R9r=o(" \u2014 "),wJ=a("a"),B9r=o("FlaxMBartForQuestionAnswering"),P9r=o(" (mBART model)"),I9r=l(),_5=a("li"),e0e=a("strong"),q9r=o("roberta"),N9r=o(" \u2014 "),AJ=a("a"),j9r=o("FlaxRobertaForQuestionAnswering"),D9r=o(" (RoBERTa model)"),G9r=l(),b5=a("li"),o0e=a("strong"),O9r=o("roformer"),V9r=o(" \u2014 "),yJ=a("a"),X9r=o("FlaxRoFormerForQuestionAnswering"),z9r=o(" (RoFormer model)"),Q9r=l(),v5=a("li"),r0e=a("strong"),W9r=o("xlm-roberta"),H9r=o(" \u2014 "),LJ=a("a"),U9r=o("FlaxXLMRobertaForQuestionAnswering"),J9r=o(" (XLM-RoBERTa model)"),Y9r=l(),F(F5.$$.fragment),JPe=l(),qc=a("h2"),T5=a("a"),t0e=a("span"),F(U8.$$.fragment),K9r=l(),a0e=a("span"),Z9r=o("FlaxAutoModelForTokenClassification"),YPe=l(),_r=a("div"),F(J8.$$.fragment),e$r=l(),Nc=a("p"),o$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xJ=a("a"),r$r=o("from_pretrained()"),t$r=o(" class method or the "),$J=a("a"),a$r=o("from_config()"),n$r=o(` class
method.`),s$r=l(),Y8=a("p"),l$r=o("This class cannot be instantiated directly using "),n0e=a("code"),i$r=o("__init__()"),d$r=o(" (throws an error)."),c$r=l(),Vt=a("div"),F(K8.$$.fragment),f$r=l(),s0e=a("p"),m$r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),g$r=l(),jc=a("p"),h$r=o(`Note:
Loading a model from its configuration file does `),l0e=a("strong"),p$r=o("not"),u$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=a("a"),_$r=o("from_pretrained()"),b$r=o(" to load the model weights."),v$r=l(),F(M5.$$.fragment),F$r=l(),Xr=a("div"),F(Z8.$$.fragment),T$r=l(),i0e=a("p"),M$r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),E$r=l(),un=a("p"),C$r=o("The model class to instantiate is selected based on the "),d0e=a("code"),w$r=o("model_type"),A$r=o(` property of the config object (either
passed as an argument or loaded from `),c0e=a("code"),y$r=o("pretrained_model_name_or_path"),L$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f0e=a("code"),x$r=o("pretrained_model_name_or_path"),$$r=o(":"),k$r=l(),De=a("ul"),E5=a("li"),m0e=a("strong"),S$r=o("albert"),R$r=o(" \u2014 "),SJ=a("a"),B$r=o("FlaxAlbertForTokenClassification"),P$r=o(" (ALBERT model)"),I$r=l(),C5=a("li"),g0e=a("strong"),q$r=o("bert"),N$r=o(" \u2014 "),RJ=a("a"),j$r=o("FlaxBertForTokenClassification"),D$r=o(" (BERT model)"),G$r=l(),w5=a("li"),h0e=a("strong"),O$r=o("big_bird"),V$r=o(" \u2014 "),BJ=a("a"),X$r=o("FlaxBigBirdForTokenClassification"),z$r=o(" (BigBird model)"),Q$r=l(),A5=a("li"),p0e=a("strong"),W$r=o("distilbert"),H$r=o(" \u2014 "),PJ=a("a"),U$r=o("FlaxDistilBertForTokenClassification"),J$r=o(" (DistilBERT model)"),Y$r=l(),y5=a("li"),u0e=a("strong"),K$r=o("electra"),Z$r=o(" \u2014 "),IJ=a("a"),ekr=o("FlaxElectraForTokenClassification"),okr=o(" (ELECTRA model)"),rkr=l(),L5=a("li"),_0e=a("strong"),tkr=o("roberta"),akr=o(" \u2014 "),qJ=a("a"),nkr=o("FlaxRobertaForTokenClassification"),skr=o(" (RoBERTa model)"),lkr=l(),x5=a("li"),b0e=a("strong"),ikr=o("roformer"),dkr=o(" \u2014 "),NJ=a("a"),ckr=o("FlaxRoFormerForTokenClassification"),fkr=o(" (RoFormer model)"),mkr=l(),$5=a("li"),v0e=a("strong"),gkr=o("xlm-roberta"),hkr=o(" \u2014 "),jJ=a("a"),pkr=o("FlaxXLMRobertaForTokenClassification"),ukr=o(" (XLM-RoBERTa model)"),_kr=l(),F(k5.$$.fragment),KPe=l(),Dc=a("h2"),S5=a("a"),F0e=a("span"),F(ex.$$.fragment),bkr=l(),T0e=a("span"),vkr=o("FlaxAutoModelForMultipleChoice"),ZPe=l(),br=a("div"),F(ox.$$.fragment),Fkr=l(),Gc=a("p"),Tkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),DJ=a("a"),Mkr=o("from_pretrained()"),Ekr=o(" class method or the "),GJ=a("a"),Ckr=o("from_config()"),wkr=o(` class
method.`),Akr=l(),rx=a("p"),ykr=o("This class cannot be instantiated directly using "),M0e=a("code"),Lkr=o("__init__()"),xkr=o(" (throws an error)."),$kr=l(),Xt=a("div"),F(tx.$$.fragment),kkr=l(),E0e=a("p"),Skr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Rkr=l(),Oc=a("p"),Bkr=o(`Note:
Loading a model from its configuration file does `),C0e=a("strong"),Pkr=o("not"),Ikr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=a("a"),qkr=o("from_pretrained()"),Nkr=o(" to load the model weights."),jkr=l(),F(R5.$$.fragment),Dkr=l(),zr=a("div"),F(ax.$$.fragment),Gkr=l(),w0e=a("p"),Okr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Vkr=l(),_n=a("p"),Xkr=o("The model class to instantiate is selected based on the "),A0e=a("code"),zkr=o("model_type"),Qkr=o(` property of the config object (either
passed as an argument or loaded from `),y0e=a("code"),Wkr=o("pretrained_model_name_or_path"),Hkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L0e=a("code"),Ukr=o("pretrained_model_name_or_path"),Jkr=o(":"),Ykr=l(),Ge=a("ul"),B5=a("li"),x0e=a("strong"),Kkr=o("albert"),Zkr=o(" \u2014 "),VJ=a("a"),eSr=o("FlaxAlbertForMultipleChoice"),oSr=o(" (ALBERT model)"),rSr=l(),P5=a("li"),$0e=a("strong"),tSr=o("bert"),aSr=o(" \u2014 "),XJ=a("a"),nSr=o("FlaxBertForMultipleChoice"),sSr=o(" (BERT model)"),lSr=l(),I5=a("li"),k0e=a("strong"),iSr=o("big_bird"),dSr=o(" \u2014 "),zJ=a("a"),cSr=o("FlaxBigBirdForMultipleChoice"),fSr=o(" (BigBird model)"),mSr=l(),q5=a("li"),S0e=a("strong"),gSr=o("distilbert"),hSr=o(" \u2014 "),QJ=a("a"),pSr=o("FlaxDistilBertForMultipleChoice"),uSr=o(" (DistilBERT model)"),_Sr=l(),N5=a("li"),R0e=a("strong"),bSr=o("electra"),vSr=o(" \u2014 "),WJ=a("a"),FSr=o("FlaxElectraForMultipleChoice"),TSr=o(" (ELECTRA model)"),MSr=l(),j5=a("li"),B0e=a("strong"),ESr=o("roberta"),CSr=o(" \u2014 "),HJ=a("a"),wSr=o("FlaxRobertaForMultipleChoice"),ASr=o(" (RoBERTa model)"),ySr=l(),D5=a("li"),P0e=a("strong"),LSr=o("roformer"),xSr=o(" \u2014 "),UJ=a("a"),$Sr=o("FlaxRoFormerForMultipleChoice"),kSr=o(" (RoFormer model)"),SSr=l(),G5=a("li"),I0e=a("strong"),RSr=o("xlm-roberta"),BSr=o(" \u2014 "),JJ=a("a"),PSr=o("FlaxXLMRobertaForMultipleChoice"),ISr=o(" (XLM-RoBERTa model)"),qSr=l(),F(O5.$$.fragment),eIe=l(),Vc=a("h2"),V5=a("a"),q0e=a("span"),F(nx.$$.fragment),NSr=l(),N0e=a("span"),jSr=o("FlaxAutoModelForNextSentencePrediction"),oIe=l(),vr=a("div"),F(sx.$$.fragment),DSr=l(),Xc=a("p"),GSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YJ=a("a"),OSr=o("from_pretrained()"),VSr=o(" class method or the "),KJ=a("a"),XSr=o("from_config()"),zSr=o(` class
method.`),QSr=l(),lx=a("p"),WSr=o("This class cannot be instantiated directly using "),j0e=a("code"),HSr=o("__init__()"),USr=o(" (throws an error)."),JSr=l(),zt=a("div"),F(ix.$$.fragment),YSr=l(),D0e=a("p"),KSr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ZSr=l(),zc=a("p"),eRr=o(`Note:
Loading a model from its configuration file does `),G0e=a("strong"),oRr=o("not"),rRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=a("a"),tRr=o("from_pretrained()"),aRr=o(" to load the model weights."),nRr=l(),F(X5.$$.fragment),sRr=l(),Qr=a("div"),F(dx.$$.fragment),lRr=l(),O0e=a("p"),iRr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dRr=l(),bn=a("p"),cRr=o("The model class to instantiate is selected based on the "),V0e=a("code"),fRr=o("model_type"),mRr=o(` property of the config object (either
passed as an argument or loaded from `),X0e=a("code"),gRr=o("pretrained_model_name_or_path"),hRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z0e=a("code"),pRr=o("pretrained_model_name_or_path"),uRr=o(":"),_Rr=l(),Q0e=a("ul"),z5=a("li"),W0e=a("strong"),bRr=o("bert"),vRr=o(" \u2014 "),eY=a("a"),FRr=o("FlaxBertForNextSentencePrediction"),TRr=o(" (BERT model)"),MRr=l(),F(Q5.$$.fragment),rIe=l(),Qc=a("h2"),W5=a("a"),H0e=a("span"),F(cx.$$.fragment),ERr=l(),U0e=a("span"),CRr=o("FlaxAutoModelForImageClassification"),tIe=l(),Fr=a("div"),F(fx.$$.fragment),wRr=l(),Wc=a("p"),ARr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oY=a("a"),yRr=o("from_pretrained()"),LRr=o(" class method or the "),rY=a("a"),xRr=o("from_config()"),$Rr=o(` class
method.`),kRr=l(),mx=a("p"),SRr=o("This class cannot be instantiated directly using "),J0e=a("code"),RRr=o("__init__()"),BRr=o(" (throws an error)."),PRr=l(),Qt=a("div"),F(gx.$$.fragment),IRr=l(),Y0e=a("p"),qRr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),NRr=l(),Hc=a("p"),jRr=o(`Note:
Loading a model from its configuration file does `),K0e=a("strong"),DRr=o("not"),GRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=a("a"),ORr=o("from_pretrained()"),VRr=o(" to load the model weights."),XRr=l(),F(H5.$$.fragment),zRr=l(),Wr=a("div"),F(hx.$$.fragment),QRr=l(),Z0e=a("p"),WRr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),HRr=l(),vn=a("p"),URr=o("The model class to instantiate is selected based on the "),eTe=a("code"),JRr=o("model_type"),YRr=o(` property of the config object (either
passed as an argument or loaded from `),oTe=a("code"),KRr=o("pretrained_model_name_or_path"),ZRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=a("code"),eBr=o("pretrained_model_name_or_path"),oBr=o(":"),rBr=l(),px=a("ul"),U5=a("li"),tTe=a("strong"),tBr=o("beit"),aBr=o(" \u2014 "),aY=a("a"),nBr=o("FlaxBeitForImageClassification"),sBr=o(" (BEiT model)"),lBr=l(),J5=a("li"),aTe=a("strong"),iBr=o("vit"),dBr=o(" \u2014 "),nY=a("a"),cBr=o("FlaxViTForImageClassification"),fBr=o(" (ViT model)"),mBr=l(),F(Y5.$$.fragment),aIe=l(),Uc=a("h2"),K5=a("a"),nTe=a("span"),F(ux.$$.fragment),gBr=l(),sTe=a("span"),hBr=o("FlaxAutoModelForVision2Seq"),nIe=l(),Tr=a("div"),F(_x.$$.fragment),pBr=l(),Jc=a("p"),uBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sY=a("a"),_Br=o("from_pretrained()"),bBr=o(" class method or the "),lY=a("a"),vBr=o("from_config()"),FBr=o(` class
method.`),TBr=l(),bx=a("p"),MBr=o("This class cannot be instantiated directly using "),lTe=a("code"),EBr=o("__init__()"),CBr=o(" (throws an error)."),wBr=l(),Wt=a("div"),F(vx.$$.fragment),ABr=l(),iTe=a("p"),yBr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),LBr=l(),Yc=a("p"),xBr=o(`Note:
Loading a model from its configuration file does `),dTe=a("strong"),$Br=o("not"),kBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iY=a("a"),SBr=o("from_pretrained()"),RBr=o(" to load the model weights."),BBr=l(),F(Z5.$$.fragment),PBr=l(),Hr=a("div"),F(Fx.$$.fragment),IBr=l(),cTe=a("p"),qBr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),NBr=l(),Fn=a("p"),jBr=o("The model class to instantiate is selected based on the "),fTe=a("code"),DBr=o("model_type"),GBr=o(` property of the config object (either
passed as an argument or loaded from `),mTe=a("code"),OBr=o("pretrained_model_name_or_path"),VBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gTe=a("code"),XBr=o("pretrained_model_name_or_path"),zBr=o(":"),QBr=l(),hTe=a("ul"),eC=a("li"),pTe=a("strong"),WBr=o("vision-encoder-decoder"),HBr=o(" \u2014 "),dY=a("a"),UBr=o("FlaxVisionEncoderDecoderModel"),JBr=o(" (Vision Encoder decoder model)"),YBr=l(),F(oC.$$.fragment),this.h()},l(f){const _=DEt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Tx=s(p);m=n(Tx,"A",{id:!0,class:!0,href:!0});var uTe=s(m);u=n(uTe,"SPAN",{});var _Te=s(u);T(d.$$.fragment,_Te),_Te.forEach(t),uTe.forEach(t),h=i(Tx),Mo=n(Tx,"SPAN",{});var bTe=s(Mo);oi=r(bTe,"Auto Classes"),bTe.forEach(t),Tx.forEach(t),of=i(f),Kr=n(f,"P",{});var Mx=s(Kr);ri=r(Mx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=n(Mx,"CODE",{});var vTe=s(ti);_A=r(vTe,"from_pretrained()"),vTe.forEach(t),rf=r(Mx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Mx.forEach(t),qe=i(f),Xe=n(f,"P",{});var Tn=s(Xe);ai=r(Tn,"Instantiating one of "),Mn=n(Tn,"A",{href:!0});var FTe=s(Mn);bA=r(FTe,"AutoConfig"),FTe.forEach(t),En=r(Tn,", "),Cn=n(Tn,"A",{href:!0});var TTe=s(Cn);vA=r(TTe,"AutoModel"),TTe.forEach(t),ni=r(Tn,`, and
`),wn=n(Tn,"A",{href:!0});var MTe=s(wn);FA=r(MTe,"AutoTokenizer"),MTe.forEach(t),si=r(Tn," will directly create a class of the relevant architecture. For instance"),Tn.forEach(t),tf=i(f),T(va.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var Ex=s(Ae);R9=r(Ex,"will create a model that is an instance of "),li=n(Ex,"A",{href:!0});var ETe=s(li);B9=r(ETe,"BertModel"),ETe.forEach(t),P9=r(Ex,"."),Ex.forEach(t),Eo=i(f),Fa=n(f,"P",{});var Cx=s(Fa);I9=r(Cx,"There is one class of "),af=n(Cx,"CODE",{});var CTe=s(af);q9=r(CTe,"AutoModel"),CTe.forEach(t),mNe=r(Cx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Cx.forEach(t),nBe=i(f),ii=n(f,"H2",{class:!0});var wx=s(ii);nf=n(wx,"A",{id:!0,class:!0,href:!0});var wTe=s(nf);eZ=n(wTe,"SPAN",{});var ATe=s(eZ);T(TA.$$.fragment,ATe),ATe.forEach(t),wTe.forEach(t),gNe=i(wx),oZ=n(wx,"SPAN",{});var yTe=s(oZ);hNe=r(yTe,"Extending the Auto Classes"),yTe.forEach(t),wx.forEach(t),sBe=i(f),An=n(f,"P",{});var Kc=s(An);pNe=r(Kc,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),rZ=n(Kc,"CODE",{});var LTe=s(rZ);uNe=r(LTe,"NewModel"),LTe.forEach(t),_Ne=r(Kc,", make sure you have a "),tZ=n(Kc,"CODE",{});var xTe=s(tZ);bNe=r(xTe,"NewModelConfig"),xTe.forEach(t),vNe=r(Kc,` then you can add those to the auto
classes like this:`),Kc.forEach(t),lBe=i(f),T(MA.$$.fragment,f),iBe=i(f),N9=n(f,"P",{});var $Te=s(N9);FNe=r($Te,"You will then be able to use the auto classes like you would usually do!"),$Te.forEach(t),dBe=i(f),T(sf.$$.fragment,f),cBe=i(f),di=n(f,"H2",{class:!0});var Ax=s(di);lf=n(Ax,"A",{id:!0,class:!0,href:!0});var kTe=s(lf);aZ=n(kTe,"SPAN",{});var STe=s(aZ);T(EA.$$.fragment,STe),STe.forEach(t),kTe.forEach(t),TNe=i(Ax),nZ=n(Ax,"SPAN",{});var RTe=s(nZ);MNe=r(RTe,"AutoConfig"),RTe.forEach(t),Ax.forEach(t),fBe=i(f),Co=n(f,"DIV",{class:!0});var Jr=s(Co);T(CA.$$.fragment,Jr),ENe=i(Jr),wA=n(Jr,"P",{});var yx=s(wA);CNe=r(yx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),j9=n(yx,"A",{href:!0});var BTe=s(j9);wNe=r(BTe,"from_pretrained()"),BTe.forEach(t),ANe=r(yx," class method."),yx.forEach(t),yNe=i(Jr),AA=n(Jr,"P",{});var Lx=s(AA);LNe=r(Lx,"This class cannot be instantiated directly using "),sZ=n(Lx,"CODE",{});var PTe=s(sZ);xNe=r(PTe,"__init__()"),PTe.forEach(t),$Ne=r(Lx," (throws an error)."),Lx.forEach(t),kNe=i(Jr),Mr=n(Jr,"DIV",{class:!0});var Yr=s(Mr);T(yA.$$.fragment,Yr),SNe=i(Yr),lZ=n(Yr,"P",{});var ITe=s(lZ);RNe=r(ITe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),ITe.forEach(t),BNe=i(Yr),ci=n(Yr,"P",{});var Zc=s(ci);PNe=r(Zc,"The configuration class to instantiate is selected based on the "),iZ=n(Zc,"CODE",{});var qTe=s(iZ);INe=r(qTe,"model_type"),qTe.forEach(t),qNe=r(Zc,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),dZ=n(Zc,"CODE",{});var NTe=s(dZ);NNe=r(NTe,"pretrained_model_name_or_path"),NTe.forEach(t),jNe=r(Zc,":"),Zc.forEach(t),DNe=i(Yr),A=n(Yr,"UL",{});var y=s(A);df=n(y,"LI",{});var rC=s(df);cZ=n(rC,"STRONG",{});var jTe=s(cZ);GNe=r(jTe,"albert"),jTe.forEach(t),ONe=r(rC," \u2014 "),D9=n(rC,"A",{href:!0});var DTe=s(D9);VNe=r(DTe,"AlbertConfig"),DTe.forEach(t),XNe=r(rC," (ALBERT model)"),rC.forEach(t),zNe=i(y),cf=n(y,"LI",{});var tC=s(cf);fZ=n(tC,"STRONG",{});var GTe=s(fZ);QNe=r(GTe,"bart"),GTe.forEach(t),WNe=r(tC," \u2014 "),G9=n(tC,"A",{href:!0});var OTe=s(G9);HNe=r(OTe,"BartConfig"),OTe.forEach(t),UNe=r(tC," (BART model)"),tC.forEach(t),JNe=i(y),ff=n(y,"LI",{});var aC=s(ff);mZ=n(aC,"STRONG",{});var VTe=s(mZ);YNe=r(VTe,"beit"),VTe.forEach(t),KNe=r(aC," \u2014 "),O9=n(aC,"A",{href:!0});var XTe=s(O9);ZNe=r(XTe,"BeitConfig"),XTe.forEach(t),eje=r(aC," (BEiT model)"),aC.forEach(t),oje=i(y),mf=n(y,"LI",{});var nC=s(mf);gZ=n(nC,"STRONG",{});var zTe=s(gZ);rje=r(zTe,"bert"),zTe.forEach(t),tje=r(nC," \u2014 "),V9=n(nC,"A",{href:!0});var QTe=s(V9);aje=r(QTe,"BertConfig"),QTe.forEach(t),nje=r(nC," (BERT model)"),nC.forEach(t),sje=i(y),gf=n(y,"LI",{});var sC=s(gf);hZ=n(sC,"STRONG",{});var WTe=s(hZ);lje=r(WTe,"bert-generation"),WTe.forEach(t),ije=r(sC," \u2014 "),X9=n(sC,"A",{href:!0});var HTe=s(X9);dje=r(HTe,"BertGenerationConfig"),HTe.forEach(t),cje=r(sC," (Bert Generation model)"),sC.forEach(t),fje=i(y),hf=n(y,"LI",{});var lC=s(hf);pZ=n(lC,"STRONG",{});var UTe=s(pZ);mje=r(UTe,"big_bird"),UTe.forEach(t),gje=r(lC," \u2014 "),z9=n(lC,"A",{href:!0});var JTe=s(z9);hje=r(JTe,"BigBirdConfig"),JTe.forEach(t),pje=r(lC," (BigBird model)"),lC.forEach(t),uje=i(y),pf=n(y,"LI",{});var iC=s(pf);uZ=n(iC,"STRONG",{});var YTe=s(uZ);_je=r(YTe,"bigbird_pegasus"),YTe.forEach(t),bje=r(iC," \u2014 "),Q9=n(iC,"A",{href:!0});var KTe=s(Q9);vje=r(KTe,"BigBirdPegasusConfig"),KTe.forEach(t),Fje=r(iC," (BigBirdPegasus model)"),iC.forEach(t),Tje=i(y),uf=n(y,"LI",{});var dC=s(uf);_Z=n(dC,"STRONG",{});var ZTe=s(_Z);Mje=r(ZTe,"blenderbot"),ZTe.forEach(t),Eje=r(dC," \u2014 "),W9=n(dC,"A",{href:!0});var eMe=s(W9);Cje=r(eMe,"BlenderbotConfig"),eMe.forEach(t),wje=r(dC," (Blenderbot model)"),dC.forEach(t),Aje=i(y),_f=n(y,"LI",{});var cC=s(_f);bZ=n(cC,"STRONG",{});var oMe=s(bZ);yje=r(oMe,"blenderbot-small"),oMe.forEach(t),Lje=r(cC," \u2014 "),H9=n(cC,"A",{href:!0});var rMe=s(H9);xje=r(rMe,"BlenderbotSmallConfig"),rMe.forEach(t),$je=r(cC," (BlenderbotSmall model)"),cC.forEach(t),kje=i(y),bf=n(y,"LI",{});var fC=s(bf);vZ=n(fC,"STRONG",{});var tMe=s(vZ);Sje=r(tMe,"camembert"),tMe.forEach(t),Rje=r(fC," \u2014 "),U9=n(fC,"A",{href:!0});var aMe=s(U9);Bje=r(aMe,"CamembertConfig"),aMe.forEach(t),Pje=r(fC," (CamemBERT model)"),fC.forEach(t),Ije=i(y),vf=n(y,"LI",{});var mC=s(vf);FZ=n(mC,"STRONG",{});var nMe=s(FZ);qje=r(nMe,"canine"),nMe.forEach(t),Nje=r(mC," \u2014 "),J9=n(mC,"A",{href:!0});var sMe=s(J9);jje=r(sMe,"CanineConfig"),sMe.forEach(t),Dje=r(mC," (Canine model)"),mC.forEach(t),Gje=i(y),Ff=n(y,"LI",{});var gC=s(Ff);TZ=n(gC,"STRONG",{});var lMe=s(TZ);Oje=r(lMe,"clip"),lMe.forEach(t),Vje=r(gC," \u2014 "),Y9=n(gC,"A",{href:!0});var iMe=s(Y9);Xje=r(iMe,"CLIPConfig"),iMe.forEach(t),zje=r(gC," (CLIP model)"),gC.forEach(t),Qje=i(y),Tf=n(y,"LI",{});var hC=s(Tf);MZ=n(hC,"STRONG",{});var dMe=s(MZ);Wje=r(dMe,"convbert"),dMe.forEach(t),Hje=r(hC," \u2014 "),K9=n(hC,"A",{href:!0});var cMe=s(K9);Uje=r(cMe,"ConvBertConfig"),cMe.forEach(t),Jje=r(hC," (ConvBERT model)"),hC.forEach(t),Yje=i(y),Mf=n(y,"LI",{});var pC=s(Mf);EZ=n(pC,"STRONG",{});var fMe=s(EZ);Kje=r(fMe,"convnext"),fMe.forEach(t),Zje=r(pC," \u2014 "),Z9=n(pC,"A",{href:!0});var mMe=s(Z9);eDe=r(mMe,"ConvNextConfig"),mMe.forEach(t),oDe=r(pC," (ConvNext model)"),pC.forEach(t),rDe=i(y),Ef=n(y,"LI",{});var uC=s(Ef);CZ=n(uC,"STRONG",{});var gMe=s(CZ);tDe=r(gMe,"ctrl"),gMe.forEach(t),aDe=r(uC," \u2014 "),e$=n(uC,"A",{href:!0});var hMe=s(e$);nDe=r(hMe,"CTRLConfig"),hMe.forEach(t),sDe=r(uC," (CTRL model)"),uC.forEach(t),lDe=i(y),Cf=n(y,"LI",{});var _C=s(Cf);wZ=n(_C,"STRONG",{});var pMe=s(wZ);iDe=r(pMe,"data2vec-audio"),pMe.forEach(t),dDe=r(_C," \u2014 "),o$=n(_C,"A",{href:!0});var uMe=s(o$);cDe=r(uMe,"Data2VecAudioConfig"),uMe.forEach(t),fDe=r(_C," (Data2VecAudio model)"),_C.forEach(t),mDe=i(y),wf=n(y,"LI",{});var bC=s(wf);AZ=n(bC,"STRONG",{});var _Me=s(AZ);gDe=r(_Me,"data2vec-text"),_Me.forEach(t),hDe=r(bC," \u2014 "),r$=n(bC,"A",{href:!0});var bMe=s(r$);pDe=r(bMe,"Data2VecTextConfig"),bMe.forEach(t),uDe=r(bC," (Data2VecText model)"),bC.forEach(t),_De=i(y),Af=n(y,"LI",{});var vC=s(Af);yZ=n(vC,"STRONG",{});var vMe=s(yZ);bDe=r(vMe,"data2vec-vision"),vMe.forEach(t),vDe=r(vC," \u2014 "),t$=n(vC,"A",{href:!0});var FMe=s(t$);FDe=r(FMe,"Data2VecVisionConfig"),FMe.forEach(t),TDe=r(vC," (Data2VecVision model)"),vC.forEach(t),MDe=i(y),yf=n(y,"LI",{});var FC=s(yf);LZ=n(FC,"STRONG",{});var TMe=s(LZ);EDe=r(TMe,"deberta"),TMe.forEach(t),CDe=r(FC," \u2014 "),a$=n(FC,"A",{href:!0});var MMe=s(a$);wDe=r(MMe,"DebertaConfig"),MMe.forEach(t),ADe=r(FC," (DeBERTa model)"),FC.forEach(t),yDe=i(y),Lf=n(y,"LI",{});var TC=s(Lf);xZ=n(TC,"STRONG",{});var EMe=s(xZ);LDe=r(EMe,"deberta-v2"),EMe.forEach(t),xDe=r(TC," \u2014 "),n$=n(TC,"A",{href:!0});var CMe=s(n$);$De=r(CMe,"DebertaV2Config"),CMe.forEach(t),kDe=r(TC," (DeBERTa-v2 model)"),TC.forEach(t),SDe=i(y),xf=n(y,"LI",{});var MC=s(xf);$Z=n(MC,"STRONG",{});var wMe=s($Z);RDe=r(wMe,"decision_transformer"),wMe.forEach(t),BDe=r(MC," \u2014 "),s$=n(MC,"A",{href:!0});var AMe=s(s$);PDe=r(AMe,"DecisionTransformerConfig"),AMe.forEach(t),IDe=r(MC," (Decision Transformer model)"),MC.forEach(t),qDe=i(y),$f=n(y,"LI",{});var EC=s($f);kZ=n(EC,"STRONG",{});var yMe=s(kZ);NDe=r(yMe,"deit"),yMe.forEach(t),jDe=r(EC," \u2014 "),l$=n(EC,"A",{href:!0});var LMe=s(l$);DDe=r(LMe,"DeiTConfig"),LMe.forEach(t),GDe=r(EC," (DeiT model)"),EC.forEach(t),ODe=i(y),kf=n(y,"LI",{});var xMe=s(kf);SZ=n(xMe,"STRONG",{});var ZBr=s(SZ);VDe=r(ZBr,"detr"),ZBr.forEach(t),XDe=r(xMe," \u2014 "),i$=n(xMe,"A",{href:!0});var ePr=s(i$);zDe=r(ePr,"DetrConfig"),ePr.forEach(t),QDe=r(xMe," (DETR model)"),xMe.forEach(t),WDe=i(y),Sf=n(y,"LI",{});var $Me=s(Sf);RZ=n($Me,"STRONG",{});var oPr=s(RZ);HDe=r(oPr,"distilbert"),oPr.forEach(t),UDe=r($Me," \u2014 "),d$=n($Me,"A",{href:!0});var rPr=s(d$);JDe=r(rPr,"DistilBertConfig"),rPr.forEach(t),YDe=r($Me," (DistilBERT model)"),$Me.forEach(t),KDe=i(y),Rf=n(y,"LI",{});var kMe=s(Rf);BZ=n(kMe,"STRONG",{});var tPr=s(BZ);ZDe=r(tPr,"dpr"),tPr.forEach(t),eGe=r(kMe," \u2014 "),c$=n(kMe,"A",{href:!0});var aPr=s(c$);oGe=r(aPr,"DPRConfig"),aPr.forEach(t),rGe=r(kMe," (DPR model)"),kMe.forEach(t),tGe=i(y),Bf=n(y,"LI",{});var SMe=s(Bf);PZ=n(SMe,"STRONG",{});var nPr=s(PZ);aGe=r(nPr,"dpt"),nPr.forEach(t),nGe=r(SMe," \u2014 "),f$=n(SMe,"A",{href:!0});var sPr=s(f$);sGe=r(sPr,"DPTConfig"),sPr.forEach(t),lGe=r(SMe," (DPT model)"),SMe.forEach(t),iGe=i(y),Pf=n(y,"LI",{});var RMe=s(Pf);IZ=n(RMe,"STRONG",{});var lPr=s(IZ);dGe=r(lPr,"electra"),lPr.forEach(t),cGe=r(RMe," \u2014 "),m$=n(RMe,"A",{href:!0});var iPr=s(m$);fGe=r(iPr,"ElectraConfig"),iPr.forEach(t),mGe=r(RMe," (ELECTRA model)"),RMe.forEach(t),gGe=i(y),If=n(y,"LI",{});var BMe=s(If);qZ=n(BMe,"STRONG",{});var dPr=s(qZ);hGe=r(dPr,"encoder-decoder"),dPr.forEach(t),pGe=r(BMe," \u2014 "),g$=n(BMe,"A",{href:!0});var cPr=s(g$);uGe=r(cPr,"EncoderDecoderConfig"),cPr.forEach(t),_Ge=r(BMe," (Encoder decoder model)"),BMe.forEach(t),bGe=i(y),qf=n(y,"LI",{});var PMe=s(qf);NZ=n(PMe,"STRONG",{});var fPr=s(NZ);vGe=r(fPr,"flaubert"),fPr.forEach(t),FGe=r(PMe," \u2014 "),h$=n(PMe,"A",{href:!0});var mPr=s(h$);TGe=r(mPr,"FlaubertConfig"),mPr.forEach(t),MGe=r(PMe," (FlauBERT model)"),PMe.forEach(t),EGe=i(y),Nf=n(y,"LI",{});var IMe=s(Nf);jZ=n(IMe,"STRONG",{});var gPr=s(jZ);CGe=r(gPr,"fnet"),gPr.forEach(t),wGe=r(IMe," \u2014 "),p$=n(IMe,"A",{href:!0});var hPr=s(p$);AGe=r(hPr,"FNetConfig"),hPr.forEach(t),yGe=r(IMe," (FNet model)"),IMe.forEach(t),LGe=i(y),jf=n(y,"LI",{});var qMe=s(jf);DZ=n(qMe,"STRONG",{});var pPr=s(DZ);xGe=r(pPr,"fsmt"),pPr.forEach(t),$Ge=r(qMe," \u2014 "),u$=n(qMe,"A",{href:!0});var uPr=s(u$);kGe=r(uPr,"FSMTConfig"),uPr.forEach(t),SGe=r(qMe," (FairSeq Machine-Translation model)"),qMe.forEach(t),RGe=i(y),Df=n(y,"LI",{});var NMe=s(Df);GZ=n(NMe,"STRONG",{});var _Pr=s(GZ);BGe=r(_Pr,"funnel"),_Pr.forEach(t),PGe=r(NMe," \u2014 "),_$=n(NMe,"A",{href:!0});var bPr=s(_$);IGe=r(bPr,"FunnelConfig"),bPr.forEach(t),qGe=r(NMe," (Funnel Transformer model)"),NMe.forEach(t),NGe=i(y),Gf=n(y,"LI",{});var jMe=s(Gf);OZ=n(jMe,"STRONG",{});var vPr=s(OZ);jGe=r(vPr,"glpn"),vPr.forEach(t),DGe=r(jMe," \u2014 "),b$=n(jMe,"A",{href:!0});var FPr=s(b$);GGe=r(FPr,"GLPNConfig"),FPr.forEach(t),OGe=r(jMe," (GLPN model)"),jMe.forEach(t),VGe=i(y),Of=n(y,"LI",{});var DMe=s(Of);VZ=n(DMe,"STRONG",{});var TPr=s(VZ);XGe=r(TPr,"gpt2"),TPr.forEach(t),zGe=r(DMe," \u2014 "),v$=n(DMe,"A",{href:!0});var MPr=s(v$);QGe=r(MPr,"GPT2Config"),MPr.forEach(t),WGe=r(DMe," (OpenAI GPT-2 model)"),DMe.forEach(t),HGe=i(y),Vf=n(y,"LI",{});var GMe=s(Vf);XZ=n(GMe,"STRONG",{});var EPr=s(XZ);UGe=r(EPr,"gpt_neo"),EPr.forEach(t),JGe=r(GMe," \u2014 "),F$=n(GMe,"A",{href:!0});var CPr=s(F$);YGe=r(CPr,"GPTNeoConfig"),CPr.forEach(t),KGe=r(GMe," (GPT Neo model)"),GMe.forEach(t),ZGe=i(y),Xf=n(y,"LI",{});var OMe=s(Xf);zZ=n(OMe,"STRONG",{});var wPr=s(zZ);eOe=r(wPr,"gptj"),wPr.forEach(t),oOe=r(OMe," \u2014 "),T$=n(OMe,"A",{href:!0});var APr=s(T$);rOe=r(APr,"GPTJConfig"),APr.forEach(t),tOe=r(OMe," (GPT-J model)"),OMe.forEach(t),aOe=i(y),zf=n(y,"LI",{});var VMe=s(zf);QZ=n(VMe,"STRONG",{});var yPr=s(QZ);nOe=r(yPr,"hubert"),yPr.forEach(t),sOe=r(VMe," \u2014 "),M$=n(VMe,"A",{href:!0});var LPr=s(M$);lOe=r(LPr,"HubertConfig"),LPr.forEach(t),iOe=r(VMe," (Hubert model)"),VMe.forEach(t),dOe=i(y),Qf=n(y,"LI",{});var XMe=s(Qf);WZ=n(XMe,"STRONG",{});var xPr=s(WZ);cOe=r(xPr,"ibert"),xPr.forEach(t),fOe=r(XMe," \u2014 "),E$=n(XMe,"A",{href:!0});var $Pr=s(E$);mOe=r($Pr,"IBertConfig"),$Pr.forEach(t),gOe=r(XMe," (I-BERT model)"),XMe.forEach(t),hOe=i(y),Wf=n(y,"LI",{});var zMe=s(Wf);HZ=n(zMe,"STRONG",{});var kPr=s(HZ);pOe=r(kPr,"imagegpt"),kPr.forEach(t),uOe=r(zMe," \u2014 "),C$=n(zMe,"A",{href:!0});var SPr=s(C$);_Oe=r(SPr,"ImageGPTConfig"),SPr.forEach(t),bOe=r(zMe," (ImageGPT model)"),zMe.forEach(t),vOe=i(y),Hf=n(y,"LI",{});var QMe=s(Hf);UZ=n(QMe,"STRONG",{});var RPr=s(UZ);FOe=r(RPr,"layoutlm"),RPr.forEach(t),TOe=r(QMe," \u2014 "),w$=n(QMe,"A",{href:!0});var BPr=s(w$);MOe=r(BPr,"LayoutLMConfig"),BPr.forEach(t),EOe=r(QMe," (LayoutLM model)"),QMe.forEach(t),COe=i(y),Uf=n(y,"LI",{});var WMe=s(Uf);JZ=n(WMe,"STRONG",{});var PPr=s(JZ);wOe=r(PPr,"layoutlmv2"),PPr.forEach(t),AOe=r(WMe," \u2014 "),A$=n(WMe,"A",{href:!0});var IPr=s(A$);yOe=r(IPr,"LayoutLMv2Config"),IPr.forEach(t),LOe=r(WMe," (LayoutLMv2 model)"),WMe.forEach(t),xOe=i(y),Jf=n(y,"LI",{});var HMe=s(Jf);YZ=n(HMe,"STRONG",{});var qPr=s(YZ);$Oe=r(qPr,"led"),qPr.forEach(t),kOe=r(HMe," \u2014 "),y$=n(HMe,"A",{href:!0});var NPr=s(y$);SOe=r(NPr,"LEDConfig"),NPr.forEach(t),ROe=r(HMe," (LED model)"),HMe.forEach(t),BOe=i(y),Yf=n(y,"LI",{});var UMe=s(Yf);KZ=n(UMe,"STRONG",{});var jPr=s(KZ);POe=r(jPr,"longformer"),jPr.forEach(t),IOe=r(UMe," \u2014 "),L$=n(UMe,"A",{href:!0});var DPr=s(L$);qOe=r(DPr,"LongformerConfig"),DPr.forEach(t),NOe=r(UMe," (Longformer model)"),UMe.forEach(t),jOe=i(y),Kf=n(y,"LI",{});var JMe=s(Kf);ZZ=n(JMe,"STRONG",{});var GPr=s(ZZ);DOe=r(GPr,"luke"),GPr.forEach(t),GOe=r(JMe," \u2014 "),x$=n(JMe,"A",{href:!0});var OPr=s(x$);OOe=r(OPr,"LukeConfig"),OPr.forEach(t),VOe=r(JMe," (LUKE model)"),JMe.forEach(t),XOe=i(y),Zf=n(y,"LI",{});var YMe=s(Zf);eee=n(YMe,"STRONG",{});var VPr=s(eee);zOe=r(VPr,"lxmert"),VPr.forEach(t),QOe=r(YMe," \u2014 "),$$=n(YMe,"A",{href:!0});var XPr=s($$);WOe=r(XPr,"LxmertConfig"),XPr.forEach(t),HOe=r(YMe," (LXMERT model)"),YMe.forEach(t),UOe=i(y),em=n(y,"LI",{});var KMe=s(em);oee=n(KMe,"STRONG",{});var zPr=s(oee);JOe=r(zPr,"m2m_100"),zPr.forEach(t),YOe=r(KMe," \u2014 "),k$=n(KMe,"A",{href:!0});var QPr=s(k$);KOe=r(QPr,"M2M100Config"),QPr.forEach(t),ZOe=r(KMe," (M2M100 model)"),KMe.forEach(t),eVe=i(y),om=n(y,"LI",{});var ZMe=s(om);ree=n(ZMe,"STRONG",{});var WPr=s(ree);oVe=r(WPr,"marian"),WPr.forEach(t),rVe=r(ZMe," \u2014 "),S$=n(ZMe,"A",{href:!0});var HPr=s(S$);tVe=r(HPr,"MarianConfig"),HPr.forEach(t),aVe=r(ZMe," (Marian model)"),ZMe.forEach(t),nVe=i(y),rm=n(y,"LI",{});var e4e=s(rm);tee=n(e4e,"STRONG",{});var UPr=s(tee);sVe=r(UPr,"maskformer"),UPr.forEach(t),lVe=r(e4e," \u2014 "),R$=n(e4e,"A",{href:!0});var JPr=s(R$);iVe=r(JPr,"MaskFormerConfig"),JPr.forEach(t),dVe=r(e4e," (MaskFormer model)"),e4e.forEach(t),cVe=i(y),tm=n(y,"LI",{});var o4e=s(tm);aee=n(o4e,"STRONG",{});var YPr=s(aee);fVe=r(YPr,"mbart"),YPr.forEach(t),mVe=r(o4e," \u2014 "),B$=n(o4e,"A",{href:!0});var KPr=s(B$);gVe=r(KPr,"MBartConfig"),KPr.forEach(t),hVe=r(o4e," (mBART model)"),o4e.forEach(t),pVe=i(y),am=n(y,"LI",{});var r4e=s(am);nee=n(r4e,"STRONG",{});var ZPr=s(nee);uVe=r(ZPr,"megatron-bert"),ZPr.forEach(t),_Ve=r(r4e," \u2014 "),P$=n(r4e,"A",{href:!0});var eIr=s(P$);bVe=r(eIr,"MegatronBertConfig"),eIr.forEach(t),vVe=r(r4e," (MegatronBert model)"),r4e.forEach(t),FVe=i(y),nm=n(y,"LI",{});var t4e=s(nm);see=n(t4e,"STRONG",{});var oIr=s(see);TVe=r(oIr,"mobilebert"),oIr.forEach(t),MVe=r(t4e," \u2014 "),I$=n(t4e,"A",{href:!0});var rIr=s(I$);EVe=r(rIr,"MobileBertConfig"),rIr.forEach(t),CVe=r(t4e," (MobileBERT model)"),t4e.forEach(t),wVe=i(y),sm=n(y,"LI",{});var a4e=s(sm);lee=n(a4e,"STRONG",{});var tIr=s(lee);AVe=r(tIr,"mpnet"),tIr.forEach(t),yVe=r(a4e," \u2014 "),q$=n(a4e,"A",{href:!0});var aIr=s(q$);LVe=r(aIr,"MPNetConfig"),aIr.forEach(t),xVe=r(a4e," (MPNet model)"),a4e.forEach(t),$Ve=i(y),lm=n(y,"LI",{});var n4e=s(lm);iee=n(n4e,"STRONG",{});var nIr=s(iee);kVe=r(nIr,"mt5"),nIr.forEach(t),SVe=r(n4e," \u2014 "),N$=n(n4e,"A",{href:!0});var sIr=s(N$);RVe=r(sIr,"MT5Config"),sIr.forEach(t),BVe=r(n4e," (mT5 model)"),n4e.forEach(t),PVe=i(y),im=n(y,"LI",{});var s4e=s(im);dee=n(s4e,"STRONG",{});var lIr=s(dee);IVe=r(lIr,"nystromformer"),lIr.forEach(t),qVe=r(s4e," \u2014 "),j$=n(s4e,"A",{href:!0});var iIr=s(j$);NVe=r(iIr,"NystromformerConfig"),iIr.forEach(t),jVe=r(s4e," (Nystromformer model)"),s4e.forEach(t),DVe=i(y),dm=n(y,"LI",{});var l4e=s(dm);cee=n(l4e,"STRONG",{});var dIr=s(cee);GVe=r(dIr,"openai-gpt"),dIr.forEach(t),OVe=r(l4e," \u2014 "),D$=n(l4e,"A",{href:!0});var cIr=s(D$);VVe=r(cIr,"OpenAIGPTConfig"),cIr.forEach(t),XVe=r(l4e," (OpenAI GPT model)"),l4e.forEach(t),zVe=i(y),cm=n(y,"LI",{});var i4e=s(cm);fee=n(i4e,"STRONG",{});var fIr=s(fee);QVe=r(fIr,"pegasus"),fIr.forEach(t),WVe=r(i4e," \u2014 "),G$=n(i4e,"A",{href:!0});var mIr=s(G$);HVe=r(mIr,"PegasusConfig"),mIr.forEach(t),UVe=r(i4e," (Pegasus model)"),i4e.forEach(t),JVe=i(y),fm=n(y,"LI",{});var d4e=s(fm);mee=n(d4e,"STRONG",{});var gIr=s(mee);YVe=r(gIr,"perceiver"),gIr.forEach(t),KVe=r(d4e," \u2014 "),O$=n(d4e,"A",{href:!0});var hIr=s(O$);ZVe=r(hIr,"PerceiverConfig"),hIr.forEach(t),eXe=r(d4e," (Perceiver model)"),d4e.forEach(t),oXe=i(y),mm=n(y,"LI",{});var c4e=s(mm);gee=n(c4e,"STRONG",{});var pIr=s(gee);rXe=r(pIr,"plbart"),pIr.forEach(t),tXe=r(c4e," \u2014 "),V$=n(c4e,"A",{href:!0});var uIr=s(V$);aXe=r(uIr,"PLBartConfig"),uIr.forEach(t),nXe=r(c4e," (PLBart model)"),c4e.forEach(t),sXe=i(y),gm=n(y,"LI",{});var f4e=s(gm);hee=n(f4e,"STRONG",{});var _Ir=s(hee);lXe=r(_Ir,"poolformer"),_Ir.forEach(t),iXe=r(f4e," \u2014 "),X$=n(f4e,"A",{href:!0});var bIr=s(X$);dXe=r(bIr,"PoolFormerConfig"),bIr.forEach(t),cXe=r(f4e," (PoolFormer model)"),f4e.forEach(t),fXe=i(y),hm=n(y,"LI",{});var m4e=s(hm);pee=n(m4e,"STRONG",{});var vIr=s(pee);mXe=r(vIr,"prophetnet"),vIr.forEach(t),gXe=r(m4e," \u2014 "),z$=n(m4e,"A",{href:!0});var FIr=s(z$);hXe=r(FIr,"ProphetNetConfig"),FIr.forEach(t),pXe=r(m4e," (ProphetNet model)"),m4e.forEach(t),uXe=i(y),pm=n(y,"LI",{});var g4e=s(pm);uee=n(g4e,"STRONG",{});var TIr=s(uee);_Xe=r(TIr,"qdqbert"),TIr.forEach(t),bXe=r(g4e," \u2014 "),Q$=n(g4e,"A",{href:!0});var MIr=s(Q$);vXe=r(MIr,"QDQBertConfig"),MIr.forEach(t),FXe=r(g4e," (QDQBert model)"),g4e.forEach(t),TXe=i(y),um=n(y,"LI",{});var h4e=s(um);_ee=n(h4e,"STRONG",{});var EIr=s(_ee);MXe=r(EIr,"rag"),EIr.forEach(t),EXe=r(h4e," \u2014 "),W$=n(h4e,"A",{href:!0});var CIr=s(W$);CXe=r(CIr,"RagConfig"),CIr.forEach(t),wXe=r(h4e," (RAG model)"),h4e.forEach(t),AXe=i(y),_m=n(y,"LI",{});var p4e=s(_m);bee=n(p4e,"STRONG",{});var wIr=s(bee);yXe=r(wIr,"realm"),wIr.forEach(t),LXe=r(p4e," \u2014 "),H$=n(p4e,"A",{href:!0});var AIr=s(H$);xXe=r(AIr,"RealmConfig"),AIr.forEach(t),$Xe=r(p4e," (Realm model)"),p4e.forEach(t),kXe=i(y),bm=n(y,"LI",{});var u4e=s(bm);vee=n(u4e,"STRONG",{});var yIr=s(vee);SXe=r(yIr,"reformer"),yIr.forEach(t),RXe=r(u4e," \u2014 "),U$=n(u4e,"A",{href:!0});var LIr=s(U$);BXe=r(LIr,"ReformerConfig"),LIr.forEach(t),PXe=r(u4e," (Reformer model)"),u4e.forEach(t),IXe=i(y),vm=n(y,"LI",{});var _4e=s(vm);Fee=n(_4e,"STRONG",{});var xIr=s(Fee);qXe=r(xIr,"regnet"),xIr.forEach(t),NXe=r(_4e," \u2014 "),J$=n(_4e,"A",{href:!0});var $Ir=s(J$);jXe=r($Ir,"RegNetConfig"),$Ir.forEach(t),DXe=r(_4e," (RegNet model)"),_4e.forEach(t),GXe=i(y),Fm=n(y,"LI",{});var b4e=s(Fm);Tee=n(b4e,"STRONG",{});var kIr=s(Tee);OXe=r(kIr,"rembert"),kIr.forEach(t),VXe=r(b4e," \u2014 "),Y$=n(b4e,"A",{href:!0});var SIr=s(Y$);XXe=r(SIr,"RemBertConfig"),SIr.forEach(t),zXe=r(b4e," (RemBERT model)"),b4e.forEach(t),QXe=i(y),Tm=n(y,"LI",{});var v4e=s(Tm);Mee=n(v4e,"STRONG",{});var RIr=s(Mee);WXe=r(RIr,"resnet"),RIr.forEach(t),HXe=r(v4e," \u2014 "),K$=n(v4e,"A",{href:!0});var BIr=s(K$);UXe=r(BIr,"ResNetConfig"),BIr.forEach(t),JXe=r(v4e," (ResNet model)"),v4e.forEach(t),YXe=i(y),Mm=n(y,"LI",{});var F4e=s(Mm);Eee=n(F4e,"STRONG",{});var PIr=s(Eee);KXe=r(PIr,"retribert"),PIr.forEach(t),ZXe=r(F4e," \u2014 "),Z$=n(F4e,"A",{href:!0});var IIr=s(Z$);eze=r(IIr,"RetriBertConfig"),IIr.forEach(t),oze=r(F4e," (RetriBERT model)"),F4e.forEach(t),rze=i(y),Em=n(y,"LI",{});var T4e=s(Em);Cee=n(T4e,"STRONG",{});var qIr=s(Cee);tze=r(qIr,"roberta"),qIr.forEach(t),aze=r(T4e," \u2014 "),ek=n(T4e,"A",{href:!0});var NIr=s(ek);nze=r(NIr,"RobertaConfig"),NIr.forEach(t),sze=r(T4e," (RoBERTa model)"),T4e.forEach(t),lze=i(y),Cm=n(y,"LI",{});var M4e=s(Cm);wee=n(M4e,"STRONG",{});var jIr=s(wee);ize=r(jIr,"roformer"),jIr.forEach(t),dze=r(M4e," \u2014 "),ok=n(M4e,"A",{href:!0});var DIr=s(ok);cze=r(DIr,"RoFormerConfig"),DIr.forEach(t),fze=r(M4e," (RoFormer model)"),M4e.forEach(t),mze=i(y),wm=n(y,"LI",{});var E4e=s(wm);Aee=n(E4e,"STRONG",{});var GIr=s(Aee);gze=r(GIr,"segformer"),GIr.forEach(t),hze=r(E4e," \u2014 "),rk=n(E4e,"A",{href:!0});var OIr=s(rk);pze=r(OIr,"SegformerConfig"),OIr.forEach(t),uze=r(E4e," (SegFormer model)"),E4e.forEach(t),_ze=i(y),Am=n(y,"LI",{});var C4e=s(Am);yee=n(C4e,"STRONG",{});var VIr=s(yee);bze=r(VIr,"sew"),VIr.forEach(t),vze=r(C4e," \u2014 "),tk=n(C4e,"A",{href:!0});var XIr=s(tk);Fze=r(XIr,"SEWConfig"),XIr.forEach(t),Tze=r(C4e," (SEW model)"),C4e.forEach(t),Mze=i(y),ym=n(y,"LI",{});var w4e=s(ym);Lee=n(w4e,"STRONG",{});var zIr=s(Lee);Eze=r(zIr,"sew-d"),zIr.forEach(t),Cze=r(w4e," \u2014 "),ak=n(w4e,"A",{href:!0});var QIr=s(ak);wze=r(QIr,"SEWDConfig"),QIr.forEach(t),Aze=r(w4e," (SEW-D model)"),w4e.forEach(t),yze=i(y),Lm=n(y,"LI",{});var A4e=s(Lm);xee=n(A4e,"STRONG",{});var WIr=s(xee);Lze=r(WIr,"speech-encoder-decoder"),WIr.forEach(t),xze=r(A4e," \u2014 "),nk=n(A4e,"A",{href:!0});var HIr=s(nk);$ze=r(HIr,"SpeechEncoderDecoderConfig"),HIr.forEach(t),kze=r(A4e," (Speech Encoder decoder model)"),A4e.forEach(t),Sze=i(y),xm=n(y,"LI",{});var y4e=s(xm);$ee=n(y4e,"STRONG",{});var UIr=s($ee);Rze=r(UIr,"speech_to_text"),UIr.forEach(t),Bze=r(y4e," \u2014 "),sk=n(y4e,"A",{href:!0});var JIr=s(sk);Pze=r(JIr,"Speech2TextConfig"),JIr.forEach(t),Ize=r(y4e," (Speech2Text model)"),y4e.forEach(t),qze=i(y),$m=n(y,"LI",{});var L4e=s($m);kee=n(L4e,"STRONG",{});var YIr=s(kee);Nze=r(YIr,"speech_to_text_2"),YIr.forEach(t),jze=r(L4e," \u2014 "),lk=n(L4e,"A",{href:!0});var KIr=s(lk);Dze=r(KIr,"Speech2Text2Config"),KIr.forEach(t),Gze=r(L4e," (Speech2Text2 model)"),L4e.forEach(t),Oze=i(y),km=n(y,"LI",{});var x4e=s(km);See=n(x4e,"STRONG",{});var ZIr=s(See);Vze=r(ZIr,"splinter"),ZIr.forEach(t),Xze=r(x4e," \u2014 "),ik=n(x4e,"A",{href:!0});var eqr=s(ik);zze=r(eqr,"SplinterConfig"),eqr.forEach(t),Qze=r(x4e," (Splinter model)"),x4e.forEach(t),Wze=i(y),Sm=n(y,"LI",{});var $4e=s(Sm);Ree=n($4e,"STRONG",{});var oqr=s(Ree);Hze=r(oqr,"squeezebert"),oqr.forEach(t),Uze=r($4e," \u2014 "),dk=n($4e,"A",{href:!0});var rqr=s(dk);Jze=r(rqr,"SqueezeBertConfig"),rqr.forEach(t),Yze=r($4e," (SqueezeBERT model)"),$4e.forEach(t),Kze=i(y),Rm=n(y,"LI",{});var k4e=s(Rm);Bee=n(k4e,"STRONG",{});var tqr=s(Bee);Zze=r(tqr,"swin"),tqr.forEach(t),eQe=r(k4e," \u2014 "),ck=n(k4e,"A",{href:!0});var aqr=s(ck);oQe=r(aqr,"SwinConfig"),aqr.forEach(t),rQe=r(k4e," (Swin model)"),k4e.forEach(t),tQe=i(y),Bm=n(y,"LI",{});var S4e=s(Bm);Pee=n(S4e,"STRONG",{});var nqr=s(Pee);aQe=r(nqr,"t5"),nqr.forEach(t),nQe=r(S4e," \u2014 "),fk=n(S4e,"A",{href:!0});var sqr=s(fk);sQe=r(sqr,"T5Config"),sqr.forEach(t),lQe=r(S4e," (T5 model)"),S4e.forEach(t),iQe=i(y),Pm=n(y,"LI",{});var R4e=s(Pm);Iee=n(R4e,"STRONG",{});var lqr=s(Iee);dQe=r(lqr,"tapas"),lqr.forEach(t),cQe=r(R4e," \u2014 "),mk=n(R4e,"A",{href:!0});var iqr=s(mk);fQe=r(iqr,"TapasConfig"),iqr.forEach(t),mQe=r(R4e," (TAPAS model)"),R4e.forEach(t),gQe=i(y),Im=n(y,"LI",{});var B4e=s(Im);qee=n(B4e,"STRONG",{});var dqr=s(qee);hQe=r(dqr,"tapex"),dqr.forEach(t),pQe=r(B4e," \u2014 "),gk=n(B4e,"A",{href:!0});var cqr=s(gk);uQe=r(cqr,"BartConfig"),cqr.forEach(t),_Qe=r(B4e," (TAPEX model)"),B4e.forEach(t),bQe=i(y),qm=n(y,"LI",{});var P4e=s(qm);Nee=n(P4e,"STRONG",{});var fqr=s(Nee);vQe=r(fqr,"transfo-xl"),fqr.forEach(t),FQe=r(P4e," \u2014 "),hk=n(P4e,"A",{href:!0});var mqr=s(hk);TQe=r(mqr,"TransfoXLConfig"),mqr.forEach(t),MQe=r(P4e," (Transformer-XL model)"),P4e.forEach(t),EQe=i(y),Nm=n(y,"LI",{});var I4e=s(Nm);jee=n(I4e,"STRONG",{});var gqr=s(jee);CQe=r(gqr,"trocr"),gqr.forEach(t),wQe=r(I4e," \u2014 "),pk=n(I4e,"A",{href:!0});var hqr=s(pk);AQe=r(hqr,"TrOCRConfig"),hqr.forEach(t),yQe=r(I4e," (TrOCR model)"),I4e.forEach(t),LQe=i(y),jm=n(y,"LI",{});var q4e=s(jm);Dee=n(q4e,"STRONG",{});var pqr=s(Dee);xQe=r(pqr,"unispeech"),pqr.forEach(t),$Qe=r(q4e," \u2014 "),uk=n(q4e,"A",{href:!0});var uqr=s(uk);kQe=r(uqr,"UniSpeechConfig"),uqr.forEach(t),SQe=r(q4e," (UniSpeech model)"),q4e.forEach(t),RQe=i(y),Dm=n(y,"LI",{});var N4e=s(Dm);Gee=n(N4e,"STRONG",{});var _qr=s(Gee);BQe=r(_qr,"unispeech-sat"),_qr.forEach(t),PQe=r(N4e," \u2014 "),_k=n(N4e,"A",{href:!0});var bqr=s(_k);IQe=r(bqr,"UniSpeechSatConfig"),bqr.forEach(t),qQe=r(N4e," (UniSpeechSat model)"),N4e.forEach(t),NQe=i(y),Gm=n(y,"LI",{});var j4e=s(Gm);Oee=n(j4e,"STRONG",{});var vqr=s(Oee);jQe=r(vqr,"van"),vqr.forEach(t),DQe=r(j4e," \u2014 "),bk=n(j4e,"A",{href:!0});var Fqr=s(bk);GQe=r(Fqr,"VanConfig"),Fqr.forEach(t),OQe=r(j4e," (VAN model)"),j4e.forEach(t),VQe=i(y),Om=n(y,"LI",{});var D4e=s(Om);Vee=n(D4e,"STRONG",{});var Tqr=s(Vee);XQe=r(Tqr,"vilt"),Tqr.forEach(t),zQe=r(D4e," \u2014 "),vk=n(D4e,"A",{href:!0});var Mqr=s(vk);QQe=r(Mqr,"ViltConfig"),Mqr.forEach(t),WQe=r(D4e," (ViLT model)"),D4e.forEach(t),HQe=i(y),Vm=n(y,"LI",{});var G4e=s(Vm);Xee=n(G4e,"STRONG",{});var Eqr=s(Xee);UQe=r(Eqr,"vision-encoder-decoder"),Eqr.forEach(t),JQe=r(G4e," \u2014 "),Fk=n(G4e,"A",{href:!0});var Cqr=s(Fk);YQe=r(Cqr,"VisionEncoderDecoderConfig"),Cqr.forEach(t),KQe=r(G4e," (Vision Encoder decoder model)"),G4e.forEach(t),ZQe=i(y),Xm=n(y,"LI",{});var O4e=s(Xm);zee=n(O4e,"STRONG",{});var wqr=s(zee);eWe=r(wqr,"vision-text-dual-encoder"),wqr.forEach(t),oWe=r(O4e," \u2014 "),Tk=n(O4e,"A",{href:!0});var Aqr=s(Tk);rWe=r(Aqr,"VisionTextDualEncoderConfig"),Aqr.forEach(t),tWe=r(O4e," (VisionTextDualEncoder model)"),O4e.forEach(t),aWe=i(y),zm=n(y,"LI",{});var V4e=s(zm);Qee=n(V4e,"STRONG",{});var yqr=s(Qee);nWe=r(yqr,"visual_bert"),yqr.forEach(t),sWe=r(V4e," \u2014 "),Mk=n(V4e,"A",{href:!0});var Lqr=s(Mk);lWe=r(Lqr,"VisualBertConfig"),Lqr.forEach(t),iWe=r(V4e," (VisualBert model)"),V4e.forEach(t),dWe=i(y),Qm=n(y,"LI",{});var X4e=s(Qm);Wee=n(X4e,"STRONG",{});var xqr=s(Wee);cWe=r(xqr,"vit"),xqr.forEach(t),fWe=r(X4e," \u2014 "),Ek=n(X4e,"A",{href:!0});var $qr=s(Ek);mWe=r($qr,"ViTConfig"),$qr.forEach(t),gWe=r(X4e," (ViT model)"),X4e.forEach(t),hWe=i(y),Wm=n(y,"LI",{});var z4e=s(Wm);Hee=n(z4e,"STRONG",{});var kqr=s(Hee);pWe=r(kqr,"vit_mae"),kqr.forEach(t),uWe=r(z4e," \u2014 "),Ck=n(z4e,"A",{href:!0});var Sqr=s(Ck);_We=r(Sqr,"ViTMAEConfig"),Sqr.forEach(t),bWe=r(z4e," (ViTMAE model)"),z4e.forEach(t),vWe=i(y),Hm=n(y,"LI",{});var Q4e=s(Hm);Uee=n(Q4e,"STRONG",{});var Rqr=s(Uee);FWe=r(Rqr,"wav2vec2"),Rqr.forEach(t),TWe=r(Q4e," \u2014 "),wk=n(Q4e,"A",{href:!0});var Bqr=s(wk);MWe=r(Bqr,"Wav2Vec2Config"),Bqr.forEach(t),EWe=r(Q4e," (Wav2Vec2 model)"),Q4e.forEach(t),CWe=i(y),Um=n(y,"LI",{});var W4e=s(Um);Jee=n(W4e,"STRONG",{});var Pqr=s(Jee);wWe=r(Pqr,"wavlm"),Pqr.forEach(t),AWe=r(W4e," \u2014 "),Ak=n(W4e,"A",{href:!0});var Iqr=s(Ak);yWe=r(Iqr,"WavLMConfig"),Iqr.forEach(t),LWe=r(W4e," (WavLM model)"),W4e.forEach(t),xWe=i(y),Jm=n(y,"LI",{});var H4e=s(Jm);Yee=n(H4e,"STRONG",{});var qqr=s(Yee);$We=r(qqr,"xglm"),qqr.forEach(t),kWe=r(H4e," \u2014 "),yk=n(H4e,"A",{href:!0});var Nqr=s(yk);SWe=r(Nqr,"XGLMConfig"),Nqr.forEach(t),RWe=r(H4e," (XGLM model)"),H4e.forEach(t),BWe=i(y),Ym=n(y,"LI",{});var U4e=s(Ym);Kee=n(U4e,"STRONG",{});var jqr=s(Kee);PWe=r(jqr,"xlm"),jqr.forEach(t),IWe=r(U4e," \u2014 "),Lk=n(U4e,"A",{href:!0});var Dqr=s(Lk);qWe=r(Dqr,"XLMConfig"),Dqr.forEach(t),NWe=r(U4e," (XLM model)"),U4e.forEach(t),jWe=i(y),Km=n(y,"LI",{});var J4e=s(Km);Zee=n(J4e,"STRONG",{});var Gqr=s(Zee);DWe=r(Gqr,"xlm-prophetnet"),Gqr.forEach(t),GWe=r(J4e," \u2014 "),xk=n(J4e,"A",{href:!0});var Oqr=s(xk);OWe=r(Oqr,"XLMProphetNetConfig"),Oqr.forEach(t),VWe=r(J4e," (XLMProphetNet model)"),J4e.forEach(t),XWe=i(y),Zm=n(y,"LI",{});var Y4e=s(Zm);eoe=n(Y4e,"STRONG",{});var Vqr=s(eoe);zWe=r(Vqr,"xlm-roberta"),Vqr.forEach(t),QWe=r(Y4e," \u2014 "),$k=n(Y4e,"A",{href:!0});var Xqr=s($k);WWe=r(Xqr,"XLMRobertaConfig"),Xqr.forEach(t),HWe=r(Y4e," (XLM-RoBERTa model)"),Y4e.forEach(t),UWe=i(y),eg=n(y,"LI",{});var K4e=s(eg);ooe=n(K4e,"STRONG",{});var zqr=s(ooe);JWe=r(zqr,"xlm-roberta-xl"),zqr.forEach(t),YWe=r(K4e," \u2014 "),kk=n(K4e,"A",{href:!0});var Qqr=s(kk);KWe=r(Qqr,"XLMRobertaXLConfig"),Qqr.forEach(t),ZWe=r(K4e," (XLM-RoBERTa-XL model)"),K4e.forEach(t),eHe=i(y),og=n(y,"LI",{});var Z4e=s(og);roe=n(Z4e,"STRONG",{});var Wqr=s(roe);oHe=r(Wqr,"xlnet"),Wqr.forEach(t),rHe=r(Z4e," \u2014 "),Sk=n(Z4e,"A",{href:!0});var Hqr=s(Sk);tHe=r(Hqr,"XLNetConfig"),Hqr.forEach(t),aHe=r(Z4e," (XLNet model)"),Z4e.forEach(t),nHe=i(y),rg=n(y,"LI",{});var eEe=s(rg);toe=n(eEe,"STRONG",{});var Uqr=s(toe);sHe=r(Uqr,"yolos"),Uqr.forEach(t),lHe=r(eEe," \u2014 "),Rk=n(eEe,"A",{href:!0});var Jqr=s(Rk);iHe=r(Jqr,"YolosConfig"),Jqr.forEach(t),dHe=r(eEe," (YOLOS model)"),eEe.forEach(t),cHe=i(y),tg=n(y,"LI",{});var oEe=s(tg);aoe=n(oEe,"STRONG",{});var Yqr=s(aoe);fHe=r(Yqr,"yoso"),Yqr.forEach(t),mHe=r(oEe," \u2014 "),Bk=n(oEe,"A",{href:!0});var Kqr=s(Bk);gHe=r(Kqr,"YosoConfig"),Kqr.forEach(t),hHe=r(oEe," (YOSO model)"),oEe.forEach(t),y.forEach(t),pHe=i(Yr),T(ag.$$.fragment,Yr),Yr.forEach(t),uHe=i(Jr),ng=n(Jr,"DIV",{class:!0});var lIe=s(ng);T(LA.$$.fragment,lIe),_He=i(lIe),noe=n(lIe,"P",{});var Zqr=s(noe);bHe=r(Zqr,"Register a new configuration for this class."),Zqr.forEach(t),lIe.forEach(t),Jr.forEach(t),mBe=i(f),fi=n(f,"H2",{class:!0});var iIe=s(fi);sg=n(iIe,"A",{id:!0,class:!0,href:!0});var eNr=s(sg);soe=n(eNr,"SPAN",{});var oNr=s(soe);T(xA.$$.fragment,oNr),oNr.forEach(t),eNr.forEach(t),vHe=i(iIe),loe=n(iIe,"SPAN",{});var rNr=s(loe);FHe=r(rNr,"AutoTokenizer"),rNr.forEach(t),iIe.forEach(t),gBe=i(f),wo=n(f,"DIV",{class:!0});var ks=s(wo);T($A.$$.fragment,ks),THe=i(ks),kA=n(ks,"P",{});var dIe=s(kA);MHe=r(dIe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Pk=n(dIe,"A",{href:!0});var tNr=s(Pk);EHe=r(tNr,"AutoTokenizer.from_pretrained()"),tNr.forEach(t),CHe=r(dIe," class method."),dIe.forEach(t),wHe=i(ks),SA=n(ks,"P",{});var cIe=s(SA);AHe=r(cIe,"This class cannot be instantiated directly using "),ioe=n(cIe,"CODE",{});var aNr=s(ioe);yHe=r(aNr,"__init__()"),aNr.forEach(t),LHe=r(cIe," (throws an error)."),cIe.forEach(t),xHe=i(ks),Er=n(ks,"DIV",{class:!0});var Ss=s(Er);T(RA.$$.fragment,Ss),$He=i(Ss),doe=n(Ss,"P",{});var nNr=s(doe);kHe=r(nNr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),nNr.forEach(t),SHe=i(Ss),Ta=n(Ss,"P",{});var CC=s(Ta);RHe=r(CC,"The tokenizer class to instantiate is selected based on the "),coe=n(CC,"CODE",{});var sNr=s(coe);BHe=r(sNr,"model_type"),sNr.forEach(t),PHe=r(CC,` property of the config object (either
passed as an argument or loaded from `),foe=n(CC,"CODE",{});var lNr=s(foe);IHe=r(lNr,"pretrained_model_name_or_path"),lNr.forEach(t),qHe=r(CC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),moe=n(CC,"CODE",{});var iNr=s(moe);NHe=r(iNr,"pretrained_model_name_or_path"),iNr.forEach(t),jHe=r(CC,":"),CC.forEach(t),DHe=i(Ss),k=n(Ss,"UL",{});var S=s(k);yn=n(S,"LI",{});var xx=s(yn);goe=n(xx,"STRONG",{});var dNr=s(goe);GHe=r(dNr,"albert"),dNr.forEach(t),OHe=r(xx," \u2014 "),Ik=n(xx,"A",{href:!0});var cNr=s(Ik);VHe=r(cNr,"AlbertTokenizer"),cNr.forEach(t),XHe=r(xx," or "),qk=n(xx,"A",{href:!0});var fNr=s(qk);zHe=r(fNr,"AlbertTokenizerFast"),fNr.forEach(t),QHe=r(xx," (ALBERT model)"),xx.forEach(t),WHe=i(S),Ln=n(S,"LI",{});var $x=s(Ln);hoe=n($x,"STRONG",{});var mNr=s(hoe);HHe=r(mNr,"bart"),mNr.forEach(t),UHe=r($x," \u2014 "),Nk=n($x,"A",{href:!0});var gNr=s(Nk);JHe=r(gNr,"BartTokenizer"),gNr.forEach(t),YHe=r($x," or "),jk=n($x,"A",{href:!0});var hNr=s(jk);KHe=r(hNr,"BartTokenizerFast"),hNr.forEach(t),ZHe=r($x," (BART model)"),$x.forEach(t),eUe=i(S),xn=n(S,"LI",{});var kx=s(xn);poe=n(kx,"STRONG",{});var pNr=s(poe);oUe=r(pNr,"barthez"),pNr.forEach(t),rUe=r(kx," \u2014 "),Dk=n(kx,"A",{href:!0});var uNr=s(Dk);tUe=r(uNr,"BarthezTokenizer"),uNr.forEach(t),aUe=r(kx," or "),Gk=n(kx,"A",{href:!0});var _Nr=s(Gk);nUe=r(_Nr,"BarthezTokenizerFast"),_Nr.forEach(t),sUe=r(kx," (BARThez model)"),kx.forEach(t),lUe=i(S),lg=n(S,"LI",{});var rEe=s(lg);uoe=n(rEe,"STRONG",{});var bNr=s(uoe);iUe=r(bNr,"bartpho"),bNr.forEach(t),dUe=r(rEe," \u2014 "),Ok=n(rEe,"A",{href:!0});var vNr=s(Ok);cUe=r(vNr,"BartphoTokenizer"),vNr.forEach(t),fUe=r(rEe," (BARTpho model)"),rEe.forEach(t),mUe=i(S),$n=n(S,"LI",{});var Sx=s($n);_oe=n(Sx,"STRONG",{});var FNr=s(_oe);gUe=r(FNr,"bert"),FNr.forEach(t),hUe=r(Sx," \u2014 "),Vk=n(Sx,"A",{href:!0});var TNr=s(Vk);pUe=r(TNr,"BertTokenizer"),TNr.forEach(t),uUe=r(Sx," or "),Xk=n(Sx,"A",{href:!0});var MNr=s(Xk);_Ue=r(MNr,"BertTokenizerFast"),MNr.forEach(t),bUe=r(Sx," (BERT model)"),Sx.forEach(t),vUe=i(S),ig=n(S,"LI",{});var tEe=s(ig);boe=n(tEe,"STRONG",{});var ENr=s(boe);FUe=r(ENr,"bert-generation"),ENr.forEach(t),TUe=r(tEe," \u2014 "),zk=n(tEe,"A",{href:!0});var CNr=s(zk);MUe=r(CNr,"BertGenerationTokenizer"),CNr.forEach(t),EUe=r(tEe," (Bert Generation model)"),tEe.forEach(t),CUe=i(S),dg=n(S,"LI",{});var aEe=s(dg);voe=n(aEe,"STRONG",{});var wNr=s(voe);wUe=r(wNr,"bert-japanese"),wNr.forEach(t),AUe=r(aEe," \u2014 "),Qk=n(aEe,"A",{href:!0});var ANr=s(Qk);yUe=r(ANr,"BertJapaneseTokenizer"),ANr.forEach(t),LUe=r(aEe," (BertJapanese model)"),aEe.forEach(t),xUe=i(S),cg=n(S,"LI",{});var nEe=s(cg);Foe=n(nEe,"STRONG",{});var yNr=s(Foe);$Ue=r(yNr,"bertweet"),yNr.forEach(t),kUe=r(nEe," \u2014 "),Wk=n(nEe,"A",{href:!0});var LNr=s(Wk);SUe=r(LNr,"BertweetTokenizer"),LNr.forEach(t),RUe=r(nEe," (Bertweet model)"),nEe.forEach(t),BUe=i(S),kn=n(S,"LI",{});var Rx=s(kn);Toe=n(Rx,"STRONG",{});var xNr=s(Toe);PUe=r(xNr,"big_bird"),xNr.forEach(t),IUe=r(Rx," \u2014 "),Hk=n(Rx,"A",{href:!0});var $Nr=s(Hk);qUe=r($Nr,"BigBirdTokenizer"),$Nr.forEach(t),NUe=r(Rx," or "),Uk=n(Rx,"A",{href:!0});var kNr=s(Uk);jUe=r(kNr,"BigBirdTokenizerFast"),kNr.forEach(t),DUe=r(Rx," (BigBird model)"),Rx.forEach(t),GUe=i(S),Sn=n(S,"LI",{});var Bx=s(Sn);Moe=n(Bx,"STRONG",{});var SNr=s(Moe);OUe=r(SNr,"bigbird_pegasus"),SNr.forEach(t),VUe=r(Bx," \u2014 "),Jk=n(Bx,"A",{href:!0});var RNr=s(Jk);XUe=r(RNr,"PegasusTokenizer"),RNr.forEach(t),zUe=r(Bx," or "),Yk=n(Bx,"A",{href:!0});var BNr=s(Yk);QUe=r(BNr,"PegasusTokenizerFast"),BNr.forEach(t),WUe=r(Bx," (BigBirdPegasus model)"),Bx.forEach(t),HUe=i(S),Rn=n(S,"LI",{});var Px=s(Rn);Eoe=n(Px,"STRONG",{});var PNr=s(Eoe);UUe=r(PNr,"blenderbot"),PNr.forEach(t),JUe=r(Px," \u2014 "),Kk=n(Px,"A",{href:!0});var INr=s(Kk);YUe=r(INr,"BlenderbotTokenizer"),INr.forEach(t),KUe=r(Px," or "),Zk=n(Px,"A",{href:!0});var qNr=s(Zk);ZUe=r(qNr,"BlenderbotTokenizerFast"),qNr.forEach(t),eJe=r(Px," (Blenderbot model)"),Px.forEach(t),oJe=i(S),fg=n(S,"LI",{});var sEe=s(fg);Coe=n(sEe,"STRONG",{});var NNr=s(Coe);rJe=r(NNr,"blenderbot-small"),NNr.forEach(t),tJe=r(sEe," \u2014 "),eS=n(sEe,"A",{href:!0});var jNr=s(eS);aJe=r(jNr,"BlenderbotSmallTokenizer"),jNr.forEach(t),nJe=r(sEe," (BlenderbotSmall model)"),sEe.forEach(t),sJe=i(S),mg=n(S,"LI",{});var lEe=s(mg);woe=n(lEe,"STRONG",{});var DNr=s(woe);lJe=r(DNr,"byt5"),DNr.forEach(t),iJe=r(lEe," \u2014 "),oS=n(lEe,"A",{href:!0});var GNr=s(oS);dJe=r(GNr,"ByT5Tokenizer"),GNr.forEach(t),cJe=r(lEe," (ByT5 model)"),lEe.forEach(t),fJe=i(S),Bn=n(S,"LI",{});var Ix=s(Bn);Aoe=n(Ix,"STRONG",{});var ONr=s(Aoe);mJe=r(ONr,"camembert"),ONr.forEach(t),gJe=r(Ix," \u2014 "),rS=n(Ix,"A",{href:!0});var VNr=s(rS);hJe=r(VNr,"CamembertTokenizer"),VNr.forEach(t),pJe=r(Ix," or "),tS=n(Ix,"A",{href:!0});var XNr=s(tS);uJe=r(XNr,"CamembertTokenizerFast"),XNr.forEach(t),_Je=r(Ix," (CamemBERT model)"),Ix.forEach(t),bJe=i(S),gg=n(S,"LI",{});var iEe=s(gg);yoe=n(iEe,"STRONG",{});var zNr=s(yoe);vJe=r(zNr,"canine"),zNr.forEach(t),FJe=r(iEe," \u2014 "),aS=n(iEe,"A",{href:!0});var QNr=s(aS);TJe=r(QNr,"CanineTokenizer"),QNr.forEach(t),MJe=r(iEe," (Canine model)"),iEe.forEach(t),EJe=i(S),Pn=n(S,"LI",{});var qx=s(Pn);Loe=n(qx,"STRONG",{});var WNr=s(Loe);CJe=r(WNr,"clip"),WNr.forEach(t),wJe=r(qx," \u2014 "),nS=n(qx,"A",{href:!0});var HNr=s(nS);AJe=r(HNr,"CLIPTokenizer"),HNr.forEach(t),yJe=r(qx," or "),sS=n(qx,"A",{href:!0});var UNr=s(sS);LJe=r(UNr,"CLIPTokenizerFast"),UNr.forEach(t),xJe=r(qx," (CLIP model)"),qx.forEach(t),$Je=i(S),In=n(S,"LI",{});var Nx=s(In);xoe=n(Nx,"STRONG",{});var JNr=s(xoe);kJe=r(JNr,"convbert"),JNr.forEach(t),SJe=r(Nx," \u2014 "),lS=n(Nx,"A",{href:!0});var YNr=s(lS);RJe=r(YNr,"ConvBertTokenizer"),YNr.forEach(t),BJe=r(Nx," or "),iS=n(Nx,"A",{href:!0});var KNr=s(iS);PJe=r(KNr,"ConvBertTokenizerFast"),KNr.forEach(t),IJe=r(Nx," (ConvBERT model)"),Nx.forEach(t),qJe=i(S),qn=n(S,"LI",{});var jx=s(qn);$oe=n(jx,"STRONG",{});var ZNr=s($oe);NJe=r(ZNr,"cpm"),ZNr.forEach(t),jJe=r(jx," \u2014 "),dS=n(jx,"A",{href:!0});var ejr=s(dS);DJe=r(ejr,"CpmTokenizer"),ejr.forEach(t),GJe=r(jx," or "),cS=n(jx,"A",{href:!0});var ojr=s(cS);OJe=r(ojr,"CpmTokenizerFast"),ojr.forEach(t),VJe=r(jx," (CPM model)"),jx.forEach(t),XJe=i(S),hg=n(S,"LI",{});var dEe=s(hg);koe=n(dEe,"STRONG",{});var rjr=s(koe);zJe=r(rjr,"ctrl"),rjr.forEach(t),QJe=r(dEe," \u2014 "),fS=n(dEe,"A",{href:!0});var tjr=s(fS);WJe=r(tjr,"CTRLTokenizer"),tjr.forEach(t),HJe=r(dEe," (CTRL model)"),dEe.forEach(t),UJe=i(S),Nn=n(S,"LI",{});var Dx=s(Nn);Soe=n(Dx,"STRONG",{});var ajr=s(Soe);JJe=r(ajr,"data2vec-text"),ajr.forEach(t),YJe=r(Dx," \u2014 "),mS=n(Dx,"A",{href:!0});var njr=s(mS);KJe=r(njr,"RobertaTokenizer"),njr.forEach(t),ZJe=r(Dx," or "),gS=n(Dx,"A",{href:!0});var sjr=s(gS);eYe=r(sjr,"RobertaTokenizerFast"),sjr.forEach(t),oYe=r(Dx," (Data2VecText model)"),Dx.forEach(t),rYe=i(S),jn=n(S,"LI",{});var Gx=s(jn);Roe=n(Gx,"STRONG",{});var ljr=s(Roe);tYe=r(ljr,"deberta"),ljr.forEach(t),aYe=r(Gx," \u2014 "),hS=n(Gx,"A",{href:!0});var ijr=s(hS);nYe=r(ijr,"DebertaTokenizer"),ijr.forEach(t),sYe=r(Gx," or "),pS=n(Gx,"A",{href:!0});var djr=s(pS);lYe=r(djr,"DebertaTokenizerFast"),djr.forEach(t),iYe=r(Gx," (DeBERTa model)"),Gx.forEach(t),dYe=i(S),Dn=n(S,"LI",{});var Ox=s(Dn);Boe=n(Ox,"STRONG",{});var cjr=s(Boe);cYe=r(cjr,"deberta-v2"),cjr.forEach(t),fYe=r(Ox," \u2014 "),uS=n(Ox,"A",{href:!0});var fjr=s(uS);mYe=r(fjr,"DebertaV2Tokenizer"),fjr.forEach(t),gYe=r(Ox," or "),_S=n(Ox,"A",{href:!0});var mjr=s(_S);hYe=r(mjr,"DebertaV2TokenizerFast"),mjr.forEach(t),pYe=r(Ox," (DeBERTa-v2 model)"),Ox.forEach(t),uYe=i(S),Gn=n(S,"LI",{});var Vx=s(Gn);Poe=n(Vx,"STRONG",{});var gjr=s(Poe);_Ye=r(gjr,"distilbert"),gjr.forEach(t),bYe=r(Vx," \u2014 "),bS=n(Vx,"A",{href:!0});var hjr=s(bS);vYe=r(hjr,"DistilBertTokenizer"),hjr.forEach(t),FYe=r(Vx," or "),vS=n(Vx,"A",{href:!0});var pjr=s(vS);TYe=r(pjr,"DistilBertTokenizerFast"),pjr.forEach(t),MYe=r(Vx," (DistilBERT model)"),Vx.forEach(t),EYe=i(S),On=n(S,"LI",{});var Xx=s(On);Ioe=n(Xx,"STRONG",{});var ujr=s(Ioe);CYe=r(ujr,"dpr"),ujr.forEach(t),wYe=r(Xx," \u2014 "),FS=n(Xx,"A",{href:!0});var _jr=s(FS);AYe=r(_jr,"DPRQuestionEncoderTokenizer"),_jr.forEach(t),yYe=r(Xx," or "),TS=n(Xx,"A",{href:!0});var bjr=s(TS);LYe=r(bjr,"DPRQuestionEncoderTokenizerFast"),bjr.forEach(t),xYe=r(Xx," (DPR model)"),Xx.forEach(t),$Ye=i(S),Vn=n(S,"LI",{});var zx=s(Vn);qoe=n(zx,"STRONG",{});var vjr=s(qoe);kYe=r(vjr,"electra"),vjr.forEach(t),SYe=r(zx," \u2014 "),MS=n(zx,"A",{href:!0});var Fjr=s(MS);RYe=r(Fjr,"ElectraTokenizer"),Fjr.forEach(t),BYe=r(zx," or "),ES=n(zx,"A",{href:!0});var Tjr=s(ES);PYe=r(Tjr,"ElectraTokenizerFast"),Tjr.forEach(t),IYe=r(zx," (ELECTRA model)"),zx.forEach(t),qYe=i(S),pg=n(S,"LI",{});var cEe=s(pg);Noe=n(cEe,"STRONG",{});var Mjr=s(Noe);NYe=r(Mjr,"flaubert"),Mjr.forEach(t),jYe=r(cEe," \u2014 "),CS=n(cEe,"A",{href:!0});var Ejr=s(CS);DYe=r(Ejr,"FlaubertTokenizer"),Ejr.forEach(t),GYe=r(cEe," (FlauBERT model)"),cEe.forEach(t),OYe=i(S),Xn=n(S,"LI",{});var Qx=s(Xn);joe=n(Qx,"STRONG",{});var Cjr=s(joe);VYe=r(Cjr,"fnet"),Cjr.forEach(t),XYe=r(Qx," \u2014 "),wS=n(Qx,"A",{href:!0});var wjr=s(wS);zYe=r(wjr,"FNetTokenizer"),wjr.forEach(t),QYe=r(Qx," or "),AS=n(Qx,"A",{href:!0});var Ajr=s(AS);WYe=r(Ajr,"FNetTokenizerFast"),Ajr.forEach(t),HYe=r(Qx," (FNet model)"),Qx.forEach(t),UYe=i(S),ug=n(S,"LI",{});var fEe=s(ug);Doe=n(fEe,"STRONG",{});var yjr=s(Doe);JYe=r(yjr,"fsmt"),yjr.forEach(t),YYe=r(fEe," \u2014 "),yS=n(fEe,"A",{href:!0});var Ljr=s(yS);KYe=r(Ljr,"FSMTTokenizer"),Ljr.forEach(t),ZYe=r(fEe," (FairSeq Machine-Translation model)"),fEe.forEach(t),eKe=i(S),zn=n(S,"LI",{});var Wx=s(zn);Goe=n(Wx,"STRONG",{});var xjr=s(Goe);oKe=r(xjr,"funnel"),xjr.forEach(t),rKe=r(Wx," \u2014 "),LS=n(Wx,"A",{href:!0});var $jr=s(LS);tKe=r($jr,"FunnelTokenizer"),$jr.forEach(t),aKe=r(Wx," or "),xS=n(Wx,"A",{href:!0});var kjr=s(xS);nKe=r(kjr,"FunnelTokenizerFast"),kjr.forEach(t),sKe=r(Wx," (Funnel Transformer model)"),Wx.forEach(t),lKe=i(S),Qn=n(S,"LI",{});var Hx=s(Qn);Ooe=n(Hx,"STRONG",{});var Sjr=s(Ooe);iKe=r(Sjr,"gpt2"),Sjr.forEach(t),dKe=r(Hx," \u2014 "),$S=n(Hx,"A",{href:!0});var Rjr=s($S);cKe=r(Rjr,"GPT2Tokenizer"),Rjr.forEach(t),fKe=r(Hx," or "),kS=n(Hx,"A",{href:!0});var Bjr=s(kS);mKe=r(Bjr,"GPT2TokenizerFast"),Bjr.forEach(t),gKe=r(Hx," (OpenAI GPT-2 model)"),Hx.forEach(t),hKe=i(S),Wn=n(S,"LI",{});var Ux=s(Wn);Voe=n(Ux,"STRONG",{});var Pjr=s(Voe);pKe=r(Pjr,"gpt_neo"),Pjr.forEach(t),uKe=r(Ux," \u2014 "),SS=n(Ux,"A",{href:!0});var Ijr=s(SS);_Ke=r(Ijr,"GPT2Tokenizer"),Ijr.forEach(t),bKe=r(Ux," or "),RS=n(Ux,"A",{href:!0});var qjr=s(RS);vKe=r(qjr,"GPT2TokenizerFast"),qjr.forEach(t),FKe=r(Ux," (GPT Neo model)"),Ux.forEach(t),TKe=i(S),Hn=n(S,"LI",{});var Jx=s(Hn);Xoe=n(Jx,"STRONG",{});var Njr=s(Xoe);MKe=r(Njr,"gptj"),Njr.forEach(t),EKe=r(Jx," \u2014 "),BS=n(Jx,"A",{href:!0});var jjr=s(BS);CKe=r(jjr,"GPT2Tokenizer"),jjr.forEach(t),wKe=r(Jx," or "),PS=n(Jx,"A",{href:!0});var Djr=s(PS);AKe=r(Djr,"GPT2TokenizerFast"),Djr.forEach(t),yKe=r(Jx," (GPT-J model)"),Jx.forEach(t),LKe=i(S),Un=n(S,"LI",{});var Yx=s(Un);zoe=n(Yx,"STRONG",{});var Gjr=s(zoe);xKe=r(Gjr,"herbert"),Gjr.forEach(t),$Ke=r(Yx," \u2014 "),IS=n(Yx,"A",{href:!0});var Ojr=s(IS);kKe=r(Ojr,"HerbertTokenizer"),Ojr.forEach(t),SKe=r(Yx," or "),qS=n(Yx,"A",{href:!0});var Vjr=s(qS);RKe=r(Vjr,"HerbertTokenizerFast"),Vjr.forEach(t),BKe=r(Yx," (HerBERT model)"),Yx.forEach(t),PKe=i(S),_g=n(S,"LI",{});var mEe=s(_g);Qoe=n(mEe,"STRONG",{});var Xjr=s(Qoe);IKe=r(Xjr,"hubert"),Xjr.forEach(t),qKe=r(mEe," \u2014 "),NS=n(mEe,"A",{href:!0});var zjr=s(NS);NKe=r(zjr,"Wav2Vec2CTCTokenizer"),zjr.forEach(t),jKe=r(mEe," (Hubert model)"),mEe.forEach(t),DKe=i(S),Jn=n(S,"LI",{});var Kx=s(Jn);Woe=n(Kx,"STRONG",{});var Qjr=s(Woe);GKe=r(Qjr,"ibert"),Qjr.forEach(t),OKe=r(Kx," \u2014 "),jS=n(Kx,"A",{href:!0});var Wjr=s(jS);VKe=r(Wjr,"RobertaTokenizer"),Wjr.forEach(t),XKe=r(Kx," or "),DS=n(Kx,"A",{href:!0});var Hjr=s(DS);zKe=r(Hjr,"RobertaTokenizerFast"),Hjr.forEach(t),QKe=r(Kx," (I-BERT model)"),Kx.forEach(t),WKe=i(S),Yn=n(S,"LI",{});var Zx=s(Yn);Hoe=n(Zx,"STRONG",{});var Ujr=s(Hoe);HKe=r(Ujr,"layoutlm"),Ujr.forEach(t),UKe=r(Zx," \u2014 "),GS=n(Zx,"A",{href:!0});var Jjr=s(GS);JKe=r(Jjr,"LayoutLMTokenizer"),Jjr.forEach(t),YKe=r(Zx," or "),OS=n(Zx,"A",{href:!0});var Yjr=s(OS);KKe=r(Yjr,"LayoutLMTokenizerFast"),Yjr.forEach(t),ZKe=r(Zx," (LayoutLM model)"),Zx.forEach(t),eZe=i(S),Kn=n(S,"LI",{});var e9=s(Kn);Uoe=n(e9,"STRONG",{});var Kjr=s(Uoe);oZe=r(Kjr,"layoutlmv2"),Kjr.forEach(t),rZe=r(e9," \u2014 "),VS=n(e9,"A",{href:!0});var Zjr=s(VS);tZe=r(Zjr,"LayoutLMv2Tokenizer"),Zjr.forEach(t),aZe=r(e9," or "),XS=n(e9,"A",{href:!0});var eDr=s(XS);nZe=r(eDr,"LayoutLMv2TokenizerFast"),eDr.forEach(t),sZe=r(e9," (LayoutLMv2 model)"),e9.forEach(t),lZe=i(S),Zn=n(S,"LI",{});var o9=s(Zn);Joe=n(o9,"STRONG",{});var oDr=s(Joe);iZe=r(oDr,"layoutxlm"),oDr.forEach(t),dZe=r(o9," \u2014 "),zS=n(o9,"A",{href:!0});var rDr=s(zS);cZe=r(rDr,"LayoutXLMTokenizer"),rDr.forEach(t),fZe=r(o9," or "),QS=n(o9,"A",{href:!0});var tDr=s(QS);mZe=r(tDr,"LayoutXLMTokenizerFast"),tDr.forEach(t),gZe=r(o9," (LayoutXLM model)"),o9.forEach(t),hZe=i(S),es=n(S,"LI",{});var r9=s(es);Yoe=n(r9,"STRONG",{});var aDr=s(Yoe);pZe=r(aDr,"led"),aDr.forEach(t),uZe=r(r9," \u2014 "),WS=n(r9,"A",{href:!0});var nDr=s(WS);_Ze=r(nDr,"LEDTokenizer"),nDr.forEach(t),bZe=r(r9," or "),HS=n(r9,"A",{href:!0});var sDr=s(HS);vZe=r(sDr,"LEDTokenizerFast"),sDr.forEach(t),FZe=r(r9," (LED model)"),r9.forEach(t),TZe=i(S),os=n(S,"LI",{});var t9=s(os);Koe=n(t9,"STRONG",{});var lDr=s(Koe);MZe=r(lDr,"longformer"),lDr.forEach(t),EZe=r(t9," \u2014 "),US=n(t9,"A",{href:!0});var iDr=s(US);CZe=r(iDr,"LongformerTokenizer"),iDr.forEach(t),wZe=r(t9," or "),JS=n(t9,"A",{href:!0});var dDr=s(JS);AZe=r(dDr,"LongformerTokenizerFast"),dDr.forEach(t),yZe=r(t9," (Longformer model)"),t9.forEach(t),LZe=i(S),bg=n(S,"LI",{});var gEe=s(bg);Zoe=n(gEe,"STRONG",{});var cDr=s(Zoe);xZe=r(cDr,"luke"),cDr.forEach(t),$Ze=r(gEe," \u2014 "),YS=n(gEe,"A",{href:!0});var fDr=s(YS);kZe=r(fDr,"LukeTokenizer"),fDr.forEach(t),SZe=r(gEe," (LUKE model)"),gEe.forEach(t),RZe=i(S),rs=n(S,"LI",{});var a9=s(rs);ere=n(a9,"STRONG",{});var mDr=s(ere);BZe=r(mDr,"lxmert"),mDr.forEach(t),PZe=r(a9," \u2014 "),KS=n(a9,"A",{href:!0});var gDr=s(KS);IZe=r(gDr,"LxmertTokenizer"),gDr.forEach(t),qZe=r(a9," or "),ZS=n(a9,"A",{href:!0});var hDr=s(ZS);NZe=r(hDr,"LxmertTokenizerFast"),hDr.forEach(t),jZe=r(a9," (LXMERT model)"),a9.forEach(t),DZe=i(S),vg=n(S,"LI",{});var hEe=s(vg);ore=n(hEe,"STRONG",{});var pDr=s(ore);GZe=r(pDr,"m2m_100"),pDr.forEach(t),OZe=r(hEe," \u2014 "),eR=n(hEe,"A",{href:!0});var uDr=s(eR);VZe=r(uDr,"M2M100Tokenizer"),uDr.forEach(t),XZe=r(hEe," (M2M100 model)"),hEe.forEach(t),zZe=i(S),Fg=n(S,"LI",{});var pEe=s(Fg);rre=n(pEe,"STRONG",{});var _Dr=s(rre);QZe=r(_Dr,"marian"),_Dr.forEach(t),WZe=r(pEe," \u2014 "),oR=n(pEe,"A",{href:!0});var bDr=s(oR);HZe=r(bDr,"MarianTokenizer"),bDr.forEach(t),UZe=r(pEe," (Marian model)"),pEe.forEach(t),JZe=i(S),ts=n(S,"LI",{});var n9=s(ts);tre=n(n9,"STRONG",{});var vDr=s(tre);YZe=r(vDr,"mbart"),vDr.forEach(t),KZe=r(n9," \u2014 "),rR=n(n9,"A",{href:!0});var FDr=s(rR);ZZe=r(FDr,"MBartTokenizer"),FDr.forEach(t),eeo=r(n9," or "),tR=n(n9,"A",{href:!0});var TDr=s(tR);oeo=r(TDr,"MBartTokenizerFast"),TDr.forEach(t),reo=r(n9," (mBART model)"),n9.forEach(t),teo=i(S),as=n(S,"LI",{});var s9=s(as);are=n(s9,"STRONG",{});var MDr=s(are);aeo=r(MDr,"mbart50"),MDr.forEach(t),neo=r(s9," \u2014 "),aR=n(s9,"A",{href:!0});var EDr=s(aR);seo=r(EDr,"MBart50Tokenizer"),EDr.forEach(t),leo=r(s9," or "),nR=n(s9,"A",{href:!0});var CDr=s(nR);ieo=r(CDr,"MBart50TokenizerFast"),CDr.forEach(t),deo=r(s9," (mBART-50 model)"),s9.forEach(t),ceo=i(S),ns=n(S,"LI",{});var l9=s(ns);nre=n(l9,"STRONG",{});var wDr=s(nre);feo=r(wDr,"megatron-bert"),wDr.forEach(t),meo=r(l9," \u2014 "),sR=n(l9,"A",{href:!0});var ADr=s(sR);geo=r(ADr,"BertTokenizer"),ADr.forEach(t),heo=r(l9," or "),lR=n(l9,"A",{href:!0});var yDr=s(lR);peo=r(yDr,"BertTokenizerFast"),yDr.forEach(t),ueo=r(l9," (MegatronBert model)"),l9.forEach(t),_eo=i(S),Tg=n(S,"LI",{});var uEe=s(Tg);sre=n(uEe,"STRONG",{});var LDr=s(sre);beo=r(LDr,"mluke"),LDr.forEach(t),veo=r(uEe," \u2014 "),iR=n(uEe,"A",{href:!0});var xDr=s(iR);Feo=r(xDr,"MLukeTokenizer"),xDr.forEach(t),Teo=r(uEe," (mLUKE model)"),uEe.forEach(t),Meo=i(S),ss=n(S,"LI",{});var i9=s(ss);lre=n(i9,"STRONG",{});var $Dr=s(lre);Eeo=r($Dr,"mobilebert"),$Dr.forEach(t),Ceo=r(i9," \u2014 "),dR=n(i9,"A",{href:!0});var kDr=s(dR);weo=r(kDr,"MobileBertTokenizer"),kDr.forEach(t),Aeo=r(i9," or "),cR=n(i9,"A",{href:!0});var SDr=s(cR);yeo=r(SDr,"MobileBertTokenizerFast"),SDr.forEach(t),Leo=r(i9," (MobileBERT model)"),i9.forEach(t),xeo=i(S),ls=n(S,"LI",{});var d9=s(ls);ire=n(d9,"STRONG",{});var RDr=s(ire);$eo=r(RDr,"mpnet"),RDr.forEach(t),keo=r(d9," \u2014 "),fR=n(d9,"A",{href:!0});var BDr=s(fR);Seo=r(BDr,"MPNetTokenizer"),BDr.forEach(t),Reo=r(d9," or "),mR=n(d9,"A",{href:!0});var PDr=s(mR);Beo=r(PDr,"MPNetTokenizerFast"),PDr.forEach(t),Peo=r(d9," (MPNet model)"),d9.forEach(t),Ieo=i(S),is=n(S,"LI",{});var c9=s(is);dre=n(c9,"STRONG",{});var IDr=s(dre);qeo=r(IDr,"mt5"),IDr.forEach(t),Neo=r(c9," \u2014 "),gR=n(c9,"A",{href:!0});var qDr=s(gR);jeo=r(qDr,"MT5Tokenizer"),qDr.forEach(t),Deo=r(c9," or "),hR=n(c9,"A",{href:!0});var NDr=s(hR);Geo=r(NDr,"MT5TokenizerFast"),NDr.forEach(t),Oeo=r(c9," (mT5 model)"),c9.forEach(t),Veo=i(S),ds=n(S,"LI",{});var f9=s(ds);cre=n(f9,"STRONG",{});var jDr=s(cre);Xeo=r(jDr,"nystromformer"),jDr.forEach(t),zeo=r(f9," \u2014 "),pR=n(f9,"A",{href:!0});var DDr=s(pR);Qeo=r(DDr,"AlbertTokenizer"),DDr.forEach(t),Weo=r(f9," or "),uR=n(f9,"A",{href:!0});var GDr=s(uR);Heo=r(GDr,"AlbertTokenizerFast"),GDr.forEach(t),Ueo=r(f9," (Nystromformer model)"),f9.forEach(t),Jeo=i(S),cs=n(S,"LI",{});var m9=s(cs);fre=n(m9,"STRONG",{});var ODr=s(fre);Yeo=r(ODr,"openai-gpt"),ODr.forEach(t),Keo=r(m9," \u2014 "),_R=n(m9,"A",{href:!0});var VDr=s(_R);Zeo=r(VDr,"OpenAIGPTTokenizer"),VDr.forEach(t),eoo=r(m9," or "),bR=n(m9,"A",{href:!0});var XDr=s(bR);ooo=r(XDr,"OpenAIGPTTokenizerFast"),XDr.forEach(t),roo=r(m9," (OpenAI GPT model)"),m9.forEach(t),too=i(S),fs=n(S,"LI",{});var g9=s(fs);mre=n(g9,"STRONG",{});var zDr=s(mre);aoo=r(zDr,"pegasus"),zDr.forEach(t),noo=r(g9," \u2014 "),vR=n(g9,"A",{href:!0});var QDr=s(vR);soo=r(QDr,"PegasusTokenizer"),QDr.forEach(t),loo=r(g9," or "),FR=n(g9,"A",{href:!0});var WDr=s(FR);ioo=r(WDr,"PegasusTokenizerFast"),WDr.forEach(t),doo=r(g9," (Pegasus model)"),g9.forEach(t),coo=i(S),Mg=n(S,"LI",{});var _Ee=s(Mg);gre=n(_Ee,"STRONG",{});var HDr=s(gre);foo=r(HDr,"perceiver"),HDr.forEach(t),moo=r(_Ee," \u2014 "),TR=n(_Ee,"A",{href:!0});var UDr=s(TR);goo=r(UDr,"PerceiverTokenizer"),UDr.forEach(t),hoo=r(_Ee," (Perceiver model)"),_Ee.forEach(t),poo=i(S),Eg=n(S,"LI",{});var bEe=s(Eg);hre=n(bEe,"STRONG",{});var JDr=s(hre);uoo=r(JDr,"phobert"),JDr.forEach(t),_oo=r(bEe," \u2014 "),MR=n(bEe,"A",{href:!0});var YDr=s(MR);boo=r(YDr,"PhobertTokenizer"),YDr.forEach(t),voo=r(bEe," (PhoBERT model)"),bEe.forEach(t),Foo=i(S),Cg=n(S,"LI",{});var vEe=s(Cg);pre=n(vEe,"STRONG",{});var KDr=s(pre);Too=r(KDr,"plbart"),KDr.forEach(t),Moo=r(vEe," \u2014 "),ER=n(vEe,"A",{href:!0});var ZDr=s(ER);Eoo=r(ZDr,"PLBartTokenizer"),ZDr.forEach(t),Coo=r(vEe," (PLBart model)"),vEe.forEach(t),woo=i(S),wg=n(S,"LI",{});var FEe=s(wg);ure=n(FEe,"STRONG",{});var eGr=s(ure);Aoo=r(eGr,"prophetnet"),eGr.forEach(t),yoo=r(FEe," \u2014 "),CR=n(FEe,"A",{href:!0});var oGr=s(CR);Loo=r(oGr,"ProphetNetTokenizer"),oGr.forEach(t),xoo=r(FEe," (ProphetNet model)"),FEe.forEach(t),$oo=i(S),ms=n(S,"LI",{});var h9=s(ms);_re=n(h9,"STRONG",{});var rGr=s(_re);koo=r(rGr,"qdqbert"),rGr.forEach(t),Soo=r(h9," \u2014 "),wR=n(h9,"A",{href:!0});var tGr=s(wR);Roo=r(tGr,"BertTokenizer"),tGr.forEach(t),Boo=r(h9," or "),AR=n(h9,"A",{href:!0});var aGr=s(AR);Poo=r(aGr,"BertTokenizerFast"),aGr.forEach(t),Ioo=r(h9," (QDQBert model)"),h9.forEach(t),qoo=i(S),Ag=n(S,"LI",{});var TEe=s(Ag);bre=n(TEe,"STRONG",{});var nGr=s(bre);Noo=r(nGr,"rag"),nGr.forEach(t),joo=r(TEe," \u2014 "),yR=n(TEe,"A",{href:!0});var sGr=s(yR);Doo=r(sGr,"RagTokenizer"),sGr.forEach(t),Goo=r(TEe," (RAG model)"),TEe.forEach(t),Ooo=i(S),gs=n(S,"LI",{});var p9=s(gs);vre=n(p9,"STRONG",{});var lGr=s(vre);Voo=r(lGr,"realm"),lGr.forEach(t),Xoo=r(p9," \u2014 "),LR=n(p9,"A",{href:!0});var iGr=s(LR);zoo=r(iGr,"RealmTokenizer"),iGr.forEach(t),Qoo=r(p9," or "),xR=n(p9,"A",{href:!0});var dGr=s(xR);Woo=r(dGr,"RealmTokenizerFast"),dGr.forEach(t),Hoo=r(p9," (Realm model)"),p9.forEach(t),Uoo=i(S),hs=n(S,"LI",{});var u9=s(hs);Fre=n(u9,"STRONG",{});var cGr=s(Fre);Joo=r(cGr,"reformer"),cGr.forEach(t),Yoo=r(u9," \u2014 "),$R=n(u9,"A",{href:!0});var fGr=s($R);Koo=r(fGr,"ReformerTokenizer"),fGr.forEach(t),Zoo=r(u9," or "),kR=n(u9,"A",{href:!0});var mGr=s(kR);ero=r(mGr,"ReformerTokenizerFast"),mGr.forEach(t),oro=r(u9," (Reformer model)"),u9.forEach(t),rro=i(S),ps=n(S,"LI",{});var _9=s(ps);Tre=n(_9,"STRONG",{});var gGr=s(Tre);tro=r(gGr,"rembert"),gGr.forEach(t),aro=r(_9," \u2014 "),SR=n(_9,"A",{href:!0});var hGr=s(SR);nro=r(hGr,"RemBertTokenizer"),hGr.forEach(t),sro=r(_9," or "),RR=n(_9,"A",{href:!0});var pGr=s(RR);lro=r(pGr,"RemBertTokenizerFast"),pGr.forEach(t),iro=r(_9," (RemBERT model)"),_9.forEach(t),dro=i(S),us=n(S,"LI",{});var b9=s(us);Mre=n(b9,"STRONG",{});var uGr=s(Mre);cro=r(uGr,"retribert"),uGr.forEach(t),fro=r(b9," \u2014 "),BR=n(b9,"A",{href:!0});var _Gr=s(BR);mro=r(_Gr,"RetriBertTokenizer"),_Gr.forEach(t),gro=r(b9," or "),PR=n(b9,"A",{href:!0});var bGr=s(PR);hro=r(bGr,"RetriBertTokenizerFast"),bGr.forEach(t),pro=r(b9," (RetriBERT model)"),b9.forEach(t),uro=i(S),_s=n(S,"LI",{});var v9=s(_s);Ere=n(v9,"STRONG",{});var vGr=s(Ere);_ro=r(vGr,"roberta"),vGr.forEach(t),bro=r(v9," \u2014 "),IR=n(v9,"A",{href:!0});var FGr=s(IR);vro=r(FGr,"RobertaTokenizer"),FGr.forEach(t),Fro=r(v9," or "),qR=n(v9,"A",{href:!0});var TGr=s(qR);Tro=r(TGr,"RobertaTokenizerFast"),TGr.forEach(t),Mro=r(v9," (RoBERTa model)"),v9.forEach(t),Ero=i(S),bs=n(S,"LI",{});var F9=s(bs);Cre=n(F9,"STRONG",{});var MGr=s(Cre);Cro=r(MGr,"roformer"),MGr.forEach(t),wro=r(F9," \u2014 "),NR=n(F9,"A",{href:!0});var EGr=s(NR);Aro=r(EGr,"RoFormerTokenizer"),EGr.forEach(t),yro=r(F9," or "),jR=n(F9,"A",{href:!0});var CGr=s(jR);Lro=r(CGr,"RoFormerTokenizerFast"),CGr.forEach(t),xro=r(F9," (RoFormer model)"),F9.forEach(t),$ro=i(S),yg=n(S,"LI",{});var MEe=s(yg);wre=n(MEe,"STRONG",{});var wGr=s(wre);kro=r(wGr,"speech_to_text"),wGr.forEach(t),Sro=r(MEe," \u2014 "),DR=n(MEe,"A",{href:!0});var AGr=s(DR);Rro=r(AGr,"Speech2TextTokenizer"),AGr.forEach(t),Bro=r(MEe," (Speech2Text model)"),MEe.forEach(t),Pro=i(S),Lg=n(S,"LI",{});var EEe=s(Lg);Are=n(EEe,"STRONG",{});var yGr=s(Are);Iro=r(yGr,"speech_to_text_2"),yGr.forEach(t),qro=r(EEe," \u2014 "),GR=n(EEe,"A",{href:!0});var LGr=s(GR);Nro=r(LGr,"Speech2Text2Tokenizer"),LGr.forEach(t),jro=r(EEe," (Speech2Text2 model)"),EEe.forEach(t),Dro=i(S),vs=n(S,"LI",{});var T9=s(vs);yre=n(T9,"STRONG",{});var xGr=s(yre);Gro=r(xGr,"splinter"),xGr.forEach(t),Oro=r(T9," \u2014 "),OR=n(T9,"A",{href:!0});var $Gr=s(OR);Vro=r($Gr,"SplinterTokenizer"),$Gr.forEach(t),Xro=r(T9," or "),VR=n(T9,"A",{href:!0});var kGr=s(VR);zro=r(kGr,"SplinterTokenizerFast"),kGr.forEach(t),Qro=r(T9," (Splinter model)"),T9.forEach(t),Wro=i(S),Fs=n(S,"LI",{});var M9=s(Fs);Lre=n(M9,"STRONG",{});var SGr=s(Lre);Hro=r(SGr,"squeezebert"),SGr.forEach(t),Uro=r(M9," \u2014 "),XR=n(M9,"A",{href:!0});var RGr=s(XR);Jro=r(RGr,"SqueezeBertTokenizer"),RGr.forEach(t),Yro=r(M9," or "),zR=n(M9,"A",{href:!0});var BGr=s(zR);Kro=r(BGr,"SqueezeBertTokenizerFast"),BGr.forEach(t),Zro=r(M9," (SqueezeBERT model)"),M9.forEach(t),eto=i(S),Ts=n(S,"LI",{});var E9=s(Ts);xre=n(E9,"STRONG",{});var PGr=s(xre);oto=r(PGr,"t5"),PGr.forEach(t),rto=r(E9," \u2014 "),QR=n(E9,"A",{href:!0});var IGr=s(QR);tto=r(IGr,"T5Tokenizer"),IGr.forEach(t),ato=r(E9," or "),WR=n(E9,"A",{href:!0});var qGr=s(WR);nto=r(qGr,"T5TokenizerFast"),qGr.forEach(t),sto=r(E9," (T5 model)"),E9.forEach(t),lto=i(S),xg=n(S,"LI",{});var CEe=s(xg);$re=n(CEe,"STRONG",{});var NGr=s($re);ito=r(NGr,"tapas"),NGr.forEach(t),dto=r(CEe," \u2014 "),HR=n(CEe,"A",{href:!0});var jGr=s(HR);cto=r(jGr,"TapasTokenizer"),jGr.forEach(t),fto=r(CEe," (TAPAS model)"),CEe.forEach(t),mto=i(S),$g=n(S,"LI",{});var wEe=s($g);kre=n(wEe,"STRONG",{});var DGr=s(kre);gto=r(DGr,"tapex"),DGr.forEach(t),hto=r(wEe," \u2014 "),UR=n(wEe,"A",{href:!0});var GGr=s(UR);pto=r(GGr,"TapexTokenizer"),GGr.forEach(t),uto=r(wEe," (TAPEX model)"),wEe.forEach(t),_to=i(S),kg=n(S,"LI",{});var AEe=s(kg);Sre=n(AEe,"STRONG",{});var OGr=s(Sre);bto=r(OGr,"transfo-xl"),OGr.forEach(t),vto=r(AEe," \u2014 "),JR=n(AEe,"A",{href:!0});var VGr=s(JR);Fto=r(VGr,"TransfoXLTokenizer"),VGr.forEach(t),Tto=r(AEe," (Transformer-XL model)"),AEe.forEach(t),Mto=i(S),Ms=n(S,"LI",{});var C9=s(Ms);Rre=n(C9,"STRONG",{});var XGr=s(Rre);Eto=r(XGr,"visual_bert"),XGr.forEach(t),Cto=r(C9," \u2014 "),YR=n(C9,"A",{href:!0});var zGr=s(YR);wto=r(zGr,"BertTokenizer"),zGr.forEach(t),Ato=r(C9," or "),KR=n(C9,"A",{href:!0});var QGr=s(KR);yto=r(QGr,"BertTokenizerFast"),QGr.forEach(t),Lto=r(C9," (VisualBert model)"),C9.forEach(t),xto=i(S),Sg=n(S,"LI",{});var yEe=s(Sg);Bre=n(yEe,"STRONG",{});var WGr=s(Bre);$to=r(WGr,"wav2vec2"),WGr.forEach(t),kto=r(yEe," \u2014 "),ZR=n(yEe,"A",{href:!0});var HGr=s(ZR);Sto=r(HGr,"Wav2Vec2CTCTokenizer"),HGr.forEach(t),Rto=r(yEe," (Wav2Vec2 model)"),yEe.forEach(t),Bto=i(S),Rg=n(S,"LI",{});var LEe=s(Rg);Pre=n(LEe,"STRONG",{});var UGr=s(Pre);Pto=r(UGr,"wav2vec2_phoneme"),UGr.forEach(t),Ito=r(LEe," \u2014 "),eB=n(LEe,"A",{href:!0});var JGr=s(eB);qto=r(JGr,"Wav2Vec2PhonemeCTCTokenizer"),JGr.forEach(t),Nto=r(LEe," (Wav2Vec2Phoneme model)"),LEe.forEach(t),jto=i(S),Es=n(S,"LI",{});var w9=s(Es);Ire=n(w9,"STRONG",{});var YGr=s(Ire);Dto=r(YGr,"xglm"),YGr.forEach(t),Gto=r(w9," \u2014 "),oB=n(w9,"A",{href:!0});var KGr=s(oB);Oto=r(KGr,"XGLMTokenizer"),KGr.forEach(t),Vto=r(w9," or "),rB=n(w9,"A",{href:!0});var ZGr=s(rB);Xto=r(ZGr,"XGLMTokenizerFast"),ZGr.forEach(t),zto=r(w9," (XGLM model)"),w9.forEach(t),Qto=i(S),Bg=n(S,"LI",{});var xEe=s(Bg);qre=n(xEe,"STRONG",{});var eOr=s(qre);Wto=r(eOr,"xlm"),eOr.forEach(t),Hto=r(xEe," \u2014 "),tB=n(xEe,"A",{href:!0});var oOr=s(tB);Uto=r(oOr,"XLMTokenizer"),oOr.forEach(t),Jto=r(xEe," (XLM model)"),xEe.forEach(t),Yto=i(S),Pg=n(S,"LI",{});var $Ee=s(Pg);Nre=n($Ee,"STRONG",{});var rOr=s(Nre);Kto=r(rOr,"xlm-prophetnet"),rOr.forEach(t),Zto=r($Ee," \u2014 "),aB=n($Ee,"A",{href:!0});var tOr=s(aB);eao=r(tOr,"XLMProphetNetTokenizer"),tOr.forEach(t),oao=r($Ee," (XLMProphetNet model)"),$Ee.forEach(t),rao=i(S),Cs=n(S,"LI",{});var A9=s(Cs);jre=n(A9,"STRONG",{});var aOr=s(jre);tao=r(aOr,"xlm-roberta"),aOr.forEach(t),aao=r(A9," \u2014 "),nB=n(A9,"A",{href:!0});var nOr=s(nB);nao=r(nOr,"XLMRobertaTokenizer"),nOr.forEach(t),sao=r(A9," or "),sB=n(A9,"A",{href:!0});var sOr=s(sB);lao=r(sOr,"XLMRobertaTokenizerFast"),sOr.forEach(t),iao=r(A9," (XLM-RoBERTa model)"),A9.forEach(t),dao=i(S),ws=n(S,"LI",{});var y9=s(ws);Dre=n(y9,"STRONG",{});var lOr=s(Dre);cao=r(lOr,"xlm-roberta-xl"),lOr.forEach(t),fao=r(y9," \u2014 "),lB=n(y9,"A",{href:!0});var iOr=s(lB);mao=r(iOr,"RobertaTokenizer"),iOr.forEach(t),gao=r(y9," or "),iB=n(y9,"A",{href:!0});var dOr=s(iB);hao=r(dOr,"RobertaTokenizerFast"),dOr.forEach(t),pao=r(y9," (XLM-RoBERTa-XL model)"),y9.forEach(t),uao=i(S),As=n(S,"LI",{});var L9=s(As);Gre=n(L9,"STRONG",{});var cOr=s(Gre);_ao=r(cOr,"xlnet"),cOr.forEach(t),bao=r(L9," \u2014 "),dB=n(L9,"A",{href:!0});var fOr=s(dB);vao=r(fOr,"XLNetTokenizer"),fOr.forEach(t),Fao=r(L9," or "),cB=n(L9,"A",{href:!0});var mOr=s(cB);Tao=r(mOr,"XLNetTokenizerFast"),mOr.forEach(t),Mao=r(L9," (XLNet model)"),L9.forEach(t),Eao=i(S),ys=n(S,"LI",{});var x9=s(ys);Ore=n(x9,"STRONG",{});var gOr=s(Ore);Cao=r(gOr,"yoso"),gOr.forEach(t),wao=r(x9," \u2014 "),fB=n(x9,"A",{href:!0});var hOr=s(fB);Aao=r(hOr,"AlbertTokenizer"),hOr.forEach(t),yao=r(x9," or "),mB=n(x9,"A",{href:!0});var pOr=s(mB);Lao=r(pOr,"AlbertTokenizerFast"),pOr.forEach(t),xao=r(x9," (YOSO model)"),x9.forEach(t),S.forEach(t),$ao=i(Ss),T(Ig.$$.fragment,Ss),Ss.forEach(t),kao=i(ks),qg=n(ks,"DIV",{class:!0});var fIe=s(qg);T(BA.$$.fragment,fIe),Sao=i(fIe),Vre=n(fIe,"P",{});var uOr=s(Vre);Rao=r(uOr,"Register a new tokenizer in this mapping."),uOr.forEach(t),fIe.forEach(t),ks.forEach(t),hBe=i(f),mi=n(f,"H2",{class:!0});var mIe=s(mi);Ng=n(mIe,"A",{id:!0,class:!0,href:!0});var _Or=s(Ng);Xre=n(_Or,"SPAN",{});var bOr=s(Xre);T(PA.$$.fragment,bOr),bOr.forEach(t),_Or.forEach(t),Bao=i(mIe),zre=n(mIe,"SPAN",{});var vOr=s(zre);Pao=r(vOr,"AutoFeatureExtractor"),vOr.forEach(t),mIe.forEach(t),pBe=i(f),Ao=n(f,"DIV",{class:!0});var Rs=s(Ao);T(IA.$$.fragment,Rs),Iao=i(Rs),qA=n(Rs,"P",{});var gIe=s(qA);qao=r(gIe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),gB=n(gIe,"A",{href:!0});var FOr=s(gB);Nao=r(FOr,"AutoFeatureExtractor.from_pretrained()"),FOr.forEach(t),jao=r(gIe," class method."),gIe.forEach(t),Dao=i(Rs),NA=n(Rs,"P",{});var hIe=s(NA);Gao=r(hIe,"This class cannot be instantiated directly using "),Qre=n(hIe,"CODE",{});var TOr=s(Qre);Oao=r(TOr,"__init__()"),TOr.forEach(t),Vao=r(hIe," (throws an error)."),hIe.forEach(t),Xao=i(Rs),Qe=n(Rs,"DIV",{class:!0});var Ht=s(Qe);T(jA.$$.fragment,Ht),zao=i(Ht),Wre=n(Ht,"P",{});var MOr=s(Wre);Qao=r(MOr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),MOr.forEach(t),Wao=i(Ht),Ma=n(Ht,"P",{});var wC=s(Ma);Hao=r(wC,"The feature extractor class to instantiate is selected based on the "),Hre=n(wC,"CODE",{});var EOr=s(Hre);Uao=r(EOr,"model_type"),EOr.forEach(t),Jao=r(wC,` property of the config object
(either passed as an argument or loaded from `),Ure=n(wC,"CODE",{});var COr=s(Ure);Yao=r(COr,"pretrained_model_name_or_path"),COr.forEach(t),Kao=r(wC,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Jre=n(wC,"CODE",{});var wOr=s(Jre);Zao=r(wOr,"pretrained_model_name_or_path"),wOr.forEach(t),eno=r(wC,":"),wC.forEach(t),ono=i(Ht),te=n(Ht,"UL",{});var se=s(te);jg=n(se,"LI",{});var kEe=s(jg);Yre=n(kEe,"STRONG",{});var AOr=s(Yre);rno=r(AOr,"beit"),AOr.forEach(t),tno=r(kEe," \u2014 "),hB=n(kEe,"A",{href:!0});var yOr=s(hB);ano=r(yOr,"BeitFeatureExtractor"),yOr.forEach(t),nno=r(kEe," (BEiT model)"),kEe.forEach(t),sno=i(se),Dg=n(se,"LI",{});var SEe=s(Dg);Kre=n(SEe,"STRONG",{});var LOr=s(Kre);lno=r(LOr,"clip"),LOr.forEach(t),ino=r(SEe," \u2014 "),pB=n(SEe,"A",{href:!0});var xOr=s(pB);dno=r(xOr,"CLIPFeatureExtractor"),xOr.forEach(t),cno=r(SEe," (CLIP model)"),SEe.forEach(t),fno=i(se),Gg=n(se,"LI",{});var REe=s(Gg);Zre=n(REe,"STRONG",{});var $Or=s(Zre);mno=r($Or,"convnext"),$Or.forEach(t),gno=r(REe," \u2014 "),uB=n(REe,"A",{href:!0});var kOr=s(uB);hno=r(kOr,"ConvNextFeatureExtractor"),kOr.forEach(t),pno=r(REe," (ConvNext model)"),REe.forEach(t),uno=i(se),Og=n(se,"LI",{});var BEe=s(Og);ete=n(BEe,"STRONG",{});var SOr=s(ete);_no=r(SOr,"data2vec-audio"),SOr.forEach(t),bno=r(BEe," \u2014 "),_B=n(BEe,"A",{href:!0});var ROr=s(_B);vno=r(ROr,"Wav2Vec2FeatureExtractor"),ROr.forEach(t),Fno=r(BEe," (Data2VecAudio model)"),BEe.forEach(t),Tno=i(se),Vg=n(se,"LI",{});var PEe=s(Vg);ote=n(PEe,"STRONG",{});var BOr=s(ote);Mno=r(BOr,"data2vec-vision"),BOr.forEach(t),Eno=r(PEe," \u2014 "),bB=n(PEe,"A",{href:!0});var POr=s(bB);Cno=r(POr,"BeitFeatureExtractor"),POr.forEach(t),wno=r(PEe," (Data2VecVision model)"),PEe.forEach(t),Ano=i(se),Xg=n(se,"LI",{});var IEe=s(Xg);rte=n(IEe,"STRONG",{});var IOr=s(rte);yno=r(IOr,"deit"),IOr.forEach(t),Lno=r(IEe," \u2014 "),vB=n(IEe,"A",{href:!0});var qOr=s(vB);xno=r(qOr,"DeiTFeatureExtractor"),qOr.forEach(t),$no=r(IEe," (DeiT model)"),IEe.forEach(t),kno=i(se),zg=n(se,"LI",{});var qEe=s(zg);tte=n(qEe,"STRONG",{});var NOr=s(tte);Sno=r(NOr,"detr"),NOr.forEach(t),Rno=r(qEe," \u2014 "),FB=n(qEe,"A",{href:!0});var jOr=s(FB);Bno=r(jOr,"DetrFeatureExtractor"),jOr.forEach(t),Pno=r(qEe," (DETR model)"),qEe.forEach(t),Ino=i(se),Qg=n(se,"LI",{});var NEe=s(Qg);ate=n(NEe,"STRONG",{});var DOr=s(ate);qno=r(DOr,"dpt"),DOr.forEach(t),Nno=r(NEe," \u2014 "),TB=n(NEe,"A",{href:!0});var GOr=s(TB);jno=r(GOr,"DPTFeatureExtractor"),GOr.forEach(t),Dno=r(NEe," (DPT model)"),NEe.forEach(t),Gno=i(se),Wg=n(se,"LI",{});var jEe=s(Wg);nte=n(jEe,"STRONG",{});var OOr=s(nte);Ono=r(OOr,"glpn"),OOr.forEach(t),Vno=r(jEe," \u2014 "),MB=n(jEe,"A",{href:!0});var VOr=s(MB);Xno=r(VOr,"GLPNFeatureExtractor"),VOr.forEach(t),zno=r(jEe," (GLPN model)"),jEe.forEach(t),Qno=i(se),Hg=n(se,"LI",{});var DEe=s(Hg);ste=n(DEe,"STRONG",{});var XOr=s(ste);Wno=r(XOr,"hubert"),XOr.forEach(t),Hno=r(DEe," \u2014 "),EB=n(DEe,"A",{href:!0});var zOr=s(EB);Uno=r(zOr,"Wav2Vec2FeatureExtractor"),zOr.forEach(t),Jno=r(DEe," (Hubert model)"),DEe.forEach(t),Yno=i(se),Ug=n(se,"LI",{});var GEe=s(Ug);lte=n(GEe,"STRONG",{});var QOr=s(lte);Kno=r(QOr,"layoutlmv2"),QOr.forEach(t),Zno=r(GEe," \u2014 "),CB=n(GEe,"A",{href:!0});var WOr=s(CB);eso=r(WOr,"LayoutLMv2FeatureExtractor"),WOr.forEach(t),oso=r(GEe," (LayoutLMv2 model)"),GEe.forEach(t),rso=i(se),Jg=n(se,"LI",{});var OEe=s(Jg);ite=n(OEe,"STRONG",{});var HOr=s(ite);tso=r(HOr,"maskformer"),HOr.forEach(t),aso=r(OEe," \u2014 "),wB=n(OEe,"A",{href:!0});var UOr=s(wB);nso=r(UOr,"MaskFormerFeatureExtractor"),UOr.forEach(t),sso=r(OEe," (MaskFormer model)"),OEe.forEach(t),lso=i(se),Yg=n(se,"LI",{});var VEe=s(Yg);dte=n(VEe,"STRONG",{});var JOr=s(dte);iso=r(JOr,"perceiver"),JOr.forEach(t),dso=r(VEe," \u2014 "),AB=n(VEe,"A",{href:!0});var YOr=s(AB);cso=r(YOr,"PerceiverFeatureExtractor"),YOr.forEach(t),fso=r(VEe," (Perceiver model)"),VEe.forEach(t),mso=i(se),Kg=n(se,"LI",{});var XEe=s(Kg);cte=n(XEe,"STRONG",{});var KOr=s(cte);gso=r(KOr,"poolformer"),KOr.forEach(t),hso=r(XEe," \u2014 "),yB=n(XEe,"A",{href:!0});var ZOr=s(yB);pso=r(ZOr,"PoolFormerFeatureExtractor"),ZOr.forEach(t),uso=r(XEe," (PoolFormer model)"),XEe.forEach(t),_so=i(se),Zg=n(se,"LI",{});var zEe=s(Zg);fte=n(zEe,"STRONG",{});var eVr=s(fte);bso=r(eVr,"regnet"),eVr.forEach(t),vso=r(zEe," \u2014 "),LB=n(zEe,"A",{href:!0});var oVr=s(LB);Fso=r(oVr,"ConvNextFeatureExtractor"),oVr.forEach(t),Tso=r(zEe," (RegNet model)"),zEe.forEach(t),Mso=i(se),eh=n(se,"LI",{});var QEe=s(eh);mte=n(QEe,"STRONG",{});var rVr=s(mte);Eso=r(rVr,"resnet"),rVr.forEach(t),Cso=r(QEe," \u2014 "),xB=n(QEe,"A",{href:!0});var tVr=s(xB);wso=r(tVr,"ConvNextFeatureExtractor"),tVr.forEach(t),Aso=r(QEe," (ResNet model)"),QEe.forEach(t),yso=i(se),oh=n(se,"LI",{});var WEe=s(oh);gte=n(WEe,"STRONG",{});var aVr=s(gte);Lso=r(aVr,"segformer"),aVr.forEach(t),xso=r(WEe," \u2014 "),$B=n(WEe,"A",{href:!0});var nVr=s($B);$so=r(nVr,"SegformerFeatureExtractor"),nVr.forEach(t),kso=r(WEe," (SegFormer model)"),WEe.forEach(t),Sso=i(se),rh=n(se,"LI",{});var HEe=s(rh);hte=n(HEe,"STRONG",{});var sVr=s(hte);Rso=r(sVr,"speech_to_text"),sVr.forEach(t),Bso=r(HEe," \u2014 "),kB=n(HEe,"A",{href:!0});var lVr=s(kB);Pso=r(lVr,"Speech2TextFeatureExtractor"),lVr.forEach(t),Iso=r(HEe," (Speech2Text model)"),HEe.forEach(t),qso=i(se),th=n(se,"LI",{});var UEe=s(th);pte=n(UEe,"STRONG",{});var iVr=s(pte);Nso=r(iVr,"swin"),iVr.forEach(t),jso=r(UEe," \u2014 "),SB=n(UEe,"A",{href:!0});var dVr=s(SB);Dso=r(dVr,"ViTFeatureExtractor"),dVr.forEach(t),Gso=r(UEe," (Swin model)"),UEe.forEach(t),Oso=i(se),ah=n(se,"LI",{});var JEe=s(ah);ute=n(JEe,"STRONG",{});var cVr=s(ute);Vso=r(cVr,"van"),cVr.forEach(t),Xso=r(JEe," \u2014 "),RB=n(JEe,"A",{href:!0});var fVr=s(RB);zso=r(fVr,"ConvNextFeatureExtractor"),fVr.forEach(t),Qso=r(JEe," (VAN model)"),JEe.forEach(t),Wso=i(se),nh=n(se,"LI",{});var YEe=s(nh);_te=n(YEe,"STRONG",{});var mVr=s(_te);Hso=r(mVr,"vit"),mVr.forEach(t),Uso=r(YEe," \u2014 "),BB=n(YEe,"A",{href:!0});var gVr=s(BB);Jso=r(gVr,"ViTFeatureExtractor"),gVr.forEach(t),Yso=r(YEe," (ViT model)"),YEe.forEach(t),Kso=i(se),sh=n(se,"LI",{});var KEe=s(sh);bte=n(KEe,"STRONG",{});var hVr=s(bte);Zso=r(hVr,"vit_mae"),hVr.forEach(t),elo=r(KEe," \u2014 "),PB=n(KEe,"A",{href:!0});var pVr=s(PB);olo=r(pVr,"ViTFeatureExtractor"),pVr.forEach(t),rlo=r(KEe," (ViTMAE model)"),KEe.forEach(t),tlo=i(se),lh=n(se,"LI",{});var ZEe=s(lh);vte=n(ZEe,"STRONG",{});var uVr=s(vte);alo=r(uVr,"wav2vec2"),uVr.forEach(t),nlo=r(ZEe," \u2014 "),IB=n(ZEe,"A",{href:!0});var _Vr=s(IB);slo=r(_Vr,"Wav2Vec2FeatureExtractor"),_Vr.forEach(t),llo=r(ZEe," (Wav2Vec2 model)"),ZEe.forEach(t),ilo=i(se),ih=n(se,"LI",{});var e5e=s(ih);Fte=n(e5e,"STRONG",{});var bVr=s(Fte);dlo=r(bVr,"yolos"),bVr.forEach(t),clo=r(e5e," \u2014 "),qB=n(e5e,"A",{href:!0});var vVr=s(qB);flo=r(vVr,"YolosFeatureExtractor"),vVr.forEach(t),mlo=r(e5e," (YOLOS model)"),e5e.forEach(t),se.forEach(t),glo=i(Ht),T(dh.$$.fragment,Ht),hlo=i(Ht),T(ch.$$.fragment,Ht),Ht.forEach(t),plo=i(Rs),fh=n(Rs,"DIV",{class:!0});var pIe=s(fh);T(DA.$$.fragment,pIe),ulo=i(pIe),Tte=n(pIe,"P",{});var FVr=s(Tte);_lo=r(FVr,"Register a new feature extractor for this class."),FVr.forEach(t),pIe.forEach(t),Rs.forEach(t),uBe=i(f),gi=n(f,"H2",{class:!0});var uIe=s(gi);mh=n(uIe,"A",{id:!0,class:!0,href:!0});var TVr=s(mh);Mte=n(TVr,"SPAN",{});var MVr=s(Mte);T(GA.$$.fragment,MVr),MVr.forEach(t),TVr.forEach(t),blo=i(uIe),Ete=n(uIe,"SPAN",{});var EVr=s(Ete);vlo=r(EVr,"AutoProcessor"),EVr.forEach(t),uIe.forEach(t),_Be=i(f),yo=n(f,"DIV",{class:!0});var Bs=s(yo);T(OA.$$.fragment,Bs),Flo=i(Bs),VA=n(Bs,"P",{});var _Ie=s(VA);Tlo=r(_Ie,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),NB=n(_Ie,"A",{href:!0});var CVr=s(NB);Mlo=r(CVr,"AutoProcessor.from_pretrained()"),CVr.forEach(t),Elo=r(_Ie," class method."),_Ie.forEach(t),Clo=i(Bs),XA=n(Bs,"P",{});var bIe=s(XA);wlo=r(bIe,"This class cannot be instantiated directly using "),Cte=n(bIe,"CODE",{});var wVr=s(Cte);Alo=r(wVr,"__init__()"),wVr.forEach(t),ylo=r(bIe," (throws an error)."),bIe.forEach(t),Llo=i(Bs),We=n(Bs,"DIV",{class:!0});var Ut=s(We);T(zA.$$.fragment,Ut),xlo=i(Ut),wte=n(Ut,"P",{});var AVr=s(wte);$lo=r(AVr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),AVr.forEach(t),klo=i(Ut),hi=n(Ut,"P",{});var cY=s(hi);Slo=r(cY,"The processor class to instantiate is selected based on the "),Ate=n(cY,"CODE",{});var yVr=s(Ate);Rlo=r(yVr,"model_type"),yVr.forEach(t),Blo=r(cY,` property of the config object (either
passed as an argument or loaded from `),yte=n(cY,"CODE",{});var LVr=s(yte);Plo=r(LVr,"pretrained_model_name_or_path"),LVr.forEach(t),Ilo=r(cY," if possible):"),cY.forEach(t),qlo=i(Ut),be=n(Ut,"UL",{});var Fe=s(be);gh=n(Fe,"LI",{});var o5e=s(gh);Lte=n(o5e,"STRONG",{});var xVr=s(Lte);Nlo=r(xVr,"clip"),xVr.forEach(t),jlo=r(o5e," \u2014 "),jB=n(o5e,"A",{href:!0});var $Vr=s(jB);Dlo=r($Vr,"CLIPProcessor"),$Vr.forEach(t),Glo=r(o5e," (CLIP model)"),o5e.forEach(t),Olo=i(Fe),hh=n(Fe,"LI",{});var r5e=s(hh);xte=n(r5e,"STRONG",{});var kVr=s(xte);Vlo=r(kVr,"layoutlmv2"),kVr.forEach(t),Xlo=r(r5e," \u2014 "),DB=n(r5e,"A",{href:!0});var SVr=s(DB);zlo=r(SVr,"LayoutLMv2Processor"),SVr.forEach(t),Qlo=r(r5e," (LayoutLMv2 model)"),r5e.forEach(t),Wlo=i(Fe),ph=n(Fe,"LI",{});var t5e=s(ph);$te=n(t5e,"STRONG",{});var RVr=s($te);Hlo=r(RVr,"layoutxlm"),RVr.forEach(t),Ulo=r(t5e," \u2014 "),GB=n(t5e,"A",{href:!0});var BVr=s(GB);Jlo=r(BVr,"LayoutXLMProcessor"),BVr.forEach(t),Ylo=r(t5e," (LayoutXLM model)"),t5e.forEach(t),Klo=i(Fe),uh=n(Fe,"LI",{});var a5e=s(uh);kte=n(a5e,"STRONG",{});var PVr=s(kte);Zlo=r(PVr,"sew"),PVr.forEach(t),eio=r(a5e," \u2014 "),OB=n(a5e,"A",{href:!0});var IVr=s(OB);oio=r(IVr,"Wav2Vec2Processor"),IVr.forEach(t),rio=r(a5e," (SEW model)"),a5e.forEach(t),tio=i(Fe),_h=n(Fe,"LI",{});var n5e=s(_h);Ste=n(n5e,"STRONG",{});var qVr=s(Ste);aio=r(qVr,"sew-d"),qVr.forEach(t),nio=r(n5e," \u2014 "),VB=n(n5e,"A",{href:!0});var NVr=s(VB);sio=r(NVr,"Wav2Vec2Processor"),NVr.forEach(t),lio=r(n5e," (SEW-D model)"),n5e.forEach(t),iio=i(Fe),bh=n(Fe,"LI",{});var s5e=s(bh);Rte=n(s5e,"STRONG",{});var jVr=s(Rte);dio=r(jVr,"speech_to_text"),jVr.forEach(t),cio=r(s5e," \u2014 "),XB=n(s5e,"A",{href:!0});var DVr=s(XB);fio=r(DVr,"Speech2TextProcessor"),DVr.forEach(t),mio=r(s5e," (Speech2Text model)"),s5e.forEach(t),gio=i(Fe),vh=n(Fe,"LI",{});var l5e=s(vh);Bte=n(l5e,"STRONG",{});var GVr=s(Bte);hio=r(GVr,"speech_to_text_2"),GVr.forEach(t),pio=r(l5e," \u2014 "),zB=n(l5e,"A",{href:!0});var OVr=s(zB);uio=r(OVr,"Speech2Text2Processor"),OVr.forEach(t),_io=r(l5e," (Speech2Text2 model)"),l5e.forEach(t),bio=i(Fe),Fh=n(Fe,"LI",{});var i5e=s(Fh);Pte=n(i5e,"STRONG",{});var VVr=s(Pte);vio=r(VVr,"trocr"),VVr.forEach(t),Fio=r(i5e," \u2014 "),QB=n(i5e,"A",{href:!0});var XVr=s(QB);Tio=r(XVr,"TrOCRProcessor"),XVr.forEach(t),Mio=r(i5e," (TrOCR model)"),i5e.forEach(t),Eio=i(Fe),Th=n(Fe,"LI",{});var d5e=s(Th);Ite=n(d5e,"STRONG",{});var zVr=s(Ite);Cio=r(zVr,"unispeech"),zVr.forEach(t),wio=r(d5e," \u2014 "),WB=n(d5e,"A",{href:!0});var QVr=s(WB);Aio=r(QVr,"Wav2Vec2Processor"),QVr.forEach(t),yio=r(d5e," (UniSpeech model)"),d5e.forEach(t),Lio=i(Fe),Mh=n(Fe,"LI",{});var c5e=s(Mh);qte=n(c5e,"STRONG",{});var WVr=s(qte);xio=r(WVr,"unispeech-sat"),WVr.forEach(t),$io=r(c5e," \u2014 "),HB=n(c5e,"A",{href:!0});var HVr=s(HB);kio=r(HVr,"Wav2Vec2Processor"),HVr.forEach(t),Sio=r(c5e," (UniSpeechSat model)"),c5e.forEach(t),Rio=i(Fe),Eh=n(Fe,"LI",{});var f5e=s(Eh);Nte=n(f5e,"STRONG",{});var UVr=s(Nte);Bio=r(UVr,"vilt"),UVr.forEach(t),Pio=r(f5e," \u2014 "),UB=n(f5e,"A",{href:!0});var JVr=s(UB);Iio=r(JVr,"ViltProcessor"),JVr.forEach(t),qio=r(f5e," (ViLT model)"),f5e.forEach(t),Nio=i(Fe),Ch=n(Fe,"LI",{});var m5e=s(Ch);jte=n(m5e,"STRONG",{});var YVr=s(jte);jio=r(YVr,"vision-text-dual-encoder"),YVr.forEach(t),Dio=r(m5e," \u2014 "),JB=n(m5e,"A",{href:!0});var KVr=s(JB);Gio=r(KVr,"VisionTextDualEncoderProcessor"),KVr.forEach(t),Oio=r(m5e," (VisionTextDualEncoder model)"),m5e.forEach(t),Vio=i(Fe),wh=n(Fe,"LI",{});var g5e=s(wh);Dte=n(g5e,"STRONG",{});var ZVr=s(Dte);Xio=r(ZVr,"wav2vec2"),ZVr.forEach(t),zio=r(g5e," \u2014 "),YB=n(g5e,"A",{href:!0});var eXr=s(YB);Qio=r(eXr,"Wav2Vec2Processor"),eXr.forEach(t),Wio=r(g5e," (Wav2Vec2 model)"),g5e.forEach(t),Hio=i(Fe),Ah=n(Fe,"LI",{});var h5e=s(Ah);Gte=n(h5e,"STRONG",{});var oXr=s(Gte);Uio=r(oXr,"wavlm"),oXr.forEach(t),Jio=r(h5e," \u2014 "),KB=n(h5e,"A",{href:!0});var rXr=s(KB);Yio=r(rXr,"Wav2Vec2Processor"),rXr.forEach(t),Kio=r(h5e," (WavLM model)"),h5e.forEach(t),Fe.forEach(t),Zio=i(Ut),T(yh.$$.fragment,Ut),edo=i(Ut),T(Lh.$$.fragment,Ut),Ut.forEach(t),odo=i(Bs),xh=n(Bs,"DIV",{class:!0});var vIe=s(xh);T(QA.$$.fragment,vIe),rdo=i(vIe),Ote=n(vIe,"P",{});var tXr=s(Ote);tdo=r(tXr,"Register a new processor for this class."),tXr.forEach(t),vIe.forEach(t),Bs.forEach(t),bBe=i(f),pi=n(f,"H2",{class:!0});var FIe=s(pi);$h=n(FIe,"A",{id:!0,class:!0,href:!0});var aXr=s($h);Vte=n(aXr,"SPAN",{});var nXr=s(Vte);T(WA.$$.fragment,nXr),nXr.forEach(t),aXr.forEach(t),ado=i(FIe),Xte=n(FIe,"SPAN",{});var sXr=s(Xte);ndo=r(sXr,"AutoModel"),sXr.forEach(t),FIe.forEach(t),vBe=i(f),Lo=n(f,"DIV",{class:!0});var Ps=s(Lo);T(HA.$$.fragment,Ps),sdo=i(Ps),ui=n(Ps,"P",{});var fY=s(ui);ldo=r(fY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZB=n(fY,"A",{href:!0});var lXr=s(ZB);ido=r(lXr,"from_pretrained()"),lXr.forEach(t),ddo=r(fY," class method or the "),eP=n(fY,"A",{href:!0});var iXr=s(eP);cdo=r(iXr,"from_config()"),iXr.forEach(t),fdo=r(fY,` class
method.`),fY.forEach(t),mdo=i(Ps),UA=n(Ps,"P",{});var TIe=s(UA);gdo=r(TIe,"This class cannot be instantiated directly using "),zte=n(TIe,"CODE",{});var dXr=s(zte);hdo=r(dXr,"__init__()"),dXr.forEach(t),pdo=r(TIe," (throws an error)."),TIe.forEach(t),udo=i(Ps),Zr=n(Ps,"DIV",{class:!0});var AC=s(Zr);T(JA.$$.fragment,AC),_do=i(AC),Qte=n(AC,"P",{});var cXr=s(Qte);bdo=r(cXr,"Instantiates one of the base model classes of the library from a configuration."),cXr.forEach(t),vdo=i(AC),_i=n(AC,"P",{});var mY=s(_i);Fdo=r(mY,`Note:
Loading a model from its configuration file does `),Wte=n(mY,"STRONG",{});var fXr=s(Wte);Tdo=r(fXr,"not"),fXr.forEach(t),Mdo=r(mY,` load the model weights. It only affects the
model\u2019s configuration. Use `),oP=n(mY,"A",{href:!0});var mXr=s(oP);Edo=r(mXr,"from_pretrained()"),mXr.forEach(t),Cdo=r(mY," to load the model weights."),mY.forEach(t),wdo=i(AC),T(kh.$$.fragment,AC),AC.forEach(t),Ado=i(Ps),He=n(Ps,"DIV",{class:!0});var Jt=s(He);T(YA.$$.fragment,Jt),ydo=i(Jt),Hte=n(Jt,"P",{});var gXr=s(Hte);Ldo=r(gXr,"Instantiate one of the base model classes of the library from a pretrained model."),gXr.forEach(t),xdo=i(Jt),Ea=n(Jt,"P",{});var yC=s(Ea);$do=r(yC,"The model class to instantiate is selected based on the "),Ute=n(yC,"CODE",{});var hXr=s(Ute);kdo=r(hXr,"model_type"),hXr.forEach(t),Sdo=r(yC,` property of the config object (either
passed as an argument or loaded from `),Jte=n(yC,"CODE",{});var pXr=s(Jte);Rdo=r(pXr,"pretrained_model_name_or_path"),pXr.forEach(t),Bdo=r(yC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yte=n(yC,"CODE",{});var uXr=s(Yte);Pdo=r(uXr,"pretrained_model_name_or_path"),uXr.forEach(t),Ido=r(yC,":"),yC.forEach(t),qdo=i(Jt),x=n(Jt,"UL",{});var $=s(x);Sh=n($,"LI",{});var p5e=s(Sh);Kte=n(p5e,"STRONG",{});var _Xr=s(Kte);Ndo=r(_Xr,"albert"),_Xr.forEach(t),jdo=r(p5e," \u2014 "),rP=n(p5e,"A",{href:!0});var bXr=s(rP);Ddo=r(bXr,"AlbertModel"),bXr.forEach(t),Gdo=r(p5e," (ALBERT model)"),p5e.forEach(t),Odo=i($),Rh=n($,"LI",{});var u5e=s(Rh);Zte=n(u5e,"STRONG",{});var vXr=s(Zte);Vdo=r(vXr,"bart"),vXr.forEach(t),Xdo=r(u5e," \u2014 "),tP=n(u5e,"A",{href:!0});var FXr=s(tP);zdo=r(FXr,"BartModel"),FXr.forEach(t),Qdo=r(u5e," (BART model)"),u5e.forEach(t),Wdo=i($),Bh=n($,"LI",{});var _5e=s(Bh);eae=n(_5e,"STRONG",{});var TXr=s(eae);Hdo=r(TXr,"beit"),TXr.forEach(t),Udo=r(_5e," \u2014 "),aP=n(_5e,"A",{href:!0});var MXr=s(aP);Jdo=r(MXr,"BeitModel"),MXr.forEach(t),Ydo=r(_5e," (BEiT model)"),_5e.forEach(t),Kdo=i($),Ph=n($,"LI",{});var b5e=s(Ph);oae=n(b5e,"STRONG",{});var EXr=s(oae);Zdo=r(EXr,"bert"),EXr.forEach(t),eco=r(b5e," \u2014 "),nP=n(b5e,"A",{href:!0});var CXr=s(nP);oco=r(CXr,"BertModel"),CXr.forEach(t),rco=r(b5e," (BERT model)"),b5e.forEach(t),tco=i($),Ih=n($,"LI",{});var v5e=s(Ih);rae=n(v5e,"STRONG",{});var wXr=s(rae);aco=r(wXr,"bert-generation"),wXr.forEach(t),nco=r(v5e," \u2014 "),sP=n(v5e,"A",{href:!0});var AXr=s(sP);sco=r(AXr,"BertGenerationEncoder"),AXr.forEach(t),lco=r(v5e," (Bert Generation model)"),v5e.forEach(t),ico=i($),qh=n($,"LI",{});var F5e=s(qh);tae=n(F5e,"STRONG",{});var yXr=s(tae);dco=r(yXr,"big_bird"),yXr.forEach(t),cco=r(F5e," \u2014 "),lP=n(F5e,"A",{href:!0});var LXr=s(lP);fco=r(LXr,"BigBirdModel"),LXr.forEach(t),mco=r(F5e," (BigBird model)"),F5e.forEach(t),gco=i($),Nh=n($,"LI",{});var T5e=s(Nh);aae=n(T5e,"STRONG",{});var xXr=s(aae);hco=r(xXr,"bigbird_pegasus"),xXr.forEach(t),pco=r(T5e," \u2014 "),iP=n(T5e,"A",{href:!0});var $Xr=s(iP);uco=r($Xr,"BigBirdPegasusModel"),$Xr.forEach(t),_co=r(T5e," (BigBirdPegasus model)"),T5e.forEach(t),bco=i($),jh=n($,"LI",{});var M5e=s(jh);nae=n(M5e,"STRONG",{});var kXr=s(nae);vco=r(kXr,"blenderbot"),kXr.forEach(t),Fco=r(M5e," \u2014 "),dP=n(M5e,"A",{href:!0});var SXr=s(dP);Tco=r(SXr,"BlenderbotModel"),SXr.forEach(t),Mco=r(M5e," (Blenderbot model)"),M5e.forEach(t),Eco=i($),Dh=n($,"LI",{});var E5e=s(Dh);sae=n(E5e,"STRONG",{});var RXr=s(sae);Cco=r(RXr,"blenderbot-small"),RXr.forEach(t),wco=r(E5e," \u2014 "),cP=n(E5e,"A",{href:!0});var BXr=s(cP);Aco=r(BXr,"BlenderbotSmallModel"),BXr.forEach(t),yco=r(E5e," (BlenderbotSmall model)"),E5e.forEach(t),Lco=i($),Gh=n($,"LI",{});var C5e=s(Gh);lae=n(C5e,"STRONG",{});var PXr=s(lae);xco=r(PXr,"camembert"),PXr.forEach(t),$co=r(C5e," \u2014 "),fP=n(C5e,"A",{href:!0});var IXr=s(fP);kco=r(IXr,"CamembertModel"),IXr.forEach(t),Sco=r(C5e," (CamemBERT model)"),C5e.forEach(t),Rco=i($),Oh=n($,"LI",{});var w5e=s(Oh);iae=n(w5e,"STRONG",{});var qXr=s(iae);Bco=r(qXr,"canine"),qXr.forEach(t),Pco=r(w5e," \u2014 "),mP=n(w5e,"A",{href:!0});var NXr=s(mP);Ico=r(NXr,"CanineModel"),NXr.forEach(t),qco=r(w5e," (Canine model)"),w5e.forEach(t),Nco=i($),Vh=n($,"LI",{});var A5e=s(Vh);dae=n(A5e,"STRONG",{});var jXr=s(dae);jco=r(jXr,"clip"),jXr.forEach(t),Dco=r(A5e," \u2014 "),gP=n(A5e,"A",{href:!0});var DXr=s(gP);Gco=r(DXr,"CLIPModel"),DXr.forEach(t),Oco=r(A5e," (CLIP model)"),A5e.forEach(t),Vco=i($),Xh=n($,"LI",{});var y5e=s(Xh);cae=n(y5e,"STRONG",{});var GXr=s(cae);Xco=r(GXr,"convbert"),GXr.forEach(t),zco=r(y5e," \u2014 "),hP=n(y5e,"A",{href:!0});var OXr=s(hP);Qco=r(OXr,"ConvBertModel"),OXr.forEach(t),Wco=r(y5e," (ConvBERT model)"),y5e.forEach(t),Hco=i($),zh=n($,"LI",{});var L5e=s(zh);fae=n(L5e,"STRONG",{});var VXr=s(fae);Uco=r(VXr,"convnext"),VXr.forEach(t),Jco=r(L5e," \u2014 "),pP=n(L5e,"A",{href:!0});var XXr=s(pP);Yco=r(XXr,"ConvNextModel"),XXr.forEach(t),Kco=r(L5e," (ConvNext model)"),L5e.forEach(t),Zco=i($),Qh=n($,"LI",{});var x5e=s(Qh);mae=n(x5e,"STRONG",{});var zXr=s(mae);efo=r(zXr,"ctrl"),zXr.forEach(t),ofo=r(x5e," \u2014 "),uP=n(x5e,"A",{href:!0});var QXr=s(uP);rfo=r(QXr,"CTRLModel"),QXr.forEach(t),tfo=r(x5e," (CTRL model)"),x5e.forEach(t),afo=i($),Wh=n($,"LI",{});var $5e=s(Wh);gae=n($5e,"STRONG",{});var WXr=s(gae);nfo=r(WXr,"data2vec-audio"),WXr.forEach(t),sfo=r($5e," \u2014 "),_P=n($5e,"A",{href:!0});var HXr=s(_P);lfo=r(HXr,"Data2VecAudioModel"),HXr.forEach(t),ifo=r($5e," (Data2VecAudio model)"),$5e.forEach(t),dfo=i($),Hh=n($,"LI",{});var k5e=s(Hh);hae=n(k5e,"STRONG",{});var UXr=s(hae);cfo=r(UXr,"data2vec-text"),UXr.forEach(t),ffo=r(k5e," \u2014 "),bP=n(k5e,"A",{href:!0});var JXr=s(bP);mfo=r(JXr,"Data2VecTextModel"),JXr.forEach(t),gfo=r(k5e," (Data2VecText model)"),k5e.forEach(t),hfo=i($),Uh=n($,"LI",{});var S5e=s(Uh);pae=n(S5e,"STRONG",{});var YXr=s(pae);pfo=r(YXr,"data2vec-vision"),YXr.forEach(t),ufo=r(S5e," \u2014 "),vP=n(S5e,"A",{href:!0});var KXr=s(vP);_fo=r(KXr,"Data2VecVisionModel"),KXr.forEach(t),bfo=r(S5e," (Data2VecVision model)"),S5e.forEach(t),vfo=i($),Jh=n($,"LI",{});var R5e=s(Jh);uae=n(R5e,"STRONG",{});var ZXr=s(uae);Ffo=r(ZXr,"deberta"),ZXr.forEach(t),Tfo=r(R5e," \u2014 "),FP=n(R5e,"A",{href:!0});var ezr=s(FP);Mfo=r(ezr,"DebertaModel"),ezr.forEach(t),Efo=r(R5e," (DeBERTa model)"),R5e.forEach(t),Cfo=i($),Yh=n($,"LI",{});var B5e=s(Yh);_ae=n(B5e,"STRONG",{});var ozr=s(_ae);wfo=r(ozr,"deberta-v2"),ozr.forEach(t),Afo=r(B5e," \u2014 "),TP=n(B5e,"A",{href:!0});var rzr=s(TP);yfo=r(rzr,"DebertaV2Model"),rzr.forEach(t),Lfo=r(B5e," (DeBERTa-v2 model)"),B5e.forEach(t),xfo=i($),Kh=n($,"LI",{});var P5e=s(Kh);bae=n(P5e,"STRONG",{});var tzr=s(bae);$fo=r(tzr,"decision_transformer"),tzr.forEach(t),kfo=r(P5e," \u2014 "),MP=n(P5e,"A",{href:!0});var azr=s(MP);Sfo=r(azr,"DecisionTransformerModel"),azr.forEach(t),Rfo=r(P5e," (Decision Transformer model)"),P5e.forEach(t),Bfo=i($),Zh=n($,"LI",{});var I5e=s(Zh);vae=n(I5e,"STRONG",{});var nzr=s(vae);Pfo=r(nzr,"deit"),nzr.forEach(t),Ifo=r(I5e," \u2014 "),EP=n(I5e,"A",{href:!0});var szr=s(EP);qfo=r(szr,"DeiTModel"),szr.forEach(t),Nfo=r(I5e," (DeiT model)"),I5e.forEach(t),jfo=i($),ep=n($,"LI",{});var q5e=s(ep);Fae=n(q5e,"STRONG",{});var lzr=s(Fae);Dfo=r(lzr,"detr"),lzr.forEach(t),Gfo=r(q5e," \u2014 "),CP=n(q5e,"A",{href:!0});var izr=s(CP);Ofo=r(izr,"DetrModel"),izr.forEach(t),Vfo=r(q5e," (DETR model)"),q5e.forEach(t),Xfo=i($),op=n($,"LI",{});var N5e=s(op);Tae=n(N5e,"STRONG",{});var dzr=s(Tae);zfo=r(dzr,"distilbert"),dzr.forEach(t),Qfo=r(N5e," \u2014 "),wP=n(N5e,"A",{href:!0});var czr=s(wP);Wfo=r(czr,"DistilBertModel"),czr.forEach(t),Hfo=r(N5e," (DistilBERT model)"),N5e.forEach(t),Ufo=i($),rp=n($,"LI",{});var j5e=s(rp);Mae=n(j5e,"STRONG",{});var fzr=s(Mae);Jfo=r(fzr,"dpr"),fzr.forEach(t),Yfo=r(j5e," \u2014 "),AP=n(j5e,"A",{href:!0});var mzr=s(AP);Kfo=r(mzr,"DPRQuestionEncoder"),mzr.forEach(t),Zfo=r(j5e," (DPR model)"),j5e.forEach(t),emo=i($),tp=n($,"LI",{});var D5e=s(tp);Eae=n(D5e,"STRONG",{});var gzr=s(Eae);omo=r(gzr,"dpt"),gzr.forEach(t),rmo=r(D5e," \u2014 "),yP=n(D5e,"A",{href:!0});var hzr=s(yP);tmo=r(hzr,"DPTModel"),hzr.forEach(t),amo=r(D5e," (DPT model)"),D5e.forEach(t),nmo=i($),ap=n($,"LI",{});var G5e=s(ap);Cae=n(G5e,"STRONG",{});var pzr=s(Cae);smo=r(pzr,"electra"),pzr.forEach(t),lmo=r(G5e," \u2014 "),LP=n(G5e,"A",{href:!0});var uzr=s(LP);imo=r(uzr,"ElectraModel"),uzr.forEach(t),dmo=r(G5e," (ELECTRA model)"),G5e.forEach(t),cmo=i($),np=n($,"LI",{});var O5e=s(np);wae=n(O5e,"STRONG",{});var _zr=s(wae);fmo=r(_zr,"flaubert"),_zr.forEach(t),mmo=r(O5e," \u2014 "),xP=n(O5e,"A",{href:!0});var bzr=s(xP);gmo=r(bzr,"FlaubertModel"),bzr.forEach(t),hmo=r(O5e," (FlauBERT model)"),O5e.forEach(t),pmo=i($),sp=n($,"LI",{});var V5e=s(sp);Aae=n(V5e,"STRONG",{});var vzr=s(Aae);umo=r(vzr,"fnet"),vzr.forEach(t),_mo=r(V5e," \u2014 "),$P=n(V5e,"A",{href:!0});var Fzr=s($P);bmo=r(Fzr,"FNetModel"),Fzr.forEach(t),vmo=r(V5e," (FNet model)"),V5e.forEach(t),Fmo=i($),lp=n($,"LI",{});var X5e=s(lp);yae=n(X5e,"STRONG",{});var Tzr=s(yae);Tmo=r(Tzr,"fsmt"),Tzr.forEach(t),Mmo=r(X5e," \u2014 "),kP=n(X5e,"A",{href:!0});var Mzr=s(kP);Emo=r(Mzr,"FSMTModel"),Mzr.forEach(t),Cmo=r(X5e," (FairSeq Machine-Translation model)"),X5e.forEach(t),wmo=i($),Ls=n($,"LI",{});var $9=s(Ls);Lae=n($9,"STRONG",{});var Ezr=s(Lae);Amo=r(Ezr,"funnel"),Ezr.forEach(t),ymo=r($9," \u2014 "),SP=n($9,"A",{href:!0});var Czr=s(SP);Lmo=r(Czr,"FunnelModel"),Czr.forEach(t),xmo=r($9," or "),RP=n($9,"A",{href:!0});var wzr=s(RP);$mo=r(wzr,"FunnelBaseModel"),wzr.forEach(t),kmo=r($9," (Funnel Transformer model)"),$9.forEach(t),Smo=i($),ip=n($,"LI",{});var z5e=s(ip);xae=n(z5e,"STRONG",{});var Azr=s(xae);Rmo=r(Azr,"glpn"),Azr.forEach(t),Bmo=r(z5e," \u2014 "),BP=n(z5e,"A",{href:!0});var yzr=s(BP);Pmo=r(yzr,"GLPNModel"),yzr.forEach(t),Imo=r(z5e," (GLPN model)"),z5e.forEach(t),qmo=i($),dp=n($,"LI",{});var Q5e=s(dp);$ae=n(Q5e,"STRONG",{});var Lzr=s($ae);Nmo=r(Lzr,"gpt2"),Lzr.forEach(t),jmo=r(Q5e," \u2014 "),PP=n(Q5e,"A",{href:!0});var xzr=s(PP);Dmo=r(xzr,"GPT2Model"),xzr.forEach(t),Gmo=r(Q5e," (OpenAI GPT-2 model)"),Q5e.forEach(t),Omo=i($),cp=n($,"LI",{});var W5e=s(cp);kae=n(W5e,"STRONG",{});var $zr=s(kae);Vmo=r($zr,"gpt_neo"),$zr.forEach(t),Xmo=r(W5e," \u2014 "),IP=n(W5e,"A",{href:!0});var kzr=s(IP);zmo=r(kzr,"GPTNeoModel"),kzr.forEach(t),Qmo=r(W5e," (GPT Neo model)"),W5e.forEach(t),Wmo=i($),fp=n($,"LI",{});var H5e=s(fp);Sae=n(H5e,"STRONG",{});var Szr=s(Sae);Hmo=r(Szr,"gptj"),Szr.forEach(t),Umo=r(H5e," \u2014 "),qP=n(H5e,"A",{href:!0});var Rzr=s(qP);Jmo=r(Rzr,"GPTJModel"),Rzr.forEach(t),Ymo=r(H5e," (GPT-J model)"),H5e.forEach(t),Kmo=i($),mp=n($,"LI",{});var U5e=s(mp);Rae=n(U5e,"STRONG",{});var Bzr=s(Rae);Zmo=r(Bzr,"hubert"),Bzr.forEach(t),ego=r(U5e," \u2014 "),NP=n(U5e,"A",{href:!0});var Pzr=s(NP);ogo=r(Pzr,"HubertModel"),Pzr.forEach(t),rgo=r(U5e," (Hubert model)"),U5e.forEach(t),tgo=i($),gp=n($,"LI",{});var J5e=s(gp);Bae=n(J5e,"STRONG",{});var Izr=s(Bae);ago=r(Izr,"ibert"),Izr.forEach(t),ngo=r(J5e," \u2014 "),jP=n(J5e,"A",{href:!0});var qzr=s(jP);sgo=r(qzr,"IBertModel"),qzr.forEach(t),lgo=r(J5e," (I-BERT model)"),J5e.forEach(t),igo=i($),hp=n($,"LI",{});var Y5e=s(hp);Pae=n(Y5e,"STRONG",{});var Nzr=s(Pae);dgo=r(Nzr,"imagegpt"),Nzr.forEach(t),cgo=r(Y5e," \u2014 "),DP=n(Y5e,"A",{href:!0});var jzr=s(DP);fgo=r(jzr,"ImageGPTModel"),jzr.forEach(t),mgo=r(Y5e," (ImageGPT model)"),Y5e.forEach(t),ggo=i($),pp=n($,"LI",{});var K5e=s(pp);Iae=n(K5e,"STRONG",{});var Dzr=s(Iae);hgo=r(Dzr,"layoutlm"),Dzr.forEach(t),pgo=r(K5e," \u2014 "),GP=n(K5e,"A",{href:!0});var Gzr=s(GP);ugo=r(Gzr,"LayoutLMModel"),Gzr.forEach(t),_go=r(K5e," (LayoutLM model)"),K5e.forEach(t),bgo=i($),up=n($,"LI",{});var Z5e=s(up);qae=n(Z5e,"STRONG",{});var Ozr=s(qae);vgo=r(Ozr,"layoutlmv2"),Ozr.forEach(t),Fgo=r(Z5e," \u2014 "),OP=n(Z5e,"A",{href:!0});var Vzr=s(OP);Tgo=r(Vzr,"LayoutLMv2Model"),Vzr.forEach(t),Mgo=r(Z5e," (LayoutLMv2 model)"),Z5e.forEach(t),Ego=i($),_p=n($,"LI",{});var eCe=s(_p);Nae=n(eCe,"STRONG",{});var Xzr=s(Nae);Cgo=r(Xzr,"led"),Xzr.forEach(t),wgo=r(eCe," \u2014 "),VP=n(eCe,"A",{href:!0});var zzr=s(VP);Ago=r(zzr,"LEDModel"),zzr.forEach(t),ygo=r(eCe," (LED model)"),eCe.forEach(t),Lgo=i($),bp=n($,"LI",{});var oCe=s(bp);jae=n(oCe,"STRONG",{});var Qzr=s(jae);xgo=r(Qzr,"longformer"),Qzr.forEach(t),$go=r(oCe," \u2014 "),XP=n(oCe,"A",{href:!0});var Wzr=s(XP);kgo=r(Wzr,"LongformerModel"),Wzr.forEach(t),Sgo=r(oCe," (Longformer model)"),oCe.forEach(t),Rgo=i($),vp=n($,"LI",{});var rCe=s(vp);Dae=n(rCe,"STRONG",{});var Hzr=s(Dae);Bgo=r(Hzr,"luke"),Hzr.forEach(t),Pgo=r(rCe," \u2014 "),zP=n(rCe,"A",{href:!0});var Uzr=s(zP);Igo=r(Uzr,"LukeModel"),Uzr.forEach(t),qgo=r(rCe," (LUKE model)"),rCe.forEach(t),Ngo=i($),Fp=n($,"LI",{});var tCe=s(Fp);Gae=n(tCe,"STRONG",{});var Jzr=s(Gae);jgo=r(Jzr,"lxmert"),Jzr.forEach(t),Dgo=r(tCe," \u2014 "),QP=n(tCe,"A",{href:!0});var Yzr=s(QP);Ggo=r(Yzr,"LxmertModel"),Yzr.forEach(t),Ogo=r(tCe," (LXMERT model)"),tCe.forEach(t),Vgo=i($),Tp=n($,"LI",{});var aCe=s(Tp);Oae=n(aCe,"STRONG",{});var Kzr=s(Oae);Xgo=r(Kzr,"m2m_100"),Kzr.forEach(t),zgo=r(aCe," \u2014 "),WP=n(aCe,"A",{href:!0});var Zzr=s(WP);Qgo=r(Zzr,"M2M100Model"),Zzr.forEach(t),Wgo=r(aCe," (M2M100 model)"),aCe.forEach(t),Hgo=i($),Mp=n($,"LI",{});var nCe=s(Mp);Vae=n(nCe,"STRONG",{});var eQr=s(Vae);Ugo=r(eQr,"marian"),eQr.forEach(t),Jgo=r(nCe," \u2014 "),HP=n(nCe,"A",{href:!0});var oQr=s(HP);Ygo=r(oQr,"MarianModel"),oQr.forEach(t),Kgo=r(nCe," (Marian model)"),nCe.forEach(t),Zgo=i($),Ep=n($,"LI",{});var sCe=s(Ep);Xae=n(sCe,"STRONG",{});var rQr=s(Xae);eho=r(rQr,"maskformer"),rQr.forEach(t),oho=r(sCe," \u2014 "),UP=n(sCe,"A",{href:!0});var tQr=s(UP);rho=r(tQr,"MaskFormerModel"),tQr.forEach(t),tho=r(sCe," (MaskFormer model)"),sCe.forEach(t),aho=i($),Cp=n($,"LI",{});var lCe=s(Cp);zae=n(lCe,"STRONG",{});var aQr=s(zae);nho=r(aQr,"mbart"),aQr.forEach(t),sho=r(lCe," \u2014 "),JP=n(lCe,"A",{href:!0});var nQr=s(JP);lho=r(nQr,"MBartModel"),nQr.forEach(t),iho=r(lCe," (mBART model)"),lCe.forEach(t),dho=i($),wp=n($,"LI",{});var iCe=s(wp);Qae=n(iCe,"STRONG",{});var sQr=s(Qae);cho=r(sQr,"megatron-bert"),sQr.forEach(t),fho=r(iCe," \u2014 "),YP=n(iCe,"A",{href:!0});var lQr=s(YP);mho=r(lQr,"MegatronBertModel"),lQr.forEach(t),gho=r(iCe," (MegatronBert model)"),iCe.forEach(t),hho=i($),Ap=n($,"LI",{});var dCe=s(Ap);Wae=n(dCe,"STRONG",{});var iQr=s(Wae);pho=r(iQr,"mobilebert"),iQr.forEach(t),uho=r(dCe," \u2014 "),KP=n(dCe,"A",{href:!0});var dQr=s(KP);_ho=r(dQr,"MobileBertModel"),dQr.forEach(t),bho=r(dCe," (MobileBERT model)"),dCe.forEach(t),vho=i($),yp=n($,"LI",{});var cCe=s(yp);Hae=n(cCe,"STRONG",{});var cQr=s(Hae);Fho=r(cQr,"mpnet"),cQr.forEach(t),Tho=r(cCe," \u2014 "),ZP=n(cCe,"A",{href:!0});var fQr=s(ZP);Mho=r(fQr,"MPNetModel"),fQr.forEach(t),Eho=r(cCe," (MPNet model)"),cCe.forEach(t),Cho=i($),Lp=n($,"LI",{});var fCe=s(Lp);Uae=n(fCe,"STRONG",{});var mQr=s(Uae);who=r(mQr,"mt5"),mQr.forEach(t),Aho=r(fCe," \u2014 "),eI=n(fCe,"A",{href:!0});var gQr=s(eI);yho=r(gQr,"MT5Model"),gQr.forEach(t),Lho=r(fCe," (mT5 model)"),fCe.forEach(t),xho=i($),xp=n($,"LI",{});var mCe=s(xp);Jae=n(mCe,"STRONG",{});var hQr=s(Jae);$ho=r(hQr,"nystromformer"),hQr.forEach(t),kho=r(mCe," \u2014 "),oI=n(mCe,"A",{href:!0});var pQr=s(oI);Sho=r(pQr,"NystromformerModel"),pQr.forEach(t),Rho=r(mCe," (Nystromformer model)"),mCe.forEach(t),Bho=i($),$p=n($,"LI",{});var gCe=s($p);Yae=n(gCe,"STRONG",{});var uQr=s(Yae);Pho=r(uQr,"openai-gpt"),uQr.forEach(t),Iho=r(gCe," \u2014 "),rI=n(gCe,"A",{href:!0});var _Qr=s(rI);qho=r(_Qr,"OpenAIGPTModel"),_Qr.forEach(t),Nho=r(gCe," (OpenAI GPT model)"),gCe.forEach(t),jho=i($),kp=n($,"LI",{});var hCe=s(kp);Kae=n(hCe,"STRONG",{});var bQr=s(Kae);Dho=r(bQr,"pegasus"),bQr.forEach(t),Gho=r(hCe," \u2014 "),tI=n(hCe,"A",{href:!0});var vQr=s(tI);Oho=r(vQr,"PegasusModel"),vQr.forEach(t),Vho=r(hCe," (Pegasus model)"),hCe.forEach(t),Xho=i($),Sp=n($,"LI",{});var pCe=s(Sp);Zae=n(pCe,"STRONG",{});var FQr=s(Zae);zho=r(FQr,"perceiver"),FQr.forEach(t),Qho=r(pCe," \u2014 "),aI=n(pCe,"A",{href:!0});var TQr=s(aI);Who=r(TQr,"PerceiverModel"),TQr.forEach(t),Hho=r(pCe," (Perceiver model)"),pCe.forEach(t),Uho=i($),Rp=n($,"LI",{});var uCe=s(Rp);ene=n(uCe,"STRONG",{});var MQr=s(ene);Jho=r(MQr,"plbart"),MQr.forEach(t),Yho=r(uCe," \u2014 "),nI=n(uCe,"A",{href:!0});var EQr=s(nI);Kho=r(EQr,"PLBartModel"),EQr.forEach(t),Zho=r(uCe," (PLBart model)"),uCe.forEach(t),epo=i($),Bp=n($,"LI",{});var _Ce=s(Bp);one=n(_Ce,"STRONG",{});var CQr=s(one);opo=r(CQr,"poolformer"),CQr.forEach(t),rpo=r(_Ce," \u2014 "),sI=n(_Ce,"A",{href:!0});var wQr=s(sI);tpo=r(wQr,"PoolFormerModel"),wQr.forEach(t),apo=r(_Ce," (PoolFormer model)"),_Ce.forEach(t),npo=i($),Pp=n($,"LI",{});var bCe=s(Pp);rne=n(bCe,"STRONG",{});var AQr=s(rne);spo=r(AQr,"prophetnet"),AQr.forEach(t),lpo=r(bCe," \u2014 "),lI=n(bCe,"A",{href:!0});var yQr=s(lI);ipo=r(yQr,"ProphetNetModel"),yQr.forEach(t),dpo=r(bCe," (ProphetNet model)"),bCe.forEach(t),cpo=i($),Ip=n($,"LI",{});var vCe=s(Ip);tne=n(vCe,"STRONG",{});var LQr=s(tne);fpo=r(LQr,"qdqbert"),LQr.forEach(t),mpo=r(vCe," \u2014 "),iI=n(vCe,"A",{href:!0});var xQr=s(iI);gpo=r(xQr,"QDQBertModel"),xQr.forEach(t),hpo=r(vCe," (QDQBert model)"),vCe.forEach(t),ppo=i($),qp=n($,"LI",{});var FCe=s(qp);ane=n(FCe,"STRONG",{});var $Qr=s(ane);upo=r($Qr,"reformer"),$Qr.forEach(t),_po=r(FCe," \u2014 "),dI=n(FCe,"A",{href:!0});var kQr=s(dI);bpo=r(kQr,"ReformerModel"),kQr.forEach(t),vpo=r(FCe," (Reformer model)"),FCe.forEach(t),Fpo=i($),Np=n($,"LI",{});var TCe=s(Np);nne=n(TCe,"STRONG",{});var SQr=s(nne);Tpo=r(SQr,"regnet"),SQr.forEach(t),Mpo=r(TCe," \u2014 "),cI=n(TCe,"A",{href:!0});var RQr=s(cI);Epo=r(RQr,"RegNetModel"),RQr.forEach(t),Cpo=r(TCe," (RegNet model)"),TCe.forEach(t),wpo=i($),jp=n($,"LI",{});var MCe=s(jp);sne=n(MCe,"STRONG",{});var BQr=s(sne);Apo=r(BQr,"rembert"),BQr.forEach(t),ypo=r(MCe," \u2014 "),fI=n(MCe,"A",{href:!0});var PQr=s(fI);Lpo=r(PQr,"RemBertModel"),PQr.forEach(t),xpo=r(MCe," (RemBERT model)"),MCe.forEach(t),$po=i($),Dp=n($,"LI",{});var ECe=s(Dp);lne=n(ECe,"STRONG",{});var IQr=s(lne);kpo=r(IQr,"resnet"),IQr.forEach(t),Spo=r(ECe," \u2014 "),mI=n(ECe,"A",{href:!0});var qQr=s(mI);Rpo=r(qQr,"ResNetModel"),qQr.forEach(t),Bpo=r(ECe," (ResNet model)"),ECe.forEach(t),Ppo=i($),Gp=n($,"LI",{});var CCe=s(Gp);ine=n(CCe,"STRONG",{});var NQr=s(ine);Ipo=r(NQr,"retribert"),NQr.forEach(t),qpo=r(CCe," \u2014 "),gI=n(CCe,"A",{href:!0});var jQr=s(gI);Npo=r(jQr,"RetriBertModel"),jQr.forEach(t),jpo=r(CCe," (RetriBERT model)"),CCe.forEach(t),Dpo=i($),Op=n($,"LI",{});var wCe=s(Op);dne=n(wCe,"STRONG",{});var DQr=s(dne);Gpo=r(DQr,"roberta"),DQr.forEach(t),Opo=r(wCe," \u2014 "),hI=n(wCe,"A",{href:!0});var GQr=s(hI);Vpo=r(GQr,"RobertaModel"),GQr.forEach(t),Xpo=r(wCe," (RoBERTa model)"),wCe.forEach(t),zpo=i($),Vp=n($,"LI",{});var ACe=s(Vp);cne=n(ACe,"STRONG",{});var OQr=s(cne);Qpo=r(OQr,"roformer"),OQr.forEach(t),Wpo=r(ACe," \u2014 "),pI=n(ACe,"A",{href:!0});var VQr=s(pI);Hpo=r(VQr,"RoFormerModel"),VQr.forEach(t),Upo=r(ACe," (RoFormer model)"),ACe.forEach(t),Jpo=i($),Xp=n($,"LI",{});var yCe=s(Xp);fne=n(yCe,"STRONG",{});var XQr=s(fne);Ypo=r(XQr,"segformer"),XQr.forEach(t),Kpo=r(yCe," \u2014 "),uI=n(yCe,"A",{href:!0});var zQr=s(uI);Zpo=r(zQr,"SegformerModel"),zQr.forEach(t),euo=r(yCe," (SegFormer model)"),yCe.forEach(t),ouo=i($),zp=n($,"LI",{});var LCe=s(zp);mne=n(LCe,"STRONG",{});var QQr=s(mne);ruo=r(QQr,"sew"),QQr.forEach(t),tuo=r(LCe," \u2014 "),_I=n(LCe,"A",{href:!0});var WQr=s(_I);auo=r(WQr,"SEWModel"),WQr.forEach(t),nuo=r(LCe," (SEW model)"),LCe.forEach(t),suo=i($),Qp=n($,"LI",{});var xCe=s(Qp);gne=n(xCe,"STRONG",{});var HQr=s(gne);luo=r(HQr,"sew-d"),HQr.forEach(t),iuo=r(xCe," \u2014 "),bI=n(xCe,"A",{href:!0});var UQr=s(bI);duo=r(UQr,"SEWDModel"),UQr.forEach(t),cuo=r(xCe," (SEW-D model)"),xCe.forEach(t),fuo=i($),Wp=n($,"LI",{});var $Ce=s(Wp);hne=n($Ce,"STRONG",{});var JQr=s(hne);muo=r(JQr,"speech_to_text"),JQr.forEach(t),guo=r($Ce," \u2014 "),vI=n($Ce,"A",{href:!0});var YQr=s(vI);huo=r(YQr,"Speech2TextModel"),YQr.forEach(t),puo=r($Ce," (Speech2Text model)"),$Ce.forEach(t),uuo=i($),Hp=n($,"LI",{});var kCe=s(Hp);pne=n(kCe,"STRONG",{});var KQr=s(pne);_uo=r(KQr,"splinter"),KQr.forEach(t),buo=r(kCe," \u2014 "),FI=n(kCe,"A",{href:!0});var ZQr=s(FI);vuo=r(ZQr,"SplinterModel"),ZQr.forEach(t),Fuo=r(kCe," (Splinter model)"),kCe.forEach(t),Tuo=i($),Up=n($,"LI",{});var SCe=s(Up);une=n(SCe,"STRONG",{});var eWr=s(une);Muo=r(eWr,"squeezebert"),eWr.forEach(t),Euo=r(SCe," \u2014 "),TI=n(SCe,"A",{href:!0});var oWr=s(TI);Cuo=r(oWr,"SqueezeBertModel"),oWr.forEach(t),wuo=r(SCe," (SqueezeBERT model)"),SCe.forEach(t),Auo=i($),Jp=n($,"LI",{});var RCe=s(Jp);_ne=n(RCe,"STRONG",{});var rWr=s(_ne);yuo=r(rWr,"swin"),rWr.forEach(t),Luo=r(RCe," \u2014 "),MI=n(RCe,"A",{href:!0});var tWr=s(MI);xuo=r(tWr,"SwinModel"),tWr.forEach(t),$uo=r(RCe," (Swin model)"),RCe.forEach(t),kuo=i($),Yp=n($,"LI",{});var BCe=s(Yp);bne=n(BCe,"STRONG",{});var aWr=s(bne);Suo=r(aWr,"t5"),aWr.forEach(t),Ruo=r(BCe," \u2014 "),EI=n(BCe,"A",{href:!0});var nWr=s(EI);Buo=r(nWr,"T5Model"),nWr.forEach(t),Puo=r(BCe," (T5 model)"),BCe.forEach(t),Iuo=i($),Kp=n($,"LI",{});var PCe=s(Kp);vne=n(PCe,"STRONG",{});var sWr=s(vne);quo=r(sWr,"tapas"),sWr.forEach(t),Nuo=r(PCe," \u2014 "),CI=n(PCe,"A",{href:!0});var lWr=s(CI);juo=r(lWr,"TapasModel"),lWr.forEach(t),Duo=r(PCe," (TAPAS model)"),PCe.forEach(t),Guo=i($),Zp=n($,"LI",{});var ICe=s(Zp);Fne=n(ICe,"STRONG",{});var iWr=s(Fne);Ouo=r(iWr,"transfo-xl"),iWr.forEach(t),Vuo=r(ICe," \u2014 "),wI=n(ICe,"A",{href:!0});var dWr=s(wI);Xuo=r(dWr,"TransfoXLModel"),dWr.forEach(t),zuo=r(ICe," (Transformer-XL model)"),ICe.forEach(t),Quo=i($),eu=n($,"LI",{});var qCe=s(eu);Tne=n(qCe,"STRONG",{});var cWr=s(Tne);Wuo=r(cWr,"unispeech"),cWr.forEach(t),Huo=r(qCe," \u2014 "),AI=n(qCe,"A",{href:!0});var fWr=s(AI);Uuo=r(fWr,"UniSpeechModel"),fWr.forEach(t),Juo=r(qCe," (UniSpeech model)"),qCe.forEach(t),Yuo=i($),ou=n($,"LI",{});var NCe=s(ou);Mne=n(NCe,"STRONG",{});var mWr=s(Mne);Kuo=r(mWr,"unispeech-sat"),mWr.forEach(t),Zuo=r(NCe," \u2014 "),yI=n(NCe,"A",{href:!0});var gWr=s(yI);e_o=r(gWr,"UniSpeechSatModel"),gWr.forEach(t),o_o=r(NCe," (UniSpeechSat model)"),NCe.forEach(t),r_o=i($),ru=n($,"LI",{});var jCe=s(ru);Ene=n(jCe,"STRONG",{});var hWr=s(Ene);t_o=r(hWr,"van"),hWr.forEach(t),a_o=r(jCe," \u2014 "),LI=n(jCe,"A",{href:!0});var pWr=s(LI);n_o=r(pWr,"VanModel"),pWr.forEach(t),s_o=r(jCe," (VAN model)"),jCe.forEach(t),l_o=i($),tu=n($,"LI",{});var DCe=s(tu);Cne=n(DCe,"STRONG",{});var uWr=s(Cne);i_o=r(uWr,"vilt"),uWr.forEach(t),d_o=r(DCe," \u2014 "),xI=n(DCe,"A",{href:!0});var _Wr=s(xI);c_o=r(_Wr,"ViltModel"),_Wr.forEach(t),f_o=r(DCe," (ViLT model)"),DCe.forEach(t),m_o=i($),au=n($,"LI",{});var GCe=s(au);wne=n(GCe,"STRONG",{});var bWr=s(wne);g_o=r(bWr,"vision-text-dual-encoder"),bWr.forEach(t),h_o=r(GCe," \u2014 "),$I=n(GCe,"A",{href:!0});var vWr=s($I);p_o=r(vWr,"VisionTextDualEncoderModel"),vWr.forEach(t),u_o=r(GCe," (VisionTextDualEncoder model)"),GCe.forEach(t),__o=i($),nu=n($,"LI",{});var OCe=s(nu);Ane=n(OCe,"STRONG",{});var FWr=s(Ane);b_o=r(FWr,"visual_bert"),FWr.forEach(t),v_o=r(OCe," \u2014 "),kI=n(OCe,"A",{href:!0});var TWr=s(kI);F_o=r(TWr,"VisualBertModel"),TWr.forEach(t),T_o=r(OCe," (VisualBert model)"),OCe.forEach(t),M_o=i($),su=n($,"LI",{});var VCe=s(su);yne=n(VCe,"STRONG",{});var MWr=s(yne);E_o=r(MWr,"vit"),MWr.forEach(t),C_o=r(VCe," \u2014 "),SI=n(VCe,"A",{href:!0});var EWr=s(SI);w_o=r(EWr,"ViTModel"),EWr.forEach(t),A_o=r(VCe," (ViT model)"),VCe.forEach(t),y_o=i($),lu=n($,"LI",{});var XCe=s(lu);Lne=n(XCe,"STRONG",{});var CWr=s(Lne);L_o=r(CWr,"vit_mae"),CWr.forEach(t),x_o=r(XCe," \u2014 "),RI=n(XCe,"A",{href:!0});var wWr=s(RI);$_o=r(wWr,"ViTMAEModel"),wWr.forEach(t),k_o=r(XCe," (ViTMAE model)"),XCe.forEach(t),S_o=i($),iu=n($,"LI",{});var zCe=s(iu);xne=n(zCe,"STRONG",{});var AWr=s(xne);R_o=r(AWr,"wav2vec2"),AWr.forEach(t),B_o=r(zCe," \u2014 "),BI=n(zCe,"A",{href:!0});var yWr=s(BI);P_o=r(yWr,"Wav2Vec2Model"),yWr.forEach(t),I_o=r(zCe," (Wav2Vec2 model)"),zCe.forEach(t),q_o=i($),du=n($,"LI",{});var QCe=s(du);$ne=n(QCe,"STRONG",{});var LWr=s($ne);N_o=r(LWr,"wavlm"),LWr.forEach(t),j_o=r(QCe," \u2014 "),PI=n(QCe,"A",{href:!0});var xWr=s(PI);D_o=r(xWr,"WavLMModel"),xWr.forEach(t),G_o=r(QCe," (WavLM model)"),QCe.forEach(t),O_o=i($),cu=n($,"LI",{});var WCe=s(cu);kne=n(WCe,"STRONG",{});var $Wr=s(kne);V_o=r($Wr,"xglm"),$Wr.forEach(t),X_o=r(WCe," \u2014 "),II=n(WCe,"A",{href:!0});var kWr=s(II);z_o=r(kWr,"XGLMModel"),kWr.forEach(t),Q_o=r(WCe," (XGLM model)"),WCe.forEach(t),W_o=i($),fu=n($,"LI",{});var HCe=s(fu);Sne=n(HCe,"STRONG",{});var SWr=s(Sne);H_o=r(SWr,"xlm"),SWr.forEach(t),U_o=r(HCe," \u2014 "),qI=n(HCe,"A",{href:!0});var RWr=s(qI);J_o=r(RWr,"XLMModel"),RWr.forEach(t),Y_o=r(HCe," (XLM model)"),HCe.forEach(t),K_o=i($),mu=n($,"LI",{});var UCe=s(mu);Rne=n(UCe,"STRONG",{});var BWr=s(Rne);Z_o=r(BWr,"xlm-prophetnet"),BWr.forEach(t),e1o=r(UCe," \u2014 "),NI=n(UCe,"A",{href:!0});var PWr=s(NI);o1o=r(PWr,"XLMProphetNetModel"),PWr.forEach(t),r1o=r(UCe," (XLMProphetNet model)"),UCe.forEach(t),t1o=i($),gu=n($,"LI",{});var JCe=s(gu);Bne=n(JCe,"STRONG",{});var IWr=s(Bne);a1o=r(IWr,"xlm-roberta"),IWr.forEach(t),n1o=r(JCe," \u2014 "),jI=n(JCe,"A",{href:!0});var qWr=s(jI);s1o=r(qWr,"XLMRobertaModel"),qWr.forEach(t),l1o=r(JCe," (XLM-RoBERTa model)"),JCe.forEach(t),i1o=i($),hu=n($,"LI",{});var YCe=s(hu);Pne=n(YCe,"STRONG",{});var NWr=s(Pne);d1o=r(NWr,"xlm-roberta-xl"),NWr.forEach(t),c1o=r(YCe," \u2014 "),DI=n(YCe,"A",{href:!0});var jWr=s(DI);f1o=r(jWr,"XLMRobertaXLModel"),jWr.forEach(t),m1o=r(YCe," (XLM-RoBERTa-XL model)"),YCe.forEach(t),g1o=i($),pu=n($,"LI",{});var KCe=s(pu);Ine=n(KCe,"STRONG",{});var DWr=s(Ine);h1o=r(DWr,"xlnet"),DWr.forEach(t),p1o=r(KCe," \u2014 "),GI=n(KCe,"A",{href:!0});var GWr=s(GI);u1o=r(GWr,"XLNetModel"),GWr.forEach(t),_1o=r(KCe," (XLNet model)"),KCe.forEach(t),b1o=i($),uu=n($,"LI",{});var ZCe=s(uu);qne=n(ZCe,"STRONG",{});var OWr=s(qne);v1o=r(OWr,"yolos"),OWr.forEach(t),F1o=r(ZCe," \u2014 "),OI=n(ZCe,"A",{href:!0});var VWr=s(OI);T1o=r(VWr,"YolosModel"),VWr.forEach(t),M1o=r(ZCe," (YOLOS model)"),ZCe.forEach(t),E1o=i($),_u=n($,"LI",{});var ewe=s(_u);Nne=n(ewe,"STRONG",{});var XWr=s(Nne);C1o=r(XWr,"yoso"),XWr.forEach(t),w1o=r(ewe," \u2014 "),VI=n(ewe,"A",{href:!0});var zWr=s(VI);A1o=r(zWr,"YosoModel"),zWr.forEach(t),y1o=r(ewe," (YOSO model)"),ewe.forEach(t),$.forEach(t),L1o=i(Jt),bu=n(Jt,"P",{});var owe=s(bu);x1o=r(owe,"The model is set in evaluation mode by default using "),jne=n(owe,"CODE",{});var QWr=s(jne);$1o=r(QWr,"model.eval()"),QWr.forEach(t),k1o=r(owe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dne=n(owe,"CODE",{});var WWr=s(Dne);S1o=r(WWr,"model.train()"),WWr.forEach(t),owe.forEach(t),R1o=i(Jt),T(vu.$$.fragment,Jt),Jt.forEach(t),Ps.forEach(t),FBe=i(f),bi=n(f,"H2",{class:!0});var MIe=s(bi);Fu=n(MIe,"A",{id:!0,class:!0,href:!0});var HWr=s(Fu);Gne=n(HWr,"SPAN",{});var UWr=s(Gne);T(KA.$$.fragment,UWr),UWr.forEach(t),HWr.forEach(t),B1o=i(MIe),One=n(MIe,"SPAN",{});var JWr=s(One);P1o=r(JWr,"AutoModelForPreTraining"),JWr.forEach(t),MIe.forEach(t),TBe=i(f),xo=n(f,"DIV",{class:!0});var Is=s(xo);T(ZA.$$.fragment,Is),I1o=i(Is),vi=n(Is,"P",{});var gY=s(vi);q1o=r(gY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),XI=n(gY,"A",{href:!0});var YWr=s(XI);N1o=r(YWr,"from_pretrained()"),YWr.forEach(t),j1o=r(gY," class method or the "),zI=n(gY,"A",{href:!0});var KWr=s(zI);D1o=r(KWr,"from_config()"),KWr.forEach(t),G1o=r(gY,` class
method.`),gY.forEach(t),O1o=i(Is),e6=n(Is,"P",{});var EIe=s(e6);V1o=r(EIe,"This class cannot be instantiated directly using "),Vne=n(EIe,"CODE",{});var ZWr=s(Vne);X1o=r(ZWr,"__init__()"),ZWr.forEach(t),z1o=r(EIe," (throws an error)."),EIe.forEach(t),Q1o=i(Is),et=n(Is,"DIV",{class:!0});var LC=s(et);T(o6.$$.fragment,LC),W1o=i(LC),Xne=n(LC,"P",{});var eHr=s(Xne);H1o=r(eHr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),eHr.forEach(t),U1o=i(LC),Fi=n(LC,"P",{});var hY=s(Fi);J1o=r(hY,`Note:
Loading a model from its configuration file does `),zne=n(hY,"STRONG",{});var oHr=s(zne);Y1o=r(oHr,"not"),oHr.forEach(t),K1o=r(hY,` load the model weights. It only affects the
model\u2019s configuration. Use `),QI=n(hY,"A",{href:!0});var rHr=s(QI);Z1o=r(rHr,"from_pretrained()"),rHr.forEach(t),e7o=r(hY," to load the model weights."),hY.forEach(t),o7o=i(LC),T(Tu.$$.fragment,LC),LC.forEach(t),r7o=i(Is),Ue=n(Is,"DIV",{class:!0});var Yt=s(Ue);T(r6.$$.fragment,Yt),t7o=i(Yt),Qne=n(Yt,"P",{});var tHr=s(Qne);a7o=r(tHr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),tHr.forEach(t),n7o=i(Yt),Ca=n(Yt,"P",{});var xC=s(Ca);s7o=r(xC,"The model class to instantiate is selected based on the "),Wne=n(xC,"CODE",{});var aHr=s(Wne);l7o=r(aHr,"model_type"),aHr.forEach(t),i7o=r(xC,` property of the config object (either
passed as an argument or loaded from `),Hne=n(xC,"CODE",{});var nHr=s(Hne);d7o=r(nHr,"pretrained_model_name_or_path"),nHr.forEach(t),c7o=r(xC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Une=n(xC,"CODE",{});var sHr=s(Une);f7o=r(sHr,"pretrained_model_name_or_path"),sHr.forEach(t),m7o=r(xC,":"),xC.forEach(t),g7o=i(Yt),G=n(Yt,"UL",{});var V=s(G);Mu=n(V,"LI",{});var rwe=s(Mu);Jne=n(rwe,"STRONG",{});var lHr=s(Jne);h7o=r(lHr,"albert"),lHr.forEach(t),p7o=r(rwe," \u2014 "),WI=n(rwe,"A",{href:!0});var iHr=s(WI);u7o=r(iHr,"AlbertForPreTraining"),iHr.forEach(t),_7o=r(rwe," (ALBERT model)"),rwe.forEach(t),b7o=i(V),Eu=n(V,"LI",{});var twe=s(Eu);Yne=n(twe,"STRONG",{});var dHr=s(Yne);v7o=r(dHr,"bart"),dHr.forEach(t),F7o=r(twe," \u2014 "),HI=n(twe,"A",{href:!0});var cHr=s(HI);T7o=r(cHr,"BartForConditionalGeneration"),cHr.forEach(t),M7o=r(twe," (BART model)"),twe.forEach(t),E7o=i(V),Cu=n(V,"LI",{});var awe=s(Cu);Kne=n(awe,"STRONG",{});var fHr=s(Kne);C7o=r(fHr,"bert"),fHr.forEach(t),w7o=r(awe," \u2014 "),UI=n(awe,"A",{href:!0});var mHr=s(UI);A7o=r(mHr,"BertForPreTraining"),mHr.forEach(t),y7o=r(awe," (BERT model)"),awe.forEach(t),L7o=i(V),wu=n(V,"LI",{});var nwe=s(wu);Zne=n(nwe,"STRONG",{});var gHr=s(Zne);x7o=r(gHr,"big_bird"),gHr.forEach(t),$7o=r(nwe," \u2014 "),JI=n(nwe,"A",{href:!0});var hHr=s(JI);k7o=r(hHr,"BigBirdForPreTraining"),hHr.forEach(t),S7o=r(nwe," (BigBird model)"),nwe.forEach(t),R7o=i(V),Au=n(V,"LI",{});var swe=s(Au);ese=n(swe,"STRONG",{});var pHr=s(ese);B7o=r(pHr,"camembert"),pHr.forEach(t),P7o=r(swe," \u2014 "),YI=n(swe,"A",{href:!0});var uHr=s(YI);I7o=r(uHr,"CamembertForMaskedLM"),uHr.forEach(t),q7o=r(swe," (CamemBERT model)"),swe.forEach(t),N7o=i(V),yu=n(V,"LI",{});var lwe=s(yu);ose=n(lwe,"STRONG",{});var _Hr=s(ose);j7o=r(_Hr,"ctrl"),_Hr.forEach(t),D7o=r(lwe," \u2014 "),KI=n(lwe,"A",{href:!0});var bHr=s(KI);G7o=r(bHr,"CTRLLMHeadModel"),bHr.forEach(t),O7o=r(lwe," (CTRL model)"),lwe.forEach(t),V7o=i(V),Lu=n(V,"LI",{});var iwe=s(Lu);rse=n(iwe,"STRONG",{});var vHr=s(rse);X7o=r(vHr,"data2vec-text"),vHr.forEach(t),z7o=r(iwe," \u2014 "),ZI=n(iwe,"A",{href:!0});var FHr=s(ZI);Q7o=r(FHr,"Data2VecTextForMaskedLM"),FHr.forEach(t),W7o=r(iwe," (Data2VecText model)"),iwe.forEach(t),H7o=i(V),xu=n(V,"LI",{});var dwe=s(xu);tse=n(dwe,"STRONG",{});var THr=s(tse);U7o=r(THr,"deberta"),THr.forEach(t),J7o=r(dwe," \u2014 "),eq=n(dwe,"A",{href:!0});var MHr=s(eq);Y7o=r(MHr,"DebertaForMaskedLM"),MHr.forEach(t),K7o=r(dwe," (DeBERTa model)"),dwe.forEach(t),Z7o=i(V),$u=n(V,"LI",{});var cwe=s($u);ase=n(cwe,"STRONG",{});var EHr=s(ase);ebo=r(EHr,"deberta-v2"),EHr.forEach(t),obo=r(cwe," \u2014 "),oq=n(cwe,"A",{href:!0});var CHr=s(oq);rbo=r(CHr,"DebertaV2ForMaskedLM"),CHr.forEach(t),tbo=r(cwe," (DeBERTa-v2 model)"),cwe.forEach(t),abo=i(V),ku=n(V,"LI",{});var fwe=s(ku);nse=n(fwe,"STRONG",{});var wHr=s(nse);nbo=r(wHr,"distilbert"),wHr.forEach(t),sbo=r(fwe," \u2014 "),rq=n(fwe,"A",{href:!0});var AHr=s(rq);lbo=r(AHr,"DistilBertForMaskedLM"),AHr.forEach(t),ibo=r(fwe," (DistilBERT model)"),fwe.forEach(t),dbo=i(V),Su=n(V,"LI",{});var mwe=s(Su);sse=n(mwe,"STRONG",{});var yHr=s(sse);cbo=r(yHr,"electra"),yHr.forEach(t),fbo=r(mwe," \u2014 "),tq=n(mwe,"A",{href:!0});var LHr=s(tq);mbo=r(LHr,"ElectraForPreTraining"),LHr.forEach(t),gbo=r(mwe," (ELECTRA model)"),mwe.forEach(t),hbo=i(V),Ru=n(V,"LI",{});var gwe=s(Ru);lse=n(gwe,"STRONG",{});var xHr=s(lse);pbo=r(xHr,"flaubert"),xHr.forEach(t),ubo=r(gwe," \u2014 "),aq=n(gwe,"A",{href:!0});var $Hr=s(aq);_bo=r($Hr,"FlaubertWithLMHeadModel"),$Hr.forEach(t),bbo=r(gwe," (FlauBERT model)"),gwe.forEach(t),vbo=i(V),Bu=n(V,"LI",{});var hwe=s(Bu);ise=n(hwe,"STRONG",{});var kHr=s(ise);Fbo=r(kHr,"fnet"),kHr.forEach(t),Tbo=r(hwe," \u2014 "),nq=n(hwe,"A",{href:!0});var SHr=s(nq);Mbo=r(SHr,"FNetForPreTraining"),SHr.forEach(t),Ebo=r(hwe," (FNet model)"),hwe.forEach(t),Cbo=i(V),Pu=n(V,"LI",{});var pwe=s(Pu);dse=n(pwe,"STRONG",{});var RHr=s(dse);wbo=r(RHr,"fsmt"),RHr.forEach(t),Abo=r(pwe," \u2014 "),sq=n(pwe,"A",{href:!0});var BHr=s(sq);ybo=r(BHr,"FSMTForConditionalGeneration"),BHr.forEach(t),Lbo=r(pwe," (FairSeq Machine-Translation model)"),pwe.forEach(t),xbo=i(V),Iu=n(V,"LI",{});var uwe=s(Iu);cse=n(uwe,"STRONG",{});var PHr=s(cse);$bo=r(PHr,"funnel"),PHr.forEach(t),kbo=r(uwe," \u2014 "),lq=n(uwe,"A",{href:!0});var IHr=s(lq);Sbo=r(IHr,"FunnelForPreTraining"),IHr.forEach(t),Rbo=r(uwe," (Funnel Transformer model)"),uwe.forEach(t),Bbo=i(V),qu=n(V,"LI",{});var _we=s(qu);fse=n(_we,"STRONG",{});var qHr=s(fse);Pbo=r(qHr,"gpt2"),qHr.forEach(t),Ibo=r(_we," \u2014 "),iq=n(_we,"A",{href:!0});var NHr=s(iq);qbo=r(NHr,"GPT2LMHeadModel"),NHr.forEach(t),Nbo=r(_we," (OpenAI GPT-2 model)"),_we.forEach(t),jbo=i(V),Nu=n(V,"LI",{});var bwe=s(Nu);mse=n(bwe,"STRONG",{});var jHr=s(mse);Dbo=r(jHr,"ibert"),jHr.forEach(t),Gbo=r(bwe," \u2014 "),dq=n(bwe,"A",{href:!0});var DHr=s(dq);Obo=r(DHr,"IBertForMaskedLM"),DHr.forEach(t),Vbo=r(bwe," (I-BERT model)"),bwe.forEach(t),Xbo=i(V),ju=n(V,"LI",{});var vwe=s(ju);gse=n(vwe,"STRONG",{});var GHr=s(gse);zbo=r(GHr,"layoutlm"),GHr.forEach(t),Qbo=r(vwe," \u2014 "),cq=n(vwe,"A",{href:!0});var OHr=s(cq);Wbo=r(OHr,"LayoutLMForMaskedLM"),OHr.forEach(t),Hbo=r(vwe," (LayoutLM model)"),vwe.forEach(t),Ubo=i(V),Du=n(V,"LI",{});var Fwe=s(Du);hse=n(Fwe,"STRONG",{});var VHr=s(hse);Jbo=r(VHr,"longformer"),VHr.forEach(t),Ybo=r(Fwe," \u2014 "),fq=n(Fwe,"A",{href:!0});var XHr=s(fq);Kbo=r(XHr,"LongformerForMaskedLM"),XHr.forEach(t),Zbo=r(Fwe," (Longformer model)"),Fwe.forEach(t),e2o=i(V),Gu=n(V,"LI",{});var Twe=s(Gu);pse=n(Twe,"STRONG",{});var zHr=s(pse);o2o=r(zHr,"lxmert"),zHr.forEach(t),r2o=r(Twe," \u2014 "),mq=n(Twe,"A",{href:!0});var QHr=s(mq);t2o=r(QHr,"LxmertForPreTraining"),QHr.forEach(t),a2o=r(Twe," (LXMERT model)"),Twe.forEach(t),n2o=i(V),Ou=n(V,"LI",{});var Mwe=s(Ou);use=n(Mwe,"STRONG",{});var WHr=s(use);s2o=r(WHr,"megatron-bert"),WHr.forEach(t),l2o=r(Mwe," \u2014 "),gq=n(Mwe,"A",{href:!0});var HHr=s(gq);i2o=r(HHr,"MegatronBertForPreTraining"),HHr.forEach(t),d2o=r(Mwe," (MegatronBert model)"),Mwe.forEach(t),c2o=i(V),Vu=n(V,"LI",{});var Ewe=s(Vu);_se=n(Ewe,"STRONG",{});var UHr=s(_se);f2o=r(UHr,"mobilebert"),UHr.forEach(t),m2o=r(Ewe," \u2014 "),hq=n(Ewe,"A",{href:!0});var JHr=s(hq);g2o=r(JHr,"MobileBertForPreTraining"),JHr.forEach(t),h2o=r(Ewe," (MobileBERT model)"),Ewe.forEach(t),p2o=i(V),Xu=n(V,"LI",{});var Cwe=s(Xu);bse=n(Cwe,"STRONG",{});var YHr=s(bse);u2o=r(YHr,"mpnet"),YHr.forEach(t),_2o=r(Cwe," \u2014 "),pq=n(Cwe,"A",{href:!0});var KHr=s(pq);b2o=r(KHr,"MPNetForMaskedLM"),KHr.forEach(t),v2o=r(Cwe," (MPNet model)"),Cwe.forEach(t),F2o=i(V),zu=n(V,"LI",{});var wwe=s(zu);vse=n(wwe,"STRONG",{});var ZHr=s(vse);T2o=r(ZHr,"openai-gpt"),ZHr.forEach(t),M2o=r(wwe," \u2014 "),uq=n(wwe,"A",{href:!0});var eUr=s(uq);E2o=r(eUr,"OpenAIGPTLMHeadModel"),eUr.forEach(t),C2o=r(wwe," (OpenAI GPT model)"),wwe.forEach(t),w2o=i(V),Qu=n(V,"LI",{});var Awe=s(Qu);Fse=n(Awe,"STRONG",{});var oUr=s(Fse);A2o=r(oUr,"retribert"),oUr.forEach(t),y2o=r(Awe," \u2014 "),_q=n(Awe,"A",{href:!0});var rUr=s(_q);L2o=r(rUr,"RetriBertModel"),rUr.forEach(t),x2o=r(Awe," (RetriBERT model)"),Awe.forEach(t),$2o=i(V),Wu=n(V,"LI",{});var ywe=s(Wu);Tse=n(ywe,"STRONG",{});var tUr=s(Tse);k2o=r(tUr,"roberta"),tUr.forEach(t),S2o=r(ywe," \u2014 "),bq=n(ywe,"A",{href:!0});var aUr=s(bq);R2o=r(aUr,"RobertaForMaskedLM"),aUr.forEach(t),B2o=r(ywe," (RoBERTa model)"),ywe.forEach(t),P2o=i(V),Hu=n(V,"LI",{});var Lwe=s(Hu);Mse=n(Lwe,"STRONG",{});var nUr=s(Mse);I2o=r(nUr,"squeezebert"),nUr.forEach(t),q2o=r(Lwe," \u2014 "),vq=n(Lwe,"A",{href:!0});var sUr=s(vq);N2o=r(sUr,"SqueezeBertForMaskedLM"),sUr.forEach(t),j2o=r(Lwe," (SqueezeBERT model)"),Lwe.forEach(t),D2o=i(V),Uu=n(V,"LI",{});var xwe=s(Uu);Ese=n(xwe,"STRONG",{});var lUr=s(Ese);G2o=r(lUr,"t5"),lUr.forEach(t),O2o=r(xwe," \u2014 "),Fq=n(xwe,"A",{href:!0});var iUr=s(Fq);V2o=r(iUr,"T5ForConditionalGeneration"),iUr.forEach(t),X2o=r(xwe," (T5 model)"),xwe.forEach(t),z2o=i(V),Ju=n(V,"LI",{});var $we=s(Ju);Cse=n($we,"STRONG",{});var dUr=s(Cse);Q2o=r(dUr,"tapas"),dUr.forEach(t),W2o=r($we," \u2014 "),Tq=n($we,"A",{href:!0});var cUr=s(Tq);H2o=r(cUr,"TapasForMaskedLM"),cUr.forEach(t),U2o=r($we," (TAPAS model)"),$we.forEach(t),J2o=i(V),Yu=n(V,"LI",{});var kwe=s(Yu);wse=n(kwe,"STRONG",{});var fUr=s(wse);Y2o=r(fUr,"transfo-xl"),fUr.forEach(t),K2o=r(kwe," \u2014 "),Mq=n(kwe,"A",{href:!0});var mUr=s(Mq);Z2o=r(mUr,"TransfoXLLMHeadModel"),mUr.forEach(t),e3o=r(kwe," (Transformer-XL model)"),kwe.forEach(t),o3o=i(V),Ku=n(V,"LI",{});var Swe=s(Ku);Ase=n(Swe,"STRONG",{});var gUr=s(Ase);r3o=r(gUr,"unispeech"),gUr.forEach(t),t3o=r(Swe," \u2014 "),Eq=n(Swe,"A",{href:!0});var hUr=s(Eq);a3o=r(hUr,"UniSpeechForPreTraining"),hUr.forEach(t),n3o=r(Swe," (UniSpeech model)"),Swe.forEach(t),s3o=i(V),Zu=n(V,"LI",{});var Rwe=s(Zu);yse=n(Rwe,"STRONG",{});var pUr=s(yse);l3o=r(pUr,"unispeech-sat"),pUr.forEach(t),i3o=r(Rwe," \u2014 "),Cq=n(Rwe,"A",{href:!0});var uUr=s(Cq);d3o=r(uUr,"UniSpeechSatForPreTraining"),uUr.forEach(t),c3o=r(Rwe," (UniSpeechSat model)"),Rwe.forEach(t),f3o=i(V),e_=n(V,"LI",{});var Bwe=s(e_);Lse=n(Bwe,"STRONG",{});var _Ur=s(Lse);m3o=r(_Ur,"visual_bert"),_Ur.forEach(t),g3o=r(Bwe," \u2014 "),wq=n(Bwe,"A",{href:!0});var bUr=s(wq);h3o=r(bUr,"VisualBertForPreTraining"),bUr.forEach(t),p3o=r(Bwe," (VisualBert model)"),Bwe.forEach(t),u3o=i(V),o_=n(V,"LI",{});var Pwe=s(o_);xse=n(Pwe,"STRONG",{});var vUr=s(xse);_3o=r(vUr,"vit_mae"),vUr.forEach(t),b3o=r(Pwe," \u2014 "),Aq=n(Pwe,"A",{href:!0});var FUr=s(Aq);v3o=r(FUr,"ViTMAEForPreTraining"),FUr.forEach(t),F3o=r(Pwe," (ViTMAE model)"),Pwe.forEach(t),T3o=i(V),r_=n(V,"LI",{});var Iwe=s(r_);$se=n(Iwe,"STRONG",{});var TUr=s($se);M3o=r(TUr,"wav2vec2"),TUr.forEach(t),E3o=r(Iwe," \u2014 "),yq=n(Iwe,"A",{href:!0});var MUr=s(yq);C3o=r(MUr,"Wav2Vec2ForPreTraining"),MUr.forEach(t),w3o=r(Iwe," (Wav2Vec2 model)"),Iwe.forEach(t),A3o=i(V),t_=n(V,"LI",{});var qwe=s(t_);kse=n(qwe,"STRONG",{});var EUr=s(kse);y3o=r(EUr,"xlm"),EUr.forEach(t),L3o=r(qwe," \u2014 "),Lq=n(qwe,"A",{href:!0});var CUr=s(Lq);x3o=r(CUr,"XLMWithLMHeadModel"),CUr.forEach(t),$3o=r(qwe," (XLM model)"),qwe.forEach(t),k3o=i(V),a_=n(V,"LI",{});var Nwe=s(a_);Sse=n(Nwe,"STRONG",{});var wUr=s(Sse);S3o=r(wUr,"xlm-roberta"),wUr.forEach(t),R3o=r(Nwe," \u2014 "),xq=n(Nwe,"A",{href:!0});var AUr=s(xq);B3o=r(AUr,"XLMRobertaForMaskedLM"),AUr.forEach(t),P3o=r(Nwe," (XLM-RoBERTa model)"),Nwe.forEach(t),I3o=i(V),n_=n(V,"LI",{});var jwe=s(n_);Rse=n(jwe,"STRONG",{});var yUr=s(Rse);q3o=r(yUr,"xlm-roberta-xl"),yUr.forEach(t),N3o=r(jwe," \u2014 "),$q=n(jwe,"A",{href:!0});var LUr=s($q);j3o=r(LUr,"XLMRobertaXLForMaskedLM"),LUr.forEach(t),D3o=r(jwe," (XLM-RoBERTa-XL model)"),jwe.forEach(t),G3o=i(V),s_=n(V,"LI",{});var Dwe=s(s_);Bse=n(Dwe,"STRONG",{});var xUr=s(Bse);O3o=r(xUr,"xlnet"),xUr.forEach(t),V3o=r(Dwe," \u2014 "),kq=n(Dwe,"A",{href:!0});var $Ur=s(kq);X3o=r($Ur,"XLNetLMHeadModel"),$Ur.forEach(t),z3o=r(Dwe," (XLNet model)"),Dwe.forEach(t),V.forEach(t),Q3o=i(Yt),l_=n(Yt,"P",{});var Gwe=s(l_);W3o=r(Gwe,"The model is set in evaluation mode by default using "),Pse=n(Gwe,"CODE",{});var kUr=s(Pse);H3o=r(kUr,"model.eval()"),kUr.forEach(t),U3o=r(Gwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ise=n(Gwe,"CODE",{});var SUr=s(Ise);J3o=r(SUr,"model.train()"),SUr.forEach(t),Gwe.forEach(t),Y3o=i(Yt),T(i_.$$.fragment,Yt),Yt.forEach(t),Is.forEach(t),MBe=i(f),Ti=n(f,"H2",{class:!0});var CIe=s(Ti);d_=n(CIe,"A",{id:!0,class:!0,href:!0});var RUr=s(d_);qse=n(RUr,"SPAN",{});var BUr=s(qse);T(t6.$$.fragment,BUr),BUr.forEach(t),RUr.forEach(t),K3o=i(CIe),Nse=n(CIe,"SPAN",{});var PUr=s(Nse);Z3o=r(PUr,"AutoModelForCausalLM"),PUr.forEach(t),CIe.forEach(t),EBe=i(f),$o=n(f,"DIV",{class:!0});var qs=s($o);T(a6.$$.fragment,qs),evo=i(qs),Mi=n(qs,"P",{});var pY=s(Mi);ovo=r(pY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Sq=n(pY,"A",{href:!0});var IUr=s(Sq);rvo=r(IUr,"from_pretrained()"),IUr.forEach(t),tvo=r(pY," class method or the "),Rq=n(pY,"A",{href:!0});var qUr=s(Rq);avo=r(qUr,"from_config()"),qUr.forEach(t),nvo=r(pY,` class
method.`),pY.forEach(t),svo=i(qs),n6=n(qs,"P",{});var wIe=s(n6);lvo=r(wIe,"This class cannot be instantiated directly using "),jse=n(wIe,"CODE",{});var NUr=s(jse);ivo=r(NUr,"__init__()"),NUr.forEach(t),dvo=r(wIe," (throws an error)."),wIe.forEach(t),cvo=i(qs),ot=n(qs,"DIV",{class:!0});var $C=s(ot);T(s6.$$.fragment,$C),fvo=i($C),Dse=n($C,"P",{});var jUr=s(Dse);mvo=r(jUr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),jUr.forEach(t),gvo=i($C),Ei=n($C,"P",{});var uY=s(Ei);hvo=r(uY,`Note:
Loading a model from its configuration file does `),Gse=n(uY,"STRONG",{});var DUr=s(Gse);pvo=r(DUr,"not"),DUr.forEach(t),uvo=r(uY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bq=n(uY,"A",{href:!0});var GUr=s(Bq);_vo=r(GUr,"from_pretrained()"),GUr.forEach(t),bvo=r(uY," to load the model weights."),uY.forEach(t),vvo=i($C),T(c_.$$.fragment,$C),$C.forEach(t),Fvo=i(qs),Je=n(qs,"DIV",{class:!0});var Kt=s(Je);T(l6.$$.fragment,Kt),Tvo=i(Kt),Ose=n(Kt,"P",{});var OUr=s(Ose);Mvo=r(OUr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),OUr.forEach(t),Evo=i(Kt),wa=n(Kt,"P",{});var kC=s(wa);Cvo=r(kC,"The model class to instantiate is selected based on the "),Vse=n(kC,"CODE",{});var VUr=s(Vse);wvo=r(VUr,"model_type"),VUr.forEach(t),Avo=r(kC,` property of the config object (either
passed as an argument or loaded from `),Xse=n(kC,"CODE",{});var XUr=s(Xse);yvo=r(XUr,"pretrained_model_name_or_path"),XUr.forEach(t),Lvo=r(kC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zse=n(kC,"CODE",{});var zUr=s(zse);xvo=r(zUr,"pretrained_model_name_or_path"),zUr.forEach(t),$vo=r(kC,":"),kC.forEach(t),kvo=i(Kt),z=n(Kt,"UL",{});var W=s(z);f_=n(W,"LI",{});var Owe=s(f_);Qse=n(Owe,"STRONG",{});var QUr=s(Qse);Svo=r(QUr,"bart"),QUr.forEach(t),Rvo=r(Owe," \u2014 "),Pq=n(Owe,"A",{href:!0});var WUr=s(Pq);Bvo=r(WUr,"BartForCausalLM"),WUr.forEach(t),Pvo=r(Owe," (BART model)"),Owe.forEach(t),Ivo=i(W),m_=n(W,"LI",{});var Vwe=s(m_);Wse=n(Vwe,"STRONG",{});var HUr=s(Wse);qvo=r(HUr,"bert"),HUr.forEach(t),Nvo=r(Vwe," \u2014 "),Iq=n(Vwe,"A",{href:!0});var UUr=s(Iq);jvo=r(UUr,"BertLMHeadModel"),UUr.forEach(t),Dvo=r(Vwe," (BERT model)"),Vwe.forEach(t),Gvo=i(W),g_=n(W,"LI",{});var Xwe=s(g_);Hse=n(Xwe,"STRONG",{});var JUr=s(Hse);Ovo=r(JUr,"bert-generation"),JUr.forEach(t),Vvo=r(Xwe," \u2014 "),qq=n(Xwe,"A",{href:!0});var YUr=s(qq);Xvo=r(YUr,"BertGenerationDecoder"),YUr.forEach(t),zvo=r(Xwe," (Bert Generation model)"),Xwe.forEach(t),Qvo=i(W),h_=n(W,"LI",{});var zwe=s(h_);Use=n(zwe,"STRONG",{});var KUr=s(Use);Wvo=r(KUr,"big_bird"),KUr.forEach(t),Hvo=r(zwe," \u2014 "),Nq=n(zwe,"A",{href:!0});var ZUr=s(Nq);Uvo=r(ZUr,"BigBirdForCausalLM"),ZUr.forEach(t),Jvo=r(zwe," (BigBird model)"),zwe.forEach(t),Yvo=i(W),p_=n(W,"LI",{});var Qwe=s(p_);Jse=n(Qwe,"STRONG",{});var eJr=s(Jse);Kvo=r(eJr,"bigbird_pegasus"),eJr.forEach(t),Zvo=r(Qwe," \u2014 "),jq=n(Qwe,"A",{href:!0});var oJr=s(jq);eFo=r(oJr,"BigBirdPegasusForCausalLM"),oJr.forEach(t),oFo=r(Qwe," (BigBirdPegasus model)"),Qwe.forEach(t),rFo=i(W),u_=n(W,"LI",{});var Wwe=s(u_);Yse=n(Wwe,"STRONG",{});var rJr=s(Yse);tFo=r(rJr,"blenderbot"),rJr.forEach(t),aFo=r(Wwe," \u2014 "),Dq=n(Wwe,"A",{href:!0});var tJr=s(Dq);nFo=r(tJr,"BlenderbotForCausalLM"),tJr.forEach(t),sFo=r(Wwe," (Blenderbot model)"),Wwe.forEach(t),lFo=i(W),__=n(W,"LI",{});var Hwe=s(__);Kse=n(Hwe,"STRONG",{});var aJr=s(Kse);iFo=r(aJr,"blenderbot-small"),aJr.forEach(t),dFo=r(Hwe," \u2014 "),Gq=n(Hwe,"A",{href:!0});var nJr=s(Gq);cFo=r(nJr,"BlenderbotSmallForCausalLM"),nJr.forEach(t),fFo=r(Hwe," (BlenderbotSmall model)"),Hwe.forEach(t),mFo=i(W),b_=n(W,"LI",{});var Uwe=s(b_);Zse=n(Uwe,"STRONG",{});var sJr=s(Zse);gFo=r(sJr,"camembert"),sJr.forEach(t),hFo=r(Uwe," \u2014 "),Oq=n(Uwe,"A",{href:!0});var lJr=s(Oq);pFo=r(lJr,"CamembertForCausalLM"),lJr.forEach(t),uFo=r(Uwe," (CamemBERT model)"),Uwe.forEach(t),_Fo=i(W),v_=n(W,"LI",{});var Jwe=s(v_);ele=n(Jwe,"STRONG",{});var iJr=s(ele);bFo=r(iJr,"ctrl"),iJr.forEach(t),vFo=r(Jwe," \u2014 "),Vq=n(Jwe,"A",{href:!0});var dJr=s(Vq);FFo=r(dJr,"CTRLLMHeadModel"),dJr.forEach(t),TFo=r(Jwe," (CTRL model)"),Jwe.forEach(t),MFo=i(W),F_=n(W,"LI",{});var Ywe=s(F_);ole=n(Ywe,"STRONG",{});var cJr=s(ole);EFo=r(cJr,"data2vec-text"),cJr.forEach(t),CFo=r(Ywe," \u2014 "),Xq=n(Ywe,"A",{href:!0});var fJr=s(Xq);wFo=r(fJr,"Data2VecTextForCausalLM"),fJr.forEach(t),AFo=r(Ywe," (Data2VecText model)"),Ywe.forEach(t),yFo=i(W),T_=n(W,"LI",{});var Kwe=s(T_);rle=n(Kwe,"STRONG",{});var mJr=s(rle);LFo=r(mJr,"electra"),mJr.forEach(t),xFo=r(Kwe," \u2014 "),zq=n(Kwe,"A",{href:!0});var gJr=s(zq);$Fo=r(gJr,"ElectraForCausalLM"),gJr.forEach(t),kFo=r(Kwe," (ELECTRA model)"),Kwe.forEach(t),SFo=i(W),M_=n(W,"LI",{});var Zwe=s(M_);tle=n(Zwe,"STRONG",{});var hJr=s(tle);RFo=r(hJr,"gpt2"),hJr.forEach(t),BFo=r(Zwe," \u2014 "),Qq=n(Zwe,"A",{href:!0});var pJr=s(Qq);PFo=r(pJr,"GPT2LMHeadModel"),pJr.forEach(t),IFo=r(Zwe," (OpenAI GPT-2 model)"),Zwe.forEach(t),qFo=i(W),E_=n(W,"LI",{});var eAe=s(E_);ale=n(eAe,"STRONG",{});var uJr=s(ale);NFo=r(uJr,"gpt_neo"),uJr.forEach(t),jFo=r(eAe," \u2014 "),Wq=n(eAe,"A",{href:!0});var _Jr=s(Wq);DFo=r(_Jr,"GPTNeoForCausalLM"),_Jr.forEach(t),GFo=r(eAe," (GPT Neo model)"),eAe.forEach(t),OFo=i(W),C_=n(W,"LI",{});var oAe=s(C_);nle=n(oAe,"STRONG",{});var bJr=s(nle);VFo=r(bJr,"gptj"),bJr.forEach(t),XFo=r(oAe," \u2014 "),Hq=n(oAe,"A",{href:!0});var vJr=s(Hq);zFo=r(vJr,"GPTJForCausalLM"),vJr.forEach(t),QFo=r(oAe," (GPT-J model)"),oAe.forEach(t),WFo=i(W),w_=n(W,"LI",{});var rAe=s(w_);sle=n(rAe,"STRONG",{});var FJr=s(sle);HFo=r(FJr,"marian"),FJr.forEach(t),UFo=r(rAe," \u2014 "),Uq=n(rAe,"A",{href:!0});var TJr=s(Uq);JFo=r(TJr,"MarianForCausalLM"),TJr.forEach(t),YFo=r(rAe," (Marian model)"),rAe.forEach(t),KFo=i(W),A_=n(W,"LI",{});var tAe=s(A_);lle=n(tAe,"STRONG",{});var MJr=s(lle);ZFo=r(MJr,"mbart"),MJr.forEach(t),e0o=r(tAe," \u2014 "),Jq=n(tAe,"A",{href:!0});var EJr=s(Jq);o0o=r(EJr,"MBartForCausalLM"),EJr.forEach(t),r0o=r(tAe," (mBART model)"),tAe.forEach(t),t0o=i(W),y_=n(W,"LI",{});var aAe=s(y_);ile=n(aAe,"STRONG",{});var CJr=s(ile);a0o=r(CJr,"megatron-bert"),CJr.forEach(t),n0o=r(aAe," \u2014 "),Yq=n(aAe,"A",{href:!0});var wJr=s(Yq);s0o=r(wJr,"MegatronBertForCausalLM"),wJr.forEach(t),l0o=r(aAe," (MegatronBert model)"),aAe.forEach(t),i0o=i(W),L_=n(W,"LI",{});var nAe=s(L_);dle=n(nAe,"STRONG",{});var AJr=s(dle);d0o=r(AJr,"openai-gpt"),AJr.forEach(t),c0o=r(nAe," \u2014 "),Kq=n(nAe,"A",{href:!0});var yJr=s(Kq);f0o=r(yJr,"OpenAIGPTLMHeadModel"),yJr.forEach(t),m0o=r(nAe," (OpenAI GPT model)"),nAe.forEach(t),g0o=i(W),x_=n(W,"LI",{});var sAe=s(x_);cle=n(sAe,"STRONG",{});var LJr=s(cle);h0o=r(LJr,"pegasus"),LJr.forEach(t),p0o=r(sAe," \u2014 "),Zq=n(sAe,"A",{href:!0});var xJr=s(Zq);u0o=r(xJr,"PegasusForCausalLM"),xJr.forEach(t),_0o=r(sAe," (Pegasus model)"),sAe.forEach(t),b0o=i(W),$_=n(W,"LI",{});var lAe=s($_);fle=n(lAe,"STRONG",{});var $Jr=s(fle);v0o=r($Jr,"plbart"),$Jr.forEach(t),F0o=r(lAe," \u2014 "),eN=n(lAe,"A",{href:!0});var kJr=s(eN);T0o=r(kJr,"PLBartForCausalLM"),kJr.forEach(t),M0o=r(lAe," (PLBart model)"),lAe.forEach(t),E0o=i(W),k_=n(W,"LI",{});var iAe=s(k_);mle=n(iAe,"STRONG",{});var SJr=s(mle);C0o=r(SJr,"prophetnet"),SJr.forEach(t),w0o=r(iAe," \u2014 "),oN=n(iAe,"A",{href:!0});var RJr=s(oN);A0o=r(RJr,"ProphetNetForCausalLM"),RJr.forEach(t),y0o=r(iAe," (ProphetNet model)"),iAe.forEach(t),L0o=i(W),S_=n(W,"LI",{});var dAe=s(S_);gle=n(dAe,"STRONG",{});var BJr=s(gle);x0o=r(BJr,"qdqbert"),BJr.forEach(t),$0o=r(dAe," \u2014 "),rN=n(dAe,"A",{href:!0});var PJr=s(rN);k0o=r(PJr,"QDQBertLMHeadModel"),PJr.forEach(t),S0o=r(dAe," (QDQBert model)"),dAe.forEach(t),R0o=i(W),R_=n(W,"LI",{});var cAe=s(R_);hle=n(cAe,"STRONG",{});var IJr=s(hle);B0o=r(IJr,"reformer"),IJr.forEach(t),P0o=r(cAe," \u2014 "),tN=n(cAe,"A",{href:!0});var qJr=s(tN);I0o=r(qJr,"ReformerModelWithLMHead"),qJr.forEach(t),q0o=r(cAe," (Reformer model)"),cAe.forEach(t),N0o=i(W),B_=n(W,"LI",{});var fAe=s(B_);ple=n(fAe,"STRONG",{});var NJr=s(ple);j0o=r(NJr,"rembert"),NJr.forEach(t),D0o=r(fAe," \u2014 "),aN=n(fAe,"A",{href:!0});var jJr=s(aN);G0o=r(jJr,"RemBertForCausalLM"),jJr.forEach(t),O0o=r(fAe," (RemBERT model)"),fAe.forEach(t),V0o=i(W),P_=n(W,"LI",{});var mAe=s(P_);ule=n(mAe,"STRONG",{});var DJr=s(ule);X0o=r(DJr,"roberta"),DJr.forEach(t),z0o=r(mAe," \u2014 "),nN=n(mAe,"A",{href:!0});var GJr=s(nN);Q0o=r(GJr,"RobertaForCausalLM"),GJr.forEach(t),W0o=r(mAe," (RoBERTa model)"),mAe.forEach(t),H0o=i(W),I_=n(W,"LI",{});var gAe=s(I_);_le=n(gAe,"STRONG",{});var OJr=s(_le);U0o=r(OJr,"roformer"),OJr.forEach(t),J0o=r(gAe," \u2014 "),sN=n(gAe,"A",{href:!0});var VJr=s(sN);Y0o=r(VJr,"RoFormerForCausalLM"),VJr.forEach(t),K0o=r(gAe," (RoFormer model)"),gAe.forEach(t),Z0o=i(W),q_=n(W,"LI",{});var hAe=s(q_);ble=n(hAe,"STRONG",{});var XJr=s(ble);eTo=r(XJr,"speech_to_text_2"),XJr.forEach(t),oTo=r(hAe," \u2014 "),lN=n(hAe,"A",{href:!0});var zJr=s(lN);rTo=r(zJr,"Speech2Text2ForCausalLM"),zJr.forEach(t),tTo=r(hAe," (Speech2Text2 model)"),hAe.forEach(t),aTo=i(W),N_=n(W,"LI",{});var pAe=s(N_);vle=n(pAe,"STRONG",{});var QJr=s(vle);nTo=r(QJr,"transfo-xl"),QJr.forEach(t),sTo=r(pAe," \u2014 "),iN=n(pAe,"A",{href:!0});var WJr=s(iN);lTo=r(WJr,"TransfoXLLMHeadModel"),WJr.forEach(t),iTo=r(pAe," (Transformer-XL model)"),pAe.forEach(t),dTo=i(W),j_=n(W,"LI",{});var uAe=s(j_);Fle=n(uAe,"STRONG",{});var HJr=s(Fle);cTo=r(HJr,"trocr"),HJr.forEach(t),fTo=r(uAe," \u2014 "),dN=n(uAe,"A",{href:!0});var UJr=s(dN);mTo=r(UJr,"TrOCRForCausalLM"),UJr.forEach(t),gTo=r(uAe," (TrOCR model)"),uAe.forEach(t),hTo=i(W),D_=n(W,"LI",{});var _Ae=s(D_);Tle=n(_Ae,"STRONG",{});var JJr=s(Tle);pTo=r(JJr,"xglm"),JJr.forEach(t),uTo=r(_Ae," \u2014 "),cN=n(_Ae,"A",{href:!0});var YJr=s(cN);_To=r(YJr,"XGLMForCausalLM"),YJr.forEach(t),bTo=r(_Ae," (XGLM model)"),_Ae.forEach(t),vTo=i(W),G_=n(W,"LI",{});var bAe=s(G_);Mle=n(bAe,"STRONG",{});var KJr=s(Mle);FTo=r(KJr,"xlm"),KJr.forEach(t),TTo=r(bAe," \u2014 "),fN=n(bAe,"A",{href:!0});var ZJr=s(fN);MTo=r(ZJr,"XLMWithLMHeadModel"),ZJr.forEach(t),ETo=r(bAe," (XLM model)"),bAe.forEach(t),CTo=i(W),O_=n(W,"LI",{});var vAe=s(O_);Ele=n(vAe,"STRONG",{});var eYr=s(Ele);wTo=r(eYr,"xlm-prophetnet"),eYr.forEach(t),ATo=r(vAe," \u2014 "),mN=n(vAe,"A",{href:!0});var oYr=s(mN);yTo=r(oYr,"XLMProphetNetForCausalLM"),oYr.forEach(t),LTo=r(vAe," (XLMProphetNet model)"),vAe.forEach(t),xTo=i(W),V_=n(W,"LI",{});var FAe=s(V_);Cle=n(FAe,"STRONG",{});var rYr=s(Cle);$To=r(rYr,"xlm-roberta"),rYr.forEach(t),kTo=r(FAe," \u2014 "),gN=n(FAe,"A",{href:!0});var tYr=s(gN);STo=r(tYr,"XLMRobertaForCausalLM"),tYr.forEach(t),RTo=r(FAe," (XLM-RoBERTa model)"),FAe.forEach(t),BTo=i(W),X_=n(W,"LI",{});var TAe=s(X_);wle=n(TAe,"STRONG",{});var aYr=s(wle);PTo=r(aYr,"xlm-roberta-xl"),aYr.forEach(t),ITo=r(TAe," \u2014 "),hN=n(TAe,"A",{href:!0});var nYr=s(hN);qTo=r(nYr,"XLMRobertaXLForCausalLM"),nYr.forEach(t),NTo=r(TAe," (XLM-RoBERTa-XL model)"),TAe.forEach(t),jTo=i(W),z_=n(W,"LI",{});var MAe=s(z_);Ale=n(MAe,"STRONG",{});var sYr=s(Ale);DTo=r(sYr,"xlnet"),sYr.forEach(t),GTo=r(MAe," \u2014 "),pN=n(MAe,"A",{href:!0});var lYr=s(pN);OTo=r(lYr,"XLNetLMHeadModel"),lYr.forEach(t),VTo=r(MAe," (XLNet model)"),MAe.forEach(t),W.forEach(t),XTo=i(Kt),Q_=n(Kt,"P",{});var EAe=s(Q_);zTo=r(EAe,"The model is set in evaluation mode by default using "),yle=n(EAe,"CODE",{});var iYr=s(yle);QTo=r(iYr,"model.eval()"),iYr.forEach(t),WTo=r(EAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lle=n(EAe,"CODE",{});var dYr=s(Lle);HTo=r(dYr,"model.train()"),dYr.forEach(t),EAe.forEach(t),UTo=i(Kt),T(W_.$$.fragment,Kt),Kt.forEach(t),qs.forEach(t),CBe=i(f),Ci=n(f,"H2",{class:!0});var AIe=s(Ci);H_=n(AIe,"A",{id:!0,class:!0,href:!0});var cYr=s(H_);xle=n(cYr,"SPAN",{});var fYr=s(xle);T(i6.$$.fragment,fYr),fYr.forEach(t),cYr.forEach(t),JTo=i(AIe),$le=n(AIe,"SPAN",{});var mYr=s($le);YTo=r(mYr,"AutoModelForMaskedLM"),mYr.forEach(t),AIe.forEach(t),wBe=i(f),ko=n(f,"DIV",{class:!0});var Ns=s(ko);T(d6.$$.fragment,Ns),KTo=i(Ns),wi=n(Ns,"P",{});var _Y=s(wi);ZTo=r(_Y,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uN=n(_Y,"A",{href:!0});var gYr=s(uN);eMo=r(gYr,"from_pretrained()"),gYr.forEach(t),oMo=r(_Y," class method or the "),_N=n(_Y,"A",{href:!0});var hYr=s(_N);rMo=r(hYr,"from_config()"),hYr.forEach(t),tMo=r(_Y,` class
method.`),_Y.forEach(t),aMo=i(Ns),c6=n(Ns,"P",{});var yIe=s(c6);nMo=r(yIe,"This class cannot be instantiated directly using "),kle=n(yIe,"CODE",{});var pYr=s(kle);sMo=r(pYr,"__init__()"),pYr.forEach(t),lMo=r(yIe," (throws an error)."),yIe.forEach(t),iMo=i(Ns),rt=n(Ns,"DIV",{class:!0});var SC=s(rt);T(f6.$$.fragment,SC),dMo=i(SC),Sle=n(SC,"P",{});var uYr=s(Sle);cMo=r(uYr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),uYr.forEach(t),fMo=i(SC),Ai=n(SC,"P",{});var bY=s(Ai);mMo=r(bY,`Note:
Loading a model from its configuration file does `),Rle=n(bY,"STRONG",{});var _Yr=s(Rle);gMo=r(_Yr,"not"),_Yr.forEach(t),hMo=r(bY,` load the model weights. It only affects the
model\u2019s configuration. Use `),bN=n(bY,"A",{href:!0});var bYr=s(bN);pMo=r(bYr,"from_pretrained()"),bYr.forEach(t),uMo=r(bY," to load the model weights."),bY.forEach(t),_Mo=i(SC),T(U_.$$.fragment,SC),SC.forEach(t),bMo=i(Ns),Ye=n(Ns,"DIV",{class:!0});var Zt=s(Ye);T(m6.$$.fragment,Zt),vMo=i(Zt),Ble=n(Zt,"P",{});var vYr=s(Ble);FMo=r(vYr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vYr.forEach(t),TMo=i(Zt),Aa=n(Zt,"P",{});var RC=s(Aa);MMo=r(RC,"The model class to instantiate is selected based on the "),Ple=n(RC,"CODE",{});var FYr=s(Ple);EMo=r(FYr,"model_type"),FYr.forEach(t),CMo=r(RC,` property of the config object (either
passed as an argument or loaded from `),Ile=n(RC,"CODE",{});var TYr=s(Ile);wMo=r(TYr,"pretrained_model_name_or_path"),TYr.forEach(t),AMo=r(RC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qle=n(RC,"CODE",{});var MYr=s(qle);yMo=r(MYr,"pretrained_model_name_or_path"),MYr.forEach(t),LMo=r(RC,":"),RC.forEach(t),xMo=i(Zt),Q=n(Zt,"UL",{});var H=s(Q);J_=n(H,"LI",{});var CAe=s(J_);Nle=n(CAe,"STRONG",{});var EYr=s(Nle);$Mo=r(EYr,"albert"),EYr.forEach(t),kMo=r(CAe," \u2014 "),vN=n(CAe,"A",{href:!0});var CYr=s(vN);SMo=r(CYr,"AlbertForMaskedLM"),CYr.forEach(t),RMo=r(CAe," (ALBERT model)"),CAe.forEach(t),BMo=i(H),Y_=n(H,"LI",{});var wAe=s(Y_);jle=n(wAe,"STRONG",{});var wYr=s(jle);PMo=r(wYr,"bart"),wYr.forEach(t),IMo=r(wAe," \u2014 "),FN=n(wAe,"A",{href:!0});var AYr=s(FN);qMo=r(AYr,"BartForConditionalGeneration"),AYr.forEach(t),NMo=r(wAe," (BART model)"),wAe.forEach(t),jMo=i(H),K_=n(H,"LI",{});var AAe=s(K_);Dle=n(AAe,"STRONG",{});var yYr=s(Dle);DMo=r(yYr,"bert"),yYr.forEach(t),GMo=r(AAe," \u2014 "),TN=n(AAe,"A",{href:!0});var LYr=s(TN);OMo=r(LYr,"BertForMaskedLM"),LYr.forEach(t),VMo=r(AAe," (BERT model)"),AAe.forEach(t),XMo=i(H),Z_=n(H,"LI",{});var yAe=s(Z_);Gle=n(yAe,"STRONG",{});var xYr=s(Gle);zMo=r(xYr,"big_bird"),xYr.forEach(t),QMo=r(yAe," \u2014 "),MN=n(yAe,"A",{href:!0});var $Yr=s(MN);WMo=r($Yr,"BigBirdForMaskedLM"),$Yr.forEach(t),HMo=r(yAe," (BigBird model)"),yAe.forEach(t),UMo=i(H),e1=n(H,"LI",{});var LAe=s(e1);Ole=n(LAe,"STRONG",{});var kYr=s(Ole);JMo=r(kYr,"camembert"),kYr.forEach(t),YMo=r(LAe," \u2014 "),EN=n(LAe,"A",{href:!0});var SYr=s(EN);KMo=r(SYr,"CamembertForMaskedLM"),SYr.forEach(t),ZMo=r(LAe," (CamemBERT model)"),LAe.forEach(t),e4o=i(H),o1=n(H,"LI",{});var xAe=s(o1);Vle=n(xAe,"STRONG",{});var RYr=s(Vle);o4o=r(RYr,"convbert"),RYr.forEach(t),r4o=r(xAe," \u2014 "),CN=n(xAe,"A",{href:!0});var BYr=s(CN);t4o=r(BYr,"ConvBertForMaskedLM"),BYr.forEach(t),a4o=r(xAe," (ConvBERT model)"),xAe.forEach(t),n4o=i(H),r1=n(H,"LI",{});var $Ae=s(r1);Xle=n($Ae,"STRONG",{});var PYr=s(Xle);s4o=r(PYr,"data2vec-text"),PYr.forEach(t),l4o=r($Ae," \u2014 "),wN=n($Ae,"A",{href:!0});var IYr=s(wN);i4o=r(IYr,"Data2VecTextForMaskedLM"),IYr.forEach(t),d4o=r($Ae," (Data2VecText model)"),$Ae.forEach(t),c4o=i(H),t1=n(H,"LI",{});var kAe=s(t1);zle=n(kAe,"STRONG",{});var qYr=s(zle);f4o=r(qYr,"deberta"),qYr.forEach(t),m4o=r(kAe," \u2014 "),AN=n(kAe,"A",{href:!0});var NYr=s(AN);g4o=r(NYr,"DebertaForMaskedLM"),NYr.forEach(t),h4o=r(kAe," (DeBERTa model)"),kAe.forEach(t),p4o=i(H),a1=n(H,"LI",{});var SAe=s(a1);Qle=n(SAe,"STRONG",{});var jYr=s(Qle);u4o=r(jYr,"deberta-v2"),jYr.forEach(t),_4o=r(SAe," \u2014 "),yN=n(SAe,"A",{href:!0});var DYr=s(yN);b4o=r(DYr,"DebertaV2ForMaskedLM"),DYr.forEach(t),v4o=r(SAe," (DeBERTa-v2 model)"),SAe.forEach(t),F4o=i(H),n1=n(H,"LI",{});var RAe=s(n1);Wle=n(RAe,"STRONG",{});var GYr=s(Wle);T4o=r(GYr,"distilbert"),GYr.forEach(t),M4o=r(RAe," \u2014 "),LN=n(RAe,"A",{href:!0});var OYr=s(LN);E4o=r(OYr,"DistilBertForMaskedLM"),OYr.forEach(t),C4o=r(RAe," (DistilBERT model)"),RAe.forEach(t),w4o=i(H),s1=n(H,"LI",{});var BAe=s(s1);Hle=n(BAe,"STRONG",{});var VYr=s(Hle);A4o=r(VYr,"electra"),VYr.forEach(t),y4o=r(BAe," \u2014 "),xN=n(BAe,"A",{href:!0});var XYr=s(xN);L4o=r(XYr,"ElectraForMaskedLM"),XYr.forEach(t),x4o=r(BAe," (ELECTRA model)"),BAe.forEach(t),$4o=i(H),l1=n(H,"LI",{});var PAe=s(l1);Ule=n(PAe,"STRONG",{});var zYr=s(Ule);k4o=r(zYr,"flaubert"),zYr.forEach(t),S4o=r(PAe," \u2014 "),$N=n(PAe,"A",{href:!0});var QYr=s($N);R4o=r(QYr,"FlaubertWithLMHeadModel"),QYr.forEach(t),B4o=r(PAe," (FlauBERT model)"),PAe.forEach(t),P4o=i(H),i1=n(H,"LI",{});var IAe=s(i1);Jle=n(IAe,"STRONG",{});var WYr=s(Jle);I4o=r(WYr,"fnet"),WYr.forEach(t),q4o=r(IAe," \u2014 "),kN=n(IAe,"A",{href:!0});var HYr=s(kN);N4o=r(HYr,"FNetForMaskedLM"),HYr.forEach(t),j4o=r(IAe," (FNet model)"),IAe.forEach(t),D4o=i(H),d1=n(H,"LI",{});var qAe=s(d1);Yle=n(qAe,"STRONG",{});var UYr=s(Yle);G4o=r(UYr,"funnel"),UYr.forEach(t),O4o=r(qAe," \u2014 "),SN=n(qAe,"A",{href:!0});var JYr=s(SN);V4o=r(JYr,"FunnelForMaskedLM"),JYr.forEach(t),X4o=r(qAe," (Funnel Transformer model)"),qAe.forEach(t),z4o=i(H),c1=n(H,"LI",{});var NAe=s(c1);Kle=n(NAe,"STRONG",{});var YYr=s(Kle);Q4o=r(YYr,"ibert"),YYr.forEach(t),W4o=r(NAe," \u2014 "),RN=n(NAe,"A",{href:!0});var KYr=s(RN);H4o=r(KYr,"IBertForMaskedLM"),KYr.forEach(t),U4o=r(NAe," (I-BERT model)"),NAe.forEach(t),J4o=i(H),f1=n(H,"LI",{});var jAe=s(f1);Zle=n(jAe,"STRONG",{});var ZYr=s(Zle);Y4o=r(ZYr,"layoutlm"),ZYr.forEach(t),K4o=r(jAe," \u2014 "),BN=n(jAe,"A",{href:!0});var eKr=s(BN);Z4o=r(eKr,"LayoutLMForMaskedLM"),eKr.forEach(t),eEo=r(jAe," (LayoutLM model)"),jAe.forEach(t),oEo=i(H),m1=n(H,"LI",{});var DAe=s(m1);eie=n(DAe,"STRONG",{});var oKr=s(eie);rEo=r(oKr,"longformer"),oKr.forEach(t),tEo=r(DAe," \u2014 "),PN=n(DAe,"A",{href:!0});var rKr=s(PN);aEo=r(rKr,"LongformerForMaskedLM"),rKr.forEach(t),nEo=r(DAe," (Longformer model)"),DAe.forEach(t),sEo=i(H),g1=n(H,"LI",{});var GAe=s(g1);oie=n(GAe,"STRONG",{});var tKr=s(oie);lEo=r(tKr,"mbart"),tKr.forEach(t),iEo=r(GAe," \u2014 "),IN=n(GAe,"A",{href:!0});var aKr=s(IN);dEo=r(aKr,"MBartForConditionalGeneration"),aKr.forEach(t),cEo=r(GAe," (mBART model)"),GAe.forEach(t),fEo=i(H),h1=n(H,"LI",{});var OAe=s(h1);rie=n(OAe,"STRONG",{});var nKr=s(rie);mEo=r(nKr,"megatron-bert"),nKr.forEach(t),gEo=r(OAe," \u2014 "),qN=n(OAe,"A",{href:!0});var sKr=s(qN);hEo=r(sKr,"MegatronBertForMaskedLM"),sKr.forEach(t),pEo=r(OAe," (MegatronBert model)"),OAe.forEach(t),uEo=i(H),p1=n(H,"LI",{});var VAe=s(p1);tie=n(VAe,"STRONG",{});var lKr=s(tie);_Eo=r(lKr,"mobilebert"),lKr.forEach(t),bEo=r(VAe," \u2014 "),NN=n(VAe,"A",{href:!0});var iKr=s(NN);vEo=r(iKr,"MobileBertForMaskedLM"),iKr.forEach(t),FEo=r(VAe," (MobileBERT model)"),VAe.forEach(t),TEo=i(H),u1=n(H,"LI",{});var XAe=s(u1);aie=n(XAe,"STRONG",{});var dKr=s(aie);MEo=r(dKr,"mpnet"),dKr.forEach(t),EEo=r(XAe," \u2014 "),jN=n(XAe,"A",{href:!0});var cKr=s(jN);CEo=r(cKr,"MPNetForMaskedLM"),cKr.forEach(t),wEo=r(XAe," (MPNet model)"),XAe.forEach(t),AEo=i(H),_1=n(H,"LI",{});var zAe=s(_1);nie=n(zAe,"STRONG",{});var fKr=s(nie);yEo=r(fKr,"nystromformer"),fKr.forEach(t),LEo=r(zAe," \u2014 "),DN=n(zAe,"A",{href:!0});var mKr=s(DN);xEo=r(mKr,"NystromformerForMaskedLM"),mKr.forEach(t),$Eo=r(zAe," (Nystromformer model)"),zAe.forEach(t),kEo=i(H),b1=n(H,"LI",{});var QAe=s(b1);sie=n(QAe,"STRONG",{});var gKr=s(sie);SEo=r(gKr,"perceiver"),gKr.forEach(t),REo=r(QAe," \u2014 "),GN=n(QAe,"A",{href:!0});var hKr=s(GN);BEo=r(hKr,"PerceiverForMaskedLM"),hKr.forEach(t),PEo=r(QAe," (Perceiver model)"),QAe.forEach(t),IEo=i(H),v1=n(H,"LI",{});var WAe=s(v1);lie=n(WAe,"STRONG",{});var pKr=s(lie);qEo=r(pKr,"qdqbert"),pKr.forEach(t),NEo=r(WAe," \u2014 "),ON=n(WAe,"A",{href:!0});var uKr=s(ON);jEo=r(uKr,"QDQBertForMaskedLM"),uKr.forEach(t),DEo=r(WAe," (QDQBert model)"),WAe.forEach(t),GEo=i(H),F1=n(H,"LI",{});var HAe=s(F1);iie=n(HAe,"STRONG",{});var _Kr=s(iie);OEo=r(_Kr,"reformer"),_Kr.forEach(t),VEo=r(HAe," \u2014 "),VN=n(HAe,"A",{href:!0});var bKr=s(VN);XEo=r(bKr,"ReformerForMaskedLM"),bKr.forEach(t),zEo=r(HAe," (Reformer model)"),HAe.forEach(t),QEo=i(H),T1=n(H,"LI",{});var UAe=s(T1);die=n(UAe,"STRONG",{});var vKr=s(die);WEo=r(vKr,"rembert"),vKr.forEach(t),HEo=r(UAe," \u2014 "),XN=n(UAe,"A",{href:!0});var FKr=s(XN);UEo=r(FKr,"RemBertForMaskedLM"),FKr.forEach(t),JEo=r(UAe," (RemBERT model)"),UAe.forEach(t),YEo=i(H),M1=n(H,"LI",{});var JAe=s(M1);cie=n(JAe,"STRONG",{});var TKr=s(cie);KEo=r(TKr,"roberta"),TKr.forEach(t),ZEo=r(JAe," \u2014 "),zN=n(JAe,"A",{href:!0});var MKr=s(zN);e5o=r(MKr,"RobertaForMaskedLM"),MKr.forEach(t),o5o=r(JAe," (RoBERTa model)"),JAe.forEach(t),r5o=i(H),E1=n(H,"LI",{});var YAe=s(E1);fie=n(YAe,"STRONG",{});var EKr=s(fie);t5o=r(EKr,"roformer"),EKr.forEach(t),a5o=r(YAe," \u2014 "),QN=n(YAe,"A",{href:!0});var CKr=s(QN);n5o=r(CKr,"RoFormerForMaskedLM"),CKr.forEach(t),s5o=r(YAe," (RoFormer model)"),YAe.forEach(t),l5o=i(H),C1=n(H,"LI",{});var KAe=s(C1);mie=n(KAe,"STRONG",{});var wKr=s(mie);i5o=r(wKr,"squeezebert"),wKr.forEach(t),d5o=r(KAe," \u2014 "),WN=n(KAe,"A",{href:!0});var AKr=s(WN);c5o=r(AKr,"SqueezeBertForMaskedLM"),AKr.forEach(t),f5o=r(KAe," (SqueezeBERT model)"),KAe.forEach(t),m5o=i(H),w1=n(H,"LI",{});var ZAe=s(w1);gie=n(ZAe,"STRONG",{});var yKr=s(gie);g5o=r(yKr,"tapas"),yKr.forEach(t),h5o=r(ZAe," \u2014 "),HN=n(ZAe,"A",{href:!0});var LKr=s(HN);p5o=r(LKr,"TapasForMaskedLM"),LKr.forEach(t),u5o=r(ZAe," (TAPAS model)"),ZAe.forEach(t),_5o=i(H),A1=n(H,"LI",{});var e6e=s(A1);hie=n(e6e,"STRONG",{});var xKr=s(hie);b5o=r(xKr,"wav2vec2"),xKr.forEach(t),v5o=r(e6e," \u2014 "),pie=n(e6e,"CODE",{});var $Kr=s(pie);F5o=r($Kr,"Wav2Vec2ForMaskedLM"),$Kr.forEach(t),T5o=r(e6e," (Wav2Vec2 model)"),e6e.forEach(t),M5o=i(H),y1=n(H,"LI",{});var o6e=s(y1);uie=n(o6e,"STRONG",{});var kKr=s(uie);E5o=r(kKr,"xlm"),kKr.forEach(t),C5o=r(o6e," \u2014 "),UN=n(o6e,"A",{href:!0});var SKr=s(UN);w5o=r(SKr,"XLMWithLMHeadModel"),SKr.forEach(t),A5o=r(o6e," (XLM model)"),o6e.forEach(t),y5o=i(H),L1=n(H,"LI",{});var r6e=s(L1);_ie=n(r6e,"STRONG",{});var RKr=s(_ie);L5o=r(RKr,"xlm-roberta"),RKr.forEach(t),x5o=r(r6e," \u2014 "),JN=n(r6e,"A",{href:!0});var BKr=s(JN);$5o=r(BKr,"XLMRobertaForMaskedLM"),BKr.forEach(t),k5o=r(r6e," (XLM-RoBERTa model)"),r6e.forEach(t),S5o=i(H),x1=n(H,"LI",{});var t6e=s(x1);bie=n(t6e,"STRONG",{});var PKr=s(bie);R5o=r(PKr,"xlm-roberta-xl"),PKr.forEach(t),B5o=r(t6e," \u2014 "),YN=n(t6e,"A",{href:!0});var IKr=s(YN);P5o=r(IKr,"XLMRobertaXLForMaskedLM"),IKr.forEach(t),I5o=r(t6e," (XLM-RoBERTa-XL model)"),t6e.forEach(t),q5o=i(H),$1=n(H,"LI",{});var a6e=s($1);vie=n(a6e,"STRONG",{});var qKr=s(vie);N5o=r(qKr,"yoso"),qKr.forEach(t),j5o=r(a6e," \u2014 "),KN=n(a6e,"A",{href:!0});var NKr=s(KN);D5o=r(NKr,"YosoForMaskedLM"),NKr.forEach(t),G5o=r(a6e," (YOSO model)"),a6e.forEach(t),H.forEach(t),O5o=i(Zt),k1=n(Zt,"P",{});var n6e=s(k1);V5o=r(n6e,"The model is set in evaluation mode by default using "),Fie=n(n6e,"CODE",{});var jKr=s(Fie);X5o=r(jKr,"model.eval()"),jKr.forEach(t),z5o=r(n6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tie=n(n6e,"CODE",{});var DKr=s(Tie);Q5o=r(DKr,"model.train()"),DKr.forEach(t),n6e.forEach(t),W5o=i(Zt),T(S1.$$.fragment,Zt),Zt.forEach(t),Ns.forEach(t),ABe=i(f),yi=n(f,"H2",{class:!0});var LIe=s(yi);R1=n(LIe,"A",{id:!0,class:!0,href:!0});var GKr=s(R1);Mie=n(GKr,"SPAN",{});var OKr=s(Mie);T(g6.$$.fragment,OKr),OKr.forEach(t),GKr.forEach(t),H5o=i(LIe),Eie=n(LIe,"SPAN",{});var VKr=s(Eie);U5o=r(VKr,"AutoModelForSeq2SeqLM"),VKr.forEach(t),LIe.forEach(t),yBe=i(f),So=n(f,"DIV",{class:!0});var js=s(So);T(h6.$$.fragment,js),J5o=i(js),Li=n(js,"P",{});var vY=s(Li);Y5o=r(vY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ZN=n(vY,"A",{href:!0});var XKr=s(ZN);K5o=r(XKr,"from_pretrained()"),XKr.forEach(t),Z5o=r(vY," class method or the "),ej=n(vY,"A",{href:!0});var zKr=s(ej);eCo=r(zKr,"from_config()"),zKr.forEach(t),oCo=r(vY,` class
method.`),vY.forEach(t),rCo=i(js),p6=n(js,"P",{});var xIe=s(p6);tCo=r(xIe,"This class cannot be instantiated directly using "),Cie=n(xIe,"CODE",{});var QKr=s(Cie);aCo=r(QKr,"__init__()"),QKr.forEach(t),nCo=r(xIe," (throws an error)."),xIe.forEach(t),sCo=i(js),tt=n(js,"DIV",{class:!0});var BC=s(tt);T(u6.$$.fragment,BC),lCo=i(BC),wie=n(BC,"P",{});var WKr=s(wie);iCo=r(WKr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),WKr.forEach(t),dCo=i(BC),xi=n(BC,"P",{});var FY=s(xi);cCo=r(FY,`Note:
Loading a model from its configuration file does `),Aie=n(FY,"STRONG",{});var HKr=s(Aie);fCo=r(HKr,"not"),HKr.forEach(t),mCo=r(FY,` load the model weights. It only affects the
model\u2019s configuration. Use `),oj=n(FY,"A",{href:!0});var UKr=s(oj);gCo=r(UKr,"from_pretrained()"),UKr.forEach(t),hCo=r(FY," to load the model weights."),FY.forEach(t),pCo=i(BC),T(B1.$$.fragment,BC),BC.forEach(t),uCo=i(js),Ke=n(js,"DIV",{class:!0});var ea=s(Ke);T(_6.$$.fragment,ea),_Co=i(ea),yie=n(ea,"P",{});var JKr=s(yie);bCo=r(JKr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),JKr.forEach(t),vCo=i(ea),ya=n(ea,"P",{});var PC=s(ya);FCo=r(PC,"The model class to instantiate is selected based on the "),Lie=n(PC,"CODE",{});var YKr=s(Lie);TCo=r(YKr,"model_type"),YKr.forEach(t),MCo=r(PC,` property of the config object (either
passed as an argument or loaded from `),xie=n(PC,"CODE",{});var KKr=s(xie);ECo=r(KKr,"pretrained_model_name_or_path"),KKr.forEach(t),CCo=r(PC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ie=n(PC,"CODE",{});var ZKr=s($ie);wCo=r(ZKr,"pretrained_model_name_or_path"),ZKr.forEach(t),ACo=r(PC,":"),PC.forEach(t),yCo=i(ea),he=n(ea,"UL",{});var ue=s(he);P1=n(ue,"LI",{});var s6e=s(P1);kie=n(s6e,"STRONG",{});var eZr=s(kie);LCo=r(eZr,"bart"),eZr.forEach(t),xCo=r(s6e," \u2014 "),rj=n(s6e,"A",{href:!0});var oZr=s(rj);$Co=r(oZr,"BartForConditionalGeneration"),oZr.forEach(t),kCo=r(s6e," (BART model)"),s6e.forEach(t),SCo=i(ue),I1=n(ue,"LI",{});var l6e=s(I1);Sie=n(l6e,"STRONG",{});var rZr=s(Sie);RCo=r(rZr,"bigbird_pegasus"),rZr.forEach(t),BCo=r(l6e," \u2014 "),tj=n(l6e,"A",{href:!0});var tZr=s(tj);PCo=r(tZr,"BigBirdPegasusForConditionalGeneration"),tZr.forEach(t),ICo=r(l6e," (BigBirdPegasus model)"),l6e.forEach(t),qCo=i(ue),q1=n(ue,"LI",{});var i6e=s(q1);Rie=n(i6e,"STRONG",{});var aZr=s(Rie);NCo=r(aZr,"blenderbot"),aZr.forEach(t),jCo=r(i6e," \u2014 "),aj=n(i6e,"A",{href:!0});var nZr=s(aj);DCo=r(nZr,"BlenderbotForConditionalGeneration"),nZr.forEach(t),GCo=r(i6e," (Blenderbot model)"),i6e.forEach(t),OCo=i(ue),N1=n(ue,"LI",{});var d6e=s(N1);Bie=n(d6e,"STRONG",{});var sZr=s(Bie);VCo=r(sZr,"blenderbot-small"),sZr.forEach(t),XCo=r(d6e," \u2014 "),nj=n(d6e,"A",{href:!0});var lZr=s(nj);zCo=r(lZr,"BlenderbotSmallForConditionalGeneration"),lZr.forEach(t),QCo=r(d6e," (BlenderbotSmall model)"),d6e.forEach(t),WCo=i(ue),j1=n(ue,"LI",{});var c6e=s(j1);Pie=n(c6e,"STRONG",{});var iZr=s(Pie);HCo=r(iZr,"encoder-decoder"),iZr.forEach(t),UCo=r(c6e," \u2014 "),sj=n(c6e,"A",{href:!0});var dZr=s(sj);JCo=r(dZr,"EncoderDecoderModel"),dZr.forEach(t),YCo=r(c6e," (Encoder decoder model)"),c6e.forEach(t),KCo=i(ue),D1=n(ue,"LI",{});var f6e=s(D1);Iie=n(f6e,"STRONG",{});var cZr=s(Iie);ZCo=r(cZr,"fsmt"),cZr.forEach(t),ewo=r(f6e," \u2014 "),lj=n(f6e,"A",{href:!0});var fZr=s(lj);owo=r(fZr,"FSMTForConditionalGeneration"),fZr.forEach(t),rwo=r(f6e," (FairSeq Machine-Translation model)"),f6e.forEach(t),two=i(ue),G1=n(ue,"LI",{});var m6e=s(G1);qie=n(m6e,"STRONG",{});var mZr=s(qie);awo=r(mZr,"led"),mZr.forEach(t),nwo=r(m6e," \u2014 "),ij=n(m6e,"A",{href:!0});var gZr=s(ij);swo=r(gZr,"LEDForConditionalGeneration"),gZr.forEach(t),lwo=r(m6e," (LED model)"),m6e.forEach(t),iwo=i(ue),O1=n(ue,"LI",{});var g6e=s(O1);Nie=n(g6e,"STRONG",{});var hZr=s(Nie);dwo=r(hZr,"m2m_100"),hZr.forEach(t),cwo=r(g6e," \u2014 "),dj=n(g6e,"A",{href:!0});var pZr=s(dj);fwo=r(pZr,"M2M100ForConditionalGeneration"),pZr.forEach(t),mwo=r(g6e," (M2M100 model)"),g6e.forEach(t),gwo=i(ue),V1=n(ue,"LI",{});var h6e=s(V1);jie=n(h6e,"STRONG",{});var uZr=s(jie);hwo=r(uZr,"marian"),uZr.forEach(t),pwo=r(h6e," \u2014 "),cj=n(h6e,"A",{href:!0});var _Zr=s(cj);uwo=r(_Zr,"MarianMTModel"),_Zr.forEach(t),_wo=r(h6e," (Marian model)"),h6e.forEach(t),bwo=i(ue),X1=n(ue,"LI",{});var p6e=s(X1);Die=n(p6e,"STRONG",{});var bZr=s(Die);vwo=r(bZr,"mbart"),bZr.forEach(t),Fwo=r(p6e," \u2014 "),fj=n(p6e,"A",{href:!0});var vZr=s(fj);Two=r(vZr,"MBartForConditionalGeneration"),vZr.forEach(t),Mwo=r(p6e," (mBART model)"),p6e.forEach(t),Ewo=i(ue),z1=n(ue,"LI",{});var u6e=s(z1);Gie=n(u6e,"STRONG",{});var FZr=s(Gie);Cwo=r(FZr,"mt5"),FZr.forEach(t),wwo=r(u6e," \u2014 "),mj=n(u6e,"A",{href:!0});var TZr=s(mj);Awo=r(TZr,"MT5ForConditionalGeneration"),TZr.forEach(t),ywo=r(u6e," (mT5 model)"),u6e.forEach(t),Lwo=i(ue),Q1=n(ue,"LI",{});var _6e=s(Q1);Oie=n(_6e,"STRONG",{});var MZr=s(Oie);xwo=r(MZr,"pegasus"),MZr.forEach(t),$wo=r(_6e," \u2014 "),gj=n(_6e,"A",{href:!0});var EZr=s(gj);kwo=r(EZr,"PegasusForConditionalGeneration"),EZr.forEach(t),Swo=r(_6e," (Pegasus model)"),_6e.forEach(t),Rwo=i(ue),W1=n(ue,"LI",{});var b6e=s(W1);Vie=n(b6e,"STRONG",{});var CZr=s(Vie);Bwo=r(CZr,"plbart"),CZr.forEach(t),Pwo=r(b6e," \u2014 "),hj=n(b6e,"A",{href:!0});var wZr=s(hj);Iwo=r(wZr,"PLBartForConditionalGeneration"),wZr.forEach(t),qwo=r(b6e," (PLBart model)"),b6e.forEach(t),Nwo=i(ue),H1=n(ue,"LI",{});var v6e=s(H1);Xie=n(v6e,"STRONG",{});var AZr=s(Xie);jwo=r(AZr,"prophetnet"),AZr.forEach(t),Dwo=r(v6e," \u2014 "),pj=n(v6e,"A",{href:!0});var yZr=s(pj);Gwo=r(yZr,"ProphetNetForConditionalGeneration"),yZr.forEach(t),Owo=r(v6e," (ProphetNet model)"),v6e.forEach(t),Vwo=i(ue),U1=n(ue,"LI",{});var F6e=s(U1);zie=n(F6e,"STRONG",{});var LZr=s(zie);Xwo=r(LZr,"t5"),LZr.forEach(t),zwo=r(F6e," \u2014 "),uj=n(F6e,"A",{href:!0});var xZr=s(uj);Qwo=r(xZr,"T5ForConditionalGeneration"),xZr.forEach(t),Wwo=r(F6e," (T5 model)"),F6e.forEach(t),Hwo=i(ue),J1=n(ue,"LI",{});var T6e=s(J1);Qie=n(T6e,"STRONG",{});var $Zr=s(Qie);Uwo=r($Zr,"tapex"),$Zr.forEach(t),Jwo=r(T6e," \u2014 "),_j=n(T6e,"A",{href:!0});var kZr=s(_j);Ywo=r(kZr,"BartForConditionalGeneration"),kZr.forEach(t),Kwo=r(T6e," (TAPEX model)"),T6e.forEach(t),Zwo=i(ue),Y1=n(ue,"LI",{});var M6e=s(Y1);Wie=n(M6e,"STRONG",{});var SZr=s(Wie);eAo=r(SZr,"xlm-prophetnet"),SZr.forEach(t),oAo=r(M6e," \u2014 "),bj=n(M6e,"A",{href:!0});var RZr=s(bj);rAo=r(RZr,"XLMProphetNetForConditionalGeneration"),RZr.forEach(t),tAo=r(M6e," (XLMProphetNet model)"),M6e.forEach(t),ue.forEach(t),aAo=i(ea),K1=n(ea,"P",{});var E6e=s(K1);nAo=r(E6e,"The model is set in evaluation mode by default using "),Hie=n(E6e,"CODE",{});var BZr=s(Hie);sAo=r(BZr,"model.eval()"),BZr.forEach(t),lAo=r(E6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uie=n(E6e,"CODE",{});var PZr=s(Uie);iAo=r(PZr,"model.train()"),PZr.forEach(t),E6e.forEach(t),dAo=i(ea),T(Z1.$$.fragment,ea),ea.forEach(t),js.forEach(t),LBe=i(f),$i=n(f,"H2",{class:!0});var $Ie=s($i);e7=n($Ie,"A",{id:!0,class:!0,href:!0});var IZr=s(e7);Jie=n(IZr,"SPAN",{});var qZr=s(Jie);T(b6.$$.fragment,qZr),qZr.forEach(t),IZr.forEach(t),cAo=i($Ie),Yie=n($Ie,"SPAN",{});var NZr=s(Yie);fAo=r(NZr,"AutoModelForSequenceClassification"),NZr.forEach(t),$Ie.forEach(t),xBe=i(f),Ro=n(f,"DIV",{class:!0});var Ds=s(Ro);T(v6.$$.fragment,Ds),mAo=i(Ds),ki=n(Ds,"P",{});var TY=s(ki);gAo=r(TY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vj=n(TY,"A",{href:!0});var jZr=s(vj);hAo=r(jZr,"from_pretrained()"),jZr.forEach(t),pAo=r(TY," class method or the "),Fj=n(TY,"A",{href:!0});var DZr=s(Fj);uAo=r(DZr,"from_config()"),DZr.forEach(t),_Ao=r(TY,` class
method.`),TY.forEach(t),bAo=i(Ds),F6=n(Ds,"P",{});var kIe=s(F6);vAo=r(kIe,"This class cannot be instantiated directly using "),Kie=n(kIe,"CODE",{});var GZr=s(Kie);FAo=r(GZr,"__init__()"),GZr.forEach(t),TAo=r(kIe," (throws an error)."),kIe.forEach(t),MAo=i(Ds),at=n(Ds,"DIV",{class:!0});var IC=s(at);T(T6.$$.fragment,IC),EAo=i(IC),Zie=n(IC,"P",{});var OZr=s(Zie);CAo=r(OZr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),OZr.forEach(t),wAo=i(IC),Si=n(IC,"P",{});var MY=s(Si);AAo=r(MY,`Note:
Loading a model from its configuration file does `),ede=n(MY,"STRONG",{});var VZr=s(ede);yAo=r(VZr,"not"),VZr.forEach(t),LAo=r(MY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tj=n(MY,"A",{href:!0});var XZr=s(Tj);xAo=r(XZr,"from_pretrained()"),XZr.forEach(t),$Ao=r(MY," to load the model weights."),MY.forEach(t),kAo=i(IC),T(o7.$$.fragment,IC),IC.forEach(t),SAo=i(Ds),Ze=n(Ds,"DIV",{class:!0});var oa=s(Ze);T(M6.$$.fragment,oa),RAo=i(oa),ode=n(oa,"P",{});var zZr=s(ode);BAo=r(zZr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),zZr.forEach(t),PAo=i(oa),La=n(oa,"P",{});var qC=s(La);IAo=r(qC,"The model class to instantiate is selected based on the "),rde=n(qC,"CODE",{});var QZr=s(rde);qAo=r(QZr,"model_type"),QZr.forEach(t),NAo=r(qC,` property of the config object (either
passed as an argument or loaded from `),tde=n(qC,"CODE",{});var WZr=s(tde);jAo=r(WZr,"pretrained_model_name_or_path"),WZr.forEach(t),DAo=r(qC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=n(qC,"CODE",{});var HZr=s(ade);GAo=r(HZr,"pretrained_model_name_or_path"),HZr.forEach(t),OAo=r(qC,":"),qC.forEach(t),VAo=i(oa),q=n(oa,"UL",{});var N=s(q);r7=n(N,"LI",{});var C6e=s(r7);nde=n(C6e,"STRONG",{});var UZr=s(nde);XAo=r(UZr,"albert"),UZr.forEach(t),zAo=r(C6e," \u2014 "),Mj=n(C6e,"A",{href:!0});var JZr=s(Mj);QAo=r(JZr,"AlbertForSequenceClassification"),JZr.forEach(t),WAo=r(C6e," (ALBERT model)"),C6e.forEach(t),HAo=i(N),t7=n(N,"LI",{});var w6e=s(t7);sde=n(w6e,"STRONG",{});var YZr=s(sde);UAo=r(YZr,"bart"),YZr.forEach(t),JAo=r(w6e," \u2014 "),Ej=n(w6e,"A",{href:!0});var KZr=s(Ej);YAo=r(KZr,"BartForSequenceClassification"),KZr.forEach(t),KAo=r(w6e," (BART model)"),w6e.forEach(t),ZAo=i(N),a7=n(N,"LI",{});var A6e=s(a7);lde=n(A6e,"STRONG",{});var ZZr=s(lde);e6o=r(ZZr,"bert"),ZZr.forEach(t),o6o=r(A6e," \u2014 "),Cj=n(A6e,"A",{href:!0});var eet=s(Cj);r6o=r(eet,"BertForSequenceClassification"),eet.forEach(t),t6o=r(A6e," (BERT model)"),A6e.forEach(t),a6o=i(N),n7=n(N,"LI",{});var y6e=s(n7);ide=n(y6e,"STRONG",{});var oet=s(ide);n6o=r(oet,"big_bird"),oet.forEach(t),s6o=r(y6e," \u2014 "),wj=n(y6e,"A",{href:!0});var ret=s(wj);l6o=r(ret,"BigBirdForSequenceClassification"),ret.forEach(t),i6o=r(y6e," (BigBird model)"),y6e.forEach(t),d6o=i(N),s7=n(N,"LI",{});var L6e=s(s7);dde=n(L6e,"STRONG",{});var tet=s(dde);c6o=r(tet,"bigbird_pegasus"),tet.forEach(t),f6o=r(L6e," \u2014 "),Aj=n(L6e,"A",{href:!0});var aet=s(Aj);m6o=r(aet,"BigBirdPegasusForSequenceClassification"),aet.forEach(t),g6o=r(L6e," (BigBirdPegasus model)"),L6e.forEach(t),h6o=i(N),l7=n(N,"LI",{});var x6e=s(l7);cde=n(x6e,"STRONG",{});var net=s(cde);p6o=r(net,"camembert"),net.forEach(t),u6o=r(x6e," \u2014 "),yj=n(x6e,"A",{href:!0});var set=s(yj);_6o=r(set,"CamembertForSequenceClassification"),set.forEach(t),b6o=r(x6e," (CamemBERT model)"),x6e.forEach(t),v6o=i(N),i7=n(N,"LI",{});var $6e=s(i7);fde=n($6e,"STRONG",{});var iet=s(fde);F6o=r(iet,"canine"),iet.forEach(t),T6o=r($6e," \u2014 "),Lj=n($6e,"A",{href:!0});var det=s(Lj);M6o=r(det,"CanineForSequenceClassification"),det.forEach(t),E6o=r($6e," (Canine model)"),$6e.forEach(t),C6o=i(N),d7=n(N,"LI",{});var k6e=s(d7);mde=n(k6e,"STRONG",{});var cet=s(mde);w6o=r(cet,"convbert"),cet.forEach(t),A6o=r(k6e," \u2014 "),xj=n(k6e,"A",{href:!0});var fet=s(xj);y6o=r(fet,"ConvBertForSequenceClassification"),fet.forEach(t),L6o=r(k6e," (ConvBERT model)"),k6e.forEach(t),x6o=i(N),c7=n(N,"LI",{});var S6e=s(c7);gde=n(S6e,"STRONG",{});var met=s(gde);$6o=r(met,"ctrl"),met.forEach(t),k6o=r(S6e," \u2014 "),$j=n(S6e,"A",{href:!0});var get=s($j);S6o=r(get,"CTRLForSequenceClassification"),get.forEach(t),R6o=r(S6e," (CTRL model)"),S6e.forEach(t),B6o=i(N),f7=n(N,"LI",{});var R6e=s(f7);hde=n(R6e,"STRONG",{});var het=s(hde);P6o=r(het,"data2vec-text"),het.forEach(t),I6o=r(R6e," \u2014 "),kj=n(R6e,"A",{href:!0});var pet=s(kj);q6o=r(pet,"Data2VecTextForSequenceClassification"),pet.forEach(t),N6o=r(R6e," (Data2VecText model)"),R6e.forEach(t),j6o=i(N),m7=n(N,"LI",{});var B6e=s(m7);pde=n(B6e,"STRONG",{});var uet=s(pde);D6o=r(uet,"deberta"),uet.forEach(t),G6o=r(B6e," \u2014 "),Sj=n(B6e,"A",{href:!0});var _et=s(Sj);O6o=r(_et,"DebertaForSequenceClassification"),_et.forEach(t),V6o=r(B6e," (DeBERTa model)"),B6e.forEach(t),X6o=i(N),g7=n(N,"LI",{});var P6e=s(g7);ude=n(P6e,"STRONG",{});var bet=s(ude);z6o=r(bet,"deberta-v2"),bet.forEach(t),Q6o=r(P6e," \u2014 "),Rj=n(P6e,"A",{href:!0});var vet=s(Rj);W6o=r(vet,"DebertaV2ForSequenceClassification"),vet.forEach(t),H6o=r(P6e," (DeBERTa-v2 model)"),P6e.forEach(t),U6o=i(N),h7=n(N,"LI",{});var I6e=s(h7);_de=n(I6e,"STRONG",{});var Fet=s(_de);J6o=r(Fet,"distilbert"),Fet.forEach(t),Y6o=r(I6e," \u2014 "),Bj=n(I6e,"A",{href:!0});var Tet=s(Bj);K6o=r(Tet,"DistilBertForSequenceClassification"),Tet.forEach(t),Z6o=r(I6e," (DistilBERT model)"),I6e.forEach(t),eyo=i(N),p7=n(N,"LI",{});var q6e=s(p7);bde=n(q6e,"STRONG",{});var Met=s(bde);oyo=r(Met,"electra"),Met.forEach(t),ryo=r(q6e," \u2014 "),Pj=n(q6e,"A",{href:!0});var Eet=s(Pj);tyo=r(Eet,"ElectraForSequenceClassification"),Eet.forEach(t),ayo=r(q6e," (ELECTRA model)"),q6e.forEach(t),nyo=i(N),u7=n(N,"LI",{});var N6e=s(u7);vde=n(N6e,"STRONG",{});var Cet=s(vde);syo=r(Cet,"flaubert"),Cet.forEach(t),lyo=r(N6e," \u2014 "),Ij=n(N6e,"A",{href:!0});var wet=s(Ij);iyo=r(wet,"FlaubertForSequenceClassification"),wet.forEach(t),dyo=r(N6e," (FlauBERT model)"),N6e.forEach(t),cyo=i(N),_7=n(N,"LI",{});var j6e=s(_7);Fde=n(j6e,"STRONG",{});var Aet=s(Fde);fyo=r(Aet,"fnet"),Aet.forEach(t),myo=r(j6e," \u2014 "),qj=n(j6e,"A",{href:!0});var yet=s(qj);gyo=r(yet,"FNetForSequenceClassification"),yet.forEach(t),hyo=r(j6e," (FNet model)"),j6e.forEach(t),pyo=i(N),b7=n(N,"LI",{});var D6e=s(b7);Tde=n(D6e,"STRONG",{});var Let=s(Tde);uyo=r(Let,"funnel"),Let.forEach(t),_yo=r(D6e," \u2014 "),Nj=n(D6e,"A",{href:!0});var xet=s(Nj);byo=r(xet,"FunnelForSequenceClassification"),xet.forEach(t),vyo=r(D6e," (Funnel Transformer model)"),D6e.forEach(t),Fyo=i(N),v7=n(N,"LI",{});var G6e=s(v7);Mde=n(G6e,"STRONG",{});var $et=s(Mde);Tyo=r($et,"gpt2"),$et.forEach(t),Myo=r(G6e," \u2014 "),jj=n(G6e,"A",{href:!0});var ket=s(jj);Eyo=r(ket,"GPT2ForSequenceClassification"),ket.forEach(t),Cyo=r(G6e," (OpenAI GPT-2 model)"),G6e.forEach(t),wyo=i(N),F7=n(N,"LI",{});var O6e=s(F7);Ede=n(O6e,"STRONG",{});var Set=s(Ede);Ayo=r(Set,"gpt_neo"),Set.forEach(t),yyo=r(O6e," \u2014 "),Dj=n(O6e,"A",{href:!0});var Ret=s(Dj);Lyo=r(Ret,"GPTNeoForSequenceClassification"),Ret.forEach(t),xyo=r(O6e," (GPT Neo model)"),O6e.forEach(t),$yo=i(N),T7=n(N,"LI",{});var V6e=s(T7);Cde=n(V6e,"STRONG",{});var Bet=s(Cde);kyo=r(Bet,"gptj"),Bet.forEach(t),Syo=r(V6e," \u2014 "),Gj=n(V6e,"A",{href:!0});var Pet=s(Gj);Ryo=r(Pet,"GPTJForSequenceClassification"),Pet.forEach(t),Byo=r(V6e," (GPT-J model)"),V6e.forEach(t),Pyo=i(N),M7=n(N,"LI",{});var X6e=s(M7);wde=n(X6e,"STRONG",{});var Iet=s(wde);Iyo=r(Iet,"ibert"),Iet.forEach(t),qyo=r(X6e," \u2014 "),Oj=n(X6e,"A",{href:!0});var qet=s(Oj);Nyo=r(qet,"IBertForSequenceClassification"),qet.forEach(t),jyo=r(X6e," (I-BERT model)"),X6e.forEach(t),Dyo=i(N),E7=n(N,"LI",{});var z6e=s(E7);Ade=n(z6e,"STRONG",{});var Net=s(Ade);Gyo=r(Net,"layoutlm"),Net.forEach(t),Oyo=r(z6e," \u2014 "),Vj=n(z6e,"A",{href:!0});var jet=s(Vj);Vyo=r(jet,"LayoutLMForSequenceClassification"),jet.forEach(t),Xyo=r(z6e," (LayoutLM model)"),z6e.forEach(t),zyo=i(N),C7=n(N,"LI",{});var Q6e=s(C7);yde=n(Q6e,"STRONG",{});var Det=s(yde);Qyo=r(Det,"layoutlmv2"),Det.forEach(t),Wyo=r(Q6e," \u2014 "),Xj=n(Q6e,"A",{href:!0});var Get=s(Xj);Hyo=r(Get,"LayoutLMv2ForSequenceClassification"),Get.forEach(t),Uyo=r(Q6e," (LayoutLMv2 model)"),Q6e.forEach(t),Jyo=i(N),w7=n(N,"LI",{});var W6e=s(w7);Lde=n(W6e,"STRONG",{});var Oet=s(Lde);Yyo=r(Oet,"led"),Oet.forEach(t),Kyo=r(W6e," \u2014 "),zj=n(W6e,"A",{href:!0});var Vet=s(zj);Zyo=r(Vet,"LEDForSequenceClassification"),Vet.forEach(t),eLo=r(W6e," (LED model)"),W6e.forEach(t),oLo=i(N),A7=n(N,"LI",{});var H6e=s(A7);xde=n(H6e,"STRONG",{});var Xet=s(xde);rLo=r(Xet,"longformer"),Xet.forEach(t),tLo=r(H6e," \u2014 "),Qj=n(H6e,"A",{href:!0});var zet=s(Qj);aLo=r(zet,"LongformerForSequenceClassification"),zet.forEach(t),nLo=r(H6e," (Longformer model)"),H6e.forEach(t),sLo=i(N),y7=n(N,"LI",{});var U6e=s(y7);$de=n(U6e,"STRONG",{});var Qet=s($de);lLo=r(Qet,"mbart"),Qet.forEach(t),iLo=r(U6e," \u2014 "),Wj=n(U6e,"A",{href:!0});var Wet=s(Wj);dLo=r(Wet,"MBartForSequenceClassification"),Wet.forEach(t),cLo=r(U6e," (mBART model)"),U6e.forEach(t),fLo=i(N),L7=n(N,"LI",{});var J6e=s(L7);kde=n(J6e,"STRONG",{});var Het=s(kde);mLo=r(Het,"megatron-bert"),Het.forEach(t),gLo=r(J6e," \u2014 "),Hj=n(J6e,"A",{href:!0});var Uet=s(Hj);hLo=r(Uet,"MegatronBertForSequenceClassification"),Uet.forEach(t),pLo=r(J6e," (MegatronBert model)"),J6e.forEach(t),uLo=i(N),x7=n(N,"LI",{});var Y6e=s(x7);Sde=n(Y6e,"STRONG",{});var Jet=s(Sde);_Lo=r(Jet,"mobilebert"),Jet.forEach(t),bLo=r(Y6e," \u2014 "),Uj=n(Y6e,"A",{href:!0});var Yet=s(Uj);vLo=r(Yet,"MobileBertForSequenceClassification"),Yet.forEach(t),FLo=r(Y6e," (MobileBERT model)"),Y6e.forEach(t),TLo=i(N),$7=n(N,"LI",{});var K6e=s($7);Rde=n(K6e,"STRONG",{});var Ket=s(Rde);MLo=r(Ket,"mpnet"),Ket.forEach(t),ELo=r(K6e," \u2014 "),Jj=n(K6e,"A",{href:!0});var Zet=s(Jj);CLo=r(Zet,"MPNetForSequenceClassification"),Zet.forEach(t),wLo=r(K6e," (MPNet model)"),K6e.forEach(t),ALo=i(N),k7=n(N,"LI",{});var Z6e=s(k7);Bde=n(Z6e,"STRONG",{});var eot=s(Bde);yLo=r(eot,"nystromformer"),eot.forEach(t),LLo=r(Z6e," \u2014 "),Yj=n(Z6e,"A",{href:!0});var oot=s(Yj);xLo=r(oot,"NystromformerForSequenceClassification"),oot.forEach(t),$Lo=r(Z6e," (Nystromformer model)"),Z6e.forEach(t),kLo=i(N),S7=n(N,"LI",{});var eye=s(S7);Pde=n(eye,"STRONG",{});var rot=s(Pde);SLo=r(rot,"openai-gpt"),rot.forEach(t),RLo=r(eye," \u2014 "),Kj=n(eye,"A",{href:!0});var tot=s(Kj);BLo=r(tot,"OpenAIGPTForSequenceClassification"),tot.forEach(t),PLo=r(eye," (OpenAI GPT model)"),eye.forEach(t),ILo=i(N),R7=n(N,"LI",{});var oye=s(R7);Ide=n(oye,"STRONG",{});var aot=s(Ide);qLo=r(aot,"perceiver"),aot.forEach(t),NLo=r(oye," \u2014 "),Zj=n(oye,"A",{href:!0});var not=s(Zj);jLo=r(not,"PerceiverForSequenceClassification"),not.forEach(t),DLo=r(oye," (Perceiver model)"),oye.forEach(t),GLo=i(N),B7=n(N,"LI",{});var rye=s(B7);qde=n(rye,"STRONG",{});var sot=s(qde);OLo=r(sot,"plbart"),sot.forEach(t),VLo=r(rye," \u2014 "),eD=n(rye,"A",{href:!0});var lot=s(eD);XLo=r(lot,"PLBartForSequenceClassification"),lot.forEach(t),zLo=r(rye," (PLBart model)"),rye.forEach(t),QLo=i(N),P7=n(N,"LI",{});var tye=s(P7);Nde=n(tye,"STRONG",{});var iot=s(Nde);WLo=r(iot,"qdqbert"),iot.forEach(t),HLo=r(tye," \u2014 "),oD=n(tye,"A",{href:!0});var dot=s(oD);ULo=r(dot,"QDQBertForSequenceClassification"),dot.forEach(t),JLo=r(tye," (QDQBert model)"),tye.forEach(t),YLo=i(N),I7=n(N,"LI",{});var aye=s(I7);jde=n(aye,"STRONG",{});var cot=s(jde);KLo=r(cot,"reformer"),cot.forEach(t),ZLo=r(aye," \u2014 "),rD=n(aye,"A",{href:!0});var fot=s(rD);e8o=r(fot,"ReformerForSequenceClassification"),fot.forEach(t),o8o=r(aye," (Reformer model)"),aye.forEach(t),r8o=i(N),q7=n(N,"LI",{});var nye=s(q7);Dde=n(nye,"STRONG",{});var mot=s(Dde);t8o=r(mot,"rembert"),mot.forEach(t),a8o=r(nye," \u2014 "),tD=n(nye,"A",{href:!0});var got=s(tD);n8o=r(got,"RemBertForSequenceClassification"),got.forEach(t),s8o=r(nye," (RemBERT model)"),nye.forEach(t),l8o=i(N),N7=n(N,"LI",{});var sye=s(N7);Gde=n(sye,"STRONG",{});var hot=s(Gde);i8o=r(hot,"roberta"),hot.forEach(t),d8o=r(sye," \u2014 "),aD=n(sye,"A",{href:!0});var pot=s(aD);c8o=r(pot,"RobertaForSequenceClassification"),pot.forEach(t),f8o=r(sye," (RoBERTa model)"),sye.forEach(t),m8o=i(N),j7=n(N,"LI",{});var lye=s(j7);Ode=n(lye,"STRONG",{});var uot=s(Ode);g8o=r(uot,"roformer"),uot.forEach(t),h8o=r(lye," \u2014 "),nD=n(lye,"A",{href:!0});var _ot=s(nD);p8o=r(_ot,"RoFormerForSequenceClassification"),_ot.forEach(t),u8o=r(lye," (RoFormer model)"),lye.forEach(t),_8o=i(N),D7=n(N,"LI",{});var iye=s(D7);Vde=n(iye,"STRONG",{});var bot=s(Vde);b8o=r(bot,"squeezebert"),bot.forEach(t),v8o=r(iye," \u2014 "),sD=n(iye,"A",{href:!0});var vot=s(sD);F8o=r(vot,"SqueezeBertForSequenceClassification"),vot.forEach(t),T8o=r(iye," (SqueezeBERT model)"),iye.forEach(t),M8o=i(N),G7=n(N,"LI",{});var dye=s(G7);Xde=n(dye,"STRONG",{});var Fot=s(Xde);E8o=r(Fot,"tapas"),Fot.forEach(t),C8o=r(dye," \u2014 "),lD=n(dye,"A",{href:!0});var Tot=s(lD);w8o=r(Tot,"TapasForSequenceClassification"),Tot.forEach(t),A8o=r(dye," (TAPAS model)"),dye.forEach(t),y8o=i(N),O7=n(N,"LI",{});var cye=s(O7);zde=n(cye,"STRONG",{});var Mot=s(zde);L8o=r(Mot,"tapex"),Mot.forEach(t),x8o=r(cye," \u2014 "),iD=n(cye,"A",{href:!0});var Eot=s(iD);$8o=r(Eot,"BartForSequenceClassification"),Eot.forEach(t),k8o=r(cye," (TAPEX model)"),cye.forEach(t),S8o=i(N),V7=n(N,"LI",{});var fye=s(V7);Qde=n(fye,"STRONG",{});var Cot=s(Qde);R8o=r(Cot,"transfo-xl"),Cot.forEach(t),B8o=r(fye," \u2014 "),dD=n(fye,"A",{href:!0});var wot=s(dD);P8o=r(wot,"TransfoXLForSequenceClassification"),wot.forEach(t),I8o=r(fye," (Transformer-XL model)"),fye.forEach(t),q8o=i(N),X7=n(N,"LI",{});var mye=s(X7);Wde=n(mye,"STRONG",{});var Aot=s(Wde);N8o=r(Aot,"xlm"),Aot.forEach(t),j8o=r(mye," \u2014 "),cD=n(mye,"A",{href:!0});var yot=s(cD);D8o=r(yot,"XLMForSequenceClassification"),yot.forEach(t),G8o=r(mye," (XLM model)"),mye.forEach(t),O8o=i(N),z7=n(N,"LI",{});var gye=s(z7);Hde=n(gye,"STRONG",{});var Lot=s(Hde);V8o=r(Lot,"xlm-roberta"),Lot.forEach(t),X8o=r(gye," \u2014 "),fD=n(gye,"A",{href:!0});var xot=s(fD);z8o=r(xot,"XLMRobertaForSequenceClassification"),xot.forEach(t),Q8o=r(gye," (XLM-RoBERTa model)"),gye.forEach(t),W8o=i(N),Q7=n(N,"LI",{});var hye=s(Q7);Ude=n(hye,"STRONG",{});var $ot=s(Ude);H8o=r($ot,"xlm-roberta-xl"),$ot.forEach(t),U8o=r(hye," \u2014 "),mD=n(hye,"A",{href:!0});var kot=s(mD);J8o=r(kot,"XLMRobertaXLForSequenceClassification"),kot.forEach(t),Y8o=r(hye," (XLM-RoBERTa-XL model)"),hye.forEach(t),K8o=i(N),W7=n(N,"LI",{});var pye=s(W7);Jde=n(pye,"STRONG",{});var Sot=s(Jde);Z8o=r(Sot,"xlnet"),Sot.forEach(t),exo=r(pye," \u2014 "),gD=n(pye,"A",{href:!0});var Rot=s(gD);oxo=r(Rot,"XLNetForSequenceClassification"),Rot.forEach(t),rxo=r(pye," (XLNet model)"),pye.forEach(t),txo=i(N),H7=n(N,"LI",{});var uye=s(H7);Yde=n(uye,"STRONG",{});var Bot=s(Yde);axo=r(Bot,"yoso"),Bot.forEach(t),nxo=r(uye," \u2014 "),hD=n(uye,"A",{href:!0});var Pot=s(hD);sxo=r(Pot,"YosoForSequenceClassification"),Pot.forEach(t),lxo=r(uye," (YOSO model)"),uye.forEach(t),N.forEach(t),ixo=i(oa),U7=n(oa,"P",{});var _ye=s(U7);dxo=r(_ye,"The model is set in evaluation mode by default using "),Kde=n(_ye,"CODE",{});var Iot=s(Kde);cxo=r(Iot,"model.eval()"),Iot.forEach(t),fxo=r(_ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zde=n(_ye,"CODE",{});var qot=s(Zde);mxo=r(qot,"model.train()"),qot.forEach(t),_ye.forEach(t),gxo=i(oa),T(J7.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),$Be=i(f),Ri=n(f,"H2",{class:!0});var SIe=s(Ri);Y7=n(SIe,"A",{id:!0,class:!0,href:!0});var Not=s(Y7);ece=n(Not,"SPAN",{});var jot=s(ece);T(E6.$$.fragment,jot),jot.forEach(t),Not.forEach(t),hxo=i(SIe),oce=n(SIe,"SPAN",{});var Dot=s(oce);pxo=r(Dot,"AutoModelForMultipleChoice"),Dot.forEach(t),SIe.forEach(t),kBe=i(f),Bo=n(f,"DIV",{class:!0});var Gs=s(Bo);T(C6.$$.fragment,Gs),uxo=i(Gs),Bi=n(Gs,"P",{});var EY=s(Bi);_xo=r(EY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pD=n(EY,"A",{href:!0});var Got=s(pD);bxo=r(Got,"from_pretrained()"),Got.forEach(t),vxo=r(EY," class method or the "),uD=n(EY,"A",{href:!0});var Oot=s(uD);Fxo=r(Oot,"from_config()"),Oot.forEach(t),Txo=r(EY,` class
method.`),EY.forEach(t),Mxo=i(Gs),w6=n(Gs,"P",{});var RIe=s(w6);Exo=r(RIe,"This class cannot be instantiated directly using "),rce=n(RIe,"CODE",{});var Vot=s(rce);Cxo=r(Vot,"__init__()"),Vot.forEach(t),wxo=r(RIe," (throws an error)."),RIe.forEach(t),Axo=i(Gs),nt=n(Gs,"DIV",{class:!0});var NC=s(nt);T(A6.$$.fragment,NC),yxo=i(NC),tce=n(NC,"P",{});var Xot=s(tce);Lxo=r(Xot,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Xot.forEach(t),xxo=i(NC),Pi=n(NC,"P",{});var CY=s(Pi);$xo=r(CY,`Note:
Loading a model from its configuration file does `),ace=n(CY,"STRONG",{});var zot=s(ace);kxo=r(zot,"not"),zot.forEach(t),Sxo=r(CY,` load the model weights. It only affects the
model\u2019s configuration. Use `),_D=n(CY,"A",{href:!0});var Qot=s(_D);Rxo=r(Qot,"from_pretrained()"),Qot.forEach(t),Bxo=r(CY," to load the model weights."),CY.forEach(t),Pxo=i(NC),T(K7.$$.fragment,NC),NC.forEach(t),Ixo=i(Gs),eo=n(Gs,"DIV",{class:!0});var ra=s(eo);T(y6.$$.fragment,ra),qxo=i(ra),nce=n(ra,"P",{});var Wot=s(nce);Nxo=r(Wot,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Wot.forEach(t),jxo=i(ra),xa=n(ra,"P",{});var jC=s(xa);Dxo=r(jC,"The model class to instantiate is selected based on the "),sce=n(jC,"CODE",{});var Hot=s(sce);Gxo=r(Hot,"model_type"),Hot.forEach(t),Oxo=r(jC,` property of the config object (either
passed as an argument or loaded from `),lce=n(jC,"CODE",{});var Uot=s(lce);Vxo=r(Uot,"pretrained_model_name_or_path"),Uot.forEach(t),Xxo=r(jC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ice=n(jC,"CODE",{});var Jot=s(ice);zxo=r(Jot,"pretrained_model_name_or_path"),Jot.forEach(t),Qxo=r(jC,":"),jC.forEach(t),Wxo=i(ra),Y=n(ra,"UL",{});var K=s(Y);Z7=n(K,"LI",{});var bye=s(Z7);dce=n(bye,"STRONG",{});var Yot=s(dce);Hxo=r(Yot,"albert"),Yot.forEach(t),Uxo=r(bye," \u2014 "),bD=n(bye,"A",{href:!0});var Kot=s(bD);Jxo=r(Kot,"AlbertForMultipleChoice"),Kot.forEach(t),Yxo=r(bye," (ALBERT model)"),bye.forEach(t),Kxo=i(K),eb=n(K,"LI",{});var vye=s(eb);cce=n(vye,"STRONG",{});var Zot=s(cce);Zxo=r(Zot,"bert"),Zot.forEach(t),e9o=r(vye," \u2014 "),vD=n(vye,"A",{href:!0});var ert=s(vD);o9o=r(ert,"BertForMultipleChoice"),ert.forEach(t),r9o=r(vye," (BERT model)"),vye.forEach(t),t9o=i(K),ob=n(K,"LI",{});var Fye=s(ob);fce=n(Fye,"STRONG",{});var ort=s(fce);a9o=r(ort,"big_bird"),ort.forEach(t),n9o=r(Fye," \u2014 "),FD=n(Fye,"A",{href:!0});var rrt=s(FD);s9o=r(rrt,"BigBirdForMultipleChoice"),rrt.forEach(t),l9o=r(Fye," (BigBird model)"),Fye.forEach(t),i9o=i(K),rb=n(K,"LI",{});var Tye=s(rb);mce=n(Tye,"STRONG",{});var trt=s(mce);d9o=r(trt,"camembert"),trt.forEach(t),c9o=r(Tye," \u2014 "),TD=n(Tye,"A",{href:!0});var art=s(TD);f9o=r(art,"CamembertForMultipleChoice"),art.forEach(t),m9o=r(Tye," (CamemBERT model)"),Tye.forEach(t),g9o=i(K),tb=n(K,"LI",{});var Mye=s(tb);gce=n(Mye,"STRONG",{});var nrt=s(gce);h9o=r(nrt,"canine"),nrt.forEach(t),p9o=r(Mye," \u2014 "),MD=n(Mye,"A",{href:!0});var srt=s(MD);u9o=r(srt,"CanineForMultipleChoice"),srt.forEach(t),_9o=r(Mye," (Canine model)"),Mye.forEach(t),b9o=i(K),ab=n(K,"LI",{});var Eye=s(ab);hce=n(Eye,"STRONG",{});var lrt=s(hce);v9o=r(lrt,"convbert"),lrt.forEach(t),F9o=r(Eye," \u2014 "),ED=n(Eye,"A",{href:!0});var irt=s(ED);T9o=r(irt,"ConvBertForMultipleChoice"),irt.forEach(t),M9o=r(Eye," (ConvBERT model)"),Eye.forEach(t),E9o=i(K),nb=n(K,"LI",{});var Cye=s(nb);pce=n(Cye,"STRONG",{});var drt=s(pce);C9o=r(drt,"data2vec-text"),drt.forEach(t),w9o=r(Cye," \u2014 "),CD=n(Cye,"A",{href:!0});var crt=s(CD);A9o=r(crt,"Data2VecTextForMultipleChoice"),crt.forEach(t),y9o=r(Cye," (Data2VecText model)"),Cye.forEach(t),L9o=i(K),sb=n(K,"LI",{});var wye=s(sb);uce=n(wye,"STRONG",{});var frt=s(uce);x9o=r(frt,"distilbert"),frt.forEach(t),$9o=r(wye," \u2014 "),wD=n(wye,"A",{href:!0});var mrt=s(wD);k9o=r(mrt,"DistilBertForMultipleChoice"),mrt.forEach(t),S9o=r(wye," (DistilBERT model)"),wye.forEach(t),R9o=i(K),lb=n(K,"LI",{});var Aye=s(lb);_ce=n(Aye,"STRONG",{});var grt=s(_ce);B9o=r(grt,"electra"),grt.forEach(t),P9o=r(Aye," \u2014 "),AD=n(Aye,"A",{href:!0});var hrt=s(AD);I9o=r(hrt,"ElectraForMultipleChoice"),hrt.forEach(t),q9o=r(Aye," (ELECTRA model)"),Aye.forEach(t),N9o=i(K),ib=n(K,"LI",{});var yye=s(ib);bce=n(yye,"STRONG",{});var prt=s(bce);j9o=r(prt,"flaubert"),prt.forEach(t),D9o=r(yye," \u2014 "),yD=n(yye,"A",{href:!0});var urt=s(yD);G9o=r(urt,"FlaubertForMultipleChoice"),urt.forEach(t),O9o=r(yye," (FlauBERT model)"),yye.forEach(t),V9o=i(K),db=n(K,"LI",{});var Lye=s(db);vce=n(Lye,"STRONG",{});var _rt=s(vce);X9o=r(_rt,"fnet"),_rt.forEach(t),z9o=r(Lye," \u2014 "),LD=n(Lye,"A",{href:!0});var brt=s(LD);Q9o=r(brt,"FNetForMultipleChoice"),brt.forEach(t),W9o=r(Lye," (FNet model)"),Lye.forEach(t),H9o=i(K),cb=n(K,"LI",{});var xye=s(cb);Fce=n(xye,"STRONG",{});var vrt=s(Fce);U9o=r(vrt,"funnel"),vrt.forEach(t),J9o=r(xye," \u2014 "),xD=n(xye,"A",{href:!0});var Frt=s(xD);Y9o=r(Frt,"FunnelForMultipleChoice"),Frt.forEach(t),K9o=r(xye," (Funnel Transformer model)"),xye.forEach(t),Z9o=i(K),fb=n(K,"LI",{});var $ye=s(fb);Tce=n($ye,"STRONG",{});var Trt=s(Tce);e$o=r(Trt,"ibert"),Trt.forEach(t),o$o=r($ye," \u2014 "),$D=n($ye,"A",{href:!0});var Mrt=s($D);r$o=r(Mrt,"IBertForMultipleChoice"),Mrt.forEach(t),t$o=r($ye," (I-BERT model)"),$ye.forEach(t),a$o=i(K),mb=n(K,"LI",{});var kye=s(mb);Mce=n(kye,"STRONG",{});var Ert=s(Mce);n$o=r(Ert,"longformer"),Ert.forEach(t),s$o=r(kye," \u2014 "),kD=n(kye,"A",{href:!0});var Crt=s(kD);l$o=r(Crt,"LongformerForMultipleChoice"),Crt.forEach(t),i$o=r(kye," (Longformer model)"),kye.forEach(t),d$o=i(K),gb=n(K,"LI",{});var Sye=s(gb);Ece=n(Sye,"STRONG",{});var wrt=s(Ece);c$o=r(wrt,"megatron-bert"),wrt.forEach(t),f$o=r(Sye," \u2014 "),SD=n(Sye,"A",{href:!0});var Art=s(SD);m$o=r(Art,"MegatronBertForMultipleChoice"),Art.forEach(t),g$o=r(Sye," (MegatronBert model)"),Sye.forEach(t),h$o=i(K),hb=n(K,"LI",{});var Rye=s(hb);Cce=n(Rye,"STRONG",{});var yrt=s(Cce);p$o=r(yrt,"mobilebert"),yrt.forEach(t),u$o=r(Rye," \u2014 "),RD=n(Rye,"A",{href:!0});var Lrt=s(RD);_$o=r(Lrt,"MobileBertForMultipleChoice"),Lrt.forEach(t),b$o=r(Rye," (MobileBERT model)"),Rye.forEach(t),v$o=i(K),pb=n(K,"LI",{});var Bye=s(pb);wce=n(Bye,"STRONG",{});var xrt=s(wce);F$o=r(xrt,"mpnet"),xrt.forEach(t),T$o=r(Bye," \u2014 "),BD=n(Bye,"A",{href:!0});var $rt=s(BD);M$o=r($rt,"MPNetForMultipleChoice"),$rt.forEach(t),E$o=r(Bye," (MPNet model)"),Bye.forEach(t),C$o=i(K),ub=n(K,"LI",{});var Pye=s(ub);Ace=n(Pye,"STRONG",{});var krt=s(Ace);w$o=r(krt,"nystromformer"),krt.forEach(t),A$o=r(Pye," \u2014 "),PD=n(Pye,"A",{href:!0});var Srt=s(PD);y$o=r(Srt,"NystromformerForMultipleChoice"),Srt.forEach(t),L$o=r(Pye," (Nystromformer model)"),Pye.forEach(t),x$o=i(K),_b=n(K,"LI",{});var Iye=s(_b);yce=n(Iye,"STRONG",{});var Rrt=s(yce);$$o=r(Rrt,"qdqbert"),Rrt.forEach(t),k$o=r(Iye," \u2014 "),ID=n(Iye,"A",{href:!0});var Brt=s(ID);S$o=r(Brt,"QDQBertForMultipleChoice"),Brt.forEach(t),R$o=r(Iye," (QDQBert model)"),Iye.forEach(t),B$o=i(K),bb=n(K,"LI",{});var qye=s(bb);Lce=n(qye,"STRONG",{});var Prt=s(Lce);P$o=r(Prt,"rembert"),Prt.forEach(t),I$o=r(qye," \u2014 "),qD=n(qye,"A",{href:!0});var Irt=s(qD);q$o=r(Irt,"RemBertForMultipleChoice"),Irt.forEach(t),N$o=r(qye," (RemBERT model)"),qye.forEach(t),j$o=i(K),vb=n(K,"LI",{});var Nye=s(vb);xce=n(Nye,"STRONG",{});var qrt=s(xce);D$o=r(qrt,"roberta"),qrt.forEach(t),G$o=r(Nye," \u2014 "),ND=n(Nye,"A",{href:!0});var Nrt=s(ND);O$o=r(Nrt,"RobertaForMultipleChoice"),Nrt.forEach(t),V$o=r(Nye," (RoBERTa model)"),Nye.forEach(t),X$o=i(K),Fb=n(K,"LI",{});var jye=s(Fb);$ce=n(jye,"STRONG",{});var jrt=s($ce);z$o=r(jrt,"roformer"),jrt.forEach(t),Q$o=r(jye," \u2014 "),jD=n(jye,"A",{href:!0});var Drt=s(jD);W$o=r(Drt,"RoFormerForMultipleChoice"),Drt.forEach(t),H$o=r(jye," (RoFormer model)"),jye.forEach(t),U$o=i(K),Tb=n(K,"LI",{});var Dye=s(Tb);kce=n(Dye,"STRONG",{});var Grt=s(kce);J$o=r(Grt,"squeezebert"),Grt.forEach(t),Y$o=r(Dye," \u2014 "),DD=n(Dye,"A",{href:!0});var Ort=s(DD);K$o=r(Ort,"SqueezeBertForMultipleChoice"),Ort.forEach(t),Z$o=r(Dye," (SqueezeBERT model)"),Dye.forEach(t),eko=i(K),Mb=n(K,"LI",{});var Gye=s(Mb);Sce=n(Gye,"STRONG",{});var Vrt=s(Sce);oko=r(Vrt,"xlm"),Vrt.forEach(t),rko=r(Gye," \u2014 "),GD=n(Gye,"A",{href:!0});var Xrt=s(GD);tko=r(Xrt,"XLMForMultipleChoice"),Xrt.forEach(t),ako=r(Gye," (XLM model)"),Gye.forEach(t),nko=i(K),Eb=n(K,"LI",{});var Oye=s(Eb);Rce=n(Oye,"STRONG",{});var zrt=s(Rce);sko=r(zrt,"xlm-roberta"),zrt.forEach(t),lko=r(Oye," \u2014 "),OD=n(Oye,"A",{href:!0});var Qrt=s(OD);iko=r(Qrt,"XLMRobertaForMultipleChoice"),Qrt.forEach(t),dko=r(Oye," (XLM-RoBERTa model)"),Oye.forEach(t),cko=i(K),Cb=n(K,"LI",{});var Vye=s(Cb);Bce=n(Vye,"STRONG",{});var Wrt=s(Bce);fko=r(Wrt,"xlm-roberta-xl"),Wrt.forEach(t),mko=r(Vye," \u2014 "),VD=n(Vye,"A",{href:!0});var Hrt=s(VD);gko=r(Hrt,"XLMRobertaXLForMultipleChoice"),Hrt.forEach(t),hko=r(Vye," (XLM-RoBERTa-XL model)"),Vye.forEach(t),pko=i(K),wb=n(K,"LI",{});var Xye=s(wb);Pce=n(Xye,"STRONG",{});var Urt=s(Pce);uko=r(Urt,"xlnet"),Urt.forEach(t),_ko=r(Xye," \u2014 "),XD=n(Xye,"A",{href:!0});var Jrt=s(XD);bko=r(Jrt,"XLNetForMultipleChoice"),Jrt.forEach(t),vko=r(Xye," (XLNet model)"),Xye.forEach(t),Fko=i(K),Ab=n(K,"LI",{});var zye=s(Ab);Ice=n(zye,"STRONG",{});var Yrt=s(Ice);Tko=r(Yrt,"yoso"),Yrt.forEach(t),Mko=r(zye," \u2014 "),zD=n(zye,"A",{href:!0});var Krt=s(zD);Eko=r(Krt,"YosoForMultipleChoice"),Krt.forEach(t),Cko=r(zye," (YOSO model)"),zye.forEach(t),K.forEach(t),wko=i(ra),yb=n(ra,"P",{});var Qye=s(yb);Ako=r(Qye,"The model is set in evaluation mode by default using "),qce=n(Qye,"CODE",{});var Zrt=s(qce);yko=r(Zrt,"model.eval()"),Zrt.forEach(t),Lko=r(Qye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nce=n(Qye,"CODE",{});var ett=s(Nce);xko=r(ett,"model.train()"),ett.forEach(t),Qye.forEach(t),$ko=i(ra),T(Lb.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),SBe=i(f),Ii=n(f,"H2",{class:!0});var BIe=s(Ii);xb=n(BIe,"A",{id:!0,class:!0,href:!0});var ott=s(xb);jce=n(ott,"SPAN",{});var rtt=s(jce);T(L6.$$.fragment,rtt),rtt.forEach(t),ott.forEach(t),kko=i(BIe),Dce=n(BIe,"SPAN",{});var ttt=s(Dce);Sko=r(ttt,"AutoModelForNextSentencePrediction"),ttt.forEach(t),BIe.forEach(t),RBe=i(f),Po=n(f,"DIV",{class:!0});var Os=s(Po);T(x6.$$.fragment,Os),Rko=i(Os),qi=n(Os,"P",{});var wY=s(qi);Bko=r(wY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),QD=n(wY,"A",{href:!0});var att=s(QD);Pko=r(att,"from_pretrained()"),att.forEach(t),Iko=r(wY," class method or the "),WD=n(wY,"A",{href:!0});var ntt=s(WD);qko=r(ntt,"from_config()"),ntt.forEach(t),Nko=r(wY,` class
method.`),wY.forEach(t),jko=i(Os),$6=n(Os,"P",{});var PIe=s($6);Dko=r(PIe,"This class cannot be instantiated directly using "),Gce=n(PIe,"CODE",{});var stt=s(Gce);Gko=r(stt,"__init__()"),stt.forEach(t),Oko=r(PIe," (throws an error)."),PIe.forEach(t),Vko=i(Os),st=n(Os,"DIV",{class:!0});var DC=s(st);T(k6.$$.fragment,DC),Xko=i(DC),Oce=n(DC,"P",{});var ltt=s(Oce);zko=r(ltt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ltt.forEach(t),Qko=i(DC),Ni=n(DC,"P",{});var AY=s(Ni);Wko=r(AY,`Note:
Loading a model from its configuration file does `),Vce=n(AY,"STRONG",{});var itt=s(Vce);Hko=r(itt,"not"),itt.forEach(t),Uko=r(AY,` load the model weights. It only affects the
model\u2019s configuration. Use `),HD=n(AY,"A",{href:!0});var dtt=s(HD);Jko=r(dtt,"from_pretrained()"),dtt.forEach(t),Yko=r(AY," to load the model weights."),AY.forEach(t),Kko=i(DC),T($b.$$.fragment,DC),DC.forEach(t),Zko=i(Os),oo=n(Os,"DIV",{class:!0});var ta=s(oo);T(S6.$$.fragment,ta),eSo=i(ta),Xce=n(ta,"P",{});var ctt=s(Xce);oSo=r(ctt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ctt.forEach(t),rSo=i(ta),$a=n(ta,"P",{});var GC=s($a);tSo=r(GC,"The model class to instantiate is selected based on the "),zce=n(GC,"CODE",{});var ftt=s(zce);aSo=r(ftt,"model_type"),ftt.forEach(t),nSo=r(GC,` property of the config object (either
passed as an argument or loaded from `),Qce=n(GC,"CODE",{});var mtt=s(Qce);sSo=r(mtt,"pretrained_model_name_or_path"),mtt.forEach(t),lSo=r(GC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wce=n(GC,"CODE",{});var gtt=s(Wce);iSo=r(gtt,"pretrained_model_name_or_path"),gtt.forEach(t),dSo=r(GC,":"),GC.forEach(t),cSo=i(ta),Ur=n(ta,"UL",{});var Vs=s(Ur);kb=n(Vs,"LI",{});var Wye=s(kb);Hce=n(Wye,"STRONG",{});var htt=s(Hce);fSo=r(htt,"bert"),htt.forEach(t),mSo=r(Wye," \u2014 "),UD=n(Wye,"A",{href:!0});var ptt=s(UD);gSo=r(ptt,"BertForNextSentencePrediction"),ptt.forEach(t),hSo=r(Wye," (BERT model)"),Wye.forEach(t),pSo=i(Vs),Sb=n(Vs,"LI",{});var Hye=s(Sb);Uce=n(Hye,"STRONG",{});var utt=s(Uce);uSo=r(utt,"fnet"),utt.forEach(t),_So=r(Hye," \u2014 "),JD=n(Hye,"A",{href:!0});var _tt=s(JD);bSo=r(_tt,"FNetForNextSentencePrediction"),_tt.forEach(t),vSo=r(Hye," (FNet model)"),Hye.forEach(t),FSo=i(Vs),Rb=n(Vs,"LI",{});var Uye=s(Rb);Jce=n(Uye,"STRONG",{});var btt=s(Jce);TSo=r(btt,"megatron-bert"),btt.forEach(t),MSo=r(Uye," \u2014 "),YD=n(Uye,"A",{href:!0});var vtt=s(YD);ESo=r(vtt,"MegatronBertForNextSentencePrediction"),vtt.forEach(t),CSo=r(Uye," (MegatronBert model)"),Uye.forEach(t),wSo=i(Vs),Bb=n(Vs,"LI",{});var Jye=s(Bb);Yce=n(Jye,"STRONG",{});var Ftt=s(Yce);ASo=r(Ftt,"mobilebert"),Ftt.forEach(t),ySo=r(Jye," \u2014 "),KD=n(Jye,"A",{href:!0});var Ttt=s(KD);LSo=r(Ttt,"MobileBertForNextSentencePrediction"),Ttt.forEach(t),xSo=r(Jye," (MobileBERT model)"),Jye.forEach(t),$So=i(Vs),Pb=n(Vs,"LI",{});var Yye=s(Pb);Kce=n(Yye,"STRONG",{});var Mtt=s(Kce);kSo=r(Mtt,"qdqbert"),Mtt.forEach(t),SSo=r(Yye," \u2014 "),ZD=n(Yye,"A",{href:!0});var Ett=s(ZD);RSo=r(Ett,"QDQBertForNextSentencePrediction"),Ett.forEach(t),BSo=r(Yye," (QDQBert model)"),Yye.forEach(t),Vs.forEach(t),PSo=i(ta),Ib=n(ta,"P",{});var Kye=s(Ib);ISo=r(Kye,"The model is set in evaluation mode by default using "),Zce=n(Kye,"CODE",{});var Ctt=s(Zce);qSo=r(Ctt,"model.eval()"),Ctt.forEach(t),NSo=r(Kye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),efe=n(Kye,"CODE",{});var wtt=s(efe);jSo=r(wtt,"model.train()"),wtt.forEach(t),Kye.forEach(t),DSo=i(ta),T(qb.$$.fragment,ta),ta.forEach(t),Os.forEach(t),BBe=i(f),ji=n(f,"H2",{class:!0});var IIe=s(ji);Nb=n(IIe,"A",{id:!0,class:!0,href:!0});var Att=s(Nb);ofe=n(Att,"SPAN",{});var ytt=s(ofe);T(R6.$$.fragment,ytt),ytt.forEach(t),Att.forEach(t),GSo=i(IIe),rfe=n(IIe,"SPAN",{});var Ltt=s(rfe);OSo=r(Ltt,"AutoModelForTokenClassification"),Ltt.forEach(t),IIe.forEach(t),PBe=i(f),Io=n(f,"DIV",{class:!0});var Xs=s(Io);T(B6.$$.fragment,Xs),VSo=i(Xs),Di=n(Xs,"P",{});var yY=s(Di);XSo=r(yY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),eG=n(yY,"A",{href:!0});var xtt=s(eG);zSo=r(xtt,"from_pretrained()"),xtt.forEach(t),QSo=r(yY," class method or the "),oG=n(yY,"A",{href:!0});var $tt=s(oG);WSo=r($tt,"from_config()"),$tt.forEach(t),HSo=r(yY,` class
method.`),yY.forEach(t),USo=i(Xs),P6=n(Xs,"P",{});var qIe=s(P6);JSo=r(qIe,"This class cannot be instantiated directly using "),tfe=n(qIe,"CODE",{});var ktt=s(tfe);YSo=r(ktt,"__init__()"),ktt.forEach(t),KSo=r(qIe," (throws an error)."),qIe.forEach(t),ZSo=i(Xs),lt=n(Xs,"DIV",{class:!0});var OC=s(lt);T(I6.$$.fragment,OC),eRo=i(OC),afe=n(OC,"P",{});var Stt=s(afe);oRo=r(Stt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Stt.forEach(t),rRo=i(OC),Gi=n(OC,"P",{});var LY=s(Gi);tRo=r(LY,`Note:
Loading a model from its configuration file does `),nfe=n(LY,"STRONG",{});var Rtt=s(nfe);aRo=r(Rtt,"not"),Rtt.forEach(t),nRo=r(LY,` load the model weights. It only affects the
model\u2019s configuration. Use `),rG=n(LY,"A",{href:!0});var Btt=s(rG);sRo=r(Btt,"from_pretrained()"),Btt.forEach(t),lRo=r(LY," to load the model weights."),LY.forEach(t),iRo=i(OC),T(jb.$$.fragment,OC),OC.forEach(t),dRo=i(Xs),ro=n(Xs,"DIV",{class:!0});var aa=s(ro);T(q6.$$.fragment,aa),cRo=i(aa),sfe=n(aa,"P",{});var Ptt=s(sfe);fRo=r(Ptt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ptt.forEach(t),mRo=i(aa),ka=n(aa,"P",{});var VC=s(ka);gRo=r(VC,"The model class to instantiate is selected based on the "),lfe=n(VC,"CODE",{});var Itt=s(lfe);hRo=r(Itt,"model_type"),Itt.forEach(t),pRo=r(VC,` property of the config object (either
passed as an argument or loaded from `),ife=n(VC,"CODE",{});var qtt=s(ife);uRo=r(qtt,"pretrained_model_name_or_path"),qtt.forEach(t),_Ro=r(VC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dfe=n(VC,"CODE",{});var Ntt=s(dfe);bRo=r(Ntt,"pretrained_model_name_or_path"),Ntt.forEach(t),vRo=r(VC,":"),VC.forEach(t),FRo=i(aa),U=n(aa,"UL",{});var J=s(U);Db=n(J,"LI",{});var Zye=s(Db);cfe=n(Zye,"STRONG",{});var jtt=s(cfe);TRo=r(jtt,"albert"),jtt.forEach(t),MRo=r(Zye," \u2014 "),tG=n(Zye,"A",{href:!0});var Dtt=s(tG);ERo=r(Dtt,"AlbertForTokenClassification"),Dtt.forEach(t),CRo=r(Zye," (ALBERT model)"),Zye.forEach(t),wRo=i(J),Gb=n(J,"LI",{});var eLe=s(Gb);ffe=n(eLe,"STRONG",{});var Gtt=s(ffe);ARo=r(Gtt,"bert"),Gtt.forEach(t),yRo=r(eLe," \u2014 "),aG=n(eLe,"A",{href:!0});var Ott=s(aG);LRo=r(Ott,"BertForTokenClassification"),Ott.forEach(t),xRo=r(eLe," (BERT model)"),eLe.forEach(t),$Ro=i(J),Ob=n(J,"LI",{});var oLe=s(Ob);mfe=n(oLe,"STRONG",{});var Vtt=s(mfe);kRo=r(Vtt,"big_bird"),Vtt.forEach(t),SRo=r(oLe," \u2014 "),nG=n(oLe,"A",{href:!0});var Xtt=s(nG);RRo=r(Xtt,"BigBirdForTokenClassification"),Xtt.forEach(t),BRo=r(oLe," (BigBird model)"),oLe.forEach(t),PRo=i(J),Vb=n(J,"LI",{});var rLe=s(Vb);gfe=n(rLe,"STRONG",{});var ztt=s(gfe);IRo=r(ztt,"camembert"),ztt.forEach(t),qRo=r(rLe," \u2014 "),sG=n(rLe,"A",{href:!0});var Qtt=s(sG);NRo=r(Qtt,"CamembertForTokenClassification"),Qtt.forEach(t),jRo=r(rLe," (CamemBERT model)"),rLe.forEach(t),DRo=i(J),Xb=n(J,"LI",{});var tLe=s(Xb);hfe=n(tLe,"STRONG",{});var Wtt=s(hfe);GRo=r(Wtt,"canine"),Wtt.forEach(t),ORo=r(tLe," \u2014 "),lG=n(tLe,"A",{href:!0});var Htt=s(lG);VRo=r(Htt,"CanineForTokenClassification"),Htt.forEach(t),XRo=r(tLe," (Canine model)"),tLe.forEach(t),zRo=i(J),zb=n(J,"LI",{});var aLe=s(zb);pfe=n(aLe,"STRONG",{});var Utt=s(pfe);QRo=r(Utt,"convbert"),Utt.forEach(t),WRo=r(aLe," \u2014 "),iG=n(aLe,"A",{href:!0});var Jtt=s(iG);HRo=r(Jtt,"ConvBertForTokenClassification"),Jtt.forEach(t),URo=r(aLe," (ConvBERT model)"),aLe.forEach(t),JRo=i(J),Qb=n(J,"LI",{});var nLe=s(Qb);ufe=n(nLe,"STRONG",{});var Ytt=s(ufe);YRo=r(Ytt,"data2vec-text"),Ytt.forEach(t),KRo=r(nLe," \u2014 "),dG=n(nLe,"A",{href:!0});var Ktt=s(dG);ZRo=r(Ktt,"Data2VecTextForTokenClassification"),Ktt.forEach(t),eBo=r(nLe," (Data2VecText model)"),nLe.forEach(t),oBo=i(J),Wb=n(J,"LI",{});var sLe=s(Wb);_fe=n(sLe,"STRONG",{});var Ztt=s(_fe);rBo=r(Ztt,"deberta"),Ztt.forEach(t),tBo=r(sLe," \u2014 "),cG=n(sLe,"A",{href:!0});var eat=s(cG);aBo=r(eat,"DebertaForTokenClassification"),eat.forEach(t),nBo=r(sLe," (DeBERTa model)"),sLe.forEach(t),sBo=i(J),Hb=n(J,"LI",{});var lLe=s(Hb);bfe=n(lLe,"STRONG",{});var oat=s(bfe);lBo=r(oat,"deberta-v2"),oat.forEach(t),iBo=r(lLe," \u2014 "),fG=n(lLe,"A",{href:!0});var rat=s(fG);dBo=r(rat,"DebertaV2ForTokenClassification"),rat.forEach(t),cBo=r(lLe," (DeBERTa-v2 model)"),lLe.forEach(t),fBo=i(J),Ub=n(J,"LI",{});var iLe=s(Ub);vfe=n(iLe,"STRONG",{});var tat=s(vfe);mBo=r(tat,"distilbert"),tat.forEach(t),gBo=r(iLe," \u2014 "),mG=n(iLe,"A",{href:!0});var aat=s(mG);hBo=r(aat,"DistilBertForTokenClassification"),aat.forEach(t),pBo=r(iLe," (DistilBERT model)"),iLe.forEach(t),uBo=i(J),Jb=n(J,"LI",{});var dLe=s(Jb);Ffe=n(dLe,"STRONG",{});var nat=s(Ffe);_Bo=r(nat,"electra"),nat.forEach(t),bBo=r(dLe," \u2014 "),gG=n(dLe,"A",{href:!0});var sat=s(gG);vBo=r(sat,"ElectraForTokenClassification"),sat.forEach(t),FBo=r(dLe," (ELECTRA model)"),dLe.forEach(t),TBo=i(J),Yb=n(J,"LI",{});var cLe=s(Yb);Tfe=n(cLe,"STRONG",{});var lat=s(Tfe);MBo=r(lat,"flaubert"),lat.forEach(t),EBo=r(cLe," \u2014 "),hG=n(cLe,"A",{href:!0});var iat=s(hG);CBo=r(iat,"FlaubertForTokenClassification"),iat.forEach(t),wBo=r(cLe," (FlauBERT model)"),cLe.forEach(t),ABo=i(J),Kb=n(J,"LI",{});var fLe=s(Kb);Mfe=n(fLe,"STRONG",{});var dat=s(Mfe);yBo=r(dat,"fnet"),dat.forEach(t),LBo=r(fLe," \u2014 "),pG=n(fLe,"A",{href:!0});var cat=s(pG);xBo=r(cat,"FNetForTokenClassification"),cat.forEach(t),$Bo=r(fLe," (FNet model)"),fLe.forEach(t),kBo=i(J),Zb=n(J,"LI",{});var mLe=s(Zb);Efe=n(mLe,"STRONG",{});var fat=s(Efe);SBo=r(fat,"funnel"),fat.forEach(t),RBo=r(mLe," \u2014 "),uG=n(mLe,"A",{href:!0});var mat=s(uG);BBo=r(mat,"FunnelForTokenClassification"),mat.forEach(t),PBo=r(mLe," (Funnel Transformer model)"),mLe.forEach(t),IBo=i(J),e2=n(J,"LI",{});var gLe=s(e2);Cfe=n(gLe,"STRONG",{});var gat=s(Cfe);qBo=r(gat,"gpt2"),gat.forEach(t),NBo=r(gLe," \u2014 "),_G=n(gLe,"A",{href:!0});var hat=s(_G);jBo=r(hat,"GPT2ForTokenClassification"),hat.forEach(t),DBo=r(gLe," (OpenAI GPT-2 model)"),gLe.forEach(t),GBo=i(J),o2=n(J,"LI",{});var hLe=s(o2);wfe=n(hLe,"STRONG",{});var pat=s(wfe);OBo=r(pat,"ibert"),pat.forEach(t),VBo=r(hLe," \u2014 "),bG=n(hLe,"A",{href:!0});var uat=s(bG);XBo=r(uat,"IBertForTokenClassification"),uat.forEach(t),zBo=r(hLe," (I-BERT model)"),hLe.forEach(t),QBo=i(J),r2=n(J,"LI",{});var pLe=s(r2);Afe=n(pLe,"STRONG",{});var _at=s(Afe);WBo=r(_at,"layoutlm"),_at.forEach(t),HBo=r(pLe," \u2014 "),vG=n(pLe,"A",{href:!0});var bat=s(vG);UBo=r(bat,"LayoutLMForTokenClassification"),bat.forEach(t),JBo=r(pLe," (LayoutLM model)"),pLe.forEach(t),YBo=i(J),t2=n(J,"LI",{});var uLe=s(t2);yfe=n(uLe,"STRONG",{});var vat=s(yfe);KBo=r(vat,"layoutlmv2"),vat.forEach(t),ZBo=r(uLe," \u2014 "),FG=n(uLe,"A",{href:!0});var Fat=s(FG);ePo=r(Fat,"LayoutLMv2ForTokenClassification"),Fat.forEach(t),oPo=r(uLe," (LayoutLMv2 model)"),uLe.forEach(t),rPo=i(J),a2=n(J,"LI",{});var _Le=s(a2);Lfe=n(_Le,"STRONG",{});var Tat=s(Lfe);tPo=r(Tat,"longformer"),Tat.forEach(t),aPo=r(_Le," \u2014 "),TG=n(_Le,"A",{href:!0});var Mat=s(TG);nPo=r(Mat,"LongformerForTokenClassification"),Mat.forEach(t),sPo=r(_Le," (Longformer model)"),_Le.forEach(t),lPo=i(J),n2=n(J,"LI",{});var bLe=s(n2);xfe=n(bLe,"STRONG",{});var Eat=s(xfe);iPo=r(Eat,"megatron-bert"),Eat.forEach(t),dPo=r(bLe," \u2014 "),MG=n(bLe,"A",{href:!0});var Cat=s(MG);cPo=r(Cat,"MegatronBertForTokenClassification"),Cat.forEach(t),fPo=r(bLe," (MegatronBert model)"),bLe.forEach(t),mPo=i(J),s2=n(J,"LI",{});var vLe=s(s2);$fe=n(vLe,"STRONG",{});var wat=s($fe);gPo=r(wat,"mobilebert"),wat.forEach(t),hPo=r(vLe," \u2014 "),EG=n(vLe,"A",{href:!0});var Aat=s(EG);pPo=r(Aat,"MobileBertForTokenClassification"),Aat.forEach(t),uPo=r(vLe," (MobileBERT model)"),vLe.forEach(t),_Po=i(J),l2=n(J,"LI",{});var FLe=s(l2);kfe=n(FLe,"STRONG",{});var yat=s(kfe);bPo=r(yat,"mpnet"),yat.forEach(t),vPo=r(FLe," \u2014 "),CG=n(FLe,"A",{href:!0});var Lat=s(CG);FPo=r(Lat,"MPNetForTokenClassification"),Lat.forEach(t),TPo=r(FLe," (MPNet model)"),FLe.forEach(t),MPo=i(J),i2=n(J,"LI",{});var TLe=s(i2);Sfe=n(TLe,"STRONG",{});var xat=s(Sfe);EPo=r(xat,"nystromformer"),xat.forEach(t),CPo=r(TLe," \u2014 "),wG=n(TLe,"A",{href:!0});var $at=s(wG);wPo=r($at,"NystromformerForTokenClassification"),$at.forEach(t),APo=r(TLe," (Nystromformer model)"),TLe.forEach(t),yPo=i(J),d2=n(J,"LI",{});var MLe=s(d2);Rfe=n(MLe,"STRONG",{});var kat=s(Rfe);LPo=r(kat,"qdqbert"),kat.forEach(t),xPo=r(MLe," \u2014 "),AG=n(MLe,"A",{href:!0});var Sat=s(AG);$Po=r(Sat,"QDQBertForTokenClassification"),Sat.forEach(t),kPo=r(MLe," (QDQBert model)"),MLe.forEach(t),SPo=i(J),c2=n(J,"LI",{});var ELe=s(c2);Bfe=n(ELe,"STRONG",{});var Rat=s(Bfe);RPo=r(Rat,"rembert"),Rat.forEach(t),BPo=r(ELe," \u2014 "),yG=n(ELe,"A",{href:!0});var Bat=s(yG);PPo=r(Bat,"RemBertForTokenClassification"),Bat.forEach(t),IPo=r(ELe," (RemBERT model)"),ELe.forEach(t),qPo=i(J),f2=n(J,"LI",{});var CLe=s(f2);Pfe=n(CLe,"STRONG",{});var Pat=s(Pfe);NPo=r(Pat,"roberta"),Pat.forEach(t),jPo=r(CLe," \u2014 "),LG=n(CLe,"A",{href:!0});var Iat=s(LG);DPo=r(Iat,"RobertaForTokenClassification"),Iat.forEach(t),GPo=r(CLe," (RoBERTa model)"),CLe.forEach(t),OPo=i(J),m2=n(J,"LI",{});var wLe=s(m2);Ife=n(wLe,"STRONG",{});var qat=s(Ife);VPo=r(qat,"roformer"),qat.forEach(t),XPo=r(wLe," \u2014 "),xG=n(wLe,"A",{href:!0});var Nat=s(xG);zPo=r(Nat,"RoFormerForTokenClassification"),Nat.forEach(t),QPo=r(wLe," (RoFormer model)"),wLe.forEach(t),WPo=i(J),g2=n(J,"LI",{});var ALe=s(g2);qfe=n(ALe,"STRONG",{});var jat=s(qfe);HPo=r(jat,"squeezebert"),jat.forEach(t),UPo=r(ALe," \u2014 "),$G=n(ALe,"A",{href:!0});var Dat=s($G);JPo=r(Dat,"SqueezeBertForTokenClassification"),Dat.forEach(t),YPo=r(ALe," (SqueezeBERT model)"),ALe.forEach(t),KPo=i(J),h2=n(J,"LI",{});var yLe=s(h2);Nfe=n(yLe,"STRONG",{});var Gat=s(Nfe);ZPo=r(Gat,"xlm"),Gat.forEach(t),eIo=r(yLe," \u2014 "),kG=n(yLe,"A",{href:!0});var Oat=s(kG);oIo=r(Oat,"XLMForTokenClassification"),Oat.forEach(t),rIo=r(yLe," (XLM model)"),yLe.forEach(t),tIo=i(J),p2=n(J,"LI",{});var LLe=s(p2);jfe=n(LLe,"STRONG",{});var Vat=s(jfe);aIo=r(Vat,"xlm-roberta"),Vat.forEach(t),nIo=r(LLe," \u2014 "),SG=n(LLe,"A",{href:!0});var Xat=s(SG);sIo=r(Xat,"XLMRobertaForTokenClassification"),Xat.forEach(t),lIo=r(LLe," (XLM-RoBERTa model)"),LLe.forEach(t),iIo=i(J),u2=n(J,"LI",{});var xLe=s(u2);Dfe=n(xLe,"STRONG",{});var zat=s(Dfe);dIo=r(zat,"xlm-roberta-xl"),zat.forEach(t),cIo=r(xLe," \u2014 "),RG=n(xLe,"A",{href:!0});var Qat=s(RG);fIo=r(Qat,"XLMRobertaXLForTokenClassification"),Qat.forEach(t),mIo=r(xLe," (XLM-RoBERTa-XL model)"),xLe.forEach(t),gIo=i(J),_2=n(J,"LI",{});var $Le=s(_2);Gfe=n($Le,"STRONG",{});var Wat=s(Gfe);hIo=r(Wat,"xlnet"),Wat.forEach(t),pIo=r($Le," \u2014 "),BG=n($Le,"A",{href:!0});var Hat=s(BG);uIo=r(Hat,"XLNetForTokenClassification"),Hat.forEach(t),_Io=r($Le," (XLNet model)"),$Le.forEach(t),bIo=i(J),b2=n(J,"LI",{});var kLe=s(b2);Ofe=n(kLe,"STRONG",{});var Uat=s(Ofe);vIo=r(Uat,"yoso"),Uat.forEach(t),FIo=r(kLe," \u2014 "),PG=n(kLe,"A",{href:!0});var Jat=s(PG);TIo=r(Jat,"YosoForTokenClassification"),Jat.forEach(t),MIo=r(kLe," (YOSO model)"),kLe.forEach(t),J.forEach(t),EIo=i(aa),v2=n(aa,"P",{});var SLe=s(v2);CIo=r(SLe,"The model is set in evaluation mode by default using "),Vfe=n(SLe,"CODE",{});var Yat=s(Vfe);wIo=r(Yat,"model.eval()"),Yat.forEach(t),AIo=r(SLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xfe=n(SLe,"CODE",{});var Kat=s(Xfe);yIo=r(Kat,"model.train()"),Kat.forEach(t),SLe.forEach(t),LIo=i(aa),T(F2.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),IBe=i(f),Oi=n(f,"H2",{class:!0});var NIe=s(Oi);T2=n(NIe,"A",{id:!0,class:!0,href:!0});var Zat=s(T2);zfe=n(Zat,"SPAN",{});var ent=s(zfe);T(N6.$$.fragment,ent),ent.forEach(t),Zat.forEach(t),xIo=i(NIe),Qfe=n(NIe,"SPAN",{});var ont=s(Qfe);$Io=r(ont,"AutoModelForQuestionAnswering"),ont.forEach(t),NIe.forEach(t),qBe=i(f),qo=n(f,"DIV",{class:!0});var zs=s(qo);T(j6.$$.fragment,zs),kIo=i(zs),Vi=n(zs,"P",{});var xY=s(Vi);SIo=r(xY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IG=n(xY,"A",{href:!0});var rnt=s(IG);RIo=r(rnt,"from_pretrained()"),rnt.forEach(t),BIo=r(xY," class method or the "),qG=n(xY,"A",{href:!0});var tnt=s(qG);PIo=r(tnt,"from_config()"),tnt.forEach(t),IIo=r(xY,` class
method.`),xY.forEach(t),qIo=i(zs),D6=n(zs,"P",{});var jIe=s(D6);NIo=r(jIe,"This class cannot be instantiated directly using "),Wfe=n(jIe,"CODE",{});var ant=s(Wfe);jIo=r(ant,"__init__()"),ant.forEach(t),DIo=r(jIe," (throws an error)."),jIe.forEach(t),GIo=i(zs),it=n(zs,"DIV",{class:!0});var XC=s(it);T(G6.$$.fragment,XC),OIo=i(XC),Hfe=n(XC,"P",{});var nnt=s(Hfe);VIo=r(nnt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),nnt.forEach(t),XIo=i(XC),Xi=n(XC,"P",{});var $Y=s(Xi);zIo=r($Y,`Note:
Loading a model from its configuration file does `),Ufe=n($Y,"STRONG",{});var snt=s(Ufe);QIo=r(snt,"not"),snt.forEach(t),WIo=r($Y,` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=n($Y,"A",{href:!0});var lnt=s(NG);HIo=r(lnt,"from_pretrained()"),lnt.forEach(t),UIo=r($Y," to load the model weights."),$Y.forEach(t),JIo=i(XC),T(M2.$$.fragment,XC),XC.forEach(t),YIo=i(zs),to=n(zs,"DIV",{class:!0});var na=s(to);T(O6.$$.fragment,na),KIo=i(na),Jfe=n(na,"P",{});var int=s(Jfe);ZIo=r(int,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),int.forEach(t),eqo=i(na),Sa=n(na,"P",{});var zC=s(Sa);oqo=r(zC,"The model class to instantiate is selected based on the "),Yfe=n(zC,"CODE",{});var dnt=s(Yfe);rqo=r(dnt,"model_type"),dnt.forEach(t),tqo=r(zC,` property of the config object (either
passed as an argument or loaded from `),Kfe=n(zC,"CODE",{});var cnt=s(Kfe);aqo=r(cnt,"pretrained_model_name_or_path"),cnt.forEach(t),nqo=r(zC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zfe=n(zC,"CODE",{});var fnt=s(Zfe);sqo=r(fnt,"pretrained_model_name_or_path"),fnt.forEach(t),lqo=r(zC,":"),zC.forEach(t),iqo=i(na),O=n(na,"UL",{});var X=s(O);E2=n(X,"LI",{});var RLe=s(E2);eme=n(RLe,"STRONG",{});var mnt=s(eme);dqo=r(mnt,"albert"),mnt.forEach(t),cqo=r(RLe," \u2014 "),jG=n(RLe,"A",{href:!0});var gnt=s(jG);fqo=r(gnt,"AlbertForQuestionAnswering"),gnt.forEach(t),mqo=r(RLe," (ALBERT model)"),RLe.forEach(t),gqo=i(X),C2=n(X,"LI",{});var BLe=s(C2);ome=n(BLe,"STRONG",{});var hnt=s(ome);hqo=r(hnt,"bart"),hnt.forEach(t),pqo=r(BLe," \u2014 "),DG=n(BLe,"A",{href:!0});var pnt=s(DG);uqo=r(pnt,"BartForQuestionAnswering"),pnt.forEach(t),_qo=r(BLe," (BART model)"),BLe.forEach(t),bqo=i(X),w2=n(X,"LI",{});var PLe=s(w2);rme=n(PLe,"STRONG",{});var unt=s(rme);vqo=r(unt,"bert"),unt.forEach(t),Fqo=r(PLe," \u2014 "),GG=n(PLe,"A",{href:!0});var _nt=s(GG);Tqo=r(_nt,"BertForQuestionAnswering"),_nt.forEach(t),Mqo=r(PLe," (BERT model)"),PLe.forEach(t),Eqo=i(X),A2=n(X,"LI",{});var ILe=s(A2);tme=n(ILe,"STRONG",{});var bnt=s(tme);Cqo=r(bnt,"big_bird"),bnt.forEach(t),wqo=r(ILe," \u2014 "),OG=n(ILe,"A",{href:!0});var vnt=s(OG);Aqo=r(vnt,"BigBirdForQuestionAnswering"),vnt.forEach(t),yqo=r(ILe," (BigBird model)"),ILe.forEach(t),Lqo=i(X),y2=n(X,"LI",{});var qLe=s(y2);ame=n(qLe,"STRONG",{});var Fnt=s(ame);xqo=r(Fnt,"bigbird_pegasus"),Fnt.forEach(t),$qo=r(qLe," \u2014 "),VG=n(qLe,"A",{href:!0});var Tnt=s(VG);kqo=r(Tnt,"BigBirdPegasusForQuestionAnswering"),Tnt.forEach(t),Sqo=r(qLe," (BigBirdPegasus model)"),qLe.forEach(t),Rqo=i(X),L2=n(X,"LI",{});var NLe=s(L2);nme=n(NLe,"STRONG",{});var Mnt=s(nme);Bqo=r(Mnt,"camembert"),Mnt.forEach(t),Pqo=r(NLe," \u2014 "),XG=n(NLe,"A",{href:!0});var Ent=s(XG);Iqo=r(Ent,"CamembertForQuestionAnswering"),Ent.forEach(t),qqo=r(NLe," (CamemBERT model)"),NLe.forEach(t),Nqo=i(X),x2=n(X,"LI",{});var jLe=s(x2);sme=n(jLe,"STRONG",{});var Cnt=s(sme);jqo=r(Cnt,"canine"),Cnt.forEach(t),Dqo=r(jLe," \u2014 "),zG=n(jLe,"A",{href:!0});var wnt=s(zG);Gqo=r(wnt,"CanineForQuestionAnswering"),wnt.forEach(t),Oqo=r(jLe," (Canine model)"),jLe.forEach(t),Vqo=i(X),$2=n(X,"LI",{});var DLe=s($2);lme=n(DLe,"STRONG",{});var Ant=s(lme);Xqo=r(Ant,"convbert"),Ant.forEach(t),zqo=r(DLe," \u2014 "),QG=n(DLe,"A",{href:!0});var ynt=s(QG);Qqo=r(ynt,"ConvBertForQuestionAnswering"),ynt.forEach(t),Wqo=r(DLe," (ConvBERT model)"),DLe.forEach(t),Hqo=i(X),k2=n(X,"LI",{});var GLe=s(k2);ime=n(GLe,"STRONG",{});var Lnt=s(ime);Uqo=r(Lnt,"data2vec-text"),Lnt.forEach(t),Jqo=r(GLe," \u2014 "),WG=n(GLe,"A",{href:!0});var xnt=s(WG);Yqo=r(xnt,"Data2VecTextForQuestionAnswering"),xnt.forEach(t),Kqo=r(GLe," (Data2VecText model)"),GLe.forEach(t),Zqo=i(X),S2=n(X,"LI",{});var OLe=s(S2);dme=n(OLe,"STRONG",{});var $nt=s(dme);eNo=r($nt,"deberta"),$nt.forEach(t),oNo=r(OLe," \u2014 "),HG=n(OLe,"A",{href:!0});var knt=s(HG);rNo=r(knt,"DebertaForQuestionAnswering"),knt.forEach(t),tNo=r(OLe," (DeBERTa model)"),OLe.forEach(t),aNo=i(X),R2=n(X,"LI",{});var VLe=s(R2);cme=n(VLe,"STRONG",{});var Snt=s(cme);nNo=r(Snt,"deberta-v2"),Snt.forEach(t),sNo=r(VLe," \u2014 "),UG=n(VLe,"A",{href:!0});var Rnt=s(UG);lNo=r(Rnt,"DebertaV2ForQuestionAnswering"),Rnt.forEach(t),iNo=r(VLe," (DeBERTa-v2 model)"),VLe.forEach(t),dNo=i(X),B2=n(X,"LI",{});var XLe=s(B2);fme=n(XLe,"STRONG",{});var Bnt=s(fme);cNo=r(Bnt,"distilbert"),Bnt.forEach(t),fNo=r(XLe," \u2014 "),JG=n(XLe,"A",{href:!0});var Pnt=s(JG);mNo=r(Pnt,"DistilBertForQuestionAnswering"),Pnt.forEach(t),gNo=r(XLe," (DistilBERT model)"),XLe.forEach(t),hNo=i(X),P2=n(X,"LI",{});var zLe=s(P2);mme=n(zLe,"STRONG",{});var Int=s(mme);pNo=r(Int,"electra"),Int.forEach(t),uNo=r(zLe," \u2014 "),YG=n(zLe,"A",{href:!0});var qnt=s(YG);_No=r(qnt,"ElectraForQuestionAnswering"),qnt.forEach(t),bNo=r(zLe," (ELECTRA model)"),zLe.forEach(t),vNo=i(X),I2=n(X,"LI",{});var QLe=s(I2);gme=n(QLe,"STRONG",{});var Nnt=s(gme);FNo=r(Nnt,"flaubert"),Nnt.forEach(t),TNo=r(QLe," \u2014 "),KG=n(QLe,"A",{href:!0});var jnt=s(KG);MNo=r(jnt,"FlaubertForQuestionAnsweringSimple"),jnt.forEach(t),ENo=r(QLe," (FlauBERT model)"),QLe.forEach(t),CNo=i(X),q2=n(X,"LI",{});var WLe=s(q2);hme=n(WLe,"STRONG",{});var Dnt=s(hme);wNo=r(Dnt,"fnet"),Dnt.forEach(t),ANo=r(WLe," \u2014 "),ZG=n(WLe,"A",{href:!0});var Gnt=s(ZG);yNo=r(Gnt,"FNetForQuestionAnswering"),Gnt.forEach(t),LNo=r(WLe," (FNet model)"),WLe.forEach(t),xNo=i(X),N2=n(X,"LI",{});var HLe=s(N2);pme=n(HLe,"STRONG",{});var Ont=s(pme);$No=r(Ont,"funnel"),Ont.forEach(t),kNo=r(HLe," \u2014 "),eO=n(HLe,"A",{href:!0});var Vnt=s(eO);SNo=r(Vnt,"FunnelForQuestionAnswering"),Vnt.forEach(t),RNo=r(HLe," (Funnel Transformer model)"),HLe.forEach(t),BNo=i(X),j2=n(X,"LI",{});var ULe=s(j2);ume=n(ULe,"STRONG",{});var Xnt=s(ume);PNo=r(Xnt,"gptj"),Xnt.forEach(t),INo=r(ULe," \u2014 "),oO=n(ULe,"A",{href:!0});var znt=s(oO);qNo=r(znt,"GPTJForQuestionAnswering"),znt.forEach(t),NNo=r(ULe," (GPT-J model)"),ULe.forEach(t),jNo=i(X),D2=n(X,"LI",{});var JLe=s(D2);_me=n(JLe,"STRONG",{});var Qnt=s(_me);DNo=r(Qnt,"ibert"),Qnt.forEach(t),GNo=r(JLe," \u2014 "),rO=n(JLe,"A",{href:!0});var Wnt=s(rO);ONo=r(Wnt,"IBertForQuestionAnswering"),Wnt.forEach(t),VNo=r(JLe," (I-BERT model)"),JLe.forEach(t),XNo=i(X),G2=n(X,"LI",{});var YLe=s(G2);bme=n(YLe,"STRONG",{});var Hnt=s(bme);zNo=r(Hnt,"layoutlmv2"),Hnt.forEach(t),QNo=r(YLe," \u2014 "),tO=n(YLe,"A",{href:!0});var Unt=s(tO);WNo=r(Unt,"LayoutLMv2ForQuestionAnswering"),Unt.forEach(t),HNo=r(YLe," (LayoutLMv2 model)"),YLe.forEach(t),UNo=i(X),O2=n(X,"LI",{});var KLe=s(O2);vme=n(KLe,"STRONG",{});var Jnt=s(vme);JNo=r(Jnt,"led"),Jnt.forEach(t),YNo=r(KLe," \u2014 "),aO=n(KLe,"A",{href:!0});var Ynt=s(aO);KNo=r(Ynt,"LEDForQuestionAnswering"),Ynt.forEach(t),ZNo=r(KLe," (LED model)"),KLe.forEach(t),ejo=i(X),V2=n(X,"LI",{});var ZLe=s(V2);Fme=n(ZLe,"STRONG",{});var Knt=s(Fme);ojo=r(Knt,"longformer"),Knt.forEach(t),rjo=r(ZLe," \u2014 "),nO=n(ZLe,"A",{href:!0});var Znt=s(nO);tjo=r(Znt,"LongformerForQuestionAnswering"),Znt.forEach(t),ajo=r(ZLe," (Longformer model)"),ZLe.forEach(t),njo=i(X),X2=n(X,"LI",{});var e8e=s(X2);Tme=n(e8e,"STRONG",{});var est=s(Tme);sjo=r(est,"lxmert"),est.forEach(t),ljo=r(e8e," \u2014 "),sO=n(e8e,"A",{href:!0});var ost=s(sO);ijo=r(ost,"LxmertForQuestionAnswering"),ost.forEach(t),djo=r(e8e," (LXMERT model)"),e8e.forEach(t),cjo=i(X),z2=n(X,"LI",{});var o8e=s(z2);Mme=n(o8e,"STRONG",{});var rst=s(Mme);fjo=r(rst,"mbart"),rst.forEach(t),mjo=r(o8e," \u2014 "),lO=n(o8e,"A",{href:!0});var tst=s(lO);gjo=r(tst,"MBartForQuestionAnswering"),tst.forEach(t),hjo=r(o8e," (mBART model)"),o8e.forEach(t),pjo=i(X),Q2=n(X,"LI",{});var r8e=s(Q2);Eme=n(r8e,"STRONG",{});var ast=s(Eme);ujo=r(ast,"megatron-bert"),ast.forEach(t),_jo=r(r8e," \u2014 "),iO=n(r8e,"A",{href:!0});var nst=s(iO);bjo=r(nst,"MegatronBertForQuestionAnswering"),nst.forEach(t),vjo=r(r8e," (MegatronBert model)"),r8e.forEach(t),Fjo=i(X),W2=n(X,"LI",{});var t8e=s(W2);Cme=n(t8e,"STRONG",{});var sst=s(Cme);Tjo=r(sst,"mobilebert"),sst.forEach(t),Mjo=r(t8e," \u2014 "),dO=n(t8e,"A",{href:!0});var lst=s(dO);Ejo=r(lst,"MobileBertForQuestionAnswering"),lst.forEach(t),Cjo=r(t8e," (MobileBERT model)"),t8e.forEach(t),wjo=i(X),H2=n(X,"LI",{});var a8e=s(H2);wme=n(a8e,"STRONG",{});var ist=s(wme);Ajo=r(ist,"mpnet"),ist.forEach(t),yjo=r(a8e," \u2014 "),cO=n(a8e,"A",{href:!0});var dst=s(cO);Ljo=r(dst,"MPNetForQuestionAnswering"),dst.forEach(t),xjo=r(a8e," (MPNet model)"),a8e.forEach(t),$jo=i(X),U2=n(X,"LI",{});var n8e=s(U2);Ame=n(n8e,"STRONG",{});var cst=s(Ame);kjo=r(cst,"nystromformer"),cst.forEach(t),Sjo=r(n8e," \u2014 "),fO=n(n8e,"A",{href:!0});var fst=s(fO);Rjo=r(fst,"NystromformerForQuestionAnswering"),fst.forEach(t),Bjo=r(n8e," (Nystromformer model)"),n8e.forEach(t),Pjo=i(X),J2=n(X,"LI",{});var s8e=s(J2);yme=n(s8e,"STRONG",{});var mst=s(yme);Ijo=r(mst,"qdqbert"),mst.forEach(t),qjo=r(s8e," \u2014 "),mO=n(s8e,"A",{href:!0});var gst=s(mO);Njo=r(gst,"QDQBertForQuestionAnswering"),gst.forEach(t),jjo=r(s8e," (QDQBert model)"),s8e.forEach(t),Djo=i(X),Y2=n(X,"LI",{});var l8e=s(Y2);Lme=n(l8e,"STRONG",{});var hst=s(Lme);Gjo=r(hst,"reformer"),hst.forEach(t),Ojo=r(l8e," \u2014 "),gO=n(l8e,"A",{href:!0});var pst=s(gO);Vjo=r(pst,"ReformerForQuestionAnswering"),pst.forEach(t),Xjo=r(l8e," (Reformer model)"),l8e.forEach(t),zjo=i(X),K2=n(X,"LI",{});var i8e=s(K2);xme=n(i8e,"STRONG",{});var ust=s(xme);Qjo=r(ust,"rembert"),ust.forEach(t),Wjo=r(i8e," \u2014 "),hO=n(i8e,"A",{href:!0});var _st=s(hO);Hjo=r(_st,"RemBertForQuestionAnswering"),_st.forEach(t),Ujo=r(i8e," (RemBERT model)"),i8e.forEach(t),Jjo=i(X),Z2=n(X,"LI",{});var d8e=s(Z2);$me=n(d8e,"STRONG",{});var bst=s($me);Yjo=r(bst,"roberta"),bst.forEach(t),Kjo=r(d8e," \u2014 "),pO=n(d8e,"A",{href:!0});var vst=s(pO);Zjo=r(vst,"RobertaForQuestionAnswering"),vst.forEach(t),eDo=r(d8e," (RoBERTa model)"),d8e.forEach(t),oDo=i(X),e3=n(X,"LI",{});var c8e=s(e3);kme=n(c8e,"STRONG",{});var Fst=s(kme);rDo=r(Fst,"roformer"),Fst.forEach(t),tDo=r(c8e," \u2014 "),uO=n(c8e,"A",{href:!0});var Tst=s(uO);aDo=r(Tst,"RoFormerForQuestionAnswering"),Tst.forEach(t),nDo=r(c8e," (RoFormer model)"),c8e.forEach(t),sDo=i(X),o3=n(X,"LI",{});var f8e=s(o3);Sme=n(f8e,"STRONG",{});var Mst=s(Sme);lDo=r(Mst,"splinter"),Mst.forEach(t),iDo=r(f8e," \u2014 "),_O=n(f8e,"A",{href:!0});var Est=s(_O);dDo=r(Est,"SplinterForQuestionAnswering"),Est.forEach(t),cDo=r(f8e," (Splinter model)"),f8e.forEach(t),fDo=i(X),r3=n(X,"LI",{});var m8e=s(r3);Rme=n(m8e,"STRONG",{});var Cst=s(Rme);mDo=r(Cst,"squeezebert"),Cst.forEach(t),gDo=r(m8e," \u2014 "),bO=n(m8e,"A",{href:!0});var wst=s(bO);hDo=r(wst,"SqueezeBertForQuestionAnswering"),wst.forEach(t),pDo=r(m8e," (SqueezeBERT model)"),m8e.forEach(t),uDo=i(X),t3=n(X,"LI",{});var g8e=s(t3);Bme=n(g8e,"STRONG",{});var Ast=s(Bme);_Do=r(Ast,"xlm"),Ast.forEach(t),bDo=r(g8e," \u2014 "),vO=n(g8e,"A",{href:!0});var yst=s(vO);vDo=r(yst,"XLMForQuestionAnsweringSimple"),yst.forEach(t),FDo=r(g8e," (XLM model)"),g8e.forEach(t),TDo=i(X),a3=n(X,"LI",{});var h8e=s(a3);Pme=n(h8e,"STRONG",{});var Lst=s(Pme);MDo=r(Lst,"xlm-roberta"),Lst.forEach(t),EDo=r(h8e," \u2014 "),FO=n(h8e,"A",{href:!0});var xst=s(FO);CDo=r(xst,"XLMRobertaForQuestionAnswering"),xst.forEach(t),wDo=r(h8e," (XLM-RoBERTa model)"),h8e.forEach(t),ADo=i(X),n3=n(X,"LI",{});var p8e=s(n3);Ime=n(p8e,"STRONG",{});var $st=s(Ime);yDo=r($st,"xlm-roberta-xl"),$st.forEach(t),LDo=r(p8e," \u2014 "),TO=n(p8e,"A",{href:!0});var kst=s(TO);xDo=r(kst,"XLMRobertaXLForQuestionAnswering"),kst.forEach(t),$Do=r(p8e," (XLM-RoBERTa-XL model)"),p8e.forEach(t),kDo=i(X),s3=n(X,"LI",{});var u8e=s(s3);qme=n(u8e,"STRONG",{});var Sst=s(qme);SDo=r(Sst,"xlnet"),Sst.forEach(t),RDo=r(u8e," \u2014 "),MO=n(u8e,"A",{href:!0});var Rst=s(MO);BDo=r(Rst,"XLNetForQuestionAnsweringSimple"),Rst.forEach(t),PDo=r(u8e," (XLNet model)"),u8e.forEach(t),IDo=i(X),l3=n(X,"LI",{});var _8e=s(l3);Nme=n(_8e,"STRONG",{});var Bst=s(Nme);qDo=r(Bst,"yoso"),Bst.forEach(t),NDo=r(_8e," \u2014 "),EO=n(_8e,"A",{href:!0});var Pst=s(EO);jDo=r(Pst,"YosoForQuestionAnswering"),Pst.forEach(t),DDo=r(_8e," (YOSO model)"),_8e.forEach(t),X.forEach(t),GDo=i(na),i3=n(na,"P",{});var b8e=s(i3);ODo=r(b8e,"The model is set in evaluation mode by default using "),jme=n(b8e,"CODE",{});var Ist=s(jme);VDo=r(Ist,"model.eval()"),Ist.forEach(t),XDo=r(b8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=n(b8e,"CODE",{});var qst=s(Dme);zDo=r(qst,"model.train()"),qst.forEach(t),b8e.forEach(t),QDo=i(na),T(d3.$$.fragment,na),na.forEach(t),zs.forEach(t),NBe=i(f),zi=n(f,"H2",{class:!0});var DIe=s(zi);c3=n(DIe,"A",{id:!0,class:!0,href:!0});var Nst=s(c3);Gme=n(Nst,"SPAN",{});var jst=s(Gme);T(V6.$$.fragment,jst),jst.forEach(t),Nst.forEach(t),WDo=i(DIe),Ome=n(DIe,"SPAN",{});var Dst=s(Ome);HDo=r(Dst,"AutoModelForTableQuestionAnswering"),Dst.forEach(t),DIe.forEach(t),jBe=i(f),No=n(f,"DIV",{class:!0});var Qs=s(No);T(X6.$$.fragment,Qs),UDo=i(Qs),Qi=n(Qs,"P",{});var kY=s(Qi);JDo=r(kY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),CO=n(kY,"A",{href:!0});var Gst=s(CO);YDo=r(Gst,"from_pretrained()"),Gst.forEach(t),KDo=r(kY," class method or the "),wO=n(kY,"A",{href:!0});var Ost=s(wO);ZDo=r(Ost,"from_config()"),Ost.forEach(t),eGo=r(kY,` class
method.`),kY.forEach(t),oGo=i(Qs),z6=n(Qs,"P",{});var GIe=s(z6);rGo=r(GIe,"This class cannot be instantiated directly using "),Vme=n(GIe,"CODE",{});var Vst=s(Vme);tGo=r(Vst,"__init__()"),Vst.forEach(t),aGo=r(GIe," (throws an error)."),GIe.forEach(t),nGo=i(Qs),dt=n(Qs,"DIV",{class:!0});var QC=s(dt);T(Q6.$$.fragment,QC),sGo=i(QC),Xme=n(QC,"P",{});var Xst=s(Xme);lGo=r(Xst,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Xst.forEach(t),iGo=i(QC),Wi=n(QC,"P",{});var SY=s(Wi);dGo=r(SY,`Note:
Loading a model from its configuration file does `),zme=n(SY,"STRONG",{});var zst=s(zme);cGo=r(zst,"not"),zst.forEach(t),fGo=r(SY,` load the model weights. It only affects the
model\u2019s configuration. Use `),AO=n(SY,"A",{href:!0});var Qst=s(AO);mGo=r(Qst,"from_pretrained()"),Qst.forEach(t),gGo=r(SY," to load the model weights."),SY.forEach(t),hGo=i(QC),T(f3.$$.fragment,QC),QC.forEach(t),pGo=i(Qs),ao=n(Qs,"DIV",{class:!0});var sa=s(ao);T(W6.$$.fragment,sa),uGo=i(sa),Qme=n(sa,"P",{});var Wst=s(Qme);_Go=r(Wst,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Wst.forEach(t),bGo=i(sa),Ra=n(sa,"P",{});var WC=s(Ra);vGo=r(WC,"The model class to instantiate is selected based on the "),Wme=n(WC,"CODE",{});var Hst=s(Wme);FGo=r(Hst,"model_type"),Hst.forEach(t),TGo=r(WC,` property of the config object (either
passed as an argument or loaded from `),Hme=n(WC,"CODE",{});var Ust=s(Hme);MGo=r(Ust,"pretrained_model_name_or_path"),Ust.forEach(t),EGo=r(WC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ume=n(WC,"CODE",{});var Jst=s(Ume);CGo=r(Jst,"pretrained_model_name_or_path"),Jst.forEach(t),wGo=r(WC,":"),WC.forEach(t),AGo=i(sa),Jme=n(sa,"UL",{});var Yst=s(Jme);m3=n(Yst,"LI",{});var v8e=s(m3);Yme=n(v8e,"STRONG",{});var Kst=s(Yme);yGo=r(Kst,"tapas"),Kst.forEach(t),LGo=r(v8e," \u2014 "),yO=n(v8e,"A",{href:!0});var Zst=s(yO);xGo=r(Zst,"TapasForQuestionAnswering"),Zst.forEach(t),$Go=r(v8e," (TAPAS model)"),v8e.forEach(t),Yst.forEach(t),kGo=i(sa),g3=n(sa,"P",{});var F8e=s(g3);SGo=r(F8e,"The model is set in evaluation mode by default using "),Kme=n(F8e,"CODE",{});var elt=s(Kme);RGo=r(elt,"model.eval()"),elt.forEach(t),BGo=r(F8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zme=n(F8e,"CODE",{});var olt=s(Zme);PGo=r(olt,"model.train()"),olt.forEach(t),F8e.forEach(t),IGo=i(sa),T(h3.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),DBe=i(f),Hi=n(f,"H2",{class:!0});var OIe=s(Hi);p3=n(OIe,"A",{id:!0,class:!0,href:!0});var rlt=s(p3);ege=n(rlt,"SPAN",{});var tlt=s(ege);T(H6.$$.fragment,tlt),tlt.forEach(t),rlt.forEach(t),qGo=i(OIe),oge=n(OIe,"SPAN",{});var alt=s(oge);NGo=r(alt,"AutoModelForImageClassification"),alt.forEach(t),OIe.forEach(t),GBe=i(f),jo=n(f,"DIV",{class:!0});var Ws=s(jo);T(U6.$$.fragment,Ws),jGo=i(Ws),Ui=n(Ws,"P",{});var RY=s(Ui);DGo=r(RY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),LO=n(RY,"A",{href:!0});var nlt=s(LO);GGo=r(nlt,"from_pretrained()"),nlt.forEach(t),OGo=r(RY," class method or the "),xO=n(RY,"A",{href:!0});var slt=s(xO);VGo=r(slt,"from_config()"),slt.forEach(t),XGo=r(RY,` class
method.`),RY.forEach(t),zGo=i(Ws),J6=n(Ws,"P",{});var VIe=s(J6);QGo=r(VIe,"This class cannot be instantiated directly using "),rge=n(VIe,"CODE",{});var llt=s(rge);WGo=r(llt,"__init__()"),llt.forEach(t),HGo=r(VIe," (throws an error)."),VIe.forEach(t),UGo=i(Ws),ct=n(Ws,"DIV",{class:!0});var HC=s(ct);T(Y6.$$.fragment,HC),JGo=i(HC),tge=n(HC,"P",{});var ilt=s(tge);YGo=r(ilt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ilt.forEach(t),KGo=i(HC),Ji=n(HC,"P",{});var BY=s(Ji);ZGo=r(BY,`Note:
Loading a model from its configuration file does `),age=n(BY,"STRONG",{});var dlt=s(age);eOo=r(dlt,"not"),dlt.forEach(t),oOo=r(BY,` load the model weights. It only affects the
model\u2019s configuration. Use `),$O=n(BY,"A",{href:!0});var clt=s($O);rOo=r(clt,"from_pretrained()"),clt.forEach(t),tOo=r(BY," to load the model weights."),BY.forEach(t),aOo=i(HC),T(u3.$$.fragment,HC),HC.forEach(t),nOo=i(Ws),no=n(Ws,"DIV",{class:!0});var la=s(no);T(K6.$$.fragment,la),sOo=i(la),nge=n(la,"P",{});var flt=s(nge);lOo=r(flt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),flt.forEach(t),iOo=i(la),Ba=n(la,"P",{});var UC=s(Ba);dOo=r(UC,"The model class to instantiate is selected based on the "),sge=n(UC,"CODE",{});var mlt=s(sge);cOo=r(mlt,"model_type"),mlt.forEach(t),fOo=r(UC,` property of the config object (either
passed as an argument or loaded from `),lge=n(UC,"CODE",{});var glt=s(lge);mOo=r(glt,"pretrained_model_name_or_path"),glt.forEach(t),gOo=r(UC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ige=n(UC,"CODE",{});var hlt=s(ige);hOo=r(hlt,"pretrained_model_name_or_path"),hlt.forEach(t),pOo=r(UC,":"),UC.forEach(t),uOo=i(la),ve=n(la,"UL",{});var Ee=s(ve);_3=n(Ee,"LI",{});var T8e=s(_3);dge=n(T8e,"STRONG",{});var plt=s(dge);_Oo=r(plt,"beit"),plt.forEach(t),bOo=r(T8e," \u2014 "),kO=n(T8e,"A",{href:!0});var ult=s(kO);vOo=r(ult,"BeitForImageClassification"),ult.forEach(t),FOo=r(T8e," (BEiT model)"),T8e.forEach(t),TOo=i(Ee),b3=n(Ee,"LI",{});var M8e=s(b3);cge=n(M8e,"STRONG",{});var _lt=s(cge);MOo=r(_lt,"convnext"),_lt.forEach(t),EOo=r(M8e," \u2014 "),SO=n(M8e,"A",{href:!0});var blt=s(SO);COo=r(blt,"ConvNextForImageClassification"),blt.forEach(t),wOo=r(M8e," (ConvNext model)"),M8e.forEach(t),AOo=i(Ee),v3=n(Ee,"LI",{});var E8e=s(v3);fge=n(E8e,"STRONG",{});var vlt=s(fge);yOo=r(vlt,"data2vec-vision"),vlt.forEach(t),LOo=r(E8e," \u2014 "),RO=n(E8e,"A",{href:!0});var Flt=s(RO);xOo=r(Flt,"Data2VecVisionForImageClassification"),Flt.forEach(t),$Oo=r(E8e," (Data2VecVision model)"),E8e.forEach(t),kOo=i(Ee),xs=n(Ee,"LI",{});var k9=s(xs);mge=n(k9,"STRONG",{});var Tlt=s(mge);SOo=r(Tlt,"deit"),Tlt.forEach(t),ROo=r(k9," \u2014 "),BO=n(k9,"A",{href:!0});var Mlt=s(BO);BOo=r(Mlt,"DeiTForImageClassification"),Mlt.forEach(t),POo=r(k9," or "),PO=n(k9,"A",{href:!0});var Elt=s(PO);IOo=r(Elt,"DeiTForImageClassificationWithTeacher"),Elt.forEach(t),qOo=r(k9," (DeiT model)"),k9.forEach(t),NOo=i(Ee),F3=n(Ee,"LI",{});var C8e=s(F3);gge=n(C8e,"STRONG",{});var Clt=s(gge);jOo=r(Clt,"imagegpt"),Clt.forEach(t),DOo=r(C8e," \u2014 "),IO=n(C8e,"A",{href:!0});var wlt=s(IO);GOo=r(wlt,"ImageGPTForImageClassification"),wlt.forEach(t),OOo=r(C8e," (ImageGPT model)"),C8e.forEach(t),VOo=i(Ee),ft=n(Ee,"LI",{});var ef=s(ft);hge=n(ef,"STRONG",{});var Alt=s(hge);XOo=r(Alt,"perceiver"),Alt.forEach(t),zOo=r(ef," \u2014 "),qO=n(ef,"A",{href:!0});var ylt=s(qO);QOo=r(ylt,"PerceiverForImageClassificationLearned"),ylt.forEach(t),WOo=r(ef," or "),NO=n(ef,"A",{href:!0});var Llt=s(NO);HOo=r(Llt,"PerceiverForImageClassificationFourier"),Llt.forEach(t),UOo=r(ef," or "),jO=n(ef,"A",{href:!0});var xlt=s(jO);JOo=r(xlt,"PerceiverForImageClassificationConvProcessing"),xlt.forEach(t),YOo=r(ef," (Perceiver model)"),ef.forEach(t),KOo=i(Ee),T3=n(Ee,"LI",{});var w8e=s(T3);pge=n(w8e,"STRONG",{});var $lt=s(pge);ZOo=r($lt,"poolformer"),$lt.forEach(t),eVo=r(w8e," \u2014 "),DO=n(w8e,"A",{href:!0});var klt=s(DO);oVo=r(klt,"PoolFormerForImageClassification"),klt.forEach(t),rVo=r(w8e," (PoolFormer model)"),w8e.forEach(t),tVo=i(Ee),M3=n(Ee,"LI",{});var A8e=s(M3);uge=n(A8e,"STRONG",{});var Slt=s(uge);aVo=r(Slt,"regnet"),Slt.forEach(t),nVo=r(A8e," \u2014 "),GO=n(A8e,"A",{href:!0});var Rlt=s(GO);sVo=r(Rlt,"RegNetForImageClassification"),Rlt.forEach(t),lVo=r(A8e," (RegNet model)"),A8e.forEach(t),iVo=i(Ee),E3=n(Ee,"LI",{});var y8e=s(E3);_ge=n(y8e,"STRONG",{});var Blt=s(_ge);dVo=r(Blt,"resnet"),Blt.forEach(t),cVo=r(y8e," \u2014 "),OO=n(y8e,"A",{href:!0});var Plt=s(OO);fVo=r(Plt,"ResNetForImageClassification"),Plt.forEach(t),mVo=r(y8e," (ResNet model)"),y8e.forEach(t),gVo=i(Ee),C3=n(Ee,"LI",{});var L8e=s(C3);bge=n(L8e,"STRONG",{});var Ilt=s(bge);hVo=r(Ilt,"segformer"),Ilt.forEach(t),pVo=r(L8e," \u2014 "),VO=n(L8e,"A",{href:!0});var qlt=s(VO);uVo=r(qlt,"SegformerForImageClassification"),qlt.forEach(t),_Vo=r(L8e," (SegFormer model)"),L8e.forEach(t),bVo=i(Ee),w3=n(Ee,"LI",{});var x8e=s(w3);vge=n(x8e,"STRONG",{});var Nlt=s(vge);vVo=r(Nlt,"swin"),Nlt.forEach(t),FVo=r(x8e," \u2014 "),XO=n(x8e,"A",{href:!0});var jlt=s(XO);TVo=r(jlt,"SwinForImageClassification"),jlt.forEach(t),MVo=r(x8e," (Swin model)"),x8e.forEach(t),EVo=i(Ee),A3=n(Ee,"LI",{});var $8e=s(A3);Fge=n($8e,"STRONG",{});var Dlt=s(Fge);CVo=r(Dlt,"van"),Dlt.forEach(t),wVo=r($8e," \u2014 "),zO=n($8e,"A",{href:!0});var Glt=s(zO);AVo=r(Glt,"VanForImageClassification"),Glt.forEach(t),yVo=r($8e," (VAN model)"),$8e.forEach(t),LVo=i(Ee),y3=n(Ee,"LI",{});var k8e=s(y3);Tge=n(k8e,"STRONG",{});var Olt=s(Tge);xVo=r(Olt,"vit"),Olt.forEach(t),$Vo=r(k8e," \u2014 "),QO=n(k8e,"A",{href:!0});var Vlt=s(QO);kVo=r(Vlt,"ViTForImageClassification"),Vlt.forEach(t),SVo=r(k8e," (ViT model)"),k8e.forEach(t),Ee.forEach(t),RVo=i(la),L3=n(la,"P",{});var S8e=s(L3);BVo=r(S8e,"The model is set in evaluation mode by default using "),Mge=n(S8e,"CODE",{});var Xlt=s(Mge);PVo=r(Xlt,"model.eval()"),Xlt.forEach(t),IVo=r(S8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ege=n(S8e,"CODE",{});var zlt=s(Ege);qVo=r(zlt,"model.train()"),zlt.forEach(t),S8e.forEach(t),NVo=i(la),T(x3.$$.fragment,la),la.forEach(t),Ws.forEach(t),OBe=i(f),Yi=n(f,"H2",{class:!0});var XIe=s(Yi);$3=n(XIe,"A",{id:!0,class:!0,href:!0});var Qlt=s($3);Cge=n(Qlt,"SPAN",{});var Wlt=s(Cge);T(Z6.$$.fragment,Wlt),Wlt.forEach(t),Qlt.forEach(t),jVo=i(XIe),wge=n(XIe,"SPAN",{});var Hlt=s(wge);DVo=r(Hlt,"AutoModelForVision2Seq"),Hlt.forEach(t),XIe.forEach(t),VBe=i(f),Do=n(f,"DIV",{class:!0});var Hs=s(Do);T(ey.$$.fragment,Hs),GVo=i(Hs),Ki=n(Hs,"P",{});var PY=s(Ki);OVo=r(PY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WO=n(PY,"A",{href:!0});var Ult=s(WO);VVo=r(Ult,"from_pretrained()"),Ult.forEach(t),XVo=r(PY," class method or the "),HO=n(PY,"A",{href:!0});var Jlt=s(HO);zVo=r(Jlt,"from_config()"),Jlt.forEach(t),QVo=r(PY,` class
method.`),PY.forEach(t),WVo=i(Hs),oy=n(Hs,"P",{});var zIe=s(oy);HVo=r(zIe,"This class cannot be instantiated directly using "),Age=n(zIe,"CODE",{});var Ylt=s(Age);UVo=r(Ylt,"__init__()"),Ylt.forEach(t),JVo=r(zIe," (throws an error)."),zIe.forEach(t),YVo=i(Hs),mt=n(Hs,"DIV",{class:!0});var JC=s(mt);T(ry.$$.fragment,JC),KVo=i(JC),yge=n(JC,"P",{});var Klt=s(yge);ZVo=r(Klt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Klt.forEach(t),eXo=i(JC),Zi=n(JC,"P",{});var IY=s(Zi);oXo=r(IY,`Note:
Loading a model from its configuration file does `),Lge=n(IY,"STRONG",{});var Zlt=s(Lge);rXo=r(Zlt,"not"),Zlt.forEach(t),tXo=r(IY,` load the model weights. It only affects the
model\u2019s configuration. Use `),UO=n(IY,"A",{href:!0});var eit=s(UO);aXo=r(eit,"from_pretrained()"),eit.forEach(t),nXo=r(IY," to load the model weights."),IY.forEach(t),sXo=i(JC),T(k3.$$.fragment,JC),JC.forEach(t),lXo=i(Hs),so=n(Hs,"DIV",{class:!0});var ia=s(so);T(ty.$$.fragment,ia),iXo=i(ia),xge=n(ia,"P",{});var oit=s(xge);dXo=r(oit,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oit.forEach(t),cXo=i(ia),Pa=n(ia,"P",{});var YC=s(Pa);fXo=r(YC,"The model class to instantiate is selected based on the "),$ge=n(YC,"CODE",{});var rit=s($ge);mXo=r(rit,"model_type"),rit.forEach(t),gXo=r(YC,` property of the config object (either
passed as an argument or loaded from `),kge=n(YC,"CODE",{});var tit=s(kge);hXo=r(tit,"pretrained_model_name_or_path"),tit.forEach(t),pXo=r(YC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sge=n(YC,"CODE",{});var ait=s(Sge);uXo=r(ait,"pretrained_model_name_or_path"),ait.forEach(t),_Xo=r(YC,":"),YC.forEach(t),bXo=i(ia),Rge=n(ia,"UL",{});var nit=s(Rge);S3=n(nit,"LI",{});var R8e=s(S3);Bge=n(R8e,"STRONG",{});var sit=s(Bge);vXo=r(sit,"vision-encoder-decoder"),sit.forEach(t),FXo=r(R8e," \u2014 "),JO=n(R8e,"A",{href:!0});var lit=s(JO);TXo=r(lit,"VisionEncoderDecoderModel"),lit.forEach(t),MXo=r(R8e," (Vision Encoder decoder model)"),R8e.forEach(t),nit.forEach(t),EXo=i(ia),R3=n(ia,"P",{});var B8e=s(R3);CXo=r(B8e,"The model is set in evaluation mode by default using "),Pge=n(B8e,"CODE",{});var iit=s(Pge);wXo=r(iit,"model.eval()"),iit.forEach(t),AXo=r(B8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ige=n(B8e,"CODE",{});var dit=s(Ige);yXo=r(dit,"model.train()"),dit.forEach(t),B8e.forEach(t),LXo=i(ia),T(B3.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),XBe=i(f),ed=n(f,"H2",{class:!0});var QIe=s(ed);P3=n(QIe,"A",{id:!0,class:!0,href:!0});var cit=s(P3);qge=n(cit,"SPAN",{});var fit=s(qge);T(ay.$$.fragment,fit),fit.forEach(t),cit.forEach(t),xXo=i(QIe),Nge=n(QIe,"SPAN",{});var mit=s(Nge);$Xo=r(mit,"AutoModelForAudioClassification"),mit.forEach(t),QIe.forEach(t),zBe=i(f),Go=n(f,"DIV",{class:!0});var Us=s(Go);T(ny.$$.fragment,Us),kXo=i(Us),od=n(Us,"P",{});var qY=s(od);SXo=r(qY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),YO=n(qY,"A",{href:!0});var git=s(YO);RXo=r(git,"from_pretrained()"),git.forEach(t),BXo=r(qY," class method or the "),KO=n(qY,"A",{href:!0});var hit=s(KO);PXo=r(hit,"from_config()"),hit.forEach(t),IXo=r(qY,` class
method.`),qY.forEach(t),qXo=i(Us),sy=n(Us,"P",{});var WIe=s(sy);NXo=r(WIe,"This class cannot be instantiated directly using "),jge=n(WIe,"CODE",{});var pit=s(jge);jXo=r(pit,"__init__()"),pit.forEach(t),DXo=r(WIe," (throws an error)."),WIe.forEach(t),GXo=i(Us),gt=n(Us,"DIV",{class:!0});var KC=s(gt);T(ly.$$.fragment,KC),OXo=i(KC),Dge=n(KC,"P",{});var uit=s(Dge);VXo=r(uit,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),uit.forEach(t),XXo=i(KC),rd=n(KC,"P",{});var NY=s(rd);zXo=r(NY,`Note:
Loading a model from its configuration file does `),Gge=n(NY,"STRONG",{});var _it=s(Gge);QXo=r(_it,"not"),_it.forEach(t),WXo=r(NY,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZO=n(NY,"A",{href:!0});var bit=s(ZO);HXo=r(bit,"from_pretrained()"),bit.forEach(t),UXo=r(NY," to load the model weights."),NY.forEach(t),JXo=i(KC),T(I3.$$.fragment,KC),KC.forEach(t),YXo=i(Us),lo=n(Us,"DIV",{class:!0});var da=s(lo);T(iy.$$.fragment,da),KXo=i(da),Oge=n(da,"P",{});var vit=s(Oge);ZXo=r(vit,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),vit.forEach(t),ezo=i(da),Ia=n(da,"P",{});var ZC=s(Ia);ozo=r(ZC,"The model class to instantiate is selected based on the "),Vge=n(ZC,"CODE",{});var Fit=s(Vge);rzo=r(Fit,"model_type"),Fit.forEach(t),tzo=r(ZC,` property of the config object (either
passed as an argument or loaded from `),Xge=n(ZC,"CODE",{});var Tit=s(Xge);azo=r(Tit,"pretrained_model_name_or_path"),Tit.forEach(t),nzo=r(ZC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zge=n(ZC,"CODE",{});var Mit=s(zge);szo=r(Mit,"pretrained_model_name_or_path"),Mit.forEach(t),lzo=r(ZC,":"),ZC.forEach(t),izo=i(da),Ne=n(da,"UL",{});var bo=s(Ne);q3=n(bo,"LI",{});var P8e=s(q3);Qge=n(P8e,"STRONG",{});var Eit=s(Qge);dzo=r(Eit,"data2vec-audio"),Eit.forEach(t),czo=r(P8e," \u2014 "),eV=n(P8e,"A",{href:!0});var Cit=s(eV);fzo=r(Cit,"Data2VecAudioForSequenceClassification"),Cit.forEach(t),mzo=r(P8e," (Data2VecAudio model)"),P8e.forEach(t),gzo=i(bo),N3=n(bo,"LI",{});var I8e=s(N3);Wge=n(I8e,"STRONG",{});var wit=s(Wge);hzo=r(wit,"hubert"),wit.forEach(t),pzo=r(I8e," \u2014 "),oV=n(I8e,"A",{href:!0});var Ait=s(oV);uzo=r(Ait,"HubertForSequenceClassification"),Ait.forEach(t),_zo=r(I8e," (Hubert model)"),I8e.forEach(t),bzo=i(bo),j3=n(bo,"LI",{});var q8e=s(j3);Hge=n(q8e,"STRONG",{});var yit=s(Hge);vzo=r(yit,"sew"),yit.forEach(t),Fzo=r(q8e," \u2014 "),rV=n(q8e,"A",{href:!0});var Lit=s(rV);Tzo=r(Lit,"SEWForSequenceClassification"),Lit.forEach(t),Mzo=r(q8e," (SEW model)"),q8e.forEach(t),Ezo=i(bo),D3=n(bo,"LI",{});var N8e=s(D3);Uge=n(N8e,"STRONG",{});var xit=s(Uge);Czo=r(xit,"sew-d"),xit.forEach(t),wzo=r(N8e," \u2014 "),tV=n(N8e,"A",{href:!0});var $it=s(tV);Azo=r($it,"SEWDForSequenceClassification"),$it.forEach(t),yzo=r(N8e," (SEW-D model)"),N8e.forEach(t),Lzo=i(bo),G3=n(bo,"LI",{});var j8e=s(G3);Jge=n(j8e,"STRONG",{});var kit=s(Jge);xzo=r(kit,"unispeech"),kit.forEach(t),$zo=r(j8e," \u2014 "),aV=n(j8e,"A",{href:!0});var Sit=s(aV);kzo=r(Sit,"UniSpeechForSequenceClassification"),Sit.forEach(t),Szo=r(j8e," (UniSpeech model)"),j8e.forEach(t),Rzo=i(bo),O3=n(bo,"LI",{});var D8e=s(O3);Yge=n(D8e,"STRONG",{});var Rit=s(Yge);Bzo=r(Rit,"unispeech-sat"),Rit.forEach(t),Pzo=r(D8e," \u2014 "),nV=n(D8e,"A",{href:!0});var Bit=s(nV);Izo=r(Bit,"UniSpeechSatForSequenceClassification"),Bit.forEach(t),qzo=r(D8e," (UniSpeechSat model)"),D8e.forEach(t),Nzo=i(bo),V3=n(bo,"LI",{});var G8e=s(V3);Kge=n(G8e,"STRONG",{});var Pit=s(Kge);jzo=r(Pit,"wav2vec2"),Pit.forEach(t),Dzo=r(G8e," \u2014 "),sV=n(G8e,"A",{href:!0});var Iit=s(sV);Gzo=r(Iit,"Wav2Vec2ForSequenceClassification"),Iit.forEach(t),Ozo=r(G8e," (Wav2Vec2 model)"),G8e.forEach(t),Vzo=i(bo),X3=n(bo,"LI",{});var O8e=s(X3);Zge=n(O8e,"STRONG",{});var qit=s(Zge);Xzo=r(qit,"wavlm"),qit.forEach(t),zzo=r(O8e," \u2014 "),lV=n(O8e,"A",{href:!0});var Nit=s(lV);Qzo=r(Nit,"WavLMForSequenceClassification"),Nit.forEach(t),Wzo=r(O8e," (WavLM model)"),O8e.forEach(t),bo.forEach(t),Hzo=i(da),z3=n(da,"P",{});var V8e=s(z3);Uzo=r(V8e,"The model is set in evaluation mode by default using "),ehe=n(V8e,"CODE",{});var jit=s(ehe);Jzo=r(jit,"model.eval()"),jit.forEach(t),Yzo=r(V8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ohe=n(V8e,"CODE",{});var Dit=s(ohe);Kzo=r(Dit,"model.train()"),Dit.forEach(t),V8e.forEach(t),Zzo=i(da),T(Q3.$$.fragment,da),da.forEach(t),Us.forEach(t),QBe=i(f),td=n(f,"H2",{class:!0});var HIe=s(td);W3=n(HIe,"A",{id:!0,class:!0,href:!0});var Git=s(W3);rhe=n(Git,"SPAN",{});var Oit=s(rhe);T(dy.$$.fragment,Oit),Oit.forEach(t),Git.forEach(t),eQo=i(HIe),the=n(HIe,"SPAN",{});var Vit=s(the);oQo=r(Vit,"AutoModelForAudioFrameClassification"),Vit.forEach(t),HIe.forEach(t),WBe=i(f),Oo=n(f,"DIV",{class:!0});var Js=s(Oo);T(cy.$$.fragment,Js),rQo=i(Js),ad=n(Js,"P",{});var jY=s(ad);tQo=r(jY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),iV=n(jY,"A",{href:!0});var Xit=s(iV);aQo=r(Xit,"from_pretrained()"),Xit.forEach(t),nQo=r(jY," class method or the "),dV=n(jY,"A",{href:!0});var zit=s(dV);sQo=r(zit,"from_config()"),zit.forEach(t),lQo=r(jY,` class
method.`),jY.forEach(t),iQo=i(Js),fy=n(Js,"P",{});var UIe=s(fy);dQo=r(UIe,"This class cannot be instantiated directly using "),ahe=n(UIe,"CODE",{});var Qit=s(ahe);cQo=r(Qit,"__init__()"),Qit.forEach(t),fQo=r(UIe," (throws an error)."),UIe.forEach(t),mQo=i(Js),ht=n(Js,"DIV",{class:!0});var ew=s(ht);T(my.$$.fragment,ew),gQo=i(ew),nhe=n(ew,"P",{});var Wit=s(nhe);hQo=r(Wit,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Wit.forEach(t),pQo=i(ew),nd=n(ew,"P",{});var DY=s(nd);uQo=r(DY,`Note:
Loading a model from its configuration file does `),she=n(DY,"STRONG",{});var Hit=s(she);_Qo=r(Hit,"not"),Hit.forEach(t),bQo=r(DY,` load the model weights. It only affects the
model\u2019s configuration. Use `),cV=n(DY,"A",{href:!0});var Uit=s(cV);vQo=r(Uit,"from_pretrained()"),Uit.forEach(t),FQo=r(DY," to load the model weights."),DY.forEach(t),TQo=i(ew),T(H3.$$.fragment,ew),ew.forEach(t),MQo=i(Js),io=n(Js,"DIV",{class:!0});var ca=s(io);T(gy.$$.fragment,ca),EQo=i(ca),lhe=n(ca,"P",{});var Jit=s(lhe);CQo=r(Jit,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Jit.forEach(t),wQo=i(ca),qa=n(ca,"P",{});var ow=s(qa);AQo=r(ow,"The model class to instantiate is selected based on the "),ihe=n(ow,"CODE",{});var Yit=s(ihe);yQo=r(Yit,"model_type"),Yit.forEach(t),LQo=r(ow,` property of the config object (either
passed as an argument or loaded from `),dhe=n(ow,"CODE",{});var Kit=s(dhe);xQo=r(Kit,"pretrained_model_name_or_path"),Kit.forEach(t),$Qo=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=n(ow,"CODE",{});var Zit=s(che);kQo=r(Zit,"pretrained_model_name_or_path"),Zit.forEach(t),SQo=r(ow,":"),ow.forEach(t),RQo=i(ca),Na=n(ca,"UL",{});var rw=s(Na);U3=n(rw,"LI",{});var X8e=s(U3);fhe=n(X8e,"STRONG",{});var edt=s(fhe);BQo=r(edt,"data2vec-audio"),edt.forEach(t),PQo=r(X8e," \u2014 "),fV=n(X8e,"A",{href:!0});var odt=s(fV);IQo=r(odt,"Data2VecAudioForAudioFrameClassification"),odt.forEach(t),qQo=r(X8e," (Data2VecAudio model)"),X8e.forEach(t),NQo=i(rw),J3=n(rw,"LI",{});var z8e=s(J3);mhe=n(z8e,"STRONG",{});var rdt=s(mhe);jQo=r(rdt,"unispeech-sat"),rdt.forEach(t),DQo=r(z8e," \u2014 "),mV=n(z8e,"A",{href:!0});var tdt=s(mV);GQo=r(tdt,"UniSpeechSatForAudioFrameClassification"),tdt.forEach(t),OQo=r(z8e," (UniSpeechSat model)"),z8e.forEach(t),VQo=i(rw),Y3=n(rw,"LI",{});var Q8e=s(Y3);ghe=n(Q8e,"STRONG",{});var adt=s(ghe);XQo=r(adt,"wav2vec2"),adt.forEach(t),zQo=r(Q8e," \u2014 "),gV=n(Q8e,"A",{href:!0});var ndt=s(gV);QQo=r(ndt,"Wav2Vec2ForAudioFrameClassification"),ndt.forEach(t),WQo=r(Q8e," (Wav2Vec2 model)"),Q8e.forEach(t),HQo=i(rw),K3=n(rw,"LI",{});var W8e=s(K3);hhe=n(W8e,"STRONG",{});var sdt=s(hhe);UQo=r(sdt,"wavlm"),sdt.forEach(t),JQo=r(W8e," \u2014 "),hV=n(W8e,"A",{href:!0});var ldt=s(hV);YQo=r(ldt,"WavLMForAudioFrameClassification"),ldt.forEach(t),KQo=r(W8e," (WavLM model)"),W8e.forEach(t),rw.forEach(t),ZQo=i(ca),Z3=n(ca,"P",{});var H8e=s(Z3);eWo=r(H8e,"The model is set in evaluation mode by default using "),phe=n(H8e,"CODE",{});var idt=s(phe);oWo=r(idt,"model.eval()"),idt.forEach(t),rWo=r(H8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uhe=n(H8e,"CODE",{});var ddt=s(uhe);tWo=r(ddt,"model.train()"),ddt.forEach(t),H8e.forEach(t),aWo=i(ca),T(ev.$$.fragment,ca),ca.forEach(t),Js.forEach(t),HBe=i(f),sd=n(f,"H2",{class:!0});var JIe=s(sd);ov=n(JIe,"A",{id:!0,class:!0,href:!0});var cdt=s(ov);_he=n(cdt,"SPAN",{});var fdt=s(_he);T(hy.$$.fragment,fdt),fdt.forEach(t),cdt.forEach(t),nWo=i(JIe),bhe=n(JIe,"SPAN",{});var mdt=s(bhe);sWo=r(mdt,"AutoModelForCTC"),mdt.forEach(t),JIe.forEach(t),UBe=i(f),Vo=n(f,"DIV",{class:!0});var Ys=s(Vo);T(py.$$.fragment,Ys),lWo=i(Ys),ld=n(Ys,"P",{});var GY=s(ld);iWo=r(GY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),pV=n(GY,"A",{href:!0});var gdt=s(pV);dWo=r(gdt,"from_pretrained()"),gdt.forEach(t),cWo=r(GY," class method or the "),uV=n(GY,"A",{href:!0});var hdt=s(uV);fWo=r(hdt,"from_config()"),hdt.forEach(t),mWo=r(GY,` class
method.`),GY.forEach(t),gWo=i(Ys),uy=n(Ys,"P",{});var YIe=s(uy);hWo=r(YIe,"This class cannot be instantiated directly using "),vhe=n(YIe,"CODE",{});var pdt=s(vhe);pWo=r(pdt,"__init__()"),pdt.forEach(t),uWo=r(YIe," (throws an error)."),YIe.forEach(t),_Wo=i(Ys),pt=n(Ys,"DIV",{class:!0});var tw=s(pt);T(_y.$$.fragment,tw),bWo=i(tw),Fhe=n(tw,"P",{});var udt=s(Fhe);vWo=r(udt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),udt.forEach(t),FWo=i(tw),id=n(tw,"P",{});var OY=s(id);TWo=r(OY,`Note:
Loading a model from its configuration file does `),The=n(OY,"STRONG",{});var _dt=s(The);MWo=r(_dt,"not"),_dt.forEach(t),EWo=r(OY,` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=n(OY,"A",{href:!0});var bdt=s(_V);CWo=r(bdt,"from_pretrained()"),bdt.forEach(t),wWo=r(OY," to load the model weights."),OY.forEach(t),AWo=i(tw),T(rv.$$.fragment,tw),tw.forEach(t),yWo=i(Ys),co=n(Ys,"DIV",{class:!0});var fa=s(co);T(by.$$.fragment,fa),LWo=i(fa),Mhe=n(fa,"P",{});var vdt=s(Mhe);xWo=r(vdt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),vdt.forEach(t),$Wo=i(fa),ja=n(fa,"P",{});var aw=s(ja);kWo=r(aw,"The model class to instantiate is selected based on the "),Ehe=n(aw,"CODE",{});var Fdt=s(Ehe);SWo=r(Fdt,"model_type"),Fdt.forEach(t),RWo=r(aw,` property of the config object (either
passed as an argument or loaded from `),Che=n(aw,"CODE",{});var Tdt=s(Che);BWo=r(Tdt,"pretrained_model_name_or_path"),Tdt.forEach(t),PWo=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),whe=n(aw,"CODE",{});var Mdt=s(whe);IWo=r(Mdt,"pretrained_model_name_or_path"),Mdt.forEach(t),qWo=r(aw,":"),aw.forEach(t),NWo=i(fa),je=n(fa,"UL",{});var vo=s(je);tv=n(vo,"LI",{});var U8e=s(tv);Ahe=n(U8e,"STRONG",{});var Edt=s(Ahe);jWo=r(Edt,"data2vec-audio"),Edt.forEach(t),DWo=r(U8e," \u2014 "),bV=n(U8e,"A",{href:!0});var Cdt=s(bV);GWo=r(Cdt,"Data2VecAudioForCTC"),Cdt.forEach(t),OWo=r(U8e," (Data2VecAudio model)"),U8e.forEach(t),VWo=i(vo),av=n(vo,"LI",{});var J8e=s(av);yhe=n(J8e,"STRONG",{});var wdt=s(yhe);XWo=r(wdt,"hubert"),wdt.forEach(t),zWo=r(J8e," \u2014 "),vV=n(J8e,"A",{href:!0});var Adt=s(vV);QWo=r(Adt,"HubertForCTC"),Adt.forEach(t),WWo=r(J8e," (Hubert model)"),J8e.forEach(t),HWo=i(vo),nv=n(vo,"LI",{});var Y8e=s(nv);Lhe=n(Y8e,"STRONG",{});var ydt=s(Lhe);UWo=r(ydt,"sew"),ydt.forEach(t),JWo=r(Y8e," \u2014 "),FV=n(Y8e,"A",{href:!0});var Ldt=s(FV);YWo=r(Ldt,"SEWForCTC"),Ldt.forEach(t),KWo=r(Y8e," (SEW model)"),Y8e.forEach(t),ZWo=i(vo),sv=n(vo,"LI",{});var K8e=s(sv);xhe=n(K8e,"STRONG",{});var xdt=s(xhe);eHo=r(xdt,"sew-d"),xdt.forEach(t),oHo=r(K8e," \u2014 "),TV=n(K8e,"A",{href:!0});var $dt=s(TV);rHo=r($dt,"SEWDForCTC"),$dt.forEach(t),tHo=r(K8e," (SEW-D model)"),K8e.forEach(t),aHo=i(vo),lv=n(vo,"LI",{});var Z8e=s(lv);$he=n(Z8e,"STRONG",{});var kdt=s($he);nHo=r(kdt,"unispeech"),kdt.forEach(t),sHo=r(Z8e," \u2014 "),MV=n(Z8e,"A",{href:!0});var Sdt=s(MV);lHo=r(Sdt,"UniSpeechForCTC"),Sdt.forEach(t),iHo=r(Z8e," (UniSpeech model)"),Z8e.forEach(t),dHo=i(vo),iv=n(vo,"LI",{});var exe=s(iv);khe=n(exe,"STRONG",{});var Rdt=s(khe);cHo=r(Rdt,"unispeech-sat"),Rdt.forEach(t),fHo=r(exe," \u2014 "),EV=n(exe,"A",{href:!0});var Bdt=s(EV);mHo=r(Bdt,"UniSpeechSatForCTC"),Bdt.forEach(t),gHo=r(exe," (UniSpeechSat model)"),exe.forEach(t),hHo=i(vo),dv=n(vo,"LI",{});var oxe=s(dv);She=n(oxe,"STRONG",{});var Pdt=s(She);pHo=r(Pdt,"wav2vec2"),Pdt.forEach(t),uHo=r(oxe," \u2014 "),CV=n(oxe,"A",{href:!0});var Idt=s(CV);_Ho=r(Idt,"Wav2Vec2ForCTC"),Idt.forEach(t),bHo=r(oxe," (Wav2Vec2 model)"),oxe.forEach(t),vHo=i(vo),cv=n(vo,"LI",{});var rxe=s(cv);Rhe=n(rxe,"STRONG",{});var qdt=s(Rhe);FHo=r(qdt,"wavlm"),qdt.forEach(t),THo=r(rxe," \u2014 "),wV=n(rxe,"A",{href:!0});var Ndt=s(wV);MHo=r(Ndt,"WavLMForCTC"),Ndt.forEach(t),EHo=r(rxe," (WavLM model)"),rxe.forEach(t),vo.forEach(t),CHo=i(fa),fv=n(fa,"P",{});var txe=s(fv);wHo=r(txe,"The model is set in evaluation mode by default using "),Bhe=n(txe,"CODE",{});var jdt=s(Bhe);AHo=r(jdt,"model.eval()"),jdt.forEach(t),yHo=r(txe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Phe=n(txe,"CODE",{});var Ddt=s(Phe);LHo=r(Ddt,"model.train()"),Ddt.forEach(t),txe.forEach(t),xHo=i(fa),T(mv.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),JBe=i(f),dd=n(f,"H2",{class:!0});var KIe=s(dd);gv=n(KIe,"A",{id:!0,class:!0,href:!0});var Gdt=s(gv);Ihe=n(Gdt,"SPAN",{});var Odt=s(Ihe);T(vy.$$.fragment,Odt),Odt.forEach(t),Gdt.forEach(t),$Ho=i(KIe),qhe=n(KIe,"SPAN",{});var Vdt=s(qhe);kHo=r(Vdt,"AutoModelForSpeechSeq2Seq"),Vdt.forEach(t),KIe.forEach(t),YBe=i(f),Xo=n(f,"DIV",{class:!0});var Ks=s(Xo);T(Fy.$$.fragment,Ks),SHo=i(Ks),cd=n(Ks,"P",{});var VY=s(cd);RHo=r(VY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),AV=n(VY,"A",{href:!0});var Xdt=s(AV);BHo=r(Xdt,"from_pretrained()"),Xdt.forEach(t),PHo=r(VY," class method or the "),yV=n(VY,"A",{href:!0});var zdt=s(yV);IHo=r(zdt,"from_config()"),zdt.forEach(t),qHo=r(VY,` class
method.`),VY.forEach(t),NHo=i(Ks),Ty=n(Ks,"P",{});var ZIe=s(Ty);jHo=r(ZIe,"This class cannot be instantiated directly using "),Nhe=n(ZIe,"CODE",{});var Qdt=s(Nhe);DHo=r(Qdt,"__init__()"),Qdt.forEach(t),GHo=r(ZIe," (throws an error)."),ZIe.forEach(t),OHo=i(Ks),ut=n(Ks,"DIV",{class:!0});var nw=s(ut);T(My.$$.fragment,nw),VHo=i(nw),jhe=n(nw,"P",{});var Wdt=s(jhe);XHo=r(Wdt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Wdt.forEach(t),zHo=i(nw),fd=n(nw,"P",{});var XY=s(fd);QHo=r(XY,`Note:
Loading a model from its configuration file does `),Dhe=n(XY,"STRONG",{});var Hdt=s(Dhe);WHo=r(Hdt,"not"),Hdt.forEach(t),HHo=r(XY,` load the model weights. It only affects the
model\u2019s configuration. Use `),LV=n(XY,"A",{href:!0});var Udt=s(LV);UHo=r(Udt,"from_pretrained()"),Udt.forEach(t),JHo=r(XY," to load the model weights."),XY.forEach(t),YHo=i(nw),T(hv.$$.fragment,nw),nw.forEach(t),KHo=i(Ks),fo=n(Ks,"DIV",{class:!0});var ma=s(fo);T(Ey.$$.fragment,ma),ZHo=i(ma),Ghe=n(ma,"P",{});var Jdt=s(Ghe);eUo=r(Jdt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Jdt.forEach(t),oUo=i(ma),Da=n(ma,"P",{});var sw=s(Da);rUo=r(sw,"The model class to instantiate is selected based on the "),Ohe=n(sw,"CODE",{});var Ydt=s(Ohe);tUo=r(Ydt,"model_type"),Ydt.forEach(t),aUo=r(sw,` property of the config object (either
passed as an argument or loaded from `),Vhe=n(sw,"CODE",{});var Kdt=s(Vhe);nUo=r(Kdt,"pretrained_model_name_or_path"),Kdt.forEach(t),sUo=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xhe=n(sw,"CODE",{});var Zdt=s(Xhe);lUo=r(Zdt,"pretrained_model_name_or_path"),Zdt.forEach(t),iUo=r(sw,":"),sw.forEach(t),dUo=i(ma),Cy=n(ma,"UL",{});var eqe=s(Cy);pv=n(eqe,"LI",{});var axe=s(pv);zhe=n(axe,"STRONG",{});var ect=s(zhe);cUo=r(ect,"speech-encoder-decoder"),ect.forEach(t),fUo=r(axe," \u2014 "),xV=n(axe,"A",{href:!0});var oct=s(xV);mUo=r(oct,"SpeechEncoderDecoderModel"),oct.forEach(t),gUo=r(axe," (Speech Encoder decoder model)"),axe.forEach(t),hUo=i(eqe),uv=n(eqe,"LI",{});var nxe=s(uv);Qhe=n(nxe,"STRONG",{});var rct=s(Qhe);pUo=r(rct,"speech_to_text"),rct.forEach(t),uUo=r(nxe," \u2014 "),$V=n(nxe,"A",{href:!0});var tct=s($V);_Uo=r(tct,"Speech2TextForConditionalGeneration"),tct.forEach(t),bUo=r(nxe," (Speech2Text model)"),nxe.forEach(t),eqe.forEach(t),vUo=i(ma),_v=n(ma,"P",{});var sxe=s(_v);FUo=r(sxe,"The model is set in evaluation mode by default using "),Whe=n(sxe,"CODE",{});var act=s(Whe);TUo=r(act,"model.eval()"),act.forEach(t),MUo=r(sxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hhe=n(sxe,"CODE",{});var nct=s(Hhe);EUo=r(nct,"model.train()"),nct.forEach(t),sxe.forEach(t),CUo=i(ma),T(bv.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),KBe=i(f),md=n(f,"H2",{class:!0});var oqe=s(md);vv=n(oqe,"A",{id:!0,class:!0,href:!0});var sct=s(vv);Uhe=n(sct,"SPAN",{});var lct=s(Uhe);T(wy.$$.fragment,lct),lct.forEach(t),sct.forEach(t),wUo=i(oqe),Jhe=n(oqe,"SPAN",{});var ict=s(Jhe);AUo=r(ict,"AutoModelForAudioXVector"),ict.forEach(t),oqe.forEach(t),ZBe=i(f),zo=n(f,"DIV",{class:!0});var Zs=s(zo);T(Ay.$$.fragment,Zs),yUo=i(Zs),gd=n(Zs,"P",{});var zY=s(gd);LUo=r(zY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),kV=n(zY,"A",{href:!0});var dct=s(kV);xUo=r(dct,"from_pretrained()"),dct.forEach(t),$Uo=r(zY," class method or the "),SV=n(zY,"A",{href:!0});var cct=s(SV);kUo=r(cct,"from_config()"),cct.forEach(t),SUo=r(zY,` class
method.`),zY.forEach(t),RUo=i(Zs),yy=n(Zs,"P",{});var rqe=s(yy);BUo=r(rqe,"This class cannot be instantiated directly using "),Yhe=n(rqe,"CODE",{});var fct=s(Yhe);PUo=r(fct,"__init__()"),fct.forEach(t),IUo=r(rqe," (throws an error)."),rqe.forEach(t),qUo=i(Zs),_t=n(Zs,"DIV",{class:!0});var lw=s(_t);T(Ly.$$.fragment,lw),NUo=i(lw),Khe=n(lw,"P",{});var mct=s(Khe);jUo=r(mct,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),mct.forEach(t),DUo=i(lw),hd=n(lw,"P",{});var QY=s(hd);GUo=r(QY,`Note:
Loading a model from its configuration file does `),Zhe=n(QY,"STRONG",{});var gct=s(Zhe);OUo=r(gct,"not"),gct.forEach(t),VUo=r(QY,` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=n(QY,"A",{href:!0});var hct=s(RV);XUo=r(hct,"from_pretrained()"),hct.forEach(t),zUo=r(QY," to load the model weights."),QY.forEach(t),QUo=i(lw),T(Fv.$$.fragment,lw),lw.forEach(t),WUo=i(Zs),mo=n(Zs,"DIV",{class:!0});var ga=s(mo);T(xy.$$.fragment,ga),HUo=i(ga),epe=n(ga,"P",{});var pct=s(epe);UUo=r(pct,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),pct.forEach(t),JUo=i(ga),Ga=n(ga,"P",{});var iw=s(Ga);YUo=r(iw,"The model class to instantiate is selected based on the "),ope=n(iw,"CODE",{});var uct=s(ope);KUo=r(uct,"model_type"),uct.forEach(t),ZUo=r(iw,` property of the config object (either
passed as an argument or loaded from `),rpe=n(iw,"CODE",{});var _ct=s(rpe);eJo=r(_ct,"pretrained_model_name_or_path"),_ct.forEach(t),oJo=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tpe=n(iw,"CODE",{});var bct=s(tpe);rJo=r(bct,"pretrained_model_name_or_path"),bct.forEach(t),tJo=r(iw,":"),iw.forEach(t),aJo=i(ga),Oa=n(ga,"UL",{});var dw=s(Oa);Tv=n(dw,"LI",{});var lxe=s(Tv);ape=n(lxe,"STRONG",{});var vct=s(ape);nJo=r(vct,"data2vec-audio"),vct.forEach(t),sJo=r(lxe," \u2014 "),BV=n(lxe,"A",{href:!0});var Fct=s(BV);lJo=r(Fct,"Data2VecAudioForXVector"),Fct.forEach(t),iJo=r(lxe," (Data2VecAudio model)"),lxe.forEach(t),dJo=i(dw),Mv=n(dw,"LI",{});var ixe=s(Mv);npe=n(ixe,"STRONG",{});var Tct=s(npe);cJo=r(Tct,"unispeech-sat"),Tct.forEach(t),fJo=r(ixe," \u2014 "),PV=n(ixe,"A",{href:!0});var Mct=s(PV);mJo=r(Mct,"UniSpeechSatForXVector"),Mct.forEach(t),gJo=r(ixe," (UniSpeechSat model)"),ixe.forEach(t),hJo=i(dw),Ev=n(dw,"LI",{});var dxe=s(Ev);spe=n(dxe,"STRONG",{});var Ect=s(spe);pJo=r(Ect,"wav2vec2"),Ect.forEach(t),uJo=r(dxe," \u2014 "),IV=n(dxe,"A",{href:!0});var Cct=s(IV);_Jo=r(Cct,"Wav2Vec2ForXVector"),Cct.forEach(t),bJo=r(dxe," (Wav2Vec2 model)"),dxe.forEach(t),vJo=i(dw),Cv=n(dw,"LI",{});var cxe=s(Cv);lpe=n(cxe,"STRONG",{});var wct=s(lpe);FJo=r(wct,"wavlm"),wct.forEach(t),TJo=r(cxe," \u2014 "),qV=n(cxe,"A",{href:!0});var Act=s(qV);MJo=r(Act,"WavLMForXVector"),Act.forEach(t),EJo=r(cxe," (WavLM model)"),cxe.forEach(t),dw.forEach(t),CJo=i(ga),wv=n(ga,"P",{});var fxe=s(wv);wJo=r(fxe,"The model is set in evaluation mode by default using "),ipe=n(fxe,"CODE",{});var yct=s(ipe);AJo=r(yct,"model.eval()"),yct.forEach(t),yJo=r(fxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dpe=n(fxe,"CODE",{});var Lct=s(dpe);LJo=r(Lct,"model.train()"),Lct.forEach(t),fxe.forEach(t),xJo=i(ga),T(Av.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),ePe=i(f),pd=n(f,"H2",{class:!0});var tqe=s(pd);yv=n(tqe,"A",{id:!0,class:!0,href:!0});var xct=s(yv);cpe=n(xct,"SPAN",{});var $ct=s(cpe);T($y.$$.fragment,$ct),$ct.forEach(t),xct.forEach(t),$Jo=i(tqe),fpe=n(tqe,"SPAN",{});var kct=s(fpe);kJo=r(kct,"AutoModelForMaskedImageModeling"),kct.forEach(t),tqe.forEach(t),oPe=i(f),Qo=n(f,"DIV",{class:!0});var el=s(Qo);T(ky.$$.fragment,el),SJo=i(el),ud=n(el,"P",{});var WY=s(ud);RJo=r(WY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),NV=n(WY,"A",{href:!0});var Sct=s(NV);BJo=r(Sct,"from_pretrained()"),Sct.forEach(t),PJo=r(WY," class method or the "),jV=n(WY,"A",{href:!0});var Rct=s(jV);IJo=r(Rct,"from_config()"),Rct.forEach(t),qJo=r(WY,` class
method.`),WY.forEach(t),NJo=i(el),Sy=n(el,"P",{});var aqe=s(Sy);jJo=r(aqe,"This class cannot be instantiated directly using "),mpe=n(aqe,"CODE",{});var Bct=s(mpe);DJo=r(Bct,"__init__()"),Bct.forEach(t),GJo=r(aqe," (throws an error)."),aqe.forEach(t),OJo=i(el),bt=n(el,"DIV",{class:!0});var cw=s(bt);T(Ry.$$.fragment,cw),VJo=i(cw),gpe=n(cw,"P",{});var Pct=s(gpe);XJo=r(Pct,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Pct.forEach(t),zJo=i(cw),_d=n(cw,"P",{});var HY=s(_d);QJo=r(HY,`Note:
Loading a model from its configuration file does `),hpe=n(HY,"STRONG",{});var Ict=s(hpe);WJo=r(Ict,"not"),Ict.forEach(t),HJo=r(HY,` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=n(HY,"A",{href:!0});var qct=s(DV);UJo=r(qct,"from_pretrained()"),qct.forEach(t),JJo=r(HY," to load the model weights."),HY.forEach(t),YJo=i(cw),T(Lv.$$.fragment,cw),cw.forEach(t),KJo=i(el),go=n(el,"DIV",{class:!0});var ha=s(go);T(By.$$.fragment,ha),ZJo=i(ha),ppe=n(ha,"P",{});var Nct=s(ppe);eYo=r(Nct,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Nct.forEach(t),oYo=i(ha),Va=n(ha,"P",{});var fw=s(Va);rYo=r(fw,"The model class to instantiate is selected based on the "),upe=n(fw,"CODE",{});var jct=s(upe);tYo=r(jct,"model_type"),jct.forEach(t),aYo=r(fw,` property of the config object (either
passed as an argument or loaded from `),_pe=n(fw,"CODE",{});var Dct=s(_pe);nYo=r(Dct,"pretrained_model_name_or_path"),Dct.forEach(t),sYo=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bpe=n(fw,"CODE",{});var Gct=s(bpe);lYo=r(Gct,"pretrained_model_name_or_path"),Gct.forEach(t),iYo=r(fw,":"),fw.forEach(t),dYo=i(ha),bd=n(ha,"UL",{});var UY=s(bd);xv=n(UY,"LI",{});var mxe=s(xv);vpe=n(mxe,"STRONG",{});var Oct=s(vpe);cYo=r(Oct,"deit"),Oct.forEach(t),fYo=r(mxe," \u2014 "),GV=n(mxe,"A",{href:!0});var Vct=s(GV);mYo=r(Vct,"DeiTForMaskedImageModeling"),Vct.forEach(t),gYo=r(mxe," (DeiT model)"),mxe.forEach(t),hYo=i(UY),$v=n(UY,"LI",{});var gxe=s($v);Fpe=n(gxe,"STRONG",{});var Xct=s(Fpe);pYo=r(Xct,"swin"),Xct.forEach(t),uYo=r(gxe," \u2014 "),OV=n(gxe,"A",{href:!0});var zct=s(OV);_Yo=r(zct,"SwinForMaskedImageModeling"),zct.forEach(t),bYo=r(gxe," (Swin model)"),gxe.forEach(t),vYo=i(UY),kv=n(UY,"LI",{});var hxe=s(kv);Tpe=n(hxe,"STRONG",{});var Qct=s(Tpe);FYo=r(Qct,"vit"),Qct.forEach(t),TYo=r(hxe," \u2014 "),VV=n(hxe,"A",{href:!0});var Wct=s(VV);MYo=r(Wct,"ViTForMaskedImageModeling"),Wct.forEach(t),EYo=r(hxe," (ViT model)"),hxe.forEach(t),UY.forEach(t),CYo=i(ha),Sv=n(ha,"P",{});var pxe=s(Sv);wYo=r(pxe,"The model is set in evaluation mode by default using "),Mpe=n(pxe,"CODE",{});var Hct=s(Mpe);AYo=r(Hct,"model.eval()"),Hct.forEach(t),yYo=r(pxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Epe=n(pxe,"CODE",{});var Uct=s(Epe);LYo=r(Uct,"model.train()"),Uct.forEach(t),pxe.forEach(t),xYo=i(ha),T(Rv.$$.fragment,ha),ha.forEach(t),el.forEach(t),rPe=i(f),vd=n(f,"H2",{class:!0});var nqe=s(vd);Bv=n(nqe,"A",{id:!0,class:!0,href:!0});var Jct=s(Bv);Cpe=n(Jct,"SPAN",{});var Yct=s(Cpe);T(Py.$$.fragment,Yct),Yct.forEach(t),Jct.forEach(t),$Yo=i(nqe),wpe=n(nqe,"SPAN",{});var Kct=s(wpe);kYo=r(Kct,"AutoModelForObjectDetection"),Kct.forEach(t),nqe.forEach(t),tPe=i(f),Wo=n(f,"DIV",{class:!0});var ol=s(Wo);T(Iy.$$.fragment,ol),SYo=i(ol),Fd=n(ol,"P",{});var JY=s(Fd);RYo=r(JY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),XV=n(JY,"A",{href:!0});var Zct=s(XV);BYo=r(Zct,"from_pretrained()"),Zct.forEach(t),PYo=r(JY," class method or the "),zV=n(JY,"A",{href:!0});var eft=s(zV);IYo=r(eft,"from_config()"),eft.forEach(t),qYo=r(JY,` class
method.`),JY.forEach(t),NYo=i(ol),qy=n(ol,"P",{});var sqe=s(qy);jYo=r(sqe,"This class cannot be instantiated directly using "),Ape=n(sqe,"CODE",{});var oft=s(Ape);DYo=r(oft,"__init__()"),oft.forEach(t),GYo=r(sqe," (throws an error)."),sqe.forEach(t),OYo=i(ol),vt=n(ol,"DIV",{class:!0});var mw=s(vt);T(Ny.$$.fragment,mw),VYo=i(mw),ype=n(mw,"P",{});var rft=s(ype);XYo=r(rft,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),rft.forEach(t),zYo=i(mw),Td=n(mw,"P",{});var YY=s(Td);QYo=r(YY,`Note:
Loading a model from its configuration file does `),Lpe=n(YY,"STRONG",{});var tft=s(Lpe);WYo=r(tft,"not"),tft.forEach(t),HYo=r(YY,` load the model weights. It only affects the
model\u2019s configuration. Use `),QV=n(YY,"A",{href:!0});var aft=s(QV);UYo=r(aft,"from_pretrained()"),aft.forEach(t),JYo=r(YY," to load the model weights."),YY.forEach(t),YYo=i(mw),T(Pv.$$.fragment,mw),mw.forEach(t),KYo=i(ol),ho=n(ol,"DIV",{class:!0});var pa=s(ho);T(jy.$$.fragment,pa),ZYo=i(pa),xpe=n(pa,"P",{});var nft=s(xpe);eKo=r(nft,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),nft.forEach(t),oKo=i(pa),Xa=n(pa,"P",{});var gw=s(Xa);rKo=r(gw,"The model class to instantiate is selected based on the "),$pe=n(gw,"CODE",{});var sft=s($pe);tKo=r(sft,"model_type"),sft.forEach(t),aKo=r(gw,` property of the config object (either
passed as an argument or loaded from `),kpe=n(gw,"CODE",{});var lft=s(kpe);nKo=r(lft,"pretrained_model_name_or_path"),lft.forEach(t),sKo=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Spe=n(gw,"CODE",{});var ift=s(Spe);lKo=r(ift,"pretrained_model_name_or_path"),ift.forEach(t),iKo=r(gw,":"),gw.forEach(t),dKo=i(pa),Dy=n(pa,"UL",{});var lqe=s(Dy);Iv=n(lqe,"LI",{});var uxe=s(Iv);Rpe=n(uxe,"STRONG",{});var dft=s(Rpe);cKo=r(dft,"detr"),dft.forEach(t),fKo=r(uxe," \u2014 "),WV=n(uxe,"A",{href:!0});var cft=s(WV);mKo=r(cft,"DetrForObjectDetection"),cft.forEach(t),gKo=r(uxe," (DETR model)"),uxe.forEach(t),hKo=i(lqe),qv=n(lqe,"LI",{});var _xe=s(qv);Bpe=n(_xe,"STRONG",{});var fft=s(Bpe);pKo=r(fft,"yolos"),fft.forEach(t),uKo=r(_xe," \u2014 "),HV=n(_xe,"A",{href:!0});var mft=s(HV);_Ko=r(mft,"YolosForObjectDetection"),mft.forEach(t),bKo=r(_xe," (YOLOS model)"),_xe.forEach(t),lqe.forEach(t),vKo=i(pa),Nv=n(pa,"P",{});var bxe=s(Nv);FKo=r(bxe,"The model is set in evaluation mode by default using "),Ppe=n(bxe,"CODE",{});var gft=s(Ppe);TKo=r(gft,"model.eval()"),gft.forEach(t),MKo=r(bxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ipe=n(bxe,"CODE",{});var hft=s(Ipe);EKo=r(hft,"model.train()"),hft.forEach(t),bxe.forEach(t),CKo=i(pa),T(jv.$$.fragment,pa),pa.forEach(t),ol.forEach(t),aPe=i(f),Md=n(f,"H2",{class:!0});var iqe=s(Md);Dv=n(iqe,"A",{id:!0,class:!0,href:!0});var pft=s(Dv);qpe=n(pft,"SPAN",{});var uft=s(qpe);T(Gy.$$.fragment,uft),uft.forEach(t),pft.forEach(t),wKo=i(iqe),Npe=n(iqe,"SPAN",{});var _ft=s(Npe);AKo=r(_ft,"AutoModelForImageSegmentation"),_ft.forEach(t),iqe.forEach(t),nPe=i(f),Ho=n(f,"DIV",{class:!0});var rl=s(Ho);T(Oy.$$.fragment,rl),yKo=i(rl),Ed=n(rl,"P",{});var KY=s(Ed);LKo=r(KY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),UV=n(KY,"A",{href:!0});var bft=s(UV);xKo=r(bft,"from_pretrained()"),bft.forEach(t),$Ko=r(KY," class method or the "),JV=n(KY,"A",{href:!0});var vft=s(JV);kKo=r(vft,"from_config()"),vft.forEach(t),SKo=r(KY,` class
method.`),KY.forEach(t),RKo=i(rl),Vy=n(rl,"P",{});var dqe=s(Vy);BKo=r(dqe,"This class cannot be instantiated directly using "),jpe=n(dqe,"CODE",{});var Fft=s(jpe);PKo=r(Fft,"__init__()"),Fft.forEach(t),IKo=r(dqe," (throws an error)."),dqe.forEach(t),qKo=i(rl),Ft=n(rl,"DIV",{class:!0});var hw=s(Ft);T(Xy.$$.fragment,hw),NKo=i(hw),Dpe=n(hw,"P",{});var Tft=s(Dpe);jKo=r(Tft,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Tft.forEach(t),DKo=i(hw),Cd=n(hw,"P",{});var ZY=s(Cd);GKo=r(ZY,`Note:
Loading a model from its configuration file does `),Gpe=n(ZY,"STRONG",{});var Mft=s(Gpe);OKo=r(Mft,"not"),Mft.forEach(t),VKo=r(ZY,` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=n(ZY,"A",{href:!0});var Eft=s(YV);XKo=r(Eft,"from_pretrained()"),Eft.forEach(t),zKo=r(ZY," to load the model weights."),ZY.forEach(t),QKo=i(hw),T(Gv.$$.fragment,hw),hw.forEach(t),WKo=i(rl),po=n(rl,"DIV",{class:!0});var ua=s(po);T(zy.$$.fragment,ua),HKo=i(ua),Ope=n(ua,"P",{});var Cft=s(Ope);UKo=r(Cft,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Cft.forEach(t),JKo=i(ua),za=n(ua,"P",{});var pw=s(za);YKo=r(pw,"The model class to instantiate is selected based on the "),Vpe=n(pw,"CODE",{});var wft=s(Vpe);KKo=r(wft,"model_type"),wft.forEach(t),ZKo=r(pw,` property of the config object (either
passed as an argument or loaded from `),Xpe=n(pw,"CODE",{});var Aft=s(Xpe);eZo=r(Aft,"pretrained_model_name_or_path"),Aft.forEach(t),oZo=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zpe=n(pw,"CODE",{});var yft=s(zpe);rZo=r(yft,"pretrained_model_name_or_path"),yft.forEach(t),tZo=r(pw,":"),pw.forEach(t),aZo=i(ua),Qpe=n(ua,"UL",{});var Lft=s(Qpe);Ov=n(Lft,"LI",{});var vxe=s(Ov);Wpe=n(vxe,"STRONG",{});var xft=s(Wpe);nZo=r(xft,"detr"),xft.forEach(t),sZo=r(vxe," \u2014 "),KV=n(vxe,"A",{href:!0});var $ft=s(KV);lZo=r($ft,"DetrForSegmentation"),$ft.forEach(t),iZo=r(vxe," (DETR model)"),vxe.forEach(t),Lft.forEach(t),dZo=i(ua),Vv=n(ua,"P",{});var Fxe=s(Vv);cZo=r(Fxe,"The model is set in evaluation mode by default using "),Hpe=n(Fxe,"CODE",{});var kft=s(Hpe);fZo=r(kft,"model.eval()"),kft.forEach(t),mZo=r(Fxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Upe=n(Fxe,"CODE",{});var Sft=s(Upe);gZo=r(Sft,"model.train()"),Sft.forEach(t),Fxe.forEach(t),hZo=i(ua),T(Xv.$$.fragment,ua),ua.forEach(t),rl.forEach(t),sPe=i(f),wd=n(f,"H2",{class:!0});var cqe=s(wd);zv=n(cqe,"A",{id:!0,class:!0,href:!0});var Rft=s(zv);Jpe=n(Rft,"SPAN",{});var Bft=s(Jpe);T(Qy.$$.fragment,Bft),Bft.forEach(t),Rft.forEach(t),pZo=i(cqe),Ype=n(cqe,"SPAN",{});var Pft=s(Ype);uZo=r(Pft,"AutoModelForSemanticSegmentation"),Pft.forEach(t),cqe.forEach(t),lPe=i(f),Uo=n(f,"DIV",{class:!0});var tl=s(Uo);T(Wy.$$.fragment,tl),_Zo=i(tl),Ad=n(tl,"P",{});var eK=s(Ad);bZo=r(eK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ZV=n(eK,"A",{href:!0});var Ift=s(ZV);vZo=r(Ift,"from_pretrained()"),Ift.forEach(t),FZo=r(eK," class method or the "),eX=n(eK,"A",{href:!0});var qft=s(eX);TZo=r(qft,"from_config()"),qft.forEach(t),MZo=r(eK,` class
method.`),eK.forEach(t),EZo=i(tl),Hy=n(tl,"P",{});var fqe=s(Hy);CZo=r(fqe,"This class cannot be instantiated directly using "),Kpe=n(fqe,"CODE",{});var Nft=s(Kpe);wZo=r(Nft,"__init__()"),Nft.forEach(t),AZo=r(fqe," (throws an error)."),fqe.forEach(t),yZo=i(tl),Tt=n(tl,"DIV",{class:!0});var uw=s(Tt);T(Uy.$$.fragment,uw),LZo=i(uw),Zpe=n(uw,"P",{});var jft=s(Zpe);xZo=r(jft,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),jft.forEach(t),$Zo=i(uw),yd=n(uw,"P",{});var oK=s(yd);kZo=r(oK,`Note:
Loading a model from its configuration file does `),eue=n(oK,"STRONG",{});var Dft=s(eue);SZo=r(Dft,"not"),Dft.forEach(t),RZo=r(oK,` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=n(oK,"A",{href:!0});var Gft=s(oX);BZo=r(Gft,"from_pretrained()"),Gft.forEach(t),PZo=r(oK," to load the model weights."),oK.forEach(t),IZo=i(uw),T(Qv.$$.fragment,uw),uw.forEach(t),qZo=i(tl),uo=n(tl,"DIV",{class:!0});var _a=s(uo);T(Jy.$$.fragment,_a),NZo=i(_a),oue=n(_a,"P",{});var Oft=s(oue);jZo=r(Oft,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Oft.forEach(t),DZo=i(_a),Qa=n(_a,"P",{});var _w=s(Qa);GZo=r(_w,"The model class to instantiate is selected based on the "),rue=n(_w,"CODE",{});var Vft=s(rue);OZo=r(Vft,"model_type"),Vft.forEach(t),VZo=r(_w,` property of the config object (either
passed as an argument or loaded from `),tue=n(_w,"CODE",{});var Xft=s(tue);XZo=r(Xft,"pretrained_model_name_or_path"),Xft.forEach(t),zZo=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aue=n(_w,"CODE",{});var zft=s(aue);QZo=r(zft,"pretrained_model_name_or_path"),zft.forEach(t),WZo=r(_w,":"),_w.forEach(t),HZo=i(_a),Wa=n(_a,"UL",{});var bw=s(Wa);Wv=n(bw,"LI",{});var Txe=s(Wv);nue=n(Txe,"STRONG",{});var Qft=s(nue);UZo=r(Qft,"beit"),Qft.forEach(t),JZo=r(Txe," \u2014 "),rX=n(Txe,"A",{href:!0});var Wft=s(rX);YZo=r(Wft,"BeitForSemanticSegmentation"),Wft.forEach(t),KZo=r(Txe," (BEiT model)"),Txe.forEach(t),ZZo=i(bw),Hv=n(bw,"LI",{});var Mxe=s(Hv);sue=n(Mxe,"STRONG",{});var Hft=s(sue);eer=r(Hft,"data2vec-vision"),Hft.forEach(t),oer=r(Mxe," \u2014 "),tX=n(Mxe,"A",{href:!0});var Uft=s(tX);rer=r(Uft,"Data2VecVisionForSemanticSegmentation"),Uft.forEach(t),ter=r(Mxe," (Data2VecVision model)"),Mxe.forEach(t),aer=i(bw),Uv=n(bw,"LI",{});var Exe=s(Uv);lue=n(Exe,"STRONG",{});var Jft=s(lue);ner=r(Jft,"dpt"),Jft.forEach(t),ser=r(Exe," \u2014 "),aX=n(Exe,"A",{href:!0});var Yft=s(aX);ler=r(Yft,"DPTForSemanticSegmentation"),Yft.forEach(t),ier=r(Exe," (DPT model)"),Exe.forEach(t),der=i(bw),Jv=n(bw,"LI",{});var Cxe=s(Jv);iue=n(Cxe,"STRONG",{});var Kft=s(iue);cer=r(Kft,"segformer"),Kft.forEach(t),fer=r(Cxe," \u2014 "),nX=n(Cxe,"A",{href:!0});var Zft=s(nX);mer=r(Zft,"SegformerForSemanticSegmentation"),Zft.forEach(t),ger=r(Cxe," (SegFormer model)"),Cxe.forEach(t),bw.forEach(t),her=i(_a),Yv=n(_a,"P",{});var wxe=s(Yv);per=r(wxe,"The model is set in evaluation mode by default using "),due=n(wxe,"CODE",{});var emt=s(due);uer=r(emt,"model.eval()"),emt.forEach(t),_er=r(wxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=n(wxe,"CODE",{});var omt=s(cue);ber=r(omt,"model.train()"),omt.forEach(t),wxe.forEach(t),ver=i(_a),T(Kv.$$.fragment,_a),_a.forEach(t),tl.forEach(t),iPe=i(f),Ld=n(f,"H2",{class:!0});var mqe=s(Ld);Zv=n(mqe,"A",{id:!0,class:!0,href:!0});var rmt=s(Zv);fue=n(rmt,"SPAN",{});var tmt=s(fue);T(Yy.$$.fragment,tmt),tmt.forEach(t),rmt.forEach(t),Fer=i(mqe),mue=n(mqe,"SPAN",{});var amt=s(mue);Ter=r(amt,"AutoModelForInstanceSegmentation"),amt.forEach(t),mqe.forEach(t),dPe=i(f),Jo=n(f,"DIV",{class:!0});var al=s(Jo);T(Ky.$$.fragment,al),Mer=i(al),xd=n(al,"P",{});var rK=s(xd);Eer=r(rK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),sX=n(rK,"A",{href:!0});var nmt=s(sX);Cer=r(nmt,"from_pretrained()"),nmt.forEach(t),wer=r(rK," class method or the "),lX=n(rK,"A",{href:!0});var smt=s(lX);Aer=r(smt,"from_config()"),smt.forEach(t),yer=r(rK,` class
method.`),rK.forEach(t),Ler=i(al),Zy=n(al,"P",{});var gqe=s(Zy);xer=r(gqe,"This class cannot be instantiated directly using "),gue=n(gqe,"CODE",{});var lmt=s(gue);$er=r(lmt,"__init__()"),lmt.forEach(t),ker=r(gqe," (throws an error)."),gqe.forEach(t),Ser=i(al),Mt=n(al,"DIV",{class:!0});var vw=s(Mt);T(eL.$$.fragment,vw),Rer=i(vw),hue=n(vw,"P",{});var imt=s(hue);Ber=r(imt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),imt.forEach(t),Per=i(vw),$d=n(vw,"P",{});var tK=s($d);Ier=r(tK,`Note:
Loading a model from its configuration file does `),pue=n(tK,"STRONG",{});var dmt=s(pue);qer=r(dmt,"not"),dmt.forEach(t),Ner=r(tK,` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=n(tK,"A",{href:!0});var cmt=s(iX);jer=r(cmt,"from_pretrained()"),cmt.forEach(t),Der=r(tK," to load the model weights."),tK.forEach(t),Ger=i(vw),T(eF.$$.fragment,vw),vw.forEach(t),Oer=i(al),_o=n(al,"DIV",{class:!0});var ba=s(_o);T(oL.$$.fragment,ba),Ver=i(ba),uue=n(ba,"P",{});var fmt=s(uue);Xer=r(fmt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),fmt.forEach(t),zer=i(ba),Ha=n(ba,"P",{});var Fw=s(Ha);Qer=r(Fw,"The model class to instantiate is selected based on the "),_ue=n(Fw,"CODE",{});var mmt=s(_ue);Wer=r(mmt,"model_type"),mmt.forEach(t),Her=r(Fw,` property of the config object (either
passed as an argument or loaded from `),bue=n(Fw,"CODE",{});var gmt=s(bue);Uer=r(gmt,"pretrained_model_name_or_path"),gmt.forEach(t),Jer=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=n(Fw,"CODE",{});var hmt=s(vue);Yer=r(hmt,"pretrained_model_name_or_path"),hmt.forEach(t),Ker=r(Fw,":"),Fw.forEach(t),Zer=i(ba),Fue=n(ba,"UL",{});var pmt=s(Fue);oF=n(pmt,"LI",{});var Axe=s(oF);Tue=n(Axe,"STRONG",{});var umt=s(Tue);eor=r(umt,"maskformer"),umt.forEach(t),oor=r(Axe," \u2014 "),dX=n(Axe,"A",{href:!0});var _mt=s(dX);ror=r(_mt,"MaskFormerForInstanceSegmentation"),_mt.forEach(t),tor=r(Axe," (MaskFormer model)"),Axe.forEach(t),pmt.forEach(t),aor=i(ba),rF=n(ba,"P",{});var yxe=s(rF);nor=r(yxe,"The model is set in evaluation mode by default using "),Mue=n(yxe,"CODE",{});var bmt=s(Mue);sor=r(bmt,"model.eval()"),bmt.forEach(t),lor=r(yxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eue=n(yxe,"CODE",{});var vmt=s(Eue);ior=r(vmt,"model.train()"),vmt.forEach(t),yxe.forEach(t),dor=i(ba),T(tF.$$.fragment,ba),ba.forEach(t),al.forEach(t),cPe=i(f),kd=n(f,"H2",{class:!0});var hqe=s(kd);aF=n(hqe,"A",{id:!0,class:!0,href:!0});var Fmt=s(aF);Cue=n(Fmt,"SPAN",{});var Tmt=s(Cue);T(rL.$$.fragment,Tmt),Tmt.forEach(t),Fmt.forEach(t),cor=i(hqe),wue=n(hqe,"SPAN",{});var Mmt=s(wue);mor=r(Mmt,"TFAutoModel"),Mmt.forEach(t),hqe.forEach(t),fPe=i(f),Yo=n(f,"DIV",{class:!0});var nl=s(Yo);T(tL.$$.fragment,nl),gor=i(nl),Sd=n(nl,"P",{});var aK=s(Sd);hor=r(aK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cX=n(aK,"A",{href:!0});var Emt=s(cX);por=r(Emt,"from_pretrained()"),Emt.forEach(t),uor=r(aK," class method or the "),fX=n(aK,"A",{href:!0});var Cmt=s(fX);_or=r(Cmt,"from_config()"),Cmt.forEach(t),bor=r(aK,` class
method.`),aK.forEach(t),vor=i(nl),aL=n(nl,"P",{});var pqe=s(aL);For=r(pqe,"This class cannot be instantiated directly using "),Aue=n(pqe,"CODE",{});var wmt=s(Aue);Tor=r(wmt,"__init__()"),wmt.forEach(t),Mor=r(pqe," (throws an error)."),pqe.forEach(t),Eor=i(nl),Et=n(nl,"DIV",{class:!0});var Tw=s(Et);T(nL.$$.fragment,Tw),Cor=i(Tw),yue=n(Tw,"P",{});var Amt=s(yue);wor=r(Amt,"Instantiates one of the base model classes of the library from a configuration."),Amt.forEach(t),Aor=i(Tw),Rd=n(Tw,"P",{});var nK=s(Rd);yor=r(nK,`Note:
Loading a model from its configuration file does `),Lue=n(nK,"STRONG",{});var ymt=s(Lue);Lor=r(ymt,"not"),ymt.forEach(t),xor=r(nK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=n(nK,"A",{href:!0});var Lmt=s(mX);$or=r(Lmt,"from_pretrained()"),Lmt.forEach(t),kor=r(nK," to load the model weights."),nK.forEach(t),Sor=i(Tw),T(nF.$$.fragment,Tw),Tw.forEach(t),Ror=i(nl),Cr=n(nl,"DIV",{class:!0});var sl=s(Cr);T(sL.$$.fragment,sl),Bor=i(sl),xue=n(sl,"P",{});var xmt=s(xue);Por=r(xmt,"Instantiate one of the base model classes of the library from a pretrained model."),xmt.forEach(t),Ior=i(sl),Ua=n(sl,"P",{});var Mw=s(Ua);qor=r(Mw,"The model class to instantiate is selected based on the "),$ue=n(Mw,"CODE",{});var $mt=s($ue);Nor=r($mt,"model_type"),$mt.forEach(t),jor=r(Mw,` property of the config object (either
passed as an argument or loaded from `),kue=n(Mw,"CODE",{});var kmt=s(kue);Dor=r(kmt,"pretrained_model_name_or_path"),kmt.forEach(t),Gor=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sue=n(Mw,"CODE",{});var Smt=s(Sue);Oor=r(Smt,"pretrained_model_name_or_path"),Smt.forEach(t),Vor=r(Mw,":"),Mw.forEach(t),Xor=i(sl),j=n(sl,"UL",{});var D=s(j);sF=n(D,"LI",{});var Lxe=s(sF);Rue=n(Lxe,"STRONG",{});var Rmt=s(Rue);zor=r(Rmt,"albert"),Rmt.forEach(t),Qor=r(Lxe," \u2014 "),gX=n(Lxe,"A",{href:!0});var Bmt=s(gX);Wor=r(Bmt,"TFAlbertModel"),Bmt.forEach(t),Hor=r(Lxe," (ALBERT model)"),Lxe.forEach(t),Uor=i(D),lF=n(D,"LI",{});var xxe=s(lF);Bue=n(xxe,"STRONG",{});var Pmt=s(Bue);Jor=r(Pmt,"bart"),Pmt.forEach(t),Yor=r(xxe," \u2014 "),hX=n(xxe,"A",{href:!0});var Imt=s(hX);Kor=r(Imt,"TFBartModel"),Imt.forEach(t),Zor=r(xxe," (BART model)"),xxe.forEach(t),err=i(D),iF=n(D,"LI",{});var $xe=s(iF);Pue=n($xe,"STRONG",{});var qmt=s(Pue);orr=r(qmt,"bert"),qmt.forEach(t),rrr=r($xe," \u2014 "),pX=n($xe,"A",{href:!0});var Nmt=s(pX);trr=r(Nmt,"TFBertModel"),Nmt.forEach(t),arr=r($xe," (BERT model)"),$xe.forEach(t),nrr=i(D),dF=n(D,"LI",{});var kxe=s(dF);Iue=n(kxe,"STRONG",{});var jmt=s(Iue);srr=r(jmt,"blenderbot"),jmt.forEach(t),lrr=r(kxe," \u2014 "),uX=n(kxe,"A",{href:!0});var Dmt=s(uX);irr=r(Dmt,"TFBlenderbotModel"),Dmt.forEach(t),drr=r(kxe," (Blenderbot model)"),kxe.forEach(t),crr=i(D),cF=n(D,"LI",{});var Sxe=s(cF);que=n(Sxe,"STRONG",{});var Gmt=s(que);frr=r(Gmt,"blenderbot-small"),Gmt.forEach(t),mrr=r(Sxe," \u2014 "),_X=n(Sxe,"A",{href:!0});var Omt=s(_X);grr=r(Omt,"TFBlenderbotSmallModel"),Omt.forEach(t),hrr=r(Sxe," (BlenderbotSmall model)"),Sxe.forEach(t),prr=i(D),fF=n(D,"LI",{});var Rxe=s(fF);Nue=n(Rxe,"STRONG",{});var Vmt=s(Nue);urr=r(Vmt,"camembert"),Vmt.forEach(t),_rr=r(Rxe," \u2014 "),bX=n(Rxe,"A",{href:!0});var Xmt=s(bX);brr=r(Xmt,"TFCamembertModel"),Xmt.forEach(t),vrr=r(Rxe," (CamemBERT model)"),Rxe.forEach(t),Frr=i(D),mF=n(D,"LI",{});var Bxe=s(mF);jue=n(Bxe,"STRONG",{});var zmt=s(jue);Trr=r(zmt,"clip"),zmt.forEach(t),Mrr=r(Bxe," \u2014 "),vX=n(Bxe,"A",{href:!0});var Qmt=s(vX);Err=r(Qmt,"TFCLIPModel"),Qmt.forEach(t),Crr=r(Bxe," (CLIP model)"),Bxe.forEach(t),wrr=i(D),gF=n(D,"LI",{});var Pxe=s(gF);Due=n(Pxe,"STRONG",{});var Wmt=s(Due);Arr=r(Wmt,"convbert"),Wmt.forEach(t),yrr=r(Pxe," \u2014 "),FX=n(Pxe,"A",{href:!0});var Hmt=s(FX);Lrr=r(Hmt,"TFConvBertModel"),Hmt.forEach(t),xrr=r(Pxe," (ConvBERT model)"),Pxe.forEach(t),$rr=i(D),hF=n(D,"LI",{});var Ixe=s(hF);Gue=n(Ixe,"STRONG",{});var Umt=s(Gue);krr=r(Umt,"convnext"),Umt.forEach(t),Srr=r(Ixe," \u2014 "),TX=n(Ixe,"A",{href:!0});var Jmt=s(TX);Rrr=r(Jmt,"TFConvNextModel"),Jmt.forEach(t),Brr=r(Ixe," (ConvNext model)"),Ixe.forEach(t),Prr=i(D),pF=n(D,"LI",{});var qxe=s(pF);Oue=n(qxe,"STRONG",{});var Ymt=s(Oue);Irr=r(Ymt,"ctrl"),Ymt.forEach(t),qrr=r(qxe," \u2014 "),MX=n(qxe,"A",{href:!0});var Kmt=s(MX);Nrr=r(Kmt,"TFCTRLModel"),Kmt.forEach(t),jrr=r(qxe," (CTRL model)"),qxe.forEach(t),Drr=i(D),uF=n(D,"LI",{});var Nxe=s(uF);Vue=n(Nxe,"STRONG",{});var Zmt=s(Vue);Grr=r(Zmt,"deberta"),Zmt.forEach(t),Orr=r(Nxe," \u2014 "),EX=n(Nxe,"A",{href:!0});var egt=s(EX);Vrr=r(egt,"TFDebertaModel"),egt.forEach(t),Xrr=r(Nxe," (DeBERTa model)"),Nxe.forEach(t),zrr=i(D),_F=n(D,"LI",{});var jxe=s(_F);Xue=n(jxe,"STRONG",{});var ogt=s(Xue);Qrr=r(ogt,"deberta-v2"),ogt.forEach(t),Wrr=r(jxe," \u2014 "),CX=n(jxe,"A",{href:!0});var rgt=s(CX);Hrr=r(rgt,"TFDebertaV2Model"),rgt.forEach(t),Urr=r(jxe," (DeBERTa-v2 model)"),jxe.forEach(t),Jrr=i(D),bF=n(D,"LI",{});var Dxe=s(bF);zue=n(Dxe,"STRONG",{});var tgt=s(zue);Yrr=r(tgt,"distilbert"),tgt.forEach(t),Krr=r(Dxe," \u2014 "),wX=n(Dxe,"A",{href:!0});var agt=s(wX);Zrr=r(agt,"TFDistilBertModel"),agt.forEach(t),etr=r(Dxe," (DistilBERT model)"),Dxe.forEach(t),otr=i(D),vF=n(D,"LI",{});var Gxe=s(vF);Que=n(Gxe,"STRONG",{});var ngt=s(Que);rtr=r(ngt,"dpr"),ngt.forEach(t),ttr=r(Gxe," \u2014 "),AX=n(Gxe,"A",{href:!0});var sgt=s(AX);atr=r(sgt,"TFDPRQuestionEncoder"),sgt.forEach(t),ntr=r(Gxe," (DPR model)"),Gxe.forEach(t),str=i(D),FF=n(D,"LI",{});var Oxe=s(FF);Wue=n(Oxe,"STRONG",{});var lgt=s(Wue);ltr=r(lgt,"electra"),lgt.forEach(t),itr=r(Oxe," \u2014 "),yX=n(Oxe,"A",{href:!0});var igt=s(yX);dtr=r(igt,"TFElectraModel"),igt.forEach(t),ctr=r(Oxe," (ELECTRA model)"),Oxe.forEach(t),ftr=i(D),TF=n(D,"LI",{});var Vxe=s(TF);Hue=n(Vxe,"STRONG",{});var dgt=s(Hue);mtr=r(dgt,"flaubert"),dgt.forEach(t),gtr=r(Vxe," \u2014 "),LX=n(Vxe,"A",{href:!0});var cgt=s(LX);htr=r(cgt,"TFFlaubertModel"),cgt.forEach(t),ptr=r(Vxe," (FlauBERT model)"),Vxe.forEach(t),utr=i(D),$s=n(D,"LI",{});var S9=s($s);Uue=n(S9,"STRONG",{});var fgt=s(Uue);_tr=r(fgt,"funnel"),fgt.forEach(t),btr=r(S9," \u2014 "),xX=n(S9,"A",{href:!0});var mgt=s(xX);vtr=r(mgt,"TFFunnelModel"),mgt.forEach(t),Ftr=r(S9," or "),$X=n(S9,"A",{href:!0});var ggt=s($X);Ttr=r(ggt,"TFFunnelBaseModel"),ggt.forEach(t),Mtr=r(S9," (Funnel Transformer model)"),S9.forEach(t),Etr=i(D),MF=n(D,"LI",{});var Xxe=s(MF);Jue=n(Xxe,"STRONG",{});var hgt=s(Jue);Ctr=r(hgt,"gpt2"),hgt.forEach(t),wtr=r(Xxe," \u2014 "),kX=n(Xxe,"A",{href:!0});var pgt=s(kX);Atr=r(pgt,"TFGPT2Model"),pgt.forEach(t),ytr=r(Xxe," (OpenAI GPT-2 model)"),Xxe.forEach(t),Ltr=i(D),EF=n(D,"LI",{});var zxe=s(EF);Yue=n(zxe,"STRONG",{});var ugt=s(Yue);xtr=r(ugt,"gptj"),ugt.forEach(t),$tr=r(zxe," \u2014 "),SX=n(zxe,"A",{href:!0});var _gt=s(SX);ktr=r(_gt,"TFGPTJModel"),_gt.forEach(t),Str=r(zxe," (GPT-J model)"),zxe.forEach(t),Rtr=i(D),CF=n(D,"LI",{});var Qxe=s(CF);Kue=n(Qxe,"STRONG",{});var bgt=s(Kue);Btr=r(bgt,"hubert"),bgt.forEach(t),Ptr=r(Qxe," \u2014 "),RX=n(Qxe,"A",{href:!0});var vgt=s(RX);Itr=r(vgt,"TFHubertModel"),vgt.forEach(t),qtr=r(Qxe," (Hubert model)"),Qxe.forEach(t),Ntr=i(D),wF=n(D,"LI",{});var Wxe=s(wF);Zue=n(Wxe,"STRONG",{});var Fgt=s(Zue);jtr=r(Fgt,"layoutlm"),Fgt.forEach(t),Dtr=r(Wxe," \u2014 "),BX=n(Wxe,"A",{href:!0});var Tgt=s(BX);Gtr=r(Tgt,"TFLayoutLMModel"),Tgt.forEach(t),Otr=r(Wxe," (LayoutLM model)"),Wxe.forEach(t),Vtr=i(D),AF=n(D,"LI",{});var Hxe=s(AF);e_e=n(Hxe,"STRONG",{});var Mgt=s(e_e);Xtr=r(Mgt,"led"),Mgt.forEach(t),ztr=r(Hxe," \u2014 "),PX=n(Hxe,"A",{href:!0});var Egt=s(PX);Qtr=r(Egt,"TFLEDModel"),Egt.forEach(t),Wtr=r(Hxe," (LED model)"),Hxe.forEach(t),Htr=i(D),yF=n(D,"LI",{});var Uxe=s(yF);o_e=n(Uxe,"STRONG",{});var Cgt=s(o_e);Utr=r(Cgt,"longformer"),Cgt.forEach(t),Jtr=r(Uxe," \u2014 "),IX=n(Uxe,"A",{href:!0});var wgt=s(IX);Ytr=r(wgt,"TFLongformerModel"),wgt.forEach(t),Ktr=r(Uxe," (Longformer model)"),Uxe.forEach(t),Ztr=i(D),LF=n(D,"LI",{});var Jxe=s(LF);r_e=n(Jxe,"STRONG",{});var Agt=s(r_e);ear=r(Agt,"lxmert"),Agt.forEach(t),oar=r(Jxe," \u2014 "),qX=n(Jxe,"A",{href:!0});var ygt=s(qX);rar=r(ygt,"TFLxmertModel"),ygt.forEach(t),tar=r(Jxe," (LXMERT model)"),Jxe.forEach(t),aar=i(D),xF=n(D,"LI",{});var Yxe=s(xF);t_e=n(Yxe,"STRONG",{});var Lgt=s(t_e);nar=r(Lgt,"marian"),Lgt.forEach(t),sar=r(Yxe," \u2014 "),NX=n(Yxe,"A",{href:!0});var xgt=s(NX);lar=r(xgt,"TFMarianModel"),xgt.forEach(t),iar=r(Yxe," (Marian model)"),Yxe.forEach(t),dar=i(D),$F=n(D,"LI",{});var Kxe=s($F);a_e=n(Kxe,"STRONG",{});var $gt=s(a_e);car=r($gt,"mbart"),$gt.forEach(t),far=r(Kxe," \u2014 "),jX=n(Kxe,"A",{href:!0});var kgt=s(jX);mar=r(kgt,"TFMBartModel"),kgt.forEach(t),gar=r(Kxe," (mBART model)"),Kxe.forEach(t),har=i(D),kF=n(D,"LI",{});var Zxe=s(kF);n_e=n(Zxe,"STRONG",{});var Sgt=s(n_e);par=r(Sgt,"mobilebert"),Sgt.forEach(t),uar=r(Zxe," \u2014 "),DX=n(Zxe,"A",{href:!0});var Rgt=s(DX);_ar=r(Rgt,"TFMobileBertModel"),Rgt.forEach(t),bar=r(Zxe," (MobileBERT model)"),Zxe.forEach(t),Far=i(D),SF=n(D,"LI",{});var e9e=s(SF);s_e=n(e9e,"STRONG",{});var Bgt=s(s_e);Tar=r(Bgt,"mpnet"),Bgt.forEach(t),Mar=r(e9e," \u2014 "),GX=n(e9e,"A",{href:!0});var Pgt=s(GX);Ear=r(Pgt,"TFMPNetModel"),Pgt.forEach(t),Car=r(e9e," (MPNet model)"),e9e.forEach(t),war=i(D),RF=n(D,"LI",{});var o9e=s(RF);l_e=n(o9e,"STRONG",{});var Igt=s(l_e);Aar=r(Igt,"mt5"),Igt.forEach(t),yar=r(o9e," \u2014 "),OX=n(o9e,"A",{href:!0});var qgt=s(OX);Lar=r(qgt,"TFMT5Model"),qgt.forEach(t),xar=r(o9e," (mT5 model)"),o9e.forEach(t),$ar=i(D),BF=n(D,"LI",{});var r9e=s(BF);i_e=n(r9e,"STRONG",{});var Ngt=s(i_e);kar=r(Ngt,"openai-gpt"),Ngt.forEach(t),Sar=r(r9e," \u2014 "),VX=n(r9e,"A",{href:!0});var jgt=s(VX);Rar=r(jgt,"TFOpenAIGPTModel"),jgt.forEach(t),Bar=r(r9e," (OpenAI GPT model)"),r9e.forEach(t),Par=i(D),PF=n(D,"LI",{});var t9e=s(PF);d_e=n(t9e,"STRONG",{});var Dgt=s(d_e);Iar=r(Dgt,"pegasus"),Dgt.forEach(t),qar=r(t9e," \u2014 "),XX=n(t9e,"A",{href:!0});var Ggt=s(XX);Nar=r(Ggt,"TFPegasusModel"),Ggt.forEach(t),jar=r(t9e," (Pegasus model)"),t9e.forEach(t),Dar=i(D),IF=n(D,"LI",{});var a9e=s(IF);c_e=n(a9e,"STRONG",{});var Ogt=s(c_e);Gar=r(Ogt,"rembert"),Ogt.forEach(t),Oar=r(a9e," \u2014 "),zX=n(a9e,"A",{href:!0});var Vgt=s(zX);Var=r(Vgt,"TFRemBertModel"),Vgt.forEach(t),Xar=r(a9e," (RemBERT model)"),a9e.forEach(t),zar=i(D),qF=n(D,"LI",{});var n9e=s(qF);f_e=n(n9e,"STRONG",{});var Xgt=s(f_e);Qar=r(Xgt,"roberta"),Xgt.forEach(t),War=r(n9e," \u2014 "),QX=n(n9e,"A",{href:!0});var zgt=s(QX);Har=r(zgt,"TFRobertaModel"),zgt.forEach(t),Uar=r(n9e," (RoBERTa model)"),n9e.forEach(t),Jar=i(D),NF=n(D,"LI",{});var s9e=s(NF);m_e=n(s9e,"STRONG",{});var Qgt=s(m_e);Yar=r(Qgt,"roformer"),Qgt.forEach(t),Kar=r(s9e," \u2014 "),WX=n(s9e,"A",{href:!0});var Wgt=s(WX);Zar=r(Wgt,"TFRoFormerModel"),Wgt.forEach(t),enr=r(s9e," (RoFormer model)"),s9e.forEach(t),onr=i(D),jF=n(D,"LI",{});var l9e=s(jF);g_e=n(l9e,"STRONG",{});var Hgt=s(g_e);rnr=r(Hgt,"speech_to_text"),Hgt.forEach(t),tnr=r(l9e," \u2014 "),HX=n(l9e,"A",{href:!0});var Ugt=s(HX);anr=r(Ugt,"TFSpeech2TextModel"),Ugt.forEach(t),nnr=r(l9e," (Speech2Text model)"),l9e.forEach(t),snr=i(D),DF=n(D,"LI",{});var i9e=s(DF);h_e=n(i9e,"STRONG",{});var Jgt=s(h_e);lnr=r(Jgt,"t5"),Jgt.forEach(t),inr=r(i9e," \u2014 "),UX=n(i9e,"A",{href:!0});var Ygt=s(UX);dnr=r(Ygt,"TFT5Model"),Ygt.forEach(t),cnr=r(i9e," (T5 model)"),i9e.forEach(t),fnr=i(D),GF=n(D,"LI",{});var d9e=s(GF);p_e=n(d9e,"STRONG",{});var Kgt=s(p_e);mnr=r(Kgt,"tapas"),Kgt.forEach(t),gnr=r(d9e," \u2014 "),JX=n(d9e,"A",{href:!0});var Zgt=s(JX);hnr=r(Zgt,"TFTapasModel"),Zgt.forEach(t),pnr=r(d9e," (TAPAS model)"),d9e.forEach(t),unr=i(D),OF=n(D,"LI",{});var c9e=s(OF);u_e=n(c9e,"STRONG",{});var eht=s(u_e);_nr=r(eht,"transfo-xl"),eht.forEach(t),bnr=r(c9e," \u2014 "),YX=n(c9e,"A",{href:!0});var oht=s(YX);vnr=r(oht,"TFTransfoXLModel"),oht.forEach(t),Fnr=r(c9e," (Transformer-XL model)"),c9e.forEach(t),Tnr=i(D),VF=n(D,"LI",{});var f9e=s(VF);__e=n(f9e,"STRONG",{});var rht=s(__e);Mnr=r(rht,"vit"),rht.forEach(t),Enr=r(f9e," \u2014 "),KX=n(f9e,"A",{href:!0});var tht=s(KX);Cnr=r(tht,"TFViTModel"),tht.forEach(t),wnr=r(f9e," (ViT model)"),f9e.forEach(t),Anr=i(D),XF=n(D,"LI",{});var m9e=s(XF);b_e=n(m9e,"STRONG",{});var aht=s(b_e);ynr=r(aht,"vit_mae"),aht.forEach(t),Lnr=r(m9e," \u2014 "),ZX=n(m9e,"A",{href:!0});var nht=s(ZX);xnr=r(nht,"TFViTMAEModel"),nht.forEach(t),$nr=r(m9e," (ViTMAE model)"),m9e.forEach(t),knr=i(D),zF=n(D,"LI",{});var g9e=s(zF);v_e=n(g9e,"STRONG",{});var sht=s(v_e);Snr=r(sht,"wav2vec2"),sht.forEach(t),Rnr=r(g9e," \u2014 "),ez=n(g9e,"A",{href:!0});var lht=s(ez);Bnr=r(lht,"TFWav2Vec2Model"),lht.forEach(t),Pnr=r(g9e," (Wav2Vec2 model)"),g9e.forEach(t),Inr=i(D),QF=n(D,"LI",{});var h9e=s(QF);F_e=n(h9e,"STRONG",{});var iht=s(F_e);qnr=r(iht,"xlm"),iht.forEach(t),Nnr=r(h9e," \u2014 "),oz=n(h9e,"A",{href:!0});var dht=s(oz);jnr=r(dht,"TFXLMModel"),dht.forEach(t),Dnr=r(h9e," (XLM model)"),h9e.forEach(t),Gnr=i(D),WF=n(D,"LI",{});var p9e=s(WF);T_e=n(p9e,"STRONG",{});var cht=s(T_e);Onr=r(cht,"xlm-roberta"),cht.forEach(t),Vnr=r(p9e," \u2014 "),rz=n(p9e,"A",{href:!0});var fht=s(rz);Xnr=r(fht,"TFXLMRobertaModel"),fht.forEach(t),znr=r(p9e," (XLM-RoBERTa model)"),p9e.forEach(t),Qnr=i(D),HF=n(D,"LI",{});var u9e=s(HF);M_e=n(u9e,"STRONG",{});var mht=s(M_e);Wnr=r(mht,"xlnet"),mht.forEach(t),Hnr=r(u9e," \u2014 "),tz=n(u9e,"A",{href:!0});var ght=s(tz);Unr=r(ght,"TFXLNetModel"),ght.forEach(t),Jnr=r(u9e," (XLNet model)"),u9e.forEach(t),D.forEach(t),Ynr=i(sl),T(UF.$$.fragment,sl),sl.forEach(t),nl.forEach(t),mPe=i(f),Bd=n(f,"H2",{class:!0});var uqe=s(Bd);JF=n(uqe,"A",{id:!0,class:!0,href:!0});var hht=s(JF);E_e=n(hht,"SPAN",{});var pht=s(E_e);T(lL.$$.fragment,pht),pht.forEach(t),hht.forEach(t),Knr=i(uqe),C_e=n(uqe,"SPAN",{});var uht=s(C_e);Znr=r(uht,"TFAutoModelForPreTraining"),uht.forEach(t),uqe.forEach(t),gPe=i(f),Ko=n(f,"DIV",{class:!0});var ll=s(Ko);T(iL.$$.fragment,ll),esr=i(ll),Pd=n(ll,"P",{});var sK=s(Pd);osr=r(sK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),az=n(sK,"A",{href:!0});var _ht=s(az);rsr=r(_ht,"from_pretrained()"),_ht.forEach(t),tsr=r(sK," class method or the "),nz=n(sK,"A",{href:!0});var bht=s(nz);asr=r(bht,"from_config()"),bht.forEach(t),nsr=r(sK,` class
method.`),sK.forEach(t),ssr=i(ll),dL=n(ll,"P",{});var _qe=s(dL);lsr=r(_qe,"This class cannot be instantiated directly using "),w_e=n(_qe,"CODE",{});var vht=s(w_e);isr=r(vht,"__init__()"),vht.forEach(t),dsr=r(_qe," (throws an error)."),_qe.forEach(t),csr=i(ll),Ct=n(ll,"DIV",{class:!0});var Ew=s(Ct);T(cL.$$.fragment,Ew),fsr=i(Ew),A_e=n(Ew,"P",{});var Fht=s(A_e);msr=r(Fht,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Fht.forEach(t),gsr=i(Ew),Id=n(Ew,"P",{});var lK=s(Id);hsr=r(lK,`Note:
Loading a model from its configuration file does `),y_e=n(lK,"STRONG",{});var Tht=s(y_e);psr=r(Tht,"not"),Tht.forEach(t),usr=r(lK,` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=n(lK,"A",{href:!0});var Mht=s(sz);_sr=r(Mht,"from_pretrained()"),Mht.forEach(t),bsr=r(lK," to load the model weights."),lK.forEach(t),vsr=i(Ew),T(YF.$$.fragment,Ew),Ew.forEach(t),Fsr=i(ll),wr=n(ll,"DIV",{class:!0});var il=s(wr);T(fL.$$.fragment,il),Tsr=i(il),L_e=n(il,"P",{});var Eht=s(L_e);Msr=r(Eht,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Eht.forEach(t),Esr=i(il),Ja=n(il,"P",{});var Cw=s(Ja);Csr=r(Cw,"The model class to instantiate is selected based on the "),x_e=n(Cw,"CODE",{});var Cht=s(x_e);wsr=r(Cht,"model_type"),Cht.forEach(t),Asr=r(Cw,` property of the config object (either
passed as an argument or loaded from `),$_e=n(Cw,"CODE",{});var wht=s($_e);ysr=r(wht,"pretrained_model_name_or_path"),wht.forEach(t),Lsr=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k_e=n(Cw,"CODE",{});var Aht=s(k_e);xsr=r(Aht,"pretrained_model_name_or_path"),Aht.forEach(t),$sr=r(Cw,":"),Cw.forEach(t),ksr=i(il),ne=n(il,"UL",{});var le=s(ne);KF=n(le,"LI",{});var _9e=s(KF);S_e=n(_9e,"STRONG",{});var yht=s(S_e);Ssr=r(yht,"albert"),yht.forEach(t),Rsr=r(_9e," \u2014 "),lz=n(_9e,"A",{href:!0});var Lht=s(lz);Bsr=r(Lht,"TFAlbertForPreTraining"),Lht.forEach(t),Psr=r(_9e," (ALBERT model)"),_9e.forEach(t),Isr=i(le),ZF=n(le,"LI",{});var b9e=s(ZF);R_e=n(b9e,"STRONG",{});var xht=s(R_e);qsr=r(xht,"bart"),xht.forEach(t),Nsr=r(b9e," \u2014 "),iz=n(b9e,"A",{href:!0});var $ht=s(iz);jsr=r($ht,"TFBartForConditionalGeneration"),$ht.forEach(t),Dsr=r(b9e," (BART model)"),b9e.forEach(t),Gsr=i(le),e0=n(le,"LI",{});var v9e=s(e0);B_e=n(v9e,"STRONG",{});var kht=s(B_e);Osr=r(kht,"bert"),kht.forEach(t),Vsr=r(v9e," \u2014 "),dz=n(v9e,"A",{href:!0});var Sht=s(dz);Xsr=r(Sht,"TFBertForPreTraining"),Sht.forEach(t),zsr=r(v9e," (BERT model)"),v9e.forEach(t),Qsr=i(le),o0=n(le,"LI",{});var F9e=s(o0);P_e=n(F9e,"STRONG",{});var Rht=s(P_e);Wsr=r(Rht,"camembert"),Rht.forEach(t),Hsr=r(F9e," \u2014 "),cz=n(F9e,"A",{href:!0});var Bht=s(cz);Usr=r(Bht,"TFCamembertForMaskedLM"),Bht.forEach(t),Jsr=r(F9e," (CamemBERT model)"),F9e.forEach(t),Ysr=i(le),r0=n(le,"LI",{});var T9e=s(r0);I_e=n(T9e,"STRONG",{});var Pht=s(I_e);Ksr=r(Pht,"ctrl"),Pht.forEach(t),Zsr=r(T9e," \u2014 "),fz=n(T9e,"A",{href:!0});var Iht=s(fz);elr=r(Iht,"TFCTRLLMHeadModel"),Iht.forEach(t),olr=r(T9e," (CTRL model)"),T9e.forEach(t),rlr=i(le),t0=n(le,"LI",{});var M9e=s(t0);q_e=n(M9e,"STRONG",{});var qht=s(q_e);tlr=r(qht,"distilbert"),qht.forEach(t),alr=r(M9e," \u2014 "),mz=n(M9e,"A",{href:!0});var Nht=s(mz);nlr=r(Nht,"TFDistilBertForMaskedLM"),Nht.forEach(t),slr=r(M9e," (DistilBERT model)"),M9e.forEach(t),llr=i(le),a0=n(le,"LI",{});var E9e=s(a0);N_e=n(E9e,"STRONG",{});var jht=s(N_e);ilr=r(jht,"electra"),jht.forEach(t),dlr=r(E9e," \u2014 "),gz=n(E9e,"A",{href:!0});var Dht=s(gz);clr=r(Dht,"TFElectraForPreTraining"),Dht.forEach(t),flr=r(E9e," (ELECTRA model)"),E9e.forEach(t),mlr=i(le),n0=n(le,"LI",{});var C9e=s(n0);j_e=n(C9e,"STRONG",{});var Ght=s(j_e);glr=r(Ght,"flaubert"),Ght.forEach(t),hlr=r(C9e," \u2014 "),hz=n(C9e,"A",{href:!0});var Oht=s(hz);plr=r(Oht,"TFFlaubertWithLMHeadModel"),Oht.forEach(t),ulr=r(C9e," (FlauBERT model)"),C9e.forEach(t),_lr=i(le),s0=n(le,"LI",{});var w9e=s(s0);D_e=n(w9e,"STRONG",{});var Vht=s(D_e);blr=r(Vht,"funnel"),Vht.forEach(t),vlr=r(w9e," \u2014 "),pz=n(w9e,"A",{href:!0});var Xht=s(pz);Flr=r(Xht,"TFFunnelForPreTraining"),Xht.forEach(t),Tlr=r(w9e," (Funnel Transformer model)"),w9e.forEach(t),Mlr=i(le),l0=n(le,"LI",{});var A9e=s(l0);G_e=n(A9e,"STRONG",{});var zht=s(G_e);Elr=r(zht,"gpt2"),zht.forEach(t),Clr=r(A9e," \u2014 "),uz=n(A9e,"A",{href:!0});var Qht=s(uz);wlr=r(Qht,"TFGPT2LMHeadModel"),Qht.forEach(t),Alr=r(A9e," (OpenAI GPT-2 model)"),A9e.forEach(t),ylr=i(le),i0=n(le,"LI",{});var y9e=s(i0);O_e=n(y9e,"STRONG",{});var Wht=s(O_e);Llr=r(Wht,"layoutlm"),Wht.forEach(t),xlr=r(y9e," \u2014 "),_z=n(y9e,"A",{href:!0});var Hht=s(_z);$lr=r(Hht,"TFLayoutLMForMaskedLM"),Hht.forEach(t),klr=r(y9e," (LayoutLM model)"),y9e.forEach(t),Slr=i(le),d0=n(le,"LI",{});var L9e=s(d0);V_e=n(L9e,"STRONG",{});var Uht=s(V_e);Rlr=r(Uht,"lxmert"),Uht.forEach(t),Blr=r(L9e," \u2014 "),bz=n(L9e,"A",{href:!0});var Jht=s(bz);Plr=r(Jht,"TFLxmertForPreTraining"),Jht.forEach(t),Ilr=r(L9e," (LXMERT model)"),L9e.forEach(t),qlr=i(le),c0=n(le,"LI",{});var x9e=s(c0);X_e=n(x9e,"STRONG",{});var Yht=s(X_e);Nlr=r(Yht,"mobilebert"),Yht.forEach(t),jlr=r(x9e," \u2014 "),vz=n(x9e,"A",{href:!0});var Kht=s(vz);Dlr=r(Kht,"TFMobileBertForPreTraining"),Kht.forEach(t),Glr=r(x9e," (MobileBERT model)"),x9e.forEach(t),Olr=i(le),f0=n(le,"LI",{});var $9e=s(f0);z_e=n($9e,"STRONG",{});var Zht=s(z_e);Vlr=r(Zht,"mpnet"),Zht.forEach(t),Xlr=r($9e," \u2014 "),Fz=n($9e,"A",{href:!0});var ept=s(Fz);zlr=r(ept,"TFMPNetForMaskedLM"),ept.forEach(t),Qlr=r($9e," (MPNet model)"),$9e.forEach(t),Wlr=i(le),m0=n(le,"LI",{});var k9e=s(m0);Q_e=n(k9e,"STRONG",{});var opt=s(Q_e);Hlr=r(opt,"openai-gpt"),opt.forEach(t),Ulr=r(k9e," \u2014 "),Tz=n(k9e,"A",{href:!0});var rpt=s(Tz);Jlr=r(rpt,"TFOpenAIGPTLMHeadModel"),rpt.forEach(t),Ylr=r(k9e," (OpenAI GPT model)"),k9e.forEach(t),Klr=i(le),g0=n(le,"LI",{});var S9e=s(g0);W_e=n(S9e,"STRONG",{});var tpt=s(W_e);Zlr=r(tpt,"roberta"),tpt.forEach(t),eir=r(S9e," \u2014 "),Mz=n(S9e,"A",{href:!0});var apt=s(Mz);oir=r(apt,"TFRobertaForMaskedLM"),apt.forEach(t),rir=r(S9e," (RoBERTa model)"),S9e.forEach(t),tir=i(le),h0=n(le,"LI",{});var R9e=s(h0);H_e=n(R9e,"STRONG",{});var npt=s(H_e);air=r(npt,"t5"),npt.forEach(t),nir=r(R9e," \u2014 "),Ez=n(R9e,"A",{href:!0});var spt=s(Ez);sir=r(spt,"TFT5ForConditionalGeneration"),spt.forEach(t),lir=r(R9e," (T5 model)"),R9e.forEach(t),iir=i(le),p0=n(le,"LI",{});var B9e=s(p0);U_e=n(B9e,"STRONG",{});var lpt=s(U_e);dir=r(lpt,"tapas"),lpt.forEach(t),cir=r(B9e," \u2014 "),Cz=n(B9e,"A",{href:!0});var ipt=s(Cz);fir=r(ipt,"TFTapasForMaskedLM"),ipt.forEach(t),mir=r(B9e," (TAPAS model)"),B9e.forEach(t),gir=i(le),u0=n(le,"LI",{});var P9e=s(u0);J_e=n(P9e,"STRONG",{});var dpt=s(J_e);hir=r(dpt,"transfo-xl"),dpt.forEach(t),pir=r(P9e," \u2014 "),wz=n(P9e,"A",{href:!0});var cpt=s(wz);uir=r(cpt,"TFTransfoXLLMHeadModel"),cpt.forEach(t),_ir=r(P9e," (Transformer-XL model)"),P9e.forEach(t),bir=i(le),_0=n(le,"LI",{});var I9e=s(_0);Y_e=n(I9e,"STRONG",{});var fpt=s(Y_e);vir=r(fpt,"vit_mae"),fpt.forEach(t),Fir=r(I9e," \u2014 "),Az=n(I9e,"A",{href:!0});var mpt=s(Az);Tir=r(mpt,"TFViTMAEForPreTraining"),mpt.forEach(t),Mir=r(I9e," (ViTMAE model)"),I9e.forEach(t),Eir=i(le),b0=n(le,"LI",{});var q9e=s(b0);K_e=n(q9e,"STRONG",{});var gpt=s(K_e);Cir=r(gpt,"xlm"),gpt.forEach(t),wir=r(q9e," \u2014 "),yz=n(q9e,"A",{href:!0});var hpt=s(yz);Air=r(hpt,"TFXLMWithLMHeadModel"),hpt.forEach(t),yir=r(q9e," (XLM model)"),q9e.forEach(t),Lir=i(le),v0=n(le,"LI",{});var N9e=s(v0);Z_e=n(N9e,"STRONG",{});var ppt=s(Z_e);xir=r(ppt,"xlm-roberta"),ppt.forEach(t),$ir=r(N9e," \u2014 "),Lz=n(N9e,"A",{href:!0});var upt=s(Lz);kir=r(upt,"TFXLMRobertaForMaskedLM"),upt.forEach(t),Sir=r(N9e," (XLM-RoBERTa model)"),N9e.forEach(t),Rir=i(le),F0=n(le,"LI",{});var j9e=s(F0);e1e=n(j9e,"STRONG",{});var _pt=s(e1e);Bir=r(_pt,"xlnet"),_pt.forEach(t),Pir=r(j9e," \u2014 "),xz=n(j9e,"A",{href:!0});var bpt=s(xz);Iir=r(bpt,"TFXLNetLMHeadModel"),bpt.forEach(t),qir=r(j9e," (XLNet model)"),j9e.forEach(t),le.forEach(t),Nir=i(il),T(T0.$$.fragment,il),il.forEach(t),ll.forEach(t),hPe=i(f),qd=n(f,"H2",{class:!0});var bqe=s(qd);M0=n(bqe,"A",{id:!0,class:!0,href:!0});var vpt=s(M0);o1e=n(vpt,"SPAN",{});var Fpt=s(o1e);T(mL.$$.fragment,Fpt),Fpt.forEach(t),vpt.forEach(t),jir=i(bqe),r1e=n(bqe,"SPAN",{});var Tpt=s(r1e);Dir=r(Tpt,"TFAutoModelForCausalLM"),Tpt.forEach(t),bqe.forEach(t),pPe=i(f),Zo=n(f,"DIV",{class:!0});var dl=s(Zo);T(gL.$$.fragment,dl),Gir=i(dl),Nd=n(dl,"P",{});var iK=s(Nd);Oir=r(iK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$z=n(iK,"A",{href:!0});var Mpt=s($z);Vir=r(Mpt,"from_pretrained()"),Mpt.forEach(t),Xir=r(iK," class method or the "),kz=n(iK,"A",{href:!0});var Ept=s(kz);zir=r(Ept,"from_config()"),Ept.forEach(t),Qir=r(iK,` class
method.`),iK.forEach(t),Wir=i(dl),hL=n(dl,"P",{});var vqe=s(hL);Hir=r(vqe,"This class cannot be instantiated directly using "),t1e=n(vqe,"CODE",{});var Cpt=s(t1e);Uir=r(Cpt,"__init__()"),Cpt.forEach(t),Jir=r(vqe," (throws an error)."),vqe.forEach(t),Yir=i(dl),wt=n(dl,"DIV",{class:!0});var ww=s(wt);T(pL.$$.fragment,ww),Kir=i(ww),a1e=n(ww,"P",{});var wpt=s(a1e);Zir=r(wpt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wpt.forEach(t),edr=i(ww),jd=n(ww,"P",{});var dK=s(jd);odr=r(dK,`Note:
Loading a model from its configuration file does `),n1e=n(dK,"STRONG",{});var Apt=s(n1e);rdr=r(Apt,"not"),Apt.forEach(t),tdr=r(dK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=n(dK,"A",{href:!0});var ypt=s(Sz);adr=r(ypt,"from_pretrained()"),ypt.forEach(t),ndr=r(dK," to load the model weights."),dK.forEach(t),sdr=i(ww),T(E0.$$.fragment,ww),ww.forEach(t),ldr=i(dl),Ar=n(dl,"DIV",{class:!0});var cl=s(Ar);T(uL.$$.fragment,cl),idr=i(cl),s1e=n(cl,"P",{});var Lpt=s(s1e);ddr=r(Lpt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Lpt.forEach(t),cdr=i(cl),Ya=n(cl,"P",{});var Aw=s(Ya);fdr=r(Aw,"The model class to instantiate is selected based on the "),l1e=n(Aw,"CODE",{});var xpt=s(l1e);mdr=r(xpt,"model_type"),xpt.forEach(t),gdr=r(Aw,` property of the config object (either
passed as an argument or loaded from `),i1e=n(Aw,"CODE",{});var $pt=s(i1e);hdr=r($pt,"pretrained_model_name_or_path"),$pt.forEach(t),pdr=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=n(Aw,"CODE",{});var kpt=s(d1e);udr=r(kpt,"pretrained_model_name_or_path"),kpt.forEach(t),_dr=r(Aw,":"),Aw.forEach(t),bdr=i(cl),Te=n(cl,"UL",{});var Ce=s(Te);C0=n(Ce,"LI",{});var D9e=s(C0);c1e=n(D9e,"STRONG",{});var Spt=s(c1e);vdr=r(Spt,"bert"),Spt.forEach(t),Fdr=r(D9e," \u2014 "),Rz=n(D9e,"A",{href:!0});var Rpt=s(Rz);Tdr=r(Rpt,"TFBertLMHeadModel"),Rpt.forEach(t),Mdr=r(D9e," (BERT model)"),D9e.forEach(t),Edr=i(Ce),w0=n(Ce,"LI",{});var G9e=s(w0);f1e=n(G9e,"STRONG",{});var Bpt=s(f1e);Cdr=r(Bpt,"camembert"),Bpt.forEach(t),wdr=r(G9e," \u2014 "),Bz=n(G9e,"A",{href:!0});var Ppt=s(Bz);Adr=r(Ppt,"TFCamembertForCausalLM"),Ppt.forEach(t),ydr=r(G9e," (CamemBERT model)"),G9e.forEach(t),Ldr=i(Ce),A0=n(Ce,"LI",{});var O9e=s(A0);m1e=n(O9e,"STRONG",{});var Ipt=s(m1e);xdr=r(Ipt,"ctrl"),Ipt.forEach(t),$dr=r(O9e," \u2014 "),Pz=n(O9e,"A",{href:!0});var qpt=s(Pz);kdr=r(qpt,"TFCTRLLMHeadModel"),qpt.forEach(t),Sdr=r(O9e," (CTRL model)"),O9e.forEach(t),Rdr=i(Ce),y0=n(Ce,"LI",{});var V9e=s(y0);g1e=n(V9e,"STRONG",{});var Npt=s(g1e);Bdr=r(Npt,"gpt2"),Npt.forEach(t),Pdr=r(V9e," \u2014 "),Iz=n(V9e,"A",{href:!0});var jpt=s(Iz);Idr=r(jpt,"TFGPT2LMHeadModel"),jpt.forEach(t),qdr=r(V9e," (OpenAI GPT-2 model)"),V9e.forEach(t),Ndr=i(Ce),L0=n(Ce,"LI",{});var X9e=s(L0);h1e=n(X9e,"STRONG",{});var Dpt=s(h1e);jdr=r(Dpt,"gptj"),Dpt.forEach(t),Ddr=r(X9e," \u2014 "),qz=n(X9e,"A",{href:!0});var Gpt=s(qz);Gdr=r(Gpt,"TFGPTJForCausalLM"),Gpt.forEach(t),Odr=r(X9e," (GPT-J model)"),X9e.forEach(t),Vdr=i(Ce),x0=n(Ce,"LI",{});var z9e=s(x0);p1e=n(z9e,"STRONG",{});var Opt=s(p1e);Xdr=r(Opt,"openai-gpt"),Opt.forEach(t),zdr=r(z9e," \u2014 "),Nz=n(z9e,"A",{href:!0});var Vpt=s(Nz);Qdr=r(Vpt,"TFOpenAIGPTLMHeadModel"),Vpt.forEach(t),Wdr=r(z9e," (OpenAI GPT model)"),z9e.forEach(t),Hdr=i(Ce),$0=n(Ce,"LI",{});var Q9e=s($0);u1e=n(Q9e,"STRONG",{});var Xpt=s(u1e);Udr=r(Xpt,"rembert"),Xpt.forEach(t),Jdr=r(Q9e," \u2014 "),jz=n(Q9e,"A",{href:!0});var zpt=s(jz);Ydr=r(zpt,"TFRemBertForCausalLM"),zpt.forEach(t),Kdr=r(Q9e," (RemBERT model)"),Q9e.forEach(t),Zdr=i(Ce),k0=n(Ce,"LI",{});var W9e=s(k0);_1e=n(W9e,"STRONG",{});var Qpt=s(_1e);ecr=r(Qpt,"roberta"),Qpt.forEach(t),ocr=r(W9e," \u2014 "),Dz=n(W9e,"A",{href:!0});var Wpt=s(Dz);rcr=r(Wpt,"TFRobertaForCausalLM"),Wpt.forEach(t),tcr=r(W9e," (RoBERTa model)"),W9e.forEach(t),acr=i(Ce),S0=n(Ce,"LI",{});var H9e=s(S0);b1e=n(H9e,"STRONG",{});var Hpt=s(b1e);ncr=r(Hpt,"roformer"),Hpt.forEach(t),scr=r(H9e," \u2014 "),Gz=n(H9e,"A",{href:!0});var Upt=s(Gz);lcr=r(Upt,"TFRoFormerForCausalLM"),Upt.forEach(t),icr=r(H9e," (RoFormer model)"),H9e.forEach(t),dcr=i(Ce),R0=n(Ce,"LI",{});var U9e=s(R0);v1e=n(U9e,"STRONG",{});var Jpt=s(v1e);ccr=r(Jpt,"transfo-xl"),Jpt.forEach(t),fcr=r(U9e," \u2014 "),Oz=n(U9e,"A",{href:!0});var Ypt=s(Oz);mcr=r(Ypt,"TFTransfoXLLMHeadModel"),Ypt.forEach(t),gcr=r(U9e," (Transformer-XL model)"),U9e.forEach(t),hcr=i(Ce),B0=n(Ce,"LI",{});var J9e=s(B0);F1e=n(J9e,"STRONG",{});var Kpt=s(F1e);pcr=r(Kpt,"xlm"),Kpt.forEach(t),ucr=r(J9e," \u2014 "),Vz=n(J9e,"A",{href:!0});var Zpt=s(Vz);_cr=r(Zpt,"TFXLMWithLMHeadModel"),Zpt.forEach(t),bcr=r(J9e," (XLM model)"),J9e.forEach(t),vcr=i(Ce),P0=n(Ce,"LI",{});var Y9e=s(P0);T1e=n(Y9e,"STRONG",{});var eut=s(T1e);Fcr=r(eut,"xlnet"),eut.forEach(t),Tcr=r(Y9e," \u2014 "),Xz=n(Y9e,"A",{href:!0});var out=s(Xz);Mcr=r(out,"TFXLNetLMHeadModel"),out.forEach(t),Ecr=r(Y9e," (XLNet model)"),Y9e.forEach(t),Ce.forEach(t),Ccr=i(cl),T(I0.$$.fragment,cl),cl.forEach(t),dl.forEach(t),uPe=i(f),Dd=n(f,"H2",{class:!0});var Fqe=s(Dd);q0=n(Fqe,"A",{id:!0,class:!0,href:!0});var rut=s(q0);M1e=n(rut,"SPAN",{});var tut=s(M1e);T(_L.$$.fragment,tut),tut.forEach(t),rut.forEach(t),wcr=i(Fqe),E1e=n(Fqe,"SPAN",{});var aut=s(E1e);Acr=r(aut,"TFAutoModelForImageClassification"),aut.forEach(t),Fqe.forEach(t),_Pe=i(f),er=n(f,"DIV",{class:!0});var fl=s(er);T(bL.$$.fragment,fl),ycr=i(fl),Gd=n(fl,"P",{});var cK=s(Gd);Lcr=r(cK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zz=n(cK,"A",{href:!0});var nut=s(zz);xcr=r(nut,"from_pretrained()"),nut.forEach(t),$cr=r(cK," class method or the "),Qz=n(cK,"A",{href:!0});var sut=s(Qz);kcr=r(sut,"from_config()"),sut.forEach(t),Scr=r(cK,` class
method.`),cK.forEach(t),Rcr=i(fl),vL=n(fl,"P",{});var Tqe=s(vL);Bcr=r(Tqe,"This class cannot be instantiated directly using "),C1e=n(Tqe,"CODE",{});var lut=s(C1e);Pcr=r(lut,"__init__()"),lut.forEach(t),Icr=r(Tqe," (throws an error)."),Tqe.forEach(t),qcr=i(fl),At=n(fl,"DIV",{class:!0});var yw=s(At);T(FL.$$.fragment,yw),Ncr=i(yw),w1e=n(yw,"P",{});var iut=s(w1e);jcr=r(iut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),iut.forEach(t),Dcr=i(yw),Od=n(yw,"P",{});var fK=s(Od);Gcr=r(fK,`Note:
Loading a model from its configuration file does `),A1e=n(fK,"STRONG",{});var dut=s(A1e);Ocr=r(dut,"not"),dut.forEach(t),Vcr=r(fK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wz=n(fK,"A",{href:!0});var cut=s(Wz);Xcr=r(cut,"from_pretrained()"),cut.forEach(t),zcr=r(fK," to load the model weights."),fK.forEach(t),Qcr=i(yw),T(N0.$$.fragment,yw),yw.forEach(t),Wcr=i(fl),yr=n(fl,"DIV",{class:!0});var ml=s(yr);T(TL.$$.fragment,ml),Hcr=i(ml),y1e=n(ml,"P",{});var fut=s(y1e);Ucr=r(fut,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fut.forEach(t),Jcr=i(ml),Ka=n(ml,"P",{});var Lw=s(Ka);Ycr=r(Lw,"The model class to instantiate is selected based on the "),L1e=n(Lw,"CODE",{});var mut=s(L1e);Kcr=r(mut,"model_type"),mut.forEach(t),Zcr=r(Lw,` property of the config object (either
passed as an argument or loaded from `),x1e=n(Lw,"CODE",{});var gut=s(x1e);efr=r(gut,"pretrained_model_name_or_path"),gut.forEach(t),ofr=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=n(Lw,"CODE",{});var hut=s($1e);rfr=r(hut,"pretrained_model_name_or_path"),hut.forEach(t),tfr=r(Lw,":"),Lw.forEach(t),afr=i(ml),ML=n(ml,"UL",{});var Mqe=s(ML);j0=n(Mqe,"LI",{});var K9e=s(j0);k1e=n(K9e,"STRONG",{});var put=s(k1e);nfr=r(put,"convnext"),put.forEach(t),sfr=r(K9e," \u2014 "),Hz=n(K9e,"A",{href:!0});var uut=s(Hz);lfr=r(uut,"TFConvNextForImageClassification"),uut.forEach(t),ifr=r(K9e," (ConvNext model)"),K9e.forEach(t),dfr=i(Mqe),D0=n(Mqe,"LI",{});var Z9e=s(D0);S1e=n(Z9e,"STRONG",{});var _ut=s(S1e);cfr=r(_ut,"vit"),_ut.forEach(t),ffr=r(Z9e," \u2014 "),Uz=n(Z9e,"A",{href:!0});var but=s(Uz);mfr=r(but,"TFViTForImageClassification"),but.forEach(t),gfr=r(Z9e," (ViT model)"),Z9e.forEach(t),Mqe.forEach(t),hfr=i(ml),T(G0.$$.fragment,ml),ml.forEach(t),fl.forEach(t),bPe=i(f),Vd=n(f,"H2",{class:!0});var Eqe=s(Vd);O0=n(Eqe,"A",{id:!0,class:!0,href:!0});var vut=s(O0);R1e=n(vut,"SPAN",{});var Fut=s(R1e);T(EL.$$.fragment,Fut),Fut.forEach(t),vut.forEach(t),pfr=i(Eqe),B1e=n(Eqe,"SPAN",{});var Tut=s(B1e);ufr=r(Tut,"TFAutoModelForMaskedLM"),Tut.forEach(t),Eqe.forEach(t),vPe=i(f),or=n(f,"DIV",{class:!0});var gl=s(or);T(CL.$$.fragment,gl),_fr=i(gl),Xd=n(gl,"P",{});var mK=s(Xd);bfr=r(mK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Jz=n(mK,"A",{href:!0});var Mut=s(Jz);vfr=r(Mut,"from_pretrained()"),Mut.forEach(t),Ffr=r(mK," class method or the "),Yz=n(mK,"A",{href:!0});var Eut=s(Yz);Tfr=r(Eut,"from_config()"),Eut.forEach(t),Mfr=r(mK,` class
method.`),mK.forEach(t),Efr=i(gl),wL=n(gl,"P",{});var Cqe=s(wL);Cfr=r(Cqe,"This class cannot be instantiated directly using "),P1e=n(Cqe,"CODE",{});var Cut=s(P1e);wfr=r(Cut,"__init__()"),Cut.forEach(t),Afr=r(Cqe," (throws an error)."),Cqe.forEach(t),yfr=i(gl),yt=n(gl,"DIV",{class:!0});var xw=s(yt);T(AL.$$.fragment,xw),Lfr=i(xw),I1e=n(xw,"P",{});var wut=s(I1e);xfr=r(wut,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),wut.forEach(t),$fr=i(xw),zd=n(xw,"P",{});var gK=s(zd);kfr=r(gK,`Note:
Loading a model from its configuration file does `),q1e=n(gK,"STRONG",{});var Aut=s(q1e);Sfr=r(Aut,"not"),Aut.forEach(t),Rfr=r(gK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=n(gK,"A",{href:!0});var yut=s(Kz);Bfr=r(yut,"from_pretrained()"),yut.forEach(t),Pfr=r(gK," to load the model weights."),gK.forEach(t),Ifr=i(xw),T(V0.$$.fragment,xw),xw.forEach(t),qfr=i(gl),Lr=n(gl,"DIV",{class:!0});var hl=s(Lr);T(yL.$$.fragment,hl),Nfr=i(hl),N1e=n(hl,"P",{});var Lut=s(N1e);jfr=r(Lut,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Lut.forEach(t),Dfr=i(hl),Za=n(hl,"P",{});var $w=s(Za);Gfr=r($w,"The model class to instantiate is selected based on the "),j1e=n($w,"CODE",{});var xut=s(j1e);Ofr=r(xut,"model_type"),xut.forEach(t),Vfr=r($w,` property of the config object (either
passed as an argument or loaded from `),D1e=n($w,"CODE",{});var $ut=s(D1e);Xfr=r($ut,"pretrained_model_name_or_path"),$ut.forEach(t),zfr=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G1e=n($w,"CODE",{});var kut=s(G1e);Qfr=r(kut,"pretrained_model_name_or_path"),kut.forEach(t),Wfr=r($w,":"),$w.forEach(t),Hfr=i(hl),ie=n(hl,"UL",{});var fe=s(ie);X0=n(fe,"LI",{});var e$e=s(X0);O1e=n(e$e,"STRONG",{});var Sut=s(O1e);Ufr=r(Sut,"albert"),Sut.forEach(t),Jfr=r(e$e," \u2014 "),Zz=n(e$e,"A",{href:!0});var Rut=s(Zz);Yfr=r(Rut,"TFAlbertForMaskedLM"),Rut.forEach(t),Kfr=r(e$e," (ALBERT model)"),e$e.forEach(t),Zfr=i(fe),z0=n(fe,"LI",{});var o$e=s(z0);V1e=n(o$e,"STRONG",{});var But=s(V1e);emr=r(But,"bert"),But.forEach(t),omr=r(o$e," \u2014 "),eQ=n(o$e,"A",{href:!0});var Put=s(eQ);rmr=r(Put,"TFBertForMaskedLM"),Put.forEach(t),tmr=r(o$e," (BERT model)"),o$e.forEach(t),amr=i(fe),Q0=n(fe,"LI",{});var r$e=s(Q0);X1e=n(r$e,"STRONG",{});var Iut=s(X1e);nmr=r(Iut,"camembert"),Iut.forEach(t),smr=r(r$e," \u2014 "),oQ=n(r$e,"A",{href:!0});var qut=s(oQ);lmr=r(qut,"TFCamembertForMaskedLM"),qut.forEach(t),imr=r(r$e," (CamemBERT model)"),r$e.forEach(t),dmr=i(fe),W0=n(fe,"LI",{});var t$e=s(W0);z1e=n(t$e,"STRONG",{});var Nut=s(z1e);cmr=r(Nut,"convbert"),Nut.forEach(t),fmr=r(t$e," \u2014 "),rQ=n(t$e,"A",{href:!0});var jut=s(rQ);mmr=r(jut,"TFConvBertForMaskedLM"),jut.forEach(t),gmr=r(t$e," (ConvBERT model)"),t$e.forEach(t),hmr=i(fe),H0=n(fe,"LI",{});var a$e=s(H0);Q1e=n(a$e,"STRONG",{});var Dut=s(Q1e);pmr=r(Dut,"deberta"),Dut.forEach(t),umr=r(a$e," \u2014 "),tQ=n(a$e,"A",{href:!0});var Gut=s(tQ);_mr=r(Gut,"TFDebertaForMaskedLM"),Gut.forEach(t),bmr=r(a$e," (DeBERTa model)"),a$e.forEach(t),vmr=i(fe),U0=n(fe,"LI",{});var n$e=s(U0);W1e=n(n$e,"STRONG",{});var Out=s(W1e);Fmr=r(Out,"deberta-v2"),Out.forEach(t),Tmr=r(n$e," \u2014 "),aQ=n(n$e,"A",{href:!0});var Vut=s(aQ);Mmr=r(Vut,"TFDebertaV2ForMaskedLM"),Vut.forEach(t),Emr=r(n$e," (DeBERTa-v2 model)"),n$e.forEach(t),Cmr=i(fe),J0=n(fe,"LI",{});var s$e=s(J0);H1e=n(s$e,"STRONG",{});var Xut=s(H1e);wmr=r(Xut,"distilbert"),Xut.forEach(t),Amr=r(s$e," \u2014 "),nQ=n(s$e,"A",{href:!0});var zut=s(nQ);ymr=r(zut,"TFDistilBertForMaskedLM"),zut.forEach(t),Lmr=r(s$e," (DistilBERT model)"),s$e.forEach(t),xmr=i(fe),Y0=n(fe,"LI",{});var l$e=s(Y0);U1e=n(l$e,"STRONG",{});var Qut=s(U1e);$mr=r(Qut,"electra"),Qut.forEach(t),kmr=r(l$e," \u2014 "),sQ=n(l$e,"A",{href:!0});var Wut=s(sQ);Smr=r(Wut,"TFElectraForMaskedLM"),Wut.forEach(t),Rmr=r(l$e," (ELECTRA model)"),l$e.forEach(t),Bmr=i(fe),K0=n(fe,"LI",{});var i$e=s(K0);J1e=n(i$e,"STRONG",{});var Hut=s(J1e);Pmr=r(Hut,"flaubert"),Hut.forEach(t),Imr=r(i$e," \u2014 "),lQ=n(i$e,"A",{href:!0});var Uut=s(lQ);qmr=r(Uut,"TFFlaubertWithLMHeadModel"),Uut.forEach(t),Nmr=r(i$e," (FlauBERT model)"),i$e.forEach(t),jmr=i(fe),Z0=n(fe,"LI",{});var d$e=s(Z0);Y1e=n(d$e,"STRONG",{});var Jut=s(Y1e);Dmr=r(Jut,"funnel"),Jut.forEach(t),Gmr=r(d$e," \u2014 "),iQ=n(d$e,"A",{href:!0});var Yut=s(iQ);Omr=r(Yut,"TFFunnelForMaskedLM"),Yut.forEach(t),Vmr=r(d$e," (Funnel Transformer model)"),d$e.forEach(t),Xmr=i(fe),eT=n(fe,"LI",{});var c$e=s(eT);K1e=n(c$e,"STRONG",{});var Kut=s(K1e);zmr=r(Kut,"layoutlm"),Kut.forEach(t),Qmr=r(c$e," \u2014 "),dQ=n(c$e,"A",{href:!0});var Zut=s(dQ);Wmr=r(Zut,"TFLayoutLMForMaskedLM"),Zut.forEach(t),Hmr=r(c$e," (LayoutLM model)"),c$e.forEach(t),Umr=i(fe),oT=n(fe,"LI",{});var f$e=s(oT);Z1e=n(f$e,"STRONG",{});var e_t=s(Z1e);Jmr=r(e_t,"longformer"),e_t.forEach(t),Ymr=r(f$e," \u2014 "),cQ=n(f$e,"A",{href:!0});var o_t=s(cQ);Kmr=r(o_t,"TFLongformerForMaskedLM"),o_t.forEach(t),Zmr=r(f$e," (Longformer model)"),f$e.forEach(t),egr=i(fe),rT=n(fe,"LI",{});var m$e=s(rT);e7e=n(m$e,"STRONG",{});var r_t=s(e7e);ogr=r(r_t,"mobilebert"),r_t.forEach(t),rgr=r(m$e," \u2014 "),fQ=n(m$e,"A",{href:!0});var t_t=s(fQ);tgr=r(t_t,"TFMobileBertForMaskedLM"),t_t.forEach(t),agr=r(m$e," (MobileBERT model)"),m$e.forEach(t),ngr=i(fe),tT=n(fe,"LI",{});var g$e=s(tT);o7e=n(g$e,"STRONG",{});var a_t=s(o7e);sgr=r(a_t,"mpnet"),a_t.forEach(t),lgr=r(g$e," \u2014 "),mQ=n(g$e,"A",{href:!0});var n_t=s(mQ);igr=r(n_t,"TFMPNetForMaskedLM"),n_t.forEach(t),dgr=r(g$e," (MPNet model)"),g$e.forEach(t),cgr=i(fe),aT=n(fe,"LI",{});var h$e=s(aT);r7e=n(h$e,"STRONG",{});var s_t=s(r7e);fgr=r(s_t,"rembert"),s_t.forEach(t),mgr=r(h$e," \u2014 "),gQ=n(h$e,"A",{href:!0});var l_t=s(gQ);ggr=r(l_t,"TFRemBertForMaskedLM"),l_t.forEach(t),hgr=r(h$e," (RemBERT model)"),h$e.forEach(t),pgr=i(fe),nT=n(fe,"LI",{});var p$e=s(nT);t7e=n(p$e,"STRONG",{});var i_t=s(t7e);ugr=r(i_t,"roberta"),i_t.forEach(t),_gr=r(p$e," \u2014 "),hQ=n(p$e,"A",{href:!0});var d_t=s(hQ);bgr=r(d_t,"TFRobertaForMaskedLM"),d_t.forEach(t),vgr=r(p$e," (RoBERTa model)"),p$e.forEach(t),Fgr=i(fe),sT=n(fe,"LI",{});var u$e=s(sT);a7e=n(u$e,"STRONG",{});var c_t=s(a7e);Tgr=r(c_t,"roformer"),c_t.forEach(t),Mgr=r(u$e," \u2014 "),pQ=n(u$e,"A",{href:!0});var f_t=s(pQ);Egr=r(f_t,"TFRoFormerForMaskedLM"),f_t.forEach(t),Cgr=r(u$e," (RoFormer model)"),u$e.forEach(t),wgr=i(fe),lT=n(fe,"LI",{});var _$e=s(lT);n7e=n(_$e,"STRONG",{});var m_t=s(n7e);Agr=r(m_t,"tapas"),m_t.forEach(t),ygr=r(_$e," \u2014 "),uQ=n(_$e,"A",{href:!0});var g_t=s(uQ);Lgr=r(g_t,"TFTapasForMaskedLM"),g_t.forEach(t),xgr=r(_$e," (TAPAS model)"),_$e.forEach(t),$gr=i(fe),iT=n(fe,"LI",{});var b$e=s(iT);s7e=n(b$e,"STRONG",{});var h_t=s(s7e);kgr=r(h_t,"xlm"),h_t.forEach(t),Sgr=r(b$e," \u2014 "),_Q=n(b$e,"A",{href:!0});var p_t=s(_Q);Rgr=r(p_t,"TFXLMWithLMHeadModel"),p_t.forEach(t),Bgr=r(b$e," (XLM model)"),b$e.forEach(t),Pgr=i(fe),dT=n(fe,"LI",{});var v$e=s(dT);l7e=n(v$e,"STRONG",{});var u_t=s(l7e);Igr=r(u_t,"xlm-roberta"),u_t.forEach(t),qgr=r(v$e," \u2014 "),bQ=n(v$e,"A",{href:!0});var __t=s(bQ);Ngr=r(__t,"TFXLMRobertaForMaskedLM"),__t.forEach(t),jgr=r(v$e," (XLM-RoBERTa model)"),v$e.forEach(t),fe.forEach(t),Dgr=i(hl),T(cT.$$.fragment,hl),hl.forEach(t),gl.forEach(t),FPe=i(f),Qd=n(f,"H2",{class:!0});var wqe=s(Qd);fT=n(wqe,"A",{id:!0,class:!0,href:!0});var b_t=s(fT);i7e=n(b_t,"SPAN",{});var v_t=s(i7e);T(LL.$$.fragment,v_t),v_t.forEach(t),b_t.forEach(t),Ggr=i(wqe),d7e=n(wqe,"SPAN",{});var F_t=s(d7e);Ogr=r(F_t,"TFAutoModelForSeq2SeqLM"),F_t.forEach(t),wqe.forEach(t),TPe=i(f),rr=n(f,"DIV",{class:!0});var pl=s(rr);T(xL.$$.fragment,pl),Vgr=i(pl),Wd=n(pl,"P",{});var hK=s(Wd);Xgr=r(hK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),vQ=n(hK,"A",{href:!0});var T_t=s(vQ);zgr=r(T_t,"from_pretrained()"),T_t.forEach(t),Qgr=r(hK," class method or the "),FQ=n(hK,"A",{href:!0});var M_t=s(FQ);Wgr=r(M_t,"from_config()"),M_t.forEach(t),Hgr=r(hK,` class
method.`),hK.forEach(t),Ugr=i(pl),$L=n(pl,"P",{});var Aqe=s($L);Jgr=r(Aqe,"This class cannot be instantiated directly using "),c7e=n(Aqe,"CODE",{});var E_t=s(c7e);Ygr=r(E_t,"__init__()"),E_t.forEach(t),Kgr=r(Aqe," (throws an error)."),Aqe.forEach(t),Zgr=i(pl),Lt=n(pl,"DIV",{class:!0});var kw=s(Lt);T(kL.$$.fragment,kw),ehr=i(kw),f7e=n(kw,"P",{});var C_t=s(f7e);ohr=r(C_t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),C_t.forEach(t),rhr=i(kw),Hd=n(kw,"P",{});var pK=s(Hd);thr=r(pK,`Note:
Loading a model from its configuration file does `),m7e=n(pK,"STRONG",{});var w_t=s(m7e);ahr=r(w_t,"not"),w_t.forEach(t),nhr=r(pK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=n(pK,"A",{href:!0});var A_t=s(TQ);shr=r(A_t,"from_pretrained()"),A_t.forEach(t),lhr=r(pK," to load the model weights."),pK.forEach(t),ihr=i(kw),T(mT.$$.fragment,kw),kw.forEach(t),dhr=i(pl),xr=n(pl,"DIV",{class:!0});var ul=s(xr);T(SL.$$.fragment,ul),chr=i(ul),g7e=n(ul,"P",{});var y_t=s(g7e);fhr=r(y_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),y_t.forEach(t),mhr=i(ul),en=n(ul,"P",{});var Sw=s(en);ghr=r(Sw,"The model class to instantiate is selected based on the "),h7e=n(Sw,"CODE",{});var L_t=s(h7e);hhr=r(L_t,"model_type"),L_t.forEach(t),phr=r(Sw,` property of the config object (either
passed as an argument or loaded from `),p7e=n(Sw,"CODE",{});var x_t=s(p7e);uhr=r(x_t,"pretrained_model_name_or_path"),x_t.forEach(t),_hr=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u7e=n(Sw,"CODE",{});var $_t=s(u7e);bhr=r($_t,"pretrained_model_name_or_path"),$_t.forEach(t),vhr=r(Sw,":"),Sw.forEach(t),Fhr=i(ul),ye=n(ul,"UL",{});var Re=s(ye);gT=n(Re,"LI",{});var F$e=s(gT);_7e=n(F$e,"STRONG",{});var k_t=s(_7e);Thr=r(k_t,"bart"),k_t.forEach(t),Mhr=r(F$e," \u2014 "),MQ=n(F$e,"A",{href:!0});var S_t=s(MQ);Ehr=r(S_t,"TFBartForConditionalGeneration"),S_t.forEach(t),Chr=r(F$e," (BART model)"),F$e.forEach(t),whr=i(Re),hT=n(Re,"LI",{});var T$e=s(hT);b7e=n(T$e,"STRONG",{});var R_t=s(b7e);Ahr=r(R_t,"blenderbot"),R_t.forEach(t),yhr=r(T$e," \u2014 "),EQ=n(T$e,"A",{href:!0});var B_t=s(EQ);Lhr=r(B_t,"TFBlenderbotForConditionalGeneration"),B_t.forEach(t),xhr=r(T$e," (Blenderbot model)"),T$e.forEach(t),$hr=i(Re),pT=n(Re,"LI",{});var M$e=s(pT);v7e=n(M$e,"STRONG",{});var P_t=s(v7e);khr=r(P_t,"blenderbot-small"),P_t.forEach(t),Shr=r(M$e," \u2014 "),CQ=n(M$e,"A",{href:!0});var I_t=s(CQ);Rhr=r(I_t,"TFBlenderbotSmallForConditionalGeneration"),I_t.forEach(t),Bhr=r(M$e," (BlenderbotSmall model)"),M$e.forEach(t),Phr=i(Re),uT=n(Re,"LI",{});var E$e=s(uT);F7e=n(E$e,"STRONG",{});var q_t=s(F7e);Ihr=r(q_t,"encoder-decoder"),q_t.forEach(t),qhr=r(E$e," \u2014 "),wQ=n(E$e,"A",{href:!0});var N_t=s(wQ);Nhr=r(N_t,"TFEncoderDecoderModel"),N_t.forEach(t),jhr=r(E$e," (Encoder decoder model)"),E$e.forEach(t),Dhr=i(Re),_T=n(Re,"LI",{});var C$e=s(_T);T7e=n(C$e,"STRONG",{});var j_t=s(T7e);Ghr=r(j_t,"led"),j_t.forEach(t),Ohr=r(C$e," \u2014 "),AQ=n(C$e,"A",{href:!0});var D_t=s(AQ);Vhr=r(D_t,"TFLEDForConditionalGeneration"),D_t.forEach(t),Xhr=r(C$e," (LED model)"),C$e.forEach(t),zhr=i(Re),bT=n(Re,"LI",{});var w$e=s(bT);M7e=n(w$e,"STRONG",{});var G_t=s(M7e);Qhr=r(G_t,"marian"),G_t.forEach(t),Whr=r(w$e," \u2014 "),yQ=n(w$e,"A",{href:!0});var O_t=s(yQ);Hhr=r(O_t,"TFMarianMTModel"),O_t.forEach(t),Uhr=r(w$e," (Marian model)"),w$e.forEach(t),Jhr=i(Re),vT=n(Re,"LI",{});var A$e=s(vT);E7e=n(A$e,"STRONG",{});var V_t=s(E7e);Yhr=r(V_t,"mbart"),V_t.forEach(t),Khr=r(A$e," \u2014 "),LQ=n(A$e,"A",{href:!0});var X_t=s(LQ);Zhr=r(X_t,"TFMBartForConditionalGeneration"),X_t.forEach(t),epr=r(A$e," (mBART model)"),A$e.forEach(t),opr=i(Re),FT=n(Re,"LI",{});var y$e=s(FT);C7e=n(y$e,"STRONG",{});var z_t=s(C7e);rpr=r(z_t,"mt5"),z_t.forEach(t),tpr=r(y$e," \u2014 "),xQ=n(y$e,"A",{href:!0});var Q_t=s(xQ);apr=r(Q_t,"TFMT5ForConditionalGeneration"),Q_t.forEach(t),npr=r(y$e," (mT5 model)"),y$e.forEach(t),spr=i(Re),TT=n(Re,"LI",{});var L$e=s(TT);w7e=n(L$e,"STRONG",{});var W_t=s(w7e);lpr=r(W_t,"pegasus"),W_t.forEach(t),ipr=r(L$e," \u2014 "),$Q=n(L$e,"A",{href:!0});var H_t=s($Q);dpr=r(H_t,"TFPegasusForConditionalGeneration"),H_t.forEach(t),cpr=r(L$e," (Pegasus model)"),L$e.forEach(t),fpr=i(Re),MT=n(Re,"LI",{});var x$e=s(MT);A7e=n(x$e,"STRONG",{});var U_t=s(A7e);mpr=r(U_t,"t5"),U_t.forEach(t),gpr=r(x$e," \u2014 "),kQ=n(x$e,"A",{href:!0});var J_t=s(kQ);hpr=r(J_t,"TFT5ForConditionalGeneration"),J_t.forEach(t),ppr=r(x$e," (T5 model)"),x$e.forEach(t),Re.forEach(t),upr=i(ul),T(ET.$$.fragment,ul),ul.forEach(t),pl.forEach(t),MPe=i(f),Ud=n(f,"H2",{class:!0});var yqe=s(Ud);CT=n(yqe,"A",{id:!0,class:!0,href:!0});var Y_t=s(CT);y7e=n(Y_t,"SPAN",{});var K_t=s(y7e);T(RL.$$.fragment,K_t),K_t.forEach(t),Y_t.forEach(t),_pr=i(yqe),L7e=n(yqe,"SPAN",{});var Z_t=s(L7e);bpr=r(Z_t,"TFAutoModelForSequenceClassification"),Z_t.forEach(t),yqe.forEach(t),EPe=i(f),tr=n(f,"DIV",{class:!0});var _l=s(tr);T(BL.$$.fragment,_l),vpr=i(_l),Jd=n(_l,"P",{});var uK=s(Jd);Fpr=r(uK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),SQ=n(uK,"A",{href:!0});var e1t=s(SQ);Tpr=r(e1t,"from_pretrained()"),e1t.forEach(t),Mpr=r(uK," class method or the "),RQ=n(uK,"A",{href:!0});var o1t=s(RQ);Epr=r(o1t,"from_config()"),o1t.forEach(t),Cpr=r(uK,` class
method.`),uK.forEach(t),wpr=i(_l),PL=n(_l,"P",{});var Lqe=s(PL);Apr=r(Lqe,"This class cannot be instantiated directly using "),x7e=n(Lqe,"CODE",{});var r1t=s(x7e);ypr=r(r1t,"__init__()"),r1t.forEach(t),Lpr=r(Lqe," (throws an error)."),Lqe.forEach(t),xpr=i(_l),xt=n(_l,"DIV",{class:!0});var Rw=s(xt);T(IL.$$.fragment,Rw),$pr=i(Rw),$7e=n(Rw,"P",{});var t1t=s($7e);kpr=r(t1t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),t1t.forEach(t),Spr=i(Rw),Yd=n(Rw,"P",{});var _K=s(Yd);Rpr=r(_K,`Note:
Loading a model from its configuration file does `),k7e=n(_K,"STRONG",{});var a1t=s(k7e);Bpr=r(a1t,"not"),a1t.forEach(t),Ppr=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),BQ=n(_K,"A",{href:!0});var n1t=s(BQ);Ipr=r(n1t,"from_pretrained()"),n1t.forEach(t),qpr=r(_K," to load the model weights."),_K.forEach(t),Npr=i(Rw),T(wT.$$.fragment,Rw),Rw.forEach(t),jpr=i(_l),$r=n(_l,"DIV",{class:!0});var bl=s($r);T(qL.$$.fragment,bl),Dpr=i(bl),S7e=n(bl,"P",{});var s1t=s(S7e);Gpr=r(s1t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),s1t.forEach(t),Opr=i(bl),on=n(bl,"P",{});var Bw=s(on);Vpr=r(Bw,"The model class to instantiate is selected based on the "),R7e=n(Bw,"CODE",{});var l1t=s(R7e);Xpr=r(l1t,"model_type"),l1t.forEach(t),zpr=r(Bw,` property of the config object (either
passed as an argument or loaded from `),B7e=n(Bw,"CODE",{});var i1t=s(B7e);Qpr=r(i1t,"pretrained_model_name_or_path"),i1t.forEach(t),Wpr=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P7e=n(Bw,"CODE",{});var d1t=s(P7e);Hpr=r(d1t,"pretrained_model_name_or_path"),d1t.forEach(t),Upr=r(Bw,":"),Bw.forEach(t),Jpr=i(bl),Z=n(bl,"UL",{});var re=s(Z);AT=n(re,"LI",{});var $$e=s(AT);I7e=n($$e,"STRONG",{});var c1t=s(I7e);Ypr=r(c1t,"albert"),c1t.forEach(t),Kpr=r($$e," \u2014 "),PQ=n($$e,"A",{href:!0});var f1t=s(PQ);Zpr=r(f1t,"TFAlbertForSequenceClassification"),f1t.forEach(t),eur=r($$e," (ALBERT model)"),$$e.forEach(t),our=i(re),yT=n(re,"LI",{});var k$e=s(yT);q7e=n(k$e,"STRONG",{});var m1t=s(q7e);rur=r(m1t,"bert"),m1t.forEach(t),tur=r(k$e," \u2014 "),IQ=n(k$e,"A",{href:!0});var g1t=s(IQ);aur=r(g1t,"TFBertForSequenceClassification"),g1t.forEach(t),nur=r(k$e," (BERT model)"),k$e.forEach(t),sur=i(re),LT=n(re,"LI",{});var S$e=s(LT);N7e=n(S$e,"STRONG",{});var h1t=s(N7e);lur=r(h1t,"camembert"),h1t.forEach(t),iur=r(S$e," \u2014 "),qQ=n(S$e,"A",{href:!0});var p1t=s(qQ);dur=r(p1t,"TFCamembertForSequenceClassification"),p1t.forEach(t),cur=r(S$e," (CamemBERT model)"),S$e.forEach(t),fur=i(re),xT=n(re,"LI",{});var R$e=s(xT);j7e=n(R$e,"STRONG",{});var u1t=s(j7e);mur=r(u1t,"convbert"),u1t.forEach(t),gur=r(R$e," \u2014 "),NQ=n(R$e,"A",{href:!0});var _1t=s(NQ);hur=r(_1t,"TFConvBertForSequenceClassification"),_1t.forEach(t),pur=r(R$e," (ConvBERT model)"),R$e.forEach(t),uur=i(re),$T=n(re,"LI",{});var B$e=s($T);D7e=n(B$e,"STRONG",{});var b1t=s(D7e);_ur=r(b1t,"ctrl"),b1t.forEach(t),bur=r(B$e," \u2014 "),jQ=n(B$e,"A",{href:!0});var v1t=s(jQ);vur=r(v1t,"TFCTRLForSequenceClassification"),v1t.forEach(t),Fur=r(B$e," (CTRL model)"),B$e.forEach(t),Tur=i(re),kT=n(re,"LI",{});var P$e=s(kT);G7e=n(P$e,"STRONG",{});var F1t=s(G7e);Mur=r(F1t,"deberta"),F1t.forEach(t),Eur=r(P$e," \u2014 "),DQ=n(P$e,"A",{href:!0});var T1t=s(DQ);Cur=r(T1t,"TFDebertaForSequenceClassification"),T1t.forEach(t),wur=r(P$e," (DeBERTa model)"),P$e.forEach(t),Aur=i(re),ST=n(re,"LI",{});var I$e=s(ST);O7e=n(I$e,"STRONG",{});var M1t=s(O7e);yur=r(M1t,"deberta-v2"),M1t.forEach(t),Lur=r(I$e," \u2014 "),GQ=n(I$e,"A",{href:!0});var E1t=s(GQ);xur=r(E1t,"TFDebertaV2ForSequenceClassification"),E1t.forEach(t),$ur=r(I$e," (DeBERTa-v2 model)"),I$e.forEach(t),kur=i(re),RT=n(re,"LI",{});var q$e=s(RT);V7e=n(q$e,"STRONG",{});var C1t=s(V7e);Sur=r(C1t,"distilbert"),C1t.forEach(t),Rur=r(q$e," \u2014 "),OQ=n(q$e,"A",{href:!0});var w1t=s(OQ);Bur=r(w1t,"TFDistilBertForSequenceClassification"),w1t.forEach(t),Pur=r(q$e," (DistilBERT model)"),q$e.forEach(t),Iur=i(re),BT=n(re,"LI",{});var N$e=s(BT);X7e=n(N$e,"STRONG",{});var A1t=s(X7e);qur=r(A1t,"electra"),A1t.forEach(t),Nur=r(N$e," \u2014 "),VQ=n(N$e,"A",{href:!0});var y1t=s(VQ);jur=r(y1t,"TFElectraForSequenceClassification"),y1t.forEach(t),Dur=r(N$e," (ELECTRA model)"),N$e.forEach(t),Gur=i(re),PT=n(re,"LI",{});var j$e=s(PT);z7e=n(j$e,"STRONG",{});var L1t=s(z7e);Our=r(L1t,"flaubert"),L1t.forEach(t),Vur=r(j$e," \u2014 "),XQ=n(j$e,"A",{href:!0});var x1t=s(XQ);Xur=r(x1t,"TFFlaubertForSequenceClassification"),x1t.forEach(t),zur=r(j$e," (FlauBERT model)"),j$e.forEach(t),Qur=i(re),IT=n(re,"LI",{});var D$e=s(IT);Q7e=n(D$e,"STRONG",{});var $1t=s(Q7e);Wur=r($1t,"funnel"),$1t.forEach(t),Hur=r(D$e," \u2014 "),zQ=n(D$e,"A",{href:!0});var k1t=s(zQ);Uur=r(k1t,"TFFunnelForSequenceClassification"),k1t.forEach(t),Jur=r(D$e," (Funnel Transformer model)"),D$e.forEach(t),Yur=i(re),qT=n(re,"LI",{});var G$e=s(qT);W7e=n(G$e,"STRONG",{});var S1t=s(W7e);Kur=r(S1t,"gpt2"),S1t.forEach(t),Zur=r(G$e," \u2014 "),QQ=n(G$e,"A",{href:!0});var R1t=s(QQ);e_r=r(R1t,"TFGPT2ForSequenceClassification"),R1t.forEach(t),o_r=r(G$e," (OpenAI GPT-2 model)"),G$e.forEach(t),r_r=i(re),NT=n(re,"LI",{});var O$e=s(NT);H7e=n(O$e,"STRONG",{});var B1t=s(H7e);t_r=r(B1t,"gptj"),B1t.forEach(t),a_r=r(O$e," \u2014 "),WQ=n(O$e,"A",{href:!0});var P1t=s(WQ);n_r=r(P1t,"TFGPTJForSequenceClassification"),P1t.forEach(t),s_r=r(O$e," (GPT-J model)"),O$e.forEach(t),l_r=i(re),jT=n(re,"LI",{});var V$e=s(jT);U7e=n(V$e,"STRONG",{});var I1t=s(U7e);i_r=r(I1t,"layoutlm"),I1t.forEach(t),d_r=r(V$e," \u2014 "),HQ=n(V$e,"A",{href:!0});var q1t=s(HQ);c_r=r(q1t,"TFLayoutLMForSequenceClassification"),q1t.forEach(t),f_r=r(V$e," (LayoutLM model)"),V$e.forEach(t),m_r=i(re),DT=n(re,"LI",{});var X$e=s(DT);J7e=n(X$e,"STRONG",{});var N1t=s(J7e);g_r=r(N1t,"longformer"),N1t.forEach(t),h_r=r(X$e," \u2014 "),UQ=n(X$e,"A",{href:!0});var j1t=s(UQ);p_r=r(j1t,"TFLongformerForSequenceClassification"),j1t.forEach(t),u_r=r(X$e," (Longformer model)"),X$e.forEach(t),__r=i(re),GT=n(re,"LI",{});var z$e=s(GT);Y7e=n(z$e,"STRONG",{});var D1t=s(Y7e);b_r=r(D1t,"mobilebert"),D1t.forEach(t),v_r=r(z$e," \u2014 "),JQ=n(z$e,"A",{href:!0});var G1t=s(JQ);F_r=r(G1t,"TFMobileBertForSequenceClassification"),G1t.forEach(t),T_r=r(z$e," (MobileBERT model)"),z$e.forEach(t),M_r=i(re),OT=n(re,"LI",{});var Q$e=s(OT);K7e=n(Q$e,"STRONG",{});var O1t=s(K7e);E_r=r(O1t,"mpnet"),O1t.forEach(t),C_r=r(Q$e," \u2014 "),YQ=n(Q$e,"A",{href:!0});var V1t=s(YQ);w_r=r(V1t,"TFMPNetForSequenceClassification"),V1t.forEach(t),A_r=r(Q$e," (MPNet model)"),Q$e.forEach(t),y_r=i(re),VT=n(re,"LI",{});var W$e=s(VT);Z7e=n(W$e,"STRONG",{});var X1t=s(Z7e);L_r=r(X1t,"openai-gpt"),X1t.forEach(t),x_r=r(W$e," \u2014 "),KQ=n(W$e,"A",{href:!0});var z1t=s(KQ);$_r=r(z1t,"TFOpenAIGPTForSequenceClassification"),z1t.forEach(t),k_r=r(W$e," (OpenAI GPT model)"),W$e.forEach(t),S_r=i(re),XT=n(re,"LI",{});var H$e=s(XT);ebe=n(H$e,"STRONG",{});var Q1t=s(ebe);R_r=r(Q1t,"rembert"),Q1t.forEach(t),B_r=r(H$e," \u2014 "),ZQ=n(H$e,"A",{href:!0});var W1t=s(ZQ);P_r=r(W1t,"TFRemBertForSequenceClassification"),W1t.forEach(t),I_r=r(H$e," (RemBERT model)"),H$e.forEach(t),q_r=i(re),zT=n(re,"LI",{});var U$e=s(zT);obe=n(U$e,"STRONG",{});var H1t=s(obe);N_r=r(H1t,"roberta"),H1t.forEach(t),j_r=r(U$e," \u2014 "),eW=n(U$e,"A",{href:!0});var U1t=s(eW);D_r=r(U1t,"TFRobertaForSequenceClassification"),U1t.forEach(t),G_r=r(U$e," (RoBERTa model)"),U$e.forEach(t),O_r=i(re),QT=n(re,"LI",{});var J$e=s(QT);rbe=n(J$e,"STRONG",{});var J1t=s(rbe);V_r=r(J1t,"roformer"),J1t.forEach(t),X_r=r(J$e," \u2014 "),oW=n(J$e,"A",{href:!0});var Y1t=s(oW);z_r=r(Y1t,"TFRoFormerForSequenceClassification"),Y1t.forEach(t),Q_r=r(J$e," (RoFormer model)"),J$e.forEach(t),W_r=i(re),WT=n(re,"LI",{});var Y$e=s(WT);tbe=n(Y$e,"STRONG",{});var K1t=s(tbe);H_r=r(K1t,"tapas"),K1t.forEach(t),U_r=r(Y$e," \u2014 "),rW=n(Y$e,"A",{href:!0});var Z1t=s(rW);J_r=r(Z1t,"TFTapasForSequenceClassification"),Z1t.forEach(t),Y_r=r(Y$e," (TAPAS model)"),Y$e.forEach(t),K_r=i(re),HT=n(re,"LI",{});var K$e=s(HT);abe=n(K$e,"STRONG",{});var e7t=s(abe);Z_r=r(e7t,"transfo-xl"),e7t.forEach(t),e1r=r(K$e," \u2014 "),tW=n(K$e,"A",{href:!0});var o7t=s(tW);o1r=r(o7t,"TFTransfoXLForSequenceClassification"),o7t.forEach(t),r1r=r(K$e," (Transformer-XL model)"),K$e.forEach(t),t1r=i(re),UT=n(re,"LI",{});var Z$e=s(UT);nbe=n(Z$e,"STRONG",{});var r7t=s(nbe);a1r=r(r7t,"xlm"),r7t.forEach(t),n1r=r(Z$e," \u2014 "),aW=n(Z$e,"A",{href:!0});var t7t=s(aW);s1r=r(t7t,"TFXLMForSequenceClassification"),t7t.forEach(t),l1r=r(Z$e," (XLM model)"),Z$e.forEach(t),i1r=i(re),JT=n(re,"LI",{});var eke=s(JT);sbe=n(eke,"STRONG",{});var a7t=s(sbe);d1r=r(a7t,"xlm-roberta"),a7t.forEach(t),c1r=r(eke," \u2014 "),nW=n(eke,"A",{href:!0});var n7t=s(nW);f1r=r(n7t,"TFXLMRobertaForSequenceClassification"),n7t.forEach(t),m1r=r(eke," (XLM-RoBERTa model)"),eke.forEach(t),g1r=i(re),YT=n(re,"LI",{});var oke=s(YT);lbe=n(oke,"STRONG",{});var s7t=s(lbe);h1r=r(s7t,"xlnet"),s7t.forEach(t),p1r=r(oke," \u2014 "),sW=n(oke,"A",{href:!0});var l7t=s(sW);u1r=r(l7t,"TFXLNetForSequenceClassification"),l7t.forEach(t),_1r=r(oke," (XLNet model)"),oke.forEach(t),re.forEach(t),b1r=i(bl),T(KT.$$.fragment,bl),bl.forEach(t),_l.forEach(t),CPe=i(f),Kd=n(f,"H2",{class:!0});var xqe=s(Kd);ZT=n(xqe,"A",{id:!0,class:!0,href:!0});var i7t=s(ZT);ibe=n(i7t,"SPAN",{});var d7t=s(ibe);T(NL.$$.fragment,d7t),d7t.forEach(t),i7t.forEach(t),v1r=i(xqe),dbe=n(xqe,"SPAN",{});var c7t=s(dbe);F1r=r(c7t,"TFAutoModelForMultipleChoice"),c7t.forEach(t),xqe.forEach(t),wPe=i(f),ar=n(f,"DIV",{class:!0});var vl=s(ar);T(jL.$$.fragment,vl),T1r=i(vl),Zd=n(vl,"P",{});var bK=s(Zd);M1r=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lW=n(bK,"A",{href:!0});var f7t=s(lW);E1r=r(f7t,"from_pretrained()"),f7t.forEach(t),C1r=r(bK," class method or the "),iW=n(bK,"A",{href:!0});var m7t=s(iW);w1r=r(m7t,"from_config()"),m7t.forEach(t),A1r=r(bK,` class
method.`),bK.forEach(t),y1r=i(vl),DL=n(vl,"P",{});var $qe=s(DL);L1r=r($qe,"This class cannot be instantiated directly using "),cbe=n($qe,"CODE",{});var g7t=s(cbe);x1r=r(g7t,"__init__()"),g7t.forEach(t),$1r=r($qe," (throws an error)."),$qe.forEach(t),k1r=i(vl),$t=n(vl,"DIV",{class:!0});var Pw=s($t);T(GL.$$.fragment,Pw),S1r=i(Pw),fbe=n(Pw,"P",{});var h7t=s(fbe);R1r=r(h7t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),h7t.forEach(t),B1r=i(Pw),ec=n(Pw,"P",{});var vK=s(ec);P1r=r(vK,`Note:
Loading a model from its configuration file does `),mbe=n(vK,"STRONG",{});var p7t=s(mbe);I1r=r(p7t,"not"),p7t.forEach(t),q1r=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n(vK,"A",{href:!0});var u7t=s(dW);N1r=r(u7t,"from_pretrained()"),u7t.forEach(t),j1r=r(vK," to load the model weights."),vK.forEach(t),D1r=i(Pw),T(eM.$$.fragment,Pw),Pw.forEach(t),G1r=i(vl),kr=n(vl,"DIV",{class:!0});var Fl=s(kr);T(OL.$$.fragment,Fl),O1r=i(Fl),gbe=n(Fl,"P",{});var _7t=s(gbe);V1r=r(_7t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_7t.forEach(t),X1r=i(Fl),rn=n(Fl,"P",{});var Iw=s(rn);z1r=r(Iw,"The model class to instantiate is selected based on the "),hbe=n(Iw,"CODE",{});var b7t=s(hbe);Q1r=r(b7t,"model_type"),b7t.forEach(t),W1r=r(Iw,` property of the config object (either
passed as an argument or loaded from `),pbe=n(Iw,"CODE",{});var v7t=s(pbe);H1r=r(v7t,"pretrained_model_name_or_path"),v7t.forEach(t),U1r=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=n(Iw,"CODE",{});var F7t=s(ube);J1r=r(F7t,"pretrained_model_name_or_path"),F7t.forEach(t),Y1r=r(Iw,":"),Iw.forEach(t),K1r=i(Fl),pe=n(Fl,"UL",{});var _e=s(pe);oM=n(_e,"LI",{});var rke=s(oM);_be=n(rke,"STRONG",{});var T7t=s(_be);Z1r=r(T7t,"albert"),T7t.forEach(t),e7r=r(rke," \u2014 "),cW=n(rke,"A",{href:!0});var M7t=s(cW);o7r=r(M7t,"TFAlbertForMultipleChoice"),M7t.forEach(t),r7r=r(rke," (ALBERT model)"),rke.forEach(t),t7r=i(_e),rM=n(_e,"LI",{});var tke=s(rM);bbe=n(tke,"STRONG",{});var E7t=s(bbe);a7r=r(E7t,"bert"),E7t.forEach(t),n7r=r(tke," \u2014 "),fW=n(tke,"A",{href:!0});var C7t=s(fW);s7r=r(C7t,"TFBertForMultipleChoice"),C7t.forEach(t),l7r=r(tke," (BERT model)"),tke.forEach(t),i7r=i(_e),tM=n(_e,"LI",{});var ake=s(tM);vbe=n(ake,"STRONG",{});var w7t=s(vbe);d7r=r(w7t,"camembert"),w7t.forEach(t),c7r=r(ake," \u2014 "),mW=n(ake,"A",{href:!0});var A7t=s(mW);f7r=r(A7t,"TFCamembertForMultipleChoice"),A7t.forEach(t),m7r=r(ake," (CamemBERT model)"),ake.forEach(t),g7r=i(_e),aM=n(_e,"LI",{});var nke=s(aM);Fbe=n(nke,"STRONG",{});var y7t=s(Fbe);h7r=r(y7t,"convbert"),y7t.forEach(t),p7r=r(nke," \u2014 "),gW=n(nke,"A",{href:!0});var L7t=s(gW);u7r=r(L7t,"TFConvBertForMultipleChoice"),L7t.forEach(t),_7r=r(nke," (ConvBERT model)"),nke.forEach(t),b7r=i(_e),nM=n(_e,"LI",{});var ske=s(nM);Tbe=n(ske,"STRONG",{});var x7t=s(Tbe);v7r=r(x7t,"distilbert"),x7t.forEach(t),F7r=r(ske," \u2014 "),hW=n(ske,"A",{href:!0});var $7t=s(hW);T7r=r($7t,"TFDistilBertForMultipleChoice"),$7t.forEach(t),M7r=r(ske," (DistilBERT model)"),ske.forEach(t),E7r=i(_e),sM=n(_e,"LI",{});var lke=s(sM);Mbe=n(lke,"STRONG",{});var k7t=s(Mbe);C7r=r(k7t,"electra"),k7t.forEach(t),w7r=r(lke," \u2014 "),pW=n(lke,"A",{href:!0});var S7t=s(pW);A7r=r(S7t,"TFElectraForMultipleChoice"),S7t.forEach(t),y7r=r(lke," (ELECTRA model)"),lke.forEach(t),L7r=i(_e),lM=n(_e,"LI",{});var ike=s(lM);Ebe=n(ike,"STRONG",{});var R7t=s(Ebe);x7r=r(R7t,"flaubert"),R7t.forEach(t),$7r=r(ike," \u2014 "),uW=n(ike,"A",{href:!0});var B7t=s(uW);k7r=r(B7t,"TFFlaubertForMultipleChoice"),B7t.forEach(t),S7r=r(ike," (FlauBERT model)"),ike.forEach(t),R7r=i(_e),iM=n(_e,"LI",{});var dke=s(iM);Cbe=n(dke,"STRONG",{});var P7t=s(Cbe);B7r=r(P7t,"funnel"),P7t.forEach(t),P7r=r(dke," \u2014 "),_W=n(dke,"A",{href:!0});var I7t=s(_W);I7r=r(I7t,"TFFunnelForMultipleChoice"),I7t.forEach(t),q7r=r(dke," (Funnel Transformer model)"),dke.forEach(t),N7r=i(_e),dM=n(_e,"LI",{});var cke=s(dM);wbe=n(cke,"STRONG",{});var q7t=s(wbe);j7r=r(q7t,"longformer"),q7t.forEach(t),D7r=r(cke," \u2014 "),bW=n(cke,"A",{href:!0});var N7t=s(bW);G7r=r(N7t,"TFLongformerForMultipleChoice"),N7t.forEach(t),O7r=r(cke," (Longformer model)"),cke.forEach(t),V7r=i(_e),cM=n(_e,"LI",{});var fke=s(cM);Abe=n(fke,"STRONG",{});var j7t=s(Abe);X7r=r(j7t,"mobilebert"),j7t.forEach(t),z7r=r(fke," \u2014 "),vW=n(fke,"A",{href:!0});var D7t=s(vW);Q7r=r(D7t,"TFMobileBertForMultipleChoice"),D7t.forEach(t),W7r=r(fke," (MobileBERT model)"),fke.forEach(t),H7r=i(_e),fM=n(_e,"LI",{});var mke=s(fM);ybe=n(mke,"STRONG",{});var G7t=s(ybe);U7r=r(G7t,"mpnet"),G7t.forEach(t),J7r=r(mke," \u2014 "),FW=n(mke,"A",{href:!0});var O7t=s(FW);Y7r=r(O7t,"TFMPNetForMultipleChoice"),O7t.forEach(t),K7r=r(mke," (MPNet model)"),mke.forEach(t),Z7r=i(_e),mM=n(_e,"LI",{});var gke=s(mM);Lbe=n(gke,"STRONG",{});var V7t=s(Lbe);ebr=r(V7t,"rembert"),V7t.forEach(t),obr=r(gke," \u2014 "),TW=n(gke,"A",{href:!0});var X7t=s(TW);rbr=r(X7t,"TFRemBertForMultipleChoice"),X7t.forEach(t),tbr=r(gke," (RemBERT model)"),gke.forEach(t),abr=i(_e),gM=n(_e,"LI",{});var hke=s(gM);xbe=n(hke,"STRONG",{});var z7t=s(xbe);nbr=r(z7t,"roberta"),z7t.forEach(t),sbr=r(hke," \u2014 "),MW=n(hke,"A",{href:!0});var Q7t=s(MW);lbr=r(Q7t,"TFRobertaForMultipleChoice"),Q7t.forEach(t),ibr=r(hke," (RoBERTa model)"),hke.forEach(t),dbr=i(_e),hM=n(_e,"LI",{});var pke=s(hM);$be=n(pke,"STRONG",{});var W7t=s($be);cbr=r(W7t,"roformer"),W7t.forEach(t),fbr=r(pke," \u2014 "),EW=n(pke,"A",{href:!0});var H7t=s(EW);mbr=r(H7t,"TFRoFormerForMultipleChoice"),H7t.forEach(t),gbr=r(pke," (RoFormer model)"),pke.forEach(t),hbr=i(_e),pM=n(_e,"LI",{});var uke=s(pM);kbe=n(uke,"STRONG",{});var U7t=s(kbe);pbr=r(U7t,"xlm"),U7t.forEach(t),ubr=r(uke," \u2014 "),CW=n(uke,"A",{href:!0});var J7t=s(CW);_br=r(J7t,"TFXLMForMultipleChoice"),J7t.forEach(t),bbr=r(uke," (XLM model)"),uke.forEach(t),vbr=i(_e),uM=n(_e,"LI",{});var _ke=s(uM);Sbe=n(_ke,"STRONG",{});var Y7t=s(Sbe);Fbr=r(Y7t,"xlm-roberta"),Y7t.forEach(t),Tbr=r(_ke," \u2014 "),wW=n(_ke,"A",{href:!0});var K7t=s(wW);Mbr=r(K7t,"TFXLMRobertaForMultipleChoice"),K7t.forEach(t),Ebr=r(_ke," (XLM-RoBERTa model)"),_ke.forEach(t),Cbr=i(_e),_M=n(_e,"LI",{});var bke=s(_M);Rbe=n(bke,"STRONG",{});var Z7t=s(Rbe);wbr=r(Z7t,"xlnet"),Z7t.forEach(t),Abr=r(bke," \u2014 "),AW=n(bke,"A",{href:!0});var ebt=s(AW);ybr=r(ebt,"TFXLNetForMultipleChoice"),ebt.forEach(t),Lbr=r(bke," (XLNet model)"),bke.forEach(t),_e.forEach(t),xbr=i(Fl),T(bM.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),APe=i(f),oc=n(f,"H2",{class:!0});var kqe=s(oc);vM=n(kqe,"A",{id:!0,class:!0,href:!0});var obt=s(vM);Bbe=n(obt,"SPAN",{});var rbt=s(Bbe);T(VL.$$.fragment,rbt),rbt.forEach(t),obt.forEach(t),$br=i(kqe),Pbe=n(kqe,"SPAN",{});var tbt=s(Pbe);kbr=r(tbt,"TFAutoModelForTableQuestionAnswering"),tbt.forEach(t),kqe.forEach(t),yPe=i(f),nr=n(f,"DIV",{class:!0});var Tl=s(nr);T(XL.$$.fragment,Tl),Sbr=i(Tl),rc=n(Tl,"P",{});var FK=s(rc);Rbr=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yW=n(FK,"A",{href:!0});var abt=s(yW);Bbr=r(abt,"from_pretrained()"),abt.forEach(t),Pbr=r(FK," class method or the "),LW=n(FK,"A",{href:!0});var nbt=s(LW);Ibr=r(nbt,"from_config()"),nbt.forEach(t),qbr=r(FK,` class
method.`),FK.forEach(t),Nbr=i(Tl),zL=n(Tl,"P",{});var Sqe=s(zL);jbr=r(Sqe,"This class cannot be instantiated directly using "),Ibe=n(Sqe,"CODE",{});var sbt=s(Ibe);Dbr=r(sbt,"__init__()"),sbt.forEach(t),Gbr=r(Sqe," (throws an error)."),Sqe.forEach(t),Obr=i(Tl),kt=n(Tl,"DIV",{class:!0});var qw=s(kt);T(QL.$$.fragment,qw),Vbr=i(qw),qbe=n(qw,"P",{});var lbt=s(qbe);Xbr=r(lbt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),lbt.forEach(t),zbr=i(qw),tc=n(qw,"P",{});var TK=s(tc);Qbr=r(TK,`Note:
Loading a model from its configuration file does `),Nbe=n(TK,"STRONG",{});var ibt=s(Nbe);Wbr=r(ibt,"not"),ibt.forEach(t),Hbr=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=n(TK,"A",{href:!0});var dbt=s(xW);Ubr=r(dbt,"from_pretrained()"),dbt.forEach(t),Jbr=r(TK," to load the model weights."),TK.forEach(t),Ybr=i(qw),T(FM.$$.fragment,qw),qw.forEach(t),Kbr=i(Tl),Sr=n(Tl,"DIV",{class:!0});var Ml=s(Sr);T(WL.$$.fragment,Ml),Zbr=i(Ml),jbe=n(Ml,"P",{});var cbt=s(jbe);e2r=r(cbt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),cbt.forEach(t),o2r=i(Ml),tn=n(Ml,"P",{});var Nw=s(tn);r2r=r(Nw,"The model class to instantiate is selected based on the "),Dbe=n(Nw,"CODE",{});var fbt=s(Dbe);t2r=r(fbt,"model_type"),fbt.forEach(t),a2r=r(Nw,` property of the config object (either
passed as an argument or loaded from `),Gbe=n(Nw,"CODE",{});var mbt=s(Gbe);n2r=r(mbt,"pretrained_model_name_or_path"),mbt.forEach(t),s2r=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=n(Nw,"CODE",{});var gbt=s(Obe);l2r=r(gbt,"pretrained_model_name_or_path"),gbt.forEach(t),i2r=r(Nw,":"),Nw.forEach(t),d2r=i(Ml),Vbe=n(Ml,"UL",{});var hbt=s(Vbe);TM=n(hbt,"LI",{});var vke=s(TM);Xbe=n(vke,"STRONG",{});var pbt=s(Xbe);c2r=r(pbt,"tapas"),pbt.forEach(t),f2r=r(vke," \u2014 "),$W=n(vke,"A",{href:!0});var ubt=s($W);m2r=r(ubt,"TFTapasForQuestionAnswering"),ubt.forEach(t),g2r=r(vke," (TAPAS model)"),vke.forEach(t),hbt.forEach(t),h2r=i(Ml),T(MM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),LPe=i(f),ac=n(f,"H2",{class:!0});var Rqe=s(ac);EM=n(Rqe,"A",{id:!0,class:!0,href:!0});var _bt=s(EM);zbe=n(_bt,"SPAN",{});var bbt=s(zbe);T(HL.$$.fragment,bbt),bbt.forEach(t),_bt.forEach(t),p2r=i(Rqe),Qbe=n(Rqe,"SPAN",{});var vbt=s(Qbe);u2r=r(vbt,"TFAutoModelForTokenClassification"),vbt.forEach(t),Rqe.forEach(t),xPe=i(f),sr=n(f,"DIV",{class:!0});var El=s(sr);T(UL.$$.fragment,El),_2r=i(El),nc=n(El,"P",{});var MK=s(nc);b2r=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kW=n(MK,"A",{href:!0});var Fbt=s(kW);v2r=r(Fbt,"from_pretrained()"),Fbt.forEach(t),F2r=r(MK," class method or the "),SW=n(MK,"A",{href:!0});var Tbt=s(SW);T2r=r(Tbt,"from_config()"),Tbt.forEach(t),M2r=r(MK,` class
method.`),MK.forEach(t),E2r=i(El),JL=n(El,"P",{});var Bqe=s(JL);C2r=r(Bqe,"This class cannot be instantiated directly using "),Wbe=n(Bqe,"CODE",{});var Mbt=s(Wbe);w2r=r(Mbt,"__init__()"),Mbt.forEach(t),A2r=r(Bqe," (throws an error)."),Bqe.forEach(t),y2r=i(El),St=n(El,"DIV",{class:!0});var jw=s(St);T(YL.$$.fragment,jw),L2r=i(jw),Hbe=n(jw,"P",{});var Ebt=s(Hbe);x2r=r(Ebt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ebt.forEach(t),$2r=i(jw),sc=n(jw,"P",{});var EK=s(sc);k2r=r(EK,`Note:
Loading a model from its configuration file does `),Ube=n(EK,"STRONG",{});var Cbt=s(Ube);S2r=r(Cbt,"not"),Cbt.forEach(t),R2r=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=n(EK,"A",{href:!0});var wbt=s(RW);B2r=r(wbt,"from_pretrained()"),wbt.forEach(t),P2r=r(EK," to load the model weights."),EK.forEach(t),I2r=i(jw),T(CM.$$.fragment,jw),jw.forEach(t),q2r=i(El),Rr=n(El,"DIV",{class:!0});var Cl=s(Rr);T(KL.$$.fragment,Cl),N2r=i(Cl),Jbe=n(Cl,"P",{});var Abt=s(Jbe);j2r=r(Abt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Abt.forEach(t),D2r=i(Cl),an=n(Cl,"P",{});var Dw=s(an);G2r=r(Dw,"The model class to instantiate is selected based on the "),Ybe=n(Dw,"CODE",{});var ybt=s(Ybe);O2r=r(ybt,"model_type"),ybt.forEach(t),V2r=r(Dw,` property of the config object (either
passed as an argument or loaded from `),Kbe=n(Dw,"CODE",{});var Lbt=s(Kbe);X2r=r(Lbt,"pretrained_model_name_or_path"),Lbt.forEach(t),z2r=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=n(Dw,"CODE",{});var xbt=s(Zbe);Q2r=r(xbt,"pretrained_model_name_or_path"),xbt.forEach(t),W2r=r(Dw,":"),Dw.forEach(t),H2r=i(Cl),de=n(Cl,"UL",{});var me=s(de);wM=n(me,"LI",{});var Fke=s(wM);e2e=n(Fke,"STRONG",{});var $bt=s(e2e);U2r=r($bt,"albert"),$bt.forEach(t),J2r=r(Fke," \u2014 "),BW=n(Fke,"A",{href:!0});var kbt=s(BW);Y2r=r(kbt,"TFAlbertForTokenClassification"),kbt.forEach(t),K2r=r(Fke," (ALBERT model)"),Fke.forEach(t),Z2r=i(me),AM=n(me,"LI",{});var Tke=s(AM);o2e=n(Tke,"STRONG",{});var Sbt=s(o2e);e3r=r(Sbt,"bert"),Sbt.forEach(t),o3r=r(Tke," \u2014 "),PW=n(Tke,"A",{href:!0});var Rbt=s(PW);r3r=r(Rbt,"TFBertForTokenClassification"),Rbt.forEach(t),t3r=r(Tke," (BERT model)"),Tke.forEach(t),a3r=i(me),yM=n(me,"LI",{});var Mke=s(yM);r2e=n(Mke,"STRONG",{});var Bbt=s(r2e);n3r=r(Bbt,"camembert"),Bbt.forEach(t),s3r=r(Mke," \u2014 "),IW=n(Mke,"A",{href:!0});var Pbt=s(IW);l3r=r(Pbt,"TFCamembertForTokenClassification"),Pbt.forEach(t),i3r=r(Mke," (CamemBERT model)"),Mke.forEach(t),d3r=i(me),LM=n(me,"LI",{});var Eke=s(LM);t2e=n(Eke,"STRONG",{});var Ibt=s(t2e);c3r=r(Ibt,"convbert"),Ibt.forEach(t),f3r=r(Eke," \u2014 "),qW=n(Eke,"A",{href:!0});var qbt=s(qW);m3r=r(qbt,"TFConvBertForTokenClassification"),qbt.forEach(t),g3r=r(Eke," (ConvBERT model)"),Eke.forEach(t),h3r=i(me),xM=n(me,"LI",{});var Cke=s(xM);a2e=n(Cke,"STRONG",{});var Nbt=s(a2e);p3r=r(Nbt,"deberta"),Nbt.forEach(t),u3r=r(Cke," \u2014 "),NW=n(Cke,"A",{href:!0});var jbt=s(NW);_3r=r(jbt,"TFDebertaForTokenClassification"),jbt.forEach(t),b3r=r(Cke," (DeBERTa model)"),Cke.forEach(t),v3r=i(me),$M=n(me,"LI",{});var wke=s($M);n2e=n(wke,"STRONG",{});var Dbt=s(n2e);F3r=r(Dbt,"deberta-v2"),Dbt.forEach(t),T3r=r(wke," \u2014 "),jW=n(wke,"A",{href:!0});var Gbt=s(jW);M3r=r(Gbt,"TFDebertaV2ForTokenClassification"),Gbt.forEach(t),E3r=r(wke," (DeBERTa-v2 model)"),wke.forEach(t),C3r=i(me),kM=n(me,"LI",{});var Ake=s(kM);s2e=n(Ake,"STRONG",{});var Obt=s(s2e);w3r=r(Obt,"distilbert"),Obt.forEach(t),A3r=r(Ake," \u2014 "),DW=n(Ake,"A",{href:!0});var Vbt=s(DW);y3r=r(Vbt,"TFDistilBertForTokenClassification"),Vbt.forEach(t),L3r=r(Ake," (DistilBERT model)"),Ake.forEach(t),x3r=i(me),SM=n(me,"LI",{});var yke=s(SM);l2e=n(yke,"STRONG",{});var Xbt=s(l2e);$3r=r(Xbt,"electra"),Xbt.forEach(t),k3r=r(yke," \u2014 "),GW=n(yke,"A",{href:!0});var zbt=s(GW);S3r=r(zbt,"TFElectraForTokenClassification"),zbt.forEach(t),R3r=r(yke," (ELECTRA model)"),yke.forEach(t),B3r=i(me),RM=n(me,"LI",{});var Lke=s(RM);i2e=n(Lke,"STRONG",{});var Qbt=s(i2e);P3r=r(Qbt,"flaubert"),Qbt.forEach(t),I3r=r(Lke," \u2014 "),OW=n(Lke,"A",{href:!0});var Wbt=s(OW);q3r=r(Wbt,"TFFlaubertForTokenClassification"),Wbt.forEach(t),N3r=r(Lke," (FlauBERT model)"),Lke.forEach(t),j3r=i(me),BM=n(me,"LI",{});var xke=s(BM);d2e=n(xke,"STRONG",{});var Hbt=s(d2e);D3r=r(Hbt,"funnel"),Hbt.forEach(t),G3r=r(xke," \u2014 "),VW=n(xke,"A",{href:!0});var Ubt=s(VW);O3r=r(Ubt,"TFFunnelForTokenClassification"),Ubt.forEach(t),V3r=r(xke," (Funnel Transformer model)"),xke.forEach(t),X3r=i(me),PM=n(me,"LI",{});var $ke=s(PM);c2e=n($ke,"STRONG",{});var Jbt=s(c2e);z3r=r(Jbt,"layoutlm"),Jbt.forEach(t),Q3r=r($ke," \u2014 "),XW=n($ke,"A",{href:!0});var Ybt=s(XW);W3r=r(Ybt,"TFLayoutLMForTokenClassification"),Ybt.forEach(t),H3r=r($ke," (LayoutLM model)"),$ke.forEach(t),U3r=i(me),IM=n(me,"LI",{});var kke=s(IM);f2e=n(kke,"STRONG",{});var Kbt=s(f2e);J3r=r(Kbt,"longformer"),Kbt.forEach(t),Y3r=r(kke," \u2014 "),zW=n(kke,"A",{href:!0});var Zbt=s(zW);K3r=r(Zbt,"TFLongformerForTokenClassification"),Zbt.forEach(t),Z3r=r(kke," (Longformer model)"),kke.forEach(t),evr=i(me),qM=n(me,"LI",{});var Ske=s(qM);m2e=n(Ske,"STRONG",{});var e2t=s(m2e);ovr=r(e2t,"mobilebert"),e2t.forEach(t),rvr=r(Ske," \u2014 "),QW=n(Ske,"A",{href:!0});var o2t=s(QW);tvr=r(o2t,"TFMobileBertForTokenClassification"),o2t.forEach(t),avr=r(Ske," (MobileBERT model)"),Ske.forEach(t),nvr=i(me),NM=n(me,"LI",{});var Rke=s(NM);g2e=n(Rke,"STRONG",{});var r2t=s(g2e);svr=r(r2t,"mpnet"),r2t.forEach(t),lvr=r(Rke," \u2014 "),WW=n(Rke,"A",{href:!0});var t2t=s(WW);ivr=r(t2t,"TFMPNetForTokenClassification"),t2t.forEach(t),dvr=r(Rke," (MPNet model)"),Rke.forEach(t),cvr=i(me),jM=n(me,"LI",{});var Bke=s(jM);h2e=n(Bke,"STRONG",{});var a2t=s(h2e);fvr=r(a2t,"rembert"),a2t.forEach(t),mvr=r(Bke," \u2014 "),HW=n(Bke,"A",{href:!0});var n2t=s(HW);gvr=r(n2t,"TFRemBertForTokenClassification"),n2t.forEach(t),hvr=r(Bke," (RemBERT model)"),Bke.forEach(t),pvr=i(me),DM=n(me,"LI",{});var Pke=s(DM);p2e=n(Pke,"STRONG",{});var s2t=s(p2e);uvr=r(s2t,"roberta"),s2t.forEach(t),_vr=r(Pke," \u2014 "),UW=n(Pke,"A",{href:!0});var l2t=s(UW);bvr=r(l2t,"TFRobertaForTokenClassification"),l2t.forEach(t),vvr=r(Pke," (RoBERTa model)"),Pke.forEach(t),Fvr=i(me),GM=n(me,"LI",{});var Ike=s(GM);u2e=n(Ike,"STRONG",{});var i2t=s(u2e);Tvr=r(i2t,"roformer"),i2t.forEach(t),Mvr=r(Ike," \u2014 "),JW=n(Ike,"A",{href:!0});var d2t=s(JW);Evr=r(d2t,"TFRoFormerForTokenClassification"),d2t.forEach(t),Cvr=r(Ike," (RoFormer model)"),Ike.forEach(t),wvr=i(me),OM=n(me,"LI",{});var qke=s(OM);_2e=n(qke,"STRONG",{});var c2t=s(_2e);Avr=r(c2t,"xlm"),c2t.forEach(t),yvr=r(qke," \u2014 "),YW=n(qke,"A",{href:!0});var f2t=s(YW);Lvr=r(f2t,"TFXLMForTokenClassification"),f2t.forEach(t),xvr=r(qke," (XLM model)"),qke.forEach(t),$vr=i(me),VM=n(me,"LI",{});var Nke=s(VM);b2e=n(Nke,"STRONG",{});var m2t=s(b2e);kvr=r(m2t,"xlm-roberta"),m2t.forEach(t),Svr=r(Nke," \u2014 "),KW=n(Nke,"A",{href:!0});var g2t=s(KW);Rvr=r(g2t,"TFXLMRobertaForTokenClassification"),g2t.forEach(t),Bvr=r(Nke," (XLM-RoBERTa model)"),Nke.forEach(t),Pvr=i(me),XM=n(me,"LI",{});var jke=s(XM);v2e=n(jke,"STRONG",{});var h2t=s(v2e);Ivr=r(h2t,"xlnet"),h2t.forEach(t),qvr=r(jke," \u2014 "),ZW=n(jke,"A",{href:!0});var p2t=s(ZW);Nvr=r(p2t,"TFXLNetForTokenClassification"),p2t.forEach(t),jvr=r(jke," (XLNet model)"),jke.forEach(t),me.forEach(t),Dvr=i(Cl),T(zM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),$Pe=i(f),lc=n(f,"H2",{class:!0});var Pqe=s(lc);QM=n(Pqe,"A",{id:!0,class:!0,href:!0});var u2t=s(QM);F2e=n(u2t,"SPAN",{});var _2t=s(F2e);T(ZL.$$.fragment,_2t),_2t.forEach(t),u2t.forEach(t),Gvr=i(Pqe),T2e=n(Pqe,"SPAN",{});var b2t=s(T2e);Ovr=r(b2t,"TFAutoModelForQuestionAnswering"),b2t.forEach(t),Pqe.forEach(t),kPe=i(f),lr=n(f,"DIV",{class:!0});var wl=s(lr);T(e8.$$.fragment,wl),Vvr=i(wl),ic=n(wl,"P",{});var CK=s(ic);Xvr=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eH=n(CK,"A",{href:!0});var v2t=s(eH);zvr=r(v2t,"from_pretrained()"),v2t.forEach(t),Qvr=r(CK," class method or the "),oH=n(CK,"A",{href:!0});var F2t=s(oH);Wvr=r(F2t,"from_config()"),F2t.forEach(t),Hvr=r(CK,` class
method.`),CK.forEach(t),Uvr=i(wl),o8=n(wl,"P",{});var Iqe=s(o8);Jvr=r(Iqe,"This class cannot be instantiated directly using "),M2e=n(Iqe,"CODE",{});var T2t=s(M2e);Yvr=r(T2t,"__init__()"),T2t.forEach(t),Kvr=r(Iqe," (throws an error)."),Iqe.forEach(t),Zvr=i(wl),Rt=n(wl,"DIV",{class:!0});var Gw=s(Rt);T(r8.$$.fragment,Gw),eFr=i(Gw),E2e=n(Gw,"P",{});var M2t=s(E2e);oFr=r(M2t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),M2t.forEach(t),rFr=i(Gw),dc=n(Gw,"P",{});var wK=s(dc);tFr=r(wK,`Note:
Loading a model from its configuration file does `),C2e=n(wK,"STRONG",{});var E2t=s(C2e);aFr=r(E2t,"not"),E2t.forEach(t),nFr=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=n(wK,"A",{href:!0});var C2t=s(rH);sFr=r(C2t,"from_pretrained()"),C2t.forEach(t),lFr=r(wK," to load the model weights."),wK.forEach(t),iFr=i(Gw),T(WM.$$.fragment,Gw),Gw.forEach(t),dFr=i(wl),Br=n(wl,"DIV",{class:!0});var Al=s(Br);T(t8.$$.fragment,Al),cFr=i(Al),w2e=n(Al,"P",{});var w2t=s(w2e);fFr=r(w2t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),w2t.forEach(t),mFr=i(Al),nn=n(Al,"P",{});var Ow=s(nn);gFr=r(Ow,"The model class to instantiate is selected based on the "),A2e=n(Ow,"CODE",{});var A2t=s(A2e);hFr=r(A2t,"model_type"),A2t.forEach(t),pFr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),y2e=n(Ow,"CODE",{});var y2t=s(y2e);uFr=r(y2t,"pretrained_model_name_or_path"),y2t.forEach(t),_Fr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=n(Ow,"CODE",{});var L2t=s(L2e);bFr=r(L2t,"pretrained_model_name_or_path"),L2t.forEach(t),vFr=r(Ow,":"),Ow.forEach(t),FFr=i(Al),ce=n(Al,"UL",{});var ge=s(ce);HM=n(ge,"LI",{});var Dke=s(HM);x2e=n(Dke,"STRONG",{});var x2t=s(x2e);TFr=r(x2t,"albert"),x2t.forEach(t),MFr=r(Dke," \u2014 "),tH=n(Dke,"A",{href:!0});var $2t=s(tH);EFr=r($2t,"TFAlbertForQuestionAnswering"),$2t.forEach(t),CFr=r(Dke," (ALBERT model)"),Dke.forEach(t),wFr=i(ge),UM=n(ge,"LI",{});var Gke=s(UM);$2e=n(Gke,"STRONG",{});var k2t=s($2e);AFr=r(k2t,"bert"),k2t.forEach(t),yFr=r(Gke," \u2014 "),aH=n(Gke,"A",{href:!0});var S2t=s(aH);LFr=r(S2t,"TFBertForQuestionAnswering"),S2t.forEach(t),xFr=r(Gke," (BERT model)"),Gke.forEach(t),$Fr=i(ge),JM=n(ge,"LI",{});var Oke=s(JM);k2e=n(Oke,"STRONG",{});var R2t=s(k2e);kFr=r(R2t,"camembert"),R2t.forEach(t),SFr=r(Oke," \u2014 "),nH=n(Oke,"A",{href:!0});var B2t=s(nH);RFr=r(B2t,"TFCamembertForQuestionAnswering"),B2t.forEach(t),BFr=r(Oke," (CamemBERT model)"),Oke.forEach(t),PFr=i(ge),YM=n(ge,"LI",{});var Vke=s(YM);S2e=n(Vke,"STRONG",{});var P2t=s(S2e);IFr=r(P2t,"convbert"),P2t.forEach(t),qFr=r(Vke," \u2014 "),sH=n(Vke,"A",{href:!0});var I2t=s(sH);NFr=r(I2t,"TFConvBertForQuestionAnswering"),I2t.forEach(t),jFr=r(Vke," (ConvBERT model)"),Vke.forEach(t),DFr=i(ge),KM=n(ge,"LI",{});var Xke=s(KM);R2e=n(Xke,"STRONG",{});var q2t=s(R2e);GFr=r(q2t,"deberta"),q2t.forEach(t),OFr=r(Xke," \u2014 "),lH=n(Xke,"A",{href:!0});var N2t=s(lH);VFr=r(N2t,"TFDebertaForQuestionAnswering"),N2t.forEach(t),XFr=r(Xke," (DeBERTa model)"),Xke.forEach(t),zFr=i(ge),ZM=n(ge,"LI",{});var zke=s(ZM);B2e=n(zke,"STRONG",{});var j2t=s(B2e);QFr=r(j2t,"deberta-v2"),j2t.forEach(t),WFr=r(zke," \u2014 "),iH=n(zke,"A",{href:!0});var D2t=s(iH);HFr=r(D2t,"TFDebertaV2ForQuestionAnswering"),D2t.forEach(t),UFr=r(zke," (DeBERTa-v2 model)"),zke.forEach(t),JFr=i(ge),e4=n(ge,"LI",{});var Qke=s(e4);P2e=n(Qke,"STRONG",{});var G2t=s(P2e);YFr=r(G2t,"distilbert"),G2t.forEach(t),KFr=r(Qke," \u2014 "),dH=n(Qke,"A",{href:!0});var O2t=s(dH);ZFr=r(O2t,"TFDistilBertForQuestionAnswering"),O2t.forEach(t),e0r=r(Qke," (DistilBERT model)"),Qke.forEach(t),o0r=i(ge),o4=n(ge,"LI",{});var Wke=s(o4);I2e=n(Wke,"STRONG",{});var V2t=s(I2e);r0r=r(V2t,"electra"),V2t.forEach(t),t0r=r(Wke," \u2014 "),cH=n(Wke,"A",{href:!0});var X2t=s(cH);a0r=r(X2t,"TFElectraForQuestionAnswering"),X2t.forEach(t),n0r=r(Wke," (ELECTRA model)"),Wke.forEach(t),s0r=i(ge),r4=n(ge,"LI",{});var Hke=s(r4);q2e=n(Hke,"STRONG",{});var z2t=s(q2e);l0r=r(z2t,"flaubert"),z2t.forEach(t),i0r=r(Hke," \u2014 "),fH=n(Hke,"A",{href:!0});var Q2t=s(fH);d0r=r(Q2t,"TFFlaubertForQuestionAnsweringSimple"),Q2t.forEach(t),c0r=r(Hke," (FlauBERT model)"),Hke.forEach(t),f0r=i(ge),t4=n(ge,"LI",{});var Uke=s(t4);N2e=n(Uke,"STRONG",{});var W2t=s(N2e);m0r=r(W2t,"funnel"),W2t.forEach(t),g0r=r(Uke," \u2014 "),mH=n(Uke,"A",{href:!0});var H2t=s(mH);h0r=r(H2t,"TFFunnelForQuestionAnswering"),H2t.forEach(t),p0r=r(Uke," (Funnel Transformer model)"),Uke.forEach(t),u0r=i(ge),a4=n(ge,"LI",{});var Jke=s(a4);j2e=n(Jke,"STRONG",{});var U2t=s(j2e);_0r=r(U2t,"gptj"),U2t.forEach(t),b0r=r(Jke," \u2014 "),gH=n(Jke,"A",{href:!0});var J2t=s(gH);v0r=r(J2t,"TFGPTJForQuestionAnswering"),J2t.forEach(t),F0r=r(Jke," (GPT-J model)"),Jke.forEach(t),T0r=i(ge),n4=n(ge,"LI",{});var Yke=s(n4);D2e=n(Yke,"STRONG",{});var Y2t=s(D2e);M0r=r(Y2t,"longformer"),Y2t.forEach(t),E0r=r(Yke," \u2014 "),hH=n(Yke,"A",{href:!0});var K2t=s(hH);C0r=r(K2t,"TFLongformerForQuestionAnswering"),K2t.forEach(t),w0r=r(Yke," (Longformer model)"),Yke.forEach(t),A0r=i(ge),s4=n(ge,"LI",{});var Kke=s(s4);G2e=n(Kke,"STRONG",{});var Z2t=s(G2e);y0r=r(Z2t,"mobilebert"),Z2t.forEach(t),L0r=r(Kke," \u2014 "),pH=n(Kke,"A",{href:!0});var e3t=s(pH);x0r=r(e3t,"TFMobileBertForQuestionAnswering"),e3t.forEach(t),$0r=r(Kke," (MobileBERT model)"),Kke.forEach(t),k0r=i(ge),l4=n(ge,"LI",{});var Zke=s(l4);O2e=n(Zke,"STRONG",{});var o3t=s(O2e);S0r=r(o3t,"mpnet"),o3t.forEach(t),R0r=r(Zke," \u2014 "),uH=n(Zke,"A",{href:!0});var r3t=s(uH);B0r=r(r3t,"TFMPNetForQuestionAnswering"),r3t.forEach(t),P0r=r(Zke," (MPNet model)"),Zke.forEach(t),I0r=i(ge),i4=n(ge,"LI",{});var eSe=s(i4);V2e=n(eSe,"STRONG",{});var t3t=s(V2e);q0r=r(t3t,"rembert"),t3t.forEach(t),N0r=r(eSe," \u2014 "),_H=n(eSe,"A",{href:!0});var a3t=s(_H);j0r=r(a3t,"TFRemBertForQuestionAnswering"),a3t.forEach(t),D0r=r(eSe," (RemBERT model)"),eSe.forEach(t),G0r=i(ge),d4=n(ge,"LI",{});var oSe=s(d4);X2e=n(oSe,"STRONG",{});var n3t=s(X2e);O0r=r(n3t,"roberta"),n3t.forEach(t),V0r=r(oSe," \u2014 "),bH=n(oSe,"A",{href:!0});var s3t=s(bH);X0r=r(s3t,"TFRobertaForQuestionAnswering"),s3t.forEach(t),z0r=r(oSe," (RoBERTa model)"),oSe.forEach(t),Q0r=i(ge),c4=n(ge,"LI",{});var rSe=s(c4);z2e=n(rSe,"STRONG",{});var l3t=s(z2e);W0r=r(l3t,"roformer"),l3t.forEach(t),H0r=r(rSe," \u2014 "),vH=n(rSe,"A",{href:!0});var i3t=s(vH);U0r=r(i3t,"TFRoFormerForQuestionAnswering"),i3t.forEach(t),J0r=r(rSe," (RoFormer model)"),rSe.forEach(t),Y0r=i(ge),f4=n(ge,"LI",{});var tSe=s(f4);Q2e=n(tSe,"STRONG",{});var d3t=s(Q2e);K0r=r(d3t,"xlm"),d3t.forEach(t),Z0r=r(tSe," \u2014 "),FH=n(tSe,"A",{href:!0});var c3t=s(FH);eTr=r(c3t,"TFXLMForQuestionAnsweringSimple"),c3t.forEach(t),oTr=r(tSe," (XLM model)"),tSe.forEach(t),rTr=i(ge),m4=n(ge,"LI",{});var aSe=s(m4);W2e=n(aSe,"STRONG",{});var f3t=s(W2e);tTr=r(f3t,"xlm-roberta"),f3t.forEach(t),aTr=r(aSe," \u2014 "),TH=n(aSe,"A",{href:!0});var m3t=s(TH);nTr=r(m3t,"TFXLMRobertaForQuestionAnswering"),m3t.forEach(t),sTr=r(aSe," (XLM-RoBERTa model)"),aSe.forEach(t),lTr=i(ge),g4=n(ge,"LI",{});var nSe=s(g4);H2e=n(nSe,"STRONG",{});var g3t=s(H2e);iTr=r(g3t,"xlnet"),g3t.forEach(t),dTr=r(nSe," \u2014 "),MH=n(nSe,"A",{href:!0});var h3t=s(MH);cTr=r(h3t,"TFXLNetForQuestionAnsweringSimple"),h3t.forEach(t),fTr=r(nSe," (XLNet model)"),nSe.forEach(t),ge.forEach(t),mTr=i(Al),T(h4.$$.fragment,Al),Al.forEach(t),wl.forEach(t),SPe=i(f),cc=n(f,"H2",{class:!0});var qqe=s(cc);p4=n(qqe,"A",{id:!0,class:!0,href:!0});var p3t=s(p4);U2e=n(p3t,"SPAN",{});var u3t=s(U2e);T(a8.$$.fragment,u3t),u3t.forEach(t),p3t.forEach(t),gTr=i(qqe),J2e=n(qqe,"SPAN",{});var _3t=s(J2e);hTr=r(_3t,"TFAutoModelForVision2Seq"),_3t.forEach(t),qqe.forEach(t),RPe=i(f),ir=n(f,"DIV",{class:!0});var yl=s(ir);T(n8.$$.fragment,yl),pTr=i(yl),fc=n(yl,"P",{});var AK=s(fc);uTr=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),EH=n(AK,"A",{href:!0});var b3t=s(EH);_Tr=r(b3t,"from_pretrained()"),b3t.forEach(t),bTr=r(AK," class method or the "),CH=n(AK,"A",{href:!0});var v3t=s(CH);vTr=r(v3t,"from_config()"),v3t.forEach(t),FTr=r(AK,` class
method.`),AK.forEach(t),TTr=i(yl),s8=n(yl,"P",{});var Nqe=s(s8);MTr=r(Nqe,"This class cannot be instantiated directly using "),Y2e=n(Nqe,"CODE",{});var F3t=s(Y2e);ETr=r(F3t,"__init__()"),F3t.forEach(t),CTr=r(Nqe," (throws an error)."),Nqe.forEach(t),wTr=i(yl),Bt=n(yl,"DIV",{class:!0});var Vw=s(Bt);T(l8.$$.fragment,Vw),ATr=i(Vw),K2e=n(Vw,"P",{});var T3t=s(K2e);yTr=r(T3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),T3t.forEach(t),LTr=i(Vw),mc=n(Vw,"P",{});var yK=s(mc);xTr=r(yK,`Note:
Loading a model from its configuration file does `),Z2e=n(yK,"STRONG",{});var M3t=s(Z2e);$Tr=r(M3t,"not"),M3t.forEach(t),kTr=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(yK,"A",{href:!0});var E3t=s(wH);STr=r(E3t,"from_pretrained()"),E3t.forEach(t),RTr=r(yK," to load the model weights."),yK.forEach(t),BTr=i(Vw),T(u4.$$.fragment,Vw),Vw.forEach(t),PTr=i(yl),Pr=n(yl,"DIV",{class:!0});var Ll=s(Pr);T(i8.$$.fragment,Ll),ITr=i(Ll),e3e=n(Ll,"P",{});var C3t=s(e3e);qTr=r(C3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),C3t.forEach(t),NTr=i(Ll),sn=n(Ll,"P",{});var Xw=s(sn);jTr=r(Xw,"The model class to instantiate is selected based on the "),o3e=n(Xw,"CODE",{});var w3t=s(o3e);DTr=r(w3t,"model_type"),w3t.forEach(t),GTr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),r3e=n(Xw,"CODE",{});var A3t=s(r3e);OTr=r(A3t,"pretrained_model_name_or_path"),A3t.forEach(t),VTr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t3e=n(Xw,"CODE",{});var y3t=s(t3e);XTr=r(y3t,"pretrained_model_name_or_path"),y3t.forEach(t),zTr=r(Xw,":"),Xw.forEach(t),QTr=i(Ll),a3e=n(Ll,"UL",{});var L3t=s(a3e);_4=n(L3t,"LI",{});var sSe=s(_4);n3e=n(sSe,"STRONG",{});var x3t=s(n3e);WTr=r(x3t,"vision-encoder-decoder"),x3t.forEach(t),HTr=r(sSe," \u2014 "),AH=n(sSe,"A",{href:!0});var $3t=s(AH);UTr=r($3t,"TFVisionEncoderDecoderModel"),$3t.forEach(t),JTr=r(sSe," (Vision Encoder decoder model)"),sSe.forEach(t),L3t.forEach(t),YTr=i(Ll),T(b4.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),BPe=i(f),gc=n(f,"H2",{class:!0});var jqe=s(gc);v4=n(jqe,"A",{id:!0,class:!0,href:!0});var k3t=s(v4);s3e=n(k3t,"SPAN",{});var S3t=s(s3e);T(d8.$$.fragment,S3t),S3t.forEach(t),k3t.forEach(t),KTr=i(jqe),l3e=n(jqe,"SPAN",{});var R3t=s(l3e);ZTr=r(R3t,"TFAutoModelForSpeechSeq2Seq"),R3t.forEach(t),jqe.forEach(t),PPe=i(f),dr=n(f,"DIV",{class:!0});var xl=s(dr);T(c8.$$.fragment,xl),eMr=i(xl),hc=n(xl,"P",{});var LK=s(hc);oMr=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),yH=n(LK,"A",{href:!0});var B3t=s(yH);rMr=r(B3t,"from_pretrained()"),B3t.forEach(t),tMr=r(LK," class method or the "),LH=n(LK,"A",{href:!0});var P3t=s(LH);aMr=r(P3t,"from_config()"),P3t.forEach(t),nMr=r(LK,` class
method.`),LK.forEach(t),sMr=i(xl),f8=n(xl,"P",{});var Dqe=s(f8);lMr=r(Dqe,"This class cannot be instantiated directly using "),i3e=n(Dqe,"CODE",{});var I3t=s(i3e);iMr=r(I3t,"__init__()"),I3t.forEach(t),dMr=r(Dqe," (throws an error)."),Dqe.forEach(t),cMr=i(xl),Pt=n(xl,"DIV",{class:!0});var zw=s(Pt);T(m8.$$.fragment,zw),fMr=i(zw),d3e=n(zw,"P",{});var q3t=s(d3e);mMr=r(q3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),q3t.forEach(t),gMr=i(zw),pc=n(zw,"P",{});var xK=s(pc);hMr=r(xK,`Note:
Loading a model from its configuration file does `),c3e=n(xK,"STRONG",{});var N3t=s(c3e);pMr=r(N3t,"not"),N3t.forEach(t),uMr=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=n(xK,"A",{href:!0});var j3t=s(xH);_Mr=r(j3t,"from_pretrained()"),j3t.forEach(t),bMr=r(xK," to load the model weights."),xK.forEach(t),vMr=i(zw),T(F4.$$.fragment,zw),zw.forEach(t),FMr=i(xl),Ir=n(xl,"DIV",{class:!0});var $l=s(Ir);T(g8.$$.fragment,$l),TMr=i($l),f3e=n($l,"P",{});var D3t=s(f3e);MMr=r(D3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),D3t.forEach(t),EMr=i($l),ln=n($l,"P",{});var Qw=s(ln);CMr=r(Qw,"The model class to instantiate is selected based on the "),m3e=n(Qw,"CODE",{});var G3t=s(m3e);wMr=r(G3t,"model_type"),G3t.forEach(t),AMr=r(Qw,` property of the config object (either
passed as an argument or loaded from `),g3e=n(Qw,"CODE",{});var O3t=s(g3e);yMr=r(O3t,"pretrained_model_name_or_path"),O3t.forEach(t),LMr=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h3e=n(Qw,"CODE",{});var V3t=s(h3e);xMr=r(V3t,"pretrained_model_name_or_path"),V3t.forEach(t),$Mr=r(Qw,":"),Qw.forEach(t),kMr=i($l),p3e=n($l,"UL",{});var X3t=s(p3e);T4=n(X3t,"LI",{});var lSe=s(T4);u3e=n(lSe,"STRONG",{});var z3t=s(u3e);SMr=r(z3t,"speech_to_text"),z3t.forEach(t),RMr=r(lSe," \u2014 "),$H=n(lSe,"A",{href:!0});var Q3t=s($H);BMr=r(Q3t,"TFSpeech2TextForConditionalGeneration"),Q3t.forEach(t),PMr=r(lSe," (Speech2Text model)"),lSe.forEach(t),X3t.forEach(t),IMr=i($l),T(M4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),IPe=i(f),uc=n(f,"H2",{class:!0});var Gqe=s(uc);E4=n(Gqe,"A",{id:!0,class:!0,href:!0});var W3t=s(E4);_3e=n(W3t,"SPAN",{});var H3t=s(_3e);T(h8.$$.fragment,H3t),H3t.forEach(t),W3t.forEach(t),qMr=i(Gqe),b3e=n(Gqe,"SPAN",{});var U3t=s(b3e);NMr=r(U3t,"FlaxAutoModel"),U3t.forEach(t),Gqe.forEach(t),qPe=i(f),cr=n(f,"DIV",{class:!0});var kl=s(cr);T(p8.$$.fragment,kl),jMr=i(kl),_c=n(kl,"P",{});var $K=s(_c);DMr=r($K,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kH=n($K,"A",{href:!0});var J3t=s(kH);GMr=r(J3t,"from_pretrained()"),J3t.forEach(t),OMr=r($K," class method or the "),SH=n($K,"A",{href:!0});var Y3t=s(SH);VMr=r(Y3t,"from_config()"),Y3t.forEach(t),XMr=r($K,` class
method.`),$K.forEach(t),zMr=i(kl),u8=n(kl,"P",{});var Oqe=s(u8);QMr=r(Oqe,"This class cannot be instantiated directly using "),v3e=n(Oqe,"CODE",{});var K3t=s(v3e);WMr=r(K3t,"__init__()"),K3t.forEach(t),HMr=r(Oqe," (throws an error)."),Oqe.forEach(t),UMr=i(kl),It=n(kl,"DIV",{class:!0});var Ww=s(It);T(_8.$$.fragment,Ww),JMr=i(Ww),F3e=n(Ww,"P",{});var Z3t=s(F3e);YMr=r(Z3t,"Instantiates one of the base model classes of the library from a configuration."),Z3t.forEach(t),KMr=i(Ww),bc=n(Ww,"P",{});var kK=s(bc);ZMr=r(kK,`Note:
Loading a model from its configuration file does `),T3e=n(kK,"STRONG",{});var evt=s(T3e);e4r=r(evt,"not"),evt.forEach(t),o4r=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(kK,"A",{href:!0});var ovt=s(RH);r4r=r(ovt,"from_pretrained()"),ovt.forEach(t),t4r=r(kK," to load the model weights."),kK.forEach(t),a4r=i(Ww),T(C4.$$.fragment,Ww),Ww.forEach(t),n4r=i(kl),qr=n(kl,"DIV",{class:!0});var Sl=s(qr);T(b8.$$.fragment,Sl),s4r=i(Sl),M3e=n(Sl,"P",{});var rvt=s(M3e);l4r=r(rvt,"Instantiate one of the base model classes of the library from a pretrained model."),rvt.forEach(t),i4r=i(Sl),dn=n(Sl,"P",{});var Hw=s(dn);d4r=r(Hw,"The model class to instantiate is selected based on the "),E3e=n(Hw,"CODE",{});var tvt=s(E3e);c4r=r(tvt,"model_type"),tvt.forEach(t),f4r=r(Hw,` property of the config object (either
passed as an argument or loaded from `),C3e=n(Hw,"CODE",{});var avt=s(C3e);m4r=r(avt,"pretrained_model_name_or_path"),avt.forEach(t),g4r=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w3e=n(Hw,"CODE",{});var nvt=s(w3e);h4r=r(nvt,"pretrained_model_name_or_path"),nvt.forEach(t),p4r=r(Hw,":"),Hw.forEach(t),u4r=i(Sl),oe=n(Sl,"UL",{});var ae=s(oe);w4=n(ae,"LI",{});var iSe=s(w4);A3e=n(iSe,"STRONG",{});var svt=s(A3e);_4r=r(svt,"albert"),svt.forEach(t),b4r=r(iSe," \u2014 "),BH=n(iSe,"A",{href:!0});var lvt=s(BH);v4r=r(lvt,"FlaxAlbertModel"),lvt.forEach(t),F4r=r(iSe," (ALBERT model)"),iSe.forEach(t),T4r=i(ae),A4=n(ae,"LI",{});var dSe=s(A4);y3e=n(dSe,"STRONG",{});var ivt=s(y3e);M4r=r(ivt,"bart"),ivt.forEach(t),E4r=r(dSe," \u2014 "),PH=n(dSe,"A",{href:!0});var dvt=s(PH);C4r=r(dvt,"FlaxBartModel"),dvt.forEach(t),w4r=r(dSe," (BART model)"),dSe.forEach(t),A4r=i(ae),y4=n(ae,"LI",{});var cSe=s(y4);L3e=n(cSe,"STRONG",{});var cvt=s(L3e);y4r=r(cvt,"beit"),cvt.forEach(t),L4r=r(cSe," \u2014 "),IH=n(cSe,"A",{href:!0});var fvt=s(IH);x4r=r(fvt,"FlaxBeitModel"),fvt.forEach(t),$4r=r(cSe," (BEiT model)"),cSe.forEach(t),k4r=i(ae),L4=n(ae,"LI",{});var fSe=s(L4);x3e=n(fSe,"STRONG",{});var mvt=s(x3e);S4r=r(mvt,"bert"),mvt.forEach(t),R4r=r(fSe," \u2014 "),qH=n(fSe,"A",{href:!0});var gvt=s(qH);B4r=r(gvt,"FlaxBertModel"),gvt.forEach(t),P4r=r(fSe," (BERT model)"),fSe.forEach(t),I4r=i(ae),x4=n(ae,"LI",{});var mSe=s(x4);$3e=n(mSe,"STRONG",{});var hvt=s($3e);q4r=r(hvt,"big_bird"),hvt.forEach(t),N4r=r(mSe," \u2014 "),NH=n(mSe,"A",{href:!0});var pvt=s(NH);j4r=r(pvt,"FlaxBigBirdModel"),pvt.forEach(t),D4r=r(mSe," (BigBird model)"),mSe.forEach(t),G4r=i(ae),$4=n(ae,"LI",{});var gSe=s($4);k3e=n(gSe,"STRONG",{});var uvt=s(k3e);O4r=r(uvt,"blenderbot"),uvt.forEach(t),V4r=r(gSe," \u2014 "),jH=n(gSe,"A",{href:!0});var _vt=s(jH);X4r=r(_vt,"FlaxBlenderbotModel"),_vt.forEach(t),z4r=r(gSe," (Blenderbot model)"),gSe.forEach(t),Q4r=i(ae),k4=n(ae,"LI",{});var hSe=s(k4);S3e=n(hSe,"STRONG",{});var bvt=s(S3e);W4r=r(bvt,"blenderbot-small"),bvt.forEach(t),H4r=r(hSe," \u2014 "),DH=n(hSe,"A",{href:!0});var vvt=s(DH);U4r=r(vvt,"FlaxBlenderbotSmallModel"),vvt.forEach(t),J4r=r(hSe," (BlenderbotSmall model)"),hSe.forEach(t),Y4r=i(ae),S4=n(ae,"LI",{});var pSe=s(S4);R3e=n(pSe,"STRONG",{});var Fvt=s(R3e);K4r=r(Fvt,"clip"),Fvt.forEach(t),Z4r=r(pSe," \u2014 "),GH=n(pSe,"A",{href:!0});var Tvt=s(GH);eEr=r(Tvt,"FlaxCLIPModel"),Tvt.forEach(t),oEr=r(pSe," (CLIP model)"),pSe.forEach(t),rEr=i(ae),R4=n(ae,"LI",{});var uSe=s(R4);B3e=n(uSe,"STRONG",{});var Mvt=s(B3e);tEr=r(Mvt,"distilbert"),Mvt.forEach(t),aEr=r(uSe," \u2014 "),OH=n(uSe,"A",{href:!0});var Evt=s(OH);nEr=r(Evt,"FlaxDistilBertModel"),Evt.forEach(t),sEr=r(uSe," (DistilBERT model)"),uSe.forEach(t),lEr=i(ae),B4=n(ae,"LI",{});var _Se=s(B4);P3e=n(_Se,"STRONG",{});var Cvt=s(P3e);iEr=r(Cvt,"electra"),Cvt.forEach(t),dEr=r(_Se," \u2014 "),VH=n(_Se,"A",{href:!0});var wvt=s(VH);cEr=r(wvt,"FlaxElectraModel"),wvt.forEach(t),fEr=r(_Se," (ELECTRA model)"),_Se.forEach(t),mEr=i(ae),P4=n(ae,"LI",{});var bSe=s(P4);I3e=n(bSe,"STRONG",{});var Avt=s(I3e);gEr=r(Avt,"gpt2"),Avt.forEach(t),hEr=r(bSe," \u2014 "),XH=n(bSe,"A",{href:!0});var yvt=s(XH);pEr=r(yvt,"FlaxGPT2Model"),yvt.forEach(t),uEr=r(bSe," (OpenAI GPT-2 model)"),bSe.forEach(t),_Er=i(ae),I4=n(ae,"LI",{});var vSe=s(I4);q3e=n(vSe,"STRONG",{});var Lvt=s(q3e);bEr=r(Lvt,"gpt_neo"),Lvt.forEach(t),vEr=r(vSe," \u2014 "),zH=n(vSe,"A",{href:!0});var xvt=s(zH);FEr=r(xvt,"FlaxGPTNeoModel"),xvt.forEach(t),TEr=r(vSe," (GPT Neo model)"),vSe.forEach(t),MEr=i(ae),q4=n(ae,"LI",{});var FSe=s(q4);N3e=n(FSe,"STRONG",{});var $vt=s(N3e);EEr=r($vt,"gptj"),$vt.forEach(t),CEr=r(FSe," \u2014 "),QH=n(FSe,"A",{href:!0});var kvt=s(QH);wEr=r(kvt,"FlaxGPTJModel"),kvt.forEach(t),AEr=r(FSe," (GPT-J model)"),FSe.forEach(t),yEr=i(ae),N4=n(ae,"LI",{});var TSe=s(N4);j3e=n(TSe,"STRONG",{});var Svt=s(j3e);LEr=r(Svt,"marian"),Svt.forEach(t),xEr=r(TSe," \u2014 "),WH=n(TSe,"A",{href:!0});var Rvt=s(WH);$Er=r(Rvt,"FlaxMarianModel"),Rvt.forEach(t),kEr=r(TSe," (Marian model)"),TSe.forEach(t),SEr=i(ae),j4=n(ae,"LI",{});var MSe=s(j4);D3e=n(MSe,"STRONG",{});var Bvt=s(D3e);REr=r(Bvt,"mbart"),Bvt.forEach(t),BEr=r(MSe," \u2014 "),HH=n(MSe,"A",{href:!0});var Pvt=s(HH);PEr=r(Pvt,"FlaxMBartModel"),Pvt.forEach(t),IEr=r(MSe," (mBART model)"),MSe.forEach(t),qEr=i(ae),D4=n(ae,"LI",{});var ESe=s(D4);G3e=n(ESe,"STRONG",{});var Ivt=s(G3e);NEr=r(Ivt,"mt5"),Ivt.forEach(t),jEr=r(ESe," \u2014 "),UH=n(ESe,"A",{href:!0});var qvt=s(UH);DEr=r(qvt,"FlaxMT5Model"),qvt.forEach(t),GEr=r(ESe," (mT5 model)"),ESe.forEach(t),OEr=i(ae),G4=n(ae,"LI",{});var CSe=s(G4);O3e=n(CSe,"STRONG",{});var Nvt=s(O3e);VEr=r(Nvt,"pegasus"),Nvt.forEach(t),XEr=r(CSe," \u2014 "),JH=n(CSe,"A",{href:!0});var jvt=s(JH);zEr=r(jvt,"FlaxPegasusModel"),jvt.forEach(t),QEr=r(CSe," (Pegasus model)"),CSe.forEach(t),WEr=i(ae),O4=n(ae,"LI",{});var wSe=s(O4);V3e=n(wSe,"STRONG",{});var Dvt=s(V3e);HEr=r(Dvt,"roberta"),Dvt.forEach(t),UEr=r(wSe," \u2014 "),YH=n(wSe,"A",{href:!0});var Gvt=s(YH);JEr=r(Gvt,"FlaxRobertaModel"),Gvt.forEach(t),YEr=r(wSe," (RoBERTa model)"),wSe.forEach(t),KEr=i(ae),V4=n(ae,"LI",{});var ASe=s(V4);X3e=n(ASe,"STRONG",{});var Ovt=s(X3e);ZEr=r(Ovt,"roformer"),Ovt.forEach(t),e5r=r(ASe," \u2014 "),KH=n(ASe,"A",{href:!0});var Vvt=s(KH);o5r=r(Vvt,"FlaxRoFormerModel"),Vvt.forEach(t),r5r=r(ASe," (RoFormer model)"),ASe.forEach(t),t5r=i(ae),X4=n(ae,"LI",{});var ySe=s(X4);z3e=n(ySe,"STRONG",{});var Xvt=s(z3e);a5r=r(Xvt,"t5"),Xvt.forEach(t),n5r=r(ySe," \u2014 "),ZH=n(ySe,"A",{href:!0});var zvt=s(ZH);s5r=r(zvt,"FlaxT5Model"),zvt.forEach(t),l5r=r(ySe," (T5 model)"),ySe.forEach(t),i5r=i(ae),z4=n(ae,"LI",{});var LSe=s(z4);Q3e=n(LSe,"STRONG",{});var Qvt=s(Q3e);d5r=r(Qvt,"vision-text-dual-encoder"),Qvt.forEach(t),c5r=r(LSe," \u2014 "),eU=n(LSe,"A",{href:!0});var Wvt=s(eU);f5r=r(Wvt,"FlaxVisionTextDualEncoderModel"),Wvt.forEach(t),m5r=r(LSe," (VisionTextDualEncoder model)"),LSe.forEach(t),g5r=i(ae),Q4=n(ae,"LI",{});var xSe=s(Q4);W3e=n(xSe,"STRONG",{});var Hvt=s(W3e);h5r=r(Hvt,"vit"),Hvt.forEach(t),p5r=r(xSe," \u2014 "),oU=n(xSe,"A",{href:!0});var Uvt=s(oU);u5r=r(Uvt,"FlaxViTModel"),Uvt.forEach(t),_5r=r(xSe," (ViT model)"),xSe.forEach(t),b5r=i(ae),W4=n(ae,"LI",{});var $Se=s(W4);H3e=n($Se,"STRONG",{});var Jvt=s(H3e);v5r=r(Jvt,"wav2vec2"),Jvt.forEach(t),F5r=r($Se," \u2014 "),rU=n($Se,"A",{href:!0});var Yvt=s(rU);T5r=r(Yvt,"FlaxWav2Vec2Model"),Yvt.forEach(t),M5r=r($Se," (Wav2Vec2 model)"),$Se.forEach(t),E5r=i(ae),H4=n(ae,"LI",{});var kSe=s(H4);U3e=n(kSe,"STRONG",{});var Kvt=s(U3e);C5r=r(Kvt,"xglm"),Kvt.forEach(t),w5r=r(kSe," \u2014 "),tU=n(kSe,"A",{href:!0});var Zvt=s(tU);A5r=r(Zvt,"FlaxXGLMModel"),Zvt.forEach(t),y5r=r(kSe," (XGLM model)"),kSe.forEach(t),L5r=i(ae),U4=n(ae,"LI",{});var SSe=s(U4);J3e=n(SSe,"STRONG",{});var eFt=s(J3e);x5r=r(eFt,"xlm-roberta"),eFt.forEach(t),$5r=r(SSe," \u2014 "),aU=n(SSe,"A",{href:!0});var oFt=s(aU);k5r=r(oFt,"FlaxXLMRobertaModel"),oFt.forEach(t),S5r=r(SSe," (XLM-RoBERTa model)"),SSe.forEach(t),ae.forEach(t),R5r=i(Sl),T(J4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),NPe=i(f),vc=n(f,"H2",{class:!0});var Vqe=s(vc);Y4=n(Vqe,"A",{id:!0,class:!0,href:!0});var rFt=s(Y4);Y3e=n(rFt,"SPAN",{});var tFt=s(Y3e);T(v8.$$.fragment,tFt),tFt.forEach(t),rFt.forEach(t),B5r=i(Vqe),K3e=n(Vqe,"SPAN",{});var aFt=s(K3e);P5r=r(aFt,"FlaxAutoModelForCausalLM"),aFt.forEach(t),Vqe.forEach(t),jPe=i(f),fr=n(f,"DIV",{class:!0});var Rl=s(fr);T(F8.$$.fragment,Rl),I5r=i(Rl),Fc=n(Rl,"P",{});var SK=s(Fc);q5r=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),nU=n(SK,"A",{href:!0});var nFt=s(nU);N5r=r(nFt,"from_pretrained()"),nFt.forEach(t),j5r=r(SK," class method or the "),sU=n(SK,"A",{href:!0});var sFt=s(sU);D5r=r(sFt,"from_config()"),sFt.forEach(t),G5r=r(SK,` class
method.`),SK.forEach(t),O5r=i(Rl),T8=n(Rl,"P",{});var Xqe=s(T8);V5r=r(Xqe,"This class cannot be instantiated directly using "),Z3e=n(Xqe,"CODE",{});var lFt=s(Z3e);X5r=r(lFt,"__init__()"),lFt.forEach(t),z5r=r(Xqe," (throws an error)."),Xqe.forEach(t),Q5r=i(Rl),qt=n(Rl,"DIV",{class:!0});var Uw=s(qt);T(M8.$$.fragment,Uw),W5r=i(Uw),eve=n(Uw,"P",{});var iFt=s(eve);H5r=r(iFt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iFt.forEach(t),U5r=i(Uw),Tc=n(Uw,"P",{});var RK=s(Tc);J5r=r(RK,`Note:
Loading a model from its configuration file does `),ove=n(RK,"STRONG",{});var dFt=s(ove);Y5r=r(dFt,"not"),dFt.forEach(t),K5r=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=n(RK,"A",{href:!0});var cFt=s(lU);Z5r=r(cFt,"from_pretrained()"),cFt.forEach(t),eCr=r(RK," to load the model weights."),RK.forEach(t),oCr=i(Uw),T(K4.$$.fragment,Uw),Uw.forEach(t),rCr=i(Rl),Nr=n(Rl,"DIV",{class:!0});var Bl=s(Nr);T(E8.$$.fragment,Bl),tCr=i(Bl),rve=n(Bl,"P",{});var fFt=s(rve);aCr=r(fFt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fFt.forEach(t),nCr=i(Bl),cn=n(Bl,"P",{});var Jw=s(cn);sCr=r(Jw,"The model class to instantiate is selected based on the "),tve=n(Jw,"CODE",{});var mFt=s(tve);lCr=r(mFt,"model_type"),mFt.forEach(t),iCr=r(Jw,` property of the config object (either
passed as an argument or loaded from `),ave=n(Jw,"CODE",{});var gFt=s(ave);dCr=r(gFt,"pretrained_model_name_or_path"),gFt.forEach(t),cCr=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nve=n(Jw,"CODE",{});var hFt=s(nve);fCr=r(hFt,"pretrained_model_name_or_path"),hFt.forEach(t),mCr=r(Jw,":"),Jw.forEach(t),gCr=i(Bl),ke=n(Bl,"UL",{});var Oe=s(ke);Z4=n(Oe,"LI",{});var RSe=s(Z4);sve=n(RSe,"STRONG",{});var pFt=s(sve);hCr=r(pFt,"bart"),pFt.forEach(t),pCr=r(RSe," \u2014 "),iU=n(RSe,"A",{href:!0});var uFt=s(iU);uCr=r(uFt,"FlaxBartForCausalLM"),uFt.forEach(t),_Cr=r(RSe," (BART model)"),RSe.forEach(t),bCr=i(Oe),eE=n(Oe,"LI",{});var BSe=s(eE);lve=n(BSe,"STRONG",{});var _Ft=s(lve);vCr=r(_Ft,"bert"),_Ft.forEach(t),FCr=r(BSe," \u2014 "),dU=n(BSe,"A",{href:!0});var bFt=s(dU);TCr=r(bFt,"FlaxBertForCausalLM"),bFt.forEach(t),MCr=r(BSe," (BERT model)"),BSe.forEach(t),ECr=i(Oe),oE=n(Oe,"LI",{});var PSe=s(oE);ive=n(PSe,"STRONG",{});var vFt=s(ive);CCr=r(vFt,"big_bird"),vFt.forEach(t),wCr=r(PSe," \u2014 "),cU=n(PSe,"A",{href:!0});var FFt=s(cU);ACr=r(FFt,"FlaxBigBirdForCausalLM"),FFt.forEach(t),yCr=r(PSe," (BigBird model)"),PSe.forEach(t),LCr=i(Oe),rE=n(Oe,"LI",{});var ISe=s(rE);dve=n(ISe,"STRONG",{});var TFt=s(dve);xCr=r(TFt,"electra"),TFt.forEach(t),$Cr=r(ISe," \u2014 "),fU=n(ISe,"A",{href:!0});var MFt=s(fU);kCr=r(MFt,"FlaxElectraForCausalLM"),MFt.forEach(t),SCr=r(ISe," (ELECTRA model)"),ISe.forEach(t),RCr=i(Oe),tE=n(Oe,"LI",{});var qSe=s(tE);cve=n(qSe,"STRONG",{});var EFt=s(cve);BCr=r(EFt,"gpt2"),EFt.forEach(t),PCr=r(qSe," \u2014 "),mU=n(qSe,"A",{href:!0});var CFt=s(mU);ICr=r(CFt,"FlaxGPT2LMHeadModel"),CFt.forEach(t),qCr=r(qSe," (OpenAI GPT-2 model)"),qSe.forEach(t),NCr=i(Oe),aE=n(Oe,"LI",{});var NSe=s(aE);fve=n(NSe,"STRONG",{});var wFt=s(fve);jCr=r(wFt,"gpt_neo"),wFt.forEach(t),DCr=r(NSe," \u2014 "),gU=n(NSe,"A",{href:!0});var AFt=s(gU);GCr=r(AFt,"FlaxGPTNeoForCausalLM"),AFt.forEach(t),OCr=r(NSe," (GPT Neo model)"),NSe.forEach(t),VCr=i(Oe),nE=n(Oe,"LI",{});var jSe=s(nE);mve=n(jSe,"STRONG",{});var yFt=s(mve);XCr=r(yFt,"gptj"),yFt.forEach(t),zCr=r(jSe," \u2014 "),hU=n(jSe,"A",{href:!0});var LFt=s(hU);QCr=r(LFt,"FlaxGPTJForCausalLM"),LFt.forEach(t),WCr=r(jSe," (GPT-J model)"),jSe.forEach(t),HCr=i(Oe),sE=n(Oe,"LI",{});var DSe=s(sE);gve=n(DSe,"STRONG",{});var xFt=s(gve);UCr=r(xFt,"roberta"),xFt.forEach(t),JCr=r(DSe," \u2014 "),pU=n(DSe,"A",{href:!0});var $Ft=s(pU);YCr=r($Ft,"FlaxRobertaForCausalLM"),$Ft.forEach(t),KCr=r(DSe," (RoBERTa model)"),DSe.forEach(t),ZCr=i(Oe),lE=n(Oe,"LI",{});var GSe=s(lE);hve=n(GSe,"STRONG",{});var kFt=s(hve);ewr=r(kFt,"xglm"),kFt.forEach(t),owr=r(GSe," \u2014 "),uU=n(GSe,"A",{href:!0});var SFt=s(uU);rwr=r(SFt,"FlaxXGLMForCausalLM"),SFt.forEach(t),twr=r(GSe," (XGLM model)"),GSe.forEach(t),Oe.forEach(t),awr=i(Bl),T(iE.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),DPe=i(f),Mc=n(f,"H2",{class:!0});var zqe=s(Mc);dE=n(zqe,"A",{id:!0,class:!0,href:!0});var RFt=s(dE);pve=n(RFt,"SPAN",{});var BFt=s(pve);T(C8.$$.fragment,BFt),BFt.forEach(t),RFt.forEach(t),nwr=i(zqe),uve=n(zqe,"SPAN",{});var PFt=s(uve);swr=r(PFt,"FlaxAutoModelForPreTraining"),PFt.forEach(t),zqe.forEach(t),GPe=i(f),mr=n(f,"DIV",{class:!0});var Pl=s(mr);T(w8.$$.fragment,Pl),lwr=i(Pl),Ec=n(Pl,"P",{});var BK=s(Ec);iwr=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_U=n(BK,"A",{href:!0});var IFt=s(_U);dwr=r(IFt,"from_pretrained()"),IFt.forEach(t),cwr=r(BK," class method or the "),bU=n(BK,"A",{href:!0});var qFt=s(bU);fwr=r(qFt,"from_config()"),qFt.forEach(t),mwr=r(BK,` class
method.`),BK.forEach(t),gwr=i(Pl),A8=n(Pl,"P",{});var Qqe=s(A8);hwr=r(Qqe,"This class cannot be instantiated directly using "),_ve=n(Qqe,"CODE",{});var NFt=s(_ve);pwr=r(NFt,"__init__()"),NFt.forEach(t),uwr=r(Qqe," (throws an error)."),Qqe.forEach(t),_wr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var Yw=s(Nt);T(y8.$$.fragment,Yw),bwr=i(Yw),bve=n(Yw,"P",{});var jFt=s(bve);vwr=r(jFt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),jFt.forEach(t),Fwr=i(Yw),Cc=n(Yw,"P",{});var PK=s(Cc);Twr=r(PK,`Note:
Loading a model from its configuration file does `),vve=n(PK,"STRONG",{});var DFt=s(vve);Mwr=r(DFt,"not"),DFt.forEach(t),Ewr=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(PK,"A",{href:!0});var GFt=s(vU);Cwr=r(GFt,"from_pretrained()"),GFt.forEach(t),wwr=r(PK," to load the model weights."),PK.forEach(t),Awr=i(Yw),T(cE.$$.fragment,Yw),Yw.forEach(t),ywr=i(Pl),jr=n(Pl,"DIV",{class:!0});var Il=s(jr);T(L8.$$.fragment,Il),Lwr=i(Il),Fve=n(Il,"P",{});var OFt=s(Fve);xwr=r(OFt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),OFt.forEach(t),$wr=i(Il),fn=n(Il,"P",{});var Kw=s(fn);kwr=r(Kw,"The model class to instantiate is selected based on the "),Tve=n(Kw,"CODE",{});var VFt=s(Tve);Swr=r(VFt,"model_type"),VFt.forEach(t),Rwr=r(Kw,` property of the config object (either
passed as an argument or loaded from `),Mve=n(Kw,"CODE",{});var XFt=s(Mve);Bwr=r(XFt,"pretrained_model_name_or_path"),XFt.forEach(t),Pwr=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eve=n(Kw,"CODE",{});var zFt=s(Eve);Iwr=r(zFt,"pretrained_model_name_or_path"),zFt.forEach(t),qwr=r(Kw,":"),Kw.forEach(t),Nwr=i(Il),Me=n(Il,"UL",{});var we=s(Me);fE=n(we,"LI",{});var OSe=s(fE);Cve=n(OSe,"STRONG",{});var QFt=s(Cve);jwr=r(QFt,"albert"),QFt.forEach(t),Dwr=r(OSe," \u2014 "),FU=n(OSe,"A",{href:!0});var WFt=s(FU);Gwr=r(WFt,"FlaxAlbertForPreTraining"),WFt.forEach(t),Owr=r(OSe," (ALBERT model)"),OSe.forEach(t),Vwr=i(we),mE=n(we,"LI",{});var VSe=s(mE);wve=n(VSe,"STRONG",{});var HFt=s(wve);Xwr=r(HFt,"bart"),HFt.forEach(t),zwr=r(VSe," \u2014 "),TU=n(VSe,"A",{href:!0});var UFt=s(TU);Qwr=r(UFt,"FlaxBartForConditionalGeneration"),UFt.forEach(t),Wwr=r(VSe," (BART model)"),VSe.forEach(t),Hwr=i(we),gE=n(we,"LI",{});var XSe=s(gE);Ave=n(XSe,"STRONG",{});var JFt=s(Ave);Uwr=r(JFt,"bert"),JFt.forEach(t),Jwr=r(XSe," \u2014 "),MU=n(XSe,"A",{href:!0});var YFt=s(MU);Ywr=r(YFt,"FlaxBertForPreTraining"),YFt.forEach(t),Kwr=r(XSe," (BERT model)"),XSe.forEach(t),Zwr=i(we),hE=n(we,"LI",{});var zSe=s(hE);yve=n(zSe,"STRONG",{});var KFt=s(yve);eAr=r(KFt,"big_bird"),KFt.forEach(t),oAr=r(zSe," \u2014 "),EU=n(zSe,"A",{href:!0});var ZFt=s(EU);rAr=r(ZFt,"FlaxBigBirdForPreTraining"),ZFt.forEach(t),tAr=r(zSe," (BigBird model)"),zSe.forEach(t),aAr=i(we),pE=n(we,"LI",{});var QSe=s(pE);Lve=n(QSe,"STRONG",{});var e0t=s(Lve);nAr=r(e0t,"electra"),e0t.forEach(t),sAr=r(QSe," \u2014 "),CU=n(QSe,"A",{href:!0});var o0t=s(CU);lAr=r(o0t,"FlaxElectraForPreTraining"),o0t.forEach(t),iAr=r(QSe," (ELECTRA model)"),QSe.forEach(t),dAr=i(we),uE=n(we,"LI",{});var WSe=s(uE);xve=n(WSe,"STRONG",{});var r0t=s(xve);cAr=r(r0t,"mbart"),r0t.forEach(t),fAr=r(WSe," \u2014 "),wU=n(WSe,"A",{href:!0});var t0t=s(wU);mAr=r(t0t,"FlaxMBartForConditionalGeneration"),t0t.forEach(t),gAr=r(WSe," (mBART model)"),WSe.forEach(t),hAr=i(we),_E=n(we,"LI",{});var HSe=s(_E);$ve=n(HSe,"STRONG",{});var a0t=s($ve);pAr=r(a0t,"mt5"),a0t.forEach(t),uAr=r(HSe," \u2014 "),AU=n(HSe,"A",{href:!0});var n0t=s(AU);_Ar=r(n0t,"FlaxMT5ForConditionalGeneration"),n0t.forEach(t),bAr=r(HSe," (mT5 model)"),HSe.forEach(t),vAr=i(we),bE=n(we,"LI",{});var USe=s(bE);kve=n(USe,"STRONG",{});var s0t=s(kve);FAr=r(s0t,"roberta"),s0t.forEach(t),TAr=r(USe," \u2014 "),yU=n(USe,"A",{href:!0});var l0t=s(yU);MAr=r(l0t,"FlaxRobertaForMaskedLM"),l0t.forEach(t),EAr=r(USe," (RoBERTa model)"),USe.forEach(t),CAr=i(we),vE=n(we,"LI",{});var JSe=s(vE);Sve=n(JSe,"STRONG",{});var i0t=s(Sve);wAr=r(i0t,"roformer"),i0t.forEach(t),AAr=r(JSe," \u2014 "),LU=n(JSe,"A",{href:!0});var d0t=s(LU);yAr=r(d0t,"FlaxRoFormerForMaskedLM"),d0t.forEach(t),LAr=r(JSe," (RoFormer model)"),JSe.forEach(t),xAr=i(we),FE=n(we,"LI",{});var YSe=s(FE);Rve=n(YSe,"STRONG",{});var c0t=s(Rve);$Ar=r(c0t,"t5"),c0t.forEach(t),kAr=r(YSe," \u2014 "),xU=n(YSe,"A",{href:!0});var f0t=s(xU);SAr=r(f0t,"FlaxT5ForConditionalGeneration"),f0t.forEach(t),RAr=r(YSe," (T5 model)"),YSe.forEach(t),BAr=i(we),TE=n(we,"LI",{});var KSe=s(TE);Bve=n(KSe,"STRONG",{});var m0t=s(Bve);PAr=r(m0t,"wav2vec2"),m0t.forEach(t),IAr=r(KSe," \u2014 "),$U=n(KSe,"A",{href:!0});var g0t=s($U);qAr=r(g0t,"FlaxWav2Vec2ForPreTraining"),g0t.forEach(t),NAr=r(KSe," (Wav2Vec2 model)"),KSe.forEach(t),jAr=i(we),ME=n(we,"LI",{});var ZSe=s(ME);Pve=n(ZSe,"STRONG",{});var h0t=s(Pve);DAr=r(h0t,"xlm-roberta"),h0t.forEach(t),GAr=r(ZSe," \u2014 "),kU=n(ZSe,"A",{href:!0});var p0t=s(kU);OAr=r(p0t,"FlaxXLMRobertaForMaskedLM"),p0t.forEach(t),VAr=r(ZSe," (XLM-RoBERTa model)"),ZSe.forEach(t),we.forEach(t),XAr=i(Il),T(EE.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),OPe=i(f),wc=n(f,"H2",{class:!0});var Wqe=s(wc);CE=n(Wqe,"A",{id:!0,class:!0,href:!0});var u0t=s(CE);Ive=n(u0t,"SPAN",{});var _0t=s(Ive);T(x8.$$.fragment,_0t),_0t.forEach(t),u0t.forEach(t),zAr=i(Wqe),qve=n(Wqe,"SPAN",{});var b0t=s(qve);QAr=r(b0t,"FlaxAutoModelForMaskedLM"),b0t.forEach(t),Wqe.forEach(t),VPe=i(f),gr=n(f,"DIV",{class:!0});var ql=s(gr);T($8.$$.fragment,ql),WAr=i(ql),Ac=n(ql,"P",{});var IK=s(Ac);HAr=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),SU=n(IK,"A",{href:!0});var v0t=s(SU);UAr=r(v0t,"from_pretrained()"),v0t.forEach(t),JAr=r(IK," class method or the "),RU=n(IK,"A",{href:!0});var F0t=s(RU);YAr=r(F0t,"from_config()"),F0t.forEach(t),KAr=r(IK,` class
method.`),IK.forEach(t),ZAr=i(ql),k8=n(ql,"P",{});var Hqe=s(k8);e6r=r(Hqe,"This class cannot be instantiated directly using "),Nve=n(Hqe,"CODE",{});var T0t=s(Nve);o6r=r(T0t,"__init__()"),T0t.forEach(t),r6r=r(Hqe," (throws an error)."),Hqe.forEach(t),t6r=i(ql),jt=n(ql,"DIV",{class:!0});var Zw=s(jt);T(S8.$$.fragment,Zw),a6r=i(Zw),jve=n(Zw,"P",{});var M0t=s(jve);n6r=r(M0t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),M0t.forEach(t),s6r=i(Zw),yc=n(Zw,"P",{});var qK=s(yc);l6r=r(qK,`Note:
Loading a model from its configuration file does `),Dve=n(qK,"STRONG",{});var E0t=s(Dve);i6r=r(E0t,"not"),E0t.forEach(t),d6r=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),BU=n(qK,"A",{href:!0});var C0t=s(BU);c6r=r(C0t,"from_pretrained()"),C0t.forEach(t),f6r=r(qK," to load the model weights."),qK.forEach(t),m6r=i(Zw),T(wE.$$.fragment,Zw),Zw.forEach(t),g6r=i(ql),Dr=n(ql,"DIV",{class:!0});var Nl=s(Dr);T(R8.$$.fragment,Nl),h6r=i(Nl),Gve=n(Nl,"P",{});var w0t=s(Gve);p6r=r(w0t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),w0t.forEach(t),u6r=i(Nl),mn=n(Nl,"P",{});var eA=s(mn);_6r=r(eA,"The model class to instantiate is selected based on the "),Ove=n(eA,"CODE",{});var A0t=s(Ove);b6r=r(A0t,"model_type"),A0t.forEach(t),v6r=r(eA,` property of the config object (either
passed as an argument or loaded from `),Vve=n(eA,"CODE",{});var y0t=s(Vve);F6r=r(y0t,"pretrained_model_name_or_path"),y0t.forEach(t),T6r=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xve=n(eA,"CODE",{});var L0t=s(Xve);M6r=r(L0t,"pretrained_model_name_or_path"),L0t.forEach(t),E6r=r(eA,":"),eA.forEach(t),C6r=i(Nl),Le=n(Nl,"UL",{});var Be=s(Le);AE=n(Be,"LI",{});var eRe=s(AE);zve=n(eRe,"STRONG",{});var x0t=s(zve);w6r=r(x0t,"albert"),x0t.forEach(t),A6r=r(eRe," \u2014 "),PU=n(eRe,"A",{href:!0});var $0t=s(PU);y6r=r($0t,"FlaxAlbertForMaskedLM"),$0t.forEach(t),L6r=r(eRe," (ALBERT model)"),eRe.forEach(t),x6r=i(Be),yE=n(Be,"LI",{});var oRe=s(yE);Qve=n(oRe,"STRONG",{});var k0t=s(Qve);$6r=r(k0t,"bart"),k0t.forEach(t),k6r=r(oRe," \u2014 "),IU=n(oRe,"A",{href:!0});var S0t=s(IU);S6r=r(S0t,"FlaxBartForConditionalGeneration"),S0t.forEach(t),R6r=r(oRe," (BART model)"),oRe.forEach(t),B6r=i(Be),LE=n(Be,"LI",{});var rRe=s(LE);Wve=n(rRe,"STRONG",{});var R0t=s(Wve);P6r=r(R0t,"bert"),R0t.forEach(t),I6r=r(rRe," \u2014 "),qU=n(rRe,"A",{href:!0});var B0t=s(qU);q6r=r(B0t,"FlaxBertForMaskedLM"),B0t.forEach(t),N6r=r(rRe," (BERT model)"),rRe.forEach(t),j6r=i(Be),xE=n(Be,"LI",{});var tRe=s(xE);Hve=n(tRe,"STRONG",{});var P0t=s(Hve);D6r=r(P0t,"big_bird"),P0t.forEach(t),G6r=r(tRe," \u2014 "),NU=n(tRe,"A",{href:!0});var I0t=s(NU);O6r=r(I0t,"FlaxBigBirdForMaskedLM"),I0t.forEach(t),V6r=r(tRe," (BigBird model)"),tRe.forEach(t),X6r=i(Be),$E=n(Be,"LI",{});var aRe=s($E);Uve=n(aRe,"STRONG",{});var q0t=s(Uve);z6r=r(q0t,"distilbert"),q0t.forEach(t),Q6r=r(aRe," \u2014 "),jU=n(aRe,"A",{href:!0});var N0t=s(jU);W6r=r(N0t,"FlaxDistilBertForMaskedLM"),N0t.forEach(t),H6r=r(aRe," (DistilBERT model)"),aRe.forEach(t),U6r=i(Be),kE=n(Be,"LI",{});var nRe=s(kE);Jve=n(nRe,"STRONG",{});var j0t=s(Jve);J6r=r(j0t,"electra"),j0t.forEach(t),Y6r=r(nRe," \u2014 "),DU=n(nRe,"A",{href:!0});var D0t=s(DU);K6r=r(D0t,"FlaxElectraForMaskedLM"),D0t.forEach(t),Z6r=r(nRe," (ELECTRA model)"),nRe.forEach(t),eyr=i(Be),SE=n(Be,"LI",{});var sRe=s(SE);Yve=n(sRe,"STRONG",{});var G0t=s(Yve);oyr=r(G0t,"mbart"),G0t.forEach(t),ryr=r(sRe," \u2014 "),GU=n(sRe,"A",{href:!0});var O0t=s(GU);tyr=r(O0t,"FlaxMBartForConditionalGeneration"),O0t.forEach(t),ayr=r(sRe," (mBART model)"),sRe.forEach(t),nyr=i(Be),RE=n(Be,"LI",{});var lRe=s(RE);Kve=n(lRe,"STRONG",{});var V0t=s(Kve);syr=r(V0t,"roberta"),V0t.forEach(t),lyr=r(lRe," \u2014 "),OU=n(lRe,"A",{href:!0});var X0t=s(OU);iyr=r(X0t,"FlaxRobertaForMaskedLM"),X0t.forEach(t),dyr=r(lRe," (RoBERTa model)"),lRe.forEach(t),cyr=i(Be),BE=n(Be,"LI",{});var iRe=s(BE);Zve=n(iRe,"STRONG",{});var z0t=s(Zve);fyr=r(z0t,"roformer"),z0t.forEach(t),myr=r(iRe," \u2014 "),VU=n(iRe,"A",{href:!0});var Q0t=s(VU);gyr=r(Q0t,"FlaxRoFormerForMaskedLM"),Q0t.forEach(t),hyr=r(iRe," (RoFormer model)"),iRe.forEach(t),pyr=i(Be),PE=n(Be,"LI",{});var dRe=s(PE);eFe=n(dRe,"STRONG",{});var W0t=s(eFe);uyr=r(W0t,"xlm-roberta"),W0t.forEach(t),_yr=r(dRe," \u2014 "),XU=n(dRe,"A",{href:!0});var H0t=s(XU);byr=r(H0t,"FlaxXLMRobertaForMaskedLM"),H0t.forEach(t),vyr=r(dRe," (XLM-RoBERTa model)"),dRe.forEach(t),Be.forEach(t),Fyr=i(Nl),T(IE.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),XPe=i(f),Lc=n(f,"H2",{class:!0});var Uqe=s(Lc);qE=n(Uqe,"A",{id:!0,class:!0,href:!0});var U0t=s(qE);oFe=n(U0t,"SPAN",{});var J0t=s(oFe);T(B8.$$.fragment,J0t),J0t.forEach(t),U0t.forEach(t),Tyr=i(Uqe),rFe=n(Uqe,"SPAN",{});var Y0t=s(rFe);Myr=r(Y0t,"FlaxAutoModelForSeq2SeqLM"),Y0t.forEach(t),Uqe.forEach(t),zPe=i(f),hr=n(f,"DIV",{class:!0});var jl=s(hr);T(P8.$$.fragment,jl),Eyr=i(jl),xc=n(jl,"P",{});var NK=s(xc);Cyr=r(NK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zU=n(NK,"A",{href:!0});var K0t=s(zU);wyr=r(K0t,"from_pretrained()"),K0t.forEach(t),Ayr=r(NK," class method or the "),QU=n(NK,"A",{href:!0});var Z0t=s(QU);yyr=r(Z0t,"from_config()"),Z0t.forEach(t),Lyr=r(NK,` class
method.`),NK.forEach(t),xyr=i(jl),I8=n(jl,"P",{});var Jqe=s(I8);$yr=r(Jqe,"This class cannot be instantiated directly using "),tFe=n(Jqe,"CODE",{});var eTt=s(tFe);kyr=r(eTt,"__init__()"),eTt.forEach(t),Syr=r(Jqe," (throws an error)."),Jqe.forEach(t),Ryr=i(jl),Dt=n(jl,"DIV",{class:!0});var oA=s(Dt);T(q8.$$.fragment,oA),Byr=i(oA),aFe=n(oA,"P",{});var oTt=s(aFe);Pyr=r(oTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),oTt.forEach(t),Iyr=i(oA),$c=n(oA,"P",{});var jK=s($c);qyr=r(jK,`Note:
Loading a model from its configuration file does `),nFe=n(jK,"STRONG",{});var rTt=s(nFe);Nyr=r(rTt,"not"),rTt.forEach(t),jyr=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),WU=n(jK,"A",{href:!0});var tTt=s(WU);Dyr=r(tTt,"from_pretrained()"),tTt.forEach(t),Gyr=r(jK," to load the model weights."),jK.forEach(t),Oyr=i(oA),T(NE.$$.fragment,oA),oA.forEach(t),Vyr=i(jl),Gr=n(jl,"DIV",{class:!0});var Dl=s(Gr);T(N8.$$.fragment,Dl),Xyr=i(Dl),sFe=n(Dl,"P",{});var aTt=s(sFe);zyr=r(aTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),aTt.forEach(t),Qyr=i(Dl),gn=n(Dl,"P",{});var rA=s(gn);Wyr=r(rA,"The model class to instantiate is selected based on the "),lFe=n(rA,"CODE",{});var nTt=s(lFe);Hyr=r(nTt,"model_type"),nTt.forEach(t),Uyr=r(rA,` property of the config object (either
passed as an argument or loaded from `),iFe=n(rA,"CODE",{});var sTt=s(iFe);Jyr=r(sTt,"pretrained_model_name_or_path"),sTt.forEach(t),Yyr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dFe=n(rA,"CODE",{});var lTt=s(dFe);Kyr=r(lTt,"pretrained_model_name_or_path"),lTt.forEach(t),Zyr=r(rA,":"),rA.forEach(t),eLr=i(Dl),Se=n(Dl,"UL",{});var Ve=s(Se);jE=n(Ve,"LI",{});var cRe=s(jE);cFe=n(cRe,"STRONG",{});var iTt=s(cFe);oLr=r(iTt,"bart"),iTt.forEach(t),rLr=r(cRe," \u2014 "),HU=n(cRe,"A",{href:!0});var dTt=s(HU);tLr=r(dTt,"FlaxBartForConditionalGeneration"),dTt.forEach(t),aLr=r(cRe," (BART model)"),cRe.forEach(t),nLr=i(Ve),DE=n(Ve,"LI",{});var fRe=s(DE);fFe=n(fRe,"STRONG",{});var cTt=s(fFe);sLr=r(cTt,"blenderbot"),cTt.forEach(t),lLr=r(fRe," \u2014 "),UU=n(fRe,"A",{href:!0});var fTt=s(UU);iLr=r(fTt,"FlaxBlenderbotForConditionalGeneration"),fTt.forEach(t),dLr=r(fRe," (Blenderbot model)"),fRe.forEach(t),cLr=i(Ve),GE=n(Ve,"LI",{});var mRe=s(GE);mFe=n(mRe,"STRONG",{});var mTt=s(mFe);fLr=r(mTt,"blenderbot-small"),mTt.forEach(t),mLr=r(mRe," \u2014 "),JU=n(mRe,"A",{href:!0});var gTt=s(JU);gLr=r(gTt,"FlaxBlenderbotSmallForConditionalGeneration"),gTt.forEach(t),hLr=r(mRe," (BlenderbotSmall model)"),mRe.forEach(t),pLr=i(Ve),OE=n(Ve,"LI",{});var gRe=s(OE);gFe=n(gRe,"STRONG",{});var hTt=s(gFe);uLr=r(hTt,"encoder-decoder"),hTt.forEach(t),_Lr=r(gRe," \u2014 "),YU=n(gRe,"A",{href:!0});var pTt=s(YU);bLr=r(pTt,"FlaxEncoderDecoderModel"),pTt.forEach(t),vLr=r(gRe," (Encoder decoder model)"),gRe.forEach(t),FLr=i(Ve),VE=n(Ve,"LI",{});var hRe=s(VE);hFe=n(hRe,"STRONG",{});var uTt=s(hFe);TLr=r(uTt,"marian"),uTt.forEach(t),MLr=r(hRe," \u2014 "),KU=n(hRe,"A",{href:!0});var _Tt=s(KU);ELr=r(_Tt,"FlaxMarianMTModel"),_Tt.forEach(t),CLr=r(hRe," (Marian model)"),hRe.forEach(t),wLr=i(Ve),XE=n(Ve,"LI",{});var pRe=s(XE);pFe=n(pRe,"STRONG",{});var bTt=s(pFe);ALr=r(bTt,"mbart"),bTt.forEach(t),yLr=r(pRe," \u2014 "),ZU=n(pRe,"A",{href:!0});var vTt=s(ZU);LLr=r(vTt,"FlaxMBartForConditionalGeneration"),vTt.forEach(t),xLr=r(pRe," (mBART model)"),pRe.forEach(t),$Lr=i(Ve),zE=n(Ve,"LI",{});var uRe=s(zE);uFe=n(uRe,"STRONG",{});var FTt=s(uFe);kLr=r(FTt,"mt5"),FTt.forEach(t),SLr=r(uRe," \u2014 "),eJ=n(uRe,"A",{href:!0});var TTt=s(eJ);RLr=r(TTt,"FlaxMT5ForConditionalGeneration"),TTt.forEach(t),BLr=r(uRe," (mT5 model)"),uRe.forEach(t),PLr=i(Ve),QE=n(Ve,"LI",{});var _Re=s(QE);_Fe=n(_Re,"STRONG",{});var MTt=s(_Fe);ILr=r(MTt,"pegasus"),MTt.forEach(t),qLr=r(_Re," \u2014 "),oJ=n(_Re,"A",{href:!0});var ETt=s(oJ);NLr=r(ETt,"FlaxPegasusForConditionalGeneration"),ETt.forEach(t),jLr=r(_Re," (Pegasus model)"),_Re.forEach(t),DLr=i(Ve),WE=n(Ve,"LI",{});var bRe=s(WE);bFe=n(bRe,"STRONG",{});var CTt=s(bFe);GLr=r(CTt,"t5"),CTt.forEach(t),OLr=r(bRe," \u2014 "),rJ=n(bRe,"A",{href:!0});var wTt=s(rJ);VLr=r(wTt,"FlaxT5ForConditionalGeneration"),wTt.forEach(t),XLr=r(bRe," (T5 model)"),bRe.forEach(t),Ve.forEach(t),zLr=i(Dl),T(HE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),QPe=i(f),kc=n(f,"H2",{class:!0});var Yqe=s(kc);UE=n(Yqe,"A",{id:!0,class:!0,href:!0});var ATt=s(UE);vFe=n(ATt,"SPAN",{});var yTt=s(vFe);T(j8.$$.fragment,yTt),yTt.forEach(t),ATt.forEach(t),QLr=i(Yqe),FFe=n(Yqe,"SPAN",{});var LTt=s(FFe);WLr=r(LTt,"FlaxAutoModelForSequenceClassification"),LTt.forEach(t),Yqe.forEach(t),WPe=i(f),pr=n(f,"DIV",{class:!0});var Gl=s(pr);T(D8.$$.fragment,Gl),HLr=i(Gl),Sc=n(Gl,"P",{});var DK=s(Sc);ULr=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tJ=n(DK,"A",{href:!0});var xTt=s(tJ);JLr=r(xTt,"from_pretrained()"),xTt.forEach(t),YLr=r(DK," class method or the "),aJ=n(DK,"A",{href:!0});var $Tt=s(aJ);KLr=r($Tt,"from_config()"),$Tt.forEach(t),ZLr=r(DK,` class
method.`),DK.forEach(t),e8r=i(Gl),G8=n(Gl,"P",{});var Kqe=s(G8);o8r=r(Kqe,"This class cannot be instantiated directly using "),TFe=n(Kqe,"CODE",{});var kTt=s(TFe);r8r=r(kTt,"__init__()"),kTt.forEach(t),t8r=r(Kqe," (throws an error)."),Kqe.forEach(t),a8r=i(Gl),Gt=n(Gl,"DIV",{class:!0});var tA=s(Gt);T(O8.$$.fragment,tA),n8r=i(tA),MFe=n(tA,"P",{});var STt=s(MFe);s8r=r(STt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),STt.forEach(t),l8r=i(tA),Rc=n(tA,"P",{});var GK=s(Rc);i8r=r(GK,`Note:
Loading a model from its configuration file does `),EFe=n(GK,"STRONG",{});var RTt=s(EFe);d8r=r(RTt,"not"),RTt.forEach(t),c8r=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=n(GK,"A",{href:!0});var BTt=s(nJ);f8r=r(BTt,"from_pretrained()"),BTt.forEach(t),m8r=r(GK," to load the model weights."),GK.forEach(t),g8r=i(tA),T(JE.$$.fragment,tA),tA.forEach(t),h8r=i(Gl),Or=n(Gl,"DIV",{class:!0});var Ol=s(Or);T(V8.$$.fragment,Ol),p8r=i(Ol),CFe=n(Ol,"P",{});var PTt=s(CFe);u8r=r(PTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),PTt.forEach(t),_8r=i(Ol),hn=n(Ol,"P",{});var aA=s(hn);b8r=r(aA,"The model class to instantiate is selected based on the "),wFe=n(aA,"CODE",{});var ITt=s(wFe);v8r=r(ITt,"model_type"),ITt.forEach(t),F8r=r(aA,` property of the config object (either
passed as an argument or loaded from `),AFe=n(aA,"CODE",{});var qTt=s(AFe);T8r=r(qTt,"pretrained_model_name_or_path"),qTt.forEach(t),M8r=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=n(aA,"CODE",{});var NTt=s(yFe);E8r=r(NTt,"pretrained_model_name_or_path"),NTt.forEach(t),C8r=r(aA,":"),aA.forEach(t),w8r=i(Ol),xe=n(Ol,"UL",{});var Pe=s(xe);YE=n(Pe,"LI",{});var vRe=s(YE);LFe=n(vRe,"STRONG",{});var jTt=s(LFe);A8r=r(jTt,"albert"),jTt.forEach(t),y8r=r(vRe," \u2014 "),sJ=n(vRe,"A",{href:!0});var DTt=s(sJ);L8r=r(DTt,"FlaxAlbertForSequenceClassification"),DTt.forEach(t),x8r=r(vRe," (ALBERT model)"),vRe.forEach(t),$8r=i(Pe),KE=n(Pe,"LI",{});var FRe=s(KE);xFe=n(FRe,"STRONG",{});var GTt=s(xFe);k8r=r(GTt,"bart"),GTt.forEach(t),S8r=r(FRe," \u2014 "),lJ=n(FRe,"A",{href:!0});var OTt=s(lJ);R8r=r(OTt,"FlaxBartForSequenceClassification"),OTt.forEach(t),B8r=r(FRe," (BART model)"),FRe.forEach(t),P8r=i(Pe),ZE=n(Pe,"LI",{});var TRe=s(ZE);$Fe=n(TRe,"STRONG",{});var VTt=s($Fe);I8r=r(VTt,"bert"),VTt.forEach(t),q8r=r(TRe," \u2014 "),iJ=n(TRe,"A",{href:!0});var XTt=s(iJ);N8r=r(XTt,"FlaxBertForSequenceClassification"),XTt.forEach(t),j8r=r(TRe," (BERT model)"),TRe.forEach(t),D8r=i(Pe),e5=n(Pe,"LI",{});var MRe=s(e5);kFe=n(MRe,"STRONG",{});var zTt=s(kFe);G8r=r(zTt,"big_bird"),zTt.forEach(t),O8r=r(MRe," \u2014 "),dJ=n(MRe,"A",{href:!0});var QTt=s(dJ);V8r=r(QTt,"FlaxBigBirdForSequenceClassification"),QTt.forEach(t),X8r=r(MRe," (BigBird model)"),MRe.forEach(t),z8r=i(Pe),o5=n(Pe,"LI",{});var ERe=s(o5);SFe=n(ERe,"STRONG",{});var WTt=s(SFe);Q8r=r(WTt,"distilbert"),WTt.forEach(t),W8r=r(ERe," \u2014 "),cJ=n(ERe,"A",{href:!0});var HTt=s(cJ);H8r=r(HTt,"FlaxDistilBertForSequenceClassification"),HTt.forEach(t),U8r=r(ERe," (DistilBERT model)"),ERe.forEach(t),J8r=i(Pe),r5=n(Pe,"LI",{});var CRe=s(r5);RFe=n(CRe,"STRONG",{});var UTt=s(RFe);Y8r=r(UTt,"electra"),UTt.forEach(t),K8r=r(CRe," \u2014 "),fJ=n(CRe,"A",{href:!0});var JTt=s(fJ);Z8r=r(JTt,"FlaxElectraForSequenceClassification"),JTt.forEach(t),exr=r(CRe," (ELECTRA model)"),CRe.forEach(t),oxr=i(Pe),t5=n(Pe,"LI",{});var wRe=s(t5);BFe=n(wRe,"STRONG",{});var YTt=s(BFe);rxr=r(YTt,"mbart"),YTt.forEach(t),txr=r(wRe," \u2014 "),mJ=n(wRe,"A",{href:!0});var KTt=s(mJ);axr=r(KTt,"FlaxMBartForSequenceClassification"),KTt.forEach(t),nxr=r(wRe," (mBART model)"),wRe.forEach(t),sxr=i(Pe),a5=n(Pe,"LI",{});var ARe=s(a5);PFe=n(ARe,"STRONG",{});var ZTt=s(PFe);lxr=r(ZTt,"roberta"),ZTt.forEach(t),ixr=r(ARe," \u2014 "),gJ=n(ARe,"A",{href:!0});var eMt=s(gJ);dxr=r(eMt,"FlaxRobertaForSequenceClassification"),eMt.forEach(t),cxr=r(ARe," (RoBERTa model)"),ARe.forEach(t),fxr=i(Pe),n5=n(Pe,"LI",{});var yRe=s(n5);IFe=n(yRe,"STRONG",{});var oMt=s(IFe);mxr=r(oMt,"roformer"),oMt.forEach(t),gxr=r(yRe," \u2014 "),hJ=n(yRe,"A",{href:!0});var rMt=s(hJ);hxr=r(rMt,"FlaxRoFormerForSequenceClassification"),rMt.forEach(t),pxr=r(yRe," (RoFormer model)"),yRe.forEach(t),uxr=i(Pe),s5=n(Pe,"LI",{});var LRe=s(s5);qFe=n(LRe,"STRONG",{});var tMt=s(qFe);_xr=r(tMt,"xlm-roberta"),tMt.forEach(t),bxr=r(LRe," \u2014 "),pJ=n(LRe,"A",{href:!0});var aMt=s(pJ);vxr=r(aMt,"FlaxXLMRobertaForSequenceClassification"),aMt.forEach(t),Fxr=r(LRe," (XLM-RoBERTa model)"),LRe.forEach(t),Pe.forEach(t),Txr=i(Ol),T(l5.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),HPe=i(f),Bc=n(f,"H2",{class:!0});var Zqe=s(Bc);i5=n(Zqe,"A",{id:!0,class:!0,href:!0});var nMt=s(i5);NFe=n(nMt,"SPAN",{});var sMt=s(NFe);T(X8.$$.fragment,sMt),sMt.forEach(t),nMt.forEach(t),Mxr=i(Zqe),jFe=n(Zqe,"SPAN",{});var lMt=s(jFe);Exr=r(lMt,"FlaxAutoModelForQuestionAnswering"),lMt.forEach(t),Zqe.forEach(t),UPe=i(f),ur=n(f,"DIV",{class:!0});var Vl=s(ur);T(z8.$$.fragment,Vl),Cxr=i(Vl),Pc=n(Vl,"P",{});var OK=s(Pc);wxr=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uJ=n(OK,"A",{href:!0});var iMt=s(uJ);Axr=r(iMt,"from_pretrained()"),iMt.forEach(t),yxr=r(OK," class method or the "),_J=n(OK,"A",{href:!0});var dMt=s(_J);Lxr=r(dMt,"from_config()"),dMt.forEach(t),xxr=r(OK,` class
method.`),OK.forEach(t),$xr=i(Vl),Q8=n(Vl,"P",{});var eNe=s(Q8);kxr=r(eNe,"This class cannot be instantiated directly using "),DFe=n(eNe,"CODE",{});var cMt=s(DFe);Sxr=r(cMt,"__init__()"),cMt.forEach(t),Rxr=r(eNe," (throws an error)."),eNe.forEach(t),Bxr=i(Vl),Ot=n(Vl,"DIV",{class:!0});var nA=s(Ot);T(W8.$$.fragment,nA),Pxr=i(nA),GFe=n(nA,"P",{});var fMt=s(GFe);Ixr=r(fMt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),fMt.forEach(t),qxr=i(nA),Ic=n(nA,"P",{});var VK=s(Ic);Nxr=r(VK,`Note:
Loading a model from its configuration file does `),OFe=n(VK,"STRONG",{});var mMt=s(OFe);jxr=r(mMt,"not"),mMt.forEach(t),Dxr=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=n(VK,"A",{href:!0});var gMt=s(bJ);Gxr=r(gMt,"from_pretrained()"),gMt.forEach(t),Oxr=r(VK," to load the model weights."),VK.forEach(t),Vxr=i(nA),T(d5.$$.fragment,nA),nA.forEach(t),Xxr=i(Vl),Vr=n(Vl,"DIV",{class:!0});var Xl=s(Vr);T(H8.$$.fragment,Xl),zxr=i(Xl),VFe=n(Xl,"P",{});var hMt=s(VFe);Qxr=r(hMt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hMt.forEach(t),Wxr=i(Xl),pn=n(Xl,"P",{});var sA=s(pn);Hxr=r(sA,"The model class to instantiate is selected based on the "),XFe=n(sA,"CODE",{});var pMt=s(XFe);Uxr=r(pMt,"model_type"),pMt.forEach(t),Jxr=r(sA,` property of the config object (either
passed as an argument or loaded from `),zFe=n(sA,"CODE",{});var uMt=s(zFe);Yxr=r(uMt,"pretrained_model_name_or_path"),uMt.forEach(t),Kxr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=n(sA,"CODE",{});var _Mt=s(QFe);Zxr=r(_Mt,"pretrained_model_name_or_path"),_Mt.forEach(t),e9r=r(sA,":"),sA.forEach(t),o9r=i(Xl),$e=n(Xl,"UL",{});var Ie=s($e);c5=n(Ie,"LI",{});var xRe=s(c5);WFe=n(xRe,"STRONG",{});var bMt=s(WFe);r9r=r(bMt,"albert"),bMt.forEach(t),t9r=r(xRe," \u2014 "),vJ=n(xRe,"A",{href:!0});var vMt=s(vJ);a9r=r(vMt,"FlaxAlbertForQuestionAnswering"),vMt.forEach(t),n9r=r(xRe," (ALBERT model)"),xRe.forEach(t),s9r=i(Ie),f5=n(Ie,"LI",{});var $Re=s(f5);HFe=n($Re,"STRONG",{});var FMt=s(HFe);l9r=r(FMt,"bart"),FMt.forEach(t),i9r=r($Re," \u2014 "),FJ=n($Re,"A",{href:!0});var TMt=s(FJ);d9r=r(TMt,"FlaxBartForQuestionAnswering"),TMt.forEach(t),c9r=r($Re," (BART model)"),$Re.forEach(t),f9r=i(Ie),m5=n(Ie,"LI",{});var kRe=s(m5);UFe=n(kRe,"STRONG",{});var MMt=s(UFe);m9r=r(MMt,"bert"),MMt.forEach(t),g9r=r(kRe," \u2014 "),TJ=n(kRe,"A",{href:!0});var EMt=s(TJ);h9r=r(EMt,"FlaxBertForQuestionAnswering"),EMt.forEach(t),p9r=r(kRe," (BERT model)"),kRe.forEach(t),u9r=i(Ie),g5=n(Ie,"LI",{});var SRe=s(g5);JFe=n(SRe,"STRONG",{});var CMt=s(JFe);_9r=r(CMt,"big_bird"),CMt.forEach(t),b9r=r(SRe," \u2014 "),MJ=n(SRe,"A",{href:!0});var wMt=s(MJ);v9r=r(wMt,"FlaxBigBirdForQuestionAnswering"),wMt.forEach(t),F9r=r(SRe," (BigBird model)"),SRe.forEach(t),T9r=i(Ie),h5=n(Ie,"LI",{});var RRe=s(h5);YFe=n(RRe,"STRONG",{});var AMt=s(YFe);M9r=r(AMt,"distilbert"),AMt.forEach(t),E9r=r(RRe," \u2014 "),EJ=n(RRe,"A",{href:!0});var yMt=s(EJ);C9r=r(yMt,"FlaxDistilBertForQuestionAnswering"),yMt.forEach(t),w9r=r(RRe," (DistilBERT model)"),RRe.forEach(t),A9r=i(Ie),p5=n(Ie,"LI",{});var BRe=s(p5);KFe=n(BRe,"STRONG",{});var LMt=s(KFe);y9r=r(LMt,"electra"),LMt.forEach(t),L9r=r(BRe," \u2014 "),CJ=n(BRe,"A",{href:!0});var xMt=s(CJ);x9r=r(xMt,"FlaxElectraForQuestionAnswering"),xMt.forEach(t),$9r=r(BRe," (ELECTRA model)"),BRe.forEach(t),k9r=i(Ie),u5=n(Ie,"LI",{});var PRe=s(u5);ZFe=n(PRe,"STRONG",{});var $Mt=s(ZFe);S9r=r($Mt,"mbart"),$Mt.forEach(t),R9r=r(PRe," \u2014 "),wJ=n(PRe,"A",{href:!0});var kMt=s(wJ);B9r=r(kMt,"FlaxMBartForQuestionAnswering"),kMt.forEach(t),P9r=r(PRe," (mBART model)"),PRe.forEach(t),I9r=i(Ie),_5=n(Ie,"LI",{});var IRe=s(_5);e0e=n(IRe,"STRONG",{});var SMt=s(e0e);q9r=r(SMt,"roberta"),SMt.forEach(t),N9r=r(IRe," \u2014 "),AJ=n(IRe,"A",{href:!0});var RMt=s(AJ);j9r=r(RMt,"FlaxRobertaForQuestionAnswering"),RMt.forEach(t),D9r=r(IRe," (RoBERTa model)"),IRe.forEach(t),G9r=i(Ie),b5=n(Ie,"LI",{});var qRe=s(b5);o0e=n(qRe,"STRONG",{});var BMt=s(o0e);O9r=r(BMt,"roformer"),BMt.forEach(t),V9r=r(qRe," \u2014 "),yJ=n(qRe,"A",{href:!0});var PMt=s(yJ);X9r=r(PMt,"FlaxRoFormerForQuestionAnswering"),PMt.forEach(t),z9r=r(qRe," (RoFormer model)"),qRe.forEach(t),Q9r=i(Ie),v5=n(Ie,"LI",{});var NRe=s(v5);r0e=n(NRe,"STRONG",{});var IMt=s(r0e);W9r=r(IMt,"xlm-roberta"),IMt.forEach(t),H9r=r(NRe," \u2014 "),LJ=n(NRe,"A",{href:!0});var qMt=s(LJ);U9r=r(qMt,"FlaxXLMRobertaForQuestionAnswering"),qMt.forEach(t),J9r=r(NRe," (XLM-RoBERTa model)"),NRe.forEach(t),Ie.forEach(t),Y9r=i(Xl),T(F5.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),JPe=i(f),qc=n(f,"H2",{class:!0});var oNe=s(qc);T5=n(oNe,"A",{id:!0,class:!0,href:!0});var NMt=s(T5);t0e=n(NMt,"SPAN",{});var jMt=s(t0e);T(U8.$$.fragment,jMt),jMt.forEach(t),NMt.forEach(t),K9r=i(oNe),a0e=n(oNe,"SPAN",{});var DMt=s(a0e);Z9r=r(DMt,"FlaxAutoModelForTokenClassification"),DMt.forEach(t),oNe.forEach(t),YPe=i(f),_r=n(f,"DIV",{class:!0});var zl=s(_r);T(J8.$$.fragment,zl),e$r=i(zl),Nc=n(zl,"P",{});var XK=s(Nc);o$r=r(XK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xJ=n(XK,"A",{href:!0});var GMt=s(xJ);r$r=r(GMt,"from_pretrained()"),GMt.forEach(t),t$r=r(XK," class method or the "),$J=n(XK,"A",{href:!0});var OMt=s($J);a$r=r(OMt,"from_config()"),OMt.forEach(t),n$r=r(XK,` class
method.`),XK.forEach(t),s$r=i(zl),Y8=n(zl,"P",{});var rNe=s(Y8);l$r=r(rNe,"This class cannot be instantiated directly using "),n0e=n(rNe,"CODE",{});var VMt=s(n0e);i$r=r(VMt,"__init__()"),VMt.forEach(t),d$r=r(rNe," (throws an error)."),rNe.forEach(t),c$r=i(zl),Vt=n(zl,"DIV",{class:!0});var lA=s(Vt);T(K8.$$.fragment,lA),f$r=i(lA),s0e=n(lA,"P",{});var XMt=s(s0e);m$r=r(XMt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),XMt.forEach(t),g$r=i(lA),jc=n(lA,"P",{});var zK=s(jc);h$r=r(zK,`Note:
Loading a model from its configuration file does `),l0e=n(zK,"STRONG",{});var zMt=s(l0e);p$r=r(zMt,"not"),zMt.forEach(t),u$r=r(zK,` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=n(zK,"A",{href:!0});var QMt=s(kJ);_$r=r(QMt,"from_pretrained()"),QMt.forEach(t),b$r=r(zK," to load the model weights."),zK.forEach(t),v$r=i(lA),T(M5.$$.fragment,lA),lA.forEach(t),F$r=i(zl),Xr=n(zl,"DIV",{class:!0});var Ql=s(Xr);T(Z8.$$.fragment,Ql),T$r=i(Ql),i0e=n(Ql,"P",{});var WMt=s(i0e);M$r=r(WMt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),WMt.forEach(t),E$r=i(Ql),un=n(Ql,"P",{});var iA=s(un);C$r=r(iA,"The model class to instantiate is selected based on the "),d0e=n(iA,"CODE",{});var HMt=s(d0e);w$r=r(HMt,"model_type"),HMt.forEach(t),A$r=r(iA,` property of the config object (either
passed as an argument or loaded from `),c0e=n(iA,"CODE",{});var UMt=s(c0e);y$r=r(UMt,"pretrained_model_name_or_path"),UMt.forEach(t),L$r=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f0e=n(iA,"CODE",{});var JMt=s(f0e);x$r=r(JMt,"pretrained_model_name_or_path"),JMt.forEach(t),$$r=r(iA,":"),iA.forEach(t),k$r=i(Ql),De=n(Ql,"UL",{});var Fo=s(De);E5=n(Fo,"LI",{});var jRe=s(E5);m0e=n(jRe,"STRONG",{});var YMt=s(m0e);S$r=r(YMt,"albert"),YMt.forEach(t),R$r=r(jRe," \u2014 "),SJ=n(jRe,"A",{href:!0});var KMt=s(SJ);B$r=r(KMt,"FlaxAlbertForTokenClassification"),KMt.forEach(t),P$r=r(jRe," (ALBERT model)"),jRe.forEach(t),I$r=i(Fo),C5=n(Fo,"LI",{});var DRe=s(C5);g0e=n(DRe,"STRONG",{});var ZMt=s(g0e);q$r=r(ZMt,"bert"),ZMt.forEach(t),N$r=r(DRe," \u2014 "),RJ=n(DRe,"A",{href:!0});var e4t=s(RJ);j$r=r(e4t,"FlaxBertForTokenClassification"),e4t.forEach(t),D$r=r(DRe," (BERT model)"),DRe.forEach(t),G$r=i(Fo),w5=n(Fo,"LI",{});var GRe=s(w5);h0e=n(GRe,"STRONG",{});var o4t=s(h0e);O$r=r(o4t,"big_bird"),o4t.forEach(t),V$r=r(GRe," \u2014 "),BJ=n(GRe,"A",{href:!0});var r4t=s(BJ);X$r=r(r4t,"FlaxBigBirdForTokenClassification"),r4t.forEach(t),z$r=r(GRe," (BigBird model)"),GRe.forEach(t),Q$r=i(Fo),A5=n(Fo,"LI",{});var ORe=s(A5);p0e=n(ORe,"STRONG",{});var t4t=s(p0e);W$r=r(t4t,"distilbert"),t4t.forEach(t),H$r=r(ORe," \u2014 "),PJ=n(ORe,"A",{href:!0});var a4t=s(PJ);U$r=r(a4t,"FlaxDistilBertForTokenClassification"),a4t.forEach(t),J$r=r(ORe," (DistilBERT model)"),ORe.forEach(t),Y$r=i(Fo),y5=n(Fo,"LI",{});var VRe=s(y5);u0e=n(VRe,"STRONG",{});var n4t=s(u0e);K$r=r(n4t,"electra"),n4t.forEach(t),Z$r=r(VRe," \u2014 "),IJ=n(VRe,"A",{href:!0});var s4t=s(IJ);ekr=r(s4t,"FlaxElectraForTokenClassification"),s4t.forEach(t),okr=r(VRe," (ELECTRA model)"),VRe.forEach(t),rkr=i(Fo),L5=n(Fo,"LI",{});var XRe=s(L5);_0e=n(XRe,"STRONG",{});var l4t=s(_0e);tkr=r(l4t,"roberta"),l4t.forEach(t),akr=r(XRe," \u2014 "),qJ=n(XRe,"A",{href:!0});var i4t=s(qJ);nkr=r(i4t,"FlaxRobertaForTokenClassification"),i4t.forEach(t),skr=r(XRe," (RoBERTa model)"),XRe.forEach(t),lkr=i(Fo),x5=n(Fo,"LI",{});var zRe=s(x5);b0e=n(zRe,"STRONG",{});var d4t=s(b0e);ikr=r(d4t,"roformer"),d4t.forEach(t),dkr=r(zRe," \u2014 "),NJ=n(zRe,"A",{href:!0});var c4t=s(NJ);ckr=r(c4t,"FlaxRoFormerForTokenClassification"),c4t.forEach(t),fkr=r(zRe," (RoFormer model)"),zRe.forEach(t),mkr=i(Fo),$5=n(Fo,"LI",{});var QRe=s($5);v0e=n(QRe,"STRONG",{});var f4t=s(v0e);gkr=r(f4t,"xlm-roberta"),f4t.forEach(t),hkr=r(QRe," \u2014 "),jJ=n(QRe,"A",{href:!0});var m4t=s(jJ);pkr=r(m4t,"FlaxXLMRobertaForTokenClassification"),m4t.forEach(t),ukr=r(QRe," (XLM-RoBERTa model)"),QRe.forEach(t),Fo.forEach(t),_kr=i(Ql),T(k5.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),KPe=i(f),Dc=n(f,"H2",{class:!0});var tNe=s(Dc);S5=n(tNe,"A",{id:!0,class:!0,href:!0});var g4t=s(S5);F0e=n(g4t,"SPAN",{});var h4t=s(F0e);T(ex.$$.fragment,h4t),h4t.forEach(t),g4t.forEach(t),bkr=i(tNe),T0e=n(tNe,"SPAN",{});var p4t=s(T0e);vkr=r(p4t,"FlaxAutoModelForMultipleChoice"),p4t.forEach(t),tNe.forEach(t),ZPe=i(f),br=n(f,"DIV",{class:!0});var Wl=s(br);T(ox.$$.fragment,Wl),Fkr=i(Wl),Gc=n(Wl,"P",{});var QK=s(Gc);Tkr=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),DJ=n(QK,"A",{href:!0});var u4t=s(DJ);Mkr=r(u4t,"from_pretrained()"),u4t.forEach(t),Ekr=r(QK," class method or the "),GJ=n(QK,"A",{href:!0});var _4t=s(GJ);Ckr=r(_4t,"from_config()"),_4t.forEach(t),wkr=r(QK,` class
method.`),QK.forEach(t),Akr=i(Wl),rx=n(Wl,"P",{});var aNe=s(rx);ykr=r(aNe,"This class cannot be instantiated directly using "),M0e=n(aNe,"CODE",{});var b4t=s(M0e);Lkr=r(b4t,"__init__()"),b4t.forEach(t),xkr=r(aNe," (throws an error)."),aNe.forEach(t),$kr=i(Wl),Xt=n(Wl,"DIV",{class:!0});var dA=s(Xt);T(tx.$$.fragment,dA),kkr=i(dA),E0e=n(dA,"P",{});var v4t=s(E0e);Skr=r(v4t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),v4t.forEach(t),Rkr=i(dA),Oc=n(dA,"P",{});var WK=s(Oc);Bkr=r(WK,`Note:
Loading a model from its configuration file does `),C0e=n(WK,"STRONG",{});var F4t=s(C0e);Pkr=r(F4t,"not"),F4t.forEach(t),Ikr=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=n(WK,"A",{href:!0});var T4t=s(OJ);qkr=r(T4t,"from_pretrained()"),T4t.forEach(t),Nkr=r(WK," to load the model weights."),WK.forEach(t),jkr=i(dA),T(R5.$$.fragment,dA),dA.forEach(t),Dkr=i(Wl),zr=n(Wl,"DIV",{class:!0});var Hl=s(zr);T(ax.$$.fragment,Hl),Gkr=i(Hl),w0e=n(Hl,"P",{});var M4t=s(w0e);Okr=r(M4t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),M4t.forEach(t),Vkr=i(Hl),_n=n(Hl,"P",{});var cA=s(_n);Xkr=r(cA,"The model class to instantiate is selected based on the "),A0e=n(cA,"CODE",{});var E4t=s(A0e);zkr=r(E4t,"model_type"),E4t.forEach(t),Qkr=r(cA,` property of the config object (either
passed as an argument or loaded from `),y0e=n(cA,"CODE",{});var C4t=s(y0e);Wkr=r(C4t,"pretrained_model_name_or_path"),C4t.forEach(t),Hkr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L0e=n(cA,"CODE",{});var w4t=s(L0e);Ukr=r(w4t,"pretrained_model_name_or_path"),w4t.forEach(t),Jkr=r(cA,":"),cA.forEach(t),Ykr=i(Hl),Ge=n(Hl,"UL",{});var To=s(Ge);B5=n(To,"LI",{});var WRe=s(B5);x0e=n(WRe,"STRONG",{});var A4t=s(x0e);Kkr=r(A4t,"albert"),A4t.forEach(t),Zkr=r(WRe," \u2014 "),VJ=n(WRe,"A",{href:!0});var y4t=s(VJ);eSr=r(y4t,"FlaxAlbertForMultipleChoice"),y4t.forEach(t),oSr=r(WRe," (ALBERT model)"),WRe.forEach(t),rSr=i(To),P5=n(To,"LI",{});var HRe=s(P5);$0e=n(HRe,"STRONG",{});var L4t=s($0e);tSr=r(L4t,"bert"),L4t.forEach(t),aSr=r(HRe," \u2014 "),XJ=n(HRe,"A",{href:!0});var x4t=s(XJ);nSr=r(x4t,"FlaxBertForMultipleChoice"),x4t.forEach(t),sSr=r(HRe," (BERT model)"),HRe.forEach(t),lSr=i(To),I5=n(To,"LI",{});var URe=s(I5);k0e=n(URe,"STRONG",{});var $4t=s(k0e);iSr=r($4t,"big_bird"),$4t.forEach(t),dSr=r(URe," \u2014 "),zJ=n(URe,"A",{href:!0});var k4t=s(zJ);cSr=r(k4t,"FlaxBigBirdForMultipleChoice"),k4t.forEach(t),fSr=r(URe," (BigBird model)"),URe.forEach(t),mSr=i(To),q5=n(To,"LI",{});var JRe=s(q5);S0e=n(JRe,"STRONG",{});var S4t=s(S0e);gSr=r(S4t,"distilbert"),S4t.forEach(t),hSr=r(JRe," \u2014 "),QJ=n(JRe,"A",{href:!0});var R4t=s(QJ);pSr=r(R4t,"FlaxDistilBertForMultipleChoice"),R4t.forEach(t),uSr=r(JRe," (DistilBERT model)"),JRe.forEach(t),_Sr=i(To),N5=n(To,"LI",{});var YRe=s(N5);R0e=n(YRe,"STRONG",{});var B4t=s(R0e);bSr=r(B4t,"electra"),B4t.forEach(t),vSr=r(YRe," \u2014 "),WJ=n(YRe,"A",{href:!0});var P4t=s(WJ);FSr=r(P4t,"FlaxElectraForMultipleChoice"),P4t.forEach(t),TSr=r(YRe," (ELECTRA model)"),YRe.forEach(t),MSr=i(To),j5=n(To,"LI",{});var KRe=s(j5);B0e=n(KRe,"STRONG",{});var I4t=s(B0e);ESr=r(I4t,"roberta"),I4t.forEach(t),CSr=r(KRe," \u2014 "),HJ=n(KRe,"A",{href:!0});var q4t=s(HJ);wSr=r(q4t,"FlaxRobertaForMultipleChoice"),q4t.forEach(t),ASr=r(KRe," (RoBERTa model)"),KRe.forEach(t),ySr=i(To),D5=n(To,"LI",{});var ZRe=s(D5);P0e=n(ZRe,"STRONG",{});var N4t=s(P0e);LSr=r(N4t,"roformer"),N4t.forEach(t),xSr=r(ZRe," \u2014 "),UJ=n(ZRe,"A",{href:!0});var j4t=s(UJ);$Sr=r(j4t,"FlaxRoFormerForMultipleChoice"),j4t.forEach(t),kSr=r(ZRe," (RoFormer model)"),ZRe.forEach(t),SSr=i(To),G5=n(To,"LI",{});var eBe=s(G5);I0e=n(eBe,"STRONG",{});var D4t=s(I0e);RSr=r(D4t,"xlm-roberta"),D4t.forEach(t),BSr=r(eBe," \u2014 "),JJ=n(eBe,"A",{href:!0});var G4t=s(JJ);PSr=r(G4t,"FlaxXLMRobertaForMultipleChoice"),G4t.forEach(t),ISr=r(eBe," (XLM-RoBERTa model)"),eBe.forEach(t),To.forEach(t),qSr=i(Hl),T(O5.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),eIe=i(f),Vc=n(f,"H2",{class:!0});var nNe=s(Vc);V5=n(nNe,"A",{id:!0,class:!0,href:!0});var O4t=s(V5);q0e=n(O4t,"SPAN",{});var V4t=s(q0e);T(nx.$$.fragment,V4t),V4t.forEach(t),O4t.forEach(t),NSr=i(nNe),N0e=n(nNe,"SPAN",{});var X4t=s(N0e);jSr=r(X4t,"FlaxAutoModelForNextSentencePrediction"),X4t.forEach(t),nNe.forEach(t),oIe=i(f),vr=n(f,"DIV",{class:!0});var Ul=s(vr);T(sx.$$.fragment,Ul),DSr=i(Ul),Xc=n(Ul,"P",{});var HK=s(Xc);GSr=r(HK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YJ=n(HK,"A",{href:!0});var z4t=s(YJ);OSr=r(z4t,"from_pretrained()"),z4t.forEach(t),VSr=r(HK," class method or the "),KJ=n(HK,"A",{href:!0});var Q4t=s(KJ);XSr=r(Q4t,"from_config()"),Q4t.forEach(t),zSr=r(HK,` class
method.`),HK.forEach(t),QSr=i(Ul),lx=n(Ul,"P",{});var sNe=s(lx);WSr=r(sNe,"This class cannot be instantiated directly using "),j0e=n(sNe,"CODE",{});var W4t=s(j0e);HSr=r(W4t,"__init__()"),W4t.forEach(t),USr=r(sNe," (throws an error)."),sNe.forEach(t),JSr=i(Ul),zt=n(Ul,"DIV",{class:!0});var fA=s(zt);T(ix.$$.fragment,fA),YSr=i(fA),D0e=n(fA,"P",{});var H4t=s(D0e);KSr=r(H4t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),H4t.forEach(t),ZSr=i(fA),zc=n(fA,"P",{});var UK=s(zc);eRr=r(UK,`Note:
Loading a model from its configuration file does `),G0e=n(UK,"STRONG",{});var U4t=s(G0e);oRr=r(U4t,"not"),U4t.forEach(t),rRr=r(UK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=n(UK,"A",{href:!0});var J4t=s(ZJ);tRr=r(J4t,"from_pretrained()"),J4t.forEach(t),aRr=r(UK," to load the model weights."),UK.forEach(t),nRr=i(fA),T(X5.$$.fragment,fA),fA.forEach(t),sRr=i(Ul),Qr=n(Ul,"DIV",{class:!0});var Jl=s(Qr);T(dx.$$.fragment,Jl),lRr=i(Jl),O0e=n(Jl,"P",{});var Y4t=s(O0e);iRr=r(Y4t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Y4t.forEach(t),dRr=i(Jl),bn=n(Jl,"P",{});var mA=s(bn);cRr=r(mA,"The model class to instantiate is selected based on the "),V0e=n(mA,"CODE",{});var K4t=s(V0e);fRr=r(K4t,"model_type"),K4t.forEach(t),mRr=r(mA,` property of the config object (either
passed as an argument or loaded from `),X0e=n(mA,"CODE",{});var Z4t=s(X0e);gRr=r(Z4t,"pretrained_model_name_or_path"),Z4t.forEach(t),hRr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z0e=n(mA,"CODE",{});var eEt=s(z0e);pRr=r(eEt,"pretrained_model_name_or_path"),eEt.forEach(t),uRr=r(mA,":"),mA.forEach(t),_Rr=i(Jl),Q0e=n(Jl,"UL",{});var oEt=s(Q0e);z5=n(oEt,"LI",{});var oBe=s(z5);W0e=n(oBe,"STRONG",{});var rEt=s(W0e);bRr=r(rEt,"bert"),rEt.forEach(t),vRr=r(oBe," \u2014 "),eY=n(oBe,"A",{href:!0});var tEt=s(eY);FRr=r(tEt,"FlaxBertForNextSentencePrediction"),tEt.forEach(t),TRr=r(oBe," (BERT model)"),oBe.forEach(t),oEt.forEach(t),MRr=i(Jl),T(Q5.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),rIe=i(f),Qc=n(f,"H2",{class:!0});var lNe=s(Qc);W5=n(lNe,"A",{id:!0,class:!0,href:!0});var aEt=s(W5);H0e=n(aEt,"SPAN",{});var nEt=s(H0e);T(cx.$$.fragment,nEt),nEt.forEach(t),aEt.forEach(t),ERr=i(lNe),U0e=n(lNe,"SPAN",{});var sEt=s(U0e);CRr=r(sEt,"FlaxAutoModelForImageClassification"),sEt.forEach(t),lNe.forEach(t),tIe=i(f),Fr=n(f,"DIV",{class:!0});var Yl=s(Fr);T(fx.$$.fragment,Yl),wRr=i(Yl),Wc=n(Yl,"P",{});var JK=s(Wc);ARr=r(JK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oY=n(JK,"A",{href:!0});var lEt=s(oY);yRr=r(lEt,"from_pretrained()"),lEt.forEach(t),LRr=r(JK," class method or the "),rY=n(JK,"A",{href:!0});var iEt=s(rY);xRr=r(iEt,"from_config()"),iEt.forEach(t),$Rr=r(JK,` class
method.`),JK.forEach(t),kRr=i(Yl),mx=n(Yl,"P",{});var iNe=s(mx);SRr=r(iNe,"This class cannot be instantiated directly using "),J0e=n(iNe,"CODE",{});var dEt=s(J0e);RRr=r(dEt,"__init__()"),dEt.forEach(t),BRr=r(iNe," (throws an error)."),iNe.forEach(t),PRr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var gA=s(Qt);T(gx.$$.fragment,gA),IRr=i(gA),Y0e=n(gA,"P",{});var cEt=s(Y0e);qRr=r(cEt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),cEt.forEach(t),NRr=i(gA),Hc=n(gA,"P",{});var YK=s(Hc);jRr=r(YK,`Note:
Loading a model from its configuration file does `),K0e=n(YK,"STRONG",{});var fEt=s(K0e);DRr=r(fEt,"not"),fEt.forEach(t),GRr=r(YK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=n(YK,"A",{href:!0});var mEt=s(tY);ORr=r(mEt,"from_pretrained()"),mEt.forEach(t),VRr=r(YK," to load the model weights."),YK.forEach(t),XRr=i(gA),T(H5.$$.fragment,gA),gA.forEach(t),zRr=i(Yl),Wr=n(Yl,"DIV",{class:!0});var Kl=s(Wr);T(hx.$$.fragment,Kl),QRr=i(Kl),Z0e=n(Kl,"P",{});var gEt=s(Z0e);WRr=r(gEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gEt.forEach(t),HRr=i(Kl),vn=n(Kl,"P",{});var hA=s(vn);URr=r(hA,"The model class to instantiate is selected based on the "),eTe=n(hA,"CODE",{});var hEt=s(eTe);JRr=r(hEt,"model_type"),hEt.forEach(t),YRr=r(hA,` property of the config object (either
passed as an argument or loaded from `),oTe=n(hA,"CODE",{});var pEt=s(oTe);KRr=r(pEt,"pretrained_model_name_or_path"),pEt.forEach(t),ZRr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=n(hA,"CODE",{});var uEt=s(rTe);eBr=r(uEt,"pretrained_model_name_or_path"),uEt.forEach(t),oBr=r(hA,":"),hA.forEach(t),rBr=i(Kl),px=n(Kl,"UL",{});var dNe=s(px);U5=n(dNe,"LI",{});var rBe=s(U5);tTe=n(rBe,"STRONG",{});var _Et=s(tTe);tBr=r(_Et,"beit"),_Et.forEach(t),aBr=r(rBe," \u2014 "),aY=n(rBe,"A",{href:!0});var bEt=s(aY);nBr=r(bEt,"FlaxBeitForImageClassification"),bEt.forEach(t),sBr=r(rBe," (BEiT model)"),rBe.forEach(t),lBr=i(dNe),J5=n(dNe,"LI",{});var tBe=s(J5);aTe=n(tBe,"STRONG",{});var vEt=s(aTe);iBr=r(vEt,"vit"),vEt.forEach(t),dBr=r(tBe," \u2014 "),nY=n(tBe,"A",{href:!0});var FEt=s(nY);cBr=r(FEt,"FlaxViTForImageClassification"),FEt.forEach(t),fBr=r(tBe," (ViT model)"),tBe.forEach(t),dNe.forEach(t),mBr=i(Kl),T(Y5.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),aIe=i(f),Uc=n(f,"H2",{class:!0});var cNe=s(Uc);K5=n(cNe,"A",{id:!0,class:!0,href:!0});var TEt=s(K5);nTe=n(TEt,"SPAN",{});var MEt=s(nTe);T(ux.$$.fragment,MEt),MEt.forEach(t),TEt.forEach(t),gBr=i(cNe),sTe=n(cNe,"SPAN",{});var EEt=s(sTe);hBr=r(EEt,"FlaxAutoModelForVision2Seq"),EEt.forEach(t),cNe.forEach(t),nIe=i(f),Tr=n(f,"DIV",{class:!0});var Zl=s(Tr);T(_x.$$.fragment,Zl),pBr=i(Zl),Jc=n(Zl,"P",{});var KK=s(Jc);uBr=r(KK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sY=n(KK,"A",{href:!0});var CEt=s(sY);_Br=r(CEt,"from_pretrained()"),CEt.forEach(t),bBr=r(KK," class method or the "),lY=n(KK,"A",{href:!0});var wEt=s(lY);vBr=r(wEt,"from_config()"),wEt.forEach(t),FBr=r(KK,` class
method.`),KK.forEach(t),TBr=i(Zl),bx=n(Zl,"P",{});var fNe=s(bx);MBr=r(fNe,"This class cannot be instantiated directly using "),lTe=n(fNe,"CODE",{});var AEt=s(lTe);EBr=r(AEt,"__init__()"),AEt.forEach(t),CBr=r(fNe," (throws an error)."),fNe.forEach(t),wBr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var pA=s(Wt);T(vx.$$.fragment,pA),ABr=i(pA),iTe=n(pA,"P",{});var yEt=s(iTe);yBr=r(yEt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),yEt.forEach(t),LBr=i(pA),Yc=n(pA,"P",{});var ZK=s(Yc);xBr=r(ZK,`Note:
Loading a model from its configuration file does `),dTe=n(ZK,"STRONG",{});var LEt=s(dTe);$Br=r(LEt,"not"),LEt.forEach(t),kBr=r(ZK,` load the model weights. It only affects the
model\u2019s configuration. Use `),iY=n(ZK,"A",{href:!0});var xEt=s(iY);SBr=r(xEt,"from_pretrained()"),xEt.forEach(t),RBr=r(ZK," to load the model weights."),ZK.forEach(t),BBr=i(pA),T(Z5.$$.fragment,pA),pA.forEach(t),PBr=i(Zl),Hr=n(Zl,"DIV",{class:!0});var ei=s(Hr);T(Fx.$$.fragment,ei),IBr=i(ei),cTe=n(ei,"P",{});var $Et=s(cTe);qBr=r($Et,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$Et.forEach(t),NBr=i(ei),Fn=n(ei,"P",{});var uA=s(Fn);jBr=r(uA,"The model class to instantiate is selected based on the "),fTe=n(uA,"CODE",{});var kEt=s(fTe);DBr=r(kEt,"model_type"),kEt.forEach(t),GBr=r(uA,` property of the config object (either
passed as an argument or loaded from `),mTe=n(uA,"CODE",{});var SEt=s(mTe);OBr=r(SEt,"pretrained_model_name_or_path"),SEt.forEach(t),VBr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gTe=n(uA,"CODE",{});var REt=s(gTe);XBr=r(REt,"pretrained_model_name_or_path"),REt.forEach(t),zBr=r(uA,":"),uA.forEach(t),QBr=i(ei),hTe=n(ei,"UL",{});var BEt=s(hTe);eC=n(BEt,"LI",{});var aBe=s(eC);pTe=n(aBe,"STRONG",{});var PEt=s(pTe);WBr=r(PEt,"vision-encoder-decoder"),PEt.forEach(t),HBr=r(aBe," \u2014 "),dY=n(aBe,"A",{href:!0});var IEt=s(dY);UBr=r(IEt,"FlaxVisionEncoderDecoderModel"),IEt.forEach(t),JBr=r(aBe," (Vision Encoder decoder model)"),aBe.forEach(t),BEt.forEach(t),YBr=i(ei),T(oC.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(NCt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Mn,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.AutoConfig"),c(Cn,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.AutoModel"),c(wn,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.AutoTokenizer"),c(li,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertModel"),c(nf,"id","extending-the-auto-classes"),c(nf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nf,"href","#extending-the-auto-classes"),c(ii,"class","relative group"),c(lf,"id","transformers.AutoConfig"),c(lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lf,"href","#transformers.AutoConfig"),c(di,"class","relative group"),c(j9,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(D9,"href","/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertConfig"),c(G9,"href","/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartConfig"),c(O9,"href","/docs/transformers/pr_17073/en/model_doc/beit#transformers.BeitConfig"),c(V9,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertConfig"),c(X9,"href","/docs/transformers/pr_17073/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(z9,"href","/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdConfig"),c(Q9,"href","/docs/transformers/pr_17073/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(W9,"href","/docs/transformers/pr_17073/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(H9,"href","/docs/transformers/pr_17073/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(U9,"href","/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertConfig"),c(J9,"href","/docs/transformers/pr_17073/en/model_doc/canine#transformers.CanineConfig"),c(Y9,"href","/docs/transformers/pr_17073/en/model_doc/clip#transformers.CLIPConfig"),c(K9,"href","/docs/transformers/pr_17073/en/model_doc/convbert#transformers.ConvBertConfig"),c(Z9,"href","/docs/transformers/pr_17073/en/model_doc/convnext#transformers.ConvNextConfig"),c(e$,"href","/docs/transformers/pr_17073/en/model_doc/ctrl#transformers.CTRLConfig"),c(o$,"href","/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(r$,"href","/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(t$,"href","/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(a$,"href","/docs/transformers/pr_17073/en/model_doc/deberta#transformers.DebertaConfig"),c(n$,"href","/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(s$,"href","/docs/transformers/pr_17073/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(l$,"href","/docs/transformers/pr_17073/en/model_doc/deit#transformers.DeiTConfig"),c(i$,"href","/docs/transformers/pr_17073/en/model_doc/detr#transformers.DetrConfig"),c(d$,"href","/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertConfig"),c(c$,"href","/docs/transformers/pr_17073/en/model_doc/dpr#transformers.DPRConfig"),c(f$,"href","/docs/transformers/pr_17073/en/model_doc/dpt#transformers.DPTConfig"),c(m$,"href","/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraConfig"),c(g$,"href","/docs/transformers/pr_17073/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(h$,"href","/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertConfig"),c(p$,"href","/docs/transformers/pr_17073/en/model_doc/fnet#transformers.FNetConfig"),c(u$,"href","/docs/transformers/pr_17073/en/model_doc/fsmt#transformers.FSMTConfig"),c(_$,"href","/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelConfig"),c(b$,"href","/docs/transformers/pr_17073/en/model_doc/glpn#transformers.GLPNConfig"),c(v$,"href","/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.GPT2Config"),c(F$,"href","/docs/transformers/pr_17073/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(T$,"href","/docs/transformers/pr_17073/en/model_doc/gptj#transformers.GPTJConfig"),c(M$,"href","/docs/transformers/pr_17073/en/model_doc/hubert#transformers.HubertConfig"),c(E$,"href","/docs/transformers/pr_17073/en/model_doc/ibert#transformers.IBertConfig"),c(C$,"href","/docs/transformers/pr_17073/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(w$,"href","/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(A$,"href","/docs/transformers/pr_17073/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(y$,"href","/docs/transformers/pr_17073/en/model_doc/led#transformers.LEDConfig"),c(L$,"href","/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerConfig"),c(x$,"href","/docs/transformers/pr_17073/en/model_doc/luke#transformers.LukeConfig"),c($$,"href","/docs/transformers/pr_17073/en/model_doc/lxmert#transformers.LxmertConfig"),c(k$,"href","/docs/transformers/pr_17073/en/model_doc/m2m_100#transformers.M2M100Config"),c(S$,"href","/docs/transformers/pr_17073/en/model_doc/marian#transformers.MarianConfig"),c(R$,"href","/docs/transformers/pr_17073/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(B$,"href","/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartConfig"),c(P$,"href","/docs/transformers/pr_17073/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(I$,"href","/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(q$,"href","/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetConfig"),c(N$,"href","/docs/transformers/pr_17073/en/model_doc/mt5#transformers.MT5Config"),c(j$,"href","/docs/transformers/pr_17073/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(D$,"href","/docs/transformers/pr_17073/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(G$,"href","/docs/transformers/pr_17073/en/model_doc/pegasus#transformers.PegasusConfig"),c(O$,"href","/docs/transformers/pr_17073/en/model_doc/perceiver#transformers.PerceiverConfig"),c(V$,"href","/docs/transformers/pr_17073/en/model_doc/plbart#transformers.PLBartConfig"),c(X$,"href","/docs/transformers/pr_17073/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(z$,"href","/docs/transformers/pr_17073/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Q$,"href","/docs/transformers/pr_17073/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(W$,"href","/docs/transformers/pr_17073/en/model_doc/rag#transformers.RagConfig"),c(H$,"href","/docs/transformers/pr_17073/en/model_doc/realm#transformers.RealmConfig"),c(U$,"href","/docs/transformers/pr_17073/en/model_doc/reformer#transformers.ReformerConfig"),c(J$,"href","/docs/transformers/pr_17073/en/model_doc/regnet#transformers.RegNetConfig"),c(Y$,"href","/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertConfig"),c(K$,"href","/docs/transformers/pr_17073/en/model_doc/resnet#transformers.ResNetConfig"),c(Z$,"href","/docs/transformers/pr_17073/en/model_doc/retribert#transformers.RetriBertConfig"),c(ek,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaConfig"),c(ok,"href","/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerConfig"),c(rk,"href","/docs/transformers/pr_17073/en/model_doc/segformer#transformers.SegformerConfig"),c(tk,"href","/docs/transformers/pr_17073/en/model_doc/sew#transformers.SEWConfig"),c(ak,"href","/docs/transformers/pr_17073/en/model_doc/sew-d#transformers.SEWDConfig"),c(nk,"href","/docs/transformers/pr_17073/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(sk,"href","/docs/transformers/pr_17073/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(lk,"href","/docs/transformers/pr_17073/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(ik,"href","/docs/transformers/pr_17073/en/model_doc/splinter#transformers.SplinterConfig"),c(dk,"href","/docs/transformers/pr_17073/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(ck,"href","/docs/transformers/pr_17073/en/model_doc/swin#transformers.SwinConfig"),c(fk,"href","/docs/transformers/pr_17073/en/model_doc/t5#transformers.T5Config"),c(mk,"href","/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TapasConfig"),c(gk,"href","/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartConfig"),c(hk,"href","/docs/transformers/pr_17073/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(pk,"href","/docs/transformers/pr_17073/en/model_doc/trocr#transformers.TrOCRConfig"),c(uk,"href","/docs/transformers/pr_17073/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(_k,"href","/docs/transformers/pr_17073/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(bk,"href","/docs/transformers/pr_17073/en/model_doc/van#transformers.VanConfig"),c(vk,"href","/docs/transformers/pr_17073/en/model_doc/vilt#transformers.ViltConfig"),c(Fk,"href","/docs/transformers/pr_17073/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(Tk,"href","/docs/transformers/pr_17073/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(Mk,"href","/docs/transformers/pr_17073/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(Ek,"href","/docs/transformers/pr_17073/en/model_doc/vit#transformers.ViTConfig"),c(Ck,"href","/docs/transformers/pr_17073/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(wk,"href","/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(Ak,"href","/docs/transformers/pr_17073/en/model_doc/wavlm#transformers.WavLMConfig"),c(yk,"href","/docs/transformers/pr_17073/en/model_doc/xglm#transformers.XGLMConfig"),c(Lk,"href","/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMConfig"),c(xk,"href","/docs/transformers/pr_17073/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c($k,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(kk,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(Sk,"href","/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetConfig"),c(Rk,"href","/docs/transformers/pr_17073/en/model_doc/yolos#transformers.YolosConfig"),c(Bk,"href","/docs/transformers/pr_17073/en/model_doc/yoso#transformers.YosoConfig"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ng,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sg,"id","transformers.AutoTokenizer"),c(sg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sg,"href","#transformers.AutoTokenizer"),c(fi,"class","relative group"),c(Pk,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(Ik,"href","/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertTokenizer"),c(qk,"href","/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Nk,"href","/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartTokenizer"),c(jk,"href","/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartTokenizerFast"),c(Dk,"href","/docs/transformers/pr_17073/en/model_doc/barthez#transformers.BarthezTokenizer"),c(Gk,"href","/docs/transformers/pr_17073/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(Ok,"href","/docs/transformers/pr_17073/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(Vk,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertTokenizer"),c(Xk,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertTokenizerFast"),c(zk,"href","/docs/transformers/pr_17073/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(Qk,"href","/docs/transformers/pr_17073/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(Wk,"href","/docs/transformers/pr_17073/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(Hk,"href","/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(Uk,"href","/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(Jk,"href","/docs/transformers/pr_17073/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Yk,"href","/docs/transformers/pr_17073/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Kk,"href","/docs/transformers/pr_17073/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(Zk,"href","/docs/transformers/pr_17073/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(eS,"href","/docs/transformers/pr_17073/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(oS,"href","/docs/transformers/pr_17073/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(rS,"href","/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertTokenizer"),c(tS,"href","/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(aS,"href","/docs/transformers/pr_17073/en/model_doc/canine#transformers.CanineTokenizer"),c(nS,"href","/docs/transformers/pr_17073/en/model_doc/clip#transformers.CLIPTokenizer"),c(sS,"href","/docs/transformers/pr_17073/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(lS,"href","/docs/transformers/pr_17073/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(iS,"href","/docs/transformers/pr_17073/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(dS,"href","/docs/transformers/pr_17073/en/model_doc/cpm#transformers.CpmTokenizer"),c(cS,"href","/docs/transformers/pr_17073/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(fS,"href","/docs/transformers/pr_17073/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(mS,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaTokenizer"),c(gS,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(hS,"href","/docs/transformers/pr_17073/en/model_doc/deberta#transformers.DebertaTokenizer"),c(pS,"href","/docs/transformers/pr_17073/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(uS,"href","/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(_S,"href","/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(bS,"href","/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(vS,"href","/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(FS,"href","/docs/transformers/pr_17073/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(TS,"href","/docs/transformers/pr_17073/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(MS,"href","/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraTokenizer"),c(ES,"href","/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(CS,"href","/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(wS,"href","/docs/transformers/pr_17073/en/model_doc/fnet#transformers.FNetTokenizer"),c(AS,"href","/docs/transformers/pr_17073/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(yS,"href","/docs/transformers/pr_17073/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(LS,"href","/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelTokenizer"),c(xS,"href","/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c($S,"href","/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(kS,"href","/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(SS,"href","/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(RS,"href","/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(BS,"href","/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(PS,"href","/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(IS,"href","/docs/transformers/pr_17073/en/model_doc/herbert#transformers.HerbertTokenizer"),c(qS,"href","/docs/transformers/pr_17073/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(NS,"href","/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(jS,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaTokenizer"),c(DS,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(GS,"href","/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(OS,"href","/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(VS,"href","/docs/transformers/pr_17073/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(XS,"href","/docs/transformers/pr_17073/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(zS,"href","/docs/transformers/pr_17073/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(QS,"href","/docs/transformers/pr_17073/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(WS,"href","/docs/transformers/pr_17073/en/model_doc/led#transformers.LEDTokenizer"),c(HS,"href","/docs/transformers/pr_17073/en/model_doc/led#transformers.LEDTokenizerFast"),c(US,"href","/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerTokenizer"),c(JS,"href","/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(YS,"href","/docs/transformers/pr_17073/en/model_doc/luke#transformers.LukeTokenizer"),c(KS,"href","/docs/transformers/pr_17073/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(ZS,"href","/docs/transformers/pr_17073/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(eR,"href","/docs/transformers/pr_17073/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(oR,"href","/docs/transformers/pr_17073/en/model_doc/marian#transformers.MarianTokenizer"),c(rR,"href","/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartTokenizer"),c(tR,"href","/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(aR,"href","/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(nR,"href","/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(sR,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertTokenizer"),c(lR,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertTokenizerFast"),c(iR,"href","/docs/transformers/pr_17073/en/model_doc/mluke#transformers.MLukeTokenizer"),c(dR,"href","/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(cR,"href","/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(fR,"href","/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(mR,"href","/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(gR,"href","/docs/transformers/pr_17073/en/model_doc/mt5#transformers.T5Tokenizer"),c(hR,"href","/docs/transformers/pr_17073/en/model_doc/mt5#transformers.T5TokenizerFast"),c(pR,"href","/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertTokenizer"),c(uR,"href","/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(_R,"href","/docs/transformers/pr_17073/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(bR,"href","/docs/transformers/pr_17073/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(vR,"href","/docs/transformers/pr_17073/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(FR,"href","/docs/transformers/pr_17073/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(TR,"href","/docs/transformers/pr_17073/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(MR,"href","/docs/transformers/pr_17073/en/model_doc/phobert#transformers.PhobertTokenizer"),c(ER,"href","/docs/transformers/pr_17073/en/model_doc/plbart#transformers.PLBartTokenizer"),c(CR,"href","/docs/transformers/pr_17073/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(wR,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertTokenizer"),c(AR,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertTokenizerFast"),c(yR,"href","/docs/transformers/pr_17073/en/model_doc/rag#transformers.RagTokenizer"),c(LR,"href","/docs/transformers/pr_17073/en/model_doc/realm#transformers.RealmTokenizer"),c(xR,"href","/docs/transformers/pr_17073/en/model_doc/realm#transformers.RealmTokenizerFast"),c($R,"href","/docs/transformers/pr_17073/en/model_doc/reformer#transformers.ReformerTokenizer"),c(kR,"href","/docs/transformers/pr_17073/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(SR,"href","/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertTokenizer"),c(RR,"href","/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(BR,"href","/docs/transformers/pr_17073/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(PR,"href","/docs/transformers/pr_17073/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(IR,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaTokenizer"),c(qR,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(NR,"href","/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(jR,"href","/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(DR,"href","/docs/transformers/pr_17073/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(GR,"href","/docs/transformers/pr_17073/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(OR,"href","/docs/transformers/pr_17073/en/model_doc/splinter#transformers.SplinterTokenizer"),c(VR,"href","/docs/transformers/pr_17073/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(XR,"href","/docs/transformers/pr_17073/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(zR,"href","/docs/transformers/pr_17073/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(QR,"href","/docs/transformers/pr_17073/en/model_doc/mt5#transformers.T5Tokenizer"),c(WR,"href","/docs/transformers/pr_17073/en/model_doc/mt5#transformers.T5TokenizerFast"),c(HR,"href","/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TapasTokenizer"),c(UR,"href","/docs/transformers/pr_17073/en/model_doc/tapex#transformers.TapexTokenizer"),c(JR,"href","/docs/transformers/pr_17073/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(YR,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertTokenizer"),c(KR,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(eB,"href","/docs/transformers/pr_17073/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(oB,"href","/docs/transformers/pr_17073/en/model_doc/xglm#transformers.XGLMTokenizer"),c(rB,"href","/docs/transformers/pr_17073/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(tB,"href","/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMTokenizer"),c(aB,"href","/docs/transformers/pr_17073/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(nB,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(sB,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(lB,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaTokenizer"),c(iB,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(dB,"href","/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(cB,"href","/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(fB,"href","/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertTokenizer"),c(mB,"href","/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ng,"id","transformers.AutoFeatureExtractor"),c(Ng,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ng,"href","#transformers.AutoFeatureExtractor"),c(mi,"class","relative group"),c(gB,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(hB,"href","/docs/transformers/pr_17073/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(pB,"href","/docs/transformers/pr_17073/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(uB,"href","/docs/transformers/pr_17073/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(_B,"href","/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(bB,"href","/docs/transformers/pr_17073/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(vB,"href","/docs/transformers/pr_17073/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(FB,"href","/docs/transformers/pr_17073/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(TB,"href","/docs/transformers/pr_17073/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(MB,"href","/docs/transformers/pr_17073/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(EB,"href","/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(CB,"href","/docs/transformers/pr_17073/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(wB,"href","/docs/transformers/pr_17073/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(AB,"href","/docs/transformers/pr_17073/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(yB,"href","/docs/transformers/pr_17073/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(LB,"href","/docs/transformers/pr_17073/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(xB,"href","/docs/transformers/pr_17073/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c($B,"href","/docs/transformers/pr_17073/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(kB,"href","/docs/transformers/pr_17073/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(SB,"href","/docs/transformers/pr_17073/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(RB,"href","/docs/transformers/pr_17073/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(BB,"href","/docs/transformers/pr_17073/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(PB,"href","/docs/transformers/pr_17073/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(IB,"href","/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(qB,"href","/docs/transformers/pr_17073/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mh,"id","transformers.AutoProcessor"),c(mh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mh,"href","#transformers.AutoProcessor"),c(gi,"class","relative group"),c(NB,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(jB,"href","/docs/transformers/pr_17073/en/model_doc/clip#transformers.CLIPProcessor"),c(DB,"href","/docs/transformers/pr_17073/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(GB,"href","/docs/transformers/pr_17073/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(OB,"href","/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(VB,"href","/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(XB,"href","/docs/transformers/pr_17073/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(zB,"href","/docs/transformers/pr_17073/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(QB,"href","/docs/transformers/pr_17073/en/model_doc/trocr#transformers.TrOCRProcessor"),c(WB,"href","/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(HB,"href","/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(UB,"href","/docs/transformers/pr_17073/en/model_doc/vilt#transformers.ViltProcessor"),c(JB,"href","/docs/transformers/pr_17073/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(YB,"href","/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(KB,"href","/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($h,"id","transformers.AutoModel"),c($h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($h,"href","#transformers.AutoModel"),c(pi,"class","relative group"),c(ZB,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eP,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oP,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rP,"href","/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertModel"),c(tP,"href","/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartModel"),c(aP,"href","/docs/transformers/pr_17073/en/model_doc/beit#transformers.BeitModel"),c(nP,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertModel"),c(sP,"href","/docs/transformers/pr_17073/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(lP,"href","/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdModel"),c(iP,"href","/docs/transformers/pr_17073/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(dP,"href","/docs/transformers/pr_17073/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(cP,"href","/docs/transformers/pr_17073/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(fP,"href","/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertModel"),c(mP,"href","/docs/transformers/pr_17073/en/model_doc/canine#transformers.CanineModel"),c(gP,"href","/docs/transformers/pr_17073/en/model_doc/clip#transformers.CLIPModel"),c(hP,"href","/docs/transformers/pr_17073/en/model_doc/convbert#transformers.ConvBertModel"),c(pP,"href","/docs/transformers/pr_17073/en/model_doc/convnext#transformers.ConvNextModel"),c(uP,"href","/docs/transformers/pr_17073/en/model_doc/ctrl#transformers.CTRLModel"),c(_P,"href","/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(bP,"href","/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(vP,"href","/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(FP,"href","/docs/transformers/pr_17073/en/model_doc/deberta#transformers.DebertaModel"),c(TP,"href","/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(MP,"href","/docs/transformers/pr_17073/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(EP,"href","/docs/transformers/pr_17073/en/model_doc/deit#transformers.DeiTModel"),c(CP,"href","/docs/transformers/pr_17073/en/model_doc/detr#transformers.DetrModel"),c(wP,"href","/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertModel"),c(AP,"href","/docs/transformers/pr_17073/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(yP,"href","/docs/transformers/pr_17073/en/model_doc/dpt#transformers.DPTModel"),c(LP,"href","/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraModel"),c(xP,"href","/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertModel"),c($P,"href","/docs/transformers/pr_17073/en/model_doc/fnet#transformers.FNetModel"),c(kP,"href","/docs/transformers/pr_17073/en/model_doc/fsmt#transformers.FSMTModel"),c(SP,"href","/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelModel"),c(RP,"href","/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelBaseModel"),c(BP,"href","/docs/transformers/pr_17073/en/model_doc/glpn#transformers.GLPNModel"),c(PP,"href","/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.GPT2Model"),c(IP,"href","/docs/transformers/pr_17073/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(qP,"href","/docs/transformers/pr_17073/en/model_doc/gptj#transformers.GPTJModel"),c(NP,"href","/docs/transformers/pr_17073/en/model_doc/hubert#transformers.HubertModel"),c(jP,"href","/docs/transformers/pr_17073/en/model_doc/ibert#transformers.IBertModel"),c(DP,"href","/docs/transformers/pr_17073/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(GP,"href","/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(OP,"href","/docs/transformers/pr_17073/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(VP,"href","/docs/transformers/pr_17073/en/model_doc/led#transformers.LEDModel"),c(XP,"href","/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerModel"),c(zP,"href","/docs/transformers/pr_17073/en/model_doc/luke#transformers.LukeModel"),c(QP,"href","/docs/transformers/pr_17073/en/model_doc/lxmert#transformers.LxmertModel"),c(WP,"href","/docs/transformers/pr_17073/en/model_doc/m2m_100#transformers.M2M100Model"),c(HP,"href","/docs/transformers/pr_17073/en/model_doc/marian#transformers.MarianModel"),c(UP,"href","/docs/transformers/pr_17073/en/model_doc/maskformer#transformers.MaskFormerModel"),c(JP,"href","/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartModel"),c(YP,"href","/docs/transformers/pr_17073/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(KP,"href","/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertModel"),c(ZP,"href","/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetModel"),c(eI,"href","/docs/transformers/pr_17073/en/model_doc/mt5#transformers.MT5Model"),c(oI,"href","/docs/transformers/pr_17073/en/model_doc/nystromformer#transformers.NystromformerModel"),c(rI,"href","/docs/transformers/pr_17073/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(tI,"href","/docs/transformers/pr_17073/en/model_doc/pegasus#transformers.PegasusModel"),c(aI,"href","/docs/transformers/pr_17073/en/model_doc/perceiver#transformers.PerceiverModel"),c(nI,"href","/docs/transformers/pr_17073/en/model_doc/plbart#transformers.PLBartModel"),c(sI,"href","/docs/transformers/pr_17073/en/model_doc/poolformer#transformers.PoolFormerModel"),c(lI,"href","/docs/transformers/pr_17073/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(iI,"href","/docs/transformers/pr_17073/en/model_doc/qdqbert#transformers.QDQBertModel"),c(dI,"href","/docs/transformers/pr_17073/en/model_doc/reformer#transformers.ReformerModel"),c(cI,"href","/docs/transformers/pr_17073/en/model_doc/regnet#transformers.RegNetModel"),c(fI,"href","/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertModel"),c(mI,"href","/docs/transformers/pr_17073/en/model_doc/resnet#transformers.ResNetModel"),c(gI,"href","/docs/transformers/pr_17073/en/model_doc/retribert#transformers.RetriBertModel"),c(hI,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaModel"),c(pI,"href","/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerModel"),c(uI,"href","/docs/transformers/pr_17073/en/model_doc/segformer#transformers.SegformerModel"),c(_I,"href","/docs/transformers/pr_17073/en/model_doc/sew#transformers.SEWModel"),c(bI,"href","/docs/transformers/pr_17073/en/model_doc/sew-d#transformers.SEWDModel"),c(vI,"href","/docs/transformers/pr_17073/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(FI,"href","/docs/transformers/pr_17073/en/model_doc/splinter#transformers.SplinterModel"),c(TI,"href","/docs/transformers/pr_17073/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(MI,"href","/docs/transformers/pr_17073/en/model_doc/swin#transformers.SwinModel"),c(EI,"href","/docs/transformers/pr_17073/en/model_doc/t5#transformers.T5Model"),c(CI,"href","/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TapasModel"),c(wI,"href","/docs/transformers/pr_17073/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(AI,"href","/docs/transformers/pr_17073/en/model_doc/unispeech#transformers.UniSpeechModel"),c(yI,"href","/docs/transformers/pr_17073/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(LI,"href","/docs/transformers/pr_17073/en/model_doc/van#transformers.VanModel"),c(xI,"href","/docs/transformers/pr_17073/en/model_doc/vilt#transformers.ViltModel"),c($I,"href","/docs/transformers/pr_17073/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(kI,"href","/docs/transformers/pr_17073/en/model_doc/visual_bert#transformers.VisualBertModel"),c(SI,"href","/docs/transformers/pr_17073/en/model_doc/vit#transformers.ViTModel"),c(RI,"href","/docs/transformers/pr_17073/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(BI,"href","/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(PI,"href","/docs/transformers/pr_17073/en/model_doc/wavlm#transformers.WavLMModel"),c(II,"href","/docs/transformers/pr_17073/en/model_doc/xglm#transformers.XGLMModel"),c(qI,"href","/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMModel"),c(NI,"href","/docs/transformers/pr_17073/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(jI,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(DI,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(GI,"href","/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetModel"),c(OI,"href","/docs/transformers/pr_17073/en/model_doc/yolos#transformers.YolosModel"),c(VI,"href","/docs/transformers/pr_17073/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fu,"id","transformers.AutoModelForPreTraining"),c(Fu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fu,"href","#transformers.AutoModelForPreTraining"),c(bi,"class","relative group"),c(XI,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zI,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QI,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WI,"href","/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertForPreTraining"),c(HI,"href","/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(UI,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertForPreTraining"),c(JI,"href","/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(YI,"href","/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(KI,"href","/docs/transformers/pr_17073/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(ZI,"href","/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(eq,"href","/docs/transformers/pr_17073/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(oq,"href","/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(rq,"href","/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(tq,"href","/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraForPreTraining"),c(aq,"href","/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(nq,"href","/docs/transformers/pr_17073/en/model_doc/fnet#transformers.FNetForPreTraining"),c(sq,"href","/docs/transformers/pr_17073/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(lq,"href","/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(iq,"href","/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(dq,"href","/docs/transformers/pr_17073/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(cq,"href","/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(fq,"href","/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(mq,"href","/docs/transformers/pr_17073/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(gq,"href","/docs/transformers/pr_17073/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(hq,"href","/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(pq,"href","/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(uq,"href","/docs/transformers/pr_17073/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(_q,"href","/docs/transformers/pr_17073/en/model_doc/retribert#transformers.RetriBertModel"),c(bq,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(vq,"href","/docs/transformers/pr_17073/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Fq,"href","/docs/transformers/pr_17073/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Tq,"href","/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Mq,"href","/docs/transformers/pr_17073/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Eq,"href","/docs/transformers/pr_17073/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Cq,"href","/docs/transformers/pr_17073/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(wq,"href","/docs/transformers/pr_17073/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Aq,"href","/docs/transformers/pr_17073/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(yq,"href","/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Lq,"href","/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(xq,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c($q,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(kq,"href","/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d_,"id","transformers.AutoModelForCausalLM"),c(d_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d_,"href","#transformers.AutoModelForCausalLM"),c(Ti,"class","relative group"),c(Sq,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rq,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bq,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pq,"href","/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartForCausalLM"),c(Iq,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertLMHeadModel"),c(qq,"href","/docs/transformers/pr_17073/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Nq,"href","/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(jq,"href","/docs/transformers/pr_17073/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Dq,"href","/docs/transformers/pr_17073/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Gq,"href","/docs/transformers/pr_17073/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Oq,"href","/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Vq,"href","/docs/transformers/pr_17073/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Xq,"href","/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(zq,"href","/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Qq,"href","/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Wq,"href","/docs/transformers/pr_17073/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Hq,"href","/docs/transformers/pr_17073/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Uq,"href","/docs/transformers/pr_17073/en/model_doc/marian#transformers.MarianForCausalLM"),c(Jq,"href","/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Yq,"href","/docs/transformers/pr_17073/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Kq,"href","/docs/transformers/pr_17073/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Zq,"href","/docs/transformers/pr_17073/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(eN,"href","/docs/transformers/pr_17073/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(oN,"href","/docs/transformers/pr_17073/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(rN,"href","/docs/transformers/pr_17073/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(tN,"href","/docs/transformers/pr_17073/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(aN,"href","/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(nN,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(sN,"href","/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(lN,"href","/docs/transformers/pr_17073/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(iN,"href","/docs/transformers/pr_17073/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(dN,"href","/docs/transformers/pr_17073/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(cN,"href","/docs/transformers/pr_17073/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(fN,"href","/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(mN,"href","/docs/transformers/pr_17073/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(gN,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(hN,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(pN,"href","/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H_,"id","transformers.AutoModelForMaskedLM"),c(H_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H_,"href","#transformers.AutoModelForMaskedLM"),c(Ci,"class","relative group"),c(uN,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_N,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bN,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vN,"href","/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(FN,"href","/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(TN,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertForMaskedLM"),c(MN,"href","/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(EN,"href","/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(CN,"href","/docs/transformers/pr_17073/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(wN,"href","/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(AN,"href","/docs/transformers/pr_17073/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(yN,"href","/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(LN,"href","/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(xN,"href","/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraForMaskedLM"),c($N,"href","/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(kN,"href","/docs/transformers/pr_17073/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(SN,"href","/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(RN,"href","/docs/transformers/pr_17073/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(BN,"href","/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(PN,"href","/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(IN,"href","/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(qN,"href","/docs/transformers/pr_17073/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(NN,"href","/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(jN,"href","/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(DN,"href","/docs/transformers/pr_17073/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(GN,"href","/docs/transformers/pr_17073/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(ON,"href","/docs/transformers/pr_17073/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(VN,"href","/docs/transformers/pr_17073/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(XN,"href","/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(zN,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(QN,"href","/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(WN,"href","/docs/transformers/pr_17073/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(HN,"href","/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(UN,"href","/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(JN,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(YN,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(KN,"href","/docs/transformers/pr_17073/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R1,"id","transformers.AutoModelForSeq2SeqLM"),c(R1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R1,"href","#transformers.AutoModelForSeq2SeqLM"),c(yi,"class","relative group"),c(ZN,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ej,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oj,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rj,"href","/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(tj,"href","/docs/transformers/pr_17073/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(aj,"href","/docs/transformers/pr_17073/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(nj,"href","/docs/transformers/pr_17073/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(sj,"href","/docs/transformers/pr_17073/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(lj,"href","/docs/transformers/pr_17073/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(ij,"href","/docs/transformers/pr_17073/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(dj,"href","/docs/transformers/pr_17073/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(cj,"href","/docs/transformers/pr_17073/en/model_doc/marian#transformers.MarianMTModel"),c(fj,"href","/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(mj,"href","/docs/transformers/pr_17073/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(gj,"href","/docs/transformers/pr_17073/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(hj,"href","/docs/transformers/pr_17073/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(pj,"href","/docs/transformers/pr_17073/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(uj,"href","/docs/transformers/pr_17073/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(_j,"href","/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(bj,"href","/docs/transformers/pr_17073/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e7,"id","transformers.AutoModelForSequenceClassification"),c(e7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e7,"href","#transformers.AutoModelForSequenceClassification"),c($i,"class","relative group"),c(vj,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fj,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tj,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mj,"href","/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Ej,"href","/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Cj,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertForSequenceClassification"),c(wj,"href","/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Aj,"href","/docs/transformers/pr_17073/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(yj,"href","/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(Lj,"href","/docs/transformers/pr_17073/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(xj,"href","/docs/transformers/pr_17073/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c($j,"href","/docs/transformers/pr_17073/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(kj,"href","/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Sj,"href","/docs/transformers/pr_17073/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Rj,"href","/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(Bj,"href","/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(Pj,"href","/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(Ij,"href","/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(qj,"href","/docs/transformers/pr_17073/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(Nj,"href","/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(jj,"href","/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(Dj,"href","/docs/transformers/pr_17073/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(Gj,"href","/docs/transformers/pr_17073/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(Oj,"href","/docs/transformers/pr_17073/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(Vj,"href","/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(Xj,"href","/docs/transformers/pr_17073/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(zj,"href","/docs/transformers/pr_17073/en/model_doc/led#transformers.LEDForSequenceClassification"),c(Qj,"href","/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(Wj,"href","/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(Hj,"href","/docs/transformers/pr_17073/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(Uj,"href","/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(Jj,"href","/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(Yj,"href","/docs/transformers/pr_17073/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(Kj,"href","/docs/transformers/pr_17073/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(Zj,"href","/docs/transformers/pr_17073/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(eD,"href","/docs/transformers/pr_17073/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(oD,"href","/docs/transformers/pr_17073/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(rD,"href","/docs/transformers/pr_17073/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(tD,"href","/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(aD,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(nD,"href","/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(sD,"href","/docs/transformers/pr_17073/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(lD,"href","/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(iD,"href","/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartForSequenceClassification"),c(dD,"href","/docs/transformers/pr_17073/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(cD,"href","/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(fD,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(mD,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(gD,"href","/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(hD,"href","/docs/transformers/pr_17073/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y7,"id","transformers.AutoModelForMultipleChoice"),c(Y7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y7,"href","#transformers.AutoModelForMultipleChoice"),c(Ri,"class","relative group"),c(pD,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uD,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_D,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bD,"href","/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(vD,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertForMultipleChoice"),c(FD,"href","/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(TD,"href","/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(MD,"href","/docs/transformers/pr_17073/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(ED,"href","/docs/transformers/pr_17073/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(CD,"href","/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(wD,"href","/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(AD,"href","/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(yD,"href","/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(LD,"href","/docs/transformers/pr_17073/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(xD,"href","/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c($D,"href","/docs/transformers/pr_17073/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(kD,"href","/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(SD,"href","/docs/transformers/pr_17073/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(RD,"href","/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(BD,"href","/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(PD,"href","/docs/transformers/pr_17073/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(ID,"href","/docs/transformers/pr_17073/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(qD,"href","/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(ND,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(jD,"href","/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(DD,"href","/docs/transformers/pr_17073/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(GD,"href","/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(OD,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(VD,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(XD,"href","/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(zD,"href","/docs/transformers/pr_17073/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xb,"id","transformers.AutoModelForNextSentencePrediction"),c(xb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ii,"class","relative group"),c(QD,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WD,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HD,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UD,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(JD,"href","/docs/transformers/pr_17073/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(YD,"href","/docs/transformers/pr_17073/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(KD,"href","/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(ZD,"href","/docs/transformers/pr_17073/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nb,"id","transformers.AutoModelForTokenClassification"),c(Nb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nb,"href","#transformers.AutoModelForTokenClassification"),c(ji,"class","relative group"),c(eG,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oG,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rG,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tG,"href","/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(aG,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertForTokenClassification"),c(nG,"href","/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(sG,"href","/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(lG,"href","/docs/transformers/pr_17073/en/model_doc/canine#transformers.CanineForTokenClassification"),c(iG,"href","/docs/transformers/pr_17073/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(dG,"href","/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(cG,"href","/docs/transformers/pr_17073/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(fG,"href","/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(mG,"href","/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(gG,"href","/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(hG,"href","/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(pG,"href","/docs/transformers/pr_17073/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(uG,"href","/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(_G,"href","/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(bG,"href","/docs/transformers/pr_17073/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(vG,"href","/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(FG,"href","/docs/transformers/pr_17073/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(TG,"href","/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(MG,"href","/docs/transformers/pr_17073/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(EG,"href","/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(CG,"href","/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(wG,"href","/docs/transformers/pr_17073/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(AG,"href","/docs/transformers/pr_17073/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(yG,"href","/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(LG,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(xG,"href","/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c($G,"href","/docs/transformers/pr_17073/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(kG,"href","/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(SG,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(RG,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(BG,"href","/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(PG,"href","/docs/transformers/pr_17073/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T2,"id","transformers.AutoModelForQuestionAnswering"),c(T2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T2,"href","#transformers.AutoModelForQuestionAnswering"),c(Oi,"class","relative group"),c(IG,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qG,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NG,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jG,"href","/docs/transformers/pr_17073/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(DG,"href","/docs/transformers/pr_17073/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(GG,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(OG,"href","/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(VG,"href","/docs/transformers/pr_17073/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(XG,"href","/docs/transformers/pr_17073/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(zG,"href","/docs/transformers/pr_17073/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(QG,"href","/docs/transformers/pr_17073/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(WG,"href","/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(HG,"href","/docs/transformers/pr_17073/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(UG,"href","/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(JG,"href","/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(YG,"href","/docs/transformers/pr_17073/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(KG,"href","/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(ZG,"href","/docs/transformers/pr_17073/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(eO,"href","/docs/transformers/pr_17073/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(oO,"href","/docs/transformers/pr_17073/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(rO,"href","/docs/transformers/pr_17073/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(tO,"href","/docs/transformers/pr_17073/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(aO,"href","/docs/transformers/pr_17073/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(nO,"href","/docs/transformers/pr_17073/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(sO,"href","/docs/transformers/pr_17073/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(lO,"href","/docs/transformers/pr_17073/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(iO,"href","/docs/transformers/pr_17073/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(dO,"href","/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(cO,"href","/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(fO,"href","/docs/transformers/pr_17073/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(mO,"href","/docs/transformers/pr_17073/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(gO,"href","/docs/transformers/pr_17073/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(hO,"href","/docs/transformers/pr_17073/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(pO,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(uO,"href","/docs/transformers/pr_17073/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(_O,"href","/docs/transformers/pr_17073/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(bO,"href","/docs/transformers/pr_17073/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(vO,"href","/docs/transformers/pr_17073/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(FO,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(TO,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(MO,"href","/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(EO,"href","/docs/transformers/pr_17073/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c3,"id","transformers.AutoModelForTableQuestionAnswering"),c(c3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c3,"href","#transformers.AutoModelForTableQuestionAnswering"),c(zi,"class","relative group"),c(CO,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wO,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AO,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yO,"href","/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p3,"id","transformers.AutoModelForImageClassification"),c(p3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p3,"href","#transformers.AutoModelForImageClassification"),c(Hi,"class","relative group"),c(LO,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xO,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($O,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kO,"href","/docs/transformers/pr_17073/en/model_doc/beit#transformers.BeitForImageClassification"),c(SO,"href","/docs/transformers/pr_17073/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(RO,"href","/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(BO,"href","/docs/transformers/pr_17073/en/model_doc/deit#transformers.DeiTForImageClassification"),c(PO,"href","/docs/transformers/pr_17073/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(IO,"href","/docs/transformers/pr_17073/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(qO,"href","/docs/transformers/pr_17073/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(NO,"href","/docs/transformers/pr_17073/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(jO,"href","/docs/transformers/pr_17073/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(DO,"href","/docs/transformers/pr_17073/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(GO,"href","/docs/transformers/pr_17073/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(OO,"href","/docs/transformers/pr_17073/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(VO,"href","/docs/transformers/pr_17073/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(XO,"href","/docs/transformers/pr_17073/en/model_doc/swin#transformers.SwinForImageClassification"),c(zO,"href","/docs/transformers/pr_17073/en/model_doc/van#transformers.VanForImageClassification"),c(QO,"href","/docs/transformers/pr_17073/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($3,"id","transformers.AutoModelForVision2Seq"),c($3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($3,"href","#transformers.AutoModelForVision2Seq"),c(Yi,"class","relative group"),c(WO,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HO,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UO,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JO,"href","/docs/transformers/pr_17073/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P3,"id","transformers.AutoModelForAudioClassification"),c(P3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P3,"href","#transformers.AutoModelForAudioClassification"),c(ed,"class","relative group"),c(YO,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KO,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZO,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eV,"href","/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(oV,"href","/docs/transformers/pr_17073/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(rV,"href","/docs/transformers/pr_17073/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(tV,"href","/docs/transformers/pr_17073/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(aV,"href","/docs/transformers/pr_17073/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(nV,"href","/docs/transformers/pr_17073/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(sV,"href","/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(lV,"href","/docs/transformers/pr_17073/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W3,"id","transformers.AutoModelForAudioFrameClassification"),c(W3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W3,"href","#transformers.AutoModelForAudioFrameClassification"),c(td,"class","relative group"),c(iV,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dV,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cV,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fV,"href","/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(mV,"href","/docs/transformers/pr_17073/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(gV,"href","/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(hV,"href","/docs/transformers/pr_17073/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ov,"id","transformers.AutoModelForCTC"),c(ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ov,"href","#transformers.AutoModelForCTC"),c(sd,"class","relative group"),c(pV,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uV,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_V,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bV,"href","/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(vV,"href","/docs/transformers/pr_17073/en/model_doc/hubert#transformers.HubertForCTC"),c(FV,"href","/docs/transformers/pr_17073/en/model_doc/sew#transformers.SEWForCTC"),c(TV,"href","/docs/transformers/pr_17073/en/model_doc/sew-d#transformers.SEWDForCTC"),c(MV,"href","/docs/transformers/pr_17073/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(EV,"href","/docs/transformers/pr_17073/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(CV,"href","/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(wV,"href","/docs/transformers/pr_17073/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gv,"id","transformers.AutoModelForSpeechSeq2Seq"),c(gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gv,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(dd,"class","relative group"),c(AV,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yV,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LV,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xV,"href","/docs/transformers/pr_17073/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c($V,"href","/docs/transformers/pr_17073/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vv,"id","transformers.AutoModelForAudioXVector"),c(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vv,"href","#transformers.AutoModelForAudioXVector"),c(md,"class","relative group"),c(kV,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SV,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RV,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BV,"href","/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(PV,"href","/docs/transformers/pr_17073/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(IV,"href","/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(qV,"href","/docs/transformers/pr_17073/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yv,"id","transformers.AutoModelForMaskedImageModeling"),c(yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yv,"href","#transformers.AutoModelForMaskedImageModeling"),c(pd,"class","relative group"),c(NV,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jV,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DV,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GV,"href","/docs/transformers/pr_17073/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(OV,"href","/docs/transformers/pr_17073/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(VV,"href","/docs/transformers/pr_17073/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bv,"id","transformers.AutoModelForObjectDetection"),c(Bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bv,"href","#transformers.AutoModelForObjectDetection"),c(vd,"class","relative group"),c(XV,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zV,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QV,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WV,"href","/docs/transformers/pr_17073/en/model_doc/detr#transformers.DetrForObjectDetection"),c(HV,"href","/docs/transformers/pr_17073/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dv,"id","transformers.AutoModelForImageSegmentation"),c(Dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dv,"href","#transformers.AutoModelForImageSegmentation"),c(Md,"class","relative group"),c(UV,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JV,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YV,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KV,"href","/docs/transformers/pr_17073/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zv,"id","transformers.AutoModelForSemanticSegmentation"),c(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zv,"href","#transformers.AutoModelForSemanticSegmentation"),c(wd,"class","relative group"),c(ZV,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eX,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oX,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rX,"href","/docs/transformers/pr_17073/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(tX,"href","/docs/transformers/pr_17073/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(aX,"href","/docs/transformers/pr_17073/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(nX,"href","/docs/transformers/pr_17073/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zv,"id","transformers.AutoModelForInstanceSegmentation"),c(Zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zv,"href","#transformers.AutoModelForInstanceSegmentation"),c(Ld,"class","relative group"),c(sX,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lX,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iX,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dX,"href","/docs/transformers/pr_17073/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aF,"id","transformers.TFAutoModel"),c(aF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aF,"href","#transformers.TFAutoModel"),c(kd,"class","relative group"),c(cX,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fX,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mX,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gX,"href","/docs/transformers/pr_17073/en/model_doc/albert#transformers.TFAlbertModel"),c(hX,"href","/docs/transformers/pr_17073/en/model_doc/bart#transformers.TFBartModel"),c(pX,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.TFBertModel"),c(uX,"href","/docs/transformers/pr_17073/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(_X,"href","/docs/transformers/pr_17073/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(bX,"href","/docs/transformers/pr_17073/en/model_doc/camembert#transformers.TFCamembertModel"),c(vX,"href","/docs/transformers/pr_17073/en/model_doc/clip#transformers.TFCLIPModel"),c(FX,"href","/docs/transformers/pr_17073/en/model_doc/convbert#transformers.TFConvBertModel"),c(TX,"href","/docs/transformers/pr_17073/en/model_doc/convnext#transformers.TFConvNextModel"),c(MX,"href","/docs/transformers/pr_17073/en/model_doc/ctrl#transformers.TFCTRLModel"),c(EX,"href","/docs/transformers/pr_17073/en/model_doc/deberta#transformers.TFDebertaModel"),c(CX,"href","/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(wX,"href","/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(AX,"href","/docs/transformers/pr_17073/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(yX,"href","/docs/transformers/pr_17073/en/model_doc/electra#transformers.TFElectraModel"),c(LX,"href","/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(xX,"href","/docs/transformers/pr_17073/en/model_doc/funnel#transformers.TFFunnelModel"),c($X,"href","/docs/transformers/pr_17073/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(kX,"href","/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.TFGPT2Model"),c(SX,"href","/docs/transformers/pr_17073/en/model_doc/gptj#transformers.TFGPTJModel"),c(RX,"href","/docs/transformers/pr_17073/en/model_doc/hubert#transformers.TFHubertModel"),c(BX,"href","/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(PX,"href","/docs/transformers/pr_17073/en/model_doc/led#transformers.TFLEDModel"),c(IX,"href","/docs/transformers/pr_17073/en/model_doc/longformer#transformers.TFLongformerModel"),c(qX,"href","/docs/transformers/pr_17073/en/model_doc/lxmert#transformers.TFLxmertModel"),c(NX,"href","/docs/transformers/pr_17073/en/model_doc/marian#transformers.TFMarianModel"),c(jX,"href","/docs/transformers/pr_17073/en/model_doc/mbart#transformers.TFMBartModel"),c(DX,"href","/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(GX,"href","/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.TFMPNetModel"),c(OX,"href","/docs/transformers/pr_17073/en/model_doc/mt5#transformers.TFMT5Model"),c(VX,"href","/docs/transformers/pr_17073/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(XX,"href","/docs/transformers/pr_17073/en/model_doc/pegasus#transformers.TFPegasusModel"),c(zX,"href","/docs/transformers/pr_17073/en/model_doc/rembert#transformers.TFRemBertModel"),c(QX,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.TFRobertaModel"),c(WX,"href","/docs/transformers/pr_17073/en/model_doc/roformer#transformers.TFRoFormerModel"),c(HX,"href","/docs/transformers/pr_17073/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(UX,"href","/docs/transformers/pr_17073/en/model_doc/t5#transformers.TFT5Model"),c(JX,"href","/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TFTapasModel"),c(YX,"href","/docs/transformers/pr_17073/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(KX,"href","/docs/transformers/pr_17073/en/model_doc/vit#transformers.TFViTModel"),c(ZX,"href","/docs/transformers/pr_17073/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(ez,"href","/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(oz,"href","/docs/transformers/pr_17073/en/model_doc/xlm#transformers.TFXLMModel"),c(rz,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(tz,"href","/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JF,"id","transformers.TFAutoModelForPreTraining"),c(JF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JF,"href","#transformers.TFAutoModelForPreTraining"),c(Bd,"class","relative group"),c(az,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nz,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sz,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lz,"href","/docs/transformers/pr_17073/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(iz,"href","/docs/transformers/pr_17073/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(dz,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.TFBertForPreTraining"),c(cz,"href","/docs/transformers/pr_17073/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(fz,"href","/docs/transformers/pr_17073/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(mz,"href","/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(gz,"href","/docs/transformers/pr_17073/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(hz,"href","/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(pz,"href","/docs/transformers/pr_17073/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(uz,"href","/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(_z,"href","/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(bz,"href","/docs/transformers/pr_17073/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(vz,"href","/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(Fz,"href","/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Tz,"href","/docs/transformers/pr_17073/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Mz,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Ez,"href","/docs/transformers/pr_17073/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Cz,"href","/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(wz,"href","/docs/transformers/pr_17073/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Az,"href","/docs/transformers/pr_17073/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(yz,"href","/docs/transformers/pr_17073/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Lz,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xz,"href","/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M0,"id","transformers.TFAutoModelForCausalLM"),c(M0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M0,"href","#transformers.TFAutoModelForCausalLM"),c(qd,"class","relative group"),c($z,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kz,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sz,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rz,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(Bz,"href","/docs/transformers/pr_17073/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(Pz,"href","/docs/transformers/pr_17073/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Iz,"href","/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(qz,"href","/docs/transformers/pr_17073/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(Nz,"href","/docs/transformers/pr_17073/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(jz,"href","/docs/transformers/pr_17073/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(Dz,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(Gz,"href","/docs/transformers/pr_17073/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(Oz,"href","/docs/transformers/pr_17073/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Vz,"href","/docs/transformers/pr_17073/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Xz,"href","/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q0,"id","transformers.TFAutoModelForImageClassification"),c(q0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q0,"href","#transformers.TFAutoModelForImageClassification"),c(Dd,"class","relative group"),c(zz,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qz,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wz,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hz,"href","/docs/transformers/pr_17073/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(Uz,"href","/docs/transformers/pr_17073/en/model_doc/vit#transformers.TFViTForImageClassification"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O0,"id","transformers.TFAutoModelForMaskedLM"),c(O0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O0,"href","#transformers.TFAutoModelForMaskedLM"),c(Vd,"class","relative group"),c(Jz,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yz,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kz,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zz,"href","/docs/transformers/pr_17073/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(eQ,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(oQ,"href","/docs/transformers/pr_17073/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(rQ,"href","/docs/transformers/pr_17073/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(tQ,"href","/docs/transformers/pr_17073/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(aQ,"href","/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(nQ,"href","/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(sQ,"href","/docs/transformers/pr_17073/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(lQ,"href","/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(iQ,"href","/docs/transformers/pr_17073/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(dQ,"href","/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(cQ,"href","/docs/transformers/pr_17073/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(fQ,"href","/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(mQ,"href","/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(gQ,"href","/docs/transformers/pr_17073/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(hQ,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(pQ,"href","/docs/transformers/pr_17073/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(uQ,"href","/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(_Q,"href","/docs/transformers/pr_17073/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(bQ,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fT,"id","transformers.TFAutoModelForSeq2SeqLM"),c(fT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fT,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Qd,"class","relative group"),c(vQ,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FQ,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TQ,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MQ,"href","/docs/transformers/pr_17073/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(EQ,"href","/docs/transformers/pr_17073/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(CQ,"href","/docs/transformers/pr_17073/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(wQ,"href","/docs/transformers/pr_17073/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(AQ,"href","/docs/transformers/pr_17073/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(yQ,"href","/docs/transformers/pr_17073/en/model_doc/marian#transformers.TFMarianMTModel"),c(LQ,"href","/docs/transformers/pr_17073/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(xQ,"href","/docs/transformers/pr_17073/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c($Q,"href","/docs/transformers/pr_17073/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(kQ,"href","/docs/transformers/pr_17073/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CT,"id","transformers.TFAutoModelForSequenceClassification"),c(CT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CT,"href","#transformers.TFAutoModelForSequenceClassification"),c(Ud,"class","relative group"),c(SQ,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RQ,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BQ,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PQ,"href","/docs/transformers/pr_17073/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(IQ,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(qQ,"href","/docs/transformers/pr_17073/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(NQ,"href","/docs/transformers/pr_17073/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(jQ,"href","/docs/transformers/pr_17073/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(DQ,"href","/docs/transformers/pr_17073/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(GQ,"href","/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(OQ,"href","/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(VQ,"href","/docs/transformers/pr_17073/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(XQ,"href","/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(zQ,"href","/docs/transformers/pr_17073/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(QQ,"href","/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(WQ,"href","/docs/transformers/pr_17073/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(HQ,"href","/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(UQ,"href","/docs/transformers/pr_17073/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(JQ,"href","/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(YQ,"href","/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(KQ,"href","/docs/transformers/pr_17073/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(ZQ,"href","/docs/transformers/pr_17073/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(eW,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(oW,"href","/docs/transformers/pr_17073/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(rW,"href","/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(tW,"href","/docs/transformers/pr_17073/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(aW,"href","/docs/transformers/pr_17073/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(nW,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(sW,"href","/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZT,"id","transformers.TFAutoModelForMultipleChoice"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.TFAutoModelForMultipleChoice"),c(Kd,"class","relative group"),c(lW,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iW,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dW,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cW,"href","/docs/transformers/pr_17073/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(fW,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(mW,"href","/docs/transformers/pr_17073/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(gW,"href","/docs/transformers/pr_17073/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(hW,"href","/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(pW,"href","/docs/transformers/pr_17073/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(uW,"href","/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(_W,"href","/docs/transformers/pr_17073/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(bW,"href","/docs/transformers/pr_17073/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(vW,"href","/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(FW,"href","/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(TW,"href","/docs/transformers/pr_17073/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(MW,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(EW,"href","/docs/transformers/pr_17073/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(CW,"href","/docs/transformers/pr_17073/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(wW,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(AW,"href","/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(vM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(oc,"class","relative group"),c(yW,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LW,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xW,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($W,"href","/docs/transformers/pr_17073/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EM,"id","transformers.TFAutoModelForTokenClassification"),c(EM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EM,"href","#transformers.TFAutoModelForTokenClassification"),c(ac,"class","relative group"),c(kW,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SW,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RW,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BW,"href","/docs/transformers/pr_17073/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(PW,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(IW,"href","/docs/transformers/pr_17073/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(qW,"href","/docs/transformers/pr_17073/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(NW,"href","/docs/transformers/pr_17073/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(jW,"href","/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(DW,"href","/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(GW,"href","/docs/transformers/pr_17073/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(OW,"href","/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(VW,"href","/docs/transformers/pr_17073/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(XW,"href","/docs/transformers/pr_17073/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(zW,"href","/docs/transformers/pr_17073/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(QW,"href","/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(WW,"href","/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(HW,"href","/docs/transformers/pr_17073/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(UW,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(JW,"href","/docs/transformers/pr_17073/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(YW,"href","/docs/transformers/pr_17073/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(KW,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(ZW,"href","/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QM,"id","transformers.TFAutoModelForQuestionAnswering"),c(QM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QM,"href","#transformers.TFAutoModelForQuestionAnswering"),c(lc,"class","relative group"),c(eH,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oH,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rH,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tH,"href","/docs/transformers/pr_17073/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(aH,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(nH,"href","/docs/transformers/pr_17073/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(sH,"href","/docs/transformers/pr_17073/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(lH,"href","/docs/transformers/pr_17073/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(iH,"href","/docs/transformers/pr_17073/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(dH,"href","/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(cH,"href","/docs/transformers/pr_17073/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(fH,"href","/docs/transformers/pr_17073/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(mH,"href","/docs/transformers/pr_17073/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(gH,"href","/docs/transformers/pr_17073/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(hH,"href","/docs/transformers/pr_17073/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(pH,"href","/docs/transformers/pr_17073/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(uH,"href","/docs/transformers/pr_17073/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(_H,"href","/docs/transformers/pr_17073/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(bH,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(vH,"href","/docs/transformers/pr_17073/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(FH,"href","/docs/transformers/pr_17073/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(TH,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(MH,"href","/docs/transformers/pr_17073/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p4,"id","transformers.TFAutoModelForVision2Seq"),c(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p4,"href","#transformers.TFAutoModelForVision2Seq"),c(cc,"class","relative group"),c(EH,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CH,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wH,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AH,"href","/docs/transformers/pr_17073/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(v4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(gc,"class","relative group"),c(yH,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LH,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xH,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($H,"href","/docs/transformers/pr_17073/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E4,"id","transformers.FlaxAutoModel"),c(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E4,"href","#transformers.FlaxAutoModel"),c(uc,"class","relative group"),c(kH,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BH,"href","/docs/transformers/pr_17073/en/model_doc/albert#transformers.FlaxAlbertModel"),c(PH,"href","/docs/transformers/pr_17073/en/model_doc/bart#transformers.FlaxBartModel"),c(IH,"href","/docs/transformers/pr_17073/en/model_doc/beit#transformers.FlaxBeitModel"),c(qH,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.FlaxBertModel"),c(NH,"href","/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(jH,"href","/docs/transformers/pr_17073/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(DH,"href","/docs/transformers/pr_17073/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(GH,"href","/docs/transformers/pr_17073/en/model_doc/clip#transformers.FlaxCLIPModel"),c(OH,"href","/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(VH,"href","/docs/transformers/pr_17073/en/model_doc/electra#transformers.FlaxElectraModel"),c(XH,"href","/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(zH,"href","/docs/transformers/pr_17073/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(QH,"href","/docs/transformers/pr_17073/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(WH,"href","/docs/transformers/pr_17073/en/model_doc/marian#transformers.FlaxMarianModel"),c(HH,"href","/docs/transformers/pr_17073/en/model_doc/mbart#transformers.FlaxMBartModel"),c(UH,"href","/docs/transformers/pr_17073/en/model_doc/mt5#transformers.FlaxMT5Model"),c(JH,"href","/docs/transformers/pr_17073/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(YH,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(KH,"href","/docs/transformers/pr_17073/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(ZH,"href","/docs/transformers/pr_17073/en/model_doc/t5#transformers.FlaxT5Model"),c(eU,"href","/docs/transformers/pr_17073/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(oU,"href","/docs/transformers/pr_17073/en/model_doc/vit#transformers.FlaxViTModel"),c(rU,"href","/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(tU,"href","/docs/transformers/pr_17073/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(aU,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y4,"id","transformers.FlaxAutoModelForCausalLM"),c(Y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y4,"href","#transformers.FlaxAutoModelForCausalLM"),c(vc,"class","relative group"),c(nU,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sU,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lU,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iU,"href","/docs/transformers/pr_17073/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(dU,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(cU,"href","/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(fU,"href","/docs/transformers/pr_17073/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(mU,"href","/docs/transformers/pr_17073/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(gU,"href","/docs/transformers/pr_17073/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(hU,"href","/docs/transformers/pr_17073/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(pU,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(uU,"href","/docs/transformers/pr_17073/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dE,"id","transformers.FlaxAutoModelForPreTraining"),c(dE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Mc,"class","relative group"),c(_U,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bU,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vU,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FU,"href","/docs/transformers/pr_17073/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(TU,"href","/docs/transformers/pr_17073/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(MU,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(EU,"href","/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(CU,"href","/docs/transformers/pr_17073/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(wU,"href","/docs/transformers/pr_17073/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(AU,"href","/docs/transformers/pr_17073/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(yU,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(LU,"href","/docs/transformers/pr_17073/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(xU,"href","/docs/transformers/pr_17073/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c($U,"href","/docs/transformers/pr_17073/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(kU,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CE,"id","transformers.FlaxAutoModelForMaskedLM"),c(CE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(wc,"class","relative group"),c(SU,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RU,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BU,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PU,"href","/docs/transformers/pr_17073/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(IU,"href","/docs/transformers/pr_17073/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(qU,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(NU,"href","/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(jU,"href","/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(DU,"href","/docs/transformers/pr_17073/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(GU,"href","/docs/transformers/pr_17073/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(OU,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(VU,"href","/docs/transformers/pr_17073/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(XU,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(qE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Lc,"class","relative group"),c(zU,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QU,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WU,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HU,"href","/docs/transformers/pr_17073/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(UU,"href","/docs/transformers/pr_17073/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(JU,"href","/docs/transformers/pr_17073/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(YU,"href","/docs/transformers/pr_17073/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(KU,"href","/docs/transformers/pr_17073/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(ZU,"href","/docs/transformers/pr_17073/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(eJ,"href","/docs/transformers/pr_17073/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(oJ,"href","/docs/transformers/pr_17073/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(rJ,"href","/docs/transformers/pr_17073/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UE,"id","transformers.FlaxAutoModelForSequenceClassification"),c(UE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UE,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(kc,"class","relative group"),c(tJ,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aJ,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nJ,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sJ,"href","/docs/transformers/pr_17073/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(lJ,"href","/docs/transformers/pr_17073/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(iJ,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(dJ,"href","/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(cJ,"href","/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(fJ,"href","/docs/transformers/pr_17073/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(mJ,"href","/docs/transformers/pr_17073/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(gJ,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(hJ,"href","/docs/transformers/pr_17073/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(pJ,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(i5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Bc,"class","relative group"),c(uJ,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_J,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bJ,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vJ,"href","/docs/transformers/pr_17073/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(FJ,"href","/docs/transformers/pr_17073/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(TJ,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(MJ,"href","/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(EJ,"href","/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(CJ,"href","/docs/transformers/pr_17073/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(wJ,"href","/docs/transformers/pr_17073/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(AJ,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(yJ,"href","/docs/transformers/pr_17073/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(LJ,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T5,"id","transformers.FlaxAutoModelForTokenClassification"),c(T5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(qc,"class","relative group"),c(xJ,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($J,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kJ,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SJ,"href","/docs/transformers/pr_17073/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(RJ,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(BJ,"href","/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(PJ,"href","/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(IJ,"href","/docs/transformers/pr_17073/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(qJ,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(NJ,"href","/docs/transformers/pr_17073/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(jJ,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(S5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Dc,"class","relative group"),c(DJ,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GJ,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OJ,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VJ,"href","/docs/transformers/pr_17073/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(XJ,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(zJ,"href","/docs/transformers/pr_17073/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(QJ,"href","/docs/transformers/pr_17073/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(WJ,"href","/docs/transformers/pr_17073/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(HJ,"href","/docs/transformers/pr_17073/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(UJ,"href","/docs/transformers/pr_17073/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(JJ,"href","/docs/transformers/pr_17073/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(V5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Vc,"class","relative group"),c(YJ,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KJ,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZJ,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eY,"href","/docs/transformers/pr_17073/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W5,"id","transformers.FlaxAutoModelForImageClassification"),c(W5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W5,"href","#transformers.FlaxAutoModelForImageClassification"),c(Qc,"class","relative group"),c(oY,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rY,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tY,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aY,"href","/docs/transformers/pr_17073/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(nY,"href","/docs/transformers/pr_17073/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K5,"id","transformers.FlaxAutoModelForVision2Seq"),c(K5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K5,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Uc,"class","relative group"),c(sY,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lY,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iY,"href","/docs/transformers/pr_17073/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dY,"href","/docs/transformers/pr_17073/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,oi),b(f,of,_),b(f,Kr,_),e(Kr,ri),e(Kr,ti),e(ti,_A),e(Kr,rf),b(f,qe,_),b(f,Xe,_),e(Xe,ai),e(Xe,Mn),e(Mn,bA),e(Xe,En),e(Xe,Cn),e(Cn,vA),e(Xe,ni),e(Xe,wn),e(wn,FA),e(Xe,si),b(f,tf,_),M(va,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,R9),e(Ae,li),e(li,B9),e(Ae,P9),b(f,Eo,_),b(f,Fa,_),e(Fa,I9),e(Fa,af),e(af,q9),e(Fa,mNe),b(f,nBe,_),b(f,ii,_),e(ii,nf),e(nf,eZ),M(TA,eZ,null),e(ii,gNe),e(ii,oZ),e(oZ,hNe),b(f,sBe,_),b(f,An,_),e(An,pNe),e(An,rZ),e(rZ,uNe),e(An,_Ne),e(An,tZ),e(tZ,bNe),e(An,vNe),b(f,lBe,_),M(MA,f,_),b(f,iBe,_),b(f,N9,_),e(N9,FNe),b(f,dBe,_),M(sf,f,_),b(f,cBe,_),b(f,di,_),e(di,lf),e(lf,aZ),M(EA,aZ,null),e(di,TNe),e(di,nZ),e(nZ,MNe),b(f,fBe,_),b(f,Co,_),M(CA,Co,null),e(Co,ENe),e(Co,wA),e(wA,CNe),e(wA,j9),e(j9,wNe),e(wA,ANe),e(Co,yNe),e(Co,AA),e(AA,LNe),e(AA,sZ),e(sZ,xNe),e(AA,$Ne),e(Co,kNe),e(Co,Mr),M(yA,Mr,null),e(Mr,SNe),e(Mr,lZ),e(lZ,RNe),e(Mr,BNe),e(Mr,ci),e(ci,PNe),e(ci,iZ),e(iZ,INe),e(ci,qNe),e(ci,dZ),e(dZ,NNe),e(ci,jNe),e(Mr,DNe),e(Mr,A),e(A,df),e(df,cZ),e(cZ,GNe),e(df,ONe),e(df,D9),e(D9,VNe),e(df,XNe),e(A,zNe),e(A,cf),e(cf,fZ),e(fZ,QNe),e(cf,WNe),e(cf,G9),e(G9,HNe),e(cf,UNe),e(A,JNe),e(A,ff),e(ff,mZ),e(mZ,YNe),e(ff,KNe),e(ff,O9),e(O9,ZNe),e(ff,eje),e(A,oje),e(A,mf),e(mf,gZ),e(gZ,rje),e(mf,tje),e(mf,V9),e(V9,aje),e(mf,nje),e(A,sje),e(A,gf),e(gf,hZ),e(hZ,lje),e(gf,ije),e(gf,X9),e(X9,dje),e(gf,cje),e(A,fje),e(A,hf),e(hf,pZ),e(pZ,mje),e(hf,gje),e(hf,z9),e(z9,hje),e(hf,pje),e(A,uje),e(A,pf),e(pf,uZ),e(uZ,_je),e(pf,bje),e(pf,Q9),e(Q9,vje),e(pf,Fje),e(A,Tje),e(A,uf),e(uf,_Z),e(_Z,Mje),e(uf,Eje),e(uf,W9),e(W9,Cje),e(uf,wje),e(A,Aje),e(A,_f),e(_f,bZ),e(bZ,yje),e(_f,Lje),e(_f,H9),e(H9,xje),e(_f,$je),e(A,kje),e(A,bf),e(bf,vZ),e(vZ,Sje),e(bf,Rje),e(bf,U9),e(U9,Bje),e(bf,Pje),e(A,Ije),e(A,vf),e(vf,FZ),e(FZ,qje),e(vf,Nje),e(vf,J9),e(J9,jje),e(vf,Dje),e(A,Gje),e(A,Ff),e(Ff,TZ),e(TZ,Oje),e(Ff,Vje),e(Ff,Y9),e(Y9,Xje),e(Ff,zje),e(A,Qje),e(A,Tf),e(Tf,MZ),e(MZ,Wje),e(Tf,Hje),e(Tf,K9),e(K9,Uje),e(Tf,Jje),e(A,Yje),e(A,Mf),e(Mf,EZ),e(EZ,Kje),e(Mf,Zje),e(Mf,Z9),e(Z9,eDe),e(Mf,oDe),e(A,rDe),e(A,Ef),e(Ef,CZ),e(CZ,tDe),e(Ef,aDe),e(Ef,e$),e(e$,nDe),e(Ef,sDe),e(A,lDe),e(A,Cf),e(Cf,wZ),e(wZ,iDe),e(Cf,dDe),e(Cf,o$),e(o$,cDe),e(Cf,fDe),e(A,mDe),e(A,wf),e(wf,AZ),e(AZ,gDe),e(wf,hDe),e(wf,r$),e(r$,pDe),e(wf,uDe),e(A,_De),e(A,Af),e(Af,yZ),e(yZ,bDe),e(Af,vDe),e(Af,t$),e(t$,FDe),e(Af,TDe),e(A,MDe),e(A,yf),e(yf,LZ),e(LZ,EDe),e(yf,CDe),e(yf,a$),e(a$,wDe),e(yf,ADe),e(A,yDe),e(A,Lf),e(Lf,xZ),e(xZ,LDe),e(Lf,xDe),e(Lf,n$),e(n$,$De),e(Lf,kDe),e(A,SDe),e(A,xf),e(xf,$Z),e($Z,RDe),e(xf,BDe),e(xf,s$),e(s$,PDe),e(xf,IDe),e(A,qDe),e(A,$f),e($f,kZ),e(kZ,NDe),e($f,jDe),e($f,l$),e(l$,DDe),e($f,GDe),e(A,ODe),e(A,kf),e(kf,SZ),e(SZ,VDe),e(kf,XDe),e(kf,i$),e(i$,zDe),e(kf,QDe),e(A,WDe),e(A,Sf),e(Sf,RZ),e(RZ,HDe),e(Sf,UDe),e(Sf,d$),e(d$,JDe),e(Sf,YDe),e(A,KDe),e(A,Rf),e(Rf,BZ),e(BZ,ZDe),e(Rf,eGe),e(Rf,c$),e(c$,oGe),e(Rf,rGe),e(A,tGe),e(A,Bf),e(Bf,PZ),e(PZ,aGe),e(Bf,nGe),e(Bf,f$),e(f$,sGe),e(Bf,lGe),e(A,iGe),e(A,Pf),e(Pf,IZ),e(IZ,dGe),e(Pf,cGe),e(Pf,m$),e(m$,fGe),e(Pf,mGe),e(A,gGe),e(A,If),e(If,qZ),e(qZ,hGe),e(If,pGe),e(If,g$),e(g$,uGe),e(If,_Ge),e(A,bGe),e(A,qf),e(qf,NZ),e(NZ,vGe),e(qf,FGe),e(qf,h$),e(h$,TGe),e(qf,MGe),e(A,EGe),e(A,Nf),e(Nf,jZ),e(jZ,CGe),e(Nf,wGe),e(Nf,p$),e(p$,AGe),e(Nf,yGe),e(A,LGe),e(A,jf),e(jf,DZ),e(DZ,xGe),e(jf,$Ge),e(jf,u$),e(u$,kGe),e(jf,SGe),e(A,RGe),e(A,Df),e(Df,GZ),e(GZ,BGe),e(Df,PGe),e(Df,_$),e(_$,IGe),e(Df,qGe),e(A,NGe),e(A,Gf),e(Gf,OZ),e(OZ,jGe),e(Gf,DGe),e(Gf,b$),e(b$,GGe),e(Gf,OGe),e(A,VGe),e(A,Of),e(Of,VZ),e(VZ,XGe),e(Of,zGe),e(Of,v$),e(v$,QGe),e(Of,WGe),e(A,HGe),e(A,Vf),e(Vf,XZ),e(XZ,UGe),e(Vf,JGe),e(Vf,F$),e(F$,YGe),e(Vf,KGe),e(A,ZGe),e(A,Xf),e(Xf,zZ),e(zZ,eOe),e(Xf,oOe),e(Xf,T$),e(T$,rOe),e(Xf,tOe),e(A,aOe),e(A,zf),e(zf,QZ),e(QZ,nOe),e(zf,sOe),e(zf,M$),e(M$,lOe),e(zf,iOe),e(A,dOe),e(A,Qf),e(Qf,WZ),e(WZ,cOe),e(Qf,fOe),e(Qf,E$),e(E$,mOe),e(Qf,gOe),e(A,hOe),e(A,Wf),e(Wf,HZ),e(HZ,pOe),e(Wf,uOe),e(Wf,C$),e(C$,_Oe),e(Wf,bOe),e(A,vOe),e(A,Hf),e(Hf,UZ),e(UZ,FOe),e(Hf,TOe),e(Hf,w$),e(w$,MOe),e(Hf,EOe),e(A,COe),e(A,Uf),e(Uf,JZ),e(JZ,wOe),e(Uf,AOe),e(Uf,A$),e(A$,yOe),e(Uf,LOe),e(A,xOe),e(A,Jf),e(Jf,YZ),e(YZ,$Oe),e(Jf,kOe),e(Jf,y$),e(y$,SOe),e(Jf,ROe),e(A,BOe),e(A,Yf),e(Yf,KZ),e(KZ,POe),e(Yf,IOe),e(Yf,L$),e(L$,qOe),e(Yf,NOe),e(A,jOe),e(A,Kf),e(Kf,ZZ),e(ZZ,DOe),e(Kf,GOe),e(Kf,x$),e(x$,OOe),e(Kf,VOe),e(A,XOe),e(A,Zf),e(Zf,eee),e(eee,zOe),e(Zf,QOe),e(Zf,$$),e($$,WOe),e(Zf,HOe),e(A,UOe),e(A,em),e(em,oee),e(oee,JOe),e(em,YOe),e(em,k$),e(k$,KOe),e(em,ZOe),e(A,eVe),e(A,om),e(om,ree),e(ree,oVe),e(om,rVe),e(om,S$),e(S$,tVe),e(om,aVe),e(A,nVe),e(A,rm),e(rm,tee),e(tee,sVe),e(rm,lVe),e(rm,R$),e(R$,iVe),e(rm,dVe),e(A,cVe),e(A,tm),e(tm,aee),e(aee,fVe),e(tm,mVe),e(tm,B$),e(B$,gVe),e(tm,hVe),e(A,pVe),e(A,am),e(am,nee),e(nee,uVe),e(am,_Ve),e(am,P$),e(P$,bVe),e(am,vVe),e(A,FVe),e(A,nm),e(nm,see),e(see,TVe),e(nm,MVe),e(nm,I$),e(I$,EVe),e(nm,CVe),e(A,wVe),e(A,sm),e(sm,lee),e(lee,AVe),e(sm,yVe),e(sm,q$),e(q$,LVe),e(sm,xVe),e(A,$Ve),e(A,lm),e(lm,iee),e(iee,kVe),e(lm,SVe),e(lm,N$),e(N$,RVe),e(lm,BVe),e(A,PVe),e(A,im),e(im,dee),e(dee,IVe),e(im,qVe),e(im,j$),e(j$,NVe),e(im,jVe),e(A,DVe),e(A,dm),e(dm,cee),e(cee,GVe),e(dm,OVe),e(dm,D$),e(D$,VVe),e(dm,XVe),e(A,zVe),e(A,cm),e(cm,fee),e(fee,QVe),e(cm,WVe),e(cm,G$),e(G$,HVe),e(cm,UVe),e(A,JVe),e(A,fm),e(fm,mee),e(mee,YVe),e(fm,KVe),e(fm,O$),e(O$,ZVe),e(fm,eXe),e(A,oXe),e(A,mm),e(mm,gee),e(gee,rXe),e(mm,tXe),e(mm,V$),e(V$,aXe),e(mm,nXe),e(A,sXe),e(A,gm),e(gm,hee),e(hee,lXe),e(gm,iXe),e(gm,X$),e(X$,dXe),e(gm,cXe),e(A,fXe),e(A,hm),e(hm,pee),e(pee,mXe),e(hm,gXe),e(hm,z$),e(z$,hXe),e(hm,pXe),e(A,uXe),e(A,pm),e(pm,uee),e(uee,_Xe),e(pm,bXe),e(pm,Q$),e(Q$,vXe),e(pm,FXe),e(A,TXe),e(A,um),e(um,_ee),e(_ee,MXe),e(um,EXe),e(um,W$),e(W$,CXe),e(um,wXe),e(A,AXe),e(A,_m),e(_m,bee),e(bee,yXe),e(_m,LXe),e(_m,H$),e(H$,xXe),e(_m,$Xe),e(A,kXe),e(A,bm),e(bm,vee),e(vee,SXe),e(bm,RXe),e(bm,U$),e(U$,BXe),e(bm,PXe),e(A,IXe),e(A,vm),e(vm,Fee),e(Fee,qXe),e(vm,NXe),e(vm,J$),e(J$,jXe),e(vm,DXe),e(A,GXe),e(A,Fm),e(Fm,Tee),e(Tee,OXe),e(Fm,VXe),e(Fm,Y$),e(Y$,XXe),e(Fm,zXe),e(A,QXe),e(A,Tm),e(Tm,Mee),e(Mee,WXe),e(Tm,HXe),e(Tm,K$),e(K$,UXe),e(Tm,JXe),e(A,YXe),e(A,Mm),e(Mm,Eee),e(Eee,KXe),e(Mm,ZXe),e(Mm,Z$),e(Z$,eze),e(Mm,oze),e(A,rze),e(A,Em),e(Em,Cee),e(Cee,tze),e(Em,aze),e(Em,ek),e(ek,nze),e(Em,sze),e(A,lze),e(A,Cm),e(Cm,wee),e(wee,ize),e(Cm,dze),e(Cm,ok),e(ok,cze),e(Cm,fze),e(A,mze),e(A,wm),e(wm,Aee),e(Aee,gze),e(wm,hze),e(wm,rk),e(rk,pze),e(wm,uze),e(A,_ze),e(A,Am),e(Am,yee),e(yee,bze),e(Am,vze),e(Am,tk),e(tk,Fze),e(Am,Tze),e(A,Mze),e(A,ym),e(ym,Lee),e(Lee,Eze),e(ym,Cze),e(ym,ak),e(ak,wze),e(ym,Aze),e(A,yze),e(A,Lm),e(Lm,xee),e(xee,Lze),e(Lm,xze),e(Lm,nk),e(nk,$ze),e(Lm,kze),e(A,Sze),e(A,xm),e(xm,$ee),e($ee,Rze),e(xm,Bze),e(xm,sk),e(sk,Pze),e(xm,Ize),e(A,qze),e(A,$m),e($m,kee),e(kee,Nze),e($m,jze),e($m,lk),e(lk,Dze),e($m,Gze),e(A,Oze),e(A,km),e(km,See),e(See,Vze),e(km,Xze),e(km,ik),e(ik,zze),e(km,Qze),e(A,Wze),e(A,Sm),e(Sm,Ree),e(Ree,Hze),e(Sm,Uze),e(Sm,dk),e(dk,Jze),e(Sm,Yze),e(A,Kze),e(A,Rm),e(Rm,Bee),e(Bee,Zze),e(Rm,eQe),e(Rm,ck),e(ck,oQe),e(Rm,rQe),e(A,tQe),e(A,Bm),e(Bm,Pee),e(Pee,aQe),e(Bm,nQe),e(Bm,fk),e(fk,sQe),e(Bm,lQe),e(A,iQe),e(A,Pm),e(Pm,Iee),e(Iee,dQe),e(Pm,cQe),e(Pm,mk),e(mk,fQe),e(Pm,mQe),e(A,gQe),e(A,Im),e(Im,qee),e(qee,hQe),e(Im,pQe),e(Im,gk),e(gk,uQe),e(Im,_Qe),e(A,bQe),e(A,qm),e(qm,Nee),e(Nee,vQe),e(qm,FQe),e(qm,hk),e(hk,TQe),e(qm,MQe),e(A,EQe),e(A,Nm),e(Nm,jee),e(jee,CQe),e(Nm,wQe),e(Nm,pk),e(pk,AQe),e(Nm,yQe),e(A,LQe),e(A,jm),e(jm,Dee),e(Dee,xQe),e(jm,$Qe),e(jm,uk),e(uk,kQe),e(jm,SQe),e(A,RQe),e(A,Dm),e(Dm,Gee),e(Gee,BQe),e(Dm,PQe),e(Dm,_k),e(_k,IQe),e(Dm,qQe),e(A,NQe),e(A,Gm),e(Gm,Oee),e(Oee,jQe),e(Gm,DQe),e(Gm,bk),e(bk,GQe),e(Gm,OQe),e(A,VQe),e(A,Om),e(Om,Vee),e(Vee,XQe),e(Om,zQe),e(Om,vk),e(vk,QQe),e(Om,WQe),e(A,HQe),e(A,Vm),e(Vm,Xee),e(Xee,UQe),e(Vm,JQe),e(Vm,Fk),e(Fk,YQe),e(Vm,KQe),e(A,ZQe),e(A,Xm),e(Xm,zee),e(zee,eWe),e(Xm,oWe),e(Xm,Tk),e(Tk,rWe),e(Xm,tWe),e(A,aWe),e(A,zm),e(zm,Qee),e(Qee,nWe),e(zm,sWe),e(zm,Mk),e(Mk,lWe),e(zm,iWe),e(A,dWe),e(A,Qm),e(Qm,Wee),e(Wee,cWe),e(Qm,fWe),e(Qm,Ek),e(Ek,mWe),e(Qm,gWe),e(A,hWe),e(A,Wm),e(Wm,Hee),e(Hee,pWe),e(Wm,uWe),e(Wm,Ck),e(Ck,_We),e(Wm,bWe),e(A,vWe),e(A,Hm),e(Hm,Uee),e(Uee,FWe),e(Hm,TWe),e(Hm,wk),e(wk,MWe),e(Hm,EWe),e(A,CWe),e(A,Um),e(Um,Jee),e(Jee,wWe),e(Um,AWe),e(Um,Ak),e(Ak,yWe),e(Um,LWe),e(A,xWe),e(A,Jm),e(Jm,Yee),e(Yee,$We),e(Jm,kWe),e(Jm,yk),e(yk,SWe),e(Jm,RWe),e(A,BWe),e(A,Ym),e(Ym,Kee),e(Kee,PWe),e(Ym,IWe),e(Ym,Lk),e(Lk,qWe),e(Ym,NWe),e(A,jWe),e(A,Km),e(Km,Zee),e(Zee,DWe),e(Km,GWe),e(Km,xk),e(xk,OWe),e(Km,VWe),e(A,XWe),e(A,Zm),e(Zm,eoe),e(eoe,zWe),e(Zm,QWe),e(Zm,$k),e($k,WWe),e(Zm,HWe),e(A,UWe),e(A,eg),e(eg,ooe),e(ooe,JWe),e(eg,YWe),e(eg,kk),e(kk,KWe),e(eg,ZWe),e(A,eHe),e(A,og),e(og,roe),e(roe,oHe),e(og,rHe),e(og,Sk),e(Sk,tHe),e(og,aHe),e(A,nHe),e(A,rg),e(rg,toe),e(toe,sHe),e(rg,lHe),e(rg,Rk),e(Rk,iHe),e(rg,dHe),e(A,cHe),e(A,tg),e(tg,aoe),e(aoe,fHe),e(tg,mHe),e(tg,Bk),e(Bk,gHe),e(tg,hHe),e(Mr,pHe),M(ag,Mr,null),e(Co,uHe),e(Co,ng),M(LA,ng,null),e(ng,_He),e(ng,noe),e(noe,bHe),b(f,mBe,_),b(f,fi,_),e(fi,sg),e(sg,soe),M(xA,soe,null),e(fi,vHe),e(fi,loe),e(loe,FHe),b(f,gBe,_),b(f,wo,_),M($A,wo,null),e(wo,THe),e(wo,kA),e(kA,MHe),e(kA,Pk),e(Pk,EHe),e(kA,CHe),e(wo,wHe),e(wo,SA),e(SA,AHe),e(SA,ioe),e(ioe,yHe),e(SA,LHe),e(wo,xHe),e(wo,Er),M(RA,Er,null),e(Er,$He),e(Er,doe),e(doe,kHe),e(Er,SHe),e(Er,Ta),e(Ta,RHe),e(Ta,coe),e(coe,BHe),e(Ta,PHe),e(Ta,foe),e(foe,IHe),e(Ta,qHe),e(Ta,moe),e(moe,NHe),e(Ta,jHe),e(Er,DHe),e(Er,k),e(k,yn),e(yn,goe),e(goe,GHe),e(yn,OHe),e(yn,Ik),e(Ik,VHe),e(yn,XHe),e(yn,qk),e(qk,zHe),e(yn,QHe),e(k,WHe),e(k,Ln),e(Ln,hoe),e(hoe,HHe),e(Ln,UHe),e(Ln,Nk),e(Nk,JHe),e(Ln,YHe),e(Ln,jk),e(jk,KHe),e(Ln,ZHe),e(k,eUe),e(k,xn),e(xn,poe),e(poe,oUe),e(xn,rUe),e(xn,Dk),e(Dk,tUe),e(xn,aUe),e(xn,Gk),e(Gk,nUe),e(xn,sUe),e(k,lUe),e(k,lg),e(lg,uoe),e(uoe,iUe),e(lg,dUe),e(lg,Ok),e(Ok,cUe),e(lg,fUe),e(k,mUe),e(k,$n),e($n,_oe),e(_oe,gUe),e($n,hUe),e($n,Vk),e(Vk,pUe),e($n,uUe),e($n,Xk),e(Xk,_Ue),e($n,bUe),e(k,vUe),e(k,ig),e(ig,boe),e(boe,FUe),e(ig,TUe),e(ig,zk),e(zk,MUe),e(ig,EUe),e(k,CUe),e(k,dg),e(dg,voe),e(voe,wUe),e(dg,AUe),e(dg,Qk),e(Qk,yUe),e(dg,LUe),e(k,xUe),e(k,cg),e(cg,Foe),e(Foe,$Ue),e(cg,kUe),e(cg,Wk),e(Wk,SUe),e(cg,RUe),e(k,BUe),e(k,kn),e(kn,Toe),e(Toe,PUe),e(kn,IUe),e(kn,Hk),e(Hk,qUe),e(kn,NUe),e(kn,Uk),e(Uk,jUe),e(kn,DUe),e(k,GUe),e(k,Sn),e(Sn,Moe),e(Moe,OUe),e(Sn,VUe),e(Sn,Jk),e(Jk,XUe),e(Sn,zUe),e(Sn,Yk),e(Yk,QUe),e(Sn,WUe),e(k,HUe),e(k,Rn),e(Rn,Eoe),e(Eoe,UUe),e(Rn,JUe),e(Rn,Kk),e(Kk,YUe),e(Rn,KUe),e(Rn,Zk),e(Zk,ZUe),e(Rn,eJe),e(k,oJe),e(k,fg),e(fg,Coe),e(Coe,rJe),e(fg,tJe),e(fg,eS),e(eS,aJe),e(fg,nJe),e(k,sJe),e(k,mg),e(mg,woe),e(woe,lJe),e(mg,iJe),e(mg,oS),e(oS,dJe),e(mg,cJe),e(k,fJe),e(k,Bn),e(Bn,Aoe),e(Aoe,mJe),e(Bn,gJe),e(Bn,rS),e(rS,hJe),e(Bn,pJe),e(Bn,tS),e(tS,uJe),e(Bn,_Je),e(k,bJe),e(k,gg),e(gg,yoe),e(yoe,vJe),e(gg,FJe),e(gg,aS),e(aS,TJe),e(gg,MJe),e(k,EJe),e(k,Pn),e(Pn,Loe),e(Loe,CJe),e(Pn,wJe),e(Pn,nS),e(nS,AJe),e(Pn,yJe),e(Pn,sS),e(sS,LJe),e(Pn,xJe),e(k,$Je),e(k,In),e(In,xoe),e(xoe,kJe),e(In,SJe),e(In,lS),e(lS,RJe),e(In,BJe),e(In,iS),e(iS,PJe),e(In,IJe),e(k,qJe),e(k,qn),e(qn,$oe),e($oe,NJe),e(qn,jJe),e(qn,dS),e(dS,DJe),e(qn,GJe),e(qn,cS),e(cS,OJe),e(qn,VJe),e(k,XJe),e(k,hg),e(hg,koe),e(koe,zJe),e(hg,QJe),e(hg,fS),e(fS,WJe),e(hg,HJe),e(k,UJe),e(k,Nn),e(Nn,Soe),e(Soe,JJe),e(Nn,YJe),e(Nn,mS),e(mS,KJe),e(Nn,ZJe),e(Nn,gS),e(gS,eYe),e(Nn,oYe),e(k,rYe),e(k,jn),e(jn,Roe),e(Roe,tYe),e(jn,aYe),e(jn,hS),e(hS,nYe),e(jn,sYe),e(jn,pS),e(pS,lYe),e(jn,iYe),e(k,dYe),e(k,Dn),e(Dn,Boe),e(Boe,cYe),e(Dn,fYe),e(Dn,uS),e(uS,mYe),e(Dn,gYe),e(Dn,_S),e(_S,hYe),e(Dn,pYe),e(k,uYe),e(k,Gn),e(Gn,Poe),e(Poe,_Ye),e(Gn,bYe),e(Gn,bS),e(bS,vYe),e(Gn,FYe),e(Gn,vS),e(vS,TYe),e(Gn,MYe),e(k,EYe),e(k,On),e(On,Ioe),e(Ioe,CYe),e(On,wYe),e(On,FS),e(FS,AYe),e(On,yYe),e(On,TS),e(TS,LYe),e(On,xYe),e(k,$Ye),e(k,Vn),e(Vn,qoe),e(qoe,kYe),e(Vn,SYe),e(Vn,MS),e(MS,RYe),e(Vn,BYe),e(Vn,ES),e(ES,PYe),e(Vn,IYe),e(k,qYe),e(k,pg),e(pg,Noe),e(Noe,NYe),e(pg,jYe),e(pg,CS),e(CS,DYe),e(pg,GYe),e(k,OYe),e(k,Xn),e(Xn,joe),e(joe,VYe),e(Xn,XYe),e(Xn,wS),e(wS,zYe),e(Xn,QYe),e(Xn,AS),e(AS,WYe),e(Xn,HYe),e(k,UYe),e(k,ug),e(ug,Doe),e(Doe,JYe),e(ug,YYe),e(ug,yS),e(yS,KYe),e(ug,ZYe),e(k,eKe),e(k,zn),e(zn,Goe),e(Goe,oKe),e(zn,rKe),e(zn,LS),e(LS,tKe),e(zn,aKe),e(zn,xS),e(xS,nKe),e(zn,sKe),e(k,lKe),e(k,Qn),e(Qn,Ooe),e(Ooe,iKe),e(Qn,dKe),e(Qn,$S),e($S,cKe),e(Qn,fKe),e(Qn,kS),e(kS,mKe),e(Qn,gKe),e(k,hKe),e(k,Wn),e(Wn,Voe),e(Voe,pKe),e(Wn,uKe),e(Wn,SS),e(SS,_Ke),e(Wn,bKe),e(Wn,RS),e(RS,vKe),e(Wn,FKe),e(k,TKe),e(k,Hn),e(Hn,Xoe),e(Xoe,MKe),e(Hn,EKe),e(Hn,BS),e(BS,CKe),e(Hn,wKe),e(Hn,PS),e(PS,AKe),e(Hn,yKe),e(k,LKe),e(k,Un),e(Un,zoe),e(zoe,xKe),e(Un,$Ke),e(Un,IS),e(IS,kKe),e(Un,SKe),e(Un,qS),e(qS,RKe),e(Un,BKe),e(k,PKe),e(k,_g),e(_g,Qoe),e(Qoe,IKe),e(_g,qKe),e(_g,NS),e(NS,NKe),e(_g,jKe),e(k,DKe),e(k,Jn),e(Jn,Woe),e(Woe,GKe),e(Jn,OKe),e(Jn,jS),e(jS,VKe),e(Jn,XKe),e(Jn,DS),e(DS,zKe),e(Jn,QKe),e(k,WKe),e(k,Yn),e(Yn,Hoe),e(Hoe,HKe),e(Yn,UKe),e(Yn,GS),e(GS,JKe),e(Yn,YKe),e(Yn,OS),e(OS,KKe),e(Yn,ZKe),e(k,eZe),e(k,Kn),e(Kn,Uoe),e(Uoe,oZe),e(Kn,rZe),e(Kn,VS),e(VS,tZe),e(Kn,aZe),e(Kn,XS),e(XS,nZe),e(Kn,sZe),e(k,lZe),e(k,Zn),e(Zn,Joe),e(Joe,iZe),e(Zn,dZe),e(Zn,zS),e(zS,cZe),e(Zn,fZe),e(Zn,QS),e(QS,mZe),e(Zn,gZe),e(k,hZe),e(k,es),e(es,Yoe),e(Yoe,pZe),e(es,uZe),e(es,WS),e(WS,_Ze),e(es,bZe),e(es,HS),e(HS,vZe),e(es,FZe),e(k,TZe),e(k,os),e(os,Koe),e(Koe,MZe),e(os,EZe),e(os,US),e(US,CZe),e(os,wZe),e(os,JS),e(JS,AZe),e(os,yZe),e(k,LZe),e(k,bg),e(bg,Zoe),e(Zoe,xZe),e(bg,$Ze),e(bg,YS),e(YS,kZe),e(bg,SZe),e(k,RZe),e(k,rs),e(rs,ere),e(ere,BZe),e(rs,PZe),e(rs,KS),e(KS,IZe),e(rs,qZe),e(rs,ZS),e(ZS,NZe),e(rs,jZe),e(k,DZe),e(k,vg),e(vg,ore),e(ore,GZe),e(vg,OZe),e(vg,eR),e(eR,VZe),e(vg,XZe),e(k,zZe),e(k,Fg),e(Fg,rre),e(rre,QZe),e(Fg,WZe),e(Fg,oR),e(oR,HZe),e(Fg,UZe),e(k,JZe),e(k,ts),e(ts,tre),e(tre,YZe),e(ts,KZe),e(ts,rR),e(rR,ZZe),e(ts,eeo),e(ts,tR),e(tR,oeo),e(ts,reo),e(k,teo),e(k,as),e(as,are),e(are,aeo),e(as,neo),e(as,aR),e(aR,seo),e(as,leo),e(as,nR),e(nR,ieo),e(as,deo),e(k,ceo),e(k,ns),e(ns,nre),e(nre,feo),e(ns,meo),e(ns,sR),e(sR,geo),e(ns,heo),e(ns,lR),e(lR,peo),e(ns,ueo),e(k,_eo),e(k,Tg),e(Tg,sre),e(sre,beo),e(Tg,veo),e(Tg,iR),e(iR,Feo),e(Tg,Teo),e(k,Meo),e(k,ss),e(ss,lre),e(lre,Eeo),e(ss,Ceo),e(ss,dR),e(dR,weo),e(ss,Aeo),e(ss,cR),e(cR,yeo),e(ss,Leo),e(k,xeo),e(k,ls),e(ls,ire),e(ire,$eo),e(ls,keo),e(ls,fR),e(fR,Seo),e(ls,Reo),e(ls,mR),e(mR,Beo),e(ls,Peo),e(k,Ieo),e(k,is),e(is,dre),e(dre,qeo),e(is,Neo),e(is,gR),e(gR,jeo),e(is,Deo),e(is,hR),e(hR,Geo),e(is,Oeo),e(k,Veo),e(k,ds),e(ds,cre),e(cre,Xeo),e(ds,zeo),e(ds,pR),e(pR,Qeo),e(ds,Weo),e(ds,uR),e(uR,Heo),e(ds,Ueo),e(k,Jeo),e(k,cs),e(cs,fre),e(fre,Yeo),e(cs,Keo),e(cs,_R),e(_R,Zeo),e(cs,eoo),e(cs,bR),e(bR,ooo),e(cs,roo),e(k,too),e(k,fs),e(fs,mre),e(mre,aoo),e(fs,noo),e(fs,vR),e(vR,soo),e(fs,loo),e(fs,FR),e(FR,ioo),e(fs,doo),e(k,coo),e(k,Mg),e(Mg,gre),e(gre,foo),e(Mg,moo),e(Mg,TR),e(TR,goo),e(Mg,hoo),e(k,poo),e(k,Eg),e(Eg,hre),e(hre,uoo),e(Eg,_oo),e(Eg,MR),e(MR,boo),e(Eg,voo),e(k,Foo),e(k,Cg),e(Cg,pre),e(pre,Too),e(Cg,Moo),e(Cg,ER),e(ER,Eoo),e(Cg,Coo),e(k,woo),e(k,wg),e(wg,ure),e(ure,Aoo),e(wg,yoo),e(wg,CR),e(CR,Loo),e(wg,xoo),e(k,$oo),e(k,ms),e(ms,_re),e(_re,koo),e(ms,Soo),e(ms,wR),e(wR,Roo),e(ms,Boo),e(ms,AR),e(AR,Poo),e(ms,Ioo),e(k,qoo),e(k,Ag),e(Ag,bre),e(bre,Noo),e(Ag,joo),e(Ag,yR),e(yR,Doo),e(Ag,Goo),e(k,Ooo),e(k,gs),e(gs,vre),e(vre,Voo),e(gs,Xoo),e(gs,LR),e(LR,zoo),e(gs,Qoo),e(gs,xR),e(xR,Woo),e(gs,Hoo),e(k,Uoo),e(k,hs),e(hs,Fre),e(Fre,Joo),e(hs,Yoo),e(hs,$R),e($R,Koo),e(hs,Zoo),e(hs,kR),e(kR,ero),e(hs,oro),e(k,rro),e(k,ps),e(ps,Tre),e(Tre,tro),e(ps,aro),e(ps,SR),e(SR,nro),e(ps,sro),e(ps,RR),e(RR,lro),e(ps,iro),e(k,dro),e(k,us),e(us,Mre),e(Mre,cro),e(us,fro),e(us,BR),e(BR,mro),e(us,gro),e(us,PR),e(PR,hro),e(us,pro),e(k,uro),e(k,_s),e(_s,Ere),e(Ere,_ro),e(_s,bro),e(_s,IR),e(IR,vro),e(_s,Fro),e(_s,qR),e(qR,Tro),e(_s,Mro),e(k,Ero),e(k,bs),e(bs,Cre),e(Cre,Cro),e(bs,wro),e(bs,NR),e(NR,Aro),e(bs,yro),e(bs,jR),e(jR,Lro),e(bs,xro),e(k,$ro),e(k,yg),e(yg,wre),e(wre,kro),e(yg,Sro),e(yg,DR),e(DR,Rro),e(yg,Bro),e(k,Pro),e(k,Lg),e(Lg,Are),e(Are,Iro),e(Lg,qro),e(Lg,GR),e(GR,Nro),e(Lg,jro),e(k,Dro),e(k,vs),e(vs,yre),e(yre,Gro),e(vs,Oro),e(vs,OR),e(OR,Vro),e(vs,Xro),e(vs,VR),e(VR,zro),e(vs,Qro),e(k,Wro),e(k,Fs),e(Fs,Lre),e(Lre,Hro),e(Fs,Uro),e(Fs,XR),e(XR,Jro),e(Fs,Yro),e(Fs,zR),e(zR,Kro),e(Fs,Zro),e(k,eto),e(k,Ts),e(Ts,xre),e(xre,oto),e(Ts,rto),e(Ts,QR),e(QR,tto),e(Ts,ato),e(Ts,WR),e(WR,nto),e(Ts,sto),e(k,lto),e(k,xg),e(xg,$re),e($re,ito),e(xg,dto),e(xg,HR),e(HR,cto),e(xg,fto),e(k,mto),e(k,$g),e($g,kre),e(kre,gto),e($g,hto),e($g,UR),e(UR,pto),e($g,uto),e(k,_to),e(k,kg),e(kg,Sre),e(Sre,bto),e(kg,vto),e(kg,JR),e(JR,Fto),e(kg,Tto),e(k,Mto),e(k,Ms),e(Ms,Rre),e(Rre,Eto),e(Ms,Cto),e(Ms,YR),e(YR,wto),e(Ms,Ato),e(Ms,KR),e(KR,yto),e(Ms,Lto),e(k,xto),e(k,Sg),e(Sg,Bre),e(Bre,$to),e(Sg,kto),e(Sg,ZR),e(ZR,Sto),e(Sg,Rto),e(k,Bto),e(k,Rg),e(Rg,Pre),e(Pre,Pto),e(Rg,Ito),e(Rg,eB),e(eB,qto),e(Rg,Nto),e(k,jto),e(k,Es),e(Es,Ire),e(Ire,Dto),e(Es,Gto),e(Es,oB),e(oB,Oto),e(Es,Vto),e(Es,rB),e(rB,Xto),e(Es,zto),e(k,Qto),e(k,Bg),e(Bg,qre),e(qre,Wto),e(Bg,Hto),e(Bg,tB),e(tB,Uto),e(Bg,Jto),e(k,Yto),e(k,Pg),e(Pg,Nre),e(Nre,Kto),e(Pg,Zto),e(Pg,aB),e(aB,eao),e(Pg,oao),e(k,rao),e(k,Cs),e(Cs,jre),e(jre,tao),e(Cs,aao),e(Cs,nB),e(nB,nao),e(Cs,sao),e(Cs,sB),e(sB,lao),e(Cs,iao),e(k,dao),e(k,ws),e(ws,Dre),e(Dre,cao),e(ws,fao),e(ws,lB),e(lB,mao),e(ws,gao),e(ws,iB),e(iB,hao),e(ws,pao),e(k,uao),e(k,As),e(As,Gre),e(Gre,_ao),e(As,bao),e(As,dB),e(dB,vao),e(As,Fao),e(As,cB),e(cB,Tao),e(As,Mao),e(k,Eao),e(k,ys),e(ys,Ore),e(Ore,Cao),e(ys,wao),e(ys,fB),e(fB,Aao),e(ys,yao),e(ys,mB),e(mB,Lao),e(ys,xao),e(Er,$ao),M(Ig,Er,null),e(wo,kao),e(wo,qg),M(BA,qg,null),e(qg,Sao),e(qg,Vre),e(Vre,Rao),b(f,hBe,_),b(f,mi,_),e(mi,Ng),e(Ng,Xre),M(PA,Xre,null),e(mi,Bao),e(mi,zre),e(zre,Pao),b(f,pBe,_),b(f,Ao,_),M(IA,Ao,null),e(Ao,Iao),e(Ao,qA),e(qA,qao),e(qA,gB),e(gB,Nao),e(qA,jao),e(Ao,Dao),e(Ao,NA),e(NA,Gao),e(NA,Qre),e(Qre,Oao),e(NA,Vao),e(Ao,Xao),e(Ao,Qe),M(jA,Qe,null),e(Qe,zao),e(Qe,Wre),e(Wre,Qao),e(Qe,Wao),e(Qe,Ma),e(Ma,Hao),e(Ma,Hre),e(Hre,Uao),e(Ma,Jao),e(Ma,Ure),e(Ure,Yao),e(Ma,Kao),e(Ma,Jre),e(Jre,Zao),e(Ma,eno),e(Qe,ono),e(Qe,te),e(te,jg),e(jg,Yre),e(Yre,rno),e(jg,tno),e(jg,hB),e(hB,ano),e(jg,nno),e(te,sno),e(te,Dg),e(Dg,Kre),e(Kre,lno),e(Dg,ino),e(Dg,pB),e(pB,dno),e(Dg,cno),e(te,fno),e(te,Gg),e(Gg,Zre),e(Zre,mno),e(Gg,gno),e(Gg,uB),e(uB,hno),e(Gg,pno),e(te,uno),e(te,Og),e(Og,ete),e(ete,_no),e(Og,bno),e(Og,_B),e(_B,vno),e(Og,Fno),e(te,Tno),e(te,Vg),e(Vg,ote),e(ote,Mno),e(Vg,Eno),e(Vg,bB),e(bB,Cno),e(Vg,wno),e(te,Ano),e(te,Xg),e(Xg,rte),e(rte,yno),e(Xg,Lno),e(Xg,vB),e(vB,xno),e(Xg,$no),e(te,kno),e(te,zg),e(zg,tte),e(tte,Sno),e(zg,Rno),e(zg,FB),e(FB,Bno),e(zg,Pno),e(te,Ino),e(te,Qg),e(Qg,ate),e(ate,qno),e(Qg,Nno),e(Qg,TB),e(TB,jno),e(Qg,Dno),e(te,Gno),e(te,Wg),e(Wg,nte),e(nte,Ono),e(Wg,Vno),e(Wg,MB),e(MB,Xno),e(Wg,zno),e(te,Qno),e(te,Hg),e(Hg,ste),e(ste,Wno),e(Hg,Hno),e(Hg,EB),e(EB,Uno),e(Hg,Jno),e(te,Yno),e(te,Ug),e(Ug,lte),e(lte,Kno),e(Ug,Zno),e(Ug,CB),e(CB,eso),e(Ug,oso),e(te,rso),e(te,Jg),e(Jg,ite),e(ite,tso),e(Jg,aso),e(Jg,wB),e(wB,nso),e(Jg,sso),e(te,lso),e(te,Yg),e(Yg,dte),e(dte,iso),e(Yg,dso),e(Yg,AB),e(AB,cso),e(Yg,fso),e(te,mso),e(te,Kg),e(Kg,cte),e(cte,gso),e(Kg,hso),e(Kg,yB),e(yB,pso),e(Kg,uso),e(te,_so),e(te,Zg),e(Zg,fte),e(fte,bso),e(Zg,vso),e(Zg,LB),e(LB,Fso),e(Zg,Tso),e(te,Mso),e(te,eh),e(eh,mte),e(mte,Eso),e(eh,Cso),e(eh,xB),e(xB,wso),e(eh,Aso),e(te,yso),e(te,oh),e(oh,gte),e(gte,Lso),e(oh,xso),e(oh,$B),e($B,$so),e(oh,kso),e(te,Sso),e(te,rh),e(rh,hte),e(hte,Rso),e(rh,Bso),e(rh,kB),e(kB,Pso),e(rh,Iso),e(te,qso),e(te,th),e(th,pte),e(pte,Nso),e(th,jso),e(th,SB),e(SB,Dso),e(th,Gso),e(te,Oso),e(te,ah),e(ah,ute),e(ute,Vso),e(ah,Xso),e(ah,RB),e(RB,zso),e(ah,Qso),e(te,Wso),e(te,nh),e(nh,_te),e(_te,Hso),e(nh,Uso),e(nh,BB),e(BB,Jso),e(nh,Yso),e(te,Kso),e(te,sh),e(sh,bte),e(bte,Zso),e(sh,elo),e(sh,PB),e(PB,olo),e(sh,rlo),e(te,tlo),e(te,lh),e(lh,vte),e(vte,alo),e(lh,nlo),e(lh,IB),e(IB,slo),e(lh,llo),e(te,ilo),e(te,ih),e(ih,Fte),e(Fte,dlo),e(ih,clo),e(ih,qB),e(qB,flo),e(ih,mlo),e(Qe,glo),M(dh,Qe,null),e(Qe,hlo),M(ch,Qe,null),e(Ao,plo),e(Ao,fh),M(DA,fh,null),e(fh,ulo),e(fh,Tte),e(Tte,_lo),b(f,uBe,_),b(f,gi,_),e(gi,mh),e(mh,Mte),M(GA,Mte,null),e(gi,blo),e(gi,Ete),e(Ete,vlo),b(f,_Be,_),b(f,yo,_),M(OA,yo,null),e(yo,Flo),e(yo,VA),e(VA,Tlo),e(VA,NB),e(NB,Mlo),e(VA,Elo),e(yo,Clo),e(yo,XA),e(XA,wlo),e(XA,Cte),e(Cte,Alo),e(XA,ylo),e(yo,Llo),e(yo,We),M(zA,We,null),e(We,xlo),e(We,wte),e(wte,$lo),e(We,klo),e(We,hi),e(hi,Slo),e(hi,Ate),e(Ate,Rlo),e(hi,Blo),e(hi,yte),e(yte,Plo),e(hi,Ilo),e(We,qlo),e(We,be),e(be,gh),e(gh,Lte),e(Lte,Nlo),e(gh,jlo),e(gh,jB),e(jB,Dlo),e(gh,Glo),e(be,Olo),e(be,hh),e(hh,xte),e(xte,Vlo),e(hh,Xlo),e(hh,DB),e(DB,zlo),e(hh,Qlo),e(be,Wlo),e(be,ph),e(ph,$te),e($te,Hlo),e(ph,Ulo),e(ph,GB),e(GB,Jlo),e(ph,Ylo),e(be,Klo),e(be,uh),e(uh,kte),e(kte,Zlo),e(uh,eio),e(uh,OB),e(OB,oio),e(uh,rio),e(be,tio),e(be,_h),e(_h,Ste),e(Ste,aio),e(_h,nio),e(_h,VB),e(VB,sio),e(_h,lio),e(be,iio),e(be,bh),e(bh,Rte),e(Rte,dio),e(bh,cio),e(bh,XB),e(XB,fio),e(bh,mio),e(be,gio),e(be,vh),e(vh,Bte),e(Bte,hio),e(vh,pio),e(vh,zB),e(zB,uio),e(vh,_io),e(be,bio),e(be,Fh),e(Fh,Pte),e(Pte,vio),e(Fh,Fio),e(Fh,QB),e(QB,Tio),e(Fh,Mio),e(be,Eio),e(be,Th),e(Th,Ite),e(Ite,Cio),e(Th,wio),e(Th,WB),e(WB,Aio),e(Th,yio),e(be,Lio),e(be,Mh),e(Mh,qte),e(qte,xio),e(Mh,$io),e(Mh,HB),e(HB,kio),e(Mh,Sio),e(be,Rio),e(be,Eh),e(Eh,Nte),e(Nte,Bio),e(Eh,Pio),e(Eh,UB),e(UB,Iio),e(Eh,qio),e(be,Nio),e(be,Ch),e(Ch,jte),e(jte,jio),e(Ch,Dio),e(Ch,JB),e(JB,Gio),e(Ch,Oio),e(be,Vio),e(be,wh),e(wh,Dte),e(Dte,Xio),e(wh,zio),e(wh,YB),e(YB,Qio),e(wh,Wio),e(be,Hio),e(be,Ah),e(Ah,Gte),e(Gte,Uio),e(Ah,Jio),e(Ah,KB),e(KB,Yio),e(Ah,Kio),e(We,Zio),M(yh,We,null),e(We,edo),M(Lh,We,null),e(yo,odo),e(yo,xh),M(QA,xh,null),e(xh,rdo),e(xh,Ote),e(Ote,tdo),b(f,bBe,_),b(f,pi,_),e(pi,$h),e($h,Vte),M(WA,Vte,null),e(pi,ado),e(pi,Xte),e(Xte,ndo),b(f,vBe,_),b(f,Lo,_),M(HA,Lo,null),e(Lo,sdo),e(Lo,ui),e(ui,ldo),e(ui,ZB),e(ZB,ido),e(ui,ddo),e(ui,eP),e(eP,cdo),e(ui,fdo),e(Lo,mdo),e(Lo,UA),e(UA,gdo),e(UA,zte),e(zte,hdo),e(UA,pdo),e(Lo,udo),e(Lo,Zr),M(JA,Zr,null),e(Zr,_do),e(Zr,Qte),e(Qte,bdo),e(Zr,vdo),e(Zr,_i),e(_i,Fdo),e(_i,Wte),e(Wte,Tdo),e(_i,Mdo),e(_i,oP),e(oP,Edo),e(_i,Cdo),e(Zr,wdo),M(kh,Zr,null),e(Lo,Ado),e(Lo,He),M(YA,He,null),e(He,ydo),e(He,Hte),e(Hte,Ldo),e(He,xdo),e(He,Ea),e(Ea,$do),e(Ea,Ute),e(Ute,kdo),e(Ea,Sdo),e(Ea,Jte),e(Jte,Rdo),e(Ea,Bdo),e(Ea,Yte),e(Yte,Pdo),e(Ea,Ido),e(He,qdo),e(He,x),e(x,Sh),e(Sh,Kte),e(Kte,Ndo),e(Sh,jdo),e(Sh,rP),e(rP,Ddo),e(Sh,Gdo),e(x,Odo),e(x,Rh),e(Rh,Zte),e(Zte,Vdo),e(Rh,Xdo),e(Rh,tP),e(tP,zdo),e(Rh,Qdo),e(x,Wdo),e(x,Bh),e(Bh,eae),e(eae,Hdo),e(Bh,Udo),e(Bh,aP),e(aP,Jdo),e(Bh,Ydo),e(x,Kdo),e(x,Ph),e(Ph,oae),e(oae,Zdo),e(Ph,eco),e(Ph,nP),e(nP,oco),e(Ph,rco),e(x,tco),e(x,Ih),e(Ih,rae),e(rae,aco),e(Ih,nco),e(Ih,sP),e(sP,sco),e(Ih,lco),e(x,ico),e(x,qh),e(qh,tae),e(tae,dco),e(qh,cco),e(qh,lP),e(lP,fco),e(qh,mco),e(x,gco),e(x,Nh),e(Nh,aae),e(aae,hco),e(Nh,pco),e(Nh,iP),e(iP,uco),e(Nh,_co),e(x,bco),e(x,jh),e(jh,nae),e(nae,vco),e(jh,Fco),e(jh,dP),e(dP,Tco),e(jh,Mco),e(x,Eco),e(x,Dh),e(Dh,sae),e(sae,Cco),e(Dh,wco),e(Dh,cP),e(cP,Aco),e(Dh,yco),e(x,Lco),e(x,Gh),e(Gh,lae),e(lae,xco),e(Gh,$co),e(Gh,fP),e(fP,kco),e(Gh,Sco),e(x,Rco),e(x,Oh),e(Oh,iae),e(iae,Bco),e(Oh,Pco),e(Oh,mP),e(mP,Ico),e(Oh,qco),e(x,Nco),e(x,Vh),e(Vh,dae),e(dae,jco),e(Vh,Dco),e(Vh,gP),e(gP,Gco),e(Vh,Oco),e(x,Vco),e(x,Xh),e(Xh,cae),e(cae,Xco),e(Xh,zco),e(Xh,hP),e(hP,Qco),e(Xh,Wco),e(x,Hco),e(x,zh),e(zh,fae),e(fae,Uco),e(zh,Jco),e(zh,pP),e(pP,Yco),e(zh,Kco),e(x,Zco),e(x,Qh),e(Qh,mae),e(mae,efo),e(Qh,ofo),e(Qh,uP),e(uP,rfo),e(Qh,tfo),e(x,afo),e(x,Wh),e(Wh,gae),e(gae,nfo),e(Wh,sfo),e(Wh,_P),e(_P,lfo),e(Wh,ifo),e(x,dfo),e(x,Hh),e(Hh,hae),e(hae,cfo),e(Hh,ffo),e(Hh,bP),e(bP,mfo),e(Hh,gfo),e(x,hfo),e(x,Uh),e(Uh,pae),e(pae,pfo),e(Uh,ufo),e(Uh,vP),e(vP,_fo),e(Uh,bfo),e(x,vfo),e(x,Jh),e(Jh,uae),e(uae,Ffo),e(Jh,Tfo),e(Jh,FP),e(FP,Mfo),e(Jh,Efo),e(x,Cfo),e(x,Yh),e(Yh,_ae),e(_ae,wfo),e(Yh,Afo),e(Yh,TP),e(TP,yfo),e(Yh,Lfo),e(x,xfo),e(x,Kh),e(Kh,bae),e(bae,$fo),e(Kh,kfo),e(Kh,MP),e(MP,Sfo),e(Kh,Rfo),e(x,Bfo),e(x,Zh),e(Zh,vae),e(vae,Pfo),e(Zh,Ifo),e(Zh,EP),e(EP,qfo),e(Zh,Nfo),e(x,jfo),e(x,ep),e(ep,Fae),e(Fae,Dfo),e(ep,Gfo),e(ep,CP),e(CP,Ofo),e(ep,Vfo),e(x,Xfo),e(x,op),e(op,Tae),e(Tae,zfo),e(op,Qfo),e(op,wP),e(wP,Wfo),e(op,Hfo),e(x,Ufo),e(x,rp),e(rp,Mae),e(Mae,Jfo),e(rp,Yfo),e(rp,AP),e(AP,Kfo),e(rp,Zfo),e(x,emo),e(x,tp),e(tp,Eae),e(Eae,omo),e(tp,rmo),e(tp,yP),e(yP,tmo),e(tp,amo),e(x,nmo),e(x,ap),e(ap,Cae),e(Cae,smo),e(ap,lmo),e(ap,LP),e(LP,imo),e(ap,dmo),e(x,cmo),e(x,np),e(np,wae),e(wae,fmo),e(np,mmo),e(np,xP),e(xP,gmo),e(np,hmo),e(x,pmo),e(x,sp),e(sp,Aae),e(Aae,umo),e(sp,_mo),e(sp,$P),e($P,bmo),e(sp,vmo),e(x,Fmo),e(x,lp),e(lp,yae),e(yae,Tmo),e(lp,Mmo),e(lp,kP),e(kP,Emo),e(lp,Cmo),e(x,wmo),e(x,Ls),e(Ls,Lae),e(Lae,Amo),e(Ls,ymo),e(Ls,SP),e(SP,Lmo),e(Ls,xmo),e(Ls,RP),e(RP,$mo),e(Ls,kmo),e(x,Smo),e(x,ip),e(ip,xae),e(xae,Rmo),e(ip,Bmo),e(ip,BP),e(BP,Pmo),e(ip,Imo),e(x,qmo),e(x,dp),e(dp,$ae),e($ae,Nmo),e(dp,jmo),e(dp,PP),e(PP,Dmo),e(dp,Gmo),e(x,Omo),e(x,cp),e(cp,kae),e(kae,Vmo),e(cp,Xmo),e(cp,IP),e(IP,zmo),e(cp,Qmo),e(x,Wmo),e(x,fp),e(fp,Sae),e(Sae,Hmo),e(fp,Umo),e(fp,qP),e(qP,Jmo),e(fp,Ymo),e(x,Kmo),e(x,mp),e(mp,Rae),e(Rae,Zmo),e(mp,ego),e(mp,NP),e(NP,ogo),e(mp,rgo),e(x,tgo),e(x,gp),e(gp,Bae),e(Bae,ago),e(gp,ngo),e(gp,jP),e(jP,sgo),e(gp,lgo),e(x,igo),e(x,hp),e(hp,Pae),e(Pae,dgo),e(hp,cgo),e(hp,DP),e(DP,fgo),e(hp,mgo),e(x,ggo),e(x,pp),e(pp,Iae),e(Iae,hgo),e(pp,pgo),e(pp,GP),e(GP,ugo),e(pp,_go),e(x,bgo),e(x,up),e(up,qae),e(qae,vgo),e(up,Fgo),e(up,OP),e(OP,Tgo),e(up,Mgo),e(x,Ego),e(x,_p),e(_p,Nae),e(Nae,Cgo),e(_p,wgo),e(_p,VP),e(VP,Ago),e(_p,ygo),e(x,Lgo),e(x,bp),e(bp,jae),e(jae,xgo),e(bp,$go),e(bp,XP),e(XP,kgo),e(bp,Sgo),e(x,Rgo),e(x,vp),e(vp,Dae),e(Dae,Bgo),e(vp,Pgo),e(vp,zP),e(zP,Igo),e(vp,qgo),e(x,Ngo),e(x,Fp),e(Fp,Gae),e(Gae,jgo),e(Fp,Dgo),e(Fp,QP),e(QP,Ggo),e(Fp,Ogo),e(x,Vgo),e(x,Tp),e(Tp,Oae),e(Oae,Xgo),e(Tp,zgo),e(Tp,WP),e(WP,Qgo),e(Tp,Wgo),e(x,Hgo),e(x,Mp),e(Mp,Vae),e(Vae,Ugo),e(Mp,Jgo),e(Mp,HP),e(HP,Ygo),e(Mp,Kgo),e(x,Zgo),e(x,Ep),e(Ep,Xae),e(Xae,eho),e(Ep,oho),e(Ep,UP),e(UP,rho),e(Ep,tho),e(x,aho),e(x,Cp),e(Cp,zae),e(zae,nho),e(Cp,sho),e(Cp,JP),e(JP,lho),e(Cp,iho),e(x,dho),e(x,wp),e(wp,Qae),e(Qae,cho),e(wp,fho),e(wp,YP),e(YP,mho),e(wp,gho),e(x,hho),e(x,Ap),e(Ap,Wae),e(Wae,pho),e(Ap,uho),e(Ap,KP),e(KP,_ho),e(Ap,bho),e(x,vho),e(x,yp),e(yp,Hae),e(Hae,Fho),e(yp,Tho),e(yp,ZP),e(ZP,Mho),e(yp,Eho),e(x,Cho),e(x,Lp),e(Lp,Uae),e(Uae,who),e(Lp,Aho),e(Lp,eI),e(eI,yho),e(Lp,Lho),e(x,xho),e(x,xp),e(xp,Jae),e(Jae,$ho),e(xp,kho),e(xp,oI),e(oI,Sho),e(xp,Rho),e(x,Bho),e(x,$p),e($p,Yae),e(Yae,Pho),e($p,Iho),e($p,rI),e(rI,qho),e($p,Nho),e(x,jho),e(x,kp),e(kp,Kae),e(Kae,Dho),e(kp,Gho),e(kp,tI),e(tI,Oho),e(kp,Vho),e(x,Xho),e(x,Sp),e(Sp,Zae),e(Zae,zho),e(Sp,Qho),e(Sp,aI),e(aI,Who),e(Sp,Hho),e(x,Uho),e(x,Rp),e(Rp,ene),e(ene,Jho),e(Rp,Yho),e(Rp,nI),e(nI,Kho),e(Rp,Zho),e(x,epo),e(x,Bp),e(Bp,one),e(one,opo),e(Bp,rpo),e(Bp,sI),e(sI,tpo),e(Bp,apo),e(x,npo),e(x,Pp),e(Pp,rne),e(rne,spo),e(Pp,lpo),e(Pp,lI),e(lI,ipo),e(Pp,dpo),e(x,cpo),e(x,Ip),e(Ip,tne),e(tne,fpo),e(Ip,mpo),e(Ip,iI),e(iI,gpo),e(Ip,hpo),e(x,ppo),e(x,qp),e(qp,ane),e(ane,upo),e(qp,_po),e(qp,dI),e(dI,bpo),e(qp,vpo),e(x,Fpo),e(x,Np),e(Np,nne),e(nne,Tpo),e(Np,Mpo),e(Np,cI),e(cI,Epo),e(Np,Cpo),e(x,wpo),e(x,jp),e(jp,sne),e(sne,Apo),e(jp,ypo),e(jp,fI),e(fI,Lpo),e(jp,xpo),e(x,$po),e(x,Dp),e(Dp,lne),e(lne,kpo),e(Dp,Spo),e(Dp,mI),e(mI,Rpo),e(Dp,Bpo),e(x,Ppo),e(x,Gp),e(Gp,ine),e(ine,Ipo),e(Gp,qpo),e(Gp,gI),e(gI,Npo),e(Gp,jpo),e(x,Dpo),e(x,Op),e(Op,dne),e(dne,Gpo),e(Op,Opo),e(Op,hI),e(hI,Vpo),e(Op,Xpo),e(x,zpo),e(x,Vp),e(Vp,cne),e(cne,Qpo),e(Vp,Wpo),e(Vp,pI),e(pI,Hpo),e(Vp,Upo),e(x,Jpo),e(x,Xp),e(Xp,fne),e(fne,Ypo),e(Xp,Kpo),e(Xp,uI),e(uI,Zpo),e(Xp,euo),e(x,ouo),e(x,zp),e(zp,mne),e(mne,ruo),e(zp,tuo),e(zp,_I),e(_I,auo),e(zp,nuo),e(x,suo),e(x,Qp),e(Qp,gne),e(gne,luo),e(Qp,iuo),e(Qp,bI),e(bI,duo),e(Qp,cuo),e(x,fuo),e(x,Wp),e(Wp,hne),e(hne,muo),e(Wp,guo),e(Wp,vI),e(vI,huo),e(Wp,puo),e(x,uuo),e(x,Hp),e(Hp,pne),e(pne,_uo),e(Hp,buo),e(Hp,FI),e(FI,vuo),e(Hp,Fuo),e(x,Tuo),e(x,Up),e(Up,une),e(une,Muo),e(Up,Euo),e(Up,TI),e(TI,Cuo),e(Up,wuo),e(x,Auo),e(x,Jp),e(Jp,_ne),e(_ne,yuo),e(Jp,Luo),e(Jp,MI),e(MI,xuo),e(Jp,$uo),e(x,kuo),e(x,Yp),e(Yp,bne),e(bne,Suo),e(Yp,Ruo),e(Yp,EI),e(EI,Buo),e(Yp,Puo),e(x,Iuo),e(x,Kp),e(Kp,vne),e(vne,quo),e(Kp,Nuo),e(Kp,CI),e(CI,juo),e(Kp,Duo),e(x,Guo),e(x,Zp),e(Zp,Fne),e(Fne,Ouo),e(Zp,Vuo),e(Zp,wI),e(wI,Xuo),e(Zp,zuo),e(x,Quo),e(x,eu),e(eu,Tne),e(Tne,Wuo),e(eu,Huo),e(eu,AI),e(AI,Uuo),e(eu,Juo),e(x,Yuo),e(x,ou),e(ou,Mne),e(Mne,Kuo),e(ou,Zuo),e(ou,yI),e(yI,e_o),e(ou,o_o),e(x,r_o),e(x,ru),e(ru,Ene),e(Ene,t_o),e(ru,a_o),e(ru,LI),e(LI,n_o),e(ru,s_o),e(x,l_o),e(x,tu),e(tu,Cne),e(Cne,i_o),e(tu,d_o),e(tu,xI),e(xI,c_o),e(tu,f_o),e(x,m_o),e(x,au),e(au,wne),e(wne,g_o),e(au,h_o),e(au,$I),e($I,p_o),e(au,u_o),e(x,__o),e(x,nu),e(nu,Ane),e(Ane,b_o),e(nu,v_o),e(nu,kI),e(kI,F_o),e(nu,T_o),e(x,M_o),e(x,su),e(su,yne),e(yne,E_o),e(su,C_o),e(su,SI),e(SI,w_o),e(su,A_o),e(x,y_o),e(x,lu),e(lu,Lne),e(Lne,L_o),e(lu,x_o),e(lu,RI),e(RI,$_o),e(lu,k_o),e(x,S_o),e(x,iu),e(iu,xne),e(xne,R_o),e(iu,B_o),e(iu,BI),e(BI,P_o),e(iu,I_o),e(x,q_o),e(x,du),e(du,$ne),e($ne,N_o),e(du,j_o),e(du,PI),e(PI,D_o),e(du,G_o),e(x,O_o),e(x,cu),e(cu,kne),e(kne,V_o),e(cu,X_o),e(cu,II),e(II,z_o),e(cu,Q_o),e(x,W_o),e(x,fu),e(fu,Sne),e(Sne,H_o),e(fu,U_o),e(fu,qI),e(qI,J_o),e(fu,Y_o),e(x,K_o),e(x,mu),e(mu,Rne),e(Rne,Z_o),e(mu,e1o),e(mu,NI),e(NI,o1o),e(mu,r1o),e(x,t1o),e(x,gu),e(gu,Bne),e(Bne,a1o),e(gu,n1o),e(gu,jI),e(jI,s1o),e(gu,l1o),e(x,i1o),e(x,hu),e(hu,Pne),e(Pne,d1o),e(hu,c1o),e(hu,DI),e(DI,f1o),e(hu,m1o),e(x,g1o),e(x,pu),e(pu,Ine),e(Ine,h1o),e(pu,p1o),e(pu,GI),e(GI,u1o),e(pu,_1o),e(x,b1o),e(x,uu),e(uu,qne),e(qne,v1o),e(uu,F1o),e(uu,OI),e(OI,T1o),e(uu,M1o),e(x,E1o),e(x,_u),e(_u,Nne),e(Nne,C1o),e(_u,w1o),e(_u,VI),e(VI,A1o),e(_u,y1o),e(He,L1o),e(He,bu),e(bu,x1o),e(bu,jne),e(jne,$1o),e(bu,k1o),e(bu,Dne),e(Dne,S1o),e(He,R1o),M(vu,He,null),b(f,FBe,_),b(f,bi,_),e(bi,Fu),e(Fu,Gne),M(KA,Gne,null),e(bi,B1o),e(bi,One),e(One,P1o),b(f,TBe,_),b(f,xo,_),M(ZA,xo,null),e(xo,I1o),e(xo,vi),e(vi,q1o),e(vi,XI),e(XI,N1o),e(vi,j1o),e(vi,zI),e(zI,D1o),e(vi,G1o),e(xo,O1o),e(xo,e6),e(e6,V1o),e(e6,Vne),e(Vne,X1o),e(e6,z1o),e(xo,Q1o),e(xo,et),M(o6,et,null),e(et,W1o),e(et,Xne),e(Xne,H1o),e(et,U1o),e(et,Fi),e(Fi,J1o),e(Fi,zne),e(zne,Y1o),e(Fi,K1o),e(Fi,QI),e(QI,Z1o),e(Fi,e7o),e(et,o7o),M(Tu,et,null),e(xo,r7o),e(xo,Ue),M(r6,Ue,null),e(Ue,t7o),e(Ue,Qne),e(Qne,a7o),e(Ue,n7o),e(Ue,Ca),e(Ca,s7o),e(Ca,Wne),e(Wne,l7o),e(Ca,i7o),e(Ca,Hne),e(Hne,d7o),e(Ca,c7o),e(Ca,Une),e(Une,f7o),e(Ca,m7o),e(Ue,g7o),e(Ue,G),e(G,Mu),e(Mu,Jne),e(Jne,h7o),e(Mu,p7o),e(Mu,WI),e(WI,u7o),e(Mu,_7o),e(G,b7o),e(G,Eu),e(Eu,Yne),e(Yne,v7o),e(Eu,F7o),e(Eu,HI),e(HI,T7o),e(Eu,M7o),e(G,E7o),e(G,Cu),e(Cu,Kne),e(Kne,C7o),e(Cu,w7o),e(Cu,UI),e(UI,A7o),e(Cu,y7o),e(G,L7o),e(G,wu),e(wu,Zne),e(Zne,x7o),e(wu,$7o),e(wu,JI),e(JI,k7o),e(wu,S7o),e(G,R7o),e(G,Au),e(Au,ese),e(ese,B7o),e(Au,P7o),e(Au,YI),e(YI,I7o),e(Au,q7o),e(G,N7o),e(G,yu),e(yu,ose),e(ose,j7o),e(yu,D7o),e(yu,KI),e(KI,G7o),e(yu,O7o),e(G,V7o),e(G,Lu),e(Lu,rse),e(rse,X7o),e(Lu,z7o),e(Lu,ZI),e(ZI,Q7o),e(Lu,W7o),e(G,H7o),e(G,xu),e(xu,tse),e(tse,U7o),e(xu,J7o),e(xu,eq),e(eq,Y7o),e(xu,K7o),e(G,Z7o),e(G,$u),e($u,ase),e(ase,ebo),e($u,obo),e($u,oq),e(oq,rbo),e($u,tbo),e(G,abo),e(G,ku),e(ku,nse),e(nse,nbo),e(ku,sbo),e(ku,rq),e(rq,lbo),e(ku,ibo),e(G,dbo),e(G,Su),e(Su,sse),e(sse,cbo),e(Su,fbo),e(Su,tq),e(tq,mbo),e(Su,gbo),e(G,hbo),e(G,Ru),e(Ru,lse),e(lse,pbo),e(Ru,ubo),e(Ru,aq),e(aq,_bo),e(Ru,bbo),e(G,vbo),e(G,Bu),e(Bu,ise),e(ise,Fbo),e(Bu,Tbo),e(Bu,nq),e(nq,Mbo),e(Bu,Ebo),e(G,Cbo),e(G,Pu),e(Pu,dse),e(dse,wbo),e(Pu,Abo),e(Pu,sq),e(sq,ybo),e(Pu,Lbo),e(G,xbo),e(G,Iu),e(Iu,cse),e(cse,$bo),e(Iu,kbo),e(Iu,lq),e(lq,Sbo),e(Iu,Rbo),e(G,Bbo),e(G,qu),e(qu,fse),e(fse,Pbo),e(qu,Ibo),e(qu,iq),e(iq,qbo),e(qu,Nbo),e(G,jbo),e(G,Nu),e(Nu,mse),e(mse,Dbo),e(Nu,Gbo),e(Nu,dq),e(dq,Obo),e(Nu,Vbo),e(G,Xbo),e(G,ju),e(ju,gse),e(gse,zbo),e(ju,Qbo),e(ju,cq),e(cq,Wbo),e(ju,Hbo),e(G,Ubo),e(G,Du),e(Du,hse),e(hse,Jbo),e(Du,Ybo),e(Du,fq),e(fq,Kbo),e(Du,Zbo),e(G,e2o),e(G,Gu),e(Gu,pse),e(pse,o2o),e(Gu,r2o),e(Gu,mq),e(mq,t2o),e(Gu,a2o),e(G,n2o),e(G,Ou),e(Ou,use),e(use,s2o),e(Ou,l2o),e(Ou,gq),e(gq,i2o),e(Ou,d2o),e(G,c2o),e(G,Vu),e(Vu,_se),e(_se,f2o),e(Vu,m2o),e(Vu,hq),e(hq,g2o),e(Vu,h2o),e(G,p2o),e(G,Xu),e(Xu,bse),e(bse,u2o),e(Xu,_2o),e(Xu,pq),e(pq,b2o),e(Xu,v2o),e(G,F2o),e(G,zu),e(zu,vse),e(vse,T2o),e(zu,M2o),e(zu,uq),e(uq,E2o),e(zu,C2o),e(G,w2o),e(G,Qu),e(Qu,Fse),e(Fse,A2o),e(Qu,y2o),e(Qu,_q),e(_q,L2o),e(Qu,x2o),e(G,$2o),e(G,Wu),e(Wu,Tse),e(Tse,k2o),e(Wu,S2o),e(Wu,bq),e(bq,R2o),e(Wu,B2o),e(G,P2o),e(G,Hu),e(Hu,Mse),e(Mse,I2o),e(Hu,q2o),e(Hu,vq),e(vq,N2o),e(Hu,j2o),e(G,D2o),e(G,Uu),e(Uu,Ese),e(Ese,G2o),e(Uu,O2o),e(Uu,Fq),e(Fq,V2o),e(Uu,X2o),e(G,z2o),e(G,Ju),e(Ju,Cse),e(Cse,Q2o),e(Ju,W2o),e(Ju,Tq),e(Tq,H2o),e(Ju,U2o),e(G,J2o),e(G,Yu),e(Yu,wse),e(wse,Y2o),e(Yu,K2o),e(Yu,Mq),e(Mq,Z2o),e(Yu,e3o),e(G,o3o),e(G,Ku),e(Ku,Ase),e(Ase,r3o),e(Ku,t3o),e(Ku,Eq),e(Eq,a3o),e(Ku,n3o),e(G,s3o),e(G,Zu),e(Zu,yse),e(yse,l3o),e(Zu,i3o),e(Zu,Cq),e(Cq,d3o),e(Zu,c3o),e(G,f3o),e(G,e_),e(e_,Lse),e(Lse,m3o),e(e_,g3o),e(e_,wq),e(wq,h3o),e(e_,p3o),e(G,u3o),e(G,o_),e(o_,xse),e(xse,_3o),e(o_,b3o),e(o_,Aq),e(Aq,v3o),e(o_,F3o),e(G,T3o),e(G,r_),e(r_,$se),e($se,M3o),e(r_,E3o),e(r_,yq),e(yq,C3o),e(r_,w3o),e(G,A3o),e(G,t_),e(t_,kse),e(kse,y3o),e(t_,L3o),e(t_,Lq),e(Lq,x3o),e(t_,$3o),e(G,k3o),e(G,a_),e(a_,Sse),e(Sse,S3o),e(a_,R3o),e(a_,xq),e(xq,B3o),e(a_,P3o),e(G,I3o),e(G,n_),e(n_,Rse),e(Rse,q3o),e(n_,N3o),e(n_,$q),e($q,j3o),e(n_,D3o),e(G,G3o),e(G,s_),e(s_,Bse),e(Bse,O3o),e(s_,V3o),e(s_,kq),e(kq,X3o),e(s_,z3o),e(Ue,Q3o),e(Ue,l_),e(l_,W3o),e(l_,Pse),e(Pse,H3o),e(l_,U3o),e(l_,Ise),e(Ise,J3o),e(Ue,Y3o),M(i_,Ue,null),b(f,MBe,_),b(f,Ti,_),e(Ti,d_),e(d_,qse),M(t6,qse,null),e(Ti,K3o),e(Ti,Nse),e(Nse,Z3o),b(f,EBe,_),b(f,$o,_),M(a6,$o,null),e($o,evo),e($o,Mi),e(Mi,ovo),e(Mi,Sq),e(Sq,rvo),e(Mi,tvo),e(Mi,Rq),e(Rq,avo),e(Mi,nvo),e($o,svo),e($o,n6),e(n6,lvo),e(n6,jse),e(jse,ivo),e(n6,dvo),e($o,cvo),e($o,ot),M(s6,ot,null),e(ot,fvo),e(ot,Dse),e(Dse,mvo),e(ot,gvo),e(ot,Ei),e(Ei,hvo),e(Ei,Gse),e(Gse,pvo),e(Ei,uvo),e(Ei,Bq),e(Bq,_vo),e(Ei,bvo),e(ot,vvo),M(c_,ot,null),e($o,Fvo),e($o,Je),M(l6,Je,null),e(Je,Tvo),e(Je,Ose),e(Ose,Mvo),e(Je,Evo),e(Je,wa),e(wa,Cvo),e(wa,Vse),e(Vse,wvo),e(wa,Avo),e(wa,Xse),e(Xse,yvo),e(wa,Lvo),e(wa,zse),e(zse,xvo),e(wa,$vo),e(Je,kvo),e(Je,z),e(z,f_),e(f_,Qse),e(Qse,Svo),e(f_,Rvo),e(f_,Pq),e(Pq,Bvo),e(f_,Pvo),e(z,Ivo),e(z,m_),e(m_,Wse),e(Wse,qvo),e(m_,Nvo),e(m_,Iq),e(Iq,jvo),e(m_,Dvo),e(z,Gvo),e(z,g_),e(g_,Hse),e(Hse,Ovo),e(g_,Vvo),e(g_,qq),e(qq,Xvo),e(g_,zvo),e(z,Qvo),e(z,h_),e(h_,Use),e(Use,Wvo),e(h_,Hvo),e(h_,Nq),e(Nq,Uvo),e(h_,Jvo),e(z,Yvo),e(z,p_),e(p_,Jse),e(Jse,Kvo),e(p_,Zvo),e(p_,jq),e(jq,eFo),e(p_,oFo),e(z,rFo),e(z,u_),e(u_,Yse),e(Yse,tFo),e(u_,aFo),e(u_,Dq),e(Dq,nFo),e(u_,sFo),e(z,lFo),e(z,__),e(__,Kse),e(Kse,iFo),e(__,dFo),e(__,Gq),e(Gq,cFo),e(__,fFo),e(z,mFo),e(z,b_),e(b_,Zse),e(Zse,gFo),e(b_,hFo),e(b_,Oq),e(Oq,pFo),e(b_,uFo),e(z,_Fo),e(z,v_),e(v_,ele),e(ele,bFo),e(v_,vFo),e(v_,Vq),e(Vq,FFo),e(v_,TFo),e(z,MFo),e(z,F_),e(F_,ole),e(ole,EFo),e(F_,CFo),e(F_,Xq),e(Xq,wFo),e(F_,AFo),e(z,yFo),e(z,T_),e(T_,rle),e(rle,LFo),e(T_,xFo),e(T_,zq),e(zq,$Fo),e(T_,kFo),e(z,SFo),e(z,M_),e(M_,tle),e(tle,RFo),e(M_,BFo),e(M_,Qq),e(Qq,PFo),e(M_,IFo),e(z,qFo),e(z,E_),e(E_,ale),e(ale,NFo),e(E_,jFo),e(E_,Wq),e(Wq,DFo),e(E_,GFo),e(z,OFo),e(z,C_),e(C_,nle),e(nle,VFo),e(C_,XFo),e(C_,Hq),e(Hq,zFo),e(C_,QFo),e(z,WFo),e(z,w_),e(w_,sle),e(sle,HFo),e(w_,UFo),e(w_,Uq),e(Uq,JFo),e(w_,YFo),e(z,KFo),e(z,A_),e(A_,lle),e(lle,ZFo),e(A_,e0o),e(A_,Jq),e(Jq,o0o),e(A_,r0o),e(z,t0o),e(z,y_),e(y_,ile),e(ile,a0o),e(y_,n0o),e(y_,Yq),e(Yq,s0o),e(y_,l0o),e(z,i0o),e(z,L_),e(L_,dle),e(dle,d0o),e(L_,c0o),e(L_,Kq),e(Kq,f0o),e(L_,m0o),e(z,g0o),e(z,x_),e(x_,cle),e(cle,h0o),e(x_,p0o),e(x_,Zq),e(Zq,u0o),e(x_,_0o),e(z,b0o),e(z,$_),e($_,fle),e(fle,v0o),e($_,F0o),e($_,eN),e(eN,T0o),e($_,M0o),e(z,E0o),e(z,k_),e(k_,mle),e(mle,C0o),e(k_,w0o),e(k_,oN),e(oN,A0o),e(k_,y0o),e(z,L0o),e(z,S_),e(S_,gle),e(gle,x0o),e(S_,$0o),e(S_,rN),e(rN,k0o),e(S_,S0o),e(z,R0o),e(z,R_),e(R_,hle),e(hle,B0o),e(R_,P0o),e(R_,tN),e(tN,I0o),e(R_,q0o),e(z,N0o),e(z,B_),e(B_,ple),e(ple,j0o),e(B_,D0o),e(B_,aN),e(aN,G0o),e(B_,O0o),e(z,V0o),e(z,P_),e(P_,ule),e(ule,X0o),e(P_,z0o),e(P_,nN),e(nN,Q0o),e(P_,W0o),e(z,H0o),e(z,I_),e(I_,_le),e(_le,U0o),e(I_,J0o),e(I_,sN),e(sN,Y0o),e(I_,K0o),e(z,Z0o),e(z,q_),e(q_,ble),e(ble,eTo),e(q_,oTo),e(q_,lN),e(lN,rTo),e(q_,tTo),e(z,aTo),e(z,N_),e(N_,vle),e(vle,nTo),e(N_,sTo),e(N_,iN),e(iN,lTo),e(N_,iTo),e(z,dTo),e(z,j_),e(j_,Fle),e(Fle,cTo),e(j_,fTo),e(j_,dN),e(dN,mTo),e(j_,gTo),e(z,hTo),e(z,D_),e(D_,Tle),e(Tle,pTo),e(D_,uTo),e(D_,cN),e(cN,_To),e(D_,bTo),e(z,vTo),e(z,G_),e(G_,Mle),e(Mle,FTo),e(G_,TTo),e(G_,fN),e(fN,MTo),e(G_,ETo),e(z,CTo),e(z,O_),e(O_,Ele),e(Ele,wTo),e(O_,ATo),e(O_,mN),e(mN,yTo),e(O_,LTo),e(z,xTo),e(z,V_),e(V_,Cle),e(Cle,$To),e(V_,kTo),e(V_,gN),e(gN,STo),e(V_,RTo),e(z,BTo),e(z,X_),e(X_,wle),e(wle,PTo),e(X_,ITo),e(X_,hN),e(hN,qTo),e(X_,NTo),e(z,jTo),e(z,z_),e(z_,Ale),e(Ale,DTo),e(z_,GTo),e(z_,pN),e(pN,OTo),e(z_,VTo),e(Je,XTo),e(Je,Q_),e(Q_,zTo),e(Q_,yle),e(yle,QTo),e(Q_,WTo),e(Q_,Lle),e(Lle,HTo),e(Je,UTo),M(W_,Je,null),b(f,CBe,_),b(f,Ci,_),e(Ci,H_),e(H_,xle),M(i6,xle,null),e(Ci,JTo),e(Ci,$le),e($le,YTo),b(f,wBe,_),b(f,ko,_),M(d6,ko,null),e(ko,KTo),e(ko,wi),e(wi,ZTo),e(wi,uN),e(uN,eMo),e(wi,oMo),e(wi,_N),e(_N,rMo),e(wi,tMo),e(ko,aMo),e(ko,c6),e(c6,nMo),e(c6,kle),e(kle,sMo),e(c6,lMo),e(ko,iMo),e(ko,rt),M(f6,rt,null),e(rt,dMo),e(rt,Sle),e(Sle,cMo),e(rt,fMo),e(rt,Ai),e(Ai,mMo),e(Ai,Rle),e(Rle,gMo),e(Ai,hMo),e(Ai,bN),e(bN,pMo),e(Ai,uMo),e(rt,_Mo),M(U_,rt,null),e(ko,bMo),e(ko,Ye),M(m6,Ye,null),e(Ye,vMo),e(Ye,Ble),e(Ble,FMo),e(Ye,TMo),e(Ye,Aa),e(Aa,MMo),e(Aa,Ple),e(Ple,EMo),e(Aa,CMo),e(Aa,Ile),e(Ile,wMo),e(Aa,AMo),e(Aa,qle),e(qle,yMo),e(Aa,LMo),e(Ye,xMo),e(Ye,Q),e(Q,J_),e(J_,Nle),e(Nle,$Mo),e(J_,kMo),e(J_,vN),e(vN,SMo),e(J_,RMo),e(Q,BMo),e(Q,Y_),e(Y_,jle),e(jle,PMo),e(Y_,IMo),e(Y_,FN),e(FN,qMo),e(Y_,NMo),e(Q,jMo),e(Q,K_),e(K_,Dle),e(Dle,DMo),e(K_,GMo),e(K_,TN),e(TN,OMo),e(K_,VMo),e(Q,XMo),e(Q,Z_),e(Z_,Gle),e(Gle,zMo),e(Z_,QMo),e(Z_,MN),e(MN,WMo),e(Z_,HMo),e(Q,UMo),e(Q,e1),e(e1,Ole),e(Ole,JMo),e(e1,YMo),e(e1,EN),e(EN,KMo),e(e1,ZMo),e(Q,e4o),e(Q,o1),e(o1,Vle),e(Vle,o4o),e(o1,r4o),e(o1,CN),e(CN,t4o),e(o1,a4o),e(Q,n4o),e(Q,r1),e(r1,Xle),e(Xle,s4o),e(r1,l4o),e(r1,wN),e(wN,i4o),e(r1,d4o),e(Q,c4o),e(Q,t1),e(t1,zle),e(zle,f4o),e(t1,m4o),e(t1,AN),e(AN,g4o),e(t1,h4o),e(Q,p4o),e(Q,a1),e(a1,Qle),e(Qle,u4o),e(a1,_4o),e(a1,yN),e(yN,b4o),e(a1,v4o),e(Q,F4o),e(Q,n1),e(n1,Wle),e(Wle,T4o),e(n1,M4o),e(n1,LN),e(LN,E4o),e(n1,C4o),e(Q,w4o),e(Q,s1),e(s1,Hle),e(Hle,A4o),e(s1,y4o),e(s1,xN),e(xN,L4o),e(s1,x4o),e(Q,$4o),e(Q,l1),e(l1,Ule),e(Ule,k4o),e(l1,S4o),e(l1,$N),e($N,R4o),e(l1,B4o),e(Q,P4o),e(Q,i1),e(i1,Jle),e(Jle,I4o),e(i1,q4o),e(i1,kN),e(kN,N4o),e(i1,j4o),e(Q,D4o),e(Q,d1),e(d1,Yle),e(Yle,G4o),e(d1,O4o),e(d1,SN),e(SN,V4o),e(d1,X4o),e(Q,z4o),e(Q,c1),e(c1,Kle),e(Kle,Q4o),e(c1,W4o),e(c1,RN),e(RN,H4o),e(c1,U4o),e(Q,J4o),e(Q,f1),e(f1,Zle),e(Zle,Y4o),e(f1,K4o),e(f1,BN),e(BN,Z4o),e(f1,eEo),e(Q,oEo),e(Q,m1),e(m1,eie),e(eie,rEo),e(m1,tEo),e(m1,PN),e(PN,aEo),e(m1,nEo),e(Q,sEo),e(Q,g1),e(g1,oie),e(oie,lEo),e(g1,iEo),e(g1,IN),e(IN,dEo),e(g1,cEo),e(Q,fEo),e(Q,h1),e(h1,rie),e(rie,mEo),e(h1,gEo),e(h1,qN),e(qN,hEo),e(h1,pEo),e(Q,uEo),e(Q,p1),e(p1,tie),e(tie,_Eo),e(p1,bEo),e(p1,NN),e(NN,vEo),e(p1,FEo),e(Q,TEo),e(Q,u1),e(u1,aie),e(aie,MEo),e(u1,EEo),e(u1,jN),e(jN,CEo),e(u1,wEo),e(Q,AEo),e(Q,_1),e(_1,nie),e(nie,yEo),e(_1,LEo),e(_1,DN),e(DN,xEo),e(_1,$Eo),e(Q,kEo),e(Q,b1),e(b1,sie),e(sie,SEo),e(b1,REo),e(b1,GN),e(GN,BEo),e(b1,PEo),e(Q,IEo),e(Q,v1),e(v1,lie),e(lie,qEo),e(v1,NEo),e(v1,ON),e(ON,jEo),e(v1,DEo),e(Q,GEo),e(Q,F1),e(F1,iie),e(iie,OEo),e(F1,VEo),e(F1,VN),e(VN,XEo),e(F1,zEo),e(Q,QEo),e(Q,T1),e(T1,die),e(die,WEo),e(T1,HEo),e(T1,XN),e(XN,UEo),e(T1,JEo),e(Q,YEo),e(Q,M1),e(M1,cie),e(cie,KEo),e(M1,ZEo),e(M1,zN),e(zN,e5o),e(M1,o5o),e(Q,r5o),e(Q,E1),e(E1,fie),e(fie,t5o),e(E1,a5o),e(E1,QN),e(QN,n5o),e(E1,s5o),e(Q,l5o),e(Q,C1),e(C1,mie),e(mie,i5o),e(C1,d5o),e(C1,WN),e(WN,c5o),e(C1,f5o),e(Q,m5o),e(Q,w1),e(w1,gie),e(gie,g5o),e(w1,h5o),e(w1,HN),e(HN,p5o),e(w1,u5o),e(Q,_5o),e(Q,A1),e(A1,hie),e(hie,b5o),e(A1,v5o),e(A1,pie),e(pie,F5o),e(A1,T5o),e(Q,M5o),e(Q,y1),e(y1,uie),e(uie,E5o),e(y1,C5o),e(y1,UN),e(UN,w5o),e(y1,A5o),e(Q,y5o),e(Q,L1),e(L1,_ie),e(_ie,L5o),e(L1,x5o),e(L1,JN),e(JN,$5o),e(L1,k5o),e(Q,S5o),e(Q,x1),e(x1,bie),e(bie,R5o),e(x1,B5o),e(x1,YN),e(YN,P5o),e(x1,I5o),e(Q,q5o),e(Q,$1),e($1,vie),e(vie,N5o),e($1,j5o),e($1,KN),e(KN,D5o),e($1,G5o),e(Ye,O5o),e(Ye,k1),e(k1,V5o),e(k1,Fie),e(Fie,X5o),e(k1,z5o),e(k1,Tie),e(Tie,Q5o),e(Ye,W5o),M(S1,Ye,null),b(f,ABe,_),b(f,yi,_),e(yi,R1),e(R1,Mie),M(g6,Mie,null),e(yi,H5o),e(yi,Eie),e(Eie,U5o),b(f,yBe,_),b(f,So,_),M(h6,So,null),e(So,J5o),e(So,Li),e(Li,Y5o),e(Li,ZN),e(ZN,K5o),e(Li,Z5o),e(Li,ej),e(ej,eCo),e(Li,oCo),e(So,rCo),e(So,p6),e(p6,tCo),e(p6,Cie),e(Cie,aCo),e(p6,nCo),e(So,sCo),e(So,tt),M(u6,tt,null),e(tt,lCo),e(tt,wie),e(wie,iCo),e(tt,dCo),e(tt,xi),e(xi,cCo),e(xi,Aie),e(Aie,fCo),e(xi,mCo),e(xi,oj),e(oj,gCo),e(xi,hCo),e(tt,pCo),M(B1,tt,null),e(So,uCo),e(So,Ke),M(_6,Ke,null),e(Ke,_Co),e(Ke,yie),e(yie,bCo),e(Ke,vCo),e(Ke,ya),e(ya,FCo),e(ya,Lie),e(Lie,TCo),e(ya,MCo),e(ya,xie),e(xie,ECo),e(ya,CCo),e(ya,$ie),e($ie,wCo),e(ya,ACo),e(Ke,yCo),e(Ke,he),e(he,P1),e(P1,kie),e(kie,LCo),e(P1,xCo),e(P1,rj),e(rj,$Co),e(P1,kCo),e(he,SCo),e(he,I1),e(I1,Sie),e(Sie,RCo),e(I1,BCo),e(I1,tj),e(tj,PCo),e(I1,ICo),e(he,qCo),e(he,q1),e(q1,Rie),e(Rie,NCo),e(q1,jCo),e(q1,aj),e(aj,DCo),e(q1,GCo),e(he,OCo),e(he,N1),e(N1,Bie),e(Bie,VCo),e(N1,XCo),e(N1,nj),e(nj,zCo),e(N1,QCo),e(he,WCo),e(he,j1),e(j1,Pie),e(Pie,HCo),e(j1,UCo),e(j1,sj),e(sj,JCo),e(j1,YCo),e(he,KCo),e(he,D1),e(D1,Iie),e(Iie,ZCo),e(D1,ewo),e(D1,lj),e(lj,owo),e(D1,rwo),e(he,two),e(he,G1),e(G1,qie),e(qie,awo),e(G1,nwo),e(G1,ij),e(ij,swo),e(G1,lwo),e(he,iwo),e(he,O1),e(O1,Nie),e(Nie,dwo),e(O1,cwo),e(O1,dj),e(dj,fwo),e(O1,mwo),e(he,gwo),e(he,V1),e(V1,jie),e(jie,hwo),e(V1,pwo),e(V1,cj),e(cj,uwo),e(V1,_wo),e(he,bwo),e(he,X1),e(X1,Die),e(Die,vwo),e(X1,Fwo),e(X1,fj),e(fj,Two),e(X1,Mwo),e(he,Ewo),e(he,z1),e(z1,Gie),e(Gie,Cwo),e(z1,wwo),e(z1,mj),e(mj,Awo),e(z1,ywo),e(he,Lwo),e(he,Q1),e(Q1,Oie),e(Oie,xwo),e(Q1,$wo),e(Q1,gj),e(gj,kwo),e(Q1,Swo),e(he,Rwo),e(he,W1),e(W1,Vie),e(Vie,Bwo),e(W1,Pwo),e(W1,hj),e(hj,Iwo),e(W1,qwo),e(he,Nwo),e(he,H1),e(H1,Xie),e(Xie,jwo),e(H1,Dwo),e(H1,pj),e(pj,Gwo),e(H1,Owo),e(he,Vwo),e(he,U1),e(U1,zie),e(zie,Xwo),e(U1,zwo),e(U1,uj),e(uj,Qwo),e(U1,Wwo),e(he,Hwo),e(he,J1),e(J1,Qie),e(Qie,Uwo),e(J1,Jwo),e(J1,_j),e(_j,Ywo),e(J1,Kwo),e(he,Zwo),e(he,Y1),e(Y1,Wie),e(Wie,eAo),e(Y1,oAo),e(Y1,bj),e(bj,rAo),e(Y1,tAo),e(Ke,aAo),e(Ke,K1),e(K1,nAo),e(K1,Hie),e(Hie,sAo),e(K1,lAo),e(K1,Uie),e(Uie,iAo),e(Ke,dAo),M(Z1,Ke,null),b(f,LBe,_),b(f,$i,_),e($i,e7),e(e7,Jie),M(b6,Jie,null),e($i,cAo),e($i,Yie),e(Yie,fAo),b(f,xBe,_),b(f,Ro,_),M(v6,Ro,null),e(Ro,mAo),e(Ro,ki),e(ki,gAo),e(ki,vj),e(vj,hAo),e(ki,pAo),e(ki,Fj),e(Fj,uAo),e(ki,_Ao),e(Ro,bAo),e(Ro,F6),e(F6,vAo),e(F6,Kie),e(Kie,FAo),e(F6,TAo),e(Ro,MAo),e(Ro,at),M(T6,at,null),e(at,EAo),e(at,Zie),e(Zie,CAo),e(at,wAo),e(at,Si),e(Si,AAo),e(Si,ede),e(ede,yAo),e(Si,LAo),e(Si,Tj),e(Tj,xAo),e(Si,$Ao),e(at,kAo),M(o7,at,null),e(Ro,SAo),e(Ro,Ze),M(M6,Ze,null),e(Ze,RAo),e(Ze,ode),e(ode,BAo),e(Ze,PAo),e(Ze,La),e(La,IAo),e(La,rde),e(rde,qAo),e(La,NAo),e(La,tde),e(tde,jAo),e(La,DAo),e(La,ade),e(ade,GAo),e(La,OAo),e(Ze,VAo),e(Ze,q),e(q,r7),e(r7,nde),e(nde,XAo),e(r7,zAo),e(r7,Mj),e(Mj,QAo),e(r7,WAo),e(q,HAo),e(q,t7),e(t7,sde),e(sde,UAo),e(t7,JAo),e(t7,Ej),e(Ej,YAo),e(t7,KAo),e(q,ZAo),e(q,a7),e(a7,lde),e(lde,e6o),e(a7,o6o),e(a7,Cj),e(Cj,r6o),e(a7,t6o),e(q,a6o),e(q,n7),e(n7,ide),e(ide,n6o),e(n7,s6o),e(n7,wj),e(wj,l6o),e(n7,i6o),e(q,d6o),e(q,s7),e(s7,dde),e(dde,c6o),e(s7,f6o),e(s7,Aj),e(Aj,m6o),e(s7,g6o),e(q,h6o),e(q,l7),e(l7,cde),e(cde,p6o),e(l7,u6o),e(l7,yj),e(yj,_6o),e(l7,b6o),e(q,v6o),e(q,i7),e(i7,fde),e(fde,F6o),e(i7,T6o),e(i7,Lj),e(Lj,M6o),e(i7,E6o),e(q,C6o),e(q,d7),e(d7,mde),e(mde,w6o),e(d7,A6o),e(d7,xj),e(xj,y6o),e(d7,L6o),e(q,x6o),e(q,c7),e(c7,gde),e(gde,$6o),e(c7,k6o),e(c7,$j),e($j,S6o),e(c7,R6o),e(q,B6o),e(q,f7),e(f7,hde),e(hde,P6o),e(f7,I6o),e(f7,kj),e(kj,q6o),e(f7,N6o),e(q,j6o),e(q,m7),e(m7,pde),e(pde,D6o),e(m7,G6o),e(m7,Sj),e(Sj,O6o),e(m7,V6o),e(q,X6o),e(q,g7),e(g7,ude),e(ude,z6o),e(g7,Q6o),e(g7,Rj),e(Rj,W6o),e(g7,H6o),e(q,U6o),e(q,h7),e(h7,_de),e(_de,J6o),e(h7,Y6o),e(h7,Bj),e(Bj,K6o),e(h7,Z6o),e(q,eyo),e(q,p7),e(p7,bde),e(bde,oyo),e(p7,ryo),e(p7,Pj),e(Pj,tyo),e(p7,ayo),e(q,nyo),e(q,u7),e(u7,vde),e(vde,syo),e(u7,lyo),e(u7,Ij),e(Ij,iyo),e(u7,dyo),e(q,cyo),e(q,_7),e(_7,Fde),e(Fde,fyo),e(_7,myo),e(_7,qj),e(qj,gyo),e(_7,hyo),e(q,pyo),e(q,b7),e(b7,Tde),e(Tde,uyo),e(b7,_yo),e(b7,Nj),e(Nj,byo),e(b7,vyo),e(q,Fyo),e(q,v7),e(v7,Mde),e(Mde,Tyo),e(v7,Myo),e(v7,jj),e(jj,Eyo),e(v7,Cyo),e(q,wyo),e(q,F7),e(F7,Ede),e(Ede,Ayo),e(F7,yyo),e(F7,Dj),e(Dj,Lyo),e(F7,xyo),e(q,$yo),e(q,T7),e(T7,Cde),e(Cde,kyo),e(T7,Syo),e(T7,Gj),e(Gj,Ryo),e(T7,Byo),e(q,Pyo),e(q,M7),e(M7,wde),e(wde,Iyo),e(M7,qyo),e(M7,Oj),e(Oj,Nyo),e(M7,jyo),e(q,Dyo),e(q,E7),e(E7,Ade),e(Ade,Gyo),e(E7,Oyo),e(E7,Vj),e(Vj,Vyo),e(E7,Xyo),e(q,zyo),e(q,C7),e(C7,yde),e(yde,Qyo),e(C7,Wyo),e(C7,Xj),e(Xj,Hyo),e(C7,Uyo),e(q,Jyo),e(q,w7),e(w7,Lde),e(Lde,Yyo),e(w7,Kyo),e(w7,zj),e(zj,Zyo),e(w7,eLo),e(q,oLo),e(q,A7),e(A7,xde),e(xde,rLo),e(A7,tLo),e(A7,Qj),e(Qj,aLo),e(A7,nLo),e(q,sLo),e(q,y7),e(y7,$de),e($de,lLo),e(y7,iLo),e(y7,Wj),e(Wj,dLo),e(y7,cLo),e(q,fLo),e(q,L7),e(L7,kde),e(kde,mLo),e(L7,gLo),e(L7,Hj),e(Hj,hLo),e(L7,pLo),e(q,uLo),e(q,x7),e(x7,Sde),e(Sde,_Lo),e(x7,bLo),e(x7,Uj),e(Uj,vLo),e(x7,FLo),e(q,TLo),e(q,$7),e($7,Rde),e(Rde,MLo),e($7,ELo),e($7,Jj),e(Jj,CLo),e($7,wLo),e(q,ALo),e(q,k7),e(k7,Bde),e(Bde,yLo),e(k7,LLo),e(k7,Yj),e(Yj,xLo),e(k7,$Lo),e(q,kLo),e(q,S7),e(S7,Pde),e(Pde,SLo),e(S7,RLo),e(S7,Kj),e(Kj,BLo),e(S7,PLo),e(q,ILo),e(q,R7),e(R7,Ide),e(Ide,qLo),e(R7,NLo),e(R7,Zj),e(Zj,jLo),e(R7,DLo),e(q,GLo),e(q,B7),e(B7,qde),e(qde,OLo),e(B7,VLo),e(B7,eD),e(eD,XLo),e(B7,zLo),e(q,QLo),e(q,P7),e(P7,Nde),e(Nde,WLo),e(P7,HLo),e(P7,oD),e(oD,ULo),e(P7,JLo),e(q,YLo),e(q,I7),e(I7,jde),e(jde,KLo),e(I7,ZLo),e(I7,rD),e(rD,e8o),e(I7,o8o),e(q,r8o),e(q,q7),e(q7,Dde),e(Dde,t8o),e(q7,a8o),e(q7,tD),e(tD,n8o),e(q7,s8o),e(q,l8o),e(q,N7),e(N7,Gde),e(Gde,i8o),e(N7,d8o),e(N7,aD),e(aD,c8o),e(N7,f8o),e(q,m8o),e(q,j7),e(j7,Ode),e(Ode,g8o),e(j7,h8o),e(j7,nD),e(nD,p8o),e(j7,u8o),e(q,_8o),e(q,D7),e(D7,Vde),e(Vde,b8o),e(D7,v8o),e(D7,sD),e(sD,F8o),e(D7,T8o),e(q,M8o),e(q,G7),e(G7,Xde),e(Xde,E8o),e(G7,C8o),e(G7,lD),e(lD,w8o),e(G7,A8o),e(q,y8o),e(q,O7),e(O7,zde),e(zde,L8o),e(O7,x8o),e(O7,iD),e(iD,$8o),e(O7,k8o),e(q,S8o),e(q,V7),e(V7,Qde),e(Qde,R8o),e(V7,B8o),e(V7,dD),e(dD,P8o),e(V7,I8o),e(q,q8o),e(q,X7),e(X7,Wde),e(Wde,N8o),e(X7,j8o),e(X7,cD),e(cD,D8o),e(X7,G8o),e(q,O8o),e(q,z7),e(z7,Hde),e(Hde,V8o),e(z7,X8o),e(z7,fD),e(fD,z8o),e(z7,Q8o),e(q,W8o),e(q,Q7),e(Q7,Ude),e(Ude,H8o),e(Q7,U8o),e(Q7,mD),e(mD,J8o),e(Q7,Y8o),e(q,K8o),e(q,W7),e(W7,Jde),e(Jde,Z8o),e(W7,exo),e(W7,gD),e(gD,oxo),e(W7,rxo),e(q,txo),e(q,H7),e(H7,Yde),e(Yde,axo),e(H7,nxo),e(H7,hD),e(hD,sxo),e(H7,lxo),e(Ze,ixo),e(Ze,U7),e(U7,dxo),e(U7,Kde),e(Kde,cxo),e(U7,fxo),e(U7,Zde),e(Zde,mxo),e(Ze,gxo),M(J7,Ze,null),b(f,$Be,_),b(f,Ri,_),e(Ri,Y7),e(Y7,ece),M(E6,ece,null),e(Ri,hxo),e(Ri,oce),e(oce,pxo),b(f,kBe,_),b(f,Bo,_),M(C6,Bo,null),e(Bo,uxo),e(Bo,Bi),e(Bi,_xo),e(Bi,pD),e(pD,bxo),e(Bi,vxo),e(Bi,uD),e(uD,Fxo),e(Bi,Txo),e(Bo,Mxo),e(Bo,w6),e(w6,Exo),e(w6,rce),e(rce,Cxo),e(w6,wxo),e(Bo,Axo),e(Bo,nt),M(A6,nt,null),e(nt,yxo),e(nt,tce),e(tce,Lxo),e(nt,xxo),e(nt,Pi),e(Pi,$xo),e(Pi,ace),e(ace,kxo),e(Pi,Sxo),e(Pi,_D),e(_D,Rxo),e(Pi,Bxo),e(nt,Pxo),M(K7,nt,null),e(Bo,Ixo),e(Bo,eo),M(y6,eo,null),e(eo,qxo),e(eo,nce),e(nce,Nxo),e(eo,jxo),e(eo,xa),e(xa,Dxo),e(xa,sce),e(sce,Gxo),e(xa,Oxo),e(xa,lce),e(lce,Vxo),e(xa,Xxo),e(xa,ice),e(ice,zxo),e(xa,Qxo),e(eo,Wxo),e(eo,Y),e(Y,Z7),e(Z7,dce),e(dce,Hxo),e(Z7,Uxo),e(Z7,bD),e(bD,Jxo),e(Z7,Yxo),e(Y,Kxo),e(Y,eb),e(eb,cce),e(cce,Zxo),e(eb,e9o),e(eb,vD),e(vD,o9o),e(eb,r9o),e(Y,t9o),e(Y,ob),e(ob,fce),e(fce,a9o),e(ob,n9o),e(ob,FD),e(FD,s9o),e(ob,l9o),e(Y,i9o),e(Y,rb),e(rb,mce),e(mce,d9o),e(rb,c9o),e(rb,TD),e(TD,f9o),e(rb,m9o),e(Y,g9o),e(Y,tb),e(tb,gce),e(gce,h9o),e(tb,p9o),e(tb,MD),e(MD,u9o),e(tb,_9o),e(Y,b9o),e(Y,ab),e(ab,hce),e(hce,v9o),e(ab,F9o),e(ab,ED),e(ED,T9o),e(ab,M9o),e(Y,E9o),e(Y,nb),e(nb,pce),e(pce,C9o),e(nb,w9o),e(nb,CD),e(CD,A9o),e(nb,y9o),e(Y,L9o),e(Y,sb),e(sb,uce),e(uce,x9o),e(sb,$9o),e(sb,wD),e(wD,k9o),e(sb,S9o),e(Y,R9o),e(Y,lb),e(lb,_ce),e(_ce,B9o),e(lb,P9o),e(lb,AD),e(AD,I9o),e(lb,q9o),e(Y,N9o),e(Y,ib),e(ib,bce),e(bce,j9o),e(ib,D9o),e(ib,yD),e(yD,G9o),e(ib,O9o),e(Y,V9o),e(Y,db),e(db,vce),e(vce,X9o),e(db,z9o),e(db,LD),e(LD,Q9o),e(db,W9o),e(Y,H9o),e(Y,cb),e(cb,Fce),e(Fce,U9o),e(cb,J9o),e(cb,xD),e(xD,Y9o),e(cb,K9o),e(Y,Z9o),e(Y,fb),e(fb,Tce),e(Tce,e$o),e(fb,o$o),e(fb,$D),e($D,r$o),e(fb,t$o),e(Y,a$o),e(Y,mb),e(mb,Mce),e(Mce,n$o),e(mb,s$o),e(mb,kD),e(kD,l$o),e(mb,i$o),e(Y,d$o),e(Y,gb),e(gb,Ece),e(Ece,c$o),e(gb,f$o),e(gb,SD),e(SD,m$o),e(gb,g$o),e(Y,h$o),e(Y,hb),e(hb,Cce),e(Cce,p$o),e(hb,u$o),e(hb,RD),e(RD,_$o),e(hb,b$o),e(Y,v$o),e(Y,pb),e(pb,wce),e(wce,F$o),e(pb,T$o),e(pb,BD),e(BD,M$o),e(pb,E$o),e(Y,C$o),e(Y,ub),e(ub,Ace),e(Ace,w$o),e(ub,A$o),e(ub,PD),e(PD,y$o),e(ub,L$o),e(Y,x$o),e(Y,_b),e(_b,yce),e(yce,$$o),e(_b,k$o),e(_b,ID),e(ID,S$o),e(_b,R$o),e(Y,B$o),e(Y,bb),e(bb,Lce),e(Lce,P$o),e(bb,I$o),e(bb,qD),e(qD,q$o),e(bb,N$o),e(Y,j$o),e(Y,vb),e(vb,xce),e(xce,D$o),e(vb,G$o),e(vb,ND),e(ND,O$o),e(vb,V$o),e(Y,X$o),e(Y,Fb),e(Fb,$ce),e($ce,z$o),e(Fb,Q$o),e(Fb,jD),e(jD,W$o),e(Fb,H$o),e(Y,U$o),e(Y,Tb),e(Tb,kce),e(kce,J$o),e(Tb,Y$o),e(Tb,DD),e(DD,K$o),e(Tb,Z$o),e(Y,eko),e(Y,Mb),e(Mb,Sce),e(Sce,oko),e(Mb,rko),e(Mb,GD),e(GD,tko),e(Mb,ako),e(Y,nko),e(Y,Eb),e(Eb,Rce),e(Rce,sko),e(Eb,lko),e(Eb,OD),e(OD,iko),e(Eb,dko),e(Y,cko),e(Y,Cb),e(Cb,Bce),e(Bce,fko),e(Cb,mko),e(Cb,VD),e(VD,gko),e(Cb,hko),e(Y,pko),e(Y,wb),e(wb,Pce),e(Pce,uko),e(wb,_ko),e(wb,XD),e(XD,bko),e(wb,vko),e(Y,Fko),e(Y,Ab),e(Ab,Ice),e(Ice,Tko),e(Ab,Mko),e(Ab,zD),e(zD,Eko),e(Ab,Cko),e(eo,wko),e(eo,yb),e(yb,Ako),e(yb,qce),e(qce,yko),e(yb,Lko),e(yb,Nce),e(Nce,xko),e(eo,$ko),M(Lb,eo,null),b(f,SBe,_),b(f,Ii,_),e(Ii,xb),e(xb,jce),M(L6,jce,null),e(Ii,kko),e(Ii,Dce),e(Dce,Sko),b(f,RBe,_),b(f,Po,_),M(x6,Po,null),e(Po,Rko),e(Po,qi),e(qi,Bko),e(qi,QD),e(QD,Pko),e(qi,Iko),e(qi,WD),e(WD,qko),e(qi,Nko),e(Po,jko),e(Po,$6),e($6,Dko),e($6,Gce),e(Gce,Gko),e($6,Oko),e(Po,Vko),e(Po,st),M(k6,st,null),e(st,Xko),e(st,Oce),e(Oce,zko),e(st,Qko),e(st,Ni),e(Ni,Wko),e(Ni,Vce),e(Vce,Hko),e(Ni,Uko),e(Ni,HD),e(HD,Jko),e(Ni,Yko),e(st,Kko),M($b,st,null),e(Po,Zko),e(Po,oo),M(S6,oo,null),e(oo,eSo),e(oo,Xce),e(Xce,oSo),e(oo,rSo),e(oo,$a),e($a,tSo),e($a,zce),e(zce,aSo),e($a,nSo),e($a,Qce),e(Qce,sSo),e($a,lSo),e($a,Wce),e(Wce,iSo),e($a,dSo),e(oo,cSo),e(oo,Ur),e(Ur,kb),e(kb,Hce),e(Hce,fSo),e(kb,mSo),e(kb,UD),e(UD,gSo),e(kb,hSo),e(Ur,pSo),e(Ur,Sb),e(Sb,Uce),e(Uce,uSo),e(Sb,_So),e(Sb,JD),e(JD,bSo),e(Sb,vSo),e(Ur,FSo),e(Ur,Rb),e(Rb,Jce),e(Jce,TSo),e(Rb,MSo),e(Rb,YD),e(YD,ESo),e(Rb,CSo),e(Ur,wSo),e(Ur,Bb),e(Bb,Yce),e(Yce,ASo),e(Bb,ySo),e(Bb,KD),e(KD,LSo),e(Bb,xSo),e(Ur,$So),e(Ur,Pb),e(Pb,Kce),e(Kce,kSo),e(Pb,SSo),e(Pb,ZD),e(ZD,RSo),e(Pb,BSo),e(oo,PSo),e(oo,Ib),e(Ib,ISo),e(Ib,Zce),e(Zce,qSo),e(Ib,NSo),e(Ib,efe),e(efe,jSo),e(oo,DSo),M(qb,oo,null),b(f,BBe,_),b(f,ji,_),e(ji,Nb),e(Nb,ofe),M(R6,ofe,null),e(ji,GSo),e(ji,rfe),e(rfe,OSo),b(f,PBe,_),b(f,Io,_),M(B6,Io,null),e(Io,VSo),e(Io,Di),e(Di,XSo),e(Di,eG),e(eG,zSo),e(Di,QSo),e(Di,oG),e(oG,WSo),e(Di,HSo),e(Io,USo),e(Io,P6),e(P6,JSo),e(P6,tfe),e(tfe,YSo),e(P6,KSo),e(Io,ZSo),e(Io,lt),M(I6,lt,null),e(lt,eRo),e(lt,afe),e(afe,oRo),e(lt,rRo),e(lt,Gi),e(Gi,tRo),e(Gi,nfe),e(nfe,aRo),e(Gi,nRo),e(Gi,rG),e(rG,sRo),e(Gi,lRo),e(lt,iRo),M(jb,lt,null),e(Io,dRo),e(Io,ro),M(q6,ro,null),e(ro,cRo),e(ro,sfe),e(sfe,fRo),e(ro,mRo),e(ro,ka),e(ka,gRo),e(ka,lfe),e(lfe,hRo),e(ka,pRo),e(ka,ife),e(ife,uRo),e(ka,_Ro),e(ka,dfe),e(dfe,bRo),e(ka,vRo),e(ro,FRo),e(ro,U),e(U,Db),e(Db,cfe),e(cfe,TRo),e(Db,MRo),e(Db,tG),e(tG,ERo),e(Db,CRo),e(U,wRo),e(U,Gb),e(Gb,ffe),e(ffe,ARo),e(Gb,yRo),e(Gb,aG),e(aG,LRo),e(Gb,xRo),e(U,$Ro),e(U,Ob),e(Ob,mfe),e(mfe,kRo),e(Ob,SRo),e(Ob,nG),e(nG,RRo),e(Ob,BRo),e(U,PRo),e(U,Vb),e(Vb,gfe),e(gfe,IRo),e(Vb,qRo),e(Vb,sG),e(sG,NRo),e(Vb,jRo),e(U,DRo),e(U,Xb),e(Xb,hfe),e(hfe,GRo),e(Xb,ORo),e(Xb,lG),e(lG,VRo),e(Xb,XRo),e(U,zRo),e(U,zb),e(zb,pfe),e(pfe,QRo),e(zb,WRo),e(zb,iG),e(iG,HRo),e(zb,URo),e(U,JRo),e(U,Qb),e(Qb,ufe),e(ufe,YRo),e(Qb,KRo),e(Qb,dG),e(dG,ZRo),e(Qb,eBo),e(U,oBo),e(U,Wb),e(Wb,_fe),e(_fe,rBo),e(Wb,tBo),e(Wb,cG),e(cG,aBo),e(Wb,nBo),e(U,sBo),e(U,Hb),e(Hb,bfe),e(bfe,lBo),e(Hb,iBo),e(Hb,fG),e(fG,dBo),e(Hb,cBo),e(U,fBo),e(U,Ub),e(Ub,vfe),e(vfe,mBo),e(Ub,gBo),e(Ub,mG),e(mG,hBo),e(Ub,pBo),e(U,uBo),e(U,Jb),e(Jb,Ffe),e(Ffe,_Bo),e(Jb,bBo),e(Jb,gG),e(gG,vBo),e(Jb,FBo),e(U,TBo),e(U,Yb),e(Yb,Tfe),e(Tfe,MBo),e(Yb,EBo),e(Yb,hG),e(hG,CBo),e(Yb,wBo),e(U,ABo),e(U,Kb),e(Kb,Mfe),e(Mfe,yBo),e(Kb,LBo),e(Kb,pG),e(pG,xBo),e(Kb,$Bo),e(U,kBo),e(U,Zb),e(Zb,Efe),e(Efe,SBo),e(Zb,RBo),e(Zb,uG),e(uG,BBo),e(Zb,PBo),e(U,IBo),e(U,e2),e(e2,Cfe),e(Cfe,qBo),e(e2,NBo),e(e2,_G),e(_G,jBo),e(e2,DBo),e(U,GBo),e(U,o2),e(o2,wfe),e(wfe,OBo),e(o2,VBo),e(o2,bG),e(bG,XBo),e(o2,zBo),e(U,QBo),e(U,r2),e(r2,Afe),e(Afe,WBo),e(r2,HBo),e(r2,vG),e(vG,UBo),e(r2,JBo),e(U,YBo),e(U,t2),e(t2,yfe),e(yfe,KBo),e(t2,ZBo),e(t2,FG),e(FG,ePo),e(t2,oPo),e(U,rPo),e(U,a2),e(a2,Lfe),e(Lfe,tPo),e(a2,aPo),e(a2,TG),e(TG,nPo),e(a2,sPo),e(U,lPo),e(U,n2),e(n2,xfe),e(xfe,iPo),e(n2,dPo),e(n2,MG),e(MG,cPo),e(n2,fPo),e(U,mPo),e(U,s2),e(s2,$fe),e($fe,gPo),e(s2,hPo),e(s2,EG),e(EG,pPo),e(s2,uPo),e(U,_Po),e(U,l2),e(l2,kfe),e(kfe,bPo),e(l2,vPo),e(l2,CG),e(CG,FPo),e(l2,TPo),e(U,MPo),e(U,i2),e(i2,Sfe),e(Sfe,EPo),e(i2,CPo),e(i2,wG),e(wG,wPo),e(i2,APo),e(U,yPo),e(U,d2),e(d2,Rfe),e(Rfe,LPo),e(d2,xPo),e(d2,AG),e(AG,$Po),e(d2,kPo),e(U,SPo),e(U,c2),e(c2,Bfe),e(Bfe,RPo),e(c2,BPo),e(c2,yG),e(yG,PPo),e(c2,IPo),e(U,qPo),e(U,f2),e(f2,Pfe),e(Pfe,NPo),e(f2,jPo),e(f2,LG),e(LG,DPo),e(f2,GPo),e(U,OPo),e(U,m2),e(m2,Ife),e(Ife,VPo),e(m2,XPo),e(m2,xG),e(xG,zPo),e(m2,QPo),e(U,WPo),e(U,g2),e(g2,qfe),e(qfe,HPo),e(g2,UPo),e(g2,$G),e($G,JPo),e(g2,YPo),e(U,KPo),e(U,h2),e(h2,Nfe),e(Nfe,ZPo),e(h2,eIo),e(h2,kG),e(kG,oIo),e(h2,rIo),e(U,tIo),e(U,p2),e(p2,jfe),e(jfe,aIo),e(p2,nIo),e(p2,SG),e(SG,sIo),e(p2,lIo),e(U,iIo),e(U,u2),e(u2,Dfe),e(Dfe,dIo),e(u2,cIo),e(u2,RG),e(RG,fIo),e(u2,mIo),e(U,gIo),e(U,_2),e(_2,Gfe),e(Gfe,hIo),e(_2,pIo),e(_2,BG),e(BG,uIo),e(_2,_Io),e(U,bIo),e(U,b2),e(b2,Ofe),e(Ofe,vIo),e(b2,FIo),e(b2,PG),e(PG,TIo),e(b2,MIo),e(ro,EIo),e(ro,v2),e(v2,CIo),e(v2,Vfe),e(Vfe,wIo),e(v2,AIo),e(v2,Xfe),e(Xfe,yIo),e(ro,LIo),M(F2,ro,null),b(f,IBe,_),b(f,Oi,_),e(Oi,T2),e(T2,zfe),M(N6,zfe,null),e(Oi,xIo),e(Oi,Qfe),e(Qfe,$Io),b(f,qBe,_),b(f,qo,_),M(j6,qo,null),e(qo,kIo),e(qo,Vi),e(Vi,SIo),e(Vi,IG),e(IG,RIo),e(Vi,BIo),e(Vi,qG),e(qG,PIo),e(Vi,IIo),e(qo,qIo),e(qo,D6),e(D6,NIo),e(D6,Wfe),e(Wfe,jIo),e(D6,DIo),e(qo,GIo),e(qo,it),M(G6,it,null),e(it,OIo),e(it,Hfe),e(Hfe,VIo),e(it,XIo),e(it,Xi),e(Xi,zIo),e(Xi,Ufe),e(Ufe,QIo),e(Xi,WIo),e(Xi,NG),e(NG,HIo),e(Xi,UIo),e(it,JIo),M(M2,it,null),e(qo,YIo),e(qo,to),M(O6,to,null),e(to,KIo),e(to,Jfe),e(Jfe,ZIo),e(to,eqo),e(to,Sa),e(Sa,oqo),e(Sa,Yfe),e(Yfe,rqo),e(Sa,tqo),e(Sa,Kfe),e(Kfe,aqo),e(Sa,nqo),e(Sa,Zfe),e(Zfe,sqo),e(Sa,lqo),e(to,iqo),e(to,O),e(O,E2),e(E2,eme),e(eme,dqo),e(E2,cqo),e(E2,jG),e(jG,fqo),e(E2,mqo),e(O,gqo),e(O,C2),e(C2,ome),e(ome,hqo),e(C2,pqo),e(C2,DG),e(DG,uqo),e(C2,_qo),e(O,bqo),e(O,w2),e(w2,rme),e(rme,vqo),e(w2,Fqo),e(w2,GG),e(GG,Tqo),e(w2,Mqo),e(O,Eqo),e(O,A2),e(A2,tme),e(tme,Cqo),e(A2,wqo),e(A2,OG),e(OG,Aqo),e(A2,yqo),e(O,Lqo),e(O,y2),e(y2,ame),e(ame,xqo),e(y2,$qo),e(y2,VG),e(VG,kqo),e(y2,Sqo),e(O,Rqo),e(O,L2),e(L2,nme),e(nme,Bqo),e(L2,Pqo),e(L2,XG),e(XG,Iqo),e(L2,qqo),e(O,Nqo),e(O,x2),e(x2,sme),e(sme,jqo),e(x2,Dqo),e(x2,zG),e(zG,Gqo),e(x2,Oqo),e(O,Vqo),e(O,$2),e($2,lme),e(lme,Xqo),e($2,zqo),e($2,QG),e(QG,Qqo),e($2,Wqo),e(O,Hqo),e(O,k2),e(k2,ime),e(ime,Uqo),e(k2,Jqo),e(k2,WG),e(WG,Yqo),e(k2,Kqo),e(O,Zqo),e(O,S2),e(S2,dme),e(dme,eNo),e(S2,oNo),e(S2,HG),e(HG,rNo),e(S2,tNo),e(O,aNo),e(O,R2),e(R2,cme),e(cme,nNo),e(R2,sNo),e(R2,UG),e(UG,lNo),e(R2,iNo),e(O,dNo),e(O,B2),e(B2,fme),e(fme,cNo),e(B2,fNo),e(B2,JG),e(JG,mNo),e(B2,gNo),e(O,hNo),e(O,P2),e(P2,mme),e(mme,pNo),e(P2,uNo),e(P2,YG),e(YG,_No),e(P2,bNo),e(O,vNo),e(O,I2),e(I2,gme),e(gme,FNo),e(I2,TNo),e(I2,KG),e(KG,MNo),e(I2,ENo),e(O,CNo),e(O,q2),e(q2,hme),e(hme,wNo),e(q2,ANo),e(q2,ZG),e(ZG,yNo),e(q2,LNo),e(O,xNo),e(O,N2),e(N2,pme),e(pme,$No),e(N2,kNo),e(N2,eO),e(eO,SNo),e(N2,RNo),e(O,BNo),e(O,j2),e(j2,ume),e(ume,PNo),e(j2,INo),e(j2,oO),e(oO,qNo),e(j2,NNo),e(O,jNo),e(O,D2),e(D2,_me),e(_me,DNo),e(D2,GNo),e(D2,rO),e(rO,ONo),e(D2,VNo),e(O,XNo),e(O,G2),e(G2,bme),e(bme,zNo),e(G2,QNo),e(G2,tO),e(tO,WNo),e(G2,HNo),e(O,UNo),e(O,O2),e(O2,vme),e(vme,JNo),e(O2,YNo),e(O2,aO),e(aO,KNo),e(O2,ZNo),e(O,ejo),e(O,V2),e(V2,Fme),e(Fme,ojo),e(V2,rjo),e(V2,nO),e(nO,tjo),e(V2,ajo),e(O,njo),e(O,X2),e(X2,Tme),e(Tme,sjo),e(X2,ljo),e(X2,sO),e(sO,ijo),e(X2,djo),e(O,cjo),e(O,z2),e(z2,Mme),e(Mme,fjo),e(z2,mjo),e(z2,lO),e(lO,gjo),e(z2,hjo),e(O,pjo),e(O,Q2),e(Q2,Eme),e(Eme,ujo),e(Q2,_jo),e(Q2,iO),e(iO,bjo),e(Q2,vjo),e(O,Fjo),e(O,W2),e(W2,Cme),e(Cme,Tjo),e(W2,Mjo),e(W2,dO),e(dO,Ejo),e(W2,Cjo),e(O,wjo),e(O,H2),e(H2,wme),e(wme,Ajo),e(H2,yjo),e(H2,cO),e(cO,Ljo),e(H2,xjo),e(O,$jo),e(O,U2),e(U2,Ame),e(Ame,kjo),e(U2,Sjo),e(U2,fO),e(fO,Rjo),e(U2,Bjo),e(O,Pjo),e(O,J2),e(J2,yme),e(yme,Ijo),e(J2,qjo),e(J2,mO),e(mO,Njo),e(J2,jjo),e(O,Djo),e(O,Y2),e(Y2,Lme),e(Lme,Gjo),e(Y2,Ojo),e(Y2,gO),e(gO,Vjo),e(Y2,Xjo),e(O,zjo),e(O,K2),e(K2,xme),e(xme,Qjo),e(K2,Wjo),e(K2,hO),e(hO,Hjo),e(K2,Ujo),e(O,Jjo),e(O,Z2),e(Z2,$me),e($me,Yjo),e(Z2,Kjo),e(Z2,pO),e(pO,Zjo),e(Z2,eDo),e(O,oDo),e(O,e3),e(e3,kme),e(kme,rDo),e(e3,tDo),e(e3,uO),e(uO,aDo),e(e3,nDo),e(O,sDo),e(O,o3),e(o3,Sme),e(Sme,lDo),e(o3,iDo),e(o3,_O),e(_O,dDo),e(o3,cDo),e(O,fDo),e(O,r3),e(r3,Rme),e(Rme,mDo),e(r3,gDo),e(r3,bO),e(bO,hDo),e(r3,pDo),e(O,uDo),e(O,t3),e(t3,Bme),e(Bme,_Do),e(t3,bDo),e(t3,vO),e(vO,vDo),e(t3,FDo),e(O,TDo),e(O,a3),e(a3,Pme),e(Pme,MDo),e(a3,EDo),e(a3,FO),e(FO,CDo),e(a3,wDo),e(O,ADo),e(O,n3),e(n3,Ime),e(Ime,yDo),e(n3,LDo),e(n3,TO),e(TO,xDo),e(n3,$Do),e(O,kDo),e(O,s3),e(s3,qme),e(qme,SDo),e(s3,RDo),e(s3,MO),e(MO,BDo),e(s3,PDo),e(O,IDo),e(O,l3),e(l3,Nme),e(Nme,qDo),e(l3,NDo),e(l3,EO),e(EO,jDo),e(l3,DDo),e(to,GDo),e(to,i3),e(i3,ODo),e(i3,jme),e(jme,VDo),e(i3,XDo),e(i3,Dme),e(Dme,zDo),e(to,QDo),M(d3,to,null),b(f,NBe,_),b(f,zi,_),e(zi,c3),e(c3,Gme),M(V6,Gme,null),e(zi,WDo),e(zi,Ome),e(Ome,HDo),b(f,jBe,_),b(f,No,_),M(X6,No,null),e(No,UDo),e(No,Qi),e(Qi,JDo),e(Qi,CO),e(CO,YDo),e(Qi,KDo),e(Qi,wO),e(wO,ZDo),e(Qi,eGo),e(No,oGo),e(No,z6),e(z6,rGo),e(z6,Vme),e(Vme,tGo),e(z6,aGo),e(No,nGo),e(No,dt),M(Q6,dt,null),e(dt,sGo),e(dt,Xme),e(Xme,lGo),e(dt,iGo),e(dt,Wi),e(Wi,dGo),e(Wi,zme),e(zme,cGo),e(Wi,fGo),e(Wi,AO),e(AO,mGo),e(Wi,gGo),e(dt,hGo),M(f3,dt,null),e(No,pGo),e(No,ao),M(W6,ao,null),e(ao,uGo),e(ao,Qme),e(Qme,_Go),e(ao,bGo),e(ao,Ra),e(Ra,vGo),e(Ra,Wme),e(Wme,FGo),e(Ra,TGo),e(Ra,Hme),e(Hme,MGo),e(Ra,EGo),e(Ra,Ume),e(Ume,CGo),e(Ra,wGo),e(ao,AGo),e(ao,Jme),e(Jme,m3),e(m3,Yme),e(Yme,yGo),e(m3,LGo),e(m3,yO),e(yO,xGo),e(m3,$Go),e(ao,kGo),e(ao,g3),e(g3,SGo),e(g3,Kme),e(Kme,RGo),e(g3,BGo),e(g3,Zme),e(Zme,PGo),e(ao,IGo),M(h3,ao,null),b(f,DBe,_),b(f,Hi,_),e(Hi,p3),e(p3,ege),M(H6,ege,null),e(Hi,qGo),e(Hi,oge),e(oge,NGo),b(f,GBe,_),b(f,jo,_),M(U6,jo,null),e(jo,jGo),e(jo,Ui),e(Ui,DGo),e(Ui,LO),e(LO,GGo),e(Ui,OGo),e(Ui,xO),e(xO,VGo),e(Ui,XGo),e(jo,zGo),e(jo,J6),e(J6,QGo),e(J6,rge),e(rge,WGo),e(J6,HGo),e(jo,UGo),e(jo,ct),M(Y6,ct,null),e(ct,JGo),e(ct,tge),e(tge,YGo),e(ct,KGo),e(ct,Ji),e(Ji,ZGo),e(Ji,age),e(age,eOo),e(Ji,oOo),e(Ji,$O),e($O,rOo),e(Ji,tOo),e(ct,aOo),M(u3,ct,null),e(jo,nOo),e(jo,no),M(K6,no,null),e(no,sOo),e(no,nge),e(nge,lOo),e(no,iOo),e(no,Ba),e(Ba,dOo),e(Ba,sge),e(sge,cOo),e(Ba,fOo),e(Ba,lge),e(lge,mOo),e(Ba,gOo),e(Ba,ige),e(ige,hOo),e(Ba,pOo),e(no,uOo),e(no,ve),e(ve,_3),e(_3,dge),e(dge,_Oo),e(_3,bOo),e(_3,kO),e(kO,vOo),e(_3,FOo),e(ve,TOo),e(ve,b3),e(b3,cge),e(cge,MOo),e(b3,EOo),e(b3,SO),e(SO,COo),e(b3,wOo),e(ve,AOo),e(ve,v3),e(v3,fge),e(fge,yOo),e(v3,LOo),e(v3,RO),e(RO,xOo),e(v3,$Oo),e(ve,kOo),e(ve,xs),e(xs,mge),e(mge,SOo),e(xs,ROo),e(xs,BO),e(BO,BOo),e(xs,POo),e(xs,PO),e(PO,IOo),e(xs,qOo),e(ve,NOo),e(ve,F3),e(F3,gge),e(gge,jOo),e(F3,DOo),e(F3,IO),e(IO,GOo),e(F3,OOo),e(ve,VOo),e(ve,ft),e(ft,hge),e(hge,XOo),e(ft,zOo),e(ft,qO),e(qO,QOo),e(ft,WOo),e(ft,NO),e(NO,HOo),e(ft,UOo),e(ft,jO),e(jO,JOo),e(ft,YOo),e(ve,KOo),e(ve,T3),e(T3,pge),e(pge,ZOo),e(T3,eVo),e(T3,DO),e(DO,oVo),e(T3,rVo),e(ve,tVo),e(ve,M3),e(M3,uge),e(uge,aVo),e(M3,nVo),e(M3,GO),e(GO,sVo),e(M3,lVo),e(ve,iVo),e(ve,E3),e(E3,_ge),e(_ge,dVo),e(E3,cVo),e(E3,OO),e(OO,fVo),e(E3,mVo),e(ve,gVo),e(ve,C3),e(C3,bge),e(bge,hVo),e(C3,pVo),e(C3,VO),e(VO,uVo),e(C3,_Vo),e(ve,bVo),e(ve,w3),e(w3,vge),e(vge,vVo),e(w3,FVo),e(w3,XO),e(XO,TVo),e(w3,MVo),e(ve,EVo),e(ve,A3),e(A3,Fge),e(Fge,CVo),e(A3,wVo),e(A3,zO),e(zO,AVo),e(A3,yVo),e(ve,LVo),e(ve,y3),e(y3,Tge),e(Tge,xVo),e(y3,$Vo),e(y3,QO),e(QO,kVo),e(y3,SVo),e(no,RVo),e(no,L3),e(L3,BVo),e(L3,Mge),e(Mge,PVo),e(L3,IVo),e(L3,Ege),e(Ege,qVo),e(no,NVo),M(x3,no,null),b(f,OBe,_),b(f,Yi,_),e(Yi,$3),e($3,Cge),M(Z6,Cge,null),e(Yi,jVo),e(Yi,wge),e(wge,DVo),b(f,VBe,_),b(f,Do,_),M(ey,Do,null),e(Do,GVo),e(Do,Ki),e(Ki,OVo),e(Ki,WO),e(WO,VVo),e(Ki,XVo),e(Ki,HO),e(HO,zVo),e(Ki,QVo),e(Do,WVo),e(Do,oy),e(oy,HVo),e(oy,Age),e(Age,UVo),e(oy,JVo),e(Do,YVo),e(Do,mt),M(ry,mt,null),e(mt,KVo),e(mt,yge),e(yge,ZVo),e(mt,eXo),e(mt,Zi),e(Zi,oXo),e(Zi,Lge),e(Lge,rXo),e(Zi,tXo),e(Zi,UO),e(UO,aXo),e(Zi,nXo),e(mt,sXo),M(k3,mt,null),e(Do,lXo),e(Do,so),M(ty,so,null),e(so,iXo),e(so,xge),e(xge,dXo),e(so,cXo),e(so,Pa),e(Pa,fXo),e(Pa,$ge),e($ge,mXo),e(Pa,gXo),e(Pa,kge),e(kge,hXo),e(Pa,pXo),e(Pa,Sge),e(Sge,uXo),e(Pa,_Xo),e(so,bXo),e(so,Rge),e(Rge,S3),e(S3,Bge),e(Bge,vXo),e(S3,FXo),e(S3,JO),e(JO,TXo),e(S3,MXo),e(so,EXo),e(so,R3),e(R3,CXo),e(R3,Pge),e(Pge,wXo),e(R3,AXo),e(R3,Ige),e(Ige,yXo),e(so,LXo),M(B3,so,null),b(f,XBe,_),b(f,ed,_),e(ed,P3),e(P3,qge),M(ay,qge,null),e(ed,xXo),e(ed,Nge),e(Nge,$Xo),b(f,zBe,_),b(f,Go,_),M(ny,Go,null),e(Go,kXo),e(Go,od),e(od,SXo),e(od,YO),e(YO,RXo),e(od,BXo),e(od,KO),e(KO,PXo),e(od,IXo),e(Go,qXo),e(Go,sy),e(sy,NXo),e(sy,jge),e(jge,jXo),e(sy,DXo),e(Go,GXo),e(Go,gt),M(ly,gt,null),e(gt,OXo),e(gt,Dge),e(Dge,VXo),e(gt,XXo),e(gt,rd),e(rd,zXo),e(rd,Gge),e(Gge,QXo),e(rd,WXo),e(rd,ZO),e(ZO,HXo),e(rd,UXo),e(gt,JXo),M(I3,gt,null),e(Go,YXo),e(Go,lo),M(iy,lo,null),e(lo,KXo),e(lo,Oge),e(Oge,ZXo),e(lo,ezo),e(lo,Ia),e(Ia,ozo),e(Ia,Vge),e(Vge,rzo),e(Ia,tzo),e(Ia,Xge),e(Xge,azo),e(Ia,nzo),e(Ia,zge),e(zge,szo),e(Ia,lzo),e(lo,izo),e(lo,Ne),e(Ne,q3),e(q3,Qge),e(Qge,dzo),e(q3,czo),e(q3,eV),e(eV,fzo),e(q3,mzo),e(Ne,gzo),e(Ne,N3),e(N3,Wge),e(Wge,hzo),e(N3,pzo),e(N3,oV),e(oV,uzo),e(N3,_zo),e(Ne,bzo),e(Ne,j3),e(j3,Hge),e(Hge,vzo),e(j3,Fzo),e(j3,rV),e(rV,Tzo),e(j3,Mzo),e(Ne,Ezo),e(Ne,D3),e(D3,Uge),e(Uge,Czo),e(D3,wzo),e(D3,tV),e(tV,Azo),e(D3,yzo),e(Ne,Lzo),e(Ne,G3),e(G3,Jge),e(Jge,xzo),e(G3,$zo),e(G3,aV),e(aV,kzo),e(G3,Szo),e(Ne,Rzo),e(Ne,O3),e(O3,Yge),e(Yge,Bzo),e(O3,Pzo),e(O3,nV),e(nV,Izo),e(O3,qzo),e(Ne,Nzo),e(Ne,V3),e(V3,Kge),e(Kge,jzo),e(V3,Dzo),e(V3,sV),e(sV,Gzo),e(V3,Ozo),e(Ne,Vzo),e(Ne,X3),e(X3,Zge),e(Zge,Xzo),e(X3,zzo),e(X3,lV),e(lV,Qzo),e(X3,Wzo),e(lo,Hzo),e(lo,z3),e(z3,Uzo),e(z3,ehe),e(ehe,Jzo),e(z3,Yzo),e(z3,ohe),e(ohe,Kzo),e(lo,Zzo),M(Q3,lo,null),b(f,QBe,_),b(f,td,_),e(td,W3),e(W3,rhe),M(dy,rhe,null),e(td,eQo),e(td,the),e(the,oQo),b(f,WBe,_),b(f,Oo,_),M(cy,Oo,null),e(Oo,rQo),e(Oo,ad),e(ad,tQo),e(ad,iV),e(iV,aQo),e(ad,nQo),e(ad,dV),e(dV,sQo),e(ad,lQo),e(Oo,iQo),e(Oo,fy),e(fy,dQo),e(fy,ahe),e(ahe,cQo),e(fy,fQo),e(Oo,mQo),e(Oo,ht),M(my,ht,null),e(ht,gQo),e(ht,nhe),e(nhe,hQo),e(ht,pQo),e(ht,nd),e(nd,uQo),e(nd,she),e(she,_Qo),e(nd,bQo),e(nd,cV),e(cV,vQo),e(nd,FQo),e(ht,TQo),M(H3,ht,null),e(Oo,MQo),e(Oo,io),M(gy,io,null),e(io,EQo),e(io,lhe),e(lhe,CQo),e(io,wQo),e(io,qa),e(qa,AQo),e(qa,ihe),e(ihe,yQo),e(qa,LQo),e(qa,dhe),e(dhe,xQo),e(qa,$Qo),e(qa,che),e(che,kQo),e(qa,SQo),e(io,RQo),e(io,Na),e(Na,U3),e(U3,fhe),e(fhe,BQo),e(U3,PQo),e(U3,fV),e(fV,IQo),e(U3,qQo),e(Na,NQo),e(Na,J3),e(J3,mhe),e(mhe,jQo),e(J3,DQo),e(J3,mV),e(mV,GQo),e(J3,OQo),e(Na,VQo),e(Na,Y3),e(Y3,ghe),e(ghe,XQo),e(Y3,zQo),e(Y3,gV),e(gV,QQo),e(Y3,WQo),e(Na,HQo),e(Na,K3),e(K3,hhe),e(hhe,UQo),e(K3,JQo),e(K3,hV),e(hV,YQo),e(K3,KQo),e(io,ZQo),e(io,Z3),e(Z3,eWo),e(Z3,phe),e(phe,oWo),e(Z3,rWo),e(Z3,uhe),e(uhe,tWo),e(io,aWo),M(ev,io,null),b(f,HBe,_),b(f,sd,_),e(sd,ov),e(ov,_he),M(hy,_he,null),e(sd,nWo),e(sd,bhe),e(bhe,sWo),b(f,UBe,_),b(f,Vo,_),M(py,Vo,null),e(Vo,lWo),e(Vo,ld),e(ld,iWo),e(ld,pV),e(pV,dWo),e(ld,cWo),e(ld,uV),e(uV,fWo),e(ld,mWo),e(Vo,gWo),e(Vo,uy),e(uy,hWo),e(uy,vhe),e(vhe,pWo),e(uy,uWo),e(Vo,_Wo),e(Vo,pt),M(_y,pt,null),e(pt,bWo),e(pt,Fhe),e(Fhe,vWo),e(pt,FWo),e(pt,id),e(id,TWo),e(id,The),e(The,MWo),e(id,EWo),e(id,_V),e(_V,CWo),e(id,wWo),e(pt,AWo),M(rv,pt,null),e(Vo,yWo),e(Vo,co),M(by,co,null),e(co,LWo),e(co,Mhe),e(Mhe,xWo),e(co,$Wo),e(co,ja),e(ja,kWo),e(ja,Ehe),e(Ehe,SWo),e(ja,RWo),e(ja,Che),e(Che,BWo),e(ja,PWo),e(ja,whe),e(whe,IWo),e(ja,qWo),e(co,NWo),e(co,je),e(je,tv),e(tv,Ahe),e(Ahe,jWo),e(tv,DWo),e(tv,bV),e(bV,GWo),e(tv,OWo),e(je,VWo),e(je,av),e(av,yhe),e(yhe,XWo),e(av,zWo),e(av,vV),e(vV,QWo),e(av,WWo),e(je,HWo),e(je,nv),e(nv,Lhe),e(Lhe,UWo),e(nv,JWo),e(nv,FV),e(FV,YWo),e(nv,KWo),e(je,ZWo),e(je,sv),e(sv,xhe),e(xhe,eHo),e(sv,oHo),e(sv,TV),e(TV,rHo),e(sv,tHo),e(je,aHo),e(je,lv),e(lv,$he),e($he,nHo),e(lv,sHo),e(lv,MV),e(MV,lHo),e(lv,iHo),e(je,dHo),e(je,iv),e(iv,khe),e(khe,cHo),e(iv,fHo),e(iv,EV),e(EV,mHo),e(iv,gHo),e(je,hHo),e(je,dv),e(dv,She),e(She,pHo),e(dv,uHo),e(dv,CV),e(CV,_Ho),e(dv,bHo),e(je,vHo),e(je,cv),e(cv,Rhe),e(Rhe,FHo),e(cv,THo),e(cv,wV),e(wV,MHo),e(cv,EHo),e(co,CHo),e(co,fv),e(fv,wHo),e(fv,Bhe),e(Bhe,AHo),e(fv,yHo),e(fv,Phe),e(Phe,LHo),e(co,xHo),M(mv,co,null),b(f,JBe,_),b(f,dd,_),e(dd,gv),e(gv,Ihe),M(vy,Ihe,null),e(dd,$Ho),e(dd,qhe),e(qhe,kHo),b(f,YBe,_),b(f,Xo,_),M(Fy,Xo,null),e(Xo,SHo),e(Xo,cd),e(cd,RHo),e(cd,AV),e(AV,BHo),e(cd,PHo),e(cd,yV),e(yV,IHo),e(cd,qHo),e(Xo,NHo),e(Xo,Ty),e(Ty,jHo),e(Ty,Nhe),e(Nhe,DHo),e(Ty,GHo),e(Xo,OHo),e(Xo,ut),M(My,ut,null),e(ut,VHo),e(ut,jhe),e(jhe,XHo),e(ut,zHo),e(ut,fd),e(fd,QHo),e(fd,Dhe),e(Dhe,WHo),e(fd,HHo),e(fd,LV),e(LV,UHo),e(fd,JHo),e(ut,YHo),M(hv,ut,null),e(Xo,KHo),e(Xo,fo),M(Ey,fo,null),e(fo,ZHo),e(fo,Ghe),e(Ghe,eUo),e(fo,oUo),e(fo,Da),e(Da,rUo),e(Da,Ohe),e(Ohe,tUo),e(Da,aUo),e(Da,Vhe),e(Vhe,nUo),e(Da,sUo),e(Da,Xhe),e(Xhe,lUo),e(Da,iUo),e(fo,dUo),e(fo,Cy),e(Cy,pv),e(pv,zhe),e(zhe,cUo),e(pv,fUo),e(pv,xV),e(xV,mUo),e(pv,gUo),e(Cy,hUo),e(Cy,uv),e(uv,Qhe),e(Qhe,pUo),e(uv,uUo),e(uv,$V),e($V,_Uo),e(uv,bUo),e(fo,vUo),e(fo,_v),e(_v,FUo),e(_v,Whe),e(Whe,TUo),e(_v,MUo),e(_v,Hhe),e(Hhe,EUo),e(fo,CUo),M(bv,fo,null),b(f,KBe,_),b(f,md,_),e(md,vv),e(vv,Uhe),M(wy,Uhe,null),e(md,wUo),e(md,Jhe),e(Jhe,AUo),b(f,ZBe,_),b(f,zo,_),M(Ay,zo,null),e(zo,yUo),e(zo,gd),e(gd,LUo),e(gd,kV),e(kV,xUo),e(gd,$Uo),e(gd,SV),e(SV,kUo),e(gd,SUo),e(zo,RUo),e(zo,yy),e(yy,BUo),e(yy,Yhe),e(Yhe,PUo),e(yy,IUo),e(zo,qUo),e(zo,_t),M(Ly,_t,null),e(_t,NUo),e(_t,Khe),e(Khe,jUo),e(_t,DUo),e(_t,hd),e(hd,GUo),e(hd,Zhe),e(Zhe,OUo),e(hd,VUo),e(hd,RV),e(RV,XUo),e(hd,zUo),e(_t,QUo),M(Fv,_t,null),e(zo,WUo),e(zo,mo),M(xy,mo,null),e(mo,HUo),e(mo,epe),e(epe,UUo),e(mo,JUo),e(mo,Ga),e(Ga,YUo),e(Ga,ope),e(ope,KUo),e(Ga,ZUo),e(Ga,rpe),e(rpe,eJo),e(Ga,oJo),e(Ga,tpe),e(tpe,rJo),e(Ga,tJo),e(mo,aJo),e(mo,Oa),e(Oa,Tv),e(Tv,ape),e(ape,nJo),e(Tv,sJo),e(Tv,BV),e(BV,lJo),e(Tv,iJo),e(Oa,dJo),e(Oa,Mv),e(Mv,npe),e(npe,cJo),e(Mv,fJo),e(Mv,PV),e(PV,mJo),e(Mv,gJo),e(Oa,hJo),e(Oa,Ev),e(Ev,spe),e(spe,pJo),e(Ev,uJo),e(Ev,IV),e(IV,_Jo),e(Ev,bJo),e(Oa,vJo),e(Oa,Cv),e(Cv,lpe),e(lpe,FJo),e(Cv,TJo),e(Cv,qV),e(qV,MJo),e(Cv,EJo),e(mo,CJo),e(mo,wv),e(wv,wJo),e(wv,ipe),e(ipe,AJo),e(wv,yJo),e(wv,dpe),e(dpe,LJo),e(mo,xJo),M(Av,mo,null),b(f,ePe,_),b(f,pd,_),e(pd,yv),e(yv,cpe),M($y,cpe,null),e(pd,$Jo),e(pd,fpe),e(fpe,kJo),b(f,oPe,_),b(f,Qo,_),M(ky,Qo,null),e(Qo,SJo),e(Qo,ud),e(ud,RJo),e(ud,NV),e(NV,BJo),e(ud,PJo),e(ud,jV),e(jV,IJo),e(ud,qJo),e(Qo,NJo),e(Qo,Sy),e(Sy,jJo),e(Sy,mpe),e(mpe,DJo),e(Sy,GJo),e(Qo,OJo),e(Qo,bt),M(Ry,bt,null),e(bt,VJo),e(bt,gpe),e(gpe,XJo),e(bt,zJo),e(bt,_d),e(_d,QJo),e(_d,hpe),e(hpe,WJo),e(_d,HJo),e(_d,DV),e(DV,UJo),e(_d,JJo),e(bt,YJo),M(Lv,bt,null),e(Qo,KJo),e(Qo,go),M(By,go,null),e(go,ZJo),e(go,ppe),e(ppe,eYo),e(go,oYo),e(go,Va),e(Va,rYo),e(Va,upe),e(upe,tYo),e(Va,aYo),e(Va,_pe),e(_pe,nYo),e(Va,sYo),e(Va,bpe),e(bpe,lYo),e(Va,iYo),e(go,dYo),e(go,bd),e(bd,xv),e(xv,vpe),e(vpe,cYo),e(xv,fYo),e(xv,GV),e(GV,mYo),e(xv,gYo),e(bd,hYo),e(bd,$v),e($v,Fpe),e(Fpe,pYo),e($v,uYo),e($v,OV),e(OV,_Yo),e($v,bYo),e(bd,vYo),e(bd,kv),e(kv,Tpe),e(Tpe,FYo),e(kv,TYo),e(kv,VV),e(VV,MYo),e(kv,EYo),e(go,CYo),e(go,Sv),e(Sv,wYo),e(Sv,Mpe),e(Mpe,AYo),e(Sv,yYo),e(Sv,Epe),e(Epe,LYo),e(go,xYo),M(Rv,go,null),b(f,rPe,_),b(f,vd,_),e(vd,Bv),e(Bv,Cpe),M(Py,Cpe,null),e(vd,$Yo),e(vd,wpe),e(wpe,kYo),b(f,tPe,_),b(f,Wo,_),M(Iy,Wo,null),e(Wo,SYo),e(Wo,Fd),e(Fd,RYo),e(Fd,XV),e(XV,BYo),e(Fd,PYo),e(Fd,zV),e(zV,IYo),e(Fd,qYo),e(Wo,NYo),e(Wo,qy),e(qy,jYo),e(qy,Ape),e(Ape,DYo),e(qy,GYo),e(Wo,OYo),e(Wo,vt),M(Ny,vt,null),e(vt,VYo),e(vt,ype),e(ype,XYo),e(vt,zYo),e(vt,Td),e(Td,QYo),e(Td,Lpe),e(Lpe,WYo),e(Td,HYo),e(Td,QV),e(QV,UYo),e(Td,JYo),e(vt,YYo),M(Pv,vt,null),e(Wo,KYo),e(Wo,ho),M(jy,ho,null),e(ho,ZYo),e(ho,xpe),e(xpe,eKo),e(ho,oKo),e(ho,Xa),e(Xa,rKo),e(Xa,$pe),e($pe,tKo),e(Xa,aKo),e(Xa,kpe),e(kpe,nKo),e(Xa,sKo),e(Xa,Spe),e(Spe,lKo),e(Xa,iKo),e(ho,dKo),e(ho,Dy),e(Dy,Iv),e(Iv,Rpe),e(Rpe,cKo),e(Iv,fKo),e(Iv,WV),e(WV,mKo),e(Iv,gKo),e(Dy,hKo),e(Dy,qv),e(qv,Bpe),e(Bpe,pKo),e(qv,uKo),e(qv,HV),e(HV,_Ko),e(qv,bKo),e(ho,vKo),e(ho,Nv),e(Nv,FKo),e(Nv,Ppe),e(Ppe,TKo),e(Nv,MKo),e(Nv,Ipe),e(Ipe,EKo),e(ho,CKo),M(jv,ho,null),b(f,aPe,_),b(f,Md,_),e(Md,Dv),e(Dv,qpe),M(Gy,qpe,null),e(Md,wKo),e(Md,Npe),e(Npe,AKo),b(f,nPe,_),b(f,Ho,_),M(Oy,Ho,null),e(Ho,yKo),e(Ho,Ed),e(Ed,LKo),e(Ed,UV),e(UV,xKo),e(Ed,$Ko),e(Ed,JV),e(JV,kKo),e(Ed,SKo),e(Ho,RKo),e(Ho,Vy),e(Vy,BKo),e(Vy,jpe),e(jpe,PKo),e(Vy,IKo),e(Ho,qKo),e(Ho,Ft),M(Xy,Ft,null),e(Ft,NKo),e(Ft,Dpe),e(Dpe,jKo),e(Ft,DKo),e(Ft,Cd),e(Cd,GKo),e(Cd,Gpe),e(Gpe,OKo),e(Cd,VKo),e(Cd,YV),e(YV,XKo),e(Cd,zKo),e(Ft,QKo),M(Gv,Ft,null),e(Ho,WKo),e(Ho,po),M(zy,po,null),e(po,HKo),e(po,Ope),e(Ope,UKo),e(po,JKo),e(po,za),e(za,YKo),e(za,Vpe),e(Vpe,KKo),e(za,ZKo),e(za,Xpe),e(Xpe,eZo),e(za,oZo),e(za,zpe),e(zpe,rZo),e(za,tZo),e(po,aZo),e(po,Qpe),e(Qpe,Ov),e(Ov,Wpe),e(Wpe,nZo),e(Ov,sZo),e(Ov,KV),e(KV,lZo),e(Ov,iZo),e(po,dZo),e(po,Vv),e(Vv,cZo),e(Vv,Hpe),e(Hpe,fZo),e(Vv,mZo),e(Vv,Upe),e(Upe,gZo),e(po,hZo),M(Xv,po,null),b(f,sPe,_),b(f,wd,_),e(wd,zv),e(zv,Jpe),M(Qy,Jpe,null),e(wd,pZo),e(wd,Ype),e(Ype,uZo),b(f,lPe,_),b(f,Uo,_),M(Wy,Uo,null),e(Uo,_Zo),e(Uo,Ad),e(Ad,bZo),e(Ad,ZV),e(ZV,vZo),e(Ad,FZo),e(Ad,eX),e(eX,TZo),e(Ad,MZo),e(Uo,EZo),e(Uo,Hy),e(Hy,CZo),e(Hy,Kpe),e(Kpe,wZo),e(Hy,AZo),e(Uo,yZo),e(Uo,Tt),M(Uy,Tt,null),e(Tt,LZo),e(Tt,Zpe),e(Zpe,xZo),e(Tt,$Zo),e(Tt,yd),e(yd,kZo),e(yd,eue),e(eue,SZo),e(yd,RZo),e(yd,oX),e(oX,BZo),e(yd,PZo),e(Tt,IZo),M(Qv,Tt,null),e(Uo,qZo),e(Uo,uo),M(Jy,uo,null),e(uo,NZo),e(uo,oue),e(oue,jZo),e(uo,DZo),e(uo,Qa),e(Qa,GZo),e(Qa,rue),e(rue,OZo),e(Qa,VZo),e(Qa,tue),e(tue,XZo),e(Qa,zZo),e(Qa,aue),e(aue,QZo),e(Qa,WZo),e(uo,HZo),e(uo,Wa),e(Wa,Wv),e(Wv,nue),e(nue,UZo),e(Wv,JZo),e(Wv,rX),e(rX,YZo),e(Wv,KZo),e(Wa,ZZo),e(Wa,Hv),e(Hv,sue),e(sue,eer),e(Hv,oer),e(Hv,tX),e(tX,rer),e(Hv,ter),e(Wa,aer),e(Wa,Uv),e(Uv,lue),e(lue,ner),e(Uv,ser),e(Uv,aX),e(aX,ler),e(Uv,ier),e(Wa,der),e(Wa,Jv),e(Jv,iue),e(iue,cer),e(Jv,fer),e(Jv,nX),e(nX,mer),e(Jv,ger),e(uo,her),e(uo,Yv),e(Yv,per),e(Yv,due),e(due,uer),e(Yv,_er),e(Yv,cue),e(cue,ber),e(uo,ver),M(Kv,uo,null),b(f,iPe,_),b(f,Ld,_),e(Ld,Zv),e(Zv,fue),M(Yy,fue,null),e(Ld,Fer),e(Ld,mue),e(mue,Ter),b(f,dPe,_),b(f,Jo,_),M(Ky,Jo,null),e(Jo,Mer),e(Jo,xd),e(xd,Eer),e(xd,sX),e(sX,Cer),e(xd,wer),e(xd,lX),e(lX,Aer),e(xd,yer),e(Jo,Ler),e(Jo,Zy),e(Zy,xer),e(Zy,gue),e(gue,$er),e(Zy,ker),e(Jo,Ser),e(Jo,Mt),M(eL,Mt,null),e(Mt,Rer),e(Mt,hue),e(hue,Ber),e(Mt,Per),e(Mt,$d),e($d,Ier),e($d,pue),e(pue,qer),e($d,Ner),e($d,iX),e(iX,jer),e($d,Der),e(Mt,Ger),M(eF,Mt,null),e(Jo,Oer),e(Jo,_o),M(oL,_o,null),e(_o,Ver),e(_o,uue),e(uue,Xer),e(_o,zer),e(_o,Ha),e(Ha,Qer),e(Ha,_ue),e(_ue,Wer),e(Ha,Her),e(Ha,bue),e(bue,Uer),e(Ha,Jer),e(Ha,vue),e(vue,Yer),e(Ha,Ker),e(_o,Zer),e(_o,Fue),e(Fue,oF),e(oF,Tue),e(Tue,eor),e(oF,oor),e(oF,dX),e(dX,ror),e(oF,tor),e(_o,aor),e(_o,rF),e(rF,nor),e(rF,Mue),e(Mue,sor),e(rF,lor),e(rF,Eue),e(Eue,ior),e(_o,dor),M(tF,_o,null),b(f,cPe,_),b(f,kd,_),e(kd,aF),e(aF,Cue),M(rL,Cue,null),e(kd,cor),e(kd,wue),e(wue,mor),b(f,fPe,_),b(f,Yo,_),M(tL,Yo,null),e(Yo,gor),e(Yo,Sd),e(Sd,hor),e(Sd,cX),e(cX,por),e(Sd,uor),e(Sd,fX),e(fX,_or),e(Sd,bor),e(Yo,vor),e(Yo,aL),e(aL,For),e(aL,Aue),e(Aue,Tor),e(aL,Mor),e(Yo,Eor),e(Yo,Et),M(nL,Et,null),e(Et,Cor),e(Et,yue),e(yue,wor),e(Et,Aor),e(Et,Rd),e(Rd,yor),e(Rd,Lue),e(Lue,Lor),e(Rd,xor),e(Rd,mX),e(mX,$or),e(Rd,kor),e(Et,Sor),M(nF,Et,null),e(Yo,Ror),e(Yo,Cr),M(sL,Cr,null),e(Cr,Bor),e(Cr,xue),e(xue,Por),e(Cr,Ior),e(Cr,Ua),e(Ua,qor),e(Ua,$ue),e($ue,Nor),e(Ua,jor),e(Ua,kue),e(kue,Dor),e(Ua,Gor),e(Ua,Sue),e(Sue,Oor),e(Ua,Vor),e(Cr,Xor),e(Cr,j),e(j,sF),e(sF,Rue),e(Rue,zor),e(sF,Qor),e(sF,gX),e(gX,Wor),e(sF,Hor),e(j,Uor),e(j,lF),e(lF,Bue),e(Bue,Jor),e(lF,Yor),e(lF,hX),e(hX,Kor),e(lF,Zor),e(j,err),e(j,iF),e(iF,Pue),e(Pue,orr),e(iF,rrr),e(iF,pX),e(pX,trr),e(iF,arr),e(j,nrr),e(j,dF),e(dF,Iue),e(Iue,srr),e(dF,lrr),e(dF,uX),e(uX,irr),e(dF,drr),e(j,crr),e(j,cF),e(cF,que),e(que,frr),e(cF,mrr),e(cF,_X),e(_X,grr),e(cF,hrr),e(j,prr),e(j,fF),e(fF,Nue),e(Nue,urr),e(fF,_rr),e(fF,bX),e(bX,brr),e(fF,vrr),e(j,Frr),e(j,mF),e(mF,jue),e(jue,Trr),e(mF,Mrr),e(mF,vX),e(vX,Err),e(mF,Crr),e(j,wrr),e(j,gF),e(gF,Due),e(Due,Arr),e(gF,yrr),e(gF,FX),e(FX,Lrr),e(gF,xrr),e(j,$rr),e(j,hF),e(hF,Gue),e(Gue,krr),e(hF,Srr),e(hF,TX),e(TX,Rrr),e(hF,Brr),e(j,Prr),e(j,pF),e(pF,Oue),e(Oue,Irr),e(pF,qrr),e(pF,MX),e(MX,Nrr),e(pF,jrr),e(j,Drr),e(j,uF),e(uF,Vue),e(Vue,Grr),e(uF,Orr),e(uF,EX),e(EX,Vrr),e(uF,Xrr),e(j,zrr),e(j,_F),e(_F,Xue),e(Xue,Qrr),e(_F,Wrr),e(_F,CX),e(CX,Hrr),e(_F,Urr),e(j,Jrr),e(j,bF),e(bF,zue),e(zue,Yrr),e(bF,Krr),e(bF,wX),e(wX,Zrr),e(bF,etr),e(j,otr),e(j,vF),e(vF,Que),e(Que,rtr),e(vF,ttr),e(vF,AX),e(AX,atr),e(vF,ntr),e(j,str),e(j,FF),e(FF,Wue),e(Wue,ltr),e(FF,itr),e(FF,yX),e(yX,dtr),e(FF,ctr),e(j,ftr),e(j,TF),e(TF,Hue),e(Hue,mtr),e(TF,gtr),e(TF,LX),e(LX,htr),e(TF,ptr),e(j,utr),e(j,$s),e($s,Uue),e(Uue,_tr),e($s,btr),e($s,xX),e(xX,vtr),e($s,Ftr),e($s,$X),e($X,Ttr),e($s,Mtr),e(j,Etr),e(j,MF),e(MF,Jue),e(Jue,Ctr),e(MF,wtr),e(MF,kX),e(kX,Atr),e(MF,ytr),e(j,Ltr),e(j,EF),e(EF,Yue),e(Yue,xtr),e(EF,$tr),e(EF,SX),e(SX,ktr),e(EF,Str),e(j,Rtr),e(j,CF),e(CF,Kue),e(Kue,Btr),e(CF,Ptr),e(CF,RX),e(RX,Itr),e(CF,qtr),e(j,Ntr),e(j,wF),e(wF,Zue),e(Zue,jtr),e(wF,Dtr),e(wF,BX),e(BX,Gtr),e(wF,Otr),e(j,Vtr),e(j,AF),e(AF,e_e),e(e_e,Xtr),e(AF,ztr),e(AF,PX),e(PX,Qtr),e(AF,Wtr),e(j,Htr),e(j,yF),e(yF,o_e),e(o_e,Utr),e(yF,Jtr),e(yF,IX),e(IX,Ytr),e(yF,Ktr),e(j,Ztr),e(j,LF),e(LF,r_e),e(r_e,ear),e(LF,oar),e(LF,qX),e(qX,rar),e(LF,tar),e(j,aar),e(j,xF),e(xF,t_e),e(t_e,nar),e(xF,sar),e(xF,NX),e(NX,lar),e(xF,iar),e(j,dar),e(j,$F),e($F,a_e),e(a_e,car),e($F,far),e($F,jX),e(jX,mar),e($F,gar),e(j,har),e(j,kF),e(kF,n_e),e(n_e,par),e(kF,uar),e(kF,DX),e(DX,_ar),e(kF,bar),e(j,Far),e(j,SF),e(SF,s_e),e(s_e,Tar),e(SF,Mar),e(SF,GX),e(GX,Ear),e(SF,Car),e(j,war),e(j,RF),e(RF,l_e),e(l_e,Aar),e(RF,yar),e(RF,OX),e(OX,Lar),e(RF,xar),e(j,$ar),e(j,BF),e(BF,i_e),e(i_e,kar),e(BF,Sar),e(BF,VX),e(VX,Rar),e(BF,Bar),e(j,Par),e(j,PF),e(PF,d_e),e(d_e,Iar),e(PF,qar),e(PF,XX),e(XX,Nar),e(PF,jar),e(j,Dar),e(j,IF),e(IF,c_e),e(c_e,Gar),e(IF,Oar),e(IF,zX),e(zX,Var),e(IF,Xar),e(j,zar),e(j,qF),e(qF,f_e),e(f_e,Qar),e(qF,War),e(qF,QX),e(QX,Har),e(qF,Uar),e(j,Jar),e(j,NF),e(NF,m_e),e(m_e,Yar),e(NF,Kar),e(NF,WX),e(WX,Zar),e(NF,enr),e(j,onr),e(j,jF),e(jF,g_e),e(g_e,rnr),e(jF,tnr),e(jF,HX),e(HX,anr),e(jF,nnr),e(j,snr),e(j,DF),e(DF,h_e),e(h_e,lnr),e(DF,inr),e(DF,UX),e(UX,dnr),e(DF,cnr),e(j,fnr),e(j,GF),e(GF,p_e),e(p_e,mnr),e(GF,gnr),e(GF,JX),e(JX,hnr),e(GF,pnr),e(j,unr),e(j,OF),e(OF,u_e),e(u_e,_nr),e(OF,bnr),e(OF,YX),e(YX,vnr),e(OF,Fnr),e(j,Tnr),e(j,VF),e(VF,__e),e(__e,Mnr),e(VF,Enr),e(VF,KX),e(KX,Cnr),e(VF,wnr),e(j,Anr),e(j,XF),e(XF,b_e),e(b_e,ynr),e(XF,Lnr),e(XF,ZX),e(ZX,xnr),e(XF,$nr),e(j,knr),e(j,zF),e(zF,v_e),e(v_e,Snr),e(zF,Rnr),e(zF,ez),e(ez,Bnr),e(zF,Pnr),e(j,Inr),e(j,QF),e(QF,F_e),e(F_e,qnr),e(QF,Nnr),e(QF,oz),e(oz,jnr),e(QF,Dnr),e(j,Gnr),e(j,WF),e(WF,T_e),e(T_e,Onr),e(WF,Vnr),e(WF,rz),e(rz,Xnr),e(WF,znr),e(j,Qnr),e(j,HF),e(HF,M_e),e(M_e,Wnr),e(HF,Hnr),e(HF,tz),e(tz,Unr),e(HF,Jnr),e(Cr,Ynr),M(UF,Cr,null),b(f,mPe,_),b(f,Bd,_),e(Bd,JF),e(JF,E_e),M(lL,E_e,null),e(Bd,Knr),e(Bd,C_e),e(C_e,Znr),b(f,gPe,_),b(f,Ko,_),M(iL,Ko,null),e(Ko,esr),e(Ko,Pd),e(Pd,osr),e(Pd,az),e(az,rsr),e(Pd,tsr),e(Pd,nz),e(nz,asr),e(Pd,nsr),e(Ko,ssr),e(Ko,dL),e(dL,lsr),e(dL,w_e),e(w_e,isr),e(dL,dsr),e(Ko,csr),e(Ko,Ct),M(cL,Ct,null),e(Ct,fsr),e(Ct,A_e),e(A_e,msr),e(Ct,gsr),e(Ct,Id),e(Id,hsr),e(Id,y_e),e(y_e,psr),e(Id,usr),e(Id,sz),e(sz,_sr),e(Id,bsr),e(Ct,vsr),M(YF,Ct,null),e(Ko,Fsr),e(Ko,wr),M(fL,wr,null),e(wr,Tsr),e(wr,L_e),e(L_e,Msr),e(wr,Esr),e(wr,Ja),e(Ja,Csr),e(Ja,x_e),e(x_e,wsr),e(Ja,Asr),e(Ja,$_e),e($_e,ysr),e(Ja,Lsr),e(Ja,k_e),e(k_e,xsr),e(Ja,$sr),e(wr,ksr),e(wr,ne),e(ne,KF),e(KF,S_e),e(S_e,Ssr),e(KF,Rsr),e(KF,lz),e(lz,Bsr),e(KF,Psr),e(ne,Isr),e(ne,ZF),e(ZF,R_e),e(R_e,qsr),e(ZF,Nsr),e(ZF,iz),e(iz,jsr),e(ZF,Dsr),e(ne,Gsr),e(ne,e0),e(e0,B_e),e(B_e,Osr),e(e0,Vsr),e(e0,dz),e(dz,Xsr),e(e0,zsr),e(ne,Qsr),e(ne,o0),e(o0,P_e),e(P_e,Wsr),e(o0,Hsr),e(o0,cz),e(cz,Usr),e(o0,Jsr),e(ne,Ysr),e(ne,r0),e(r0,I_e),e(I_e,Ksr),e(r0,Zsr),e(r0,fz),e(fz,elr),e(r0,olr),e(ne,rlr),e(ne,t0),e(t0,q_e),e(q_e,tlr),e(t0,alr),e(t0,mz),e(mz,nlr),e(t0,slr),e(ne,llr),e(ne,a0),e(a0,N_e),e(N_e,ilr),e(a0,dlr),e(a0,gz),e(gz,clr),e(a0,flr),e(ne,mlr),e(ne,n0),e(n0,j_e),e(j_e,glr),e(n0,hlr),e(n0,hz),e(hz,plr),e(n0,ulr),e(ne,_lr),e(ne,s0),e(s0,D_e),e(D_e,blr),e(s0,vlr),e(s0,pz),e(pz,Flr),e(s0,Tlr),e(ne,Mlr),e(ne,l0),e(l0,G_e),e(G_e,Elr),e(l0,Clr),e(l0,uz),e(uz,wlr),e(l0,Alr),e(ne,ylr),e(ne,i0),e(i0,O_e),e(O_e,Llr),e(i0,xlr),e(i0,_z),e(_z,$lr),e(i0,klr),e(ne,Slr),e(ne,d0),e(d0,V_e),e(V_e,Rlr),e(d0,Blr),e(d0,bz),e(bz,Plr),e(d0,Ilr),e(ne,qlr),e(ne,c0),e(c0,X_e),e(X_e,Nlr),e(c0,jlr),e(c0,vz),e(vz,Dlr),e(c0,Glr),e(ne,Olr),e(ne,f0),e(f0,z_e),e(z_e,Vlr),e(f0,Xlr),e(f0,Fz),e(Fz,zlr),e(f0,Qlr),e(ne,Wlr),e(ne,m0),e(m0,Q_e),e(Q_e,Hlr),e(m0,Ulr),e(m0,Tz),e(Tz,Jlr),e(m0,Ylr),e(ne,Klr),e(ne,g0),e(g0,W_e),e(W_e,Zlr),e(g0,eir),e(g0,Mz),e(Mz,oir),e(g0,rir),e(ne,tir),e(ne,h0),e(h0,H_e),e(H_e,air),e(h0,nir),e(h0,Ez),e(Ez,sir),e(h0,lir),e(ne,iir),e(ne,p0),e(p0,U_e),e(U_e,dir),e(p0,cir),e(p0,Cz),e(Cz,fir),e(p0,mir),e(ne,gir),e(ne,u0),e(u0,J_e),e(J_e,hir),e(u0,pir),e(u0,wz),e(wz,uir),e(u0,_ir),e(ne,bir),e(ne,_0),e(_0,Y_e),e(Y_e,vir),e(_0,Fir),e(_0,Az),e(Az,Tir),e(_0,Mir),e(ne,Eir),e(ne,b0),e(b0,K_e),e(K_e,Cir),e(b0,wir),e(b0,yz),e(yz,Air),e(b0,yir),e(ne,Lir),e(ne,v0),e(v0,Z_e),e(Z_e,xir),e(v0,$ir),e(v0,Lz),e(Lz,kir),e(v0,Sir),e(ne,Rir),e(ne,F0),e(F0,e1e),e(e1e,Bir),e(F0,Pir),e(F0,xz),e(xz,Iir),e(F0,qir),e(wr,Nir),M(T0,wr,null),b(f,hPe,_),b(f,qd,_),e(qd,M0),e(M0,o1e),M(mL,o1e,null),e(qd,jir),e(qd,r1e),e(r1e,Dir),b(f,pPe,_),b(f,Zo,_),M(gL,Zo,null),e(Zo,Gir),e(Zo,Nd),e(Nd,Oir),e(Nd,$z),e($z,Vir),e(Nd,Xir),e(Nd,kz),e(kz,zir),e(Nd,Qir),e(Zo,Wir),e(Zo,hL),e(hL,Hir),e(hL,t1e),e(t1e,Uir),e(hL,Jir),e(Zo,Yir),e(Zo,wt),M(pL,wt,null),e(wt,Kir),e(wt,a1e),e(a1e,Zir),e(wt,edr),e(wt,jd),e(jd,odr),e(jd,n1e),e(n1e,rdr),e(jd,tdr),e(jd,Sz),e(Sz,adr),e(jd,ndr),e(wt,sdr),M(E0,wt,null),e(Zo,ldr),e(Zo,Ar),M(uL,Ar,null),e(Ar,idr),e(Ar,s1e),e(s1e,ddr),e(Ar,cdr),e(Ar,Ya),e(Ya,fdr),e(Ya,l1e),e(l1e,mdr),e(Ya,gdr),e(Ya,i1e),e(i1e,hdr),e(Ya,pdr),e(Ya,d1e),e(d1e,udr),e(Ya,_dr),e(Ar,bdr),e(Ar,Te),e(Te,C0),e(C0,c1e),e(c1e,vdr),e(C0,Fdr),e(C0,Rz),e(Rz,Tdr),e(C0,Mdr),e(Te,Edr),e(Te,w0),e(w0,f1e),e(f1e,Cdr),e(w0,wdr),e(w0,Bz),e(Bz,Adr),e(w0,ydr),e(Te,Ldr),e(Te,A0),e(A0,m1e),e(m1e,xdr),e(A0,$dr),e(A0,Pz),e(Pz,kdr),e(A0,Sdr),e(Te,Rdr),e(Te,y0),e(y0,g1e),e(g1e,Bdr),e(y0,Pdr),e(y0,Iz),e(Iz,Idr),e(y0,qdr),e(Te,Ndr),e(Te,L0),e(L0,h1e),e(h1e,jdr),e(L0,Ddr),e(L0,qz),e(qz,Gdr),e(L0,Odr),e(Te,Vdr),e(Te,x0),e(x0,p1e),e(p1e,Xdr),e(x0,zdr),e(x0,Nz),e(Nz,Qdr),e(x0,Wdr),e(Te,Hdr),e(Te,$0),e($0,u1e),e(u1e,Udr),e($0,Jdr),e($0,jz),e(jz,Ydr),e($0,Kdr),e(Te,Zdr),e(Te,k0),e(k0,_1e),e(_1e,ecr),e(k0,ocr),e(k0,Dz),e(Dz,rcr),e(k0,tcr),e(Te,acr),e(Te,S0),e(S0,b1e),e(b1e,ncr),e(S0,scr),e(S0,Gz),e(Gz,lcr),e(S0,icr),e(Te,dcr),e(Te,R0),e(R0,v1e),e(v1e,ccr),e(R0,fcr),e(R0,Oz),e(Oz,mcr),e(R0,gcr),e(Te,hcr),e(Te,B0),e(B0,F1e),e(F1e,pcr),e(B0,ucr),e(B0,Vz),e(Vz,_cr),e(B0,bcr),e(Te,vcr),e(Te,P0),e(P0,T1e),e(T1e,Fcr),e(P0,Tcr),e(P0,Xz),e(Xz,Mcr),e(P0,Ecr),e(Ar,Ccr),M(I0,Ar,null),b(f,uPe,_),b(f,Dd,_),e(Dd,q0),e(q0,M1e),M(_L,M1e,null),e(Dd,wcr),e(Dd,E1e),e(E1e,Acr),b(f,_Pe,_),b(f,er,_),M(bL,er,null),e(er,ycr),e(er,Gd),e(Gd,Lcr),e(Gd,zz),e(zz,xcr),e(Gd,$cr),e(Gd,Qz),e(Qz,kcr),e(Gd,Scr),e(er,Rcr),e(er,vL),e(vL,Bcr),e(vL,C1e),e(C1e,Pcr),e(vL,Icr),e(er,qcr),e(er,At),M(FL,At,null),e(At,Ncr),e(At,w1e),e(w1e,jcr),e(At,Dcr),e(At,Od),e(Od,Gcr),e(Od,A1e),e(A1e,Ocr),e(Od,Vcr),e(Od,Wz),e(Wz,Xcr),e(Od,zcr),e(At,Qcr),M(N0,At,null),e(er,Wcr),e(er,yr),M(TL,yr,null),e(yr,Hcr),e(yr,y1e),e(y1e,Ucr),e(yr,Jcr),e(yr,Ka),e(Ka,Ycr),e(Ka,L1e),e(L1e,Kcr),e(Ka,Zcr),e(Ka,x1e),e(x1e,efr),e(Ka,ofr),e(Ka,$1e),e($1e,rfr),e(Ka,tfr),e(yr,afr),e(yr,ML),e(ML,j0),e(j0,k1e),e(k1e,nfr),e(j0,sfr),e(j0,Hz),e(Hz,lfr),e(j0,ifr),e(ML,dfr),e(ML,D0),e(D0,S1e),e(S1e,cfr),e(D0,ffr),e(D0,Uz),e(Uz,mfr),e(D0,gfr),e(yr,hfr),M(G0,yr,null),b(f,bPe,_),b(f,Vd,_),e(Vd,O0),e(O0,R1e),M(EL,R1e,null),e(Vd,pfr),e(Vd,B1e),e(B1e,ufr),b(f,vPe,_),b(f,or,_),M(CL,or,null),e(or,_fr),e(or,Xd),e(Xd,bfr),e(Xd,Jz),e(Jz,vfr),e(Xd,Ffr),e(Xd,Yz),e(Yz,Tfr),e(Xd,Mfr),e(or,Efr),e(or,wL),e(wL,Cfr),e(wL,P1e),e(P1e,wfr),e(wL,Afr),e(or,yfr),e(or,yt),M(AL,yt,null),e(yt,Lfr),e(yt,I1e),e(I1e,xfr),e(yt,$fr),e(yt,zd),e(zd,kfr),e(zd,q1e),e(q1e,Sfr),e(zd,Rfr),e(zd,Kz),e(Kz,Bfr),e(zd,Pfr),e(yt,Ifr),M(V0,yt,null),e(or,qfr),e(or,Lr),M(yL,Lr,null),e(Lr,Nfr),e(Lr,N1e),e(N1e,jfr),e(Lr,Dfr),e(Lr,Za),e(Za,Gfr),e(Za,j1e),e(j1e,Ofr),e(Za,Vfr),e(Za,D1e),e(D1e,Xfr),e(Za,zfr),e(Za,G1e),e(G1e,Qfr),e(Za,Wfr),e(Lr,Hfr),e(Lr,ie),e(ie,X0),e(X0,O1e),e(O1e,Ufr),e(X0,Jfr),e(X0,Zz),e(Zz,Yfr),e(X0,Kfr),e(ie,Zfr),e(ie,z0),e(z0,V1e),e(V1e,emr),e(z0,omr),e(z0,eQ),e(eQ,rmr),e(z0,tmr),e(ie,amr),e(ie,Q0),e(Q0,X1e),e(X1e,nmr),e(Q0,smr),e(Q0,oQ),e(oQ,lmr),e(Q0,imr),e(ie,dmr),e(ie,W0),e(W0,z1e),e(z1e,cmr),e(W0,fmr),e(W0,rQ),e(rQ,mmr),e(W0,gmr),e(ie,hmr),e(ie,H0),e(H0,Q1e),e(Q1e,pmr),e(H0,umr),e(H0,tQ),e(tQ,_mr),e(H0,bmr),e(ie,vmr),e(ie,U0),e(U0,W1e),e(W1e,Fmr),e(U0,Tmr),e(U0,aQ),e(aQ,Mmr),e(U0,Emr),e(ie,Cmr),e(ie,J0),e(J0,H1e),e(H1e,wmr),e(J0,Amr),e(J0,nQ),e(nQ,ymr),e(J0,Lmr),e(ie,xmr),e(ie,Y0),e(Y0,U1e),e(U1e,$mr),e(Y0,kmr),e(Y0,sQ),e(sQ,Smr),e(Y0,Rmr),e(ie,Bmr),e(ie,K0),e(K0,J1e),e(J1e,Pmr),e(K0,Imr),e(K0,lQ),e(lQ,qmr),e(K0,Nmr),e(ie,jmr),e(ie,Z0),e(Z0,Y1e),e(Y1e,Dmr),e(Z0,Gmr),e(Z0,iQ),e(iQ,Omr),e(Z0,Vmr),e(ie,Xmr),e(ie,eT),e(eT,K1e),e(K1e,zmr),e(eT,Qmr),e(eT,dQ),e(dQ,Wmr),e(eT,Hmr),e(ie,Umr),e(ie,oT),e(oT,Z1e),e(Z1e,Jmr),e(oT,Ymr),e(oT,cQ),e(cQ,Kmr),e(oT,Zmr),e(ie,egr),e(ie,rT),e(rT,e7e),e(e7e,ogr),e(rT,rgr),e(rT,fQ),e(fQ,tgr),e(rT,agr),e(ie,ngr),e(ie,tT),e(tT,o7e),e(o7e,sgr),e(tT,lgr),e(tT,mQ),e(mQ,igr),e(tT,dgr),e(ie,cgr),e(ie,aT),e(aT,r7e),e(r7e,fgr),e(aT,mgr),e(aT,gQ),e(gQ,ggr),e(aT,hgr),e(ie,pgr),e(ie,nT),e(nT,t7e),e(t7e,ugr),e(nT,_gr),e(nT,hQ),e(hQ,bgr),e(nT,vgr),e(ie,Fgr),e(ie,sT),e(sT,a7e),e(a7e,Tgr),e(sT,Mgr),e(sT,pQ),e(pQ,Egr),e(sT,Cgr),e(ie,wgr),e(ie,lT),e(lT,n7e),e(n7e,Agr),e(lT,ygr),e(lT,uQ),e(uQ,Lgr),e(lT,xgr),e(ie,$gr),e(ie,iT),e(iT,s7e),e(s7e,kgr),e(iT,Sgr),e(iT,_Q),e(_Q,Rgr),e(iT,Bgr),e(ie,Pgr),e(ie,dT),e(dT,l7e),e(l7e,Igr),e(dT,qgr),e(dT,bQ),e(bQ,Ngr),e(dT,jgr),e(Lr,Dgr),M(cT,Lr,null),b(f,FPe,_),b(f,Qd,_),e(Qd,fT),e(fT,i7e),M(LL,i7e,null),e(Qd,Ggr),e(Qd,d7e),e(d7e,Ogr),b(f,TPe,_),b(f,rr,_),M(xL,rr,null),e(rr,Vgr),e(rr,Wd),e(Wd,Xgr),e(Wd,vQ),e(vQ,zgr),e(Wd,Qgr),e(Wd,FQ),e(FQ,Wgr),e(Wd,Hgr),e(rr,Ugr),e(rr,$L),e($L,Jgr),e($L,c7e),e(c7e,Ygr),e($L,Kgr),e(rr,Zgr),e(rr,Lt),M(kL,Lt,null),e(Lt,ehr),e(Lt,f7e),e(f7e,ohr),e(Lt,rhr),e(Lt,Hd),e(Hd,thr),e(Hd,m7e),e(m7e,ahr),e(Hd,nhr),e(Hd,TQ),e(TQ,shr),e(Hd,lhr),e(Lt,ihr),M(mT,Lt,null),e(rr,dhr),e(rr,xr),M(SL,xr,null),e(xr,chr),e(xr,g7e),e(g7e,fhr),e(xr,mhr),e(xr,en),e(en,ghr),e(en,h7e),e(h7e,hhr),e(en,phr),e(en,p7e),e(p7e,uhr),e(en,_hr),e(en,u7e),e(u7e,bhr),e(en,vhr),e(xr,Fhr),e(xr,ye),e(ye,gT),e(gT,_7e),e(_7e,Thr),e(gT,Mhr),e(gT,MQ),e(MQ,Ehr),e(gT,Chr),e(ye,whr),e(ye,hT),e(hT,b7e),e(b7e,Ahr),e(hT,yhr),e(hT,EQ),e(EQ,Lhr),e(hT,xhr),e(ye,$hr),e(ye,pT),e(pT,v7e),e(v7e,khr),e(pT,Shr),e(pT,CQ),e(CQ,Rhr),e(pT,Bhr),e(ye,Phr),e(ye,uT),e(uT,F7e),e(F7e,Ihr),e(uT,qhr),e(uT,wQ),e(wQ,Nhr),e(uT,jhr),e(ye,Dhr),e(ye,_T),e(_T,T7e),e(T7e,Ghr),e(_T,Ohr),e(_T,AQ),e(AQ,Vhr),e(_T,Xhr),e(ye,zhr),e(ye,bT),e(bT,M7e),e(M7e,Qhr),e(bT,Whr),e(bT,yQ),e(yQ,Hhr),e(bT,Uhr),e(ye,Jhr),e(ye,vT),e(vT,E7e),e(E7e,Yhr),e(vT,Khr),e(vT,LQ),e(LQ,Zhr),e(vT,epr),e(ye,opr),e(ye,FT),e(FT,C7e),e(C7e,rpr),e(FT,tpr),e(FT,xQ),e(xQ,apr),e(FT,npr),e(ye,spr),e(ye,TT),e(TT,w7e),e(w7e,lpr),e(TT,ipr),e(TT,$Q),e($Q,dpr),e(TT,cpr),e(ye,fpr),e(ye,MT),e(MT,A7e),e(A7e,mpr),e(MT,gpr),e(MT,kQ),e(kQ,hpr),e(MT,ppr),e(xr,upr),M(ET,xr,null),b(f,MPe,_),b(f,Ud,_),e(Ud,CT),e(CT,y7e),M(RL,y7e,null),e(Ud,_pr),e(Ud,L7e),e(L7e,bpr),b(f,EPe,_),b(f,tr,_),M(BL,tr,null),e(tr,vpr),e(tr,Jd),e(Jd,Fpr),e(Jd,SQ),e(SQ,Tpr),e(Jd,Mpr),e(Jd,RQ),e(RQ,Epr),e(Jd,Cpr),e(tr,wpr),e(tr,PL),e(PL,Apr),e(PL,x7e),e(x7e,ypr),e(PL,Lpr),e(tr,xpr),e(tr,xt),M(IL,xt,null),e(xt,$pr),e(xt,$7e),e($7e,kpr),e(xt,Spr),e(xt,Yd),e(Yd,Rpr),e(Yd,k7e),e(k7e,Bpr),e(Yd,Ppr),e(Yd,BQ),e(BQ,Ipr),e(Yd,qpr),e(xt,Npr),M(wT,xt,null),e(tr,jpr),e(tr,$r),M(qL,$r,null),e($r,Dpr),e($r,S7e),e(S7e,Gpr),e($r,Opr),e($r,on),e(on,Vpr),e(on,R7e),e(R7e,Xpr),e(on,zpr),e(on,B7e),e(B7e,Qpr),e(on,Wpr),e(on,P7e),e(P7e,Hpr),e(on,Upr),e($r,Jpr),e($r,Z),e(Z,AT),e(AT,I7e),e(I7e,Ypr),e(AT,Kpr),e(AT,PQ),e(PQ,Zpr),e(AT,eur),e(Z,our),e(Z,yT),e(yT,q7e),e(q7e,rur),e(yT,tur),e(yT,IQ),e(IQ,aur),e(yT,nur),e(Z,sur),e(Z,LT),e(LT,N7e),e(N7e,lur),e(LT,iur),e(LT,qQ),e(qQ,dur),e(LT,cur),e(Z,fur),e(Z,xT),e(xT,j7e),e(j7e,mur),e(xT,gur),e(xT,NQ),e(NQ,hur),e(xT,pur),e(Z,uur),e(Z,$T),e($T,D7e),e(D7e,_ur),e($T,bur),e($T,jQ),e(jQ,vur),e($T,Fur),e(Z,Tur),e(Z,kT),e(kT,G7e),e(G7e,Mur),e(kT,Eur),e(kT,DQ),e(DQ,Cur),e(kT,wur),e(Z,Aur),e(Z,ST),e(ST,O7e),e(O7e,yur),e(ST,Lur),e(ST,GQ),e(GQ,xur),e(ST,$ur),e(Z,kur),e(Z,RT),e(RT,V7e),e(V7e,Sur),e(RT,Rur),e(RT,OQ),e(OQ,Bur),e(RT,Pur),e(Z,Iur),e(Z,BT),e(BT,X7e),e(X7e,qur),e(BT,Nur),e(BT,VQ),e(VQ,jur),e(BT,Dur),e(Z,Gur),e(Z,PT),e(PT,z7e),e(z7e,Our),e(PT,Vur),e(PT,XQ),e(XQ,Xur),e(PT,zur),e(Z,Qur),e(Z,IT),e(IT,Q7e),e(Q7e,Wur),e(IT,Hur),e(IT,zQ),e(zQ,Uur),e(IT,Jur),e(Z,Yur),e(Z,qT),e(qT,W7e),e(W7e,Kur),e(qT,Zur),e(qT,QQ),e(QQ,e_r),e(qT,o_r),e(Z,r_r),e(Z,NT),e(NT,H7e),e(H7e,t_r),e(NT,a_r),e(NT,WQ),e(WQ,n_r),e(NT,s_r),e(Z,l_r),e(Z,jT),e(jT,U7e),e(U7e,i_r),e(jT,d_r),e(jT,HQ),e(HQ,c_r),e(jT,f_r),e(Z,m_r),e(Z,DT),e(DT,J7e),e(J7e,g_r),e(DT,h_r),e(DT,UQ),e(UQ,p_r),e(DT,u_r),e(Z,__r),e(Z,GT),e(GT,Y7e),e(Y7e,b_r),e(GT,v_r),e(GT,JQ),e(JQ,F_r),e(GT,T_r),e(Z,M_r),e(Z,OT),e(OT,K7e),e(K7e,E_r),e(OT,C_r),e(OT,YQ),e(YQ,w_r),e(OT,A_r),e(Z,y_r),e(Z,VT),e(VT,Z7e),e(Z7e,L_r),e(VT,x_r),e(VT,KQ),e(KQ,$_r),e(VT,k_r),e(Z,S_r),e(Z,XT),e(XT,ebe),e(ebe,R_r),e(XT,B_r),e(XT,ZQ),e(ZQ,P_r),e(XT,I_r),e(Z,q_r),e(Z,zT),e(zT,obe),e(obe,N_r),e(zT,j_r),e(zT,eW),e(eW,D_r),e(zT,G_r),e(Z,O_r),e(Z,QT),e(QT,rbe),e(rbe,V_r),e(QT,X_r),e(QT,oW),e(oW,z_r),e(QT,Q_r),e(Z,W_r),e(Z,WT),e(WT,tbe),e(tbe,H_r),e(WT,U_r),e(WT,rW),e(rW,J_r),e(WT,Y_r),e(Z,K_r),e(Z,HT),e(HT,abe),e(abe,Z_r),e(HT,e1r),e(HT,tW),e(tW,o1r),e(HT,r1r),e(Z,t1r),e(Z,UT),e(UT,nbe),e(nbe,a1r),e(UT,n1r),e(UT,aW),e(aW,s1r),e(UT,l1r),e(Z,i1r),e(Z,JT),e(JT,sbe),e(sbe,d1r),e(JT,c1r),e(JT,nW),e(nW,f1r),e(JT,m1r),e(Z,g1r),e(Z,YT),e(YT,lbe),e(lbe,h1r),e(YT,p1r),e(YT,sW),e(sW,u1r),e(YT,_1r),e($r,b1r),M(KT,$r,null),b(f,CPe,_),b(f,Kd,_),e(Kd,ZT),e(ZT,ibe),M(NL,ibe,null),e(Kd,v1r),e(Kd,dbe),e(dbe,F1r),b(f,wPe,_),b(f,ar,_),M(jL,ar,null),e(ar,T1r),e(ar,Zd),e(Zd,M1r),e(Zd,lW),e(lW,E1r),e(Zd,C1r),e(Zd,iW),e(iW,w1r),e(Zd,A1r),e(ar,y1r),e(ar,DL),e(DL,L1r),e(DL,cbe),e(cbe,x1r),e(DL,$1r),e(ar,k1r),e(ar,$t),M(GL,$t,null),e($t,S1r),e($t,fbe),e(fbe,R1r),e($t,B1r),e($t,ec),e(ec,P1r),e(ec,mbe),e(mbe,I1r),e(ec,q1r),e(ec,dW),e(dW,N1r),e(ec,j1r),e($t,D1r),M(eM,$t,null),e(ar,G1r),e(ar,kr),M(OL,kr,null),e(kr,O1r),e(kr,gbe),e(gbe,V1r),e(kr,X1r),e(kr,rn),e(rn,z1r),e(rn,hbe),e(hbe,Q1r),e(rn,W1r),e(rn,pbe),e(pbe,H1r),e(rn,U1r),e(rn,ube),e(ube,J1r),e(rn,Y1r),e(kr,K1r),e(kr,pe),e(pe,oM),e(oM,_be),e(_be,Z1r),e(oM,e7r),e(oM,cW),e(cW,o7r),e(oM,r7r),e(pe,t7r),e(pe,rM),e(rM,bbe),e(bbe,a7r),e(rM,n7r),e(rM,fW),e(fW,s7r),e(rM,l7r),e(pe,i7r),e(pe,tM),e(tM,vbe),e(vbe,d7r),e(tM,c7r),e(tM,mW),e(mW,f7r),e(tM,m7r),e(pe,g7r),e(pe,aM),e(aM,Fbe),e(Fbe,h7r),e(aM,p7r),e(aM,gW),e(gW,u7r),e(aM,_7r),e(pe,b7r),e(pe,nM),e(nM,Tbe),e(Tbe,v7r),e(nM,F7r),e(nM,hW),e(hW,T7r),e(nM,M7r),e(pe,E7r),e(pe,sM),e(sM,Mbe),e(Mbe,C7r),e(sM,w7r),e(sM,pW),e(pW,A7r),e(sM,y7r),e(pe,L7r),e(pe,lM),e(lM,Ebe),e(Ebe,x7r),e(lM,$7r),e(lM,uW),e(uW,k7r),e(lM,S7r),e(pe,R7r),e(pe,iM),e(iM,Cbe),e(Cbe,B7r),e(iM,P7r),e(iM,_W),e(_W,I7r),e(iM,q7r),e(pe,N7r),e(pe,dM),e(dM,wbe),e(wbe,j7r),e(dM,D7r),e(dM,bW),e(bW,G7r),e(dM,O7r),e(pe,V7r),e(pe,cM),e(cM,Abe),e(Abe,X7r),e(cM,z7r),e(cM,vW),e(vW,Q7r),e(cM,W7r),e(pe,H7r),e(pe,fM),e(fM,ybe),e(ybe,U7r),e(fM,J7r),e(fM,FW),e(FW,Y7r),e(fM,K7r),e(pe,Z7r),e(pe,mM),e(mM,Lbe),e(Lbe,ebr),e(mM,obr),e(mM,TW),e(TW,rbr),e(mM,tbr),e(pe,abr),e(pe,gM),e(gM,xbe),e(xbe,nbr),e(gM,sbr),e(gM,MW),e(MW,lbr),e(gM,ibr),e(pe,dbr),e(pe,hM),e(hM,$be),e($be,cbr),e(hM,fbr),e(hM,EW),e(EW,mbr),e(hM,gbr),e(pe,hbr),e(pe,pM),e(pM,kbe),e(kbe,pbr),e(pM,ubr),e(pM,CW),e(CW,_br),e(pM,bbr),e(pe,vbr),e(pe,uM),e(uM,Sbe),e(Sbe,Fbr),e(uM,Tbr),e(uM,wW),e(wW,Mbr),e(uM,Ebr),e(pe,Cbr),e(pe,_M),e(_M,Rbe),e(Rbe,wbr),e(_M,Abr),e(_M,AW),e(AW,ybr),e(_M,Lbr),e(kr,xbr),M(bM,kr,null),b(f,APe,_),b(f,oc,_),e(oc,vM),e(vM,Bbe),M(VL,Bbe,null),e(oc,$br),e(oc,Pbe),e(Pbe,kbr),b(f,yPe,_),b(f,nr,_),M(XL,nr,null),e(nr,Sbr),e(nr,rc),e(rc,Rbr),e(rc,yW),e(yW,Bbr),e(rc,Pbr),e(rc,LW),e(LW,Ibr),e(rc,qbr),e(nr,Nbr),e(nr,zL),e(zL,jbr),e(zL,Ibe),e(Ibe,Dbr),e(zL,Gbr),e(nr,Obr),e(nr,kt),M(QL,kt,null),e(kt,Vbr),e(kt,qbe),e(qbe,Xbr),e(kt,zbr),e(kt,tc),e(tc,Qbr),e(tc,Nbe),e(Nbe,Wbr),e(tc,Hbr),e(tc,xW),e(xW,Ubr),e(tc,Jbr),e(kt,Ybr),M(FM,kt,null),e(nr,Kbr),e(nr,Sr),M(WL,Sr,null),e(Sr,Zbr),e(Sr,jbe),e(jbe,e2r),e(Sr,o2r),e(Sr,tn),e(tn,r2r),e(tn,Dbe),e(Dbe,t2r),e(tn,a2r),e(tn,Gbe),e(Gbe,n2r),e(tn,s2r),e(tn,Obe),e(Obe,l2r),e(tn,i2r),e(Sr,d2r),e(Sr,Vbe),e(Vbe,TM),e(TM,Xbe),e(Xbe,c2r),e(TM,f2r),e(TM,$W),e($W,m2r),e(TM,g2r),e(Sr,h2r),M(MM,Sr,null),b(f,LPe,_),b(f,ac,_),e(ac,EM),e(EM,zbe),M(HL,zbe,null),e(ac,p2r),e(ac,Qbe),e(Qbe,u2r),b(f,xPe,_),b(f,sr,_),M(UL,sr,null),e(sr,_2r),e(sr,nc),e(nc,b2r),e(nc,kW),e(kW,v2r),e(nc,F2r),e(nc,SW),e(SW,T2r),e(nc,M2r),e(sr,E2r),e(sr,JL),e(JL,C2r),e(JL,Wbe),e(Wbe,w2r),e(JL,A2r),e(sr,y2r),e(sr,St),M(YL,St,null),e(St,L2r),e(St,Hbe),e(Hbe,x2r),e(St,$2r),e(St,sc),e(sc,k2r),e(sc,Ube),e(Ube,S2r),e(sc,R2r),e(sc,RW),e(RW,B2r),e(sc,P2r),e(St,I2r),M(CM,St,null),e(sr,q2r),e(sr,Rr),M(KL,Rr,null),e(Rr,N2r),e(Rr,Jbe),e(Jbe,j2r),e(Rr,D2r),e(Rr,an),e(an,G2r),e(an,Ybe),e(Ybe,O2r),e(an,V2r),e(an,Kbe),e(Kbe,X2r),e(an,z2r),e(an,Zbe),e(Zbe,Q2r),e(an,W2r),e(Rr,H2r),e(Rr,de),e(de,wM),e(wM,e2e),e(e2e,U2r),e(wM,J2r),e(wM,BW),e(BW,Y2r),e(wM,K2r),e(de,Z2r),e(de,AM),e(AM,o2e),e(o2e,e3r),e(AM,o3r),e(AM,PW),e(PW,r3r),e(AM,t3r),e(de,a3r),e(de,yM),e(yM,r2e),e(r2e,n3r),e(yM,s3r),e(yM,IW),e(IW,l3r),e(yM,i3r),e(de,d3r),e(de,LM),e(LM,t2e),e(t2e,c3r),e(LM,f3r),e(LM,qW),e(qW,m3r),e(LM,g3r),e(de,h3r),e(de,xM),e(xM,a2e),e(a2e,p3r),e(xM,u3r),e(xM,NW),e(NW,_3r),e(xM,b3r),e(de,v3r),e(de,$M),e($M,n2e),e(n2e,F3r),e($M,T3r),e($M,jW),e(jW,M3r),e($M,E3r),e(de,C3r),e(de,kM),e(kM,s2e),e(s2e,w3r),e(kM,A3r),e(kM,DW),e(DW,y3r),e(kM,L3r),e(de,x3r),e(de,SM),e(SM,l2e),e(l2e,$3r),e(SM,k3r),e(SM,GW),e(GW,S3r),e(SM,R3r),e(de,B3r),e(de,RM),e(RM,i2e),e(i2e,P3r),e(RM,I3r),e(RM,OW),e(OW,q3r),e(RM,N3r),e(de,j3r),e(de,BM),e(BM,d2e),e(d2e,D3r),e(BM,G3r),e(BM,VW),e(VW,O3r),e(BM,V3r),e(de,X3r),e(de,PM),e(PM,c2e),e(c2e,z3r),e(PM,Q3r),e(PM,XW),e(XW,W3r),e(PM,H3r),e(de,U3r),e(de,IM),e(IM,f2e),e(f2e,J3r),e(IM,Y3r),e(IM,zW),e(zW,K3r),e(IM,Z3r),e(de,evr),e(de,qM),e(qM,m2e),e(m2e,ovr),e(qM,rvr),e(qM,QW),e(QW,tvr),e(qM,avr),e(de,nvr),e(de,NM),e(NM,g2e),e(g2e,svr),e(NM,lvr),e(NM,WW),e(WW,ivr),e(NM,dvr),e(de,cvr),e(de,jM),e(jM,h2e),e(h2e,fvr),e(jM,mvr),e(jM,HW),e(HW,gvr),e(jM,hvr),e(de,pvr),e(de,DM),e(DM,p2e),e(p2e,uvr),e(DM,_vr),e(DM,UW),e(UW,bvr),e(DM,vvr),e(de,Fvr),e(de,GM),e(GM,u2e),e(u2e,Tvr),e(GM,Mvr),e(GM,JW),e(JW,Evr),e(GM,Cvr),e(de,wvr),e(de,OM),e(OM,_2e),e(_2e,Avr),e(OM,yvr),e(OM,YW),e(YW,Lvr),e(OM,xvr),e(de,$vr),e(de,VM),e(VM,b2e),e(b2e,kvr),e(VM,Svr),e(VM,KW),e(KW,Rvr),e(VM,Bvr),e(de,Pvr),e(de,XM),e(XM,v2e),e(v2e,Ivr),e(XM,qvr),e(XM,ZW),e(ZW,Nvr),e(XM,jvr),e(Rr,Dvr),M(zM,Rr,null),b(f,$Pe,_),b(f,lc,_),e(lc,QM),e(QM,F2e),M(ZL,F2e,null),e(lc,Gvr),e(lc,T2e),e(T2e,Ovr),b(f,kPe,_),b(f,lr,_),M(e8,lr,null),e(lr,Vvr),e(lr,ic),e(ic,Xvr),e(ic,eH),e(eH,zvr),e(ic,Qvr),e(ic,oH),e(oH,Wvr),e(ic,Hvr),e(lr,Uvr),e(lr,o8),e(o8,Jvr),e(o8,M2e),e(M2e,Yvr),e(o8,Kvr),e(lr,Zvr),e(lr,Rt),M(r8,Rt,null),e(Rt,eFr),e(Rt,E2e),e(E2e,oFr),e(Rt,rFr),e(Rt,dc),e(dc,tFr),e(dc,C2e),e(C2e,aFr),e(dc,nFr),e(dc,rH),e(rH,sFr),e(dc,lFr),e(Rt,iFr),M(WM,Rt,null),e(lr,dFr),e(lr,Br),M(t8,Br,null),e(Br,cFr),e(Br,w2e),e(w2e,fFr),e(Br,mFr),e(Br,nn),e(nn,gFr),e(nn,A2e),e(A2e,hFr),e(nn,pFr),e(nn,y2e),e(y2e,uFr),e(nn,_Fr),e(nn,L2e),e(L2e,bFr),e(nn,vFr),e(Br,FFr),e(Br,ce),e(ce,HM),e(HM,x2e),e(x2e,TFr),e(HM,MFr),e(HM,tH),e(tH,EFr),e(HM,CFr),e(ce,wFr),e(ce,UM),e(UM,$2e),e($2e,AFr),e(UM,yFr),e(UM,aH),e(aH,LFr),e(UM,xFr),e(ce,$Fr),e(ce,JM),e(JM,k2e),e(k2e,kFr),e(JM,SFr),e(JM,nH),e(nH,RFr),e(JM,BFr),e(ce,PFr),e(ce,YM),e(YM,S2e),e(S2e,IFr),e(YM,qFr),e(YM,sH),e(sH,NFr),e(YM,jFr),e(ce,DFr),e(ce,KM),e(KM,R2e),e(R2e,GFr),e(KM,OFr),e(KM,lH),e(lH,VFr),e(KM,XFr),e(ce,zFr),e(ce,ZM),e(ZM,B2e),e(B2e,QFr),e(ZM,WFr),e(ZM,iH),e(iH,HFr),e(ZM,UFr),e(ce,JFr),e(ce,e4),e(e4,P2e),e(P2e,YFr),e(e4,KFr),e(e4,dH),e(dH,ZFr),e(e4,e0r),e(ce,o0r),e(ce,o4),e(o4,I2e),e(I2e,r0r),e(o4,t0r),e(o4,cH),e(cH,a0r),e(o4,n0r),e(ce,s0r),e(ce,r4),e(r4,q2e),e(q2e,l0r),e(r4,i0r),e(r4,fH),e(fH,d0r),e(r4,c0r),e(ce,f0r),e(ce,t4),e(t4,N2e),e(N2e,m0r),e(t4,g0r),e(t4,mH),e(mH,h0r),e(t4,p0r),e(ce,u0r),e(ce,a4),e(a4,j2e),e(j2e,_0r),e(a4,b0r),e(a4,gH),e(gH,v0r),e(a4,F0r),e(ce,T0r),e(ce,n4),e(n4,D2e),e(D2e,M0r),e(n4,E0r),e(n4,hH),e(hH,C0r),e(n4,w0r),e(ce,A0r),e(ce,s4),e(s4,G2e),e(G2e,y0r),e(s4,L0r),e(s4,pH),e(pH,x0r),e(s4,$0r),e(ce,k0r),e(ce,l4),e(l4,O2e),e(O2e,S0r),e(l4,R0r),e(l4,uH),e(uH,B0r),e(l4,P0r),e(ce,I0r),e(ce,i4),e(i4,V2e),e(V2e,q0r),e(i4,N0r),e(i4,_H),e(_H,j0r),e(i4,D0r),e(ce,G0r),e(ce,d4),e(d4,X2e),e(X2e,O0r),e(d4,V0r),e(d4,bH),e(bH,X0r),e(d4,z0r),e(ce,Q0r),e(ce,c4),e(c4,z2e),e(z2e,W0r),e(c4,H0r),e(c4,vH),e(vH,U0r),e(c4,J0r),e(ce,Y0r),e(ce,f4),e(f4,Q2e),e(Q2e,K0r),e(f4,Z0r),e(f4,FH),e(FH,eTr),e(f4,oTr),e(ce,rTr),e(ce,m4),e(m4,W2e),e(W2e,tTr),e(m4,aTr),e(m4,TH),e(TH,nTr),e(m4,sTr),e(ce,lTr),e(ce,g4),e(g4,H2e),e(H2e,iTr),e(g4,dTr),e(g4,MH),e(MH,cTr),e(g4,fTr),e(Br,mTr),M(h4,Br,null),b(f,SPe,_),b(f,cc,_),e(cc,p4),e(p4,U2e),M(a8,U2e,null),e(cc,gTr),e(cc,J2e),e(J2e,hTr),b(f,RPe,_),b(f,ir,_),M(n8,ir,null),e(ir,pTr),e(ir,fc),e(fc,uTr),e(fc,EH),e(EH,_Tr),e(fc,bTr),e(fc,CH),e(CH,vTr),e(fc,FTr),e(ir,TTr),e(ir,s8),e(s8,MTr),e(s8,Y2e),e(Y2e,ETr),e(s8,CTr),e(ir,wTr),e(ir,Bt),M(l8,Bt,null),e(Bt,ATr),e(Bt,K2e),e(K2e,yTr),e(Bt,LTr),e(Bt,mc),e(mc,xTr),e(mc,Z2e),e(Z2e,$Tr),e(mc,kTr),e(mc,wH),e(wH,STr),e(mc,RTr),e(Bt,BTr),M(u4,Bt,null),e(ir,PTr),e(ir,Pr),M(i8,Pr,null),e(Pr,ITr),e(Pr,e3e),e(e3e,qTr),e(Pr,NTr),e(Pr,sn),e(sn,jTr),e(sn,o3e),e(o3e,DTr),e(sn,GTr),e(sn,r3e),e(r3e,OTr),e(sn,VTr),e(sn,t3e),e(t3e,XTr),e(sn,zTr),e(Pr,QTr),e(Pr,a3e),e(a3e,_4),e(_4,n3e),e(n3e,WTr),e(_4,HTr),e(_4,AH),e(AH,UTr),e(_4,JTr),e(Pr,YTr),M(b4,Pr,null),b(f,BPe,_),b(f,gc,_),e(gc,v4),e(v4,s3e),M(d8,s3e,null),e(gc,KTr),e(gc,l3e),e(l3e,ZTr),b(f,PPe,_),b(f,dr,_),M(c8,dr,null),e(dr,eMr),e(dr,hc),e(hc,oMr),e(hc,yH),e(yH,rMr),e(hc,tMr),e(hc,LH),e(LH,aMr),e(hc,nMr),e(dr,sMr),e(dr,f8),e(f8,lMr),e(f8,i3e),e(i3e,iMr),e(f8,dMr),e(dr,cMr),e(dr,Pt),M(m8,Pt,null),e(Pt,fMr),e(Pt,d3e),e(d3e,mMr),e(Pt,gMr),e(Pt,pc),e(pc,hMr),e(pc,c3e),e(c3e,pMr),e(pc,uMr),e(pc,xH),e(xH,_Mr),e(pc,bMr),e(Pt,vMr),M(F4,Pt,null),e(dr,FMr),e(dr,Ir),M(g8,Ir,null),e(Ir,TMr),e(Ir,f3e),e(f3e,MMr),e(Ir,EMr),e(Ir,ln),e(ln,CMr),e(ln,m3e),e(m3e,wMr),e(ln,AMr),e(ln,g3e),e(g3e,yMr),e(ln,LMr),e(ln,h3e),e(h3e,xMr),e(ln,$Mr),e(Ir,kMr),e(Ir,p3e),e(p3e,T4),e(T4,u3e),e(u3e,SMr),e(T4,RMr),e(T4,$H),e($H,BMr),e(T4,PMr),e(Ir,IMr),M(M4,Ir,null),b(f,IPe,_),b(f,uc,_),e(uc,E4),e(E4,_3e),M(h8,_3e,null),e(uc,qMr),e(uc,b3e),e(b3e,NMr),b(f,qPe,_),b(f,cr,_),M(p8,cr,null),e(cr,jMr),e(cr,_c),e(_c,DMr),e(_c,kH),e(kH,GMr),e(_c,OMr),e(_c,SH),e(SH,VMr),e(_c,XMr),e(cr,zMr),e(cr,u8),e(u8,QMr),e(u8,v3e),e(v3e,WMr),e(u8,HMr),e(cr,UMr),e(cr,It),M(_8,It,null),e(It,JMr),e(It,F3e),e(F3e,YMr),e(It,KMr),e(It,bc),e(bc,ZMr),e(bc,T3e),e(T3e,e4r),e(bc,o4r),e(bc,RH),e(RH,r4r),e(bc,t4r),e(It,a4r),M(C4,It,null),e(cr,n4r),e(cr,qr),M(b8,qr,null),e(qr,s4r),e(qr,M3e),e(M3e,l4r),e(qr,i4r),e(qr,dn),e(dn,d4r),e(dn,E3e),e(E3e,c4r),e(dn,f4r),e(dn,C3e),e(C3e,m4r),e(dn,g4r),e(dn,w3e),e(w3e,h4r),e(dn,p4r),e(qr,u4r),e(qr,oe),e(oe,w4),e(w4,A3e),e(A3e,_4r),e(w4,b4r),e(w4,BH),e(BH,v4r),e(w4,F4r),e(oe,T4r),e(oe,A4),e(A4,y3e),e(y3e,M4r),e(A4,E4r),e(A4,PH),e(PH,C4r),e(A4,w4r),e(oe,A4r),e(oe,y4),e(y4,L3e),e(L3e,y4r),e(y4,L4r),e(y4,IH),e(IH,x4r),e(y4,$4r),e(oe,k4r),e(oe,L4),e(L4,x3e),e(x3e,S4r),e(L4,R4r),e(L4,qH),e(qH,B4r),e(L4,P4r),e(oe,I4r),e(oe,x4),e(x4,$3e),e($3e,q4r),e(x4,N4r),e(x4,NH),e(NH,j4r),e(x4,D4r),e(oe,G4r),e(oe,$4),e($4,k3e),e(k3e,O4r),e($4,V4r),e($4,jH),e(jH,X4r),e($4,z4r),e(oe,Q4r),e(oe,k4),e(k4,S3e),e(S3e,W4r),e(k4,H4r),e(k4,DH),e(DH,U4r),e(k4,J4r),e(oe,Y4r),e(oe,S4),e(S4,R3e),e(R3e,K4r),e(S4,Z4r),e(S4,GH),e(GH,eEr),e(S4,oEr),e(oe,rEr),e(oe,R4),e(R4,B3e),e(B3e,tEr),e(R4,aEr),e(R4,OH),e(OH,nEr),e(R4,sEr),e(oe,lEr),e(oe,B4),e(B4,P3e),e(P3e,iEr),e(B4,dEr),e(B4,VH),e(VH,cEr),e(B4,fEr),e(oe,mEr),e(oe,P4),e(P4,I3e),e(I3e,gEr),e(P4,hEr),e(P4,XH),e(XH,pEr),e(P4,uEr),e(oe,_Er),e(oe,I4),e(I4,q3e),e(q3e,bEr),e(I4,vEr),e(I4,zH),e(zH,FEr),e(I4,TEr),e(oe,MEr),e(oe,q4),e(q4,N3e),e(N3e,EEr),e(q4,CEr),e(q4,QH),e(QH,wEr),e(q4,AEr),e(oe,yEr),e(oe,N4),e(N4,j3e),e(j3e,LEr),e(N4,xEr),e(N4,WH),e(WH,$Er),e(N4,kEr),e(oe,SEr),e(oe,j4),e(j4,D3e),e(D3e,REr),e(j4,BEr),e(j4,HH),e(HH,PEr),e(j4,IEr),e(oe,qEr),e(oe,D4),e(D4,G3e),e(G3e,NEr),e(D4,jEr),e(D4,UH),e(UH,DEr),e(D4,GEr),e(oe,OEr),e(oe,G4),e(G4,O3e),e(O3e,VEr),e(G4,XEr),e(G4,JH),e(JH,zEr),e(G4,QEr),e(oe,WEr),e(oe,O4),e(O4,V3e),e(V3e,HEr),e(O4,UEr),e(O4,YH),e(YH,JEr),e(O4,YEr),e(oe,KEr),e(oe,V4),e(V4,X3e),e(X3e,ZEr),e(V4,e5r),e(V4,KH),e(KH,o5r),e(V4,r5r),e(oe,t5r),e(oe,X4),e(X4,z3e),e(z3e,a5r),e(X4,n5r),e(X4,ZH),e(ZH,s5r),e(X4,l5r),e(oe,i5r),e(oe,z4),e(z4,Q3e),e(Q3e,d5r),e(z4,c5r),e(z4,eU),e(eU,f5r),e(z4,m5r),e(oe,g5r),e(oe,Q4),e(Q4,W3e),e(W3e,h5r),e(Q4,p5r),e(Q4,oU),e(oU,u5r),e(Q4,_5r),e(oe,b5r),e(oe,W4),e(W4,H3e),e(H3e,v5r),e(W4,F5r),e(W4,rU),e(rU,T5r),e(W4,M5r),e(oe,E5r),e(oe,H4),e(H4,U3e),e(U3e,C5r),e(H4,w5r),e(H4,tU),e(tU,A5r),e(H4,y5r),e(oe,L5r),e(oe,U4),e(U4,J3e),e(J3e,x5r),e(U4,$5r),e(U4,aU),e(aU,k5r),e(U4,S5r),e(qr,R5r),M(J4,qr,null),b(f,NPe,_),b(f,vc,_),e(vc,Y4),e(Y4,Y3e),M(v8,Y3e,null),e(vc,B5r),e(vc,K3e),e(K3e,P5r),b(f,jPe,_),b(f,fr,_),M(F8,fr,null),e(fr,I5r),e(fr,Fc),e(Fc,q5r),e(Fc,nU),e(nU,N5r),e(Fc,j5r),e(Fc,sU),e(sU,D5r),e(Fc,G5r),e(fr,O5r),e(fr,T8),e(T8,V5r),e(T8,Z3e),e(Z3e,X5r),e(T8,z5r),e(fr,Q5r),e(fr,qt),M(M8,qt,null),e(qt,W5r),e(qt,eve),e(eve,H5r),e(qt,U5r),e(qt,Tc),e(Tc,J5r),e(Tc,ove),e(ove,Y5r),e(Tc,K5r),e(Tc,lU),e(lU,Z5r),e(Tc,eCr),e(qt,oCr),M(K4,qt,null),e(fr,rCr),e(fr,Nr),M(E8,Nr,null),e(Nr,tCr),e(Nr,rve),e(rve,aCr),e(Nr,nCr),e(Nr,cn),e(cn,sCr),e(cn,tve),e(tve,lCr),e(cn,iCr),e(cn,ave),e(ave,dCr),e(cn,cCr),e(cn,nve),e(nve,fCr),e(cn,mCr),e(Nr,gCr),e(Nr,ke),e(ke,Z4),e(Z4,sve),e(sve,hCr),e(Z4,pCr),e(Z4,iU),e(iU,uCr),e(Z4,_Cr),e(ke,bCr),e(ke,eE),e(eE,lve),e(lve,vCr),e(eE,FCr),e(eE,dU),e(dU,TCr),e(eE,MCr),e(ke,ECr),e(ke,oE),e(oE,ive),e(ive,CCr),e(oE,wCr),e(oE,cU),e(cU,ACr),e(oE,yCr),e(ke,LCr),e(ke,rE),e(rE,dve),e(dve,xCr),e(rE,$Cr),e(rE,fU),e(fU,kCr),e(rE,SCr),e(ke,RCr),e(ke,tE),e(tE,cve),e(cve,BCr),e(tE,PCr),e(tE,mU),e(mU,ICr),e(tE,qCr),e(ke,NCr),e(ke,aE),e(aE,fve),e(fve,jCr),e(aE,DCr),e(aE,gU),e(gU,GCr),e(aE,OCr),e(ke,VCr),e(ke,nE),e(nE,mve),e(mve,XCr),e(nE,zCr),e(nE,hU),e(hU,QCr),e(nE,WCr),e(ke,HCr),e(ke,sE),e(sE,gve),e(gve,UCr),e(sE,JCr),e(sE,pU),e(pU,YCr),e(sE,KCr),e(ke,ZCr),e(ke,lE),e(lE,hve),e(hve,ewr),e(lE,owr),e(lE,uU),e(uU,rwr),e(lE,twr),e(Nr,awr),M(iE,Nr,null),b(f,DPe,_),b(f,Mc,_),e(Mc,dE),e(dE,pve),M(C8,pve,null),e(Mc,nwr),e(Mc,uve),e(uve,swr),b(f,GPe,_),b(f,mr,_),M(w8,mr,null),e(mr,lwr),e(mr,Ec),e(Ec,iwr),e(Ec,_U),e(_U,dwr),e(Ec,cwr),e(Ec,bU),e(bU,fwr),e(Ec,mwr),e(mr,gwr),e(mr,A8),e(A8,hwr),e(A8,_ve),e(_ve,pwr),e(A8,uwr),e(mr,_wr),e(mr,Nt),M(y8,Nt,null),e(Nt,bwr),e(Nt,bve),e(bve,vwr),e(Nt,Fwr),e(Nt,Cc),e(Cc,Twr),e(Cc,vve),e(vve,Mwr),e(Cc,Ewr),e(Cc,vU),e(vU,Cwr),e(Cc,wwr),e(Nt,Awr),M(cE,Nt,null),e(mr,ywr),e(mr,jr),M(L8,jr,null),e(jr,Lwr),e(jr,Fve),e(Fve,xwr),e(jr,$wr),e(jr,fn),e(fn,kwr),e(fn,Tve),e(Tve,Swr),e(fn,Rwr),e(fn,Mve),e(Mve,Bwr),e(fn,Pwr),e(fn,Eve),e(Eve,Iwr),e(fn,qwr),e(jr,Nwr),e(jr,Me),e(Me,fE),e(fE,Cve),e(Cve,jwr),e(fE,Dwr),e(fE,FU),e(FU,Gwr),e(fE,Owr),e(Me,Vwr),e(Me,mE),e(mE,wve),e(wve,Xwr),e(mE,zwr),e(mE,TU),e(TU,Qwr),e(mE,Wwr),e(Me,Hwr),e(Me,gE),e(gE,Ave),e(Ave,Uwr),e(gE,Jwr),e(gE,MU),e(MU,Ywr),e(gE,Kwr),e(Me,Zwr),e(Me,hE),e(hE,yve),e(yve,eAr),e(hE,oAr),e(hE,EU),e(EU,rAr),e(hE,tAr),e(Me,aAr),e(Me,pE),e(pE,Lve),e(Lve,nAr),e(pE,sAr),e(pE,CU),e(CU,lAr),e(pE,iAr),e(Me,dAr),e(Me,uE),e(uE,xve),e(xve,cAr),e(uE,fAr),e(uE,wU),e(wU,mAr),e(uE,gAr),e(Me,hAr),e(Me,_E),e(_E,$ve),e($ve,pAr),e(_E,uAr),e(_E,AU),e(AU,_Ar),e(_E,bAr),e(Me,vAr),e(Me,bE),e(bE,kve),e(kve,FAr),e(bE,TAr),e(bE,yU),e(yU,MAr),e(bE,EAr),e(Me,CAr),e(Me,vE),e(vE,Sve),e(Sve,wAr),e(vE,AAr),e(vE,LU),e(LU,yAr),e(vE,LAr),e(Me,xAr),e(Me,FE),e(FE,Rve),e(Rve,$Ar),e(FE,kAr),e(FE,xU),e(xU,SAr),e(FE,RAr),e(Me,BAr),e(Me,TE),e(TE,Bve),e(Bve,PAr),e(TE,IAr),e(TE,$U),e($U,qAr),e(TE,NAr),e(Me,jAr),e(Me,ME),e(ME,Pve),e(Pve,DAr),e(ME,GAr),e(ME,kU),e(kU,OAr),e(ME,VAr),e(jr,XAr),M(EE,jr,null),b(f,OPe,_),b(f,wc,_),e(wc,CE),e(CE,Ive),M(x8,Ive,null),e(wc,zAr),e(wc,qve),e(qve,QAr),b(f,VPe,_),b(f,gr,_),M($8,gr,null),e(gr,WAr),e(gr,Ac),e(Ac,HAr),e(Ac,SU),e(SU,UAr),e(Ac,JAr),e(Ac,RU),e(RU,YAr),e(Ac,KAr),e(gr,ZAr),e(gr,k8),e(k8,e6r),e(k8,Nve),e(Nve,o6r),e(k8,r6r),e(gr,t6r),e(gr,jt),M(S8,jt,null),e(jt,a6r),e(jt,jve),e(jve,n6r),e(jt,s6r),e(jt,yc),e(yc,l6r),e(yc,Dve),e(Dve,i6r),e(yc,d6r),e(yc,BU),e(BU,c6r),e(yc,f6r),e(jt,m6r),M(wE,jt,null),e(gr,g6r),e(gr,Dr),M(R8,Dr,null),e(Dr,h6r),e(Dr,Gve),e(Gve,p6r),e(Dr,u6r),e(Dr,mn),e(mn,_6r),e(mn,Ove),e(Ove,b6r),e(mn,v6r),e(mn,Vve),e(Vve,F6r),e(mn,T6r),e(mn,Xve),e(Xve,M6r),e(mn,E6r),e(Dr,C6r),e(Dr,Le),e(Le,AE),e(AE,zve),e(zve,w6r),e(AE,A6r),e(AE,PU),e(PU,y6r),e(AE,L6r),e(Le,x6r),e(Le,yE),e(yE,Qve),e(Qve,$6r),e(yE,k6r),e(yE,IU),e(IU,S6r),e(yE,R6r),e(Le,B6r),e(Le,LE),e(LE,Wve),e(Wve,P6r),e(LE,I6r),e(LE,qU),e(qU,q6r),e(LE,N6r),e(Le,j6r),e(Le,xE),e(xE,Hve),e(Hve,D6r),e(xE,G6r),e(xE,NU),e(NU,O6r),e(xE,V6r),e(Le,X6r),e(Le,$E),e($E,Uve),e(Uve,z6r),e($E,Q6r),e($E,jU),e(jU,W6r),e($E,H6r),e(Le,U6r),e(Le,kE),e(kE,Jve),e(Jve,J6r),e(kE,Y6r),e(kE,DU),e(DU,K6r),e(kE,Z6r),e(Le,eyr),e(Le,SE),e(SE,Yve),e(Yve,oyr),e(SE,ryr),e(SE,GU),e(GU,tyr),e(SE,ayr),e(Le,nyr),e(Le,RE),e(RE,Kve),e(Kve,syr),e(RE,lyr),e(RE,OU),e(OU,iyr),e(RE,dyr),e(Le,cyr),e(Le,BE),e(BE,Zve),e(Zve,fyr),e(BE,myr),e(BE,VU),e(VU,gyr),e(BE,hyr),e(Le,pyr),e(Le,PE),e(PE,eFe),e(eFe,uyr),e(PE,_yr),e(PE,XU),e(XU,byr),e(PE,vyr),e(Dr,Fyr),M(IE,Dr,null),b(f,XPe,_),b(f,Lc,_),e(Lc,qE),e(qE,oFe),M(B8,oFe,null),e(Lc,Tyr),e(Lc,rFe),e(rFe,Myr),b(f,zPe,_),b(f,hr,_),M(P8,hr,null),e(hr,Eyr),e(hr,xc),e(xc,Cyr),e(xc,zU),e(zU,wyr),e(xc,Ayr),e(xc,QU),e(QU,yyr),e(xc,Lyr),e(hr,xyr),e(hr,I8),e(I8,$yr),e(I8,tFe),e(tFe,kyr),e(I8,Syr),e(hr,Ryr),e(hr,Dt),M(q8,Dt,null),e(Dt,Byr),e(Dt,aFe),e(aFe,Pyr),e(Dt,Iyr),e(Dt,$c),e($c,qyr),e($c,nFe),e(nFe,Nyr),e($c,jyr),e($c,WU),e(WU,Dyr),e($c,Gyr),e(Dt,Oyr),M(NE,Dt,null),e(hr,Vyr),e(hr,Gr),M(N8,Gr,null),e(Gr,Xyr),e(Gr,sFe),e(sFe,zyr),e(Gr,Qyr),e(Gr,gn),e(gn,Wyr),e(gn,lFe),e(lFe,Hyr),e(gn,Uyr),e(gn,iFe),e(iFe,Jyr),e(gn,Yyr),e(gn,dFe),e(dFe,Kyr),e(gn,Zyr),e(Gr,eLr),e(Gr,Se),e(Se,jE),e(jE,cFe),e(cFe,oLr),e(jE,rLr),e(jE,HU),e(HU,tLr),e(jE,aLr),e(Se,nLr),e(Se,DE),e(DE,fFe),e(fFe,sLr),e(DE,lLr),e(DE,UU),e(UU,iLr),e(DE,dLr),e(Se,cLr),e(Se,GE),e(GE,mFe),e(mFe,fLr),e(GE,mLr),e(GE,JU),e(JU,gLr),e(GE,hLr),e(Se,pLr),e(Se,OE),e(OE,gFe),e(gFe,uLr),e(OE,_Lr),e(OE,YU),e(YU,bLr),e(OE,vLr),e(Se,FLr),e(Se,VE),e(VE,hFe),e(hFe,TLr),e(VE,MLr),e(VE,KU),e(KU,ELr),e(VE,CLr),e(Se,wLr),e(Se,XE),e(XE,pFe),e(pFe,ALr),e(XE,yLr),e(XE,ZU),e(ZU,LLr),e(XE,xLr),e(Se,$Lr),e(Se,zE),e(zE,uFe),e(uFe,kLr),e(zE,SLr),e(zE,eJ),e(eJ,RLr),e(zE,BLr),e(Se,PLr),e(Se,QE),e(QE,_Fe),e(_Fe,ILr),e(QE,qLr),e(QE,oJ),e(oJ,NLr),e(QE,jLr),e(Se,DLr),e(Se,WE),e(WE,bFe),e(bFe,GLr),e(WE,OLr),e(WE,rJ),e(rJ,VLr),e(WE,XLr),e(Gr,zLr),M(HE,Gr,null),b(f,QPe,_),b(f,kc,_),e(kc,UE),e(UE,vFe),M(j8,vFe,null),e(kc,QLr),e(kc,FFe),e(FFe,WLr),b(f,WPe,_),b(f,pr,_),M(D8,pr,null),e(pr,HLr),e(pr,Sc),e(Sc,ULr),e(Sc,tJ),e(tJ,JLr),e(Sc,YLr),e(Sc,aJ),e(aJ,KLr),e(Sc,ZLr),e(pr,e8r),e(pr,G8),e(G8,o8r),e(G8,TFe),e(TFe,r8r),e(G8,t8r),e(pr,a8r),e(pr,Gt),M(O8,Gt,null),e(Gt,n8r),e(Gt,MFe),e(MFe,s8r),e(Gt,l8r),e(Gt,Rc),e(Rc,i8r),e(Rc,EFe),e(EFe,d8r),e(Rc,c8r),e(Rc,nJ),e(nJ,f8r),e(Rc,m8r),e(Gt,g8r),M(JE,Gt,null),e(pr,h8r),e(pr,Or),M(V8,Or,null),e(Or,p8r),e(Or,CFe),e(CFe,u8r),e(Or,_8r),e(Or,hn),e(hn,b8r),e(hn,wFe),e(wFe,v8r),e(hn,F8r),e(hn,AFe),e(AFe,T8r),e(hn,M8r),e(hn,yFe),e(yFe,E8r),e(hn,C8r),e(Or,w8r),e(Or,xe),e(xe,YE),e(YE,LFe),e(LFe,A8r),e(YE,y8r),e(YE,sJ),e(sJ,L8r),e(YE,x8r),e(xe,$8r),e(xe,KE),e(KE,xFe),e(xFe,k8r),e(KE,S8r),e(KE,lJ),e(lJ,R8r),e(KE,B8r),e(xe,P8r),e(xe,ZE),e(ZE,$Fe),e($Fe,I8r),e(ZE,q8r),e(ZE,iJ),e(iJ,N8r),e(ZE,j8r),e(xe,D8r),e(xe,e5),e(e5,kFe),e(kFe,G8r),e(e5,O8r),e(e5,dJ),e(dJ,V8r),e(e5,X8r),e(xe,z8r),e(xe,o5),e(o5,SFe),e(SFe,Q8r),e(o5,W8r),e(o5,cJ),e(cJ,H8r),e(o5,U8r),e(xe,J8r),e(xe,r5),e(r5,RFe),e(RFe,Y8r),e(r5,K8r),e(r5,fJ),e(fJ,Z8r),e(r5,exr),e(xe,oxr),e(xe,t5),e(t5,BFe),e(BFe,rxr),e(t5,txr),e(t5,mJ),e(mJ,axr),e(t5,nxr),e(xe,sxr),e(xe,a5),e(a5,PFe),e(PFe,lxr),e(a5,ixr),e(a5,gJ),e(gJ,dxr),e(a5,cxr),e(xe,fxr),e(xe,n5),e(n5,IFe),e(IFe,mxr),e(n5,gxr),e(n5,hJ),e(hJ,hxr),e(n5,pxr),e(xe,uxr),e(xe,s5),e(s5,qFe),e(qFe,_xr),e(s5,bxr),e(s5,pJ),e(pJ,vxr),e(s5,Fxr),e(Or,Txr),M(l5,Or,null),b(f,HPe,_),b(f,Bc,_),e(Bc,i5),e(i5,NFe),M(X8,NFe,null),e(Bc,Mxr),e(Bc,jFe),e(jFe,Exr),b(f,UPe,_),b(f,ur,_),M(z8,ur,null),e(ur,Cxr),e(ur,Pc),e(Pc,wxr),e(Pc,uJ),e(uJ,Axr),e(Pc,yxr),e(Pc,_J),e(_J,Lxr),e(Pc,xxr),e(ur,$xr),e(ur,Q8),e(Q8,kxr),e(Q8,DFe),e(DFe,Sxr),e(Q8,Rxr),e(ur,Bxr),e(ur,Ot),M(W8,Ot,null),e(Ot,Pxr),e(Ot,GFe),e(GFe,Ixr),e(Ot,qxr),e(Ot,Ic),e(Ic,Nxr),e(Ic,OFe),e(OFe,jxr),e(Ic,Dxr),e(Ic,bJ),e(bJ,Gxr),e(Ic,Oxr),e(Ot,Vxr),M(d5,Ot,null),e(ur,Xxr),e(ur,Vr),M(H8,Vr,null),e(Vr,zxr),e(Vr,VFe),e(VFe,Qxr),e(Vr,Wxr),e(Vr,pn),e(pn,Hxr),e(pn,XFe),e(XFe,Uxr),e(pn,Jxr),e(pn,zFe),e(zFe,Yxr),e(pn,Kxr),e(pn,QFe),e(QFe,Zxr),e(pn,e9r),e(Vr,o9r),e(Vr,$e),e($e,c5),e(c5,WFe),e(WFe,r9r),e(c5,t9r),e(c5,vJ),e(vJ,a9r),e(c5,n9r),e($e,s9r),e($e,f5),e(f5,HFe),e(HFe,l9r),e(f5,i9r),e(f5,FJ),e(FJ,d9r),e(f5,c9r),e($e,f9r),e($e,m5),e(m5,UFe),e(UFe,m9r),e(m5,g9r),e(m5,TJ),e(TJ,h9r),e(m5,p9r),e($e,u9r),e($e,g5),e(g5,JFe),e(JFe,_9r),e(g5,b9r),e(g5,MJ),e(MJ,v9r),e(g5,F9r),e($e,T9r),e($e,h5),e(h5,YFe),e(YFe,M9r),e(h5,E9r),e(h5,EJ),e(EJ,C9r),e(h5,w9r),e($e,A9r),e($e,p5),e(p5,KFe),e(KFe,y9r),e(p5,L9r),e(p5,CJ),e(CJ,x9r),e(p5,$9r),e($e,k9r),e($e,u5),e(u5,ZFe),e(ZFe,S9r),e(u5,R9r),e(u5,wJ),e(wJ,B9r),e(u5,P9r),e($e,I9r),e($e,_5),e(_5,e0e),e(e0e,q9r),e(_5,N9r),e(_5,AJ),e(AJ,j9r),e(_5,D9r),e($e,G9r),e($e,b5),e(b5,o0e),e(o0e,O9r),e(b5,V9r),e(b5,yJ),e(yJ,X9r),e(b5,z9r),e($e,Q9r),e($e,v5),e(v5,r0e),e(r0e,W9r),e(v5,H9r),e(v5,LJ),e(LJ,U9r),e(v5,J9r),e(Vr,Y9r),M(F5,Vr,null),b(f,JPe,_),b(f,qc,_),e(qc,T5),e(T5,t0e),M(U8,t0e,null),e(qc,K9r),e(qc,a0e),e(a0e,Z9r),b(f,YPe,_),b(f,_r,_),M(J8,_r,null),e(_r,e$r),e(_r,Nc),e(Nc,o$r),e(Nc,xJ),e(xJ,r$r),e(Nc,t$r),e(Nc,$J),e($J,a$r),e(Nc,n$r),e(_r,s$r),e(_r,Y8),e(Y8,l$r),e(Y8,n0e),e(n0e,i$r),e(Y8,d$r),e(_r,c$r),e(_r,Vt),M(K8,Vt,null),e(Vt,f$r),e(Vt,s0e),e(s0e,m$r),e(Vt,g$r),e(Vt,jc),e(jc,h$r),e(jc,l0e),e(l0e,p$r),e(jc,u$r),e(jc,kJ),e(kJ,_$r),e(jc,b$r),e(Vt,v$r),M(M5,Vt,null),e(_r,F$r),e(_r,Xr),M(Z8,Xr,null),e(Xr,T$r),e(Xr,i0e),e(i0e,M$r),e(Xr,E$r),e(Xr,un),e(un,C$r),e(un,d0e),e(d0e,w$r),e(un,A$r),e(un,c0e),e(c0e,y$r),e(un,L$r),e(un,f0e),e(f0e,x$r),e(un,$$r),e(Xr,k$r),e(Xr,De),e(De,E5),e(E5,m0e),e(m0e,S$r),e(E5,R$r),e(E5,SJ),e(SJ,B$r),e(E5,P$r),e(De,I$r),e(De,C5),e(C5,g0e),e(g0e,q$r),e(C5,N$r),e(C5,RJ),e(RJ,j$r),e(C5,D$r),e(De,G$r),e(De,w5),e(w5,h0e),e(h0e,O$r),e(w5,V$r),e(w5,BJ),e(BJ,X$r),e(w5,z$r),e(De,Q$r),e(De,A5),e(A5,p0e),e(p0e,W$r),e(A5,H$r),e(A5,PJ),e(PJ,U$r),e(A5,J$r),e(De,Y$r),e(De,y5),e(y5,u0e),e(u0e,K$r),e(y5,Z$r),e(y5,IJ),e(IJ,ekr),e(y5,okr),e(De,rkr),e(De,L5),e(L5,_0e),e(_0e,tkr),e(L5,akr),e(L5,qJ),e(qJ,nkr),e(L5,skr),e(De,lkr),e(De,x5),e(x5,b0e),e(b0e,ikr),e(x5,dkr),e(x5,NJ),e(NJ,ckr),e(x5,fkr),e(De,mkr),e(De,$5),e($5,v0e),e(v0e,gkr),e($5,hkr),e($5,jJ),e(jJ,pkr),e($5,ukr),e(Xr,_kr),M(k5,Xr,null),b(f,KPe,_),b(f,Dc,_),e(Dc,S5),e(S5,F0e),M(ex,F0e,null),e(Dc,bkr),e(Dc,T0e),e(T0e,vkr),b(f,ZPe,_),b(f,br,_),M(ox,br,null),e(br,Fkr),e(br,Gc),e(Gc,Tkr),e(Gc,DJ),e(DJ,Mkr),e(Gc,Ekr),e(Gc,GJ),e(GJ,Ckr),e(Gc,wkr),e(br,Akr),e(br,rx),e(rx,ykr),e(rx,M0e),e(M0e,Lkr),e(rx,xkr),e(br,$kr),e(br,Xt),M(tx,Xt,null),e(Xt,kkr),e(Xt,E0e),e(E0e,Skr),e(Xt,Rkr),e(Xt,Oc),e(Oc,Bkr),e(Oc,C0e),e(C0e,Pkr),e(Oc,Ikr),e(Oc,OJ),e(OJ,qkr),e(Oc,Nkr),e(Xt,jkr),M(R5,Xt,null),e(br,Dkr),e(br,zr),M(ax,zr,null),e(zr,Gkr),e(zr,w0e),e(w0e,Okr),e(zr,Vkr),e(zr,_n),e(_n,Xkr),e(_n,A0e),e(A0e,zkr),e(_n,Qkr),e(_n,y0e),e(y0e,Wkr),e(_n,Hkr),e(_n,L0e),e(L0e,Ukr),e(_n,Jkr),e(zr,Ykr),e(zr,Ge),e(Ge,B5),e(B5,x0e),e(x0e,Kkr),e(B5,Zkr),e(B5,VJ),e(VJ,eSr),e(B5,oSr),e(Ge,rSr),e(Ge,P5),e(P5,$0e),e($0e,tSr),e(P5,aSr),e(P5,XJ),e(XJ,nSr),e(P5,sSr),e(Ge,lSr),e(Ge,I5),e(I5,k0e),e(k0e,iSr),e(I5,dSr),e(I5,zJ),e(zJ,cSr),e(I5,fSr),e(Ge,mSr),e(Ge,q5),e(q5,S0e),e(S0e,gSr),e(q5,hSr),e(q5,QJ),e(QJ,pSr),e(q5,uSr),e(Ge,_Sr),e(Ge,N5),e(N5,R0e),e(R0e,bSr),e(N5,vSr),e(N5,WJ),e(WJ,FSr),e(N5,TSr),e(Ge,MSr),e(Ge,j5),e(j5,B0e),e(B0e,ESr),e(j5,CSr),e(j5,HJ),e(HJ,wSr),e(j5,ASr),e(Ge,ySr),e(Ge,D5),e(D5,P0e),e(P0e,LSr),e(D5,xSr),e(D5,UJ),e(UJ,$Sr),e(D5,kSr),e(Ge,SSr),e(Ge,G5),e(G5,I0e),e(I0e,RSr),e(G5,BSr),e(G5,JJ),e(JJ,PSr),e(G5,ISr),e(zr,qSr),M(O5,zr,null),b(f,eIe,_),b(f,Vc,_),e(Vc,V5),e(V5,q0e),M(nx,q0e,null),e(Vc,NSr),e(Vc,N0e),e(N0e,jSr),b(f,oIe,_),b(f,vr,_),M(sx,vr,null),e(vr,DSr),e(vr,Xc),e(Xc,GSr),e(Xc,YJ),e(YJ,OSr),e(Xc,VSr),e(Xc,KJ),e(KJ,XSr),e(Xc,zSr),e(vr,QSr),e(vr,lx),e(lx,WSr),e(lx,j0e),e(j0e,HSr),e(lx,USr),e(vr,JSr),e(vr,zt),M(ix,zt,null),e(zt,YSr),e(zt,D0e),e(D0e,KSr),e(zt,ZSr),e(zt,zc),e(zc,eRr),e(zc,G0e),e(G0e,oRr),e(zc,rRr),e(zc,ZJ),e(ZJ,tRr),e(zc,aRr),e(zt,nRr),M(X5,zt,null),e(vr,sRr),e(vr,Qr),M(dx,Qr,null),e(Qr,lRr),e(Qr,O0e),e(O0e,iRr),e(Qr,dRr),e(Qr,bn),e(bn,cRr),e(bn,V0e),e(V0e,fRr),e(bn,mRr),e(bn,X0e),e(X0e,gRr),e(bn,hRr),e(bn,z0e),e(z0e,pRr),e(bn,uRr),e(Qr,_Rr),e(Qr,Q0e),e(Q0e,z5),e(z5,W0e),e(W0e,bRr),e(z5,vRr),e(z5,eY),e(eY,FRr),e(z5,TRr),e(Qr,MRr),M(Q5,Qr,null),b(f,rIe,_),b(f,Qc,_),e(Qc,W5),e(W5,H0e),M(cx,H0e,null),e(Qc,ERr),e(Qc,U0e),e(U0e,CRr),b(f,tIe,_),b(f,Fr,_),M(fx,Fr,null),e(Fr,wRr),e(Fr,Wc),e(Wc,ARr),e(Wc,oY),e(oY,yRr),e(Wc,LRr),e(Wc,rY),e(rY,xRr),e(Wc,$Rr),e(Fr,kRr),e(Fr,mx),e(mx,SRr),e(mx,J0e),e(J0e,RRr),e(mx,BRr),e(Fr,PRr),e(Fr,Qt),M(gx,Qt,null),e(Qt,IRr),e(Qt,Y0e),e(Y0e,qRr),e(Qt,NRr),e(Qt,Hc),e(Hc,jRr),e(Hc,K0e),e(K0e,DRr),e(Hc,GRr),e(Hc,tY),e(tY,ORr),e(Hc,VRr),e(Qt,XRr),M(H5,Qt,null),e(Fr,zRr),e(Fr,Wr),M(hx,Wr,null),e(Wr,QRr),e(Wr,Z0e),e(Z0e,WRr),e(Wr,HRr),e(Wr,vn),e(vn,URr),e(vn,eTe),e(eTe,JRr),e(vn,YRr),e(vn,oTe),e(oTe,KRr),e(vn,ZRr),e(vn,rTe),e(rTe,eBr),e(vn,oBr),e(Wr,rBr),e(Wr,px),e(px,U5),e(U5,tTe),e(tTe,tBr),e(U5,aBr),e(U5,aY),e(aY,nBr),e(U5,sBr),e(px,lBr),e(px,J5),e(J5,aTe),e(aTe,iBr),e(J5,dBr),e(J5,nY),e(nY,cBr),e(J5,fBr),e(Wr,mBr),M(Y5,Wr,null),b(f,aIe,_),b(f,Uc,_),e(Uc,K5),e(K5,nTe),M(ux,nTe,null),e(Uc,gBr),e(Uc,sTe),e(sTe,hBr),b(f,nIe,_),b(f,Tr,_),M(_x,Tr,null),e(Tr,pBr),e(Tr,Jc),e(Jc,uBr),e(Jc,sY),e(sY,_Br),e(Jc,bBr),e(Jc,lY),e(lY,vBr),e(Jc,FBr),e(Tr,TBr),e(Tr,bx),e(bx,MBr),e(bx,lTe),e(lTe,EBr),e(bx,CBr),e(Tr,wBr),e(Tr,Wt),M(vx,Wt,null),e(Wt,ABr),e(Wt,iTe),e(iTe,yBr),e(Wt,LBr),e(Wt,Yc),e(Yc,xBr),e(Yc,dTe),e(dTe,$Br),e(Yc,kBr),e(Yc,iY),e(iY,SBr),e(Yc,RBr),e(Wt,BBr),M(Z5,Wt,null),e(Tr,PBr),e(Tr,Hr),M(Fx,Hr,null),e(Hr,IBr),e(Hr,cTe),e(cTe,qBr),e(Hr,NBr),e(Hr,Fn),e(Fn,jBr),e(Fn,fTe),e(fTe,DBr),e(Fn,GBr),e(Fn,mTe),e(mTe,OBr),e(Fn,VBr),e(Fn,gTe),e(gTe,XBr),e(Fn,zBr),e(Hr,QBr),e(Hr,hTe),e(hTe,eC),e(eC,pTe),e(pTe,WBr),e(eC,HBr),e(eC,dY),e(dY,UBr),e(eC,JBr),e(Hr,YBr),M(oC,Hr,null),sIe=!0},p(f,[_]){const Tx={};_&2&&(Tx.$$scope={dirty:_,ctx:f}),sf.$set(Tx);const uTe={};_&2&&(uTe.$$scope={dirty:_,ctx:f}),ag.$set(uTe);const _Te={};_&2&&(_Te.$$scope={dirty:_,ctx:f}),Ig.$set(_Te);const bTe={};_&2&&(bTe.$$scope={dirty:_,ctx:f}),dh.$set(bTe);const Mx={};_&2&&(Mx.$$scope={dirty:_,ctx:f}),ch.$set(Mx);const vTe={};_&2&&(vTe.$$scope={dirty:_,ctx:f}),yh.$set(vTe);const Tn={};_&2&&(Tn.$$scope={dirty:_,ctx:f}),Lh.$set(Tn);const FTe={};_&2&&(FTe.$$scope={dirty:_,ctx:f}),kh.$set(FTe);const TTe={};_&2&&(TTe.$$scope={dirty:_,ctx:f}),vu.$set(TTe);const MTe={};_&2&&(MTe.$$scope={dirty:_,ctx:f}),Tu.$set(MTe);const Ex={};_&2&&(Ex.$$scope={dirty:_,ctx:f}),i_.$set(Ex);const ETe={};_&2&&(ETe.$$scope={dirty:_,ctx:f}),c_.$set(ETe);const Cx={};_&2&&(Cx.$$scope={dirty:_,ctx:f}),W_.$set(Cx);const CTe={};_&2&&(CTe.$$scope={dirty:_,ctx:f}),U_.$set(CTe);const wx={};_&2&&(wx.$$scope={dirty:_,ctx:f}),S1.$set(wx);const wTe={};_&2&&(wTe.$$scope={dirty:_,ctx:f}),B1.$set(wTe);const ATe={};_&2&&(ATe.$$scope={dirty:_,ctx:f}),Z1.$set(ATe);const yTe={};_&2&&(yTe.$$scope={dirty:_,ctx:f}),o7.$set(yTe);const Kc={};_&2&&(Kc.$$scope={dirty:_,ctx:f}),J7.$set(Kc);const LTe={};_&2&&(LTe.$$scope={dirty:_,ctx:f}),K7.$set(LTe);const xTe={};_&2&&(xTe.$$scope={dirty:_,ctx:f}),Lb.$set(xTe);const $Te={};_&2&&($Te.$$scope={dirty:_,ctx:f}),$b.$set($Te);const Ax={};_&2&&(Ax.$$scope={dirty:_,ctx:f}),qb.$set(Ax);const kTe={};_&2&&(kTe.$$scope={dirty:_,ctx:f}),jb.$set(kTe);const STe={};_&2&&(STe.$$scope={dirty:_,ctx:f}),F2.$set(STe);const RTe={};_&2&&(RTe.$$scope={dirty:_,ctx:f}),M2.$set(RTe);const Jr={};_&2&&(Jr.$$scope={dirty:_,ctx:f}),d3.$set(Jr);const yx={};_&2&&(yx.$$scope={dirty:_,ctx:f}),f3.$set(yx);const BTe={};_&2&&(BTe.$$scope={dirty:_,ctx:f}),h3.$set(BTe);const Lx={};_&2&&(Lx.$$scope={dirty:_,ctx:f}),u3.$set(Lx);const PTe={};_&2&&(PTe.$$scope={dirty:_,ctx:f}),x3.$set(PTe);const Yr={};_&2&&(Yr.$$scope={dirty:_,ctx:f}),k3.$set(Yr);const ITe={};_&2&&(ITe.$$scope={dirty:_,ctx:f}),B3.$set(ITe);const Zc={};_&2&&(Zc.$$scope={dirty:_,ctx:f}),I3.$set(Zc);const qTe={};_&2&&(qTe.$$scope={dirty:_,ctx:f}),Q3.$set(qTe);const NTe={};_&2&&(NTe.$$scope={dirty:_,ctx:f}),H3.$set(NTe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),ev.$set(y);const rC={};_&2&&(rC.$$scope={dirty:_,ctx:f}),rv.$set(rC);const jTe={};_&2&&(jTe.$$scope={dirty:_,ctx:f}),mv.$set(jTe);const DTe={};_&2&&(DTe.$$scope={dirty:_,ctx:f}),hv.$set(DTe);const tC={};_&2&&(tC.$$scope={dirty:_,ctx:f}),bv.$set(tC);const GTe={};_&2&&(GTe.$$scope={dirty:_,ctx:f}),Fv.$set(GTe);const OTe={};_&2&&(OTe.$$scope={dirty:_,ctx:f}),Av.$set(OTe);const aC={};_&2&&(aC.$$scope={dirty:_,ctx:f}),Lv.$set(aC);const VTe={};_&2&&(VTe.$$scope={dirty:_,ctx:f}),Rv.$set(VTe);const XTe={};_&2&&(XTe.$$scope={dirty:_,ctx:f}),Pv.$set(XTe);const nC={};_&2&&(nC.$$scope={dirty:_,ctx:f}),jv.$set(nC);const zTe={};_&2&&(zTe.$$scope={dirty:_,ctx:f}),Gv.$set(zTe);const QTe={};_&2&&(QTe.$$scope={dirty:_,ctx:f}),Xv.$set(QTe);const sC={};_&2&&(sC.$$scope={dirty:_,ctx:f}),Qv.$set(sC);const WTe={};_&2&&(WTe.$$scope={dirty:_,ctx:f}),Kv.$set(WTe);const HTe={};_&2&&(HTe.$$scope={dirty:_,ctx:f}),eF.$set(HTe);const lC={};_&2&&(lC.$$scope={dirty:_,ctx:f}),tF.$set(lC);const UTe={};_&2&&(UTe.$$scope={dirty:_,ctx:f}),nF.$set(UTe);const JTe={};_&2&&(JTe.$$scope={dirty:_,ctx:f}),UF.$set(JTe);const iC={};_&2&&(iC.$$scope={dirty:_,ctx:f}),YF.$set(iC);const YTe={};_&2&&(YTe.$$scope={dirty:_,ctx:f}),T0.$set(YTe);const KTe={};_&2&&(KTe.$$scope={dirty:_,ctx:f}),E0.$set(KTe);const dC={};_&2&&(dC.$$scope={dirty:_,ctx:f}),I0.$set(dC);const ZTe={};_&2&&(ZTe.$$scope={dirty:_,ctx:f}),N0.$set(ZTe);const eMe={};_&2&&(eMe.$$scope={dirty:_,ctx:f}),G0.$set(eMe);const cC={};_&2&&(cC.$$scope={dirty:_,ctx:f}),V0.$set(cC);const oMe={};_&2&&(oMe.$$scope={dirty:_,ctx:f}),cT.$set(oMe);const rMe={};_&2&&(rMe.$$scope={dirty:_,ctx:f}),mT.$set(rMe);const fC={};_&2&&(fC.$$scope={dirty:_,ctx:f}),ET.$set(fC);const tMe={};_&2&&(tMe.$$scope={dirty:_,ctx:f}),wT.$set(tMe);const aMe={};_&2&&(aMe.$$scope={dirty:_,ctx:f}),KT.$set(aMe);const mC={};_&2&&(mC.$$scope={dirty:_,ctx:f}),eM.$set(mC);const nMe={};_&2&&(nMe.$$scope={dirty:_,ctx:f}),bM.$set(nMe);const sMe={};_&2&&(sMe.$$scope={dirty:_,ctx:f}),FM.$set(sMe);const gC={};_&2&&(gC.$$scope={dirty:_,ctx:f}),MM.$set(gC);const lMe={};_&2&&(lMe.$$scope={dirty:_,ctx:f}),CM.$set(lMe);const iMe={};_&2&&(iMe.$$scope={dirty:_,ctx:f}),zM.$set(iMe);const hC={};_&2&&(hC.$$scope={dirty:_,ctx:f}),WM.$set(hC);const dMe={};_&2&&(dMe.$$scope={dirty:_,ctx:f}),h4.$set(dMe);const cMe={};_&2&&(cMe.$$scope={dirty:_,ctx:f}),u4.$set(cMe);const pC={};_&2&&(pC.$$scope={dirty:_,ctx:f}),b4.$set(pC);const fMe={};_&2&&(fMe.$$scope={dirty:_,ctx:f}),F4.$set(fMe);const mMe={};_&2&&(mMe.$$scope={dirty:_,ctx:f}),M4.$set(mMe);const uC={};_&2&&(uC.$$scope={dirty:_,ctx:f}),C4.$set(uC);const gMe={};_&2&&(gMe.$$scope={dirty:_,ctx:f}),J4.$set(gMe);const hMe={};_&2&&(hMe.$$scope={dirty:_,ctx:f}),K4.$set(hMe);const _C={};_&2&&(_C.$$scope={dirty:_,ctx:f}),iE.$set(_C);const pMe={};_&2&&(pMe.$$scope={dirty:_,ctx:f}),cE.$set(pMe);const uMe={};_&2&&(uMe.$$scope={dirty:_,ctx:f}),EE.$set(uMe);const bC={};_&2&&(bC.$$scope={dirty:_,ctx:f}),wE.$set(bC);const _Me={};_&2&&(_Me.$$scope={dirty:_,ctx:f}),IE.$set(_Me);const bMe={};_&2&&(bMe.$$scope={dirty:_,ctx:f}),NE.$set(bMe);const vC={};_&2&&(vC.$$scope={dirty:_,ctx:f}),HE.$set(vC);const vMe={};_&2&&(vMe.$$scope={dirty:_,ctx:f}),JE.$set(vMe);const FMe={};_&2&&(FMe.$$scope={dirty:_,ctx:f}),l5.$set(FMe);const FC={};_&2&&(FC.$$scope={dirty:_,ctx:f}),d5.$set(FC);const TMe={};_&2&&(TMe.$$scope={dirty:_,ctx:f}),F5.$set(TMe);const MMe={};_&2&&(MMe.$$scope={dirty:_,ctx:f}),M5.$set(MMe);const TC={};_&2&&(TC.$$scope={dirty:_,ctx:f}),k5.$set(TC);const EMe={};_&2&&(EMe.$$scope={dirty:_,ctx:f}),R5.$set(EMe);const CMe={};_&2&&(CMe.$$scope={dirty:_,ctx:f}),O5.$set(CMe);const MC={};_&2&&(MC.$$scope={dirty:_,ctx:f}),X5.$set(MC);const wMe={};_&2&&(wMe.$$scope={dirty:_,ctx:f}),Q5.$set(wMe);const AMe={};_&2&&(AMe.$$scope={dirty:_,ctx:f}),H5.$set(AMe);const EC={};_&2&&(EC.$$scope={dirty:_,ctx:f}),Y5.$set(EC);const yMe={};_&2&&(yMe.$$scope={dirty:_,ctx:f}),Z5.$set(yMe);const LMe={};_&2&&(LMe.$$scope={dirty:_,ctx:f}),oC.$set(LMe)},i(f){sIe||(E(d.$$.fragment,f),E(va.$$.fragment,f),E(TA.$$.fragment,f),E(MA.$$.fragment,f),E(sf.$$.fragment,f),E(EA.$$.fragment,f),E(CA.$$.fragment,f),E(yA.$$.fragment,f),E(ag.$$.fragment,f),E(LA.$$.fragment,f),E(xA.$$.fragment,f),E($A.$$.fragment,f),E(RA.$$.fragment,f),E(Ig.$$.fragment,f),E(BA.$$.fragment,f),E(PA.$$.fragment,f),E(IA.$$.fragment,f),E(jA.$$.fragment,f),E(dh.$$.fragment,f),E(ch.$$.fragment,f),E(DA.$$.fragment,f),E(GA.$$.fragment,f),E(OA.$$.fragment,f),E(zA.$$.fragment,f),E(yh.$$.fragment,f),E(Lh.$$.fragment,f),E(QA.$$.fragment,f),E(WA.$$.fragment,f),E(HA.$$.fragment,f),E(JA.$$.fragment,f),E(kh.$$.fragment,f),E(YA.$$.fragment,f),E(vu.$$.fragment,f),E(KA.$$.fragment,f),E(ZA.$$.fragment,f),E(o6.$$.fragment,f),E(Tu.$$.fragment,f),E(r6.$$.fragment,f),E(i_.$$.fragment,f),E(t6.$$.fragment,f),E(a6.$$.fragment,f),E(s6.$$.fragment,f),E(c_.$$.fragment,f),E(l6.$$.fragment,f),E(W_.$$.fragment,f),E(i6.$$.fragment,f),E(d6.$$.fragment,f),E(f6.$$.fragment,f),E(U_.$$.fragment,f),E(m6.$$.fragment,f),E(S1.$$.fragment,f),E(g6.$$.fragment,f),E(h6.$$.fragment,f),E(u6.$$.fragment,f),E(B1.$$.fragment,f),E(_6.$$.fragment,f),E(Z1.$$.fragment,f),E(b6.$$.fragment,f),E(v6.$$.fragment,f),E(T6.$$.fragment,f),E(o7.$$.fragment,f),E(M6.$$.fragment,f),E(J7.$$.fragment,f),E(E6.$$.fragment,f),E(C6.$$.fragment,f),E(A6.$$.fragment,f),E(K7.$$.fragment,f),E(y6.$$.fragment,f),E(Lb.$$.fragment,f),E(L6.$$.fragment,f),E(x6.$$.fragment,f),E(k6.$$.fragment,f),E($b.$$.fragment,f),E(S6.$$.fragment,f),E(qb.$$.fragment,f),E(R6.$$.fragment,f),E(B6.$$.fragment,f),E(I6.$$.fragment,f),E(jb.$$.fragment,f),E(q6.$$.fragment,f),E(F2.$$.fragment,f),E(N6.$$.fragment,f),E(j6.$$.fragment,f),E(G6.$$.fragment,f),E(M2.$$.fragment,f),E(O6.$$.fragment,f),E(d3.$$.fragment,f),E(V6.$$.fragment,f),E(X6.$$.fragment,f),E(Q6.$$.fragment,f),E(f3.$$.fragment,f),E(W6.$$.fragment,f),E(h3.$$.fragment,f),E(H6.$$.fragment,f),E(U6.$$.fragment,f),E(Y6.$$.fragment,f),E(u3.$$.fragment,f),E(K6.$$.fragment,f),E(x3.$$.fragment,f),E(Z6.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(k3.$$.fragment,f),E(ty.$$.fragment,f),E(B3.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(I3.$$.fragment,f),E(iy.$$.fragment,f),E(Q3.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(H3.$$.fragment,f),E(gy.$$.fragment,f),E(ev.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(rv.$$.fragment,f),E(by.$$.fragment,f),E(mv.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(hv.$$.fragment,f),E(Ey.$$.fragment,f),E(bv.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(Fv.$$.fragment,f),E(xy.$$.fragment,f),E(Av.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(Lv.$$.fragment,f),E(By.$$.fragment,f),E(Rv.$$.fragment,f),E(Py.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(Pv.$$.fragment,f),E(jy.$$.fragment,f),E(jv.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(Gv.$$.fragment,f),E(zy.$$.fragment,f),E(Xv.$$.fragment,f),E(Qy.$$.fragment,f),E(Wy.$$.fragment,f),E(Uy.$$.fragment,f),E(Qv.$$.fragment,f),E(Jy.$$.fragment,f),E(Kv.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(eL.$$.fragment,f),E(eF.$$.fragment,f),E(oL.$$.fragment,f),E(tF.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(nL.$$.fragment,f),E(nF.$$.fragment,f),E(sL.$$.fragment,f),E(UF.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(cL.$$.fragment,f),E(YF.$$.fragment,f),E(fL.$$.fragment,f),E(T0.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(pL.$$.fragment,f),E(E0.$$.fragment,f),E(uL.$$.fragment,f),E(I0.$$.fragment,f),E(_L.$$.fragment,f),E(bL.$$.fragment,f),E(FL.$$.fragment,f),E(N0.$$.fragment,f),E(TL.$$.fragment,f),E(G0.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(AL.$$.fragment,f),E(V0.$$.fragment,f),E(yL.$$.fragment,f),E(cT.$$.fragment,f),E(LL.$$.fragment,f),E(xL.$$.fragment,f),E(kL.$$.fragment,f),E(mT.$$.fragment,f),E(SL.$$.fragment,f),E(ET.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(wT.$$.fragment,f),E(qL.$$.fragment,f),E(KT.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E(eM.$$.fragment,f),E(OL.$$.fragment,f),E(bM.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(QL.$$.fragment,f),E(FM.$$.fragment,f),E(WL.$$.fragment,f),E(MM.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(YL.$$.fragment,f),E(CM.$$.fragment,f),E(KL.$$.fragment,f),E(zM.$$.fragment,f),E(ZL.$$.fragment,f),E(e8.$$.fragment,f),E(r8.$$.fragment,f),E(WM.$$.fragment,f),E(t8.$$.fragment,f),E(h4.$$.fragment,f),E(a8.$$.fragment,f),E(n8.$$.fragment,f),E(l8.$$.fragment,f),E(u4.$$.fragment,f),E(i8.$$.fragment,f),E(b4.$$.fragment,f),E(d8.$$.fragment,f),E(c8.$$.fragment,f),E(m8.$$.fragment,f),E(F4.$$.fragment,f),E(g8.$$.fragment,f),E(M4.$$.fragment,f),E(h8.$$.fragment,f),E(p8.$$.fragment,f),E(_8.$$.fragment,f),E(C4.$$.fragment,f),E(b8.$$.fragment,f),E(J4.$$.fragment,f),E(v8.$$.fragment,f),E(F8.$$.fragment,f),E(M8.$$.fragment,f),E(K4.$$.fragment,f),E(E8.$$.fragment,f),E(iE.$$.fragment,f),E(C8.$$.fragment,f),E(w8.$$.fragment,f),E(y8.$$.fragment,f),E(cE.$$.fragment,f),E(L8.$$.fragment,f),E(EE.$$.fragment,f),E(x8.$$.fragment,f),E($8.$$.fragment,f),E(S8.$$.fragment,f),E(wE.$$.fragment,f),E(R8.$$.fragment,f),E(IE.$$.fragment,f),E(B8.$$.fragment,f),E(P8.$$.fragment,f),E(q8.$$.fragment,f),E(NE.$$.fragment,f),E(N8.$$.fragment,f),E(HE.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(JE.$$.fragment,f),E(V8.$$.fragment,f),E(l5.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(W8.$$.fragment,f),E(d5.$$.fragment,f),E(H8.$$.fragment,f),E(F5.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(M5.$$.fragment,f),E(Z8.$$.fragment,f),E(k5.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(R5.$$.fragment,f),E(ax.$$.fragment,f),E(O5.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(X5.$$.fragment,f),E(dx.$$.fragment,f),E(Q5.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(H5.$$.fragment,f),E(hx.$$.fragment,f),E(Y5.$$.fragment,f),E(ux.$$.fragment,f),E(_x.$$.fragment,f),E(vx.$$.fragment,f),E(Z5.$$.fragment,f),E(Fx.$$.fragment,f),E(oC.$$.fragment,f),sIe=!0)},o(f){C(d.$$.fragment,f),C(va.$$.fragment,f),C(TA.$$.fragment,f),C(MA.$$.fragment,f),C(sf.$$.fragment,f),C(EA.$$.fragment,f),C(CA.$$.fragment,f),C(yA.$$.fragment,f),C(ag.$$.fragment,f),C(LA.$$.fragment,f),C(xA.$$.fragment,f),C($A.$$.fragment,f),C(RA.$$.fragment,f),C(Ig.$$.fragment,f),C(BA.$$.fragment,f),C(PA.$$.fragment,f),C(IA.$$.fragment,f),C(jA.$$.fragment,f),C(dh.$$.fragment,f),C(ch.$$.fragment,f),C(DA.$$.fragment,f),C(GA.$$.fragment,f),C(OA.$$.fragment,f),C(zA.$$.fragment,f),C(yh.$$.fragment,f),C(Lh.$$.fragment,f),C(QA.$$.fragment,f),C(WA.$$.fragment,f),C(HA.$$.fragment,f),C(JA.$$.fragment,f),C(kh.$$.fragment,f),C(YA.$$.fragment,f),C(vu.$$.fragment,f),C(KA.$$.fragment,f),C(ZA.$$.fragment,f),C(o6.$$.fragment,f),C(Tu.$$.fragment,f),C(r6.$$.fragment,f),C(i_.$$.fragment,f),C(t6.$$.fragment,f),C(a6.$$.fragment,f),C(s6.$$.fragment,f),C(c_.$$.fragment,f),C(l6.$$.fragment,f),C(W_.$$.fragment,f),C(i6.$$.fragment,f),C(d6.$$.fragment,f),C(f6.$$.fragment,f),C(U_.$$.fragment,f),C(m6.$$.fragment,f),C(S1.$$.fragment,f),C(g6.$$.fragment,f),C(h6.$$.fragment,f),C(u6.$$.fragment,f),C(B1.$$.fragment,f),C(_6.$$.fragment,f),C(Z1.$$.fragment,f),C(b6.$$.fragment,f),C(v6.$$.fragment,f),C(T6.$$.fragment,f),C(o7.$$.fragment,f),C(M6.$$.fragment,f),C(J7.$$.fragment,f),C(E6.$$.fragment,f),C(C6.$$.fragment,f),C(A6.$$.fragment,f),C(K7.$$.fragment,f),C(y6.$$.fragment,f),C(Lb.$$.fragment,f),C(L6.$$.fragment,f),C(x6.$$.fragment,f),C(k6.$$.fragment,f),C($b.$$.fragment,f),C(S6.$$.fragment,f),C(qb.$$.fragment,f),C(R6.$$.fragment,f),C(B6.$$.fragment,f),C(I6.$$.fragment,f),C(jb.$$.fragment,f),C(q6.$$.fragment,f),C(F2.$$.fragment,f),C(N6.$$.fragment,f),C(j6.$$.fragment,f),C(G6.$$.fragment,f),C(M2.$$.fragment,f),C(O6.$$.fragment,f),C(d3.$$.fragment,f),C(V6.$$.fragment,f),C(X6.$$.fragment,f),C(Q6.$$.fragment,f),C(f3.$$.fragment,f),C(W6.$$.fragment,f),C(h3.$$.fragment,f),C(H6.$$.fragment,f),C(U6.$$.fragment,f),C(Y6.$$.fragment,f),C(u3.$$.fragment,f),C(K6.$$.fragment,f),C(x3.$$.fragment,f),C(Z6.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(k3.$$.fragment,f),C(ty.$$.fragment,f),C(B3.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(I3.$$.fragment,f),C(iy.$$.fragment,f),C(Q3.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(H3.$$.fragment,f),C(gy.$$.fragment,f),C(ev.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(rv.$$.fragment,f),C(by.$$.fragment,f),C(mv.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(hv.$$.fragment,f),C(Ey.$$.fragment,f),C(bv.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(Fv.$$.fragment,f),C(xy.$$.fragment,f),C(Av.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(Lv.$$.fragment,f),C(By.$$.fragment,f),C(Rv.$$.fragment,f),C(Py.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(Pv.$$.fragment,f),C(jy.$$.fragment,f),C(jv.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(Gv.$$.fragment,f),C(zy.$$.fragment,f),C(Xv.$$.fragment,f),C(Qy.$$.fragment,f),C(Wy.$$.fragment,f),C(Uy.$$.fragment,f),C(Qv.$$.fragment,f),C(Jy.$$.fragment,f),C(Kv.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(eL.$$.fragment,f),C(eF.$$.fragment,f),C(oL.$$.fragment,f),C(tF.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(nL.$$.fragment,f),C(nF.$$.fragment,f),C(sL.$$.fragment,f),C(UF.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(cL.$$.fragment,f),C(YF.$$.fragment,f),C(fL.$$.fragment,f),C(T0.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(pL.$$.fragment,f),C(E0.$$.fragment,f),C(uL.$$.fragment,f),C(I0.$$.fragment,f),C(_L.$$.fragment,f),C(bL.$$.fragment,f),C(FL.$$.fragment,f),C(N0.$$.fragment,f),C(TL.$$.fragment,f),C(G0.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(AL.$$.fragment,f),C(V0.$$.fragment,f),C(yL.$$.fragment,f),C(cT.$$.fragment,f),C(LL.$$.fragment,f),C(xL.$$.fragment,f),C(kL.$$.fragment,f),C(mT.$$.fragment,f),C(SL.$$.fragment,f),C(ET.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(wT.$$.fragment,f),C(qL.$$.fragment,f),C(KT.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C(eM.$$.fragment,f),C(OL.$$.fragment,f),C(bM.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(QL.$$.fragment,f),C(FM.$$.fragment,f),C(WL.$$.fragment,f),C(MM.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(YL.$$.fragment,f),C(CM.$$.fragment,f),C(KL.$$.fragment,f),C(zM.$$.fragment,f),C(ZL.$$.fragment,f),C(e8.$$.fragment,f),C(r8.$$.fragment,f),C(WM.$$.fragment,f),C(t8.$$.fragment,f),C(h4.$$.fragment,f),C(a8.$$.fragment,f),C(n8.$$.fragment,f),C(l8.$$.fragment,f),C(u4.$$.fragment,f),C(i8.$$.fragment,f),C(b4.$$.fragment,f),C(d8.$$.fragment,f),C(c8.$$.fragment,f),C(m8.$$.fragment,f),C(F4.$$.fragment,f),C(g8.$$.fragment,f),C(M4.$$.fragment,f),C(h8.$$.fragment,f),C(p8.$$.fragment,f),C(_8.$$.fragment,f),C(C4.$$.fragment,f),C(b8.$$.fragment,f),C(J4.$$.fragment,f),C(v8.$$.fragment,f),C(F8.$$.fragment,f),C(M8.$$.fragment,f),C(K4.$$.fragment,f),C(E8.$$.fragment,f),C(iE.$$.fragment,f),C(C8.$$.fragment,f),C(w8.$$.fragment,f),C(y8.$$.fragment,f),C(cE.$$.fragment,f),C(L8.$$.fragment,f),C(EE.$$.fragment,f),C(x8.$$.fragment,f),C($8.$$.fragment,f),C(S8.$$.fragment,f),C(wE.$$.fragment,f),C(R8.$$.fragment,f),C(IE.$$.fragment,f),C(B8.$$.fragment,f),C(P8.$$.fragment,f),C(q8.$$.fragment,f),C(NE.$$.fragment,f),C(N8.$$.fragment,f),C(HE.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(JE.$$.fragment,f),C(V8.$$.fragment,f),C(l5.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(W8.$$.fragment,f),C(d5.$$.fragment,f),C(H8.$$.fragment,f),C(F5.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(M5.$$.fragment,f),C(Z8.$$.fragment,f),C(k5.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(R5.$$.fragment,f),C(ax.$$.fragment,f),C(O5.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(X5.$$.fragment,f),C(dx.$$.fragment,f),C(Q5.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(H5.$$.fragment,f),C(hx.$$.fragment,f),C(Y5.$$.fragment,f),C(ux.$$.fragment,f),C(_x.$$.fragment,f),C(vx.$$.fragment,f),C(Z5.$$.fragment,f),C(Fx.$$.fragment,f),C(oC.$$.fragment,f),sIe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(of),f&&t(Kr),f&&t(qe),f&&t(Xe),f&&t(tf),w(va,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Fa),f&&t(nBe),f&&t(ii),w(TA),f&&t(sBe),f&&t(An),f&&t(lBe),w(MA,f),f&&t(iBe),f&&t(N9),f&&t(dBe),w(sf,f),f&&t(cBe),f&&t(di),w(EA),f&&t(fBe),f&&t(Co),w(CA),w(yA),w(ag),w(LA),f&&t(mBe),f&&t(fi),w(xA),f&&t(gBe),f&&t(wo),w($A),w(RA),w(Ig),w(BA),f&&t(hBe),f&&t(mi),w(PA),f&&t(pBe),f&&t(Ao),w(IA),w(jA),w(dh),w(ch),w(DA),f&&t(uBe),f&&t(gi),w(GA),f&&t(_Be),f&&t(yo),w(OA),w(zA),w(yh),w(Lh),w(QA),f&&t(bBe),f&&t(pi),w(WA),f&&t(vBe),f&&t(Lo),w(HA),w(JA),w(kh),w(YA),w(vu),f&&t(FBe),f&&t(bi),w(KA),f&&t(TBe),f&&t(xo),w(ZA),w(o6),w(Tu),w(r6),w(i_),f&&t(MBe),f&&t(Ti),w(t6),f&&t(EBe),f&&t($o),w(a6),w(s6),w(c_),w(l6),w(W_),f&&t(CBe),f&&t(Ci),w(i6),f&&t(wBe),f&&t(ko),w(d6),w(f6),w(U_),w(m6),w(S1),f&&t(ABe),f&&t(yi),w(g6),f&&t(yBe),f&&t(So),w(h6),w(u6),w(B1),w(_6),w(Z1),f&&t(LBe),f&&t($i),w(b6),f&&t(xBe),f&&t(Ro),w(v6),w(T6),w(o7),w(M6),w(J7),f&&t($Be),f&&t(Ri),w(E6),f&&t(kBe),f&&t(Bo),w(C6),w(A6),w(K7),w(y6),w(Lb),f&&t(SBe),f&&t(Ii),w(L6),f&&t(RBe),f&&t(Po),w(x6),w(k6),w($b),w(S6),w(qb),f&&t(BBe),f&&t(ji),w(R6),f&&t(PBe),f&&t(Io),w(B6),w(I6),w(jb),w(q6),w(F2),f&&t(IBe),f&&t(Oi),w(N6),f&&t(qBe),f&&t(qo),w(j6),w(G6),w(M2),w(O6),w(d3),f&&t(NBe),f&&t(zi),w(V6),f&&t(jBe),f&&t(No),w(X6),w(Q6),w(f3),w(W6),w(h3),f&&t(DBe),f&&t(Hi),w(H6),f&&t(GBe),f&&t(jo),w(U6),w(Y6),w(u3),w(K6),w(x3),f&&t(OBe),f&&t(Yi),w(Z6),f&&t(VBe),f&&t(Do),w(ey),w(ry),w(k3),w(ty),w(B3),f&&t(XBe),f&&t(ed),w(ay),f&&t(zBe),f&&t(Go),w(ny),w(ly),w(I3),w(iy),w(Q3),f&&t(QBe),f&&t(td),w(dy),f&&t(WBe),f&&t(Oo),w(cy),w(my),w(H3),w(gy),w(ev),f&&t(HBe),f&&t(sd),w(hy),f&&t(UBe),f&&t(Vo),w(py),w(_y),w(rv),w(by),w(mv),f&&t(JBe),f&&t(dd),w(vy),f&&t(YBe),f&&t(Xo),w(Fy),w(My),w(hv),w(Ey),w(bv),f&&t(KBe),f&&t(md),w(wy),f&&t(ZBe),f&&t(zo),w(Ay),w(Ly),w(Fv),w(xy),w(Av),f&&t(ePe),f&&t(pd),w($y),f&&t(oPe),f&&t(Qo),w(ky),w(Ry),w(Lv),w(By),w(Rv),f&&t(rPe),f&&t(vd),w(Py),f&&t(tPe),f&&t(Wo),w(Iy),w(Ny),w(Pv),w(jy),w(jv),f&&t(aPe),f&&t(Md),w(Gy),f&&t(nPe),f&&t(Ho),w(Oy),w(Xy),w(Gv),w(zy),w(Xv),f&&t(sPe),f&&t(wd),w(Qy),f&&t(lPe),f&&t(Uo),w(Wy),w(Uy),w(Qv),w(Jy),w(Kv),f&&t(iPe),f&&t(Ld),w(Yy),f&&t(dPe),f&&t(Jo),w(Ky),w(eL),w(eF),w(oL),w(tF),f&&t(cPe),f&&t(kd),w(rL),f&&t(fPe),f&&t(Yo),w(tL),w(nL),w(nF),w(sL),w(UF),f&&t(mPe),f&&t(Bd),w(lL),f&&t(gPe),f&&t(Ko),w(iL),w(cL),w(YF),w(fL),w(T0),f&&t(hPe),f&&t(qd),w(mL),f&&t(pPe),f&&t(Zo),w(gL),w(pL),w(E0),w(uL),w(I0),f&&t(uPe),f&&t(Dd),w(_L),f&&t(_Pe),f&&t(er),w(bL),w(FL),w(N0),w(TL),w(G0),f&&t(bPe),f&&t(Vd),w(EL),f&&t(vPe),f&&t(or),w(CL),w(AL),w(V0),w(yL),w(cT),f&&t(FPe),f&&t(Qd),w(LL),f&&t(TPe),f&&t(rr),w(xL),w(kL),w(mT),w(SL),w(ET),f&&t(MPe),f&&t(Ud),w(RL),f&&t(EPe),f&&t(tr),w(BL),w(IL),w(wT),w(qL),w(KT),f&&t(CPe),f&&t(Kd),w(NL),f&&t(wPe),f&&t(ar),w(jL),w(GL),w(eM),w(OL),w(bM),f&&t(APe),f&&t(oc),w(VL),f&&t(yPe),f&&t(nr),w(XL),w(QL),w(FM),w(WL),w(MM),f&&t(LPe),f&&t(ac),w(HL),f&&t(xPe),f&&t(sr),w(UL),w(YL),w(CM),w(KL),w(zM),f&&t($Pe),f&&t(lc),w(ZL),f&&t(kPe),f&&t(lr),w(e8),w(r8),w(WM),w(t8),w(h4),f&&t(SPe),f&&t(cc),w(a8),f&&t(RPe),f&&t(ir),w(n8),w(l8),w(u4),w(i8),w(b4),f&&t(BPe),f&&t(gc),w(d8),f&&t(PPe),f&&t(dr),w(c8),w(m8),w(F4),w(g8),w(M4),f&&t(IPe),f&&t(uc),w(h8),f&&t(qPe),f&&t(cr),w(p8),w(_8),w(C4),w(b8),w(J4),f&&t(NPe),f&&t(vc),w(v8),f&&t(jPe),f&&t(fr),w(F8),w(M8),w(K4),w(E8),w(iE),f&&t(DPe),f&&t(Mc),w(C8),f&&t(GPe),f&&t(mr),w(w8),w(y8),w(cE),w(L8),w(EE),f&&t(OPe),f&&t(wc),w(x8),f&&t(VPe),f&&t(gr),w($8),w(S8),w(wE),w(R8),w(IE),f&&t(XPe),f&&t(Lc),w(B8),f&&t(zPe),f&&t(hr),w(P8),w(q8),w(NE),w(N8),w(HE),f&&t(QPe),f&&t(kc),w(j8),f&&t(WPe),f&&t(pr),w(D8),w(O8),w(JE),w(V8),w(l5),f&&t(HPe),f&&t(Bc),w(X8),f&&t(UPe),f&&t(ur),w(z8),w(W8),w(d5),w(H8),w(F5),f&&t(JPe),f&&t(qc),w(U8),f&&t(YPe),f&&t(_r),w(J8),w(K8),w(M5),w(Z8),w(k5),f&&t(KPe),f&&t(Dc),w(ex),f&&t(ZPe),f&&t(br),w(ox),w(tx),w(R5),w(ax),w(O5),f&&t(eIe),f&&t(Vc),w(nx),f&&t(oIe),f&&t(vr),w(sx),w(ix),w(X5),w(dx),w(Q5),f&&t(rIe),f&&t(Qc),w(cx),f&&t(tIe),f&&t(Fr),w(fx),w(gx),w(H5),w(hx),w(Y5),f&&t(aIe),f&&t(Uc),w(ux),f&&t(nIe),f&&t(Tr),w(_x),w(vx),w(Z5),w(Fx),w(oC)}}}const NCt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function jCt(L){return GEt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class QCt extends qEt{constructor(g){super();NEt(this,g,jCt,qCt,jEt,{})}}export{QCt as default,NCt as metadata};
