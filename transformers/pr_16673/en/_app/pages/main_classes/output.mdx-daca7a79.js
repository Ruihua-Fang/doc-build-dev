import{S as C1,i as z1,s as E1,e as n,k as i,w as h,t as p,M as N1,c as s,d as t,m as d,a,x as f,h as c,b as r,F as o,g as l,y as _,q as m,o as g,B as v,v as P1}from"../../chunks/vendor-6b77c823.js";import{T as B1}from"../../chunks/Tip-39098574.js";import{D as y}from"../../chunks/Docstring-af1d0ae0.js";import{C as A1}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as T}from"../../chunks/IconCopyLink-7a11ce68.js";function L1(Fu){let $,Bt,x,A,K,q,nn,X;return{c(){$=n("p"),Bt=p("You can\u2019t unpack a "),x=n("code"),A=p("ModelOutput"),K=p(" directly. Use the "),q=n("a"),nn=p("to_tuple()"),X=p(` method to convert it to a tuple
before.`),this.h()},l(Z){$=s(Z,"P",{});var M=a($);Bt=c(M,"You can\u2019t unpack a "),x=s(M,"CODE",{});var C=a(x);A=c(C,"ModelOutput"),C.forEach(t),K=c(M," directly. Use the "),q=s(M,"A",{href:!0});var $a=a(q);nn=c($a,"to_tuple()"),$a.forEach(t),X=c(M,` method to convert it to a tuple
before.`),M.forEach(t),this.h()},h(){r(q,"href","/docs/transformers/pr_16673/en/main_classes/output#transformers.utils.ModelOutput.to_tuple")},m(Z,M){l(Z,$,M),o($,Bt),o($,x),o(x,A),o($,K),o($,q),o(q,nn),o($,X)},d(Z){Z&&t($)}}}function j1(Fu){let $,Bt,x,A,K,q,nn,X,Z,M,C,$a,xa,Lh,jh,Mu,qa,Wh,ku,sn,Au,w,Dh,Ia,Hh,Qh,Oa,Ih,Vh,Va,Rh,Uh,Ra,Yh,Jh,Ua,Gh,Kh,Ya,Xh,Zh,Ja,ef,tf,Ga,of,nf,Ka,sf,af,Xa,rf,df,Za,uf,lf,er,pf,cf,Cu,O,hf,tr,ff,_f,or,mf,gf,nr,vf,yf,sr,Tf,wf,zu,S,bf,ar,$f,xf,rr,qf,Of,ir,Sf,Ff,dr,Mf,kf,Eu,an,Nu,Lt,Af,ur,Cf,zf,Pu,F,Ef,lr,Nf,Pf,pr,Bf,Lf,cr,jf,Wf,hr,Df,Hf,Bu,Sa,Qf,Lu,ee,jt,fr,rn,If,_r,Vf,ju,k,dn,Rf,te,Uf,mr,Yf,Jf,gr,Gf,Kf,Xf,Wt,Zf,Dt,un,e_,ln,t_,vr,o_,n_,Wu,oe,Ht,yr,pn,s_,Tr,a_,Du,ne,cn,r_,wr,i_,Hu,se,Qt,br,hn,d_,$r,u_,Qu,ae,fn,l_,xr,p_,Iu,re,It,qr,_n,c_,Or,h_,Vu,ie,mn,f_,Sr,__,Ru,de,Vt,Fr,gn,m_,Mr,g_,Uu,ue,vn,v_,kr,y_,Yu,le,Rt,Ar,yn,T_,Cr,w_,Ju,pe,Tn,b_,zr,$_,Gu,ce,Ut,Er,wn,x_,Nr,q_,Ku,he,bn,O_,Pr,S_,Xu,fe,Yt,Br,$n,F_,Lr,M_,Zu,_e,xn,k_,jr,A_,el,me,Jt,Wr,qn,C_,Dr,z_,tl,ge,On,E_,Hr,N_,ol,ve,Gt,Qr,Sn,P_,Ir,B_,nl,ye,Fn,L_,Vr,j_,sl,Te,Kt,Rr,Mn,W_,Ur,D_,al,we,kn,H_,Yr,Q_,rl,be,Xt,Jr,An,I_,Gr,V_,il,$e,Cn,R_,Kr,U_,dl,xe,Zt,Xr,zn,Y_,Zr,J_,ul,qe,En,G_,ei,K_,ll,Oe,eo,ti,Nn,X_,oi,Z_,pl,Se,Pn,em,ni,tm,cl,Fe,to,si,Bn,om,ai,nm,hl,Me,Ln,sm,ri,am,fl,ke,oo,ii,jn,rm,di,im,_l,Ae,Wn,dm,ui,um,ml,Ce,no,li,Dn,lm,pi,pm,gl,ze,Hn,cm,ci,hm,vl,Ee,so,hi,Qn,fm,fi,_m,yl,Ne,In,mm,_i,gm,Tl,Pe,ao,mi,Vn,vm,gi,ym,wl,Be,Rn,Tm,vi,wm,bl,Le,ro,yi,Un,bm,Ti,$m,$l,je,Yn,xm,wi,qm,xl,We,io,bi,Jn,Om,$i,Sm,ql,De,Gn,Fm,xi,Mm,Ol,He,uo,qi,Kn,km,Oi,Am,Sl,Qe,Xn,Cm,Si,zm,Fl,Ie,lo,Fi,Zn,Em,Mi,Nm,Ml,Ve,es,Pm,ki,Bm,kl,Re,po,Ai,ts,Lm,Ci,jm,Al,Ue,os,Wm,zi,Dm,Cl,Ye,co,Ei,ns,Hm,Ni,Qm,zl,Je,ss,Im,Pi,Vm,El,Ge,ho,Bi,as,Rm,Li,Um,Nl,Ke,rs,Ym,ji,Jm,Pl,Xe,fo,Wi,is,Gm,Di,Km,Bl,Ze,ds,Xm,Hi,Zm,Ll,et,_o,Qi,us,eg,Ii,tg,jl,tt,ls,og,Vi,ng,Wl,ot,mo,Ri,ps,sg,Ui,ag,Dl,nt,cs,rg,Yi,ig,Hl,st,go,Ji,hs,dg,Gi,ug,Ql,at,fs,lg,Ki,pg,Il,rt,vo,Xi,_s,cg,Zi,hg,Vl,it,ms,fg,ed,_g,Rl,dt,yo,td,gs,mg,od,gg,Ul,ut,vs,vg,nd,yg,Yl,lt,To,sd,ys,Tg,ad,wg,Jl,pt,Ts,bg,rd,$g,Gl,ct,wo,id,ws,xg,dd,qg,Kl,ht,bs,Og,ud,Sg,Xl,ft,bo,ld,$s,Fg,pd,Mg,Zl,_t,xs,kg,cd,Ag,ep,mt,$o,hd,qs,Cg,fd,zg,tp,gt,Os,Eg,_d,Ng,op,vt,xo,md,Ss,Pg,gd,Bg,np,yt,Fs,Lg,vd,jg,sp,Tt,qo,yd,Ms,Wg,Td,Dg,ap,wt,ks,Hg,wd,Qg,rp,bt,Oo,bd,As,Ig,$d,Vg,ip,z,Cs,Rg,xd,Ug,Yg,So,zs,Jg,qd,Gg,dp,$t,Fo,Od,Es,Kg,Sd,Xg,up,E,Ns,Zg,Fd,ev,tv,Mo,Ps,ov,Md,nv,lp,xt,ko,kd,Bs,sv,Ad,av,pp,N,Ls,rv,Cd,iv,dv,Ao,js,uv,zd,lv,cp,qt,Co,Ed,Ws,pv,Nd,cv,hp,P,Ds,hv,Pd,fv,_v,zo,Hs,mv,Bd,gv,fp,Ot,Eo,Ld,Qs,vv,jd,yv,_p,B,Is,Tv,Wd,wv,bv,No,Vs,$v,Dd,xv,mp,St,Po,Hd,Rs,qv,Qd,Ov,gp,L,Us,Sv,Id,Fv,Mv,Bo,Ys,kv,Vd,Av,vp,Ft,Lo,Rd,Js,Cv,Ud,zv,yp,j,Gs,Ev,Yd,Nv,Pv,jo,Ks,Bv,Jd,Lv,Tp,Mt,Wo,Gd,Xs,jv,Kd,Wv,wp,W,Zs,Dv,Xd,Hv,Qv,Do,ea,Iv,Zd,Vv,bp,kt,Ho,eu,ta,Rv,tu,Uv,$p,D,oa,Yv,ou,Jv,Gv,Qo,na,Kv,nu,Xv,xp,At,Io,su,sa,Zv,au,ey,qp,H,aa,ty,ru,oy,ny,Vo,ra,sy,iu,ay,Op,Ct,Ro,du,ia,ry,uu,iy,Sp,Q,da,dy,lu,uy,ly,Uo,ua,py,pu,cy,Fp,zt,Yo,cu,la,hy,hu,fy,Mp,I,pa,_y,fu,my,gy,Jo,ca,vy,_u,yy,kp,Et,Go,mu,ha,Ty,gu,wy,Ap,V,fa,by,vu,$y,xy,Ko,_a,qy,yu,Oy,Cp,Nt,Xo,Tu,ma,Sy,wu,Fy,zp,R,ga,My,bu,ky,Ay,Zo,va,Cy,$u,zy,Ep,Pt,en,xu,ya,Ey,qu,Ny,Np,U,Ta,Py,Ou,By,Ly,tn,wa,jy,Su,Wy,Pp;return q=new T({}),sn=new A1({props:{code:`from transformers import BertTokenizer, BertForSequenceClassification
import torch

tokenizer = BertTokenizer.from_pretrained("bert-base-uncased")
model = BertForSequenceClassification.from_pretrained("bert-base-uncased")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
labels = torch.tensor([1]).unsqueeze(0)  # Batch size 1
outputs = model(**inputs, labels=labels)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertTokenizer, BertForSequenceClassification
<span class="hljs-keyword">import</span> torch

tokenizer = BertTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)
model = BertForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
labels = torch.tensor([<span class="hljs-number">1</span>]).unsqueeze(<span class="hljs-number">0</span>)  <span class="hljs-comment"># Batch size 1</span>
outputs = model(**inputs, labels=labels)`}}),an=new A1({props:{code:"outputs[:2]",highlighted:'outputs[:<span class="hljs-number">2</span>]'}}),rn=new T({}),dn=new y({props:{name:"class transformers.utils.ModelOutput",anchor:"transformers.utils.ModelOutput",parameters:"",source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/utils/generic.py#L146"}}),Wt=new B1({props:{warning:!0,$$slots:{default:[L1]},$$scope:{ctx:Fu}}}),un=new y({props:{name:"to_tuple",anchor:"transformers.utils.ModelOutput.to_tuple",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/utils/generic.py#L235"}}),pn=new T({}),cn=new y({props:{name:"class transformers.modeling_outputs.BaseModelOutput",anchor:"transformers.modeling_outputs.BaseModelOutput",parameters:[{name:"last_hidden_state",val:": FloatTensor = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_outputs.py#L24",parametersDescription:[{anchor:"transformers.modeling_outputs.BaseModelOutput.last_hidden_state",description:`<strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Sequence of hidden-states at the output of the last layer of the model.`,name:"last_hidden_state"},{anchor:"transformers.modeling_outputs.BaseModelOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_outputs.BaseModelOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),hn=new T({}),fn=new y({props:{name:"class transformers.modeling_outputs.BaseModelOutputWithPooling",anchor:"transformers.modeling_outputs.BaseModelOutputWithPooling",parameters:[{name:"last_hidden_state",val:": FloatTensor = None"},{name:"pooler_output",val:": FloatTensor = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_outputs.py#L69",parametersDescription:[{anchor:"transformers.modeling_outputs.BaseModelOutputWithPooling.last_hidden_state",description:`<strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Sequence of hidden-states at the output of the last layer of the model.`,name:"last_hidden_state"},{anchor:"transformers.modeling_outputs.BaseModelOutputWithPooling.pooler_output",description:`<strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, hidden_size)</code>) &#x2014;
Last layer hidden-state of the first token of the sequence (classification token) after further processing
through the layers used for the auxiliary pretraining task. E.g. for BERT-family of models, this returns
the classification token after processing through a linear layer and a tanh activation function. The linear
layer weights are trained from the next sentence prediction (classification) objective during pretraining.`,name:"pooler_output"},{anchor:"transformers.modeling_outputs.BaseModelOutputWithPooling.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_outputs.BaseModelOutputWithPooling.attentions",description:`<strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),_n=new T({}),mn=new y({props:{name:"class transformers.modeling_outputs.BaseModelOutputWithCrossAttentions",anchor:"transformers.modeling_outputs.BaseModelOutputWithCrossAttentions",parameters:[{name:"last_hidden_state",val:": FloatTensor = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_outputs.py#L162",parametersDescription:[{anchor:"transformers.modeling_outputs.BaseModelOutputWithCrossAttentions.last_hidden_state",description:`<strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Sequence of hidden-states at the output of the last layer of the model.`,name:"last_hidden_state"},{anchor:"transformers.modeling_outputs.BaseModelOutputWithCrossAttentions.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_outputs.BaseModelOutputWithCrossAttentions.attentions",description:`<strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"},{anchor:"transformers.modeling_outputs.BaseModelOutputWithCrossAttentions.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> and <code>config.add_cross_attention=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder&#x2019;s cross-attention layer, after the attention softmax, used to compute the
weighted average in the cross-attention heads.`,name:"cross_attentions"}]}}),gn=new T({}),vn=new y({props:{name:"class transformers.modeling_outputs.BaseModelOutputWithPoolingAndCrossAttentions",anchor:"transformers.modeling_outputs.BaseModelOutputWithPoolingAndCrossAttentions",parameters:[{name:"last_hidden_state",val:": FloatTensor = None"},{name:"pooler_output",val:": FloatTensor = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"past_key_values",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_outputs.py#L195",parametersDescription:[{anchor:"transformers.modeling_outputs.BaseModelOutputWithPoolingAndCrossAttentions.last_hidden_state",description:`<strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Sequence of hidden-states at the output of the last layer of the model.`,name:"last_hidden_state"},{anchor:"transformers.modeling_outputs.BaseModelOutputWithPoolingAndCrossAttentions.pooler_output",description:`<strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, hidden_size)</code>) &#x2014;
Last layer hidden-state of the first token of the sequence (classification token) after further processing
through the layers used for the auxiliary pretraining task. E.g. for BERT-family of models, this returns
the classification token after processing through a linear layer and a tanh activation function. The linear
layer weights are trained from the next sentence prediction (classification) objective during pretraining.`,name:"pooler_output"},{anchor:"transformers.modeling_outputs.BaseModelOutputWithPoolingAndCrossAttentions.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_outputs.BaseModelOutputWithPoolingAndCrossAttentions.attentions",description:`<strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"},{anchor:"transformers.modeling_outputs.BaseModelOutputWithPoolingAndCrossAttentions.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> and <code>config.add_cross_attention=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder&#x2019;s cross-attention layer, after the attention softmax, used to compute the
weighted average in the cross-attention heads.`,name:"cross_attentions"},{anchor:"transformers.modeling_outputs.BaseModelOutputWithPoolingAndCrossAttentions.past_key_values",description:`<strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
Tuple of <code>tuple(torch.FloatTensor)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of shape
<code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>) and optionally if
<code>config.is_encoder_decoder=True</code> 2 additional tensors of shape <code>(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)</code>.</p>
<p>Contains pre-computed hidden-states (key and values in the self-attention blocks and optionally if
<code>config.is_encoder_decoder=True</code> in the cross-attention blocks) that can be used (see <code>past_key_values</code>
input) to speed up sequential decoding.`,name:"past_key_values"}]}}),yn=new T({}),Tn=new y({props:{name:"class transformers.modeling_outputs.BaseModelOutputWithPast",anchor:"transformers.modeling_outputs.BaseModelOutputWithPast",parameters:[{name:"last_hidden_state",val:": FloatTensor = None"},{name:"past_key_values",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_outputs.py#L123",parametersDescription:[{anchor:"transformers.modeling_outputs.BaseModelOutputWithPast.last_hidden_state",description:`<strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Sequence of hidden-states at the output of the last layer of the model.</p>
<p>If <code>past_key_values</code> is used only the last hidden-state of the sequences of shape <code>(batch_size, 1, hidden_size)</code> is output.`,name:"last_hidden_state"},{anchor:"transformers.modeling_outputs.BaseModelOutputWithPast.past_key_values",description:`<strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
Tuple of <code>tuple(torch.FloatTensor)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of shape
<code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>) and optionally if
<code>config.is_encoder_decoder=True</code> 2 additional tensors of shape <code>(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)</code>.</p>
<p>Contains pre-computed hidden-states (key and values in the self-attention blocks and optionally if
<code>config.is_encoder_decoder=True</code> in the cross-attention blocks) that can be used (see <code>past_key_values</code>
input) to speed up sequential decoding.`,name:"past_key_values"},{anchor:"transformers.modeling_outputs.BaseModelOutputWithPast.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_outputs.BaseModelOutputWithPast.attentions",description:`<strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),wn=new T({}),bn=new y({props:{name:"class transformers.modeling_outputs.BaseModelOutputWithPastAndCrossAttentions",anchor:"transformers.modeling_outputs.BaseModelOutputWithPastAndCrossAttentions",parameters:[{name:"last_hidden_state",val:": FloatTensor = None"},{name:"past_key_values",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_outputs.py#L244",parametersDescription:[{anchor:"transformers.modeling_outputs.BaseModelOutputWithPastAndCrossAttentions.last_hidden_state",description:`<strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Sequence of hidden-states at the output of the last layer of the model.</p>
<p>If <code>past_key_values</code> is used only the last hidden-state of the sequences of shape <code>(batch_size, 1, hidden_size)</code> is output.`,name:"last_hidden_state"},{anchor:"transformers.modeling_outputs.BaseModelOutputWithPastAndCrossAttentions.past_key_values",description:`<strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
Tuple of <code>tuple(torch.FloatTensor)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of shape
<code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>) and optionally if
<code>config.is_encoder_decoder=True</code> 2 additional tensors of shape <code>(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)</code>.</p>
<p>Contains pre-computed hidden-states (key and values in the self-attention blocks and optionally if
<code>config.is_encoder_decoder=True</code> in the cross-attention blocks) that can be used (see <code>past_key_values</code>
input) to speed up sequential decoding.`,name:"past_key_values"},{anchor:"transformers.modeling_outputs.BaseModelOutputWithPastAndCrossAttentions.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_outputs.BaseModelOutputWithPastAndCrossAttentions.attentions",description:`<strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"},{anchor:"transformers.modeling_outputs.BaseModelOutputWithPastAndCrossAttentions.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> and <code>config.add_cross_attention=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder&#x2019;s cross-attention layer, after the attention softmax, used to compute the
weighted average in the cross-attention heads.`,name:"cross_attentions"}]}}),$n=new T({}),xn=new y({props:{name:"class transformers.modeling_outputs.Seq2SeqModelOutput",anchor:"transformers.modeling_outputs.Seq2SeqModelOutput",parameters:[{name:"last_hidden_state",val:": FloatTensor = None"},{name:"past_key_values",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_last_hidden_state",val:": typing.Optional[torch.FloatTensor] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_outputs.py#L290",parametersDescription:[{anchor:"transformers.modeling_outputs.Seq2SeqModelOutput.last_hidden_state",description:`<strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Sequence of hidden-states at the output of the last layer of the decoder of the model.</p>
<p>If <code>past_key_values</code> is used only the last hidden-state of the sequences of shape <code>(batch_size, 1, hidden_size)</code> is output.`,name:"last_hidden_state"},{anchor:"transformers.modeling_outputs.Seq2SeqModelOutput.past_key_values",description:`<strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
Tuple of <code>tuple(torch.FloatTensor)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of shape
<code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>) and 2 additional tensors of shape
<code>(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)</code>.</p>
<p>Contains pre-computed hidden-states (key and values in the self-attention blocks and in the cross-attention
blocks) that can be used (see <code>past_key_values</code> input) to speed up sequential decoding.`,name:"past_key_values"},{anchor:"transformers.modeling_outputs.Seq2SeqModelOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the decoder at the output of each layer plus the optional initial embedding outputs.`,name:"decoder_hidden_states"},{anchor:"transformers.modeling_outputs.Seq2SeqModelOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.`,name:"decoder_attentions"},{anchor:"transformers.modeling_outputs.Seq2SeqModelOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder&#x2019;s cross-attention layer, after the attention softmax, used to compute the
weighted average in the cross-attention heads.`,name:"cross_attentions"},{anchor:"transformers.modeling_outputs.Seq2SeqModelOutput.encoder_last_hidden_state",description:`<strong>encoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Sequence of hidden-states at the output of the last layer of the encoder of the model.`,name:"encoder_last_hidden_state"},{anchor:"transformers.modeling_outputs.Seq2SeqModelOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the encoder at the output of each layer plus the optional initial embedding outputs.`,name:"encoder_hidden_states"},{anchor:"transformers.modeling_outputs.Seq2SeqModelOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the encoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.`,name:"encoder_attentions"}]}}),qn=new T({}),On=new y({props:{name:"class transformers.modeling_outputs.CausalLMOutput",anchor:"transformers.modeling_outputs.CausalLMOutput",parameters:[{name:"loss",val:": typing.Optional[torch.FloatTensor] = None"},{name:"logits",val:": FloatTensor = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_outputs.py#L351",parametersDescription:[{anchor:"transformers.modeling_outputs.CausalLMOutput.loss",description:`<strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) &#x2014;
Language modeling loss (for next-token prediction).`,name:"loss"},{anchor:"transformers.modeling_outputs.CausalLMOutput.logits",description:`<strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) &#x2014;
Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).`,name:"logits"},{anchor:"transformers.modeling_outputs.CausalLMOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_outputs.CausalLMOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),Sn=new T({}),Fn=new y({props:{name:"class transformers.modeling_outputs.CausalLMOutputWithCrossAttentions",anchor:"transformers.modeling_outputs.CausalLMOutputWithCrossAttentions",parameters:[{name:"loss",val:": typing.Optional[torch.FloatTensor] = None"},{name:"logits",val:": FloatTensor = None"},{name:"past_key_values",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_outputs.py#L416",parametersDescription:[{anchor:"transformers.modeling_outputs.CausalLMOutputWithCrossAttentions.loss",description:`<strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) &#x2014;
Language modeling loss (for next-token prediction).`,name:"loss"},{anchor:"transformers.modeling_outputs.CausalLMOutputWithCrossAttentions.logits",description:`<strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) &#x2014;
Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).`,name:"logits"},{anchor:"transformers.modeling_outputs.CausalLMOutputWithCrossAttentions.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_outputs.CausalLMOutputWithCrossAttentions.attentions",description:`<strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"},{anchor:"transformers.modeling_outputs.CausalLMOutputWithCrossAttentions.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Cross attentions weights after the attention softmax, used to compute the weighted average in the
cross-attention heads.`,name:"cross_attentions"},{anchor:"transformers.modeling_outputs.CausalLMOutputWithCrossAttentions.past_key_values",description:`<strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> tuples of length <code>config.n_layers</code>, with each tuple containing the cached key,
value states of the self-attention and the cross-attention layers if model is used in encoder-decoder
setting. Only relevant if <code>config.is_decoder = True</code>.</p>
<p>Contains pre-computed hidden-states (key and values in the attention blocks) that can be used (see
<code>past_key_values</code> input) to speed up sequential decoding.`,name:"past_key_values"}]}}),Mn=new T({}),kn=new y({props:{name:"class transformers.modeling_outputs.CausalLMOutputWithPast",anchor:"transformers.modeling_outputs.CausalLMOutputWithPast",parameters:[{name:"loss",val:": typing.Optional[torch.FloatTensor] = None"},{name:"logits",val:": FloatTensor = None"},{name:"past_key_values",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_outputs.py#L380",parametersDescription:[{anchor:"transformers.modeling_outputs.CausalLMOutputWithPast.loss",description:`<strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) &#x2014;
Language modeling loss (for next-token prediction).`,name:"loss"},{anchor:"transformers.modeling_outputs.CausalLMOutputWithPast.logits",description:`<strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) &#x2014;
Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).`,name:"logits"},{anchor:"transformers.modeling_outputs.CausalLMOutputWithPast.past_key_values",description:`<strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
Tuple of <code>tuple(torch.FloatTensor)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of shape
<code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>)</p>
<p>Contains pre-computed hidden-states (key and values in the self-attention blocks) that can be used (see
<code>past_key_values</code> input) to speed up sequential decoding.`,name:"past_key_values"},{anchor:"transformers.modeling_outputs.CausalLMOutputWithPast.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_outputs.CausalLMOutputWithPast.attentions",description:`<strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),An=new T({}),Cn=new y({props:{name:"class transformers.modeling_outputs.MaskedLMOutput",anchor:"transformers.modeling_outputs.MaskedLMOutput",parameters:[{name:"loss",val:": typing.Optional[torch.FloatTensor] = None"},{name:"logits",val:": FloatTensor = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_outputs.py#L496",parametersDescription:[{anchor:"transformers.modeling_outputs.MaskedLMOutput.loss",description:`<strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) &#x2014;
Masked language modeling (MLM) loss.`,name:"loss"},{anchor:"transformers.modeling_outputs.MaskedLMOutput.logits",description:`<strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) &#x2014;
Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).`,name:"logits"},{anchor:"transformers.modeling_outputs.MaskedLMOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_outputs.MaskedLMOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),zn=new T({}),En=new y({props:{name:"class transformers.modeling_outputs.Seq2SeqLMOutput",anchor:"transformers.modeling_outputs.Seq2SeqLMOutput",parameters:[{name:"loss",val:": typing.Optional[torch.FloatTensor] = None"},{name:"logits",val:": FloatTensor = None"},{name:"past_key_values",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_last_hidden_state",val:": typing.Optional[torch.FloatTensor] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_outputs.py#L525",parametersDescription:[{anchor:"transformers.modeling_outputs.Seq2SeqLMOutput.loss",description:`<strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) &#x2014;
Language modeling loss.`,name:"loss"},{anchor:"transformers.modeling_outputs.Seq2SeqLMOutput.logits",description:`<strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) &#x2014;
Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).`,name:"logits"},{anchor:"transformers.modeling_outputs.Seq2SeqLMOutput.past_key_values",description:`<strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
Tuple of <code>tuple(torch.FloatTensor)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of shape
<code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>) and 2 additional tensors of shape
<code>(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)</code>.</p>
<p>Contains pre-computed hidden-states (key and values in the self-attention blocks and in the cross-attention
blocks) that can be used (see <code>past_key_values</code> input) to speed up sequential decoding.`,name:"past_key_values"},{anchor:"transformers.modeling_outputs.Seq2SeqLMOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the decoder at the output of each layer plus the initial embedding outputs.`,name:"decoder_hidden_states"},{anchor:"transformers.modeling_outputs.Seq2SeqLMOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.`,name:"decoder_attentions"},{anchor:"transformers.modeling_outputs.Seq2SeqLMOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder&#x2019;s cross-attention layer, after the attention softmax, used to compute the
weighted average in the cross-attention heads.`,name:"cross_attentions"},{anchor:"transformers.modeling_outputs.Seq2SeqLMOutput.encoder_last_hidden_state",description:`<strong>encoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Sequence of hidden-states at the output of the last layer of the encoder of the model.`,name:"encoder_last_hidden_state"},{anchor:"transformers.modeling_outputs.Seq2SeqLMOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the encoder at the output of each layer plus the initial embedding outputs.`,name:"encoder_hidden_states"},{anchor:"transformers.modeling_outputs.Seq2SeqLMOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the encoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.`,name:"encoder_attentions"}]}}),Nn=new T({}),Pn=new y({props:{name:"class transformers.modeling_outputs.NextSentencePredictorOutput",anchor:"transformers.modeling_outputs.NextSentencePredictorOutput",parameters:[{name:"loss",val:": typing.Optional[torch.FloatTensor] = None"},{name:"logits",val:": FloatTensor = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_outputs.py#L585",parametersDescription:[{anchor:"transformers.modeling_outputs.NextSentencePredictorOutput.loss",description:`<strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>next_sentence_label</code> is provided) &#x2014;
Next sequence prediction (classification) loss.`,name:"loss"},{anchor:"transformers.modeling_outputs.NextSentencePredictorOutput.logits",description:`<strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2)</code>) &#x2014;
Prediction scores of the next sequence prediction (classification) head (scores of True/False continuation
before SoftMax).`,name:"logits"},{anchor:"transformers.modeling_outputs.NextSentencePredictorOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_outputs.NextSentencePredictorOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),Bn=new T({}),Ln=new y({props:{name:"class transformers.modeling_outputs.SequenceClassifierOutput",anchor:"transformers.modeling_outputs.SequenceClassifierOutput",parameters:[{name:"loss",val:": typing.Optional[torch.FloatTensor] = None"},{name:"logits",val:": FloatTensor = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_outputs.py#L615",parametersDescription:[{anchor:"transformers.modeling_outputs.SequenceClassifierOutput.loss",description:`<strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) &#x2014;
Classification (or regression if config.num_labels==1) loss.`,name:"loss"},{anchor:"transformers.modeling_outputs.SequenceClassifierOutput.logits",description:`<strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) &#x2014;
Classification (or regression if config.num_labels==1) scores (before SoftMax).`,name:"logits"},{anchor:"transformers.modeling_outputs.SequenceClassifierOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_outputs.SequenceClassifierOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),jn=new T({}),Wn=new y({props:{name:"class transformers.modeling_outputs.Seq2SeqSequenceClassifierOutput",anchor:"transformers.modeling_outputs.Seq2SeqSequenceClassifierOutput",parameters:[{name:"loss",val:": typing.Optional[torch.FloatTensor] = None"},{name:"logits",val:": FloatTensor = None"},{name:"past_key_values",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_last_hidden_state",val:": typing.Optional[torch.FloatTensor] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_outputs.py#L644",parametersDescription:[{anchor:"transformers.modeling_outputs.Seq2SeqSequenceClassifierOutput.loss",description:`<strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>label</code> is provided) &#x2014;
Classification (or regression if config.num_labels==1) loss.`,name:"loss"},{anchor:"transformers.modeling_outputs.Seq2SeqSequenceClassifierOutput.logits",description:`<strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) &#x2014;
Classification (or regression if config.num_labels==1) scores (before SoftMax).`,name:"logits"},{anchor:"transformers.modeling_outputs.Seq2SeqSequenceClassifierOutput.past_key_values",description:`<strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
Tuple of <code>tuple(torch.FloatTensor)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of shape
<code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>) and 2 additional tensors of shape
<code>(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)</code>.</p>
<p>Contains pre-computed hidden-states (key and values in the self-attention blocks and in the cross-attention
blocks) that can be used (see <code>past_key_values</code> input) to speed up sequential decoding.`,name:"past_key_values"},{anchor:"transformers.modeling_outputs.Seq2SeqSequenceClassifierOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the decoder at the output of each layer plus the initial embedding outputs.`,name:"decoder_hidden_states"},{anchor:"transformers.modeling_outputs.Seq2SeqSequenceClassifierOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.`,name:"decoder_attentions"},{anchor:"transformers.modeling_outputs.Seq2SeqSequenceClassifierOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder&#x2019;s cross-attention layer, after the attention softmax, used to compute the
weighted average in the cross-attention heads.`,name:"cross_attentions"},{anchor:"transformers.modeling_outputs.Seq2SeqSequenceClassifierOutput.encoder_last_hidden_state",description:`<strong>encoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Sequence of hidden-states at the output of the last layer of the encoder of the model.`,name:"encoder_last_hidden_state"},{anchor:"transformers.modeling_outputs.Seq2SeqSequenceClassifierOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the encoder at the output of each layer plus the initial embedding outputs.`,name:"encoder_hidden_states"},{anchor:"transformers.modeling_outputs.Seq2SeqSequenceClassifierOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the encoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.`,name:"encoder_attentions"}]}}),Dn=new T({}),Hn=new y({props:{name:"class transformers.modeling_outputs.MultipleChoiceModelOutput",anchor:"transformers.modeling_outputs.MultipleChoiceModelOutput",parameters:[{name:"loss",val:": typing.Optional[torch.FloatTensor] = None"},{name:"logits",val:": FloatTensor = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_outputs.py#L704",parametersDescription:[{anchor:"transformers.modeling_outputs.MultipleChoiceModelOutput.loss",description:`<strong>loss</strong> (<code>torch.FloatTensor</code> of shape <em>(1,)</em>, <em>optional</em>, returned when <code>labels</code> is provided) &#x2014;
Classification loss.`,name:"loss"},{anchor:"transformers.modeling_outputs.MultipleChoiceModelOutput.logits",description:`<strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_choices)</code>) &#x2014;
<em>num_choices</em> is the second dimension of the input tensors. (see <em>input_ids</em> above).</p>
<p>Classification scores (before SoftMax).`,name:"logits"},{anchor:"transformers.modeling_outputs.MultipleChoiceModelOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_outputs.MultipleChoiceModelOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),Qn=new T({}),In=new y({props:{name:"class transformers.modeling_outputs.TokenClassifierOutput",anchor:"transformers.modeling_outputs.TokenClassifierOutput",parameters:[{name:"loss",val:": typing.Optional[torch.FloatTensor] = None"},{name:"logits",val:": FloatTensor = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_outputs.py#L735",parametersDescription:[{anchor:"transformers.modeling_outputs.TokenClassifierOutput.loss",description:`<strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided)  &#x2014;
Classification loss.`,name:"loss"},{anchor:"transformers.modeling_outputs.TokenClassifierOutput.logits",description:`<strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.num_labels)</code>) &#x2014;
Classification scores (before SoftMax).`,name:"logits"},{anchor:"transformers.modeling_outputs.TokenClassifierOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_outputs.TokenClassifierOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),Vn=new T({}),Rn=new y({props:{name:"class transformers.modeling_outputs.QuestionAnsweringModelOutput",anchor:"transformers.modeling_outputs.QuestionAnsweringModelOutput",parameters:[{name:"loss",val:": typing.Optional[torch.FloatTensor] = None"},{name:"start_logits",val:": FloatTensor = None"},{name:"end_logits",val:": FloatTensor = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_outputs.py#L764",parametersDescription:[{anchor:"transformers.modeling_outputs.QuestionAnsweringModelOutput.loss",description:`<strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) &#x2014;
Total span extraction loss is the sum of a Cross-Entropy for the start and end positions.`,name:"loss"},{anchor:"transformers.modeling_outputs.QuestionAnsweringModelOutput.start_logits",description:`<strong>start_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Span-start scores (before SoftMax).`,name:"start_logits"},{anchor:"transformers.modeling_outputs.QuestionAnsweringModelOutput.end_logits",description:`<strong>end_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Span-end scores (before SoftMax).`,name:"end_logits"},{anchor:"transformers.modeling_outputs.QuestionAnsweringModelOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_outputs.QuestionAnsweringModelOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),Un=new T({}),Yn=new y({props:{name:"class transformers.modeling_outputs.Seq2SeqQuestionAnsweringModelOutput",anchor:"transformers.modeling_outputs.Seq2SeqQuestionAnsweringModelOutput",parameters:[{name:"loss",val:": typing.Optional[torch.FloatTensor] = None"},{name:"start_logits",val:": FloatTensor = None"},{name:"end_logits",val:": FloatTensor = None"},{name:"past_key_values",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_last_hidden_state",val:": typing.Optional[torch.FloatTensor] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_outputs.py#L796",parametersDescription:[{anchor:"transformers.modeling_outputs.Seq2SeqQuestionAnsweringModelOutput.loss",description:`<strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) &#x2014;
Total span extraction loss is the sum of a Cross-Entropy for the start and end positions.`,name:"loss"},{anchor:"transformers.modeling_outputs.Seq2SeqQuestionAnsweringModelOutput.start_logits",description:`<strong>start_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Span-start scores (before SoftMax).`,name:"start_logits"},{anchor:"transformers.modeling_outputs.Seq2SeqQuestionAnsweringModelOutput.end_logits",description:`<strong>end_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Span-end scores (before SoftMax).`,name:"end_logits"},{anchor:"transformers.modeling_outputs.Seq2SeqQuestionAnsweringModelOutput.past_key_values",description:`<strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
Tuple of <code>tuple(torch.FloatTensor)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of shape
<code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>) and 2 additional tensors of shape
<code>(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)</code>.</p>
<p>Contains pre-computed hidden-states (key and values in the self-attention blocks and in the cross-attention
blocks) that can be used (see <code>past_key_values</code> input) to speed up sequential decoding.`,name:"past_key_values"},{anchor:"transformers.modeling_outputs.Seq2SeqQuestionAnsweringModelOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the decoder at the output of each layer plus the initial embedding outputs.`,name:"decoder_hidden_states"},{anchor:"transformers.modeling_outputs.Seq2SeqQuestionAnsweringModelOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.`,name:"decoder_attentions"},{anchor:"transformers.modeling_outputs.Seq2SeqQuestionAnsweringModelOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder&#x2019;s cross-attention layer, after the attention softmax, used to compute the
weighted average in the cross-attention heads.`,name:"cross_attentions"},{anchor:"transformers.modeling_outputs.Seq2SeqQuestionAnsweringModelOutput.encoder_last_hidden_state",description:`<strong>encoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Sequence of hidden-states at the output of the last layer of the encoder of the model.`,name:"encoder_last_hidden_state"},{anchor:"transformers.modeling_outputs.Seq2SeqQuestionAnsweringModelOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the encoder at the output of each layer plus the initial embedding outputs.`,name:"encoder_hidden_states"},{anchor:"transformers.modeling_outputs.Seq2SeqQuestionAnsweringModelOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the encoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.`,name:"encoder_attentions"}]}}),Jn=new T({}),Gn=new y({props:{name:"class transformers.modeling_tf_outputs.TFBaseModelOutput",anchor:"transformers.modeling_tf_outputs.TFBaseModelOutput",parameters:[{name:"last_hidden_state",val:": Tensor = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_tf_outputs.py#L24",parametersDescription:[{anchor:"transformers.modeling_tf_outputs.TFBaseModelOutput.last_hidden_state",description:`<strong>last_hidden_state</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Sequence of hidden-states at the output of the last layer of the model.`,name:"last_hidden_state"},{anchor:"transformers.modeling_tf_outputs.TFBaseModelOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tf.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_tf_outputs.TFBaseModelOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),Kn=new T({}),Xn=new y({props:{name:"class transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling",anchor:"transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling",parameters:[{name:"last_hidden_state",val:": Tensor = None"},{name:"pooler_output",val:": Tensor = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_tf_outputs.py#L50",parametersDescription:[{anchor:"transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling.last_hidden_state",description:`<strong>last_hidden_state</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Sequence of hidden-states at the output of the last layer of the model.`,name:"last_hidden_state"},{anchor:"transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling.pooler_output",description:`<strong>pooler_output</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, hidden_size)</code>) &#x2014;
Last layer hidden-state of the first token of the sequence (classification token) further processed by a
Linear layer and a Tanh activation function. The Linear layer weights are trained from the next sentence
prediction (classification) objective during pretraining.</p>
<p>This output is usually <em>not</em> a good summary of the semantic content of the input, you&#x2019;re often better with
averaging or pooling the sequence of hidden-states for the whole input sequence.`,name:"pooler_output"},{anchor:"transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling.attentions",description:`<strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),Zn=new T({}),es=new y({props:{name:"class transformers.modeling_tf_outputs.TFBaseModelOutputWithPoolingAndCrossAttentions",anchor:"transformers.modeling_tf_outputs.TFBaseModelOutputWithPoolingAndCrossAttentions",parameters:[{name:"last_hidden_state",val:": Tensor = None"},{name:"pooler_output",val:": Tensor = None"},{name:"past_key_values",val:": typing.Optional[typing.List[tensorflow.python.framework.ops.Tensor]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_tf_outputs.py#L84",parametersDescription:[{anchor:"transformers.modeling_tf_outputs.TFBaseModelOutputWithPoolingAndCrossAttentions.last_hidden_state",description:`<strong>last_hidden_state</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Sequence of hidden-states at the output of the last layer of the model.`,name:"last_hidden_state"},{anchor:"transformers.modeling_tf_outputs.TFBaseModelOutputWithPoolingAndCrossAttentions.pooler_output",description:`<strong>pooler_output</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, hidden_size)</code>) &#x2014;
Last layer hidden-state of the first token of the sequence (classification token) further processed by a
Linear layer and a Tanh activation function. The Linear layer weights are trained from the next sentence
prediction (classification) objective during pretraining.</p>
<p>This output is usually <em>not</em> a good summary of the semantic content of the input, you&#x2019;re often better with
averaging or pooling the sequence of hidden-states for the whole input sequence.`,name:"pooler_output"},{anchor:"transformers.modeling_tf_outputs.TFBaseModelOutputWithPoolingAndCrossAttentions.past_key_values",description:`<strong>past_key_values</strong> (<code>List[tf.Tensor]</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
List of <code>tf.Tensor</code> of length <code>config.n_layers</code>, with each tensor of shape <code>(2, batch_size, num_heads, sequence_length, embed_size_per_head)</code>).</p>
<p>Contains pre-computed hidden-states (key and values in the attention blocks) that can be used (see
<code>past_key_values</code> input) to speed up sequential decoding.`,name:"past_key_values"},{anchor:"transformers.modeling_tf_outputs.TFBaseModelOutputWithPoolingAndCrossAttentions.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_tf_outputs.TFBaseModelOutputWithPoolingAndCrossAttentions.attentions",description:`<strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"},{anchor:"transformers.modeling_tf_outputs.TFBaseModelOutputWithPoolingAndCrossAttentions.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder&#x2019;s cross-attention layer, after the attention softmax, used to compute the
weighted average in the cross-attention heads.`,name:"cross_attentions"}]}}),ts=new T({}),os=new y({props:{name:"class transformers.modeling_tf_outputs.TFBaseModelOutputWithPast",anchor:"transformers.modeling_tf_outputs.TFBaseModelOutputWithPast",parameters:[{name:"last_hidden_state",val:": Tensor = None"},{name:"past_key_values",val:": typing.Optional[typing.List[tensorflow.python.framework.ops.Tensor]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_tf_outputs.py#L132",parametersDescription:[{anchor:"transformers.modeling_tf_outputs.TFBaseModelOutputWithPast.last_hidden_state",description:`<strong>last_hidden_state</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Sequence of hidden-states at the output of the last layer of the model.</p>
<p>If <code>past_key_values</code> is used only the last hidden-state of the sequences of shape <code>(batch_size, 1, hidden_size)</code> is output.`,name:"last_hidden_state"},{anchor:"transformers.modeling_tf_outputs.TFBaseModelOutputWithPast.past_key_values",description:`<strong>past_key_values</strong> (<code>List[tf.Tensor]</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
List of <code>tf.Tensor</code> of length <code>config.n_layers</code>, with each tensor of shape <code>(2, batch_size, num_heads, sequence_length, embed_size_per_head)</code>).</p>
<p>Contains pre-computed hidden-states (key and values in the attention blocks) that can be used (see
<code>past_key_values</code> input) to speed up sequential decoding.`,name:"past_key_values"},{anchor:"transformers.modeling_tf_outputs.TFBaseModelOutputWithPast.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_tf_outputs.TFBaseModelOutputWithPast.attentions",description:`<strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),ns=new T({}),ss=new y({props:{name:"class transformers.modeling_tf_outputs.TFBaseModelOutputWithPastAndCrossAttentions",anchor:"transformers.modeling_tf_outputs.TFBaseModelOutputWithPastAndCrossAttentions",parameters:[{name:"last_hidden_state",val:": Tensor = None"},{name:"past_key_values",val:": typing.Optional[typing.List[tensorflow.python.framework.ops.Tensor]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_tf_outputs.py#L201",parametersDescription:[{anchor:"transformers.modeling_tf_outputs.TFBaseModelOutputWithPastAndCrossAttentions.last_hidden_state",description:`<strong>last_hidden_state</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Sequence of hidden-states at the output of the last layer of the model.</p>
<p>If <code>past_key_values</code> is used only the last hidden-state of the sequences of shape <code>(batch_size, 1, hidden_size)</code> is output.`,name:"last_hidden_state"},{anchor:"transformers.modeling_tf_outputs.TFBaseModelOutputWithPastAndCrossAttentions.past_key_values",description:`<strong>past_key_values</strong> (<code>List[tf.Tensor]</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
List of <code>tf.Tensor</code> of length <code>config.n_layers</code>, with each tensor of shape <code>(2, batch_size, num_heads, sequence_length, embed_size_per_head)</code>).</p>
<p>Contains pre-computed hidden-states (key and values in the attention blocks) that can be used (see
<code>past_key_values</code> input) to speed up sequential decoding.`,name:"past_key_values"},{anchor:"transformers.modeling_tf_outputs.TFBaseModelOutputWithPastAndCrossAttentions.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tf.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_tf_outputs.TFBaseModelOutputWithPastAndCrossAttentions.attentions",description:`<strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"},{anchor:"transformers.modeling_tf_outputs.TFBaseModelOutputWithPastAndCrossAttentions.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder&#x2019;s cross-attention layer, after the attention softmax, used to compute the
weighted average in the cross-attention heads.`,name:"cross_attentions"}]}}),as=new T({}),rs=new y({props:{name:"class transformers.modeling_tf_outputs.TFSeq2SeqModelOutput",anchor:"transformers.modeling_tf_outputs.TFSeq2SeqModelOutput",parameters:[{name:"last_hidden_state",val:": Tensor = None"},{name:"past_key_values",val:": typing.Optional[typing.List[tensorflow.python.framework.ops.Tensor]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"encoder_last_hidden_state",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_tf_outputs.py#L244",parametersDescription:[{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqModelOutput.last_hidden_state",description:`<strong>last_hidden_state</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Sequence of hidden-states at the output of the last layer of the decoder of the model.</p>
<p>If <code>past_key_values</code> is used only the last hidden-state of the sequences of shape <code>(batch_size, 1, hidden_size)</code> is output.`,name:"last_hidden_state"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqModelOutput.past_key_values",description:`<strong>past_key_values</strong> (<code>List[tf.Tensor]</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
List of <code>tf.Tensor</code> of length <code>config.n_layers</code>, with each tensor of shape <code>(2, batch_size, num_heads, sequence_length, embed_size_per_head)</code>).</p>
<p>Contains pre-computed hidden-states (key and values in the attention blocks) of the decoder that can be
used (see <code>past_key_values</code> input) to speed up sequential decoding.`,name:"past_key_values"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqModelOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the decoder at the output of each layer plus the initial embedding outputs.`,name:"decoder_hidden_states"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqModelOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.`,name:"decoder_attentions"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqModelOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder&#x2019;s cross-attention layer, after the attention softmax, used to compute the
weighted average in the cross-attention heads.`,name:"cross_attentions"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqModelOutput.encoder_last_hidden_state",description:`<strong>encoder_last_hidden_state</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Sequence of hidden-states at the output of the last layer of the encoder of the model.`,name:"encoder_last_hidden_state"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqModelOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the encoder at the output of each layer plus the initial embedding outputs.`,name:"encoder_hidden_states"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqModelOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the encoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.`,name:"encoder_attentions"}]}}),is=new T({}),ds=new y({props:{name:"class transformers.modeling_tf_outputs.TFCausalLMOutput",anchor:"transformers.modeling_tf_outputs.TFCausalLMOutput",parameters:[{name:"loss",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"logits",val:": Tensor = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_tf_outputs.py#L304",parametersDescription:[{anchor:"transformers.modeling_tf_outputs.TFCausalLMOutput.loss",description:`<strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(n,)</code>, <em>optional</em>, where n is the number of non-masked labels, returned when <code>labels</code> is provided) &#x2014;
Language modeling loss (for next-token prediction).`,name:"loss"},{anchor:"transformers.modeling_tf_outputs.TFCausalLMOutput.logits",description:`<strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) &#x2014;
Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).`,name:"logits"},{anchor:"transformers.modeling_tf_outputs.TFCausalLMOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_tf_outputs.TFCausalLMOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),us=new T({}),ls=new y({props:{name:"class transformers.modeling_tf_outputs.TFCausalLMOutputWithCrossAttentions",anchor:"transformers.modeling_tf_outputs.TFCausalLMOutputWithCrossAttentions",parameters:[{name:"loss",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"logits",val:": Tensor = None"},{name:"past_key_values",val:": typing.Optional[typing.List[tensorflow.python.framework.ops.Tensor]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_tf_outputs.py#L369",parametersDescription:[{anchor:"transformers.modeling_tf_outputs.TFCausalLMOutputWithCrossAttentions.loss",description:`<strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(n,)</code>, <em>optional</em>, where n is the number of non-masked labels, returned when <code>labels</code> is provided) &#x2014;
Language modeling loss (for next-token prediction).`,name:"loss"},{anchor:"transformers.modeling_tf_outputs.TFCausalLMOutputWithCrossAttentions.logits",description:`<strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) &#x2014;
Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).`,name:"logits"},{anchor:"transformers.modeling_tf_outputs.TFCausalLMOutputWithCrossAttentions.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_tf_outputs.TFCausalLMOutputWithCrossAttentions.attentions",description:`<strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"},{anchor:"transformers.modeling_tf_outputs.TFCausalLMOutputWithCrossAttentions.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder&#x2019;s cross-attention layer, after the attention softmax, used to compute the
weighted average in the cross-attention heads.`,name:"cross_attentions"},{anchor:"transformers.modeling_tf_outputs.TFCausalLMOutputWithCrossAttentions.past_key_values",description:`<strong>past_key_values</strong> (<code>List[tf.Tensor]</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
List of <code>tf.Tensor</code> of length <code>config.n_layers</code>, with each tensor of shape <code>(2, batch_size, num_heads, sequence_length, embed_size_per_head)</code>).</p>
<p>Contains pre-computed hidden-states (key and values in the attention blocks) that can be used (see
<code>past_key_values</code> input) to speed up sequential decoding.`,name:"past_key_values"}]}}),ps=new T({}),cs=new y({props:{name:"class transformers.modeling_tf_outputs.TFCausalLMOutputWithPast",anchor:"transformers.modeling_tf_outputs.TFCausalLMOutputWithPast",parameters:[{name:"loss",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"logits",val:": Tensor = None"},{name:"past_key_values",val:": typing.Optional[typing.List[tensorflow.python.framework.ops.Tensor]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_tf_outputs.py#L333",parametersDescription:[{anchor:"transformers.modeling_tf_outputs.TFCausalLMOutputWithPast.loss",description:`<strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(n,)</code>, <em>optional</em>, where n is the number of non-masked labels, returned when <code>labels</code> is provided) &#x2014;
Language modeling loss (for next-token prediction).`,name:"loss"},{anchor:"transformers.modeling_tf_outputs.TFCausalLMOutputWithPast.logits",description:`<strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) &#x2014;
Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).`,name:"logits"},{anchor:"transformers.modeling_tf_outputs.TFCausalLMOutputWithPast.past_key_values",description:`<strong>past_key_values</strong> (<code>List[tf.Tensor]</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
List of <code>tf.Tensor</code> of length <code>config.n_layers</code>, with each tensor of shape <code>(2, batch_size, num_heads, sequence_length, embed_size_per_head)</code>).</p>
<p>Contains pre-computed hidden-states (key and values in the attention blocks) that can be used (see
<code>past_key_values</code> input) to speed up sequential decoding.`,name:"past_key_values"},{anchor:"transformers.modeling_tf_outputs.TFCausalLMOutputWithPast.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_tf_outputs.TFCausalLMOutputWithPast.attentions",description:`<strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),hs=new T({}),fs=new y({props:{name:"class transformers.modeling_tf_outputs.TFMaskedLMOutput",anchor:"transformers.modeling_tf_outputs.TFMaskedLMOutput",parameters:[{name:"loss",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"logits",val:": Tensor = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_tf_outputs.py#L412",parametersDescription:[{anchor:"transformers.modeling_tf_outputs.TFMaskedLMOutput.loss",description:`<strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(n,)</code>, <em>optional</em>, where n is the number of non-masked labels, returned when <code>labels</code> is provided) &#x2014;
Masked language modeling (MLM) loss.`,name:"loss"},{anchor:"transformers.modeling_tf_outputs.TFMaskedLMOutput.logits",description:`<strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) &#x2014;
Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).`,name:"logits"},{anchor:"transformers.modeling_tf_outputs.TFMaskedLMOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_tf_outputs.TFMaskedLMOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),_s=new T({}),ms=new y({props:{name:"class transformers.modeling_tf_outputs.TFSeq2SeqLMOutput",anchor:"transformers.modeling_tf_outputs.TFSeq2SeqLMOutput",parameters:[{name:"loss",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"logits",val:": Tensor = None"},{name:"past_key_values",val:": typing.Optional[typing.List[tensorflow.python.framework.ops.Tensor]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"encoder_last_hidden_state",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_tf_outputs.py#L441",parametersDescription:[{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqLMOutput.loss",description:`<strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(n,)</code>, <em>optional</em>, where n is the number of non-masked labels, returned when <code>labels</code> is provided) &#x2014;
Language modeling loss.`,name:"loss"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqLMOutput.logits",description:`<strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) &#x2014;
Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).`,name:"logits"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqLMOutput.past_key_values",description:`<strong>past_key_values</strong> (<code>List[tf.Tensor]</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
List of <code>tf.Tensor</code> of length <code>config.n_layers</code>, with each tensor of shape <code>(2, batch_size, num_heads, sequence_length, embed_size_per_head)</code>).</p>
<p>Contains pre-computed hidden-states (key and values in the attention blocks) of the decoder that can be
used (see <code>past_key_values</code> input) to speed up sequential decoding.`,name:"past_key_values"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqLMOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the decoder at the output of each layer plus the initial embedding outputs.`,name:"decoder_hidden_states"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqLMOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.`,name:"decoder_attentions"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqLMOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder&#x2019;s cross-attention layer, after the attention softmax, used to compute the
weighted average in the cross-attention heads.`,name:"cross_attentions"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqLMOutput.encoder_last_hidden_state",description:`<strong>encoder_last_hidden_state</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Sequence of hidden-states at the output of the last layer of the encoder of the model.`,name:"encoder_last_hidden_state"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqLMOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the encoder at the output of each layer plus the initial embedding outputs.`,name:"encoder_hidden_states"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqLMOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the encoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.`,name:"encoder_attentions"}]}}),gs=new T({}),vs=new y({props:{name:"class transformers.modeling_tf_outputs.TFNextSentencePredictorOutput",anchor:"transformers.modeling_tf_outputs.TFNextSentencePredictorOutput",parameters:[{name:"loss",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"logits",val:": Tensor = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_tf_outputs.py#L500",parametersDescription:[{anchor:"transformers.modeling_tf_outputs.TFNextSentencePredictorOutput.loss",description:`<strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(n,)</code>, <em>optional</em>, where n is the number of non-masked labels, returned when <code>next_sentence_label</code> is provided) &#x2014;
Next sentence prediction loss.`,name:"loss"},{anchor:"transformers.modeling_tf_outputs.TFNextSentencePredictorOutput.logits",description:`<strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, 2)</code>) &#x2014;
Prediction scores of the next sequence prediction (classification) head (scores of True/False continuation
before SoftMax).`,name:"logits"},{anchor:"transformers.modeling_tf_outputs.TFNextSentencePredictorOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_tf_outputs.TFNextSentencePredictorOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),ys=new T({}),Ts=new y({props:{name:"class transformers.modeling_tf_outputs.TFSequenceClassifierOutput",anchor:"transformers.modeling_tf_outputs.TFSequenceClassifierOutput",parameters:[{name:"loss",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"logits",val:": Tensor = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_tf_outputs.py#L530",parametersDescription:[{anchor:"transformers.modeling_tf_outputs.TFSequenceClassifierOutput.loss",description:`<strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, )</code>, <em>optional</em>, returned when <code>labels</code> is provided) &#x2014;
Classification (or regression if config.num_labels==1) loss.`,name:"loss"},{anchor:"transformers.modeling_tf_outputs.TFSequenceClassifierOutput.logits",description:`<strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.num_labels)</code>) &#x2014;
Classification (or regression if config.num_labels==1) scores (before SoftMax).`,name:"logits"},{anchor:"transformers.modeling_tf_outputs.TFSequenceClassifierOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_tf_outputs.TFSequenceClassifierOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),ws=new T({}),bs=new y({props:{name:"class transformers.modeling_tf_outputs.TFSeq2SeqSequenceClassifierOutput",anchor:"transformers.modeling_tf_outputs.TFSeq2SeqSequenceClassifierOutput",parameters:[{name:"loss",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"logits",val:": Tensor = None"},{name:"past_key_values",val:": typing.Optional[typing.List[tensorflow.python.framework.ops.Tensor]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"encoder_last_hidden_state",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_tf_outputs.py#L559",parametersDescription:[{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqSequenceClassifierOutput.loss",description:`<strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>label</code> is provided) &#x2014;
Classification (or regression if config.num_labels==1) loss.`,name:"loss"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqSequenceClassifierOutput.logits",description:`<strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.num_labels)</code>) &#x2014;
Classification (or regression if config.num_labels==1) scores (before SoftMax).`,name:"logits"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqSequenceClassifierOutput.past_key_values",description:`<strong>past_key_values</strong> (<code>List[tf.Tensor]</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
List of <code>tf.Tensor</code> of length <code>config.n_layers</code>, with each tensor of shape <code>(2, batch_size, num_heads, sequence_length, embed_size_per_head)</code>).</p>
<p>Contains pre-computed hidden-states (key and values in the attention blocks) of the decoder that can be
used (see <code>past_key_values</code> input) to speed up sequential decoding.`,name:"past_key_values"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqSequenceClassifierOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the decoder at the output of each layer plus the initial embedding outputs.`,name:"decoder_hidden_states"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqSequenceClassifierOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.`,name:"decoder_attentions"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqSequenceClassifierOutput.encoder_last_hidden_state",description:`<strong>encoder_last_hidden_state</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Sequence of hidden-states at the output of the last layer of the encoder of the model.`,name:"encoder_last_hidden_state"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqSequenceClassifierOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the encoder at the output of each layer plus the initial embedding outputs.`,name:"encoder_hidden_states"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqSequenceClassifierOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the encoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.`,name:"encoder_attentions"}]}}),$s=new T({}),xs=new y({props:{name:"class transformers.modeling_tf_outputs.TFMultipleChoiceModelOutput",anchor:"transformers.modeling_tf_outputs.TFMultipleChoiceModelOutput",parameters:[{name:"loss",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"logits",val:": Tensor = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_tf_outputs.py#L611",parametersDescription:[{anchor:"transformers.modeling_tf_outputs.TFMultipleChoiceModelOutput.loss",description:`<strong>loss</strong> (<code>tf.Tensor</code> of shape <em>(batch_size, )</em>, <em>optional</em>, returned when <code>labels</code> is provided) &#x2014;
Classification loss.`,name:"loss"},{anchor:"transformers.modeling_tf_outputs.TFMultipleChoiceModelOutput.logits",description:`<strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, num_choices)</code>) &#x2014;
<em>num_choices</em> is the second dimension of the input tensors. (see <em>input_ids</em> above).</p>
<p>Classification scores (before SoftMax).`,name:"logits"},{anchor:"transformers.modeling_tf_outputs.TFMultipleChoiceModelOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_tf_outputs.TFMultipleChoiceModelOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),qs=new T({}),Os=new y({props:{name:"class transformers.modeling_tf_outputs.TFTokenClassifierOutput",anchor:"transformers.modeling_tf_outputs.TFTokenClassifierOutput",parameters:[{name:"loss",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"logits",val:": Tensor = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_tf_outputs.py#L642",parametersDescription:[{anchor:"transformers.modeling_tf_outputs.TFTokenClassifierOutput.loss",description:`<strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(n,)</code>, <em>optional</em>, where n is the number of unmasked labels, returned when <code>labels</code> is provided)  &#x2014;
Classification loss.`,name:"loss"},{anchor:"transformers.modeling_tf_outputs.TFTokenClassifierOutput.logits",description:`<strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, config.num_labels)</code>) &#x2014;
Classification scores (before SoftMax).`,name:"logits"},{anchor:"transformers.modeling_tf_outputs.TFTokenClassifierOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_tf_outputs.TFTokenClassifierOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),Ss=new T({}),Fs=new y({props:{name:"class transformers.modeling_tf_outputs.TFQuestionAnsweringModelOutput",anchor:"transformers.modeling_tf_outputs.TFQuestionAnsweringModelOutput",parameters:[{name:"loss",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"start_logits",val:": Tensor = None"},{name:"end_logits",val:": Tensor = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_tf_outputs.py#L671",parametersDescription:[{anchor:"transformers.modeling_tf_outputs.TFQuestionAnsweringModelOutput.loss",description:`<strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, )</code>, <em>optional</em>, returned when <code>start_positions</code> and <code>end_positions</code> are provided) &#x2014;
Total span extraction loss is the sum of a Cross-Entropy for the start and end positions.`,name:"loss"},{anchor:"transformers.modeling_tf_outputs.TFQuestionAnsweringModelOutput.start_logits",description:`<strong>start_logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Span-start scores (before SoftMax).`,name:"start_logits"},{anchor:"transformers.modeling_tf_outputs.TFQuestionAnsweringModelOutput.end_logits",description:`<strong>end_logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Span-end scores (before SoftMax).`,name:"end_logits"},{anchor:"transformers.modeling_tf_outputs.TFQuestionAnsweringModelOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_tf_outputs.TFQuestionAnsweringModelOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),Ms=new T({}),ks=new y({props:{name:"class transformers.modeling_tf_outputs.TFSeq2SeqQuestionAnsweringModelOutput",anchor:"transformers.modeling_tf_outputs.TFSeq2SeqQuestionAnsweringModelOutput",parameters:[{name:"loss",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"start_logits",val:": Tensor = None"},{name:"end_logits",val:": Tensor = None"},{name:"past_key_values",val:": typing.Optional[typing.List[tensorflow.python.framework.ops.Tensor]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"encoder_last_hidden_state",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_tf_outputs.py#L703",parametersDescription:[{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqQuestionAnsweringModelOutput.loss",description:`<strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) &#x2014;
Total span extraction loss is the sum of a Cross-Entropy for the start and end positions.`,name:"loss"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqQuestionAnsweringModelOutput.start_logits",description:`<strong>start_logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Span-start scores (before SoftMax).`,name:"start_logits"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqQuestionAnsweringModelOutput.end_logits",description:`<strong>end_logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Span-end scores (before SoftMax).`,name:"end_logits"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqQuestionAnsweringModelOutput.past_key_values",description:`<strong>past_key_values</strong> (<code>List[tf.Tensor]</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
List of <code>tf.Tensor</code> of length <code>config.n_layers</code>, with each tensor of shape <code>(2, batch_size, num_heads, sequence_length, embed_size_per_head)</code>).</p>
<p>Contains pre-computed hidden-states (key and values in the attention blocks) of the decoder that can be
used (see <code>past_key_values</code> input) to speed up sequential decoding.`,name:"past_key_values"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqQuestionAnsweringModelOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the decoder at the output of each layer plus the initial embedding outputs.`,name:"decoder_hidden_states"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqQuestionAnsweringModelOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.`,name:"decoder_attentions"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqQuestionAnsweringModelOutput.encoder_last_hidden_state",description:`<strong>encoder_last_hidden_state</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Sequence of hidden-states at the output of the last layer of the encoder of the model.`,name:"encoder_last_hidden_state"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqQuestionAnsweringModelOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the encoder at the output of each layer plus the initial embedding outputs.`,name:"encoder_hidden_states"},{anchor:"transformers.modeling_tf_outputs.TFSeq2SeqQuestionAnsweringModelOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the encoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.`,name:"encoder_attentions"}]}}),As=new T({}),Cs=new y({props:{name:"class transformers.modeling_flax_outputs.FlaxBaseModelOutput",anchor:"transformers.modeling_flax_outputs.FlaxBaseModelOutput",parameters:[{name:"last_hidden_state",val:": ndarray = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_flax_outputs.py#L23",parametersDescription:[{anchor:"transformers.modeling_flax_outputs.FlaxBaseModelOutput.last_hidden_state",description:`<strong>last_hidden_state</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Sequence of hidden-states at the output of the last layer of the model.`,name:"last_hidden_state"},{anchor:"transformers.modeling_flax_outputs.FlaxBaseModelOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_flax_outputs.FlaxBaseModelOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),zs=new y({props:{name:"replace",anchor:"transformers.modeling_flax_outputs.FlaxBaseModelOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/flax/struct.py#L120"}}),Es=new T({}),Ns=new y({props:{name:"class transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPast",anchor:"transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPast",parameters:[{name:"last_hidden_state",val:": ndarray = None"},{name:"past_key_values",val:": typing.Union[typing.Dict[str, jax._src.numpy.ndarray.ndarray], NoneType] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_flax_outputs.py#L49",parametersDescription:[{anchor:"transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPast.last_hidden_state",description:`<strong>last_hidden_state</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Sequence of hidden-states at the output of the last layer of the model.`,name:"last_hidden_state"},{anchor:"transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPast.past_key_values",description:`<strong>past_key_values</strong> (<code>Dict[str, jnp.ndarray]</code>) &#x2014;
Dictionary of pre-computed hidden-states (key and values in the attention blocks) that can be used for fast
auto-regressive decoding. Pre-computed key and value hidden-states are of shape <em>[batch_size, max_length]</em>.`,name:"past_key_values"},{anchor:"transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPast.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPast.attentions",description:`<strong>attentions</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),Ps=new y({props:{name:"replace",anchor:"transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPast.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/flax/struct.py#L120"}}),Bs=new T({}),Ls=new y({props:{name:"class transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPooling",anchor:"transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPooling",parameters:[{name:"last_hidden_state",val:": ndarray = None"},{name:"pooler_output",val:": ndarray = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_flax_outputs.py#L79",parametersDescription:[{anchor:"transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPooling.last_hidden_state",description:`<strong>last_hidden_state</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Sequence of hidden-states at the output of the last layer of the model.`,name:"last_hidden_state"},{anchor:"transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPooling.pooler_output",description:`<strong>pooler_output</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, hidden_size)</code>) &#x2014;
Last layer hidden-state of the first token of the sequence (classification token) further processed by a
Linear layer and a Tanh activation function. The Linear layer weights are trained from the next sentence
prediction (classification) objective during pretraining.`,name:"pooler_output"},{anchor:"transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPooling.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPooling.attentions",description:`<strong>attentions</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),js=new y({props:{name:"replace",anchor:"transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPooling.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/flax/struct.py#L120"}}),Ws=new T({}),Ds=new y({props:{name:"class transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPastAndCrossAttentions",anchor:"transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPastAndCrossAttentions",parameters:[{name:"last_hidden_state",val:": ndarray = None"},{name:"past_key_values",val:": typing.Optional[typing.Tuple[typing.Tuple[jax._src.numpy.ndarray.ndarray]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_flax_outputs.py#L110",parametersDescription:[{anchor:"transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPastAndCrossAttentions.last_hidden_state",description:`<strong>last_hidden_state</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Sequence of hidden-states at the output of the last layer of the model.</p>
<p>If <code>past_key_values</code> is used only the last hidden-state of the sequences of shape <code>(batch_size, 1, hidden_size)</code> is output.`,name:"last_hidden_state"},{anchor:"transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPastAndCrossAttentions.past_key_values",description:`<strong>past_key_values</strong> (<code>tuple(tuple(jnp.ndarray))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
Tuple of <code>tuple(jnp.ndarray)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of shape
<code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>) and optionally if
<code>config.is_encoder_decoder=True</code> 2 additional tensors of shape <code>(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)</code>.</p>
<p>Contains pre-computed hidden-states (key and values in the self-attention blocks and optionally if
<code>config.is_encoder_decoder=True</code> in the cross-attention blocks) that can be used (see <code>past_key_values</code>
input) to speed up sequential decoding.`,name:"past_key_values"},{anchor:"transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPastAndCrossAttentions.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPastAndCrossAttentions.attentions",description:`<strong>attentions</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"},{anchor:"transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPastAndCrossAttentions.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> and <code>config.add_cross_attention=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder&#x2019;s cross-attention layer, after the attention softmax, used to compute the
weighted average in the cross-attention heads.`,name:"cross_attentions"}]}}),Hs=new y({props:{name:"replace",anchor:"transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPastAndCrossAttentions.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/flax/struct.py#L120"}}),Qs=new T({}),Is=new y({props:{name:"class transformers.modeling_flax_outputs.FlaxSeq2SeqModelOutput",anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqModelOutput",parameters:[{name:"last_hidden_state",val:": ndarray = None"},{name:"past_key_values",val:": typing.Optional[typing.Tuple[typing.Tuple[jax._src.numpy.ndarray.ndarray]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"encoder_last_hidden_state",val:": typing.Optional[jax._src.numpy.ndarray.ndarray] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_flax_outputs.py#L156",parametersDescription:[{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqModelOutput.last_hidden_state",description:`<strong>last_hidden_state</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Sequence of hidden-states at the output of the last layer of the decoder of the model.</p>
<p>If <code>past_key_values</code> is used only the last hidden-state of the sequences of shape <code>(batch_size, 1, hidden_size)</code> is output.`,name:"last_hidden_state"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqModelOutput.past_key_values",description:`<strong>past_key_values</strong> (<code>tuple(tuple(jnp.ndarray))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
Tuple of <code>tuple(jnp.ndarray)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of shape
<code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>) and 2 additional tensors of shape
<code>(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)</code>.</p>
<p>Contains pre-computed hidden-states (key and values in the self-attention blocks and in the cross-attention
blocks) that can be used (see <code>past_key_values</code> input) to speed up sequential decoding.`,name:"past_key_values"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqModelOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the decoder at the output of each layer plus the initial embedding outputs.`,name:"decoder_hidden_states"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqModelOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.`,name:"decoder_attentions"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqModelOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder&#x2019;s cross-attention layer, after the attention softmax, used to compute the
weighted average in the cross-attention heads.`,name:"cross_attentions"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqModelOutput.encoder_last_hidden_state",description:`<strong>encoder_last_hidden_state</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Sequence of hidden-states at the output of the last layer of the encoder of the model.`,name:"encoder_last_hidden_state"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqModelOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the encoder at the output of each layer plus the initial embedding outputs.`,name:"encoder_hidden_states"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqModelOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the encoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.`,name:"encoder_attentions"}]}}),Vs=new y({props:{name:"replace",anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqModelOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/flax/struct.py#L120"}}),Rs=new T({}),Us=new y({props:{name:"class transformers.modeling_flax_outputs.FlaxCausalLMOutputWithCrossAttentions",anchor:"transformers.modeling_flax_outputs.FlaxCausalLMOutputWithCrossAttentions",parameters:[{name:"logits",val:": ndarray = None"},{name:"past_key_values",val:": typing.Optional[typing.Tuple[typing.Tuple[jax._src.numpy.ndarray.ndarray]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_flax_outputs.py#L217",parametersDescription:[{anchor:"transformers.modeling_flax_outputs.FlaxCausalLMOutputWithCrossAttentions.logits",description:`<strong>logits</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) &#x2014;
Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).`,name:"logits"},{anchor:"transformers.modeling_flax_outputs.FlaxCausalLMOutputWithCrossAttentions.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_flax_outputs.FlaxCausalLMOutputWithCrossAttentions.attentions",description:`<strong>attentions</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"},{anchor:"transformers.modeling_flax_outputs.FlaxCausalLMOutputWithCrossAttentions.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Cross attentions weights after the attention softmax, used to compute the weighted average in the
cross-attention heads.`,name:"cross_attentions"},{anchor:"transformers.modeling_flax_outputs.FlaxCausalLMOutputWithCrossAttentions.past_key_values",description:`<strong>past_key_values</strong> (<code>tuple(tuple(jnp.ndarray))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> tuples of length <code>config.n_layers</code>, with each tuple containing the cached key, value
states of the self-attention and the cross-attention layers if model is used in encoder-decoder setting.
Only relevant if <code>config.is_decoder = True</code>.</p>
<p>Contains pre-computed hidden-states (key and values in the attention blocks) that can be used (see
<code>past_key_values</code> input) to speed up sequential decoding.`,name:"past_key_values"}]}}),Ys=new y({props:{name:"replace",anchor:"transformers.modeling_flax_outputs.FlaxCausalLMOutputWithCrossAttentions.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/flax/struct.py#L120"}}),Js=new T({}),Gs=new y({props:{name:"class transformers.modeling_flax_outputs.FlaxMaskedLMOutput",anchor:"transformers.modeling_flax_outputs.FlaxMaskedLMOutput",parameters:[{name:"logits",val:": ndarray = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_flax_outputs.py#L258",parametersDescription:[{anchor:"transformers.modeling_flax_outputs.FlaxMaskedLMOutput.logits",description:`<strong>logits</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) &#x2014;
Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).`,name:"logits"},{anchor:"transformers.modeling_flax_outputs.FlaxMaskedLMOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_flax_outputs.FlaxMaskedLMOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),Ks=new y({props:{name:"replace",anchor:"transformers.modeling_flax_outputs.FlaxMaskedLMOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/flax/struct.py#L120"}}),Xs=new T({}),Zs=new y({props:{name:"class transformers.modeling_flax_outputs.FlaxSeq2SeqLMOutput",anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqLMOutput",parameters:[{name:"logits",val:": ndarray = None"},{name:"past_key_values",val:": typing.Optional[typing.Tuple[typing.Tuple[jax._src.numpy.ndarray.ndarray]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"encoder_last_hidden_state",val:": typing.Optional[jax._src.numpy.ndarray.ndarray] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_flax_outputs.py#L287",parametersDescription:[{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqLMOutput.logits",description:`<strong>logits</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) &#x2014;
Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).`,name:"logits"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqLMOutput.past_key_values",description:`<strong>past_key_values</strong> (<code>tuple(tuple(jnp.ndarray))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
Tuple of <code>tuple(jnp.ndarray)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of shape
<code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>) and 2 additional tensors of shape
<code>(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)</code>.</p>
<p>Contains pre-computed hidden-states (key and values in the self-attention blocks and in the cross-attention
blocks) that can be used (see <code>past_key_values</code> input) to speed up sequential decoding.`,name:"past_key_values"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqLMOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the decoder at the output of each layer plus the initial embedding outputs.`,name:"decoder_hidden_states"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqLMOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.`,name:"decoder_attentions"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqLMOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder&#x2019;s cross-attention layer, after the attention softmax, used to compute the
weighted average in the cross-attention heads.`,name:"cross_attentions"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqLMOutput.encoder_last_hidden_state",description:`<strong>encoder_last_hidden_state</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Sequence of hidden-states at the output of the last layer of the encoder of the model.`,name:"encoder_last_hidden_state"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqLMOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the encoder at the output of each layer plus the initial embedding outputs.`,name:"encoder_hidden_states"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqLMOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the encoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.`,name:"encoder_attentions"}]}}),ea=new y({props:{name:"replace",anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqLMOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/flax/struct.py#L120"}}),ta=new T({}),oa=new y({props:{name:"class transformers.modeling_flax_outputs.FlaxNextSentencePredictorOutput",anchor:"transformers.modeling_flax_outputs.FlaxNextSentencePredictorOutput",parameters:[{name:"logits",val:": ndarray = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_flax_outputs.py#L344",parametersDescription:[{anchor:"transformers.modeling_flax_outputs.FlaxNextSentencePredictorOutput.logits",description:`<strong>logits</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, 2)</code>) &#x2014;
Prediction scores of the next sequence prediction (classification) head (scores of True/False continuation
before SoftMax).`,name:"logits"},{anchor:"transformers.modeling_flax_outputs.FlaxNextSentencePredictorOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_flax_outputs.FlaxNextSentencePredictorOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),na=new y({props:{name:"replace",anchor:"transformers.modeling_flax_outputs.FlaxNextSentencePredictorOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/flax/struct.py#L120"}}),sa=new T({}),aa=new y({props:{name:"class transformers.modeling_flax_outputs.FlaxSequenceClassifierOutput",anchor:"transformers.modeling_flax_outputs.FlaxSequenceClassifierOutput",parameters:[{name:"logits",val:": ndarray = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_flax_outputs.py#L371",parametersDescription:[{anchor:"transformers.modeling_flax_outputs.FlaxSequenceClassifierOutput.logits",description:`<strong>logits</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.num_labels)</code>) &#x2014;
Classification (or regression if config.num_labels==1) scores (before SoftMax).`,name:"logits"},{anchor:"transformers.modeling_flax_outputs.FlaxSequenceClassifierOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_flax_outputs.FlaxSequenceClassifierOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),ra=new y({props:{name:"replace",anchor:"transformers.modeling_flax_outputs.FlaxSequenceClassifierOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/flax/struct.py#L120"}}),ia=new T({}),da=new y({props:{name:"class transformers.modeling_flax_outputs.FlaxSeq2SeqSequenceClassifierOutput",anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqSequenceClassifierOutput",parameters:[{name:"logits",val:": ndarray = None"},{name:"past_key_values",val:": typing.Optional[typing.Tuple[typing.Tuple[jax._src.numpy.ndarray.ndarray]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"encoder_last_hidden_state",val:": typing.Optional[jax._src.numpy.ndarray.ndarray] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_flax_outputs.py#L397",parametersDescription:[{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqSequenceClassifierOutput.logits",description:`<strong>logits</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.num_labels)</code>) &#x2014;
Classification (or regression if config.num_labels==1) scores (before SoftMax).`,name:"logits"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqSequenceClassifierOutput.past_key_values",description:`<strong>past_key_values</strong> (<code>tuple(tuple(jnp.ndarray))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
Tuple of <code>tuple(jnp.ndarray)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of shape
<code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>) and 2 additional tensors of shape
<code>(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)</code>.</p>
<p>Contains pre-computed hidden-states (key and values in the self-attention blocks and in the cross-attention
blocks) that can be used (see <code>past_key_values</code> input) to speed up sequential decoding.`,name:"past_key_values"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqSequenceClassifierOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the decoder at the output of each layer plus the initial embedding outputs.`,name:"decoder_hidden_states"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqSequenceClassifierOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.`,name:"decoder_attentions"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqSequenceClassifierOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder&#x2019;s cross-attention layer, after the attention softmax, used to compute the
weighted average in the cross-attention heads.`,name:"cross_attentions"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqSequenceClassifierOutput.encoder_last_hidden_state",description:`<strong>encoder_last_hidden_state</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Sequence of hidden-states at the output of the last layer of the encoder of the model.`,name:"encoder_last_hidden_state"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqSequenceClassifierOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the encoder at the output of each layer plus the initial embedding outputs.`,name:"encoder_hidden_states"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqSequenceClassifierOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the encoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.`,name:"encoder_attentions"}]}}),ua=new y({props:{name:"replace",anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqSequenceClassifierOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/flax/struct.py#L120"}}),la=new T({}),pa=new y({props:{name:"class transformers.modeling_flax_outputs.FlaxMultipleChoiceModelOutput",anchor:"transformers.modeling_flax_outputs.FlaxMultipleChoiceModelOutput",parameters:[{name:"logits",val:": ndarray = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_flax_outputs.py#L454",parametersDescription:[{anchor:"transformers.modeling_flax_outputs.FlaxMultipleChoiceModelOutput.logits",description:`<strong>logits</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, num_choices)</code>) &#x2014;
<em>num_choices</em> is the second dimension of the input tensors. (see <em>input_ids</em> above).</p>
<p>Classification scores (before SoftMax).`,name:"logits"},{anchor:"transformers.modeling_flax_outputs.FlaxMultipleChoiceModelOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_flax_outputs.FlaxMultipleChoiceModelOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),ca=new y({props:{name:"replace",anchor:"transformers.modeling_flax_outputs.FlaxMultipleChoiceModelOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/flax/struct.py#L120"}}),ha=new T({}),fa=new y({props:{name:"class transformers.modeling_flax_outputs.FlaxTokenClassifierOutput",anchor:"transformers.modeling_flax_outputs.FlaxTokenClassifierOutput",parameters:[{name:"logits",val:": ndarray = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_flax_outputs.py#L482",parametersDescription:[{anchor:"transformers.modeling_flax_outputs.FlaxTokenClassifierOutput.logits",description:`<strong>logits</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length, config.num_labels)</code>) &#x2014;
Classification scores (before SoftMax).`,name:"logits"},{anchor:"transformers.modeling_flax_outputs.FlaxTokenClassifierOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_flax_outputs.FlaxTokenClassifierOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),_a=new y({props:{name:"replace",anchor:"transformers.modeling_flax_outputs.FlaxTokenClassifierOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/flax/struct.py#L120"}}),ma=new T({}),ga=new y({props:{name:"class transformers.modeling_flax_outputs.FlaxQuestionAnsweringModelOutput",anchor:"transformers.modeling_flax_outputs.FlaxQuestionAnsweringModelOutput",parameters:[{name:"start_logits",val:": ndarray = None"},{name:"end_logits",val:": ndarray = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_flax_outputs.py#L508",parametersDescription:[{anchor:"transformers.modeling_flax_outputs.FlaxQuestionAnsweringModelOutput.start_logits",description:`<strong>start_logits</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Span-start scores (before SoftMax).`,name:"start_logits"},{anchor:"transformers.modeling_flax_outputs.FlaxQuestionAnsweringModelOutput.end_logits",description:`<strong>end_logits</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Span-end scores (before SoftMax).`,name:"end_logits"},{anchor:"transformers.modeling_flax_outputs.FlaxQuestionAnsweringModelOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.modeling_flax_outputs.FlaxQuestionAnsweringModelOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}]}}),va=new y({props:{name:"replace",anchor:"transformers.modeling_flax_outputs.FlaxQuestionAnsweringModelOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/flax/struct.py#L120"}}),ya=new T({}),Ta=new y({props:{name:"class transformers.modeling_flax_outputs.FlaxSeq2SeqQuestionAnsweringModelOutput",anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqQuestionAnsweringModelOutput",parameters:[{name:"start_logits",val:": ndarray = None"},{name:"end_logits",val:": ndarray = None"},{name:"past_key_values",val:": typing.Optional[typing.Tuple[typing.Tuple[jax._src.numpy.ndarray.ndarray]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"encoder_last_hidden_state",val:": typing.Optional[jax._src.numpy.ndarray.ndarray] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[jax._src.numpy.ndarray.ndarray]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/transformers/modeling_flax_outputs.py#L537",parametersDescription:[{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqQuestionAnsweringModelOutput.start_logits",description:`<strong>start_logits</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Span-start scores (before SoftMax).`,name:"start_logits"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqQuestionAnsweringModelOutput.end_logits",description:`<strong>end_logits</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Span-end scores (before SoftMax).`,name:"end_logits"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqQuestionAnsweringModelOutput.past_key_values",description:`<strong>past_key_values</strong> (<code>tuple(tuple(jnp.ndarray))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
Tuple of <code>tuple(jnp.ndarray)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of shape
<code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>) and 2 additional tensors of shape
<code>(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)</code>.</p>
<p>Contains pre-computed hidden-states (key and values in the self-attention blocks and in the cross-attention
blocks) that can be used (see <code>past_key_values</code> input) to speed up sequential decoding.`,name:"past_key_values"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqQuestionAnsweringModelOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the decoder at the output of each layer plus the initial embedding outputs.`,name:"decoder_hidden_states"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqQuestionAnsweringModelOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.`,name:"decoder_attentions"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqQuestionAnsweringModelOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder&#x2019;s cross-attention layer, after the attention softmax, used to compute the
weighted average in the cross-attention heads.`,name:"cross_attentions"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqQuestionAnsweringModelOutput.encoder_last_hidden_state",description:`<strong>encoder_last_hidden_state</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Sequence of hidden-states at the output of the last layer of the encoder of the model.`,name:"encoder_last_hidden_state"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqQuestionAnsweringModelOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the encoder at the output of each layer plus the initial embedding outputs.`,name:"encoder_hidden_states"},{anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqQuestionAnsweringModelOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>jnp.ndarray</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the encoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.`,name:"encoder_attentions"}]}}),wa=new y({props:{name:"replace",anchor:"transformers.modeling_flax_outputs.FlaxSeq2SeqQuestionAnsweringModelOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16673/src/flax/struct.py#L120"}}),{c(){$=n("meta"),Bt=i(),x=n("h1"),A=n("a"),K=n("span"),h(q.$$.fragment),nn=i(),X=n("span"),Z=p("Model outputs"),M=i(),C=n("p"),$a=p("All models have outputs that are instances of subclasses of "),xa=n("a"),Lh=p("ModelOutput"),jh=p(`. Those are
data structures containing all the information returned by the model, but that can also be used as tuples or
dictionaries.`),Mu=i(),qa=n("p"),Wh=p("Let\u2019s see of this looks on an example:"),ku=i(),h(sn.$$.fragment),Au=i(),w=n("p"),Dh=p("The "),Ia=n("code"),Hh=p("outputs"),Qh=p(" object is a "),Oa=n("a"),Ih=p("SequenceClassifierOutput"),Vh=p(`, as we can see in the
documentation of that class below, it means it has an optional `),Va=n("code"),Rh=p("loss"),Uh=p(", a "),Ra=n("code"),Yh=p("logits"),Jh=p(" an optional "),Ua=n("code"),Gh=p("hidden_states"),Kh=p(` and
an optional `),Ya=n("code"),Xh=p("attentions"),Zh=p(" attribute. Here we have the "),Ja=n("code"),ef=p("loss"),tf=p(" since we passed along "),Ga=n("code"),of=p("labels"),nf=p(`, but we don\u2019t have
`),Ka=n("code"),sf=p("hidden_states"),af=p(" and "),Xa=n("code"),rf=p("attentions"),df=p(" because we didn\u2019t pass "),Za=n("code"),uf=p("output_hidden_states=True"),lf=p(` or
`),er=n("code"),pf=p("output_attentions=True"),cf=p("."),Cu=i(),O=n("p"),hf=p(`You can access each attribute as you would usually do, and if that attribute has not been returned by the model, you
will get `),tr=n("code"),ff=p("None"),_f=p(". Here for instance "),or=n("code"),mf=p("outputs.loss"),gf=p(" is the loss computed by the model, and "),nr=n("code"),vf=p("outputs.attentions"),yf=p(` is
`),sr=n("code"),Tf=p("None"),wf=p("."),zu=i(),S=n("p"),bf=p("When considering our "),ar=n("code"),$f=p("outputs"),xf=p(" object as tuple, it only considers the attributes that don\u2019t have "),rr=n("code"),qf=p("None"),Of=p(` values.
Here for instance, it has two elements, `),ir=n("code"),Sf=p("loss"),Ff=p(" then "),dr=n("code"),Mf=p("logits"),kf=p(", so"),Eu=i(),h(an.$$.fragment),Nu=i(),Lt=n("p"),Af=p("will return the tuple "),ur=n("code"),Cf=p("(outputs.loss, outputs.logits)"),zf=p(" for instance."),Pu=i(),F=n("p"),Ef=p("When considering our "),lr=n("code"),Nf=p("outputs"),Pf=p(" object as dictionary, it only considers the attributes that don\u2019t have "),pr=n("code"),Bf=p("None"),Lf=p(`
values. Here for instance, it has two keys that are `),cr=n("code"),jf=p("loss"),Wf=p(" and "),hr=n("code"),Df=p("logits"),Hf=p("."),Bu=i(),Sa=n("p"),Qf=p(`We document here the generic model outputs that are used by more than one model type. Specific output types are
documented on their corresponding model page.`),Lu=i(),ee=n("h2"),jt=n("a"),fr=n("span"),h(rn.$$.fragment),If=i(),_r=n("span"),Vf=p("ModelOutput"),ju=i(),k=n("div"),h(dn.$$.fragment),Rf=i(),te=n("p"),Uf=p("Base class for all model outputs as dataclass. Has a "),mr=n("code"),Yf=p("__getitem__"),Jf=p(` that allows indexing by integer or slice (like a
tuple) or strings (like a dictionary) that will ignore the `),gr=n("code"),Gf=p("None"),Kf=p(` attributes. Otherwise behaves like a regular
python dictionary.`),Xf=i(),h(Wt.$$.fragment),Zf=i(),Dt=n("div"),h(un.$$.fragment),e_=i(),ln=n("p"),t_=p("Convert self to a tuple containing all the attributes/keys that are not "),vr=n("code"),o_=p("None"),n_=p("."),Wu=i(),oe=n("h2"),Ht=n("a"),yr=n("span"),h(pn.$$.fragment),s_=i(),Tr=n("span"),a_=p("BaseModelOutput"),Du=i(),ne=n("div"),h(cn.$$.fragment),r_=i(),wr=n("p"),i_=p("Base class for model\u2019s outputs, with potential hidden states and attentions."),Hu=i(),se=n("h2"),Qt=n("a"),br=n("span"),h(hn.$$.fragment),d_=i(),$r=n("span"),u_=p("BaseModelOutputWithPooling"),Qu=i(),ae=n("div"),h(fn.$$.fragment),l_=i(),xr=n("p"),p_=p("Base class for model\u2019s outputs that also contains a pooling of the last hidden states."),Iu=i(),re=n("h2"),It=n("a"),qr=n("span"),h(_n.$$.fragment),c_=i(),Or=n("span"),h_=p("BaseModelOutputWithCrossAttentions"),Vu=i(),ie=n("div"),h(mn.$$.fragment),f_=i(),Sr=n("p"),__=p("Base class for model\u2019s outputs, with potential hidden states and attentions."),Ru=i(),de=n("h2"),Vt=n("a"),Fr=n("span"),h(gn.$$.fragment),m_=i(),Mr=n("span"),g_=p("BaseModelOutputWithPoolingAndCrossAttentions"),Uu=i(),ue=n("div"),h(vn.$$.fragment),v_=i(),kr=n("p"),y_=p("Base class for model\u2019s outputs that also contains a pooling of the last hidden states."),Yu=i(),le=n("h2"),Rt=n("a"),Ar=n("span"),h(yn.$$.fragment),T_=i(),Cr=n("span"),w_=p("BaseModelOutputWithPast"),Ju=i(),pe=n("div"),h(Tn.$$.fragment),b_=i(),zr=n("p"),$_=p("Base class for model\u2019s outputs that may also contain a past key/values (to speed up sequential decoding)."),Gu=i(),ce=n("h2"),Ut=n("a"),Er=n("span"),h(wn.$$.fragment),x_=i(),Nr=n("span"),q_=p("BaseModelOutputWithPastAndCrossAttentions"),Ku=i(),he=n("div"),h(bn.$$.fragment),O_=i(),Pr=n("p"),S_=p("Base class for model\u2019s outputs that may also contain a past key/values (to speed up sequential decoding)."),Xu=i(),fe=n("h2"),Yt=n("a"),Br=n("span"),h($n.$$.fragment),F_=i(),Lr=n("span"),M_=p("Seq2SeqModelOutput"),Zu=i(),_e=n("div"),h(xn.$$.fragment),k_=i(),jr=n("p"),A_=p(`Base class for model encoder\u2019s outputs that also contains : pre-computed hidden states that can speed up sequential
decoding.`),el=i(),me=n("h2"),Jt=n("a"),Wr=n("span"),h(qn.$$.fragment),C_=i(),Dr=n("span"),z_=p("CausalLMOutput"),tl=i(),ge=n("div"),h(On.$$.fragment),E_=i(),Hr=n("p"),N_=p("Base class for causal language model (or autoregressive) outputs."),ol=i(),ve=n("h2"),Gt=n("a"),Qr=n("span"),h(Sn.$$.fragment),P_=i(),Ir=n("span"),B_=p("CausalLMOutputWithCrossAttentions"),nl=i(),ye=n("div"),h(Fn.$$.fragment),L_=i(),Vr=n("p"),j_=p("Base class for causal language model (or autoregressive) outputs."),sl=i(),Te=n("h2"),Kt=n("a"),Rr=n("span"),h(Mn.$$.fragment),W_=i(),Ur=n("span"),D_=p("CausalLMOutputWithPast"),al=i(),we=n("div"),h(kn.$$.fragment),H_=i(),Yr=n("p"),Q_=p("Base class for causal language model (or autoregressive) outputs."),rl=i(),be=n("h2"),Xt=n("a"),Jr=n("span"),h(An.$$.fragment),I_=i(),Gr=n("span"),V_=p("MaskedLMOutput"),il=i(),$e=n("div"),h(Cn.$$.fragment),R_=i(),Kr=n("p"),U_=p("Base class for masked language models outputs."),dl=i(),xe=n("h2"),Zt=n("a"),Xr=n("span"),h(zn.$$.fragment),Y_=i(),Zr=n("span"),J_=p("Seq2SeqLMOutput"),ul=i(),qe=n("div"),h(En.$$.fragment),G_=i(),ei=n("p"),K_=p("Base class for sequence-to-sequence language models outputs."),ll=i(),Oe=n("h2"),eo=n("a"),ti=n("span"),h(Nn.$$.fragment),X_=i(),oi=n("span"),Z_=p("NextSentencePredictorOutput"),pl=i(),Se=n("div"),h(Pn.$$.fragment),em=i(),ni=n("p"),tm=p("Base class for outputs of models predicting if two sentences are consecutive or not."),cl=i(),Fe=n("h2"),to=n("a"),si=n("span"),h(Bn.$$.fragment),om=i(),ai=n("span"),nm=p("SequenceClassifierOutput"),hl=i(),Me=n("div"),h(Ln.$$.fragment),sm=i(),ri=n("p"),am=p("Base class for outputs of sentence classification models."),fl=i(),ke=n("h2"),oo=n("a"),ii=n("span"),h(jn.$$.fragment),rm=i(),di=n("span"),im=p("Seq2SeqSequenceClassifierOutput"),_l=i(),Ae=n("div"),h(Wn.$$.fragment),dm=i(),ui=n("p"),um=p("Base class for outputs of sequence-to-sequence sentence classification models."),ml=i(),Ce=n("h2"),no=n("a"),li=n("span"),h(Dn.$$.fragment),lm=i(),pi=n("span"),pm=p("MultipleChoiceModelOutput"),gl=i(),ze=n("div"),h(Hn.$$.fragment),cm=i(),ci=n("p"),hm=p("Base class for outputs of multiple choice models."),vl=i(),Ee=n("h2"),so=n("a"),hi=n("span"),h(Qn.$$.fragment),fm=i(),fi=n("span"),_m=p("TokenClassifierOutput"),yl=i(),Ne=n("div"),h(In.$$.fragment),mm=i(),_i=n("p"),gm=p("Base class for outputs of token classification models."),Tl=i(),Pe=n("h2"),ao=n("a"),mi=n("span"),h(Vn.$$.fragment),vm=i(),gi=n("span"),ym=p("QuestionAnsweringModelOutput"),wl=i(),Be=n("div"),h(Rn.$$.fragment),Tm=i(),vi=n("p"),wm=p("Base class for outputs of question answering models."),bl=i(),Le=n("h2"),ro=n("a"),yi=n("span"),h(Un.$$.fragment),bm=i(),Ti=n("span"),$m=p("Seq2SeqQuestionAnsweringModelOutput"),$l=i(),je=n("div"),h(Yn.$$.fragment),xm=i(),wi=n("p"),qm=p("Base class for outputs of sequence-to-sequence question answering models."),xl=i(),We=n("h2"),io=n("a"),bi=n("span"),h(Jn.$$.fragment),Om=i(),$i=n("span"),Sm=p("TFBaseModelOutput"),ql=i(),De=n("div"),h(Gn.$$.fragment),Fm=i(),xi=n("p"),Mm=p("Base class for model\u2019s outputs, with potential hidden states and attentions."),Ol=i(),He=n("h2"),uo=n("a"),qi=n("span"),h(Kn.$$.fragment),km=i(),Oi=n("span"),Am=p("TFBaseModelOutputWithPooling"),Sl=i(),Qe=n("div"),h(Xn.$$.fragment),Cm=i(),Si=n("p"),zm=p("Base class for model\u2019s outputs that also contains a pooling of the last hidden states."),Fl=i(),Ie=n("h2"),lo=n("a"),Fi=n("span"),h(Zn.$$.fragment),Em=i(),Mi=n("span"),Nm=p("TFBaseModelOutputWithPoolingAndCrossAttentions"),Ml=i(),Ve=n("div"),h(es.$$.fragment),Pm=i(),ki=n("p"),Bm=p("Base class for model\u2019s outputs that also contains a pooling of the last hidden states."),kl=i(),Re=n("h2"),po=n("a"),Ai=n("span"),h(ts.$$.fragment),Lm=i(),Ci=n("span"),jm=p("TFBaseModelOutputWithPast"),Al=i(),Ue=n("div"),h(os.$$.fragment),Wm=i(),zi=n("p"),Dm=p("Base class for model\u2019s outputs that may also contain a past key/values (to speed up sequential decoding)."),Cl=i(),Ye=n("h2"),co=n("a"),Ei=n("span"),h(ns.$$.fragment),Hm=i(),Ni=n("span"),Qm=p("TFBaseModelOutputWithPastAndCrossAttentions"),zl=i(),Je=n("div"),h(ss.$$.fragment),Im=i(),Pi=n("p"),Vm=p("Base class for model\u2019s outputs that may also contain a past key/values (to speed up sequential decoding)."),El=i(),Ge=n("h2"),ho=n("a"),Bi=n("span"),h(as.$$.fragment),Rm=i(),Li=n("span"),Um=p("TFSeq2SeqModelOutput"),Nl=i(),Ke=n("div"),h(rs.$$.fragment),Ym=i(),ji=n("p"),Jm=p(`Base class for model encoder\u2019s outputs that also contains : pre-computed hidden states that can speed up sequential
decoding.`),Pl=i(),Xe=n("h2"),fo=n("a"),Wi=n("span"),h(is.$$.fragment),Gm=i(),Di=n("span"),Km=p("TFCausalLMOutput"),Bl=i(),Ze=n("div"),h(ds.$$.fragment),Xm=i(),Hi=n("p"),Zm=p("Base class for causal language model (or autoregressive) outputs."),Ll=i(),et=n("h2"),_o=n("a"),Qi=n("span"),h(us.$$.fragment),eg=i(),Ii=n("span"),tg=p("TFCausalLMOutputWithCrossAttentions"),jl=i(),tt=n("div"),h(ls.$$.fragment),og=i(),Vi=n("p"),ng=p("Base class for causal language model (or autoregressive) outputs."),Wl=i(),ot=n("h2"),mo=n("a"),Ri=n("span"),h(ps.$$.fragment),sg=i(),Ui=n("span"),ag=p("TFCausalLMOutputWithPast"),Dl=i(),nt=n("div"),h(cs.$$.fragment),rg=i(),Yi=n("p"),ig=p("Base class for causal language model (or autoregressive) outputs."),Hl=i(),st=n("h2"),go=n("a"),Ji=n("span"),h(hs.$$.fragment),dg=i(),Gi=n("span"),ug=p("TFMaskedLMOutput"),Ql=i(),at=n("div"),h(fs.$$.fragment),lg=i(),Ki=n("p"),pg=p("Base class for masked language models outputs."),Il=i(),rt=n("h2"),vo=n("a"),Xi=n("span"),h(_s.$$.fragment),cg=i(),Zi=n("span"),hg=p("TFSeq2SeqLMOutput"),Vl=i(),it=n("div"),h(ms.$$.fragment),fg=i(),ed=n("p"),_g=p("Base class for sequence-to-sequence language models outputs."),Rl=i(),dt=n("h2"),yo=n("a"),td=n("span"),h(gs.$$.fragment),mg=i(),od=n("span"),gg=p("TFNextSentencePredictorOutput"),Ul=i(),ut=n("div"),h(vs.$$.fragment),vg=i(),nd=n("p"),yg=p("Base class for outputs of models predicting if two sentences are consecutive or not."),Yl=i(),lt=n("h2"),To=n("a"),sd=n("span"),h(ys.$$.fragment),Tg=i(),ad=n("span"),wg=p("TFSequenceClassifierOutput"),Jl=i(),pt=n("div"),h(Ts.$$.fragment),bg=i(),rd=n("p"),$g=p("Base class for outputs of sentence classification models."),Gl=i(),ct=n("h2"),wo=n("a"),id=n("span"),h(ws.$$.fragment),xg=i(),dd=n("span"),qg=p("TFSeq2SeqSequenceClassifierOutput"),Kl=i(),ht=n("div"),h(bs.$$.fragment),Og=i(),ud=n("p"),Sg=p("Base class for outputs of sequence-to-sequence sentence classification models."),Xl=i(),ft=n("h2"),bo=n("a"),ld=n("span"),h($s.$$.fragment),Fg=i(),pd=n("span"),Mg=p("TFMultipleChoiceModelOutput"),Zl=i(),_t=n("div"),h(xs.$$.fragment),kg=i(),cd=n("p"),Ag=p("Base class for outputs of multiple choice models."),ep=i(),mt=n("h2"),$o=n("a"),hd=n("span"),h(qs.$$.fragment),Cg=i(),fd=n("span"),zg=p("TFTokenClassifierOutput"),tp=i(),gt=n("div"),h(Os.$$.fragment),Eg=i(),_d=n("p"),Ng=p("Base class for outputs of token classification models."),op=i(),vt=n("h2"),xo=n("a"),md=n("span"),h(Ss.$$.fragment),Pg=i(),gd=n("span"),Bg=p("TFQuestionAnsweringModelOutput"),np=i(),yt=n("div"),h(Fs.$$.fragment),Lg=i(),vd=n("p"),jg=p("Base class for outputs of question answering models."),sp=i(),Tt=n("h2"),qo=n("a"),yd=n("span"),h(Ms.$$.fragment),Wg=i(),Td=n("span"),Dg=p("TFSeq2SeqQuestionAnsweringModelOutput"),ap=i(),wt=n("div"),h(ks.$$.fragment),Hg=i(),wd=n("p"),Qg=p("Base class for outputs of sequence-to-sequence question answering models."),rp=i(),bt=n("h2"),Oo=n("a"),bd=n("span"),h(As.$$.fragment),Ig=i(),$d=n("span"),Vg=p("FlaxBaseModelOutput"),ip=i(),z=n("div"),h(Cs.$$.fragment),Rg=i(),xd=n("p"),Ug=p("Base class for model\u2019s outputs, with potential hidden states and attentions."),Yg=i(),So=n("div"),h(zs.$$.fragment),Jg=i(),qd=n("p"),Gg=p("\u201CReturns a new object replacing the specified fields with new values."),dp=i(),$t=n("h2"),Fo=n("a"),Od=n("span"),h(Es.$$.fragment),Kg=i(),Sd=n("span"),Xg=p("FlaxBaseModelOutputWithPast"),up=i(),E=n("div"),h(Ns.$$.fragment),Zg=i(),Fd=n("p"),ev=p("Base class for model\u2019s outputs, with potential hidden states and attentions."),tv=i(),Mo=n("div"),h(Ps.$$.fragment),ov=i(),Md=n("p"),nv=p("\u201CReturns a new object replacing the specified fields with new values."),lp=i(),xt=n("h2"),ko=n("a"),kd=n("span"),h(Bs.$$.fragment),sv=i(),Ad=n("span"),av=p("FlaxBaseModelOutputWithPooling"),pp=i(),N=n("div"),h(Ls.$$.fragment),rv=i(),Cd=n("p"),iv=p("Base class for model\u2019s outputs that also contains a pooling of the last hidden states."),dv=i(),Ao=n("div"),h(js.$$.fragment),uv=i(),zd=n("p"),lv=p("\u201CReturns a new object replacing the specified fields with new values."),cp=i(),qt=n("h2"),Co=n("a"),Ed=n("span"),h(Ws.$$.fragment),pv=i(),Nd=n("span"),cv=p("FlaxBaseModelOutputWithPastAndCrossAttentions"),hp=i(),P=n("div"),h(Ds.$$.fragment),hv=i(),Pd=n("p"),fv=p("Base class for model\u2019s outputs that may also contain a past key/values (to speed up sequential decoding)."),_v=i(),zo=n("div"),h(Hs.$$.fragment),mv=i(),Bd=n("p"),gv=p("\u201CReturns a new object replacing the specified fields with new values."),fp=i(),Ot=n("h2"),Eo=n("a"),Ld=n("span"),h(Qs.$$.fragment),vv=i(),jd=n("span"),yv=p("FlaxSeq2SeqModelOutput"),_p=i(),B=n("div"),h(Is.$$.fragment),Tv=i(),Wd=n("p"),wv=p(`Base class for model encoder\u2019s outputs that also contains : pre-computed hidden states that can speed up sequential
decoding.`),bv=i(),No=n("div"),h(Vs.$$.fragment),$v=i(),Dd=n("p"),xv=p("\u201CReturns a new object replacing the specified fields with new values."),mp=i(),St=n("h2"),Po=n("a"),Hd=n("span"),h(Rs.$$.fragment),qv=i(),Qd=n("span"),Ov=p("FlaxCausalLMOutputWithCrossAttentions"),gp=i(),L=n("div"),h(Us.$$.fragment),Sv=i(),Id=n("p"),Fv=p("Base class for causal language model (or autoregressive) outputs."),Mv=i(),Bo=n("div"),h(Ys.$$.fragment),kv=i(),Vd=n("p"),Av=p("\u201CReturns a new object replacing the specified fields with new values."),vp=i(),Ft=n("h2"),Lo=n("a"),Rd=n("span"),h(Js.$$.fragment),Cv=i(),Ud=n("span"),zv=p("FlaxMaskedLMOutput"),yp=i(),j=n("div"),h(Gs.$$.fragment),Ev=i(),Yd=n("p"),Nv=p("Base class for masked language models outputs."),Pv=i(),jo=n("div"),h(Ks.$$.fragment),Bv=i(),Jd=n("p"),Lv=p("\u201CReturns a new object replacing the specified fields with new values."),Tp=i(),Mt=n("h2"),Wo=n("a"),Gd=n("span"),h(Xs.$$.fragment),jv=i(),Kd=n("span"),Wv=p("FlaxSeq2SeqLMOutput"),wp=i(),W=n("div"),h(Zs.$$.fragment),Dv=i(),Xd=n("p"),Hv=p("Base class for sequence-to-sequence language models outputs."),Qv=i(),Do=n("div"),h(ea.$$.fragment),Iv=i(),Zd=n("p"),Vv=p("\u201CReturns a new object replacing the specified fields with new values."),bp=i(),kt=n("h2"),Ho=n("a"),eu=n("span"),h(ta.$$.fragment),Rv=i(),tu=n("span"),Uv=p("FlaxNextSentencePredictorOutput"),$p=i(),D=n("div"),h(oa.$$.fragment),Yv=i(),ou=n("p"),Jv=p("Base class for outputs of models predicting if two sentences are consecutive or not."),Gv=i(),Qo=n("div"),h(na.$$.fragment),Kv=i(),nu=n("p"),Xv=p("\u201CReturns a new object replacing the specified fields with new values."),xp=i(),At=n("h2"),Io=n("a"),su=n("span"),h(sa.$$.fragment),Zv=i(),au=n("span"),ey=p("FlaxSequenceClassifierOutput"),qp=i(),H=n("div"),h(aa.$$.fragment),ty=i(),ru=n("p"),oy=p("Base class for outputs of sentence classification models."),ny=i(),Vo=n("div"),h(ra.$$.fragment),sy=i(),iu=n("p"),ay=p("\u201CReturns a new object replacing the specified fields with new values."),Op=i(),Ct=n("h2"),Ro=n("a"),du=n("span"),h(ia.$$.fragment),ry=i(),uu=n("span"),iy=p("FlaxSeq2SeqSequenceClassifierOutput"),Sp=i(),Q=n("div"),h(da.$$.fragment),dy=i(),lu=n("p"),uy=p("Base class for outputs of sequence-to-sequence sentence classification models."),ly=i(),Uo=n("div"),h(ua.$$.fragment),py=i(),pu=n("p"),cy=p("\u201CReturns a new object replacing the specified fields with new values."),Fp=i(),zt=n("h2"),Yo=n("a"),cu=n("span"),h(la.$$.fragment),hy=i(),hu=n("span"),fy=p("FlaxMultipleChoiceModelOutput"),Mp=i(),I=n("div"),h(pa.$$.fragment),_y=i(),fu=n("p"),my=p("Base class for outputs of multiple choice models."),gy=i(),Jo=n("div"),h(ca.$$.fragment),vy=i(),_u=n("p"),yy=p("\u201CReturns a new object replacing the specified fields with new values."),kp=i(),Et=n("h2"),Go=n("a"),mu=n("span"),h(ha.$$.fragment),Ty=i(),gu=n("span"),wy=p("FlaxTokenClassifierOutput"),Ap=i(),V=n("div"),h(fa.$$.fragment),by=i(),vu=n("p"),$y=p("Base class for outputs of token classification models."),xy=i(),Ko=n("div"),h(_a.$$.fragment),qy=i(),yu=n("p"),Oy=p("\u201CReturns a new object replacing the specified fields with new values."),Cp=i(),Nt=n("h2"),Xo=n("a"),Tu=n("span"),h(ma.$$.fragment),Sy=i(),wu=n("span"),Fy=p("FlaxQuestionAnsweringModelOutput"),zp=i(),R=n("div"),h(ga.$$.fragment),My=i(),bu=n("p"),ky=p("Base class for outputs of question answering models."),Ay=i(),Zo=n("div"),h(va.$$.fragment),Cy=i(),$u=n("p"),zy=p("\u201CReturns a new object replacing the specified fields with new values."),Ep=i(),Pt=n("h2"),en=n("a"),xu=n("span"),h(ya.$$.fragment),Ey=i(),qu=n("span"),Ny=p("FlaxSeq2SeqQuestionAnsweringModelOutput"),Np=i(),U=n("div"),h(Ta.$$.fragment),Py=i(),Ou=n("p"),By=p("Base class for outputs of sequence-to-sequence question answering models."),Ly=i(),tn=n("div"),h(wa.$$.fragment),jy=i(),Su=n("p"),Wy=p("\u201CReturns a new object replacing the specified fields with new values."),this.h()},l(e){const u=N1('[data-svelte="svelte-1phssyn"]',document.head);$=s(u,"META",{name:!0,content:!0}),u.forEach(t),Bt=d(e),x=s(e,"H1",{class:!0});var ba=a(x);A=s(ba,"A",{id:!0,class:!0,href:!0});var Dy=a(A);K=s(Dy,"SPAN",{});var Hy=a(K);f(q.$$.fragment,Hy),Hy.forEach(t),Dy.forEach(t),nn=d(ba),X=s(ba,"SPAN",{});var Qy=a(X);Z=c(Qy,"Model outputs"),Qy.forEach(t),ba.forEach(t),M=d(e),C=s(e,"P",{});var Bp=a(C);$a=c(Bp,"All models have outputs that are instances of subclasses of "),xa=s(Bp,"A",{href:!0});var Iy=a(xa);Lh=c(Iy,"ModelOutput"),Iy.forEach(t),jh=c(Bp,`. Those are
data structures containing all the information returned by the model, but that can also be used as tuples or
dictionaries.`),Bp.forEach(t),Mu=d(e),qa=s(e,"P",{});var Vy=a(qa);Wh=c(Vy,"Let\u2019s see of this looks on an example:"),Vy.forEach(t),ku=d(e),f(sn.$$.fragment,e),Au=d(e),w=s(e,"P",{});var b=a(w);Dh=c(b,"The "),Ia=s(b,"CODE",{});var Ry=a(Ia);Hh=c(Ry,"outputs"),Ry.forEach(t),Qh=c(b," object is a "),Oa=s(b,"A",{href:!0});var Uy=a(Oa);Ih=c(Uy,"SequenceClassifierOutput"),Uy.forEach(t),Vh=c(b,`, as we can see in the
documentation of that class below, it means it has an optional `),Va=s(b,"CODE",{});var Yy=a(Va);Rh=c(Yy,"loss"),Yy.forEach(t),Uh=c(b,", a "),Ra=s(b,"CODE",{});var Jy=a(Ra);Yh=c(Jy,"logits"),Jy.forEach(t),Jh=c(b," an optional "),Ua=s(b,"CODE",{});var Gy=a(Ua);Gh=c(Gy,"hidden_states"),Gy.forEach(t),Kh=c(b,` and
an optional `),Ya=s(b,"CODE",{});var Ky=a(Ya);Xh=c(Ky,"attentions"),Ky.forEach(t),Zh=c(b," attribute. Here we have the "),Ja=s(b,"CODE",{});var Xy=a(Ja);ef=c(Xy,"loss"),Xy.forEach(t),tf=c(b," since we passed along "),Ga=s(b,"CODE",{});var Zy=a(Ga);of=c(Zy,"labels"),Zy.forEach(t),nf=c(b,`, but we don\u2019t have
`),Ka=s(b,"CODE",{});var eT=a(Ka);sf=c(eT,"hidden_states"),eT.forEach(t),af=c(b," and "),Xa=s(b,"CODE",{});var tT=a(Xa);rf=c(tT,"attentions"),tT.forEach(t),df=c(b," because we didn\u2019t pass "),Za=s(b,"CODE",{});var oT=a(Za);uf=c(oT,"output_hidden_states=True"),oT.forEach(t),lf=c(b,` or
`),er=s(b,"CODE",{});var nT=a(er);pf=c(nT,"output_attentions=True"),nT.forEach(t),cf=c(b,"."),b.forEach(t),Cu=d(e),O=s(e,"P",{});var Y=a(O);hf=c(Y,`You can access each attribute as you would usually do, and if that attribute has not been returned by the model, you
will get `),tr=s(Y,"CODE",{});var sT=a(tr);ff=c(sT,"None"),sT.forEach(t),_f=c(Y,". Here for instance "),or=s(Y,"CODE",{});var aT=a(or);mf=c(aT,"outputs.loss"),aT.forEach(t),gf=c(Y," is the loss computed by the model, and "),nr=s(Y,"CODE",{});var rT=a(nr);vf=c(rT,"outputs.attentions"),rT.forEach(t),yf=c(Y,` is
`),sr=s(Y,"CODE",{});var iT=a(sr);Tf=c(iT,"None"),iT.forEach(t),wf=c(Y,"."),Y.forEach(t),zu=d(e),S=s(e,"P",{});var J=a(S);bf=c(J,"When considering our "),ar=s(J,"CODE",{});var dT=a(ar);$f=c(dT,"outputs"),dT.forEach(t),xf=c(J," object as tuple, it only considers the attributes that don\u2019t have "),rr=s(J,"CODE",{});var uT=a(rr);qf=c(uT,"None"),uT.forEach(t),Of=c(J,` values.
Here for instance, it has two elements, `),ir=s(J,"CODE",{});var lT=a(ir);Sf=c(lT,"loss"),lT.forEach(t),Ff=c(J," then "),dr=s(J,"CODE",{});var pT=a(dr);Mf=c(pT,"logits"),pT.forEach(t),kf=c(J,", so"),J.forEach(t),Eu=d(e),f(an.$$.fragment,e),Nu=d(e),Lt=s(e,"P",{});var Lp=a(Lt);Af=c(Lp,"will return the tuple "),ur=s(Lp,"CODE",{});var cT=a(ur);Cf=c(cT,"(outputs.loss, outputs.logits)"),cT.forEach(t),zf=c(Lp," for instance."),Lp.forEach(t),Pu=d(e),F=s(e,"P",{});var G=a(F);Ef=c(G,"When considering our "),lr=s(G,"CODE",{});var hT=a(lr);Nf=c(hT,"outputs"),hT.forEach(t),Pf=c(G," object as dictionary, it only considers the attributes that don\u2019t have "),pr=s(G,"CODE",{});var fT=a(pr);Bf=c(fT,"None"),fT.forEach(t),Lf=c(G,`
values. Here for instance, it has two keys that are `),cr=s(G,"CODE",{});var _T=a(cr);jf=c(_T,"loss"),_T.forEach(t),Wf=c(G," and "),hr=s(G,"CODE",{});var mT=a(hr);Df=c(mT,"logits"),mT.forEach(t),Hf=c(G,"."),G.forEach(t),Bu=d(e),Sa=s(e,"P",{});var gT=a(Sa);Qf=c(gT,`We document here the generic model outputs that are used by more than one model type. Specific output types are
documented on their corresponding model page.`),gT.forEach(t),Lu=d(e),ee=s(e,"H2",{class:!0});var jp=a(ee);jt=s(jp,"A",{id:!0,class:!0,href:!0});var vT=a(jt);fr=s(vT,"SPAN",{});var yT=a(fr);f(rn.$$.fragment,yT),yT.forEach(t),vT.forEach(t),If=d(jp),_r=s(jp,"SPAN",{});var TT=a(_r);Vf=c(TT,"ModelOutput"),TT.forEach(t),jp.forEach(t),ju=d(e),k=s(e,"DIV",{class:!0});var on=a(k);f(dn.$$.fragment,on),Rf=d(on),te=s(on,"P",{});var Fa=a(te);Uf=c(Fa,"Base class for all model outputs as dataclass. Has a "),mr=s(Fa,"CODE",{});var wT=a(mr);Yf=c(wT,"__getitem__"),wT.forEach(t),Jf=c(Fa,` that allows indexing by integer or slice (like a
tuple) or strings (like a dictionary) that will ignore the `),gr=s(Fa,"CODE",{});var bT=a(gr);Gf=c(bT,"None"),bT.forEach(t),Kf=c(Fa,` attributes. Otherwise behaves like a regular
python dictionary.`),Fa.forEach(t),Xf=d(on),f(Wt.$$.fragment,on),Zf=d(on),Dt=s(on,"DIV",{class:!0});var Wp=a(Dt);f(un.$$.fragment,Wp),e_=d(Wp),ln=s(Wp,"P",{});var Dp=a(ln);t_=c(Dp,"Convert self to a tuple containing all the attributes/keys that are not "),vr=s(Dp,"CODE",{});var $T=a(vr);o_=c($T,"None"),$T.forEach(t),n_=c(Dp,"."),Dp.forEach(t),Wp.forEach(t),on.forEach(t),Wu=d(e),oe=s(e,"H2",{class:!0});var Hp=a(oe);Ht=s(Hp,"A",{id:!0,class:!0,href:!0});var xT=a(Ht);yr=s(xT,"SPAN",{});var qT=a(yr);f(pn.$$.fragment,qT),qT.forEach(t),xT.forEach(t),s_=d(Hp),Tr=s(Hp,"SPAN",{});var OT=a(Tr);a_=c(OT,"BaseModelOutput"),OT.forEach(t),Hp.forEach(t),Du=d(e),ne=s(e,"DIV",{class:!0});var Qp=a(ne);f(cn.$$.fragment,Qp),r_=d(Qp),wr=s(Qp,"P",{});var ST=a(wr);i_=c(ST,"Base class for model\u2019s outputs, with potential hidden states and attentions."),ST.forEach(t),Qp.forEach(t),Hu=d(e),se=s(e,"H2",{class:!0});var Ip=a(se);Qt=s(Ip,"A",{id:!0,class:!0,href:!0});var FT=a(Qt);br=s(FT,"SPAN",{});var MT=a(br);f(hn.$$.fragment,MT),MT.forEach(t),FT.forEach(t),d_=d(Ip),$r=s(Ip,"SPAN",{});var kT=a($r);u_=c(kT,"BaseModelOutputWithPooling"),kT.forEach(t),Ip.forEach(t),Qu=d(e),ae=s(e,"DIV",{class:!0});var Vp=a(ae);f(fn.$$.fragment,Vp),l_=d(Vp),xr=s(Vp,"P",{});var AT=a(xr);p_=c(AT,"Base class for model\u2019s outputs that also contains a pooling of the last hidden states."),AT.forEach(t),Vp.forEach(t),Iu=d(e),re=s(e,"H2",{class:!0});var Rp=a(re);It=s(Rp,"A",{id:!0,class:!0,href:!0});var CT=a(It);qr=s(CT,"SPAN",{});var zT=a(qr);f(_n.$$.fragment,zT),zT.forEach(t),CT.forEach(t),c_=d(Rp),Or=s(Rp,"SPAN",{});var ET=a(Or);h_=c(ET,"BaseModelOutputWithCrossAttentions"),ET.forEach(t),Rp.forEach(t),Vu=d(e),ie=s(e,"DIV",{class:!0});var Up=a(ie);f(mn.$$.fragment,Up),f_=d(Up),Sr=s(Up,"P",{});var NT=a(Sr);__=c(NT,"Base class for model\u2019s outputs, with potential hidden states and attentions."),NT.forEach(t),Up.forEach(t),Ru=d(e),de=s(e,"H2",{class:!0});var Yp=a(de);Vt=s(Yp,"A",{id:!0,class:!0,href:!0});var PT=a(Vt);Fr=s(PT,"SPAN",{});var BT=a(Fr);f(gn.$$.fragment,BT),BT.forEach(t),PT.forEach(t),m_=d(Yp),Mr=s(Yp,"SPAN",{});var LT=a(Mr);g_=c(LT,"BaseModelOutputWithPoolingAndCrossAttentions"),LT.forEach(t),Yp.forEach(t),Uu=d(e),ue=s(e,"DIV",{class:!0});var Jp=a(ue);f(vn.$$.fragment,Jp),v_=d(Jp),kr=s(Jp,"P",{});var jT=a(kr);y_=c(jT,"Base class for model\u2019s outputs that also contains a pooling of the last hidden states."),jT.forEach(t),Jp.forEach(t),Yu=d(e),le=s(e,"H2",{class:!0});var Gp=a(le);Rt=s(Gp,"A",{id:!0,class:!0,href:!0});var WT=a(Rt);Ar=s(WT,"SPAN",{});var DT=a(Ar);f(yn.$$.fragment,DT),DT.forEach(t),WT.forEach(t),T_=d(Gp),Cr=s(Gp,"SPAN",{});var HT=a(Cr);w_=c(HT,"BaseModelOutputWithPast"),HT.forEach(t),Gp.forEach(t),Ju=d(e),pe=s(e,"DIV",{class:!0});var Kp=a(pe);f(Tn.$$.fragment,Kp),b_=d(Kp),zr=s(Kp,"P",{});var QT=a(zr);$_=c(QT,"Base class for model\u2019s outputs that may also contain a past key/values (to speed up sequential decoding)."),QT.forEach(t),Kp.forEach(t),Gu=d(e),ce=s(e,"H2",{class:!0});var Xp=a(ce);Ut=s(Xp,"A",{id:!0,class:!0,href:!0});var IT=a(Ut);Er=s(IT,"SPAN",{});var VT=a(Er);f(wn.$$.fragment,VT),VT.forEach(t),IT.forEach(t),x_=d(Xp),Nr=s(Xp,"SPAN",{});var RT=a(Nr);q_=c(RT,"BaseModelOutputWithPastAndCrossAttentions"),RT.forEach(t),Xp.forEach(t),Ku=d(e),he=s(e,"DIV",{class:!0});var Zp=a(he);f(bn.$$.fragment,Zp),O_=d(Zp),Pr=s(Zp,"P",{});var UT=a(Pr);S_=c(UT,"Base class for model\u2019s outputs that may also contain a past key/values (to speed up sequential decoding)."),UT.forEach(t),Zp.forEach(t),Xu=d(e),fe=s(e,"H2",{class:!0});var ec=a(fe);Yt=s(ec,"A",{id:!0,class:!0,href:!0});var YT=a(Yt);Br=s(YT,"SPAN",{});var JT=a(Br);f($n.$$.fragment,JT),JT.forEach(t),YT.forEach(t),F_=d(ec),Lr=s(ec,"SPAN",{});var GT=a(Lr);M_=c(GT,"Seq2SeqModelOutput"),GT.forEach(t),ec.forEach(t),Zu=d(e),_e=s(e,"DIV",{class:!0});var tc=a(_e);f(xn.$$.fragment,tc),k_=d(tc),jr=s(tc,"P",{});var KT=a(jr);A_=c(KT,`Base class for model encoder\u2019s outputs that also contains : pre-computed hidden states that can speed up sequential
decoding.`),KT.forEach(t),tc.forEach(t),el=d(e),me=s(e,"H2",{class:!0});var oc=a(me);Jt=s(oc,"A",{id:!0,class:!0,href:!0});var XT=a(Jt);Wr=s(XT,"SPAN",{});var ZT=a(Wr);f(qn.$$.fragment,ZT),ZT.forEach(t),XT.forEach(t),C_=d(oc),Dr=s(oc,"SPAN",{});var ew=a(Dr);z_=c(ew,"CausalLMOutput"),ew.forEach(t),oc.forEach(t),tl=d(e),ge=s(e,"DIV",{class:!0});var nc=a(ge);f(On.$$.fragment,nc),E_=d(nc),Hr=s(nc,"P",{});var tw=a(Hr);N_=c(tw,"Base class for causal language model (or autoregressive) outputs."),tw.forEach(t),nc.forEach(t),ol=d(e),ve=s(e,"H2",{class:!0});var sc=a(ve);Gt=s(sc,"A",{id:!0,class:!0,href:!0});var ow=a(Gt);Qr=s(ow,"SPAN",{});var nw=a(Qr);f(Sn.$$.fragment,nw),nw.forEach(t),ow.forEach(t),P_=d(sc),Ir=s(sc,"SPAN",{});var sw=a(Ir);B_=c(sw,"CausalLMOutputWithCrossAttentions"),sw.forEach(t),sc.forEach(t),nl=d(e),ye=s(e,"DIV",{class:!0});var ac=a(ye);f(Fn.$$.fragment,ac),L_=d(ac),Vr=s(ac,"P",{});var aw=a(Vr);j_=c(aw,"Base class for causal language model (or autoregressive) outputs."),aw.forEach(t),ac.forEach(t),sl=d(e),Te=s(e,"H2",{class:!0});var rc=a(Te);Kt=s(rc,"A",{id:!0,class:!0,href:!0});var rw=a(Kt);Rr=s(rw,"SPAN",{});var iw=a(Rr);f(Mn.$$.fragment,iw),iw.forEach(t),rw.forEach(t),W_=d(rc),Ur=s(rc,"SPAN",{});var dw=a(Ur);D_=c(dw,"CausalLMOutputWithPast"),dw.forEach(t),rc.forEach(t),al=d(e),we=s(e,"DIV",{class:!0});var ic=a(we);f(kn.$$.fragment,ic),H_=d(ic),Yr=s(ic,"P",{});var uw=a(Yr);Q_=c(uw,"Base class for causal language model (or autoregressive) outputs."),uw.forEach(t),ic.forEach(t),rl=d(e),be=s(e,"H2",{class:!0});var dc=a(be);Xt=s(dc,"A",{id:!0,class:!0,href:!0});var lw=a(Xt);Jr=s(lw,"SPAN",{});var pw=a(Jr);f(An.$$.fragment,pw),pw.forEach(t),lw.forEach(t),I_=d(dc),Gr=s(dc,"SPAN",{});var cw=a(Gr);V_=c(cw,"MaskedLMOutput"),cw.forEach(t),dc.forEach(t),il=d(e),$e=s(e,"DIV",{class:!0});var uc=a($e);f(Cn.$$.fragment,uc),R_=d(uc),Kr=s(uc,"P",{});var hw=a(Kr);U_=c(hw,"Base class for masked language models outputs."),hw.forEach(t),uc.forEach(t),dl=d(e),xe=s(e,"H2",{class:!0});var lc=a(xe);Zt=s(lc,"A",{id:!0,class:!0,href:!0});var fw=a(Zt);Xr=s(fw,"SPAN",{});var _w=a(Xr);f(zn.$$.fragment,_w),_w.forEach(t),fw.forEach(t),Y_=d(lc),Zr=s(lc,"SPAN",{});var mw=a(Zr);J_=c(mw,"Seq2SeqLMOutput"),mw.forEach(t),lc.forEach(t),ul=d(e),qe=s(e,"DIV",{class:!0});var pc=a(qe);f(En.$$.fragment,pc),G_=d(pc),ei=s(pc,"P",{});var gw=a(ei);K_=c(gw,"Base class for sequence-to-sequence language models outputs."),gw.forEach(t),pc.forEach(t),ll=d(e),Oe=s(e,"H2",{class:!0});var cc=a(Oe);eo=s(cc,"A",{id:!0,class:!0,href:!0});var vw=a(eo);ti=s(vw,"SPAN",{});var yw=a(ti);f(Nn.$$.fragment,yw),yw.forEach(t),vw.forEach(t),X_=d(cc),oi=s(cc,"SPAN",{});var Tw=a(oi);Z_=c(Tw,"NextSentencePredictorOutput"),Tw.forEach(t),cc.forEach(t),pl=d(e),Se=s(e,"DIV",{class:!0});var hc=a(Se);f(Pn.$$.fragment,hc),em=d(hc),ni=s(hc,"P",{});var ww=a(ni);tm=c(ww,"Base class for outputs of models predicting if two sentences are consecutive or not."),ww.forEach(t),hc.forEach(t),cl=d(e),Fe=s(e,"H2",{class:!0});var fc=a(Fe);to=s(fc,"A",{id:!0,class:!0,href:!0});var bw=a(to);si=s(bw,"SPAN",{});var $w=a(si);f(Bn.$$.fragment,$w),$w.forEach(t),bw.forEach(t),om=d(fc),ai=s(fc,"SPAN",{});var xw=a(ai);nm=c(xw,"SequenceClassifierOutput"),xw.forEach(t),fc.forEach(t),hl=d(e),Me=s(e,"DIV",{class:!0});var _c=a(Me);f(Ln.$$.fragment,_c),sm=d(_c),ri=s(_c,"P",{});var qw=a(ri);am=c(qw,"Base class for outputs of sentence classification models."),qw.forEach(t),_c.forEach(t),fl=d(e),ke=s(e,"H2",{class:!0});var mc=a(ke);oo=s(mc,"A",{id:!0,class:!0,href:!0});var Ow=a(oo);ii=s(Ow,"SPAN",{});var Sw=a(ii);f(jn.$$.fragment,Sw),Sw.forEach(t),Ow.forEach(t),rm=d(mc),di=s(mc,"SPAN",{});var Fw=a(di);im=c(Fw,"Seq2SeqSequenceClassifierOutput"),Fw.forEach(t),mc.forEach(t),_l=d(e),Ae=s(e,"DIV",{class:!0});var gc=a(Ae);f(Wn.$$.fragment,gc),dm=d(gc),ui=s(gc,"P",{});var Mw=a(ui);um=c(Mw,"Base class for outputs of sequence-to-sequence sentence classification models."),Mw.forEach(t),gc.forEach(t),ml=d(e),Ce=s(e,"H2",{class:!0});var vc=a(Ce);no=s(vc,"A",{id:!0,class:!0,href:!0});var kw=a(no);li=s(kw,"SPAN",{});var Aw=a(li);f(Dn.$$.fragment,Aw),Aw.forEach(t),kw.forEach(t),lm=d(vc),pi=s(vc,"SPAN",{});var Cw=a(pi);pm=c(Cw,"MultipleChoiceModelOutput"),Cw.forEach(t),vc.forEach(t),gl=d(e),ze=s(e,"DIV",{class:!0});var yc=a(ze);f(Hn.$$.fragment,yc),cm=d(yc),ci=s(yc,"P",{});var zw=a(ci);hm=c(zw,"Base class for outputs of multiple choice models."),zw.forEach(t),yc.forEach(t),vl=d(e),Ee=s(e,"H2",{class:!0});var Tc=a(Ee);so=s(Tc,"A",{id:!0,class:!0,href:!0});var Ew=a(so);hi=s(Ew,"SPAN",{});var Nw=a(hi);f(Qn.$$.fragment,Nw),Nw.forEach(t),Ew.forEach(t),fm=d(Tc),fi=s(Tc,"SPAN",{});var Pw=a(fi);_m=c(Pw,"TokenClassifierOutput"),Pw.forEach(t),Tc.forEach(t),yl=d(e),Ne=s(e,"DIV",{class:!0});var wc=a(Ne);f(In.$$.fragment,wc),mm=d(wc),_i=s(wc,"P",{});var Bw=a(_i);gm=c(Bw,"Base class for outputs of token classification models."),Bw.forEach(t),wc.forEach(t),Tl=d(e),Pe=s(e,"H2",{class:!0});var bc=a(Pe);ao=s(bc,"A",{id:!0,class:!0,href:!0});var Lw=a(ao);mi=s(Lw,"SPAN",{});var jw=a(mi);f(Vn.$$.fragment,jw),jw.forEach(t),Lw.forEach(t),vm=d(bc),gi=s(bc,"SPAN",{});var Ww=a(gi);ym=c(Ww,"QuestionAnsweringModelOutput"),Ww.forEach(t),bc.forEach(t),wl=d(e),Be=s(e,"DIV",{class:!0});var $c=a(Be);f(Rn.$$.fragment,$c),Tm=d($c),vi=s($c,"P",{});var Dw=a(vi);wm=c(Dw,"Base class for outputs of question answering models."),Dw.forEach(t),$c.forEach(t),bl=d(e),Le=s(e,"H2",{class:!0});var xc=a(Le);ro=s(xc,"A",{id:!0,class:!0,href:!0});var Hw=a(ro);yi=s(Hw,"SPAN",{});var Qw=a(yi);f(Un.$$.fragment,Qw),Qw.forEach(t),Hw.forEach(t),bm=d(xc),Ti=s(xc,"SPAN",{});var Iw=a(Ti);$m=c(Iw,"Seq2SeqQuestionAnsweringModelOutput"),Iw.forEach(t),xc.forEach(t),$l=d(e),je=s(e,"DIV",{class:!0});var qc=a(je);f(Yn.$$.fragment,qc),xm=d(qc),wi=s(qc,"P",{});var Vw=a(wi);qm=c(Vw,"Base class for outputs of sequence-to-sequence question answering models."),Vw.forEach(t),qc.forEach(t),xl=d(e),We=s(e,"H2",{class:!0});var Oc=a(We);io=s(Oc,"A",{id:!0,class:!0,href:!0});var Rw=a(io);bi=s(Rw,"SPAN",{});var Uw=a(bi);f(Jn.$$.fragment,Uw),Uw.forEach(t),Rw.forEach(t),Om=d(Oc),$i=s(Oc,"SPAN",{});var Yw=a($i);Sm=c(Yw,"TFBaseModelOutput"),Yw.forEach(t),Oc.forEach(t),ql=d(e),De=s(e,"DIV",{class:!0});var Sc=a(De);f(Gn.$$.fragment,Sc),Fm=d(Sc),xi=s(Sc,"P",{});var Jw=a(xi);Mm=c(Jw,"Base class for model\u2019s outputs, with potential hidden states and attentions."),Jw.forEach(t),Sc.forEach(t),Ol=d(e),He=s(e,"H2",{class:!0});var Fc=a(He);uo=s(Fc,"A",{id:!0,class:!0,href:!0});var Gw=a(uo);qi=s(Gw,"SPAN",{});var Kw=a(qi);f(Kn.$$.fragment,Kw),Kw.forEach(t),Gw.forEach(t),km=d(Fc),Oi=s(Fc,"SPAN",{});var Xw=a(Oi);Am=c(Xw,"TFBaseModelOutputWithPooling"),Xw.forEach(t),Fc.forEach(t),Sl=d(e),Qe=s(e,"DIV",{class:!0});var Mc=a(Qe);f(Xn.$$.fragment,Mc),Cm=d(Mc),Si=s(Mc,"P",{});var Zw=a(Si);zm=c(Zw,"Base class for model\u2019s outputs that also contains a pooling of the last hidden states."),Zw.forEach(t),Mc.forEach(t),Fl=d(e),Ie=s(e,"H2",{class:!0});var kc=a(Ie);lo=s(kc,"A",{id:!0,class:!0,href:!0});var e2=a(lo);Fi=s(e2,"SPAN",{});var t2=a(Fi);f(Zn.$$.fragment,t2),t2.forEach(t),e2.forEach(t),Em=d(kc),Mi=s(kc,"SPAN",{});var o2=a(Mi);Nm=c(o2,"TFBaseModelOutputWithPoolingAndCrossAttentions"),o2.forEach(t),kc.forEach(t),Ml=d(e),Ve=s(e,"DIV",{class:!0});var Ac=a(Ve);f(es.$$.fragment,Ac),Pm=d(Ac),ki=s(Ac,"P",{});var n2=a(ki);Bm=c(n2,"Base class for model\u2019s outputs that also contains a pooling of the last hidden states."),n2.forEach(t),Ac.forEach(t),kl=d(e),Re=s(e,"H2",{class:!0});var Cc=a(Re);po=s(Cc,"A",{id:!0,class:!0,href:!0});var s2=a(po);Ai=s(s2,"SPAN",{});var a2=a(Ai);f(ts.$$.fragment,a2),a2.forEach(t),s2.forEach(t),Lm=d(Cc),Ci=s(Cc,"SPAN",{});var r2=a(Ci);jm=c(r2,"TFBaseModelOutputWithPast"),r2.forEach(t),Cc.forEach(t),Al=d(e),Ue=s(e,"DIV",{class:!0});var zc=a(Ue);f(os.$$.fragment,zc),Wm=d(zc),zi=s(zc,"P",{});var i2=a(zi);Dm=c(i2,"Base class for model\u2019s outputs that may also contain a past key/values (to speed up sequential decoding)."),i2.forEach(t),zc.forEach(t),Cl=d(e),Ye=s(e,"H2",{class:!0});var Ec=a(Ye);co=s(Ec,"A",{id:!0,class:!0,href:!0});var d2=a(co);Ei=s(d2,"SPAN",{});var u2=a(Ei);f(ns.$$.fragment,u2),u2.forEach(t),d2.forEach(t),Hm=d(Ec),Ni=s(Ec,"SPAN",{});var l2=a(Ni);Qm=c(l2,"TFBaseModelOutputWithPastAndCrossAttentions"),l2.forEach(t),Ec.forEach(t),zl=d(e),Je=s(e,"DIV",{class:!0});var Nc=a(Je);f(ss.$$.fragment,Nc),Im=d(Nc),Pi=s(Nc,"P",{});var p2=a(Pi);Vm=c(p2,"Base class for model\u2019s outputs that may also contain a past key/values (to speed up sequential decoding)."),p2.forEach(t),Nc.forEach(t),El=d(e),Ge=s(e,"H2",{class:!0});var Pc=a(Ge);ho=s(Pc,"A",{id:!0,class:!0,href:!0});var c2=a(ho);Bi=s(c2,"SPAN",{});var h2=a(Bi);f(as.$$.fragment,h2),h2.forEach(t),c2.forEach(t),Rm=d(Pc),Li=s(Pc,"SPAN",{});var f2=a(Li);Um=c(f2,"TFSeq2SeqModelOutput"),f2.forEach(t),Pc.forEach(t),Nl=d(e),Ke=s(e,"DIV",{class:!0});var Bc=a(Ke);f(rs.$$.fragment,Bc),Ym=d(Bc),ji=s(Bc,"P",{});var _2=a(ji);Jm=c(_2,`Base class for model encoder\u2019s outputs that also contains : pre-computed hidden states that can speed up sequential
decoding.`),_2.forEach(t),Bc.forEach(t),Pl=d(e),Xe=s(e,"H2",{class:!0});var Lc=a(Xe);fo=s(Lc,"A",{id:!0,class:!0,href:!0});var m2=a(fo);Wi=s(m2,"SPAN",{});var g2=a(Wi);f(is.$$.fragment,g2),g2.forEach(t),m2.forEach(t),Gm=d(Lc),Di=s(Lc,"SPAN",{});var v2=a(Di);Km=c(v2,"TFCausalLMOutput"),v2.forEach(t),Lc.forEach(t),Bl=d(e),Ze=s(e,"DIV",{class:!0});var jc=a(Ze);f(ds.$$.fragment,jc),Xm=d(jc),Hi=s(jc,"P",{});var y2=a(Hi);Zm=c(y2,"Base class for causal language model (or autoregressive) outputs."),y2.forEach(t),jc.forEach(t),Ll=d(e),et=s(e,"H2",{class:!0});var Wc=a(et);_o=s(Wc,"A",{id:!0,class:!0,href:!0});var T2=a(_o);Qi=s(T2,"SPAN",{});var w2=a(Qi);f(us.$$.fragment,w2),w2.forEach(t),T2.forEach(t),eg=d(Wc),Ii=s(Wc,"SPAN",{});var b2=a(Ii);tg=c(b2,"TFCausalLMOutputWithCrossAttentions"),b2.forEach(t),Wc.forEach(t),jl=d(e),tt=s(e,"DIV",{class:!0});var Dc=a(tt);f(ls.$$.fragment,Dc),og=d(Dc),Vi=s(Dc,"P",{});var $2=a(Vi);ng=c($2,"Base class for causal language model (or autoregressive) outputs."),$2.forEach(t),Dc.forEach(t),Wl=d(e),ot=s(e,"H2",{class:!0});var Hc=a(ot);mo=s(Hc,"A",{id:!0,class:!0,href:!0});var x2=a(mo);Ri=s(x2,"SPAN",{});var q2=a(Ri);f(ps.$$.fragment,q2),q2.forEach(t),x2.forEach(t),sg=d(Hc),Ui=s(Hc,"SPAN",{});var O2=a(Ui);ag=c(O2,"TFCausalLMOutputWithPast"),O2.forEach(t),Hc.forEach(t),Dl=d(e),nt=s(e,"DIV",{class:!0});var Qc=a(nt);f(cs.$$.fragment,Qc),rg=d(Qc),Yi=s(Qc,"P",{});var S2=a(Yi);ig=c(S2,"Base class for causal language model (or autoregressive) outputs."),S2.forEach(t),Qc.forEach(t),Hl=d(e),st=s(e,"H2",{class:!0});var Ic=a(st);go=s(Ic,"A",{id:!0,class:!0,href:!0});var F2=a(go);Ji=s(F2,"SPAN",{});var M2=a(Ji);f(hs.$$.fragment,M2),M2.forEach(t),F2.forEach(t),dg=d(Ic),Gi=s(Ic,"SPAN",{});var k2=a(Gi);ug=c(k2,"TFMaskedLMOutput"),k2.forEach(t),Ic.forEach(t),Ql=d(e),at=s(e,"DIV",{class:!0});var Vc=a(at);f(fs.$$.fragment,Vc),lg=d(Vc),Ki=s(Vc,"P",{});var A2=a(Ki);pg=c(A2,"Base class for masked language models outputs."),A2.forEach(t),Vc.forEach(t),Il=d(e),rt=s(e,"H2",{class:!0});var Rc=a(rt);vo=s(Rc,"A",{id:!0,class:!0,href:!0});var C2=a(vo);Xi=s(C2,"SPAN",{});var z2=a(Xi);f(_s.$$.fragment,z2),z2.forEach(t),C2.forEach(t),cg=d(Rc),Zi=s(Rc,"SPAN",{});var E2=a(Zi);hg=c(E2,"TFSeq2SeqLMOutput"),E2.forEach(t),Rc.forEach(t),Vl=d(e),it=s(e,"DIV",{class:!0});var Uc=a(it);f(ms.$$.fragment,Uc),fg=d(Uc),ed=s(Uc,"P",{});var N2=a(ed);_g=c(N2,"Base class for sequence-to-sequence language models outputs."),N2.forEach(t),Uc.forEach(t),Rl=d(e),dt=s(e,"H2",{class:!0});var Yc=a(dt);yo=s(Yc,"A",{id:!0,class:!0,href:!0});var P2=a(yo);td=s(P2,"SPAN",{});var B2=a(td);f(gs.$$.fragment,B2),B2.forEach(t),P2.forEach(t),mg=d(Yc),od=s(Yc,"SPAN",{});var L2=a(od);gg=c(L2,"TFNextSentencePredictorOutput"),L2.forEach(t),Yc.forEach(t),Ul=d(e),ut=s(e,"DIV",{class:!0});var Jc=a(ut);f(vs.$$.fragment,Jc),vg=d(Jc),nd=s(Jc,"P",{});var j2=a(nd);yg=c(j2,"Base class for outputs of models predicting if two sentences are consecutive or not."),j2.forEach(t),Jc.forEach(t),Yl=d(e),lt=s(e,"H2",{class:!0});var Gc=a(lt);To=s(Gc,"A",{id:!0,class:!0,href:!0});var W2=a(To);sd=s(W2,"SPAN",{});var D2=a(sd);f(ys.$$.fragment,D2),D2.forEach(t),W2.forEach(t),Tg=d(Gc),ad=s(Gc,"SPAN",{});var H2=a(ad);wg=c(H2,"TFSequenceClassifierOutput"),H2.forEach(t),Gc.forEach(t),Jl=d(e),pt=s(e,"DIV",{class:!0});var Kc=a(pt);f(Ts.$$.fragment,Kc),bg=d(Kc),rd=s(Kc,"P",{});var Q2=a(rd);$g=c(Q2,"Base class for outputs of sentence classification models."),Q2.forEach(t),Kc.forEach(t),Gl=d(e),ct=s(e,"H2",{class:!0});var Xc=a(ct);wo=s(Xc,"A",{id:!0,class:!0,href:!0});var I2=a(wo);id=s(I2,"SPAN",{});var V2=a(id);f(ws.$$.fragment,V2),V2.forEach(t),I2.forEach(t),xg=d(Xc),dd=s(Xc,"SPAN",{});var R2=a(dd);qg=c(R2,"TFSeq2SeqSequenceClassifierOutput"),R2.forEach(t),Xc.forEach(t),Kl=d(e),ht=s(e,"DIV",{class:!0});var Zc=a(ht);f(bs.$$.fragment,Zc),Og=d(Zc),ud=s(Zc,"P",{});var U2=a(ud);Sg=c(U2,"Base class for outputs of sequence-to-sequence sentence classification models."),U2.forEach(t),Zc.forEach(t),Xl=d(e),ft=s(e,"H2",{class:!0});var eh=a(ft);bo=s(eh,"A",{id:!0,class:!0,href:!0});var Y2=a(bo);ld=s(Y2,"SPAN",{});var J2=a(ld);f($s.$$.fragment,J2),J2.forEach(t),Y2.forEach(t),Fg=d(eh),pd=s(eh,"SPAN",{});var G2=a(pd);Mg=c(G2,"TFMultipleChoiceModelOutput"),G2.forEach(t),eh.forEach(t),Zl=d(e),_t=s(e,"DIV",{class:!0});var th=a(_t);f(xs.$$.fragment,th),kg=d(th),cd=s(th,"P",{});var K2=a(cd);Ag=c(K2,"Base class for outputs of multiple choice models."),K2.forEach(t),th.forEach(t),ep=d(e),mt=s(e,"H2",{class:!0});var oh=a(mt);$o=s(oh,"A",{id:!0,class:!0,href:!0});var X2=a($o);hd=s(X2,"SPAN",{});var Z2=a(hd);f(qs.$$.fragment,Z2),Z2.forEach(t),X2.forEach(t),Cg=d(oh),fd=s(oh,"SPAN",{});var eb=a(fd);zg=c(eb,"TFTokenClassifierOutput"),eb.forEach(t),oh.forEach(t),tp=d(e),gt=s(e,"DIV",{class:!0});var nh=a(gt);f(Os.$$.fragment,nh),Eg=d(nh),_d=s(nh,"P",{});var tb=a(_d);Ng=c(tb,"Base class for outputs of token classification models."),tb.forEach(t),nh.forEach(t),op=d(e),vt=s(e,"H2",{class:!0});var sh=a(vt);xo=s(sh,"A",{id:!0,class:!0,href:!0});var ob=a(xo);md=s(ob,"SPAN",{});var nb=a(md);f(Ss.$$.fragment,nb),nb.forEach(t),ob.forEach(t),Pg=d(sh),gd=s(sh,"SPAN",{});var sb=a(gd);Bg=c(sb,"TFQuestionAnsweringModelOutput"),sb.forEach(t),sh.forEach(t),np=d(e),yt=s(e,"DIV",{class:!0});var ah=a(yt);f(Fs.$$.fragment,ah),Lg=d(ah),vd=s(ah,"P",{});var ab=a(vd);jg=c(ab,"Base class for outputs of question answering models."),ab.forEach(t),ah.forEach(t),sp=d(e),Tt=s(e,"H2",{class:!0});var rh=a(Tt);qo=s(rh,"A",{id:!0,class:!0,href:!0});var rb=a(qo);yd=s(rb,"SPAN",{});var ib=a(yd);f(Ms.$$.fragment,ib),ib.forEach(t),rb.forEach(t),Wg=d(rh),Td=s(rh,"SPAN",{});var db=a(Td);Dg=c(db,"TFSeq2SeqQuestionAnsweringModelOutput"),db.forEach(t),rh.forEach(t),ap=d(e),wt=s(e,"DIV",{class:!0});var ih=a(wt);f(ks.$$.fragment,ih),Hg=d(ih),wd=s(ih,"P",{});var ub=a(wd);Qg=c(ub,"Base class for outputs of sequence-to-sequence question answering models."),ub.forEach(t),ih.forEach(t),rp=d(e),bt=s(e,"H2",{class:!0});var dh=a(bt);Oo=s(dh,"A",{id:!0,class:!0,href:!0});var lb=a(Oo);bd=s(lb,"SPAN",{});var pb=a(bd);f(As.$$.fragment,pb),pb.forEach(t),lb.forEach(t),Ig=d(dh),$d=s(dh,"SPAN",{});var cb=a($d);Vg=c(cb,"FlaxBaseModelOutput"),cb.forEach(t),dh.forEach(t),ip=d(e),z=s(e,"DIV",{class:!0});var Ma=a(z);f(Cs.$$.fragment,Ma),Rg=d(Ma),xd=s(Ma,"P",{});var hb=a(xd);Ug=c(hb,"Base class for model\u2019s outputs, with potential hidden states and attentions."),hb.forEach(t),Yg=d(Ma),So=s(Ma,"DIV",{class:!0});var uh=a(So);f(zs.$$.fragment,uh),Jg=d(uh),qd=s(uh,"P",{});var fb=a(qd);Gg=c(fb,"\u201CReturns a new object replacing the specified fields with new values."),fb.forEach(t),uh.forEach(t),Ma.forEach(t),dp=d(e),$t=s(e,"H2",{class:!0});var lh=a($t);Fo=s(lh,"A",{id:!0,class:!0,href:!0});var _b=a(Fo);Od=s(_b,"SPAN",{});var mb=a(Od);f(Es.$$.fragment,mb),mb.forEach(t),_b.forEach(t),Kg=d(lh),Sd=s(lh,"SPAN",{});var gb=a(Sd);Xg=c(gb,"FlaxBaseModelOutputWithPast"),gb.forEach(t),lh.forEach(t),up=d(e),E=s(e,"DIV",{class:!0});var ka=a(E);f(Ns.$$.fragment,ka),Zg=d(ka),Fd=s(ka,"P",{});var vb=a(Fd);ev=c(vb,"Base class for model\u2019s outputs, with potential hidden states and attentions."),vb.forEach(t),tv=d(ka),Mo=s(ka,"DIV",{class:!0});var ph=a(Mo);f(Ps.$$.fragment,ph),ov=d(ph),Md=s(ph,"P",{});var yb=a(Md);nv=c(yb,"\u201CReturns a new object replacing the specified fields with new values."),yb.forEach(t),ph.forEach(t),ka.forEach(t),lp=d(e),xt=s(e,"H2",{class:!0});var ch=a(xt);ko=s(ch,"A",{id:!0,class:!0,href:!0});var Tb=a(ko);kd=s(Tb,"SPAN",{});var wb=a(kd);f(Bs.$$.fragment,wb),wb.forEach(t),Tb.forEach(t),sv=d(ch),Ad=s(ch,"SPAN",{});var bb=a(Ad);av=c(bb,"FlaxBaseModelOutputWithPooling"),bb.forEach(t),ch.forEach(t),pp=d(e),N=s(e,"DIV",{class:!0});var Aa=a(N);f(Ls.$$.fragment,Aa),rv=d(Aa),Cd=s(Aa,"P",{});var $b=a(Cd);iv=c($b,"Base class for model\u2019s outputs that also contains a pooling of the last hidden states."),$b.forEach(t),dv=d(Aa),Ao=s(Aa,"DIV",{class:!0});var hh=a(Ao);f(js.$$.fragment,hh),uv=d(hh),zd=s(hh,"P",{});var xb=a(zd);lv=c(xb,"\u201CReturns a new object replacing the specified fields with new values."),xb.forEach(t),hh.forEach(t),Aa.forEach(t),cp=d(e),qt=s(e,"H2",{class:!0});var fh=a(qt);Co=s(fh,"A",{id:!0,class:!0,href:!0});var qb=a(Co);Ed=s(qb,"SPAN",{});var Ob=a(Ed);f(Ws.$$.fragment,Ob),Ob.forEach(t),qb.forEach(t),pv=d(fh),Nd=s(fh,"SPAN",{});var Sb=a(Nd);cv=c(Sb,"FlaxBaseModelOutputWithPastAndCrossAttentions"),Sb.forEach(t),fh.forEach(t),hp=d(e),P=s(e,"DIV",{class:!0});var Ca=a(P);f(Ds.$$.fragment,Ca),hv=d(Ca),Pd=s(Ca,"P",{});var Fb=a(Pd);fv=c(Fb,"Base class for model\u2019s outputs that may also contain a past key/values (to speed up sequential decoding)."),Fb.forEach(t),_v=d(Ca),zo=s(Ca,"DIV",{class:!0});var _h=a(zo);f(Hs.$$.fragment,_h),mv=d(_h),Bd=s(_h,"P",{});var Mb=a(Bd);gv=c(Mb,"\u201CReturns a new object replacing the specified fields with new values."),Mb.forEach(t),_h.forEach(t),Ca.forEach(t),fp=d(e),Ot=s(e,"H2",{class:!0});var mh=a(Ot);Eo=s(mh,"A",{id:!0,class:!0,href:!0});var kb=a(Eo);Ld=s(kb,"SPAN",{});var Ab=a(Ld);f(Qs.$$.fragment,Ab),Ab.forEach(t),kb.forEach(t),vv=d(mh),jd=s(mh,"SPAN",{});var Cb=a(jd);yv=c(Cb,"FlaxSeq2SeqModelOutput"),Cb.forEach(t),mh.forEach(t),_p=d(e),B=s(e,"DIV",{class:!0});var za=a(B);f(Is.$$.fragment,za),Tv=d(za),Wd=s(za,"P",{});var zb=a(Wd);wv=c(zb,`Base class for model encoder\u2019s outputs that also contains : pre-computed hidden states that can speed up sequential
decoding.`),zb.forEach(t),bv=d(za),No=s(za,"DIV",{class:!0});var gh=a(No);f(Vs.$$.fragment,gh),$v=d(gh),Dd=s(gh,"P",{});var Eb=a(Dd);xv=c(Eb,"\u201CReturns a new object replacing the specified fields with new values."),Eb.forEach(t),gh.forEach(t),za.forEach(t),mp=d(e),St=s(e,"H2",{class:!0});var vh=a(St);Po=s(vh,"A",{id:!0,class:!0,href:!0});var Nb=a(Po);Hd=s(Nb,"SPAN",{});var Pb=a(Hd);f(Rs.$$.fragment,Pb),Pb.forEach(t),Nb.forEach(t),qv=d(vh),Qd=s(vh,"SPAN",{});var Bb=a(Qd);Ov=c(Bb,"FlaxCausalLMOutputWithCrossAttentions"),Bb.forEach(t),vh.forEach(t),gp=d(e),L=s(e,"DIV",{class:!0});var Ea=a(L);f(Us.$$.fragment,Ea),Sv=d(Ea),Id=s(Ea,"P",{});var Lb=a(Id);Fv=c(Lb,"Base class for causal language model (or autoregressive) outputs."),Lb.forEach(t),Mv=d(Ea),Bo=s(Ea,"DIV",{class:!0});var yh=a(Bo);f(Ys.$$.fragment,yh),kv=d(yh),Vd=s(yh,"P",{});var jb=a(Vd);Av=c(jb,"\u201CReturns a new object replacing the specified fields with new values."),jb.forEach(t),yh.forEach(t),Ea.forEach(t),vp=d(e),Ft=s(e,"H2",{class:!0});var Th=a(Ft);Lo=s(Th,"A",{id:!0,class:!0,href:!0});var Wb=a(Lo);Rd=s(Wb,"SPAN",{});var Db=a(Rd);f(Js.$$.fragment,Db),Db.forEach(t),Wb.forEach(t),Cv=d(Th),Ud=s(Th,"SPAN",{});var Hb=a(Ud);zv=c(Hb,"FlaxMaskedLMOutput"),Hb.forEach(t),Th.forEach(t),yp=d(e),j=s(e,"DIV",{class:!0});var Na=a(j);f(Gs.$$.fragment,Na),Ev=d(Na),Yd=s(Na,"P",{});var Qb=a(Yd);Nv=c(Qb,"Base class for masked language models outputs."),Qb.forEach(t),Pv=d(Na),jo=s(Na,"DIV",{class:!0});var wh=a(jo);f(Ks.$$.fragment,wh),Bv=d(wh),Jd=s(wh,"P",{});var Ib=a(Jd);Lv=c(Ib,"\u201CReturns a new object replacing the specified fields with new values."),Ib.forEach(t),wh.forEach(t),Na.forEach(t),Tp=d(e),Mt=s(e,"H2",{class:!0});var bh=a(Mt);Wo=s(bh,"A",{id:!0,class:!0,href:!0});var Vb=a(Wo);Gd=s(Vb,"SPAN",{});var Rb=a(Gd);f(Xs.$$.fragment,Rb),Rb.forEach(t),Vb.forEach(t),jv=d(bh),Kd=s(bh,"SPAN",{});var Ub=a(Kd);Wv=c(Ub,"FlaxSeq2SeqLMOutput"),Ub.forEach(t),bh.forEach(t),wp=d(e),W=s(e,"DIV",{class:!0});var Pa=a(W);f(Zs.$$.fragment,Pa),Dv=d(Pa),Xd=s(Pa,"P",{});var Yb=a(Xd);Hv=c(Yb,"Base class for sequence-to-sequence language models outputs."),Yb.forEach(t),Qv=d(Pa),Do=s(Pa,"DIV",{class:!0});var $h=a(Do);f(ea.$$.fragment,$h),Iv=d($h),Zd=s($h,"P",{});var Jb=a(Zd);Vv=c(Jb,"\u201CReturns a new object replacing the specified fields with new values."),Jb.forEach(t),$h.forEach(t),Pa.forEach(t),bp=d(e),kt=s(e,"H2",{class:!0});var xh=a(kt);Ho=s(xh,"A",{id:!0,class:!0,href:!0});var Gb=a(Ho);eu=s(Gb,"SPAN",{});var Kb=a(eu);f(ta.$$.fragment,Kb),Kb.forEach(t),Gb.forEach(t),Rv=d(xh),tu=s(xh,"SPAN",{});var Xb=a(tu);Uv=c(Xb,"FlaxNextSentencePredictorOutput"),Xb.forEach(t),xh.forEach(t),$p=d(e),D=s(e,"DIV",{class:!0});var Ba=a(D);f(oa.$$.fragment,Ba),Yv=d(Ba),ou=s(Ba,"P",{});var Zb=a(ou);Jv=c(Zb,"Base class for outputs of models predicting if two sentences are consecutive or not."),Zb.forEach(t),Gv=d(Ba),Qo=s(Ba,"DIV",{class:!0});var qh=a(Qo);f(na.$$.fragment,qh),Kv=d(qh),nu=s(qh,"P",{});var e1=a(nu);Xv=c(e1,"\u201CReturns a new object replacing the specified fields with new values."),e1.forEach(t),qh.forEach(t),Ba.forEach(t),xp=d(e),At=s(e,"H2",{class:!0});var Oh=a(At);Io=s(Oh,"A",{id:!0,class:!0,href:!0});var t1=a(Io);su=s(t1,"SPAN",{});var o1=a(su);f(sa.$$.fragment,o1),o1.forEach(t),t1.forEach(t),Zv=d(Oh),au=s(Oh,"SPAN",{});var n1=a(au);ey=c(n1,"FlaxSequenceClassifierOutput"),n1.forEach(t),Oh.forEach(t),qp=d(e),H=s(e,"DIV",{class:!0});var La=a(H);f(aa.$$.fragment,La),ty=d(La),ru=s(La,"P",{});var s1=a(ru);oy=c(s1,"Base class for outputs of sentence classification models."),s1.forEach(t),ny=d(La),Vo=s(La,"DIV",{class:!0});var Sh=a(Vo);f(ra.$$.fragment,Sh),sy=d(Sh),iu=s(Sh,"P",{});var a1=a(iu);ay=c(a1,"\u201CReturns a new object replacing the specified fields with new values."),a1.forEach(t),Sh.forEach(t),La.forEach(t),Op=d(e),Ct=s(e,"H2",{class:!0});var Fh=a(Ct);Ro=s(Fh,"A",{id:!0,class:!0,href:!0});var r1=a(Ro);du=s(r1,"SPAN",{});var i1=a(du);f(ia.$$.fragment,i1),i1.forEach(t),r1.forEach(t),ry=d(Fh),uu=s(Fh,"SPAN",{});var d1=a(uu);iy=c(d1,"FlaxSeq2SeqSequenceClassifierOutput"),d1.forEach(t),Fh.forEach(t),Sp=d(e),Q=s(e,"DIV",{class:!0});var ja=a(Q);f(da.$$.fragment,ja),dy=d(ja),lu=s(ja,"P",{});var u1=a(lu);uy=c(u1,"Base class for outputs of sequence-to-sequence sentence classification models."),u1.forEach(t),ly=d(ja),Uo=s(ja,"DIV",{class:!0});var Mh=a(Uo);f(ua.$$.fragment,Mh),py=d(Mh),pu=s(Mh,"P",{});var l1=a(pu);cy=c(l1,"\u201CReturns a new object replacing the specified fields with new values."),l1.forEach(t),Mh.forEach(t),ja.forEach(t),Fp=d(e),zt=s(e,"H2",{class:!0});var kh=a(zt);Yo=s(kh,"A",{id:!0,class:!0,href:!0});var p1=a(Yo);cu=s(p1,"SPAN",{});var c1=a(cu);f(la.$$.fragment,c1),c1.forEach(t),p1.forEach(t),hy=d(kh),hu=s(kh,"SPAN",{});var h1=a(hu);fy=c(h1,"FlaxMultipleChoiceModelOutput"),h1.forEach(t),kh.forEach(t),Mp=d(e),I=s(e,"DIV",{class:!0});var Wa=a(I);f(pa.$$.fragment,Wa),_y=d(Wa),fu=s(Wa,"P",{});var f1=a(fu);my=c(f1,"Base class for outputs of multiple choice models."),f1.forEach(t),gy=d(Wa),Jo=s(Wa,"DIV",{class:!0});var Ah=a(Jo);f(ca.$$.fragment,Ah),vy=d(Ah),_u=s(Ah,"P",{});var _1=a(_u);yy=c(_1,"\u201CReturns a new object replacing the specified fields with new values."),_1.forEach(t),Ah.forEach(t),Wa.forEach(t),kp=d(e),Et=s(e,"H2",{class:!0});var Ch=a(Et);Go=s(Ch,"A",{id:!0,class:!0,href:!0});var m1=a(Go);mu=s(m1,"SPAN",{});var g1=a(mu);f(ha.$$.fragment,g1),g1.forEach(t),m1.forEach(t),Ty=d(Ch),gu=s(Ch,"SPAN",{});var v1=a(gu);wy=c(v1,"FlaxTokenClassifierOutput"),v1.forEach(t),Ch.forEach(t),Ap=d(e),V=s(e,"DIV",{class:!0});var Da=a(V);f(fa.$$.fragment,Da),by=d(Da),vu=s(Da,"P",{});var y1=a(vu);$y=c(y1,"Base class for outputs of token classification models."),y1.forEach(t),xy=d(Da),Ko=s(Da,"DIV",{class:!0});var zh=a(Ko);f(_a.$$.fragment,zh),qy=d(zh),yu=s(zh,"P",{});var T1=a(yu);Oy=c(T1,"\u201CReturns a new object replacing the specified fields with new values."),T1.forEach(t),zh.forEach(t),Da.forEach(t),Cp=d(e),Nt=s(e,"H2",{class:!0});var Eh=a(Nt);Xo=s(Eh,"A",{id:!0,class:!0,href:!0});var w1=a(Xo);Tu=s(w1,"SPAN",{});var b1=a(Tu);f(ma.$$.fragment,b1),b1.forEach(t),w1.forEach(t),Sy=d(Eh),wu=s(Eh,"SPAN",{});var $1=a(wu);Fy=c($1,"FlaxQuestionAnsweringModelOutput"),$1.forEach(t),Eh.forEach(t),zp=d(e),R=s(e,"DIV",{class:!0});var Ha=a(R);f(ga.$$.fragment,Ha),My=d(Ha),bu=s(Ha,"P",{});var x1=a(bu);ky=c(x1,"Base class for outputs of question answering models."),x1.forEach(t),Ay=d(Ha),Zo=s(Ha,"DIV",{class:!0});var Nh=a(Zo);f(va.$$.fragment,Nh),Cy=d(Nh),$u=s(Nh,"P",{});var q1=a($u);zy=c(q1,"\u201CReturns a new object replacing the specified fields with new values."),q1.forEach(t),Nh.forEach(t),Ha.forEach(t),Ep=d(e),Pt=s(e,"H2",{class:!0});var Ph=a(Pt);en=s(Ph,"A",{id:!0,class:!0,href:!0});var O1=a(en);xu=s(O1,"SPAN",{});var S1=a(xu);f(ya.$$.fragment,S1),S1.forEach(t),O1.forEach(t),Ey=d(Ph),qu=s(Ph,"SPAN",{});var F1=a(qu);Ny=c(F1,"FlaxSeq2SeqQuestionAnsweringModelOutput"),F1.forEach(t),Ph.forEach(t),Np=d(e),U=s(e,"DIV",{class:!0});var Qa=a(U);f(Ta.$$.fragment,Qa),Py=d(Qa),Ou=s(Qa,"P",{});var M1=a(Ou);By=c(M1,"Base class for outputs of sequence-to-sequence question answering models."),M1.forEach(t),Ly=d(Qa),tn=s(Qa,"DIV",{class:!0});var Bh=a(tn);f(wa.$$.fragment,Bh),jy=d(Bh),Su=s(Bh,"P",{});var k1=a(Su);Wy=c(k1,"\u201CReturns a new object replacing the specified fields with new values."),k1.forEach(t),Bh.forEach(t),Qa.forEach(t),this.h()},h(){r($,"name","hf:doc:metadata"),r($,"content",JSON.stringify(W1)),r(A,"id","model-outputs"),r(A,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(A,"href","#model-outputs"),r(x,"class","relative group"),r(xa,"href","/docs/transformers/pr_16673/en/main_classes/output#transformers.utils.ModelOutput"),r(Oa,"href","/docs/transformers/pr_16673/en/main_classes/output#transformers.modeling_outputs.SequenceClassifierOutput"),r(jt,"id","transformers.utils.ModelOutput"),r(jt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(jt,"href","#transformers.utils.ModelOutput"),r(ee,"class","relative group"),r(Dt,"class","docstring"),r(k,"class","docstring"),r(Ht,"id","transformers.modeling_outputs.BaseModelOutput"),r(Ht,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(Ht,"href","#transformers.modeling_outputs.BaseModelOutput"),r(oe,"class","relative group"),r(ne,"class","docstring"),r(Qt,"id","transformers.modeling_outputs.BaseModelOutputWithPooling"),r(Qt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(Qt,"href","#transformers.modeling_outputs.BaseModelOutputWithPooling"),r(se,"class","relative group"),r(ae,"class","docstring"),r(It,"id","transformers.modeling_outputs.BaseModelOutputWithCrossAttentions"),r(It,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(It,"href","#transformers.modeling_outputs.BaseModelOutputWithCrossAttentions"),r(re,"class","relative group"),r(ie,"class","docstring"),r(Vt,"id","transformers.modeling_outputs.BaseModelOutputWithPoolingAndCrossAttentions"),r(Vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(Vt,"href","#transformers.modeling_outputs.BaseModelOutputWithPoolingAndCrossAttentions"),r(de,"class","relative group"),r(ue,"class","docstring"),r(Rt,"id","transformers.modeling_outputs.BaseModelOutputWithPast"),r(Rt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(Rt,"href","#transformers.modeling_outputs.BaseModelOutputWithPast"),r(le,"class","relative group"),r(pe,"class","docstring"),r(Ut,"id","transformers.modeling_outputs.BaseModelOutputWithPastAndCrossAttentions"),r(Ut,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(Ut,"href","#transformers.modeling_outputs.BaseModelOutputWithPastAndCrossAttentions"),r(ce,"class","relative group"),r(he,"class","docstring"),r(Yt,"id","transformers.modeling_outputs.Seq2SeqModelOutput"),r(Yt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(Yt,"href","#transformers.modeling_outputs.Seq2SeqModelOutput"),r(fe,"class","relative group"),r(_e,"class","docstring"),r(Jt,"id","transformers.modeling_outputs.CausalLMOutput"),r(Jt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(Jt,"href","#transformers.modeling_outputs.CausalLMOutput"),r(me,"class","relative group"),r(ge,"class","docstring"),r(Gt,"id","transformers.modeling_outputs.CausalLMOutputWithCrossAttentions"),r(Gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(Gt,"href","#transformers.modeling_outputs.CausalLMOutputWithCrossAttentions"),r(ve,"class","relative group"),r(ye,"class","docstring"),r(Kt,"id","transformers.modeling_outputs.CausalLMOutputWithPast"),r(Kt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(Kt,"href","#transformers.modeling_outputs.CausalLMOutputWithPast"),r(Te,"class","relative group"),r(we,"class","docstring"),r(Xt,"id","transformers.modeling_outputs.MaskedLMOutput"),r(Xt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(Xt,"href","#transformers.modeling_outputs.MaskedLMOutput"),r(be,"class","relative group"),r($e,"class","docstring"),r(Zt,"id","transformers.modeling_outputs.Seq2SeqLMOutput"),r(Zt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(Zt,"href","#transformers.modeling_outputs.Seq2SeqLMOutput"),r(xe,"class","relative group"),r(qe,"class","docstring"),r(eo,"id","transformers.modeling_outputs.NextSentencePredictorOutput"),r(eo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(eo,"href","#transformers.modeling_outputs.NextSentencePredictorOutput"),r(Oe,"class","relative group"),r(Se,"class","docstring"),r(to,"id","transformers.modeling_outputs.SequenceClassifierOutput"),r(to,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(to,"href","#transformers.modeling_outputs.SequenceClassifierOutput"),r(Fe,"class","relative group"),r(Me,"class","docstring"),r(oo,"id","transformers.modeling_outputs.Seq2SeqSequenceClassifierOutput"),r(oo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(oo,"href","#transformers.modeling_outputs.Seq2SeqSequenceClassifierOutput"),r(ke,"class","relative group"),r(Ae,"class","docstring"),r(no,"id","transformers.modeling_outputs.MultipleChoiceModelOutput"),r(no,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(no,"href","#transformers.modeling_outputs.MultipleChoiceModelOutput"),r(Ce,"class","relative group"),r(ze,"class","docstring"),r(so,"id","transformers.modeling_outputs.TokenClassifierOutput"),r(so,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(so,"href","#transformers.modeling_outputs.TokenClassifierOutput"),r(Ee,"class","relative group"),r(Ne,"class","docstring"),r(ao,"id","transformers.modeling_outputs.QuestionAnsweringModelOutput"),r(ao,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(ao,"href","#transformers.modeling_outputs.QuestionAnsweringModelOutput"),r(Pe,"class","relative group"),r(Be,"class","docstring"),r(ro,"id","transformers.modeling_outputs.Seq2SeqQuestionAnsweringModelOutput"),r(ro,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(ro,"href","#transformers.modeling_outputs.Seq2SeqQuestionAnsweringModelOutput"),r(Le,"class","relative group"),r(je,"class","docstring"),r(io,"id","transformers.modeling_tf_outputs.TFBaseModelOutput"),r(io,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(io,"href","#transformers.modeling_tf_outputs.TFBaseModelOutput"),r(We,"class","relative group"),r(De,"class","docstring"),r(uo,"id","transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling"),r(uo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(uo,"href","#transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling"),r(He,"class","relative group"),r(Qe,"class","docstring"),r(lo,"id","transformers.modeling_tf_outputs.TFBaseModelOutputWithPoolingAndCrossAttentions"),r(lo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(lo,"href","#transformers.modeling_tf_outputs.TFBaseModelOutputWithPoolingAndCrossAttentions"),r(Ie,"class","relative group"),r(Ve,"class","docstring"),r(po,"id","transformers.modeling_tf_outputs.TFBaseModelOutputWithPast"),r(po,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(po,"href","#transformers.modeling_tf_outputs.TFBaseModelOutputWithPast"),r(Re,"class","relative group"),r(Ue,"class","docstring"),r(co,"id","transformers.modeling_tf_outputs.TFBaseModelOutputWithPastAndCrossAttentions"),r(co,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(co,"href","#transformers.modeling_tf_outputs.TFBaseModelOutputWithPastAndCrossAttentions"),r(Ye,"class","relative group"),r(Je,"class","docstring"),r(ho,"id","transformers.modeling_tf_outputs.TFSeq2SeqModelOutput"),r(ho,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(ho,"href","#transformers.modeling_tf_outputs.TFSeq2SeqModelOutput"),r(Ge,"class","relative group"),r(Ke,"class","docstring"),r(fo,"id","transformers.modeling_tf_outputs.TFCausalLMOutput"),r(fo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(fo,"href","#transformers.modeling_tf_outputs.TFCausalLMOutput"),r(Xe,"class","relative group"),r(Ze,"class","docstring"),r(_o,"id","transformers.modeling_tf_outputs.TFCausalLMOutputWithCrossAttentions"),r(_o,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(_o,"href","#transformers.modeling_tf_outputs.TFCausalLMOutputWithCrossAttentions"),r(et,"class","relative group"),r(tt,"class","docstring"),r(mo,"id","transformers.modeling_tf_outputs.TFCausalLMOutputWithPast"),r(mo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(mo,"href","#transformers.modeling_tf_outputs.TFCausalLMOutputWithPast"),r(ot,"class","relative group"),r(nt,"class","docstring"),r(go,"id","transformers.modeling_tf_outputs.TFMaskedLMOutput"),r(go,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(go,"href","#transformers.modeling_tf_outputs.TFMaskedLMOutput"),r(st,"class","relative group"),r(at,"class","docstring"),r(vo,"id","transformers.modeling_tf_outputs.TFSeq2SeqLMOutput"),r(vo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(vo,"href","#transformers.modeling_tf_outputs.TFSeq2SeqLMOutput"),r(rt,"class","relative group"),r(it,"class","docstring"),r(yo,"id","transformers.modeling_tf_outputs.TFNextSentencePredictorOutput"),r(yo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(yo,"href","#transformers.modeling_tf_outputs.TFNextSentencePredictorOutput"),r(dt,"class","relative group"),r(ut,"class","docstring"),r(To,"id","transformers.modeling_tf_outputs.TFSequenceClassifierOutput"),r(To,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(To,"href","#transformers.modeling_tf_outputs.TFSequenceClassifierOutput"),r(lt,"class","relative group"),r(pt,"class","docstring"),r(wo,"id","transformers.modeling_tf_outputs.TFSeq2SeqSequenceClassifierOutput"),r(wo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(wo,"href","#transformers.modeling_tf_outputs.TFSeq2SeqSequenceClassifierOutput"),r(ct,"class","relative group"),r(ht,"class","docstring"),r(bo,"id","transformers.modeling_tf_outputs.TFMultipleChoiceModelOutput"),r(bo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(bo,"href","#transformers.modeling_tf_outputs.TFMultipleChoiceModelOutput"),r(ft,"class","relative group"),r(_t,"class","docstring"),r($o,"id","transformers.modeling_tf_outputs.TFTokenClassifierOutput"),r($o,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r($o,"href","#transformers.modeling_tf_outputs.TFTokenClassifierOutput"),r(mt,"class","relative group"),r(gt,"class","docstring"),r(xo,"id","transformers.modeling_tf_outputs.TFQuestionAnsweringModelOutput"),r(xo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(xo,"href","#transformers.modeling_tf_outputs.TFQuestionAnsweringModelOutput"),r(vt,"class","relative group"),r(yt,"class","docstring"),r(qo,"id","transformers.modeling_tf_outputs.TFSeq2SeqQuestionAnsweringModelOutput"),r(qo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(qo,"href","#transformers.modeling_tf_outputs.TFSeq2SeqQuestionAnsweringModelOutput"),r(Tt,"class","relative group"),r(wt,"class","docstring"),r(Oo,"id","transformers.modeling_flax_outputs.FlaxBaseModelOutput"),r(Oo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(Oo,"href","#transformers.modeling_flax_outputs.FlaxBaseModelOutput"),r(bt,"class","relative group"),r(So,"class","docstring"),r(z,"class","docstring"),r(Fo,"id","transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPast"),r(Fo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(Fo,"href","#transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPast"),r($t,"class","relative group"),r(Mo,"class","docstring"),r(E,"class","docstring"),r(ko,"id","transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPooling"),r(ko,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(ko,"href","#transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPooling"),r(xt,"class","relative group"),r(Ao,"class","docstring"),r(N,"class","docstring"),r(Co,"id","transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPastAndCrossAttentions"),r(Co,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(Co,"href","#transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPastAndCrossAttentions"),r(qt,"class","relative group"),r(zo,"class","docstring"),r(P,"class","docstring"),r(Eo,"id","transformers.modeling_flax_outputs.FlaxSeq2SeqModelOutput"),r(Eo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(Eo,"href","#transformers.modeling_flax_outputs.FlaxSeq2SeqModelOutput"),r(Ot,"class","relative group"),r(No,"class","docstring"),r(B,"class","docstring"),r(Po,"id","transformers.modeling_flax_outputs.FlaxCausalLMOutputWithCrossAttentions"),r(Po,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(Po,"href","#transformers.modeling_flax_outputs.FlaxCausalLMOutputWithCrossAttentions"),r(St,"class","relative group"),r(Bo,"class","docstring"),r(L,"class","docstring"),r(Lo,"id","transformers.modeling_flax_outputs.FlaxMaskedLMOutput"),r(Lo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(Lo,"href","#transformers.modeling_flax_outputs.FlaxMaskedLMOutput"),r(Ft,"class","relative group"),r(jo,"class","docstring"),r(j,"class","docstring"),r(Wo,"id","transformers.modeling_flax_outputs.FlaxSeq2SeqLMOutput"),r(Wo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(Wo,"href","#transformers.modeling_flax_outputs.FlaxSeq2SeqLMOutput"),r(Mt,"class","relative group"),r(Do,"class","docstring"),r(W,"class","docstring"),r(Ho,"id","transformers.modeling_flax_outputs.FlaxNextSentencePredictorOutput"),r(Ho,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(Ho,"href","#transformers.modeling_flax_outputs.FlaxNextSentencePredictorOutput"),r(kt,"class","relative group"),r(Qo,"class","docstring"),r(D,"class","docstring"),r(Io,"id","transformers.modeling_flax_outputs.FlaxSequenceClassifierOutput"),r(Io,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(Io,"href","#transformers.modeling_flax_outputs.FlaxSequenceClassifierOutput"),r(At,"class","relative group"),r(Vo,"class","docstring"),r(H,"class","docstring"),r(Ro,"id","transformers.modeling_flax_outputs.FlaxSeq2SeqSequenceClassifierOutput"),r(Ro,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(Ro,"href","#transformers.modeling_flax_outputs.FlaxSeq2SeqSequenceClassifierOutput"),r(Ct,"class","relative group"),r(Uo,"class","docstring"),r(Q,"class","docstring"),r(Yo,"id","transformers.modeling_flax_outputs.FlaxMultipleChoiceModelOutput"),r(Yo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(Yo,"href","#transformers.modeling_flax_outputs.FlaxMultipleChoiceModelOutput"),r(zt,"class","relative group"),r(Jo,"class","docstring"),r(I,"class","docstring"),r(Go,"id","transformers.modeling_flax_outputs.FlaxTokenClassifierOutput"),r(Go,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(Go,"href","#transformers.modeling_flax_outputs.FlaxTokenClassifierOutput"),r(Et,"class","relative group"),r(Ko,"class","docstring"),r(V,"class","docstring"),r(Xo,"id","transformers.modeling_flax_outputs.FlaxQuestionAnsweringModelOutput"),r(Xo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(Xo,"href","#transformers.modeling_flax_outputs.FlaxQuestionAnsweringModelOutput"),r(Nt,"class","relative group"),r(Zo,"class","docstring"),r(R,"class","docstring"),r(en,"id","transformers.modeling_flax_outputs.FlaxSeq2SeqQuestionAnsweringModelOutput"),r(en,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(en,"href","#transformers.modeling_flax_outputs.FlaxSeq2SeqQuestionAnsweringModelOutput"),r(Pt,"class","relative group"),r(tn,"class","docstring"),r(U,"class","docstring")},m(e,u){o(document.head,$),l(e,Bt,u),l(e,x,u),o(x,A),o(A,K),_(q,K,null),o(x,nn),o(x,X),o(X,Z),l(e,M,u),l(e,C,u),o(C,$a),o(C,xa),o(xa,Lh),o(C,jh),l(e,Mu,u),l(e,qa,u),o(qa,Wh),l(e,ku,u),_(sn,e,u),l(e,Au,u),l(e,w,u),o(w,Dh),o(w,Ia),o(Ia,Hh),o(w,Qh),o(w,Oa),o(Oa,Ih),o(w,Vh),o(w,Va),o(Va,Rh),o(w,Uh),o(w,Ra),o(Ra,Yh),o(w,Jh),o(w,Ua),o(Ua,Gh),o(w,Kh),o(w,Ya),o(Ya,Xh),o(w,Zh),o(w,Ja),o(Ja,ef),o(w,tf),o(w,Ga),o(Ga,of),o(w,nf),o(w,Ka),o(Ka,sf),o(w,af),o(w,Xa),o(Xa,rf),o(w,df),o(w,Za),o(Za,uf),o(w,lf),o(w,er),o(er,pf),o(w,cf),l(e,Cu,u),l(e,O,u),o(O,hf),o(O,tr),o(tr,ff),o(O,_f),o(O,or),o(or,mf),o(O,gf),o(O,nr),o(nr,vf),o(O,yf),o(O,sr),o(sr,Tf),o(O,wf),l(e,zu,u),l(e,S,u),o(S,bf),o(S,ar),o(ar,$f),o(S,xf),o(S,rr),o(rr,qf),o(S,Of),o(S,ir),o(ir,Sf),o(S,Ff),o(S,dr),o(dr,Mf),o(S,kf),l(e,Eu,u),_(an,e,u),l(e,Nu,u),l(e,Lt,u),o(Lt,Af),o(Lt,ur),o(ur,Cf),o(Lt,zf),l(e,Pu,u),l(e,F,u),o(F,Ef),o(F,lr),o(lr,Nf),o(F,Pf),o(F,pr),o(pr,Bf),o(F,Lf),o(F,cr),o(cr,jf),o(F,Wf),o(F,hr),o(hr,Df),o(F,Hf),l(e,Bu,u),l(e,Sa,u),o(Sa,Qf),l(e,Lu,u),l(e,ee,u),o(ee,jt),o(jt,fr),_(rn,fr,null),o(ee,If),o(ee,_r),o(_r,Vf),l(e,ju,u),l(e,k,u),_(dn,k,null),o(k,Rf),o(k,te),o(te,Uf),o(te,mr),o(mr,Yf),o(te,Jf),o(te,gr),o(gr,Gf),o(te,Kf),o(k,Xf),_(Wt,k,null),o(k,Zf),o(k,Dt),_(un,Dt,null),o(Dt,e_),o(Dt,ln),o(ln,t_),o(ln,vr),o(vr,o_),o(ln,n_),l(e,Wu,u),l(e,oe,u),o(oe,Ht),o(Ht,yr),_(pn,yr,null),o(oe,s_),o(oe,Tr),o(Tr,a_),l(e,Du,u),l(e,ne,u),_(cn,ne,null),o(ne,r_),o(ne,wr),o(wr,i_),l(e,Hu,u),l(e,se,u),o(se,Qt),o(Qt,br),_(hn,br,null),o(se,d_),o(se,$r),o($r,u_),l(e,Qu,u),l(e,ae,u),_(fn,ae,null),o(ae,l_),o(ae,xr),o(xr,p_),l(e,Iu,u),l(e,re,u),o(re,It),o(It,qr),_(_n,qr,null),o(re,c_),o(re,Or),o(Or,h_),l(e,Vu,u),l(e,ie,u),_(mn,ie,null),o(ie,f_),o(ie,Sr),o(Sr,__),l(e,Ru,u),l(e,de,u),o(de,Vt),o(Vt,Fr),_(gn,Fr,null),o(de,m_),o(de,Mr),o(Mr,g_),l(e,Uu,u),l(e,ue,u),_(vn,ue,null),o(ue,v_),o(ue,kr),o(kr,y_),l(e,Yu,u),l(e,le,u),o(le,Rt),o(Rt,Ar),_(yn,Ar,null),o(le,T_),o(le,Cr),o(Cr,w_),l(e,Ju,u),l(e,pe,u),_(Tn,pe,null),o(pe,b_),o(pe,zr),o(zr,$_),l(e,Gu,u),l(e,ce,u),o(ce,Ut),o(Ut,Er),_(wn,Er,null),o(ce,x_),o(ce,Nr),o(Nr,q_),l(e,Ku,u),l(e,he,u),_(bn,he,null),o(he,O_),o(he,Pr),o(Pr,S_),l(e,Xu,u),l(e,fe,u),o(fe,Yt),o(Yt,Br),_($n,Br,null),o(fe,F_),o(fe,Lr),o(Lr,M_),l(e,Zu,u),l(e,_e,u),_(xn,_e,null),o(_e,k_),o(_e,jr),o(jr,A_),l(e,el,u),l(e,me,u),o(me,Jt),o(Jt,Wr),_(qn,Wr,null),o(me,C_),o(me,Dr),o(Dr,z_),l(e,tl,u),l(e,ge,u),_(On,ge,null),o(ge,E_),o(ge,Hr),o(Hr,N_),l(e,ol,u),l(e,ve,u),o(ve,Gt),o(Gt,Qr),_(Sn,Qr,null),o(ve,P_),o(ve,Ir),o(Ir,B_),l(e,nl,u),l(e,ye,u),_(Fn,ye,null),o(ye,L_),o(ye,Vr),o(Vr,j_),l(e,sl,u),l(e,Te,u),o(Te,Kt),o(Kt,Rr),_(Mn,Rr,null),o(Te,W_),o(Te,Ur),o(Ur,D_),l(e,al,u),l(e,we,u),_(kn,we,null),o(we,H_),o(we,Yr),o(Yr,Q_),l(e,rl,u),l(e,be,u),o(be,Xt),o(Xt,Jr),_(An,Jr,null),o(be,I_),o(be,Gr),o(Gr,V_),l(e,il,u),l(e,$e,u),_(Cn,$e,null),o($e,R_),o($e,Kr),o(Kr,U_),l(e,dl,u),l(e,xe,u),o(xe,Zt),o(Zt,Xr),_(zn,Xr,null),o(xe,Y_),o(xe,Zr),o(Zr,J_),l(e,ul,u),l(e,qe,u),_(En,qe,null),o(qe,G_),o(qe,ei),o(ei,K_),l(e,ll,u),l(e,Oe,u),o(Oe,eo),o(eo,ti),_(Nn,ti,null),o(Oe,X_),o(Oe,oi),o(oi,Z_),l(e,pl,u),l(e,Se,u),_(Pn,Se,null),o(Se,em),o(Se,ni),o(ni,tm),l(e,cl,u),l(e,Fe,u),o(Fe,to),o(to,si),_(Bn,si,null),o(Fe,om),o(Fe,ai),o(ai,nm),l(e,hl,u),l(e,Me,u),_(Ln,Me,null),o(Me,sm),o(Me,ri),o(ri,am),l(e,fl,u),l(e,ke,u),o(ke,oo),o(oo,ii),_(jn,ii,null),o(ke,rm),o(ke,di),o(di,im),l(e,_l,u),l(e,Ae,u),_(Wn,Ae,null),o(Ae,dm),o(Ae,ui),o(ui,um),l(e,ml,u),l(e,Ce,u),o(Ce,no),o(no,li),_(Dn,li,null),o(Ce,lm),o(Ce,pi),o(pi,pm),l(e,gl,u),l(e,ze,u),_(Hn,ze,null),o(ze,cm),o(ze,ci),o(ci,hm),l(e,vl,u),l(e,Ee,u),o(Ee,so),o(so,hi),_(Qn,hi,null),o(Ee,fm),o(Ee,fi),o(fi,_m),l(e,yl,u),l(e,Ne,u),_(In,Ne,null),o(Ne,mm),o(Ne,_i),o(_i,gm),l(e,Tl,u),l(e,Pe,u),o(Pe,ao),o(ao,mi),_(Vn,mi,null),o(Pe,vm),o(Pe,gi),o(gi,ym),l(e,wl,u),l(e,Be,u),_(Rn,Be,null),o(Be,Tm),o(Be,vi),o(vi,wm),l(e,bl,u),l(e,Le,u),o(Le,ro),o(ro,yi),_(Un,yi,null),o(Le,bm),o(Le,Ti),o(Ti,$m),l(e,$l,u),l(e,je,u),_(Yn,je,null),o(je,xm),o(je,wi),o(wi,qm),l(e,xl,u),l(e,We,u),o(We,io),o(io,bi),_(Jn,bi,null),o(We,Om),o(We,$i),o($i,Sm),l(e,ql,u),l(e,De,u),_(Gn,De,null),o(De,Fm),o(De,xi),o(xi,Mm),l(e,Ol,u),l(e,He,u),o(He,uo),o(uo,qi),_(Kn,qi,null),o(He,km),o(He,Oi),o(Oi,Am),l(e,Sl,u),l(e,Qe,u),_(Xn,Qe,null),o(Qe,Cm),o(Qe,Si),o(Si,zm),l(e,Fl,u),l(e,Ie,u),o(Ie,lo),o(lo,Fi),_(Zn,Fi,null),o(Ie,Em),o(Ie,Mi),o(Mi,Nm),l(e,Ml,u),l(e,Ve,u),_(es,Ve,null),o(Ve,Pm),o(Ve,ki),o(ki,Bm),l(e,kl,u),l(e,Re,u),o(Re,po),o(po,Ai),_(ts,Ai,null),o(Re,Lm),o(Re,Ci),o(Ci,jm),l(e,Al,u),l(e,Ue,u),_(os,Ue,null),o(Ue,Wm),o(Ue,zi),o(zi,Dm),l(e,Cl,u),l(e,Ye,u),o(Ye,co),o(co,Ei),_(ns,Ei,null),o(Ye,Hm),o(Ye,Ni),o(Ni,Qm),l(e,zl,u),l(e,Je,u),_(ss,Je,null),o(Je,Im),o(Je,Pi),o(Pi,Vm),l(e,El,u),l(e,Ge,u),o(Ge,ho),o(ho,Bi),_(as,Bi,null),o(Ge,Rm),o(Ge,Li),o(Li,Um),l(e,Nl,u),l(e,Ke,u),_(rs,Ke,null),o(Ke,Ym),o(Ke,ji),o(ji,Jm),l(e,Pl,u),l(e,Xe,u),o(Xe,fo),o(fo,Wi),_(is,Wi,null),o(Xe,Gm),o(Xe,Di),o(Di,Km),l(e,Bl,u),l(e,Ze,u),_(ds,Ze,null),o(Ze,Xm),o(Ze,Hi),o(Hi,Zm),l(e,Ll,u),l(e,et,u),o(et,_o),o(_o,Qi),_(us,Qi,null),o(et,eg),o(et,Ii),o(Ii,tg),l(e,jl,u),l(e,tt,u),_(ls,tt,null),o(tt,og),o(tt,Vi),o(Vi,ng),l(e,Wl,u),l(e,ot,u),o(ot,mo),o(mo,Ri),_(ps,Ri,null),o(ot,sg),o(ot,Ui),o(Ui,ag),l(e,Dl,u),l(e,nt,u),_(cs,nt,null),o(nt,rg),o(nt,Yi),o(Yi,ig),l(e,Hl,u),l(e,st,u),o(st,go),o(go,Ji),_(hs,Ji,null),o(st,dg),o(st,Gi),o(Gi,ug),l(e,Ql,u),l(e,at,u),_(fs,at,null),o(at,lg),o(at,Ki),o(Ki,pg),l(e,Il,u),l(e,rt,u),o(rt,vo),o(vo,Xi),_(_s,Xi,null),o(rt,cg),o(rt,Zi),o(Zi,hg),l(e,Vl,u),l(e,it,u),_(ms,it,null),o(it,fg),o(it,ed),o(ed,_g),l(e,Rl,u),l(e,dt,u),o(dt,yo),o(yo,td),_(gs,td,null),o(dt,mg),o(dt,od),o(od,gg),l(e,Ul,u),l(e,ut,u),_(vs,ut,null),o(ut,vg),o(ut,nd),o(nd,yg),l(e,Yl,u),l(e,lt,u),o(lt,To),o(To,sd),_(ys,sd,null),o(lt,Tg),o(lt,ad),o(ad,wg),l(e,Jl,u),l(e,pt,u),_(Ts,pt,null),o(pt,bg),o(pt,rd),o(rd,$g),l(e,Gl,u),l(e,ct,u),o(ct,wo),o(wo,id),_(ws,id,null),o(ct,xg),o(ct,dd),o(dd,qg),l(e,Kl,u),l(e,ht,u),_(bs,ht,null),o(ht,Og),o(ht,ud),o(ud,Sg),l(e,Xl,u),l(e,ft,u),o(ft,bo),o(bo,ld),_($s,ld,null),o(ft,Fg),o(ft,pd),o(pd,Mg),l(e,Zl,u),l(e,_t,u),_(xs,_t,null),o(_t,kg),o(_t,cd),o(cd,Ag),l(e,ep,u),l(e,mt,u),o(mt,$o),o($o,hd),_(qs,hd,null),o(mt,Cg),o(mt,fd),o(fd,zg),l(e,tp,u),l(e,gt,u),_(Os,gt,null),o(gt,Eg),o(gt,_d),o(_d,Ng),l(e,op,u),l(e,vt,u),o(vt,xo),o(xo,md),_(Ss,md,null),o(vt,Pg),o(vt,gd),o(gd,Bg),l(e,np,u),l(e,yt,u),_(Fs,yt,null),o(yt,Lg),o(yt,vd),o(vd,jg),l(e,sp,u),l(e,Tt,u),o(Tt,qo),o(qo,yd),_(Ms,yd,null),o(Tt,Wg),o(Tt,Td),o(Td,Dg),l(e,ap,u),l(e,wt,u),_(ks,wt,null),o(wt,Hg),o(wt,wd),o(wd,Qg),l(e,rp,u),l(e,bt,u),o(bt,Oo),o(Oo,bd),_(As,bd,null),o(bt,Ig),o(bt,$d),o($d,Vg),l(e,ip,u),l(e,z,u),_(Cs,z,null),o(z,Rg),o(z,xd),o(xd,Ug),o(z,Yg),o(z,So),_(zs,So,null),o(So,Jg),o(So,qd),o(qd,Gg),l(e,dp,u),l(e,$t,u),o($t,Fo),o(Fo,Od),_(Es,Od,null),o($t,Kg),o($t,Sd),o(Sd,Xg),l(e,up,u),l(e,E,u),_(Ns,E,null),o(E,Zg),o(E,Fd),o(Fd,ev),o(E,tv),o(E,Mo),_(Ps,Mo,null),o(Mo,ov),o(Mo,Md),o(Md,nv),l(e,lp,u),l(e,xt,u),o(xt,ko),o(ko,kd),_(Bs,kd,null),o(xt,sv),o(xt,Ad),o(Ad,av),l(e,pp,u),l(e,N,u),_(Ls,N,null),o(N,rv),o(N,Cd),o(Cd,iv),o(N,dv),o(N,Ao),_(js,Ao,null),o(Ao,uv),o(Ao,zd),o(zd,lv),l(e,cp,u),l(e,qt,u),o(qt,Co),o(Co,Ed),_(Ws,Ed,null),o(qt,pv),o(qt,Nd),o(Nd,cv),l(e,hp,u),l(e,P,u),_(Ds,P,null),o(P,hv),o(P,Pd),o(Pd,fv),o(P,_v),o(P,zo),_(Hs,zo,null),o(zo,mv),o(zo,Bd),o(Bd,gv),l(e,fp,u),l(e,Ot,u),o(Ot,Eo),o(Eo,Ld),_(Qs,Ld,null),o(Ot,vv),o(Ot,jd),o(jd,yv),l(e,_p,u),l(e,B,u),_(Is,B,null),o(B,Tv),o(B,Wd),o(Wd,wv),o(B,bv),o(B,No),_(Vs,No,null),o(No,$v),o(No,Dd),o(Dd,xv),l(e,mp,u),l(e,St,u),o(St,Po),o(Po,Hd),_(Rs,Hd,null),o(St,qv),o(St,Qd),o(Qd,Ov),l(e,gp,u),l(e,L,u),_(Us,L,null),o(L,Sv),o(L,Id),o(Id,Fv),o(L,Mv),o(L,Bo),_(Ys,Bo,null),o(Bo,kv),o(Bo,Vd),o(Vd,Av),l(e,vp,u),l(e,Ft,u),o(Ft,Lo),o(Lo,Rd),_(Js,Rd,null),o(Ft,Cv),o(Ft,Ud),o(Ud,zv),l(e,yp,u),l(e,j,u),_(Gs,j,null),o(j,Ev),o(j,Yd),o(Yd,Nv),o(j,Pv),o(j,jo),_(Ks,jo,null),o(jo,Bv),o(jo,Jd),o(Jd,Lv),l(e,Tp,u),l(e,Mt,u),o(Mt,Wo),o(Wo,Gd),_(Xs,Gd,null),o(Mt,jv),o(Mt,Kd),o(Kd,Wv),l(e,wp,u),l(e,W,u),_(Zs,W,null),o(W,Dv),o(W,Xd),o(Xd,Hv),o(W,Qv),o(W,Do),_(ea,Do,null),o(Do,Iv),o(Do,Zd),o(Zd,Vv),l(e,bp,u),l(e,kt,u),o(kt,Ho),o(Ho,eu),_(ta,eu,null),o(kt,Rv),o(kt,tu),o(tu,Uv),l(e,$p,u),l(e,D,u),_(oa,D,null),o(D,Yv),o(D,ou),o(ou,Jv),o(D,Gv),o(D,Qo),_(na,Qo,null),o(Qo,Kv),o(Qo,nu),o(nu,Xv),l(e,xp,u),l(e,At,u),o(At,Io),o(Io,su),_(sa,su,null),o(At,Zv),o(At,au),o(au,ey),l(e,qp,u),l(e,H,u),_(aa,H,null),o(H,ty),o(H,ru),o(ru,oy),o(H,ny),o(H,Vo),_(ra,Vo,null),o(Vo,sy),o(Vo,iu),o(iu,ay),l(e,Op,u),l(e,Ct,u),o(Ct,Ro),o(Ro,du),_(ia,du,null),o(Ct,ry),o(Ct,uu),o(uu,iy),l(e,Sp,u),l(e,Q,u),_(da,Q,null),o(Q,dy),o(Q,lu),o(lu,uy),o(Q,ly),o(Q,Uo),_(ua,Uo,null),o(Uo,py),o(Uo,pu),o(pu,cy),l(e,Fp,u),l(e,zt,u),o(zt,Yo),o(Yo,cu),_(la,cu,null),o(zt,hy),o(zt,hu),o(hu,fy),l(e,Mp,u),l(e,I,u),_(pa,I,null),o(I,_y),o(I,fu),o(fu,my),o(I,gy),o(I,Jo),_(ca,Jo,null),o(Jo,vy),o(Jo,_u),o(_u,yy),l(e,kp,u),l(e,Et,u),o(Et,Go),o(Go,mu),_(ha,mu,null),o(Et,Ty),o(Et,gu),o(gu,wy),l(e,Ap,u),l(e,V,u),_(fa,V,null),o(V,by),o(V,vu),o(vu,$y),o(V,xy),o(V,Ko),_(_a,Ko,null),o(Ko,qy),o(Ko,yu),o(yu,Oy),l(e,Cp,u),l(e,Nt,u),o(Nt,Xo),o(Xo,Tu),_(ma,Tu,null),o(Nt,Sy),o(Nt,wu),o(wu,Fy),l(e,zp,u),l(e,R,u),_(ga,R,null),o(R,My),o(R,bu),o(bu,ky),o(R,Ay),o(R,Zo),_(va,Zo,null),o(Zo,Cy),o(Zo,$u),o($u,zy),l(e,Ep,u),l(e,Pt,u),o(Pt,en),o(en,xu),_(ya,xu,null),o(Pt,Ey),o(Pt,qu),o(qu,Ny),l(e,Np,u),l(e,U,u),_(Ta,U,null),o(U,Py),o(U,Ou),o(Ou,By),o(U,Ly),o(U,tn),_(wa,tn,null),o(tn,jy),o(tn,Su),o(Su,Wy),Pp=!0},p(e,[u]){const ba={};u&2&&(ba.$$scope={dirty:u,ctx:e}),Wt.$set(ba)},i(e){Pp||(m(q.$$.fragment,e),m(sn.$$.fragment,e),m(an.$$.fragment,e),m(rn.$$.fragment,e),m(dn.$$.fragment,e),m(Wt.$$.fragment,e),m(un.$$.fragment,e),m(pn.$$.fragment,e),m(cn.$$.fragment,e),m(hn.$$.fragment,e),m(fn.$$.fragment,e),m(_n.$$.fragment,e),m(mn.$$.fragment,e),m(gn.$$.fragment,e),m(vn.$$.fragment,e),m(yn.$$.fragment,e),m(Tn.$$.fragment,e),m(wn.$$.fragment,e),m(bn.$$.fragment,e),m($n.$$.fragment,e),m(xn.$$.fragment,e),m(qn.$$.fragment,e),m(On.$$.fragment,e),m(Sn.$$.fragment,e),m(Fn.$$.fragment,e),m(Mn.$$.fragment,e),m(kn.$$.fragment,e),m(An.$$.fragment,e),m(Cn.$$.fragment,e),m(zn.$$.fragment,e),m(En.$$.fragment,e),m(Nn.$$.fragment,e),m(Pn.$$.fragment,e),m(Bn.$$.fragment,e),m(Ln.$$.fragment,e),m(jn.$$.fragment,e),m(Wn.$$.fragment,e),m(Dn.$$.fragment,e),m(Hn.$$.fragment,e),m(Qn.$$.fragment,e),m(In.$$.fragment,e),m(Vn.$$.fragment,e),m(Rn.$$.fragment,e),m(Un.$$.fragment,e),m(Yn.$$.fragment,e),m(Jn.$$.fragment,e),m(Gn.$$.fragment,e),m(Kn.$$.fragment,e),m(Xn.$$.fragment,e),m(Zn.$$.fragment,e),m(es.$$.fragment,e),m(ts.$$.fragment,e),m(os.$$.fragment,e),m(ns.$$.fragment,e),m(ss.$$.fragment,e),m(as.$$.fragment,e),m(rs.$$.fragment,e),m(is.$$.fragment,e),m(ds.$$.fragment,e),m(us.$$.fragment,e),m(ls.$$.fragment,e),m(ps.$$.fragment,e),m(cs.$$.fragment,e),m(hs.$$.fragment,e),m(fs.$$.fragment,e),m(_s.$$.fragment,e),m(ms.$$.fragment,e),m(gs.$$.fragment,e),m(vs.$$.fragment,e),m(ys.$$.fragment,e),m(Ts.$$.fragment,e),m(ws.$$.fragment,e),m(bs.$$.fragment,e),m($s.$$.fragment,e),m(xs.$$.fragment,e),m(qs.$$.fragment,e),m(Os.$$.fragment,e),m(Ss.$$.fragment,e),m(Fs.$$.fragment,e),m(Ms.$$.fragment,e),m(ks.$$.fragment,e),m(As.$$.fragment,e),m(Cs.$$.fragment,e),m(zs.$$.fragment,e),m(Es.$$.fragment,e),m(Ns.$$.fragment,e),m(Ps.$$.fragment,e),m(Bs.$$.fragment,e),m(Ls.$$.fragment,e),m(js.$$.fragment,e),m(Ws.$$.fragment,e),m(Ds.$$.fragment,e),m(Hs.$$.fragment,e),m(Qs.$$.fragment,e),m(Is.$$.fragment,e),m(Vs.$$.fragment,e),m(Rs.$$.fragment,e),m(Us.$$.fragment,e),m(Ys.$$.fragment,e),m(Js.$$.fragment,e),m(Gs.$$.fragment,e),m(Ks.$$.fragment,e),m(Xs.$$.fragment,e),m(Zs.$$.fragment,e),m(ea.$$.fragment,e),m(ta.$$.fragment,e),m(oa.$$.fragment,e),m(na.$$.fragment,e),m(sa.$$.fragment,e),m(aa.$$.fragment,e),m(ra.$$.fragment,e),m(ia.$$.fragment,e),m(da.$$.fragment,e),m(ua.$$.fragment,e),m(la.$$.fragment,e),m(pa.$$.fragment,e),m(ca.$$.fragment,e),m(ha.$$.fragment,e),m(fa.$$.fragment,e),m(_a.$$.fragment,e),m(ma.$$.fragment,e),m(ga.$$.fragment,e),m(va.$$.fragment,e),m(ya.$$.fragment,e),m(Ta.$$.fragment,e),m(wa.$$.fragment,e),Pp=!0)},o(e){g(q.$$.fragment,e),g(sn.$$.fragment,e),g(an.$$.fragment,e),g(rn.$$.fragment,e),g(dn.$$.fragment,e),g(Wt.$$.fragment,e),g(un.$$.fragment,e),g(pn.$$.fragment,e),g(cn.$$.fragment,e),g(hn.$$.fragment,e),g(fn.$$.fragment,e),g(_n.$$.fragment,e),g(mn.$$.fragment,e),g(gn.$$.fragment,e),g(vn.$$.fragment,e),g(yn.$$.fragment,e),g(Tn.$$.fragment,e),g(wn.$$.fragment,e),g(bn.$$.fragment,e),g($n.$$.fragment,e),g(xn.$$.fragment,e),g(qn.$$.fragment,e),g(On.$$.fragment,e),g(Sn.$$.fragment,e),g(Fn.$$.fragment,e),g(Mn.$$.fragment,e),g(kn.$$.fragment,e),g(An.$$.fragment,e),g(Cn.$$.fragment,e),g(zn.$$.fragment,e),g(En.$$.fragment,e),g(Nn.$$.fragment,e),g(Pn.$$.fragment,e),g(Bn.$$.fragment,e),g(Ln.$$.fragment,e),g(jn.$$.fragment,e),g(Wn.$$.fragment,e),g(Dn.$$.fragment,e),g(Hn.$$.fragment,e),g(Qn.$$.fragment,e),g(In.$$.fragment,e),g(Vn.$$.fragment,e),g(Rn.$$.fragment,e),g(Un.$$.fragment,e),g(Yn.$$.fragment,e),g(Jn.$$.fragment,e),g(Gn.$$.fragment,e),g(Kn.$$.fragment,e),g(Xn.$$.fragment,e),g(Zn.$$.fragment,e),g(es.$$.fragment,e),g(ts.$$.fragment,e),g(os.$$.fragment,e),g(ns.$$.fragment,e),g(ss.$$.fragment,e),g(as.$$.fragment,e),g(rs.$$.fragment,e),g(is.$$.fragment,e),g(ds.$$.fragment,e),g(us.$$.fragment,e),g(ls.$$.fragment,e),g(ps.$$.fragment,e),g(cs.$$.fragment,e),g(hs.$$.fragment,e),g(fs.$$.fragment,e),g(_s.$$.fragment,e),g(ms.$$.fragment,e),g(gs.$$.fragment,e),g(vs.$$.fragment,e),g(ys.$$.fragment,e),g(Ts.$$.fragment,e),g(ws.$$.fragment,e),g(bs.$$.fragment,e),g($s.$$.fragment,e),g(xs.$$.fragment,e),g(qs.$$.fragment,e),g(Os.$$.fragment,e),g(Ss.$$.fragment,e),g(Fs.$$.fragment,e),g(Ms.$$.fragment,e),g(ks.$$.fragment,e),g(As.$$.fragment,e),g(Cs.$$.fragment,e),g(zs.$$.fragment,e),g(Es.$$.fragment,e),g(Ns.$$.fragment,e),g(Ps.$$.fragment,e),g(Bs.$$.fragment,e),g(Ls.$$.fragment,e),g(js.$$.fragment,e),g(Ws.$$.fragment,e),g(Ds.$$.fragment,e),g(Hs.$$.fragment,e),g(Qs.$$.fragment,e),g(Is.$$.fragment,e),g(Vs.$$.fragment,e),g(Rs.$$.fragment,e),g(Us.$$.fragment,e),g(Ys.$$.fragment,e),g(Js.$$.fragment,e),g(Gs.$$.fragment,e),g(Ks.$$.fragment,e),g(Xs.$$.fragment,e),g(Zs.$$.fragment,e),g(ea.$$.fragment,e),g(ta.$$.fragment,e),g(oa.$$.fragment,e),g(na.$$.fragment,e),g(sa.$$.fragment,e),g(aa.$$.fragment,e),g(ra.$$.fragment,e),g(ia.$$.fragment,e),g(da.$$.fragment,e),g(ua.$$.fragment,e),g(la.$$.fragment,e),g(pa.$$.fragment,e),g(ca.$$.fragment,e),g(ha.$$.fragment,e),g(fa.$$.fragment,e),g(_a.$$.fragment,e),g(ma.$$.fragment,e),g(ga.$$.fragment,e),g(va.$$.fragment,e),g(ya.$$.fragment,e),g(Ta.$$.fragment,e),g(wa.$$.fragment,e),Pp=!1},d(e){t($),e&&t(Bt),e&&t(x),v(q),e&&t(M),e&&t(C),e&&t(Mu),e&&t(qa),e&&t(ku),v(sn,e),e&&t(Au),e&&t(w),e&&t(Cu),e&&t(O),e&&t(zu),e&&t(S),e&&t(Eu),v(an,e),e&&t(Nu),e&&t(Lt),e&&t(Pu),e&&t(F),e&&t(Bu),e&&t(Sa),e&&t(Lu),e&&t(ee),v(rn),e&&t(ju),e&&t(k),v(dn),v(Wt),v(un),e&&t(Wu),e&&t(oe),v(pn),e&&t(Du),e&&t(ne),v(cn),e&&t(Hu),e&&t(se),v(hn),e&&t(Qu),e&&t(ae),v(fn),e&&t(Iu),e&&t(re),v(_n),e&&t(Vu),e&&t(ie),v(mn),e&&t(Ru),e&&t(de),v(gn),e&&t(Uu),e&&t(ue),v(vn),e&&t(Yu),e&&t(le),v(yn),e&&t(Ju),e&&t(pe),v(Tn),e&&t(Gu),e&&t(ce),v(wn),e&&t(Ku),e&&t(he),v(bn),e&&t(Xu),e&&t(fe),v($n),e&&t(Zu),e&&t(_e),v(xn),e&&t(el),e&&t(me),v(qn),e&&t(tl),e&&t(ge),v(On),e&&t(ol),e&&t(ve),v(Sn),e&&t(nl),e&&t(ye),v(Fn),e&&t(sl),e&&t(Te),v(Mn),e&&t(al),e&&t(we),v(kn),e&&t(rl),e&&t(be),v(An),e&&t(il),e&&t($e),v(Cn),e&&t(dl),e&&t(xe),v(zn),e&&t(ul),e&&t(qe),v(En),e&&t(ll),e&&t(Oe),v(Nn),e&&t(pl),e&&t(Se),v(Pn),e&&t(cl),e&&t(Fe),v(Bn),e&&t(hl),e&&t(Me),v(Ln),e&&t(fl),e&&t(ke),v(jn),e&&t(_l),e&&t(Ae),v(Wn),e&&t(ml),e&&t(Ce),v(Dn),e&&t(gl),e&&t(ze),v(Hn),e&&t(vl),e&&t(Ee),v(Qn),e&&t(yl),e&&t(Ne),v(In),e&&t(Tl),e&&t(Pe),v(Vn),e&&t(wl),e&&t(Be),v(Rn),e&&t(bl),e&&t(Le),v(Un),e&&t($l),e&&t(je),v(Yn),e&&t(xl),e&&t(We),v(Jn),e&&t(ql),e&&t(De),v(Gn),e&&t(Ol),e&&t(He),v(Kn),e&&t(Sl),e&&t(Qe),v(Xn),e&&t(Fl),e&&t(Ie),v(Zn),e&&t(Ml),e&&t(Ve),v(es),e&&t(kl),e&&t(Re),v(ts),e&&t(Al),e&&t(Ue),v(os),e&&t(Cl),e&&t(Ye),v(ns),e&&t(zl),e&&t(Je),v(ss),e&&t(El),e&&t(Ge),v(as),e&&t(Nl),e&&t(Ke),v(rs),e&&t(Pl),e&&t(Xe),v(is),e&&t(Bl),e&&t(Ze),v(ds),e&&t(Ll),e&&t(et),v(us),e&&t(jl),e&&t(tt),v(ls),e&&t(Wl),e&&t(ot),v(ps),e&&t(Dl),e&&t(nt),v(cs),e&&t(Hl),e&&t(st),v(hs),e&&t(Ql),e&&t(at),v(fs),e&&t(Il),e&&t(rt),v(_s),e&&t(Vl),e&&t(it),v(ms),e&&t(Rl),e&&t(dt),v(gs),e&&t(Ul),e&&t(ut),v(vs),e&&t(Yl),e&&t(lt),v(ys),e&&t(Jl),e&&t(pt),v(Ts),e&&t(Gl),e&&t(ct),v(ws),e&&t(Kl),e&&t(ht),v(bs),e&&t(Xl),e&&t(ft),v($s),e&&t(Zl),e&&t(_t),v(xs),e&&t(ep),e&&t(mt),v(qs),e&&t(tp),e&&t(gt),v(Os),e&&t(op),e&&t(vt),v(Ss),e&&t(np),e&&t(yt),v(Fs),e&&t(sp),e&&t(Tt),v(Ms),e&&t(ap),e&&t(wt),v(ks),e&&t(rp),e&&t(bt),v(As),e&&t(ip),e&&t(z),v(Cs),v(zs),e&&t(dp),e&&t($t),v(Es),e&&t(up),e&&t(E),v(Ns),v(Ps),e&&t(lp),e&&t(xt),v(Bs),e&&t(pp),e&&t(N),v(Ls),v(js),e&&t(cp),e&&t(qt),v(Ws),e&&t(hp),e&&t(P),v(Ds),v(Hs),e&&t(fp),e&&t(Ot),v(Qs),e&&t(_p),e&&t(B),v(Is),v(Vs),e&&t(mp),e&&t(St),v(Rs),e&&t(gp),e&&t(L),v(Us),v(Ys),e&&t(vp),e&&t(Ft),v(Js),e&&t(yp),e&&t(j),v(Gs),v(Ks),e&&t(Tp),e&&t(Mt),v(Xs),e&&t(wp),e&&t(W),v(Zs),v(ea),e&&t(bp),e&&t(kt),v(ta),e&&t($p),e&&t(D),v(oa),v(na),e&&t(xp),e&&t(At),v(sa),e&&t(qp),e&&t(H),v(aa),v(ra),e&&t(Op),e&&t(Ct),v(ia),e&&t(Sp),e&&t(Q),v(da),v(ua),e&&t(Fp),e&&t(zt),v(la),e&&t(Mp),e&&t(I),v(pa),v(ca),e&&t(kp),e&&t(Et),v(ha),e&&t(Ap),e&&t(V),v(fa),v(_a),e&&t(Cp),e&&t(Nt),v(ma),e&&t(zp),e&&t(R),v(ga),v(va),e&&t(Ep),e&&t(Pt),v(ya),e&&t(Np),e&&t(U),v(Ta),v(wa)}}}const W1={local:"model-outputs",sections:[{local:"transformers.utils.ModelOutput",title:"ModelOutput"},{local:"transformers.modeling_outputs.BaseModelOutput",title:"BaseModelOutput"},{local:"transformers.modeling_outputs.BaseModelOutputWithPooling",title:"BaseModelOutputWithPooling"},{local:"transformers.modeling_outputs.BaseModelOutputWithCrossAttentions",title:"BaseModelOutputWithCrossAttentions"},{local:"transformers.modeling_outputs.BaseModelOutputWithPoolingAndCrossAttentions",title:"BaseModelOutputWithPoolingAndCrossAttentions"},{local:"transformers.modeling_outputs.BaseModelOutputWithPast",title:"BaseModelOutputWithPast"},{local:"transformers.modeling_outputs.BaseModelOutputWithPastAndCrossAttentions",title:"BaseModelOutputWithPastAndCrossAttentions"},{local:"transformers.modeling_outputs.Seq2SeqModelOutput",title:"Seq2SeqModelOutput"},{local:"transformers.modeling_outputs.CausalLMOutput",title:"CausalLMOutput"},{local:"transformers.modeling_outputs.CausalLMOutputWithCrossAttentions",title:"CausalLMOutputWithCrossAttentions"},{local:"transformers.modeling_outputs.CausalLMOutputWithPast",title:"CausalLMOutputWithPast"},{local:"transformers.modeling_outputs.MaskedLMOutput",title:"MaskedLMOutput"},{local:"transformers.modeling_outputs.Seq2SeqLMOutput",title:"Seq2SeqLMOutput"},{local:"transformers.modeling_outputs.NextSentencePredictorOutput",title:"NextSentencePredictorOutput"},{local:"transformers.modeling_outputs.SequenceClassifierOutput",title:"SequenceClassifierOutput"},{local:"transformers.modeling_outputs.Seq2SeqSequenceClassifierOutput",title:"Seq2SeqSequenceClassifierOutput"},{local:"transformers.modeling_outputs.MultipleChoiceModelOutput",title:"MultipleChoiceModelOutput"},{local:"transformers.modeling_outputs.TokenClassifierOutput",title:"TokenClassifierOutput"},{local:"transformers.modeling_outputs.QuestionAnsweringModelOutput",title:"QuestionAnsweringModelOutput"},{local:"transformers.modeling_outputs.Seq2SeqQuestionAnsweringModelOutput",title:"Seq2SeqQuestionAnsweringModelOutput"},{local:"transformers.modeling_tf_outputs.TFBaseModelOutput",title:"TFBaseModelOutput"},{local:"transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling",title:"TFBaseModelOutputWithPooling"},{local:"transformers.modeling_tf_outputs.TFBaseModelOutputWithPoolingAndCrossAttentions",title:"TFBaseModelOutputWithPoolingAndCrossAttentions"},{local:"transformers.modeling_tf_outputs.TFBaseModelOutputWithPast",title:"TFBaseModelOutputWithPast"},{local:"transformers.modeling_tf_outputs.TFBaseModelOutputWithPastAndCrossAttentions",title:"TFBaseModelOutputWithPastAndCrossAttentions"},{local:"transformers.modeling_tf_outputs.TFSeq2SeqModelOutput",title:"TFSeq2SeqModelOutput"},{local:"transformers.modeling_tf_outputs.TFCausalLMOutput",title:"TFCausalLMOutput"},{local:"transformers.modeling_tf_outputs.TFCausalLMOutputWithCrossAttentions",title:"TFCausalLMOutputWithCrossAttentions"},{local:"transformers.modeling_tf_outputs.TFCausalLMOutputWithPast",title:"TFCausalLMOutputWithPast"},{local:"transformers.modeling_tf_outputs.TFMaskedLMOutput",title:"TFMaskedLMOutput"},{local:"transformers.modeling_tf_outputs.TFSeq2SeqLMOutput",title:"TFSeq2SeqLMOutput"},{local:"transformers.modeling_tf_outputs.TFNextSentencePredictorOutput",title:"TFNextSentencePredictorOutput"},{local:"transformers.modeling_tf_outputs.TFSequenceClassifierOutput",title:"TFSequenceClassifierOutput"},{local:"transformers.modeling_tf_outputs.TFSeq2SeqSequenceClassifierOutput",title:"TFSeq2SeqSequenceClassifierOutput"},{local:"transformers.modeling_tf_outputs.TFMultipleChoiceModelOutput",title:"TFMultipleChoiceModelOutput"},{local:"transformers.modeling_tf_outputs.TFTokenClassifierOutput",title:"TFTokenClassifierOutput"},{local:"transformers.modeling_tf_outputs.TFQuestionAnsweringModelOutput",title:"TFQuestionAnsweringModelOutput"},{local:"transformers.modeling_tf_outputs.TFSeq2SeqQuestionAnsweringModelOutput",title:"TFSeq2SeqQuestionAnsweringModelOutput"},{local:"transformers.modeling_flax_outputs.FlaxBaseModelOutput",title:"FlaxBaseModelOutput"},{local:"transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPast",title:"FlaxBaseModelOutputWithPast"},{local:"transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPooling",title:"FlaxBaseModelOutputWithPooling"},{local:"transformers.modeling_flax_outputs.FlaxBaseModelOutputWithPastAndCrossAttentions",title:"FlaxBaseModelOutputWithPastAndCrossAttentions"},{local:"transformers.modeling_flax_outputs.FlaxSeq2SeqModelOutput",title:"FlaxSeq2SeqModelOutput"},{local:"transformers.modeling_flax_outputs.FlaxCausalLMOutputWithCrossAttentions",title:"FlaxCausalLMOutputWithCrossAttentions"},{local:"transformers.modeling_flax_outputs.FlaxMaskedLMOutput",title:"FlaxMaskedLMOutput"},{local:"transformers.modeling_flax_outputs.FlaxSeq2SeqLMOutput",title:"FlaxSeq2SeqLMOutput"},{local:"transformers.modeling_flax_outputs.FlaxNextSentencePredictorOutput",title:"FlaxNextSentencePredictorOutput"},{local:"transformers.modeling_flax_outputs.FlaxSequenceClassifierOutput",title:"FlaxSequenceClassifierOutput"},{local:"transformers.modeling_flax_outputs.FlaxSeq2SeqSequenceClassifierOutput",title:"FlaxSeq2SeqSequenceClassifierOutput"},{local:"transformers.modeling_flax_outputs.FlaxMultipleChoiceModelOutput",title:"FlaxMultipleChoiceModelOutput"},{local:"transformers.modeling_flax_outputs.FlaxTokenClassifierOutput",title:"FlaxTokenClassifierOutput"},{local:"transformers.modeling_flax_outputs.FlaxQuestionAnsweringModelOutput",title:"FlaxQuestionAnsweringModelOutput"},{local:"transformers.modeling_flax_outputs.FlaxSeq2SeqQuestionAnsweringModelOutput",title:"FlaxSeq2SeqQuestionAnsweringModelOutput"}],title:"Model outputs"};function D1(Fu){return P1(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class U1 extends C1{constructor($){super();z1(this,$,D1,j1,E1,{})}}export{U1 as default,W1 as metadata};
