import{S as xd,i as yd,s as Ed,e as s,k as i,w as h,t as n,M as wd,c as a,d as r,m as p,a as o,x as u,h as l,b as c,F as t,g as f,y as _,q as g,o as v,B as b,v as Pd}from"../../chunks/vendor-6b77c823.js";import{T as Ei}from"../../chunks/Tip-39098574.js";import{D as E}from"../../chunks/Docstring-1088f2fb.js";import{C as As}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as Oe}from"../../chunks/IconCopyLink-7a11ce68.js";function qd(le){let m,S,$,w,N,q,Q,M;return{c(){m=s("p"),S=n(`This class method is simply calling the feature extractor
`),$=s("a"),w=n("from_pretrained()"),N=n(` and the tokenizer
`),q=s("code"),Q=n("from_pretrained"),M=n(` methods. Please refer to the docstrings of the
methods above for more information.`),this.h()},l(L){m=a(L,"P",{});var x=o(m);S=l(x,`This class method is simply calling the feature extractor
`),$=a(x,"A",{href:!0});var V=o($);w=l(V,"from_pretrained()"),V.forEach(r),N=l(x,` and the tokenizer
`),q=a(x,"CODE",{});var B=o(q);Q=l(B,"from_pretrained"),B.forEach(r),M=l(x,` methods. Please refer to the docstrings of the
methods above for more information.`),x.forEach(r),this.h()},h(){c($,"href","/docs/transformers/pr_16917/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.from_pretrained")},m(L,x){f(L,m,x),t(m,S),t(m,$),t($,w),t(m,N),t(m,q),t(q,Q),t(m,M)},d(L){L&&r(m)}}}function kd(le){let m,S;return{c(){m=s("p"),S=n("This API is experimental and may have some slight breaking changes in the next releases.")},l($){m=a($,"P",{});var w=o(m);S=l(w,"This API is experimental and may have some slight breaking changes in the next releases."),w.forEach(r)},m($,w){f($,m,w),t(m,S)},d($){$&&r(m)}}}function Id(le){let m,S,$,w,N,q,Q,M;return{c(){m=s("p"),S=n("This class method is simply calling "),$=s("a"),w=n("save_pretrained()"),N=n(` and
`),q=s("code"),Q=n("save_pretrained"),M=n(`. Please refer to the docstrings of the methods
above for more information.`),this.h()},l(L){m=a(L,"P",{});var x=o(m);S=l(x,"This class method is simply calling "),$=a(x,"A",{href:!0});var V=o($);w=l(V,"save_pretrained()"),V.forEach(r),N=l(x,` and
`),q=a(x,"CODE",{});var B=o(q);Q=l(B,"save_pretrained"),B.forEach(r),M=l(x,`. Please refer to the docstrings of the methods
above for more information.`),x.forEach(r),this.h()},h(){c($,"href","/docs/transformers/pr_16917/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained")},m(L,x){f(L,m,x),t(m,S),t(m,$),t($,w),t(m,N),t(m,q),t(q,Q),t(m,M)},d(L){L&&r(m)}}}function Sd(le){let m,S,$,w,N,q,Q,M,L,x,V,B,Ls,ie,K,Za,Ut,eo,to,Ft,ro,so,ao,_r,oo,Ds,Y,pe,gr,Qe,no,vr,lo,Ts,Gt,io,Ns,Rt,po,Ms,I,Ue,co,br,fo,mo,R,Fe,ho,$r,uo,_o,de,go,z,Ge,vo,Re,bo,xr,$o,xo,yo,yr,Eo,wo,He,Po,H,We,qo,Xe,ko,Er,Io,So,Ao,ce,Lo,W,Je,Do,Be,To,Ht,No,Mo,jo,fe,js,Z,me,wr,Ke,Vo,Pr,zo,Vs,T,Co,Wt,Oo,Qo,Xt,Uo,Fo,Jt,Go,Ro,Bt,Ho,Wo,zs,P,Ye,Xo,qr,Jo,Bo,he,Ze,Ko,et,Yo,Kt,Zo,en,tn,ue,tt,rn,kr,sn,an,_e,rt,on,Ir,nn,ln,ge,st,pn,at,dn,Yt,cn,fn,mn,ve,ot,hn,nt,un,Zt,_n,gn,vn,be,lt,bn,Sr,$n,Cs,U,it,xn,Ar,yn,En,$e,pt,wn,Lr,Pn,Os,F,dt,qn,Dr,kn,In,xe,ct,Sn,Tr,An,Qs,ee,ye,Nr,ft,Ln,Mr,Dn,Us,Ee,mt,Tn,Nn,ht,Mn,Fs,er,jn,Gs,tr,Vn,Rs,y,jr,Vr,zn,Cn,zr,Cr,On,Qn,Or,Qr,Un,Fn,Ur,Fr,Gn,Rn,Gr,Rr,Hn,Wn,Hr,Wr,Xn,Jn,Xr,Jr,Bn,Kn,Br,Kr,Yn,Zn,Yr,Zr,el,Hs,we,tl,rr,rl,sl,Ws,te,ut,al,sr,ol,es,nl,Xs,re,Pe,ts,_t,ll,rs,il,Js,se,gt,pl,dl,vt,ss,cl,fl,Bs,bt,ml,$t,hl,Ks,ar,ul,Ys,or,as,os,_l,Zs,nr,gl,ea,qe,vl,xt,bl,$l,ta,ae,ke,ns,yt,xl,ls,yl,ra,G,Et,El,wl,wt,Pl,ql,Pt,kl,Il,sa,lr,Sl,aa,oe,Ie,is,qt,Al,ps,Ll,oa,ir,Dl,na,Se,ds,cs,Tl,Nl,fs,ms,Ml,la,kt,jl,hs,Vl,ia,D,It,zl,us,Cl,Ol,Ae,St,Ql,_s,Ul,Fl,C,At,Gl,Lt,Rl,gs,Hl,Wl,Xl,vs,Jl,Bl,Dt,Kl,Le,Tt,Yl,bs,Zl,pa,De,ei,$s,ti,ri,da,j,Nt,si,xs,ai,oi,ys,ni,li,Mt,ca,Te,ii,Es,pi,di,fa,ne,Ne,ws,jt,ci,Ps,fi,ma,pr,mi,ha,Vt,ua,Me,hi,qs,ui,_i,_a,zt,ga,je,gi,Ct,vi,bi,va;return q=new Oe({}),Qe=new Oe({}),Ue=new E({props:{name:"class transformers.ProcessorMixin",anchor:"transformers.ProcessorMixin",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16917/src/transformers/processing_utils.py#L43"}}),Fe=new E({props:{name:"from_pretrained",anchor:"transformers.ProcessorMixin.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ProcessorMixin.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16917/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.
**kwargs &#x2014;
Additional keyword arguments passed along to both
<a href="/docs/transformers/pr_16917/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.from_pretrained">from_pretrained()</a> and
<code>from_pretrained</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"}],source:"https://github.com/huggingface/transformers/blob/pr_16917/src/transformers/processing_utils.py#L156"}}),de=new Ei({props:{$$slots:{default:[qd]},$$scope:{ctx:le}}}),Ge=new E({props:{name:"push_to_hub",anchor:"transformers.ProcessorMixin.push_to_hub",parameters:[{name:"repo_path_or_name",val:": typing.Optional[str] = None"},{name:"repo_url",val:": typing.Optional[str] = None"},{name:"use_temp_dir",val:": bool = False"},{name:"commit_message",val:": typing.Optional[str] = None"},{name:"organization",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = None"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"**model_card_kwargs",val:""}],parametersDescription:[{anchor:"transformers.ProcessorMixin.push_to_hub.repo_path_or_name",description:`<strong>repo_path_or_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Can either be a repository name for your processor in the Hub or a path to a local folder (in which case
the repository will have the name of that local folder). If not specified, will default to the name
given by <code>repo_url</code> and a local directory with that name will be created.`,name:"repo_path_or_name"},{anchor:"transformers.ProcessorMixin.push_to_hub.repo_url",description:`<strong>repo_url</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Specify this in case you want to push to an existing repository in the hub. If unspecified, a new
repository will be created in your namespace (unless you specify an <code>organization</code>) with <code>repo_name</code>.`,name:"repo_url"},{anchor:"transformers.ProcessorMixin.push_to_hub.use_temp_dir",description:`<strong>use_temp_dir</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to clone the distant repo in a temporary directory or in <code>repo_path_or_name</code> inside the
current working directory. This will slow things down if you are making changes in an existing repo
since you will need to clone the repo before every push.`,name:"use_temp_dir"},{anchor:"transformers.ProcessorMixin.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Message to commit while pushing. Will default to <code>&quot;add processor&quot;</code>.`,name:"commit_message"},{anchor:"transformers.ProcessorMixin.push_to_hub.organization",description:`<strong>organization</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Organization in which you want to push your processor (you must be a member of this organization).`,name:"organization"},{anchor:"transformers.ProcessorMixin.push_to_hub.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not the repository created should be private (requires a paying subscription).`,name:"private"},{anchor:"transformers.ProcessorMixin.push_to_hub.use_auth_token",description:`<strong>use_auth_token</strong> (<code>bool</code> or <code>str</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>). Will default to <code>True</code> if
<code>repo_url</code> is not specified.`,name:"use_auth_token"}],source:"https://github.com/huggingface/transformers/blob/pr_16917/src/transformers/utils/hub.py#L846",returnDescription:`
<p>The url of the commit of your processor in the given repository.</p>
`,returnType:`
<p><code>str</code></p>
`}}),He=new As({props:{code:`from transformers import AutoProcessor

processor = AutoProcessor.from_pretrained("bert-base-cased")

# Push the processor to your namespace with the name "my-finetuned-bert" and have a local clone in the
# *my-finetuned-bert* folder.
processor.push_to_hub("my-finetuned-bert")

# Push the processor to your namespace with the name "my-finetuned-bert" with no local clone.
processor.push_to_hub("my-finetuned-bert", use_temp_dir=True)

# Push the processor to an organization with the name "my-finetuned-bert" and have a local clone in the
# *my-finetuned-bert* folder.
processor.push_to_hub("my-finetuned-bert", organization="huggingface")

# Make a change to an existing repo that has been cloned locally in *my-finetuned-bert*.
processor.push_to_hub("my-finetuned-bert", repo_url="https://huggingface.co/sgugger/my-finetuned-bert")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-comment"># Push the processor to your namespace with the name &quot;my-finetuned-bert&quot; and have a local clone in the</span>
<span class="hljs-comment"># *my-finetuned-bert* folder.</span>
processor.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>)

<span class="hljs-comment"># Push the processor to your namespace with the name &quot;my-finetuned-bert&quot; with no local clone.</span>
processor.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, use_temp_dir=<span class="hljs-literal">True</span>)

<span class="hljs-comment"># Push the processor to an organization with the name &quot;my-finetuned-bert&quot; and have a local clone in the</span>
<span class="hljs-comment"># *my-finetuned-bert* folder.</span>
processor.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, organization=<span class="hljs-string">&quot;huggingface&quot;</span>)

<span class="hljs-comment"># Make a change to an existing repo that has been cloned locally in *my-finetuned-bert*.</span>
processor.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, repo_url=<span class="hljs-string">&quot;https://huggingface.co/sgugger/my-finetuned-bert&quot;</span>)`}}),We=new E({props:{name:"register_for_auto_class",anchor:"transformers.ProcessorMixin.register_for_auto_class",parameters:[{name:"auto_class",val:" = 'AutoProcessor'"}],parametersDescription:[{anchor:"transformers.ProcessorMixin.register_for_auto_class.auto_class",description:`<strong>auto_class</strong> (<code>str</code> or <code>type</code>, <em>optional</em>, defaults to <code>&quot;AutoProcessor&quot;</code>) &#x2014;
The auto class to register this new feature extractor with.`,name:"auto_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16917/src/transformers/processing_utils.py#L189"}}),ce=new Ei({props:{warning:!0,$$slots:{default:[kd]},$$scope:{ctx:le}}}),Je=new E({props:{name:"save_pretrained",anchor:"transformers.ProcessorMixin.save_pretrained",parameters:[{name:"save_directory",val:""},{name:"push_to_hub",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ProcessorMixin.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Directory where the feature extractor JSON file and the tokenizer files will be saved (directory will
be created if it does not exist).`,name:"save_directory"},{anchor:"transformers.ProcessorMixin.save_pretrained.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to push your processor to the Hugging Face model hub after saving it.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>Using <code>push_to_hub=True</code> will synchronize the repository you are pushing to with <code>save_directory</code>,
which requires <code>save_directory</code> to be a local clone of the repo you are pushing to if it&#x2019;s an existing
folder. Pass along <code>temp_dir=True</code> to use a temporary directory instead.</p>

					</div>
<p>kwargs &#x2014;
Additional key word arguments passed along to the <a href="/docs/transformers/pr_16917/en/main_classes/model#transformers.utils.PushToHubMixin.push_to_hub">push_to_hub()</a> method.`,name:"push_to_hub"}],source:"https://github.com/huggingface/transformers/blob/pr_16917/src/transformers/processing_utils.py#L94"}}),fe=new Ei({props:{$$slots:{default:[Id]},$$scope:{ctx:le}}}),Ke=new Oe({}),Ye=new E({props:{name:"class transformers.DataProcessor",anchor:"transformers.DataProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16917/src/transformers/data/processors/utils.py#L80"}}),Ze=new E({props:{name:"get_dev_examples",anchor:"transformers.DataProcessor.get_dev_examples",parameters:[{name:"data_dir",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16917/src/transformers/data/processors/utils.py#L97"}}),tt=new E({props:{name:"get_example_from_tensor_dict",anchor:"transformers.DataProcessor.get_example_from_tensor_dict",parameters:[{name:"tensor_dict",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16917/src/transformers/data/processors/utils.py#L83"}}),rt=new E({props:{name:"get_labels",anchor:"transformers.DataProcessor.get_labels",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16917/src/transformers/data/processors/utils.py#L105"}}),st=new E({props:{name:"get_test_examples",anchor:"transformers.DataProcessor.get_test_examples",parameters:[{name:"data_dir",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16917/src/transformers/data/processors/utils.py#L101"}}),ot=new E({props:{name:"get_train_examples",anchor:"transformers.DataProcessor.get_train_examples",parameters:[{name:"data_dir",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16917/src/transformers/data/processors/utils.py#L93"}}),lt=new E({props:{name:"tfds_map",anchor:"transformers.DataProcessor.tfds_map",parameters:[{name:"example",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16917/src/transformers/data/processors/utils.py#L109"}}),it=new E({props:{name:"class transformers.InputExample",anchor:"transformers.InputExample",parameters:[{name:"guid",val:": str"},{name:"text_a",val:": str"},{name:"text_b",val:": typing.Optional[str] = None"},{name:"label",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16917/src/transformers/data/processors/utils.py#L30"}}),pt=new E({props:{name:"to_json_string",anchor:"transformers.InputExample.to_json_string",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16917/src/transformers/data/processors/utils.py#L49"}}),dt=new E({props:{name:"class transformers.InputFeatures",anchor:"transformers.InputFeatures",parameters:[{name:"input_ids",val:": typing.List[int]"},{name:"attention_mask",val:": typing.Optional[typing.List[int]] = None"},{name:"token_type_ids",val:": typing.Optional[typing.List[int]] = None"},{name:"label",val:": typing.Union[int, float, NoneType] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16917/src/transformers/data/processors/utils.py#L55"}}),ct=new E({props:{name:"to_json_string",anchor:"transformers.InputFeatures.to_json_string",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16917/src/transformers/data/processors/utils.py#L75"}}),ft=new Oe({}),ut=new E({props:{name:"transformers.glue_convert_examples_to_features",anchor:"transformers.glue_convert_examples_to_features",parameters:[{name:"examples",val:": typing.Union[typing.List[transformers.data.processors.utils.InputExample], ForwardRef('tf.data.Dataset')]"},{name:"tokenizer",val:": PreTrainedTokenizer"},{name:"max_length",val:": typing.Optional[int] = None"},{name:"task",val:" = None"},{name:"label_list",val:" = None"},{name:"output_mode",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16917/src/transformers/data/processors/glue.py#L41",returnDescription:`
<p>If the <code>examples</code> input is a <code>tf.data.Dataset</code>, will return a <code>tf.data.Dataset</code> containing the task-specific
features. If the input is a list of <code>InputExamples</code>, will return a list of task-specific <code>InputFeatures</code> which
can be fed to the model.</p>
`}}),_t=new Oe({}),yt=new Oe({}),qt=new Oe({}),It=new E({props:{name:"class transformers.data.processors.squad.SquadProcessor",anchor:"transformers.data.processors.squad.SquadProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16917/src/transformers/data/processors/squad.py#L542"}}),St=new E({props:{name:"get_dev_examples",anchor:"transformers.data.processors.squad.SquadProcessor.get_dev_examples",parameters:[{name:"data_dir",val:""},{name:"filename",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16917/src/transformers/data/processors/squad.py#L630"}}),At=new E({props:{name:"get_examples_from_dataset",anchor:"transformers.data.processors.squad.SquadProcessor.get_examples_from_dataset",parameters:[{name:"dataset",val:""},{name:"evaluate",val:" = False"}],source:"https://github.com/huggingface/transformers/blob/pr_16917/src/transformers/data/processors/squad.py#L575",returnDescription:`
<p>List of SquadExample</p>
`}}),Dt=new As({props:{code:`import tensorflow_datasets as tfds

dataset = tfds.load("squad")

training_examples = get_examples_from_dataset(dataset, evaluate=False)
evaluation_examples = get_examples_from_dataset(dataset, evaluate=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow_datasets <span class="hljs-keyword">as</span> tfds

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = tfds.load(<span class="hljs-string">&quot;squad&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>training_examples = get_examples_from_dataset(dataset, evaluate=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>evaluation_examples = get_examples_from_dataset(dataset, evaluate=<span class="hljs-literal">True</span>)`}}),Tt=new E({props:{name:"get_train_examples",anchor:"transformers.data.processors.squad.SquadProcessor.get_train_examples",parameters:[{name:"data_dir",val:""},{name:"filename",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16917/src/transformers/data/processors/squad.py#L608"}}),Nt=new E({props:{name:"transformers.squad_convert_examples_to_features",anchor:"transformers.squad_convert_examples_to_features",parameters:[{name:"examples",val:""},{name:"tokenizer",val:""},{name:"max_seq_length",val:""},{name:"doc_stride",val:""},{name:"max_query_length",val:""},{name:"is_training",val:""},{name:"padding_strategy",val:" = 'max_length'"},{name:"return_dataset",val:" = False"},{name:"threads",val:" = 1"},{name:"tqdm_enabled",val:" = True"}],source:"https://github.com/huggingface/transformers/blob/pr_16917/src/transformers/data/processors/squad.py#L317",returnDescription:`
<p>list of <code>SquadFeatures</code></p>
`}}),Mt=new As({props:{code:`processor = SquadV2Processor()
examples = processor.get_dev_examples(data_dir)

features = squad_convert_examples_to_features(
    examples=examples,
    tokenizer=tokenizer,
    max_seq_length=args.max_seq_length,
    doc_stride=args.doc_stride,
    max_query_length=args.max_query_length,
    is_training=not evaluate,
)`,highlighted:`processor = SquadV2Processor()
examples = processor.get_dev_examples(data_dir)

features = squad_convert_examples_to_features(
    examples=examples,
    tokenizer=tokenizer,
    max_seq_length=args.max_seq_length,
    doc_stride=args.doc_stride,
    max_query_length=args.max_query_length,
    is_training=<span class="hljs-keyword">not</span> evaluate,
)`}}),jt=new Oe({}),Vt=new As({props:{code:`# Loading a V2 processor
processor = SquadV2Processor()
examples = processor.get_dev_examples(squad_v2_data_dir)

# Loading a V1 processor
processor = SquadV1Processor()
examples = processor.get_dev_examples(squad_v1_data_dir)

features = squad_convert_examples_to_features(
    examples=examples,
    tokenizer=tokenizer,
    max_seq_length=max_seq_length,
    doc_stride=args.doc_stride,
    max_query_length=max_query_length,
    is_training=not evaluate,
)`,highlighted:`<span class="hljs-comment"># Loading a V2 processor</span>
processor = SquadV2Processor()
examples = processor.get_dev_examples(squad_v2_data_dir)

<span class="hljs-comment"># Loading a V1 processor</span>
processor = SquadV1Processor()
examples = processor.get_dev_examples(squad_v1_data_dir)

features = squad_convert_examples_to_features(
    examples=examples,
    tokenizer=tokenizer,
    max_seq_length=max_seq_length,
    doc_stride=args.doc_stride,
    max_query_length=max_query_length,
    is_training=<span class="hljs-keyword">not</span> evaluate,
)`}}),zt=new As({props:{code:`# tensorflow_datasets only handle Squad V1.
tfds_examples = tfds.load("squad")
examples = SquadV1Processor().get_examples_from_dataset(tfds_examples, evaluate=evaluate)

features = squad_convert_examples_to_features(
    examples=examples,
    tokenizer=tokenizer,
    max_seq_length=max_seq_length,
    doc_stride=args.doc_stride,
    max_query_length=max_query_length,
    is_training=not evaluate,
)`,highlighted:`<span class="hljs-comment"># tensorflow_datasets only handle Squad V1.</span>
tfds_examples = tfds.load(<span class="hljs-string">&quot;squad&quot;</span>)
examples = SquadV1Processor().get_examples_from_dataset(tfds_examples, evaluate=evaluate)

features = squad_convert_examples_to_features(
    examples=examples,
    tokenizer=tokenizer,
    max_seq_length=max_seq_length,
    doc_stride=args.doc_stride,
    max_query_length=max_query_length,
    is_training=<span class="hljs-keyword">not</span> evaluate,
)`}}),{c(){m=s("meta"),S=i(),$=s("h1"),w=s("a"),N=s("span"),h(q.$$.fragment),Q=i(),M=s("span"),L=n("Processors"),x=i(),V=s("p"),B=n("Processors can mean two different things in the Transformers library:"),Ls=i(),ie=s("ul"),K=s("li"),Za=n("the objects that pre-process inputs for multi-modal models such as "),Ut=s("a"),eo=n("Wav2Vec2"),to=n(` (speech and text)
or `),Ft=s("a"),ro=n("CLIP"),so=n(" (text and vision)"),ao=i(),_r=s("li"),oo=n("deprecated objects that were used in older versions of the library to preprocess data for GLUE or SQUAD."),Ds=i(),Y=s("h2"),pe=s("a"),gr=s("span"),h(Qe.$$.fragment),no=i(),vr=s("span"),lo=n("Multi-modal processors"),Ts=i(),Gt=s("p"),io=n(`Any multi-modal model will require an object to encode or decode the data that groups several modalities (among text,
vision and audio). This is handled by objects called processors, which group tokenizers (for the text modality) and
feature extractors (for vision and audio).`),Ns=i(),Rt=s("p"),po=n("Those processors inherit from the following base class that implements the saving and loading functionality:"),Ms=i(),I=s("div"),h(Ue.$$.fragment),co=i(),br=s("p"),fo=n("This is a mixin used to provide saving/loading functionality for all processor classes."),mo=i(),R=s("div"),h(Fe.$$.fragment),ho=i(),$r=s("p"),uo=n("Instantiate a processor associated with a pretrained model."),_o=i(),h(de.$$.fragment),go=i(),z=s("div"),h(Ge.$$.fragment),vo=i(),Re=s("p"),bo=n(`Upload the processor files to the \u{1F917} Model Hub while synchronizing a local clone of the repo in
`),xr=s("code"),$o=n("repo_path_or_name"),xo=n("."),yo=i(),yr=s("p"),Eo=n("Examples:"),wo=i(),h(He.$$.fragment),Po=i(),H=s("div"),h(We.$$.fragment),qo=i(),Xe=s("p"),ko=n(`Register this class with a given auto class. This should only be used for custom feature extractors as the ones
in the library are already mapped with `),Er=s("code"),Io=n("AutoProcessor"),So=n("."),Ao=i(),h(ce.$$.fragment),Lo=i(),W=s("div"),h(Je.$$.fragment),Do=i(),Be=s("p"),To=n(`Saves the attributes of this processor (feature extractor, tokenizer\u2026) in the specified directory so that it
can be reloaded using the `),Ht=s("a"),No=n("from_pretrained()"),Mo=n(" method."),jo=i(),h(fe.$$.fragment),js=i(),Z=s("h2"),me=s("a"),wr=s("span"),h(Ke.$$.fragment),Vo=i(),Pr=s("span"),zo=n("Deprecated processors"),Vs=i(),T=s("p"),Co=n(`All processors follow the same architecture which is that of the
`),Wt=s("a"),Oo=n("DataProcessor"),Qo=n(`. The processor returns a list of
`),Xt=s("a"),Uo=n("InputExample"),Fo=n(`. These
`),Jt=s("a"),Go=n("InputExample"),Ro=n(` can be converted to
`),Bt=s("a"),Ho=n("InputFeatures"),Wo=n(" in order to be fed to the model."),zs=i(),P=s("div"),h(Ye.$$.fragment),Xo=i(),qr=s("p"),Jo=n("Base class for data converters for sequence classification data sets."),Bo=i(),he=s("div"),h(Ze.$$.fragment),Ko=i(),et=s("p"),Yo=n("Gets a collection of "),Kt=s("a"),Zo=n("InputExample"),en=n(" for the dev set."),tn=i(),ue=s("div"),h(tt.$$.fragment),rn=i(),kr=s("p"),sn=n("Gets an example from a dict with tensorflow tensors."),an=i(),_e=s("div"),h(rt.$$.fragment),on=i(),Ir=s("p"),nn=n("Gets the list of labels for this data set."),ln=i(),ge=s("div"),h(st.$$.fragment),pn=i(),at=s("p"),dn=n("Gets a collection of "),Yt=s("a"),cn=n("InputExample"),fn=n(" for the test set."),mn=i(),ve=s("div"),h(ot.$$.fragment),hn=i(),nt=s("p"),un=n("Gets a collection of "),Zt=s("a"),_n=n("InputExample"),gn=n(" for the train set."),vn=i(),be=s("div"),h(lt.$$.fragment),bn=i(),Sr=s("p"),$n=n(`Some tensorflow_datasets datasets are not formatted the same way the GLUE datasets are. This method converts
examples to the correct format.`),Cs=i(),U=s("div"),h(it.$$.fragment),xn=i(),Ar=s("p"),yn=n("A single training/test example for simple sequence classification."),En=i(),$e=s("div"),h(pt.$$.fragment),wn=i(),Lr=s("p"),Pn=n("Serializes this instance to a JSON string."),Os=i(),F=s("div"),h(dt.$$.fragment),qn=i(),Dr=s("p"),kn=n("A single set of features of data. Property names are the same names as the corresponding inputs to a model."),In=i(),xe=s("div"),h(ct.$$.fragment),Sn=i(),Tr=s("p"),An=n("Serializes this instance to a JSON string."),Qs=i(),ee=s("h2"),ye=s("a"),Nr=s("span"),h(ft.$$.fragment),Ln=i(),Mr=s("span"),Dn=n("GLUE"),Us=i(),Ee=s("p"),mt=s("a"),Tn=n("General Language Understanding Evaluation (GLUE)"),Nn=n(` is a benchmark that evaluates the
performance of models across a diverse set of existing NLU tasks. It was released together with the paper `),ht=s("a"),Mn=n(`GLUE: A
multi-task benchmark and analysis platform for natural language understanding`),Fs=i(),er=s("p"),jn=n(`This library hosts a total of 10 processors for the following tasks: MRPC, MNLI, MNLI (mismatched), CoLA, SST2, STSB,
QQP, QNLI, RTE and WNLI.`),Gs=i(),tr=s("p"),Vn=n("Those processors are:"),Rs=i(),y=s("ul"),jr=s("li"),Vr=s("code"),zn=n("MrpcProcessor"),Cn=i(),zr=s("li"),Cr=s("code"),On=n("MnliProcessor"),Qn=i(),Or=s("li"),Qr=s("code"),Un=n("MnliMismatchedProcessor"),Fn=i(),Ur=s("li"),Fr=s("code"),Gn=n("Sst2Processor"),Rn=i(),Gr=s("li"),Rr=s("code"),Hn=n("StsbProcessor"),Wn=i(),Hr=s("li"),Wr=s("code"),Xn=n("QqpProcessor"),Jn=i(),Xr=s("li"),Jr=s("code"),Bn=n("QnliProcessor"),Kn=i(),Br=s("li"),Kr=s("code"),Yn=n("RteProcessor"),Zn=i(),Yr=s("li"),Zr=s("code"),el=n("WnliProcessor"),Hs=i(),we=s("p"),tl=n(`Additionally, the following method can be used to load values from a data file and convert them to a list of
`),rr=s("a"),rl=n("InputExample"),sl=n("."),Ws=i(),te=s("div"),h(ut.$$.fragment),al=i(),sr=s("p"),ol=n("Loads a data file into a list of "),es=s("code"),nl=n("InputFeatures"),Xs=i(),re=s("h2"),Pe=s("a"),ts=s("span"),h(_t.$$.fragment),ll=i(),rs=s("span"),il=n("XNLI"),Js=i(),se=s("p"),gt=s("a"),pl=n("The Cross-Lingual NLI Corpus (XNLI)"),dl=n(` is a benchmark that evaluates the
quality of cross-lingual text representations. XNLI is crowd-sourced dataset based on `),vt=s("a"),ss=s("em"),cl=n("MultiNLI"),fl=n(`: pairs of text are labeled with textual entailment annotations for 15
different languages (including both high-resource language such as English and low-resource languages such as Swahili).`),Bs=i(),bt=s("p"),ml=n("It was released together with the paper "),$t=s("a"),hl=n("XNLI: Evaluating Cross-lingual Sentence Representations"),Ks=i(),ar=s("p"),ul=n("This library hosts the processor to load the XNLI data:"),Ys=i(),or=s("ul"),as=s("li"),os=s("code"),_l=n("XnliProcessor"),Zs=i(),nr=s("p"),gl=n("Please note that since the gold labels are available on the test set, evaluation is performed on the test set."),ea=i(),qe=s("p"),vl=n("An example using these processors is given in the "),xt=s("a"),bl=n("run_xnli.py"),$l=n(" script."),ta=i(),ae=s("h2"),ke=s("a"),ns=s("span"),h(yt.$$.fragment),xl=i(),ls=s("span"),yl=n("SQuAD"),ra=i(),G=s("p"),Et=s("a"),El=n("The Stanford Question Answering Dataset (SQuAD)"),wl=n(` is a benchmark that
evaluates the performance of models on question answering. Two versions are available, v1.1 and v2.0. The first version
(v1.1) was released together with the paper `),wt=s("a"),Pl=n("SQuAD: 100,000+ Questions for Machine Comprehension of Text"),ql=n(". The second version (v2.0) was released alongside the paper "),Pt=s("a"),kl=n(`Know What You Don\u2019t
Know: Unanswerable Questions for SQuAD`),Il=n("."),sa=i(),lr=s("p"),Sl=n("This library hosts a processor for each of the two versions:"),aa=i(),oe=s("h3"),Ie=s("a"),is=s("span"),h(qt.$$.fragment),Al=i(),ps=s("span"),Ll=n("Processors"),oa=i(),ir=s("p"),Dl=n("Those processors are:"),na=i(),Se=s("ul"),ds=s("li"),cs=s("code"),Tl=n("SquadV1Processor"),Nl=i(),fs=s("li"),ms=s("code"),Ml=n("SquadV2Processor"),la=i(),kt=s("p"),jl=n("They both inherit from the abstract class "),hs=s("code"),Vl=n("SquadProcessor"),ia=i(),D=s("div"),h(It.$$.fragment),zl=i(),us=s("p"),Cl=n(`Processor for the SQuAD data set. overridden by SquadV1Processor and SquadV2Processor, used by the version 1.1 and
version 2.0 of SQuAD, respectively.`),Ol=i(),Ae=s("div"),h(St.$$.fragment),Ql=i(),_s=s("p"),Ul=n("Returns the evaluation example from the data directory."),Fl=i(),C=s("div"),h(At.$$.fragment),Gl=i(),Lt=s("p"),Rl=n("Creates a list of "),gs=s("code"),Hl=n("SquadExample"),Wl=n(" using a TFDS dataset."),Xl=i(),vs=s("p"),Jl=n("Examples:"),Bl=i(),h(Dt.$$.fragment),Kl=i(),Le=s("div"),h(Tt.$$.fragment),Yl=i(),bs=s("p"),Zl=n("Returns the training examples from the data directory."),pa=i(),De=s("p"),ei=n(`Additionally, the following method can be used to convert SQuAD examples into
`),$s=s("code"),ti=n("SquadFeatures"),ri=n(" that can be used as model inputs."),da=i(),j=s("div"),h(Nt.$$.fragment),si=i(),xs=s("p"),ai=n(`Converts a list of examples into a list of features that can be directly given as input to a model. It is
model-dependant and takes advantage of many of the tokenizer\u2019s features to create the model\u2019s inputs.`),oi=i(),ys=s("p"),ni=n("Example:"),li=i(),h(Mt.$$.fragment),ca=i(),Te=s("p"),ii=n(`These processors as well as the aforementionned method can be used with files containing the data as well as with the
`),Es=s("em"),pi=n("tensorflow_datasets"),di=n(" package. Examples are given below."),fa=i(),ne=s("h3"),Ne=s("a"),ws=s("span"),h(jt.$$.fragment),ci=i(),Ps=s("span"),fi=n("Example usage"),ma=i(),pr=s("p"),mi=n("Here is an example using the processors as well as the conversion method using data files:"),ha=i(),h(Vt.$$.fragment),ua=i(),Me=s("p"),hi=n("Using "),qs=s("em"),ui=n("tensorflow_datasets"),_i=n(" is as easy as using a data file:"),_a=i(),h(zt.$$.fragment),ga=i(),je=s("p"),gi=n("Another example using these processors is given in the "),Ct=s("a"),vi=n("run_squad.py"),bi=n(" script."),this.h()},l(e){const d=wd('[data-svelte="svelte-1phssyn"]',document.head);m=a(d,"META",{name:!0,content:!0}),d.forEach(r),S=p(e),$=a(e,"H1",{class:!0});var Ot=o($);w=a(Ot,"A",{id:!0,class:!0,href:!0});var ks=o(w);N=a(ks,"SPAN",{});var Is=o(N);u(q.$$.fragment,Is),Is.forEach(r),ks.forEach(r),Q=p(Ot),M=a(Ot,"SPAN",{});var wi=o(M);L=l(wi,"Processors"),wi.forEach(r),Ot.forEach(r),x=p(e),V=a(e,"P",{});var Pi=o(V);B=l(Pi,"Processors can mean two different things in the Transformers library:"),Pi.forEach(r),Ls=p(e),ie=a(e,"UL",{});var ba=o(ie);K=a(ba,"LI",{});var dr=o(K);Za=l(dr,"the objects that pre-process inputs for multi-modal models such as "),Ut=a(dr,"A",{href:!0});var qi=o(Ut);eo=l(qi,"Wav2Vec2"),qi.forEach(r),to=l(dr,` (speech and text)
or `),Ft=a(dr,"A",{href:!0});var ki=o(Ft);ro=l(ki,"CLIP"),ki.forEach(r),so=l(dr," (text and vision)"),dr.forEach(r),ao=p(ba),_r=a(ba,"LI",{});var Ii=o(_r);oo=l(Ii,"deprecated objects that were used in older versions of the library to preprocess data for GLUE or SQUAD."),Ii.forEach(r),ba.forEach(r),Ds=p(e),Y=a(e,"H2",{class:!0});var $a=o(Y);pe=a($a,"A",{id:!0,class:!0,href:!0});var Si=o(pe);gr=a(Si,"SPAN",{});var Ai=o(gr);u(Qe.$$.fragment,Ai),Ai.forEach(r),Si.forEach(r),no=p($a),vr=a($a,"SPAN",{});var Li=o(vr);lo=l(Li,"Multi-modal processors"),Li.forEach(r),$a.forEach(r),Ts=p(e),Gt=a(e,"P",{});var Di=o(Gt);io=l(Di,`Any multi-modal model will require an object to encode or decode the data that groups several modalities (among text,
vision and audio). This is handled by objects called processors, which group tokenizers (for the text modality) and
feature extractors (for vision and audio).`),Di.forEach(r),Ns=p(e),Rt=a(e,"P",{});var Ti=o(Rt);po=l(Ti,"Those processors inherit from the following base class that implements the saving and loading functionality:"),Ti.forEach(r),Ms=p(e),I=a(e,"DIV",{class:!0});var O=o(I);u(Ue.$$.fragment,O),co=p(O),br=a(O,"P",{});var Ni=o(br);fo=l(Ni,"This is a mixin used to provide saving/loading functionality for all processor classes."),Ni.forEach(r),mo=p(O),R=a(O,"DIV",{class:!0});var cr=o(R);u(Fe.$$.fragment,cr),ho=p(cr),$r=a(cr,"P",{});var Mi=o($r);uo=l(Mi,"Instantiate a processor associated with a pretrained model."),Mi.forEach(r),_o=p(cr),u(de.$$.fragment,cr),cr.forEach(r),go=p(O),z=a(O,"DIV",{class:!0});var Ve=o(z);u(Ge.$$.fragment,Ve),vo=p(Ve),Re=a(Ve,"P",{});var xa=o(Re);bo=l(xa,`Upload the processor files to the \u{1F917} Model Hub while synchronizing a local clone of the repo in
`),xr=a(xa,"CODE",{});var ji=o(xr);$o=l(ji,"repo_path_or_name"),ji.forEach(r),xo=l(xa,"."),xa.forEach(r),yo=p(Ve),yr=a(Ve,"P",{});var Vi=o(yr);Eo=l(Vi,"Examples:"),Vi.forEach(r),wo=p(Ve),u(He.$$.fragment,Ve),Ve.forEach(r),Po=p(O),H=a(O,"DIV",{class:!0});var fr=o(H);u(We.$$.fragment,fr),qo=p(fr),Xe=a(fr,"P",{});var ya=o(Xe);ko=l(ya,`Register this class with a given auto class. This should only be used for custom feature extractors as the ones
in the library are already mapped with `),Er=a(ya,"CODE",{});var zi=o(Er);Io=l(zi,"AutoProcessor"),zi.forEach(r),So=l(ya,"."),ya.forEach(r),Ao=p(fr),u(ce.$$.fragment,fr),fr.forEach(r),Lo=p(O),W=a(O,"DIV",{class:!0});var mr=o(W);u(Je.$$.fragment,mr),Do=p(mr),Be=a(mr,"P",{});var Ea=o(Be);To=l(Ea,`Saves the attributes of this processor (feature extractor, tokenizer\u2026) in the specified directory so that it
can be reloaded using the `),Ht=a(Ea,"A",{href:!0});var Ci=o(Ht);No=l(Ci,"from_pretrained()"),Ci.forEach(r),Mo=l(Ea," method."),Ea.forEach(r),jo=p(mr),u(fe.$$.fragment,mr),mr.forEach(r),O.forEach(r),js=p(e),Z=a(e,"H2",{class:!0});var wa=o(Z);me=a(wa,"A",{id:!0,class:!0,href:!0});var Oi=o(me);wr=a(Oi,"SPAN",{});var Qi=o(wr);u(Ke.$$.fragment,Qi),Qi.forEach(r),Oi.forEach(r),Vo=p(wa),Pr=a(wa,"SPAN",{});var Ui=o(Pr);zo=l(Ui,"Deprecated processors"),Ui.forEach(r),wa.forEach(r),Vs=p(e),T=a(e,"P",{});var X=o(T);Co=l(X,`All processors follow the same architecture which is that of the
`),Wt=a(X,"A",{href:!0});var Fi=o(Wt);Oo=l(Fi,"DataProcessor"),Fi.forEach(r),Qo=l(X,`. The processor returns a list of
`),Xt=a(X,"A",{href:!0});var Gi=o(Xt);Uo=l(Gi,"InputExample"),Gi.forEach(r),Fo=l(X,`. These
`),Jt=a(X,"A",{href:!0});var Ri=o(Jt);Go=l(Ri,"InputExample"),Ri.forEach(r),Ro=l(X,` can be converted to
`),Bt=a(X,"A",{href:!0});var Hi=o(Bt);Ho=l(Hi,"InputFeatures"),Hi.forEach(r),Wo=l(X," in order to be fed to the model."),X.forEach(r),zs=p(e),P=a(e,"DIV",{class:!0});var A=o(P);u(Ye.$$.fragment,A),Xo=p(A),qr=a(A,"P",{});var Wi=o(qr);Jo=l(Wi,"Base class for data converters for sequence classification data sets."),Wi.forEach(r),Bo=p(A),he=a(A,"DIV",{class:!0});var Pa=o(he);u(Ze.$$.fragment,Pa),Ko=p(Pa),et=a(Pa,"P",{});var qa=o(et);Yo=l(qa,"Gets a collection of "),Kt=a(qa,"A",{href:!0});var Xi=o(Kt);Zo=l(Xi,"InputExample"),Xi.forEach(r),en=l(qa," for the dev set."),qa.forEach(r),Pa.forEach(r),tn=p(A),ue=a(A,"DIV",{class:!0});var ka=o(ue);u(tt.$$.fragment,ka),rn=p(ka),kr=a(ka,"P",{});var Ji=o(kr);sn=l(Ji,"Gets an example from a dict with tensorflow tensors."),Ji.forEach(r),ka.forEach(r),an=p(A),_e=a(A,"DIV",{class:!0});var Ia=o(_e);u(rt.$$.fragment,Ia),on=p(Ia),Ir=a(Ia,"P",{});var Bi=o(Ir);nn=l(Bi,"Gets the list of labels for this data set."),Bi.forEach(r),Ia.forEach(r),ln=p(A),ge=a(A,"DIV",{class:!0});var Sa=o(ge);u(st.$$.fragment,Sa),pn=p(Sa),at=a(Sa,"P",{});var Aa=o(at);dn=l(Aa,"Gets a collection of "),Yt=a(Aa,"A",{href:!0});var Ki=o(Yt);cn=l(Ki,"InputExample"),Ki.forEach(r),fn=l(Aa," for the test set."),Aa.forEach(r),Sa.forEach(r),mn=p(A),ve=a(A,"DIV",{class:!0});var La=o(ve);u(ot.$$.fragment,La),hn=p(La),nt=a(La,"P",{});var Da=o(nt);un=l(Da,"Gets a collection of "),Zt=a(Da,"A",{href:!0});var Yi=o(Zt);_n=l(Yi,"InputExample"),Yi.forEach(r),gn=l(Da," for the train set."),Da.forEach(r),La.forEach(r),vn=p(A),be=a(A,"DIV",{class:!0});var Ta=o(be);u(lt.$$.fragment,Ta),bn=p(Ta),Sr=a(Ta,"P",{});var Zi=o(Sr);$n=l(Zi,`Some tensorflow_datasets datasets are not formatted the same way the GLUE datasets are. This method converts
examples to the correct format.`),Zi.forEach(r),Ta.forEach(r),A.forEach(r),Cs=p(e),U=a(e,"DIV",{class:!0});var hr=o(U);u(it.$$.fragment,hr),xn=p(hr),Ar=a(hr,"P",{});var ep=o(Ar);yn=l(ep,"A single training/test example for simple sequence classification."),ep.forEach(r),En=p(hr),$e=a(hr,"DIV",{class:!0});var Na=o($e);u(pt.$$.fragment,Na),wn=p(Na),Lr=a(Na,"P",{});var tp=o(Lr);Pn=l(tp,"Serializes this instance to a JSON string."),tp.forEach(r),Na.forEach(r),hr.forEach(r),Os=p(e),F=a(e,"DIV",{class:!0});var ur=o(F);u(dt.$$.fragment,ur),qn=p(ur),Dr=a(ur,"P",{});var rp=o(Dr);kn=l(rp,"A single set of features of data. Property names are the same names as the corresponding inputs to a model."),rp.forEach(r),In=p(ur),xe=a(ur,"DIV",{class:!0});var Ma=o(xe);u(ct.$$.fragment,Ma),Sn=p(Ma),Tr=a(Ma,"P",{});var sp=o(Tr);An=l(sp,"Serializes this instance to a JSON string."),sp.forEach(r),Ma.forEach(r),ur.forEach(r),Qs=p(e),ee=a(e,"H2",{class:!0});var ja=o(ee);ye=a(ja,"A",{id:!0,class:!0,href:!0});var ap=o(ye);Nr=a(ap,"SPAN",{});var op=o(Nr);u(ft.$$.fragment,op),op.forEach(r),ap.forEach(r),Ln=p(ja),Mr=a(ja,"SPAN",{});var np=o(Mr);Dn=l(np,"GLUE"),np.forEach(r),ja.forEach(r),Us=p(e),Ee=a(e,"P",{});var Va=o(Ee);mt=a(Va,"A",{href:!0,rel:!0});var lp=o(mt);Tn=l(lp,"General Language Understanding Evaluation (GLUE)"),lp.forEach(r),Nn=l(Va,` is a benchmark that evaluates the
performance of models across a diverse set of existing NLU tasks. It was released together with the paper `),ht=a(Va,"A",{href:!0,rel:!0});var ip=o(ht);Mn=l(ip,`GLUE: A
multi-task benchmark and analysis platform for natural language understanding`),ip.forEach(r),Va.forEach(r),Fs=p(e),er=a(e,"P",{});var pp=o(er);jn=l(pp,`This library hosts a total of 10 processors for the following tasks: MRPC, MNLI, MNLI (mismatched), CoLA, SST2, STSB,
QQP, QNLI, RTE and WNLI.`),pp.forEach(r),Gs=p(e),tr=a(e,"P",{});var dp=o(tr);Vn=l(dp,"Those processors are:"),dp.forEach(r),Rs=p(e),y=a(e,"UL",{});var k=o(y);jr=a(k,"LI",{});var cp=o(jr);Vr=a(cp,"CODE",{});var fp=o(Vr);zn=l(fp,"MrpcProcessor"),fp.forEach(r),cp.forEach(r),Cn=p(k),zr=a(k,"LI",{});var mp=o(zr);Cr=a(mp,"CODE",{});var hp=o(Cr);On=l(hp,"MnliProcessor"),hp.forEach(r),mp.forEach(r),Qn=p(k),Or=a(k,"LI",{});var up=o(Or);Qr=a(up,"CODE",{});var _p=o(Qr);Un=l(_p,"MnliMismatchedProcessor"),_p.forEach(r),up.forEach(r),Fn=p(k),Ur=a(k,"LI",{});var gp=o(Ur);Fr=a(gp,"CODE",{});var vp=o(Fr);Gn=l(vp,"Sst2Processor"),vp.forEach(r),gp.forEach(r),Rn=p(k),Gr=a(k,"LI",{});var bp=o(Gr);Rr=a(bp,"CODE",{});var $p=o(Rr);Hn=l($p,"StsbProcessor"),$p.forEach(r),bp.forEach(r),Wn=p(k),Hr=a(k,"LI",{});var xp=o(Hr);Wr=a(xp,"CODE",{});var yp=o(Wr);Xn=l(yp,"QqpProcessor"),yp.forEach(r),xp.forEach(r),Jn=p(k),Xr=a(k,"LI",{});var Ep=o(Xr);Jr=a(Ep,"CODE",{});var wp=o(Jr);Bn=l(wp,"QnliProcessor"),wp.forEach(r),Ep.forEach(r),Kn=p(k),Br=a(k,"LI",{});var Pp=o(Br);Kr=a(Pp,"CODE",{});var qp=o(Kr);Yn=l(qp,"RteProcessor"),qp.forEach(r),Pp.forEach(r),Zn=p(k),Yr=a(k,"LI",{});var kp=o(Yr);Zr=a(kp,"CODE",{});var Ip=o(Zr);el=l(Ip,"WnliProcessor"),Ip.forEach(r),kp.forEach(r),k.forEach(r),Hs=p(e),we=a(e,"P",{});var za=o(we);tl=l(za,`Additionally, the following method can be used to load values from a data file and convert them to a list of
`),rr=a(za,"A",{href:!0});var Sp=o(rr);rl=l(Sp,"InputExample"),Sp.forEach(r),sl=l(za,"."),za.forEach(r),Ws=p(e),te=a(e,"DIV",{class:!0});var Ca=o(te);u(ut.$$.fragment,Ca),al=p(Ca),sr=a(Ca,"P",{});var $i=o(sr);ol=l($i,"Loads a data file into a list of "),es=a($i,"CODE",{});var Ap=o(es);nl=l(Ap,"InputFeatures"),Ap.forEach(r),$i.forEach(r),Ca.forEach(r),Xs=p(e),re=a(e,"H2",{class:!0});var Oa=o(re);Pe=a(Oa,"A",{id:!0,class:!0,href:!0});var Lp=o(Pe);ts=a(Lp,"SPAN",{});var Dp=o(ts);u(_t.$$.fragment,Dp),Dp.forEach(r),Lp.forEach(r),ll=p(Oa),rs=a(Oa,"SPAN",{});var Tp=o(rs);il=l(Tp,"XNLI"),Tp.forEach(r),Oa.forEach(r),Js=p(e),se=a(e,"P",{});var Ss=o(se);gt=a(Ss,"A",{href:!0,rel:!0});var Np=o(gt);pl=l(Np,"The Cross-Lingual NLI Corpus (XNLI)"),Np.forEach(r),dl=l(Ss,` is a benchmark that evaluates the
quality of cross-lingual text representations. XNLI is crowd-sourced dataset based on `),vt=a(Ss,"A",{href:!0,rel:!0});var Mp=o(vt);ss=a(Mp,"EM",{});var jp=o(ss);cl=l(jp,"MultiNLI"),jp.forEach(r),Mp.forEach(r),fl=l(Ss,`: pairs of text are labeled with textual entailment annotations for 15
different languages (including both high-resource language such as English and low-resource languages such as Swahili).`),Ss.forEach(r),Bs=p(e),bt=a(e,"P",{});var xi=o(bt);ml=l(xi,"It was released together with the paper "),$t=a(xi,"A",{href:!0,rel:!0});var Vp=o($t);hl=l(Vp,"XNLI: Evaluating Cross-lingual Sentence Representations"),Vp.forEach(r),xi.forEach(r),Ks=p(e),ar=a(e,"P",{});var zp=o(ar);ul=l(zp,"This library hosts the processor to load the XNLI data:"),zp.forEach(r),Ys=p(e),or=a(e,"UL",{});var Cp=o(or);as=a(Cp,"LI",{});var Op=o(as);os=a(Op,"CODE",{});var Qp=o(os);_l=l(Qp,"XnliProcessor"),Qp.forEach(r),Op.forEach(r),Cp.forEach(r),Zs=p(e),nr=a(e,"P",{});var Up=o(nr);gl=l(Up,"Please note that since the gold labels are available on the test set, evaluation is performed on the test set."),Up.forEach(r),ea=p(e),qe=a(e,"P",{});var Qa=o(qe);vl=l(Qa,"An example using these processors is given in the "),xt=a(Qa,"A",{href:!0,rel:!0});var Fp=o(xt);bl=l(Fp,"run_xnli.py"),Fp.forEach(r),$l=l(Qa," script."),Qa.forEach(r),ta=p(e),ae=a(e,"H2",{class:!0});var Ua=o(ae);ke=a(Ua,"A",{id:!0,class:!0,href:!0});var Gp=o(ke);ns=a(Gp,"SPAN",{});var Rp=o(ns);u(yt.$$.fragment,Rp),Rp.forEach(r),Gp.forEach(r),xl=p(Ua),ls=a(Ua,"SPAN",{});var Hp=o(ls);yl=l(Hp,"SQuAD"),Hp.forEach(r),Ua.forEach(r),ra=p(e),G=a(e,"P",{});var Qt=o(G);Et=a(Qt,"A",{href:!0,rel:!0});var Wp=o(Et);El=l(Wp,"The Stanford Question Answering Dataset (SQuAD)"),Wp.forEach(r),wl=l(Qt,` is a benchmark that
evaluates the performance of models on question answering. Two versions are available, v1.1 and v2.0. The first version
(v1.1) was released together with the paper `),wt=a(Qt,"A",{href:!0,rel:!0});var Xp=o(wt);Pl=l(Xp,"SQuAD: 100,000+ Questions for Machine Comprehension of Text"),Xp.forEach(r),ql=l(Qt,". The second version (v2.0) was released alongside the paper "),Pt=a(Qt,"A",{href:!0,rel:!0});var Jp=o(Pt);kl=l(Jp,`Know What You Don\u2019t
Know: Unanswerable Questions for SQuAD`),Jp.forEach(r),Il=l(Qt,"."),Qt.forEach(r),sa=p(e),lr=a(e,"P",{});var Bp=o(lr);Sl=l(Bp,"This library hosts a processor for each of the two versions:"),Bp.forEach(r),aa=p(e),oe=a(e,"H3",{class:!0});var Fa=o(oe);Ie=a(Fa,"A",{id:!0,class:!0,href:!0});var Kp=o(Ie);is=a(Kp,"SPAN",{});var Yp=o(is);u(qt.$$.fragment,Yp),Yp.forEach(r),Kp.forEach(r),Al=p(Fa),ps=a(Fa,"SPAN",{});var Zp=o(ps);Ll=l(Zp,"Processors"),Zp.forEach(r),Fa.forEach(r),oa=p(e),ir=a(e,"P",{});var ed=o(ir);Dl=l(ed,"Those processors are:"),ed.forEach(r),na=p(e),Se=a(e,"UL",{});var Ga=o(Se);ds=a(Ga,"LI",{});var td=o(ds);cs=a(td,"CODE",{});var rd=o(cs);Tl=l(rd,"SquadV1Processor"),rd.forEach(r),td.forEach(r),Nl=p(Ga),fs=a(Ga,"LI",{});var sd=o(fs);ms=a(sd,"CODE",{});var ad=o(ms);Ml=l(ad,"SquadV2Processor"),ad.forEach(r),sd.forEach(r),Ga.forEach(r),la=p(e),kt=a(e,"P",{});var yi=o(kt);jl=l(yi,"They both inherit from the abstract class "),hs=a(yi,"CODE",{});var od=o(hs);Vl=l(od,"SquadProcessor"),od.forEach(r),yi.forEach(r),ia=p(e),D=a(e,"DIV",{class:!0});var J=o(D);u(It.$$.fragment,J),zl=p(J),us=a(J,"P",{});var nd=o(us);Cl=l(nd,`Processor for the SQuAD data set. overridden by SquadV1Processor and SquadV2Processor, used by the version 1.1 and
version 2.0 of SQuAD, respectively.`),nd.forEach(r),Ol=p(J),Ae=a(J,"DIV",{class:!0});var Ra=o(Ae);u(St.$$.fragment,Ra),Ql=p(Ra),_s=a(Ra,"P",{});var ld=o(_s);Ul=l(ld,"Returns the evaluation example from the data directory."),ld.forEach(r),Ra.forEach(r),Fl=p(J),C=a(J,"DIV",{class:!0});var ze=o(C);u(At.$$.fragment,ze),Gl=p(ze),Lt=a(ze,"P",{});var Ha=o(Lt);Rl=l(Ha,"Creates a list of "),gs=a(Ha,"CODE",{});var id=o(gs);Hl=l(id,"SquadExample"),id.forEach(r),Wl=l(Ha," using a TFDS dataset."),Ha.forEach(r),Xl=p(ze),vs=a(ze,"P",{});var pd=o(vs);Jl=l(pd,"Examples:"),pd.forEach(r),Bl=p(ze),u(Dt.$$.fragment,ze),ze.forEach(r),Kl=p(J),Le=a(J,"DIV",{class:!0});var Wa=o(Le);u(Tt.$$.fragment,Wa),Yl=p(Wa),bs=a(Wa,"P",{});var dd=o(bs);Zl=l(dd,"Returns the training examples from the data directory."),dd.forEach(r),Wa.forEach(r),J.forEach(r),pa=p(e),De=a(e,"P",{});var Xa=o(De);ei=l(Xa,`Additionally, the following method can be used to convert SQuAD examples into
`),$s=a(Xa,"CODE",{});var cd=o($s);ti=l(cd,"SquadFeatures"),cd.forEach(r),ri=l(Xa," that can be used as model inputs."),Xa.forEach(r),da=p(e),j=a(e,"DIV",{class:!0});var Ce=o(j);u(Nt.$$.fragment,Ce),si=p(Ce),xs=a(Ce,"P",{});var fd=o(xs);ai=l(fd,`Converts a list of examples into a list of features that can be directly given as input to a model. It is
model-dependant and takes advantage of many of the tokenizer\u2019s features to create the model\u2019s inputs.`),fd.forEach(r),oi=p(Ce),ys=a(Ce,"P",{});var md=o(ys);ni=l(md,"Example:"),md.forEach(r),li=p(Ce),u(Mt.$$.fragment,Ce),Ce.forEach(r),ca=p(e),Te=a(e,"P",{});var Ja=o(Te);ii=l(Ja,`These processors as well as the aforementionned method can be used with files containing the data as well as with the
`),Es=a(Ja,"EM",{});var hd=o(Es);pi=l(hd,"tensorflow_datasets"),hd.forEach(r),di=l(Ja," package. Examples are given below."),Ja.forEach(r),fa=p(e),ne=a(e,"H3",{class:!0});var Ba=o(ne);Ne=a(Ba,"A",{id:!0,class:!0,href:!0});var ud=o(Ne);ws=a(ud,"SPAN",{});var _d=o(ws);u(jt.$$.fragment,_d),_d.forEach(r),ud.forEach(r),ci=p(Ba),Ps=a(Ba,"SPAN",{});var gd=o(Ps);fi=l(gd,"Example usage"),gd.forEach(r),Ba.forEach(r),ma=p(e),pr=a(e,"P",{});var vd=o(pr);mi=l(vd,"Here is an example using the processors as well as the conversion method using data files:"),vd.forEach(r),ha=p(e),u(Vt.$$.fragment,e),ua=p(e),Me=a(e,"P",{});var Ka=o(Me);hi=l(Ka,"Using "),qs=a(Ka,"EM",{});var bd=o(qs);ui=l(bd,"tensorflow_datasets"),bd.forEach(r),_i=l(Ka," is as easy as using a data file:"),Ka.forEach(r),_a=p(e),u(zt.$$.fragment,e),ga=p(e),je=a(e,"P",{});var Ya=o(je);gi=l(Ya,"Another example using these processors is given in the "),Ct=a(Ya,"A",{href:!0,rel:!0});var $d=o(Ct);vi=l($d,"run_squad.py"),$d.forEach(r),bi=l(Ya," script."),Ya.forEach(r),this.h()},h(){c(m,"name","hf:doc:metadata"),c(m,"content",JSON.stringify(Ad)),c(w,"id","processors"),c(w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w,"href","#processors"),c($,"class","relative group"),c(Ut,"href","../model_doc/wav2vec2"),c(Ft,"href","../model_doc/clip"),c(pe,"id","transformers.ProcessorMixin"),c(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pe,"href","#transformers.ProcessorMixin"),c(Y,"class","relative group"),c(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ht,"href","/docs/transformers/pr_16917/en/model_doc/speech_to_text#transformers.Speech2TextProcessor.from_pretrained"),c(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(me,"id","transformers.DataProcessor"),c(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(me,"href","#transformers.DataProcessor"),c(Z,"class","relative group"),c(Wt,"href","/docs/transformers/pr_16917/en/main_classes/processors#transformers.DataProcessor"),c(Xt,"href","/docs/transformers/pr_16917/en/main_classes/processors#transformers.InputExample"),c(Jt,"href","/docs/transformers/pr_16917/en/main_classes/processors#transformers.InputExample"),c(Bt,"href","/docs/transformers/pr_16917/en/main_classes/processors#transformers.InputFeatures"),c(Kt,"href","/docs/transformers/pr_16917/en/main_classes/processors#transformers.InputExample"),c(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yt,"href","/docs/transformers/pr_16917/en/main_classes/processors#transformers.InputExample"),c(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zt,"href","/docs/transformers/pr_16917/en/main_classes/processors#transformers.InputExample"),c(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ye,"id","transformers.glue_convert_examples_to_features"),c(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ye,"href","#transformers.glue_convert_examples_to_features"),c(ee,"class","relative group"),c(mt,"href","https://gluebenchmark.com/"),c(mt,"rel","nofollow"),c(ht,"href","https://openreview.net/pdf?id=rJ4km2R5t7"),c(ht,"rel","nofollow"),c(rr,"href","/docs/transformers/pr_16917/en/main_classes/processors#transformers.InputExample"),c(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pe,"id","xnli"),c(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pe,"href","#xnli"),c(re,"class","relative group"),c(gt,"href","https://www.nyu.edu/projects/bowman/xnli/"),c(gt,"rel","nofollow"),c(vt,"href","http://www.nyu.edu/projects/bowman/multinli/"),c(vt,"rel","nofollow"),c($t,"href","https://arxiv.org/abs/1809.05053"),c($t,"rel","nofollow"),c(xt,"href","https://github.com/huggingface/transformers/tree/main/examples/legacy/text-classification/run_xnli.py"),c(xt,"rel","nofollow"),c(ke,"id","squad"),c(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ke,"href","#squad"),c(ae,"class","relative group"),c(Et,"href","https://rajpurkar.github.io/SQuAD-explorer//"),c(Et,"rel","nofollow"),c(wt,"href","https://arxiv.org/abs/1606.05250"),c(wt,"rel","nofollow"),c(Pt,"href","https://arxiv.org/abs/1806.03822"),c(Pt,"rel","nofollow"),c(Ie,"id","transformers.data.processors.squad.SquadProcessor"),c(Ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ie,"href","#transformers.data.processors.squad.SquadProcessor"),c(oe,"class","relative group"),c(Ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ne,"id","example-usage"),c(Ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ne,"href","#example-usage"),c(ne,"class","relative group"),c(Ct,"href","https://github.com/huggingface/transformers/tree/main/examples/legacy/question-answering/run_squad.py"),c(Ct,"rel","nofollow")},m(e,d){t(document.head,m),f(e,S,d),f(e,$,d),t($,w),t(w,N),_(q,N,null),t($,Q),t($,M),t(M,L),f(e,x,d),f(e,V,d),t(V,B),f(e,Ls,d),f(e,ie,d),t(ie,K),t(K,Za),t(K,Ut),t(Ut,eo),t(K,to),t(K,Ft),t(Ft,ro),t(K,so),t(ie,ao),t(ie,_r),t(_r,oo),f(e,Ds,d),f(e,Y,d),t(Y,pe),t(pe,gr),_(Qe,gr,null),t(Y,no),t(Y,vr),t(vr,lo),f(e,Ts,d),f(e,Gt,d),t(Gt,io),f(e,Ns,d),f(e,Rt,d),t(Rt,po),f(e,Ms,d),f(e,I,d),_(Ue,I,null),t(I,co),t(I,br),t(br,fo),t(I,mo),t(I,R),_(Fe,R,null),t(R,ho),t(R,$r),t($r,uo),t(R,_o),_(de,R,null),t(I,go),t(I,z),_(Ge,z,null),t(z,vo),t(z,Re),t(Re,bo),t(Re,xr),t(xr,$o),t(Re,xo),t(z,yo),t(z,yr),t(yr,Eo),t(z,wo),_(He,z,null),t(I,Po),t(I,H),_(We,H,null),t(H,qo),t(H,Xe),t(Xe,ko),t(Xe,Er),t(Er,Io),t(Xe,So),t(H,Ao),_(ce,H,null),t(I,Lo),t(I,W),_(Je,W,null),t(W,Do),t(W,Be),t(Be,To),t(Be,Ht),t(Ht,No),t(Be,Mo),t(W,jo),_(fe,W,null),f(e,js,d),f(e,Z,d),t(Z,me),t(me,wr),_(Ke,wr,null),t(Z,Vo),t(Z,Pr),t(Pr,zo),f(e,Vs,d),f(e,T,d),t(T,Co),t(T,Wt),t(Wt,Oo),t(T,Qo),t(T,Xt),t(Xt,Uo),t(T,Fo),t(T,Jt),t(Jt,Go),t(T,Ro),t(T,Bt),t(Bt,Ho),t(T,Wo),f(e,zs,d),f(e,P,d),_(Ye,P,null),t(P,Xo),t(P,qr),t(qr,Jo),t(P,Bo),t(P,he),_(Ze,he,null),t(he,Ko),t(he,et),t(et,Yo),t(et,Kt),t(Kt,Zo),t(et,en),t(P,tn),t(P,ue),_(tt,ue,null),t(ue,rn),t(ue,kr),t(kr,sn),t(P,an),t(P,_e),_(rt,_e,null),t(_e,on),t(_e,Ir),t(Ir,nn),t(P,ln),t(P,ge),_(st,ge,null),t(ge,pn),t(ge,at),t(at,dn),t(at,Yt),t(Yt,cn),t(at,fn),t(P,mn),t(P,ve),_(ot,ve,null),t(ve,hn),t(ve,nt),t(nt,un),t(nt,Zt),t(Zt,_n),t(nt,gn),t(P,vn),t(P,be),_(lt,be,null),t(be,bn),t(be,Sr),t(Sr,$n),f(e,Cs,d),f(e,U,d),_(it,U,null),t(U,xn),t(U,Ar),t(Ar,yn),t(U,En),t(U,$e),_(pt,$e,null),t($e,wn),t($e,Lr),t(Lr,Pn),f(e,Os,d),f(e,F,d),_(dt,F,null),t(F,qn),t(F,Dr),t(Dr,kn),t(F,In),t(F,xe),_(ct,xe,null),t(xe,Sn),t(xe,Tr),t(Tr,An),f(e,Qs,d),f(e,ee,d),t(ee,ye),t(ye,Nr),_(ft,Nr,null),t(ee,Ln),t(ee,Mr),t(Mr,Dn),f(e,Us,d),f(e,Ee,d),t(Ee,mt),t(mt,Tn),t(Ee,Nn),t(Ee,ht),t(ht,Mn),f(e,Fs,d),f(e,er,d),t(er,jn),f(e,Gs,d),f(e,tr,d),t(tr,Vn),f(e,Rs,d),f(e,y,d),t(y,jr),t(jr,Vr),t(Vr,zn),t(y,Cn),t(y,zr),t(zr,Cr),t(Cr,On),t(y,Qn),t(y,Or),t(Or,Qr),t(Qr,Un),t(y,Fn),t(y,Ur),t(Ur,Fr),t(Fr,Gn),t(y,Rn),t(y,Gr),t(Gr,Rr),t(Rr,Hn),t(y,Wn),t(y,Hr),t(Hr,Wr),t(Wr,Xn),t(y,Jn),t(y,Xr),t(Xr,Jr),t(Jr,Bn),t(y,Kn),t(y,Br),t(Br,Kr),t(Kr,Yn),t(y,Zn),t(y,Yr),t(Yr,Zr),t(Zr,el),f(e,Hs,d),f(e,we,d),t(we,tl),t(we,rr),t(rr,rl),t(we,sl),f(e,Ws,d),f(e,te,d),_(ut,te,null),t(te,al),t(te,sr),t(sr,ol),t(sr,es),t(es,nl),f(e,Xs,d),f(e,re,d),t(re,Pe),t(Pe,ts),_(_t,ts,null),t(re,ll),t(re,rs),t(rs,il),f(e,Js,d),f(e,se,d),t(se,gt),t(gt,pl),t(se,dl),t(se,vt),t(vt,ss),t(ss,cl),t(se,fl),f(e,Bs,d),f(e,bt,d),t(bt,ml),t(bt,$t),t($t,hl),f(e,Ks,d),f(e,ar,d),t(ar,ul),f(e,Ys,d),f(e,or,d),t(or,as),t(as,os),t(os,_l),f(e,Zs,d),f(e,nr,d),t(nr,gl),f(e,ea,d),f(e,qe,d),t(qe,vl),t(qe,xt),t(xt,bl),t(qe,$l),f(e,ta,d),f(e,ae,d),t(ae,ke),t(ke,ns),_(yt,ns,null),t(ae,xl),t(ae,ls),t(ls,yl),f(e,ra,d),f(e,G,d),t(G,Et),t(Et,El),t(G,wl),t(G,wt),t(wt,Pl),t(G,ql),t(G,Pt),t(Pt,kl),t(G,Il),f(e,sa,d),f(e,lr,d),t(lr,Sl),f(e,aa,d),f(e,oe,d),t(oe,Ie),t(Ie,is),_(qt,is,null),t(oe,Al),t(oe,ps),t(ps,Ll),f(e,oa,d),f(e,ir,d),t(ir,Dl),f(e,na,d),f(e,Se,d),t(Se,ds),t(ds,cs),t(cs,Tl),t(Se,Nl),t(Se,fs),t(fs,ms),t(ms,Ml),f(e,la,d),f(e,kt,d),t(kt,jl),t(kt,hs),t(hs,Vl),f(e,ia,d),f(e,D,d),_(It,D,null),t(D,zl),t(D,us),t(us,Cl),t(D,Ol),t(D,Ae),_(St,Ae,null),t(Ae,Ql),t(Ae,_s),t(_s,Ul),t(D,Fl),t(D,C),_(At,C,null),t(C,Gl),t(C,Lt),t(Lt,Rl),t(Lt,gs),t(gs,Hl),t(Lt,Wl),t(C,Xl),t(C,vs),t(vs,Jl),t(C,Bl),_(Dt,C,null),t(D,Kl),t(D,Le),_(Tt,Le,null),t(Le,Yl),t(Le,bs),t(bs,Zl),f(e,pa,d),f(e,De,d),t(De,ei),t(De,$s),t($s,ti),t(De,ri),f(e,da,d),f(e,j,d),_(Nt,j,null),t(j,si),t(j,xs),t(xs,ai),t(j,oi),t(j,ys),t(ys,ni),t(j,li),_(Mt,j,null),f(e,ca,d),f(e,Te,d),t(Te,ii),t(Te,Es),t(Es,pi),t(Te,di),f(e,fa,d),f(e,ne,d),t(ne,Ne),t(Ne,ws),_(jt,ws,null),t(ne,ci),t(ne,Ps),t(Ps,fi),f(e,ma,d),f(e,pr,d),t(pr,mi),f(e,ha,d),_(Vt,e,d),f(e,ua,d),f(e,Me,d),t(Me,hi),t(Me,qs),t(qs,ui),t(Me,_i),f(e,_a,d),_(zt,e,d),f(e,ga,d),f(e,je,d),t(je,gi),t(je,Ct),t(Ct,vi),t(je,bi),va=!0},p(e,[d]){const Ot={};d&2&&(Ot.$$scope={dirty:d,ctx:e}),de.$set(Ot);const ks={};d&2&&(ks.$$scope={dirty:d,ctx:e}),ce.$set(ks);const Is={};d&2&&(Is.$$scope={dirty:d,ctx:e}),fe.$set(Is)},i(e){va||(g(q.$$.fragment,e),g(Qe.$$.fragment,e),g(Ue.$$.fragment,e),g(Fe.$$.fragment,e),g(de.$$.fragment,e),g(Ge.$$.fragment,e),g(He.$$.fragment,e),g(We.$$.fragment,e),g(ce.$$.fragment,e),g(Je.$$.fragment,e),g(fe.$$.fragment,e),g(Ke.$$.fragment,e),g(Ye.$$.fragment,e),g(Ze.$$.fragment,e),g(tt.$$.fragment,e),g(rt.$$.fragment,e),g(st.$$.fragment,e),g(ot.$$.fragment,e),g(lt.$$.fragment,e),g(it.$$.fragment,e),g(pt.$$.fragment,e),g(dt.$$.fragment,e),g(ct.$$.fragment,e),g(ft.$$.fragment,e),g(ut.$$.fragment,e),g(_t.$$.fragment,e),g(yt.$$.fragment,e),g(qt.$$.fragment,e),g(It.$$.fragment,e),g(St.$$.fragment,e),g(At.$$.fragment,e),g(Dt.$$.fragment,e),g(Tt.$$.fragment,e),g(Nt.$$.fragment,e),g(Mt.$$.fragment,e),g(jt.$$.fragment,e),g(Vt.$$.fragment,e),g(zt.$$.fragment,e),va=!0)},o(e){v(q.$$.fragment,e),v(Qe.$$.fragment,e),v(Ue.$$.fragment,e),v(Fe.$$.fragment,e),v(de.$$.fragment,e),v(Ge.$$.fragment,e),v(He.$$.fragment,e),v(We.$$.fragment,e),v(ce.$$.fragment,e),v(Je.$$.fragment,e),v(fe.$$.fragment,e),v(Ke.$$.fragment,e),v(Ye.$$.fragment,e),v(Ze.$$.fragment,e),v(tt.$$.fragment,e),v(rt.$$.fragment,e),v(st.$$.fragment,e),v(ot.$$.fragment,e),v(lt.$$.fragment,e),v(it.$$.fragment,e),v(pt.$$.fragment,e),v(dt.$$.fragment,e),v(ct.$$.fragment,e),v(ft.$$.fragment,e),v(ut.$$.fragment,e),v(_t.$$.fragment,e),v(yt.$$.fragment,e),v(qt.$$.fragment,e),v(It.$$.fragment,e),v(St.$$.fragment,e),v(At.$$.fragment,e),v(Dt.$$.fragment,e),v(Tt.$$.fragment,e),v(Nt.$$.fragment,e),v(Mt.$$.fragment,e),v(jt.$$.fragment,e),v(Vt.$$.fragment,e),v(zt.$$.fragment,e),va=!1},d(e){r(m),e&&r(S),e&&r($),b(q),e&&r(x),e&&r(V),e&&r(Ls),e&&r(ie),e&&r(Ds),e&&r(Y),b(Qe),e&&r(Ts),e&&r(Gt),e&&r(Ns),e&&r(Rt),e&&r(Ms),e&&r(I),b(Ue),b(Fe),b(de),b(Ge),b(He),b(We),b(ce),b(Je),b(fe),e&&r(js),e&&r(Z),b(Ke),e&&r(Vs),e&&r(T),e&&r(zs),e&&r(P),b(Ye),b(Ze),b(tt),b(rt),b(st),b(ot),b(lt),e&&r(Cs),e&&r(U),b(it),b(pt),e&&r(Os),e&&r(F),b(dt),b(ct),e&&r(Qs),e&&r(ee),b(ft),e&&r(Us),e&&r(Ee),e&&r(Fs),e&&r(er),e&&r(Gs),e&&r(tr),e&&r(Rs),e&&r(y),e&&r(Hs),e&&r(we),e&&r(Ws),e&&r(te),b(ut),e&&r(Xs),e&&r(re),b(_t),e&&r(Js),e&&r(se),e&&r(Bs),e&&r(bt),e&&r(Ks),e&&r(ar),e&&r(Ys),e&&r(or),e&&r(Zs),e&&r(nr),e&&r(ea),e&&r(qe),e&&r(ta),e&&r(ae),b(yt),e&&r(ra),e&&r(G),e&&r(sa),e&&r(lr),e&&r(aa),e&&r(oe),b(qt),e&&r(oa),e&&r(ir),e&&r(na),e&&r(Se),e&&r(la),e&&r(kt),e&&r(ia),e&&r(D),b(It),b(St),b(At),b(Dt),b(Tt),e&&r(pa),e&&r(De),e&&r(da),e&&r(j),b(Nt),b(Mt),e&&r(ca),e&&r(Te),e&&r(fa),e&&r(ne),b(jt),e&&r(ma),e&&r(pr),e&&r(ha),b(Vt,e),e&&r(ua),e&&r(Me),e&&r(_a),b(zt,e),e&&r(ga),e&&r(je)}}}const Ad={local:"processors",sections:[{local:"transformers.ProcessorMixin",title:"Multi-modal processors"},{local:"transformers.DataProcessor",title:"Deprecated processors"},{local:"transformers.glue_convert_examples_to_features",title:"GLUE"},{local:"xnli",title:"XNLI"},{local:"squad",sections:[{local:"transformers.data.processors.squad.SquadProcessor",title:"Processors"},{local:"example-usage",title:"Example usage"}],title:"SQuAD"}],title:"Processors"};function Ld(le){return Pd(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Vd extends xd{constructor(m){super();yd(this,m,Ld,Sd,Ed,{})}}export{Vd as default,Ad as metadata};
