import{S as J6t,i as Y6t,s as K6t,e as a,k as l,w as F,t as o,M as Z6t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as e0t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as yNr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function o0t(L){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,Q6,gf,qe,Xe,ci,An,W6,yn,Ln,H6,fi,xn,U6,mi,hf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),li=a("code"),mf=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),ii=a("code"),di=o('"new-model"'),Q6=o(")."),gf=l(),qe=a("p"),Xe=o("Likewise, if your "),ci=a("code"),An=o("NewModel"),W6=o(" is a subclass of "),yn=a("a"),Ln=o("PreTrainedModel"),H6=o(`, make sure its
`),fi=a("code"),xn=o("config_class"),U6=o(` attribute is set to the same class you use when registering the model (here
`),mi=a("code"),hf=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var g$=s(p);m=r(g$,"NewModelConfig"),g$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var gi=s(d);h=r(gi,"PretrainedConfig"),gi.forEach(t),Mo=r(Ae,`, make sure its
`),li=n(Ae,"CODE",{});var h$=s(li);mf=r(h$,"model_type"),h$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),ii=n(Ae,"CODE",{});var p$=s(ii);di=r(p$,'"new-model"'),p$.forEach(t),Q6=r(Ae,")."),Ae.forEach(t),gf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ci=n(Eo,"CODE",{});var Ea=s(ci);An=r(Ea,"NewModel"),Ea.forEach(t),W6=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var u$=s(yn);Ln=r(u$,"PreTrainedModel"),u$.forEach(t),H6=r(Eo,`, make sure its
`),fi=n(Eo,"CODE",{});var pf=s(fi);xn=r(pf,"config_class"),pf.forEach(t),U6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),mi=n(Eo,"CODE",{});var _$=s(mi);hf=r(_$,"NewModelConfig"),_$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,li),e(li,mf),e(g,et),e(g,ii),e(ii,di),e(g,Q6),b(ze,gf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ci),e(ci,An),e(qe,W6),e(qe,yn),e(yn,Ln),e(qe,H6),e(qe,fi),e(fi,xn),e(qe,U6),e(qe,mi),e(mi,hf),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(gf),ze&&t(qe)}}}function r0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a0t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function n0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s0t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function l0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ryt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ayt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function syt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function myt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _yt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function byt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Myt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ayt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $yt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Syt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ryt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Byt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kyt(L){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,Q6,gf,qe,Xe,ci,An,W6,yn,Ln,H6,fi,xn,U6,mi,hf,Ma,ze,Ae,g$,gi,h$,p$,Eo,Ea,u$,pf,_$,Jje,jPe,hi,uf,KZ,J6,Yje,ZZ,Kje,DPe,$n,Zje,eee,eDe,oDe,oee,rDe,tDe,GPe,Y6,OPe,b$,aDe,VPe,_f,XPe,pi,bf,ree,K6,nDe,tee,sDe,zPe,Co,Z6,lDe,e0,iDe,v$,dDe,cDe,fDe,o0,mDe,aee,gDe,hDe,pDe,Er,r0,uDe,nee,_De,bDe,ui,vDe,see,FDe,TDe,lee,MDe,EDe,CDe,A,vf,iee,wDe,ADe,F$,yDe,LDe,xDe,Ff,dee,$De,kDe,T$,SDe,RDe,BDe,Tf,cee,PDe,IDe,M$,qDe,NDe,jDe,Mf,fee,DDe,GDe,E$,ODe,VDe,XDe,Ef,mee,zDe,QDe,C$,WDe,HDe,UDe,Cf,gee,JDe,YDe,w$,KDe,ZDe,eGe,wf,hee,oGe,rGe,A$,tGe,aGe,nGe,Af,pee,sGe,lGe,y$,iGe,dGe,cGe,yf,uee,fGe,mGe,L$,gGe,hGe,pGe,Lf,_ee,uGe,_Ge,x$,bGe,vGe,FGe,xf,bee,TGe,MGe,$$,EGe,CGe,wGe,$f,vee,AGe,yGe,k$,LGe,xGe,$Ge,kf,Fee,kGe,SGe,S$,RGe,BGe,PGe,Sf,Tee,IGe,qGe,R$,NGe,jGe,DGe,Rf,Mee,GGe,OGe,B$,VGe,XGe,zGe,Bf,Eee,QGe,WGe,P$,HGe,UGe,JGe,Pf,Cee,YGe,KGe,I$,ZGe,eOe,oOe,If,wee,rOe,tOe,q$,aOe,nOe,sOe,qf,Aee,lOe,iOe,N$,dOe,cOe,fOe,Nf,yee,mOe,gOe,j$,hOe,pOe,uOe,jf,Lee,_Oe,bOe,D$,vOe,FOe,TOe,Df,xee,MOe,EOe,G$,COe,wOe,AOe,Gf,$ee,yOe,LOe,O$,xOe,$Oe,kOe,Of,kee,SOe,ROe,V$,BOe,POe,IOe,Vf,See,qOe,NOe,X$,jOe,DOe,GOe,Xf,Ree,OOe,VOe,z$,XOe,zOe,QOe,zf,Bee,WOe,HOe,Q$,UOe,JOe,YOe,Qf,Pee,KOe,ZOe,W$,eVe,oVe,rVe,Wf,Iee,tVe,aVe,H$,nVe,sVe,lVe,Hf,qee,iVe,dVe,U$,cVe,fVe,mVe,Uf,Nee,gVe,hVe,J$,pVe,uVe,_Ve,Jf,jee,bVe,vVe,Y$,FVe,TVe,MVe,Yf,Dee,EVe,CVe,K$,wVe,AVe,yVe,Kf,Gee,LVe,xVe,Z$,$Ve,kVe,SVe,Zf,Oee,RVe,BVe,ek,PVe,IVe,qVe,em,Vee,NVe,jVe,ok,DVe,GVe,OVe,om,Xee,VVe,XVe,rk,zVe,QVe,WVe,rm,zee,HVe,UVe,tk,JVe,YVe,KVe,tm,Qee,ZVe,eXe,ak,oXe,rXe,tXe,am,Wee,aXe,nXe,nk,sXe,lXe,iXe,nm,Hee,dXe,cXe,sk,fXe,mXe,gXe,sm,Uee,hXe,pXe,lk,uXe,_Xe,bXe,lm,Jee,vXe,FXe,ik,TXe,MXe,EXe,im,Yee,CXe,wXe,dk,AXe,yXe,LXe,dm,Kee,xXe,$Xe,ck,kXe,SXe,RXe,cm,Zee,BXe,PXe,fk,IXe,qXe,NXe,fm,eoe,jXe,DXe,mk,GXe,OXe,VXe,mm,ooe,XXe,zXe,gk,QXe,WXe,HXe,gm,roe,UXe,JXe,hk,YXe,KXe,ZXe,hm,toe,eze,oze,pk,rze,tze,aze,pm,aoe,nze,sze,uk,lze,ize,dze,um,noe,cze,fze,_k,mze,gze,hze,_m,soe,pze,uze,bk,_ze,bze,vze,bm,loe,Fze,Tze,vk,Mze,Eze,Cze,vm,ioe,wze,Aze,Fk,yze,Lze,xze,Fm,doe,$ze,kze,Tk,Sze,Rze,Bze,Tm,coe,Pze,Ize,Mk,qze,Nze,jze,Mm,foe,Dze,Gze,Ek,Oze,Vze,Xze,Em,moe,zze,Qze,Ck,Wze,Hze,Uze,Cm,goe,Jze,Yze,wk,Kze,Zze,eQe,wm,hoe,oQe,rQe,Ak,tQe,aQe,nQe,Am,poe,sQe,lQe,yk,iQe,dQe,cQe,ym,uoe,fQe,mQe,Lk,gQe,hQe,pQe,Lm,_oe,uQe,_Qe,xk,bQe,vQe,FQe,xm,boe,TQe,MQe,$k,EQe,CQe,wQe,$m,voe,AQe,yQe,kk,LQe,xQe,$Qe,km,Foe,kQe,SQe,Sk,RQe,BQe,PQe,Sm,Toe,IQe,qQe,Rk,NQe,jQe,DQe,Rm,Moe,GQe,OQe,Bk,VQe,XQe,zQe,Bm,Eoe,QQe,WQe,Pk,HQe,UQe,JQe,Pm,Coe,YQe,KQe,Ik,ZQe,eWe,oWe,Im,woe,rWe,tWe,qk,aWe,nWe,sWe,qm,Aoe,lWe,iWe,Nk,dWe,cWe,fWe,Nm,yoe,mWe,gWe,jk,hWe,pWe,uWe,jm,Loe,_We,bWe,Dk,vWe,FWe,TWe,Dm,xoe,MWe,EWe,Gk,CWe,wWe,AWe,Gm,$oe,yWe,LWe,Ok,xWe,$We,kWe,Om,koe,SWe,RWe,Vk,BWe,PWe,IWe,Vm,Soe,qWe,NWe,Xk,jWe,DWe,GWe,Xm,Roe,OWe,VWe,zk,XWe,zWe,QWe,zm,Boe,WWe,HWe,Qk,UWe,JWe,YWe,Qm,Poe,KWe,ZWe,Wk,eHe,oHe,rHe,Wm,Ioe,tHe,aHe,Hk,nHe,sHe,lHe,Hm,qoe,iHe,dHe,Uk,cHe,fHe,mHe,Um,Noe,gHe,hHe,Jk,pHe,uHe,_He,Jm,joe,bHe,vHe,Yk,FHe,THe,MHe,Ym,Doe,EHe,CHe,Kk,wHe,AHe,yHe,Km,Goe,LHe,xHe,Zk,$He,kHe,SHe,Zm,Ooe,RHe,BHe,eS,PHe,IHe,qHe,eg,Voe,NHe,jHe,oS,DHe,GHe,OHe,og,Xoe,VHe,XHe,rS,zHe,QHe,WHe,rg,zoe,HHe,UHe,tS,JHe,YHe,KHe,tg,Qoe,ZHe,eUe,aS,oUe,rUe,tUe,ag,Woe,aUe,nUe,nS,sUe,lUe,iUe,ng,Hoe,dUe,cUe,sS,fUe,mUe,gUe,sg,Uoe,hUe,pUe,lS,uUe,_Ue,bUe,lg,Joe,vUe,FUe,iS,TUe,MUe,EUe,ig,Yoe,CUe,wUe,dS,AUe,yUe,LUe,dg,Koe,xUe,$Ue,cS,kUe,SUe,RUe,cg,Zoe,BUe,PUe,fS,IUe,qUe,NUe,fg,ere,jUe,DUe,mS,GUe,OUe,VUe,mg,ore,XUe,zUe,gS,QUe,WUe,HUe,gg,rre,UUe,JUe,hS,YUe,KUe,ZUe,hg,tre,eJe,oJe,pS,rJe,tJe,aJe,pg,are,nJe,sJe,uS,lJe,iJe,dJe,ug,cJe,_g,t0,fJe,nre,mJe,QPe,_i,bg,sre,a0,gJe,lre,hJe,WPe,wo,n0,pJe,s0,uJe,_S,_Je,bJe,vJe,l0,FJe,ire,TJe,MJe,EJe,Cr,i0,CJe,dre,wJe,AJe,Ca,yJe,cre,LJe,xJe,fre,$Je,kJe,mre,SJe,RJe,BJe,k,kn,gre,PJe,IJe,bS,qJe,NJe,vS,jJe,DJe,GJe,Sn,hre,OJe,VJe,FS,XJe,zJe,TS,QJe,WJe,HJe,Rn,pre,UJe,JJe,MS,YJe,KJe,ES,ZJe,eYe,oYe,vg,ure,rYe,tYe,CS,aYe,nYe,sYe,Bn,_re,lYe,iYe,wS,dYe,cYe,AS,fYe,mYe,gYe,Fg,bre,hYe,pYe,yS,uYe,_Ye,bYe,Tg,vre,vYe,FYe,LS,TYe,MYe,EYe,Mg,Fre,CYe,wYe,xS,AYe,yYe,LYe,Pn,Tre,xYe,$Ye,$S,kYe,SYe,kS,RYe,BYe,PYe,In,Mre,IYe,qYe,SS,NYe,jYe,RS,DYe,GYe,OYe,qn,Ere,VYe,XYe,BS,zYe,QYe,PS,WYe,HYe,UYe,Eg,Cre,JYe,YYe,IS,KYe,ZYe,eKe,Cg,wre,oKe,rKe,qS,tKe,aKe,nKe,Nn,Are,sKe,lKe,NS,iKe,dKe,jS,cKe,fKe,mKe,wg,yre,gKe,hKe,DS,pKe,uKe,_Ke,jn,Lre,bKe,vKe,GS,FKe,TKe,OS,MKe,EKe,CKe,Dn,xre,wKe,AKe,VS,yKe,LKe,XS,xKe,$Ke,kKe,Gn,$re,SKe,RKe,zS,BKe,PKe,QS,IKe,qKe,NKe,Ag,kre,jKe,DKe,WS,GKe,OKe,VKe,On,Sre,XKe,zKe,HS,QKe,WKe,US,HKe,UKe,JKe,Vn,Rre,YKe,KKe,JS,ZKe,eZe,YS,oZe,rZe,tZe,Xn,Bre,aZe,nZe,KS,sZe,lZe,ZS,iZe,dZe,cZe,zn,Pre,fZe,mZe,eR,gZe,hZe,oR,pZe,uZe,_Ze,Qn,Ire,bZe,vZe,rR,FZe,TZe,tR,MZe,EZe,CZe,Wn,qre,wZe,AZe,aR,yZe,LZe,nR,xZe,$Ze,kZe,yg,Nre,SZe,RZe,sR,BZe,PZe,IZe,Hn,jre,qZe,NZe,lR,jZe,DZe,iR,GZe,OZe,VZe,Lg,Dre,XZe,zZe,dR,QZe,WZe,HZe,Un,Gre,UZe,JZe,cR,YZe,KZe,fR,ZZe,eeo,oeo,Jn,Ore,reo,teo,mR,aeo,neo,gR,seo,leo,ieo,Yn,Vre,deo,ceo,hR,feo,meo,pR,geo,heo,peo,Kn,Xre,ueo,_eo,uR,beo,veo,_R,Feo,Teo,Meo,Zn,zre,Eeo,Ceo,bR,weo,Aeo,vR,yeo,Leo,xeo,xg,Qre,$eo,keo,FR,Seo,Reo,Beo,es,Wre,Peo,Ieo,TR,qeo,Neo,MR,jeo,Deo,Geo,os,Hre,Oeo,Veo,ER,Xeo,zeo,CR,Qeo,Weo,Heo,rs,Ure,Ueo,Jeo,wR,Yeo,Keo,AR,Zeo,eoo,ooo,ts,Jre,roo,too,yR,aoo,noo,LR,soo,loo,ioo,as,Yre,doo,coo,xR,foo,moo,$R,goo,hoo,poo,ns,Kre,uoo,_oo,kR,boo,voo,SR,Foo,Too,Moo,$g,Zre,Eoo,Coo,RR,woo,Aoo,yoo,ss,ete,Loo,xoo,BR,$oo,koo,PR,Soo,Roo,Boo,kg,ote,Poo,Ioo,IR,qoo,Noo,joo,Sg,rte,Doo,Goo,qR,Ooo,Voo,Xoo,ls,tte,zoo,Qoo,NR,Woo,Hoo,jR,Uoo,Joo,Yoo,is,ate,Koo,Zoo,DR,ero,oro,GR,rro,tro,aro,ds,nte,nro,sro,OR,lro,iro,VR,dro,cro,fro,Rg,ste,mro,gro,XR,hro,pro,uro,cs,lte,_ro,bro,zR,vro,Fro,QR,Tro,Mro,Ero,fs,ite,Cro,wro,WR,Aro,yro,HR,Lro,xro,$ro,ms,dte,kro,Sro,UR,Rro,Bro,JR,Pro,Iro,qro,gs,cte,Nro,jro,YR,Dro,Gro,KR,Oro,Vro,Xro,hs,fte,zro,Qro,ZR,Wro,Hro,eB,Uro,Jro,Yro,ps,mte,Kro,Zro,oB,eto,oto,rB,rto,tto,ato,Bg,gte,nto,sto,tB,lto,ito,dto,Pg,hte,cto,fto,aB,mto,gto,hto,Ig,pte,pto,uto,nB,_to,bto,vto,qg,ute,Fto,Tto,sB,Mto,Eto,Cto,us,_te,wto,Ato,lB,yto,Lto,iB,xto,$to,kto,Ng,bte,Sto,Rto,dB,Bto,Pto,Ito,_s,vte,qto,Nto,cB,jto,Dto,fB,Gto,Oto,Vto,bs,Fte,Xto,zto,mB,Qto,Wto,gB,Hto,Uto,Jto,vs,Tte,Yto,Kto,hB,Zto,eao,pB,oao,rao,tao,Fs,Mte,aao,nao,uB,sao,lao,_B,iao,dao,cao,Ts,Ete,fao,mao,bB,gao,hao,vB,pao,uao,_ao,Ms,Cte,bao,vao,FB,Fao,Tao,TB,Mao,Eao,Cao,jg,wte,wao,Aao,MB,yao,Lao,xao,Dg,Ate,$ao,kao,EB,Sao,Rao,Bao,Es,yte,Pao,Iao,CB,qao,Nao,wB,jao,Dao,Gao,Cs,Lte,Oao,Vao,AB,Xao,zao,yB,Qao,Wao,Hao,ws,xte,Uao,Jao,LB,Yao,Kao,xB,Zao,eno,ono,Gg,$te,rno,tno,$B,ano,nno,sno,Og,kte,lno,ino,kB,dno,cno,fno,Vg,Ste,mno,gno,SB,hno,pno,uno,As,Rte,_no,bno,RB,vno,Fno,BB,Tno,Mno,Eno,Xg,Bte,Cno,wno,PB,Ano,yno,Lno,zg,Pte,xno,$no,IB,kno,Sno,Rno,ys,Ite,Bno,Pno,qB,Ino,qno,NB,Nno,jno,Dno,Qg,qte,Gno,Ono,jB,Vno,Xno,zno,Wg,Nte,Qno,Wno,DB,Hno,Uno,Jno,Ls,jte,Yno,Kno,GB,Zno,eso,OB,oso,rso,tso,xs,Dte,aso,nso,VB,sso,lso,XB,iso,dso,cso,$s,Gte,fso,mso,zB,gso,hso,QB,pso,uso,_so,ks,Ote,bso,vso,WB,Fso,Tso,HB,Mso,Eso,Cso,Hg,wso,Ug,d0,Aso,Vte,yso,HPe,bi,Jg,Xte,c0,Lso,zte,xso,UPe,Ao,f0,$so,m0,kso,UB,Sso,Rso,Bso,g0,Pso,Qte,Iso,qso,Nso,Qe,h0,jso,Wte,Dso,Gso,wa,Oso,Hte,Vso,Xso,Ute,zso,Qso,Jte,Wso,Hso,Uso,oe,Yg,Yte,Jso,Yso,JB,Kso,Zso,elo,Kg,Kte,olo,rlo,YB,tlo,alo,nlo,Zg,Zte,slo,llo,KB,ilo,dlo,clo,eh,eae,flo,mlo,ZB,glo,hlo,plo,oh,oae,ulo,_lo,eP,blo,vlo,Flo,rh,rae,Tlo,Mlo,oP,Elo,Clo,wlo,th,tae,Alo,ylo,rP,Llo,xlo,$lo,ah,aae,klo,Slo,tP,Rlo,Blo,Plo,nh,nae,Ilo,qlo,aP,Nlo,jlo,Dlo,sh,sae,Glo,Olo,nP,Vlo,Xlo,zlo,lh,lae,Qlo,Wlo,sP,Hlo,Ulo,Jlo,ih,iae,Ylo,Klo,lP,Zlo,eio,oio,dh,dae,rio,tio,iP,aio,nio,sio,ch,cae,lio,iio,dP,dio,cio,fio,fh,fae,mio,gio,cP,hio,pio,uio,mh,mae,_io,bio,fP,vio,Fio,Tio,gh,gae,Mio,Eio,mP,Cio,wio,Aio,hh,hae,yio,Lio,gP,xio,$io,kio,ph,pae,Sio,Rio,hP,Bio,Pio,Iio,uh,uae,qio,Nio,pP,jio,Dio,Gio,_h,_ae,Oio,Vio,uP,Xio,zio,Qio,bh,bae,Wio,Hio,_P,Uio,Jio,Yio,vh,vae,Kio,Zio,bP,edo,odo,rdo,Fh,Fae,tdo,ado,vP,ndo,sdo,ldo,Th,Tae,ido,ddo,FP,cdo,fdo,mdo,Mh,gdo,Eh,hdo,Ch,p0,pdo,Mae,udo,JPe,vi,wh,Eae,u0,_do,Cae,bdo,YPe,yo,_0,vdo,b0,Fdo,TP,Tdo,Mdo,Edo,v0,Cdo,wae,wdo,Ado,ydo,We,F0,Ldo,Aae,xdo,$do,Fi,kdo,yae,Sdo,Rdo,Lae,Bdo,Pdo,Ido,be,Ah,xae,qdo,Ndo,MP,jdo,Ddo,Gdo,yh,$ae,Odo,Vdo,kae,Xdo,zdo,Qdo,Lh,Sae,Wdo,Hdo,EP,Udo,Jdo,Ydo,xh,Rae,Kdo,Zdo,CP,eco,oco,rco,$h,Bae,tco,aco,wP,nco,sco,lco,kh,Pae,ico,dco,AP,cco,fco,mco,Sh,Iae,gco,hco,yP,pco,uco,_co,Rh,qae,bco,vco,LP,Fco,Tco,Mco,Bh,Nae,Eco,Cco,xP,wco,Aco,yco,Ph,jae,Lco,xco,$P,$co,kco,Sco,Ih,Dae,Rco,Bco,kP,Pco,Ico,qco,qh,Gae,Nco,jco,SP,Dco,Gco,Oco,Nh,Oae,Vco,Xco,RP,zco,Qco,Wco,jh,Vae,Hco,Uco,BP,Jco,Yco,Kco,Dh,Xae,Zco,efo,PP,ofo,rfo,tfo,Gh,afo,Oh,nfo,Vh,T0,sfo,zae,lfo,KPe,Ti,Xh,Qae,M0,ifo,Wae,dfo,ZPe,Lo,E0,cfo,Mi,ffo,IP,mfo,gfo,qP,hfo,pfo,ufo,C0,_fo,Hae,bfo,vfo,Ffo,ot,w0,Tfo,Uae,Mfo,Efo,Ei,Cfo,Jae,wfo,Afo,NP,yfo,Lfo,xfo,zh,$fo,He,A0,kfo,Yae,Sfo,Rfo,Aa,Bfo,Kae,Pfo,Ifo,Zae,qfo,Nfo,ene,jfo,Dfo,Gfo,x,Qh,one,Ofo,Vfo,jP,Xfo,zfo,Qfo,Wh,rne,Wfo,Hfo,DP,Ufo,Jfo,Yfo,Hh,tne,Kfo,Zfo,GP,emo,omo,rmo,Uh,ane,tmo,amo,OP,nmo,smo,lmo,Jh,nne,imo,dmo,VP,cmo,fmo,mmo,Yh,sne,gmo,hmo,XP,pmo,umo,_mo,Kh,lne,bmo,vmo,zP,Fmo,Tmo,Mmo,Zh,ine,Emo,Cmo,QP,wmo,Amo,ymo,ep,dne,Lmo,xmo,WP,$mo,kmo,Smo,op,cne,Rmo,Bmo,HP,Pmo,Imo,qmo,rp,fne,Nmo,jmo,UP,Dmo,Gmo,Omo,tp,mne,Vmo,Xmo,JP,zmo,Qmo,Wmo,ap,gne,Hmo,Umo,YP,Jmo,Ymo,Kmo,np,hne,Zmo,ego,KP,ogo,rgo,tgo,sp,pne,ago,ngo,ZP,sgo,lgo,igo,lp,une,dgo,cgo,eI,fgo,mgo,ggo,ip,_ne,hgo,pgo,oI,ugo,_go,bgo,dp,bne,vgo,Fgo,rI,Tgo,Mgo,Ego,cp,vne,Cgo,wgo,tI,Ago,ygo,Lgo,fp,Fne,xgo,$go,aI,kgo,Sgo,Rgo,mp,Tne,Bgo,Pgo,nI,Igo,qgo,Ngo,gp,Mne,jgo,Dgo,sI,Ggo,Ogo,Vgo,hp,Ene,Xgo,zgo,lI,Qgo,Wgo,Hgo,pp,Cne,Ugo,Jgo,iI,Ygo,Kgo,Zgo,up,wne,eho,oho,dI,rho,tho,aho,_p,Ane,nho,sho,cI,lho,iho,dho,bp,yne,cho,fho,fI,mho,gho,hho,vp,Lne,pho,uho,mI,_ho,bho,vho,Fp,xne,Fho,Tho,gI,Mho,Eho,Cho,Tp,$ne,who,Aho,hI,yho,Lho,xho,Mp,kne,$ho,kho,pI,Sho,Rho,Bho,Ss,Sne,Pho,Iho,uI,qho,Nho,_I,jho,Dho,Gho,Ep,Rne,Oho,Vho,bI,Xho,zho,Qho,Cp,Bne,Who,Hho,vI,Uho,Jho,Yho,wp,Pne,Kho,Zho,FI,epo,opo,rpo,Ap,Ine,tpo,apo,TI,npo,spo,lpo,yp,qne,ipo,dpo,MI,cpo,fpo,mpo,Lp,Nne,gpo,hpo,EI,ppo,upo,_po,xp,jne,bpo,vpo,CI,Fpo,Tpo,Mpo,$p,Dne,Epo,Cpo,wI,wpo,Apo,ypo,kp,Gne,Lpo,xpo,AI,$po,kpo,Spo,Sp,One,Rpo,Bpo,yI,Ppo,Ipo,qpo,Rp,Vne,Npo,jpo,LI,Dpo,Gpo,Opo,Bp,Xne,Vpo,Xpo,xI,zpo,Qpo,Wpo,Pp,zne,Hpo,Upo,$I,Jpo,Ypo,Kpo,Ip,Qne,Zpo,euo,kI,ouo,ruo,tuo,qp,Wne,auo,nuo,SI,suo,luo,iuo,Np,Hne,duo,cuo,RI,fuo,muo,guo,jp,Une,huo,puo,BI,uuo,_uo,buo,Dp,Jne,vuo,Fuo,PI,Tuo,Muo,Euo,Gp,Yne,Cuo,wuo,II,Auo,yuo,Luo,Op,Kne,xuo,$uo,qI,kuo,Suo,Ruo,Vp,Zne,Buo,Puo,NI,Iuo,quo,Nuo,Xp,ese,juo,Duo,jI,Guo,Ouo,Vuo,zp,ose,Xuo,zuo,DI,Quo,Wuo,Huo,Qp,rse,Uuo,Juo,GI,Yuo,Kuo,Zuo,Wp,tse,e_o,o_o,OI,r_o,t_o,a_o,Hp,ase,n_o,s_o,VI,l_o,i_o,d_o,Up,nse,c_o,f_o,XI,m_o,g_o,h_o,Jp,sse,p_o,u_o,zI,__o,b_o,v_o,Yp,lse,F_o,T_o,QI,M_o,E_o,C_o,Kp,ise,w_o,A_o,WI,y_o,L_o,x_o,Zp,dse,$_o,k_o,HI,S_o,R_o,B_o,eu,cse,P_o,I_o,UI,q_o,N_o,j_o,ou,fse,D_o,G_o,JI,O_o,V_o,X_o,ru,mse,z_o,Q_o,YI,W_o,H_o,U_o,tu,gse,J_o,Y_o,KI,K_o,Z_o,e1o,au,hse,o1o,r1o,ZI,t1o,a1o,n1o,nu,pse,s1o,l1o,eq,i1o,d1o,c1o,su,use,f1o,m1o,oq,g1o,h1o,p1o,lu,_se,u1o,_1o,rq,b1o,v1o,F1o,iu,bse,T1o,M1o,tq,E1o,C1o,w1o,du,vse,A1o,y1o,aq,L1o,x1o,$1o,cu,Fse,k1o,S1o,nq,R1o,B1o,P1o,fu,Tse,I1o,q1o,sq,N1o,j1o,D1o,mu,Mse,G1o,O1o,lq,V1o,X1o,z1o,gu,Ese,Q1o,W1o,iq,H1o,U1o,J1o,hu,Cse,Y1o,K1o,dq,Z1o,ebo,obo,pu,wse,rbo,tbo,cq,abo,nbo,sbo,uu,Ase,lbo,ibo,fq,dbo,cbo,fbo,_u,yse,mbo,gbo,mq,hbo,pbo,ubo,bu,Lse,_bo,bbo,gq,vbo,Fbo,Tbo,vu,xse,Mbo,Ebo,hq,Cbo,wbo,Abo,Fu,$se,ybo,Lbo,pq,xbo,$bo,kbo,Tu,kse,Sbo,Rbo,uq,Bbo,Pbo,Ibo,Mu,Sse,qbo,Nbo,_q,jbo,Dbo,Gbo,Eu,Rse,Obo,Vbo,bq,Xbo,zbo,Qbo,Cu,Bse,Wbo,Hbo,vq,Ubo,Jbo,Ybo,wu,Pse,Kbo,Zbo,Fq,e2o,o2o,r2o,Au,Ise,t2o,a2o,Tq,n2o,s2o,l2o,yu,qse,i2o,d2o,Mq,c2o,f2o,m2o,Lu,Nse,g2o,h2o,Eq,p2o,u2o,_2o,xu,jse,b2o,v2o,Cq,F2o,T2o,M2o,$u,Dse,E2o,C2o,wq,w2o,A2o,y2o,ku,Gse,L2o,x2o,Aq,$2o,k2o,S2o,Su,Ose,R2o,B2o,yq,P2o,I2o,q2o,Ru,Vse,N2o,j2o,Lq,D2o,G2o,O2o,Bu,V2o,Xse,X2o,z2o,zse,Q2o,W2o,Pu,eIe,Ci,Iu,Qse,y0,H2o,Wse,U2o,oIe,xo,L0,J2o,wi,Y2o,xq,K2o,Z2o,$q,e3o,o3o,r3o,x0,t3o,Hse,a3o,n3o,s3o,rt,$0,l3o,Use,i3o,d3o,Ai,c3o,Jse,f3o,m3o,kq,g3o,h3o,p3o,qu,u3o,Ue,k0,_3o,Yse,b3o,v3o,ya,F3o,Kse,T3o,M3o,Zse,E3o,C3o,ele,w3o,A3o,y3o,G,Nu,ole,L3o,x3o,Sq,$3o,k3o,S3o,ju,rle,R3o,B3o,Rq,P3o,I3o,q3o,Du,tle,N3o,j3o,Bq,D3o,G3o,O3o,Gu,ale,V3o,X3o,Pq,z3o,Q3o,W3o,Ou,nle,H3o,U3o,Iq,J3o,Y3o,K3o,Vu,sle,Z3o,evo,qq,ovo,rvo,tvo,Xu,lle,avo,nvo,Nq,svo,lvo,ivo,zu,ile,dvo,cvo,jq,fvo,mvo,gvo,Qu,dle,hvo,pvo,Dq,uvo,_vo,bvo,Wu,cle,vvo,Fvo,Gq,Tvo,Mvo,Evo,Hu,fle,Cvo,wvo,Oq,Avo,yvo,Lvo,Uu,mle,xvo,$vo,Vq,kvo,Svo,Rvo,Ju,gle,Bvo,Pvo,Xq,Ivo,qvo,Nvo,Yu,hle,jvo,Dvo,zq,Gvo,Ovo,Vvo,Ku,ple,Xvo,zvo,Qq,Qvo,Wvo,Hvo,Zu,ule,Uvo,Jvo,Wq,Yvo,Kvo,Zvo,e_,_le,eFo,oFo,Hq,rFo,tFo,aFo,o_,ble,nFo,sFo,Uq,lFo,iFo,dFo,r_,vle,cFo,fFo,Jq,mFo,gFo,hFo,t_,Fle,pFo,uFo,Yq,_Fo,bFo,vFo,a_,Tle,FFo,TFo,Kq,MFo,EFo,CFo,n_,Mle,wFo,AFo,Zq,yFo,LFo,xFo,s_,Ele,$Fo,kFo,eN,SFo,RFo,BFo,l_,Cle,PFo,IFo,oN,qFo,NFo,jFo,i_,wle,DFo,GFo,rN,OFo,VFo,XFo,d_,Ale,zFo,QFo,tN,WFo,HFo,UFo,c_,yle,JFo,YFo,aN,KFo,ZFo,eTo,f_,Lle,oTo,rTo,nN,tTo,aTo,nTo,m_,xle,sTo,lTo,sN,iTo,dTo,cTo,g_,$le,fTo,mTo,lN,gTo,hTo,pTo,h_,kle,uTo,_To,iN,bTo,vTo,FTo,p_,Sle,TTo,MTo,dN,ETo,CTo,wTo,u_,Rle,ATo,yTo,cN,LTo,xTo,$To,__,Ble,kTo,STo,fN,RTo,BTo,PTo,b_,Ple,ITo,qTo,mN,NTo,jTo,DTo,v_,Ile,GTo,OTo,gN,VTo,XTo,zTo,F_,qle,QTo,WTo,hN,HTo,UTo,JTo,T_,Nle,YTo,KTo,pN,ZTo,e7o,o7o,M_,jle,r7o,t7o,uN,a7o,n7o,s7o,E_,Dle,l7o,i7o,_N,d7o,c7o,f7o,C_,m7o,Gle,g7o,h7o,Ole,p7o,u7o,w_,rIe,yi,A_,Vle,S0,_7o,Xle,b7o,tIe,$o,R0,v7o,Li,F7o,bN,T7o,M7o,vN,E7o,C7o,w7o,B0,A7o,zle,y7o,L7o,x7o,tt,P0,$7o,Qle,k7o,S7o,xi,R7o,Wle,B7o,P7o,FN,I7o,q7o,N7o,y_,j7o,Je,I0,D7o,Hle,G7o,O7o,La,V7o,Ule,X7o,z7o,Jle,Q7o,W7o,Yle,H7o,U7o,J7o,z,L_,Kle,Y7o,K7o,TN,Z7o,eMo,oMo,x_,Zle,rMo,tMo,MN,aMo,nMo,sMo,$_,eie,lMo,iMo,EN,dMo,cMo,fMo,k_,oie,mMo,gMo,CN,hMo,pMo,uMo,S_,rie,_Mo,bMo,wN,vMo,FMo,TMo,R_,tie,MMo,EMo,AN,CMo,wMo,AMo,B_,aie,yMo,LMo,yN,xMo,$Mo,kMo,P_,nie,SMo,RMo,LN,BMo,PMo,IMo,I_,sie,qMo,NMo,xN,jMo,DMo,GMo,q_,lie,OMo,VMo,$N,XMo,zMo,QMo,N_,iie,WMo,HMo,kN,UMo,JMo,YMo,j_,die,KMo,ZMo,SN,e4o,o4o,r4o,D_,cie,t4o,a4o,RN,n4o,s4o,l4o,G_,fie,i4o,d4o,BN,c4o,f4o,m4o,O_,mie,g4o,h4o,PN,p4o,u4o,_4o,V_,gie,b4o,v4o,IN,F4o,T4o,M4o,X_,hie,E4o,C4o,qN,w4o,A4o,y4o,z_,pie,L4o,x4o,NN,$4o,k4o,S4o,Q_,uie,R4o,B4o,jN,P4o,I4o,q4o,W_,_ie,N4o,j4o,DN,D4o,G4o,O4o,H_,bie,V4o,X4o,GN,z4o,Q4o,W4o,U_,vie,H4o,U4o,ON,J4o,Y4o,K4o,J_,Fie,Z4o,eEo,VN,oEo,rEo,tEo,Y_,Tie,aEo,nEo,XN,sEo,lEo,iEo,K_,Mie,dEo,cEo,zN,fEo,mEo,gEo,Z_,Eie,hEo,pEo,QN,uEo,_Eo,bEo,e1,Cie,vEo,FEo,WN,TEo,MEo,EEo,o1,wie,CEo,wEo,HN,AEo,yEo,LEo,r1,Aie,xEo,$Eo,UN,kEo,SEo,REo,t1,yie,BEo,PEo,JN,IEo,qEo,NEo,a1,Lie,jEo,DEo,YN,GEo,OEo,VEo,n1,xie,XEo,zEo,KN,QEo,WEo,HEo,s1,$ie,UEo,JEo,ZN,YEo,KEo,ZEo,l1,kie,e5o,o5o,ej,r5o,t5o,a5o,i1,Sie,n5o,s5o,oj,l5o,i5o,d5o,d1,c5o,Rie,f5o,m5o,Bie,g5o,h5o,c1,aIe,$i,f1,Pie,q0,p5o,Iie,u5o,nIe,ko,N0,_5o,ki,b5o,rj,v5o,F5o,tj,T5o,M5o,E5o,j0,C5o,qie,w5o,A5o,y5o,at,D0,L5o,Nie,x5o,$5o,Si,k5o,jie,S5o,R5o,aj,B5o,P5o,I5o,m1,q5o,Ye,G0,N5o,Die,j5o,D5o,xa,G5o,Gie,O5o,V5o,Oie,X5o,z5o,Vie,Q5o,W5o,H5o,Q,g1,Xie,U5o,J5o,nj,Y5o,K5o,Z5o,h1,zie,eCo,oCo,sj,rCo,tCo,aCo,p1,Qie,nCo,sCo,lj,lCo,iCo,dCo,u1,Wie,cCo,fCo,ij,mCo,gCo,hCo,_1,Hie,pCo,uCo,dj,_Co,bCo,vCo,b1,Uie,FCo,TCo,cj,MCo,ECo,CCo,v1,Jie,wCo,ACo,fj,yCo,LCo,xCo,F1,Yie,$Co,kCo,mj,SCo,RCo,BCo,T1,Kie,PCo,ICo,gj,qCo,NCo,jCo,M1,Zie,DCo,GCo,hj,OCo,VCo,XCo,E1,ede,zCo,QCo,pj,WCo,HCo,UCo,C1,ode,JCo,YCo,uj,KCo,ZCo,ewo,w1,rde,owo,rwo,_j,two,awo,nwo,A1,tde,swo,lwo,bj,iwo,dwo,cwo,y1,ade,fwo,mwo,vj,gwo,hwo,pwo,L1,nde,uwo,_wo,Fj,bwo,vwo,Fwo,x1,sde,Two,Mwo,Tj,Ewo,Cwo,wwo,$1,lde,Awo,ywo,Mj,Lwo,xwo,$wo,k1,ide,kwo,Swo,Ej,Rwo,Bwo,Pwo,S1,dde,Iwo,qwo,Cj,Nwo,jwo,Dwo,R1,cde,Gwo,Owo,wj,Vwo,Xwo,zwo,B1,fde,Qwo,Wwo,Aj,Hwo,Uwo,Jwo,P1,mde,Ywo,Kwo,yj,Zwo,eAo,oAo,I1,gde,rAo,tAo,Lj,aAo,nAo,sAo,q1,hde,lAo,iAo,xj,dAo,cAo,fAo,N1,pde,mAo,gAo,$j,hAo,pAo,uAo,j1,ude,_Ao,bAo,kj,vAo,FAo,TAo,D1,_de,MAo,EAo,Sj,CAo,wAo,AAo,G1,bde,yAo,LAo,Rj,xAo,$Ao,kAo,O1,vde,SAo,RAo,Bj,BAo,PAo,IAo,V1,Fde,qAo,NAo,Tde,jAo,DAo,GAo,X1,Mde,OAo,VAo,Pj,XAo,zAo,QAo,z1,Ede,WAo,HAo,Ij,UAo,JAo,YAo,Q1,Cde,KAo,ZAo,qj,e6o,o6o,r6o,W1,wde,t6o,a6o,Nj,n6o,s6o,l6o,H1,i6o,Ade,d6o,c6o,yde,f6o,m6o,U1,sIe,Ri,J1,Lde,O0,g6o,xde,h6o,lIe,So,V0,p6o,Bi,u6o,jj,_6o,b6o,Dj,v6o,F6o,T6o,X0,M6o,$de,E6o,C6o,w6o,nt,z0,A6o,kde,y6o,L6o,Pi,x6o,Sde,$6o,k6o,Gj,S6o,R6o,B6o,Y1,P6o,Ke,Q0,I6o,Rde,q6o,N6o,$a,j6o,Bde,D6o,G6o,Pde,O6o,V6o,Ide,X6o,z6o,Q6o,he,K1,qde,W6o,H6o,Oj,U6o,J6o,Y6o,Z1,Nde,K6o,Z6o,Vj,e0o,o0o,r0o,eb,jde,t0o,a0o,Xj,n0o,s0o,l0o,ob,Dde,i0o,d0o,zj,c0o,f0o,m0o,rb,Gde,g0o,h0o,Qj,p0o,u0o,_0o,tb,Ode,b0o,v0o,Wj,F0o,T0o,M0o,ab,Vde,E0o,C0o,Hj,w0o,A0o,y0o,nb,Xde,L0o,x0o,Uj,$0o,k0o,S0o,sb,zde,R0o,B0o,Jj,P0o,I0o,q0o,lb,Qde,N0o,j0o,Yj,D0o,G0o,O0o,ib,Wde,V0o,X0o,Kj,z0o,Q0o,W0o,db,Hde,H0o,U0o,Zj,J0o,Y0o,K0o,cb,Ude,Z0o,eyo,eD,oyo,ryo,tyo,fb,Jde,ayo,nyo,oD,syo,lyo,iyo,mb,Yde,dyo,cyo,rD,fyo,myo,gyo,gb,Kde,hyo,pyo,tD,uyo,_yo,byo,hb,Zde,vyo,Fyo,aD,Tyo,Myo,Eyo,pb,Cyo,ece,wyo,Ayo,oce,yyo,Lyo,ub,iIe,Ii,_b,rce,W0,xyo,tce,$yo,dIe,Ro,H0,kyo,qi,Syo,nD,Ryo,Byo,sD,Pyo,Iyo,qyo,U0,Nyo,ace,jyo,Dyo,Gyo,st,J0,Oyo,nce,Vyo,Xyo,Ni,zyo,sce,Qyo,Wyo,lD,Hyo,Uyo,Jyo,bb,Yyo,Ze,Y0,Kyo,lce,Zyo,eLo,ka,oLo,ice,rLo,tLo,dce,aLo,nLo,cce,sLo,lLo,iLo,q,vb,fce,dLo,cLo,iD,fLo,mLo,gLo,Fb,mce,hLo,pLo,dD,uLo,_Lo,bLo,Tb,gce,vLo,FLo,cD,TLo,MLo,ELo,Mb,hce,CLo,wLo,fD,ALo,yLo,LLo,Eb,pce,xLo,$Lo,mD,kLo,SLo,RLo,Cb,uce,BLo,PLo,gD,ILo,qLo,NLo,wb,_ce,jLo,DLo,hD,GLo,OLo,VLo,Ab,bce,XLo,zLo,pD,QLo,WLo,HLo,yb,vce,ULo,JLo,uD,YLo,KLo,ZLo,Lb,Fce,e8o,o8o,_D,r8o,t8o,a8o,xb,Tce,n8o,s8o,bD,l8o,i8o,d8o,$b,Mce,c8o,f8o,vD,m8o,g8o,h8o,kb,Ece,p8o,u8o,FD,_8o,b8o,v8o,Sb,Cce,F8o,T8o,TD,M8o,E8o,C8o,Rb,wce,w8o,A8o,MD,y8o,L8o,x8o,Bb,Ace,$8o,k8o,ED,S8o,R8o,B8o,Pb,yce,P8o,I8o,CD,q8o,N8o,j8o,Ib,Lce,D8o,G8o,wD,O8o,V8o,X8o,qb,xce,z8o,Q8o,AD,W8o,H8o,U8o,Nb,$ce,J8o,Y8o,yD,K8o,Z8o,exo,jb,kce,oxo,rxo,LD,txo,axo,nxo,Db,Sce,sxo,lxo,xD,ixo,dxo,cxo,Gb,Rce,fxo,mxo,$D,gxo,hxo,pxo,Ob,Bce,uxo,_xo,kD,bxo,vxo,Fxo,Vb,Pce,Txo,Mxo,SD,Exo,Cxo,wxo,Xb,Ice,Axo,yxo,RD,Lxo,xxo,$xo,zb,qce,kxo,Sxo,BD,Rxo,Bxo,Pxo,Qb,Nce,Ixo,qxo,PD,Nxo,jxo,Dxo,Wb,jce,Gxo,Oxo,ID,Vxo,Xxo,zxo,Hb,Dce,Qxo,Wxo,qD,Hxo,Uxo,Jxo,Ub,Gce,Yxo,Kxo,ND,Zxo,e9o,o9o,Jb,Oce,r9o,t9o,jD,a9o,n9o,s9o,Yb,Vce,l9o,i9o,DD,d9o,c9o,f9o,Kb,Xce,m9o,g9o,GD,h9o,p9o,u9o,Zb,zce,_9o,b9o,OD,v9o,F9o,T9o,e2,Qce,M9o,E9o,VD,C9o,w9o,A9o,o2,Wce,y9o,L9o,XD,x9o,$9o,k9o,r2,Hce,S9o,R9o,zD,B9o,P9o,I9o,t2,Uce,q9o,N9o,QD,j9o,D9o,G9o,a2,Jce,O9o,V9o,WD,X9o,z9o,Q9o,n2,Yce,W9o,H9o,HD,U9o,J9o,Y9o,s2,Kce,K9o,Z9o,UD,e$o,o$o,r$o,l2,Zce,t$o,a$o,JD,n$o,s$o,l$o,i2,efe,i$o,d$o,YD,c$o,f$o,m$o,d2,ofe,g$o,h$o,KD,p$o,u$o,_$o,c2,rfe,b$o,v$o,ZD,F$o,T$o,M$o,f2,tfe,E$o,C$o,eG,w$o,A$o,y$o,m2,afe,L$o,x$o,oG,$$o,k$o,S$o,g2,R$o,nfe,B$o,P$o,sfe,I$o,q$o,h2,cIe,ji,p2,lfe,K0,N$o,ife,j$o,fIe,Bo,Z0,D$o,Di,G$o,rG,O$o,V$o,tG,X$o,z$o,Q$o,ey,W$o,dfe,H$o,U$o,J$o,lt,oy,Y$o,cfe,K$o,Z$o,Gi,eko,ffe,oko,rko,aG,tko,ako,nko,u2,sko,eo,ry,lko,mfe,iko,dko,Sa,cko,gfe,fko,mko,hfe,gko,hko,pfe,pko,uko,_ko,Y,_2,ufe,bko,vko,nG,Fko,Tko,Mko,b2,_fe,Eko,Cko,sG,wko,Ako,yko,v2,bfe,Lko,xko,lG,$ko,kko,Sko,F2,vfe,Rko,Bko,iG,Pko,Iko,qko,T2,Ffe,Nko,jko,dG,Dko,Gko,Oko,M2,Tfe,Vko,Xko,cG,zko,Qko,Wko,E2,Mfe,Hko,Uko,fG,Jko,Yko,Kko,C2,Efe,Zko,eSo,mG,oSo,rSo,tSo,w2,Cfe,aSo,nSo,gG,sSo,lSo,iSo,A2,wfe,dSo,cSo,hG,fSo,mSo,gSo,y2,Afe,hSo,pSo,pG,uSo,_So,bSo,L2,yfe,vSo,FSo,uG,TSo,MSo,ESo,x2,Lfe,CSo,wSo,_G,ASo,ySo,LSo,$2,xfe,xSo,$So,bG,kSo,SSo,RSo,k2,$fe,BSo,PSo,vG,ISo,qSo,NSo,S2,kfe,jSo,DSo,FG,GSo,OSo,VSo,R2,Sfe,XSo,zSo,TG,QSo,WSo,HSo,B2,Rfe,USo,JSo,MG,YSo,KSo,ZSo,P2,Bfe,eRo,oRo,EG,rRo,tRo,aRo,I2,Pfe,nRo,sRo,CG,lRo,iRo,dRo,q2,Ife,cRo,fRo,wG,mRo,gRo,hRo,N2,qfe,pRo,uRo,AG,_Ro,bRo,vRo,j2,Nfe,FRo,TRo,yG,MRo,ERo,CRo,D2,jfe,wRo,ARo,LG,yRo,LRo,xRo,G2,Dfe,$Ro,kRo,xG,SRo,RRo,BRo,O2,Gfe,PRo,IRo,$G,qRo,NRo,jRo,V2,Ofe,DRo,GRo,kG,ORo,VRo,XRo,X2,Vfe,zRo,QRo,SG,WRo,HRo,URo,z2,Xfe,JRo,YRo,RG,KRo,ZRo,eBo,Q2,oBo,zfe,rBo,tBo,Qfe,aBo,nBo,W2,mIe,Oi,H2,Wfe,ty,sBo,Hfe,lBo,gIe,Po,ay,iBo,Vi,dBo,BG,cBo,fBo,PG,mBo,gBo,hBo,ny,pBo,Ufe,uBo,_Bo,bBo,it,sy,vBo,Jfe,FBo,TBo,Xi,MBo,Yfe,EBo,CBo,IG,wBo,ABo,yBo,U2,LBo,oo,ly,xBo,Kfe,$Bo,kBo,Ra,SBo,Zfe,RBo,BBo,eme,PBo,IBo,ome,qBo,NBo,jBo,Yr,J2,rme,DBo,GBo,qG,OBo,VBo,XBo,Y2,tme,zBo,QBo,NG,WBo,HBo,UBo,K2,ame,JBo,YBo,jG,KBo,ZBo,ePo,Z2,nme,oPo,rPo,DG,tPo,aPo,nPo,e3,sme,sPo,lPo,GG,iPo,dPo,cPo,o3,fPo,lme,mPo,gPo,ime,hPo,pPo,r3,hIe,zi,t3,dme,iy,uPo,cme,_Po,pIe,Io,dy,bPo,Qi,vPo,OG,FPo,TPo,VG,MPo,EPo,CPo,cy,wPo,fme,APo,yPo,LPo,dt,fy,xPo,mme,$Po,kPo,Wi,SPo,gme,RPo,BPo,XG,PPo,IPo,qPo,a3,NPo,ro,my,jPo,hme,DPo,GPo,Ba,OPo,pme,VPo,XPo,ume,zPo,QPo,_me,WPo,HPo,UPo,U,n3,bme,JPo,YPo,zG,KPo,ZPo,eIo,s3,vme,oIo,rIo,QG,tIo,aIo,nIo,l3,Fme,sIo,lIo,WG,iIo,dIo,cIo,i3,Tme,fIo,mIo,HG,gIo,hIo,pIo,d3,Mme,uIo,_Io,UG,bIo,vIo,FIo,c3,Eme,TIo,MIo,JG,EIo,CIo,wIo,f3,Cme,AIo,yIo,YG,LIo,xIo,$Io,m3,wme,kIo,SIo,KG,RIo,BIo,PIo,g3,Ame,IIo,qIo,ZG,NIo,jIo,DIo,h3,yme,GIo,OIo,eO,VIo,XIo,zIo,p3,Lme,QIo,WIo,oO,HIo,UIo,JIo,u3,xme,YIo,KIo,rO,ZIo,eqo,oqo,_3,$me,rqo,tqo,tO,aqo,nqo,sqo,b3,kme,lqo,iqo,aO,dqo,cqo,fqo,v3,Sme,mqo,gqo,nO,hqo,pqo,uqo,F3,Rme,_qo,bqo,sO,vqo,Fqo,Tqo,T3,Bme,Mqo,Eqo,lO,Cqo,wqo,Aqo,M3,Pme,yqo,Lqo,iO,xqo,$qo,kqo,E3,Ime,Sqo,Rqo,dO,Bqo,Pqo,Iqo,C3,qme,qqo,Nqo,cO,jqo,Dqo,Gqo,w3,Nme,Oqo,Vqo,fO,Xqo,zqo,Qqo,A3,jme,Wqo,Hqo,mO,Uqo,Jqo,Yqo,y3,Dme,Kqo,Zqo,gO,eNo,oNo,rNo,L3,Gme,tNo,aNo,hO,nNo,sNo,lNo,x3,Ome,iNo,dNo,pO,cNo,fNo,mNo,$3,Vme,gNo,hNo,uO,pNo,uNo,_No,k3,Xme,bNo,vNo,_O,FNo,TNo,MNo,S3,zme,ENo,CNo,bO,wNo,ANo,yNo,R3,Qme,LNo,xNo,vO,$No,kNo,SNo,B3,Wme,RNo,BNo,FO,PNo,INo,qNo,P3,Hme,NNo,jNo,TO,DNo,GNo,ONo,I3,Ume,VNo,XNo,MO,zNo,QNo,WNo,q3,Jme,HNo,UNo,EO,JNo,YNo,KNo,N3,ZNo,Yme,ejo,ojo,Kme,rjo,tjo,j3,uIe,Hi,D3,Zme,gy,ajo,ege,njo,_Ie,qo,hy,sjo,Ui,ljo,CO,ijo,djo,wO,cjo,fjo,mjo,py,gjo,oge,hjo,pjo,ujo,ct,uy,_jo,rge,bjo,vjo,Ji,Fjo,tge,Tjo,Mjo,AO,Ejo,Cjo,wjo,G3,Ajo,to,_y,yjo,age,Ljo,xjo,Pa,$jo,nge,kjo,Sjo,sge,Rjo,Bjo,lge,Pjo,Ijo,qjo,O,O3,ige,Njo,jjo,yO,Djo,Gjo,Ojo,V3,dge,Vjo,Xjo,LO,zjo,Qjo,Wjo,X3,cge,Hjo,Ujo,xO,Jjo,Yjo,Kjo,z3,fge,Zjo,eDo,$O,oDo,rDo,tDo,Q3,mge,aDo,nDo,kO,sDo,lDo,iDo,W3,gge,dDo,cDo,SO,fDo,mDo,gDo,H3,hge,hDo,pDo,RO,uDo,_Do,bDo,U3,pge,vDo,FDo,BO,TDo,MDo,EDo,J3,uge,CDo,wDo,PO,ADo,yDo,LDo,Y3,_ge,xDo,$Do,IO,kDo,SDo,RDo,K3,bge,BDo,PDo,qO,IDo,qDo,NDo,Z3,vge,jDo,DDo,NO,GDo,ODo,VDo,ev,Fge,XDo,zDo,jO,QDo,WDo,HDo,ov,Tge,UDo,JDo,DO,YDo,KDo,ZDo,rv,Mge,eGo,oGo,GO,rGo,tGo,aGo,tv,Ege,nGo,sGo,OO,lGo,iGo,dGo,av,Cge,cGo,fGo,VO,mGo,gGo,hGo,nv,wge,pGo,uGo,XO,_Go,bGo,vGo,sv,Age,FGo,TGo,zO,MGo,EGo,CGo,lv,yge,wGo,AGo,QO,yGo,LGo,xGo,iv,Lge,$Go,kGo,WO,SGo,RGo,BGo,dv,xge,PGo,IGo,HO,qGo,NGo,jGo,cv,$ge,DGo,GGo,UO,OGo,VGo,XGo,fv,kge,zGo,QGo,JO,WGo,HGo,UGo,mv,Sge,JGo,YGo,YO,KGo,ZGo,eOo,gv,Rge,oOo,rOo,KO,tOo,aOo,nOo,hv,Bge,sOo,lOo,ZO,iOo,dOo,cOo,pv,Pge,fOo,mOo,eV,gOo,hOo,pOo,uv,Ige,uOo,_Oo,oV,bOo,vOo,FOo,_v,qge,TOo,MOo,rV,EOo,COo,wOo,bv,Nge,AOo,yOo,tV,LOo,xOo,$Oo,vv,jge,kOo,SOo,aV,ROo,BOo,POo,Fv,Dge,IOo,qOo,nV,NOo,jOo,DOo,Tv,Gge,GOo,OOo,sV,VOo,XOo,zOo,Mv,Oge,QOo,WOo,lV,HOo,UOo,JOo,Ev,Vge,YOo,KOo,iV,ZOo,eVo,oVo,Cv,Xge,rVo,tVo,dV,aVo,nVo,sVo,wv,zge,lVo,iVo,cV,dVo,cVo,fVo,Av,Qge,mVo,gVo,fV,hVo,pVo,uVo,yv,_Vo,Wge,bVo,vVo,Hge,FVo,TVo,Lv,bIe,Yi,xv,Uge,by,MVo,Jge,EVo,vIe,No,vy,CVo,Ki,wVo,mV,AVo,yVo,gV,LVo,xVo,$Vo,Fy,kVo,Yge,SVo,RVo,BVo,ft,Ty,PVo,Kge,IVo,qVo,Zi,NVo,Zge,jVo,DVo,hV,GVo,OVo,VVo,$v,XVo,ao,My,zVo,ehe,QVo,WVo,Ia,HVo,ohe,UVo,JVo,rhe,YVo,KVo,the,ZVo,eXo,oXo,ahe,kv,nhe,rXo,tXo,pV,aXo,nXo,sXo,Sv,lXo,she,iXo,dXo,lhe,cXo,fXo,Rv,FIe,ed,Bv,ihe,Ey,mXo,dhe,gXo,TIe,jo,Cy,hXo,od,pXo,uV,uXo,_Xo,_V,bXo,vXo,FXo,wy,TXo,che,MXo,EXo,CXo,mt,Ay,wXo,fhe,AXo,yXo,rd,LXo,mhe,xXo,$Xo,bV,kXo,SXo,RXo,Pv,BXo,no,yy,PXo,ghe,IXo,qXo,qa,NXo,hhe,jXo,DXo,phe,GXo,OXo,uhe,VXo,XXo,zXo,Fe,Iv,_he,QXo,WXo,vV,HXo,UXo,JXo,qv,bhe,YXo,KXo,FV,ZXo,ezo,ozo,Nv,vhe,rzo,tzo,TV,azo,nzo,szo,Rs,Fhe,lzo,izo,MV,dzo,czo,EV,fzo,mzo,gzo,jv,The,hzo,pzo,CV,uzo,_zo,bzo,gt,Mhe,vzo,Fzo,wV,Tzo,Mzo,AV,Ezo,Czo,yV,wzo,Azo,yzo,Dv,Ehe,Lzo,xzo,LV,$zo,kzo,Szo,Gv,Che,Rzo,Bzo,xV,Pzo,Izo,qzo,Ov,whe,Nzo,jzo,$V,Dzo,Gzo,Ozo,Vv,Ahe,Vzo,Xzo,kV,zzo,Qzo,Wzo,Xv,yhe,Hzo,Uzo,SV,Jzo,Yzo,Kzo,zv,Lhe,Zzo,eQo,RV,oQo,rQo,tQo,Qv,xhe,aQo,nQo,BV,sQo,lQo,iQo,Wv,dQo,$he,cQo,fQo,khe,mQo,gQo,Hv,MIe,td,Uv,She,Ly,hQo,Rhe,pQo,EIe,Do,xy,uQo,ad,_Qo,PV,bQo,vQo,IV,FQo,TQo,MQo,$y,EQo,Bhe,CQo,wQo,AQo,ht,ky,yQo,Phe,LQo,xQo,nd,$Qo,Ihe,kQo,SQo,qV,RQo,BQo,PQo,Jv,IQo,so,Sy,qQo,qhe,NQo,jQo,Na,DQo,Nhe,GQo,OQo,jhe,VQo,XQo,Dhe,zQo,QQo,WQo,Ghe,Yv,Ohe,HQo,UQo,NV,JQo,YQo,KQo,Kv,ZQo,Vhe,eWo,oWo,Xhe,rWo,tWo,Zv,CIe,sd,eF,zhe,Ry,aWo,Qhe,nWo,wIe,Go,By,sWo,ld,lWo,jV,iWo,dWo,DV,cWo,fWo,mWo,Py,gWo,Whe,hWo,pWo,uWo,pt,Iy,_Wo,Hhe,bWo,vWo,id,FWo,Uhe,TWo,MWo,GV,EWo,CWo,wWo,oF,AWo,lo,qy,yWo,Jhe,LWo,xWo,ja,$Wo,Yhe,kWo,SWo,Khe,RWo,BWo,Zhe,PWo,IWo,qWo,Ne,rF,epe,NWo,jWo,OV,DWo,GWo,OWo,tF,ope,VWo,XWo,VV,zWo,QWo,WWo,aF,rpe,HWo,UWo,XV,JWo,YWo,KWo,nF,tpe,ZWo,eHo,zV,oHo,rHo,tHo,sF,ape,aHo,nHo,QV,sHo,lHo,iHo,lF,npe,dHo,cHo,WV,fHo,mHo,gHo,iF,spe,hHo,pHo,HV,uHo,_Ho,bHo,dF,lpe,vHo,FHo,UV,THo,MHo,EHo,cF,CHo,ipe,wHo,AHo,dpe,yHo,LHo,fF,AIe,dd,mF,cpe,Ny,xHo,fpe,$Ho,yIe,Oo,jy,kHo,cd,SHo,JV,RHo,BHo,YV,PHo,IHo,qHo,Dy,NHo,mpe,jHo,DHo,GHo,ut,Gy,OHo,gpe,VHo,XHo,fd,zHo,hpe,QHo,WHo,KV,HHo,UHo,JHo,gF,YHo,io,Oy,KHo,ppe,ZHo,eUo,Da,oUo,upe,rUo,tUo,_pe,aUo,nUo,bpe,sUo,lUo,iUo,Ga,hF,vpe,dUo,cUo,ZV,fUo,mUo,gUo,pF,Fpe,hUo,pUo,eX,uUo,_Uo,bUo,uF,Tpe,vUo,FUo,oX,TUo,MUo,EUo,_F,Mpe,CUo,wUo,rX,AUo,yUo,LUo,bF,xUo,Epe,$Uo,kUo,Cpe,SUo,RUo,vF,LIe,md,FF,wpe,Vy,BUo,Ape,PUo,xIe,Vo,Xy,IUo,gd,qUo,tX,NUo,jUo,aX,DUo,GUo,OUo,zy,VUo,ype,XUo,zUo,QUo,_t,Qy,WUo,Lpe,HUo,UUo,hd,JUo,xpe,YUo,KUo,nX,ZUo,eJo,oJo,TF,rJo,co,Wy,tJo,$pe,aJo,nJo,Oa,sJo,kpe,lJo,iJo,Spe,dJo,cJo,Rpe,fJo,mJo,gJo,je,MF,Bpe,hJo,pJo,sX,uJo,_Jo,bJo,EF,Ppe,vJo,FJo,lX,TJo,MJo,EJo,CF,Ipe,CJo,wJo,iX,AJo,yJo,LJo,wF,qpe,xJo,$Jo,dX,kJo,SJo,RJo,AF,Npe,BJo,PJo,cX,IJo,qJo,NJo,yF,jpe,jJo,DJo,fX,GJo,OJo,VJo,LF,Dpe,XJo,zJo,mX,QJo,WJo,HJo,xF,Gpe,UJo,JJo,gX,YJo,KJo,ZJo,$F,eYo,Ope,oYo,rYo,Vpe,tYo,aYo,kF,$Ie,pd,SF,Xpe,Hy,nYo,zpe,sYo,kIe,Xo,Uy,lYo,ud,iYo,hX,dYo,cYo,pX,fYo,mYo,gYo,Jy,hYo,Qpe,pYo,uYo,_Yo,bt,Yy,bYo,Wpe,vYo,FYo,_d,TYo,Hpe,MYo,EYo,uX,CYo,wYo,AYo,RF,yYo,fo,Ky,LYo,Upe,xYo,$Yo,Va,kYo,Jpe,SYo,RYo,Ype,BYo,PYo,Kpe,IYo,qYo,NYo,Zy,BF,Zpe,jYo,DYo,_X,GYo,OYo,VYo,PF,eue,XYo,zYo,bX,QYo,WYo,HYo,IF,UYo,oue,JYo,YYo,rue,KYo,ZYo,qF,SIe,bd,NF,tue,eL,eKo,aue,oKo,RIe,zo,oL,rKo,vd,tKo,vX,aKo,nKo,FX,sKo,lKo,iKo,rL,dKo,nue,cKo,fKo,mKo,vt,tL,gKo,sue,hKo,pKo,Fd,uKo,lue,_Ko,bKo,TX,vKo,FKo,TKo,jF,MKo,mo,aL,EKo,iue,CKo,wKo,Xa,AKo,due,yKo,LKo,cue,xKo,$Ko,fue,kKo,SKo,RKo,za,DF,mue,BKo,PKo,MX,IKo,qKo,NKo,GF,gue,jKo,DKo,EX,GKo,OKo,VKo,OF,hue,XKo,zKo,CX,QKo,WKo,HKo,VF,pue,UKo,JKo,wX,YKo,KKo,ZKo,XF,eZo,uue,oZo,rZo,_ue,tZo,aZo,zF,BIe,Td,QF,bue,nL,nZo,vue,sZo,PIe,Qo,sL,lZo,Md,iZo,AX,dZo,cZo,yX,fZo,mZo,gZo,lL,hZo,Fue,pZo,uZo,_Zo,Ft,iL,bZo,Tue,vZo,FZo,Ed,TZo,Mue,MZo,EZo,LX,CZo,wZo,AZo,WF,yZo,go,dL,LZo,Eue,xZo,$Zo,Qa,kZo,Cue,SZo,RZo,wue,BZo,PZo,Aue,IZo,qZo,NZo,Cd,HF,yue,jZo,DZo,xX,GZo,OZo,VZo,UF,Lue,XZo,zZo,$X,QZo,WZo,HZo,JF,xue,UZo,JZo,kX,YZo,KZo,ZZo,YF,eer,$ue,oer,rer,kue,ter,aer,KF,IIe,wd,ZF,Sue,cL,ner,Rue,ser,qIe,Wo,fL,ler,Ad,ier,SX,der,cer,RX,fer,mer,ger,mL,her,Bue,per,uer,_er,Tt,gL,ber,Pue,ver,Fer,yd,Ter,Iue,Mer,Eer,BX,Cer,wer,Aer,eT,yer,ho,hL,Ler,que,xer,$er,Wa,ker,Nue,Ser,Rer,jue,Ber,Per,Due,Ier,qer,Ner,pL,oT,Gue,jer,Der,PX,Ger,Oer,Ver,rT,Oue,Xer,zer,IX,Qer,Wer,Her,tT,Uer,Vue,Jer,Yer,Xue,Ker,Zer,aT,NIe,Ld,nT,zue,uL,eor,Que,oor,jIe,Ho,_L,ror,xd,tor,qX,aor,nor,NX,sor,lor,ior,bL,dor,Wue,cor,mor,gor,Mt,vL,hor,Hue,por,uor,$d,_or,Uue,bor,vor,jX,For,Tor,Mor,sT,Eor,po,FL,Cor,Jue,wor,Aor,Ha,yor,Yue,Lor,xor,Kue,$or,kor,Zue,Sor,Ror,Bor,e_e,lT,o_e,Por,Ior,DX,qor,Nor,jor,iT,Dor,r_e,Gor,Oor,t_e,Vor,Xor,dT,DIe,kd,cT,a_e,TL,zor,n_e,Qor,GIe,Uo,ML,Wor,Sd,Hor,GX,Uor,Jor,OX,Yor,Kor,Zor,EL,err,s_e,orr,rrr,trr,Et,CL,arr,l_e,nrr,srr,Rd,lrr,i_e,irr,drr,VX,crr,frr,mrr,fT,grr,uo,wL,hrr,d_e,prr,urr,Ua,_rr,c_e,brr,vrr,f_e,Frr,Trr,m_e,Mrr,Err,Crr,Ja,mT,g_e,wrr,Arr,XX,yrr,Lrr,xrr,gT,h_e,$rr,krr,zX,Srr,Rrr,Brr,hT,p_e,Prr,Irr,QX,qrr,Nrr,jrr,pT,u_e,Drr,Grr,WX,Orr,Vrr,Xrr,uT,zrr,__e,Qrr,Wrr,b_e,Hrr,Urr,_T,OIe,Bd,bT,v_e,AL,Jrr,F_e,Yrr,VIe,Jo,yL,Krr,Pd,Zrr,HX,etr,otr,UX,rtr,ttr,atr,LL,ntr,T_e,str,ltr,itr,Ct,xL,dtr,M_e,ctr,ftr,Id,mtr,E_e,gtr,htr,JX,ptr,utr,_tr,vT,btr,_o,$L,vtr,C_e,Ftr,Ttr,Ya,Mtr,w_e,Etr,Ctr,A_e,wtr,Atr,y_e,ytr,Ltr,xtr,L_e,FT,x_e,$tr,ktr,YX,Str,Rtr,Btr,TT,Ptr,$_e,Itr,qtr,k_e,Ntr,jtr,MT,XIe,qd,ET,S_e,kL,Dtr,R_e,Gtr,zIe,Yo,SL,Otr,Nd,Vtr,KX,Xtr,ztr,ZX,Qtr,Wtr,Htr,RL,Utr,B_e,Jtr,Ytr,Ktr,wt,BL,Ztr,P_e,ear,oar,jd,rar,I_e,tar,aar,ez,nar,sar,lar,CT,iar,wr,PL,dar,q_e,car,far,Ka,mar,N_e,gar,har,j_e,par,uar,D_e,_ar,bar,Far,j,wT,G_e,Tar,Mar,oz,Ear,Car,war,AT,O_e,Aar,yar,rz,Lar,xar,$ar,yT,V_e,kar,Sar,tz,Rar,Bar,Par,LT,X_e,Iar,qar,az,Nar,jar,Dar,xT,z_e,Gar,Oar,nz,Var,Xar,zar,$T,Q_e,Qar,War,sz,Har,Uar,Jar,kT,W_e,Yar,Kar,lz,Zar,enr,onr,ST,H_e,rnr,tnr,iz,anr,nnr,snr,RT,U_e,lnr,inr,dz,dnr,cnr,fnr,BT,J_e,mnr,gnr,cz,hnr,pnr,unr,PT,Y_e,_nr,bnr,fz,vnr,Fnr,Tnr,IT,K_e,Mnr,Enr,mz,Cnr,wnr,Anr,qT,Z_e,ynr,Lnr,gz,xnr,$nr,knr,NT,e1e,Snr,Rnr,hz,Bnr,Pnr,Inr,jT,o1e,qnr,Nnr,pz,jnr,Dnr,Gnr,DT,r1e,Onr,Vnr,uz,Xnr,znr,Qnr,GT,t1e,Wnr,Hnr,_z,Unr,Jnr,Ynr,Bs,a1e,Knr,Znr,bz,esr,osr,vz,rsr,tsr,asr,OT,n1e,nsr,ssr,Fz,lsr,isr,dsr,VT,s1e,csr,fsr,Tz,msr,gsr,hsr,XT,l1e,psr,usr,Mz,_sr,bsr,vsr,zT,i1e,Fsr,Tsr,Ez,Msr,Esr,Csr,QT,d1e,wsr,Asr,Cz,ysr,Lsr,xsr,WT,c1e,$sr,ksr,wz,Ssr,Rsr,Bsr,HT,f1e,Psr,Isr,Az,qsr,Nsr,jsr,UT,m1e,Dsr,Gsr,yz,Osr,Vsr,Xsr,JT,g1e,zsr,Qsr,Lz,Wsr,Hsr,Usr,YT,h1e,Jsr,Ysr,xz,Ksr,Zsr,elr,KT,p1e,olr,rlr,$z,tlr,alr,nlr,ZT,u1e,slr,llr,kz,ilr,dlr,clr,e7,_1e,flr,mlr,Sz,glr,hlr,plr,o7,b1e,ulr,_lr,Rz,blr,vlr,Flr,r7,v1e,Tlr,Mlr,Bz,Elr,Clr,wlr,t7,F1e,Alr,ylr,Pz,Llr,xlr,$lr,a7,T1e,klr,Slr,Iz,Rlr,Blr,Plr,n7,M1e,Ilr,qlr,qz,Nlr,jlr,Dlr,s7,E1e,Glr,Olr,Nz,Vlr,Xlr,zlr,l7,C1e,Qlr,Wlr,jz,Hlr,Ulr,Jlr,i7,w1e,Ylr,Klr,Dz,Zlr,eir,oir,d7,A1e,rir,tir,Gz,air,nir,sir,c7,y1e,lir,iir,Oz,dir,cir,fir,f7,L1e,mir,gir,Vz,hir,pir,uir,m7,x1e,_ir,bir,Xz,vir,Fir,Tir,g7,$1e,Mir,Eir,zz,Cir,wir,Air,h7,k1e,yir,Lir,Qz,xir,$ir,kir,p7,QIe,Dd,u7,S1e,IL,Sir,R1e,Rir,WIe,Ko,qL,Bir,Gd,Pir,Wz,Iir,qir,Hz,Nir,jir,Dir,NL,Gir,B1e,Oir,Vir,Xir,At,jL,zir,P1e,Qir,Wir,Od,Hir,I1e,Uir,Jir,Uz,Yir,Kir,Zir,_7,edr,Ar,DL,odr,q1e,rdr,tdr,Za,adr,N1e,ndr,sdr,j1e,ldr,idr,D1e,ddr,cdr,fdr,se,b7,G1e,mdr,gdr,Jz,hdr,pdr,udr,v7,O1e,_dr,bdr,Yz,vdr,Fdr,Tdr,F7,V1e,Mdr,Edr,Kz,Cdr,wdr,Adr,T7,X1e,ydr,Ldr,Zz,xdr,$dr,kdr,M7,z1e,Sdr,Rdr,eQ,Bdr,Pdr,Idr,E7,Q1e,qdr,Ndr,oQ,jdr,Ddr,Gdr,C7,W1e,Odr,Vdr,rQ,Xdr,zdr,Qdr,w7,H1e,Wdr,Hdr,tQ,Udr,Jdr,Ydr,A7,U1e,Kdr,Zdr,aQ,ecr,ocr,rcr,y7,J1e,tcr,acr,nQ,ncr,scr,lcr,L7,Y1e,icr,dcr,sQ,ccr,fcr,mcr,x7,K1e,gcr,hcr,lQ,pcr,ucr,_cr,$7,Z1e,bcr,vcr,iQ,Fcr,Tcr,Mcr,k7,ebe,Ecr,Ccr,dQ,wcr,Acr,ycr,S7,obe,Lcr,xcr,cQ,$cr,kcr,Scr,R7,rbe,Rcr,Bcr,fQ,Pcr,Icr,qcr,B7,tbe,Ncr,jcr,mQ,Dcr,Gcr,Ocr,P7,abe,Vcr,Xcr,gQ,zcr,Qcr,Wcr,I7,nbe,Hcr,Ucr,hQ,Jcr,Ycr,Kcr,q7,sbe,Zcr,efr,pQ,ofr,rfr,tfr,N7,lbe,afr,nfr,uQ,sfr,lfr,ifr,j7,ibe,dfr,cfr,_Q,ffr,mfr,gfr,D7,dbe,hfr,pfr,bQ,ufr,_fr,bfr,G7,HIe,Vd,O7,cbe,GL,vfr,fbe,Ffr,UIe,Zo,OL,Tfr,Xd,Mfr,vQ,Efr,Cfr,FQ,wfr,Afr,yfr,VL,Lfr,mbe,xfr,$fr,kfr,yt,XL,Sfr,gbe,Rfr,Bfr,zd,Pfr,hbe,Ifr,qfr,TQ,Nfr,jfr,Dfr,V7,Gfr,yr,zL,Ofr,pbe,Vfr,Xfr,en,zfr,ube,Qfr,Wfr,_be,Hfr,Ufr,bbe,Jfr,Yfr,Kfr,Te,X7,vbe,Zfr,emr,MQ,omr,rmr,tmr,z7,Fbe,amr,nmr,EQ,smr,lmr,imr,Q7,Tbe,dmr,cmr,CQ,fmr,mmr,gmr,W7,Mbe,hmr,pmr,wQ,umr,_mr,bmr,H7,Ebe,vmr,Fmr,AQ,Tmr,Mmr,Emr,U7,Cbe,Cmr,wmr,yQ,Amr,ymr,Lmr,J7,wbe,xmr,$mr,LQ,kmr,Smr,Rmr,Y7,Abe,Bmr,Pmr,xQ,Imr,qmr,Nmr,K7,ybe,jmr,Dmr,$Q,Gmr,Omr,Vmr,Z7,Lbe,Xmr,zmr,kQ,Qmr,Wmr,Hmr,eM,xbe,Umr,Jmr,SQ,Ymr,Kmr,Zmr,oM,$be,egr,ogr,RQ,rgr,tgr,agr,rM,JIe,Qd,tM,kbe,QL,ngr,Sbe,sgr,YIe,er,WL,lgr,Wd,igr,BQ,dgr,cgr,PQ,fgr,mgr,ggr,HL,hgr,Rbe,pgr,ugr,_gr,Lt,UL,bgr,Bbe,vgr,Fgr,Hd,Tgr,Pbe,Mgr,Egr,IQ,Cgr,wgr,Agr,aM,ygr,Lr,JL,Lgr,Ibe,xgr,$gr,on,kgr,qbe,Sgr,Rgr,Nbe,Bgr,Pgr,jbe,Igr,qgr,Ngr,Ud,nM,Dbe,jgr,Dgr,qQ,Ggr,Ogr,Vgr,sM,Gbe,Xgr,zgr,NQ,Qgr,Wgr,Hgr,lM,Obe,Ugr,Jgr,jQ,Ygr,Kgr,Zgr,iM,KIe,Jd,dM,Vbe,YL,ehr,Xbe,ohr,ZIe,or,KL,rhr,Yd,thr,DQ,ahr,nhr,GQ,shr,lhr,ihr,ZL,dhr,zbe,chr,fhr,mhr,xt,e8,ghr,Qbe,hhr,phr,Kd,uhr,Wbe,_hr,bhr,OQ,vhr,Fhr,Thr,cM,Mhr,xr,o8,Ehr,Hbe,Chr,whr,rn,Ahr,Ube,yhr,Lhr,Jbe,xhr,$hr,Ybe,khr,Shr,Rhr,ie,fM,Kbe,Bhr,Phr,VQ,Ihr,qhr,Nhr,mM,Zbe,jhr,Dhr,XQ,Ghr,Ohr,Vhr,gM,e2e,Xhr,zhr,zQ,Qhr,Whr,Hhr,hM,o2e,Uhr,Jhr,QQ,Yhr,Khr,Zhr,pM,r2e,epr,opr,WQ,rpr,tpr,apr,uM,t2e,npr,spr,HQ,lpr,ipr,dpr,_M,a2e,cpr,fpr,UQ,mpr,gpr,hpr,bM,n2e,ppr,upr,JQ,_pr,bpr,vpr,vM,s2e,Fpr,Tpr,YQ,Mpr,Epr,Cpr,FM,l2e,wpr,Apr,KQ,ypr,Lpr,xpr,TM,i2e,$pr,kpr,ZQ,Spr,Rpr,Bpr,MM,d2e,Ppr,Ipr,eW,qpr,Npr,jpr,EM,c2e,Dpr,Gpr,oW,Opr,Vpr,Xpr,CM,f2e,zpr,Qpr,rW,Wpr,Hpr,Upr,wM,m2e,Jpr,Ypr,tW,Kpr,Zpr,eur,AM,g2e,our,rur,aW,tur,aur,nur,yM,h2e,sur,lur,nW,iur,dur,cur,LM,p2e,fur,mur,sW,gur,hur,pur,xM,u2e,uur,_ur,lW,bur,vur,Fur,$M,_2e,Tur,Mur,iW,Eur,Cur,wur,kM,eqe,Zd,SM,b2e,r8,Aur,v2e,yur,oqe,rr,t8,Lur,ec,xur,dW,$ur,kur,cW,Sur,Rur,Bur,a8,Pur,F2e,Iur,qur,Nur,$t,n8,jur,T2e,Dur,Gur,oc,Our,M2e,Vur,Xur,fW,zur,Qur,Wur,RM,Hur,$r,s8,Uur,E2e,Jur,Yur,tn,Kur,C2e,Zur,e_r,w2e,o_r,r_r,A2e,t_r,a_r,n_r,ye,BM,y2e,s_r,l_r,mW,i_r,d_r,c_r,PM,L2e,f_r,m_r,gW,g_r,h_r,p_r,IM,x2e,u_r,__r,hW,b_r,v_r,F_r,qM,$2e,T_r,M_r,pW,E_r,C_r,w_r,NM,k2e,A_r,y_r,uW,L_r,x_r,$_r,jM,S2e,k_r,S_r,_W,R_r,B_r,P_r,DM,R2e,I_r,q_r,bW,N_r,j_r,D_r,GM,B2e,G_r,O_r,vW,V_r,X_r,z_r,OM,P2e,Q_r,W_r,FW,H_r,U_r,J_r,VM,I2e,Y_r,K_r,TW,Z_r,e1r,o1r,XM,rqe,rc,zM,q2e,l8,r1r,N2e,t1r,tqe,tr,i8,a1r,tc,n1r,MW,s1r,l1r,EW,i1r,d1r,c1r,d8,f1r,j2e,m1r,g1r,h1r,kt,c8,p1r,D2e,u1r,_1r,ac,b1r,G2e,v1r,F1r,CW,T1r,M1r,E1r,QM,C1r,kr,f8,w1r,O2e,A1r,y1r,an,L1r,V2e,x1r,$1r,X2e,k1r,S1r,z2e,R1r,B1r,P1r,Z,WM,Q2e,I1r,q1r,wW,N1r,j1r,D1r,HM,W2e,G1r,O1r,AW,V1r,X1r,z1r,UM,H2e,Q1r,W1r,yW,H1r,U1r,J1r,JM,U2e,Y1r,K1r,LW,Z1r,ebr,obr,YM,J2e,rbr,tbr,xW,abr,nbr,sbr,KM,Y2e,lbr,ibr,$W,dbr,cbr,fbr,ZM,K2e,mbr,gbr,kW,hbr,pbr,ubr,e4,Z2e,_br,bbr,SW,vbr,Fbr,Tbr,o4,e3e,Mbr,Ebr,RW,Cbr,wbr,Abr,r4,o3e,ybr,Lbr,BW,xbr,$br,kbr,t4,r3e,Sbr,Rbr,PW,Bbr,Pbr,Ibr,a4,t3e,qbr,Nbr,IW,jbr,Dbr,Gbr,n4,a3e,Obr,Vbr,qW,Xbr,zbr,Qbr,s4,n3e,Wbr,Hbr,NW,Ubr,Jbr,Ybr,l4,s3e,Kbr,Zbr,jW,e2r,o2r,r2r,i4,l3e,t2r,a2r,DW,n2r,s2r,l2r,d4,i3e,i2r,d2r,GW,c2r,f2r,m2r,c4,d3e,g2r,h2r,OW,p2r,u2r,_2r,f4,c3e,b2r,v2r,VW,F2r,T2r,M2r,m4,f3e,E2r,C2r,XW,w2r,A2r,y2r,g4,m3e,L2r,x2r,zW,$2r,k2r,S2r,h4,g3e,R2r,B2r,QW,P2r,I2r,q2r,p4,h3e,N2r,j2r,WW,D2r,G2r,O2r,u4,p3e,V2r,X2r,HW,z2r,Q2r,W2r,_4,u3e,H2r,U2r,UW,J2r,Y2r,K2r,b4,_3e,Z2r,e3r,JW,o3r,r3r,t3r,v4,aqe,nc,F4,b3e,m8,a3r,v3e,n3r,nqe,ar,g8,s3r,sc,l3r,YW,i3r,d3r,KW,c3r,f3r,m3r,h8,g3r,F3e,h3r,p3r,u3r,St,p8,_3r,T3e,b3r,v3r,lc,F3r,M3e,T3r,M3r,ZW,E3r,C3r,w3r,T4,A3r,Sr,u8,y3r,E3e,L3r,x3r,nn,$3r,C3e,k3r,S3r,w3e,R3r,B3r,A3e,P3r,I3r,q3r,pe,M4,y3e,N3r,j3r,eH,D3r,G3r,O3r,E4,L3e,V3r,X3r,oH,z3r,Q3r,W3r,C4,x3e,H3r,U3r,rH,J3r,Y3r,K3r,w4,$3e,Z3r,evr,tH,ovr,rvr,tvr,A4,k3e,avr,nvr,aH,svr,lvr,ivr,y4,S3e,dvr,cvr,nH,fvr,mvr,gvr,L4,R3e,hvr,pvr,sH,uvr,_vr,bvr,x4,B3e,vvr,Fvr,lH,Tvr,Mvr,Evr,$4,P3e,Cvr,wvr,iH,Avr,yvr,Lvr,k4,I3e,xvr,$vr,dH,kvr,Svr,Rvr,S4,q3e,Bvr,Pvr,cH,Ivr,qvr,Nvr,R4,N3e,jvr,Dvr,fH,Gvr,Ovr,Vvr,B4,j3e,Xvr,zvr,mH,Qvr,Wvr,Hvr,P4,D3e,Uvr,Jvr,gH,Yvr,Kvr,Zvr,I4,G3e,eFr,oFr,hH,rFr,tFr,aFr,q4,O3e,nFr,sFr,pH,lFr,iFr,dFr,N4,V3e,cFr,fFr,uH,mFr,gFr,hFr,j4,sqe,ic,D4,X3e,_8,pFr,z3e,uFr,lqe,nr,b8,_Fr,dc,bFr,_H,vFr,FFr,bH,TFr,MFr,EFr,v8,CFr,Q3e,wFr,AFr,yFr,Rt,F8,LFr,W3e,xFr,$Fr,cc,kFr,H3e,SFr,RFr,vH,BFr,PFr,IFr,G4,qFr,Rr,T8,NFr,U3e,jFr,DFr,sn,GFr,J3e,OFr,VFr,Y3e,XFr,zFr,K3e,QFr,WFr,HFr,M8,O4,Z3e,UFr,JFr,FH,YFr,KFr,ZFr,V4,eve,eTr,oTr,TH,rTr,tTr,aTr,X4,iqe,fc,z4,ove,E8,nTr,rve,sTr,dqe,sr,C8,lTr,mc,iTr,MH,dTr,cTr,EH,fTr,mTr,gTr,w8,hTr,tve,pTr,uTr,_Tr,Bt,A8,bTr,ave,vTr,FTr,gc,TTr,nve,MTr,ETr,CH,CTr,wTr,ATr,Q4,yTr,Br,y8,LTr,sve,xTr,$Tr,ln,kTr,lve,STr,RTr,ive,BTr,PTr,dve,ITr,qTr,NTr,cve,W4,fve,jTr,DTr,wH,GTr,OTr,VTr,H4,cqe,hc,U4,mve,L8,XTr,gve,zTr,fqe,lr,x8,QTr,pc,WTr,AH,HTr,UTr,yH,JTr,YTr,KTr,$8,ZTr,hve,e7r,o7r,r7r,Pt,k8,t7r,pve,a7r,n7r,uc,s7r,uve,l7r,i7r,LH,d7r,c7r,f7r,J4,m7r,Pr,S8,g7r,_ve,h7r,p7r,dn,u7r,bve,_7r,b7r,vve,v7r,F7r,Fve,T7r,M7r,E7r,de,Y4,Tve,C7r,w7r,xH,A7r,y7r,L7r,K4,Mve,x7r,$7r,$H,k7r,S7r,R7r,Z4,Eve,B7r,P7r,kH,I7r,q7r,N7r,eE,Cve,j7r,D7r,SH,G7r,O7r,V7r,oE,wve,X7r,z7r,RH,Q7r,W7r,H7r,rE,Ave,U7r,J7r,BH,Y7r,K7r,Z7r,tE,yve,eMr,oMr,PH,rMr,tMr,aMr,aE,Lve,nMr,sMr,IH,lMr,iMr,dMr,nE,xve,cMr,fMr,qH,mMr,gMr,hMr,sE,$ve,pMr,uMr,NH,_Mr,bMr,vMr,lE,kve,FMr,TMr,jH,MMr,EMr,CMr,iE,Sve,wMr,AMr,DH,yMr,LMr,xMr,dE,Rve,$Mr,kMr,GH,SMr,RMr,BMr,cE,Bve,PMr,IMr,OH,qMr,NMr,jMr,fE,Pve,DMr,GMr,VH,OMr,VMr,XMr,mE,Ive,zMr,QMr,XH,WMr,HMr,UMr,gE,qve,JMr,YMr,zH,KMr,ZMr,e4r,hE,Nve,o4r,r4r,QH,t4r,a4r,n4r,pE,jve,s4r,l4r,WH,i4r,d4r,c4r,uE,Dve,f4r,m4r,HH,g4r,h4r,p4r,_E,mqe,_c,bE,Gve,R8,u4r,Ove,_4r,gqe,ir,B8,b4r,bc,v4r,UH,F4r,T4r,JH,M4r,E4r,C4r,P8,w4r,Vve,A4r,y4r,L4r,It,I8,x4r,Xve,$4r,k4r,vc,S4r,zve,R4r,B4r,YH,P4r,I4r,q4r,vE,N4r,Ir,q8,j4r,Qve,D4r,G4r,cn,O4r,Wve,V4r,X4r,Hve,z4r,Q4r,Uve,W4r,H4r,U4r,ce,FE,Jve,J4r,Y4r,KH,K4r,Z4r,eEr,TE,Yve,oEr,rEr,ZH,tEr,aEr,nEr,ME,Kve,sEr,lEr,eU,iEr,dEr,cEr,EE,Zve,fEr,mEr,oU,gEr,hEr,pEr,CE,eFe,uEr,_Er,rU,bEr,vEr,FEr,wE,oFe,TEr,MEr,tU,EEr,CEr,wEr,AE,rFe,AEr,yEr,aU,LEr,xEr,$Er,yE,tFe,kEr,SEr,nU,REr,BEr,PEr,LE,aFe,IEr,qEr,sU,NEr,jEr,DEr,xE,nFe,GEr,OEr,lU,VEr,XEr,zEr,$E,sFe,QEr,WEr,iU,HEr,UEr,JEr,kE,lFe,YEr,KEr,dU,ZEr,e5r,o5r,SE,iFe,r5r,t5r,cU,a5r,n5r,s5r,RE,dFe,l5r,i5r,fU,d5r,c5r,f5r,BE,cFe,m5r,g5r,mU,h5r,p5r,u5r,PE,fFe,_5r,b5r,gU,v5r,F5r,T5r,IE,mFe,M5r,E5r,hU,C5r,w5r,A5r,qE,gFe,y5r,L5r,pU,x5r,$5r,k5r,NE,hFe,S5r,R5r,uU,B5r,P5r,I5r,jE,pFe,q5r,N5r,_U,j5r,D5r,G5r,DE,hqe,Fc,GE,uFe,N8,O5r,_Fe,V5r,pqe,dr,j8,X5r,Tc,z5r,bU,Q5r,W5r,vU,H5r,U5r,J5r,D8,Y5r,bFe,K5r,Z5r,eCr,qt,G8,oCr,vFe,rCr,tCr,Mc,aCr,FFe,nCr,sCr,FU,lCr,iCr,dCr,OE,cCr,qr,O8,fCr,TFe,mCr,gCr,fn,hCr,MFe,pCr,uCr,EFe,_Cr,bCr,CFe,vCr,FCr,TCr,wFe,VE,AFe,MCr,ECr,TU,CCr,wCr,ACr,XE,uqe,Ec,zE,yFe,V8,yCr,LFe,LCr,_qe,cr,X8,xCr,Cc,$Cr,MU,kCr,SCr,EU,RCr,BCr,PCr,z8,ICr,xFe,qCr,NCr,jCr,Nt,Q8,DCr,$Fe,GCr,OCr,wc,VCr,kFe,XCr,zCr,CU,QCr,WCr,HCr,QE,UCr,Nr,W8,JCr,SFe,YCr,KCr,mn,ZCr,RFe,ewr,owr,BFe,rwr,twr,PFe,awr,nwr,swr,IFe,WE,qFe,lwr,iwr,wU,dwr,cwr,fwr,HE,bqe,Ac,UE,NFe,H8,mwr,jFe,gwr,vqe,fr,U8,hwr,yc,pwr,AU,uwr,_wr,yU,bwr,vwr,Fwr,J8,Twr,DFe,Mwr,Ewr,Cwr,jt,Y8,wwr,GFe,Awr,ywr,Lc,Lwr,OFe,xwr,$wr,LU,kwr,Swr,Rwr,JE,Bwr,jr,K8,Pwr,VFe,Iwr,qwr,gn,Nwr,XFe,jwr,Dwr,zFe,Gwr,Owr,QFe,Vwr,Xwr,zwr,re,YE,WFe,Qwr,Wwr,xU,Hwr,Uwr,Jwr,KE,HFe,Ywr,Kwr,$U,Zwr,eAr,oAr,ZE,UFe,rAr,tAr,kU,aAr,nAr,sAr,e5,JFe,lAr,iAr,SU,dAr,cAr,fAr,o5,YFe,mAr,gAr,RU,hAr,pAr,uAr,r5,KFe,_Ar,bAr,BU,vAr,FAr,TAr,t5,ZFe,MAr,EAr,PU,CAr,wAr,AAr,a5,eTe,yAr,LAr,IU,xAr,$Ar,kAr,n5,oTe,SAr,RAr,qU,BAr,PAr,IAr,s5,rTe,qAr,NAr,NU,jAr,DAr,GAr,l5,tTe,OAr,VAr,jU,XAr,zAr,QAr,i5,aTe,WAr,HAr,DU,UAr,JAr,YAr,d5,nTe,KAr,ZAr,GU,e6r,o6r,r6r,c5,sTe,t6r,a6r,OU,n6r,s6r,l6r,f5,lTe,i6r,d6r,VU,c6r,f6r,m6r,m5,iTe,g6r,h6r,XU,p6r,u6r,_6r,g5,dTe,b6r,v6r,zU,F6r,T6r,M6r,h5,cTe,E6r,C6r,QU,w6r,A6r,y6r,p5,fTe,L6r,x6r,WU,$6r,k6r,S6r,u5,mTe,R6r,B6r,HU,P6r,I6r,q6r,_5,gTe,N6r,j6r,UU,D6r,G6r,O6r,b5,hTe,V6r,X6r,JU,z6r,Q6r,W6r,v5,pTe,H6r,U6r,YU,J6r,Y6r,K6r,F5,uTe,Z6r,e0r,KU,o0r,r0r,t0r,T5,_Te,a0r,n0r,ZU,s0r,l0r,i0r,M5,Fqe,xc,E5,bTe,Z8,d0r,vTe,c0r,Tqe,mr,ex,f0r,$c,m0r,eJ,g0r,h0r,oJ,p0r,u0r,_0r,ox,b0r,FTe,v0r,F0r,T0r,Dt,rx,M0r,TTe,E0r,C0r,kc,w0r,MTe,A0r,y0r,rJ,L0r,x0r,$0r,C5,k0r,Dr,tx,S0r,ETe,R0r,B0r,hn,P0r,CTe,I0r,q0r,wTe,N0r,j0r,ATe,D0r,G0r,O0r,ke,w5,yTe,V0r,X0r,tJ,z0r,Q0r,W0r,A5,LTe,H0r,U0r,aJ,J0r,Y0r,K0r,y5,xTe,Z0r,eyr,nJ,oyr,ryr,tyr,L5,$Te,ayr,nyr,sJ,syr,lyr,iyr,x5,kTe,dyr,cyr,lJ,fyr,myr,gyr,$5,STe,hyr,pyr,iJ,uyr,_yr,byr,k5,RTe,vyr,Fyr,dJ,Tyr,Myr,Eyr,S5,BTe,Cyr,wyr,cJ,Ayr,yyr,Lyr,R5,PTe,xyr,$yr,fJ,kyr,Syr,Ryr,B5,Mqe,Sc,P5,ITe,ax,Byr,qTe,Pyr,Eqe,gr,nx,Iyr,Rc,qyr,mJ,Nyr,jyr,gJ,Dyr,Gyr,Oyr,sx,Vyr,NTe,Xyr,zyr,Qyr,Gt,lx,Wyr,jTe,Hyr,Uyr,Bc,Jyr,DTe,Yyr,Kyr,hJ,Zyr,eLr,oLr,I5,rLr,Gr,ix,tLr,GTe,aLr,nLr,pn,sLr,OTe,lLr,iLr,VTe,dLr,cLr,XTe,fLr,mLr,gLr,Me,q5,zTe,hLr,pLr,pJ,uLr,_Lr,bLr,N5,QTe,vLr,FLr,uJ,TLr,MLr,ELr,j5,WTe,CLr,wLr,_J,ALr,yLr,LLr,D5,HTe,xLr,$Lr,bJ,kLr,SLr,RLr,G5,UTe,BLr,PLr,vJ,ILr,qLr,NLr,O5,JTe,jLr,DLr,FJ,GLr,OLr,VLr,V5,YTe,XLr,zLr,TJ,QLr,WLr,HLr,X5,KTe,ULr,JLr,MJ,YLr,KLr,ZLr,z5,ZTe,e8r,o8r,EJ,r8r,t8r,a8r,Q5,e7e,n8r,s8r,CJ,l8r,i8r,d8r,W5,o7e,c8r,f8r,wJ,m8r,g8r,h8r,H5,r7e,p8r,u8r,AJ,_8r,b8r,v8r,U5,Cqe,Pc,J5,t7e,dx,F8r,a7e,T8r,wqe,hr,cx,M8r,Ic,E8r,yJ,C8r,w8r,LJ,A8r,y8r,L8r,fx,x8r,n7e,$8r,k8r,S8r,Ot,mx,R8r,s7e,B8r,P8r,qc,I8r,l7e,q8r,N8r,xJ,j8r,D8r,G8r,Y5,O8r,Or,gx,V8r,i7e,X8r,z8r,un,Q8r,d7e,W8r,H8r,c7e,U8r,J8r,f7e,Y8r,K8r,Z8r,Le,K5,m7e,exr,oxr,$J,rxr,txr,axr,Z5,g7e,nxr,sxr,kJ,lxr,ixr,dxr,eC,h7e,cxr,fxr,SJ,mxr,gxr,hxr,oC,p7e,pxr,uxr,RJ,_xr,bxr,vxr,rC,u7e,Fxr,Txr,BJ,Mxr,Exr,Cxr,tC,_7e,wxr,Axr,PJ,yxr,Lxr,xxr,aC,b7e,$xr,kxr,IJ,Sxr,Rxr,Bxr,nC,v7e,Pxr,Ixr,qJ,qxr,Nxr,jxr,sC,F7e,Dxr,Gxr,NJ,Oxr,Vxr,Xxr,lC,T7e,zxr,Qxr,jJ,Wxr,Hxr,Uxr,iC,Aqe,Nc,dC,M7e,hx,Jxr,E7e,Yxr,yqe,pr,px,Kxr,jc,Zxr,DJ,e9r,o9r,GJ,r9r,t9r,a9r,ux,n9r,C7e,s9r,l9r,i9r,Vt,_x,d9r,w7e,c9r,f9r,Dc,m9r,A7e,g9r,h9r,OJ,p9r,u9r,_9r,cC,b9r,Vr,bx,v9r,y7e,F9r,T9r,_n,M9r,L7e,E9r,C9r,x7e,w9r,A9r,$7e,y9r,L9r,x9r,Se,fC,k7e,$9r,k9r,VJ,S9r,R9r,B9r,mC,S7e,P9r,I9r,XJ,q9r,N9r,j9r,gC,R7e,D9r,G9r,zJ,O9r,V9r,X9r,hC,B7e,z9r,Q9r,QJ,W9r,H9r,U9r,pC,P7e,J9r,Y9r,WJ,K9r,Z9r,e$r,uC,I7e,o$r,r$r,HJ,t$r,a$r,n$r,_C,q7e,s$r,l$r,UJ,i$r,d$r,c$r,bC,N7e,f$r,m$r,JJ,g$r,h$r,p$r,vC,j7e,u$r,_$r,YJ,b$r,v$r,F$r,FC,Lqe,Gc,TC,D7e,vx,T$r,G7e,M$r,xqe,ur,Fx,E$r,Oc,C$r,KJ,w$r,A$r,ZJ,y$r,L$r,x$r,Tx,$$r,O7e,k$r,S$r,R$r,Xt,Mx,B$r,V7e,P$r,I$r,Vc,q$r,X7e,N$r,j$r,eY,D$r,G$r,O$r,MC,V$r,Xr,Ex,X$r,z7e,z$r,Q$r,bn,W$r,Q7e,H$r,U$r,W7e,J$r,Y$r,H7e,K$r,Z$r,ekr,xe,EC,U7e,okr,rkr,oY,tkr,akr,nkr,CC,J7e,skr,lkr,rY,ikr,dkr,ckr,wC,Y7e,fkr,mkr,tY,gkr,hkr,pkr,AC,K7e,ukr,_kr,aY,bkr,vkr,Fkr,yC,Z7e,Tkr,Mkr,nY,Ekr,Ckr,wkr,LC,eMe,Akr,ykr,sY,Lkr,xkr,$kr,xC,oMe,kkr,Skr,lY,Rkr,Bkr,Pkr,$C,rMe,Ikr,qkr,iY,Nkr,jkr,Dkr,kC,tMe,Gkr,Okr,dY,Vkr,Xkr,zkr,SC,aMe,Qkr,Wkr,cY,Hkr,Ukr,Jkr,RC,$qe,Xc,BC,nMe,Cx,Ykr,sMe,Kkr,kqe,_r,wx,Zkr,zc,eSr,fY,oSr,rSr,mY,tSr,aSr,nSr,Ax,sSr,lMe,lSr,iSr,dSr,zt,yx,cSr,iMe,fSr,mSr,Qc,gSr,dMe,hSr,pSr,gY,uSr,_Sr,bSr,PC,vSr,zr,Lx,FSr,cMe,TSr,MSr,vn,ESr,fMe,CSr,wSr,mMe,ASr,ySr,gMe,LSr,xSr,$Sr,$e,IC,hMe,kSr,SSr,hY,RSr,BSr,PSr,qC,pMe,ISr,qSr,pY,NSr,jSr,DSr,NC,uMe,GSr,OSr,uY,VSr,XSr,zSr,jC,_Me,QSr,WSr,_Y,HSr,USr,JSr,DC,bMe,YSr,KSr,bY,ZSr,eRr,oRr,GC,vMe,rRr,tRr,vY,aRr,nRr,sRr,OC,FMe,lRr,iRr,FY,dRr,cRr,fRr,VC,TMe,mRr,gRr,TY,hRr,pRr,uRr,XC,MMe,_Rr,bRr,MY,vRr,FRr,TRr,zC,EMe,MRr,ERr,EY,CRr,wRr,ARr,QC,Sqe,Wc,WC,CMe,xx,yRr,wMe,LRr,Rqe,br,$x,xRr,Hc,$Rr,CY,kRr,SRr,wY,RRr,BRr,PRr,kx,IRr,AMe,qRr,NRr,jRr,Qt,Sx,DRr,yMe,GRr,ORr,Uc,VRr,LMe,XRr,zRr,AY,QRr,WRr,HRr,HC,URr,Qr,Rx,JRr,xMe,YRr,KRr,Fn,ZRr,$Me,eBr,oBr,kMe,rBr,tBr,SMe,aBr,nBr,sBr,De,UC,RMe,lBr,iBr,yY,dBr,cBr,fBr,JC,BMe,mBr,gBr,LY,hBr,pBr,uBr,YC,PMe,_Br,bBr,xY,vBr,FBr,TBr,KC,IMe,MBr,EBr,$Y,CBr,wBr,ABr,ZC,qMe,yBr,LBr,kY,xBr,$Br,kBr,ew,NMe,SBr,RBr,SY,BBr,PBr,IBr,ow,jMe,qBr,NBr,RY,jBr,DBr,GBr,rw,DMe,OBr,VBr,BY,XBr,zBr,QBr,tw,Bqe,Jc,aw,GMe,Bx,WBr,OMe,HBr,Pqe,vr,Px,UBr,Yc,JBr,PY,YBr,KBr,IY,ZBr,ePr,oPr,Ix,rPr,VMe,tPr,aPr,nPr,Wt,qx,sPr,XMe,lPr,iPr,Kc,dPr,zMe,cPr,fPr,qY,mPr,gPr,hPr,nw,pPr,Wr,Nx,uPr,QMe,_Pr,bPr,Tn,vPr,WMe,FPr,TPr,HMe,MPr,EPr,UMe,CPr,wPr,APr,Ge,sw,JMe,yPr,LPr,NY,xPr,$Pr,kPr,lw,YMe,SPr,RPr,jY,BPr,PPr,IPr,iw,KMe,qPr,NPr,DY,jPr,DPr,GPr,dw,ZMe,OPr,VPr,GY,XPr,zPr,QPr,cw,e4e,WPr,HPr,OY,UPr,JPr,YPr,fw,o4e,KPr,ZPr,VY,eIr,oIr,rIr,mw,r4e,tIr,aIr,XY,nIr,sIr,lIr,gw,t4e,iIr,dIr,zY,cIr,fIr,mIr,hw,Iqe,Zc,pw,a4e,jx,gIr,n4e,hIr,qqe,Fr,Dx,pIr,ef,uIr,QY,_Ir,bIr,WY,vIr,FIr,TIr,Gx,MIr,s4e,EIr,CIr,wIr,Ht,Ox,AIr,l4e,yIr,LIr,of,xIr,i4e,$Ir,kIr,HY,SIr,RIr,BIr,uw,PIr,Hr,Vx,IIr,d4e,qIr,NIr,Mn,jIr,c4e,DIr,GIr,f4e,OIr,VIr,m4e,XIr,zIr,QIr,g4e,_w,h4e,WIr,HIr,UY,UIr,JIr,YIr,bw,Nqe,rf,vw,p4e,Xx,KIr,u4e,ZIr,jqe,Tr,zx,eqr,tf,oqr,JY,rqr,tqr,YY,aqr,nqr,sqr,Qx,lqr,_4e,iqr,dqr,cqr,Ut,Wx,fqr,b4e,mqr,gqr,af,hqr,v4e,pqr,uqr,KY,_qr,bqr,vqr,Fw,Fqr,Ur,Hx,Tqr,F4e,Mqr,Eqr,En,Cqr,T4e,wqr,Aqr,M4e,yqr,Lqr,E4e,xqr,$qr,kqr,Ux,Tw,C4e,Sqr,Rqr,ZY,Bqr,Pqr,Iqr,Mw,w4e,qqr,Nqr,eK,jqr,Dqr,Gqr,Ew,Dqe,nf,Cw,A4e,Jx,Oqr,y4e,Vqr,Gqe,Mr,Yx,Xqr,sf,zqr,oK,Qqr,Wqr,rK,Hqr,Uqr,Jqr,Kx,Yqr,L4e,Kqr,Zqr,eNr,Jt,Zx,oNr,x4e,rNr,tNr,lf,aNr,$4e,nNr,sNr,tK,lNr,iNr,dNr,ww,cNr,Jr,e9,fNr,k4e,mNr,gNr,Cn,hNr,S4e,pNr,uNr,R4e,_Nr,bNr,B4e,vNr,FNr,TNr,P4e,Aw,I4e,MNr,ENr,aK,CNr,wNr,ANr,yw,Oqe;return d=new ee({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),J6=new ee({}),Y6=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),_f=new yNr({props:{warning:!0,$$slots:{default:[o0t]},$$scope:{ctx:L}}}),K6=new ee({}),Z6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/configuration_auto.py#L569"}}),r0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/configuration_auto.py#L592"}}),ug=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[r0t]},$$scope:{ctx:L}}}),t0=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/configuration_auto.py#L714"}}),a0=new ee({}),n0=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/tokenization_auto.py#L377"}}),i0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17113/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/tokenization_auto.py#L391"}}),Hg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[t0t]},$$scope:{ctx:L}}}),d0=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/tokenization_auto.py#L587"}}),c0=new ee({}),f0=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/feature_extraction_auto.py#L178"}}),h0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17113/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/feature_extraction_auto.py#L192"}}),Mh=new yNr({props:{$$slots:{default:[a0t]},$$scope:{ctx:L}}}),Eh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[n0t]},$$scope:{ctx:L}}}),p0=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/feature_extraction_auto.py#L319"}}),u0=new ee({}),_0=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/processing_auto.py#L77"}}),F0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/processing_auto.py#L91"}}),Gh=new yNr({props:{$$slots:{default:[s0t]},$$scope:{ctx:L}}}),Oh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[l0t]},$$scope:{ctx:L}}}),T0=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/processing_auto.py#L244"}}),M0=new ee({}),E0=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_auto.py#L721"}}),w0=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/glm#transformers.GLMConfig">GLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/glm#transformers.GLMModel">GLMModel</a> (GLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),zh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[i0t]},$$scope:{ctx:L}}}),A0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),Pu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[d0t]},$$scope:{ctx:L}}}),y0=new ee({}),L0=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_auto.py#L728"}}),$0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),qu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[c0t]},$$scope:{ctx:L}}}),k0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),w_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[f0t]},$$scope:{ctx:L}}}),S0=new ee({}),R0=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_auto.py#L743"}}),P0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),y_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[m0t]},$$scope:{ctx:L}}}),I0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),c1=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[g0t]},$$scope:{ctx:L}}}),q0=new ee({}),N0=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_auto.py#L750"}}),D0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),m1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[h0t]},$$scope:{ctx:L}}}),G0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),U1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[p0t]},$$scope:{ctx:L}}}),O0=new ee({}),V0=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_auto.py#L757"}}),z0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),Y1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[u0t]},$$scope:{ctx:L}}}),Q0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),ub=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[_0t]},$$scope:{ctx:L}}}),W0=new ee({}),H0=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_auto.py#L766"}}),J0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/glm#transformers.GLMConfig">GLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/glm#transformers.GLMForSequenceClassification">GLMForSequenceClassification</a> (GLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),bb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[b0t]},$$scope:{ctx:L}}}),Y0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),h2=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[v0t]},$$scope:{ctx:L}}}),K0=new ee({}),Z0=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_auto.py#L800"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),u2=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[F0t]},$$scope:{ctx:L}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),W2=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[T0t]},$$scope:{ctx:L}}}),ty=new ee({}),ay=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_auto.py#L807"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),U2=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[M0t]},$$scope:{ctx:L}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),r3=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[E0t]},$$scope:{ctx:L}}}),iy=new ee({}),dy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_auto.py#L793"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),a3=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[C0t]},$$scope:{ctx:L}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),j3=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[w0t]},$$scope:{ctx:L}}}),gy=new ee({}),hy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_auto.py#L775"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),G3=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[A0t]},$$scope:{ctx:L}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),Lv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[y0t]},$$scope:{ctx:L}}}),by=new ee({}),vy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_auto.py#L782"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),$v=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[L0t]},$$scope:{ctx:L}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),Rv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[x0t]},$$scope:{ctx:L}}}),Ey=new ee({}),Cy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_auto.py#L816"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17113/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17113/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17113/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),Pv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[$0t]},$$scope:{ctx:L}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),Hv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[k0t]},$$scope:{ctx:L}}}),Ly=new ee({}),xy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_auto.py#L855"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),Jv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[S0t]},$$scope:{ctx:L}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),Zv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[R0t]},$$scope:{ctx:L}}}),Ry=new ee({}),By=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_auto.py#L862"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),oF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[B0t]},$$scope:{ctx:L}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),fF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[P0t]},$$scope:{ctx:L}}}),Ny=new ee({}),jy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_auto.py#L885"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),gF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[I0t]},$$scope:{ctx:L}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),vF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[q0t]},$$scope:{ctx:L}}}),Vy=new ee({}),Xy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_auto.py#L869"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),TF=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[N0t]},$$scope:{ctx:L}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),kF=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[j0t]},$$scope:{ctx:L}}}),Hy=new ee({}),Uy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_auto.py#L876"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),RF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[D0t]},$$scope:{ctx:L}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),qF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[G0t]},$$scope:{ctx:L}}}),eL=new ee({}),oL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_auto.py#L894"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),jF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[O0t]},$$scope:{ctx:L}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),zF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[V0t]},$$scope:{ctx:L}}}),nL=new ee({}),sL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_auto.py#L901"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),WF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[X0t]},$$scope:{ctx:L}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[z0t]},$$scope:{ctx:L}}}),cL=new ee({}),fL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_auto.py#L848"}}),gL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),eT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Q0t]},$$scope:{ctx:L}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),aT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[W0t]},$$scope:{ctx:L}}}),uL=new ee({}),_L=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_auto.py#L823"}}),vL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),sT=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[H0t]},$$scope:{ctx:L}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),dT=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[U0t]},$$scope:{ctx:L}}}),TL=new ee({}),ML=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_auto.py#L830"}}),CL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),fT=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[J0t]},$$scope:{ctx:L}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),_T=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Y0t]},$$scope:{ctx:L}}}),AL=new ee({}),yL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_auto.py#L839"}}),xL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),vT=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[K0t]},$$scope:{ctx:L}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),MT=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Z0t]},$$scope:{ctx:L}}}),kL=new ee({}),SL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),BL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),CT=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[eyt]},$$scope:{ctx:L}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),p7=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[oyt]},$$scope:{ctx:L}}}),IL=new ee({}),qL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),jL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),_7=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[ryt]},$$scope:{ctx:L}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),G7=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[tyt]},$$scope:{ctx:L}}}),GL=new ee({}),OL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),XL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),V7=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[ayt]},$$scope:{ctx:L}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),rM=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[nyt]},$$scope:{ctx:L}}}),QL=new ee({}),WL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),UL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),aM=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[syt]},$$scope:{ctx:L}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),iM=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[lyt]},$$scope:{ctx:L}}}),YL=new ee({}),KL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),e8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),cM=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[iyt]},$$scope:{ctx:L}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),kM=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[dyt]},$$scope:{ctx:L}}}),r8=new ee({}),t8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),n8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),RM=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[cyt]},$$scope:{ctx:L}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),XM=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[fyt]},$$scope:{ctx:L}}}),l8=new ee({}),i8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),c8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),QM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[myt]},$$scope:{ctx:L}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),v4=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[gyt]},$$scope:{ctx:L}}}),m8=new ee({}),g8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),p8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),T4=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[hyt]},$$scope:{ctx:L}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),j4=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[pyt]},$$scope:{ctx:L}}}),_8=new ee({}),b8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),F8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),G4=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[uyt]},$$scope:{ctx:L}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),X4=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[_yt]},$$scope:{ctx:L}}}),E8=new ee({}),C8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),A8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),Q4=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[byt]},$$scope:{ctx:L}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),H4=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[vyt]},$$scope:{ctx:L}}}),L8=new ee({}),x8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),k8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),J4=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Fyt]},$$scope:{ctx:L}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),_E=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Tyt]},$$scope:{ctx:L}}}),R8=new ee({}),B8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),I8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),vE=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Myt]},$$scope:{ctx:L}}}),q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),DE=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Eyt]},$$scope:{ctx:L}}}),N8=new ee({}),j8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),G8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),OE=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Cyt]},$$scope:{ctx:L}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),XE=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[wyt]},$$scope:{ctx:L}}}),V8=new ee({}),X8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),QE=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Ayt]},$$scope:{ctx:L}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),HE=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[yyt]},$$scope:{ctx:L}}}),H8=new ee({}),U8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),JE=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Lyt]},$$scope:{ctx:L}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),M5=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[xyt]},$$scope:{ctx:L}}}),Z8=new ee({}),ex=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),C5=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[$yt]},$$scope:{ctx:L}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),B5=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[kyt]},$$scope:{ctx:L}}}),ax=new ee({}),nx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),I5=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Syt]},$$scope:{ctx:L}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),U5=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Ryt]},$$scope:{ctx:L}}}),dx=new ee({}),cx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),Y5=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Byt]},$$scope:{ctx:L}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),iC=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Pyt]},$$scope:{ctx:L}}}),hx=new ee({}),px=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),_x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),cC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Iyt]},$$scope:{ctx:L}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),FC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[qyt]},$$scope:{ctx:L}}}),vx=new ee({}),Fx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),MC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Nyt]},$$scope:{ctx:L}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),RC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[jyt]},$$scope:{ctx:L}}}),Cx=new ee({}),wx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),PC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Dyt]},$$scope:{ctx:L}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),QC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Gyt]},$$scope:{ctx:L}}}),xx=new ee({}),$x=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),HC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Oyt]},$$scope:{ctx:L}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),tw=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Vyt]},$$scope:{ctx:L}}}),Bx=new ee({}),Px=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),nw=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Xyt]},$$scope:{ctx:L}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),hw=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[zyt]},$$scope:{ctx:L}}}),jx=new ee({}),Dx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),uw=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Qyt]},$$scope:{ctx:L}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),bw=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Wyt]},$$scope:{ctx:L}}}),Xx=new ee({}),zx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17113/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),Fw=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Hyt]},$$scope:{ctx:L}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),Ew=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Uyt]},$$scope:{ctx:L}}}),Jx=new ee({}),Yx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17113/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17113/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L389"}}),ww=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Jyt]},$$scope:{ctx:L}}}),e9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17113/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17113/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17113/src/transformers/models/auto/auto_factory.py#L417"}}),yw=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Yyt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),li=o("Auto Classes"),mf=l(),et=a("p"),ii=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=a("code"),Q6=o("from_pretrained()"),gf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ci=o("Instantiating one of "),An=a("a"),W6=o("AutoConfig"),yn=o(", "),Ln=a("a"),H6=o("AutoModel"),fi=o(`, and
`),xn=a("a"),U6=o("AutoTokenizer"),mi=o(" will directly create a class of the relevant architecture. For instance"),hf=l(),F(Ma.$$.fragment),ze=l(),Ae=a("p"),g$=o("will create a model that is an instance of "),gi=a("a"),h$=o("BertModel"),p$=o("."),Eo=l(),Ea=a("p"),u$=o("There is one class of "),pf=a("code"),_$=o("AutoModel"),Jje=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),jPe=l(),hi=a("h2"),uf=a("a"),KZ=a("span"),F(J6.$$.fragment),Yje=l(),ZZ=a("span"),Kje=o("Extending the Auto Classes"),DPe=l(),$n=a("p"),Zje=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),eee=a("code"),eDe=o("NewModel"),oDe=o(", make sure you have a "),oee=a("code"),rDe=o("NewModelConfig"),tDe=o(` then you can add those to the auto
classes like this:`),GPe=l(),F(Y6.$$.fragment),OPe=l(),b$=a("p"),aDe=o("You will then be able to use the auto classes like you would usually do!"),VPe=l(),F(_f.$$.fragment),XPe=l(),pi=a("h2"),bf=a("a"),ree=a("span"),F(K6.$$.fragment),nDe=l(),tee=a("span"),sDe=o("AutoConfig"),zPe=l(),Co=a("div"),F(Z6.$$.fragment),lDe=l(),e0=a("p"),iDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),v$=a("a"),dDe=o("from_pretrained()"),cDe=o(" class method."),fDe=l(),o0=a("p"),mDe=o("This class cannot be instantiated directly using "),aee=a("code"),gDe=o("__init__()"),hDe=o(" (throws an error)."),pDe=l(),Er=a("div"),F(r0.$$.fragment),uDe=l(),nee=a("p"),_De=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),bDe=l(),ui=a("p"),vDe=o("The configuration class to instantiate is selected based on the "),see=a("code"),FDe=o("model_type"),TDe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),lee=a("code"),MDe=o("pretrained_model_name_or_path"),EDe=o(":"),CDe=l(),A=a("ul"),vf=a("li"),iee=a("strong"),wDe=o("albert"),ADe=o(" \u2014 "),F$=a("a"),yDe=o("AlbertConfig"),LDe=o(" (ALBERT model)"),xDe=l(),Ff=a("li"),dee=a("strong"),$De=o("bart"),kDe=o(" \u2014 "),T$=a("a"),SDe=o("BartConfig"),RDe=o(" (BART model)"),BDe=l(),Tf=a("li"),cee=a("strong"),PDe=o("beit"),IDe=o(" \u2014 "),M$=a("a"),qDe=o("BeitConfig"),NDe=o(" (BEiT model)"),jDe=l(),Mf=a("li"),fee=a("strong"),DDe=o("bert"),GDe=o(" \u2014 "),E$=a("a"),ODe=o("BertConfig"),VDe=o(" (BERT model)"),XDe=l(),Ef=a("li"),mee=a("strong"),zDe=o("bert-generation"),QDe=o(" \u2014 "),C$=a("a"),WDe=o("BertGenerationConfig"),HDe=o(" (Bert Generation model)"),UDe=l(),Cf=a("li"),gee=a("strong"),JDe=o("big_bird"),YDe=o(" \u2014 "),w$=a("a"),KDe=o("BigBirdConfig"),ZDe=o(" (BigBird model)"),eGe=l(),wf=a("li"),hee=a("strong"),oGe=o("bigbird_pegasus"),rGe=o(" \u2014 "),A$=a("a"),tGe=o("BigBirdPegasusConfig"),aGe=o(" (BigBirdPegasus model)"),nGe=l(),Af=a("li"),pee=a("strong"),sGe=o("blenderbot"),lGe=o(" \u2014 "),y$=a("a"),iGe=o("BlenderbotConfig"),dGe=o(" (Blenderbot model)"),cGe=l(),yf=a("li"),uee=a("strong"),fGe=o("blenderbot-small"),mGe=o(" \u2014 "),L$=a("a"),gGe=o("BlenderbotSmallConfig"),hGe=o(" (BlenderbotSmall model)"),pGe=l(),Lf=a("li"),_ee=a("strong"),uGe=o("camembert"),_Ge=o(" \u2014 "),x$=a("a"),bGe=o("CamembertConfig"),vGe=o(" (CamemBERT model)"),FGe=l(),xf=a("li"),bee=a("strong"),TGe=o("canine"),MGe=o(" \u2014 "),$$=a("a"),EGe=o("CanineConfig"),CGe=o(" (Canine model)"),wGe=l(),$f=a("li"),vee=a("strong"),AGe=o("clip"),yGe=o(" \u2014 "),k$=a("a"),LGe=o("CLIPConfig"),xGe=o(" (CLIP model)"),$Ge=l(),kf=a("li"),Fee=a("strong"),kGe=o("convbert"),SGe=o(" \u2014 "),S$=a("a"),RGe=o("ConvBertConfig"),BGe=o(" (ConvBERT model)"),PGe=l(),Sf=a("li"),Tee=a("strong"),IGe=o("convnext"),qGe=o(" \u2014 "),R$=a("a"),NGe=o("ConvNextConfig"),jGe=o(" (ConvNext model)"),DGe=l(),Rf=a("li"),Mee=a("strong"),GGe=o("ctrl"),OGe=o(" \u2014 "),B$=a("a"),VGe=o("CTRLConfig"),XGe=o(" (CTRL model)"),zGe=l(),Bf=a("li"),Eee=a("strong"),QGe=o("data2vec-audio"),WGe=o(" \u2014 "),P$=a("a"),HGe=o("Data2VecAudioConfig"),UGe=o(" (Data2VecAudio model)"),JGe=l(),Pf=a("li"),Cee=a("strong"),YGe=o("data2vec-text"),KGe=o(" \u2014 "),I$=a("a"),ZGe=o("Data2VecTextConfig"),eOe=o(" (Data2VecText model)"),oOe=l(),If=a("li"),wee=a("strong"),rOe=o("data2vec-vision"),tOe=o(" \u2014 "),q$=a("a"),aOe=o("Data2VecVisionConfig"),nOe=o(" (Data2VecVision model)"),sOe=l(),qf=a("li"),Aee=a("strong"),lOe=o("deberta"),iOe=o(" \u2014 "),N$=a("a"),dOe=o("DebertaConfig"),cOe=o(" (DeBERTa model)"),fOe=l(),Nf=a("li"),yee=a("strong"),mOe=o("deberta-v2"),gOe=o(" \u2014 "),j$=a("a"),hOe=o("DebertaV2Config"),pOe=o(" (DeBERTa-v2 model)"),uOe=l(),jf=a("li"),Lee=a("strong"),_Oe=o("decision_transformer"),bOe=o(" \u2014 "),D$=a("a"),vOe=o("DecisionTransformerConfig"),FOe=o(" (Decision Transformer model)"),TOe=l(),Df=a("li"),xee=a("strong"),MOe=o("deit"),EOe=o(" \u2014 "),G$=a("a"),COe=o("DeiTConfig"),wOe=o(" (DeiT model)"),AOe=l(),Gf=a("li"),$ee=a("strong"),yOe=o("detr"),LOe=o(" \u2014 "),O$=a("a"),xOe=o("DetrConfig"),$Oe=o(" (DETR model)"),kOe=l(),Of=a("li"),kee=a("strong"),SOe=o("distilbert"),ROe=o(" \u2014 "),V$=a("a"),BOe=o("DistilBertConfig"),POe=o(" (DistilBERT model)"),IOe=l(),Vf=a("li"),See=a("strong"),qOe=o("dpr"),NOe=o(" \u2014 "),X$=a("a"),jOe=o("DPRConfig"),DOe=o(" (DPR model)"),GOe=l(),Xf=a("li"),Ree=a("strong"),OOe=o("dpt"),VOe=o(" \u2014 "),z$=a("a"),XOe=o("DPTConfig"),zOe=o(" (DPT model)"),QOe=l(),zf=a("li"),Bee=a("strong"),WOe=o("electra"),HOe=o(" \u2014 "),Q$=a("a"),UOe=o("ElectraConfig"),JOe=o(" (ELECTRA model)"),YOe=l(),Qf=a("li"),Pee=a("strong"),KOe=o("encoder-decoder"),ZOe=o(" \u2014 "),W$=a("a"),eVe=o("EncoderDecoderConfig"),oVe=o(" (Encoder decoder model)"),rVe=l(),Wf=a("li"),Iee=a("strong"),tVe=o("flaubert"),aVe=o(" \u2014 "),H$=a("a"),nVe=o("FlaubertConfig"),sVe=o(" (FlauBERT model)"),lVe=l(),Hf=a("li"),qee=a("strong"),iVe=o("flava"),dVe=o(" \u2014 "),U$=a("a"),cVe=o("FlavaConfig"),fVe=o(" (Flava model)"),mVe=l(),Uf=a("li"),Nee=a("strong"),gVe=o("fnet"),hVe=o(" \u2014 "),J$=a("a"),pVe=o("FNetConfig"),uVe=o(" (FNet model)"),_Ve=l(),Jf=a("li"),jee=a("strong"),bVe=o("fsmt"),vVe=o(" \u2014 "),Y$=a("a"),FVe=o("FSMTConfig"),TVe=o(" (FairSeq Machine-Translation model)"),MVe=l(),Yf=a("li"),Dee=a("strong"),EVe=o("funnel"),CVe=o(" \u2014 "),K$=a("a"),wVe=o("FunnelConfig"),AVe=o(" (Funnel Transformer model)"),yVe=l(),Kf=a("li"),Gee=a("strong"),LVe=o("glm"),xVe=o(" \u2014 "),Z$=a("a"),$Ve=o("GLMConfig"),kVe=o(" (GLM model)"),SVe=l(),Zf=a("li"),Oee=a("strong"),RVe=o("glpn"),BVe=o(" \u2014 "),ek=a("a"),PVe=o("GLPNConfig"),IVe=o(" (GLPN model)"),qVe=l(),em=a("li"),Vee=a("strong"),NVe=o("gpt2"),jVe=o(" \u2014 "),ok=a("a"),DVe=o("GPT2Config"),GVe=o(" (OpenAI GPT-2 model)"),OVe=l(),om=a("li"),Xee=a("strong"),VVe=o("gpt_neo"),XVe=o(" \u2014 "),rk=a("a"),zVe=o("GPTNeoConfig"),QVe=o(" (GPT Neo model)"),WVe=l(),rm=a("li"),zee=a("strong"),HVe=o("gptj"),UVe=o(" \u2014 "),tk=a("a"),JVe=o("GPTJConfig"),YVe=o(" (GPT-J model)"),KVe=l(),tm=a("li"),Qee=a("strong"),ZVe=o("hubert"),eXe=o(" \u2014 "),ak=a("a"),oXe=o("HubertConfig"),rXe=o(" (Hubert model)"),tXe=l(),am=a("li"),Wee=a("strong"),aXe=o("ibert"),nXe=o(" \u2014 "),nk=a("a"),sXe=o("IBertConfig"),lXe=o(" (I-BERT model)"),iXe=l(),nm=a("li"),Hee=a("strong"),dXe=o("imagegpt"),cXe=o(" \u2014 "),sk=a("a"),fXe=o("ImageGPTConfig"),mXe=o(" (ImageGPT model)"),gXe=l(),sm=a("li"),Uee=a("strong"),hXe=o("layoutlm"),pXe=o(" \u2014 "),lk=a("a"),uXe=o("LayoutLMConfig"),_Xe=o(" (LayoutLM model)"),bXe=l(),lm=a("li"),Jee=a("strong"),vXe=o("layoutlmv2"),FXe=o(" \u2014 "),ik=a("a"),TXe=o("LayoutLMv2Config"),MXe=o(" (LayoutLMv2 model)"),EXe=l(),im=a("li"),Yee=a("strong"),CXe=o("led"),wXe=o(" \u2014 "),dk=a("a"),AXe=o("LEDConfig"),yXe=o(" (LED model)"),LXe=l(),dm=a("li"),Kee=a("strong"),xXe=o("longformer"),$Xe=o(" \u2014 "),ck=a("a"),kXe=o("LongformerConfig"),SXe=o(" (Longformer model)"),RXe=l(),cm=a("li"),Zee=a("strong"),BXe=o("luke"),PXe=o(" \u2014 "),fk=a("a"),IXe=o("LukeConfig"),qXe=o(" (LUKE model)"),NXe=l(),fm=a("li"),eoe=a("strong"),jXe=o("lxmert"),DXe=o(" \u2014 "),mk=a("a"),GXe=o("LxmertConfig"),OXe=o(" (LXMERT model)"),VXe=l(),mm=a("li"),ooe=a("strong"),XXe=o("m2m_100"),zXe=o(" \u2014 "),gk=a("a"),QXe=o("M2M100Config"),WXe=o(" (M2M100 model)"),HXe=l(),gm=a("li"),roe=a("strong"),UXe=o("marian"),JXe=o(" \u2014 "),hk=a("a"),YXe=o("MarianConfig"),KXe=o(" (Marian model)"),ZXe=l(),hm=a("li"),toe=a("strong"),eze=o("maskformer"),oze=o(" \u2014 "),pk=a("a"),rze=o("MaskFormerConfig"),tze=o(" (MaskFormer model)"),aze=l(),pm=a("li"),aoe=a("strong"),nze=o("mbart"),sze=o(" \u2014 "),uk=a("a"),lze=o("MBartConfig"),ize=o(" (mBART model)"),dze=l(),um=a("li"),noe=a("strong"),cze=o("megatron-bert"),fze=o(" \u2014 "),_k=a("a"),mze=o("MegatronBertConfig"),gze=o(" (MegatronBert model)"),hze=l(),_m=a("li"),soe=a("strong"),pze=o("mobilebert"),uze=o(" \u2014 "),bk=a("a"),_ze=o("MobileBertConfig"),bze=o(" (MobileBERT model)"),vze=l(),bm=a("li"),loe=a("strong"),Fze=o("mpnet"),Tze=o(" \u2014 "),vk=a("a"),Mze=o("MPNetConfig"),Eze=o(" (MPNet model)"),Cze=l(),vm=a("li"),ioe=a("strong"),wze=o("mt5"),Aze=o(" \u2014 "),Fk=a("a"),yze=o("MT5Config"),Lze=o(" (mT5 model)"),xze=l(),Fm=a("li"),doe=a("strong"),$ze=o("nystromformer"),kze=o(" \u2014 "),Tk=a("a"),Sze=o("NystromformerConfig"),Rze=o(" (Nystromformer model)"),Bze=l(),Tm=a("li"),coe=a("strong"),Pze=o("openai-gpt"),Ize=o(" \u2014 "),Mk=a("a"),qze=o("OpenAIGPTConfig"),Nze=o(" (OpenAI GPT model)"),jze=l(),Mm=a("li"),foe=a("strong"),Dze=o("pegasus"),Gze=o(" \u2014 "),Ek=a("a"),Oze=o("PegasusConfig"),Vze=o(" (Pegasus model)"),Xze=l(),Em=a("li"),moe=a("strong"),zze=o("perceiver"),Qze=o(" \u2014 "),Ck=a("a"),Wze=o("PerceiverConfig"),Hze=o(" (Perceiver model)"),Uze=l(),Cm=a("li"),goe=a("strong"),Jze=o("plbart"),Yze=o(" \u2014 "),wk=a("a"),Kze=o("PLBartConfig"),Zze=o(" (PLBart model)"),eQe=l(),wm=a("li"),hoe=a("strong"),oQe=o("poolformer"),rQe=o(" \u2014 "),Ak=a("a"),tQe=o("PoolFormerConfig"),aQe=o(" (PoolFormer model)"),nQe=l(),Am=a("li"),poe=a("strong"),sQe=o("prophetnet"),lQe=o(" \u2014 "),yk=a("a"),iQe=o("ProphetNetConfig"),dQe=o(" (ProphetNet model)"),cQe=l(),ym=a("li"),uoe=a("strong"),fQe=o("qdqbert"),mQe=o(" \u2014 "),Lk=a("a"),gQe=o("QDQBertConfig"),hQe=o(" (QDQBert model)"),pQe=l(),Lm=a("li"),_oe=a("strong"),uQe=o("rag"),_Qe=o(" \u2014 "),xk=a("a"),bQe=o("RagConfig"),vQe=o(" (RAG model)"),FQe=l(),xm=a("li"),boe=a("strong"),TQe=o("realm"),MQe=o(" \u2014 "),$k=a("a"),EQe=o("RealmConfig"),CQe=o(" (Realm model)"),wQe=l(),$m=a("li"),voe=a("strong"),AQe=o("reformer"),yQe=o(" \u2014 "),kk=a("a"),LQe=o("ReformerConfig"),xQe=o(" (Reformer model)"),$Qe=l(),km=a("li"),Foe=a("strong"),kQe=o("regnet"),SQe=o(" \u2014 "),Sk=a("a"),RQe=o("RegNetConfig"),BQe=o(" (RegNet model)"),PQe=l(),Sm=a("li"),Toe=a("strong"),IQe=o("rembert"),qQe=o(" \u2014 "),Rk=a("a"),NQe=o("RemBertConfig"),jQe=o(" (RemBERT model)"),DQe=l(),Rm=a("li"),Moe=a("strong"),GQe=o("resnet"),OQe=o(" \u2014 "),Bk=a("a"),VQe=o("ResNetConfig"),XQe=o(" (ResNet model)"),zQe=l(),Bm=a("li"),Eoe=a("strong"),QQe=o("retribert"),WQe=o(" \u2014 "),Pk=a("a"),HQe=o("RetriBertConfig"),UQe=o(" (RetriBERT model)"),JQe=l(),Pm=a("li"),Coe=a("strong"),YQe=o("roberta"),KQe=o(" \u2014 "),Ik=a("a"),ZQe=o("RobertaConfig"),eWe=o(" (RoBERTa model)"),oWe=l(),Im=a("li"),woe=a("strong"),rWe=o("roformer"),tWe=o(" \u2014 "),qk=a("a"),aWe=o("RoFormerConfig"),nWe=o(" (RoFormer model)"),sWe=l(),qm=a("li"),Aoe=a("strong"),lWe=o("segformer"),iWe=o(" \u2014 "),Nk=a("a"),dWe=o("SegformerConfig"),cWe=o(" (SegFormer model)"),fWe=l(),Nm=a("li"),yoe=a("strong"),mWe=o("sew"),gWe=o(" \u2014 "),jk=a("a"),hWe=o("SEWConfig"),pWe=o(" (SEW model)"),uWe=l(),jm=a("li"),Loe=a("strong"),_We=o("sew-d"),bWe=o(" \u2014 "),Dk=a("a"),vWe=o("SEWDConfig"),FWe=o(" (SEW-D model)"),TWe=l(),Dm=a("li"),xoe=a("strong"),MWe=o("speech-encoder-decoder"),EWe=o(" \u2014 "),Gk=a("a"),CWe=o("SpeechEncoderDecoderConfig"),wWe=o(" (Speech Encoder decoder model)"),AWe=l(),Gm=a("li"),$oe=a("strong"),yWe=o("speech_to_text"),LWe=o(" \u2014 "),Ok=a("a"),xWe=o("Speech2TextConfig"),$We=o(" (Speech2Text model)"),kWe=l(),Om=a("li"),koe=a("strong"),SWe=o("speech_to_text_2"),RWe=o(" \u2014 "),Vk=a("a"),BWe=o("Speech2Text2Config"),PWe=o(" (Speech2Text2 model)"),IWe=l(),Vm=a("li"),Soe=a("strong"),qWe=o("splinter"),NWe=o(" \u2014 "),Xk=a("a"),jWe=o("SplinterConfig"),DWe=o(" (Splinter model)"),GWe=l(),Xm=a("li"),Roe=a("strong"),OWe=o("squeezebert"),VWe=o(" \u2014 "),zk=a("a"),XWe=o("SqueezeBertConfig"),zWe=o(" (SqueezeBERT model)"),QWe=l(),zm=a("li"),Boe=a("strong"),WWe=o("swin"),HWe=o(" \u2014 "),Qk=a("a"),UWe=o("SwinConfig"),JWe=o(" (Swin model)"),YWe=l(),Qm=a("li"),Poe=a("strong"),KWe=o("t5"),ZWe=o(" \u2014 "),Wk=a("a"),eHe=o("T5Config"),oHe=o(" (T5 model)"),rHe=l(),Wm=a("li"),Ioe=a("strong"),tHe=o("tapas"),aHe=o(" \u2014 "),Hk=a("a"),nHe=o("TapasConfig"),sHe=o(" (TAPAS model)"),lHe=l(),Hm=a("li"),qoe=a("strong"),iHe=o("tapex"),dHe=o(" \u2014 "),Uk=a("a"),cHe=o("BartConfig"),fHe=o(" (TAPEX model)"),mHe=l(),Um=a("li"),Noe=a("strong"),gHe=o("transfo-xl"),hHe=o(" \u2014 "),Jk=a("a"),pHe=o("TransfoXLConfig"),uHe=o(" (Transformer-XL model)"),_He=l(),Jm=a("li"),joe=a("strong"),bHe=o("trocr"),vHe=o(" \u2014 "),Yk=a("a"),FHe=o("TrOCRConfig"),THe=o(" (TrOCR model)"),MHe=l(),Ym=a("li"),Doe=a("strong"),EHe=o("unispeech"),CHe=o(" \u2014 "),Kk=a("a"),wHe=o("UniSpeechConfig"),AHe=o(" (UniSpeech model)"),yHe=l(),Km=a("li"),Goe=a("strong"),LHe=o("unispeech-sat"),xHe=o(" \u2014 "),Zk=a("a"),$He=o("UniSpeechSatConfig"),kHe=o(" (UniSpeechSat model)"),SHe=l(),Zm=a("li"),Ooe=a("strong"),RHe=o("van"),BHe=o(" \u2014 "),eS=a("a"),PHe=o("VanConfig"),IHe=o(" (VAN model)"),qHe=l(),eg=a("li"),Voe=a("strong"),NHe=o("vilt"),jHe=o(" \u2014 "),oS=a("a"),DHe=o("ViltConfig"),GHe=o(" (ViLT model)"),OHe=l(),og=a("li"),Xoe=a("strong"),VHe=o("vision-encoder-decoder"),XHe=o(" \u2014 "),rS=a("a"),zHe=o("VisionEncoderDecoderConfig"),QHe=o(" (Vision Encoder decoder model)"),WHe=l(),rg=a("li"),zoe=a("strong"),HHe=o("vision-text-dual-encoder"),UHe=o(" \u2014 "),tS=a("a"),JHe=o("VisionTextDualEncoderConfig"),YHe=o(" (VisionTextDualEncoder model)"),KHe=l(),tg=a("li"),Qoe=a("strong"),ZHe=o("visual_bert"),eUe=o(" \u2014 "),aS=a("a"),oUe=o("VisualBertConfig"),rUe=o(" (VisualBert model)"),tUe=l(),ag=a("li"),Woe=a("strong"),aUe=o("vit"),nUe=o(" \u2014 "),nS=a("a"),sUe=o("ViTConfig"),lUe=o(" (ViT model)"),iUe=l(),ng=a("li"),Hoe=a("strong"),dUe=o("vit_mae"),cUe=o(" \u2014 "),sS=a("a"),fUe=o("ViTMAEConfig"),mUe=o(" (ViTMAE model)"),gUe=l(),sg=a("li"),Uoe=a("strong"),hUe=o("wav2vec2"),pUe=o(" \u2014 "),lS=a("a"),uUe=o("Wav2Vec2Config"),_Ue=o(" (Wav2Vec2 model)"),bUe=l(),lg=a("li"),Joe=a("strong"),vUe=o("wavlm"),FUe=o(" \u2014 "),iS=a("a"),TUe=o("WavLMConfig"),MUe=o(" (WavLM model)"),EUe=l(),ig=a("li"),Yoe=a("strong"),CUe=o("xglm"),wUe=o(" \u2014 "),dS=a("a"),AUe=o("XGLMConfig"),yUe=o(" (XGLM model)"),LUe=l(),dg=a("li"),Koe=a("strong"),xUe=o("xlm"),$Ue=o(" \u2014 "),cS=a("a"),kUe=o("XLMConfig"),SUe=o(" (XLM model)"),RUe=l(),cg=a("li"),Zoe=a("strong"),BUe=o("xlm-prophetnet"),PUe=o(" \u2014 "),fS=a("a"),IUe=o("XLMProphetNetConfig"),qUe=o(" (XLMProphetNet model)"),NUe=l(),fg=a("li"),ere=a("strong"),jUe=o("xlm-roberta"),DUe=o(" \u2014 "),mS=a("a"),GUe=o("XLMRobertaConfig"),OUe=o(" (XLM-RoBERTa model)"),VUe=l(),mg=a("li"),ore=a("strong"),XUe=o("xlm-roberta-xl"),zUe=o(" \u2014 "),gS=a("a"),QUe=o("XLMRobertaXLConfig"),WUe=o(" (XLM-RoBERTa-XL model)"),HUe=l(),gg=a("li"),rre=a("strong"),UUe=o("xlnet"),JUe=o(" \u2014 "),hS=a("a"),YUe=o("XLNetConfig"),KUe=o(" (XLNet model)"),ZUe=l(),hg=a("li"),tre=a("strong"),eJe=o("yolos"),oJe=o(" \u2014 "),pS=a("a"),rJe=o("YolosConfig"),tJe=o(" (YOLOS model)"),aJe=l(),pg=a("li"),are=a("strong"),nJe=o("yoso"),sJe=o(" \u2014 "),uS=a("a"),lJe=o("YosoConfig"),iJe=o(" (YOSO model)"),dJe=l(),F(ug.$$.fragment),cJe=l(),_g=a("div"),F(t0.$$.fragment),fJe=l(),nre=a("p"),mJe=o("Register a new configuration for this class."),QPe=l(),_i=a("h2"),bg=a("a"),sre=a("span"),F(a0.$$.fragment),gJe=l(),lre=a("span"),hJe=o("AutoTokenizer"),WPe=l(),wo=a("div"),F(n0.$$.fragment),pJe=l(),s0=a("p"),uJe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),_S=a("a"),_Je=o("AutoTokenizer.from_pretrained()"),bJe=o(" class method."),vJe=l(),l0=a("p"),FJe=o("This class cannot be instantiated directly using "),ire=a("code"),TJe=o("__init__()"),MJe=o(" (throws an error)."),EJe=l(),Cr=a("div"),F(i0.$$.fragment),CJe=l(),dre=a("p"),wJe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),AJe=l(),Ca=a("p"),yJe=o("The tokenizer class to instantiate is selected based on the "),cre=a("code"),LJe=o("model_type"),xJe=o(` property of the config object (either
passed as an argument or loaded from `),fre=a("code"),$Je=o("pretrained_model_name_or_path"),kJe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mre=a("code"),SJe=o("pretrained_model_name_or_path"),RJe=o(":"),BJe=l(),k=a("ul"),kn=a("li"),gre=a("strong"),PJe=o("albert"),IJe=o(" \u2014 "),bS=a("a"),qJe=o("AlbertTokenizer"),NJe=o(" or "),vS=a("a"),jJe=o("AlbertTokenizerFast"),DJe=o(" (ALBERT model)"),GJe=l(),Sn=a("li"),hre=a("strong"),OJe=o("bart"),VJe=o(" \u2014 "),FS=a("a"),XJe=o("BartTokenizer"),zJe=o(" or "),TS=a("a"),QJe=o("BartTokenizerFast"),WJe=o(" (BART model)"),HJe=l(),Rn=a("li"),pre=a("strong"),UJe=o("barthez"),JJe=o(" \u2014 "),MS=a("a"),YJe=o("BarthezTokenizer"),KJe=o(" or "),ES=a("a"),ZJe=o("BarthezTokenizerFast"),eYe=o(" (BARThez model)"),oYe=l(),vg=a("li"),ure=a("strong"),rYe=o("bartpho"),tYe=o(" \u2014 "),CS=a("a"),aYe=o("BartphoTokenizer"),nYe=o(" (BARTpho model)"),sYe=l(),Bn=a("li"),_re=a("strong"),lYe=o("bert"),iYe=o(" \u2014 "),wS=a("a"),dYe=o("BertTokenizer"),cYe=o(" or "),AS=a("a"),fYe=o("BertTokenizerFast"),mYe=o(" (BERT model)"),gYe=l(),Fg=a("li"),bre=a("strong"),hYe=o("bert-generation"),pYe=o(" \u2014 "),yS=a("a"),uYe=o("BertGenerationTokenizer"),_Ye=o(" (Bert Generation model)"),bYe=l(),Tg=a("li"),vre=a("strong"),vYe=o("bert-japanese"),FYe=o(" \u2014 "),LS=a("a"),TYe=o("BertJapaneseTokenizer"),MYe=o(" (BertJapanese model)"),EYe=l(),Mg=a("li"),Fre=a("strong"),CYe=o("bertweet"),wYe=o(" \u2014 "),xS=a("a"),AYe=o("BertweetTokenizer"),yYe=o(" (Bertweet model)"),LYe=l(),Pn=a("li"),Tre=a("strong"),xYe=o("big_bird"),$Ye=o(" \u2014 "),$S=a("a"),kYe=o("BigBirdTokenizer"),SYe=o(" or "),kS=a("a"),RYe=o("BigBirdTokenizerFast"),BYe=o(" (BigBird model)"),PYe=l(),In=a("li"),Mre=a("strong"),IYe=o("bigbird_pegasus"),qYe=o(" \u2014 "),SS=a("a"),NYe=o("PegasusTokenizer"),jYe=o(" or "),RS=a("a"),DYe=o("PegasusTokenizerFast"),GYe=o(" (BigBirdPegasus model)"),OYe=l(),qn=a("li"),Ere=a("strong"),VYe=o("blenderbot"),XYe=o(" \u2014 "),BS=a("a"),zYe=o("BlenderbotTokenizer"),QYe=o(" or "),PS=a("a"),WYe=o("BlenderbotTokenizerFast"),HYe=o(" (Blenderbot model)"),UYe=l(),Eg=a("li"),Cre=a("strong"),JYe=o("blenderbot-small"),YYe=o(" \u2014 "),IS=a("a"),KYe=o("BlenderbotSmallTokenizer"),ZYe=o(" (BlenderbotSmall model)"),eKe=l(),Cg=a("li"),wre=a("strong"),oKe=o("byt5"),rKe=o(" \u2014 "),qS=a("a"),tKe=o("ByT5Tokenizer"),aKe=o(" (ByT5 model)"),nKe=l(),Nn=a("li"),Are=a("strong"),sKe=o("camembert"),lKe=o(" \u2014 "),NS=a("a"),iKe=o("CamembertTokenizer"),dKe=o(" or "),jS=a("a"),cKe=o("CamembertTokenizerFast"),fKe=o(" (CamemBERT model)"),mKe=l(),wg=a("li"),yre=a("strong"),gKe=o("canine"),hKe=o(" \u2014 "),DS=a("a"),pKe=o("CanineTokenizer"),uKe=o(" (Canine model)"),_Ke=l(),jn=a("li"),Lre=a("strong"),bKe=o("clip"),vKe=o(" \u2014 "),GS=a("a"),FKe=o("CLIPTokenizer"),TKe=o(" or "),OS=a("a"),MKe=o("CLIPTokenizerFast"),EKe=o(" (CLIP model)"),CKe=l(),Dn=a("li"),xre=a("strong"),wKe=o("convbert"),AKe=o(" \u2014 "),VS=a("a"),yKe=o("ConvBertTokenizer"),LKe=o(" or "),XS=a("a"),xKe=o("ConvBertTokenizerFast"),$Ke=o(" (ConvBERT model)"),kKe=l(),Gn=a("li"),$re=a("strong"),SKe=o("cpm"),RKe=o(" \u2014 "),zS=a("a"),BKe=o("CpmTokenizer"),PKe=o(" or "),QS=a("a"),IKe=o("CpmTokenizerFast"),qKe=o(" (CPM model)"),NKe=l(),Ag=a("li"),kre=a("strong"),jKe=o("ctrl"),DKe=o(" \u2014 "),WS=a("a"),GKe=o("CTRLTokenizer"),OKe=o(" (CTRL model)"),VKe=l(),On=a("li"),Sre=a("strong"),XKe=o("data2vec-text"),zKe=o(" \u2014 "),HS=a("a"),QKe=o("RobertaTokenizer"),WKe=o(" or "),US=a("a"),HKe=o("RobertaTokenizerFast"),UKe=o(" (Data2VecText model)"),JKe=l(),Vn=a("li"),Rre=a("strong"),YKe=o("deberta"),KKe=o(" \u2014 "),JS=a("a"),ZKe=o("DebertaTokenizer"),eZe=o(" or "),YS=a("a"),oZe=o("DebertaTokenizerFast"),rZe=o(" (DeBERTa model)"),tZe=l(),Xn=a("li"),Bre=a("strong"),aZe=o("deberta-v2"),nZe=o(" \u2014 "),KS=a("a"),sZe=o("DebertaV2Tokenizer"),lZe=o(" or "),ZS=a("a"),iZe=o("DebertaV2TokenizerFast"),dZe=o(" (DeBERTa-v2 model)"),cZe=l(),zn=a("li"),Pre=a("strong"),fZe=o("distilbert"),mZe=o(" \u2014 "),eR=a("a"),gZe=o("DistilBertTokenizer"),hZe=o(" or "),oR=a("a"),pZe=o("DistilBertTokenizerFast"),uZe=o(" (DistilBERT model)"),_Ze=l(),Qn=a("li"),Ire=a("strong"),bZe=o("dpr"),vZe=o(" \u2014 "),rR=a("a"),FZe=o("DPRQuestionEncoderTokenizer"),TZe=o(" or "),tR=a("a"),MZe=o("DPRQuestionEncoderTokenizerFast"),EZe=o(" (DPR model)"),CZe=l(),Wn=a("li"),qre=a("strong"),wZe=o("electra"),AZe=o(" \u2014 "),aR=a("a"),yZe=o("ElectraTokenizer"),LZe=o(" or "),nR=a("a"),xZe=o("ElectraTokenizerFast"),$Ze=o(" (ELECTRA model)"),kZe=l(),yg=a("li"),Nre=a("strong"),SZe=o("flaubert"),RZe=o(" \u2014 "),sR=a("a"),BZe=o("FlaubertTokenizer"),PZe=o(" (FlauBERT model)"),IZe=l(),Hn=a("li"),jre=a("strong"),qZe=o("fnet"),NZe=o(" \u2014 "),lR=a("a"),jZe=o("FNetTokenizer"),DZe=o(" or "),iR=a("a"),GZe=o("FNetTokenizerFast"),OZe=o(" (FNet model)"),VZe=l(),Lg=a("li"),Dre=a("strong"),XZe=o("fsmt"),zZe=o(" \u2014 "),dR=a("a"),QZe=o("FSMTTokenizer"),WZe=o(" (FairSeq Machine-Translation model)"),HZe=l(),Un=a("li"),Gre=a("strong"),UZe=o("funnel"),JZe=o(" \u2014 "),cR=a("a"),YZe=o("FunnelTokenizer"),KZe=o(" or "),fR=a("a"),ZZe=o("FunnelTokenizerFast"),eeo=o(" (Funnel Transformer model)"),oeo=l(),Jn=a("li"),Ore=a("strong"),reo=o("gpt2"),teo=o(" \u2014 "),mR=a("a"),aeo=o("GPT2Tokenizer"),neo=o(" or "),gR=a("a"),seo=o("GPT2TokenizerFast"),leo=o(" (OpenAI GPT-2 model)"),ieo=l(),Yn=a("li"),Vre=a("strong"),deo=o("gpt_neo"),ceo=o(" \u2014 "),hR=a("a"),feo=o("GPT2Tokenizer"),meo=o(" or "),pR=a("a"),geo=o("GPT2TokenizerFast"),heo=o(" (GPT Neo model)"),peo=l(),Kn=a("li"),Xre=a("strong"),ueo=o("gptj"),_eo=o(" \u2014 "),uR=a("a"),beo=o("GPT2Tokenizer"),veo=o(" or "),_R=a("a"),Feo=o("GPT2TokenizerFast"),Teo=o(" (GPT-J model)"),Meo=l(),Zn=a("li"),zre=a("strong"),Eeo=o("herbert"),Ceo=o(" \u2014 "),bR=a("a"),weo=o("HerbertTokenizer"),Aeo=o(" or "),vR=a("a"),yeo=o("HerbertTokenizerFast"),Leo=o(" (HerBERT model)"),xeo=l(),xg=a("li"),Qre=a("strong"),$eo=o("hubert"),keo=o(" \u2014 "),FR=a("a"),Seo=o("Wav2Vec2CTCTokenizer"),Reo=o(" (Hubert model)"),Beo=l(),es=a("li"),Wre=a("strong"),Peo=o("ibert"),Ieo=o(" \u2014 "),TR=a("a"),qeo=o("RobertaTokenizer"),Neo=o(" or "),MR=a("a"),jeo=o("RobertaTokenizerFast"),Deo=o(" (I-BERT model)"),Geo=l(),os=a("li"),Hre=a("strong"),Oeo=o("layoutlm"),Veo=o(" \u2014 "),ER=a("a"),Xeo=o("LayoutLMTokenizer"),zeo=o(" or "),CR=a("a"),Qeo=o("LayoutLMTokenizerFast"),Weo=o(" (LayoutLM model)"),Heo=l(),rs=a("li"),Ure=a("strong"),Ueo=o("layoutlmv2"),Jeo=o(" \u2014 "),wR=a("a"),Yeo=o("LayoutLMv2Tokenizer"),Keo=o(" or "),AR=a("a"),Zeo=o("LayoutLMv2TokenizerFast"),eoo=o(" (LayoutLMv2 model)"),ooo=l(),ts=a("li"),Jre=a("strong"),roo=o("layoutxlm"),too=o(" \u2014 "),yR=a("a"),aoo=o("LayoutXLMTokenizer"),noo=o(" or "),LR=a("a"),soo=o("LayoutXLMTokenizerFast"),loo=o(" (LayoutXLM model)"),ioo=l(),as=a("li"),Yre=a("strong"),doo=o("led"),coo=o(" \u2014 "),xR=a("a"),foo=o("LEDTokenizer"),moo=o(" or "),$R=a("a"),goo=o("LEDTokenizerFast"),hoo=o(" (LED model)"),poo=l(),ns=a("li"),Kre=a("strong"),uoo=o("longformer"),_oo=o(" \u2014 "),kR=a("a"),boo=o("LongformerTokenizer"),voo=o(" or "),SR=a("a"),Foo=o("LongformerTokenizerFast"),Too=o(" (Longformer model)"),Moo=l(),$g=a("li"),Zre=a("strong"),Eoo=o("luke"),Coo=o(" \u2014 "),RR=a("a"),woo=o("LukeTokenizer"),Aoo=o(" (LUKE model)"),yoo=l(),ss=a("li"),ete=a("strong"),Loo=o("lxmert"),xoo=o(" \u2014 "),BR=a("a"),$oo=o("LxmertTokenizer"),koo=o(" or "),PR=a("a"),Soo=o("LxmertTokenizerFast"),Roo=o(" (LXMERT model)"),Boo=l(),kg=a("li"),ote=a("strong"),Poo=o("m2m_100"),Ioo=o(" \u2014 "),IR=a("a"),qoo=o("M2M100Tokenizer"),Noo=o(" (M2M100 model)"),joo=l(),Sg=a("li"),rte=a("strong"),Doo=o("marian"),Goo=o(" \u2014 "),qR=a("a"),Ooo=o("MarianTokenizer"),Voo=o(" (Marian model)"),Xoo=l(),ls=a("li"),tte=a("strong"),zoo=o("mbart"),Qoo=o(" \u2014 "),NR=a("a"),Woo=o("MBartTokenizer"),Hoo=o(" or "),jR=a("a"),Uoo=o("MBartTokenizerFast"),Joo=o(" (mBART model)"),Yoo=l(),is=a("li"),ate=a("strong"),Koo=o("mbart50"),Zoo=o(" \u2014 "),DR=a("a"),ero=o("MBart50Tokenizer"),oro=o(" or "),GR=a("a"),rro=o("MBart50TokenizerFast"),tro=o(" (mBART-50 model)"),aro=l(),ds=a("li"),nte=a("strong"),nro=o("megatron-bert"),sro=o(" \u2014 "),OR=a("a"),lro=o("BertTokenizer"),iro=o(" or "),VR=a("a"),dro=o("BertTokenizerFast"),cro=o(" (MegatronBert model)"),fro=l(),Rg=a("li"),ste=a("strong"),mro=o("mluke"),gro=o(" \u2014 "),XR=a("a"),hro=o("MLukeTokenizer"),pro=o(" (mLUKE model)"),uro=l(),cs=a("li"),lte=a("strong"),_ro=o("mobilebert"),bro=o(" \u2014 "),zR=a("a"),vro=o("MobileBertTokenizer"),Fro=o(" or "),QR=a("a"),Tro=o("MobileBertTokenizerFast"),Mro=o(" (MobileBERT model)"),Ero=l(),fs=a("li"),ite=a("strong"),Cro=o("mpnet"),wro=o(" \u2014 "),WR=a("a"),Aro=o("MPNetTokenizer"),yro=o(" or "),HR=a("a"),Lro=o("MPNetTokenizerFast"),xro=o(" (MPNet model)"),$ro=l(),ms=a("li"),dte=a("strong"),kro=o("mt5"),Sro=o(" \u2014 "),UR=a("a"),Rro=o("MT5Tokenizer"),Bro=o(" or "),JR=a("a"),Pro=o("MT5TokenizerFast"),Iro=o(" (mT5 model)"),qro=l(),gs=a("li"),cte=a("strong"),Nro=o("nystromformer"),jro=o(" \u2014 "),YR=a("a"),Dro=o("AlbertTokenizer"),Gro=o(" or "),KR=a("a"),Oro=o("AlbertTokenizerFast"),Vro=o(" (Nystromformer model)"),Xro=l(),hs=a("li"),fte=a("strong"),zro=o("openai-gpt"),Qro=o(" \u2014 "),ZR=a("a"),Wro=o("OpenAIGPTTokenizer"),Hro=o(" or "),eB=a("a"),Uro=o("OpenAIGPTTokenizerFast"),Jro=o(" (OpenAI GPT model)"),Yro=l(),ps=a("li"),mte=a("strong"),Kro=o("pegasus"),Zro=o(" \u2014 "),oB=a("a"),eto=o("PegasusTokenizer"),oto=o(" or "),rB=a("a"),rto=o("PegasusTokenizerFast"),tto=o(" (Pegasus model)"),ato=l(),Bg=a("li"),gte=a("strong"),nto=o("perceiver"),sto=o(" \u2014 "),tB=a("a"),lto=o("PerceiverTokenizer"),ito=o(" (Perceiver model)"),dto=l(),Pg=a("li"),hte=a("strong"),cto=o("phobert"),fto=o(" \u2014 "),aB=a("a"),mto=o("PhobertTokenizer"),gto=o(" (PhoBERT model)"),hto=l(),Ig=a("li"),pte=a("strong"),pto=o("plbart"),uto=o(" \u2014 "),nB=a("a"),_to=o("PLBartTokenizer"),bto=o(" (PLBart model)"),vto=l(),qg=a("li"),ute=a("strong"),Fto=o("prophetnet"),Tto=o(" \u2014 "),sB=a("a"),Mto=o("ProphetNetTokenizer"),Eto=o(" (ProphetNet model)"),Cto=l(),us=a("li"),_te=a("strong"),wto=o("qdqbert"),Ato=o(" \u2014 "),lB=a("a"),yto=o("BertTokenizer"),Lto=o(" or "),iB=a("a"),xto=o("BertTokenizerFast"),$to=o(" (QDQBert model)"),kto=l(),Ng=a("li"),bte=a("strong"),Sto=o("rag"),Rto=o(" \u2014 "),dB=a("a"),Bto=o("RagTokenizer"),Pto=o(" (RAG model)"),Ito=l(),_s=a("li"),vte=a("strong"),qto=o("realm"),Nto=o(" \u2014 "),cB=a("a"),jto=o("RealmTokenizer"),Dto=o(" or "),fB=a("a"),Gto=o("RealmTokenizerFast"),Oto=o(" (Realm model)"),Vto=l(),bs=a("li"),Fte=a("strong"),Xto=o("reformer"),zto=o(" \u2014 "),mB=a("a"),Qto=o("ReformerTokenizer"),Wto=o(" or "),gB=a("a"),Hto=o("ReformerTokenizerFast"),Uto=o(" (Reformer model)"),Jto=l(),vs=a("li"),Tte=a("strong"),Yto=o("rembert"),Kto=o(" \u2014 "),hB=a("a"),Zto=o("RemBertTokenizer"),eao=o(" or "),pB=a("a"),oao=o("RemBertTokenizerFast"),rao=o(" (RemBERT model)"),tao=l(),Fs=a("li"),Mte=a("strong"),aao=o("retribert"),nao=o(" \u2014 "),uB=a("a"),sao=o("RetriBertTokenizer"),lao=o(" or "),_B=a("a"),iao=o("RetriBertTokenizerFast"),dao=o(" (RetriBERT model)"),cao=l(),Ts=a("li"),Ete=a("strong"),fao=o("roberta"),mao=o(" \u2014 "),bB=a("a"),gao=o("RobertaTokenizer"),hao=o(" or "),vB=a("a"),pao=o("RobertaTokenizerFast"),uao=o(" (RoBERTa model)"),_ao=l(),Ms=a("li"),Cte=a("strong"),bao=o("roformer"),vao=o(" \u2014 "),FB=a("a"),Fao=o("RoFormerTokenizer"),Tao=o(" or "),TB=a("a"),Mao=o("RoFormerTokenizerFast"),Eao=o(" (RoFormer model)"),Cao=l(),jg=a("li"),wte=a("strong"),wao=o("speech_to_text"),Aao=o(" \u2014 "),MB=a("a"),yao=o("Speech2TextTokenizer"),Lao=o(" (Speech2Text model)"),xao=l(),Dg=a("li"),Ate=a("strong"),$ao=o("speech_to_text_2"),kao=o(" \u2014 "),EB=a("a"),Sao=o("Speech2Text2Tokenizer"),Rao=o(" (Speech2Text2 model)"),Bao=l(),Es=a("li"),yte=a("strong"),Pao=o("splinter"),Iao=o(" \u2014 "),CB=a("a"),qao=o("SplinterTokenizer"),Nao=o(" or "),wB=a("a"),jao=o("SplinterTokenizerFast"),Dao=o(" (Splinter model)"),Gao=l(),Cs=a("li"),Lte=a("strong"),Oao=o("squeezebert"),Vao=o(" \u2014 "),AB=a("a"),Xao=o("SqueezeBertTokenizer"),zao=o(" or "),yB=a("a"),Qao=o("SqueezeBertTokenizerFast"),Wao=o(" (SqueezeBERT model)"),Hao=l(),ws=a("li"),xte=a("strong"),Uao=o("t5"),Jao=o(" \u2014 "),LB=a("a"),Yao=o("T5Tokenizer"),Kao=o(" or "),xB=a("a"),Zao=o("T5TokenizerFast"),eno=o(" (T5 model)"),ono=l(),Gg=a("li"),$te=a("strong"),rno=o("tapas"),tno=o(" \u2014 "),$B=a("a"),ano=o("TapasTokenizer"),nno=o(" (TAPAS model)"),sno=l(),Og=a("li"),kte=a("strong"),lno=o("tapex"),ino=o(" \u2014 "),kB=a("a"),dno=o("TapexTokenizer"),cno=o(" (TAPEX model)"),fno=l(),Vg=a("li"),Ste=a("strong"),mno=o("transfo-xl"),gno=o(" \u2014 "),SB=a("a"),hno=o("TransfoXLTokenizer"),pno=o(" (Transformer-XL model)"),uno=l(),As=a("li"),Rte=a("strong"),_no=o("visual_bert"),bno=o(" \u2014 "),RB=a("a"),vno=o("BertTokenizer"),Fno=o(" or "),BB=a("a"),Tno=o("BertTokenizerFast"),Mno=o(" (VisualBert model)"),Eno=l(),Xg=a("li"),Bte=a("strong"),Cno=o("wav2vec2"),wno=o(" \u2014 "),PB=a("a"),Ano=o("Wav2Vec2CTCTokenizer"),yno=o(" (Wav2Vec2 model)"),Lno=l(),zg=a("li"),Pte=a("strong"),xno=o("wav2vec2_phoneme"),$no=o(" \u2014 "),IB=a("a"),kno=o("Wav2Vec2PhonemeCTCTokenizer"),Sno=o(" (Wav2Vec2Phoneme model)"),Rno=l(),ys=a("li"),Ite=a("strong"),Bno=o("xglm"),Pno=o(" \u2014 "),qB=a("a"),Ino=o("XGLMTokenizer"),qno=o(" or "),NB=a("a"),Nno=o("XGLMTokenizerFast"),jno=o(" (XGLM model)"),Dno=l(),Qg=a("li"),qte=a("strong"),Gno=o("xlm"),Ono=o(" \u2014 "),jB=a("a"),Vno=o("XLMTokenizer"),Xno=o(" (XLM model)"),zno=l(),Wg=a("li"),Nte=a("strong"),Qno=o("xlm-prophetnet"),Wno=o(" \u2014 "),DB=a("a"),Hno=o("XLMProphetNetTokenizer"),Uno=o(" (XLMProphetNet model)"),Jno=l(),Ls=a("li"),jte=a("strong"),Yno=o("xlm-roberta"),Kno=o(" \u2014 "),GB=a("a"),Zno=o("XLMRobertaTokenizer"),eso=o(" or "),OB=a("a"),oso=o("XLMRobertaTokenizerFast"),rso=o(" (XLM-RoBERTa model)"),tso=l(),xs=a("li"),Dte=a("strong"),aso=o("xlm-roberta-xl"),nso=o(" \u2014 "),VB=a("a"),sso=o("RobertaTokenizer"),lso=o(" or "),XB=a("a"),iso=o("RobertaTokenizerFast"),dso=o(" (XLM-RoBERTa-XL model)"),cso=l(),$s=a("li"),Gte=a("strong"),fso=o("xlnet"),mso=o(" \u2014 "),zB=a("a"),gso=o("XLNetTokenizer"),hso=o(" or "),QB=a("a"),pso=o("XLNetTokenizerFast"),uso=o(" (XLNet model)"),_so=l(),ks=a("li"),Ote=a("strong"),bso=o("yoso"),vso=o(" \u2014 "),WB=a("a"),Fso=o("AlbertTokenizer"),Tso=o(" or "),HB=a("a"),Mso=o("AlbertTokenizerFast"),Eso=o(" (YOSO model)"),Cso=l(),F(Hg.$$.fragment),wso=l(),Ug=a("div"),F(d0.$$.fragment),Aso=l(),Vte=a("p"),yso=o("Register a new tokenizer in this mapping."),HPe=l(),bi=a("h2"),Jg=a("a"),Xte=a("span"),F(c0.$$.fragment),Lso=l(),zte=a("span"),xso=o("AutoFeatureExtractor"),UPe=l(),Ao=a("div"),F(f0.$$.fragment),$so=l(),m0=a("p"),kso=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),UB=a("a"),Sso=o("AutoFeatureExtractor.from_pretrained()"),Rso=o(" class method."),Bso=l(),g0=a("p"),Pso=o("This class cannot be instantiated directly using "),Qte=a("code"),Iso=o("__init__()"),qso=o(" (throws an error)."),Nso=l(),Qe=a("div"),F(h0.$$.fragment),jso=l(),Wte=a("p"),Dso=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Gso=l(),wa=a("p"),Oso=o("The feature extractor class to instantiate is selected based on the "),Hte=a("code"),Vso=o("model_type"),Xso=o(` property of the config object
(either passed as an argument or loaded from `),Ute=a("code"),zso=o("pretrained_model_name_or_path"),Qso=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Jte=a("code"),Wso=o("pretrained_model_name_or_path"),Hso=o(":"),Uso=l(),oe=a("ul"),Yg=a("li"),Yte=a("strong"),Jso=o("beit"),Yso=o(" \u2014 "),JB=a("a"),Kso=o("BeitFeatureExtractor"),Zso=o(" (BEiT model)"),elo=l(),Kg=a("li"),Kte=a("strong"),olo=o("clip"),rlo=o(" \u2014 "),YB=a("a"),tlo=o("CLIPFeatureExtractor"),alo=o(" (CLIP model)"),nlo=l(),Zg=a("li"),Zte=a("strong"),slo=o("convnext"),llo=o(" \u2014 "),KB=a("a"),ilo=o("ConvNextFeatureExtractor"),dlo=o(" (ConvNext model)"),clo=l(),eh=a("li"),eae=a("strong"),flo=o("data2vec-audio"),mlo=o(" \u2014 "),ZB=a("a"),glo=o("Wav2Vec2FeatureExtractor"),hlo=o(" (Data2VecAudio model)"),plo=l(),oh=a("li"),oae=a("strong"),ulo=o("data2vec-vision"),_lo=o(" \u2014 "),eP=a("a"),blo=o("BeitFeatureExtractor"),vlo=o(" (Data2VecVision model)"),Flo=l(),rh=a("li"),rae=a("strong"),Tlo=o("deit"),Mlo=o(" \u2014 "),oP=a("a"),Elo=o("DeiTFeatureExtractor"),Clo=o(" (DeiT model)"),wlo=l(),th=a("li"),tae=a("strong"),Alo=o("detr"),ylo=o(" \u2014 "),rP=a("a"),Llo=o("DetrFeatureExtractor"),xlo=o(" (DETR model)"),$lo=l(),ah=a("li"),aae=a("strong"),klo=o("dpt"),Slo=o(" \u2014 "),tP=a("a"),Rlo=o("DPTFeatureExtractor"),Blo=o(" (DPT model)"),Plo=l(),nh=a("li"),nae=a("strong"),Ilo=o("flava"),qlo=o(" \u2014 "),aP=a("a"),Nlo=o("FlavaFeatureExtractor"),jlo=o(" (Flava model)"),Dlo=l(),sh=a("li"),sae=a("strong"),Glo=o("glpn"),Olo=o(" \u2014 "),nP=a("a"),Vlo=o("GLPNFeatureExtractor"),Xlo=o(" (GLPN model)"),zlo=l(),lh=a("li"),lae=a("strong"),Qlo=o("hubert"),Wlo=o(" \u2014 "),sP=a("a"),Hlo=o("Wav2Vec2FeatureExtractor"),Ulo=o(" (Hubert model)"),Jlo=l(),ih=a("li"),iae=a("strong"),Ylo=o("layoutlmv2"),Klo=o(" \u2014 "),lP=a("a"),Zlo=o("LayoutLMv2FeatureExtractor"),eio=o(" (LayoutLMv2 model)"),oio=l(),dh=a("li"),dae=a("strong"),rio=o("maskformer"),tio=o(" \u2014 "),iP=a("a"),aio=o("MaskFormerFeatureExtractor"),nio=o(" (MaskFormer model)"),sio=l(),ch=a("li"),cae=a("strong"),lio=o("perceiver"),iio=o(" \u2014 "),dP=a("a"),dio=o("PerceiverFeatureExtractor"),cio=o(" (Perceiver model)"),fio=l(),fh=a("li"),fae=a("strong"),mio=o("poolformer"),gio=o(" \u2014 "),cP=a("a"),hio=o("PoolFormerFeatureExtractor"),pio=o(" (PoolFormer model)"),uio=l(),mh=a("li"),mae=a("strong"),_io=o("regnet"),bio=o(" \u2014 "),fP=a("a"),vio=o("ConvNextFeatureExtractor"),Fio=o(" (RegNet model)"),Tio=l(),gh=a("li"),gae=a("strong"),Mio=o("resnet"),Eio=o(" \u2014 "),mP=a("a"),Cio=o("ConvNextFeatureExtractor"),wio=o(" (ResNet model)"),Aio=l(),hh=a("li"),hae=a("strong"),yio=o("segformer"),Lio=o(" \u2014 "),gP=a("a"),xio=o("SegformerFeatureExtractor"),$io=o(" (SegFormer model)"),kio=l(),ph=a("li"),pae=a("strong"),Sio=o("speech_to_text"),Rio=o(" \u2014 "),hP=a("a"),Bio=o("Speech2TextFeatureExtractor"),Pio=o(" (Speech2Text model)"),Iio=l(),uh=a("li"),uae=a("strong"),qio=o("swin"),Nio=o(" \u2014 "),pP=a("a"),jio=o("ViTFeatureExtractor"),Dio=o(" (Swin model)"),Gio=l(),_h=a("li"),_ae=a("strong"),Oio=o("van"),Vio=o(" \u2014 "),uP=a("a"),Xio=o("ConvNextFeatureExtractor"),zio=o(" (VAN model)"),Qio=l(),bh=a("li"),bae=a("strong"),Wio=o("vit"),Hio=o(" \u2014 "),_P=a("a"),Uio=o("ViTFeatureExtractor"),Jio=o(" (ViT model)"),Yio=l(),vh=a("li"),vae=a("strong"),Kio=o("vit_mae"),Zio=o(" \u2014 "),bP=a("a"),edo=o("ViTFeatureExtractor"),odo=o(" (ViTMAE model)"),rdo=l(),Fh=a("li"),Fae=a("strong"),tdo=o("wav2vec2"),ado=o(" \u2014 "),vP=a("a"),ndo=o("Wav2Vec2FeatureExtractor"),sdo=o(" (Wav2Vec2 model)"),ldo=l(),Th=a("li"),Tae=a("strong"),ido=o("yolos"),ddo=o(" \u2014 "),FP=a("a"),cdo=o("YolosFeatureExtractor"),fdo=o(" (YOLOS model)"),mdo=l(),F(Mh.$$.fragment),gdo=l(),F(Eh.$$.fragment),hdo=l(),Ch=a("div"),F(p0.$$.fragment),pdo=l(),Mae=a("p"),udo=o("Register a new feature extractor for this class."),JPe=l(),vi=a("h2"),wh=a("a"),Eae=a("span"),F(u0.$$.fragment),_do=l(),Cae=a("span"),bdo=o("AutoProcessor"),YPe=l(),yo=a("div"),F(_0.$$.fragment),vdo=l(),b0=a("p"),Fdo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),TP=a("a"),Tdo=o("AutoProcessor.from_pretrained()"),Mdo=o(" class method."),Edo=l(),v0=a("p"),Cdo=o("This class cannot be instantiated directly using "),wae=a("code"),wdo=o("__init__()"),Ado=o(" (throws an error)."),ydo=l(),We=a("div"),F(F0.$$.fragment),Ldo=l(),Aae=a("p"),xdo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),$do=l(),Fi=a("p"),kdo=o("The processor class to instantiate is selected based on the "),yae=a("code"),Sdo=o("model_type"),Rdo=o(` property of the config object (either
passed as an argument or loaded from `),Lae=a("code"),Bdo=o("pretrained_model_name_or_path"),Pdo=o(" if possible):"),Ido=l(),be=a("ul"),Ah=a("li"),xae=a("strong"),qdo=o("clip"),Ndo=o(" \u2014 "),MP=a("a"),jdo=o("CLIPProcessor"),Ddo=o(" (CLIP model)"),Gdo=l(),yh=a("li"),$ae=a("strong"),Odo=o("flava"),Vdo=o(" \u2014 "),kae=a("code"),Xdo=o("FLAVAProcessor"),zdo=o(" (Flava model)"),Qdo=l(),Lh=a("li"),Sae=a("strong"),Wdo=o("layoutlmv2"),Hdo=o(" \u2014 "),EP=a("a"),Udo=o("LayoutLMv2Processor"),Jdo=o(" (LayoutLMv2 model)"),Ydo=l(),xh=a("li"),Rae=a("strong"),Kdo=o("layoutxlm"),Zdo=o(" \u2014 "),CP=a("a"),eco=o("LayoutXLMProcessor"),oco=o(" (LayoutXLM model)"),rco=l(),$h=a("li"),Bae=a("strong"),tco=o("sew"),aco=o(" \u2014 "),wP=a("a"),nco=o("Wav2Vec2Processor"),sco=o(" (SEW model)"),lco=l(),kh=a("li"),Pae=a("strong"),ico=o("sew-d"),dco=o(" \u2014 "),AP=a("a"),cco=o("Wav2Vec2Processor"),fco=o(" (SEW-D model)"),mco=l(),Sh=a("li"),Iae=a("strong"),gco=o("speech_to_text"),hco=o(" \u2014 "),yP=a("a"),pco=o("Speech2TextProcessor"),uco=o(" (Speech2Text model)"),_co=l(),Rh=a("li"),qae=a("strong"),bco=o("speech_to_text_2"),vco=o(" \u2014 "),LP=a("a"),Fco=o("Speech2Text2Processor"),Tco=o(" (Speech2Text2 model)"),Mco=l(),Bh=a("li"),Nae=a("strong"),Eco=o("trocr"),Cco=o(" \u2014 "),xP=a("a"),wco=o("TrOCRProcessor"),Aco=o(" (TrOCR model)"),yco=l(),Ph=a("li"),jae=a("strong"),Lco=o("unispeech"),xco=o(" \u2014 "),$P=a("a"),$co=o("Wav2Vec2Processor"),kco=o(" (UniSpeech model)"),Sco=l(),Ih=a("li"),Dae=a("strong"),Rco=o("unispeech-sat"),Bco=o(" \u2014 "),kP=a("a"),Pco=o("Wav2Vec2Processor"),Ico=o(" (UniSpeechSat model)"),qco=l(),qh=a("li"),Gae=a("strong"),Nco=o("vilt"),jco=o(" \u2014 "),SP=a("a"),Dco=o("ViltProcessor"),Gco=o(" (ViLT model)"),Oco=l(),Nh=a("li"),Oae=a("strong"),Vco=o("vision-text-dual-encoder"),Xco=o(" \u2014 "),RP=a("a"),zco=o("VisionTextDualEncoderProcessor"),Qco=o(" (VisionTextDualEncoder model)"),Wco=l(),jh=a("li"),Vae=a("strong"),Hco=o("wav2vec2"),Uco=o(" \u2014 "),BP=a("a"),Jco=o("Wav2Vec2Processor"),Yco=o(" (Wav2Vec2 model)"),Kco=l(),Dh=a("li"),Xae=a("strong"),Zco=o("wavlm"),efo=o(" \u2014 "),PP=a("a"),ofo=o("Wav2Vec2Processor"),rfo=o(" (WavLM model)"),tfo=l(),F(Gh.$$.fragment),afo=l(),F(Oh.$$.fragment),nfo=l(),Vh=a("div"),F(T0.$$.fragment),sfo=l(),zae=a("p"),lfo=o("Register a new processor for this class."),KPe=l(),Ti=a("h2"),Xh=a("a"),Qae=a("span"),F(M0.$$.fragment),ifo=l(),Wae=a("span"),dfo=o("AutoModel"),ZPe=l(),Lo=a("div"),F(E0.$$.fragment),cfo=l(),Mi=a("p"),ffo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),IP=a("a"),mfo=o("from_pretrained()"),gfo=o(" class method or the "),qP=a("a"),hfo=o("from_config()"),pfo=o(` class
method.`),ufo=l(),C0=a("p"),_fo=o("This class cannot be instantiated directly using "),Hae=a("code"),bfo=o("__init__()"),vfo=o(" (throws an error)."),Ffo=l(),ot=a("div"),F(w0.$$.fragment),Tfo=l(),Uae=a("p"),Mfo=o("Instantiates one of the base model classes of the library from a configuration."),Efo=l(),Ei=a("p"),Cfo=o(`Note:
Loading a model from its configuration file does `),Jae=a("strong"),wfo=o("not"),Afo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NP=a("a"),yfo=o("from_pretrained()"),Lfo=o(" to load the model weights."),xfo=l(),F(zh.$$.fragment),$fo=l(),He=a("div"),F(A0.$$.fragment),kfo=l(),Yae=a("p"),Sfo=o("Instantiate one of the base model classes of the library from a pretrained model."),Rfo=l(),Aa=a("p"),Bfo=o("The model class to instantiate is selected based on the "),Kae=a("code"),Pfo=o("model_type"),Ifo=o(` property of the config object (either
passed as an argument or loaded from `),Zae=a("code"),qfo=o("pretrained_model_name_or_path"),Nfo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ene=a("code"),jfo=o("pretrained_model_name_or_path"),Dfo=o(":"),Gfo=l(),x=a("ul"),Qh=a("li"),one=a("strong"),Ofo=o("albert"),Vfo=o(" \u2014 "),jP=a("a"),Xfo=o("AlbertModel"),zfo=o(" (ALBERT model)"),Qfo=l(),Wh=a("li"),rne=a("strong"),Wfo=o("bart"),Hfo=o(" \u2014 "),DP=a("a"),Ufo=o("BartModel"),Jfo=o(" (BART model)"),Yfo=l(),Hh=a("li"),tne=a("strong"),Kfo=o("beit"),Zfo=o(" \u2014 "),GP=a("a"),emo=o("BeitModel"),omo=o(" (BEiT model)"),rmo=l(),Uh=a("li"),ane=a("strong"),tmo=o("bert"),amo=o(" \u2014 "),OP=a("a"),nmo=o("BertModel"),smo=o(" (BERT model)"),lmo=l(),Jh=a("li"),nne=a("strong"),imo=o("bert-generation"),dmo=o(" \u2014 "),VP=a("a"),cmo=o("BertGenerationEncoder"),fmo=o(" (Bert Generation model)"),mmo=l(),Yh=a("li"),sne=a("strong"),gmo=o("big_bird"),hmo=o(" \u2014 "),XP=a("a"),pmo=o("BigBirdModel"),umo=o(" (BigBird model)"),_mo=l(),Kh=a("li"),lne=a("strong"),bmo=o("bigbird_pegasus"),vmo=o(" \u2014 "),zP=a("a"),Fmo=o("BigBirdPegasusModel"),Tmo=o(" (BigBirdPegasus model)"),Mmo=l(),Zh=a("li"),ine=a("strong"),Emo=o("blenderbot"),Cmo=o(" \u2014 "),QP=a("a"),wmo=o("BlenderbotModel"),Amo=o(" (Blenderbot model)"),ymo=l(),ep=a("li"),dne=a("strong"),Lmo=o("blenderbot-small"),xmo=o(" \u2014 "),WP=a("a"),$mo=o("BlenderbotSmallModel"),kmo=o(" (BlenderbotSmall model)"),Smo=l(),op=a("li"),cne=a("strong"),Rmo=o("camembert"),Bmo=o(" \u2014 "),HP=a("a"),Pmo=o("CamembertModel"),Imo=o(" (CamemBERT model)"),qmo=l(),rp=a("li"),fne=a("strong"),Nmo=o("canine"),jmo=o(" \u2014 "),UP=a("a"),Dmo=o("CanineModel"),Gmo=o(" (Canine model)"),Omo=l(),tp=a("li"),mne=a("strong"),Vmo=o("clip"),Xmo=o(" \u2014 "),JP=a("a"),zmo=o("CLIPModel"),Qmo=o(" (CLIP model)"),Wmo=l(),ap=a("li"),gne=a("strong"),Hmo=o("convbert"),Umo=o(" \u2014 "),YP=a("a"),Jmo=o("ConvBertModel"),Ymo=o(" (ConvBERT model)"),Kmo=l(),np=a("li"),hne=a("strong"),Zmo=o("convnext"),ego=o(" \u2014 "),KP=a("a"),ogo=o("ConvNextModel"),rgo=o(" (ConvNext model)"),tgo=l(),sp=a("li"),pne=a("strong"),ago=o("ctrl"),ngo=o(" \u2014 "),ZP=a("a"),sgo=o("CTRLModel"),lgo=o(" (CTRL model)"),igo=l(),lp=a("li"),une=a("strong"),dgo=o("data2vec-audio"),cgo=o(" \u2014 "),eI=a("a"),fgo=o("Data2VecAudioModel"),mgo=o(" (Data2VecAudio model)"),ggo=l(),ip=a("li"),_ne=a("strong"),hgo=o("data2vec-text"),pgo=o(" \u2014 "),oI=a("a"),ugo=o("Data2VecTextModel"),_go=o(" (Data2VecText model)"),bgo=l(),dp=a("li"),bne=a("strong"),vgo=o("data2vec-vision"),Fgo=o(" \u2014 "),rI=a("a"),Tgo=o("Data2VecVisionModel"),Mgo=o(" (Data2VecVision model)"),Ego=l(),cp=a("li"),vne=a("strong"),Cgo=o("deberta"),wgo=o(" \u2014 "),tI=a("a"),Ago=o("DebertaModel"),ygo=o(" (DeBERTa model)"),Lgo=l(),fp=a("li"),Fne=a("strong"),xgo=o("deberta-v2"),$go=o(" \u2014 "),aI=a("a"),kgo=o("DebertaV2Model"),Sgo=o(" (DeBERTa-v2 model)"),Rgo=l(),mp=a("li"),Tne=a("strong"),Bgo=o("decision_transformer"),Pgo=o(" \u2014 "),nI=a("a"),Igo=o("DecisionTransformerModel"),qgo=o(" (Decision Transformer model)"),Ngo=l(),gp=a("li"),Mne=a("strong"),jgo=o("deit"),Dgo=o(" \u2014 "),sI=a("a"),Ggo=o("DeiTModel"),Ogo=o(" (DeiT model)"),Vgo=l(),hp=a("li"),Ene=a("strong"),Xgo=o("detr"),zgo=o(" \u2014 "),lI=a("a"),Qgo=o("DetrModel"),Wgo=o(" (DETR model)"),Hgo=l(),pp=a("li"),Cne=a("strong"),Ugo=o("distilbert"),Jgo=o(" \u2014 "),iI=a("a"),Ygo=o("DistilBertModel"),Kgo=o(" (DistilBERT model)"),Zgo=l(),up=a("li"),wne=a("strong"),eho=o("dpr"),oho=o(" \u2014 "),dI=a("a"),rho=o("DPRQuestionEncoder"),tho=o(" (DPR model)"),aho=l(),_p=a("li"),Ane=a("strong"),nho=o("dpt"),sho=o(" \u2014 "),cI=a("a"),lho=o("DPTModel"),iho=o(" (DPT model)"),dho=l(),bp=a("li"),yne=a("strong"),cho=o("electra"),fho=o(" \u2014 "),fI=a("a"),mho=o("ElectraModel"),gho=o(" (ELECTRA model)"),hho=l(),vp=a("li"),Lne=a("strong"),pho=o("flaubert"),uho=o(" \u2014 "),mI=a("a"),_ho=o("FlaubertModel"),bho=o(" (FlauBERT model)"),vho=l(),Fp=a("li"),xne=a("strong"),Fho=o("flava"),Tho=o(" \u2014 "),gI=a("a"),Mho=o("FlavaModel"),Eho=o(" (Flava model)"),Cho=l(),Tp=a("li"),$ne=a("strong"),who=o("fnet"),Aho=o(" \u2014 "),hI=a("a"),yho=o("FNetModel"),Lho=o(" (FNet model)"),xho=l(),Mp=a("li"),kne=a("strong"),$ho=o("fsmt"),kho=o(" \u2014 "),pI=a("a"),Sho=o("FSMTModel"),Rho=o(" (FairSeq Machine-Translation model)"),Bho=l(),Ss=a("li"),Sne=a("strong"),Pho=o("funnel"),Iho=o(" \u2014 "),uI=a("a"),qho=o("FunnelModel"),Nho=o(" or "),_I=a("a"),jho=o("FunnelBaseModel"),Dho=o(" (Funnel Transformer model)"),Gho=l(),Ep=a("li"),Rne=a("strong"),Oho=o("glm"),Vho=o(" \u2014 "),bI=a("a"),Xho=o("GLMModel"),zho=o(" (GLM model)"),Qho=l(),Cp=a("li"),Bne=a("strong"),Who=o("glpn"),Hho=o(" \u2014 "),vI=a("a"),Uho=o("GLPNModel"),Jho=o(" (GLPN model)"),Yho=l(),wp=a("li"),Pne=a("strong"),Kho=o("gpt2"),Zho=o(" \u2014 "),FI=a("a"),epo=o("GPT2Model"),opo=o(" (OpenAI GPT-2 model)"),rpo=l(),Ap=a("li"),Ine=a("strong"),tpo=o("gpt_neo"),apo=o(" \u2014 "),TI=a("a"),npo=o("GPTNeoModel"),spo=o(" (GPT Neo model)"),lpo=l(),yp=a("li"),qne=a("strong"),ipo=o("gptj"),dpo=o(" \u2014 "),MI=a("a"),cpo=o("GPTJModel"),fpo=o(" (GPT-J model)"),mpo=l(),Lp=a("li"),Nne=a("strong"),gpo=o("hubert"),hpo=o(" \u2014 "),EI=a("a"),ppo=o("HubertModel"),upo=o(" (Hubert model)"),_po=l(),xp=a("li"),jne=a("strong"),bpo=o("ibert"),vpo=o(" \u2014 "),CI=a("a"),Fpo=o("IBertModel"),Tpo=o(" (I-BERT model)"),Mpo=l(),$p=a("li"),Dne=a("strong"),Epo=o("imagegpt"),Cpo=o(" \u2014 "),wI=a("a"),wpo=o("ImageGPTModel"),Apo=o(" (ImageGPT model)"),ypo=l(),kp=a("li"),Gne=a("strong"),Lpo=o("layoutlm"),xpo=o(" \u2014 "),AI=a("a"),$po=o("LayoutLMModel"),kpo=o(" (LayoutLM model)"),Spo=l(),Sp=a("li"),One=a("strong"),Rpo=o("layoutlmv2"),Bpo=o(" \u2014 "),yI=a("a"),Ppo=o("LayoutLMv2Model"),Ipo=o(" (LayoutLMv2 model)"),qpo=l(),Rp=a("li"),Vne=a("strong"),Npo=o("led"),jpo=o(" \u2014 "),LI=a("a"),Dpo=o("LEDModel"),Gpo=o(" (LED model)"),Opo=l(),Bp=a("li"),Xne=a("strong"),Vpo=o("longformer"),Xpo=o(" \u2014 "),xI=a("a"),zpo=o("LongformerModel"),Qpo=o(" (Longformer model)"),Wpo=l(),Pp=a("li"),zne=a("strong"),Hpo=o("luke"),Upo=o(" \u2014 "),$I=a("a"),Jpo=o("LukeModel"),Ypo=o(" (LUKE model)"),Kpo=l(),Ip=a("li"),Qne=a("strong"),Zpo=o("lxmert"),euo=o(" \u2014 "),kI=a("a"),ouo=o("LxmertModel"),ruo=o(" (LXMERT model)"),tuo=l(),qp=a("li"),Wne=a("strong"),auo=o("m2m_100"),nuo=o(" \u2014 "),SI=a("a"),suo=o("M2M100Model"),luo=o(" (M2M100 model)"),iuo=l(),Np=a("li"),Hne=a("strong"),duo=o("marian"),cuo=o(" \u2014 "),RI=a("a"),fuo=o("MarianModel"),muo=o(" (Marian model)"),guo=l(),jp=a("li"),Une=a("strong"),huo=o("maskformer"),puo=o(" \u2014 "),BI=a("a"),uuo=o("MaskFormerModel"),_uo=o(" (MaskFormer model)"),buo=l(),Dp=a("li"),Jne=a("strong"),vuo=o("mbart"),Fuo=o(" \u2014 "),PI=a("a"),Tuo=o("MBartModel"),Muo=o(" (mBART model)"),Euo=l(),Gp=a("li"),Yne=a("strong"),Cuo=o("megatron-bert"),wuo=o(" \u2014 "),II=a("a"),Auo=o("MegatronBertModel"),yuo=o(" (MegatronBert model)"),Luo=l(),Op=a("li"),Kne=a("strong"),xuo=o("mobilebert"),$uo=o(" \u2014 "),qI=a("a"),kuo=o("MobileBertModel"),Suo=o(" (MobileBERT model)"),Ruo=l(),Vp=a("li"),Zne=a("strong"),Buo=o("mpnet"),Puo=o(" \u2014 "),NI=a("a"),Iuo=o("MPNetModel"),quo=o(" (MPNet model)"),Nuo=l(),Xp=a("li"),ese=a("strong"),juo=o("mt5"),Duo=o(" \u2014 "),jI=a("a"),Guo=o("MT5Model"),Ouo=o(" (mT5 model)"),Vuo=l(),zp=a("li"),ose=a("strong"),Xuo=o("nystromformer"),zuo=o(" \u2014 "),DI=a("a"),Quo=o("NystromformerModel"),Wuo=o(" (Nystromformer model)"),Huo=l(),Qp=a("li"),rse=a("strong"),Uuo=o("openai-gpt"),Juo=o(" \u2014 "),GI=a("a"),Yuo=o("OpenAIGPTModel"),Kuo=o(" (OpenAI GPT model)"),Zuo=l(),Wp=a("li"),tse=a("strong"),e_o=o("pegasus"),o_o=o(" \u2014 "),OI=a("a"),r_o=o("PegasusModel"),t_o=o(" (Pegasus model)"),a_o=l(),Hp=a("li"),ase=a("strong"),n_o=o("perceiver"),s_o=o(" \u2014 "),VI=a("a"),l_o=o("PerceiverModel"),i_o=o(" (Perceiver model)"),d_o=l(),Up=a("li"),nse=a("strong"),c_o=o("plbart"),f_o=o(" \u2014 "),XI=a("a"),m_o=o("PLBartModel"),g_o=o(" (PLBart model)"),h_o=l(),Jp=a("li"),sse=a("strong"),p_o=o("poolformer"),u_o=o(" \u2014 "),zI=a("a"),__o=o("PoolFormerModel"),b_o=o(" (PoolFormer model)"),v_o=l(),Yp=a("li"),lse=a("strong"),F_o=o("prophetnet"),T_o=o(" \u2014 "),QI=a("a"),M_o=o("ProphetNetModel"),E_o=o(" (ProphetNet model)"),C_o=l(),Kp=a("li"),ise=a("strong"),w_o=o("qdqbert"),A_o=o(" \u2014 "),WI=a("a"),y_o=o("QDQBertModel"),L_o=o(" (QDQBert model)"),x_o=l(),Zp=a("li"),dse=a("strong"),$_o=o("reformer"),k_o=o(" \u2014 "),HI=a("a"),S_o=o("ReformerModel"),R_o=o(" (Reformer model)"),B_o=l(),eu=a("li"),cse=a("strong"),P_o=o("regnet"),I_o=o(" \u2014 "),UI=a("a"),q_o=o("RegNetModel"),N_o=o(" (RegNet model)"),j_o=l(),ou=a("li"),fse=a("strong"),D_o=o("rembert"),G_o=o(" \u2014 "),JI=a("a"),O_o=o("RemBertModel"),V_o=o(" (RemBERT model)"),X_o=l(),ru=a("li"),mse=a("strong"),z_o=o("resnet"),Q_o=o(" \u2014 "),YI=a("a"),W_o=o("ResNetModel"),H_o=o(" (ResNet model)"),U_o=l(),tu=a("li"),gse=a("strong"),J_o=o("retribert"),Y_o=o(" \u2014 "),KI=a("a"),K_o=o("RetriBertModel"),Z_o=o(" (RetriBERT model)"),e1o=l(),au=a("li"),hse=a("strong"),o1o=o("roberta"),r1o=o(" \u2014 "),ZI=a("a"),t1o=o("RobertaModel"),a1o=o(" (RoBERTa model)"),n1o=l(),nu=a("li"),pse=a("strong"),s1o=o("roformer"),l1o=o(" \u2014 "),eq=a("a"),i1o=o("RoFormerModel"),d1o=o(" (RoFormer model)"),c1o=l(),su=a("li"),use=a("strong"),f1o=o("segformer"),m1o=o(" \u2014 "),oq=a("a"),g1o=o("SegformerModel"),h1o=o(" (SegFormer model)"),p1o=l(),lu=a("li"),_se=a("strong"),u1o=o("sew"),_1o=o(" \u2014 "),rq=a("a"),b1o=o("SEWModel"),v1o=o(" (SEW model)"),F1o=l(),iu=a("li"),bse=a("strong"),T1o=o("sew-d"),M1o=o(" \u2014 "),tq=a("a"),E1o=o("SEWDModel"),C1o=o(" (SEW-D model)"),w1o=l(),du=a("li"),vse=a("strong"),A1o=o("speech_to_text"),y1o=o(" \u2014 "),aq=a("a"),L1o=o("Speech2TextModel"),x1o=o(" (Speech2Text model)"),$1o=l(),cu=a("li"),Fse=a("strong"),k1o=o("splinter"),S1o=o(" \u2014 "),nq=a("a"),R1o=o("SplinterModel"),B1o=o(" (Splinter model)"),P1o=l(),fu=a("li"),Tse=a("strong"),I1o=o("squeezebert"),q1o=o(" \u2014 "),sq=a("a"),N1o=o("SqueezeBertModel"),j1o=o(" (SqueezeBERT model)"),D1o=l(),mu=a("li"),Mse=a("strong"),G1o=o("swin"),O1o=o(" \u2014 "),lq=a("a"),V1o=o("SwinModel"),X1o=o(" (Swin model)"),z1o=l(),gu=a("li"),Ese=a("strong"),Q1o=o("t5"),W1o=o(" \u2014 "),iq=a("a"),H1o=o("T5Model"),U1o=o(" (T5 model)"),J1o=l(),hu=a("li"),Cse=a("strong"),Y1o=o("tapas"),K1o=o(" \u2014 "),dq=a("a"),Z1o=o("TapasModel"),ebo=o(" (TAPAS model)"),obo=l(),pu=a("li"),wse=a("strong"),rbo=o("transfo-xl"),tbo=o(" \u2014 "),cq=a("a"),abo=o("TransfoXLModel"),nbo=o(" (Transformer-XL model)"),sbo=l(),uu=a("li"),Ase=a("strong"),lbo=o("unispeech"),ibo=o(" \u2014 "),fq=a("a"),dbo=o("UniSpeechModel"),cbo=o(" (UniSpeech model)"),fbo=l(),_u=a("li"),yse=a("strong"),mbo=o("unispeech-sat"),gbo=o(" \u2014 "),mq=a("a"),hbo=o("UniSpeechSatModel"),pbo=o(" (UniSpeechSat model)"),ubo=l(),bu=a("li"),Lse=a("strong"),_bo=o("van"),bbo=o(" \u2014 "),gq=a("a"),vbo=o("VanModel"),Fbo=o(" (VAN model)"),Tbo=l(),vu=a("li"),xse=a("strong"),Mbo=o("vilt"),Ebo=o(" \u2014 "),hq=a("a"),Cbo=o("ViltModel"),wbo=o(" (ViLT model)"),Abo=l(),Fu=a("li"),$se=a("strong"),ybo=o("vision-text-dual-encoder"),Lbo=o(" \u2014 "),pq=a("a"),xbo=o("VisionTextDualEncoderModel"),$bo=o(" (VisionTextDualEncoder model)"),kbo=l(),Tu=a("li"),kse=a("strong"),Sbo=o("visual_bert"),Rbo=o(" \u2014 "),uq=a("a"),Bbo=o("VisualBertModel"),Pbo=o(" (VisualBert model)"),Ibo=l(),Mu=a("li"),Sse=a("strong"),qbo=o("vit"),Nbo=o(" \u2014 "),_q=a("a"),jbo=o("ViTModel"),Dbo=o(" (ViT model)"),Gbo=l(),Eu=a("li"),Rse=a("strong"),Obo=o("vit_mae"),Vbo=o(" \u2014 "),bq=a("a"),Xbo=o("ViTMAEModel"),zbo=o(" (ViTMAE model)"),Qbo=l(),Cu=a("li"),Bse=a("strong"),Wbo=o("wav2vec2"),Hbo=o(" \u2014 "),vq=a("a"),Ubo=o("Wav2Vec2Model"),Jbo=o(" (Wav2Vec2 model)"),Ybo=l(),wu=a("li"),Pse=a("strong"),Kbo=o("wavlm"),Zbo=o(" \u2014 "),Fq=a("a"),e2o=o("WavLMModel"),o2o=o(" (WavLM model)"),r2o=l(),Au=a("li"),Ise=a("strong"),t2o=o("xglm"),a2o=o(" \u2014 "),Tq=a("a"),n2o=o("XGLMModel"),s2o=o(" (XGLM model)"),l2o=l(),yu=a("li"),qse=a("strong"),i2o=o("xlm"),d2o=o(" \u2014 "),Mq=a("a"),c2o=o("XLMModel"),f2o=o(" (XLM model)"),m2o=l(),Lu=a("li"),Nse=a("strong"),g2o=o("xlm-prophetnet"),h2o=o(" \u2014 "),Eq=a("a"),p2o=o("XLMProphetNetModel"),u2o=o(" (XLMProphetNet model)"),_2o=l(),xu=a("li"),jse=a("strong"),b2o=o("xlm-roberta"),v2o=o(" \u2014 "),Cq=a("a"),F2o=o("XLMRobertaModel"),T2o=o(" (XLM-RoBERTa model)"),M2o=l(),$u=a("li"),Dse=a("strong"),E2o=o("xlm-roberta-xl"),C2o=o(" \u2014 "),wq=a("a"),w2o=o("XLMRobertaXLModel"),A2o=o(" (XLM-RoBERTa-XL model)"),y2o=l(),ku=a("li"),Gse=a("strong"),L2o=o("xlnet"),x2o=o(" \u2014 "),Aq=a("a"),$2o=o("XLNetModel"),k2o=o(" (XLNet model)"),S2o=l(),Su=a("li"),Ose=a("strong"),R2o=o("yolos"),B2o=o(" \u2014 "),yq=a("a"),P2o=o("YolosModel"),I2o=o(" (YOLOS model)"),q2o=l(),Ru=a("li"),Vse=a("strong"),N2o=o("yoso"),j2o=o(" \u2014 "),Lq=a("a"),D2o=o("YosoModel"),G2o=o(" (YOSO model)"),O2o=l(),Bu=a("p"),V2o=o("The model is set in evaluation mode by default using "),Xse=a("code"),X2o=o("model.eval()"),z2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zse=a("code"),Q2o=o("model.train()"),W2o=l(),F(Pu.$$.fragment),eIe=l(),Ci=a("h2"),Iu=a("a"),Qse=a("span"),F(y0.$$.fragment),H2o=l(),Wse=a("span"),U2o=o("AutoModelForPreTraining"),oIe=l(),xo=a("div"),F(L0.$$.fragment),J2o=l(),wi=a("p"),Y2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xq=a("a"),K2o=o("from_pretrained()"),Z2o=o(" class method or the "),$q=a("a"),e3o=o("from_config()"),o3o=o(` class
method.`),r3o=l(),x0=a("p"),t3o=o("This class cannot be instantiated directly using "),Hse=a("code"),a3o=o("__init__()"),n3o=o(" (throws an error)."),s3o=l(),rt=a("div"),F($0.$$.fragment),l3o=l(),Use=a("p"),i3o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),d3o=l(),Ai=a("p"),c3o=o(`Note:
Loading a model from its configuration file does `),Jse=a("strong"),f3o=o("not"),m3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kq=a("a"),g3o=o("from_pretrained()"),h3o=o(" to load the model weights."),p3o=l(),F(qu.$$.fragment),u3o=l(),Ue=a("div"),F(k0.$$.fragment),_3o=l(),Yse=a("p"),b3o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),v3o=l(),ya=a("p"),F3o=o("The model class to instantiate is selected based on the "),Kse=a("code"),T3o=o("model_type"),M3o=o(` property of the config object (either
passed as an argument or loaded from `),Zse=a("code"),E3o=o("pretrained_model_name_or_path"),C3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ele=a("code"),w3o=o("pretrained_model_name_or_path"),A3o=o(":"),y3o=l(),G=a("ul"),Nu=a("li"),ole=a("strong"),L3o=o("albert"),x3o=o(" \u2014 "),Sq=a("a"),$3o=o("AlbertForPreTraining"),k3o=o(" (ALBERT model)"),S3o=l(),ju=a("li"),rle=a("strong"),R3o=o("bart"),B3o=o(" \u2014 "),Rq=a("a"),P3o=o("BartForConditionalGeneration"),I3o=o(" (BART model)"),q3o=l(),Du=a("li"),tle=a("strong"),N3o=o("bert"),j3o=o(" \u2014 "),Bq=a("a"),D3o=o("BertForPreTraining"),G3o=o(" (BERT model)"),O3o=l(),Gu=a("li"),ale=a("strong"),V3o=o("big_bird"),X3o=o(" \u2014 "),Pq=a("a"),z3o=o("BigBirdForPreTraining"),Q3o=o(" (BigBird model)"),W3o=l(),Ou=a("li"),nle=a("strong"),H3o=o("camembert"),U3o=o(" \u2014 "),Iq=a("a"),J3o=o("CamembertForMaskedLM"),Y3o=o(" (CamemBERT model)"),K3o=l(),Vu=a("li"),sle=a("strong"),Z3o=o("ctrl"),evo=o(" \u2014 "),qq=a("a"),ovo=o("CTRLLMHeadModel"),rvo=o(" (CTRL model)"),tvo=l(),Xu=a("li"),lle=a("strong"),avo=o("data2vec-text"),nvo=o(" \u2014 "),Nq=a("a"),svo=o("Data2VecTextForMaskedLM"),lvo=o(" (Data2VecText model)"),ivo=l(),zu=a("li"),ile=a("strong"),dvo=o("deberta"),cvo=o(" \u2014 "),jq=a("a"),fvo=o("DebertaForMaskedLM"),mvo=o(" (DeBERTa model)"),gvo=l(),Qu=a("li"),dle=a("strong"),hvo=o("deberta-v2"),pvo=o(" \u2014 "),Dq=a("a"),uvo=o("DebertaV2ForMaskedLM"),_vo=o(" (DeBERTa-v2 model)"),bvo=l(),Wu=a("li"),cle=a("strong"),vvo=o("distilbert"),Fvo=o(" \u2014 "),Gq=a("a"),Tvo=o("DistilBertForMaskedLM"),Mvo=o(" (DistilBERT model)"),Evo=l(),Hu=a("li"),fle=a("strong"),Cvo=o("electra"),wvo=o(" \u2014 "),Oq=a("a"),Avo=o("ElectraForPreTraining"),yvo=o(" (ELECTRA model)"),Lvo=l(),Uu=a("li"),mle=a("strong"),xvo=o("flaubert"),$vo=o(" \u2014 "),Vq=a("a"),kvo=o("FlaubertWithLMHeadModel"),Svo=o(" (FlauBERT model)"),Rvo=l(),Ju=a("li"),gle=a("strong"),Bvo=o("flava"),Pvo=o(" \u2014 "),Xq=a("a"),Ivo=o("FlavaForPreTraining"),qvo=o(" (Flava model)"),Nvo=l(),Yu=a("li"),hle=a("strong"),jvo=o("fnet"),Dvo=o(" \u2014 "),zq=a("a"),Gvo=o("FNetForPreTraining"),Ovo=o(" (FNet model)"),Vvo=l(),Ku=a("li"),ple=a("strong"),Xvo=o("fsmt"),zvo=o(" \u2014 "),Qq=a("a"),Qvo=o("FSMTForConditionalGeneration"),Wvo=o(" (FairSeq Machine-Translation model)"),Hvo=l(),Zu=a("li"),ule=a("strong"),Uvo=o("funnel"),Jvo=o(" \u2014 "),Wq=a("a"),Yvo=o("FunnelForPreTraining"),Kvo=o(" (Funnel Transformer model)"),Zvo=l(),e_=a("li"),_le=a("strong"),eFo=o("gpt2"),oFo=o(" \u2014 "),Hq=a("a"),rFo=o("GPT2LMHeadModel"),tFo=o(" (OpenAI GPT-2 model)"),aFo=l(),o_=a("li"),ble=a("strong"),nFo=o("ibert"),sFo=o(" \u2014 "),Uq=a("a"),lFo=o("IBertForMaskedLM"),iFo=o(" (I-BERT model)"),dFo=l(),r_=a("li"),vle=a("strong"),cFo=o("layoutlm"),fFo=o(" \u2014 "),Jq=a("a"),mFo=o("LayoutLMForMaskedLM"),gFo=o(" (LayoutLM model)"),hFo=l(),t_=a("li"),Fle=a("strong"),pFo=o("longformer"),uFo=o(" \u2014 "),Yq=a("a"),_Fo=o("LongformerForMaskedLM"),bFo=o(" (Longformer model)"),vFo=l(),a_=a("li"),Tle=a("strong"),FFo=o("lxmert"),TFo=o(" \u2014 "),Kq=a("a"),MFo=o("LxmertForPreTraining"),EFo=o(" (LXMERT model)"),CFo=l(),n_=a("li"),Mle=a("strong"),wFo=o("megatron-bert"),AFo=o(" \u2014 "),Zq=a("a"),yFo=o("MegatronBertForPreTraining"),LFo=o(" (MegatronBert model)"),xFo=l(),s_=a("li"),Ele=a("strong"),$Fo=o("mobilebert"),kFo=o(" \u2014 "),eN=a("a"),SFo=o("MobileBertForPreTraining"),RFo=o(" (MobileBERT model)"),BFo=l(),l_=a("li"),Cle=a("strong"),PFo=o("mpnet"),IFo=o(" \u2014 "),oN=a("a"),qFo=o("MPNetForMaskedLM"),NFo=o(" (MPNet model)"),jFo=l(),i_=a("li"),wle=a("strong"),DFo=o("openai-gpt"),GFo=o(" \u2014 "),rN=a("a"),OFo=o("OpenAIGPTLMHeadModel"),VFo=o(" (OpenAI GPT model)"),XFo=l(),d_=a("li"),Ale=a("strong"),zFo=o("retribert"),QFo=o(" \u2014 "),tN=a("a"),WFo=o("RetriBertModel"),HFo=o(" (RetriBERT model)"),UFo=l(),c_=a("li"),yle=a("strong"),JFo=o("roberta"),YFo=o(" \u2014 "),aN=a("a"),KFo=o("RobertaForMaskedLM"),ZFo=o(" (RoBERTa model)"),eTo=l(),f_=a("li"),Lle=a("strong"),oTo=o("squeezebert"),rTo=o(" \u2014 "),nN=a("a"),tTo=o("SqueezeBertForMaskedLM"),aTo=o(" (SqueezeBERT model)"),nTo=l(),m_=a("li"),xle=a("strong"),sTo=o("t5"),lTo=o(" \u2014 "),sN=a("a"),iTo=o("T5ForConditionalGeneration"),dTo=o(" (T5 model)"),cTo=l(),g_=a("li"),$le=a("strong"),fTo=o("tapas"),mTo=o(" \u2014 "),lN=a("a"),gTo=o("TapasForMaskedLM"),hTo=o(" (TAPAS model)"),pTo=l(),h_=a("li"),kle=a("strong"),uTo=o("transfo-xl"),_To=o(" \u2014 "),iN=a("a"),bTo=o("TransfoXLLMHeadModel"),vTo=o(" (Transformer-XL model)"),FTo=l(),p_=a("li"),Sle=a("strong"),TTo=o("unispeech"),MTo=o(" \u2014 "),dN=a("a"),ETo=o("UniSpeechForPreTraining"),CTo=o(" (UniSpeech model)"),wTo=l(),u_=a("li"),Rle=a("strong"),ATo=o("unispeech-sat"),yTo=o(" \u2014 "),cN=a("a"),LTo=o("UniSpeechSatForPreTraining"),xTo=o(" (UniSpeechSat model)"),$To=l(),__=a("li"),Ble=a("strong"),kTo=o("visual_bert"),STo=o(" \u2014 "),fN=a("a"),RTo=o("VisualBertForPreTraining"),BTo=o(" (VisualBert model)"),PTo=l(),b_=a("li"),Ple=a("strong"),ITo=o("vit_mae"),qTo=o(" \u2014 "),mN=a("a"),NTo=o("ViTMAEForPreTraining"),jTo=o(" (ViTMAE model)"),DTo=l(),v_=a("li"),Ile=a("strong"),GTo=o("wav2vec2"),OTo=o(" \u2014 "),gN=a("a"),VTo=o("Wav2Vec2ForPreTraining"),XTo=o(" (Wav2Vec2 model)"),zTo=l(),F_=a("li"),qle=a("strong"),QTo=o("xlm"),WTo=o(" \u2014 "),hN=a("a"),HTo=o("XLMWithLMHeadModel"),UTo=o(" (XLM model)"),JTo=l(),T_=a("li"),Nle=a("strong"),YTo=o("xlm-roberta"),KTo=o(" \u2014 "),pN=a("a"),ZTo=o("XLMRobertaForMaskedLM"),e7o=o(" (XLM-RoBERTa model)"),o7o=l(),M_=a("li"),jle=a("strong"),r7o=o("xlm-roberta-xl"),t7o=o(" \u2014 "),uN=a("a"),a7o=o("XLMRobertaXLForMaskedLM"),n7o=o(" (XLM-RoBERTa-XL model)"),s7o=l(),E_=a("li"),Dle=a("strong"),l7o=o("xlnet"),i7o=o(" \u2014 "),_N=a("a"),d7o=o("XLNetLMHeadModel"),c7o=o(" (XLNet model)"),f7o=l(),C_=a("p"),m7o=o("The model is set in evaluation mode by default using "),Gle=a("code"),g7o=o("model.eval()"),h7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ole=a("code"),p7o=o("model.train()"),u7o=l(),F(w_.$$.fragment),rIe=l(),yi=a("h2"),A_=a("a"),Vle=a("span"),F(S0.$$.fragment),_7o=l(),Xle=a("span"),b7o=o("AutoModelForCausalLM"),tIe=l(),$o=a("div"),F(R0.$$.fragment),v7o=l(),Li=a("p"),F7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bN=a("a"),T7o=o("from_pretrained()"),M7o=o(" class method or the "),vN=a("a"),E7o=o("from_config()"),C7o=o(` class
method.`),w7o=l(),B0=a("p"),A7o=o("This class cannot be instantiated directly using "),zle=a("code"),y7o=o("__init__()"),L7o=o(" (throws an error)."),x7o=l(),tt=a("div"),F(P0.$$.fragment),$7o=l(),Qle=a("p"),k7o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),S7o=l(),xi=a("p"),R7o=o(`Note:
Loading a model from its configuration file does `),Wle=a("strong"),B7o=o("not"),P7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FN=a("a"),I7o=o("from_pretrained()"),q7o=o(" to load the model weights."),N7o=l(),F(y_.$$.fragment),j7o=l(),Je=a("div"),F(I0.$$.fragment),D7o=l(),Hle=a("p"),G7o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),O7o=l(),La=a("p"),V7o=o("The model class to instantiate is selected based on the "),Ule=a("code"),X7o=o("model_type"),z7o=o(` property of the config object (either
passed as an argument or loaded from `),Jle=a("code"),Q7o=o("pretrained_model_name_or_path"),W7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yle=a("code"),H7o=o("pretrained_model_name_or_path"),U7o=o(":"),J7o=l(),z=a("ul"),L_=a("li"),Kle=a("strong"),Y7o=o("bart"),K7o=o(" \u2014 "),TN=a("a"),Z7o=o("BartForCausalLM"),eMo=o(" (BART model)"),oMo=l(),x_=a("li"),Zle=a("strong"),rMo=o("bert"),tMo=o(" \u2014 "),MN=a("a"),aMo=o("BertLMHeadModel"),nMo=o(" (BERT model)"),sMo=l(),$_=a("li"),eie=a("strong"),lMo=o("bert-generation"),iMo=o(" \u2014 "),EN=a("a"),dMo=o("BertGenerationDecoder"),cMo=o(" (Bert Generation model)"),fMo=l(),k_=a("li"),oie=a("strong"),mMo=o("big_bird"),gMo=o(" \u2014 "),CN=a("a"),hMo=o("BigBirdForCausalLM"),pMo=o(" (BigBird model)"),uMo=l(),S_=a("li"),rie=a("strong"),_Mo=o("bigbird_pegasus"),bMo=o(" \u2014 "),wN=a("a"),vMo=o("BigBirdPegasusForCausalLM"),FMo=o(" (BigBirdPegasus model)"),TMo=l(),R_=a("li"),tie=a("strong"),MMo=o("blenderbot"),EMo=o(" \u2014 "),AN=a("a"),CMo=o("BlenderbotForCausalLM"),wMo=o(" (Blenderbot model)"),AMo=l(),B_=a("li"),aie=a("strong"),yMo=o("blenderbot-small"),LMo=o(" \u2014 "),yN=a("a"),xMo=o("BlenderbotSmallForCausalLM"),$Mo=o(" (BlenderbotSmall model)"),kMo=l(),P_=a("li"),nie=a("strong"),SMo=o("camembert"),RMo=o(" \u2014 "),LN=a("a"),BMo=o("CamembertForCausalLM"),PMo=o(" (CamemBERT model)"),IMo=l(),I_=a("li"),sie=a("strong"),qMo=o("ctrl"),NMo=o(" \u2014 "),xN=a("a"),jMo=o("CTRLLMHeadModel"),DMo=o(" (CTRL model)"),GMo=l(),q_=a("li"),lie=a("strong"),OMo=o("data2vec-text"),VMo=o(" \u2014 "),$N=a("a"),XMo=o("Data2VecTextForCausalLM"),zMo=o(" (Data2VecText model)"),QMo=l(),N_=a("li"),iie=a("strong"),WMo=o("electra"),HMo=o(" \u2014 "),kN=a("a"),UMo=o("ElectraForCausalLM"),JMo=o(" (ELECTRA model)"),YMo=l(),j_=a("li"),die=a("strong"),KMo=o("gpt2"),ZMo=o(" \u2014 "),SN=a("a"),e4o=o("GPT2LMHeadModel"),o4o=o(" (OpenAI GPT-2 model)"),r4o=l(),D_=a("li"),cie=a("strong"),t4o=o("gpt_neo"),a4o=o(" \u2014 "),RN=a("a"),n4o=o("GPTNeoForCausalLM"),s4o=o(" (GPT Neo model)"),l4o=l(),G_=a("li"),fie=a("strong"),i4o=o("gptj"),d4o=o(" \u2014 "),BN=a("a"),c4o=o("GPTJForCausalLM"),f4o=o(" (GPT-J model)"),m4o=l(),O_=a("li"),mie=a("strong"),g4o=o("marian"),h4o=o(" \u2014 "),PN=a("a"),p4o=o("MarianForCausalLM"),u4o=o(" (Marian model)"),_4o=l(),V_=a("li"),gie=a("strong"),b4o=o("mbart"),v4o=o(" \u2014 "),IN=a("a"),F4o=o("MBartForCausalLM"),T4o=o(" (mBART model)"),M4o=l(),X_=a("li"),hie=a("strong"),E4o=o("megatron-bert"),C4o=o(" \u2014 "),qN=a("a"),w4o=o("MegatronBertForCausalLM"),A4o=o(" (MegatronBert model)"),y4o=l(),z_=a("li"),pie=a("strong"),L4o=o("openai-gpt"),x4o=o(" \u2014 "),NN=a("a"),$4o=o("OpenAIGPTLMHeadModel"),k4o=o(" (OpenAI GPT model)"),S4o=l(),Q_=a("li"),uie=a("strong"),R4o=o("pegasus"),B4o=o(" \u2014 "),jN=a("a"),P4o=o("PegasusForCausalLM"),I4o=o(" (Pegasus model)"),q4o=l(),W_=a("li"),_ie=a("strong"),N4o=o("plbart"),j4o=o(" \u2014 "),DN=a("a"),D4o=o("PLBartForCausalLM"),G4o=o(" (PLBart model)"),O4o=l(),H_=a("li"),bie=a("strong"),V4o=o("prophetnet"),X4o=o(" \u2014 "),GN=a("a"),z4o=o("ProphetNetForCausalLM"),Q4o=o(" (ProphetNet model)"),W4o=l(),U_=a("li"),vie=a("strong"),H4o=o("qdqbert"),U4o=o(" \u2014 "),ON=a("a"),J4o=o("QDQBertLMHeadModel"),Y4o=o(" (QDQBert model)"),K4o=l(),J_=a("li"),Fie=a("strong"),Z4o=o("reformer"),eEo=o(" \u2014 "),VN=a("a"),oEo=o("ReformerModelWithLMHead"),rEo=o(" (Reformer model)"),tEo=l(),Y_=a("li"),Tie=a("strong"),aEo=o("rembert"),nEo=o(" \u2014 "),XN=a("a"),sEo=o("RemBertForCausalLM"),lEo=o(" (RemBERT model)"),iEo=l(),K_=a("li"),Mie=a("strong"),dEo=o("roberta"),cEo=o(" \u2014 "),zN=a("a"),fEo=o("RobertaForCausalLM"),mEo=o(" (RoBERTa model)"),gEo=l(),Z_=a("li"),Eie=a("strong"),hEo=o("roformer"),pEo=o(" \u2014 "),QN=a("a"),uEo=o("RoFormerForCausalLM"),_Eo=o(" (RoFormer model)"),bEo=l(),e1=a("li"),Cie=a("strong"),vEo=o("speech_to_text_2"),FEo=o(" \u2014 "),WN=a("a"),TEo=o("Speech2Text2ForCausalLM"),MEo=o(" (Speech2Text2 model)"),EEo=l(),o1=a("li"),wie=a("strong"),CEo=o("transfo-xl"),wEo=o(" \u2014 "),HN=a("a"),AEo=o("TransfoXLLMHeadModel"),yEo=o(" (Transformer-XL model)"),LEo=l(),r1=a("li"),Aie=a("strong"),xEo=o("trocr"),$Eo=o(" \u2014 "),UN=a("a"),kEo=o("TrOCRForCausalLM"),SEo=o(" (TrOCR model)"),REo=l(),t1=a("li"),yie=a("strong"),BEo=o("xglm"),PEo=o(" \u2014 "),JN=a("a"),IEo=o("XGLMForCausalLM"),qEo=o(" (XGLM model)"),NEo=l(),a1=a("li"),Lie=a("strong"),jEo=o("xlm"),DEo=o(" \u2014 "),YN=a("a"),GEo=o("XLMWithLMHeadModel"),OEo=o(" (XLM model)"),VEo=l(),n1=a("li"),xie=a("strong"),XEo=o("xlm-prophetnet"),zEo=o(" \u2014 "),KN=a("a"),QEo=o("XLMProphetNetForCausalLM"),WEo=o(" (XLMProphetNet model)"),HEo=l(),s1=a("li"),$ie=a("strong"),UEo=o("xlm-roberta"),JEo=o(" \u2014 "),ZN=a("a"),YEo=o("XLMRobertaForCausalLM"),KEo=o(" (XLM-RoBERTa model)"),ZEo=l(),l1=a("li"),kie=a("strong"),e5o=o("xlm-roberta-xl"),o5o=o(" \u2014 "),ej=a("a"),r5o=o("XLMRobertaXLForCausalLM"),t5o=o(" (XLM-RoBERTa-XL model)"),a5o=l(),i1=a("li"),Sie=a("strong"),n5o=o("xlnet"),s5o=o(" \u2014 "),oj=a("a"),l5o=o("XLNetLMHeadModel"),i5o=o(" (XLNet model)"),d5o=l(),d1=a("p"),c5o=o("The model is set in evaluation mode by default using "),Rie=a("code"),f5o=o("model.eval()"),m5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bie=a("code"),g5o=o("model.train()"),h5o=l(),F(c1.$$.fragment),aIe=l(),$i=a("h2"),f1=a("a"),Pie=a("span"),F(q0.$$.fragment),p5o=l(),Iie=a("span"),u5o=o("AutoModelForMaskedLM"),nIe=l(),ko=a("div"),F(N0.$$.fragment),_5o=l(),ki=a("p"),b5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rj=a("a"),v5o=o("from_pretrained()"),F5o=o(" class method or the "),tj=a("a"),T5o=o("from_config()"),M5o=o(` class
method.`),E5o=l(),j0=a("p"),C5o=o("This class cannot be instantiated directly using "),qie=a("code"),w5o=o("__init__()"),A5o=o(" (throws an error)."),y5o=l(),at=a("div"),F(D0.$$.fragment),L5o=l(),Nie=a("p"),x5o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$5o=l(),Si=a("p"),k5o=o(`Note:
Loading a model from its configuration file does `),jie=a("strong"),S5o=o("not"),R5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aj=a("a"),B5o=o("from_pretrained()"),P5o=o(" to load the model weights."),I5o=l(),F(m1.$$.fragment),q5o=l(),Ye=a("div"),F(G0.$$.fragment),N5o=l(),Die=a("p"),j5o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),D5o=l(),xa=a("p"),G5o=o("The model class to instantiate is selected based on the "),Gie=a("code"),O5o=o("model_type"),V5o=o(` property of the config object (either
passed as an argument or loaded from `),Oie=a("code"),X5o=o("pretrained_model_name_or_path"),z5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vie=a("code"),Q5o=o("pretrained_model_name_or_path"),W5o=o(":"),H5o=l(),Q=a("ul"),g1=a("li"),Xie=a("strong"),U5o=o("albert"),J5o=o(" \u2014 "),nj=a("a"),Y5o=o("AlbertForMaskedLM"),K5o=o(" (ALBERT model)"),Z5o=l(),h1=a("li"),zie=a("strong"),eCo=o("bart"),oCo=o(" \u2014 "),sj=a("a"),rCo=o("BartForConditionalGeneration"),tCo=o(" (BART model)"),aCo=l(),p1=a("li"),Qie=a("strong"),nCo=o("bert"),sCo=o(" \u2014 "),lj=a("a"),lCo=o("BertForMaskedLM"),iCo=o(" (BERT model)"),dCo=l(),u1=a("li"),Wie=a("strong"),cCo=o("big_bird"),fCo=o(" \u2014 "),ij=a("a"),mCo=o("BigBirdForMaskedLM"),gCo=o(" (BigBird model)"),hCo=l(),_1=a("li"),Hie=a("strong"),pCo=o("camembert"),uCo=o(" \u2014 "),dj=a("a"),_Co=o("CamembertForMaskedLM"),bCo=o(" (CamemBERT model)"),vCo=l(),b1=a("li"),Uie=a("strong"),FCo=o("convbert"),TCo=o(" \u2014 "),cj=a("a"),MCo=o("ConvBertForMaskedLM"),ECo=o(" (ConvBERT model)"),CCo=l(),v1=a("li"),Jie=a("strong"),wCo=o("data2vec-text"),ACo=o(" \u2014 "),fj=a("a"),yCo=o("Data2VecTextForMaskedLM"),LCo=o(" (Data2VecText model)"),xCo=l(),F1=a("li"),Yie=a("strong"),$Co=o("deberta"),kCo=o(" \u2014 "),mj=a("a"),SCo=o("DebertaForMaskedLM"),RCo=o(" (DeBERTa model)"),BCo=l(),T1=a("li"),Kie=a("strong"),PCo=o("deberta-v2"),ICo=o(" \u2014 "),gj=a("a"),qCo=o("DebertaV2ForMaskedLM"),NCo=o(" (DeBERTa-v2 model)"),jCo=l(),M1=a("li"),Zie=a("strong"),DCo=o("distilbert"),GCo=o(" \u2014 "),hj=a("a"),OCo=o("DistilBertForMaskedLM"),VCo=o(" (DistilBERT model)"),XCo=l(),E1=a("li"),ede=a("strong"),zCo=o("electra"),QCo=o(" \u2014 "),pj=a("a"),WCo=o("ElectraForMaskedLM"),HCo=o(" (ELECTRA model)"),UCo=l(),C1=a("li"),ode=a("strong"),JCo=o("flaubert"),YCo=o(" \u2014 "),uj=a("a"),KCo=o("FlaubertWithLMHeadModel"),ZCo=o(" (FlauBERT model)"),ewo=l(),w1=a("li"),rde=a("strong"),owo=o("fnet"),rwo=o(" \u2014 "),_j=a("a"),two=o("FNetForMaskedLM"),awo=o(" (FNet model)"),nwo=l(),A1=a("li"),tde=a("strong"),swo=o("funnel"),lwo=o(" \u2014 "),bj=a("a"),iwo=o("FunnelForMaskedLM"),dwo=o(" (Funnel Transformer model)"),cwo=l(),y1=a("li"),ade=a("strong"),fwo=o("ibert"),mwo=o(" \u2014 "),vj=a("a"),gwo=o("IBertForMaskedLM"),hwo=o(" (I-BERT model)"),pwo=l(),L1=a("li"),nde=a("strong"),uwo=o("layoutlm"),_wo=o(" \u2014 "),Fj=a("a"),bwo=o("LayoutLMForMaskedLM"),vwo=o(" (LayoutLM model)"),Fwo=l(),x1=a("li"),sde=a("strong"),Two=o("longformer"),Mwo=o(" \u2014 "),Tj=a("a"),Ewo=o("LongformerForMaskedLM"),Cwo=o(" (Longformer model)"),wwo=l(),$1=a("li"),lde=a("strong"),Awo=o("mbart"),ywo=o(" \u2014 "),Mj=a("a"),Lwo=o("MBartForConditionalGeneration"),xwo=o(" (mBART model)"),$wo=l(),k1=a("li"),ide=a("strong"),kwo=o("megatron-bert"),Swo=o(" \u2014 "),Ej=a("a"),Rwo=o("MegatronBertForMaskedLM"),Bwo=o(" (MegatronBert model)"),Pwo=l(),S1=a("li"),dde=a("strong"),Iwo=o("mobilebert"),qwo=o(" \u2014 "),Cj=a("a"),Nwo=o("MobileBertForMaskedLM"),jwo=o(" (MobileBERT model)"),Dwo=l(),R1=a("li"),cde=a("strong"),Gwo=o("mpnet"),Owo=o(" \u2014 "),wj=a("a"),Vwo=o("MPNetForMaskedLM"),Xwo=o(" (MPNet model)"),zwo=l(),B1=a("li"),fde=a("strong"),Qwo=o("nystromformer"),Wwo=o(" \u2014 "),Aj=a("a"),Hwo=o("NystromformerForMaskedLM"),Uwo=o(" (Nystromformer model)"),Jwo=l(),P1=a("li"),mde=a("strong"),Ywo=o("perceiver"),Kwo=o(" \u2014 "),yj=a("a"),Zwo=o("PerceiverForMaskedLM"),eAo=o(" (Perceiver model)"),oAo=l(),I1=a("li"),gde=a("strong"),rAo=o("qdqbert"),tAo=o(" \u2014 "),Lj=a("a"),aAo=o("QDQBertForMaskedLM"),nAo=o(" (QDQBert model)"),sAo=l(),q1=a("li"),hde=a("strong"),lAo=o("reformer"),iAo=o(" \u2014 "),xj=a("a"),dAo=o("ReformerForMaskedLM"),cAo=o(" (Reformer model)"),fAo=l(),N1=a("li"),pde=a("strong"),mAo=o("rembert"),gAo=o(" \u2014 "),$j=a("a"),hAo=o("RemBertForMaskedLM"),pAo=o(" (RemBERT model)"),uAo=l(),j1=a("li"),ude=a("strong"),_Ao=o("roberta"),bAo=o(" \u2014 "),kj=a("a"),vAo=o("RobertaForMaskedLM"),FAo=o(" (RoBERTa model)"),TAo=l(),D1=a("li"),_de=a("strong"),MAo=o("roformer"),EAo=o(" \u2014 "),Sj=a("a"),CAo=o("RoFormerForMaskedLM"),wAo=o(" (RoFormer model)"),AAo=l(),G1=a("li"),bde=a("strong"),yAo=o("squeezebert"),LAo=o(" \u2014 "),Rj=a("a"),xAo=o("SqueezeBertForMaskedLM"),$Ao=o(" (SqueezeBERT model)"),kAo=l(),O1=a("li"),vde=a("strong"),SAo=o("tapas"),RAo=o(" \u2014 "),Bj=a("a"),BAo=o("TapasForMaskedLM"),PAo=o(" (TAPAS model)"),IAo=l(),V1=a("li"),Fde=a("strong"),qAo=o("wav2vec2"),NAo=o(" \u2014 "),Tde=a("code"),jAo=o("Wav2Vec2ForMaskedLM"),DAo=o(" (Wav2Vec2 model)"),GAo=l(),X1=a("li"),Mde=a("strong"),OAo=o("xlm"),VAo=o(" \u2014 "),Pj=a("a"),XAo=o("XLMWithLMHeadModel"),zAo=o(" (XLM model)"),QAo=l(),z1=a("li"),Ede=a("strong"),WAo=o("xlm-roberta"),HAo=o(" \u2014 "),Ij=a("a"),UAo=o("XLMRobertaForMaskedLM"),JAo=o(" (XLM-RoBERTa model)"),YAo=l(),Q1=a("li"),Cde=a("strong"),KAo=o("xlm-roberta-xl"),ZAo=o(" \u2014 "),qj=a("a"),e6o=o("XLMRobertaXLForMaskedLM"),o6o=o(" (XLM-RoBERTa-XL model)"),r6o=l(),W1=a("li"),wde=a("strong"),t6o=o("yoso"),a6o=o(" \u2014 "),Nj=a("a"),n6o=o("YosoForMaskedLM"),s6o=o(" (YOSO model)"),l6o=l(),H1=a("p"),i6o=o("The model is set in evaluation mode by default using "),Ade=a("code"),d6o=o("model.eval()"),c6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yde=a("code"),f6o=o("model.train()"),m6o=l(),F(U1.$$.fragment),sIe=l(),Ri=a("h2"),J1=a("a"),Lde=a("span"),F(O0.$$.fragment),g6o=l(),xde=a("span"),h6o=o("AutoModelForSeq2SeqLM"),lIe=l(),So=a("div"),F(V0.$$.fragment),p6o=l(),Bi=a("p"),u6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),jj=a("a"),_6o=o("from_pretrained()"),b6o=o(" class method or the "),Dj=a("a"),v6o=o("from_config()"),F6o=o(` class
method.`),T6o=l(),X0=a("p"),M6o=o("This class cannot be instantiated directly using "),$de=a("code"),E6o=o("__init__()"),C6o=o(" (throws an error)."),w6o=l(),nt=a("div"),F(z0.$$.fragment),A6o=l(),kde=a("p"),y6o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),L6o=l(),Pi=a("p"),x6o=o(`Note:
Loading a model from its configuration file does `),Sde=a("strong"),$6o=o("not"),k6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gj=a("a"),S6o=o("from_pretrained()"),R6o=o(" to load the model weights."),B6o=l(),F(Y1.$$.fragment),P6o=l(),Ke=a("div"),F(Q0.$$.fragment),I6o=l(),Rde=a("p"),q6o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),N6o=l(),$a=a("p"),j6o=o("The model class to instantiate is selected based on the "),Bde=a("code"),D6o=o("model_type"),G6o=o(` property of the config object (either
passed as an argument or loaded from `),Pde=a("code"),O6o=o("pretrained_model_name_or_path"),V6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ide=a("code"),X6o=o("pretrained_model_name_or_path"),z6o=o(":"),Q6o=l(),he=a("ul"),K1=a("li"),qde=a("strong"),W6o=o("bart"),H6o=o(" \u2014 "),Oj=a("a"),U6o=o("BartForConditionalGeneration"),J6o=o(" (BART model)"),Y6o=l(),Z1=a("li"),Nde=a("strong"),K6o=o("bigbird_pegasus"),Z6o=o(" \u2014 "),Vj=a("a"),e0o=o("BigBirdPegasusForConditionalGeneration"),o0o=o(" (BigBirdPegasus model)"),r0o=l(),eb=a("li"),jde=a("strong"),t0o=o("blenderbot"),a0o=o(" \u2014 "),Xj=a("a"),n0o=o("BlenderbotForConditionalGeneration"),s0o=o(" (Blenderbot model)"),l0o=l(),ob=a("li"),Dde=a("strong"),i0o=o("blenderbot-small"),d0o=o(" \u2014 "),zj=a("a"),c0o=o("BlenderbotSmallForConditionalGeneration"),f0o=o(" (BlenderbotSmall model)"),m0o=l(),rb=a("li"),Gde=a("strong"),g0o=o("encoder-decoder"),h0o=o(" \u2014 "),Qj=a("a"),p0o=o("EncoderDecoderModel"),u0o=o(" (Encoder decoder model)"),_0o=l(),tb=a("li"),Ode=a("strong"),b0o=o("fsmt"),v0o=o(" \u2014 "),Wj=a("a"),F0o=o("FSMTForConditionalGeneration"),T0o=o(" (FairSeq Machine-Translation model)"),M0o=l(),ab=a("li"),Vde=a("strong"),E0o=o("led"),C0o=o(" \u2014 "),Hj=a("a"),w0o=o("LEDForConditionalGeneration"),A0o=o(" (LED model)"),y0o=l(),nb=a("li"),Xde=a("strong"),L0o=o("m2m_100"),x0o=o(" \u2014 "),Uj=a("a"),$0o=o("M2M100ForConditionalGeneration"),k0o=o(" (M2M100 model)"),S0o=l(),sb=a("li"),zde=a("strong"),R0o=o("marian"),B0o=o(" \u2014 "),Jj=a("a"),P0o=o("MarianMTModel"),I0o=o(" (Marian model)"),q0o=l(),lb=a("li"),Qde=a("strong"),N0o=o("mbart"),j0o=o(" \u2014 "),Yj=a("a"),D0o=o("MBartForConditionalGeneration"),G0o=o(" (mBART model)"),O0o=l(),ib=a("li"),Wde=a("strong"),V0o=o("mt5"),X0o=o(" \u2014 "),Kj=a("a"),z0o=o("MT5ForConditionalGeneration"),Q0o=o(" (mT5 model)"),W0o=l(),db=a("li"),Hde=a("strong"),H0o=o("pegasus"),U0o=o(" \u2014 "),Zj=a("a"),J0o=o("PegasusForConditionalGeneration"),Y0o=o(" (Pegasus model)"),K0o=l(),cb=a("li"),Ude=a("strong"),Z0o=o("plbart"),eyo=o(" \u2014 "),eD=a("a"),oyo=o("PLBartForConditionalGeneration"),ryo=o(" (PLBart model)"),tyo=l(),fb=a("li"),Jde=a("strong"),ayo=o("prophetnet"),nyo=o(" \u2014 "),oD=a("a"),syo=o("ProphetNetForConditionalGeneration"),lyo=o(" (ProphetNet model)"),iyo=l(),mb=a("li"),Yde=a("strong"),dyo=o("t5"),cyo=o(" \u2014 "),rD=a("a"),fyo=o("T5ForConditionalGeneration"),myo=o(" (T5 model)"),gyo=l(),gb=a("li"),Kde=a("strong"),hyo=o("tapex"),pyo=o(" \u2014 "),tD=a("a"),uyo=o("BartForConditionalGeneration"),_yo=o(" (TAPEX model)"),byo=l(),hb=a("li"),Zde=a("strong"),vyo=o("xlm-prophetnet"),Fyo=o(" \u2014 "),aD=a("a"),Tyo=o("XLMProphetNetForConditionalGeneration"),Myo=o(" (XLMProphetNet model)"),Eyo=l(),pb=a("p"),Cyo=o("The model is set in evaluation mode by default using "),ece=a("code"),wyo=o("model.eval()"),Ayo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oce=a("code"),yyo=o("model.train()"),Lyo=l(),F(ub.$$.fragment),iIe=l(),Ii=a("h2"),_b=a("a"),rce=a("span"),F(W0.$$.fragment),xyo=l(),tce=a("span"),$yo=o("AutoModelForSequenceClassification"),dIe=l(),Ro=a("div"),F(H0.$$.fragment),kyo=l(),qi=a("p"),Syo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nD=a("a"),Ryo=o("from_pretrained()"),Byo=o(" class method or the "),sD=a("a"),Pyo=o("from_config()"),Iyo=o(` class
method.`),qyo=l(),U0=a("p"),Nyo=o("This class cannot be instantiated directly using "),ace=a("code"),jyo=o("__init__()"),Dyo=o(" (throws an error)."),Gyo=l(),st=a("div"),F(J0.$$.fragment),Oyo=l(),nce=a("p"),Vyo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Xyo=l(),Ni=a("p"),zyo=o(`Note:
Loading a model from its configuration file does `),sce=a("strong"),Qyo=o("not"),Wyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lD=a("a"),Hyo=o("from_pretrained()"),Uyo=o(" to load the model weights."),Jyo=l(),F(bb.$$.fragment),Yyo=l(),Ze=a("div"),F(Y0.$$.fragment),Kyo=l(),lce=a("p"),Zyo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),eLo=l(),ka=a("p"),oLo=o("The model class to instantiate is selected based on the "),ice=a("code"),rLo=o("model_type"),tLo=o(` property of the config object (either
passed as an argument or loaded from `),dce=a("code"),aLo=o("pretrained_model_name_or_path"),nLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cce=a("code"),sLo=o("pretrained_model_name_or_path"),lLo=o(":"),iLo=l(),q=a("ul"),vb=a("li"),fce=a("strong"),dLo=o("albert"),cLo=o(" \u2014 "),iD=a("a"),fLo=o("AlbertForSequenceClassification"),mLo=o(" (ALBERT model)"),gLo=l(),Fb=a("li"),mce=a("strong"),hLo=o("bart"),pLo=o(" \u2014 "),dD=a("a"),uLo=o("BartForSequenceClassification"),_Lo=o(" (BART model)"),bLo=l(),Tb=a("li"),gce=a("strong"),vLo=o("bert"),FLo=o(" \u2014 "),cD=a("a"),TLo=o("BertForSequenceClassification"),MLo=o(" (BERT model)"),ELo=l(),Mb=a("li"),hce=a("strong"),CLo=o("big_bird"),wLo=o(" \u2014 "),fD=a("a"),ALo=o("BigBirdForSequenceClassification"),yLo=o(" (BigBird model)"),LLo=l(),Eb=a("li"),pce=a("strong"),xLo=o("bigbird_pegasus"),$Lo=o(" \u2014 "),mD=a("a"),kLo=o("BigBirdPegasusForSequenceClassification"),SLo=o(" (BigBirdPegasus model)"),RLo=l(),Cb=a("li"),uce=a("strong"),BLo=o("camembert"),PLo=o(" \u2014 "),gD=a("a"),ILo=o("CamembertForSequenceClassification"),qLo=o(" (CamemBERT model)"),NLo=l(),wb=a("li"),_ce=a("strong"),jLo=o("canine"),DLo=o(" \u2014 "),hD=a("a"),GLo=o("CanineForSequenceClassification"),OLo=o(" (Canine model)"),VLo=l(),Ab=a("li"),bce=a("strong"),XLo=o("convbert"),zLo=o(" \u2014 "),pD=a("a"),QLo=o("ConvBertForSequenceClassification"),WLo=o(" (ConvBERT model)"),HLo=l(),yb=a("li"),vce=a("strong"),ULo=o("ctrl"),JLo=o(" \u2014 "),uD=a("a"),YLo=o("CTRLForSequenceClassification"),KLo=o(" (CTRL model)"),ZLo=l(),Lb=a("li"),Fce=a("strong"),e8o=o("data2vec-text"),o8o=o(" \u2014 "),_D=a("a"),r8o=o("Data2VecTextForSequenceClassification"),t8o=o(" (Data2VecText model)"),a8o=l(),xb=a("li"),Tce=a("strong"),n8o=o("deberta"),s8o=o(" \u2014 "),bD=a("a"),l8o=o("DebertaForSequenceClassification"),i8o=o(" (DeBERTa model)"),d8o=l(),$b=a("li"),Mce=a("strong"),c8o=o("deberta-v2"),f8o=o(" \u2014 "),vD=a("a"),m8o=o("DebertaV2ForSequenceClassification"),g8o=o(" (DeBERTa-v2 model)"),h8o=l(),kb=a("li"),Ece=a("strong"),p8o=o("distilbert"),u8o=o(" \u2014 "),FD=a("a"),_8o=o("DistilBertForSequenceClassification"),b8o=o(" (DistilBERT model)"),v8o=l(),Sb=a("li"),Cce=a("strong"),F8o=o("electra"),T8o=o(" \u2014 "),TD=a("a"),M8o=o("ElectraForSequenceClassification"),E8o=o(" (ELECTRA model)"),C8o=l(),Rb=a("li"),wce=a("strong"),w8o=o("flaubert"),A8o=o(" \u2014 "),MD=a("a"),y8o=o("FlaubertForSequenceClassification"),L8o=o(" (FlauBERT model)"),x8o=l(),Bb=a("li"),Ace=a("strong"),$8o=o("fnet"),k8o=o(" \u2014 "),ED=a("a"),S8o=o("FNetForSequenceClassification"),R8o=o(" (FNet model)"),B8o=l(),Pb=a("li"),yce=a("strong"),P8o=o("funnel"),I8o=o(" \u2014 "),CD=a("a"),q8o=o("FunnelForSequenceClassification"),N8o=o(" (Funnel Transformer model)"),j8o=l(),Ib=a("li"),Lce=a("strong"),D8o=o("glm"),G8o=o(" \u2014 "),wD=a("a"),O8o=o("GLMForSequenceClassification"),V8o=o(" (GLM model)"),X8o=l(),qb=a("li"),xce=a("strong"),z8o=o("gpt2"),Q8o=o(" \u2014 "),AD=a("a"),W8o=o("GPT2ForSequenceClassification"),H8o=o(" (OpenAI GPT-2 model)"),U8o=l(),Nb=a("li"),$ce=a("strong"),J8o=o("gpt_neo"),Y8o=o(" \u2014 "),yD=a("a"),K8o=o("GPTNeoForSequenceClassification"),Z8o=o(" (GPT Neo model)"),exo=l(),jb=a("li"),kce=a("strong"),oxo=o("gptj"),rxo=o(" \u2014 "),LD=a("a"),txo=o("GPTJForSequenceClassification"),axo=o(" (GPT-J model)"),nxo=l(),Db=a("li"),Sce=a("strong"),sxo=o("ibert"),lxo=o(" \u2014 "),xD=a("a"),ixo=o("IBertForSequenceClassification"),dxo=o(" (I-BERT model)"),cxo=l(),Gb=a("li"),Rce=a("strong"),fxo=o("layoutlm"),mxo=o(" \u2014 "),$D=a("a"),gxo=o("LayoutLMForSequenceClassification"),hxo=o(" (LayoutLM model)"),pxo=l(),Ob=a("li"),Bce=a("strong"),uxo=o("layoutlmv2"),_xo=o(" \u2014 "),kD=a("a"),bxo=o("LayoutLMv2ForSequenceClassification"),vxo=o(" (LayoutLMv2 model)"),Fxo=l(),Vb=a("li"),Pce=a("strong"),Txo=o("led"),Mxo=o(" \u2014 "),SD=a("a"),Exo=o("LEDForSequenceClassification"),Cxo=o(" (LED model)"),wxo=l(),Xb=a("li"),Ice=a("strong"),Axo=o("longformer"),yxo=o(" \u2014 "),RD=a("a"),Lxo=o("LongformerForSequenceClassification"),xxo=o(" (Longformer model)"),$xo=l(),zb=a("li"),qce=a("strong"),kxo=o("mbart"),Sxo=o(" \u2014 "),BD=a("a"),Rxo=o("MBartForSequenceClassification"),Bxo=o(" (mBART model)"),Pxo=l(),Qb=a("li"),Nce=a("strong"),Ixo=o("megatron-bert"),qxo=o(" \u2014 "),PD=a("a"),Nxo=o("MegatronBertForSequenceClassification"),jxo=o(" (MegatronBert model)"),Dxo=l(),Wb=a("li"),jce=a("strong"),Gxo=o("mobilebert"),Oxo=o(" \u2014 "),ID=a("a"),Vxo=o("MobileBertForSequenceClassification"),Xxo=o(" (MobileBERT model)"),zxo=l(),Hb=a("li"),Dce=a("strong"),Qxo=o("mpnet"),Wxo=o(" \u2014 "),qD=a("a"),Hxo=o("MPNetForSequenceClassification"),Uxo=o(" (MPNet model)"),Jxo=l(),Ub=a("li"),Gce=a("strong"),Yxo=o("nystromformer"),Kxo=o(" \u2014 "),ND=a("a"),Zxo=o("NystromformerForSequenceClassification"),e9o=o(" (Nystromformer model)"),o9o=l(),Jb=a("li"),Oce=a("strong"),r9o=o("openai-gpt"),t9o=o(" \u2014 "),jD=a("a"),a9o=o("OpenAIGPTForSequenceClassification"),n9o=o(" (OpenAI GPT model)"),s9o=l(),Yb=a("li"),Vce=a("strong"),l9o=o("perceiver"),i9o=o(" \u2014 "),DD=a("a"),d9o=o("PerceiverForSequenceClassification"),c9o=o(" (Perceiver model)"),f9o=l(),Kb=a("li"),Xce=a("strong"),m9o=o("plbart"),g9o=o(" \u2014 "),GD=a("a"),h9o=o("PLBartForSequenceClassification"),p9o=o(" (PLBart model)"),u9o=l(),Zb=a("li"),zce=a("strong"),_9o=o("qdqbert"),b9o=o(" \u2014 "),OD=a("a"),v9o=o("QDQBertForSequenceClassification"),F9o=o(" (QDQBert model)"),T9o=l(),e2=a("li"),Qce=a("strong"),M9o=o("reformer"),E9o=o(" \u2014 "),VD=a("a"),C9o=o("ReformerForSequenceClassification"),w9o=o(" (Reformer model)"),A9o=l(),o2=a("li"),Wce=a("strong"),y9o=o("rembert"),L9o=o(" \u2014 "),XD=a("a"),x9o=o("RemBertForSequenceClassification"),$9o=o(" (RemBERT model)"),k9o=l(),r2=a("li"),Hce=a("strong"),S9o=o("roberta"),R9o=o(" \u2014 "),zD=a("a"),B9o=o("RobertaForSequenceClassification"),P9o=o(" (RoBERTa model)"),I9o=l(),t2=a("li"),Uce=a("strong"),q9o=o("roformer"),N9o=o(" \u2014 "),QD=a("a"),j9o=o("RoFormerForSequenceClassification"),D9o=o(" (RoFormer model)"),G9o=l(),a2=a("li"),Jce=a("strong"),O9o=o("squeezebert"),V9o=o(" \u2014 "),WD=a("a"),X9o=o("SqueezeBertForSequenceClassification"),z9o=o(" (SqueezeBERT model)"),Q9o=l(),n2=a("li"),Yce=a("strong"),W9o=o("tapas"),H9o=o(" \u2014 "),HD=a("a"),U9o=o("TapasForSequenceClassification"),J9o=o(" (TAPAS model)"),Y9o=l(),s2=a("li"),Kce=a("strong"),K9o=o("tapex"),Z9o=o(" \u2014 "),UD=a("a"),e$o=o("BartForSequenceClassification"),o$o=o(" (TAPEX model)"),r$o=l(),l2=a("li"),Zce=a("strong"),t$o=o("transfo-xl"),a$o=o(" \u2014 "),JD=a("a"),n$o=o("TransfoXLForSequenceClassification"),s$o=o(" (Transformer-XL model)"),l$o=l(),i2=a("li"),efe=a("strong"),i$o=o("xlm"),d$o=o(" \u2014 "),YD=a("a"),c$o=o("XLMForSequenceClassification"),f$o=o(" (XLM model)"),m$o=l(),d2=a("li"),ofe=a("strong"),g$o=o("xlm-roberta"),h$o=o(" \u2014 "),KD=a("a"),p$o=o("XLMRobertaForSequenceClassification"),u$o=o(" (XLM-RoBERTa model)"),_$o=l(),c2=a("li"),rfe=a("strong"),b$o=o("xlm-roberta-xl"),v$o=o(" \u2014 "),ZD=a("a"),F$o=o("XLMRobertaXLForSequenceClassification"),T$o=o(" (XLM-RoBERTa-XL model)"),M$o=l(),f2=a("li"),tfe=a("strong"),E$o=o("xlnet"),C$o=o(" \u2014 "),eG=a("a"),w$o=o("XLNetForSequenceClassification"),A$o=o(" (XLNet model)"),y$o=l(),m2=a("li"),afe=a("strong"),L$o=o("yoso"),x$o=o(" \u2014 "),oG=a("a"),$$o=o("YosoForSequenceClassification"),k$o=o(" (YOSO model)"),S$o=l(),g2=a("p"),R$o=o("The model is set in evaluation mode by default using "),nfe=a("code"),B$o=o("model.eval()"),P$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sfe=a("code"),I$o=o("model.train()"),q$o=l(),F(h2.$$.fragment),cIe=l(),ji=a("h2"),p2=a("a"),lfe=a("span"),F(K0.$$.fragment),N$o=l(),ife=a("span"),j$o=o("AutoModelForMultipleChoice"),fIe=l(),Bo=a("div"),F(Z0.$$.fragment),D$o=l(),Di=a("p"),G$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rG=a("a"),O$o=o("from_pretrained()"),V$o=o(" class method or the "),tG=a("a"),X$o=o("from_config()"),z$o=o(` class
method.`),Q$o=l(),ey=a("p"),W$o=o("This class cannot be instantiated directly using "),dfe=a("code"),H$o=o("__init__()"),U$o=o(" (throws an error)."),J$o=l(),lt=a("div"),F(oy.$$.fragment),Y$o=l(),cfe=a("p"),K$o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Z$o=l(),Gi=a("p"),eko=o(`Note:
Loading a model from its configuration file does `),ffe=a("strong"),oko=o("not"),rko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aG=a("a"),tko=o("from_pretrained()"),ako=o(" to load the model weights."),nko=l(),F(u2.$$.fragment),sko=l(),eo=a("div"),F(ry.$$.fragment),lko=l(),mfe=a("p"),iko=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dko=l(),Sa=a("p"),cko=o("The model class to instantiate is selected based on the "),gfe=a("code"),fko=o("model_type"),mko=o(` property of the config object (either
passed as an argument or loaded from `),hfe=a("code"),gko=o("pretrained_model_name_or_path"),hko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=a("code"),pko=o("pretrained_model_name_or_path"),uko=o(":"),_ko=l(),Y=a("ul"),_2=a("li"),ufe=a("strong"),bko=o("albert"),vko=o(" \u2014 "),nG=a("a"),Fko=o("AlbertForMultipleChoice"),Tko=o(" (ALBERT model)"),Mko=l(),b2=a("li"),_fe=a("strong"),Eko=o("bert"),Cko=o(" \u2014 "),sG=a("a"),wko=o("BertForMultipleChoice"),Ako=o(" (BERT model)"),yko=l(),v2=a("li"),bfe=a("strong"),Lko=o("big_bird"),xko=o(" \u2014 "),lG=a("a"),$ko=o("BigBirdForMultipleChoice"),kko=o(" (BigBird model)"),Sko=l(),F2=a("li"),vfe=a("strong"),Rko=o("camembert"),Bko=o(" \u2014 "),iG=a("a"),Pko=o("CamembertForMultipleChoice"),Iko=o(" (CamemBERT model)"),qko=l(),T2=a("li"),Ffe=a("strong"),Nko=o("canine"),jko=o(" \u2014 "),dG=a("a"),Dko=o("CanineForMultipleChoice"),Gko=o(" (Canine model)"),Oko=l(),M2=a("li"),Tfe=a("strong"),Vko=o("convbert"),Xko=o(" \u2014 "),cG=a("a"),zko=o("ConvBertForMultipleChoice"),Qko=o(" (ConvBERT model)"),Wko=l(),E2=a("li"),Mfe=a("strong"),Hko=o("data2vec-text"),Uko=o(" \u2014 "),fG=a("a"),Jko=o("Data2VecTextForMultipleChoice"),Yko=o(" (Data2VecText model)"),Kko=l(),C2=a("li"),Efe=a("strong"),Zko=o("deberta-v2"),eSo=o(" \u2014 "),mG=a("a"),oSo=o("DebertaV2ForMultipleChoice"),rSo=o(" (DeBERTa-v2 model)"),tSo=l(),w2=a("li"),Cfe=a("strong"),aSo=o("distilbert"),nSo=o(" \u2014 "),gG=a("a"),sSo=o("DistilBertForMultipleChoice"),lSo=o(" (DistilBERT model)"),iSo=l(),A2=a("li"),wfe=a("strong"),dSo=o("electra"),cSo=o(" \u2014 "),hG=a("a"),fSo=o("ElectraForMultipleChoice"),mSo=o(" (ELECTRA model)"),gSo=l(),y2=a("li"),Afe=a("strong"),hSo=o("flaubert"),pSo=o(" \u2014 "),pG=a("a"),uSo=o("FlaubertForMultipleChoice"),_So=o(" (FlauBERT model)"),bSo=l(),L2=a("li"),yfe=a("strong"),vSo=o("fnet"),FSo=o(" \u2014 "),uG=a("a"),TSo=o("FNetForMultipleChoice"),MSo=o(" (FNet model)"),ESo=l(),x2=a("li"),Lfe=a("strong"),CSo=o("funnel"),wSo=o(" \u2014 "),_G=a("a"),ASo=o("FunnelForMultipleChoice"),ySo=o(" (Funnel Transformer model)"),LSo=l(),$2=a("li"),xfe=a("strong"),xSo=o("ibert"),$So=o(" \u2014 "),bG=a("a"),kSo=o("IBertForMultipleChoice"),SSo=o(" (I-BERT model)"),RSo=l(),k2=a("li"),$fe=a("strong"),BSo=o("longformer"),PSo=o(" \u2014 "),vG=a("a"),ISo=o("LongformerForMultipleChoice"),qSo=o(" (Longformer model)"),NSo=l(),S2=a("li"),kfe=a("strong"),jSo=o("megatron-bert"),DSo=o(" \u2014 "),FG=a("a"),GSo=o("MegatronBertForMultipleChoice"),OSo=o(" (MegatronBert model)"),VSo=l(),R2=a("li"),Sfe=a("strong"),XSo=o("mobilebert"),zSo=o(" \u2014 "),TG=a("a"),QSo=o("MobileBertForMultipleChoice"),WSo=o(" (MobileBERT model)"),HSo=l(),B2=a("li"),Rfe=a("strong"),USo=o("mpnet"),JSo=o(" \u2014 "),MG=a("a"),YSo=o("MPNetForMultipleChoice"),KSo=o(" (MPNet model)"),ZSo=l(),P2=a("li"),Bfe=a("strong"),eRo=o("nystromformer"),oRo=o(" \u2014 "),EG=a("a"),rRo=o("NystromformerForMultipleChoice"),tRo=o(" (Nystromformer model)"),aRo=l(),I2=a("li"),Pfe=a("strong"),nRo=o("qdqbert"),sRo=o(" \u2014 "),CG=a("a"),lRo=o("QDQBertForMultipleChoice"),iRo=o(" (QDQBert model)"),dRo=l(),q2=a("li"),Ife=a("strong"),cRo=o("rembert"),fRo=o(" \u2014 "),wG=a("a"),mRo=o("RemBertForMultipleChoice"),gRo=o(" (RemBERT model)"),hRo=l(),N2=a("li"),qfe=a("strong"),pRo=o("roberta"),uRo=o(" \u2014 "),AG=a("a"),_Ro=o("RobertaForMultipleChoice"),bRo=o(" (RoBERTa model)"),vRo=l(),j2=a("li"),Nfe=a("strong"),FRo=o("roformer"),TRo=o(" \u2014 "),yG=a("a"),MRo=o("RoFormerForMultipleChoice"),ERo=o(" (RoFormer model)"),CRo=l(),D2=a("li"),jfe=a("strong"),wRo=o("squeezebert"),ARo=o(" \u2014 "),LG=a("a"),yRo=o("SqueezeBertForMultipleChoice"),LRo=o(" (SqueezeBERT model)"),xRo=l(),G2=a("li"),Dfe=a("strong"),$Ro=o("xlm"),kRo=o(" \u2014 "),xG=a("a"),SRo=o("XLMForMultipleChoice"),RRo=o(" (XLM model)"),BRo=l(),O2=a("li"),Gfe=a("strong"),PRo=o("xlm-roberta"),IRo=o(" \u2014 "),$G=a("a"),qRo=o("XLMRobertaForMultipleChoice"),NRo=o(" (XLM-RoBERTa model)"),jRo=l(),V2=a("li"),Ofe=a("strong"),DRo=o("xlm-roberta-xl"),GRo=o(" \u2014 "),kG=a("a"),ORo=o("XLMRobertaXLForMultipleChoice"),VRo=o(" (XLM-RoBERTa-XL model)"),XRo=l(),X2=a("li"),Vfe=a("strong"),zRo=o("xlnet"),QRo=o(" \u2014 "),SG=a("a"),WRo=o("XLNetForMultipleChoice"),HRo=o(" (XLNet model)"),URo=l(),z2=a("li"),Xfe=a("strong"),JRo=o("yoso"),YRo=o(" \u2014 "),RG=a("a"),KRo=o("YosoForMultipleChoice"),ZRo=o(" (YOSO model)"),eBo=l(),Q2=a("p"),oBo=o("The model is set in evaluation mode by default using "),zfe=a("code"),rBo=o("model.eval()"),tBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qfe=a("code"),aBo=o("model.train()"),nBo=l(),F(W2.$$.fragment),mIe=l(),Oi=a("h2"),H2=a("a"),Wfe=a("span"),F(ty.$$.fragment),sBo=l(),Hfe=a("span"),lBo=o("AutoModelForNextSentencePrediction"),gIe=l(),Po=a("div"),F(ay.$$.fragment),iBo=l(),Vi=a("p"),dBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),BG=a("a"),cBo=o("from_pretrained()"),fBo=o(" class method or the "),PG=a("a"),mBo=o("from_config()"),gBo=o(` class
method.`),hBo=l(),ny=a("p"),pBo=o("This class cannot be instantiated directly using "),Ufe=a("code"),uBo=o("__init__()"),_Bo=o(" (throws an error)."),bBo=l(),it=a("div"),F(sy.$$.fragment),vBo=l(),Jfe=a("p"),FBo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),TBo=l(),Xi=a("p"),MBo=o(`Note:
Loading a model from its configuration file does `),Yfe=a("strong"),EBo=o("not"),CBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=a("a"),wBo=o("from_pretrained()"),ABo=o(" to load the model weights."),yBo=l(),F(U2.$$.fragment),LBo=l(),oo=a("div"),F(ly.$$.fragment),xBo=l(),Kfe=a("p"),$Bo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kBo=l(),Ra=a("p"),SBo=o("The model class to instantiate is selected based on the "),Zfe=a("code"),RBo=o("model_type"),BBo=o(` property of the config object (either
passed as an argument or loaded from `),eme=a("code"),PBo=o("pretrained_model_name_or_path"),IBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ome=a("code"),qBo=o("pretrained_model_name_or_path"),NBo=o(":"),jBo=l(),Yr=a("ul"),J2=a("li"),rme=a("strong"),DBo=o("bert"),GBo=o(" \u2014 "),qG=a("a"),OBo=o("BertForNextSentencePrediction"),VBo=o(" (BERT model)"),XBo=l(),Y2=a("li"),tme=a("strong"),zBo=o("fnet"),QBo=o(" \u2014 "),NG=a("a"),WBo=o("FNetForNextSentencePrediction"),HBo=o(" (FNet model)"),UBo=l(),K2=a("li"),ame=a("strong"),JBo=o("megatron-bert"),YBo=o(" \u2014 "),jG=a("a"),KBo=o("MegatronBertForNextSentencePrediction"),ZBo=o(" (MegatronBert model)"),ePo=l(),Z2=a("li"),nme=a("strong"),oPo=o("mobilebert"),rPo=o(" \u2014 "),DG=a("a"),tPo=o("MobileBertForNextSentencePrediction"),aPo=o(" (MobileBERT model)"),nPo=l(),e3=a("li"),sme=a("strong"),sPo=o("qdqbert"),lPo=o(" \u2014 "),GG=a("a"),iPo=o("QDQBertForNextSentencePrediction"),dPo=o(" (QDQBert model)"),cPo=l(),o3=a("p"),fPo=o("The model is set in evaluation mode by default using "),lme=a("code"),mPo=o("model.eval()"),gPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ime=a("code"),hPo=o("model.train()"),pPo=l(),F(r3.$$.fragment),hIe=l(),zi=a("h2"),t3=a("a"),dme=a("span"),F(iy.$$.fragment),uPo=l(),cme=a("span"),_Po=o("AutoModelForTokenClassification"),pIe=l(),Io=a("div"),F(dy.$$.fragment),bPo=l(),Qi=a("p"),vPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OG=a("a"),FPo=o("from_pretrained()"),TPo=o(" class method or the "),VG=a("a"),MPo=o("from_config()"),EPo=o(` class
method.`),CPo=l(),cy=a("p"),wPo=o("This class cannot be instantiated directly using "),fme=a("code"),APo=o("__init__()"),yPo=o(" (throws an error)."),LPo=l(),dt=a("div"),F(fy.$$.fragment),xPo=l(),mme=a("p"),$Po=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kPo=l(),Wi=a("p"),SPo=o(`Note:
Loading a model from its configuration file does `),gme=a("strong"),RPo=o("not"),BPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XG=a("a"),PPo=o("from_pretrained()"),IPo=o(" to load the model weights."),qPo=l(),F(a3.$$.fragment),NPo=l(),ro=a("div"),F(my.$$.fragment),jPo=l(),hme=a("p"),DPo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),GPo=l(),Ba=a("p"),OPo=o("The model class to instantiate is selected based on the "),pme=a("code"),VPo=o("model_type"),XPo=o(` property of the config object (either
passed as an argument or loaded from `),ume=a("code"),zPo=o("pretrained_model_name_or_path"),QPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_me=a("code"),WPo=o("pretrained_model_name_or_path"),HPo=o(":"),UPo=l(),U=a("ul"),n3=a("li"),bme=a("strong"),JPo=o("albert"),YPo=o(" \u2014 "),zG=a("a"),KPo=o("AlbertForTokenClassification"),ZPo=o(" (ALBERT model)"),eIo=l(),s3=a("li"),vme=a("strong"),oIo=o("bert"),rIo=o(" \u2014 "),QG=a("a"),tIo=o("BertForTokenClassification"),aIo=o(" (BERT model)"),nIo=l(),l3=a("li"),Fme=a("strong"),sIo=o("big_bird"),lIo=o(" \u2014 "),WG=a("a"),iIo=o("BigBirdForTokenClassification"),dIo=o(" (BigBird model)"),cIo=l(),i3=a("li"),Tme=a("strong"),fIo=o("camembert"),mIo=o(" \u2014 "),HG=a("a"),gIo=o("CamembertForTokenClassification"),hIo=o(" (CamemBERT model)"),pIo=l(),d3=a("li"),Mme=a("strong"),uIo=o("canine"),_Io=o(" \u2014 "),UG=a("a"),bIo=o("CanineForTokenClassification"),vIo=o(" (Canine model)"),FIo=l(),c3=a("li"),Eme=a("strong"),TIo=o("convbert"),MIo=o(" \u2014 "),JG=a("a"),EIo=o("ConvBertForTokenClassification"),CIo=o(" (ConvBERT model)"),wIo=l(),f3=a("li"),Cme=a("strong"),AIo=o("data2vec-text"),yIo=o(" \u2014 "),YG=a("a"),LIo=o("Data2VecTextForTokenClassification"),xIo=o(" (Data2VecText model)"),$Io=l(),m3=a("li"),wme=a("strong"),kIo=o("deberta"),SIo=o(" \u2014 "),KG=a("a"),RIo=o("DebertaForTokenClassification"),BIo=o(" (DeBERTa model)"),PIo=l(),g3=a("li"),Ame=a("strong"),IIo=o("deberta-v2"),qIo=o(" \u2014 "),ZG=a("a"),NIo=o("DebertaV2ForTokenClassification"),jIo=o(" (DeBERTa-v2 model)"),DIo=l(),h3=a("li"),yme=a("strong"),GIo=o("distilbert"),OIo=o(" \u2014 "),eO=a("a"),VIo=o("DistilBertForTokenClassification"),XIo=o(" (DistilBERT model)"),zIo=l(),p3=a("li"),Lme=a("strong"),QIo=o("electra"),WIo=o(" \u2014 "),oO=a("a"),HIo=o("ElectraForTokenClassification"),UIo=o(" (ELECTRA model)"),JIo=l(),u3=a("li"),xme=a("strong"),YIo=o("flaubert"),KIo=o(" \u2014 "),rO=a("a"),ZIo=o("FlaubertForTokenClassification"),eqo=o(" (FlauBERT model)"),oqo=l(),_3=a("li"),$me=a("strong"),rqo=o("fnet"),tqo=o(" \u2014 "),tO=a("a"),aqo=o("FNetForTokenClassification"),nqo=o(" (FNet model)"),sqo=l(),b3=a("li"),kme=a("strong"),lqo=o("funnel"),iqo=o(" \u2014 "),aO=a("a"),dqo=o("FunnelForTokenClassification"),cqo=o(" (Funnel Transformer model)"),fqo=l(),v3=a("li"),Sme=a("strong"),mqo=o("gpt2"),gqo=o(" \u2014 "),nO=a("a"),hqo=o("GPT2ForTokenClassification"),pqo=o(" (OpenAI GPT-2 model)"),uqo=l(),F3=a("li"),Rme=a("strong"),_qo=o("ibert"),bqo=o(" \u2014 "),sO=a("a"),vqo=o("IBertForTokenClassification"),Fqo=o(" (I-BERT model)"),Tqo=l(),T3=a("li"),Bme=a("strong"),Mqo=o("layoutlm"),Eqo=o(" \u2014 "),lO=a("a"),Cqo=o("LayoutLMForTokenClassification"),wqo=o(" (LayoutLM model)"),Aqo=l(),M3=a("li"),Pme=a("strong"),yqo=o("layoutlmv2"),Lqo=o(" \u2014 "),iO=a("a"),xqo=o("LayoutLMv2ForTokenClassification"),$qo=o(" (LayoutLMv2 model)"),kqo=l(),E3=a("li"),Ime=a("strong"),Sqo=o("longformer"),Rqo=o(" \u2014 "),dO=a("a"),Bqo=o("LongformerForTokenClassification"),Pqo=o(" (Longformer model)"),Iqo=l(),C3=a("li"),qme=a("strong"),qqo=o("megatron-bert"),Nqo=o(" \u2014 "),cO=a("a"),jqo=o("MegatronBertForTokenClassification"),Dqo=o(" (MegatronBert model)"),Gqo=l(),w3=a("li"),Nme=a("strong"),Oqo=o("mobilebert"),Vqo=o(" \u2014 "),fO=a("a"),Xqo=o("MobileBertForTokenClassification"),zqo=o(" (MobileBERT model)"),Qqo=l(),A3=a("li"),jme=a("strong"),Wqo=o("mpnet"),Hqo=o(" \u2014 "),mO=a("a"),Uqo=o("MPNetForTokenClassification"),Jqo=o(" (MPNet model)"),Yqo=l(),y3=a("li"),Dme=a("strong"),Kqo=o("nystromformer"),Zqo=o(" \u2014 "),gO=a("a"),eNo=o("NystromformerForTokenClassification"),oNo=o(" (Nystromformer model)"),rNo=l(),L3=a("li"),Gme=a("strong"),tNo=o("qdqbert"),aNo=o(" \u2014 "),hO=a("a"),nNo=o("QDQBertForTokenClassification"),sNo=o(" (QDQBert model)"),lNo=l(),x3=a("li"),Ome=a("strong"),iNo=o("rembert"),dNo=o(" \u2014 "),pO=a("a"),cNo=o("RemBertForTokenClassification"),fNo=o(" (RemBERT model)"),mNo=l(),$3=a("li"),Vme=a("strong"),gNo=o("roberta"),hNo=o(" \u2014 "),uO=a("a"),pNo=o("RobertaForTokenClassification"),uNo=o(" (RoBERTa model)"),_No=l(),k3=a("li"),Xme=a("strong"),bNo=o("roformer"),vNo=o(" \u2014 "),_O=a("a"),FNo=o("RoFormerForTokenClassification"),TNo=o(" (RoFormer model)"),MNo=l(),S3=a("li"),zme=a("strong"),ENo=o("squeezebert"),CNo=o(" \u2014 "),bO=a("a"),wNo=o("SqueezeBertForTokenClassification"),ANo=o(" (SqueezeBERT model)"),yNo=l(),R3=a("li"),Qme=a("strong"),LNo=o("xlm"),xNo=o(" \u2014 "),vO=a("a"),$No=o("XLMForTokenClassification"),kNo=o(" (XLM model)"),SNo=l(),B3=a("li"),Wme=a("strong"),RNo=o("xlm-roberta"),BNo=o(" \u2014 "),FO=a("a"),PNo=o("XLMRobertaForTokenClassification"),INo=o(" (XLM-RoBERTa model)"),qNo=l(),P3=a("li"),Hme=a("strong"),NNo=o("xlm-roberta-xl"),jNo=o(" \u2014 "),TO=a("a"),DNo=o("XLMRobertaXLForTokenClassification"),GNo=o(" (XLM-RoBERTa-XL model)"),ONo=l(),I3=a("li"),Ume=a("strong"),VNo=o("xlnet"),XNo=o(" \u2014 "),MO=a("a"),zNo=o("XLNetForTokenClassification"),QNo=o(" (XLNet model)"),WNo=l(),q3=a("li"),Jme=a("strong"),HNo=o("yoso"),UNo=o(" \u2014 "),EO=a("a"),JNo=o("YosoForTokenClassification"),YNo=o(" (YOSO model)"),KNo=l(),N3=a("p"),ZNo=o("The model is set in evaluation mode by default using "),Yme=a("code"),ejo=o("model.eval()"),ojo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kme=a("code"),rjo=o("model.train()"),tjo=l(),F(j3.$$.fragment),uIe=l(),Hi=a("h2"),D3=a("a"),Zme=a("span"),F(gy.$$.fragment),ajo=l(),ege=a("span"),njo=o("AutoModelForQuestionAnswering"),_Ie=l(),qo=a("div"),F(hy.$$.fragment),sjo=l(),Ui=a("p"),ljo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),CO=a("a"),ijo=o("from_pretrained()"),djo=o(" class method or the "),wO=a("a"),cjo=o("from_config()"),fjo=o(` class
method.`),mjo=l(),py=a("p"),gjo=o("This class cannot be instantiated directly using "),oge=a("code"),hjo=o("__init__()"),pjo=o(" (throws an error)."),ujo=l(),ct=a("div"),F(uy.$$.fragment),_jo=l(),rge=a("p"),bjo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vjo=l(),Ji=a("p"),Fjo=o(`Note:
Loading a model from its configuration file does `),tge=a("strong"),Tjo=o("not"),Mjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AO=a("a"),Ejo=o("from_pretrained()"),Cjo=o(" to load the model weights."),wjo=l(),F(G3.$$.fragment),Ajo=l(),to=a("div"),F(_y.$$.fragment),yjo=l(),age=a("p"),Ljo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xjo=l(),Pa=a("p"),$jo=o("The model class to instantiate is selected based on the "),nge=a("code"),kjo=o("model_type"),Sjo=o(` property of the config object (either
passed as an argument or loaded from `),sge=a("code"),Rjo=o("pretrained_model_name_or_path"),Bjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lge=a("code"),Pjo=o("pretrained_model_name_or_path"),Ijo=o(":"),qjo=l(),O=a("ul"),O3=a("li"),ige=a("strong"),Njo=o("albert"),jjo=o(" \u2014 "),yO=a("a"),Djo=o("AlbertForQuestionAnswering"),Gjo=o(" (ALBERT model)"),Ojo=l(),V3=a("li"),dge=a("strong"),Vjo=o("bart"),Xjo=o(" \u2014 "),LO=a("a"),zjo=o("BartForQuestionAnswering"),Qjo=o(" (BART model)"),Wjo=l(),X3=a("li"),cge=a("strong"),Hjo=o("bert"),Ujo=o(" \u2014 "),xO=a("a"),Jjo=o("BertForQuestionAnswering"),Yjo=o(" (BERT model)"),Kjo=l(),z3=a("li"),fge=a("strong"),Zjo=o("big_bird"),eDo=o(" \u2014 "),$O=a("a"),oDo=o("BigBirdForQuestionAnswering"),rDo=o(" (BigBird model)"),tDo=l(),Q3=a("li"),mge=a("strong"),aDo=o("bigbird_pegasus"),nDo=o(" \u2014 "),kO=a("a"),sDo=o("BigBirdPegasusForQuestionAnswering"),lDo=o(" (BigBirdPegasus model)"),iDo=l(),W3=a("li"),gge=a("strong"),dDo=o("camembert"),cDo=o(" \u2014 "),SO=a("a"),fDo=o("CamembertForQuestionAnswering"),mDo=o(" (CamemBERT model)"),gDo=l(),H3=a("li"),hge=a("strong"),hDo=o("canine"),pDo=o(" \u2014 "),RO=a("a"),uDo=o("CanineForQuestionAnswering"),_Do=o(" (Canine model)"),bDo=l(),U3=a("li"),pge=a("strong"),vDo=o("convbert"),FDo=o(" \u2014 "),BO=a("a"),TDo=o("ConvBertForQuestionAnswering"),MDo=o(" (ConvBERT model)"),EDo=l(),J3=a("li"),uge=a("strong"),CDo=o("data2vec-text"),wDo=o(" \u2014 "),PO=a("a"),ADo=o("Data2VecTextForQuestionAnswering"),yDo=o(" (Data2VecText model)"),LDo=l(),Y3=a("li"),_ge=a("strong"),xDo=o("deberta"),$Do=o(" \u2014 "),IO=a("a"),kDo=o("DebertaForQuestionAnswering"),SDo=o(" (DeBERTa model)"),RDo=l(),K3=a("li"),bge=a("strong"),BDo=o("deberta-v2"),PDo=o(" \u2014 "),qO=a("a"),IDo=o("DebertaV2ForQuestionAnswering"),qDo=o(" (DeBERTa-v2 model)"),NDo=l(),Z3=a("li"),vge=a("strong"),jDo=o("distilbert"),DDo=o(" \u2014 "),NO=a("a"),GDo=o("DistilBertForQuestionAnswering"),ODo=o(" (DistilBERT model)"),VDo=l(),ev=a("li"),Fge=a("strong"),XDo=o("electra"),zDo=o(" \u2014 "),jO=a("a"),QDo=o("ElectraForQuestionAnswering"),WDo=o(" (ELECTRA model)"),HDo=l(),ov=a("li"),Tge=a("strong"),UDo=o("flaubert"),JDo=o(" \u2014 "),DO=a("a"),YDo=o("FlaubertForQuestionAnsweringSimple"),KDo=o(" (FlauBERT model)"),ZDo=l(),rv=a("li"),Mge=a("strong"),eGo=o("fnet"),oGo=o(" \u2014 "),GO=a("a"),rGo=o("FNetForQuestionAnswering"),tGo=o(" (FNet model)"),aGo=l(),tv=a("li"),Ege=a("strong"),nGo=o("funnel"),sGo=o(" \u2014 "),OO=a("a"),lGo=o("FunnelForQuestionAnswering"),iGo=o(" (Funnel Transformer model)"),dGo=l(),av=a("li"),Cge=a("strong"),cGo=o("gptj"),fGo=o(" \u2014 "),VO=a("a"),mGo=o("GPTJForQuestionAnswering"),gGo=o(" (GPT-J model)"),hGo=l(),nv=a("li"),wge=a("strong"),pGo=o("ibert"),uGo=o(" \u2014 "),XO=a("a"),_Go=o("IBertForQuestionAnswering"),bGo=o(" (I-BERT model)"),vGo=l(),sv=a("li"),Age=a("strong"),FGo=o("layoutlmv2"),TGo=o(" \u2014 "),zO=a("a"),MGo=o("LayoutLMv2ForQuestionAnswering"),EGo=o(" (LayoutLMv2 model)"),CGo=l(),lv=a("li"),yge=a("strong"),wGo=o("led"),AGo=o(" \u2014 "),QO=a("a"),yGo=o("LEDForQuestionAnswering"),LGo=o(" (LED model)"),xGo=l(),iv=a("li"),Lge=a("strong"),$Go=o("longformer"),kGo=o(" \u2014 "),WO=a("a"),SGo=o("LongformerForQuestionAnswering"),RGo=o(" (Longformer model)"),BGo=l(),dv=a("li"),xge=a("strong"),PGo=o("lxmert"),IGo=o(" \u2014 "),HO=a("a"),qGo=o("LxmertForQuestionAnswering"),NGo=o(" (LXMERT model)"),jGo=l(),cv=a("li"),$ge=a("strong"),DGo=o("mbart"),GGo=o(" \u2014 "),UO=a("a"),OGo=o("MBartForQuestionAnswering"),VGo=o(" (mBART model)"),XGo=l(),fv=a("li"),kge=a("strong"),zGo=o("megatron-bert"),QGo=o(" \u2014 "),JO=a("a"),WGo=o("MegatronBertForQuestionAnswering"),HGo=o(" (MegatronBert model)"),UGo=l(),mv=a("li"),Sge=a("strong"),JGo=o("mobilebert"),YGo=o(" \u2014 "),YO=a("a"),KGo=o("MobileBertForQuestionAnswering"),ZGo=o(" (MobileBERT model)"),eOo=l(),gv=a("li"),Rge=a("strong"),oOo=o("mpnet"),rOo=o(" \u2014 "),KO=a("a"),tOo=o("MPNetForQuestionAnswering"),aOo=o(" (MPNet model)"),nOo=l(),hv=a("li"),Bge=a("strong"),sOo=o("nystromformer"),lOo=o(" \u2014 "),ZO=a("a"),iOo=o("NystromformerForQuestionAnswering"),dOo=o(" (Nystromformer model)"),cOo=l(),pv=a("li"),Pge=a("strong"),fOo=o("qdqbert"),mOo=o(" \u2014 "),eV=a("a"),gOo=o("QDQBertForQuestionAnswering"),hOo=o(" (QDQBert model)"),pOo=l(),uv=a("li"),Ige=a("strong"),uOo=o("reformer"),_Oo=o(" \u2014 "),oV=a("a"),bOo=o("ReformerForQuestionAnswering"),vOo=o(" (Reformer model)"),FOo=l(),_v=a("li"),qge=a("strong"),TOo=o("rembert"),MOo=o(" \u2014 "),rV=a("a"),EOo=o("RemBertForQuestionAnswering"),COo=o(" (RemBERT model)"),wOo=l(),bv=a("li"),Nge=a("strong"),AOo=o("roberta"),yOo=o(" \u2014 "),tV=a("a"),LOo=o("RobertaForQuestionAnswering"),xOo=o(" (RoBERTa model)"),$Oo=l(),vv=a("li"),jge=a("strong"),kOo=o("roformer"),SOo=o(" \u2014 "),aV=a("a"),ROo=o("RoFormerForQuestionAnswering"),BOo=o(" (RoFormer model)"),POo=l(),Fv=a("li"),Dge=a("strong"),IOo=o("splinter"),qOo=o(" \u2014 "),nV=a("a"),NOo=o("SplinterForQuestionAnswering"),jOo=o(" (Splinter model)"),DOo=l(),Tv=a("li"),Gge=a("strong"),GOo=o("squeezebert"),OOo=o(" \u2014 "),sV=a("a"),VOo=o("SqueezeBertForQuestionAnswering"),XOo=o(" (SqueezeBERT model)"),zOo=l(),Mv=a("li"),Oge=a("strong"),QOo=o("xlm"),WOo=o(" \u2014 "),lV=a("a"),HOo=o("XLMForQuestionAnsweringSimple"),UOo=o(" (XLM model)"),JOo=l(),Ev=a("li"),Vge=a("strong"),YOo=o("xlm-roberta"),KOo=o(" \u2014 "),iV=a("a"),ZOo=o("XLMRobertaForQuestionAnswering"),eVo=o(" (XLM-RoBERTa model)"),oVo=l(),Cv=a("li"),Xge=a("strong"),rVo=o("xlm-roberta-xl"),tVo=o(" \u2014 "),dV=a("a"),aVo=o("XLMRobertaXLForQuestionAnswering"),nVo=o(" (XLM-RoBERTa-XL model)"),sVo=l(),wv=a("li"),zge=a("strong"),lVo=o("xlnet"),iVo=o(" \u2014 "),cV=a("a"),dVo=o("XLNetForQuestionAnsweringSimple"),cVo=o(" (XLNet model)"),fVo=l(),Av=a("li"),Qge=a("strong"),mVo=o("yoso"),gVo=o(" \u2014 "),fV=a("a"),hVo=o("YosoForQuestionAnswering"),pVo=o(" (YOSO model)"),uVo=l(),yv=a("p"),_Vo=o("The model is set in evaluation mode by default using "),Wge=a("code"),bVo=o("model.eval()"),vVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hge=a("code"),FVo=o("model.train()"),TVo=l(),F(Lv.$$.fragment),bIe=l(),Yi=a("h2"),xv=a("a"),Uge=a("span"),F(by.$$.fragment),MVo=l(),Jge=a("span"),EVo=o("AutoModelForTableQuestionAnswering"),vIe=l(),No=a("div"),F(vy.$$.fragment),CVo=l(),Ki=a("p"),wVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),mV=a("a"),AVo=o("from_pretrained()"),yVo=o(" class method or the "),gV=a("a"),LVo=o("from_config()"),xVo=o(` class
method.`),$Vo=l(),Fy=a("p"),kVo=o("This class cannot be instantiated directly using "),Yge=a("code"),SVo=o("__init__()"),RVo=o(" (throws an error)."),BVo=l(),ft=a("div"),F(Ty.$$.fragment),PVo=l(),Kge=a("p"),IVo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qVo=l(),Zi=a("p"),NVo=o(`Note:
Loading a model from its configuration file does `),Zge=a("strong"),jVo=o("not"),DVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hV=a("a"),GVo=o("from_pretrained()"),OVo=o(" to load the model weights."),VVo=l(),F($v.$$.fragment),XVo=l(),ao=a("div"),F(My.$$.fragment),zVo=l(),ehe=a("p"),QVo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),WVo=l(),Ia=a("p"),HVo=o("The model class to instantiate is selected based on the "),ohe=a("code"),UVo=o("model_type"),JVo=o(` property of the config object (either
passed as an argument or loaded from `),rhe=a("code"),YVo=o("pretrained_model_name_or_path"),KVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=a("code"),ZVo=o("pretrained_model_name_or_path"),eXo=o(":"),oXo=l(),ahe=a("ul"),kv=a("li"),nhe=a("strong"),rXo=o("tapas"),tXo=o(" \u2014 "),pV=a("a"),aXo=o("TapasForQuestionAnswering"),nXo=o(" (TAPAS model)"),sXo=l(),Sv=a("p"),lXo=o("The model is set in evaluation mode by default using "),she=a("code"),iXo=o("model.eval()"),dXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=a("code"),cXo=o("model.train()"),fXo=l(),F(Rv.$$.fragment),FIe=l(),ed=a("h2"),Bv=a("a"),ihe=a("span"),F(Ey.$$.fragment),mXo=l(),dhe=a("span"),gXo=o("AutoModelForImageClassification"),TIe=l(),jo=a("div"),F(Cy.$$.fragment),hXo=l(),od=a("p"),pXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),uV=a("a"),uXo=o("from_pretrained()"),_Xo=o(" class method or the "),_V=a("a"),bXo=o("from_config()"),vXo=o(` class
method.`),FXo=l(),wy=a("p"),TXo=o("This class cannot be instantiated directly using "),che=a("code"),MXo=o("__init__()"),EXo=o(" (throws an error)."),CXo=l(),mt=a("div"),F(Ay.$$.fragment),wXo=l(),fhe=a("p"),AXo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),yXo=l(),rd=a("p"),LXo=o(`Note:
Loading a model from its configuration file does `),mhe=a("strong"),xXo=o("not"),$Xo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bV=a("a"),kXo=o("from_pretrained()"),SXo=o(" to load the model weights."),RXo=l(),F(Pv.$$.fragment),BXo=l(),no=a("div"),F(yy.$$.fragment),PXo=l(),ghe=a("p"),IXo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qXo=l(),qa=a("p"),NXo=o("The model class to instantiate is selected based on the "),hhe=a("code"),jXo=o("model_type"),DXo=o(` property of the config object (either
passed as an argument or loaded from `),phe=a("code"),GXo=o("pretrained_model_name_or_path"),OXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uhe=a("code"),VXo=o("pretrained_model_name_or_path"),XXo=o(":"),zXo=l(),Fe=a("ul"),Iv=a("li"),_he=a("strong"),QXo=o("beit"),WXo=o(" \u2014 "),vV=a("a"),HXo=o("BeitForImageClassification"),UXo=o(" (BEiT model)"),JXo=l(),qv=a("li"),bhe=a("strong"),YXo=o("convnext"),KXo=o(" \u2014 "),FV=a("a"),ZXo=o("ConvNextForImageClassification"),ezo=o(" (ConvNext model)"),ozo=l(),Nv=a("li"),vhe=a("strong"),rzo=o("data2vec-vision"),tzo=o(" \u2014 "),TV=a("a"),azo=o("Data2VecVisionForImageClassification"),nzo=o(" (Data2VecVision model)"),szo=l(),Rs=a("li"),Fhe=a("strong"),lzo=o("deit"),izo=o(" \u2014 "),MV=a("a"),dzo=o("DeiTForImageClassification"),czo=o(" or "),EV=a("a"),fzo=o("DeiTForImageClassificationWithTeacher"),mzo=o(" (DeiT model)"),gzo=l(),jv=a("li"),The=a("strong"),hzo=o("imagegpt"),pzo=o(" \u2014 "),CV=a("a"),uzo=o("ImageGPTForImageClassification"),_zo=o(" (ImageGPT model)"),bzo=l(),gt=a("li"),Mhe=a("strong"),vzo=o("perceiver"),Fzo=o(" \u2014 "),wV=a("a"),Tzo=o("PerceiverForImageClassificationLearned"),Mzo=o(" or "),AV=a("a"),Ezo=o("PerceiverForImageClassificationFourier"),Czo=o(" or "),yV=a("a"),wzo=o("PerceiverForImageClassificationConvProcessing"),Azo=o(" (Perceiver model)"),yzo=l(),Dv=a("li"),Ehe=a("strong"),Lzo=o("poolformer"),xzo=o(" \u2014 "),LV=a("a"),$zo=o("PoolFormerForImageClassification"),kzo=o(" (PoolFormer model)"),Szo=l(),Gv=a("li"),Che=a("strong"),Rzo=o("regnet"),Bzo=o(" \u2014 "),xV=a("a"),Pzo=o("RegNetForImageClassification"),Izo=o(" (RegNet model)"),qzo=l(),Ov=a("li"),whe=a("strong"),Nzo=o("resnet"),jzo=o(" \u2014 "),$V=a("a"),Dzo=o("ResNetForImageClassification"),Gzo=o(" (ResNet model)"),Ozo=l(),Vv=a("li"),Ahe=a("strong"),Vzo=o("segformer"),Xzo=o(" \u2014 "),kV=a("a"),zzo=o("SegformerForImageClassification"),Qzo=o(" (SegFormer model)"),Wzo=l(),Xv=a("li"),yhe=a("strong"),Hzo=o("swin"),Uzo=o(" \u2014 "),SV=a("a"),Jzo=o("SwinForImageClassification"),Yzo=o(" (Swin model)"),Kzo=l(),zv=a("li"),Lhe=a("strong"),Zzo=o("van"),eQo=o(" \u2014 "),RV=a("a"),oQo=o("VanForImageClassification"),rQo=o(" (VAN model)"),tQo=l(),Qv=a("li"),xhe=a("strong"),aQo=o("vit"),nQo=o(" \u2014 "),BV=a("a"),sQo=o("ViTForImageClassification"),lQo=o(" (ViT model)"),iQo=l(),Wv=a("p"),dQo=o("The model is set in evaluation mode by default using "),$he=a("code"),cQo=o("model.eval()"),fQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),khe=a("code"),mQo=o("model.train()"),gQo=l(),F(Hv.$$.fragment),MIe=l(),td=a("h2"),Uv=a("a"),She=a("span"),F(Ly.$$.fragment),hQo=l(),Rhe=a("span"),pQo=o("AutoModelForVision2Seq"),EIe=l(),Do=a("div"),F(xy.$$.fragment),uQo=l(),ad=a("p"),_Qo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),PV=a("a"),bQo=o("from_pretrained()"),vQo=o(" class method or the "),IV=a("a"),FQo=o("from_config()"),TQo=o(` class
method.`),MQo=l(),$y=a("p"),EQo=o("This class cannot be instantiated directly using "),Bhe=a("code"),CQo=o("__init__()"),wQo=o(" (throws an error)."),AQo=l(),ht=a("div"),F(ky.$$.fragment),yQo=l(),Phe=a("p"),LQo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xQo=l(),nd=a("p"),$Qo=o(`Note:
Loading a model from its configuration file does `),Ihe=a("strong"),kQo=o("not"),SQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qV=a("a"),RQo=o("from_pretrained()"),BQo=o(" to load the model weights."),PQo=l(),F(Jv.$$.fragment),IQo=l(),so=a("div"),F(Sy.$$.fragment),qQo=l(),qhe=a("p"),NQo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jQo=l(),Na=a("p"),DQo=o("The model class to instantiate is selected based on the "),Nhe=a("code"),GQo=o("model_type"),OQo=o(` property of the config object (either
passed as an argument or loaded from `),jhe=a("code"),VQo=o("pretrained_model_name_or_path"),XQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dhe=a("code"),zQo=o("pretrained_model_name_or_path"),QQo=o(":"),WQo=l(),Ghe=a("ul"),Yv=a("li"),Ohe=a("strong"),HQo=o("vision-encoder-decoder"),UQo=o(" \u2014 "),NV=a("a"),JQo=o("VisionEncoderDecoderModel"),YQo=o(" (Vision Encoder decoder model)"),KQo=l(),Kv=a("p"),ZQo=o("The model is set in evaluation mode by default using "),Vhe=a("code"),eWo=o("model.eval()"),oWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xhe=a("code"),rWo=o("model.train()"),tWo=l(),F(Zv.$$.fragment),CIe=l(),sd=a("h2"),eF=a("a"),zhe=a("span"),F(Ry.$$.fragment),aWo=l(),Qhe=a("span"),nWo=o("AutoModelForAudioClassification"),wIe=l(),Go=a("div"),F(By.$$.fragment),sWo=l(),ld=a("p"),lWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),jV=a("a"),iWo=o("from_pretrained()"),dWo=o(" class method or the "),DV=a("a"),cWo=o("from_config()"),fWo=o(` class
method.`),mWo=l(),Py=a("p"),gWo=o("This class cannot be instantiated directly using "),Whe=a("code"),hWo=o("__init__()"),pWo=o(" (throws an error)."),uWo=l(),pt=a("div"),F(Iy.$$.fragment),_Wo=l(),Hhe=a("p"),bWo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),vWo=l(),id=a("p"),FWo=o(`Note:
Loading a model from its configuration file does `),Uhe=a("strong"),TWo=o("not"),MWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=a("a"),EWo=o("from_pretrained()"),CWo=o(" to load the model weights."),wWo=l(),F(oF.$$.fragment),AWo=l(),lo=a("div"),F(qy.$$.fragment),yWo=l(),Jhe=a("p"),LWo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),xWo=l(),ja=a("p"),$Wo=o("The model class to instantiate is selected based on the "),Yhe=a("code"),kWo=o("model_type"),SWo=o(` property of the config object (either
passed as an argument or loaded from `),Khe=a("code"),RWo=o("pretrained_model_name_or_path"),BWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zhe=a("code"),PWo=o("pretrained_model_name_or_path"),IWo=o(":"),qWo=l(),Ne=a("ul"),rF=a("li"),epe=a("strong"),NWo=o("data2vec-audio"),jWo=o(" \u2014 "),OV=a("a"),DWo=o("Data2VecAudioForSequenceClassification"),GWo=o(" (Data2VecAudio model)"),OWo=l(),tF=a("li"),ope=a("strong"),VWo=o("hubert"),XWo=o(" \u2014 "),VV=a("a"),zWo=o("HubertForSequenceClassification"),QWo=o(" (Hubert model)"),WWo=l(),aF=a("li"),rpe=a("strong"),HWo=o("sew"),UWo=o(" \u2014 "),XV=a("a"),JWo=o("SEWForSequenceClassification"),YWo=o(" (SEW model)"),KWo=l(),nF=a("li"),tpe=a("strong"),ZWo=o("sew-d"),eHo=o(" \u2014 "),zV=a("a"),oHo=o("SEWDForSequenceClassification"),rHo=o(" (SEW-D model)"),tHo=l(),sF=a("li"),ape=a("strong"),aHo=o("unispeech"),nHo=o(" \u2014 "),QV=a("a"),sHo=o("UniSpeechForSequenceClassification"),lHo=o(" (UniSpeech model)"),iHo=l(),lF=a("li"),npe=a("strong"),dHo=o("unispeech-sat"),cHo=o(" \u2014 "),WV=a("a"),fHo=o("UniSpeechSatForSequenceClassification"),mHo=o(" (UniSpeechSat model)"),gHo=l(),iF=a("li"),spe=a("strong"),hHo=o("wav2vec2"),pHo=o(" \u2014 "),HV=a("a"),uHo=o("Wav2Vec2ForSequenceClassification"),_Ho=o(" (Wav2Vec2 model)"),bHo=l(),dF=a("li"),lpe=a("strong"),vHo=o("wavlm"),FHo=o(" \u2014 "),UV=a("a"),THo=o("WavLMForSequenceClassification"),MHo=o(" (WavLM model)"),EHo=l(),cF=a("p"),CHo=o("The model is set in evaluation mode by default using "),ipe=a("code"),wHo=o("model.eval()"),AHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dpe=a("code"),yHo=o("model.train()"),LHo=l(),F(fF.$$.fragment),AIe=l(),dd=a("h2"),mF=a("a"),cpe=a("span"),F(Ny.$$.fragment),xHo=l(),fpe=a("span"),$Ho=o("AutoModelForAudioFrameClassification"),yIe=l(),Oo=a("div"),F(jy.$$.fragment),kHo=l(),cd=a("p"),SHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),JV=a("a"),RHo=o("from_pretrained()"),BHo=o(" class method or the "),YV=a("a"),PHo=o("from_config()"),IHo=o(` class
method.`),qHo=l(),Dy=a("p"),NHo=o("This class cannot be instantiated directly using "),mpe=a("code"),jHo=o("__init__()"),DHo=o(" (throws an error)."),GHo=l(),ut=a("div"),F(Gy.$$.fragment),OHo=l(),gpe=a("p"),VHo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),XHo=l(),fd=a("p"),zHo=o(`Note:
Loading a model from its configuration file does `),hpe=a("strong"),QHo=o("not"),WHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KV=a("a"),HHo=o("from_pretrained()"),UHo=o(" to load the model weights."),JHo=l(),F(gF.$$.fragment),YHo=l(),io=a("div"),F(Oy.$$.fragment),KHo=l(),ppe=a("p"),ZHo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),eUo=l(),Da=a("p"),oUo=o("The model class to instantiate is selected based on the "),upe=a("code"),rUo=o("model_type"),tUo=o(` property of the config object (either
passed as an argument or loaded from `),_pe=a("code"),aUo=o("pretrained_model_name_or_path"),nUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bpe=a("code"),sUo=o("pretrained_model_name_or_path"),lUo=o(":"),iUo=l(),Ga=a("ul"),hF=a("li"),vpe=a("strong"),dUo=o("data2vec-audio"),cUo=o(" \u2014 "),ZV=a("a"),fUo=o("Data2VecAudioForAudioFrameClassification"),mUo=o(" (Data2VecAudio model)"),gUo=l(),pF=a("li"),Fpe=a("strong"),hUo=o("unispeech-sat"),pUo=o(" \u2014 "),eX=a("a"),uUo=o("UniSpeechSatForAudioFrameClassification"),_Uo=o(" (UniSpeechSat model)"),bUo=l(),uF=a("li"),Tpe=a("strong"),vUo=o("wav2vec2"),FUo=o(" \u2014 "),oX=a("a"),TUo=o("Wav2Vec2ForAudioFrameClassification"),MUo=o(" (Wav2Vec2 model)"),EUo=l(),_F=a("li"),Mpe=a("strong"),CUo=o("wavlm"),wUo=o(" \u2014 "),rX=a("a"),AUo=o("WavLMForAudioFrameClassification"),yUo=o(" (WavLM model)"),LUo=l(),bF=a("p"),xUo=o("The model is set in evaluation mode by default using "),Epe=a("code"),$Uo=o("model.eval()"),kUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cpe=a("code"),SUo=o("model.train()"),RUo=l(),F(vF.$$.fragment),LIe=l(),md=a("h2"),FF=a("a"),wpe=a("span"),F(Vy.$$.fragment),BUo=l(),Ape=a("span"),PUo=o("AutoModelForCTC"),xIe=l(),Vo=a("div"),F(Xy.$$.fragment),IUo=l(),gd=a("p"),qUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),tX=a("a"),NUo=o("from_pretrained()"),jUo=o(" class method or the "),aX=a("a"),DUo=o("from_config()"),GUo=o(` class
method.`),OUo=l(),zy=a("p"),VUo=o("This class cannot be instantiated directly using "),ype=a("code"),XUo=o("__init__()"),zUo=o(" (throws an error)."),QUo=l(),_t=a("div"),F(Qy.$$.fragment),WUo=l(),Lpe=a("p"),HUo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),UUo=l(),hd=a("p"),JUo=o(`Note:
Loading a model from its configuration file does `),xpe=a("strong"),YUo=o("not"),KUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nX=a("a"),ZUo=o("from_pretrained()"),eJo=o(" to load the model weights."),oJo=l(),F(TF.$$.fragment),rJo=l(),co=a("div"),F(Wy.$$.fragment),tJo=l(),$pe=a("p"),aJo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),nJo=l(),Oa=a("p"),sJo=o("The model class to instantiate is selected based on the "),kpe=a("code"),lJo=o("model_type"),iJo=o(` property of the config object (either
passed as an argument or loaded from `),Spe=a("code"),dJo=o("pretrained_model_name_or_path"),cJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rpe=a("code"),fJo=o("pretrained_model_name_or_path"),mJo=o(":"),gJo=l(),je=a("ul"),MF=a("li"),Bpe=a("strong"),hJo=o("data2vec-audio"),pJo=o(" \u2014 "),sX=a("a"),uJo=o("Data2VecAudioForCTC"),_Jo=o(" (Data2VecAudio model)"),bJo=l(),EF=a("li"),Ppe=a("strong"),vJo=o("hubert"),FJo=o(" \u2014 "),lX=a("a"),TJo=o("HubertForCTC"),MJo=o(" (Hubert model)"),EJo=l(),CF=a("li"),Ipe=a("strong"),CJo=o("sew"),wJo=o(" \u2014 "),iX=a("a"),AJo=o("SEWForCTC"),yJo=o(" (SEW model)"),LJo=l(),wF=a("li"),qpe=a("strong"),xJo=o("sew-d"),$Jo=o(" \u2014 "),dX=a("a"),kJo=o("SEWDForCTC"),SJo=o(" (SEW-D model)"),RJo=l(),AF=a("li"),Npe=a("strong"),BJo=o("unispeech"),PJo=o(" \u2014 "),cX=a("a"),IJo=o("UniSpeechForCTC"),qJo=o(" (UniSpeech model)"),NJo=l(),yF=a("li"),jpe=a("strong"),jJo=o("unispeech-sat"),DJo=o(" \u2014 "),fX=a("a"),GJo=o("UniSpeechSatForCTC"),OJo=o(" (UniSpeechSat model)"),VJo=l(),LF=a("li"),Dpe=a("strong"),XJo=o("wav2vec2"),zJo=o(" \u2014 "),mX=a("a"),QJo=o("Wav2Vec2ForCTC"),WJo=o(" (Wav2Vec2 model)"),HJo=l(),xF=a("li"),Gpe=a("strong"),UJo=o("wavlm"),JJo=o(" \u2014 "),gX=a("a"),YJo=o("WavLMForCTC"),KJo=o(" (WavLM model)"),ZJo=l(),$F=a("p"),eYo=o("The model is set in evaluation mode by default using "),Ope=a("code"),oYo=o("model.eval()"),rYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vpe=a("code"),tYo=o("model.train()"),aYo=l(),F(kF.$$.fragment),$Ie=l(),pd=a("h2"),SF=a("a"),Xpe=a("span"),F(Hy.$$.fragment),nYo=l(),zpe=a("span"),sYo=o("AutoModelForSpeechSeq2Seq"),kIe=l(),Xo=a("div"),F(Uy.$$.fragment),lYo=l(),ud=a("p"),iYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hX=a("a"),dYo=o("from_pretrained()"),cYo=o(" class method or the "),pX=a("a"),fYo=o("from_config()"),mYo=o(` class
method.`),gYo=l(),Jy=a("p"),hYo=o("This class cannot be instantiated directly using "),Qpe=a("code"),pYo=o("__init__()"),uYo=o(" (throws an error)."),_Yo=l(),bt=a("div"),F(Yy.$$.fragment),bYo=l(),Wpe=a("p"),vYo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),FYo=l(),_d=a("p"),TYo=o(`Note:
Loading a model from its configuration file does `),Hpe=a("strong"),MYo=o("not"),EYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=a("a"),CYo=o("from_pretrained()"),wYo=o(" to load the model weights."),AYo=l(),F(RF.$$.fragment),yYo=l(),fo=a("div"),F(Ky.$$.fragment),LYo=l(),Upe=a("p"),xYo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),$Yo=l(),Va=a("p"),kYo=o("The model class to instantiate is selected based on the "),Jpe=a("code"),SYo=o("model_type"),RYo=o(` property of the config object (either
passed as an argument or loaded from `),Ype=a("code"),BYo=o("pretrained_model_name_or_path"),PYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kpe=a("code"),IYo=o("pretrained_model_name_or_path"),qYo=o(":"),NYo=l(),Zy=a("ul"),BF=a("li"),Zpe=a("strong"),jYo=o("speech-encoder-decoder"),DYo=o(" \u2014 "),_X=a("a"),GYo=o("SpeechEncoderDecoderModel"),OYo=o(" (Speech Encoder decoder model)"),VYo=l(),PF=a("li"),eue=a("strong"),XYo=o("speech_to_text"),zYo=o(" \u2014 "),bX=a("a"),QYo=o("Speech2TextForConditionalGeneration"),WYo=o(" (Speech2Text model)"),HYo=l(),IF=a("p"),UYo=o("The model is set in evaluation mode by default using "),oue=a("code"),JYo=o("model.eval()"),YYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rue=a("code"),KYo=o("model.train()"),ZYo=l(),F(qF.$$.fragment),SIe=l(),bd=a("h2"),NF=a("a"),tue=a("span"),F(eL.$$.fragment),eKo=l(),aue=a("span"),oKo=o("AutoModelForAudioXVector"),RIe=l(),zo=a("div"),F(oL.$$.fragment),rKo=l(),vd=a("p"),tKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),vX=a("a"),aKo=o("from_pretrained()"),nKo=o(" class method or the "),FX=a("a"),sKo=o("from_config()"),lKo=o(` class
method.`),iKo=l(),rL=a("p"),dKo=o("This class cannot be instantiated directly using "),nue=a("code"),cKo=o("__init__()"),fKo=o(" (throws an error)."),mKo=l(),vt=a("div"),F(tL.$$.fragment),gKo=l(),sue=a("p"),hKo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),pKo=l(),Fd=a("p"),uKo=o(`Note:
Loading a model from its configuration file does `),lue=a("strong"),_Ko=o("not"),bKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TX=a("a"),vKo=o("from_pretrained()"),FKo=o(" to load the model weights."),TKo=l(),F(jF.$$.fragment),MKo=l(),mo=a("div"),F(aL.$$.fragment),EKo=l(),iue=a("p"),CKo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),wKo=l(),Xa=a("p"),AKo=o("The model class to instantiate is selected based on the "),due=a("code"),yKo=o("model_type"),LKo=o(` property of the config object (either
passed as an argument or loaded from `),cue=a("code"),xKo=o("pretrained_model_name_or_path"),$Ko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=a("code"),kKo=o("pretrained_model_name_or_path"),SKo=o(":"),RKo=l(),za=a("ul"),DF=a("li"),mue=a("strong"),BKo=o("data2vec-audio"),PKo=o(" \u2014 "),MX=a("a"),IKo=o("Data2VecAudioForXVector"),qKo=o(" (Data2VecAudio model)"),NKo=l(),GF=a("li"),gue=a("strong"),jKo=o("unispeech-sat"),DKo=o(" \u2014 "),EX=a("a"),GKo=o("UniSpeechSatForXVector"),OKo=o(" (UniSpeechSat model)"),VKo=l(),OF=a("li"),hue=a("strong"),XKo=o("wav2vec2"),zKo=o(" \u2014 "),CX=a("a"),QKo=o("Wav2Vec2ForXVector"),WKo=o(" (Wav2Vec2 model)"),HKo=l(),VF=a("li"),pue=a("strong"),UKo=o("wavlm"),JKo=o(" \u2014 "),wX=a("a"),YKo=o("WavLMForXVector"),KKo=o(" (WavLM model)"),ZKo=l(),XF=a("p"),eZo=o("The model is set in evaluation mode by default using "),uue=a("code"),oZo=o("model.eval()"),rZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ue=a("code"),tZo=o("model.train()"),aZo=l(),F(zF.$$.fragment),BIe=l(),Td=a("h2"),QF=a("a"),bue=a("span"),F(nL.$$.fragment),nZo=l(),vue=a("span"),sZo=o("AutoModelForMaskedImageModeling"),PIe=l(),Qo=a("div"),F(sL.$$.fragment),lZo=l(),Md=a("p"),iZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),AX=a("a"),dZo=o("from_pretrained()"),cZo=o(" class method or the "),yX=a("a"),fZo=o("from_config()"),mZo=o(` class
method.`),gZo=l(),lL=a("p"),hZo=o("This class cannot be instantiated directly using "),Fue=a("code"),pZo=o("__init__()"),uZo=o(" (throws an error)."),_Zo=l(),Ft=a("div"),F(iL.$$.fragment),bZo=l(),Tue=a("p"),vZo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),FZo=l(),Ed=a("p"),TZo=o(`Note:
Loading a model from its configuration file does `),Mue=a("strong"),MZo=o("not"),EZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=a("a"),CZo=o("from_pretrained()"),wZo=o(" to load the model weights."),AZo=l(),F(WF.$$.fragment),yZo=l(),go=a("div"),F(dL.$$.fragment),LZo=l(),Eue=a("p"),xZo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),$Zo=l(),Qa=a("p"),kZo=o("The model class to instantiate is selected based on the "),Cue=a("code"),SZo=o("model_type"),RZo=o(` property of the config object (either
passed as an argument or loaded from `),wue=a("code"),BZo=o("pretrained_model_name_or_path"),PZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aue=a("code"),IZo=o("pretrained_model_name_or_path"),qZo=o(":"),NZo=l(),Cd=a("ul"),HF=a("li"),yue=a("strong"),jZo=o("deit"),DZo=o(" \u2014 "),xX=a("a"),GZo=o("DeiTForMaskedImageModeling"),OZo=o(" (DeiT model)"),VZo=l(),UF=a("li"),Lue=a("strong"),XZo=o("swin"),zZo=o(" \u2014 "),$X=a("a"),QZo=o("SwinForMaskedImageModeling"),WZo=o(" (Swin model)"),HZo=l(),JF=a("li"),xue=a("strong"),UZo=o("vit"),JZo=o(" \u2014 "),kX=a("a"),YZo=o("ViTForMaskedImageModeling"),KZo=o(" (ViT model)"),ZZo=l(),YF=a("p"),eer=o("The model is set in evaluation mode by default using "),$ue=a("code"),oer=o("model.eval()"),rer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kue=a("code"),ter=o("model.train()"),aer=l(),F(KF.$$.fragment),IIe=l(),wd=a("h2"),ZF=a("a"),Sue=a("span"),F(cL.$$.fragment),ner=l(),Rue=a("span"),ser=o("AutoModelForObjectDetection"),qIe=l(),Wo=a("div"),F(fL.$$.fragment),ler=l(),Ad=a("p"),ier=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),SX=a("a"),der=o("from_pretrained()"),cer=o(" class method or the "),RX=a("a"),fer=o("from_config()"),mer=o(` class
method.`),ger=l(),mL=a("p"),her=o("This class cannot be instantiated directly using "),Bue=a("code"),per=o("__init__()"),uer=o(" (throws an error)."),_er=l(),Tt=a("div"),F(gL.$$.fragment),ber=l(),Pue=a("p"),ver=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Fer=l(),yd=a("p"),Ter=o(`Note:
Loading a model from its configuration file does `),Iue=a("strong"),Mer=o("not"),Eer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BX=a("a"),Cer=o("from_pretrained()"),wer=o(" to load the model weights."),Aer=l(),F(eT.$$.fragment),yer=l(),ho=a("div"),F(hL.$$.fragment),Ler=l(),que=a("p"),xer=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),$er=l(),Wa=a("p"),ker=o("The model class to instantiate is selected based on the "),Nue=a("code"),Ser=o("model_type"),Rer=o(` property of the config object (either
passed as an argument or loaded from `),jue=a("code"),Ber=o("pretrained_model_name_or_path"),Per=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Due=a("code"),Ier=o("pretrained_model_name_or_path"),qer=o(":"),Ner=l(),pL=a("ul"),oT=a("li"),Gue=a("strong"),jer=o("detr"),Der=o(" \u2014 "),PX=a("a"),Ger=o("DetrForObjectDetection"),Oer=o(" (DETR model)"),Ver=l(),rT=a("li"),Oue=a("strong"),Xer=o("yolos"),zer=o(" \u2014 "),IX=a("a"),Qer=o("YolosForObjectDetection"),Wer=o(" (YOLOS model)"),Her=l(),tT=a("p"),Uer=o("The model is set in evaluation mode by default using "),Vue=a("code"),Jer=o("model.eval()"),Yer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xue=a("code"),Ker=o("model.train()"),Zer=l(),F(aT.$$.fragment),NIe=l(),Ld=a("h2"),nT=a("a"),zue=a("span"),F(uL.$$.fragment),eor=l(),Que=a("span"),oor=o("AutoModelForImageSegmentation"),jIe=l(),Ho=a("div"),F(_L.$$.fragment),ror=l(),xd=a("p"),tor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),qX=a("a"),aor=o("from_pretrained()"),nor=o(" class method or the "),NX=a("a"),sor=o("from_config()"),lor=o(` class
method.`),ior=l(),bL=a("p"),dor=o("This class cannot be instantiated directly using "),Wue=a("code"),cor=o("__init__()"),mor=o(" (throws an error)."),gor=l(),Mt=a("div"),F(vL.$$.fragment),hor=l(),Hue=a("p"),por=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),uor=l(),$d=a("p"),_or=o(`Note:
Loading a model from its configuration file does `),Uue=a("strong"),bor=o("not"),vor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jX=a("a"),For=o("from_pretrained()"),Tor=o(" to load the model weights."),Mor=l(),F(sT.$$.fragment),Eor=l(),po=a("div"),F(FL.$$.fragment),Cor=l(),Jue=a("p"),wor=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Aor=l(),Ha=a("p"),yor=o("The model class to instantiate is selected based on the "),Yue=a("code"),Lor=o("model_type"),xor=o(` property of the config object (either
passed as an argument or loaded from `),Kue=a("code"),$or=o("pretrained_model_name_or_path"),kor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zue=a("code"),Sor=o("pretrained_model_name_or_path"),Ror=o(":"),Bor=l(),e_e=a("ul"),lT=a("li"),o_e=a("strong"),Por=o("detr"),Ior=o(" \u2014 "),DX=a("a"),qor=o("DetrForSegmentation"),Nor=o(" (DETR model)"),jor=l(),iT=a("p"),Dor=o("The model is set in evaluation mode by default using "),r_e=a("code"),Gor=o("model.eval()"),Oor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t_e=a("code"),Vor=o("model.train()"),Xor=l(),F(dT.$$.fragment),DIe=l(),kd=a("h2"),cT=a("a"),a_e=a("span"),F(TL.$$.fragment),zor=l(),n_e=a("span"),Qor=o("AutoModelForSemanticSegmentation"),GIe=l(),Uo=a("div"),F(ML.$$.fragment),Wor=l(),Sd=a("p"),Hor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),GX=a("a"),Uor=o("from_pretrained()"),Jor=o(" class method or the "),OX=a("a"),Yor=o("from_config()"),Kor=o(` class
method.`),Zor=l(),EL=a("p"),err=o("This class cannot be instantiated directly using "),s_e=a("code"),orr=o("__init__()"),rrr=o(" (throws an error)."),trr=l(),Et=a("div"),F(CL.$$.fragment),arr=l(),l_e=a("p"),nrr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),srr=l(),Rd=a("p"),lrr=o(`Note:
Loading a model from its configuration file does `),i_e=a("strong"),irr=o("not"),drr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VX=a("a"),crr=o("from_pretrained()"),frr=o(" to load the model weights."),mrr=l(),F(fT.$$.fragment),grr=l(),uo=a("div"),F(wL.$$.fragment),hrr=l(),d_e=a("p"),prr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),urr=l(),Ua=a("p"),_rr=o("The model class to instantiate is selected based on the "),c_e=a("code"),brr=o("model_type"),vrr=o(` property of the config object (either
passed as an argument or loaded from `),f_e=a("code"),Frr=o("pretrained_model_name_or_path"),Trr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m_e=a("code"),Mrr=o("pretrained_model_name_or_path"),Err=o(":"),Crr=l(),Ja=a("ul"),mT=a("li"),g_e=a("strong"),wrr=o("beit"),Arr=o(" \u2014 "),XX=a("a"),yrr=o("BeitForSemanticSegmentation"),Lrr=o(" (BEiT model)"),xrr=l(),gT=a("li"),h_e=a("strong"),$rr=o("data2vec-vision"),krr=o(" \u2014 "),zX=a("a"),Srr=o("Data2VecVisionForSemanticSegmentation"),Rrr=o(" (Data2VecVision model)"),Brr=l(),hT=a("li"),p_e=a("strong"),Prr=o("dpt"),Irr=o(" \u2014 "),QX=a("a"),qrr=o("DPTForSemanticSegmentation"),Nrr=o(" (DPT model)"),jrr=l(),pT=a("li"),u_e=a("strong"),Drr=o("segformer"),Grr=o(" \u2014 "),WX=a("a"),Orr=o("SegformerForSemanticSegmentation"),Vrr=o(" (SegFormer model)"),Xrr=l(),uT=a("p"),zrr=o("The model is set in evaluation mode by default using "),__e=a("code"),Qrr=o("model.eval()"),Wrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b_e=a("code"),Hrr=o("model.train()"),Urr=l(),F(_T.$$.fragment),OIe=l(),Bd=a("h2"),bT=a("a"),v_e=a("span"),F(AL.$$.fragment),Jrr=l(),F_e=a("span"),Yrr=o("AutoModelForInstanceSegmentation"),VIe=l(),Jo=a("div"),F(yL.$$.fragment),Krr=l(),Pd=a("p"),Zrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),HX=a("a"),etr=o("from_pretrained()"),otr=o(" class method or the "),UX=a("a"),rtr=o("from_config()"),ttr=o(` class
method.`),atr=l(),LL=a("p"),ntr=o("This class cannot be instantiated directly using "),T_e=a("code"),str=o("__init__()"),ltr=o(" (throws an error)."),itr=l(),Ct=a("div"),F(xL.$$.fragment),dtr=l(),M_e=a("p"),ctr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),ftr=l(),Id=a("p"),mtr=o(`Note:
Loading a model from its configuration file does `),E_e=a("strong"),gtr=o("not"),htr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=a("a"),ptr=o("from_pretrained()"),utr=o(" to load the model weights."),_tr=l(),F(vT.$$.fragment),btr=l(),_o=a("div"),F($L.$$.fragment),vtr=l(),C_e=a("p"),Ftr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Ttr=l(),Ya=a("p"),Mtr=o("The model class to instantiate is selected based on the "),w_e=a("code"),Etr=o("model_type"),Ctr=o(` property of the config object (either
passed as an argument or loaded from `),A_e=a("code"),wtr=o("pretrained_model_name_or_path"),Atr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y_e=a("code"),ytr=o("pretrained_model_name_or_path"),Ltr=o(":"),xtr=l(),L_e=a("ul"),FT=a("li"),x_e=a("strong"),$tr=o("maskformer"),ktr=o(" \u2014 "),YX=a("a"),Str=o("MaskFormerForInstanceSegmentation"),Rtr=o(" (MaskFormer model)"),Btr=l(),TT=a("p"),Ptr=o("The model is set in evaluation mode by default using "),$_e=a("code"),Itr=o("model.eval()"),qtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k_e=a("code"),Ntr=o("model.train()"),jtr=l(),F(MT.$$.fragment),XIe=l(),qd=a("h2"),ET=a("a"),S_e=a("span"),F(kL.$$.fragment),Dtr=l(),R_e=a("span"),Gtr=o("TFAutoModel"),zIe=l(),Yo=a("div"),F(SL.$$.fragment),Otr=l(),Nd=a("p"),Vtr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),KX=a("a"),Xtr=o("from_pretrained()"),ztr=o(" class method or the "),ZX=a("a"),Qtr=o("from_config()"),Wtr=o(` class
method.`),Htr=l(),RL=a("p"),Utr=o("This class cannot be instantiated directly using "),B_e=a("code"),Jtr=o("__init__()"),Ytr=o(" (throws an error)."),Ktr=l(),wt=a("div"),F(BL.$$.fragment),Ztr=l(),P_e=a("p"),ear=o("Instantiates one of the base model classes of the library from a configuration."),oar=l(),jd=a("p"),rar=o(`Note:
Loading a model from its configuration file does `),I_e=a("strong"),tar=o("not"),aar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=a("a"),nar=o("from_pretrained()"),sar=o(" to load the model weights."),lar=l(),F(CT.$$.fragment),iar=l(),wr=a("div"),F(PL.$$.fragment),dar=l(),q_e=a("p"),car=o("Instantiate one of the base model classes of the library from a pretrained model."),far=l(),Ka=a("p"),mar=o("The model class to instantiate is selected based on the "),N_e=a("code"),gar=o("model_type"),har=o(` property of the config object (either
passed as an argument or loaded from `),j_e=a("code"),par=o("pretrained_model_name_or_path"),uar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=a("code"),_ar=o("pretrained_model_name_or_path"),bar=o(":"),Far=l(),j=a("ul"),wT=a("li"),G_e=a("strong"),Tar=o("albert"),Mar=o(" \u2014 "),oz=a("a"),Ear=o("TFAlbertModel"),Car=o(" (ALBERT model)"),war=l(),AT=a("li"),O_e=a("strong"),Aar=o("bart"),yar=o(" \u2014 "),rz=a("a"),Lar=o("TFBartModel"),xar=o(" (BART model)"),$ar=l(),yT=a("li"),V_e=a("strong"),kar=o("bert"),Sar=o(" \u2014 "),tz=a("a"),Rar=o("TFBertModel"),Bar=o(" (BERT model)"),Par=l(),LT=a("li"),X_e=a("strong"),Iar=o("blenderbot"),qar=o(" \u2014 "),az=a("a"),Nar=o("TFBlenderbotModel"),jar=o(" (Blenderbot model)"),Dar=l(),xT=a("li"),z_e=a("strong"),Gar=o("blenderbot-small"),Oar=o(" \u2014 "),nz=a("a"),Var=o("TFBlenderbotSmallModel"),Xar=o(" (BlenderbotSmall model)"),zar=l(),$T=a("li"),Q_e=a("strong"),Qar=o("camembert"),War=o(" \u2014 "),sz=a("a"),Har=o("TFCamembertModel"),Uar=o(" (CamemBERT model)"),Jar=l(),kT=a("li"),W_e=a("strong"),Yar=o("clip"),Kar=o(" \u2014 "),lz=a("a"),Zar=o("TFCLIPModel"),enr=o(" (CLIP model)"),onr=l(),ST=a("li"),H_e=a("strong"),rnr=o("convbert"),tnr=o(" \u2014 "),iz=a("a"),anr=o("TFConvBertModel"),nnr=o(" (ConvBERT model)"),snr=l(),RT=a("li"),U_e=a("strong"),lnr=o("convnext"),inr=o(" \u2014 "),dz=a("a"),dnr=o("TFConvNextModel"),cnr=o(" (ConvNext model)"),fnr=l(),BT=a("li"),J_e=a("strong"),mnr=o("ctrl"),gnr=o(" \u2014 "),cz=a("a"),hnr=o("TFCTRLModel"),pnr=o(" (CTRL model)"),unr=l(),PT=a("li"),Y_e=a("strong"),_nr=o("data2vec-vision"),bnr=o(" \u2014 "),fz=a("a"),vnr=o("TFData2VecVisionModel"),Fnr=o(" (Data2VecVision model)"),Tnr=l(),IT=a("li"),K_e=a("strong"),Mnr=o("deberta"),Enr=o(" \u2014 "),mz=a("a"),Cnr=o("TFDebertaModel"),wnr=o(" (DeBERTa model)"),Anr=l(),qT=a("li"),Z_e=a("strong"),ynr=o("deberta-v2"),Lnr=o(" \u2014 "),gz=a("a"),xnr=o("TFDebertaV2Model"),$nr=o(" (DeBERTa-v2 model)"),knr=l(),NT=a("li"),e1e=a("strong"),Snr=o("distilbert"),Rnr=o(" \u2014 "),hz=a("a"),Bnr=o("TFDistilBertModel"),Pnr=o(" (DistilBERT model)"),Inr=l(),jT=a("li"),o1e=a("strong"),qnr=o("dpr"),Nnr=o(" \u2014 "),pz=a("a"),jnr=o("TFDPRQuestionEncoder"),Dnr=o(" (DPR model)"),Gnr=l(),DT=a("li"),r1e=a("strong"),Onr=o("electra"),Vnr=o(" \u2014 "),uz=a("a"),Xnr=o("TFElectraModel"),znr=o(" (ELECTRA model)"),Qnr=l(),GT=a("li"),t1e=a("strong"),Wnr=o("flaubert"),Hnr=o(" \u2014 "),_z=a("a"),Unr=o("TFFlaubertModel"),Jnr=o(" (FlauBERT model)"),Ynr=l(),Bs=a("li"),a1e=a("strong"),Knr=o("funnel"),Znr=o(" \u2014 "),bz=a("a"),esr=o("TFFunnelModel"),osr=o(" or "),vz=a("a"),rsr=o("TFFunnelBaseModel"),tsr=o(" (Funnel Transformer model)"),asr=l(),OT=a("li"),n1e=a("strong"),nsr=o("gpt2"),ssr=o(" \u2014 "),Fz=a("a"),lsr=o("TFGPT2Model"),isr=o(" (OpenAI GPT-2 model)"),dsr=l(),VT=a("li"),s1e=a("strong"),csr=o("gptj"),fsr=o(" \u2014 "),Tz=a("a"),msr=o("TFGPTJModel"),gsr=o(" (GPT-J model)"),hsr=l(),XT=a("li"),l1e=a("strong"),psr=o("hubert"),usr=o(" \u2014 "),Mz=a("a"),_sr=o("TFHubertModel"),bsr=o(" (Hubert model)"),vsr=l(),zT=a("li"),i1e=a("strong"),Fsr=o("layoutlm"),Tsr=o(" \u2014 "),Ez=a("a"),Msr=o("TFLayoutLMModel"),Esr=o(" (LayoutLM model)"),Csr=l(),QT=a("li"),d1e=a("strong"),wsr=o("led"),Asr=o(" \u2014 "),Cz=a("a"),ysr=o("TFLEDModel"),Lsr=o(" (LED model)"),xsr=l(),WT=a("li"),c1e=a("strong"),$sr=o("longformer"),ksr=o(" \u2014 "),wz=a("a"),Ssr=o("TFLongformerModel"),Rsr=o(" (Longformer model)"),Bsr=l(),HT=a("li"),f1e=a("strong"),Psr=o("lxmert"),Isr=o(" \u2014 "),Az=a("a"),qsr=o("TFLxmertModel"),Nsr=o(" (LXMERT model)"),jsr=l(),UT=a("li"),m1e=a("strong"),Dsr=o("marian"),Gsr=o(" \u2014 "),yz=a("a"),Osr=o("TFMarianModel"),Vsr=o(" (Marian model)"),Xsr=l(),JT=a("li"),g1e=a("strong"),zsr=o("mbart"),Qsr=o(" \u2014 "),Lz=a("a"),Wsr=o("TFMBartModel"),Hsr=o(" (mBART model)"),Usr=l(),YT=a("li"),h1e=a("strong"),Jsr=o("mobilebert"),Ysr=o(" \u2014 "),xz=a("a"),Ksr=o("TFMobileBertModel"),Zsr=o(" (MobileBERT model)"),elr=l(),KT=a("li"),p1e=a("strong"),olr=o("mpnet"),rlr=o(" \u2014 "),$z=a("a"),tlr=o("TFMPNetModel"),alr=o(" (MPNet model)"),nlr=l(),ZT=a("li"),u1e=a("strong"),slr=o("mt5"),llr=o(" \u2014 "),kz=a("a"),ilr=o("TFMT5Model"),dlr=o(" (mT5 model)"),clr=l(),e7=a("li"),_1e=a("strong"),flr=o("openai-gpt"),mlr=o(" \u2014 "),Sz=a("a"),glr=o("TFOpenAIGPTModel"),hlr=o(" (OpenAI GPT model)"),plr=l(),o7=a("li"),b1e=a("strong"),ulr=o("pegasus"),_lr=o(" \u2014 "),Rz=a("a"),blr=o("TFPegasusModel"),vlr=o(" (Pegasus model)"),Flr=l(),r7=a("li"),v1e=a("strong"),Tlr=o("rembert"),Mlr=o(" \u2014 "),Bz=a("a"),Elr=o("TFRemBertModel"),Clr=o(" (RemBERT model)"),wlr=l(),t7=a("li"),F1e=a("strong"),Alr=o("roberta"),ylr=o(" \u2014 "),Pz=a("a"),Llr=o("TFRobertaModel"),xlr=o(" (RoBERTa model)"),$lr=l(),a7=a("li"),T1e=a("strong"),klr=o("roformer"),Slr=o(" \u2014 "),Iz=a("a"),Rlr=o("TFRoFormerModel"),Blr=o(" (RoFormer model)"),Plr=l(),n7=a("li"),M1e=a("strong"),Ilr=o("speech_to_text"),qlr=o(" \u2014 "),qz=a("a"),Nlr=o("TFSpeech2TextModel"),jlr=o(" (Speech2Text model)"),Dlr=l(),s7=a("li"),E1e=a("strong"),Glr=o("t5"),Olr=o(" \u2014 "),Nz=a("a"),Vlr=o("TFT5Model"),Xlr=o(" (T5 model)"),zlr=l(),l7=a("li"),C1e=a("strong"),Qlr=o("tapas"),Wlr=o(" \u2014 "),jz=a("a"),Hlr=o("TFTapasModel"),Ulr=o(" (TAPAS model)"),Jlr=l(),i7=a("li"),w1e=a("strong"),Ylr=o("transfo-xl"),Klr=o(" \u2014 "),Dz=a("a"),Zlr=o("TFTransfoXLModel"),eir=o(" (Transformer-XL model)"),oir=l(),d7=a("li"),A1e=a("strong"),rir=o("vit"),tir=o(" \u2014 "),Gz=a("a"),air=o("TFViTModel"),nir=o(" (ViT model)"),sir=l(),c7=a("li"),y1e=a("strong"),lir=o("vit_mae"),iir=o(" \u2014 "),Oz=a("a"),dir=o("TFViTMAEModel"),cir=o(" (ViTMAE model)"),fir=l(),f7=a("li"),L1e=a("strong"),mir=o("wav2vec2"),gir=o(" \u2014 "),Vz=a("a"),hir=o("TFWav2Vec2Model"),pir=o(" (Wav2Vec2 model)"),uir=l(),m7=a("li"),x1e=a("strong"),_ir=o("xlm"),bir=o(" \u2014 "),Xz=a("a"),vir=o("TFXLMModel"),Fir=o(" (XLM model)"),Tir=l(),g7=a("li"),$1e=a("strong"),Mir=o("xlm-roberta"),Eir=o(" \u2014 "),zz=a("a"),Cir=o("TFXLMRobertaModel"),wir=o(" (XLM-RoBERTa model)"),Air=l(),h7=a("li"),k1e=a("strong"),yir=o("xlnet"),Lir=o(" \u2014 "),Qz=a("a"),xir=o("TFXLNetModel"),$ir=o(" (XLNet model)"),kir=l(),F(p7.$$.fragment),QIe=l(),Dd=a("h2"),u7=a("a"),S1e=a("span"),F(IL.$$.fragment),Sir=l(),R1e=a("span"),Rir=o("TFAutoModelForPreTraining"),WIe=l(),Ko=a("div"),F(qL.$$.fragment),Bir=l(),Gd=a("p"),Pir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Wz=a("a"),Iir=o("from_pretrained()"),qir=o(" class method or the "),Hz=a("a"),Nir=o("from_config()"),jir=o(` class
method.`),Dir=l(),NL=a("p"),Gir=o("This class cannot be instantiated directly using "),B1e=a("code"),Oir=o("__init__()"),Vir=o(" (throws an error)."),Xir=l(),At=a("div"),F(jL.$$.fragment),zir=l(),P1e=a("p"),Qir=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Wir=l(),Od=a("p"),Hir=o(`Note:
Loading a model from its configuration file does `),I1e=a("strong"),Uir=o("not"),Jir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=a("a"),Yir=o("from_pretrained()"),Kir=o(" to load the model weights."),Zir=l(),F(_7.$$.fragment),edr=l(),Ar=a("div"),F(DL.$$.fragment),odr=l(),q1e=a("p"),rdr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),tdr=l(),Za=a("p"),adr=o("The model class to instantiate is selected based on the "),N1e=a("code"),ndr=o("model_type"),sdr=o(` property of the config object (either
passed as an argument or loaded from `),j1e=a("code"),ldr=o("pretrained_model_name_or_path"),idr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D1e=a("code"),ddr=o("pretrained_model_name_or_path"),cdr=o(":"),fdr=l(),se=a("ul"),b7=a("li"),G1e=a("strong"),mdr=o("albert"),gdr=o(" \u2014 "),Jz=a("a"),hdr=o("TFAlbertForPreTraining"),pdr=o(" (ALBERT model)"),udr=l(),v7=a("li"),O1e=a("strong"),_dr=o("bart"),bdr=o(" \u2014 "),Yz=a("a"),vdr=o("TFBartForConditionalGeneration"),Fdr=o(" (BART model)"),Tdr=l(),F7=a("li"),V1e=a("strong"),Mdr=o("bert"),Edr=o(" \u2014 "),Kz=a("a"),Cdr=o("TFBertForPreTraining"),wdr=o(" (BERT model)"),Adr=l(),T7=a("li"),X1e=a("strong"),ydr=o("camembert"),Ldr=o(" \u2014 "),Zz=a("a"),xdr=o("TFCamembertForMaskedLM"),$dr=o(" (CamemBERT model)"),kdr=l(),M7=a("li"),z1e=a("strong"),Sdr=o("ctrl"),Rdr=o(" \u2014 "),eQ=a("a"),Bdr=o("TFCTRLLMHeadModel"),Pdr=o(" (CTRL model)"),Idr=l(),E7=a("li"),Q1e=a("strong"),qdr=o("distilbert"),Ndr=o(" \u2014 "),oQ=a("a"),jdr=o("TFDistilBertForMaskedLM"),Ddr=o(" (DistilBERT model)"),Gdr=l(),C7=a("li"),W1e=a("strong"),Odr=o("electra"),Vdr=o(" \u2014 "),rQ=a("a"),Xdr=o("TFElectraForPreTraining"),zdr=o(" (ELECTRA model)"),Qdr=l(),w7=a("li"),H1e=a("strong"),Wdr=o("flaubert"),Hdr=o(" \u2014 "),tQ=a("a"),Udr=o("TFFlaubertWithLMHeadModel"),Jdr=o(" (FlauBERT model)"),Ydr=l(),A7=a("li"),U1e=a("strong"),Kdr=o("funnel"),Zdr=o(" \u2014 "),aQ=a("a"),ecr=o("TFFunnelForPreTraining"),ocr=o(" (Funnel Transformer model)"),rcr=l(),y7=a("li"),J1e=a("strong"),tcr=o("gpt2"),acr=o(" \u2014 "),nQ=a("a"),ncr=o("TFGPT2LMHeadModel"),scr=o(" (OpenAI GPT-2 model)"),lcr=l(),L7=a("li"),Y1e=a("strong"),icr=o("layoutlm"),dcr=o(" \u2014 "),sQ=a("a"),ccr=o("TFLayoutLMForMaskedLM"),fcr=o(" (LayoutLM model)"),mcr=l(),x7=a("li"),K1e=a("strong"),gcr=o("lxmert"),hcr=o(" \u2014 "),lQ=a("a"),pcr=o("TFLxmertForPreTraining"),ucr=o(" (LXMERT model)"),_cr=l(),$7=a("li"),Z1e=a("strong"),bcr=o("mobilebert"),vcr=o(" \u2014 "),iQ=a("a"),Fcr=o("TFMobileBertForPreTraining"),Tcr=o(" (MobileBERT model)"),Mcr=l(),k7=a("li"),ebe=a("strong"),Ecr=o("mpnet"),Ccr=o(" \u2014 "),dQ=a("a"),wcr=o("TFMPNetForMaskedLM"),Acr=o(" (MPNet model)"),ycr=l(),S7=a("li"),obe=a("strong"),Lcr=o("openai-gpt"),xcr=o(" \u2014 "),cQ=a("a"),$cr=o("TFOpenAIGPTLMHeadModel"),kcr=o(" (OpenAI GPT model)"),Scr=l(),R7=a("li"),rbe=a("strong"),Rcr=o("roberta"),Bcr=o(" \u2014 "),fQ=a("a"),Pcr=o("TFRobertaForMaskedLM"),Icr=o(" (RoBERTa model)"),qcr=l(),B7=a("li"),tbe=a("strong"),Ncr=o("t5"),jcr=o(" \u2014 "),mQ=a("a"),Dcr=o("TFT5ForConditionalGeneration"),Gcr=o(" (T5 model)"),Ocr=l(),P7=a("li"),abe=a("strong"),Vcr=o("tapas"),Xcr=o(" \u2014 "),gQ=a("a"),zcr=o("TFTapasForMaskedLM"),Qcr=o(" (TAPAS model)"),Wcr=l(),I7=a("li"),nbe=a("strong"),Hcr=o("transfo-xl"),Ucr=o(" \u2014 "),hQ=a("a"),Jcr=o("TFTransfoXLLMHeadModel"),Ycr=o(" (Transformer-XL model)"),Kcr=l(),q7=a("li"),sbe=a("strong"),Zcr=o("vit_mae"),efr=o(" \u2014 "),pQ=a("a"),ofr=o("TFViTMAEForPreTraining"),rfr=o(" (ViTMAE model)"),tfr=l(),N7=a("li"),lbe=a("strong"),afr=o("xlm"),nfr=o(" \u2014 "),uQ=a("a"),sfr=o("TFXLMWithLMHeadModel"),lfr=o(" (XLM model)"),ifr=l(),j7=a("li"),ibe=a("strong"),dfr=o("xlm-roberta"),cfr=o(" \u2014 "),_Q=a("a"),ffr=o("TFXLMRobertaForMaskedLM"),mfr=o(" (XLM-RoBERTa model)"),gfr=l(),D7=a("li"),dbe=a("strong"),hfr=o("xlnet"),pfr=o(" \u2014 "),bQ=a("a"),ufr=o("TFXLNetLMHeadModel"),_fr=o(" (XLNet model)"),bfr=l(),F(G7.$$.fragment),HIe=l(),Vd=a("h2"),O7=a("a"),cbe=a("span"),F(GL.$$.fragment),vfr=l(),fbe=a("span"),Ffr=o("TFAutoModelForCausalLM"),UIe=l(),Zo=a("div"),F(OL.$$.fragment),Tfr=l(),Xd=a("p"),Mfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vQ=a("a"),Efr=o("from_pretrained()"),Cfr=o(" class method or the "),FQ=a("a"),wfr=o("from_config()"),Afr=o(` class
method.`),yfr=l(),VL=a("p"),Lfr=o("This class cannot be instantiated directly using "),mbe=a("code"),xfr=o("__init__()"),$fr=o(" (throws an error)."),kfr=l(),yt=a("div"),F(XL.$$.fragment),Sfr=l(),gbe=a("p"),Rfr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Bfr=l(),zd=a("p"),Pfr=o(`Note:
Loading a model from its configuration file does `),hbe=a("strong"),Ifr=o("not"),qfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=a("a"),Nfr=o("from_pretrained()"),jfr=o(" to load the model weights."),Dfr=l(),F(V7.$$.fragment),Gfr=l(),yr=a("div"),F(zL.$$.fragment),Ofr=l(),pbe=a("p"),Vfr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Xfr=l(),en=a("p"),zfr=o("The model class to instantiate is selected based on the "),ube=a("code"),Qfr=o("model_type"),Wfr=o(` property of the config object (either
passed as an argument or loaded from `),_be=a("code"),Hfr=o("pretrained_model_name_or_path"),Ufr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bbe=a("code"),Jfr=o("pretrained_model_name_or_path"),Yfr=o(":"),Kfr=l(),Te=a("ul"),X7=a("li"),vbe=a("strong"),Zfr=o("bert"),emr=o(" \u2014 "),MQ=a("a"),omr=o("TFBertLMHeadModel"),rmr=o(" (BERT model)"),tmr=l(),z7=a("li"),Fbe=a("strong"),amr=o("camembert"),nmr=o(" \u2014 "),EQ=a("a"),smr=o("TFCamembertForCausalLM"),lmr=o(" (CamemBERT model)"),imr=l(),Q7=a("li"),Tbe=a("strong"),dmr=o("ctrl"),cmr=o(" \u2014 "),CQ=a("a"),fmr=o("TFCTRLLMHeadModel"),mmr=o(" (CTRL model)"),gmr=l(),W7=a("li"),Mbe=a("strong"),hmr=o("gpt2"),pmr=o(" \u2014 "),wQ=a("a"),umr=o("TFGPT2LMHeadModel"),_mr=o(" (OpenAI GPT-2 model)"),bmr=l(),H7=a("li"),Ebe=a("strong"),vmr=o("gptj"),Fmr=o(" \u2014 "),AQ=a("a"),Tmr=o("TFGPTJForCausalLM"),Mmr=o(" (GPT-J model)"),Emr=l(),U7=a("li"),Cbe=a("strong"),Cmr=o("openai-gpt"),wmr=o(" \u2014 "),yQ=a("a"),Amr=o("TFOpenAIGPTLMHeadModel"),ymr=o(" (OpenAI GPT model)"),Lmr=l(),J7=a("li"),wbe=a("strong"),xmr=o("rembert"),$mr=o(" \u2014 "),LQ=a("a"),kmr=o("TFRemBertForCausalLM"),Smr=o(" (RemBERT model)"),Rmr=l(),Y7=a("li"),Abe=a("strong"),Bmr=o("roberta"),Pmr=o(" \u2014 "),xQ=a("a"),Imr=o("TFRobertaForCausalLM"),qmr=o(" (RoBERTa model)"),Nmr=l(),K7=a("li"),ybe=a("strong"),jmr=o("roformer"),Dmr=o(" \u2014 "),$Q=a("a"),Gmr=o("TFRoFormerForCausalLM"),Omr=o(" (RoFormer model)"),Vmr=l(),Z7=a("li"),Lbe=a("strong"),Xmr=o("transfo-xl"),zmr=o(" \u2014 "),kQ=a("a"),Qmr=o("TFTransfoXLLMHeadModel"),Wmr=o(" (Transformer-XL model)"),Hmr=l(),eM=a("li"),xbe=a("strong"),Umr=o("xlm"),Jmr=o(" \u2014 "),SQ=a("a"),Ymr=o("TFXLMWithLMHeadModel"),Kmr=o(" (XLM model)"),Zmr=l(),oM=a("li"),$be=a("strong"),egr=o("xlnet"),ogr=o(" \u2014 "),RQ=a("a"),rgr=o("TFXLNetLMHeadModel"),tgr=o(" (XLNet model)"),agr=l(),F(rM.$$.fragment),JIe=l(),Qd=a("h2"),tM=a("a"),kbe=a("span"),F(QL.$$.fragment),ngr=l(),Sbe=a("span"),sgr=o("TFAutoModelForImageClassification"),YIe=l(),er=a("div"),F(WL.$$.fragment),lgr=l(),Wd=a("p"),igr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BQ=a("a"),dgr=o("from_pretrained()"),cgr=o(" class method or the "),PQ=a("a"),fgr=o("from_config()"),mgr=o(` class
method.`),ggr=l(),HL=a("p"),hgr=o("This class cannot be instantiated directly using "),Rbe=a("code"),pgr=o("__init__()"),ugr=o(" (throws an error)."),_gr=l(),Lt=a("div"),F(UL.$$.fragment),bgr=l(),Bbe=a("p"),vgr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Fgr=l(),Hd=a("p"),Tgr=o(`Note:
Loading a model from its configuration file does `),Pbe=a("strong"),Mgr=o("not"),Egr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=a("a"),Cgr=o("from_pretrained()"),wgr=o(" to load the model weights."),Agr=l(),F(aM.$$.fragment),ygr=l(),Lr=a("div"),F(JL.$$.fragment),Lgr=l(),Ibe=a("p"),xgr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$gr=l(),on=a("p"),kgr=o("The model class to instantiate is selected based on the "),qbe=a("code"),Sgr=o("model_type"),Rgr=o(` property of the config object (either
passed as an argument or loaded from `),Nbe=a("code"),Bgr=o("pretrained_model_name_or_path"),Pgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=a("code"),Igr=o("pretrained_model_name_or_path"),qgr=o(":"),Ngr=l(),Ud=a("ul"),nM=a("li"),Dbe=a("strong"),jgr=o("convnext"),Dgr=o(" \u2014 "),qQ=a("a"),Ggr=o("TFConvNextForImageClassification"),Ogr=o(" (ConvNext model)"),Vgr=l(),sM=a("li"),Gbe=a("strong"),Xgr=o("data2vec-vision"),zgr=o(" \u2014 "),NQ=a("a"),Qgr=o("TFData2VecVisionForImageClassification"),Wgr=o(" (Data2VecVision model)"),Hgr=l(),lM=a("li"),Obe=a("strong"),Ugr=o("vit"),Jgr=o(" \u2014 "),jQ=a("a"),Ygr=o("TFViTForImageClassification"),Kgr=o(" (ViT model)"),Zgr=l(),F(iM.$$.fragment),KIe=l(),Jd=a("h2"),dM=a("a"),Vbe=a("span"),F(YL.$$.fragment),ehr=l(),Xbe=a("span"),ohr=o("TFAutoModelForMaskedLM"),ZIe=l(),or=a("div"),F(KL.$$.fragment),rhr=l(),Yd=a("p"),thr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),DQ=a("a"),ahr=o("from_pretrained()"),nhr=o(" class method or the "),GQ=a("a"),shr=o("from_config()"),lhr=o(` class
method.`),ihr=l(),ZL=a("p"),dhr=o("This class cannot be instantiated directly using "),zbe=a("code"),chr=o("__init__()"),fhr=o(" (throws an error)."),mhr=l(),xt=a("div"),F(e8.$$.fragment),ghr=l(),Qbe=a("p"),hhr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),phr=l(),Kd=a("p"),uhr=o(`Note:
Loading a model from its configuration file does `),Wbe=a("strong"),_hr=o("not"),bhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=a("a"),vhr=o("from_pretrained()"),Fhr=o(" to load the model weights."),Thr=l(),F(cM.$$.fragment),Mhr=l(),xr=a("div"),F(o8.$$.fragment),Ehr=l(),Hbe=a("p"),Chr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),whr=l(),rn=a("p"),Ahr=o("The model class to instantiate is selected based on the "),Ube=a("code"),yhr=o("model_type"),Lhr=o(` property of the config object (either
passed as an argument or loaded from `),Jbe=a("code"),xhr=o("pretrained_model_name_or_path"),$hr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ybe=a("code"),khr=o("pretrained_model_name_or_path"),Shr=o(":"),Rhr=l(),ie=a("ul"),fM=a("li"),Kbe=a("strong"),Bhr=o("albert"),Phr=o(" \u2014 "),VQ=a("a"),Ihr=o("TFAlbertForMaskedLM"),qhr=o(" (ALBERT model)"),Nhr=l(),mM=a("li"),Zbe=a("strong"),jhr=o("bert"),Dhr=o(" \u2014 "),XQ=a("a"),Ghr=o("TFBertForMaskedLM"),Ohr=o(" (BERT model)"),Vhr=l(),gM=a("li"),e2e=a("strong"),Xhr=o("camembert"),zhr=o(" \u2014 "),zQ=a("a"),Qhr=o("TFCamembertForMaskedLM"),Whr=o(" (CamemBERT model)"),Hhr=l(),hM=a("li"),o2e=a("strong"),Uhr=o("convbert"),Jhr=o(" \u2014 "),QQ=a("a"),Yhr=o("TFConvBertForMaskedLM"),Khr=o(" (ConvBERT model)"),Zhr=l(),pM=a("li"),r2e=a("strong"),epr=o("deberta"),opr=o(" \u2014 "),WQ=a("a"),rpr=o("TFDebertaForMaskedLM"),tpr=o(" (DeBERTa model)"),apr=l(),uM=a("li"),t2e=a("strong"),npr=o("deberta-v2"),spr=o(" \u2014 "),HQ=a("a"),lpr=o("TFDebertaV2ForMaskedLM"),ipr=o(" (DeBERTa-v2 model)"),dpr=l(),_M=a("li"),a2e=a("strong"),cpr=o("distilbert"),fpr=o(" \u2014 "),UQ=a("a"),mpr=o("TFDistilBertForMaskedLM"),gpr=o(" (DistilBERT model)"),hpr=l(),bM=a("li"),n2e=a("strong"),ppr=o("electra"),upr=o(" \u2014 "),JQ=a("a"),_pr=o("TFElectraForMaskedLM"),bpr=o(" (ELECTRA model)"),vpr=l(),vM=a("li"),s2e=a("strong"),Fpr=o("flaubert"),Tpr=o(" \u2014 "),YQ=a("a"),Mpr=o("TFFlaubertWithLMHeadModel"),Epr=o(" (FlauBERT model)"),Cpr=l(),FM=a("li"),l2e=a("strong"),wpr=o("funnel"),Apr=o(" \u2014 "),KQ=a("a"),ypr=o("TFFunnelForMaskedLM"),Lpr=o(" (Funnel Transformer model)"),xpr=l(),TM=a("li"),i2e=a("strong"),$pr=o("layoutlm"),kpr=o(" \u2014 "),ZQ=a("a"),Spr=o("TFLayoutLMForMaskedLM"),Rpr=o(" (LayoutLM model)"),Bpr=l(),MM=a("li"),d2e=a("strong"),Ppr=o("longformer"),Ipr=o(" \u2014 "),eW=a("a"),qpr=o("TFLongformerForMaskedLM"),Npr=o(" (Longformer model)"),jpr=l(),EM=a("li"),c2e=a("strong"),Dpr=o("mobilebert"),Gpr=o(" \u2014 "),oW=a("a"),Opr=o("TFMobileBertForMaskedLM"),Vpr=o(" (MobileBERT model)"),Xpr=l(),CM=a("li"),f2e=a("strong"),zpr=o("mpnet"),Qpr=o(" \u2014 "),rW=a("a"),Wpr=o("TFMPNetForMaskedLM"),Hpr=o(" (MPNet model)"),Upr=l(),wM=a("li"),m2e=a("strong"),Jpr=o("rembert"),Ypr=o(" \u2014 "),tW=a("a"),Kpr=o("TFRemBertForMaskedLM"),Zpr=o(" (RemBERT model)"),eur=l(),AM=a("li"),g2e=a("strong"),our=o("roberta"),rur=o(" \u2014 "),aW=a("a"),tur=o("TFRobertaForMaskedLM"),aur=o(" (RoBERTa model)"),nur=l(),yM=a("li"),h2e=a("strong"),sur=o("roformer"),lur=o(" \u2014 "),nW=a("a"),iur=o("TFRoFormerForMaskedLM"),dur=o(" (RoFormer model)"),cur=l(),LM=a("li"),p2e=a("strong"),fur=o("tapas"),mur=o(" \u2014 "),sW=a("a"),gur=o("TFTapasForMaskedLM"),hur=o(" (TAPAS model)"),pur=l(),xM=a("li"),u2e=a("strong"),uur=o("xlm"),_ur=o(" \u2014 "),lW=a("a"),bur=o("TFXLMWithLMHeadModel"),vur=o(" (XLM model)"),Fur=l(),$M=a("li"),_2e=a("strong"),Tur=o("xlm-roberta"),Mur=o(" \u2014 "),iW=a("a"),Eur=o("TFXLMRobertaForMaskedLM"),Cur=o(" (XLM-RoBERTa model)"),wur=l(),F(kM.$$.fragment),eqe=l(),Zd=a("h2"),SM=a("a"),b2e=a("span"),F(r8.$$.fragment),Aur=l(),v2e=a("span"),yur=o("TFAutoModelForSeq2SeqLM"),oqe=l(),rr=a("div"),F(t8.$$.fragment),Lur=l(),ec=a("p"),xur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dW=a("a"),$ur=o("from_pretrained()"),kur=o(" class method or the "),cW=a("a"),Sur=o("from_config()"),Rur=o(` class
method.`),Bur=l(),a8=a("p"),Pur=o("This class cannot be instantiated directly using "),F2e=a("code"),Iur=o("__init__()"),qur=o(" (throws an error)."),Nur=l(),$t=a("div"),F(n8.$$.fragment),jur=l(),T2e=a("p"),Dur=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Gur=l(),oc=a("p"),Our=o(`Note:
Loading a model from its configuration file does `),M2e=a("strong"),Vur=o("not"),Xur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=a("a"),zur=o("from_pretrained()"),Qur=o(" to load the model weights."),Wur=l(),F(RM.$$.fragment),Hur=l(),$r=a("div"),F(s8.$$.fragment),Uur=l(),E2e=a("p"),Jur=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Yur=l(),tn=a("p"),Kur=o("The model class to instantiate is selected based on the "),C2e=a("code"),Zur=o("model_type"),e_r=o(` property of the config object (either
passed as an argument or loaded from `),w2e=a("code"),o_r=o("pretrained_model_name_or_path"),r_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=a("code"),t_r=o("pretrained_model_name_or_path"),a_r=o(":"),n_r=l(),ye=a("ul"),BM=a("li"),y2e=a("strong"),s_r=o("bart"),l_r=o(" \u2014 "),mW=a("a"),i_r=o("TFBartForConditionalGeneration"),d_r=o(" (BART model)"),c_r=l(),PM=a("li"),L2e=a("strong"),f_r=o("blenderbot"),m_r=o(" \u2014 "),gW=a("a"),g_r=o("TFBlenderbotForConditionalGeneration"),h_r=o(" (Blenderbot model)"),p_r=l(),IM=a("li"),x2e=a("strong"),u_r=o("blenderbot-small"),__r=o(" \u2014 "),hW=a("a"),b_r=o("TFBlenderbotSmallForConditionalGeneration"),v_r=o(" (BlenderbotSmall model)"),F_r=l(),qM=a("li"),$2e=a("strong"),T_r=o("encoder-decoder"),M_r=o(" \u2014 "),pW=a("a"),E_r=o("TFEncoderDecoderModel"),C_r=o(" (Encoder decoder model)"),w_r=l(),NM=a("li"),k2e=a("strong"),A_r=o("led"),y_r=o(" \u2014 "),uW=a("a"),L_r=o("TFLEDForConditionalGeneration"),x_r=o(" (LED model)"),$_r=l(),jM=a("li"),S2e=a("strong"),k_r=o("marian"),S_r=o(" \u2014 "),_W=a("a"),R_r=o("TFMarianMTModel"),B_r=o(" (Marian model)"),P_r=l(),DM=a("li"),R2e=a("strong"),I_r=o("mbart"),q_r=o(" \u2014 "),bW=a("a"),N_r=o("TFMBartForConditionalGeneration"),j_r=o(" (mBART model)"),D_r=l(),GM=a("li"),B2e=a("strong"),G_r=o("mt5"),O_r=o(" \u2014 "),vW=a("a"),V_r=o("TFMT5ForConditionalGeneration"),X_r=o(" (mT5 model)"),z_r=l(),OM=a("li"),P2e=a("strong"),Q_r=o("pegasus"),W_r=o(" \u2014 "),FW=a("a"),H_r=o("TFPegasusForConditionalGeneration"),U_r=o(" (Pegasus model)"),J_r=l(),VM=a("li"),I2e=a("strong"),Y_r=o("t5"),K_r=o(" \u2014 "),TW=a("a"),Z_r=o("TFT5ForConditionalGeneration"),e1r=o(" (T5 model)"),o1r=l(),F(XM.$$.fragment),rqe=l(),rc=a("h2"),zM=a("a"),q2e=a("span"),F(l8.$$.fragment),r1r=l(),N2e=a("span"),t1r=o("TFAutoModelForSequenceClassification"),tqe=l(),tr=a("div"),F(i8.$$.fragment),a1r=l(),tc=a("p"),n1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),MW=a("a"),s1r=o("from_pretrained()"),l1r=o(" class method or the "),EW=a("a"),i1r=o("from_config()"),d1r=o(` class
method.`),c1r=l(),d8=a("p"),f1r=o("This class cannot be instantiated directly using "),j2e=a("code"),m1r=o("__init__()"),g1r=o(" (throws an error)."),h1r=l(),kt=a("div"),F(c8.$$.fragment),p1r=l(),D2e=a("p"),u1r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_1r=l(),ac=a("p"),b1r=o(`Note:
Loading a model from its configuration file does `),G2e=a("strong"),v1r=o("not"),F1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CW=a("a"),T1r=o("from_pretrained()"),M1r=o(" to load the model weights."),E1r=l(),F(QM.$$.fragment),C1r=l(),kr=a("div"),F(f8.$$.fragment),w1r=l(),O2e=a("p"),A1r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),y1r=l(),an=a("p"),L1r=o("The model class to instantiate is selected based on the "),V2e=a("code"),x1r=o("model_type"),$1r=o(` property of the config object (either
passed as an argument or loaded from `),X2e=a("code"),k1r=o("pretrained_model_name_or_path"),S1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=a("code"),R1r=o("pretrained_model_name_or_path"),B1r=o(":"),P1r=l(),Z=a("ul"),WM=a("li"),Q2e=a("strong"),I1r=o("albert"),q1r=o(" \u2014 "),wW=a("a"),N1r=o("TFAlbertForSequenceClassification"),j1r=o(" (ALBERT model)"),D1r=l(),HM=a("li"),W2e=a("strong"),G1r=o("bert"),O1r=o(" \u2014 "),AW=a("a"),V1r=o("TFBertForSequenceClassification"),X1r=o(" (BERT model)"),z1r=l(),UM=a("li"),H2e=a("strong"),Q1r=o("camembert"),W1r=o(" \u2014 "),yW=a("a"),H1r=o("TFCamembertForSequenceClassification"),U1r=o(" (CamemBERT model)"),J1r=l(),JM=a("li"),U2e=a("strong"),Y1r=o("convbert"),K1r=o(" \u2014 "),LW=a("a"),Z1r=o("TFConvBertForSequenceClassification"),ebr=o(" (ConvBERT model)"),obr=l(),YM=a("li"),J2e=a("strong"),rbr=o("ctrl"),tbr=o(" \u2014 "),xW=a("a"),abr=o("TFCTRLForSequenceClassification"),nbr=o(" (CTRL model)"),sbr=l(),KM=a("li"),Y2e=a("strong"),lbr=o("deberta"),ibr=o(" \u2014 "),$W=a("a"),dbr=o("TFDebertaForSequenceClassification"),cbr=o(" (DeBERTa model)"),fbr=l(),ZM=a("li"),K2e=a("strong"),mbr=o("deberta-v2"),gbr=o(" \u2014 "),kW=a("a"),hbr=o("TFDebertaV2ForSequenceClassification"),pbr=o(" (DeBERTa-v2 model)"),ubr=l(),e4=a("li"),Z2e=a("strong"),_br=o("distilbert"),bbr=o(" \u2014 "),SW=a("a"),vbr=o("TFDistilBertForSequenceClassification"),Fbr=o(" (DistilBERT model)"),Tbr=l(),o4=a("li"),e3e=a("strong"),Mbr=o("electra"),Ebr=o(" \u2014 "),RW=a("a"),Cbr=o("TFElectraForSequenceClassification"),wbr=o(" (ELECTRA model)"),Abr=l(),r4=a("li"),o3e=a("strong"),ybr=o("flaubert"),Lbr=o(" \u2014 "),BW=a("a"),xbr=o("TFFlaubertForSequenceClassification"),$br=o(" (FlauBERT model)"),kbr=l(),t4=a("li"),r3e=a("strong"),Sbr=o("funnel"),Rbr=o(" \u2014 "),PW=a("a"),Bbr=o("TFFunnelForSequenceClassification"),Pbr=o(" (Funnel Transformer model)"),Ibr=l(),a4=a("li"),t3e=a("strong"),qbr=o("gpt2"),Nbr=o(" \u2014 "),IW=a("a"),jbr=o("TFGPT2ForSequenceClassification"),Dbr=o(" (OpenAI GPT-2 model)"),Gbr=l(),n4=a("li"),a3e=a("strong"),Obr=o("gptj"),Vbr=o(" \u2014 "),qW=a("a"),Xbr=o("TFGPTJForSequenceClassification"),zbr=o(" (GPT-J model)"),Qbr=l(),s4=a("li"),n3e=a("strong"),Wbr=o("layoutlm"),Hbr=o(" \u2014 "),NW=a("a"),Ubr=o("TFLayoutLMForSequenceClassification"),Jbr=o(" (LayoutLM model)"),Ybr=l(),l4=a("li"),s3e=a("strong"),Kbr=o("longformer"),Zbr=o(" \u2014 "),jW=a("a"),e2r=o("TFLongformerForSequenceClassification"),o2r=o(" (Longformer model)"),r2r=l(),i4=a("li"),l3e=a("strong"),t2r=o("mobilebert"),a2r=o(" \u2014 "),DW=a("a"),n2r=o("TFMobileBertForSequenceClassification"),s2r=o(" (MobileBERT model)"),l2r=l(),d4=a("li"),i3e=a("strong"),i2r=o("mpnet"),d2r=o(" \u2014 "),GW=a("a"),c2r=o("TFMPNetForSequenceClassification"),f2r=o(" (MPNet model)"),m2r=l(),c4=a("li"),d3e=a("strong"),g2r=o("openai-gpt"),h2r=o(" \u2014 "),OW=a("a"),p2r=o("TFOpenAIGPTForSequenceClassification"),u2r=o(" (OpenAI GPT model)"),_2r=l(),f4=a("li"),c3e=a("strong"),b2r=o("rembert"),v2r=o(" \u2014 "),VW=a("a"),F2r=o("TFRemBertForSequenceClassification"),T2r=o(" (RemBERT model)"),M2r=l(),m4=a("li"),f3e=a("strong"),E2r=o("roberta"),C2r=o(" \u2014 "),XW=a("a"),w2r=o("TFRobertaForSequenceClassification"),A2r=o(" (RoBERTa model)"),y2r=l(),g4=a("li"),m3e=a("strong"),L2r=o("roformer"),x2r=o(" \u2014 "),zW=a("a"),$2r=o("TFRoFormerForSequenceClassification"),k2r=o(" (RoFormer model)"),S2r=l(),h4=a("li"),g3e=a("strong"),R2r=o("tapas"),B2r=o(" \u2014 "),QW=a("a"),P2r=o("TFTapasForSequenceClassification"),I2r=o(" (TAPAS model)"),q2r=l(),p4=a("li"),h3e=a("strong"),N2r=o("transfo-xl"),j2r=o(" \u2014 "),WW=a("a"),D2r=o("TFTransfoXLForSequenceClassification"),G2r=o(" (Transformer-XL model)"),O2r=l(),u4=a("li"),p3e=a("strong"),V2r=o("xlm"),X2r=o(" \u2014 "),HW=a("a"),z2r=o("TFXLMForSequenceClassification"),Q2r=o(" (XLM model)"),W2r=l(),_4=a("li"),u3e=a("strong"),H2r=o("xlm-roberta"),U2r=o(" \u2014 "),UW=a("a"),J2r=o("TFXLMRobertaForSequenceClassification"),Y2r=o(" (XLM-RoBERTa model)"),K2r=l(),b4=a("li"),_3e=a("strong"),Z2r=o("xlnet"),e3r=o(" \u2014 "),JW=a("a"),o3r=o("TFXLNetForSequenceClassification"),r3r=o(" (XLNet model)"),t3r=l(),F(v4.$$.fragment),aqe=l(),nc=a("h2"),F4=a("a"),b3e=a("span"),F(m8.$$.fragment),a3r=l(),v3e=a("span"),n3r=o("TFAutoModelForMultipleChoice"),nqe=l(),ar=a("div"),F(g8.$$.fragment),s3r=l(),sc=a("p"),l3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YW=a("a"),i3r=o("from_pretrained()"),d3r=o(" class method or the "),KW=a("a"),c3r=o("from_config()"),f3r=o(` class
method.`),m3r=l(),h8=a("p"),g3r=o("This class cannot be instantiated directly using "),F3e=a("code"),h3r=o("__init__()"),p3r=o(" (throws an error)."),u3r=l(),St=a("div"),F(p8.$$.fragment),_3r=l(),T3e=a("p"),b3r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),v3r=l(),lc=a("p"),F3r=o(`Note:
Loading a model from its configuration file does `),M3e=a("strong"),T3r=o("not"),M3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=a("a"),E3r=o("from_pretrained()"),C3r=o(" to load the model weights."),w3r=l(),F(T4.$$.fragment),A3r=l(),Sr=a("div"),F(u8.$$.fragment),y3r=l(),E3e=a("p"),L3r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),x3r=l(),nn=a("p"),$3r=o("The model class to instantiate is selected based on the "),C3e=a("code"),k3r=o("model_type"),S3r=o(` property of the config object (either
passed as an argument or loaded from `),w3e=a("code"),R3r=o("pretrained_model_name_or_path"),B3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A3e=a("code"),P3r=o("pretrained_model_name_or_path"),I3r=o(":"),q3r=l(),pe=a("ul"),M4=a("li"),y3e=a("strong"),N3r=o("albert"),j3r=o(" \u2014 "),eH=a("a"),D3r=o("TFAlbertForMultipleChoice"),G3r=o(" (ALBERT model)"),O3r=l(),E4=a("li"),L3e=a("strong"),V3r=o("bert"),X3r=o(" \u2014 "),oH=a("a"),z3r=o("TFBertForMultipleChoice"),Q3r=o(" (BERT model)"),W3r=l(),C4=a("li"),x3e=a("strong"),H3r=o("camembert"),U3r=o(" \u2014 "),rH=a("a"),J3r=o("TFCamembertForMultipleChoice"),Y3r=o(" (CamemBERT model)"),K3r=l(),w4=a("li"),$3e=a("strong"),Z3r=o("convbert"),evr=o(" \u2014 "),tH=a("a"),ovr=o("TFConvBertForMultipleChoice"),rvr=o(" (ConvBERT model)"),tvr=l(),A4=a("li"),k3e=a("strong"),avr=o("distilbert"),nvr=o(" \u2014 "),aH=a("a"),svr=o("TFDistilBertForMultipleChoice"),lvr=o(" (DistilBERT model)"),ivr=l(),y4=a("li"),S3e=a("strong"),dvr=o("electra"),cvr=o(" \u2014 "),nH=a("a"),fvr=o("TFElectraForMultipleChoice"),mvr=o(" (ELECTRA model)"),gvr=l(),L4=a("li"),R3e=a("strong"),hvr=o("flaubert"),pvr=o(" \u2014 "),sH=a("a"),uvr=o("TFFlaubertForMultipleChoice"),_vr=o(" (FlauBERT model)"),bvr=l(),x4=a("li"),B3e=a("strong"),vvr=o("funnel"),Fvr=o(" \u2014 "),lH=a("a"),Tvr=o("TFFunnelForMultipleChoice"),Mvr=o(" (Funnel Transformer model)"),Evr=l(),$4=a("li"),P3e=a("strong"),Cvr=o("longformer"),wvr=o(" \u2014 "),iH=a("a"),Avr=o("TFLongformerForMultipleChoice"),yvr=o(" (Longformer model)"),Lvr=l(),k4=a("li"),I3e=a("strong"),xvr=o("mobilebert"),$vr=o(" \u2014 "),dH=a("a"),kvr=o("TFMobileBertForMultipleChoice"),Svr=o(" (MobileBERT model)"),Rvr=l(),S4=a("li"),q3e=a("strong"),Bvr=o("mpnet"),Pvr=o(" \u2014 "),cH=a("a"),Ivr=o("TFMPNetForMultipleChoice"),qvr=o(" (MPNet model)"),Nvr=l(),R4=a("li"),N3e=a("strong"),jvr=o("rembert"),Dvr=o(" \u2014 "),fH=a("a"),Gvr=o("TFRemBertForMultipleChoice"),Ovr=o(" (RemBERT model)"),Vvr=l(),B4=a("li"),j3e=a("strong"),Xvr=o("roberta"),zvr=o(" \u2014 "),mH=a("a"),Qvr=o("TFRobertaForMultipleChoice"),Wvr=o(" (RoBERTa model)"),Hvr=l(),P4=a("li"),D3e=a("strong"),Uvr=o("roformer"),Jvr=o(" \u2014 "),gH=a("a"),Yvr=o("TFRoFormerForMultipleChoice"),Kvr=o(" (RoFormer model)"),Zvr=l(),I4=a("li"),G3e=a("strong"),eFr=o("xlm"),oFr=o(" \u2014 "),hH=a("a"),rFr=o("TFXLMForMultipleChoice"),tFr=o(" (XLM model)"),aFr=l(),q4=a("li"),O3e=a("strong"),nFr=o("xlm-roberta"),sFr=o(" \u2014 "),pH=a("a"),lFr=o("TFXLMRobertaForMultipleChoice"),iFr=o(" (XLM-RoBERTa model)"),dFr=l(),N4=a("li"),V3e=a("strong"),cFr=o("xlnet"),fFr=o(" \u2014 "),uH=a("a"),mFr=o("TFXLNetForMultipleChoice"),gFr=o(" (XLNet model)"),hFr=l(),F(j4.$$.fragment),sqe=l(),ic=a("h2"),D4=a("a"),X3e=a("span"),F(_8.$$.fragment),pFr=l(),z3e=a("span"),uFr=o("TFAutoModelForNextSentencePrediction"),lqe=l(),nr=a("div"),F(b8.$$.fragment),_Fr=l(),dc=a("p"),bFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),_H=a("a"),vFr=o("from_pretrained()"),FFr=o(" class method or the "),bH=a("a"),TFr=o("from_config()"),MFr=o(` class
method.`),EFr=l(),v8=a("p"),CFr=o("This class cannot be instantiated directly using "),Q3e=a("code"),wFr=o("__init__()"),AFr=o(" (throws an error)."),yFr=l(),Rt=a("div"),F(F8.$$.fragment),LFr=l(),W3e=a("p"),xFr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$Fr=l(),cc=a("p"),kFr=o(`Note:
Loading a model from its configuration file does `),H3e=a("strong"),SFr=o("not"),RFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=a("a"),BFr=o("from_pretrained()"),PFr=o(" to load the model weights."),IFr=l(),F(G4.$$.fragment),qFr=l(),Rr=a("div"),F(T8.$$.fragment),NFr=l(),U3e=a("p"),jFr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DFr=l(),sn=a("p"),GFr=o("The model class to instantiate is selected based on the "),J3e=a("code"),OFr=o("model_type"),VFr=o(` property of the config object (either
passed as an argument or loaded from `),Y3e=a("code"),XFr=o("pretrained_model_name_or_path"),zFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K3e=a("code"),QFr=o("pretrained_model_name_or_path"),WFr=o(":"),HFr=l(),M8=a("ul"),O4=a("li"),Z3e=a("strong"),UFr=o("bert"),JFr=o(" \u2014 "),FH=a("a"),YFr=o("TFBertForNextSentencePrediction"),KFr=o(" (BERT model)"),ZFr=l(),V4=a("li"),eve=a("strong"),eTr=o("mobilebert"),oTr=o(" \u2014 "),TH=a("a"),rTr=o("TFMobileBertForNextSentencePrediction"),tTr=o(" (MobileBERT model)"),aTr=l(),F(X4.$$.fragment),iqe=l(),fc=a("h2"),z4=a("a"),ove=a("span"),F(E8.$$.fragment),nTr=l(),rve=a("span"),sTr=o("TFAutoModelForTableQuestionAnswering"),dqe=l(),sr=a("div"),F(C8.$$.fragment),lTr=l(),mc=a("p"),iTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),MH=a("a"),dTr=o("from_pretrained()"),cTr=o(" class method or the "),EH=a("a"),fTr=o("from_config()"),mTr=o(` class
method.`),gTr=l(),w8=a("p"),hTr=o("This class cannot be instantiated directly using "),tve=a("code"),pTr=o("__init__()"),uTr=o(" (throws an error)."),_Tr=l(),Bt=a("div"),F(A8.$$.fragment),bTr=l(),ave=a("p"),vTr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),FTr=l(),gc=a("p"),TTr=o(`Note:
Loading a model from its configuration file does `),nve=a("strong"),MTr=o("not"),ETr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=a("a"),CTr=o("from_pretrained()"),wTr=o(" to load the model weights."),ATr=l(),F(Q4.$$.fragment),yTr=l(),Br=a("div"),F(y8.$$.fragment),LTr=l(),sve=a("p"),xTr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$Tr=l(),ln=a("p"),kTr=o("The model class to instantiate is selected based on the "),lve=a("code"),STr=o("model_type"),RTr=o(` property of the config object (either
passed as an argument or loaded from `),ive=a("code"),BTr=o("pretrained_model_name_or_path"),PTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=a("code"),ITr=o("pretrained_model_name_or_path"),qTr=o(":"),NTr=l(),cve=a("ul"),W4=a("li"),fve=a("strong"),jTr=o("tapas"),DTr=o(" \u2014 "),wH=a("a"),GTr=o("TFTapasForQuestionAnswering"),OTr=o(" (TAPAS model)"),VTr=l(),F(H4.$$.fragment),cqe=l(),hc=a("h2"),U4=a("a"),mve=a("span"),F(L8.$$.fragment),XTr=l(),gve=a("span"),zTr=o("TFAutoModelForTokenClassification"),fqe=l(),lr=a("div"),F(x8.$$.fragment),QTr=l(),pc=a("p"),WTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),AH=a("a"),HTr=o("from_pretrained()"),UTr=o(" class method or the "),yH=a("a"),JTr=o("from_config()"),YTr=o(` class
method.`),KTr=l(),$8=a("p"),ZTr=o("This class cannot be instantiated directly using "),hve=a("code"),e7r=o("__init__()"),o7r=o(" (throws an error)."),r7r=l(),Pt=a("div"),F(k8.$$.fragment),t7r=l(),pve=a("p"),a7r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),n7r=l(),uc=a("p"),s7r=o(`Note:
Loading a model from its configuration file does `),uve=a("strong"),l7r=o("not"),i7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=a("a"),d7r=o("from_pretrained()"),c7r=o(" to load the model weights."),f7r=l(),F(J4.$$.fragment),m7r=l(),Pr=a("div"),F(S8.$$.fragment),g7r=l(),_ve=a("p"),h7r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),p7r=l(),dn=a("p"),u7r=o("The model class to instantiate is selected based on the "),bve=a("code"),_7r=o("model_type"),b7r=o(` property of the config object (either
passed as an argument or loaded from `),vve=a("code"),v7r=o("pretrained_model_name_or_path"),F7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fve=a("code"),T7r=o("pretrained_model_name_or_path"),M7r=o(":"),E7r=l(),de=a("ul"),Y4=a("li"),Tve=a("strong"),C7r=o("albert"),w7r=o(" \u2014 "),xH=a("a"),A7r=o("TFAlbertForTokenClassification"),y7r=o(" (ALBERT model)"),L7r=l(),K4=a("li"),Mve=a("strong"),x7r=o("bert"),$7r=o(" \u2014 "),$H=a("a"),k7r=o("TFBertForTokenClassification"),S7r=o(" (BERT model)"),R7r=l(),Z4=a("li"),Eve=a("strong"),B7r=o("camembert"),P7r=o(" \u2014 "),kH=a("a"),I7r=o("TFCamembertForTokenClassification"),q7r=o(" (CamemBERT model)"),N7r=l(),eE=a("li"),Cve=a("strong"),j7r=o("convbert"),D7r=o(" \u2014 "),SH=a("a"),G7r=o("TFConvBertForTokenClassification"),O7r=o(" (ConvBERT model)"),V7r=l(),oE=a("li"),wve=a("strong"),X7r=o("deberta"),z7r=o(" \u2014 "),RH=a("a"),Q7r=o("TFDebertaForTokenClassification"),W7r=o(" (DeBERTa model)"),H7r=l(),rE=a("li"),Ave=a("strong"),U7r=o("deberta-v2"),J7r=o(" \u2014 "),BH=a("a"),Y7r=o("TFDebertaV2ForTokenClassification"),K7r=o(" (DeBERTa-v2 model)"),Z7r=l(),tE=a("li"),yve=a("strong"),eMr=o("distilbert"),oMr=o(" \u2014 "),PH=a("a"),rMr=o("TFDistilBertForTokenClassification"),tMr=o(" (DistilBERT model)"),aMr=l(),aE=a("li"),Lve=a("strong"),nMr=o("electra"),sMr=o(" \u2014 "),IH=a("a"),lMr=o("TFElectraForTokenClassification"),iMr=o(" (ELECTRA model)"),dMr=l(),nE=a("li"),xve=a("strong"),cMr=o("flaubert"),fMr=o(" \u2014 "),qH=a("a"),mMr=o("TFFlaubertForTokenClassification"),gMr=o(" (FlauBERT model)"),hMr=l(),sE=a("li"),$ve=a("strong"),pMr=o("funnel"),uMr=o(" \u2014 "),NH=a("a"),_Mr=o("TFFunnelForTokenClassification"),bMr=o(" (Funnel Transformer model)"),vMr=l(),lE=a("li"),kve=a("strong"),FMr=o("layoutlm"),TMr=o(" \u2014 "),jH=a("a"),MMr=o("TFLayoutLMForTokenClassification"),EMr=o(" (LayoutLM model)"),CMr=l(),iE=a("li"),Sve=a("strong"),wMr=o("longformer"),AMr=o(" \u2014 "),DH=a("a"),yMr=o("TFLongformerForTokenClassification"),LMr=o(" (Longformer model)"),xMr=l(),dE=a("li"),Rve=a("strong"),$Mr=o("mobilebert"),kMr=o(" \u2014 "),GH=a("a"),SMr=o("TFMobileBertForTokenClassification"),RMr=o(" (MobileBERT model)"),BMr=l(),cE=a("li"),Bve=a("strong"),PMr=o("mpnet"),IMr=o(" \u2014 "),OH=a("a"),qMr=o("TFMPNetForTokenClassification"),NMr=o(" (MPNet model)"),jMr=l(),fE=a("li"),Pve=a("strong"),DMr=o("rembert"),GMr=o(" \u2014 "),VH=a("a"),OMr=o("TFRemBertForTokenClassification"),VMr=o(" (RemBERT model)"),XMr=l(),mE=a("li"),Ive=a("strong"),zMr=o("roberta"),QMr=o(" \u2014 "),XH=a("a"),WMr=o("TFRobertaForTokenClassification"),HMr=o(" (RoBERTa model)"),UMr=l(),gE=a("li"),qve=a("strong"),JMr=o("roformer"),YMr=o(" \u2014 "),zH=a("a"),KMr=o("TFRoFormerForTokenClassification"),ZMr=o(" (RoFormer model)"),e4r=l(),hE=a("li"),Nve=a("strong"),o4r=o("xlm"),r4r=o(" \u2014 "),QH=a("a"),t4r=o("TFXLMForTokenClassification"),a4r=o(" (XLM model)"),n4r=l(),pE=a("li"),jve=a("strong"),s4r=o("xlm-roberta"),l4r=o(" \u2014 "),WH=a("a"),i4r=o("TFXLMRobertaForTokenClassification"),d4r=o(" (XLM-RoBERTa model)"),c4r=l(),uE=a("li"),Dve=a("strong"),f4r=o("xlnet"),m4r=o(" \u2014 "),HH=a("a"),g4r=o("TFXLNetForTokenClassification"),h4r=o(" (XLNet model)"),p4r=l(),F(_E.$$.fragment),mqe=l(),_c=a("h2"),bE=a("a"),Gve=a("span"),F(R8.$$.fragment),u4r=l(),Ove=a("span"),_4r=o("TFAutoModelForQuestionAnswering"),gqe=l(),ir=a("div"),F(B8.$$.fragment),b4r=l(),bc=a("p"),v4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),UH=a("a"),F4r=o("from_pretrained()"),T4r=o(" class method or the "),JH=a("a"),M4r=o("from_config()"),E4r=o(` class
method.`),C4r=l(),P8=a("p"),w4r=o("This class cannot be instantiated directly using "),Vve=a("code"),A4r=o("__init__()"),y4r=o(" (throws an error)."),L4r=l(),It=a("div"),F(I8.$$.fragment),x4r=l(),Xve=a("p"),$4r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),k4r=l(),vc=a("p"),S4r=o(`Note:
Loading a model from its configuration file does `),zve=a("strong"),R4r=o("not"),B4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),P4r=o("from_pretrained()"),I4r=o(" to load the model weights."),q4r=l(),F(vE.$$.fragment),N4r=l(),Ir=a("div"),F(q8.$$.fragment),j4r=l(),Qve=a("p"),D4r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),G4r=l(),cn=a("p"),O4r=o("The model class to instantiate is selected based on the "),Wve=a("code"),V4r=o("model_type"),X4r=o(` property of the config object (either
passed as an argument or loaded from `),Hve=a("code"),z4r=o("pretrained_model_name_or_path"),Q4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=a("code"),W4r=o("pretrained_model_name_or_path"),H4r=o(":"),U4r=l(),ce=a("ul"),FE=a("li"),Jve=a("strong"),J4r=o("albert"),Y4r=o(" \u2014 "),KH=a("a"),K4r=o("TFAlbertForQuestionAnswering"),Z4r=o(" (ALBERT model)"),eEr=l(),TE=a("li"),Yve=a("strong"),oEr=o("bert"),rEr=o(" \u2014 "),ZH=a("a"),tEr=o("TFBertForQuestionAnswering"),aEr=o(" (BERT model)"),nEr=l(),ME=a("li"),Kve=a("strong"),sEr=o("camembert"),lEr=o(" \u2014 "),eU=a("a"),iEr=o("TFCamembertForQuestionAnswering"),dEr=o(" (CamemBERT model)"),cEr=l(),EE=a("li"),Zve=a("strong"),fEr=o("convbert"),mEr=o(" \u2014 "),oU=a("a"),gEr=o("TFConvBertForQuestionAnswering"),hEr=o(" (ConvBERT model)"),pEr=l(),CE=a("li"),eFe=a("strong"),uEr=o("deberta"),_Er=o(" \u2014 "),rU=a("a"),bEr=o("TFDebertaForQuestionAnswering"),vEr=o(" (DeBERTa model)"),FEr=l(),wE=a("li"),oFe=a("strong"),TEr=o("deberta-v2"),MEr=o(" \u2014 "),tU=a("a"),EEr=o("TFDebertaV2ForQuestionAnswering"),CEr=o(" (DeBERTa-v2 model)"),wEr=l(),AE=a("li"),rFe=a("strong"),AEr=o("distilbert"),yEr=o(" \u2014 "),aU=a("a"),LEr=o("TFDistilBertForQuestionAnswering"),xEr=o(" (DistilBERT model)"),$Er=l(),yE=a("li"),tFe=a("strong"),kEr=o("electra"),SEr=o(" \u2014 "),nU=a("a"),REr=o("TFElectraForQuestionAnswering"),BEr=o(" (ELECTRA model)"),PEr=l(),LE=a("li"),aFe=a("strong"),IEr=o("flaubert"),qEr=o(" \u2014 "),sU=a("a"),NEr=o("TFFlaubertForQuestionAnsweringSimple"),jEr=o(" (FlauBERT model)"),DEr=l(),xE=a("li"),nFe=a("strong"),GEr=o("funnel"),OEr=o(" \u2014 "),lU=a("a"),VEr=o("TFFunnelForQuestionAnswering"),XEr=o(" (Funnel Transformer model)"),zEr=l(),$E=a("li"),sFe=a("strong"),QEr=o("gptj"),WEr=o(" \u2014 "),iU=a("a"),HEr=o("TFGPTJForQuestionAnswering"),UEr=o(" (GPT-J model)"),JEr=l(),kE=a("li"),lFe=a("strong"),YEr=o("longformer"),KEr=o(" \u2014 "),dU=a("a"),ZEr=o("TFLongformerForQuestionAnswering"),e5r=o(" (Longformer model)"),o5r=l(),SE=a("li"),iFe=a("strong"),r5r=o("mobilebert"),t5r=o(" \u2014 "),cU=a("a"),a5r=o("TFMobileBertForQuestionAnswering"),n5r=o(" (MobileBERT model)"),s5r=l(),RE=a("li"),dFe=a("strong"),l5r=o("mpnet"),i5r=o(" \u2014 "),fU=a("a"),d5r=o("TFMPNetForQuestionAnswering"),c5r=o(" (MPNet model)"),f5r=l(),BE=a("li"),cFe=a("strong"),m5r=o("rembert"),g5r=o(" \u2014 "),mU=a("a"),h5r=o("TFRemBertForQuestionAnswering"),p5r=o(" (RemBERT model)"),u5r=l(),PE=a("li"),fFe=a("strong"),_5r=o("roberta"),b5r=o(" \u2014 "),gU=a("a"),v5r=o("TFRobertaForQuestionAnswering"),F5r=o(" (RoBERTa model)"),T5r=l(),IE=a("li"),mFe=a("strong"),M5r=o("roformer"),E5r=o(" \u2014 "),hU=a("a"),C5r=o("TFRoFormerForQuestionAnswering"),w5r=o(" (RoFormer model)"),A5r=l(),qE=a("li"),gFe=a("strong"),y5r=o("xlm"),L5r=o(" \u2014 "),pU=a("a"),x5r=o("TFXLMForQuestionAnsweringSimple"),$5r=o(" (XLM model)"),k5r=l(),NE=a("li"),hFe=a("strong"),S5r=o("xlm-roberta"),R5r=o(" \u2014 "),uU=a("a"),B5r=o("TFXLMRobertaForQuestionAnswering"),P5r=o(" (XLM-RoBERTa model)"),I5r=l(),jE=a("li"),pFe=a("strong"),q5r=o("xlnet"),N5r=o(" \u2014 "),_U=a("a"),j5r=o("TFXLNetForQuestionAnsweringSimple"),D5r=o(" (XLNet model)"),G5r=l(),F(DE.$$.fragment),hqe=l(),Fc=a("h2"),GE=a("a"),uFe=a("span"),F(N8.$$.fragment),O5r=l(),_Fe=a("span"),V5r=o("TFAutoModelForVision2Seq"),pqe=l(),dr=a("div"),F(j8.$$.fragment),X5r=l(),Tc=a("p"),z5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bU=a("a"),Q5r=o("from_pretrained()"),W5r=o(" class method or the "),vU=a("a"),H5r=o("from_config()"),U5r=o(` class
method.`),J5r=l(),D8=a("p"),Y5r=o("This class cannot be instantiated directly using "),bFe=a("code"),K5r=o("__init__()"),Z5r=o(" (throws an error)."),eCr=l(),qt=a("div"),F(G8.$$.fragment),oCr=l(),vFe=a("p"),rCr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tCr=l(),Mc=a("p"),aCr=o(`Note:
Loading a model from its configuration file does `),FFe=a("strong"),nCr=o("not"),sCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=a("a"),lCr=o("from_pretrained()"),iCr=o(" to load the model weights."),dCr=l(),F(OE.$$.fragment),cCr=l(),qr=a("div"),F(O8.$$.fragment),fCr=l(),TFe=a("p"),mCr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gCr=l(),fn=a("p"),hCr=o("The model class to instantiate is selected based on the "),MFe=a("code"),pCr=o("model_type"),uCr=o(` property of the config object (either
passed as an argument or loaded from `),EFe=a("code"),_Cr=o("pretrained_model_name_or_path"),bCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=a("code"),vCr=o("pretrained_model_name_or_path"),FCr=o(":"),TCr=l(),wFe=a("ul"),VE=a("li"),AFe=a("strong"),MCr=o("vision-encoder-decoder"),ECr=o(" \u2014 "),TU=a("a"),CCr=o("TFVisionEncoderDecoderModel"),wCr=o(" (Vision Encoder decoder model)"),ACr=l(),F(XE.$$.fragment),uqe=l(),Ec=a("h2"),zE=a("a"),yFe=a("span"),F(V8.$$.fragment),yCr=l(),LFe=a("span"),LCr=o("TFAutoModelForSpeechSeq2Seq"),_qe=l(),cr=a("div"),F(X8.$$.fragment),xCr=l(),Cc=a("p"),$Cr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),MU=a("a"),kCr=o("from_pretrained()"),SCr=o(" class method or the "),EU=a("a"),RCr=o("from_config()"),BCr=o(` class
method.`),PCr=l(),z8=a("p"),ICr=o("This class cannot be instantiated directly using "),xFe=a("code"),qCr=o("__init__()"),NCr=o(" (throws an error)."),jCr=l(),Nt=a("div"),F(Q8.$$.fragment),DCr=l(),$Fe=a("p"),GCr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),OCr=l(),wc=a("p"),VCr=o(`Note:
Loading a model from its configuration file does `),kFe=a("strong"),XCr=o("not"),zCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=a("a"),QCr=o("from_pretrained()"),WCr=o(" to load the model weights."),HCr=l(),F(QE.$$.fragment),UCr=l(),Nr=a("div"),F(W8.$$.fragment),JCr=l(),SFe=a("p"),YCr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),KCr=l(),mn=a("p"),ZCr=o("The model class to instantiate is selected based on the "),RFe=a("code"),ewr=o("model_type"),owr=o(` property of the config object (either
passed as an argument or loaded from `),BFe=a("code"),rwr=o("pretrained_model_name_or_path"),twr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=a("code"),awr=o("pretrained_model_name_or_path"),nwr=o(":"),swr=l(),IFe=a("ul"),WE=a("li"),qFe=a("strong"),lwr=o("speech_to_text"),iwr=o(" \u2014 "),wU=a("a"),dwr=o("TFSpeech2TextForConditionalGeneration"),cwr=o(" (Speech2Text model)"),fwr=l(),F(HE.$$.fragment),bqe=l(),Ac=a("h2"),UE=a("a"),NFe=a("span"),F(H8.$$.fragment),mwr=l(),jFe=a("span"),gwr=o("FlaxAutoModel"),vqe=l(),fr=a("div"),F(U8.$$.fragment),hwr=l(),yc=a("p"),pwr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),AU=a("a"),uwr=o("from_pretrained()"),_wr=o(" class method or the "),yU=a("a"),bwr=o("from_config()"),vwr=o(` class
method.`),Fwr=l(),J8=a("p"),Twr=o("This class cannot be instantiated directly using "),DFe=a("code"),Mwr=o("__init__()"),Ewr=o(" (throws an error)."),Cwr=l(),jt=a("div"),F(Y8.$$.fragment),wwr=l(),GFe=a("p"),Awr=o("Instantiates one of the base model classes of the library from a configuration."),ywr=l(),Lc=a("p"),Lwr=o(`Note:
Loading a model from its configuration file does `),OFe=a("strong"),xwr=o("not"),$wr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=a("a"),kwr=o("from_pretrained()"),Swr=o(" to load the model weights."),Rwr=l(),F(JE.$$.fragment),Bwr=l(),jr=a("div"),F(K8.$$.fragment),Pwr=l(),VFe=a("p"),Iwr=o("Instantiate one of the base model classes of the library from a pretrained model."),qwr=l(),gn=a("p"),Nwr=o("The model class to instantiate is selected based on the "),XFe=a("code"),jwr=o("model_type"),Dwr=o(` property of the config object (either
passed as an argument or loaded from `),zFe=a("code"),Gwr=o("pretrained_model_name_or_path"),Owr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=a("code"),Vwr=o("pretrained_model_name_or_path"),Xwr=o(":"),zwr=l(),re=a("ul"),YE=a("li"),WFe=a("strong"),Qwr=o("albert"),Wwr=o(" \u2014 "),xU=a("a"),Hwr=o("FlaxAlbertModel"),Uwr=o(" (ALBERT model)"),Jwr=l(),KE=a("li"),HFe=a("strong"),Ywr=o("bart"),Kwr=o(" \u2014 "),$U=a("a"),Zwr=o("FlaxBartModel"),eAr=o(" (BART model)"),oAr=l(),ZE=a("li"),UFe=a("strong"),rAr=o("beit"),tAr=o(" \u2014 "),kU=a("a"),aAr=o("FlaxBeitModel"),nAr=o(" (BEiT model)"),sAr=l(),e5=a("li"),JFe=a("strong"),lAr=o("bert"),iAr=o(" \u2014 "),SU=a("a"),dAr=o("FlaxBertModel"),cAr=o(" (BERT model)"),fAr=l(),o5=a("li"),YFe=a("strong"),mAr=o("big_bird"),gAr=o(" \u2014 "),RU=a("a"),hAr=o("FlaxBigBirdModel"),pAr=o(" (BigBird model)"),uAr=l(),r5=a("li"),KFe=a("strong"),_Ar=o("blenderbot"),bAr=o(" \u2014 "),BU=a("a"),vAr=o("FlaxBlenderbotModel"),FAr=o(" (Blenderbot model)"),TAr=l(),t5=a("li"),ZFe=a("strong"),MAr=o("blenderbot-small"),EAr=o(" \u2014 "),PU=a("a"),CAr=o("FlaxBlenderbotSmallModel"),wAr=o(" (BlenderbotSmall model)"),AAr=l(),a5=a("li"),eTe=a("strong"),yAr=o("clip"),LAr=o(" \u2014 "),IU=a("a"),xAr=o("FlaxCLIPModel"),$Ar=o(" (CLIP model)"),kAr=l(),n5=a("li"),oTe=a("strong"),SAr=o("distilbert"),RAr=o(" \u2014 "),qU=a("a"),BAr=o("FlaxDistilBertModel"),PAr=o(" (DistilBERT model)"),IAr=l(),s5=a("li"),rTe=a("strong"),qAr=o("electra"),NAr=o(" \u2014 "),NU=a("a"),jAr=o("FlaxElectraModel"),DAr=o(" (ELECTRA model)"),GAr=l(),l5=a("li"),tTe=a("strong"),OAr=o("gpt2"),VAr=o(" \u2014 "),jU=a("a"),XAr=o("FlaxGPT2Model"),zAr=o(" (OpenAI GPT-2 model)"),QAr=l(),i5=a("li"),aTe=a("strong"),WAr=o("gpt_neo"),HAr=o(" \u2014 "),DU=a("a"),UAr=o("FlaxGPTNeoModel"),JAr=o(" (GPT Neo model)"),YAr=l(),d5=a("li"),nTe=a("strong"),KAr=o("gptj"),ZAr=o(" \u2014 "),GU=a("a"),e6r=o("FlaxGPTJModel"),o6r=o(" (GPT-J model)"),r6r=l(),c5=a("li"),sTe=a("strong"),t6r=o("marian"),a6r=o(" \u2014 "),OU=a("a"),n6r=o("FlaxMarianModel"),s6r=o(" (Marian model)"),l6r=l(),f5=a("li"),lTe=a("strong"),i6r=o("mbart"),d6r=o(" \u2014 "),VU=a("a"),c6r=o("FlaxMBartModel"),f6r=o(" (mBART model)"),m6r=l(),m5=a("li"),iTe=a("strong"),g6r=o("mt5"),h6r=o(" \u2014 "),XU=a("a"),p6r=o("FlaxMT5Model"),u6r=o(" (mT5 model)"),_6r=l(),g5=a("li"),dTe=a("strong"),b6r=o("pegasus"),v6r=o(" \u2014 "),zU=a("a"),F6r=o("FlaxPegasusModel"),T6r=o(" (Pegasus model)"),M6r=l(),h5=a("li"),cTe=a("strong"),E6r=o("roberta"),C6r=o(" \u2014 "),QU=a("a"),w6r=o("FlaxRobertaModel"),A6r=o(" (RoBERTa model)"),y6r=l(),p5=a("li"),fTe=a("strong"),L6r=o("roformer"),x6r=o(" \u2014 "),WU=a("a"),$6r=o("FlaxRoFormerModel"),k6r=o(" (RoFormer model)"),S6r=l(),u5=a("li"),mTe=a("strong"),R6r=o("t5"),B6r=o(" \u2014 "),HU=a("a"),P6r=o("FlaxT5Model"),I6r=o(" (T5 model)"),q6r=l(),_5=a("li"),gTe=a("strong"),N6r=o("vision-text-dual-encoder"),j6r=o(" \u2014 "),UU=a("a"),D6r=o("FlaxVisionTextDualEncoderModel"),G6r=o(" (VisionTextDualEncoder model)"),O6r=l(),b5=a("li"),hTe=a("strong"),V6r=o("vit"),X6r=o(" \u2014 "),JU=a("a"),z6r=o("FlaxViTModel"),Q6r=o(" (ViT model)"),W6r=l(),v5=a("li"),pTe=a("strong"),H6r=o("wav2vec2"),U6r=o(" \u2014 "),YU=a("a"),J6r=o("FlaxWav2Vec2Model"),Y6r=o(" (Wav2Vec2 model)"),K6r=l(),F5=a("li"),uTe=a("strong"),Z6r=o("xglm"),e0r=o(" \u2014 "),KU=a("a"),o0r=o("FlaxXGLMModel"),r0r=o(" (XGLM model)"),t0r=l(),T5=a("li"),_Te=a("strong"),a0r=o("xlm-roberta"),n0r=o(" \u2014 "),ZU=a("a"),s0r=o("FlaxXLMRobertaModel"),l0r=o(" (XLM-RoBERTa model)"),i0r=l(),F(M5.$$.fragment),Fqe=l(),xc=a("h2"),E5=a("a"),bTe=a("span"),F(Z8.$$.fragment),d0r=l(),vTe=a("span"),c0r=o("FlaxAutoModelForCausalLM"),Tqe=l(),mr=a("div"),F(ex.$$.fragment),f0r=l(),$c=a("p"),m0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),eJ=a("a"),g0r=o("from_pretrained()"),h0r=o(" class method or the "),oJ=a("a"),p0r=o("from_config()"),u0r=o(` class
method.`),_0r=l(),ox=a("p"),b0r=o("This class cannot be instantiated directly using "),FTe=a("code"),v0r=o("__init__()"),F0r=o(" (throws an error)."),T0r=l(),Dt=a("div"),F(rx.$$.fragment),M0r=l(),TTe=a("p"),E0r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),C0r=l(),kc=a("p"),w0r=o(`Note:
Loading a model from its configuration file does `),MTe=a("strong"),A0r=o("not"),y0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=a("a"),L0r=o("from_pretrained()"),x0r=o(" to load the model weights."),$0r=l(),F(C5.$$.fragment),k0r=l(),Dr=a("div"),F(tx.$$.fragment),S0r=l(),ETe=a("p"),R0r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),B0r=l(),hn=a("p"),P0r=o("The model class to instantiate is selected based on the "),CTe=a("code"),I0r=o("model_type"),q0r=o(` property of the config object (either
passed as an argument or loaded from `),wTe=a("code"),N0r=o("pretrained_model_name_or_path"),j0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ATe=a("code"),D0r=o("pretrained_model_name_or_path"),G0r=o(":"),O0r=l(),ke=a("ul"),w5=a("li"),yTe=a("strong"),V0r=o("bart"),X0r=o(" \u2014 "),tJ=a("a"),z0r=o("FlaxBartForCausalLM"),Q0r=o(" (BART model)"),W0r=l(),A5=a("li"),LTe=a("strong"),H0r=o("bert"),U0r=o(" \u2014 "),aJ=a("a"),J0r=o("FlaxBertForCausalLM"),Y0r=o(" (BERT model)"),K0r=l(),y5=a("li"),xTe=a("strong"),Z0r=o("big_bird"),eyr=o(" \u2014 "),nJ=a("a"),oyr=o("FlaxBigBirdForCausalLM"),ryr=o(" (BigBird model)"),tyr=l(),L5=a("li"),$Te=a("strong"),ayr=o("electra"),nyr=o(" \u2014 "),sJ=a("a"),syr=o("FlaxElectraForCausalLM"),lyr=o(" (ELECTRA model)"),iyr=l(),x5=a("li"),kTe=a("strong"),dyr=o("gpt2"),cyr=o(" \u2014 "),lJ=a("a"),fyr=o("FlaxGPT2LMHeadModel"),myr=o(" (OpenAI GPT-2 model)"),gyr=l(),$5=a("li"),STe=a("strong"),hyr=o("gpt_neo"),pyr=o(" \u2014 "),iJ=a("a"),uyr=o("FlaxGPTNeoForCausalLM"),_yr=o(" (GPT Neo model)"),byr=l(),k5=a("li"),RTe=a("strong"),vyr=o("gptj"),Fyr=o(" \u2014 "),dJ=a("a"),Tyr=o("FlaxGPTJForCausalLM"),Myr=o(" (GPT-J model)"),Eyr=l(),S5=a("li"),BTe=a("strong"),Cyr=o("roberta"),wyr=o(" \u2014 "),cJ=a("a"),Ayr=o("FlaxRobertaForCausalLM"),yyr=o(" (RoBERTa model)"),Lyr=l(),R5=a("li"),PTe=a("strong"),xyr=o("xglm"),$yr=o(" \u2014 "),fJ=a("a"),kyr=o("FlaxXGLMForCausalLM"),Syr=o(" (XGLM model)"),Ryr=l(),F(B5.$$.fragment),Mqe=l(),Sc=a("h2"),P5=a("a"),ITe=a("span"),F(ax.$$.fragment),Byr=l(),qTe=a("span"),Pyr=o("FlaxAutoModelForPreTraining"),Eqe=l(),gr=a("div"),F(nx.$$.fragment),Iyr=l(),Rc=a("p"),qyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),mJ=a("a"),Nyr=o("from_pretrained()"),jyr=o(" class method or the "),gJ=a("a"),Dyr=o("from_config()"),Gyr=o(` class
method.`),Oyr=l(),sx=a("p"),Vyr=o("This class cannot be instantiated directly using "),NTe=a("code"),Xyr=o("__init__()"),zyr=o(" (throws an error)."),Qyr=l(),Gt=a("div"),F(lx.$$.fragment),Wyr=l(),jTe=a("p"),Hyr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Uyr=l(),Bc=a("p"),Jyr=o(`Note:
Loading a model from its configuration file does `),DTe=a("strong"),Yyr=o("not"),Kyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=a("a"),Zyr=o("from_pretrained()"),eLr=o(" to load the model weights."),oLr=l(),F(I5.$$.fragment),rLr=l(),Gr=a("div"),F(ix.$$.fragment),tLr=l(),GTe=a("p"),aLr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),nLr=l(),pn=a("p"),sLr=o("The model class to instantiate is selected based on the "),OTe=a("code"),lLr=o("model_type"),iLr=o(` property of the config object (either
passed as an argument or loaded from `),VTe=a("code"),dLr=o("pretrained_model_name_or_path"),cLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=a("code"),fLr=o("pretrained_model_name_or_path"),mLr=o(":"),gLr=l(),Me=a("ul"),q5=a("li"),zTe=a("strong"),hLr=o("albert"),pLr=o(" \u2014 "),pJ=a("a"),uLr=o("FlaxAlbertForPreTraining"),_Lr=o(" (ALBERT model)"),bLr=l(),N5=a("li"),QTe=a("strong"),vLr=o("bart"),FLr=o(" \u2014 "),uJ=a("a"),TLr=o("FlaxBartForConditionalGeneration"),MLr=o(" (BART model)"),ELr=l(),j5=a("li"),WTe=a("strong"),CLr=o("bert"),wLr=o(" \u2014 "),_J=a("a"),ALr=o("FlaxBertForPreTraining"),yLr=o(" (BERT model)"),LLr=l(),D5=a("li"),HTe=a("strong"),xLr=o("big_bird"),$Lr=o(" \u2014 "),bJ=a("a"),kLr=o("FlaxBigBirdForPreTraining"),SLr=o(" (BigBird model)"),RLr=l(),G5=a("li"),UTe=a("strong"),BLr=o("electra"),PLr=o(" \u2014 "),vJ=a("a"),ILr=o("FlaxElectraForPreTraining"),qLr=o(" (ELECTRA model)"),NLr=l(),O5=a("li"),JTe=a("strong"),jLr=o("mbart"),DLr=o(" \u2014 "),FJ=a("a"),GLr=o("FlaxMBartForConditionalGeneration"),OLr=o(" (mBART model)"),VLr=l(),V5=a("li"),YTe=a("strong"),XLr=o("mt5"),zLr=o(" \u2014 "),TJ=a("a"),QLr=o("FlaxMT5ForConditionalGeneration"),WLr=o(" (mT5 model)"),HLr=l(),X5=a("li"),KTe=a("strong"),ULr=o("roberta"),JLr=o(" \u2014 "),MJ=a("a"),YLr=o("FlaxRobertaForMaskedLM"),KLr=o(" (RoBERTa model)"),ZLr=l(),z5=a("li"),ZTe=a("strong"),e8r=o("roformer"),o8r=o(" \u2014 "),EJ=a("a"),r8r=o("FlaxRoFormerForMaskedLM"),t8r=o(" (RoFormer model)"),a8r=l(),Q5=a("li"),e7e=a("strong"),n8r=o("t5"),s8r=o(" \u2014 "),CJ=a("a"),l8r=o("FlaxT5ForConditionalGeneration"),i8r=o(" (T5 model)"),d8r=l(),W5=a("li"),o7e=a("strong"),c8r=o("wav2vec2"),f8r=o(" \u2014 "),wJ=a("a"),m8r=o("FlaxWav2Vec2ForPreTraining"),g8r=o(" (Wav2Vec2 model)"),h8r=l(),H5=a("li"),r7e=a("strong"),p8r=o("xlm-roberta"),u8r=o(" \u2014 "),AJ=a("a"),_8r=o("FlaxXLMRobertaForMaskedLM"),b8r=o(" (XLM-RoBERTa model)"),v8r=l(),F(U5.$$.fragment),Cqe=l(),Pc=a("h2"),J5=a("a"),t7e=a("span"),F(dx.$$.fragment),F8r=l(),a7e=a("span"),T8r=o("FlaxAutoModelForMaskedLM"),wqe=l(),hr=a("div"),F(cx.$$.fragment),M8r=l(),Ic=a("p"),E8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),yJ=a("a"),C8r=o("from_pretrained()"),w8r=o(" class method or the "),LJ=a("a"),A8r=o("from_config()"),y8r=o(` class
method.`),L8r=l(),fx=a("p"),x8r=o("This class cannot be instantiated directly using "),n7e=a("code"),$8r=o("__init__()"),k8r=o(" (throws an error)."),S8r=l(),Ot=a("div"),F(mx.$$.fragment),R8r=l(),s7e=a("p"),B8r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),P8r=l(),qc=a("p"),I8r=o(`Note:
Loading a model from its configuration file does `),l7e=a("strong"),q8r=o("not"),N8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=a("a"),j8r=o("from_pretrained()"),D8r=o(" to load the model weights."),G8r=l(),F(Y5.$$.fragment),O8r=l(),Or=a("div"),F(gx.$$.fragment),V8r=l(),i7e=a("p"),X8r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),z8r=l(),un=a("p"),Q8r=o("The model class to instantiate is selected based on the "),d7e=a("code"),W8r=o("model_type"),H8r=o(` property of the config object (either
passed as an argument or loaded from `),c7e=a("code"),U8r=o("pretrained_model_name_or_path"),J8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f7e=a("code"),Y8r=o("pretrained_model_name_or_path"),K8r=o(":"),Z8r=l(),Le=a("ul"),K5=a("li"),m7e=a("strong"),exr=o("albert"),oxr=o(" \u2014 "),$J=a("a"),rxr=o("FlaxAlbertForMaskedLM"),txr=o(" (ALBERT model)"),axr=l(),Z5=a("li"),g7e=a("strong"),nxr=o("bart"),sxr=o(" \u2014 "),kJ=a("a"),lxr=o("FlaxBartForConditionalGeneration"),ixr=o(" (BART model)"),dxr=l(),eC=a("li"),h7e=a("strong"),cxr=o("bert"),fxr=o(" \u2014 "),SJ=a("a"),mxr=o("FlaxBertForMaskedLM"),gxr=o(" (BERT model)"),hxr=l(),oC=a("li"),p7e=a("strong"),pxr=o("big_bird"),uxr=o(" \u2014 "),RJ=a("a"),_xr=o("FlaxBigBirdForMaskedLM"),bxr=o(" (BigBird model)"),vxr=l(),rC=a("li"),u7e=a("strong"),Fxr=o("distilbert"),Txr=o(" \u2014 "),BJ=a("a"),Mxr=o("FlaxDistilBertForMaskedLM"),Exr=o(" (DistilBERT model)"),Cxr=l(),tC=a("li"),_7e=a("strong"),wxr=o("electra"),Axr=o(" \u2014 "),PJ=a("a"),yxr=o("FlaxElectraForMaskedLM"),Lxr=o(" (ELECTRA model)"),xxr=l(),aC=a("li"),b7e=a("strong"),$xr=o("mbart"),kxr=o(" \u2014 "),IJ=a("a"),Sxr=o("FlaxMBartForConditionalGeneration"),Rxr=o(" (mBART model)"),Bxr=l(),nC=a("li"),v7e=a("strong"),Pxr=o("roberta"),Ixr=o(" \u2014 "),qJ=a("a"),qxr=o("FlaxRobertaForMaskedLM"),Nxr=o(" (RoBERTa model)"),jxr=l(),sC=a("li"),F7e=a("strong"),Dxr=o("roformer"),Gxr=o(" \u2014 "),NJ=a("a"),Oxr=o("FlaxRoFormerForMaskedLM"),Vxr=o(" (RoFormer model)"),Xxr=l(),lC=a("li"),T7e=a("strong"),zxr=o("xlm-roberta"),Qxr=o(" \u2014 "),jJ=a("a"),Wxr=o("FlaxXLMRobertaForMaskedLM"),Hxr=o(" (XLM-RoBERTa model)"),Uxr=l(),F(iC.$$.fragment),Aqe=l(),Nc=a("h2"),dC=a("a"),M7e=a("span"),F(hx.$$.fragment),Jxr=l(),E7e=a("span"),Yxr=o("FlaxAutoModelForSeq2SeqLM"),yqe=l(),pr=a("div"),F(px.$$.fragment),Kxr=l(),jc=a("p"),Zxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),DJ=a("a"),e9r=o("from_pretrained()"),o9r=o(" class method or the "),GJ=a("a"),r9r=o("from_config()"),t9r=o(` class
method.`),a9r=l(),ux=a("p"),n9r=o("This class cannot be instantiated directly using "),C7e=a("code"),s9r=o("__init__()"),l9r=o(" (throws an error)."),i9r=l(),Vt=a("div"),F(_x.$$.fragment),d9r=l(),w7e=a("p"),c9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),f9r=l(),Dc=a("p"),m9r=o(`Note:
Loading a model from its configuration file does `),A7e=a("strong"),g9r=o("not"),h9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=a("a"),p9r=o("from_pretrained()"),u9r=o(" to load the model weights."),_9r=l(),F(cC.$$.fragment),b9r=l(),Vr=a("div"),F(bx.$$.fragment),v9r=l(),y7e=a("p"),F9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),T9r=l(),_n=a("p"),M9r=o("The model class to instantiate is selected based on the "),L7e=a("code"),E9r=o("model_type"),C9r=o(` property of the config object (either
passed as an argument or loaded from `),x7e=a("code"),w9r=o("pretrained_model_name_or_path"),A9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$7e=a("code"),y9r=o("pretrained_model_name_or_path"),L9r=o(":"),x9r=l(),Se=a("ul"),fC=a("li"),k7e=a("strong"),$9r=o("bart"),k9r=o(" \u2014 "),VJ=a("a"),S9r=o("FlaxBartForConditionalGeneration"),R9r=o(" (BART model)"),B9r=l(),mC=a("li"),S7e=a("strong"),P9r=o("blenderbot"),I9r=o(" \u2014 "),XJ=a("a"),q9r=o("FlaxBlenderbotForConditionalGeneration"),N9r=o(" (Blenderbot model)"),j9r=l(),gC=a("li"),R7e=a("strong"),D9r=o("blenderbot-small"),G9r=o(" \u2014 "),zJ=a("a"),O9r=o("FlaxBlenderbotSmallForConditionalGeneration"),V9r=o(" (BlenderbotSmall model)"),X9r=l(),hC=a("li"),B7e=a("strong"),z9r=o("encoder-decoder"),Q9r=o(" \u2014 "),QJ=a("a"),W9r=o("FlaxEncoderDecoderModel"),H9r=o(" (Encoder decoder model)"),U9r=l(),pC=a("li"),P7e=a("strong"),J9r=o("marian"),Y9r=o(" \u2014 "),WJ=a("a"),K9r=o("FlaxMarianMTModel"),Z9r=o(" (Marian model)"),e$r=l(),uC=a("li"),I7e=a("strong"),o$r=o("mbart"),r$r=o(" \u2014 "),HJ=a("a"),t$r=o("FlaxMBartForConditionalGeneration"),a$r=o(" (mBART model)"),n$r=l(),_C=a("li"),q7e=a("strong"),s$r=o("mt5"),l$r=o(" \u2014 "),UJ=a("a"),i$r=o("FlaxMT5ForConditionalGeneration"),d$r=o(" (mT5 model)"),c$r=l(),bC=a("li"),N7e=a("strong"),f$r=o("pegasus"),m$r=o(" \u2014 "),JJ=a("a"),g$r=o("FlaxPegasusForConditionalGeneration"),h$r=o(" (Pegasus model)"),p$r=l(),vC=a("li"),j7e=a("strong"),u$r=o("t5"),_$r=o(" \u2014 "),YJ=a("a"),b$r=o("FlaxT5ForConditionalGeneration"),v$r=o(" (T5 model)"),F$r=l(),F(FC.$$.fragment),Lqe=l(),Gc=a("h2"),TC=a("a"),D7e=a("span"),F(vx.$$.fragment),T$r=l(),G7e=a("span"),M$r=o("FlaxAutoModelForSequenceClassification"),xqe=l(),ur=a("div"),F(Fx.$$.fragment),E$r=l(),Oc=a("p"),C$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),KJ=a("a"),w$r=o("from_pretrained()"),A$r=o(" class method or the "),ZJ=a("a"),y$r=o("from_config()"),L$r=o(` class
method.`),x$r=l(),Tx=a("p"),$$r=o("This class cannot be instantiated directly using "),O7e=a("code"),k$r=o("__init__()"),S$r=o(" (throws an error)."),R$r=l(),Xt=a("div"),F(Mx.$$.fragment),B$r=l(),V7e=a("p"),P$r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),I$r=l(),Vc=a("p"),q$r=o(`Note:
Loading a model from its configuration file does `),X7e=a("strong"),N$r=o("not"),j$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=a("a"),D$r=o("from_pretrained()"),G$r=o(" to load the model weights."),O$r=l(),F(MC.$$.fragment),V$r=l(),Xr=a("div"),F(Ex.$$.fragment),X$r=l(),z7e=a("p"),z$r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Q$r=l(),bn=a("p"),W$r=o("The model class to instantiate is selected based on the "),Q7e=a("code"),H$r=o("model_type"),U$r=o(` property of the config object (either
passed as an argument or loaded from `),W7e=a("code"),J$r=o("pretrained_model_name_or_path"),Y$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H7e=a("code"),K$r=o("pretrained_model_name_or_path"),Z$r=o(":"),ekr=l(),xe=a("ul"),EC=a("li"),U7e=a("strong"),okr=o("albert"),rkr=o(" \u2014 "),oY=a("a"),tkr=o("FlaxAlbertForSequenceClassification"),akr=o(" (ALBERT model)"),nkr=l(),CC=a("li"),J7e=a("strong"),skr=o("bart"),lkr=o(" \u2014 "),rY=a("a"),ikr=o("FlaxBartForSequenceClassification"),dkr=o(" (BART model)"),ckr=l(),wC=a("li"),Y7e=a("strong"),fkr=o("bert"),mkr=o(" \u2014 "),tY=a("a"),gkr=o("FlaxBertForSequenceClassification"),hkr=o(" (BERT model)"),pkr=l(),AC=a("li"),K7e=a("strong"),ukr=o("big_bird"),_kr=o(" \u2014 "),aY=a("a"),bkr=o("FlaxBigBirdForSequenceClassification"),vkr=o(" (BigBird model)"),Fkr=l(),yC=a("li"),Z7e=a("strong"),Tkr=o("distilbert"),Mkr=o(" \u2014 "),nY=a("a"),Ekr=o("FlaxDistilBertForSequenceClassification"),Ckr=o(" (DistilBERT model)"),wkr=l(),LC=a("li"),eMe=a("strong"),Akr=o("electra"),ykr=o(" \u2014 "),sY=a("a"),Lkr=o("FlaxElectraForSequenceClassification"),xkr=o(" (ELECTRA model)"),$kr=l(),xC=a("li"),oMe=a("strong"),kkr=o("mbart"),Skr=o(" \u2014 "),lY=a("a"),Rkr=o("FlaxMBartForSequenceClassification"),Bkr=o(" (mBART model)"),Pkr=l(),$C=a("li"),rMe=a("strong"),Ikr=o("roberta"),qkr=o(" \u2014 "),iY=a("a"),Nkr=o("FlaxRobertaForSequenceClassification"),jkr=o(" (RoBERTa model)"),Dkr=l(),kC=a("li"),tMe=a("strong"),Gkr=o("roformer"),Okr=o(" \u2014 "),dY=a("a"),Vkr=o("FlaxRoFormerForSequenceClassification"),Xkr=o(" (RoFormer model)"),zkr=l(),SC=a("li"),aMe=a("strong"),Qkr=o("xlm-roberta"),Wkr=o(" \u2014 "),cY=a("a"),Hkr=o("FlaxXLMRobertaForSequenceClassification"),Ukr=o(" (XLM-RoBERTa model)"),Jkr=l(),F(RC.$$.fragment),$qe=l(),Xc=a("h2"),BC=a("a"),nMe=a("span"),F(Cx.$$.fragment),Ykr=l(),sMe=a("span"),Kkr=o("FlaxAutoModelForQuestionAnswering"),kqe=l(),_r=a("div"),F(wx.$$.fragment),Zkr=l(),zc=a("p"),eSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),fY=a("a"),oSr=o("from_pretrained()"),rSr=o(" class method or the "),mY=a("a"),tSr=o("from_config()"),aSr=o(` class
method.`),nSr=l(),Ax=a("p"),sSr=o("This class cannot be instantiated directly using "),lMe=a("code"),lSr=o("__init__()"),iSr=o(" (throws an error)."),dSr=l(),zt=a("div"),F(yx.$$.fragment),cSr=l(),iMe=a("p"),fSr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mSr=l(),Qc=a("p"),gSr=o(`Note:
Loading a model from its configuration file does `),dMe=a("strong"),hSr=o("not"),pSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=a("a"),uSr=o("from_pretrained()"),_Sr=o(" to load the model weights."),bSr=l(),F(PC.$$.fragment),vSr=l(),zr=a("div"),F(Lx.$$.fragment),FSr=l(),cMe=a("p"),TSr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),MSr=l(),vn=a("p"),ESr=o("The model class to instantiate is selected based on the "),fMe=a("code"),CSr=o("model_type"),wSr=o(` property of the config object (either
passed as an argument or loaded from `),mMe=a("code"),ASr=o("pretrained_model_name_or_path"),ySr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gMe=a("code"),LSr=o("pretrained_model_name_or_path"),xSr=o(":"),$Sr=l(),$e=a("ul"),IC=a("li"),hMe=a("strong"),kSr=o("albert"),SSr=o(" \u2014 "),hY=a("a"),RSr=o("FlaxAlbertForQuestionAnswering"),BSr=o(" (ALBERT model)"),PSr=l(),qC=a("li"),pMe=a("strong"),ISr=o("bart"),qSr=o(" \u2014 "),pY=a("a"),NSr=o("FlaxBartForQuestionAnswering"),jSr=o(" (BART model)"),DSr=l(),NC=a("li"),uMe=a("strong"),GSr=o("bert"),OSr=o(" \u2014 "),uY=a("a"),VSr=o("FlaxBertForQuestionAnswering"),XSr=o(" (BERT model)"),zSr=l(),jC=a("li"),_Me=a("strong"),QSr=o("big_bird"),WSr=o(" \u2014 "),_Y=a("a"),HSr=o("FlaxBigBirdForQuestionAnswering"),USr=o(" (BigBird model)"),JSr=l(),DC=a("li"),bMe=a("strong"),YSr=o("distilbert"),KSr=o(" \u2014 "),bY=a("a"),ZSr=o("FlaxDistilBertForQuestionAnswering"),eRr=o(" (DistilBERT model)"),oRr=l(),GC=a("li"),vMe=a("strong"),rRr=o("electra"),tRr=o(" \u2014 "),vY=a("a"),aRr=o("FlaxElectraForQuestionAnswering"),nRr=o(" (ELECTRA model)"),sRr=l(),OC=a("li"),FMe=a("strong"),lRr=o("mbart"),iRr=o(" \u2014 "),FY=a("a"),dRr=o("FlaxMBartForQuestionAnswering"),cRr=o(" (mBART model)"),fRr=l(),VC=a("li"),TMe=a("strong"),mRr=o("roberta"),gRr=o(" \u2014 "),TY=a("a"),hRr=o("FlaxRobertaForQuestionAnswering"),pRr=o(" (RoBERTa model)"),uRr=l(),XC=a("li"),MMe=a("strong"),_Rr=o("roformer"),bRr=o(" \u2014 "),MY=a("a"),vRr=o("FlaxRoFormerForQuestionAnswering"),FRr=o(" (RoFormer model)"),TRr=l(),zC=a("li"),EMe=a("strong"),MRr=o("xlm-roberta"),ERr=o(" \u2014 "),EY=a("a"),CRr=o("FlaxXLMRobertaForQuestionAnswering"),wRr=o(" (XLM-RoBERTa model)"),ARr=l(),F(QC.$$.fragment),Sqe=l(),Wc=a("h2"),WC=a("a"),CMe=a("span"),F(xx.$$.fragment),yRr=l(),wMe=a("span"),LRr=o("FlaxAutoModelForTokenClassification"),Rqe=l(),br=a("div"),F($x.$$.fragment),xRr=l(),Hc=a("p"),$Rr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),CY=a("a"),kRr=o("from_pretrained()"),SRr=o(" class method or the "),wY=a("a"),RRr=o("from_config()"),BRr=o(` class
method.`),PRr=l(),kx=a("p"),IRr=o("This class cannot be instantiated directly using "),AMe=a("code"),qRr=o("__init__()"),NRr=o(" (throws an error)."),jRr=l(),Qt=a("div"),F(Sx.$$.fragment),DRr=l(),yMe=a("p"),GRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ORr=l(),Uc=a("p"),VRr=o(`Note:
Loading a model from its configuration file does `),LMe=a("strong"),XRr=o("not"),zRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AY=a("a"),QRr=o("from_pretrained()"),WRr=o(" to load the model weights."),HRr=l(),F(HC.$$.fragment),URr=l(),Qr=a("div"),F(Rx.$$.fragment),JRr=l(),xMe=a("p"),YRr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),KRr=l(),Fn=a("p"),ZRr=o("The model class to instantiate is selected based on the "),$Me=a("code"),eBr=o("model_type"),oBr=o(` property of the config object (either
passed as an argument or loaded from `),kMe=a("code"),rBr=o("pretrained_model_name_or_path"),tBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SMe=a("code"),aBr=o("pretrained_model_name_or_path"),nBr=o(":"),sBr=l(),De=a("ul"),UC=a("li"),RMe=a("strong"),lBr=o("albert"),iBr=o(" \u2014 "),yY=a("a"),dBr=o("FlaxAlbertForTokenClassification"),cBr=o(" (ALBERT model)"),fBr=l(),JC=a("li"),BMe=a("strong"),mBr=o("bert"),gBr=o(" \u2014 "),LY=a("a"),hBr=o("FlaxBertForTokenClassification"),pBr=o(" (BERT model)"),uBr=l(),YC=a("li"),PMe=a("strong"),_Br=o("big_bird"),bBr=o(" \u2014 "),xY=a("a"),vBr=o("FlaxBigBirdForTokenClassification"),FBr=o(" (BigBird model)"),TBr=l(),KC=a("li"),IMe=a("strong"),MBr=o("distilbert"),EBr=o(" \u2014 "),$Y=a("a"),CBr=o("FlaxDistilBertForTokenClassification"),wBr=o(" (DistilBERT model)"),ABr=l(),ZC=a("li"),qMe=a("strong"),yBr=o("electra"),LBr=o(" \u2014 "),kY=a("a"),xBr=o("FlaxElectraForTokenClassification"),$Br=o(" (ELECTRA model)"),kBr=l(),ew=a("li"),NMe=a("strong"),SBr=o("roberta"),RBr=o(" \u2014 "),SY=a("a"),BBr=o("FlaxRobertaForTokenClassification"),PBr=o(" (RoBERTa model)"),IBr=l(),ow=a("li"),jMe=a("strong"),qBr=o("roformer"),NBr=o(" \u2014 "),RY=a("a"),jBr=o("FlaxRoFormerForTokenClassification"),DBr=o(" (RoFormer model)"),GBr=l(),rw=a("li"),DMe=a("strong"),OBr=o("xlm-roberta"),VBr=o(" \u2014 "),BY=a("a"),XBr=o("FlaxXLMRobertaForTokenClassification"),zBr=o(" (XLM-RoBERTa model)"),QBr=l(),F(tw.$$.fragment),Bqe=l(),Jc=a("h2"),aw=a("a"),GMe=a("span"),F(Bx.$$.fragment),WBr=l(),OMe=a("span"),HBr=o("FlaxAutoModelForMultipleChoice"),Pqe=l(),vr=a("div"),F(Px.$$.fragment),UBr=l(),Yc=a("p"),JBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),PY=a("a"),YBr=o("from_pretrained()"),KBr=o(" class method or the "),IY=a("a"),ZBr=o("from_config()"),ePr=o(` class
method.`),oPr=l(),Ix=a("p"),rPr=o("This class cannot be instantiated directly using "),VMe=a("code"),tPr=o("__init__()"),aPr=o(" (throws an error)."),nPr=l(),Wt=a("div"),F(qx.$$.fragment),sPr=l(),XMe=a("p"),lPr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),iPr=l(),Kc=a("p"),dPr=o(`Note:
Loading a model from its configuration file does `),zMe=a("strong"),cPr=o("not"),fPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=a("a"),mPr=o("from_pretrained()"),gPr=o(" to load the model weights."),hPr=l(),F(nw.$$.fragment),pPr=l(),Wr=a("div"),F(Nx.$$.fragment),uPr=l(),QMe=a("p"),_Pr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),bPr=l(),Tn=a("p"),vPr=o("The model class to instantiate is selected based on the "),WMe=a("code"),FPr=o("model_type"),TPr=o(` property of the config object (either
passed as an argument or loaded from `),HMe=a("code"),MPr=o("pretrained_model_name_or_path"),EPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UMe=a("code"),CPr=o("pretrained_model_name_or_path"),wPr=o(":"),APr=l(),Ge=a("ul"),sw=a("li"),JMe=a("strong"),yPr=o("albert"),LPr=o(" \u2014 "),NY=a("a"),xPr=o("FlaxAlbertForMultipleChoice"),$Pr=o(" (ALBERT model)"),kPr=l(),lw=a("li"),YMe=a("strong"),SPr=o("bert"),RPr=o(" \u2014 "),jY=a("a"),BPr=o("FlaxBertForMultipleChoice"),PPr=o(" (BERT model)"),IPr=l(),iw=a("li"),KMe=a("strong"),qPr=o("big_bird"),NPr=o(" \u2014 "),DY=a("a"),jPr=o("FlaxBigBirdForMultipleChoice"),DPr=o(" (BigBird model)"),GPr=l(),dw=a("li"),ZMe=a("strong"),OPr=o("distilbert"),VPr=o(" \u2014 "),GY=a("a"),XPr=o("FlaxDistilBertForMultipleChoice"),zPr=o(" (DistilBERT model)"),QPr=l(),cw=a("li"),e4e=a("strong"),WPr=o("electra"),HPr=o(" \u2014 "),OY=a("a"),UPr=o("FlaxElectraForMultipleChoice"),JPr=o(" (ELECTRA model)"),YPr=l(),fw=a("li"),o4e=a("strong"),KPr=o("roberta"),ZPr=o(" \u2014 "),VY=a("a"),eIr=o("FlaxRobertaForMultipleChoice"),oIr=o(" (RoBERTa model)"),rIr=l(),mw=a("li"),r4e=a("strong"),tIr=o("roformer"),aIr=o(" \u2014 "),XY=a("a"),nIr=o("FlaxRoFormerForMultipleChoice"),sIr=o(" (RoFormer model)"),lIr=l(),gw=a("li"),t4e=a("strong"),iIr=o("xlm-roberta"),dIr=o(" \u2014 "),zY=a("a"),cIr=o("FlaxXLMRobertaForMultipleChoice"),fIr=o(" (XLM-RoBERTa model)"),mIr=l(),F(hw.$$.fragment),Iqe=l(),Zc=a("h2"),pw=a("a"),a4e=a("span"),F(jx.$$.fragment),gIr=l(),n4e=a("span"),hIr=o("FlaxAutoModelForNextSentencePrediction"),qqe=l(),Fr=a("div"),F(Dx.$$.fragment),pIr=l(),ef=a("p"),uIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),QY=a("a"),_Ir=o("from_pretrained()"),bIr=o(" class method or the "),WY=a("a"),vIr=o("from_config()"),FIr=o(` class
method.`),TIr=l(),Gx=a("p"),MIr=o("This class cannot be instantiated directly using "),s4e=a("code"),EIr=o("__init__()"),CIr=o(" (throws an error)."),wIr=l(),Ht=a("div"),F(Ox.$$.fragment),AIr=l(),l4e=a("p"),yIr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),LIr=l(),of=a("p"),xIr=o(`Note:
Loading a model from its configuration file does `),i4e=a("strong"),$Ir=o("not"),kIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=a("a"),SIr=o("from_pretrained()"),RIr=o(" to load the model weights."),BIr=l(),F(uw.$$.fragment),PIr=l(),Hr=a("div"),F(Vx.$$.fragment),IIr=l(),d4e=a("p"),qIr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),NIr=l(),Mn=a("p"),jIr=o("The model class to instantiate is selected based on the "),c4e=a("code"),DIr=o("model_type"),GIr=o(` property of the config object (either
passed as an argument or loaded from `),f4e=a("code"),OIr=o("pretrained_model_name_or_path"),VIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m4e=a("code"),XIr=o("pretrained_model_name_or_path"),zIr=o(":"),QIr=l(),g4e=a("ul"),_w=a("li"),h4e=a("strong"),WIr=o("bert"),HIr=o(" \u2014 "),UY=a("a"),UIr=o("FlaxBertForNextSentencePrediction"),JIr=o(" (BERT model)"),YIr=l(),F(bw.$$.fragment),Nqe=l(),rf=a("h2"),vw=a("a"),p4e=a("span"),F(Xx.$$.fragment),KIr=l(),u4e=a("span"),ZIr=o("FlaxAutoModelForImageClassification"),jqe=l(),Tr=a("div"),F(zx.$$.fragment),eqr=l(),tf=a("p"),oqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),JY=a("a"),rqr=o("from_pretrained()"),tqr=o(" class method or the "),YY=a("a"),aqr=o("from_config()"),nqr=o(` class
method.`),sqr=l(),Qx=a("p"),lqr=o("This class cannot be instantiated directly using "),_4e=a("code"),iqr=o("__init__()"),dqr=o(" (throws an error)."),cqr=l(),Ut=a("div"),F(Wx.$$.fragment),fqr=l(),b4e=a("p"),mqr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gqr=l(),af=a("p"),hqr=o(`Note:
Loading a model from its configuration file does `),v4e=a("strong"),pqr=o("not"),uqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KY=a("a"),_qr=o("from_pretrained()"),bqr=o(" to load the model weights."),vqr=l(),F(Fw.$$.fragment),Fqr=l(),Ur=a("div"),F(Hx.$$.fragment),Tqr=l(),F4e=a("p"),Mqr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Eqr=l(),En=a("p"),Cqr=o("The model class to instantiate is selected based on the "),T4e=a("code"),wqr=o("model_type"),Aqr=o(` property of the config object (either
passed as an argument or loaded from `),M4e=a("code"),yqr=o("pretrained_model_name_or_path"),Lqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=a("code"),xqr=o("pretrained_model_name_or_path"),$qr=o(":"),kqr=l(),Ux=a("ul"),Tw=a("li"),C4e=a("strong"),Sqr=o("beit"),Rqr=o(" \u2014 "),ZY=a("a"),Bqr=o("FlaxBeitForImageClassification"),Pqr=o(" (BEiT model)"),Iqr=l(),Mw=a("li"),w4e=a("strong"),qqr=o("vit"),Nqr=o(" \u2014 "),eK=a("a"),jqr=o("FlaxViTForImageClassification"),Dqr=o(" (ViT model)"),Gqr=l(),F(Ew.$$.fragment),Dqe=l(),nf=a("h2"),Cw=a("a"),A4e=a("span"),F(Jx.$$.fragment),Oqr=l(),y4e=a("span"),Vqr=o("FlaxAutoModelForVision2Seq"),Gqe=l(),Mr=a("div"),F(Yx.$$.fragment),Xqr=l(),sf=a("p"),zqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oK=a("a"),Qqr=o("from_pretrained()"),Wqr=o(" class method or the "),rK=a("a"),Hqr=o("from_config()"),Uqr=o(` class
method.`),Jqr=l(),Kx=a("p"),Yqr=o("This class cannot be instantiated directly using "),L4e=a("code"),Kqr=o("__init__()"),Zqr=o(" (throws an error)."),eNr=l(),Jt=a("div"),F(Zx.$$.fragment),oNr=l(),x4e=a("p"),rNr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tNr=l(),lf=a("p"),aNr=o(`Note:
Loading a model from its configuration file does `),$4e=a("strong"),nNr=o("not"),sNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tK=a("a"),lNr=o("from_pretrained()"),iNr=o(" to load the model weights."),dNr=l(),F(ww.$$.fragment),cNr=l(),Jr=a("div"),F(e9.$$.fragment),fNr=l(),k4e=a("p"),mNr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gNr=l(),Cn=a("p"),hNr=o("The model class to instantiate is selected based on the "),S4e=a("code"),pNr=o("model_type"),uNr=o(` property of the config object (either
passed as an argument or loaded from `),R4e=a("code"),_Nr=o("pretrained_model_name_or_path"),bNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B4e=a("code"),vNr=o("pretrained_model_name_or_path"),FNr=o(":"),TNr=l(),P4e=a("ul"),Aw=a("li"),I4e=a("strong"),MNr=o("vision-encoder-decoder"),ENr=o(" \u2014 "),aK=a("a"),CNr=o("FlaxVisionEncoderDecoderModel"),wNr=o(" (Vision Encoder decoder model)"),ANr=l(),F(yw.$$.fragment),this.h()},l(f){const _=Z6t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var o9=s(p);m=n(o9,"A",{id:!0,class:!0,href:!0});var q4e=s(m);u=n(q4e,"SPAN",{});var N4e=s(u);T(d.$$.fragment,N4e),N4e.forEach(t),q4e.forEach(t),h=i(o9),Mo=n(o9,"SPAN",{});var j4e=s(Mo);li=r(j4e,"Auto Classes"),j4e.forEach(t),o9.forEach(t),mf=i(f),et=n(f,"P",{});var r9=s(et);ii=r(r9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=n(r9,"CODE",{});var D4e=s(di);Q6=r(D4e,"from_pretrained()"),D4e.forEach(t),gf=r(r9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),r9.forEach(t),qe=i(f),Xe=n(f,"P",{});var wn=s(Xe);ci=r(wn,"Instantiating one of "),An=n(wn,"A",{href:!0});var G4e=s(An);W6=r(G4e,"AutoConfig"),G4e.forEach(t),yn=r(wn,", "),Ln=n(wn,"A",{href:!0});var O4e=s(Ln);H6=r(O4e,"AutoModel"),O4e.forEach(t),fi=r(wn,`, and
`),xn=n(wn,"A",{href:!0});var V4e=s(xn);U6=r(V4e,"AutoTokenizer"),V4e.forEach(t),mi=r(wn," will directly create a class of the relevant architecture. For instance"),wn.forEach(t),hf=i(f),T(Ma.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var t9=s(Ae);g$=r(t9,"will create a model that is an instance of "),gi=n(t9,"A",{href:!0});var X4e=s(gi);h$=r(X4e,"BertModel"),X4e.forEach(t),p$=r(t9,"."),t9.forEach(t),Eo=i(f),Ea=n(f,"P",{});var a9=s(Ea);u$=r(a9,"There is one class of "),pf=n(a9,"CODE",{});var z4e=s(pf);_$=r(z4e,"AutoModel"),z4e.forEach(t),Jje=r(a9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),a9.forEach(t),jPe=i(f),hi=n(f,"H2",{class:!0});var n9=s(hi);uf=n(n9,"A",{id:!0,class:!0,href:!0});var Q4e=s(uf);KZ=n(Q4e,"SPAN",{});var W4e=s(KZ);T(J6.$$.fragment,W4e),W4e.forEach(t),Q4e.forEach(t),Yje=i(n9),ZZ=n(n9,"SPAN",{});var H4e=s(ZZ);Kje=r(H4e,"Extending the Auto Classes"),H4e.forEach(t),n9.forEach(t),DPe=i(f),$n=n(f,"P",{});var df=s($n);Zje=r(df,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),eee=n(df,"CODE",{});var U4e=s(eee);eDe=r(U4e,"NewModel"),U4e.forEach(t),oDe=r(df,", make sure you have a "),oee=n(df,"CODE",{});var J4e=s(oee);rDe=r(J4e,"NewModelConfig"),J4e.forEach(t),tDe=r(df,` then you can add those to the auto
classes like this:`),df.forEach(t),GPe=i(f),T(Y6.$$.fragment,f),OPe=i(f),b$=n(f,"P",{});var Y4e=s(b$);aDe=r(Y4e,"You will then be able to use the auto classes like you would usually do!"),Y4e.forEach(t),VPe=i(f),T(_f.$$.fragment,f),XPe=i(f),pi=n(f,"H2",{class:!0});var s9=s(pi);bf=n(s9,"A",{id:!0,class:!0,href:!0});var K4e=s(bf);ree=n(K4e,"SPAN",{});var Z4e=s(ree);T(K6.$$.fragment,Z4e),Z4e.forEach(t),K4e.forEach(t),nDe=i(s9),tee=n(s9,"SPAN",{});var eEe=s(tee);sDe=r(eEe,"AutoConfig"),eEe.forEach(t),s9.forEach(t),zPe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(Z6.$$.fragment,Kr),lDe=i(Kr),e0=n(Kr,"P",{});var l9=s(e0);iDe=r(l9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),v$=n(l9,"A",{href:!0});var oEe=s(v$);dDe=r(oEe,"from_pretrained()"),oEe.forEach(t),cDe=r(l9," class method."),l9.forEach(t),fDe=i(Kr),o0=n(Kr,"P",{});var i9=s(o0);mDe=r(i9,"This class cannot be instantiated directly using "),aee=n(i9,"CODE",{});var rEe=s(aee);gDe=r(rEe,"__init__()"),rEe.forEach(t),hDe=r(i9," (throws an error)."),i9.forEach(t),pDe=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(r0.$$.fragment,Zr),uDe=i(Zr),nee=n(Zr,"P",{});var tEe=s(nee);_De=r(tEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),tEe.forEach(t),bDe=i(Zr),ui=n(Zr,"P",{});var cf=s(ui);vDe=r(cf,"The configuration class to instantiate is selected based on the "),see=n(cf,"CODE",{});var aEe=s(see);FDe=r(aEe,"model_type"),aEe.forEach(t),TDe=r(cf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),lee=n(cf,"CODE",{});var nEe=s(lee);MDe=r(nEe,"pretrained_model_name_or_path"),nEe.forEach(t),EDe=r(cf,":"),cf.forEach(t),CDe=i(Zr),A=n(Zr,"UL",{});var y=s(A);vf=n(y,"LI",{});var Lw=s(vf);iee=n(Lw,"STRONG",{});var sEe=s(iee);wDe=r(sEe,"albert"),sEe.forEach(t),ADe=r(Lw," \u2014 "),F$=n(Lw,"A",{href:!0});var lEe=s(F$);yDe=r(lEe,"AlbertConfig"),lEe.forEach(t),LDe=r(Lw," (ALBERT model)"),Lw.forEach(t),xDe=i(y),Ff=n(y,"LI",{});var xw=s(Ff);dee=n(xw,"STRONG",{});var iEe=s(dee);$De=r(iEe,"bart"),iEe.forEach(t),kDe=r(xw," \u2014 "),T$=n(xw,"A",{href:!0});var dEe=s(T$);SDe=r(dEe,"BartConfig"),dEe.forEach(t),RDe=r(xw," (BART model)"),xw.forEach(t),BDe=i(y),Tf=n(y,"LI",{});var $w=s(Tf);cee=n($w,"STRONG",{});var cEe=s(cee);PDe=r(cEe,"beit"),cEe.forEach(t),IDe=r($w," \u2014 "),M$=n($w,"A",{href:!0});var fEe=s(M$);qDe=r(fEe,"BeitConfig"),fEe.forEach(t),NDe=r($w," (BEiT model)"),$w.forEach(t),jDe=i(y),Mf=n(y,"LI",{});var kw=s(Mf);fee=n(kw,"STRONG",{});var mEe=s(fee);DDe=r(mEe,"bert"),mEe.forEach(t),GDe=r(kw," \u2014 "),E$=n(kw,"A",{href:!0});var gEe=s(E$);ODe=r(gEe,"BertConfig"),gEe.forEach(t),VDe=r(kw," (BERT model)"),kw.forEach(t),XDe=i(y),Ef=n(y,"LI",{});var Sw=s(Ef);mee=n(Sw,"STRONG",{});var hEe=s(mee);zDe=r(hEe,"bert-generation"),hEe.forEach(t),QDe=r(Sw," \u2014 "),C$=n(Sw,"A",{href:!0});var pEe=s(C$);WDe=r(pEe,"BertGenerationConfig"),pEe.forEach(t),HDe=r(Sw," (Bert Generation model)"),Sw.forEach(t),UDe=i(y),Cf=n(y,"LI",{});var Rw=s(Cf);gee=n(Rw,"STRONG",{});var uEe=s(gee);JDe=r(uEe,"big_bird"),uEe.forEach(t),YDe=r(Rw," \u2014 "),w$=n(Rw,"A",{href:!0});var _Ee=s(w$);KDe=r(_Ee,"BigBirdConfig"),_Ee.forEach(t),ZDe=r(Rw," (BigBird model)"),Rw.forEach(t),eGe=i(y),wf=n(y,"LI",{});var Bw=s(wf);hee=n(Bw,"STRONG",{});var bEe=s(hee);oGe=r(bEe,"bigbird_pegasus"),bEe.forEach(t),rGe=r(Bw," \u2014 "),A$=n(Bw,"A",{href:!0});var vEe=s(A$);tGe=r(vEe,"BigBirdPegasusConfig"),vEe.forEach(t),aGe=r(Bw," (BigBirdPegasus model)"),Bw.forEach(t),nGe=i(y),Af=n(y,"LI",{});var Pw=s(Af);pee=n(Pw,"STRONG",{});var FEe=s(pee);sGe=r(FEe,"blenderbot"),FEe.forEach(t),lGe=r(Pw," \u2014 "),y$=n(Pw,"A",{href:!0});var TEe=s(y$);iGe=r(TEe,"BlenderbotConfig"),TEe.forEach(t),dGe=r(Pw," (Blenderbot model)"),Pw.forEach(t),cGe=i(y),yf=n(y,"LI",{});var Iw=s(yf);uee=n(Iw,"STRONG",{});var MEe=s(uee);fGe=r(MEe,"blenderbot-small"),MEe.forEach(t),mGe=r(Iw," \u2014 "),L$=n(Iw,"A",{href:!0});var EEe=s(L$);gGe=r(EEe,"BlenderbotSmallConfig"),EEe.forEach(t),hGe=r(Iw," (BlenderbotSmall model)"),Iw.forEach(t),pGe=i(y),Lf=n(y,"LI",{});var qw=s(Lf);_ee=n(qw,"STRONG",{});var CEe=s(_ee);uGe=r(CEe,"camembert"),CEe.forEach(t),_Ge=r(qw," \u2014 "),x$=n(qw,"A",{href:!0});var wEe=s(x$);bGe=r(wEe,"CamembertConfig"),wEe.forEach(t),vGe=r(qw," (CamemBERT model)"),qw.forEach(t),FGe=i(y),xf=n(y,"LI",{});var Nw=s(xf);bee=n(Nw,"STRONG",{});var AEe=s(bee);TGe=r(AEe,"canine"),AEe.forEach(t),MGe=r(Nw," \u2014 "),$$=n(Nw,"A",{href:!0});var yEe=s($$);EGe=r(yEe,"CanineConfig"),yEe.forEach(t),CGe=r(Nw," (Canine model)"),Nw.forEach(t),wGe=i(y),$f=n(y,"LI",{});var jw=s($f);vee=n(jw,"STRONG",{});var LEe=s(vee);AGe=r(LEe,"clip"),LEe.forEach(t),yGe=r(jw," \u2014 "),k$=n(jw,"A",{href:!0});var xEe=s(k$);LGe=r(xEe,"CLIPConfig"),xEe.forEach(t),xGe=r(jw," (CLIP model)"),jw.forEach(t),$Ge=i(y),kf=n(y,"LI",{});var Dw=s(kf);Fee=n(Dw,"STRONG",{});var $Ee=s(Fee);kGe=r($Ee,"convbert"),$Ee.forEach(t),SGe=r(Dw," \u2014 "),S$=n(Dw,"A",{href:!0});var kEe=s(S$);RGe=r(kEe,"ConvBertConfig"),kEe.forEach(t),BGe=r(Dw," (ConvBERT model)"),Dw.forEach(t),PGe=i(y),Sf=n(y,"LI",{});var Gw=s(Sf);Tee=n(Gw,"STRONG",{});var SEe=s(Tee);IGe=r(SEe,"convnext"),SEe.forEach(t),qGe=r(Gw," \u2014 "),R$=n(Gw,"A",{href:!0});var REe=s(R$);NGe=r(REe,"ConvNextConfig"),REe.forEach(t),jGe=r(Gw," (ConvNext model)"),Gw.forEach(t),DGe=i(y),Rf=n(y,"LI",{});var Ow=s(Rf);Mee=n(Ow,"STRONG",{});var BEe=s(Mee);GGe=r(BEe,"ctrl"),BEe.forEach(t),OGe=r(Ow," \u2014 "),B$=n(Ow,"A",{href:!0});var PEe=s(B$);VGe=r(PEe,"CTRLConfig"),PEe.forEach(t),XGe=r(Ow," (CTRL model)"),Ow.forEach(t),zGe=i(y),Bf=n(y,"LI",{});var Vw=s(Bf);Eee=n(Vw,"STRONG",{});var IEe=s(Eee);QGe=r(IEe,"data2vec-audio"),IEe.forEach(t),WGe=r(Vw," \u2014 "),P$=n(Vw,"A",{href:!0});var qEe=s(P$);HGe=r(qEe,"Data2VecAudioConfig"),qEe.forEach(t),UGe=r(Vw," (Data2VecAudio model)"),Vw.forEach(t),JGe=i(y),Pf=n(y,"LI",{});var Xw=s(Pf);Cee=n(Xw,"STRONG",{});var NEe=s(Cee);YGe=r(NEe,"data2vec-text"),NEe.forEach(t),KGe=r(Xw," \u2014 "),I$=n(Xw,"A",{href:!0});var jEe=s(I$);ZGe=r(jEe,"Data2VecTextConfig"),jEe.forEach(t),eOe=r(Xw," (Data2VecText model)"),Xw.forEach(t),oOe=i(y),If=n(y,"LI",{});var zw=s(If);wee=n(zw,"STRONG",{});var DEe=s(wee);rOe=r(DEe,"data2vec-vision"),DEe.forEach(t),tOe=r(zw," \u2014 "),q$=n(zw,"A",{href:!0});var GEe=s(q$);aOe=r(GEe,"Data2VecVisionConfig"),GEe.forEach(t),nOe=r(zw," (Data2VecVision model)"),zw.forEach(t),sOe=i(y),qf=n(y,"LI",{});var Qw=s(qf);Aee=n(Qw,"STRONG",{});var OEe=s(Aee);lOe=r(OEe,"deberta"),OEe.forEach(t),iOe=r(Qw," \u2014 "),N$=n(Qw,"A",{href:!0});var VEe=s(N$);dOe=r(VEe,"DebertaConfig"),VEe.forEach(t),cOe=r(Qw," (DeBERTa model)"),Qw.forEach(t),fOe=i(y),Nf=n(y,"LI",{});var Ww=s(Nf);yee=n(Ww,"STRONG",{});var XEe=s(yee);mOe=r(XEe,"deberta-v2"),XEe.forEach(t),gOe=r(Ww," \u2014 "),j$=n(Ww,"A",{href:!0});var zEe=s(j$);hOe=r(zEe,"DebertaV2Config"),zEe.forEach(t),pOe=r(Ww," (DeBERTa-v2 model)"),Ww.forEach(t),uOe=i(y),jf=n(y,"LI",{});var Hw=s(jf);Lee=n(Hw,"STRONG",{});var QEe=s(Lee);_Oe=r(QEe,"decision_transformer"),QEe.forEach(t),bOe=r(Hw," \u2014 "),D$=n(Hw,"A",{href:!0});var WEe=s(D$);vOe=r(WEe,"DecisionTransformerConfig"),WEe.forEach(t),FOe=r(Hw," (Decision Transformer model)"),Hw.forEach(t),TOe=i(y),Df=n(y,"LI",{});var Uw=s(Df);xee=n(Uw,"STRONG",{});var HEe=s(xee);MOe=r(HEe,"deit"),HEe.forEach(t),EOe=r(Uw," \u2014 "),G$=n(Uw,"A",{href:!0});var UEe=s(G$);COe=r(UEe,"DeiTConfig"),UEe.forEach(t),wOe=r(Uw," (DeiT model)"),Uw.forEach(t),AOe=i(y),Gf=n(y,"LI",{});var Jw=s(Gf);$ee=n(Jw,"STRONG",{});var JEe=s($ee);yOe=r(JEe,"detr"),JEe.forEach(t),LOe=r(Jw," \u2014 "),O$=n(Jw,"A",{href:!0});var LNr=s(O$);xOe=r(LNr,"DetrConfig"),LNr.forEach(t),$Oe=r(Jw," (DETR model)"),Jw.forEach(t),kOe=i(y),Of=n(y,"LI",{});var YEe=s(Of);kee=n(YEe,"STRONG",{});var xNr=s(kee);SOe=r(xNr,"distilbert"),xNr.forEach(t),ROe=r(YEe," \u2014 "),V$=n(YEe,"A",{href:!0});var $Nr=s(V$);BOe=r($Nr,"DistilBertConfig"),$Nr.forEach(t),POe=r(YEe," (DistilBERT model)"),YEe.forEach(t),IOe=i(y),Vf=n(y,"LI",{});var KEe=s(Vf);See=n(KEe,"STRONG",{});var kNr=s(See);qOe=r(kNr,"dpr"),kNr.forEach(t),NOe=r(KEe," \u2014 "),X$=n(KEe,"A",{href:!0});var SNr=s(X$);jOe=r(SNr,"DPRConfig"),SNr.forEach(t),DOe=r(KEe," (DPR model)"),KEe.forEach(t),GOe=i(y),Xf=n(y,"LI",{});var ZEe=s(Xf);Ree=n(ZEe,"STRONG",{});var RNr=s(Ree);OOe=r(RNr,"dpt"),RNr.forEach(t),VOe=r(ZEe," \u2014 "),z$=n(ZEe,"A",{href:!0});var BNr=s(z$);XOe=r(BNr,"DPTConfig"),BNr.forEach(t),zOe=r(ZEe," (DPT model)"),ZEe.forEach(t),QOe=i(y),zf=n(y,"LI",{});var e5e=s(zf);Bee=n(e5e,"STRONG",{});var PNr=s(Bee);WOe=r(PNr,"electra"),PNr.forEach(t),HOe=r(e5e," \u2014 "),Q$=n(e5e,"A",{href:!0});var INr=s(Q$);UOe=r(INr,"ElectraConfig"),INr.forEach(t),JOe=r(e5e," (ELECTRA model)"),e5e.forEach(t),YOe=i(y),Qf=n(y,"LI",{});var o5e=s(Qf);Pee=n(o5e,"STRONG",{});var qNr=s(Pee);KOe=r(qNr,"encoder-decoder"),qNr.forEach(t),ZOe=r(o5e," \u2014 "),W$=n(o5e,"A",{href:!0});var NNr=s(W$);eVe=r(NNr,"EncoderDecoderConfig"),NNr.forEach(t),oVe=r(o5e," (Encoder decoder model)"),o5e.forEach(t),rVe=i(y),Wf=n(y,"LI",{});var r5e=s(Wf);Iee=n(r5e,"STRONG",{});var jNr=s(Iee);tVe=r(jNr,"flaubert"),jNr.forEach(t),aVe=r(r5e," \u2014 "),H$=n(r5e,"A",{href:!0});var DNr=s(H$);nVe=r(DNr,"FlaubertConfig"),DNr.forEach(t),sVe=r(r5e," (FlauBERT model)"),r5e.forEach(t),lVe=i(y),Hf=n(y,"LI",{});var t5e=s(Hf);qee=n(t5e,"STRONG",{});var GNr=s(qee);iVe=r(GNr,"flava"),GNr.forEach(t),dVe=r(t5e," \u2014 "),U$=n(t5e,"A",{href:!0});var ONr=s(U$);cVe=r(ONr,"FlavaConfig"),ONr.forEach(t),fVe=r(t5e," (Flava model)"),t5e.forEach(t),mVe=i(y),Uf=n(y,"LI",{});var a5e=s(Uf);Nee=n(a5e,"STRONG",{});var VNr=s(Nee);gVe=r(VNr,"fnet"),VNr.forEach(t),hVe=r(a5e," \u2014 "),J$=n(a5e,"A",{href:!0});var XNr=s(J$);pVe=r(XNr,"FNetConfig"),XNr.forEach(t),uVe=r(a5e," (FNet model)"),a5e.forEach(t),_Ve=i(y),Jf=n(y,"LI",{});var n5e=s(Jf);jee=n(n5e,"STRONG",{});var zNr=s(jee);bVe=r(zNr,"fsmt"),zNr.forEach(t),vVe=r(n5e," \u2014 "),Y$=n(n5e,"A",{href:!0});var QNr=s(Y$);FVe=r(QNr,"FSMTConfig"),QNr.forEach(t),TVe=r(n5e," (FairSeq Machine-Translation model)"),n5e.forEach(t),MVe=i(y),Yf=n(y,"LI",{});var s5e=s(Yf);Dee=n(s5e,"STRONG",{});var WNr=s(Dee);EVe=r(WNr,"funnel"),WNr.forEach(t),CVe=r(s5e," \u2014 "),K$=n(s5e,"A",{href:!0});var HNr=s(K$);wVe=r(HNr,"FunnelConfig"),HNr.forEach(t),AVe=r(s5e," (Funnel Transformer model)"),s5e.forEach(t),yVe=i(y),Kf=n(y,"LI",{});var l5e=s(Kf);Gee=n(l5e,"STRONG",{});var UNr=s(Gee);LVe=r(UNr,"glm"),UNr.forEach(t),xVe=r(l5e," \u2014 "),Z$=n(l5e,"A",{href:!0});var JNr=s(Z$);$Ve=r(JNr,"GLMConfig"),JNr.forEach(t),kVe=r(l5e," (GLM model)"),l5e.forEach(t),SVe=i(y),Zf=n(y,"LI",{});var i5e=s(Zf);Oee=n(i5e,"STRONG",{});var YNr=s(Oee);RVe=r(YNr,"glpn"),YNr.forEach(t),BVe=r(i5e," \u2014 "),ek=n(i5e,"A",{href:!0});var KNr=s(ek);PVe=r(KNr,"GLPNConfig"),KNr.forEach(t),IVe=r(i5e," (GLPN model)"),i5e.forEach(t),qVe=i(y),em=n(y,"LI",{});var d5e=s(em);Vee=n(d5e,"STRONG",{});var ZNr=s(Vee);NVe=r(ZNr,"gpt2"),ZNr.forEach(t),jVe=r(d5e," \u2014 "),ok=n(d5e,"A",{href:!0});var ejr=s(ok);DVe=r(ejr,"GPT2Config"),ejr.forEach(t),GVe=r(d5e," (OpenAI GPT-2 model)"),d5e.forEach(t),OVe=i(y),om=n(y,"LI",{});var c5e=s(om);Xee=n(c5e,"STRONG",{});var ojr=s(Xee);VVe=r(ojr,"gpt_neo"),ojr.forEach(t),XVe=r(c5e," \u2014 "),rk=n(c5e,"A",{href:!0});var rjr=s(rk);zVe=r(rjr,"GPTNeoConfig"),rjr.forEach(t),QVe=r(c5e," (GPT Neo model)"),c5e.forEach(t),WVe=i(y),rm=n(y,"LI",{});var f5e=s(rm);zee=n(f5e,"STRONG",{});var tjr=s(zee);HVe=r(tjr,"gptj"),tjr.forEach(t),UVe=r(f5e," \u2014 "),tk=n(f5e,"A",{href:!0});var ajr=s(tk);JVe=r(ajr,"GPTJConfig"),ajr.forEach(t),YVe=r(f5e," (GPT-J model)"),f5e.forEach(t),KVe=i(y),tm=n(y,"LI",{});var m5e=s(tm);Qee=n(m5e,"STRONG",{});var njr=s(Qee);ZVe=r(njr,"hubert"),njr.forEach(t),eXe=r(m5e," \u2014 "),ak=n(m5e,"A",{href:!0});var sjr=s(ak);oXe=r(sjr,"HubertConfig"),sjr.forEach(t),rXe=r(m5e," (Hubert model)"),m5e.forEach(t),tXe=i(y),am=n(y,"LI",{});var g5e=s(am);Wee=n(g5e,"STRONG",{});var ljr=s(Wee);aXe=r(ljr,"ibert"),ljr.forEach(t),nXe=r(g5e," \u2014 "),nk=n(g5e,"A",{href:!0});var ijr=s(nk);sXe=r(ijr,"IBertConfig"),ijr.forEach(t),lXe=r(g5e," (I-BERT model)"),g5e.forEach(t),iXe=i(y),nm=n(y,"LI",{});var h5e=s(nm);Hee=n(h5e,"STRONG",{});var djr=s(Hee);dXe=r(djr,"imagegpt"),djr.forEach(t),cXe=r(h5e," \u2014 "),sk=n(h5e,"A",{href:!0});var cjr=s(sk);fXe=r(cjr,"ImageGPTConfig"),cjr.forEach(t),mXe=r(h5e," (ImageGPT model)"),h5e.forEach(t),gXe=i(y),sm=n(y,"LI",{});var p5e=s(sm);Uee=n(p5e,"STRONG",{});var fjr=s(Uee);hXe=r(fjr,"layoutlm"),fjr.forEach(t),pXe=r(p5e," \u2014 "),lk=n(p5e,"A",{href:!0});var mjr=s(lk);uXe=r(mjr,"LayoutLMConfig"),mjr.forEach(t),_Xe=r(p5e," (LayoutLM model)"),p5e.forEach(t),bXe=i(y),lm=n(y,"LI",{});var u5e=s(lm);Jee=n(u5e,"STRONG",{});var gjr=s(Jee);vXe=r(gjr,"layoutlmv2"),gjr.forEach(t),FXe=r(u5e," \u2014 "),ik=n(u5e,"A",{href:!0});var hjr=s(ik);TXe=r(hjr,"LayoutLMv2Config"),hjr.forEach(t),MXe=r(u5e," (LayoutLMv2 model)"),u5e.forEach(t),EXe=i(y),im=n(y,"LI",{});var _5e=s(im);Yee=n(_5e,"STRONG",{});var pjr=s(Yee);CXe=r(pjr,"led"),pjr.forEach(t),wXe=r(_5e," \u2014 "),dk=n(_5e,"A",{href:!0});var ujr=s(dk);AXe=r(ujr,"LEDConfig"),ujr.forEach(t),yXe=r(_5e," (LED model)"),_5e.forEach(t),LXe=i(y),dm=n(y,"LI",{});var b5e=s(dm);Kee=n(b5e,"STRONG",{});var _jr=s(Kee);xXe=r(_jr,"longformer"),_jr.forEach(t),$Xe=r(b5e," \u2014 "),ck=n(b5e,"A",{href:!0});var bjr=s(ck);kXe=r(bjr,"LongformerConfig"),bjr.forEach(t),SXe=r(b5e," (Longformer model)"),b5e.forEach(t),RXe=i(y),cm=n(y,"LI",{});var v5e=s(cm);Zee=n(v5e,"STRONG",{});var vjr=s(Zee);BXe=r(vjr,"luke"),vjr.forEach(t),PXe=r(v5e," \u2014 "),fk=n(v5e,"A",{href:!0});var Fjr=s(fk);IXe=r(Fjr,"LukeConfig"),Fjr.forEach(t),qXe=r(v5e," (LUKE model)"),v5e.forEach(t),NXe=i(y),fm=n(y,"LI",{});var F5e=s(fm);eoe=n(F5e,"STRONG",{});var Tjr=s(eoe);jXe=r(Tjr,"lxmert"),Tjr.forEach(t),DXe=r(F5e," \u2014 "),mk=n(F5e,"A",{href:!0});var Mjr=s(mk);GXe=r(Mjr,"LxmertConfig"),Mjr.forEach(t),OXe=r(F5e," (LXMERT model)"),F5e.forEach(t),VXe=i(y),mm=n(y,"LI",{});var T5e=s(mm);ooe=n(T5e,"STRONG",{});var Ejr=s(ooe);XXe=r(Ejr,"m2m_100"),Ejr.forEach(t),zXe=r(T5e," \u2014 "),gk=n(T5e,"A",{href:!0});var Cjr=s(gk);QXe=r(Cjr,"M2M100Config"),Cjr.forEach(t),WXe=r(T5e," (M2M100 model)"),T5e.forEach(t),HXe=i(y),gm=n(y,"LI",{});var M5e=s(gm);roe=n(M5e,"STRONG",{});var wjr=s(roe);UXe=r(wjr,"marian"),wjr.forEach(t),JXe=r(M5e," \u2014 "),hk=n(M5e,"A",{href:!0});var Ajr=s(hk);YXe=r(Ajr,"MarianConfig"),Ajr.forEach(t),KXe=r(M5e," (Marian model)"),M5e.forEach(t),ZXe=i(y),hm=n(y,"LI",{});var E5e=s(hm);toe=n(E5e,"STRONG",{});var yjr=s(toe);eze=r(yjr,"maskformer"),yjr.forEach(t),oze=r(E5e," \u2014 "),pk=n(E5e,"A",{href:!0});var Ljr=s(pk);rze=r(Ljr,"MaskFormerConfig"),Ljr.forEach(t),tze=r(E5e," (MaskFormer model)"),E5e.forEach(t),aze=i(y),pm=n(y,"LI",{});var C5e=s(pm);aoe=n(C5e,"STRONG",{});var xjr=s(aoe);nze=r(xjr,"mbart"),xjr.forEach(t),sze=r(C5e," \u2014 "),uk=n(C5e,"A",{href:!0});var $jr=s(uk);lze=r($jr,"MBartConfig"),$jr.forEach(t),ize=r(C5e," (mBART model)"),C5e.forEach(t),dze=i(y),um=n(y,"LI",{});var w5e=s(um);noe=n(w5e,"STRONG",{});var kjr=s(noe);cze=r(kjr,"megatron-bert"),kjr.forEach(t),fze=r(w5e," \u2014 "),_k=n(w5e,"A",{href:!0});var Sjr=s(_k);mze=r(Sjr,"MegatronBertConfig"),Sjr.forEach(t),gze=r(w5e," (MegatronBert model)"),w5e.forEach(t),hze=i(y),_m=n(y,"LI",{});var A5e=s(_m);soe=n(A5e,"STRONG",{});var Rjr=s(soe);pze=r(Rjr,"mobilebert"),Rjr.forEach(t),uze=r(A5e," \u2014 "),bk=n(A5e,"A",{href:!0});var Bjr=s(bk);_ze=r(Bjr,"MobileBertConfig"),Bjr.forEach(t),bze=r(A5e," (MobileBERT model)"),A5e.forEach(t),vze=i(y),bm=n(y,"LI",{});var y5e=s(bm);loe=n(y5e,"STRONG",{});var Pjr=s(loe);Fze=r(Pjr,"mpnet"),Pjr.forEach(t),Tze=r(y5e," \u2014 "),vk=n(y5e,"A",{href:!0});var Ijr=s(vk);Mze=r(Ijr,"MPNetConfig"),Ijr.forEach(t),Eze=r(y5e," (MPNet model)"),y5e.forEach(t),Cze=i(y),vm=n(y,"LI",{});var L5e=s(vm);ioe=n(L5e,"STRONG",{});var qjr=s(ioe);wze=r(qjr,"mt5"),qjr.forEach(t),Aze=r(L5e," \u2014 "),Fk=n(L5e,"A",{href:!0});var Njr=s(Fk);yze=r(Njr,"MT5Config"),Njr.forEach(t),Lze=r(L5e," (mT5 model)"),L5e.forEach(t),xze=i(y),Fm=n(y,"LI",{});var x5e=s(Fm);doe=n(x5e,"STRONG",{});var jjr=s(doe);$ze=r(jjr,"nystromformer"),jjr.forEach(t),kze=r(x5e," \u2014 "),Tk=n(x5e,"A",{href:!0});var Djr=s(Tk);Sze=r(Djr,"NystromformerConfig"),Djr.forEach(t),Rze=r(x5e," (Nystromformer model)"),x5e.forEach(t),Bze=i(y),Tm=n(y,"LI",{});var $5e=s(Tm);coe=n($5e,"STRONG",{});var Gjr=s(coe);Pze=r(Gjr,"openai-gpt"),Gjr.forEach(t),Ize=r($5e," \u2014 "),Mk=n($5e,"A",{href:!0});var Ojr=s(Mk);qze=r(Ojr,"OpenAIGPTConfig"),Ojr.forEach(t),Nze=r($5e," (OpenAI GPT model)"),$5e.forEach(t),jze=i(y),Mm=n(y,"LI",{});var k5e=s(Mm);foe=n(k5e,"STRONG",{});var Vjr=s(foe);Dze=r(Vjr,"pegasus"),Vjr.forEach(t),Gze=r(k5e," \u2014 "),Ek=n(k5e,"A",{href:!0});var Xjr=s(Ek);Oze=r(Xjr,"PegasusConfig"),Xjr.forEach(t),Vze=r(k5e," (Pegasus model)"),k5e.forEach(t),Xze=i(y),Em=n(y,"LI",{});var S5e=s(Em);moe=n(S5e,"STRONG",{});var zjr=s(moe);zze=r(zjr,"perceiver"),zjr.forEach(t),Qze=r(S5e," \u2014 "),Ck=n(S5e,"A",{href:!0});var Qjr=s(Ck);Wze=r(Qjr,"PerceiverConfig"),Qjr.forEach(t),Hze=r(S5e," (Perceiver model)"),S5e.forEach(t),Uze=i(y),Cm=n(y,"LI",{});var R5e=s(Cm);goe=n(R5e,"STRONG",{});var Wjr=s(goe);Jze=r(Wjr,"plbart"),Wjr.forEach(t),Yze=r(R5e," \u2014 "),wk=n(R5e,"A",{href:!0});var Hjr=s(wk);Kze=r(Hjr,"PLBartConfig"),Hjr.forEach(t),Zze=r(R5e," (PLBart model)"),R5e.forEach(t),eQe=i(y),wm=n(y,"LI",{});var B5e=s(wm);hoe=n(B5e,"STRONG",{});var Ujr=s(hoe);oQe=r(Ujr,"poolformer"),Ujr.forEach(t),rQe=r(B5e," \u2014 "),Ak=n(B5e,"A",{href:!0});var Jjr=s(Ak);tQe=r(Jjr,"PoolFormerConfig"),Jjr.forEach(t),aQe=r(B5e," (PoolFormer model)"),B5e.forEach(t),nQe=i(y),Am=n(y,"LI",{});var P5e=s(Am);poe=n(P5e,"STRONG",{});var Yjr=s(poe);sQe=r(Yjr,"prophetnet"),Yjr.forEach(t),lQe=r(P5e," \u2014 "),yk=n(P5e,"A",{href:!0});var Kjr=s(yk);iQe=r(Kjr,"ProphetNetConfig"),Kjr.forEach(t),dQe=r(P5e," (ProphetNet model)"),P5e.forEach(t),cQe=i(y),ym=n(y,"LI",{});var I5e=s(ym);uoe=n(I5e,"STRONG",{});var Zjr=s(uoe);fQe=r(Zjr,"qdqbert"),Zjr.forEach(t),mQe=r(I5e," \u2014 "),Lk=n(I5e,"A",{href:!0});var eDr=s(Lk);gQe=r(eDr,"QDQBertConfig"),eDr.forEach(t),hQe=r(I5e," (QDQBert model)"),I5e.forEach(t),pQe=i(y),Lm=n(y,"LI",{});var q5e=s(Lm);_oe=n(q5e,"STRONG",{});var oDr=s(_oe);uQe=r(oDr,"rag"),oDr.forEach(t),_Qe=r(q5e," \u2014 "),xk=n(q5e,"A",{href:!0});var rDr=s(xk);bQe=r(rDr,"RagConfig"),rDr.forEach(t),vQe=r(q5e," (RAG model)"),q5e.forEach(t),FQe=i(y),xm=n(y,"LI",{});var N5e=s(xm);boe=n(N5e,"STRONG",{});var tDr=s(boe);TQe=r(tDr,"realm"),tDr.forEach(t),MQe=r(N5e," \u2014 "),$k=n(N5e,"A",{href:!0});var aDr=s($k);EQe=r(aDr,"RealmConfig"),aDr.forEach(t),CQe=r(N5e," (Realm model)"),N5e.forEach(t),wQe=i(y),$m=n(y,"LI",{});var j5e=s($m);voe=n(j5e,"STRONG",{});var nDr=s(voe);AQe=r(nDr,"reformer"),nDr.forEach(t),yQe=r(j5e," \u2014 "),kk=n(j5e,"A",{href:!0});var sDr=s(kk);LQe=r(sDr,"ReformerConfig"),sDr.forEach(t),xQe=r(j5e," (Reformer model)"),j5e.forEach(t),$Qe=i(y),km=n(y,"LI",{});var D5e=s(km);Foe=n(D5e,"STRONG",{});var lDr=s(Foe);kQe=r(lDr,"regnet"),lDr.forEach(t),SQe=r(D5e," \u2014 "),Sk=n(D5e,"A",{href:!0});var iDr=s(Sk);RQe=r(iDr,"RegNetConfig"),iDr.forEach(t),BQe=r(D5e," (RegNet model)"),D5e.forEach(t),PQe=i(y),Sm=n(y,"LI",{});var G5e=s(Sm);Toe=n(G5e,"STRONG",{});var dDr=s(Toe);IQe=r(dDr,"rembert"),dDr.forEach(t),qQe=r(G5e," \u2014 "),Rk=n(G5e,"A",{href:!0});var cDr=s(Rk);NQe=r(cDr,"RemBertConfig"),cDr.forEach(t),jQe=r(G5e," (RemBERT model)"),G5e.forEach(t),DQe=i(y),Rm=n(y,"LI",{});var O5e=s(Rm);Moe=n(O5e,"STRONG",{});var fDr=s(Moe);GQe=r(fDr,"resnet"),fDr.forEach(t),OQe=r(O5e," \u2014 "),Bk=n(O5e,"A",{href:!0});var mDr=s(Bk);VQe=r(mDr,"ResNetConfig"),mDr.forEach(t),XQe=r(O5e," (ResNet model)"),O5e.forEach(t),zQe=i(y),Bm=n(y,"LI",{});var V5e=s(Bm);Eoe=n(V5e,"STRONG",{});var gDr=s(Eoe);QQe=r(gDr,"retribert"),gDr.forEach(t),WQe=r(V5e," \u2014 "),Pk=n(V5e,"A",{href:!0});var hDr=s(Pk);HQe=r(hDr,"RetriBertConfig"),hDr.forEach(t),UQe=r(V5e," (RetriBERT model)"),V5e.forEach(t),JQe=i(y),Pm=n(y,"LI",{});var X5e=s(Pm);Coe=n(X5e,"STRONG",{});var pDr=s(Coe);YQe=r(pDr,"roberta"),pDr.forEach(t),KQe=r(X5e," \u2014 "),Ik=n(X5e,"A",{href:!0});var uDr=s(Ik);ZQe=r(uDr,"RobertaConfig"),uDr.forEach(t),eWe=r(X5e," (RoBERTa model)"),X5e.forEach(t),oWe=i(y),Im=n(y,"LI",{});var z5e=s(Im);woe=n(z5e,"STRONG",{});var _Dr=s(woe);rWe=r(_Dr,"roformer"),_Dr.forEach(t),tWe=r(z5e," \u2014 "),qk=n(z5e,"A",{href:!0});var bDr=s(qk);aWe=r(bDr,"RoFormerConfig"),bDr.forEach(t),nWe=r(z5e," (RoFormer model)"),z5e.forEach(t),sWe=i(y),qm=n(y,"LI",{});var Q5e=s(qm);Aoe=n(Q5e,"STRONG",{});var vDr=s(Aoe);lWe=r(vDr,"segformer"),vDr.forEach(t),iWe=r(Q5e," \u2014 "),Nk=n(Q5e,"A",{href:!0});var FDr=s(Nk);dWe=r(FDr,"SegformerConfig"),FDr.forEach(t),cWe=r(Q5e," (SegFormer model)"),Q5e.forEach(t),fWe=i(y),Nm=n(y,"LI",{});var W5e=s(Nm);yoe=n(W5e,"STRONG",{});var TDr=s(yoe);mWe=r(TDr,"sew"),TDr.forEach(t),gWe=r(W5e," \u2014 "),jk=n(W5e,"A",{href:!0});var MDr=s(jk);hWe=r(MDr,"SEWConfig"),MDr.forEach(t),pWe=r(W5e," (SEW model)"),W5e.forEach(t),uWe=i(y),jm=n(y,"LI",{});var H5e=s(jm);Loe=n(H5e,"STRONG",{});var EDr=s(Loe);_We=r(EDr,"sew-d"),EDr.forEach(t),bWe=r(H5e," \u2014 "),Dk=n(H5e,"A",{href:!0});var CDr=s(Dk);vWe=r(CDr,"SEWDConfig"),CDr.forEach(t),FWe=r(H5e," (SEW-D model)"),H5e.forEach(t),TWe=i(y),Dm=n(y,"LI",{});var U5e=s(Dm);xoe=n(U5e,"STRONG",{});var wDr=s(xoe);MWe=r(wDr,"speech-encoder-decoder"),wDr.forEach(t),EWe=r(U5e," \u2014 "),Gk=n(U5e,"A",{href:!0});var ADr=s(Gk);CWe=r(ADr,"SpeechEncoderDecoderConfig"),ADr.forEach(t),wWe=r(U5e," (Speech Encoder decoder model)"),U5e.forEach(t),AWe=i(y),Gm=n(y,"LI",{});var J5e=s(Gm);$oe=n(J5e,"STRONG",{});var yDr=s($oe);yWe=r(yDr,"speech_to_text"),yDr.forEach(t),LWe=r(J5e," \u2014 "),Ok=n(J5e,"A",{href:!0});var LDr=s(Ok);xWe=r(LDr,"Speech2TextConfig"),LDr.forEach(t),$We=r(J5e," (Speech2Text model)"),J5e.forEach(t),kWe=i(y),Om=n(y,"LI",{});var Y5e=s(Om);koe=n(Y5e,"STRONG",{});var xDr=s(koe);SWe=r(xDr,"speech_to_text_2"),xDr.forEach(t),RWe=r(Y5e," \u2014 "),Vk=n(Y5e,"A",{href:!0});var $Dr=s(Vk);BWe=r($Dr,"Speech2Text2Config"),$Dr.forEach(t),PWe=r(Y5e," (Speech2Text2 model)"),Y5e.forEach(t),IWe=i(y),Vm=n(y,"LI",{});var K5e=s(Vm);Soe=n(K5e,"STRONG",{});var kDr=s(Soe);qWe=r(kDr,"splinter"),kDr.forEach(t),NWe=r(K5e," \u2014 "),Xk=n(K5e,"A",{href:!0});var SDr=s(Xk);jWe=r(SDr,"SplinterConfig"),SDr.forEach(t),DWe=r(K5e," (Splinter model)"),K5e.forEach(t),GWe=i(y),Xm=n(y,"LI",{});var Z5e=s(Xm);Roe=n(Z5e,"STRONG",{});var RDr=s(Roe);OWe=r(RDr,"squeezebert"),RDr.forEach(t),VWe=r(Z5e," \u2014 "),zk=n(Z5e,"A",{href:!0});var BDr=s(zk);XWe=r(BDr,"SqueezeBertConfig"),BDr.forEach(t),zWe=r(Z5e," (SqueezeBERT model)"),Z5e.forEach(t),QWe=i(y),zm=n(y,"LI",{});var eCe=s(zm);Boe=n(eCe,"STRONG",{});var PDr=s(Boe);WWe=r(PDr,"swin"),PDr.forEach(t),HWe=r(eCe," \u2014 "),Qk=n(eCe,"A",{href:!0});var IDr=s(Qk);UWe=r(IDr,"SwinConfig"),IDr.forEach(t),JWe=r(eCe," (Swin model)"),eCe.forEach(t),YWe=i(y),Qm=n(y,"LI",{});var oCe=s(Qm);Poe=n(oCe,"STRONG",{});var qDr=s(Poe);KWe=r(qDr,"t5"),qDr.forEach(t),ZWe=r(oCe," \u2014 "),Wk=n(oCe,"A",{href:!0});var NDr=s(Wk);eHe=r(NDr,"T5Config"),NDr.forEach(t),oHe=r(oCe," (T5 model)"),oCe.forEach(t),rHe=i(y),Wm=n(y,"LI",{});var rCe=s(Wm);Ioe=n(rCe,"STRONG",{});var jDr=s(Ioe);tHe=r(jDr,"tapas"),jDr.forEach(t),aHe=r(rCe," \u2014 "),Hk=n(rCe,"A",{href:!0});var DDr=s(Hk);nHe=r(DDr,"TapasConfig"),DDr.forEach(t),sHe=r(rCe," (TAPAS model)"),rCe.forEach(t),lHe=i(y),Hm=n(y,"LI",{});var tCe=s(Hm);qoe=n(tCe,"STRONG",{});var GDr=s(qoe);iHe=r(GDr,"tapex"),GDr.forEach(t),dHe=r(tCe," \u2014 "),Uk=n(tCe,"A",{href:!0});var ODr=s(Uk);cHe=r(ODr,"BartConfig"),ODr.forEach(t),fHe=r(tCe," (TAPEX model)"),tCe.forEach(t),mHe=i(y),Um=n(y,"LI",{});var aCe=s(Um);Noe=n(aCe,"STRONG",{});var VDr=s(Noe);gHe=r(VDr,"transfo-xl"),VDr.forEach(t),hHe=r(aCe," \u2014 "),Jk=n(aCe,"A",{href:!0});var XDr=s(Jk);pHe=r(XDr,"TransfoXLConfig"),XDr.forEach(t),uHe=r(aCe," (Transformer-XL model)"),aCe.forEach(t),_He=i(y),Jm=n(y,"LI",{});var nCe=s(Jm);joe=n(nCe,"STRONG",{});var zDr=s(joe);bHe=r(zDr,"trocr"),zDr.forEach(t),vHe=r(nCe," \u2014 "),Yk=n(nCe,"A",{href:!0});var QDr=s(Yk);FHe=r(QDr,"TrOCRConfig"),QDr.forEach(t),THe=r(nCe," (TrOCR model)"),nCe.forEach(t),MHe=i(y),Ym=n(y,"LI",{});var sCe=s(Ym);Doe=n(sCe,"STRONG",{});var WDr=s(Doe);EHe=r(WDr,"unispeech"),WDr.forEach(t),CHe=r(sCe," \u2014 "),Kk=n(sCe,"A",{href:!0});var HDr=s(Kk);wHe=r(HDr,"UniSpeechConfig"),HDr.forEach(t),AHe=r(sCe," (UniSpeech model)"),sCe.forEach(t),yHe=i(y),Km=n(y,"LI",{});var lCe=s(Km);Goe=n(lCe,"STRONG",{});var UDr=s(Goe);LHe=r(UDr,"unispeech-sat"),UDr.forEach(t),xHe=r(lCe," \u2014 "),Zk=n(lCe,"A",{href:!0});var JDr=s(Zk);$He=r(JDr,"UniSpeechSatConfig"),JDr.forEach(t),kHe=r(lCe," (UniSpeechSat model)"),lCe.forEach(t),SHe=i(y),Zm=n(y,"LI",{});var iCe=s(Zm);Ooe=n(iCe,"STRONG",{});var YDr=s(Ooe);RHe=r(YDr,"van"),YDr.forEach(t),BHe=r(iCe," \u2014 "),eS=n(iCe,"A",{href:!0});var KDr=s(eS);PHe=r(KDr,"VanConfig"),KDr.forEach(t),IHe=r(iCe," (VAN model)"),iCe.forEach(t),qHe=i(y),eg=n(y,"LI",{});var dCe=s(eg);Voe=n(dCe,"STRONG",{});var ZDr=s(Voe);NHe=r(ZDr,"vilt"),ZDr.forEach(t),jHe=r(dCe," \u2014 "),oS=n(dCe,"A",{href:!0});var eGr=s(oS);DHe=r(eGr,"ViltConfig"),eGr.forEach(t),GHe=r(dCe," (ViLT model)"),dCe.forEach(t),OHe=i(y),og=n(y,"LI",{});var cCe=s(og);Xoe=n(cCe,"STRONG",{});var oGr=s(Xoe);VHe=r(oGr,"vision-encoder-decoder"),oGr.forEach(t),XHe=r(cCe," \u2014 "),rS=n(cCe,"A",{href:!0});var rGr=s(rS);zHe=r(rGr,"VisionEncoderDecoderConfig"),rGr.forEach(t),QHe=r(cCe," (Vision Encoder decoder model)"),cCe.forEach(t),WHe=i(y),rg=n(y,"LI",{});var fCe=s(rg);zoe=n(fCe,"STRONG",{});var tGr=s(zoe);HHe=r(tGr,"vision-text-dual-encoder"),tGr.forEach(t),UHe=r(fCe," \u2014 "),tS=n(fCe,"A",{href:!0});var aGr=s(tS);JHe=r(aGr,"VisionTextDualEncoderConfig"),aGr.forEach(t),YHe=r(fCe," (VisionTextDualEncoder model)"),fCe.forEach(t),KHe=i(y),tg=n(y,"LI",{});var mCe=s(tg);Qoe=n(mCe,"STRONG",{});var nGr=s(Qoe);ZHe=r(nGr,"visual_bert"),nGr.forEach(t),eUe=r(mCe," \u2014 "),aS=n(mCe,"A",{href:!0});var sGr=s(aS);oUe=r(sGr,"VisualBertConfig"),sGr.forEach(t),rUe=r(mCe," (VisualBert model)"),mCe.forEach(t),tUe=i(y),ag=n(y,"LI",{});var gCe=s(ag);Woe=n(gCe,"STRONG",{});var lGr=s(Woe);aUe=r(lGr,"vit"),lGr.forEach(t),nUe=r(gCe," \u2014 "),nS=n(gCe,"A",{href:!0});var iGr=s(nS);sUe=r(iGr,"ViTConfig"),iGr.forEach(t),lUe=r(gCe," (ViT model)"),gCe.forEach(t),iUe=i(y),ng=n(y,"LI",{});var hCe=s(ng);Hoe=n(hCe,"STRONG",{});var dGr=s(Hoe);dUe=r(dGr,"vit_mae"),dGr.forEach(t),cUe=r(hCe," \u2014 "),sS=n(hCe,"A",{href:!0});var cGr=s(sS);fUe=r(cGr,"ViTMAEConfig"),cGr.forEach(t),mUe=r(hCe," (ViTMAE model)"),hCe.forEach(t),gUe=i(y),sg=n(y,"LI",{});var pCe=s(sg);Uoe=n(pCe,"STRONG",{});var fGr=s(Uoe);hUe=r(fGr,"wav2vec2"),fGr.forEach(t),pUe=r(pCe," \u2014 "),lS=n(pCe,"A",{href:!0});var mGr=s(lS);uUe=r(mGr,"Wav2Vec2Config"),mGr.forEach(t),_Ue=r(pCe," (Wav2Vec2 model)"),pCe.forEach(t),bUe=i(y),lg=n(y,"LI",{});var uCe=s(lg);Joe=n(uCe,"STRONG",{});var gGr=s(Joe);vUe=r(gGr,"wavlm"),gGr.forEach(t),FUe=r(uCe," \u2014 "),iS=n(uCe,"A",{href:!0});var hGr=s(iS);TUe=r(hGr,"WavLMConfig"),hGr.forEach(t),MUe=r(uCe," (WavLM model)"),uCe.forEach(t),EUe=i(y),ig=n(y,"LI",{});var _Ce=s(ig);Yoe=n(_Ce,"STRONG",{});var pGr=s(Yoe);CUe=r(pGr,"xglm"),pGr.forEach(t),wUe=r(_Ce," \u2014 "),dS=n(_Ce,"A",{href:!0});var uGr=s(dS);AUe=r(uGr,"XGLMConfig"),uGr.forEach(t),yUe=r(_Ce," (XGLM model)"),_Ce.forEach(t),LUe=i(y),dg=n(y,"LI",{});var bCe=s(dg);Koe=n(bCe,"STRONG",{});var _Gr=s(Koe);xUe=r(_Gr,"xlm"),_Gr.forEach(t),$Ue=r(bCe," \u2014 "),cS=n(bCe,"A",{href:!0});var bGr=s(cS);kUe=r(bGr,"XLMConfig"),bGr.forEach(t),SUe=r(bCe," (XLM model)"),bCe.forEach(t),RUe=i(y),cg=n(y,"LI",{});var vCe=s(cg);Zoe=n(vCe,"STRONG",{});var vGr=s(Zoe);BUe=r(vGr,"xlm-prophetnet"),vGr.forEach(t),PUe=r(vCe," \u2014 "),fS=n(vCe,"A",{href:!0});var FGr=s(fS);IUe=r(FGr,"XLMProphetNetConfig"),FGr.forEach(t),qUe=r(vCe," (XLMProphetNet model)"),vCe.forEach(t),NUe=i(y),fg=n(y,"LI",{});var FCe=s(fg);ere=n(FCe,"STRONG",{});var TGr=s(ere);jUe=r(TGr,"xlm-roberta"),TGr.forEach(t),DUe=r(FCe," \u2014 "),mS=n(FCe,"A",{href:!0});var MGr=s(mS);GUe=r(MGr,"XLMRobertaConfig"),MGr.forEach(t),OUe=r(FCe," (XLM-RoBERTa model)"),FCe.forEach(t),VUe=i(y),mg=n(y,"LI",{});var TCe=s(mg);ore=n(TCe,"STRONG",{});var EGr=s(ore);XUe=r(EGr,"xlm-roberta-xl"),EGr.forEach(t),zUe=r(TCe," \u2014 "),gS=n(TCe,"A",{href:!0});var CGr=s(gS);QUe=r(CGr,"XLMRobertaXLConfig"),CGr.forEach(t),WUe=r(TCe," (XLM-RoBERTa-XL model)"),TCe.forEach(t),HUe=i(y),gg=n(y,"LI",{});var MCe=s(gg);rre=n(MCe,"STRONG",{});var wGr=s(rre);UUe=r(wGr,"xlnet"),wGr.forEach(t),JUe=r(MCe," \u2014 "),hS=n(MCe,"A",{href:!0});var AGr=s(hS);YUe=r(AGr,"XLNetConfig"),AGr.forEach(t),KUe=r(MCe," (XLNet model)"),MCe.forEach(t),ZUe=i(y),hg=n(y,"LI",{});var ECe=s(hg);tre=n(ECe,"STRONG",{});var yGr=s(tre);eJe=r(yGr,"yolos"),yGr.forEach(t),oJe=r(ECe," \u2014 "),pS=n(ECe,"A",{href:!0});var LGr=s(pS);rJe=r(LGr,"YolosConfig"),LGr.forEach(t),tJe=r(ECe," (YOLOS model)"),ECe.forEach(t),aJe=i(y),pg=n(y,"LI",{});var CCe=s(pg);are=n(CCe,"STRONG",{});var xGr=s(are);nJe=r(xGr,"yoso"),xGr.forEach(t),sJe=r(CCe," \u2014 "),uS=n(CCe,"A",{href:!0});var $Gr=s(uS);lJe=r($Gr,"YosoConfig"),$Gr.forEach(t),iJe=r(CCe," (YOSO model)"),CCe.forEach(t),y.forEach(t),dJe=i(Zr),T(ug.$$.fragment,Zr),Zr.forEach(t),cJe=i(Kr),_g=n(Kr,"DIV",{class:!0});var Vqe=s(_g);T(t0.$$.fragment,Vqe),fJe=i(Vqe),nre=n(Vqe,"P",{});var kGr=s(nre);mJe=r(kGr,"Register a new configuration for this class."),kGr.forEach(t),Vqe.forEach(t),Kr.forEach(t),QPe=i(f),_i=n(f,"H2",{class:!0});var Xqe=s(_i);bg=n(Xqe,"A",{id:!0,class:!0,href:!0});var SGr=s(bg);sre=n(SGr,"SPAN",{});var RGr=s(sre);T(a0.$$.fragment,RGr),RGr.forEach(t),SGr.forEach(t),gJe=i(Xqe),lre=n(Xqe,"SPAN",{});var BGr=s(lre);hJe=r(BGr,"AutoTokenizer"),BGr.forEach(t),Xqe.forEach(t),WPe=i(f),wo=n(f,"DIV",{class:!0});var Ps=s(wo);T(n0.$$.fragment,Ps),pJe=i(Ps),s0=n(Ps,"P",{});var zqe=s(s0);uJe=r(zqe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),_S=n(zqe,"A",{href:!0});var PGr=s(_S);_Je=r(PGr,"AutoTokenizer.from_pretrained()"),PGr.forEach(t),bJe=r(zqe," class method."),zqe.forEach(t),vJe=i(Ps),l0=n(Ps,"P",{});var Qqe=s(l0);FJe=r(Qqe,"This class cannot be instantiated directly using "),ire=n(Qqe,"CODE",{});var IGr=s(ire);TJe=r(IGr,"__init__()"),IGr.forEach(t),MJe=r(Qqe," (throws an error)."),Qqe.forEach(t),EJe=i(Ps),Cr=n(Ps,"DIV",{class:!0});var Is=s(Cr);T(i0.$$.fragment,Is),CJe=i(Is),dre=n(Is,"P",{});var qGr=s(dre);wJe=r(qGr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),qGr.forEach(t),AJe=i(Is),Ca=n(Is,"P",{});var Yw=s(Ca);yJe=r(Yw,"The tokenizer class to instantiate is selected based on the "),cre=n(Yw,"CODE",{});var NGr=s(cre);LJe=r(NGr,"model_type"),NGr.forEach(t),xJe=r(Yw,` property of the config object (either
passed as an argument or loaded from `),fre=n(Yw,"CODE",{});var jGr=s(fre);$Je=r(jGr,"pretrained_model_name_or_path"),jGr.forEach(t),kJe=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mre=n(Yw,"CODE",{});var DGr=s(mre);SJe=r(DGr,"pretrained_model_name_or_path"),DGr.forEach(t),RJe=r(Yw,":"),Yw.forEach(t),BJe=i(Is),k=n(Is,"UL",{});var S=s(k);kn=n(S,"LI",{});var d9=s(kn);gre=n(d9,"STRONG",{});var GGr=s(gre);PJe=r(GGr,"albert"),GGr.forEach(t),IJe=r(d9," \u2014 "),bS=n(d9,"A",{href:!0});var OGr=s(bS);qJe=r(OGr,"AlbertTokenizer"),OGr.forEach(t),NJe=r(d9," or "),vS=n(d9,"A",{href:!0});var VGr=s(vS);jJe=r(VGr,"AlbertTokenizerFast"),VGr.forEach(t),DJe=r(d9," (ALBERT model)"),d9.forEach(t),GJe=i(S),Sn=n(S,"LI",{});var c9=s(Sn);hre=n(c9,"STRONG",{});var XGr=s(hre);OJe=r(XGr,"bart"),XGr.forEach(t),VJe=r(c9," \u2014 "),FS=n(c9,"A",{href:!0});var zGr=s(FS);XJe=r(zGr,"BartTokenizer"),zGr.forEach(t),zJe=r(c9," or "),TS=n(c9,"A",{href:!0});var QGr=s(TS);QJe=r(QGr,"BartTokenizerFast"),QGr.forEach(t),WJe=r(c9," (BART model)"),c9.forEach(t),HJe=i(S),Rn=n(S,"LI",{});var f9=s(Rn);pre=n(f9,"STRONG",{});var WGr=s(pre);UJe=r(WGr,"barthez"),WGr.forEach(t),JJe=r(f9," \u2014 "),MS=n(f9,"A",{href:!0});var HGr=s(MS);YJe=r(HGr,"BarthezTokenizer"),HGr.forEach(t),KJe=r(f9," or "),ES=n(f9,"A",{href:!0});var UGr=s(ES);ZJe=r(UGr,"BarthezTokenizerFast"),UGr.forEach(t),eYe=r(f9," (BARThez model)"),f9.forEach(t),oYe=i(S),vg=n(S,"LI",{});var wCe=s(vg);ure=n(wCe,"STRONG",{});var JGr=s(ure);rYe=r(JGr,"bartpho"),JGr.forEach(t),tYe=r(wCe," \u2014 "),CS=n(wCe,"A",{href:!0});var YGr=s(CS);aYe=r(YGr,"BartphoTokenizer"),YGr.forEach(t),nYe=r(wCe," (BARTpho model)"),wCe.forEach(t),sYe=i(S),Bn=n(S,"LI",{});var m9=s(Bn);_re=n(m9,"STRONG",{});var KGr=s(_re);lYe=r(KGr,"bert"),KGr.forEach(t),iYe=r(m9," \u2014 "),wS=n(m9,"A",{href:!0});var ZGr=s(wS);dYe=r(ZGr,"BertTokenizer"),ZGr.forEach(t),cYe=r(m9," or "),AS=n(m9,"A",{href:!0});var eOr=s(AS);fYe=r(eOr,"BertTokenizerFast"),eOr.forEach(t),mYe=r(m9," (BERT model)"),m9.forEach(t),gYe=i(S),Fg=n(S,"LI",{});var ACe=s(Fg);bre=n(ACe,"STRONG",{});var oOr=s(bre);hYe=r(oOr,"bert-generation"),oOr.forEach(t),pYe=r(ACe," \u2014 "),yS=n(ACe,"A",{href:!0});var rOr=s(yS);uYe=r(rOr,"BertGenerationTokenizer"),rOr.forEach(t),_Ye=r(ACe," (Bert Generation model)"),ACe.forEach(t),bYe=i(S),Tg=n(S,"LI",{});var yCe=s(Tg);vre=n(yCe,"STRONG",{});var tOr=s(vre);vYe=r(tOr,"bert-japanese"),tOr.forEach(t),FYe=r(yCe," \u2014 "),LS=n(yCe,"A",{href:!0});var aOr=s(LS);TYe=r(aOr,"BertJapaneseTokenizer"),aOr.forEach(t),MYe=r(yCe," (BertJapanese model)"),yCe.forEach(t),EYe=i(S),Mg=n(S,"LI",{});var LCe=s(Mg);Fre=n(LCe,"STRONG",{});var nOr=s(Fre);CYe=r(nOr,"bertweet"),nOr.forEach(t),wYe=r(LCe," \u2014 "),xS=n(LCe,"A",{href:!0});var sOr=s(xS);AYe=r(sOr,"BertweetTokenizer"),sOr.forEach(t),yYe=r(LCe," (Bertweet model)"),LCe.forEach(t),LYe=i(S),Pn=n(S,"LI",{});var g9=s(Pn);Tre=n(g9,"STRONG",{});var lOr=s(Tre);xYe=r(lOr,"big_bird"),lOr.forEach(t),$Ye=r(g9," \u2014 "),$S=n(g9,"A",{href:!0});var iOr=s($S);kYe=r(iOr,"BigBirdTokenizer"),iOr.forEach(t),SYe=r(g9," or "),kS=n(g9,"A",{href:!0});var dOr=s(kS);RYe=r(dOr,"BigBirdTokenizerFast"),dOr.forEach(t),BYe=r(g9," (BigBird model)"),g9.forEach(t),PYe=i(S),In=n(S,"LI",{});var h9=s(In);Mre=n(h9,"STRONG",{});var cOr=s(Mre);IYe=r(cOr,"bigbird_pegasus"),cOr.forEach(t),qYe=r(h9," \u2014 "),SS=n(h9,"A",{href:!0});var fOr=s(SS);NYe=r(fOr,"PegasusTokenizer"),fOr.forEach(t),jYe=r(h9," or "),RS=n(h9,"A",{href:!0});var mOr=s(RS);DYe=r(mOr,"PegasusTokenizerFast"),mOr.forEach(t),GYe=r(h9," (BigBirdPegasus model)"),h9.forEach(t),OYe=i(S),qn=n(S,"LI",{});var p9=s(qn);Ere=n(p9,"STRONG",{});var gOr=s(Ere);VYe=r(gOr,"blenderbot"),gOr.forEach(t),XYe=r(p9," \u2014 "),BS=n(p9,"A",{href:!0});var hOr=s(BS);zYe=r(hOr,"BlenderbotTokenizer"),hOr.forEach(t),QYe=r(p9," or "),PS=n(p9,"A",{href:!0});var pOr=s(PS);WYe=r(pOr,"BlenderbotTokenizerFast"),pOr.forEach(t),HYe=r(p9," (Blenderbot model)"),p9.forEach(t),UYe=i(S),Eg=n(S,"LI",{});var xCe=s(Eg);Cre=n(xCe,"STRONG",{});var uOr=s(Cre);JYe=r(uOr,"blenderbot-small"),uOr.forEach(t),YYe=r(xCe," \u2014 "),IS=n(xCe,"A",{href:!0});var _Or=s(IS);KYe=r(_Or,"BlenderbotSmallTokenizer"),_Or.forEach(t),ZYe=r(xCe," (BlenderbotSmall model)"),xCe.forEach(t),eKe=i(S),Cg=n(S,"LI",{});var $Ce=s(Cg);wre=n($Ce,"STRONG",{});var bOr=s(wre);oKe=r(bOr,"byt5"),bOr.forEach(t),rKe=r($Ce," \u2014 "),qS=n($Ce,"A",{href:!0});var vOr=s(qS);tKe=r(vOr,"ByT5Tokenizer"),vOr.forEach(t),aKe=r($Ce," (ByT5 model)"),$Ce.forEach(t),nKe=i(S),Nn=n(S,"LI",{});var u9=s(Nn);Are=n(u9,"STRONG",{});var FOr=s(Are);sKe=r(FOr,"camembert"),FOr.forEach(t),lKe=r(u9," \u2014 "),NS=n(u9,"A",{href:!0});var TOr=s(NS);iKe=r(TOr,"CamembertTokenizer"),TOr.forEach(t),dKe=r(u9," or "),jS=n(u9,"A",{href:!0});var MOr=s(jS);cKe=r(MOr,"CamembertTokenizerFast"),MOr.forEach(t),fKe=r(u9," (CamemBERT model)"),u9.forEach(t),mKe=i(S),wg=n(S,"LI",{});var kCe=s(wg);yre=n(kCe,"STRONG",{});var EOr=s(yre);gKe=r(EOr,"canine"),EOr.forEach(t),hKe=r(kCe," \u2014 "),DS=n(kCe,"A",{href:!0});var COr=s(DS);pKe=r(COr,"CanineTokenizer"),COr.forEach(t),uKe=r(kCe," (Canine model)"),kCe.forEach(t),_Ke=i(S),jn=n(S,"LI",{});var _9=s(jn);Lre=n(_9,"STRONG",{});var wOr=s(Lre);bKe=r(wOr,"clip"),wOr.forEach(t),vKe=r(_9," \u2014 "),GS=n(_9,"A",{href:!0});var AOr=s(GS);FKe=r(AOr,"CLIPTokenizer"),AOr.forEach(t),TKe=r(_9," or "),OS=n(_9,"A",{href:!0});var yOr=s(OS);MKe=r(yOr,"CLIPTokenizerFast"),yOr.forEach(t),EKe=r(_9," (CLIP model)"),_9.forEach(t),CKe=i(S),Dn=n(S,"LI",{});var b9=s(Dn);xre=n(b9,"STRONG",{});var LOr=s(xre);wKe=r(LOr,"convbert"),LOr.forEach(t),AKe=r(b9," \u2014 "),VS=n(b9,"A",{href:!0});var xOr=s(VS);yKe=r(xOr,"ConvBertTokenizer"),xOr.forEach(t),LKe=r(b9," or "),XS=n(b9,"A",{href:!0});var $Or=s(XS);xKe=r($Or,"ConvBertTokenizerFast"),$Or.forEach(t),$Ke=r(b9," (ConvBERT model)"),b9.forEach(t),kKe=i(S),Gn=n(S,"LI",{});var v9=s(Gn);$re=n(v9,"STRONG",{});var kOr=s($re);SKe=r(kOr,"cpm"),kOr.forEach(t),RKe=r(v9," \u2014 "),zS=n(v9,"A",{href:!0});var SOr=s(zS);BKe=r(SOr,"CpmTokenizer"),SOr.forEach(t),PKe=r(v9," or "),QS=n(v9,"A",{href:!0});var ROr=s(QS);IKe=r(ROr,"CpmTokenizerFast"),ROr.forEach(t),qKe=r(v9," (CPM model)"),v9.forEach(t),NKe=i(S),Ag=n(S,"LI",{});var SCe=s(Ag);kre=n(SCe,"STRONG",{});var BOr=s(kre);jKe=r(BOr,"ctrl"),BOr.forEach(t),DKe=r(SCe," \u2014 "),WS=n(SCe,"A",{href:!0});var POr=s(WS);GKe=r(POr,"CTRLTokenizer"),POr.forEach(t),OKe=r(SCe," (CTRL model)"),SCe.forEach(t),VKe=i(S),On=n(S,"LI",{});var F9=s(On);Sre=n(F9,"STRONG",{});var IOr=s(Sre);XKe=r(IOr,"data2vec-text"),IOr.forEach(t),zKe=r(F9," \u2014 "),HS=n(F9,"A",{href:!0});var qOr=s(HS);QKe=r(qOr,"RobertaTokenizer"),qOr.forEach(t),WKe=r(F9," or "),US=n(F9,"A",{href:!0});var NOr=s(US);HKe=r(NOr,"RobertaTokenizerFast"),NOr.forEach(t),UKe=r(F9," (Data2VecText model)"),F9.forEach(t),JKe=i(S),Vn=n(S,"LI",{});var T9=s(Vn);Rre=n(T9,"STRONG",{});var jOr=s(Rre);YKe=r(jOr,"deberta"),jOr.forEach(t),KKe=r(T9," \u2014 "),JS=n(T9,"A",{href:!0});var DOr=s(JS);ZKe=r(DOr,"DebertaTokenizer"),DOr.forEach(t),eZe=r(T9," or "),YS=n(T9,"A",{href:!0});var GOr=s(YS);oZe=r(GOr,"DebertaTokenizerFast"),GOr.forEach(t),rZe=r(T9," (DeBERTa model)"),T9.forEach(t),tZe=i(S),Xn=n(S,"LI",{});var M9=s(Xn);Bre=n(M9,"STRONG",{});var OOr=s(Bre);aZe=r(OOr,"deberta-v2"),OOr.forEach(t),nZe=r(M9," \u2014 "),KS=n(M9,"A",{href:!0});var VOr=s(KS);sZe=r(VOr,"DebertaV2Tokenizer"),VOr.forEach(t),lZe=r(M9," or "),ZS=n(M9,"A",{href:!0});var XOr=s(ZS);iZe=r(XOr,"DebertaV2TokenizerFast"),XOr.forEach(t),dZe=r(M9," (DeBERTa-v2 model)"),M9.forEach(t),cZe=i(S),zn=n(S,"LI",{});var E9=s(zn);Pre=n(E9,"STRONG",{});var zOr=s(Pre);fZe=r(zOr,"distilbert"),zOr.forEach(t),mZe=r(E9," \u2014 "),eR=n(E9,"A",{href:!0});var QOr=s(eR);gZe=r(QOr,"DistilBertTokenizer"),QOr.forEach(t),hZe=r(E9," or "),oR=n(E9,"A",{href:!0});var WOr=s(oR);pZe=r(WOr,"DistilBertTokenizerFast"),WOr.forEach(t),uZe=r(E9," (DistilBERT model)"),E9.forEach(t),_Ze=i(S),Qn=n(S,"LI",{});var C9=s(Qn);Ire=n(C9,"STRONG",{});var HOr=s(Ire);bZe=r(HOr,"dpr"),HOr.forEach(t),vZe=r(C9," \u2014 "),rR=n(C9,"A",{href:!0});var UOr=s(rR);FZe=r(UOr,"DPRQuestionEncoderTokenizer"),UOr.forEach(t),TZe=r(C9," or "),tR=n(C9,"A",{href:!0});var JOr=s(tR);MZe=r(JOr,"DPRQuestionEncoderTokenizerFast"),JOr.forEach(t),EZe=r(C9," (DPR model)"),C9.forEach(t),CZe=i(S),Wn=n(S,"LI",{});var w9=s(Wn);qre=n(w9,"STRONG",{});var YOr=s(qre);wZe=r(YOr,"electra"),YOr.forEach(t),AZe=r(w9," \u2014 "),aR=n(w9,"A",{href:!0});var KOr=s(aR);yZe=r(KOr,"ElectraTokenizer"),KOr.forEach(t),LZe=r(w9," or "),nR=n(w9,"A",{href:!0});var ZOr=s(nR);xZe=r(ZOr,"ElectraTokenizerFast"),ZOr.forEach(t),$Ze=r(w9," (ELECTRA model)"),w9.forEach(t),kZe=i(S),yg=n(S,"LI",{});var RCe=s(yg);Nre=n(RCe,"STRONG",{});var eVr=s(Nre);SZe=r(eVr,"flaubert"),eVr.forEach(t),RZe=r(RCe," \u2014 "),sR=n(RCe,"A",{href:!0});var oVr=s(sR);BZe=r(oVr,"FlaubertTokenizer"),oVr.forEach(t),PZe=r(RCe," (FlauBERT model)"),RCe.forEach(t),IZe=i(S),Hn=n(S,"LI",{});var A9=s(Hn);jre=n(A9,"STRONG",{});var rVr=s(jre);qZe=r(rVr,"fnet"),rVr.forEach(t),NZe=r(A9," \u2014 "),lR=n(A9,"A",{href:!0});var tVr=s(lR);jZe=r(tVr,"FNetTokenizer"),tVr.forEach(t),DZe=r(A9," or "),iR=n(A9,"A",{href:!0});var aVr=s(iR);GZe=r(aVr,"FNetTokenizerFast"),aVr.forEach(t),OZe=r(A9," (FNet model)"),A9.forEach(t),VZe=i(S),Lg=n(S,"LI",{});var BCe=s(Lg);Dre=n(BCe,"STRONG",{});var nVr=s(Dre);XZe=r(nVr,"fsmt"),nVr.forEach(t),zZe=r(BCe," \u2014 "),dR=n(BCe,"A",{href:!0});var sVr=s(dR);QZe=r(sVr,"FSMTTokenizer"),sVr.forEach(t),WZe=r(BCe," (FairSeq Machine-Translation model)"),BCe.forEach(t),HZe=i(S),Un=n(S,"LI",{});var y9=s(Un);Gre=n(y9,"STRONG",{});var lVr=s(Gre);UZe=r(lVr,"funnel"),lVr.forEach(t),JZe=r(y9," \u2014 "),cR=n(y9,"A",{href:!0});var iVr=s(cR);YZe=r(iVr,"FunnelTokenizer"),iVr.forEach(t),KZe=r(y9," or "),fR=n(y9,"A",{href:!0});var dVr=s(fR);ZZe=r(dVr,"FunnelTokenizerFast"),dVr.forEach(t),eeo=r(y9," (Funnel Transformer model)"),y9.forEach(t),oeo=i(S),Jn=n(S,"LI",{});var L9=s(Jn);Ore=n(L9,"STRONG",{});var cVr=s(Ore);reo=r(cVr,"gpt2"),cVr.forEach(t),teo=r(L9," \u2014 "),mR=n(L9,"A",{href:!0});var fVr=s(mR);aeo=r(fVr,"GPT2Tokenizer"),fVr.forEach(t),neo=r(L9," or "),gR=n(L9,"A",{href:!0});var mVr=s(gR);seo=r(mVr,"GPT2TokenizerFast"),mVr.forEach(t),leo=r(L9," (OpenAI GPT-2 model)"),L9.forEach(t),ieo=i(S),Yn=n(S,"LI",{});var x9=s(Yn);Vre=n(x9,"STRONG",{});var gVr=s(Vre);deo=r(gVr,"gpt_neo"),gVr.forEach(t),ceo=r(x9," \u2014 "),hR=n(x9,"A",{href:!0});var hVr=s(hR);feo=r(hVr,"GPT2Tokenizer"),hVr.forEach(t),meo=r(x9," or "),pR=n(x9,"A",{href:!0});var pVr=s(pR);geo=r(pVr,"GPT2TokenizerFast"),pVr.forEach(t),heo=r(x9," (GPT Neo model)"),x9.forEach(t),peo=i(S),Kn=n(S,"LI",{});var $9=s(Kn);Xre=n($9,"STRONG",{});var uVr=s(Xre);ueo=r(uVr,"gptj"),uVr.forEach(t),_eo=r($9," \u2014 "),uR=n($9,"A",{href:!0});var _Vr=s(uR);beo=r(_Vr,"GPT2Tokenizer"),_Vr.forEach(t),veo=r($9," or "),_R=n($9,"A",{href:!0});var bVr=s(_R);Feo=r(bVr,"GPT2TokenizerFast"),bVr.forEach(t),Teo=r($9," (GPT-J model)"),$9.forEach(t),Meo=i(S),Zn=n(S,"LI",{});var k9=s(Zn);zre=n(k9,"STRONG",{});var vVr=s(zre);Eeo=r(vVr,"herbert"),vVr.forEach(t),Ceo=r(k9," \u2014 "),bR=n(k9,"A",{href:!0});var FVr=s(bR);weo=r(FVr,"HerbertTokenizer"),FVr.forEach(t),Aeo=r(k9," or "),vR=n(k9,"A",{href:!0});var TVr=s(vR);yeo=r(TVr,"HerbertTokenizerFast"),TVr.forEach(t),Leo=r(k9," (HerBERT model)"),k9.forEach(t),xeo=i(S),xg=n(S,"LI",{});var PCe=s(xg);Qre=n(PCe,"STRONG",{});var MVr=s(Qre);$eo=r(MVr,"hubert"),MVr.forEach(t),keo=r(PCe," \u2014 "),FR=n(PCe,"A",{href:!0});var EVr=s(FR);Seo=r(EVr,"Wav2Vec2CTCTokenizer"),EVr.forEach(t),Reo=r(PCe," (Hubert model)"),PCe.forEach(t),Beo=i(S),es=n(S,"LI",{});var S9=s(es);Wre=n(S9,"STRONG",{});var CVr=s(Wre);Peo=r(CVr,"ibert"),CVr.forEach(t),Ieo=r(S9," \u2014 "),TR=n(S9,"A",{href:!0});var wVr=s(TR);qeo=r(wVr,"RobertaTokenizer"),wVr.forEach(t),Neo=r(S9," or "),MR=n(S9,"A",{href:!0});var AVr=s(MR);jeo=r(AVr,"RobertaTokenizerFast"),AVr.forEach(t),Deo=r(S9," (I-BERT model)"),S9.forEach(t),Geo=i(S),os=n(S,"LI",{});var R9=s(os);Hre=n(R9,"STRONG",{});var yVr=s(Hre);Oeo=r(yVr,"layoutlm"),yVr.forEach(t),Veo=r(R9," \u2014 "),ER=n(R9,"A",{href:!0});var LVr=s(ER);Xeo=r(LVr,"LayoutLMTokenizer"),LVr.forEach(t),zeo=r(R9," or "),CR=n(R9,"A",{href:!0});var xVr=s(CR);Qeo=r(xVr,"LayoutLMTokenizerFast"),xVr.forEach(t),Weo=r(R9," (LayoutLM model)"),R9.forEach(t),Heo=i(S),rs=n(S,"LI",{});var B9=s(rs);Ure=n(B9,"STRONG",{});var $Vr=s(Ure);Ueo=r($Vr,"layoutlmv2"),$Vr.forEach(t),Jeo=r(B9," \u2014 "),wR=n(B9,"A",{href:!0});var kVr=s(wR);Yeo=r(kVr,"LayoutLMv2Tokenizer"),kVr.forEach(t),Keo=r(B9," or "),AR=n(B9,"A",{href:!0});var SVr=s(AR);Zeo=r(SVr,"LayoutLMv2TokenizerFast"),SVr.forEach(t),eoo=r(B9," (LayoutLMv2 model)"),B9.forEach(t),ooo=i(S),ts=n(S,"LI",{});var P9=s(ts);Jre=n(P9,"STRONG",{});var RVr=s(Jre);roo=r(RVr,"layoutxlm"),RVr.forEach(t),too=r(P9," \u2014 "),yR=n(P9,"A",{href:!0});var BVr=s(yR);aoo=r(BVr,"LayoutXLMTokenizer"),BVr.forEach(t),noo=r(P9," or "),LR=n(P9,"A",{href:!0});var PVr=s(LR);soo=r(PVr,"LayoutXLMTokenizerFast"),PVr.forEach(t),loo=r(P9," (LayoutXLM model)"),P9.forEach(t),ioo=i(S),as=n(S,"LI",{});var I9=s(as);Yre=n(I9,"STRONG",{});var IVr=s(Yre);doo=r(IVr,"led"),IVr.forEach(t),coo=r(I9," \u2014 "),xR=n(I9,"A",{href:!0});var qVr=s(xR);foo=r(qVr,"LEDTokenizer"),qVr.forEach(t),moo=r(I9," or "),$R=n(I9,"A",{href:!0});var NVr=s($R);goo=r(NVr,"LEDTokenizerFast"),NVr.forEach(t),hoo=r(I9," (LED model)"),I9.forEach(t),poo=i(S),ns=n(S,"LI",{});var q9=s(ns);Kre=n(q9,"STRONG",{});var jVr=s(Kre);uoo=r(jVr,"longformer"),jVr.forEach(t),_oo=r(q9," \u2014 "),kR=n(q9,"A",{href:!0});var DVr=s(kR);boo=r(DVr,"LongformerTokenizer"),DVr.forEach(t),voo=r(q9," or "),SR=n(q9,"A",{href:!0});var GVr=s(SR);Foo=r(GVr,"LongformerTokenizerFast"),GVr.forEach(t),Too=r(q9," (Longformer model)"),q9.forEach(t),Moo=i(S),$g=n(S,"LI",{});var ICe=s($g);Zre=n(ICe,"STRONG",{});var OVr=s(Zre);Eoo=r(OVr,"luke"),OVr.forEach(t),Coo=r(ICe," \u2014 "),RR=n(ICe,"A",{href:!0});var VVr=s(RR);woo=r(VVr,"LukeTokenizer"),VVr.forEach(t),Aoo=r(ICe," (LUKE model)"),ICe.forEach(t),yoo=i(S),ss=n(S,"LI",{});var N9=s(ss);ete=n(N9,"STRONG",{});var XVr=s(ete);Loo=r(XVr,"lxmert"),XVr.forEach(t),xoo=r(N9," \u2014 "),BR=n(N9,"A",{href:!0});var zVr=s(BR);$oo=r(zVr,"LxmertTokenizer"),zVr.forEach(t),koo=r(N9," or "),PR=n(N9,"A",{href:!0});var QVr=s(PR);Soo=r(QVr,"LxmertTokenizerFast"),QVr.forEach(t),Roo=r(N9," (LXMERT model)"),N9.forEach(t),Boo=i(S),kg=n(S,"LI",{});var qCe=s(kg);ote=n(qCe,"STRONG",{});var WVr=s(ote);Poo=r(WVr,"m2m_100"),WVr.forEach(t),Ioo=r(qCe," \u2014 "),IR=n(qCe,"A",{href:!0});var HVr=s(IR);qoo=r(HVr,"M2M100Tokenizer"),HVr.forEach(t),Noo=r(qCe," (M2M100 model)"),qCe.forEach(t),joo=i(S),Sg=n(S,"LI",{});var NCe=s(Sg);rte=n(NCe,"STRONG",{});var UVr=s(rte);Doo=r(UVr,"marian"),UVr.forEach(t),Goo=r(NCe," \u2014 "),qR=n(NCe,"A",{href:!0});var JVr=s(qR);Ooo=r(JVr,"MarianTokenizer"),JVr.forEach(t),Voo=r(NCe," (Marian model)"),NCe.forEach(t),Xoo=i(S),ls=n(S,"LI",{});var j9=s(ls);tte=n(j9,"STRONG",{});var YVr=s(tte);zoo=r(YVr,"mbart"),YVr.forEach(t),Qoo=r(j9," \u2014 "),NR=n(j9,"A",{href:!0});var KVr=s(NR);Woo=r(KVr,"MBartTokenizer"),KVr.forEach(t),Hoo=r(j9," or "),jR=n(j9,"A",{href:!0});var ZVr=s(jR);Uoo=r(ZVr,"MBartTokenizerFast"),ZVr.forEach(t),Joo=r(j9," (mBART model)"),j9.forEach(t),Yoo=i(S),is=n(S,"LI",{});var D9=s(is);ate=n(D9,"STRONG",{});var eXr=s(ate);Koo=r(eXr,"mbart50"),eXr.forEach(t),Zoo=r(D9," \u2014 "),DR=n(D9,"A",{href:!0});var oXr=s(DR);ero=r(oXr,"MBart50Tokenizer"),oXr.forEach(t),oro=r(D9," or "),GR=n(D9,"A",{href:!0});var rXr=s(GR);rro=r(rXr,"MBart50TokenizerFast"),rXr.forEach(t),tro=r(D9," (mBART-50 model)"),D9.forEach(t),aro=i(S),ds=n(S,"LI",{});var G9=s(ds);nte=n(G9,"STRONG",{});var tXr=s(nte);nro=r(tXr,"megatron-bert"),tXr.forEach(t),sro=r(G9," \u2014 "),OR=n(G9,"A",{href:!0});var aXr=s(OR);lro=r(aXr,"BertTokenizer"),aXr.forEach(t),iro=r(G9," or "),VR=n(G9,"A",{href:!0});var nXr=s(VR);dro=r(nXr,"BertTokenizerFast"),nXr.forEach(t),cro=r(G9," (MegatronBert model)"),G9.forEach(t),fro=i(S),Rg=n(S,"LI",{});var jCe=s(Rg);ste=n(jCe,"STRONG",{});var sXr=s(ste);mro=r(sXr,"mluke"),sXr.forEach(t),gro=r(jCe," \u2014 "),XR=n(jCe,"A",{href:!0});var lXr=s(XR);hro=r(lXr,"MLukeTokenizer"),lXr.forEach(t),pro=r(jCe," (mLUKE model)"),jCe.forEach(t),uro=i(S),cs=n(S,"LI",{});var O9=s(cs);lte=n(O9,"STRONG",{});var iXr=s(lte);_ro=r(iXr,"mobilebert"),iXr.forEach(t),bro=r(O9," \u2014 "),zR=n(O9,"A",{href:!0});var dXr=s(zR);vro=r(dXr,"MobileBertTokenizer"),dXr.forEach(t),Fro=r(O9," or "),QR=n(O9,"A",{href:!0});var cXr=s(QR);Tro=r(cXr,"MobileBertTokenizerFast"),cXr.forEach(t),Mro=r(O9," (MobileBERT model)"),O9.forEach(t),Ero=i(S),fs=n(S,"LI",{});var V9=s(fs);ite=n(V9,"STRONG",{});var fXr=s(ite);Cro=r(fXr,"mpnet"),fXr.forEach(t),wro=r(V9," \u2014 "),WR=n(V9,"A",{href:!0});var mXr=s(WR);Aro=r(mXr,"MPNetTokenizer"),mXr.forEach(t),yro=r(V9," or "),HR=n(V9,"A",{href:!0});var gXr=s(HR);Lro=r(gXr,"MPNetTokenizerFast"),gXr.forEach(t),xro=r(V9," (MPNet model)"),V9.forEach(t),$ro=i(S),ms=n(S,"LI",{});var X9=s(ms);dte=n(X9,"STRONG",{});var hXr=s(dte);kro=r(hXr,"mt5"),hXr.forEach(t),Sro=r(X9," \u2014 "),UR=n(X9,"A",{href:!0});var pXr=s(UR);Rro=r(pXr,"MT5Tokenizer"),pXr.forEach(t),Bro=r(X9," or "),JR=n(X9,"A",{href:!0});var uXr=s(JR);Pro=r(uXr,"MT5TokenizerFast"),uXr.forEach(t),Iro=r(X9," (mT5 model)"),X9.forEach(t),qro=i(S),gs=n(S,"LI",{});var z9=s(gs);cte=n(z9,"STRONG",{});var _Xr=s(cte);Nro=r(_Xr,"nystromformer"),_Xr.forEach(t),jro=r(z9," \u2014 "),YR=n(z9,"A",{href:!0});var bXr=s(YR);Dro=r(bXr,"AlbertTokenizer"),bXr.forEach(t),Gro=r(z9," or "),KR=n(z9,"A",{href:!0});var vXr=s(KR);Oro=r(vXr,"AlbertTokenizerFast"),vXr.forEach(t),Vro=r(z9," (Nystromformer model)"),z9.forEach(t),Xro=i(S),hs=n(S,"LI",{});var Q9=s(hs);fte=n(Q9,"STRONG",{});var FXr=s(fte);zro=r(FXr,"openai-gpt"),FXr.forEach(t),Qro=r(Q9," \u2014 "),ZR=n(Q9,"A",{href:!0});var TXr=s(ZR);Wro=r(TXr,"OpenAIGPTTokenizer"),TXr.forEach(t),Hro=r(Q9," or "),eB=n(Q9,"A",{href:!0});var MXr=s(eB);Uro=r(MXr,"OpenAIGPTTokenizerFast"),MXr.forEach(t),Jro=r(Q9," (OpenAI GPT model)"),Q9.forEach(t),Yro=i(S),ps=n(S,"LI",{});var W9=s(ps);mte=n(W9,"STRONG",{});var EXr=s(mte);Kro=r(EXr,"pegasus"),EXr.forEach(t),Zro=r(W9," \u2014 "),oB=n(W9,"A",{href:!0});var CXr=s(oB);eto=r(CXr,"PegasusTokenizer"),CXr.forEach(t),oto=r(W9," or "),rB=n(W9,"A",{href:!0});var wXr=s(rB);rto=r(wXr,"PegasusTokenizerFast"),wXr.forEach(t),tto=r(W9," (Pegasus model)"),W9.forEach(t),ato=i(S),Bg=n(S,"LI",{});var DCe=s(Bg);gte=n(DCe,"STRONG",{});var AXr=s(gte);nto=r(AXr,"perceiver"),AXr.forEach(t),sto=r(DCe," \u2014 "),tB=n(DCe,"A",{href:!0});var yXr=s(tB);lto=r(yXr,"PerceiverTokenizer"),yXr.forEach(t),ito=r(DCe," (Perceiver model)"),DCe.forEach(t),dto=i(S),Pg=n(S,"LI",{});var GCe=s(Pg);hte=n(GCe,"STRONG",{});var LXr=s(hte);cto=r(LXr,"phobert"),LXr.forEach(t),fto=r(GCe," \u2014 "),aB=n(GCe,"A",{href:!0});var xXr=s(aB);mto=r(xXr,"PhobertTokenizer"),xXr.forEach(t),gto=r(GCe," (PhoBERT model)"),GCe.forEach(t),hto=i(S),Ig=n(S,"LI",{});var OCe=s(Ig);pte=n(OCe,"STRONG",{});var $Xr=s(pte);pto=r($Xr,"plbart"),$Xr.forEach(t),uto=r(OCe," \u2014 "),nB=n(OCe,"A",{href:!0});var kXr=s(nB);_to=r(kXr,"PLBartTokenizer"),kXr.forEach(t),bto=r(OCe," (PLBart model)"),OCe.forEach(t),vto=i(S),qg=n(S,"LI",{});var VCe=s(qg);ute=n(VCe,"STRONG",{});var SXr=s(ute);Fto=r(SXr,"prophetnet"),SXr.forEach(t),Tto=r(VCe," \u2014 "),sB=n(VCe,"A",{href:!0});var RXr=s(sB);Mto=r(RXr,"ProphetNetTokenizer"),RXr.forEach(t),Eto=r(VCe," (ProphetNet model)"),VCe.forEach(t),Cto=i(S),us=n(S,"LI",{});var H9=s(us);_te=n(H9,"STRONG",{});var BXr=s(_te);wto=r(BXr,"qdqbert"),BXr.forEach(t),Ato=r(H9," \u2014 "),lB=n(H9,"A",{href:!0});var PXr=s(lB);yto=r(PXr,"BertTokenizer"),PXr.forEach(t),Lto=r(H9," or "),iB=n(H9,"A",{href:!0});var IXr=s(iB);xto=r(IXr,"BertTokenizerFast"),IXr.forEach(t),$to=r(H9," (QDQBert model)"),H9.forEach(t),kto=i(S),Ng=n(S,"LI",{});var XCe=s(Ng);bte=n(XCe,"STRONG",{});var qXr=s(bte);Sto=r(qXr,"rag"),qXr.forEach(t),Rto=r(XCe," \u2014 "),dB=n(XCe,"A",{href:!0});var NXr=s(dB);Bto=r(NXr,"RagTokenizer"),NXr.forEach(t),Pto=r(XCe," (RAG model)"),XCe.forEach(t),Ito=i(S),_s=n(S,"LI",{});var U9=s(_s);vte=n(U9,"STRONG",{});var jXr=s(vte);qto=r(jXr,"realm"),jXr.forEach(t),Nto=r(U9," \u2014 "),cB=n(U9,"A",{href:!0});var DXr=s(cB);jto=r(DXr,"RealmTokenizer"),DXr.forEach(t),Dto=r(U9," or "),fB=n(U9,"A",{href:!0});var GXr=s(fB);Gto=r(GXr,"RealmTokenizerFast"),GXr.forEach(t),Oto=r(U9," (Realm model)"),U9.forEach(t),Vto=i(S),bs=n(S,"LI",{});var J9=s(bs);Fte=n(J9,"STRONG",{});var OXr=s(Fte);Xto=r(OXr,"reformer"),OXr.forEach(t),zto=r(J9," \u2014 "),mB=n(J9,"A",{href:!0});var VXr=s(mB);Qto=r(VXr,"ReformerTokenizer"),VXr.forEach(t),Wto=r(J9," or "),gB=n(J9,"A",{href:!0});var XXr=s(gB);Hto=r(XXr,"ReformerTokenizerFast"),XXr.forEach(t),Uto=r(J9," (Reformer model)"),J9.forEach(t),Jto=i(S),vs=n(S,"LI",{});var Y9=s(vs);Tte=n(Y9,"STRONG",{});var zXr=s(Tte);Yto=r(zXr,"rembert"),zXr.forEach(t),Kto=r(Y9," \u2014 "),hB=n(Y9,"A",{href:!0});var QXr=s(hB);Zto=r(QXr,"RemBertTokenizer"),QXr.forEach(t),eao=r(Y9," or "),pB=n(Y9,"A",{href:!0});var WXr=s(pB);oao=r(WXr,"RemBertTokenizerFast"),WXr.forEach(t),rao=r(Y9," (RemBERT model)"),Y9.forEach(t),tao=i(S),Fs=n(S,"LI",{});var K9=s(Fs);Mte=n(K9,"STRONG",{});var HXr=s(Mte);aao=r(HXr,"retribert"),HXr.forEach(t),nao=r(K9," \u2014 "),uB=n(K9,"A",{href:!0});var UXr=s(uB);sao=r(UXr,"RetriBertTokenizer"),UXr.forEach(t),lao=r(K9," or "),_B=n(K9,"A",{href:!0});var JXr=s(_B);iao=r(JXr,"RetriBertTokenizerFast"),JXr.forEach(t),dao=r(K9," (RetriBERT model)"),K9.forEach(t),cao=i(S),Ts=n(S,"LI",{});var Z9=s(Ts);Ete=n(Z9,"STRONG",{});var YXr=s(Ete);fao=r(YXr,"roberta"),YXr.forEach(t),mao=r(Z9," \u2014 "),bB=n(Z9,"A",{href:!0});var KXr=s(bB);gao=r(KXr,"RobertaTokenizer"),KXr.forEach(t),hao=r(Z9," or "),vB=n(Z9,"A",{href:!0});var ZXr=s(vB);pao=r(ZXr,"RobertaTokenizerFast"),ZXr.forEach(t),uao=r(Z9," (RoBERTa model)"),Z9.forEach(t),_ao=i(S),Ms=n(S,"LI",{});var e$=s(Ms);Cte=n(e$,"STRONG",{});var ezr=s(Cte);bao=r(ezr,"roformer"),ezr.forEach(t),vao=r(e$," \u2014 "),FB=n(e$,"A",{href:!0});var ozr=s(FB);Fao=r(ozr,"RoFormerTokenizer"),ozr.forEach(t),Tao=r(e$," or "),TB=n(e$,"A",{href:!0});var rzr=s(TB);Mao=r(rzr,"RoFormerTokenizerFast"),rzr.forEach(t),Eao=r(e$," (RoFormer model)"),e$.forEach(t),Cao=i(S),jg=n(S,"LI",{});var zCe=s(jg);wte=n(zCe,"STRONG",{});var tzr=s(wte);wao=r(tzr,"speech_to_text"),tzr.forEach(t),Aao=r(zCe," \u2014 "),MB=n(zCe,"A",{href:!0});var azr=s(MB);yao=r(azr,"Speech2TextTokenizer"),azr.forEach(t),Lao=r(zCe," (Speech2Text model)"),zCe.forEach(t),xao=i(S),Dg=n(S,"LI",{});var QCe=s(Dg);Ate=n(QCe,"STRONG",{});var nzr=s(Ate);$ao=r(nzr,"speech_to_text_2"),nzr.forEach(t),kao=r(QCe," \u2014 "),EB=n(QCe,"A",{href:!0});var szr=s(EB);Sao=r(szr,"Speech2Text2Tokenizer"),szr.forEach(t),Rao=r(QCe," (Speech2Text2 model)"),QCe.forEach(t),Bao=i(S),Es=n(S,"LI",{});var o$=s(Es);yte=n(o$,"STRONG",{});var lzr=s(yte);Pao=r(lzr,"splinter"),lzr.forEach(t),Iao=r(o$," \u2014 "),CB=n(o$,"A",{href:!0});var izr=s(CB);qao=r(izr,"SplinterTokenizer"),izr.forEach(t),Nao=r(o$," or "),wB=n(o$,"A",{href:!0});var dzr=s(wB);jao=r(dzr,"SplinterTokenizerFast"),dzr.forEach(t),Dao=r(o$," (Splinter model)"),o$.forEach(t),Gao=i(S),Cs=n(S,"LI",{});var r$=s(Cs);Lte=n(r$,"STRONG",{});var czr=s(Lte);Oao=r(czr,"squeezebert"),czr.forEach(t),Vao=r(r$," \u2014 "),AB=n(r$,"A",{href:!0});var fzr=s(AB);Xao=r(fzr,"SqueezeBertTokenizer"),fzr.forEach(t),zao=r(r$," or "),yB=n(r$,"A",{href:!0});var mzr=s(yB);Qao=r(mzr,"SqueezeBertTokenizerFast"),mzr.forEach(t),Wao=r(r$," (SqueezeBERT model)"),r$.forEach(t),Hao=i(S),ws=n(S,"LI",{});var t$=s(ws);xte=n(t$,"STRONG",{});var gzr=s(xte);Uao=r(gzr,"t5"),gzr.forEach(t),Jao=r(t$," \u2014 "),LB=n(t$,"A",{href:!0});var hzr=s(LB);Yao=r(hzr,"T5Tokenizer"),hzr.forEach(t),Kao=r(t$," or "),xB=n(t$,"A",{href:!0});var pzr=s(xB);Zao=r(pzr,"T5TokenizerFast"),pzr.forEach(t),eno=r(t$," (T5 model)"),t$.forEach(t),ono=i(S),Gg=n(S,"LI",{});var WCe=s(Gg);$te=n(WCe,"STRONG",{});var uzr=s($te);rno=r(uzr,"tapas"),uzr.forEach(t),tno=r(WCe," \u2014 "),$B=n(WCe,"A",{href:!0});var _zr=s($B);ano=r(_zr,"TapasTokenizer"),_zr.forEach(t),nno=r(WCe," (TAPAS model)"),WCe.forEach(t),sno=i(S),Og=n(S,"LI",{});var HCe=s(Og);kte=n(HCe,"STRONG",{});var bzr=s(kte);lno=r(bzr,"tapex"),bzr.forEach(t),ino=r(HCe," \u2014 "),kB=n(HCe,"A",{href:!0});var vzr=s(kB);dno=r(vzr,"TapexTokenizer"),vzr.forEach(t),cno=r(HCe," (TAPEX model)"),HCe.forEach(t),fno=i(S),Vg=n(S,"LI",{});var UCe=s(Vg);Ste=n(UCe,"STRONG",{});var Fzr=s(Ste);mno=r(Fzr,"transfo-xl"),Fzr.forEach(t),gno=r(UCe," \u2014 "),SB=n(UCe,"A",{href:!0});var Tzr=s(SB);hno=r(Tzr,"TransfoXLTokenizer"),Tzr.forEach(t),pno=r(UCe," (Transformer-XL model)"),UCe.forEach(t),uno=i(S),As=n(S,"LI",{});var a$=s(As);Rte=n(a$,"STRONG",{});var Mzr=s(Rte);_no=r(Mzr,"visual_bert"),Mzr.forEach(t),bno=r(a$," \u2014 "),RB=n(a$,"A",{href:!0});var Ezr=s(RB);vno=r(Ezr,"BertTokenizer"),Ezr.forEach(t),Fno=r(a$," or "),BB=n(a$,"A",{href:!0});var Czr=s(BB);Tno=r(Czr,"BertTokenizerFast"),Czr.forEach(t),Mno=r(a$," (VisualBert model)"),a$.forEach(t),Eno=i(S),Xg=n(S,"LI",{});var JCe=s(Xg);Bte=n(JCe,"STRONG",{});var wzr=s(Bte);Cno=r(wzr,"wav2vec2"),wzr.forEach(t),wno=r(JCe," \u2014 "),PB=n(JCe,"A",{href:!0});var Azr=s(PB);Ano=r(Azr,"Wav2Vec2CTCTokenizer"),Azr.forEach(t),yno=r(JCe," (Wav2Vec2 model)"),JCe.forEach(t),Lno=i(S),zg=n(S,"LI",{});var YCe=s(zg);Pte=n(YCe,"STRONG",{});var yzr=s(Pte);xno=r(yzr,"wav2vec2_phoneme"),yzr.forEach(t),$no=r(YCe," \u2014 "),IB=n(YCe,"A",{href:!0});var Lzr=s(IB);kno=r(Lzr,"Wav2Vec2PhonemeCTCTokenizer"),Lzr.forEach(t),Sno=r(YCe," (Wav2Vec2Phoneme model)"),YCe.forEach(t),Rno=i(S),ys=n(S,"LI",{});var n$=s(ys);Ite=n(n$,"STRONG",{});var xzr=s(Ite);Bno=r(xzr,"xglm"),xzr.forEach(t),Pno=r(n$," \u2014 "),qB=n(n$,"A",{href:!0});var $zr=s(qB);Ino=r($zr,"XGLMTokenizer"),$zr.forEach(t),qno=r(n$," or "),NB=n(n$,"A",{href:!0});var kzr=s(NB);Nno=r(kzr,"XGLMTokenizerFast"),kzr.forEach(t),jno=r(n$," (XGLM model)"),n$.forEach(t),Dno=i(S),Qg=n(S,"LI",{});var KCe=s(Qg);qte=n(KCe,"STRONG",{});var Szr=s(qte);Gno=r(Szr,"xlm"),Szr.forEach(t),Ono=r(KCe," \u2014 "),jB=n(KCe,"A",{href:!0});var Rzr=s(jB);Vno=r(Rzr,"XLMTokenizer"),Rzr.forEach(t),Xno=r(KCe," (XLM model)"),KCe.forEach(t),zno=i(S),Wg=n(S,"LI",{});var ZCe=s(Wg);Nte=n(ZCe,"STRONG",{});var Bzr=s(Nte);Qno=r(Bzr,"xlm-prophetnet"),Bzr.forEach(t),Wno=r(ZCe," \u2014 "),DB=n(ZCe,"A",{href:!0});var Pzr=s(DB);Hno=r(Pzr,"XLMProphetNetTokenizer"),Pzr.forEach(t),Uno=r(ZCe," (XLMProphetNet model)"),ZCe.forEach(t),Jno=i(S),Ls=n(S,"LI",{});var s$=s(Ls);jte=n(s$,"STRONG",{});var Izr=s(jte);Yno=r(Izr,"xlm-roberta"),Izr.forEach(t),Kno=r(s$," \u2014 "),GB=n(s$,"A",{href:!0});var qzr=s(GB);Zno=r(qzr,"XLMRobertaTokenizer"),qzr.forEach(t),eso=r(s$," or "),OB=n(s$,"A",{href:!0});var Nzr=s(OB);oso=r(Nzr,"XLMRobertaTokenizerFast"),Nzr.forEach(t),rso=r(s$," (XLM-RoBERTa model)"),s$.forEach(t),tso=i(S),xs=n(S,"LI",{});var l$=s(xs);Dte=n(l$,"STRONG",{});var jzr=s(Dte);aso=r(jzr,"xlm-roberta-xl"),jzr.forEach(t),nso=r(l$," \u2014 "),VB=n(l$,"A",{href:!0});var Dzr=s(VB);sso=r(Dzr,"RobertaTokenizer"),Dzr.forEach(t),lso=r(l$," or "),XB=n(l$,"A",{href:!0});var Gzr=s(XB);iso=r(Gzr,"RobertaTokenizerFast"),Gzr.forEach(t),dso=r(l$," (XLM-RoBERTa-XL model)"),l$.forEach(t),cso=i(S),$s=n(S,"LI",{});var i$=s($s);Gte=n(i$,"STRONG",{});var Ozr=s(Gte);fso=r(Ozr,"xlnet"),Ozr.forEach(t),mso=r(i$," \u2014 "),zB=n(i$,"A",{href:!0});var Vzr=s(zB);gso=r(Vzr,"XLNetTokenizer"),Vzr.forEach(t),hso=r(i$," or "),QB=n(i$,"A",{href:!0});var Xzr=s(QB);pso=r(Xzr,"XLNetTokenizerFast"),Xzr.forEach(t),uso=r(i$," (XLNet model)"),i$.forEach(t),_so=i(S),ks=n(S,"LI",{});var d$=s(ks);Ote=n(d$,"STRONG",{});var zzr=s(Ote);bso=r(zzr,"yoso"),zzr.forEach(t),vso=r(d$," \u2014 "),WB=n(d$,"A",{href:!0});var Qzr=s(WB);Fso=r(Qzr,"AlbertTokenizer"),Qzr.forEach(t),Tso=r(d$," or "),HB=n(d$,"A",{href:!0});var Wzr=s(HB);Mso=r(Wzr,"AlbertTokenizerFast"),Wzr.forEach(t),Eso=r(d$," (YOSO model)"),d$.forEach(t),S.forEach(t),Cso=i(Is),T(Hg.$$.fragment,Is),Is.forEach(t),wso=i(Ps),Ug=n(Ps,"DIV",{class:!0});var Wqe=s(Ug);T(d0.$$.fragment,Wqe),Aso=i(Wqe),Vte=n(Wqe,"P",{});var Hzr=s(Vte);yso=r(Hzr,"Register a new tokenizer in this mapping."),Hzr.forEach(t),Wqe.forEach(t),Ps.forEach(t),HPe=i(f),bi=n(f,"H2",{class:!0});var Hqe=s(bi);Jg=n(Hqe,"A",{id:!0,class:!0,href:!0});var Uzr=s(Jg);Xte=n(Uzr,"SPAN",{});var Jzr=s(Xte);T(c0.$$.fragment,Jzr),Jzr.forEach(t),Uzr.forEach(t),Lso=i(Hqe),zte=n(Hqe,"SPAN",{});var Yzr=s(zte);xso=r(Yzr,"AutoFeatureExtractor"),Yzr.forEach(t),Hqe.forEach(t),UPe=i(f),Ao=n(f,"DIV",{class:!0});var qs=s(Ao);T(f0.$$.fragment,qs),$so=i(qs),m0=n(qs,"P",{});var Uqe=s(m0);kso=r(Uqe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),UB=n(Uqe,"A",{href:!0});var Kzr=s(UB);Sso=r(Kzr,"AutoFeatureExtractor.from_pretrained()"),Kzr.forEach(t),Rso=r(Uqe," class method."),Uqe.forEach(t),Bso=i(qs),g0=n(qs,"P",{});var Jqe=s(g0);Pso=r(Jqe,"This class cannot be instantiated directly using "),Qte=n(Jqe,"CODE",{});var Zzr=s(Qte);Iso=r(Zzr,"__init__()"),Zzr.forEach(t),qso=r(Jqe," (throws an error)."),Jqe.forEach(t),Nso=i(qs),Qe=n(qs,"DIV",{class:!0});var Yt=s(Qe);T(h0.$$.fragment,Yt),jso=i(Yt),Wte=n(Yt,"P",{});var eQr=s(Wte);Dso=r(eQr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),eQr.forEach(t),Gso=i(Yt),wa=n(Yt,"P",{});var Kw=s(wa);Oso=r(Kw,"The feature extractor class to instantiate is selected based on the "),Hte=n(Kw,"CODE",{});var oQr=s(Hte);Vso=r(oQr,"model_type"),oQr.forEach(t),Xso=r(Kw,` property of the config object
(either passed as an argument or loaded from `),Ute=n(Kw,"CODE",{});var rQr=s(Ute);zso=r(rQr,"pretrained_model_name_or_path"),rQr.forEach(t),Qso=r(Kw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Jte=n(Kw,"CODE",{});var tQr=s(Jte);Wso=r(tQr,"pretrained_model_name_or_path"),tQr.forEach(t),Hso=r(Kw,":"),Kw.forEach(t),Uso=i(Yt),oe=n(Yt,"UL",{});var ae=s(oe);Yg=n(ae,"LI",{});var ewe=s(Yg);Yte=n(ewe,"STRONG",{});var aQr=s(Yte);Jso=r(aQr,"beit"),aQr.forEach(t),Yso=r(ewe," \u2014 "),JB=n(ewe,"A",{href:!0});var nQr=s(JB);Kso=r(nQr,"BeitFeatureExtractor"),nQr.forEach(t),Zso=r(ewe," (BEiT model)"),ewe.forEach(t),elo=i(ae),Kg=n(ae,"LI",{});var owe=s(Kg);Kte=n(owe,"STRONG",{});var sQr=s(Kte);olo=r(sQr,"clip"),sQr.forEach(t),rlo=r(owe," \u2014 "),YB=n(owe,"A",{href:!0});var lQr=s(YB);tlo=r(lQr,"CLIPFeatureExtractor"),lQr.forEach(t),alo=r(owe," (CLIP model)"),owe.forEach(t),nlo=i(ae),Zg=n(ae,"LI",{});var rwe=s(Zg);Zte=n(rwe,"STRONG",{});var iQr=s(Zte);slo=r(iQr,"convnext"),iQr.forEach(t),llo=r(rwe," \u2014 "),KB=n(rwe,"A",{href:!0});var dQr=s(KB);ilo=r(dQr,"ConvNextFeatureExtractor"),dQr.forEach(t),dlo=r(rwe," (ConvNext model)"),rwe.forEach(t),clo=i(ae),eh=n(ae,"LI",{});var twe=s(eh);eae=n(twe,"STRONG",{});var cQr=s(eae);flo=r(cQr,"data2vec-audio"),cQr.forEach(t),mlo=r(twe," \u2014 "),ZB=n(twe,"A",{href:!0});var fQr=s(ZB);glo=r(fQr,"Wav2Vec2FeatureExtractor"),fQr.forEach(t),hlo=r(twe," (Data2VecAudio model)"),twe.forEach(t),plo=i(ae),oh=n(ae,"LI",{});var awe=s(oh);oae=n(awe,"STRONG",{});var mQr=s(oae);ulo=r(mQr,"data2vec-vision"),mQr.forEach(t),_lo=r(awe," \u2014 "),eP=n(awe,"A",{href:!0});var gQr=s(eP);blo=r(gQr,"BeitFeatureExtractor"),gQr.forEach(t),vlo=r(awe," (Data2VecVision model)"),awe.forEach(t),Flo=i(ae),rh=n(ae,"LI",{});var nwe=s(rh);rae=n(nwe,"STRONG",{});var hQr=s(rae);Tlo=r(hQr,"deit"),hQr.forEach(t),Mlo=r(nwe," \u2014 "),oP=n(nwe,"A",{href:!0});var pQr=s(oP);Elo=r(pQr,"DeiTFeatureExtractor"),pQr.forEach(t),Clo=r(nwe," (DeiT model)"),nwe.forEach(t),wlo=i(ae),th=n(ae,"LI",{});var swe=s(th);tae=n(swe,"STRONG",{});var uQr=s(tae);Alo=r(uQr,"detr"),uQr.forEach(t),ylo=r(swe," \u2014 "),rP=n(swe,"A",{href:!0});var _Qr=s(rP);Llo=r(_Qr,"DetrFeatureExtractor"),_Qr.forEach(t),xlo=r(swe," (DETR model)"),swe.forEach(t),$lo=i(ae),ah=n(ae,"LI",{});var lwe=s(ah);aae=n(lwe,"STRONG",{});var bQr=s(aae);klo=r(bQr,"dpt"),bQr.forEach(t),Slo=r(lwe," \u2014 "),tP=n(lwe,"A",{href:!0});var vQr=s(tP);Rlo=r(vQr,"DPTFeatureExtractor"),vQr.forEach(t),Blo=r(lwe," (DPT model)"),lwe.forEach(t),Plo=i(ae),nh=n(ae,"LI",{});var iwe=s(nh);nae=n(iwe,"STRONG",{});var FQr=s(nae);Ilo=r(FQr,"flava"),FQr.forEach(t),qlo=r(iwe," \u2014 "),aP=n(iwe,"A",{href:!0});var TQr=s(aP);Nlo=r(TQr,"FlavaFeatureExtractor"),TQr.forEach(t),jlo=r(iwe," (Flava model)"),iwe.forEach(t),Dlo=i(ae),sh=n(ae,"LI",{});var dwe=s(sh);sae=n(dwe,"STRONG",{});var MQr=s(sae);Glo=r(MQr,"glpn"),MQr.forEach(t),Olo=r(dwe," \u2014 "),nP=n(dwe,"A",{href:!0});var EQr=s(nP);Vlo=r(EQr,"GLPNFeatureExtractor"),EQr.forEach(t),Xlo=r(dwe," (GLPN model)"),dwe.forEach(t),zlo=i(ae),lh=n(ae,"LI",{});var cwe=s(lh);lae=n(cwe,"STRONG",{});var CQr=s(lae);Qlo=r(CQr,"hubert"),CQr.forEach(t),Wlo=r(cwe," \u2014 "),sP=n(cwe,"A",{href:!0});var wQr=s(sP);Hlo=r(wQr,"Wav2Vec2FeatureExtractor"),wQr.forEach(t),Ulo=r(cwe," (Hubert model)"),cwe.forEach(t),Jlo=i(ae),ih=n(ae,"LI",{});var fwe=s(ih);iae=n(fwe,"STRONG",{});var AQr=s(iae);Ylo=r(AQr,"layoutlmv2"),AQr.forEach(t),Klo=r(fwe," \u2014 "),lP=n(fwe,"A",{href:!0});var yQr=s(lP);Zlo=r(yQr,"LayoutLMv2FeatureExtractor"),yQr.forEach(t),eio=r(fwe," (LayoutLMv2 model)"),fwe.forEach(t),oio=i(ae),dh=n(ae,"LI",{});var mwe=s(dh);dae=n(mwe,"STRONG",{});var LQr=s(dae);rio=r(LQr,"maskformer"),LQr.forEach(t),tio=r(mwe," \u2014 "),iP=n(mwe,"A",{href:!0});var xQr=s(iP);aio=r(xQr,"MaskFormerFeatureExtractor"),xQr.forEach(t),nio=r(mwe," (MaskFormer model)"),mwe.forEach(t),sio=i(ae),ch=n(ae,"LI",{});var gwe=s(ch);cae=n(gwe,"STRONG",{});var $Qr=s(cae);lio=r($Qr,"perceiver"),$Qr.forEach(t),iio=r(gwe," \u2014 "),dP=n(gwe,"A",{href:!0});var kQr=s(dP);dio=r(kQr,"PerceiverFeatureExtractor"),kQr.forEach(t),cio=r(gwe," (Perceiver model)"),gwe.forEach(t),fio=i(ae),fh=n(ae,"LI",{});var hwe=s(fh);fae=n(hwe,"STRONG",{});var SQr=s(fae);mio=r(SQr,"poolformer"),SQr.forEach(t),gio=r(hwe," \u2014 "),cP=n(hwe,"A",{href:!0});var RQr=s(cP);hio=r(RQr,"PoolFormerFeatureExtractor"),RQr.forEach(t),pio=r(hwe," (PoolFormer model)"),hwe.forEach(t),uio=i(ae),mh=n(ae,"LI",{});var pwe=s(mh);mae=n(pwe,"STRONG",{});var BQr=s(mae);_io=r(BQr,"regnet"),BQr.forEach(t),bio=r(pwe," \u2014 "),fP=n(pwe,"A",{href:!0});var PQr=s(fP);vio=r(PQr,"ConvNextFeatureExtractor"),PQr.forEach(t),Fio=r(pwe," (RegNet model)"),pwe.forEach(t),Tio=i(ae),gh=n(ae,"LI",{});var uwe=s(gh);gae=n(uwe,"STRONG",{});var IQr=s(gae);Mio=r(IQr,"resnet"),IQr.forEach(t),Eio=r(uwe," \u2014 "),mP=n(uwe,"A",{href:!0});var qQr=s(mP);Cio=r(qQr,"ConvNextFeatureExtractor"),qQr.forEach(t),wio=r(uwe," (ResNet model)"),uwe.forEach(t),Aio=i(ae),hh=n(ae,"LI",{});var _we=s(hh);hae=n(_we,"STRONG",{});var NQr=s(hae);yio=r(NQr,"segformer"),NQr.forEach(t),Lio=r(_we," \u2014 "),gP=n(_we,"A",{href:!0});var jQr=s(gP);xio=r(jQr,"SegformerFeatureExtractor"),jQr.forEach(t),$io=r(_we," (SegFormer model)"),_we.forEach(t),kio=i(ae),ph=n(ae,"LI",{});var bwe=s(ph);pae=n(bwe,"STRONG",{});var DQr=s(pae);Sio=r(DQr,"speech_to_text"),DQr.forEach(t),Rio=r(bwe," \u2014 "),hP=n(bwe,"A",{href:!0});var GQr=s(hP);Bio=r(GQr,"Speech2TextFeatureExtractor"),GQr.forEach(t),Pio=r(bwe," (Speech2Text model)"),bwe.forEach(t),Iio=i(ae),uh=n(ae,"LI",{});var vwe=s(uh);uae=n(vwe,"STRONG",{});var OQr=s(uae);qio=r(OQr,"swin"),OQr.forEach(t),Nio=r(vwe," \u2014 "),pP=n(vwe,"A",{href:!0});var VQr=s(pP);jio=r(VQr,"ViTFeatureExtractor"),VQr.forEach(t),Dio=r(vwe," (Swin model)"),vwe.forEach(t),Gio=i(ae),_h=n(ae,"LI",{});var Fwe=s(_h);_ae=n(Fwe,"STRONG",{});var XQr=s(_ae);Oio=r(XQr,"van"),XQr.forEach(t),Vio=r(Fwe," \u2014 "),uP=n(Fwe,"A",{href:!0});var zQr=s(uP);Xio=r(zQr,"ConvNextFeatureExtractor"),zQr.forEach(t),zio=r(Fwe," (VAN model)"),Fwe.forEach(t),Qio=i(ae),bh=n(ae,"LI",{});var Twe=s(bh);bae=n(Twe,"STRONG",{});var QQr=s(bae);Wio=r(QQr,"vit"),QQr.forEach(t),Hio=r(Twe," \u2014 "),_P=n(Twe,"A",{href:!0});var WQr=s(_P);Uio=r(WQr,"ViTFeatureExtractor"),WQr.forEach(t),Jio=r(Twe," (ViT model)"),Twe.forEach(t),Yio=i(ae),vh=n(ae,"LI",{});var Mwe=s(vh);vae=n(Mwe,"STRONG",{});var HQr=s(vae);Kio=r(HQr,"vit_mae"),HQr.forEach(t),Zio=r(Mwe," \u2014 "),bP=n(Mwe,"A",{href:!0});var UQr=s(bP);edo=r(UQr,"ViTFeatureExtractor"),UQr.forEach(t),odo=r(Mwe," (ViTMAE model)"),Mwe.forEach(t),rdo=i(ae),Fh=n(ae,"LI",{});var Ewe=s(Fh);Fae=n(Ewe,"STRONG",{});var JQr=s(Fae);tdo=r(JQr,"wav2vec2"),JQr.forEach(t),ado=r(Ewe," \u2014 "),vP=n(Ewe,"A",{href:!0});var YQr=s(vP);ndo=r(YQr,"Wav2Vec2FeatureExtractor"),YQr.forEach(t),sdo=r(Ewe," (Wav2Vec2 model)"),Ewe.forEach(t),ldo=i(ae),Th=n(ae,"LI",{});var Cwe=s(Th);Tae=n(Cwe,"STRONG",{});var KQr=s(Tae);ido=r(KQr,"yolos"),KQr.forEach(t),ddo=r(Cwe," \u2014 "),FP=n(Cwe,"A",{href:!0});var ZQr=s(FP);cdo=r(ZQr,"YolosFeatureExtractor"),ZQr.forEach(t),fdo=r(Cwe," (YOLOS model)"),Cwe.forEach(t),ae.forEach(t),mdo=i(Yt),T(Mh.$$.fragment,Yt),gdo=i(Yt),T(Eh.$$.fragment,Yt),Yt.forEach(t),hdo=i(qs),Ch=n(qs,"DIV",{class:!0});var Yqe=s(Ch);T(p0.$$.fragment,Yqe),pdo=i(Yqe),Mae=n(Yqe,"P",{});var eWr=s(Mae);udo=r(eWr,"Register a new feature extractor for this class."),eWr.forEach(t),Yqe.forEach(t),qs.forEach(t),JPe=i(f),vi=n(f,"H2",{class:!0});var Kqe=s(vi);wh=n(Kqe,"A",{id:!0,class:!0,href:!0});var oWr=s(wh);Eae=n(oWr,"SPAN",{});var rWr=s(Eae);T(u0.$$.fragment,rWr),rWr.forEach(t),oWr.forEach(t),_do=i(Kqe),Cae=n(Kqe,"SPAN",{});var tWr=s(Cae);bdo=r(tWr,"AutoProcessor"),tWr.forEach(t),Kqe.forEach(t),YPe=i(f),yo=n(f,"DIV",{class:!0});var Ns=s(yo);T(_0.$$.fragment,Ns),vdo=i(Ns),b0=n(Ns,"P",{});var Zqe=s(b0);Fdo=r(Zqe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),TP=n(Zqe,"A",{href:!0});var aWr=s(TP);Tdo=r(aWr,"AutoProcessor.from_pretrained()"),aWr.forEach(t),Mdo=r(Zqe," class method."),Zqe.forEach(t),Edo=i(Ns),v0=n(Ns,"P",{});var eNe=s(v0);Cdo=r(eNe,"This class cannot be instantiated directly using "),wae=n(eNe,"CODE",{});var nWr=s(wae);wdo=r(nWr,"__init__()"),nWr.forEach(t),Ado=r(eNe," (throws an error)."),eNe.forEach(t),ydo=i(Ns),We=n(Ns,"DIV",{class:!0});var Kt=s(We);T(F0.$$.fragment,Kt),Ldo=i(Kt),Aae=n(Kt,"P",{});var sWr=s(Aae);xdo=r(sWr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),sWr.forEach(t),$do=i(Kt),Fi=n(Kt,"P",{});var nK=s(Fi);kdo=r(nK,"The processor class to instantiate is selected based on the "),yae=n(nK,"CODE",{});var lWr=s(yae);Sdo=r(lWr,"model_type"),lWr.forEach(t),Rdo=r(nK,` property of the config object (either
passed as an argument or loaded from `),Lae=n(nK,"CODE",{});var iWr=s(Lae);Bdo=r(iWr,"pretrained_model_name_or_path"),iWr.forEach(t),Pdo=r(nK," if possible):"),nK.forEach(t),Ido=i(Kt),be=n(Kt,"UL",{});var ve=s(be);Ah=n(ve,"LI",{});var wwe=s(Ah);xae=n(wwe,"STRONG",{});var dWr=s(xae);qdo=r(dWr,"clip"),dWr.forEach(t),Ndo=r(wwe," \u2014 "),MP=n(wwe,"A",{href:!0});var cWr=s(MP);jdo=r(cWr,"CLIPProcessor"),cWr.forEach(t),Ddo=r(wwe," (CLIP model)"),wwe.forEach(t),Gdo=i(ve),yh=n(ve,"LI",{});var Awe=s(yh);$ae=n(Awe,"STRONG",{});var fWr=s($ae);Odo=r(fWr,"flava"),fWr.forEach(t),Vdo=r(Awe," \u2014 "),kae=n(Awe,"CODE",{});var mWr=s(kae);Xdo=r(mWr,"FLAVAProcessor"),mWr.forEach(t),zdo=r(Awe," (Flava model)"),Awe.forEach(t),Qdo=i(ve),Lh=n(ve,"LI",{});var ywe=s(Lh);Sae=n(ywe,"STRONG",{});var gWr=s(Sae);Wdo=r(gWr,"layoutlmv2"),gWr.forEach(t),Hdo=r(ywe," \u2014 "),EP=n(ywe,"A",{href:!0});var hWr=s(EP);Udo=r(hWr,"LayoutLMv2Processor"),hWr.forEach(t),Jdo=r(ywe," (LayoutLMv2 model)"),ywe.forEach(t),Ydo=i(ve),xh=n(ve,"LI",{});var Lwe=s(xh);Rae=n(Lwe,"STRONG",{});var pWr=s(Rae);Kdo=r(pWr,"layoutxlm"),pWr.forEach(t),Zdo=r(Lwe," \u2014 "),CP=n(Lwe,"A",{href:!0});var uWr=s(CP);eco=r(uWr,"LayoutXLMProcessor"),uWr.forEach(t),oco=r(Lwe," (LayoutXLM model)"),Lwe.forEach(t),rco=i(ve),$h=n(ve,"LI",{});var xwe=s($h);Bae=n(xwe,"STRONG",{});var _Wr=s(Bae);tco=r(_Wr,"sew"),_Wr.forEach(t),aco=r(xwe," \u2014 "),wP=n(xwe,"A",{href:!0});var bWr=s(wP);nco=r(bWr,"Wav2Vec2Processor"),bWr.forEach(t),sco=r(xwe," (SEW model)"),xwe.forEach(t),lco=i(ve),kh=n(ve,"LI",{});var $we=s(kh);Pae=n($we,"STRONG",{});var vWr=s(Pae);ico=r(vWr,"sew-d"),vWr.forEach(t),dco=r($we," \u2014 "),AP=n($we,"A",{href:!0});var FWr=s(AP);cco=r(FWr,"Wav2Vec2Processor"),FWr.forEach(t),fco=r($we," (SEW-D model)"),$we.forEach(t),mco=i(ve),Sh=n(ve,"LI",{});var kwe=s(Sh);Iae=n(kwe,"STRONG",{});var TWr=s(Iae);gco=r(TWr,"speech_to_text"),TWr.forEach(t),hco=r(kwe," \u2014 "),yP=n(kwe,"A",{href:!0});var MWr=s(yP);pco=r(MWr,"Speech2TextProcessor"),MWr.forEach(t),uco=r(kwe," (Speech2Text model)"),kwe.forEach(t),_co=i(ve),Rh=n(ve,"LI",{});var Swe=s(Rh);qae=n(Swe,"STRONG",{});var EWr=s(qae);bco=r(EWr,"speech_to_text_2"),EWr.forEach(t),vco=r(Swe," \u2014 "),LP=n(Swe,"A",{href:!0});var CWr=s(LP);Fco=r(CWr,"Speech2Text2Processor"),CWr.forEach(t),Tco=r(Swe," (Speech2Text2 model)"),Swe.forEach(t),Mco=i(ve),Bh=n(ve,"LI",{});var Rwe=s(Bh);Nae=n(Rwe,"STRONG",{});var wWr=s(Nae);Eco=r(wWr,"trocr"),wWr.forEach(t),Cco=r(Rwe," \u2014 "),xP=n(Rwe,"A",{href:!0});var AWr=s(xP);wco=r(AWr,"TrOCRProcessor"),AWr.forEach(t),Aco=r(Rwe," (TrOCR model)"),Rwe.forEach(t),yco=i(ve),Ph=n(ve,"LI",{});var Bwe=s(Ph);jae=n(Bwe,"STRONG",{});var yWr=s(jae);Lco=r(yWr,"unispeech"),yWr.forEach(t),xco=r(Bwe," \u2014 "),$P=n(Bwe,"A",{href:!0});var LWr=s($P);$co=r(LWr,"Wav2Vec2Processor"),LWr.forEach(t),kco=r(Bwe," (UniSpeech model)"),Bwe.forEach(t),Sco=i(ve),Ih=n(ve,"LI",{});var Pwe=s(Ih);Dae=n(Pwe,"STRONG",{});var xWr=s(Dae);Rco=r(xWr,"unispeech-sat"),xWr.forEach(t),Bco=r(Pwe," \u2014 "),kP=n(Pwe,"A",{href:!0});var $Wr=s(kP);Pco=r($Wr,"Wav2Vec2Processor"),$Wr.forEach(t),Ico=r(Pwe," (UniSpeechSat model)"),Pwe.forEach(t),qco=i(ve),qh=n(ve,"LI",{});var Iwe=s(qh);Gae=n(Iwe,"STRONG",{});var kWr=s(Gae);Nco=r(kWr,"vilt"),kWr.forEach(t),jco=r(Iwe," \u2014 "),SP=n(Iwe,"A",{href:!0});var SWr=s(SP);Dco=r(SWr,"ViltProcessor"),SWr.forEach(t),Gco=r(Iwe," (ViLT model)"),Iwe.forEach(t),Oco=i(ve),Nh=n(ve,"LI",{});var qwe=s(Nh);Oae=n(qwe,"STRONG",{});var RWr=s(Oae);Vco=r(RWr,"vision-text-dual-encoder"),RWr.forEach(t),Xco=r(qwe," \u2014 "),RP=n(qwe,"A",{href:!0});var BWr=s(RP);zco=r(BWr,"VisionTextDualEncoderProcessor"),BWr.forEach(t),Qco=r(qwe," (VisionTextDualEncoder model)"),qwe.forEach(t),Wco=i(ve),jh=n(ve,"LI",{});var Nwe=s(jh);Vae=n(Nwe,"STRONG",{});var PWr=s(Vae);Hco=r(PWr,"wav2vec2"),PWr.forEach(t),Uco=r(Nwe," \u2014 "),BP=n(Nwe,"A",{href:!0});var IWr=s(BP);Jco=r(IWr,"Wav2Vec2Processor"),IWr.forEach(t),Yco=r(Nwe," (Wav2Vec2 model)"),Nwe.forEach(t),Kco=i(ve),Dh=n(ve,"LI",{});var jwe=s(Dh);Xae=n(jwe,"STRONG",{});var qWr=s(Xae);Zco=r(qWr,"wavlm"),qWr.forEach(t),efo=r(jwe," \u2014 "),PP=n(jwe,"A",{href:!0});var NWr=s(PP);ofo=r(NWr,"Wav2Vec2Processor"),NWr.forEach(t),rfo=r(jwe," (WavLM model)"),jwe.forEach(t),ve.forEach(t),tfo=i(Kt),T(Gh.$$.fragment,Kt),afo=i(Kt),T(Oh.$$.fragment,Kt),Kt.forEach(t),nfo=i(Ns),Vh=n(Ns,"DIV",{class:!0});var oNe=s(Vh);T(T0.$$.fragment,oNe),sfo=i(oNe),zae=n(oNe,"P",{});var jWr=s(zae);lfo=r(jWr,"Register a new processor for this class."),jWr.forEach(t),oNe.forEach(t),Ns.forEach(t),KPe=i(f),Ti=n(f,"H2",{class:!0});var rNe=s(Ti);Xh=n(rNe,"A",{id:!0,class:!0,href:!0});var DWr=s(Xh);Qae=n(DWr,"SPAN",{});var GWr=s(Qae);T(M0.$$.fragment,GWr),GWr.forEach(t),DWr.forEach(t),ifo=i(rNe),Wae=n(rNe,"SPAN",{});var OWr=s(Wae);dfo=r(OWr,"AutoModel"),OWr.forEach(t),rNe.forEach(t),ZPe=i(f),Lo=n(f,"DIV",{class:!0});var js=s(Lo);T(E0.$$.fragment,js),cfo=i(js),Mi=n(js,"P",{});var sK=s(Mi);ffo=r(sK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),IP=n(sK,"A",{href:!0});var VWr=s(IP);mfo=r(VWr,"from_pretrained()"),VWr.forEach(t),gfo=r(sK," class method or the "),qP=n(sK,"A",{href:!0});var XWr=s(qP);hfo=r(XWr,"from_config()"),XWr.forEach(t),pfo=r(sK,` class
method.`),sK.forEach(t),ufo=i(js),C0=n(js,"P",{});var tNe=s(C0);_fo=r(tNe,"This class cannot be instantiated directly using "),Hae=n(tNe,"CODE",{});var zWr=s(Hae);bfo=r(zWr,"__init__()"),zWr.forEach(t),vfo=r(tNe," (throws an error)."),tNe.forEach(t),Ffo=i(js),ot=n(js,"DIV",{class:!0});var Zw=s(ot);T(w0.$$.fragment,Zw),Tfo=i(Zw),Uae=n(Zw,"P",{});var QWr=s(Uae);Mfo=r(QWr,"Instantiates one of the base model classes of the library from a configuration."),QWr.forEach(t),Efo=i(Zw),Ei=n(Zw,"P",{});var lK=s(Ei);Cfo=r(lK,`Note:
Loading a model from its configuration file does `),Jae=n(lK,"STRONG",{});var WWr=s(Jae);wfo=r(WWr,"not"),WWr.forEach(t),Afo=r(lK,` load the model weights. It only affects the
model\u2019s configuration. Use `),NP=n(lK,"A",{href:!0});var HWr=s(NP);yfo=r(HWr,"from_pretrained()"),HWr.forEach(t),Lfo=r(lK," to load the model weights."),lK.forEach(t),xfo=i(Zw),T(zh.$$.fragment,Zw),Zw.forEach(t),$fo=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(A0.$$.fragment,Zt),kfo=i(Zt),Yae=n(Zt,"P",{});var UWr=s(Yae);Sfo=r(UWr,"Instantiate one of the base model classes of the library from a pretrained model."),UWr.forEach(t),Rfo=i(Zt),Aa=n(Zt,"P",{});var eA=s(Aa);Bfo=r(eA,"The model class to instantiate is selected based on the "),Kae=n(eA,"CODE",{});var JWr=s(Kae);Pfo=r(JWr,"model_type"),JWr.forEach(t),Ifo=r(eA,` property of the config object (either
passed as an argument or loaded from `),Zae=n(eA,"CODE",{});var YWr=s(Zae);qfo=r(YWr,"pretrained_model_name_or_path"),YWr.forEach(t),Nfo=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ene=n(eA,"CODE",{});var KWr=s(ene);jfo=r(KWr,"pretrained_model_name_or_path"),KWr.forEach(t),Dfo=r(eA,":"),eA.forEach(t),Gfo=i(Zt),x=n(Zt,"UL",{});var $=s(x);Qh=n($,"LI",{});var Dwe=s(Qh);one=n(Dwe,"STRONG",{});var ZWr=s(one);Ofo=r(ZWr,"albert"),ZWr.forEach(t),Vfo=r(Dwe," \u2014 "),jP=n(Dwe,"A",{href:!0});var eHr=s(jP);Xfo=r(eHr,"AlbertModel"),eHr.forEach(t),zfo=r(Dwe," (ALBERT model)"),Dwe.forEach(t),Qfo=i($),Wh=n($,"LI",{});var Gwe=s(Wh);rne=n(Gwe,"STRONG",{});var oHr=s(rne);Wfo=r(oHr,"bart"),oHr.forEach(t),Hfo=r(Gwe," \u2014 "),DP=n(Gwe,"A",{href:!0});var rHr=s(DP);Ufo=r(rHr,"BartModel"),rHr.forEach(t),Jfo=r(Gwe," (BART model)"),Gwe.forEach(t),Yfo=i($),Hh=n($,"LI",{});var Owe=s(Hh);tne=n(Owe,"STRONG",{});var tHr=s(tne);Kfo=r(tHr,"beit"),tHr.forEach(t),Zfo=r(Owe," \u2014 "),GP=n(Owe,"A",{href:!0});var aHr=s(GP);emo=r(aHr,"BeitModel"),aHr.forEach(t),omo=r(Owe," (BEiT model)"),Owe.forEach(t),rmo=i($),Uh=n($,"LI",{});var Vwe=s(Uh);ane=n(Vwe,"STRONG",{});var nHr=s(ane);tmo=r(nHr,"bert"),nHr.forEach(t),amo=r(Vwe," \u2014 "),OP=n(Vwe,"A",{href:!0});var sHr=s(OP);nmo=r(sHr,"BertModel"),sHr.forEach(t),smo=r(Vwe," (BERT model)"),Vwe.forEach(t),lmo=i($),Jh=n($,"LI",{});var Xwe=s(Jh);nne=n(Xwe,"STRONG",{});var lHr=s(nne);imo=r(lHr,"bert-generation"),lHr.forEach(t),dmo=r(Xwe," \u2014 "),VP=n(Xwe,"A",{href:!0});var iHr=s(VP);cmo=r(iHr,"BertGenerationEncoder"),iHr.forEach(t),fmo=r(Xwe," (Bert Generation model)"),Xwe.forEach(t),mmo=i($),Yh=n($,"LI",{});var zwe=s(Yh);sne=n(zwe,"STRONG",{});var dHr=s(sne);gmo=r(dHr,"big_bird"),dHr.forEach(t),hmo=r(zwe," \u2014 "),XP=n(zwe,"A",{href:!0});var cHr=s(XP);pmo=r(cHr,"BigBirdModel"),cHr.forEach(t),umo=r(zwe," (BigBird model)"),zwe.forEach(t),_mo=i($),Kh=n($,"LI",{});var Qwe=s(Kh);lne=n(Qwe,"STRONG",{});var fHr=s(lne);bmo=r(fHr,"bigbird_pegasus"),fHr.forEach(t),vmo=r(Qwe," \u2014 "),zP=n(Qwe,"A",{href:!0});var mHr=s(zP);Fmo=r(mHr,"BigBirdPegasusModel"),mHr.forEach(t),Tmo=r(Qwe," (BigBirdPegasus model)"),Qwe.forEach(t),Mmo=i($),Zh=n($,"LI",{});var Wwe=s(Zh);ine=n(Wwe,"STRONG",{});var gHr=s(ine);Emo=r(gHr,"blenderbot"),gHr.forEach(t),Cmo=r(Wwe," \u2014 "),QP=n(Wwe,"A",{href:!0});var hHr=s(QP);wmo=r(hHr,"BlenderbotModel"),hHr.forEach(t),Amo=r(Wwe," (Blenderbot model)"),Wwe.forEach(t),ymo=i($),ep=n($,"LI",{});var Hwe=s(ep);dne=n(Hwe,"STRONG",{});var pHr=s(dne);Lmo=r(pHr,"blenderbot-small"),pHr.forEach(t),xmo=r(Hwe," \u2014 "),WP=n(Hwe,"A",{href:!0});var uHr=s(WP);$mo=r(uHr,"BlenderbotSmallModel"),uHr.forEach(t),kmo=r(Hwe," (BlenderbotSmall model)"),Hwe.forEach(t),Smo=i($),op=n($,"LI",{});var Uwe=s(op);cne=n(Uwe,"STRONG",{});var _Hr=s(cne);Rmo=r(_Hr,"camembert"),_Hr.forEach(t),Bmo=r(Uwe," \u2014 "),HP=n(Uwe,"A",{href:!0});var bHr=s(HP);Pmo=r(bHr,"CamembertModel"),bHr.forEach(t),Imo=r(Uwe," (CamemBERT model)"),Uwe.forEach(t),qmo=i($),rp=n($,"LI",{});var Jwe=s(rp);fne=n(Jwe,"STRONG",{});var vHr=s(fne);Nmo=r(vHr,"canine"),vHr.forEach(t),jmo=r(Jwe," \u2014 "),UP=n(Jwe,"A",{href:!0});var FHr=s(UP);Dmo=r(FHr,"CanineModel"),FHr.forEach(t),Gmo=r(Jwe," (Canine model)"),Jwe.forEach(t),Omo=i($),tp=n($,"LI",{});var Ywe=s(tp);mne=n(Ywe,"STRONG",{});var THr=s(mne);Vmo=r(THr,"clip"),THr.forEach(t),Xmo=r(Ywe," \u2014 "),JP=n(Ywe,"A",{href:!0});var MHr=s(JP);zmo=r(MHr,"CLIPModel"),MHr.forEach(t),Qmo=r(Ywe," (CLIP model)"),Ywe.forEach(t),Wmo=i($),ap=n($,"LI",{});var Kwe=s(ap);gne=n(Kwe,"STRONG",{});var EHr=s(gne);Hmo=r(EHr,"convbert"),EHr.forEach(t),Umo=r(Kwe," \u2014 "),YP=n(Kwe,"A",{href:!0});var CHr=s(YP);Jmo=r(CHr,"ConvBertModel"),CHr.forEach(t),Ymo=r(Kwe," (ConvBERT model)"),Kwe.forEach(t),Kmo=i($),np=n($,"LI",{});var Zwe=s(np);hne=n(Zwe,"STRONG",{});var wHr=s(hne);Zmo=r(wHr,"convnext"),wHr.forEach(t),ego=r(Zwe," \u2014 "),KP=n(Zwe,"A",{href:!0});var AHr=s(KP);ogo=r(AHr,"ConvNextModel"),AHr.forEach(t),rgo=r(Zwe," (ConvNext model)"),Zwe.forEach(t),tgo=i($),sp=n($,"LI",{});var eAe=s(sp);pne=n(eAe,"STRONG",{});var yHr=s(pne);ago=r(yHr,"ctrl"),yHr.forEach(t),ngo=r(eAe," \u2014 "),ZP=n(eAe,"A",{href:!0});var LHr=s(ZP);sgo=r(LHr,"CTRLModel"),LHr.forEach(t),lgo=r(eAe," (CTRL model)"),eAe.forEach(t),igo=i($),lp=n($,"LI",{});var oAe=s(lp);une=n(oAe,"STRONG",{});var xHr=s(une);dgo=r(xHr,"data2vec-audio"),xHr.forEach(t),cgo=r(oAe," \u2014 "),eI=n(oAe,"A",{href:!0});var $Hr=s(eI);fgo=r($Hr,"Data2VecAudioModel"),$Hr.forEach(t),mgo=r(oAe," (Data2VecAudio model)"),oAe.forEach(t),ggo=i($),ip=n($,"LI",{});var rAe=s(ip);_ne=n(rAe,"STRONG",{});var kHr=s(_ne);hgo=r(kHr,"data2vec-text"),kHr.forEach(t),pgo=r(rAe," \u2014 "),oI=n(rAe,"A",{href:!0});var SHr=s(oI);ugo=r(SHr,"Data2VecTextModel"),SHr.forEach(t),_go=r(rAe," (Data2VecText model)"),rAe.forEach(t),bgo=i($),dp=n($,"LI",{});var tAe=s(dp);bne=n(tAe,"STRONG",{});var RHr=s(bne);vgo=r(RHr,"data2vec-vision"),RHr.forEach(t),Fgo=r(tAe," \u2014 "),rI=n(tAe,"A",{href:!0});var BHr=s(rI);Tgo=r(BHr,"Data2VecVisionModel"),BHr.forEach(t),Mgo=r(tAe," (Data2VecVision model)"),tAe.forEach(t),Ego=i($),cp=n($,"LI",{});var aAe=s(cp);vne=n(aAe,"STRONG",{});var PHr=s(vne);Cgo=r(PHr,"deberta"),PHr.forEach(t),wgo=r(aAe," \u2014 "),tI=n(aAe,"A",{href:!0});var IHr=s(tI);Ago=r(IHr,"DebertaModel"),IHr.forEach(t),ygo=r(aAe," (DeBERTa model)"),aAe.forEach(t),Lgo=i($),fp=n($,"LI",{});var nAe=s(fp);Fne=n(nAe,"STRONG",{});var qHr=s(Fne);xgo=r(qHr,"deberta-v2"),qHr.forEach(t),$go=r(nAe," \u2014 "),aI=n(nAe,"A",{href:!0});var NHr=s(aI);kgo=r(NHr,"DebertaV2Model"),NHr.forEach(t),Sgo=r(nAe," (DeBERTa-v2 model)"),nAe.forEach(t),Rgo=i($),mp=n($,"LI",{});var sAe=s(mp);Tne=n(sAe,"STRONG",{});var jHr=s(Tne);Bgo=r(jHr,"decision_transformer"),jHr.forEach(t),Pgo=r(sAe," \u2014 "),nI=n(sAe,"A",{href:!0});var DHr=s(nI);Igo=r(DHr,"DecisionTransformerModel"),DHr.forEach(t),qgo=r(sAe," (Decision Transformer model)"),sAe.forEach(t),Ngo=i($),gp=n($,"LI",{});var lAe=s(gp);Mne=n(lAe,"STRONG",{});var GHr=s(Mne);jgo=r(GHr,"deit"),GHr.forEach(t),Dgo=r(lAe," \u2014 "),sI=n(lAe,"A",{href:!0});var OHr=s(sI);Ggo=r(OHr,"DeiTModel"),OHr.forEach(t),Ogo=r(lAe," (DeiT model)"),lAe.forEach(t),Vgo=i($),hp=n($,"LI",{});var iAe=s(hp);Ene=n(iAe,"STRONG",{});var VHr=s(Ene);Xgo=r(VHr,"detr"),VHr.forEach(t),zgo=r(iAe," \u2014 "),lI=n(iAe,"A",{href:!0});var XHr=s(lI);Qgo=r(XHr,"DetrModel"),XHr.forEach(t),Wgo=r(iAe," (DETR model)"),iAe.forEach(t),Hgo=i($),pp=n($,"LI",{});var dAe=s(pp);Cne=n(dAe,"STRONG",{});var zHr=s(Cne);Ugo=r(zHr,"distilbert"),zHr.forEach(t),Jgo=r(dAe," \u2014 "),iI=n(dAe,"A",{href:!0});var QHr=s(iI);Ygo=r(QHr,"DistilBertModel"),QHr.forEach(t),Kgo=r(dAe," (DistilBERT model)"),dAe.forEach(t),Zgo=i($),up=n($,"LI",{});var cAe=s(up);wne=n(cAe,"STRONG",{});var WHr=s(wne);eho=r(WHr,"dpr"),WHr.forEach(t),oho=r(cAe," \u2014 "),dI=n(cAe,"A",{href:!0});var HHr=s(dI);rho=r(HHr,"DPRQuestionEncoder"),HHr.forEach(t),tho=r(cAe," (DPR model)"),cAe.forEach(t),aho=i($),_p=n($,"LI",{});var fAe=s(_p);Ane=n(fAe,"STRONG",{});var UHr=s(Ane);nho=r(UHr,"dpt"),UHr.forEach(t),sho=r(fAe," \u2014 "),cI=n(fAe,"A",{href:!0});var JHr=s(cI);lho=r(JHr,"DPTModel"),JHr.forEach(t),iho=r(fAe," (DPT model)"),fAe.forEach(t),dho=i($),bp=n($,"LI",{});var mAe=s(bp);yne=n(mAe,"STRONG",{});var YHr=s(yne);cho=r(YHr,"electra"),YHr.forEach(t),fho=r(mAe," \u2014 "),fI=n(mAe,"A",{href:!0});var KHr=s(fI);mho=r(KHr,"ElectraModel"),KHr.forEach(t),gho=r(mAe," (ELECTRA model)"),mAe.forEach(t),hho=i($),vp=n($,"LI",{});var gAe=s(vp);Lne=n(gAe,"STRONG",{});var ZHr=s(Lne);pho=r(ZHr,"flaubert"),ZHr.forEach(t),uho=r(gAe," \u2014 "),mI=n(gAe,"A",{href:!0});var eUr=s(mI);_ho=r(eUr,"FlaubertModel"),eUr.forEach(t),bho=r(gAe," (FlauBERT model)"),gAe.forEach(t),vho=i($),Fp=n($,"LI",{});var hAe=s(Fp);xne=n(hAe,"STRONG",{});var oUr=s(xne);Fho=r(oUr,"flava"),oUr.forEach(t),Tho=r(hAe," \u2014 "),gI=n(hAe,"A",{href:!0});var rUr=s(gI);Mho=r(rUr,"FlavaModel"),rUr.forEach(t),Eho=r(hAe," (Flava model)"),hAe.forEach(t),Cho=i($),Tp=n($,"LI",{});var pAe=s(Tp);$ne=n(pAe,"STRONG",{});var tUr=s($ne);who=r(tUr,"fnet"),tUr.forEach(t),Aho=r(pAe," \u2014 "),hI=n(pAe,"A",{href:!0});var aUr=s(hI);yho=r(aUr,"FNetModel"),aUr.forEach(t),Lho=r(pAe," (FNet model)"),pAe.forEach(t),xho=i($),Mp=n($,"LI",{});var uAe=s(Mp);kne=n(uAe,"STRONG",{});var nUr=s(kne);$ho=r(nUr,"fsmt"),nUr.forEach(t),kho=r(uAe," \u2014 "),pI=n(uAe,"A",{href:!0});var sUr=s(pI);Sho=r(sUr,"FSMTModel"),sUr.forEach(t),Rho=r(uAe," (FairSeq Machine-Translation model)"),uAe.forEach(t),Bho=i($),Ss=n($,"LI",{});var c$=s(Ss);Sne=n(c$,"STRONG",{});var lUr=s(Sne);Pho=r(lUr,"funnel"),lUr.forEach(t),Iho=r(c$," \u2014 "),uI=n(c$,"A",{href:!0});var iUr=s(uI);qho=r(iUr,"FunnelModel"),iUr.forEach(t),Nho=r(c$," or "),_I=n(c$,"A",{href:!0});var dUr=s(_I);jho=r(dUr,"FunnelBaseModel"),dUr.forEach(t),Dho=r(c$," (Funnel Transformer model)"),c$.forEach(t),Gho=i($),Ep=n($,"LI",{});var _Ae=s(Ep);Rne=n(_Ae,"STRONG",{});var cUr=s(Rne);Oho=r(cUr,"glm"),cUr.forEach(t),Vho=r(_Ae," \u2014 "),bI=n(_Ae,"A",{href:!0});var fUr=s(bI);Xho=r(fUr,"GLMModel"),fUr.forEach(t),zho=r(_Ae," (GLM model)"),_Ae.forEach(t),Qho=i($),Cp=n($,"LI",{});var bAe=s(Cp);Bne=n(bAe,"STRONG",{});var mUr=s(Bne);Who=r(mUr,"glpn"),mUr.forEach(t),Hho=r(bAe," \u2014 "),vI=n(bAe,"A",{href:!0});var gUr=s(vI);Uho=r(gUr,"GLPNModel"),gUr.forEach(t),Jho=r(bAe," (GLPN model)"),bAe.forEach(t),Yho=i($),wp=n($,"LI",{});var vAe=s(wp);Pne=n(vAe,"STRONG",{});var hUr=s(Pne);Kho=r(hUr,"gpt2"),hUr.forEach(t),Zho=r(vAe," \u2014 "),FI=n(vAe,"A",{href:!0});var pUr=s(FI);epo=r(pUr,"GPT2Model"),pUr.forEach(t),opo=r(vAe," (OpenAI GPT-2 model)"),vAe.forEach(t),rpo=i($),Ap=n($,"LI",{});var FAe=s(Ap);Ine=n(FAe,"STRONG",{});var uUr=s(Ine);tpo=r(uUr,"gpt_neo"),uUr.forEach(t),apo=r(FAe," \u2014 "),TI=n(FAe,"A",{href:!0});var _Ur=s(TI);npo=r(_Ur,"GPTNeoModel"),_Ur.forEach(t),spo=r(FAe," (GPT Neo model)"),FAe.forEach(t),lpo=i($),yp=n($,"LI",{});var TAe=s(yp);qne=n(TAe,"STRONG",{});var bUr=s(qne);ipo=r(bUr,"gptj"),bUr.forEach(t),dpo=r(TAe," \u2014 "),MI=n(TAe,"A",{href:!0});var vUr=s(MI);cpo=r(vUr,"GPTJModel"),vUr.forEach(t),fpo=r(TAe," (GPT-J model)"),TAe.forEach(t),mpo=i($),Lp=n($,"LI",{});var MAe=s(Lp);Nne=n(MAe,"STRONG",{});var FUr=s(Nne);gpo=r(FUr,"hubert"),FUr.forEach(t),hpo=r(MAe," \u2014 "),EI=n(MAe,"A",{href:!0});var TUr=s(EI);ppo=r(TUr,"HubertModel"),TUr.forEach(t),upo=r(MAe," (Hubert model)"),MAe.forEach(t),_po=i($),xp=n($,"LI",{});var EAe=s(xp);jne=n(EAe,"STRONG",{});var MUr=s(jne);bpo=r(MUr,"ibert"),MUr.forEach(t),vpo=r(EAe," \u2014 "),CI=n(EAe,"A",{href:!0});var EUr=s(CI);Fpo=r(EUr,"IBertModel"),EUr.forEach(t),Tpo=r(EAe," (I-BERT model)"),EAe.forEach(t),Mpo=i($),$p=n($,"LI",{});var CAe=s($p);Dne=n(CAe,"STRONG",{});var CUr=s(Dne);Epo=r(CUr,"imagegpt"),CUr.forEach(t),Cpo=r(CAe," \u2014 "),wI=n(CAe,"A",{href:!0});var wUr=s(wI);wpo=r(wUr,"ImageGPTModel"),wUr.forEach(t),Apo=r(CAe," (ImageGPT model)"),CAe.forEach(t),ypo=i($),kp=n($,"LI",{});var wAe=s(kp);Gne=n(wAe,"STRONG",{});var AUr=s(Gne);Lpo=r(AUr,"layoutlm"),AUr.forEach(t),xpo=r(wAe," \u2014 "),AI=n(wAe,"A",{href:!0});var yUr=s(AI);$po=r(yUr,"LayoutLMModel"),yUr.forEach(t),kpo=r(wAe," (LayoutLM model)"),wAe.forEach(t),Spo=i($),Sp=n($,"LI",{});var AAe=s(Sp);One=n(AAe,"STRONG",{});var LUr=s(One);Rpo=r(LUr,"layoutlmv2"),LUr.forEach(t),Bpo=r(AAe," \u2014 "),yI=n(AAe,"A",{href:!0});var xUr=s(yI);Ppo=r(xUr,"LayoutLMv2Model"),xUr.forEach(t),Ipo=r(AAe," (LayoutLMv2 model)"),AAe.forEach(t),qpo=i($),Rp=n($,"LI",{});var yAe=s(Rp);Vne=n(yAe,"STRONG",{});var $Ur=s(Vne);Npo=r($Ur,"led"),$Ur.forEach(t),jpo=r(yAe," \u2014 "),LI=n(yAe,"A",{href:!0});var kUr=s(LI);Dpo=r(kUr,"LEDModel"),kUr.forEach(t),Gpo=r(yAe," (LED model)"),yAe.forEach(t),Opo=i($),Bp=n($,"LI",{});var LAe=s(Bp);Xne=n(LAe,"STRONG",{});var SUr=s(Xne);Vpo=r(SUr,"longformer"),SUr.forEach(t),Xpo=r(LAe," \u2014 "),xI=n(LAe,"A",{href:!0});var RUr=s(xI);zpo=r(RUr,"LongformerModel"),RUr.forEach(t),Qpo=r(LAe," (Longformer model)"),LAe.forEach(t),Wpo=i($),Pp=n($,"LI",{});var xAe=s(Pp);zne=n(xAe,"STRONG",{});var BUr=s(zne);Hpo=r(BUr,"luke"),BUr.forEach(t),Upo=r(xAe," \u2014 "),$I=n(xAe,"A",{href:!0});var PUr=s($I);Jpo=r(PUr,"LukeModel"),PUr.forEach(t),Ypo=r(xAe," (LUKE model)"),xAe.forEach(t),Kpo=i($),Ip=n($,"LI",{});var $Ae=s(Ip);Qne=n($Ae,"STRONG",{});var IUr=s(Qne);Zpo=r(IUr,"lxmert"),IUr.forEach(t),euo=r($Ae," \u2014 "),kI=n($Ae,"A",{href:!0});var qUr=s(kI);ouo=r(qUr,"LxmertModel"),qUr.forEach(t),ruo=r($Ae," (LXMERT model)"),$Ae.forEach(t),tuo=i($),qp=n($,"LI",{});var kAe=s(qp);Wne=n(kAe,"STRONG",{});var NUr=s(Wne);auo=r(NUr,"m2m_100"),NUr.forEach(t),nuo=r(kAe," \u2014 "),SI=n(kAe,"A",{href:!0});var jUr=s(SI);suo=r(jUr,"M2M100Model"),jUr.forEach(t),luo=r(kAe," (M2M100 model)"),kAe.forEach(t),iuo=i($),Np=n($,"LI",{});var SAe=s(Np);Hne=n(SAe,"STRONG",{});var DUr=s(Hne);duo=r(DUr,"marian"),DUr.forEach(t),cuo=r(SAe," \u2014 "),RI=n(SAe,"A",{href:!0});var GUr=s(RI);fuo=r(GUr,"MarianModel"),GUr.forEach(t),muo=r(SAe," (Marian model)"),SAe.forEach(t),guo=i($),jp=n($,"LI",{});var RAe=s(jp);Une=n(RAe,"STRONG",{});var OUr=s(Une);huo=r(OUr,"maskformer"),OUr.forEach(t),puo=r(RAe," \u2014 "),BI=n(RAe,"A",{href:!0});var VUr=s(BI);uuo=r(VUr,"MaskFormerModel"),VUr.forEach(t),_uo=r(RAe," (MaskFormer model)"),RAe.forEach(t),buo=i($),Dp=n($,"LI",{});var BAe=s(Dp);Jne=n(BAe,"STRONG",{});var XUr=s(Jne);vuo=r(XUr,"mbart"),XUr.forEach(t),Fuo=r(BAe," \u2014 "),PI=n(BAe,"A",{href:!0});var zUr=s(PI);Tuo=r(zUr,"MBartModel"),zUr.forEach(t),Muo=r(BAe," (mBART model)"),BAe.forEach(t),Euo=i($),Gp=n($,"LI",{});var PAe=s(Gp);Yne=n(PAe,"STRONG",{});var QUr=s(Yne);Cuo=r(QUr,"megatron-bert"),QUr.forEach(t),wuo=r(PAe," \u2014 "),II=n(PAe,"A",{href:!0});var WUr=s(II);Auo=r(WUr,"MegatronBertModel"),WUr.forEach(t),yuo=r(PAe," (MegatronBert model)"),PAe.forEach(t),Luo=i($),Op=n($,"LI",{});var IAe=s(Op);Kne=n(IAe,"STRONG",{});var HUr=s(Kne);xuo=r(HUr,"mobilebert"),HUr.forEach(t),$uo=r(IAe," \u2014 "),qI=n(IAe,"A",{href:!0});var UUr=s(qI);kuo=r(UUr,"MobileBertModel"),UUr.forEach(t),Suo=r(IAe," (MobileBERT model)"),IAe.forEach(t),Ruo=i($),Vp=n($,"LI",{});var qAe=s(Vp);Zne=n(qAe,"STRONG",{});var JUr=s(Zne);Buo=r(JUr,"mpnet"),JUr.forEach(t),Puo=r(qAe," \u2014 "),NI=n(qAe,"A",{href:!0});var YUr=s(NI);Iuo=r(YUr,"MPNetModel"),YUr.forEach(t),quo=r(qAe," (MPNet model)"),qAe.forEach(t),Nuo=i($),Xp=n($,"LI",{});var NAe=s(Xp);ese=n(NAe,"STRONG",{});var KUr=s(ese);juo=r(KUr,"mt5"),KUr.forEach(t),Duo=r(NAe," \u2014 "),jI=n(NAe,"A",{href:!0});var ZUr=s(jI);Guo=r(ZUr,"MT5Model"),ZUr.forEach(t),Ouo=r(NAe," (mT5 model)"),NAe.forEach(t),Vuo=i($),zp=n($,"LI",{});var jAe=s(zp);ose=n(jAe,"STRONG",{});var eJr=s(ose);Xuo=r(eJr,"nystromformer"),eJr.forEach(t),zuo=r(jAe," \u2014 "),DI=n(jAe,"A",{href:!0});var oJr=s(DI);Quo=r(oJr,"NystromformerModel"),oJr.forEach(t),Wuo=r(jAe," (Nystromformer model)"),jAe.forEach(t),Huo=i($),Qp=n($,"LI",{});var DAe=s(Qp);rse=n(DAe,"STRONG",{});var rJr=s(rse);Uuo=r(rJr,"openai-gpt"),rJr.forEach(t),Juo=r(DAe," \u2014 "),GI=n(DAe,"A",{href:!0});var tJr=s(GI);Yuo=r(tJr,"OpenAIGPTModel"),tJr.forEach(t),Kuo=r(DAe," (OpenAI GPT model)"),DAe.forEach(t),Zuo=i($),Wp=n($,"LI",{});var GAe=s(Wp);tse=n(GAe,"STRONG",{});var aJr=s(tse);e_o=r(aJr,"pegasus"),aJr.forEach(t),o_o=r(GAe," \u2014 "),OI=n(GAe,"A",{href:!0});var nJr=s(OI);r_o=r(nJr,"PegasusModel"),nJr.forEach(t),t_o=r(GAe," (Pegasus model)"),GAe.forEach(t),a_o=i($),Hp=n($,"LI",{});var OAe=s(Hp);ase=n(OAe,"STRONG",{});var sJr=s(ase);n_o=r(sJr,"perceiver"),sJr.forEach(t),s_o=r(OAe," \u2014 "),VI=n(OAe,"A",{href:!0});var lJr=s(VI);l_o=r(lJr,"PerceiverModel"),lJr.forEach(t),i_o=r(OAe," (Perceiver model)"),OAe.forEach(t),d_o=i($),Up=n($,"LI",{});var VAe=s(Up);nse=n(VAe,"STRONG",{});var iJr=s(nse);c_o=r(iJr,"plbart"),iJr.forEach(t),f_o=r(VAe," \u2014 "),XI=n(VAe,"A",{href:!0});var dJr=s(XI);m_o=r(dJr,"PLBartModel"),dJr.forEach(t),g_o=r(VAe," (PLBart model)"),VAe.forEach(t),h_o=i($),Jp=n($,"LI",{});var XAe=s(Jp);sse=n(XAe,"STRONG",{});var cJr=s(sse);p_o=r(cJr,"poolformer"),cJr.forEach(t),u_o=r(XAe," \u2014 "),zI=n(XAe,"A",{href:!0});var fJr=s(zI);__o=r(fJr,"PoolFormerModel"),fJr.forEach(t),b_o=r(XAe," (PoolFormer model)"),XAe.forEach(t),v_o=i($),Yp=n($,"LI",{});var zAe=s(Yp);lse=n(zAe,"STRONG",{});var mJr=s(lse);F_o=r(mJr,"prophetnet"),mJr.forEach(t),T_o=r(zAe," \u2014 "),QI=n(zAe,"A",{href:!0});var gJr=s(QI);M_o=r(gJr,"ProphetNetModel"),gJr.forEach(t),E_o=r(zAe," (ProphetNet model)"),zAe.forEach(t),C_o=i($),Kp=n($,"LI",{});var QAe=s(Kp);ise=n(QAe,"STRONG",{});var hJr=s(ise);w_o=r(hJr,"qdqbert"),hJr.forEach(t),A_o=r(QAe," \u2014 "),WI=n(QAe,"A",{href:!0});var pJr=s(WI);y_o=r(pJr,"QDQBertModel"),pJr.forEach(t),L_o=r(QAe," (QDQBert model)"),QAe.forEach(t),x_o=i($),Zp=n($,"LI",{});var WAe=s(Zp);dse=n(WAe,"STRONG",{});var uJr=s(dse);$_o=r(uJr,"reformer"),uJr.forEach(t),k_o=r(WAe," \u2014 "),HI=n(WAe,"A",{href:!0});var _Jr=s(HI);S_o=r(_Jr,"ReformerModel"),_Jr.forEach(t),R_o=r(WAe," (Reformer model)"),WAe.forEach(t),B_o=i($),eu=n($,"LI",{});var HAe=s(eu);cse=n(HAe,"STRONG",{});var bJr=s(cse);P_o=r(bJr,"regnet"),bJr.forEach(t),I_o=r(HAe," \u2014 "),UI=n(HAe,"A",{href:!0});var vJr=s(UI);q_o=r(vJr,"RegNetModel"),vJr.forEach(t),N_o=r(HAe," (RegNet model)"),HAe.forEach(t),j_o=i($),ou=n($,"LI",{});var UAe=s(ou);fse=n(UAe,"STRONG",{});var FJr=s(fse);D_o=r(FJr,"rembert"),FJr.forEach(t),G_o=r(UAe," \u2014 "),JI=n(UAe,"A",{href:!0});var TJr=s(JI);O_o=r(TJr,"RemBertModel"),TJr.forEach(t),V_o=r(UAe," (RemBERT model)"),UAe.forEach(t),X_o=i($),ru=n($,"LI",{});var JAe=s(ru);mse=n(JAe,"STRONG",{});var MJr=s(mse);z_o=r(MJr,"resnet"),MJr.forEach(t),Q_o=r(JAe," \u2014 "),YI=n(JAe,"A",{href:!0});var EJr=s(YI);W_o=r(EJr,"ResNetModel"),EJr.forEach(t),H_o=r(JAe," (ResNet model)"),JAe.forEach(t),U_o=i($),tu=n($,"LI",{});var YAe=s(tu);gse=n(YAe,"STRONG",{});var CJr=s(gse);J_o=r(CJr,"retribert"),CJr.forEach(t),Y_o=r(YAe," \u2014 "),KI=n(YAe,"A",{href:!0});var wJr=s(KI);K_o=r(wJr,"RetriBertModel"),wJr.forEach(t),Z_o=r(YAe," (RetriBERT model)"),YAe.forEach(t),e1o=i($),au=n($,"LI",{});var KAe=s(au);hse=n(KAe,"STRONG",{});var AJr=s(hse);o1o=r(AJr,"roberta"),AJr.forEach(t),r1o=r(KAe," \u2014 "),ZI=n(KAe,"A",{href:!0});var yJr=s(ZI);t1o=r(yJr,"RobertaModel"),yJr.forEach(t),a1o=r(KAe," (RoBERTa model)"),KAe.forEach(t),n1o=i($),nu=n($,"LI",{});var ZAe=s(nu);pse=n(ZAe,"STRONG",{});var LJr=s(pse);s1o=r(LJr,"roformer"),LJr.forEach(t),l1o=r(ZAe," \u2014 "),eq=n(ZAe,"A",{href:!0});var xJr=s(eq);i1o=r(xJr,"RoFormerModel"),xJr.forEach(t),d1o=r(ZAe," (RoFormer model)"),ZAe.forEach(t),c1o=i($),su=n($,"LI",{});var e6e=s(su);use=n(e6e,"STRONG",{});var $Jr=s(use);f1o=r($Jr,"segformer"),$Jr.forEach(t),m1o=r(e6e," \u2014 "),oq=n(e6e,"A",{href:!0});var kJr=s(oq);g1o=r(kJr,"SegformerModel"),kJr.forEach(t),h1o=r(e6e," (SegFormer model)"),e6e.forEach(t),p1o=i($),lu=n($,"LI",{});var o6e=s(lu);_se=n(o6e,"STRONG",{});var SJr=s(_se);u1o=r(SJr,"sew"),SJr.forEach(t),_1o=r(o6e," \u2014 "),rq=n(o6e,"A",{href:!0});var RJr=s(rq);b1o=r(RJr,"SEWModel"),RJr.forEach(t),v1o=r(o6e," (SEW model)"),o6e.forEach(t),F1o=i($),iu=n($,"LI",{});var r6e=s(iu);bse=n(r6e,"STRONG",{});var BJr=s(bse);T1o=r(BJr,"sew-d"),BJr.forEach(t),M1o=r(r6e," \u2014 "),tq=n(r6e,"A",{href:!0});var PJr=s(tq);E1o=r(PJr,"SEWDModel"),PJr.forEach(t),C1o=r(r6e," (SEW-D model)"),r6e.forEach(t),w1o=i($),du=n($,"LI",{});var t6e=s(du);vse=n(t6e,"STRONG",{});var IJr=s(vse);A1o=r(IJr,"speech_to_text"),IJr.forEach(t),y1o=r(t6e," \u2014 "),aq=n(t6e,"A",{href:!0});var qJr=s(aq);L1o=r(qJr,"Speech2TextModel"),qJr.forEach(t),x1o=r(t6e," (Speech2Text model)"),t6e.forEach(t),$1o=i($),cu=n($,"LI",{});var a6e=s(cu);Fse=n(a6e,"STRONG",{});var NJr=s(Fse);k1o=r(NJr,"splinter"),NJr.forEach(t),S1o=r(a6e," \u2014 "),nq=n(a6e,"A",{href:!0});var jJr=s(nq);R1o=r(jJr,"SplinterModel"),jJr.forEach(t),B1o=r(a6e," (Splinter model)"),a6e.forEach(t),P1o=i($),fu=n($,"LI",{});var n6e=s(fu);Tse=n(n6e,"STRONG",{});var DJr=s(Tse);I1o=r(DJr,"squeezebert"),DJr.forEach(t),q1o=r(n6e," \u2014 "),sq=n(n6e,"A",{href:!0});var GJr=s(sq);N1o=r(GJr,"SqueezeBertModel"),GJr.forEach(t),j1o=r(n6e," (SqueezeBERT model)"),n6e.forEach(t),D1o=i($),mu=n($,"LI",{});var s6e=s(mu);Mse=n(s6e,"STRONG",{});var OJr=s(Mse);G1o=r(OJr,"swin"),OJr.forEach(t),O1o=r(s6e," \u2014 "),lq=n(s6e,"A",{href:!0});var VJr=s(lq);V1o=r(VJr,"SwinModel"),VJr.forEach(t),X1o=r(s6e," (Swin model)"),s6e.forEach(t),z1o=i($),gu=n($,"LI",{});var l6e=s(gu);Ese=n(l6e,"STRONG",{});var XJr=s(Ese);Q1o=r(XJr,"t5"),XJr.forEach(t),W1o=r(l6e," \u2014 "),iq=n(l6e,"A",{href:!0});var zJr=s(iq);H1o=r(zJr,"T5Model"),zJr.forEach(t),U1o=r(l6e," (T5 model)"),l6e.forEach(t),J1o=i($),hu=n($,"LI",{});var i6e=s(hu);Cse=n(i6e,"STRONG",{});var QJr=s(Cse);Y1o=r(QJr,"tapas"),QJr.forEach(t),K1o=r(i6e," \u2014 "),dq=n(i6e,"A",{href:!0});var WJr=s(dq);Z1o=r(WJr,"TapasModel"),WJr.forEach(t),ebo=r(i6e," (TAPAS model)"),i6e.forEach(t),obo=i($),pu=n($,"LI",{});var d6e=s(pu);wse=n(d6e,"STRONG",{});var HJr=s(wse);rbo=r(HJr,"transfo-xl"),HJr.forEach(t),tbo=r(d6e," \u2014 "),cq=n(d6e,"A",{href:!0});var UJr=s(cq);abo=r(UJr,"TransfoXLModel"),UJr.forEach(t),nbo=r(d6e," (Transformer-XL model)"),d6e.forEach(t),sbo=i($),uu=n($,"LI",{});var c6e=s(uu);Ase=n(c6e,"STRONG",{});var JJr=s(Ase);lbo=r(JJr,"unispeech"),JJr.forEach(t),ibo=r(c6e," \u2014 "),fq=n(c6e,"A",{href:!0});var YJr=s(fq);dbo=r(YJr,"UniSpeechModel"),YJr.forEach(t),cbo=r(c6e," (UniSpeech model)"),c6e.forEach(t),fbo=i($),_u=n($,"LI",{});var f6e=s(_u);yse=n(f6e,"STRONG",{});var KJr=s(yse);mbo=r(KJr,"unispeech-sat"),KJr.forEach(t),gbo=r(f6e," \u2014 "),mq=n(f6e,"A",{href:!0});var ZJr=s(mq);hbo=r(ZJr,"UniSpeechSatModel"),ZJr.forEach(t),pbo=r(f6e," (UniSpeechSat model)"),f6e.forEach(t),ubo=i($),bu=n($,"LI",{});var m6e=s(bu);Lse=n(m6e,"STRONG",{});var eYr=s(Lse);_bo=r(eYr,"van"),eYr.forEach(t),bbo=r(m6e," \u2014 "),gq=n(m6e,"A",{href:!0});var oYr=s(gq);vbo=r(oYr,"VanModel"),oYr.forEach(t),Fbo=r(m6e," (VAN model)"),m6e.forEach(t),Tbo=i($),vu=n($,"LI",{});var g6e=s(vu);xse=n(g6e,"STRONG",{});var rYr=s(xse);Mbo=r(rYr,"vilt"),rYr.forEach(t),Ebo=r(g6e," \u2014 "),hq=n(g6e,"A",{href:!0});var tYr=s(hq);Cbo=r(tYr,"ViltModel"),tYr.forEach(t),wbo=r(g6e," (ViLT model)"),g6e.forEach(t),Abo=i($),Fu=n($,"LI",{});var h6e=s(Fu);$se=n(h6e,"STRONG",{});var aYr=s($se);ybo=r(aYr,"vision-text-dual-encoder"),aYr.forEach(t),Lbo=r(h6e," \u2014 "),pq=n(h6e,"A",{href:!0});var nYr=s(pq);xbo=r(nYr,"VisionTextDualEncoderModel"),nYr.forEach(t),$bo=r(h6e," (VisionTextDualEncoder model)"),h6e.forEach(t),kbo=i($),Tu=n($,"LI",{});var p6e=s(Tu);kse=n(p6e,"STRONG",{});var sYr=s(kse);Sbo=r(sYr,"visual_bert"),sYr.forEach(t),Rbo=r(p6e," \u2014 "),uq=n(p6e,"A",{href:!0});var lYr=s(uq);Bbo=r(lYr,"VisualBertModel"),lYr.forEach(t),Pbo=r(p6e," (VisualBert model)"),p6e.forEach(t),Ibo=i($),Mu=n($,"LI",{});var u6e=s(Mu);Sse=n(u6e,"STRONG",{});var iYr=s(Sse);qbo=r(iYr,"vit"),iYr.forEach(t),Nbo=r(u6e," \u2014 "),_q=n(u6e,"A",{href:!0});var dYr=s(_q);jbo=r(dYr,"ViTModel"),dYr.forEach(t),Dbo=r(u6e," (ViT model)"),u6e.forEach(t),Gbo=i($),Eu=n($,"LI",{});var _6e=s(Eu);Rse=n(_6e,"STRONG",{});var cYr=s(Rse);Obo=r(cYr,"vit_mae"),cYr.forEach(t),Vbo=r(_6e," \u2014 "),bq=n(_6e,"A",{href:!0});var fYr=s(bq);Xbo=r(fYr,"ViTMAEModel"),fYr.forEach(t),zbo=r(_6e," (ViTMAE model)"),_6e.forEach(t),Qbo=i($),Cu=n($,"LI",{});var b6e=s(Cu);Bse=n(b6e,"STRONG",{});var mYr=s(Bse);Wbo=r(mYr,"wav2vec2"),mYr.forEach(t),Hbo=r(b6e," \u2014 "),vq=n(b6e,"A",{href:!0});var gYr=s(vq);Ubo=r(gYr,"Wav2Vec2Model"),gYr.forEach(t),Jbo=r(b6e," (Wav2Vec2 model)"),b6e.forEach(t),Ybo=i($),wu=n($,"LI",{});var v6e=s(wu);Pse=n(v6e,"STRONG",{});var hYr=s(Pse);Kbo=r(hYr,"wavlm"),hYr.forEach(t),Zbo=r(v6e," \u2014 "),Fq=n(v6e,"A",{href:!0});var pYr=s(Fq);e2o=r(pYr,"WavLMModel"),pYr.forEach(t),o2o=r(v6e," (WavLM model)"),v6e.forEach(t),r2o=i($),Au=n($,"LI",{});var F6e=s(Au);Ise=n(F6e,"STRONG",{});var uYr=s(Ise);t2o=r(uYr,"xglm"),uYr.forEach(t),a2o=r(F6e," \u2014 "),Tq=n(F6e,"A",{href:!0});var _Yr=s(Tq);n2o=r(_Yr,"XGLMModel"),_Yr.forEach(t),s2o=r(F6e," (XGLM model)"),F6e.forEach(t),l2o=i($),yu=n($,"LI",{});var T6e=s(yu);qse=n(T6e,"STRONG",{});var bYr=s(qse);i2o=r(bYr,"xlm"),bYr.forEach(t),d2o=r(T6e," \u2014 "),Mq=n(T6e,"A",{href:!0});var vYr=s(Mq);c2o=r(vYr,"XLMModel"),vYr.forEach(t),f2o=r(T6e," (XLM model)"),T6e.forEach(t),m2o=i($),Lu=n($,"LI",{});var M6e=s(Lu);Nse=n(M6e,"STRONG",{});var FYr=s(Nse);g2o=r(FYr,"xlm-prophetnet"),FYr.forEach(t),h2o=r(M6e," \u2014 "),Eq=n(M6e,"A",{href:!0});var TYr=s(Eq);p2o=r(TYr,"XLMProphetNetModel"),TYr.forEach(t),u2o=r(M6e," (XLMProphetNet model)"),M6e.forEach(t),_2o=i($),xu=n($,"LI",{});var E6e=s(xu);jse=n(E6e,"STRONG",{});var MYr=s(jse);b2o=r(MYr,"xlm-roberta"),MYr.forEach(t),v2o=r(E6e," \u2014 "),Cq=n(E6e,"A",{href:!0});var EYr=s(Cq);F2o=r(EYr,"XLMRobertaModel"),EYr.forEach(t),T2o=r(E6e," (XLM-RoBERTa model)"),E6e.forEach(t),M2o=i($),$u=n($,"LI",{});var C6e=s($u);Dse=n(C6e,"STRONG",{});var CYr=s(Dse);E2o=r(CYr,"xlm-roberta-xl"),CYr.forEach(t),C2o=r(C6e," \u2014 "),wq=n(C6e,"A",{href:!0});var wYr=s(wq);w2o=r(wYr,"XLMRobertaXLModel"),wYr.forEach(t),A2o=r(C6e," (XLM-RoBERTa-XL model)"),C6e.forEach(t),y2o=i($),ku=n($,"LI",{});var w6e=s(ku);Gse=n(w6e,"STRONG",{});var AYr=s(Gse);L2o=r(AYr,"xlnet"),AYr.forEach(t),x2o=r(w6e," \u2014 "),Aq=n(w6e,"A",{href:!0});var yYr=s(Aq);$2o=r(yYr,"XLNetModel"),yYr.forEach(t),k2o=r(w6e," (XLNet model)"),w6e.forEach(t),S2o=i($),Su=n($,"LI",{});var A6e=s(Su);Ose=n(A6e,"STRONG",{});var LYr=s(Ose);R2o=r(LYr,"yolos"),LYr.forEach(t),B2o=r(A6e," \u2014 "),yq=n(A6e,"A",{href:!0});var xYr=s(yq);P2o=r(xYr,"YolosModel"),xYr.forEach(t),I2o=r(A6e," (YOLOS model)"),A6e.forEach(t),q2o=i($),Ru=n($,"LI",{});var y6e=s(Ru);Vse=n(y6e,"STRONG",{});var $Yr=s(Vse);N2o=r($Yr,"yoso"),$Yr.forEach(t),j2o=r(y6e," \u2014 "),Lq=n(y6e,"A",{href:!0});var kYr=s(Lq);D2o=r(kYr,"YosoModel"),kYr.forEach(t),G2o=r(y6e," (YOSO model)"),y6e.forEach(t),$.forEach(t),O2o=i(Zt),Bu=n(Zt,"P",{});var L6e=s(Bu);V2o=r(L6e,"The model is set in evaluation mode by default using "),Xse=n(L6e,"CODE",{});var SYr=s(Xse);X2o=r(SYr,"model.eval()"),SYr.forEach(t),z2o=r(L6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zse=n(L6e,"CODE",{});var RYr=s(zse);Q2o=r(RYr,"model.train()"),RYr.forEach(t),L6e.forEach(t),W2o=i(Zt),T(Pu.$$.fragment,Zt),Zt.forEach(t),js.forEach(t),eIe=i(f),Ci=n(f,"H2",{class:!0});var aNe=s(Ci);Iu=n(aNe,"A",{id:!0,class:!0,href:!0});var BYr=s(Iu);Qse=n(BYr,"SPAN",{});var PYr=s(Qse);T(y0.$$.fragment,PYr),PYr.forEach(t),BYr.forEach(t),H2o=i(aNe),Wse=n(aNe,"SPAN",{});var IYr=s(Wse);U2o=r(IYr,"AutoModelForPreTraining"),IYr.forEach(t),aNe.forEach(t),oIe=i(f),xo=n(f,"DIV",{class:!0});var Ds=s(xo);T(L0.$$.fragment,Ds),J2o=i(Ds),wi=n(Ds,"P",{});var iK=s(wi);Y2o=r(iK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xq=n(iK,"A",{href:!0});var qYr=s(xq);K2o=r(qYr,"from_pretrained()"),qYr.forEach(t),Z2o=r(iK," class method or the "),$q=n(iK,"A",{href:!0});var NYr=s($q);e3o=r(NYr,"from_config()"),NYr.forEach(t),o3o=r(iK,` class
method.`),iK.forEach(t),r3o=i(Ds),x0=n(Ds,"P",{});var nNe=s(x0);t3o=r(nNe,"This class cannot be instantiated directly using "),Hse=n(nNe,"CODE",{});var jYr=s(Hse);a3o=r(jYr,"__init__()"),jYr.forEach(t),n3o=r(nNe," (throws an error)."),nNe.forEach(t),s3o=i(Ds),rt=n(Ds,"DIV",{class:!0});var oA=s(rt);T($0.$$.fragment,oA),l3o=i(oA),Use=n(oA,"P",{});var DYr=s(Use);i3o=r(DYr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),DYr.forEach(t),d3o=i(oA),Ai=n(oA,"P",{});var dK=s(Ai);c3o=r(dK,`Note:
Loading a model from its configuration file does `),Jse=n(dK,"STRONG",{});var GYr=s(Jse);f3o=r(GYr,"not"),GYr.forEach(t),m3o=r(dK,` load the model weights. It only affects the
model\u2019s configuration. Use `),kq=n(dK,"A",{href:!0});var OYr=s(kq);g3o=r(OYr,"from_pretrained()"),OYr.forEach(t),h3o=r(dK," to load the model weights."),dK.forEach(t),p3o=i(oA),T(qu.$$.fragment,oA),oA.forEach(t),u3o=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(k0.$$.fragment,ea),_3o=i(ea),Yse=n(ea,"P",{});var VYr=s(Yse);b3o=r(VYr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),VYr.forEach(t),v3o=i(ea),ya=n(ea,"P",{});var rA=s(ya);F3o=r(rA,"The model class to instantiate is selected based on the "),Kse=n(rA,"CODE",{});var XYr=s(Kse);T3o=r(XYr,"model_type"),XYr.forEach(t),M3o=r(rA,` property of the config object (either
passed as an argument or loaded from `),Zse=n(rA,"CODE",{});var zYr=s(Zse);E3o=r(zYr,"pretrained_model_name_or_path"),zYr.forEach(t),C3o=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ele=n(rA,"CODE",{});var QYr=s(ele);w3o=r(QYr,"pretrained_model_name_or_path"),QYr.forEach(t),A3o=r(rA,":"),rA.forEach(t),y3o=i(ea),G=n(ea,"UL",{});var V=s(G);Nu=n(V,"LI",{});var x6e=s(Nu);ole=n(x6e,"STRONG",{});var WYr=s(ole);L3o=r(WYr,"albert"),WYr.forEach(t),x3o=r(x6e," \u2014 "),Sq=n(x6e,"A",{href:!0});var HYr=s(Sq);$3o=r(HYr,"AlbertForPreTraining"),HYr.forEach(t),k3o=r(x6e," (ALBERT model)"),x6e.forEach(t),S3o=i(V),ju=n(V,"LI",{});var $6e=s(ju);rle=n($6e,"STRONG",{});var UYr=s(rle);R3o=r(UYr,"bart"),UYr.forEach(t),B3o=r($6e," \u2014 "),Rq=n($6e,"A",{href:!0});var JYr=s(Rq);P3o=r(JYr,"BartForConditionalGeneration"),JYr.forEach(t),I3o=r($6e," (BART model)"),$6e.forEach(t),q3o=i(V),Du=n(V,"LI",{});var k6e=s(Du);tle=n(k6e,"STRONG",{});var YYr=s(tle);N3o=r(YYr,"bert"),YYr.forEach(t),j3o=r(k6e," \u2014 "),Bq=n(k6e,"A",{href:!0});var KYr=s(Bq);D3o=r(KYr,"BertForPreTraining"),KYr.forEach(t),G3o=r(k6e," (BERT model)"),k6e.forEach(t),O3o=i(V),Gu=n(V,"LI",{});var S6e=s(Gu);ale=n(S6e,"STRONG",{});var ZYr=s(ale);V3o=r(ZYr,"big_bird"),ZYr.forEach(t),X3o=r(S6e," \u2014 "),Pq=n(S6e,"A",{href:!0});var eKr=s(Pq);z3o=r(eKr,"BigBirdForPreTraining"),eKr.forEach(t),Q3o=r(S6e," (BigBird model)"),S6e.forEach(t),W3o=i(V),Ou=n(V,"LI",{});var R6e=s(Ou);nle=n(R6e,"STRONG",{});var oKr=s(nle);H3o=r(oKr,"camembert"),oKr.forEach(t),U3o=r(R6e," \u2014 "),Iq=n(R6e,"A",{href:!0});var rKr=s(Iq);J3o=r(rKr,"CamembertForMaskedLM"),rKr.forEach(t),Y3o=r(R6e," (CamemBERT model)"),R6e.forEach(t),K3o=i(V),Vu=n(V,"LI",{});var B6e=s(Vu);sle=n(B6e,"STRONG",{});var tKr=s(sle);Z3o=r(tKr,"ctrl"),tKr.forEach(t),evo=r(B6e," \u2014 "),qq=n(B6e,"A",{href:!0});var aKr=s(qq);ovo=r(aKr,"CTRLLMHeadModel"),aKr.forEach(t),rvo=r(B6e," (CTRL model)"),B6e.forEach(t),tvo=i(V),Xu=n(V,"LI",{});var P6e=s(Xu);lle=n(P6e,"STRONG",{});var nKr=s(lle);avo=r(nKr,"data2vec-text"),nKr.forEach(t),nvo=r(P6e," \u2014 "),Nq=n(P6e,"A",{href:!0});var sKr=s(Nq);svo=r(sKr,"Data2VecTextForMaskedLM"),sKr.forEach(t),lvo=r(P6e," (Data2VecText model)"),P6e.forEach(t),ivo=i(V),zu=n(V,"LI",{});var I6e=s(zu);ile=n(I6e,"STRONG",{});var lKr=s(ile);dvo=r(lKr,"deberta"),lKr.forEach(t),cvo=r(I6e," \u2014 "),jq=n(I6e,"A",{href:!0});var iKr=s(jq);fvo=r(iKr,"DebertaForMaskedLM"),iKr.forEach(t),mvo=r(I6e," (DeBERTa model)"),I6e.forEach(t),gvo=i(V),Qu=n(V,"LI",{});var q6e=s(Qu);dle=n(q6e,"STRONG",{});var dKr=s(dle);hvo=r(dKr,"deberta-v2"),dKr.forEach(t),pvo=r(q6e," \u2014 "),Dq=n(q6e,"A",{href:!0});var cKr=s(Dq);uvo=r(cKr,"DebertaV2ForMaskedLM"),cKr.forEach(t),_vo=r(q6e," (DeBERTa-v2 model)"),q6e.forEach(t),bvo=i(V),Wu=n(V,"LI",{});var N6e=s(Wu);cle=n(N6e,"STRONG",{});var fKr=s(cle);vvo=r(fKr,"distilbert"),fKr.forEach(t),Fvo=r(N6e," \u2014 "),Gq=n(N6e,"A",{href:!0});var mKr=s(Gq);Tvo=r(mKr,"DistilBertForMaskedLM"),mKr.forEach(t),Mvo=r(N6e," (DistilBERT model)"),N6e.forEach(t),Evo=i(V),Hu=n(V,"LI",{});var j6e=s(Hu);fle=n(j6e,"STRONG",{});var gKr=s(fle);Cvo=r(gKr,"electra"),gKr.forEach(t),wvo=r(j6e," \u2014 "),Oq=n(j6e,"A",{href:!0});var hKr=s(Oq);Avo=r(hKr,"ElectraForPreTraining"),hKr.forEach(t),yvo=r(j6e," (ELECTRA model)"),j6e.forEach(t),Lvo=i(V),Uu=n(V,"LI",{});var D6e=s(Uu);mle=n(D6e,"STRONG",{});var pKr=s(mle);xvo=r(pKr,"flaubert"),pKr.forEach(t),$vo=r(D6e," \u2014 "),Vq=n(D6e,"A",{href:!0});var uKr=s(Vq);kvo=r(uKr,"FlaubertWithLMHeadModel"),uKr.forEach(t),Svo=r(D6e," (FlauBERT model)"),D6e.forEach(t),Rvo=i(V),Ju=n(V,"LI",{});var G6e=s(Ju);gle=n(G6e,"STRONG",{});var _Kr=s(gle);Bvo=r(_Kr,"flava"),_Kr.forEach(t),Pvo=r(G6e," \u2014 "),Xq=n(G6e,"A",{href:!0});var bKr=s(Xq);Ivo=r(bKr,"FlavaForPreTraining"),bKr.forEach(t),qvo=r(G6e," (Flava model)"),G6e.forEach(t),Nvo=i(V),Yu=n(V,"LI",{});var O6e=s(Yu);hle=n(O6e,"STRONG",{});var vKr=s(hle);jvo=r(vKr,"fnet"),vKr.forEach(t),Dvo=r(O6e," \u2014 "),zq=n(O6e,"A",{href:!0});var FKr=s(zq);Gvo=r(FKr,"FNetForPreTraining"),FKr.forEach(t),Ovo=r(O6e," (FNet model)"),O6e.forEach(t),Vvo=i(V),Ku=n(V,"LI",{});var V6e=s(Ku);ple=n(V6e,"STRONG",{});var TKr=s(ple);Xvo=r(TKr,"fsmt"),TKr.forEach(t),zvo=r(V6e," \u2014 "),Qq=n(V6e,"A",{href:!0});var MKr=s(Qq);Qvo=r(MKr,"FSMTForConditionalGeneration"),MKr.forEach(t),Wvo=r(V6e," (FairSeq Machine-Translation model)"),V6e.forEach(t),Hvo=i(V),Zu=n(V,"LI",{});var X6e=s(Zu);ule=n(X6e,"STRONG",{});var EKr=s(ule);Uvo=r(EKr,"funnel"),EKr.forEach(t),Jvo=r(X6e," \u2014 "),Wq=n(X6e,"A",{href:!0});var CKr=s(Wq);Yvo=r(CKr,"FunnelForPreTraining"),CKr.forEach(t),Kvo=r(X6e," (Funnel Transformer model)"),X6e.forEach(t),Zvo=i(V),e_=n(V,"LI",{});var z6e=s(e_);_le=n(z6e,"STRONG",{});var wKr=s(_le);eFo=r(wKr,"gpt2"),wKr.forEach(t),oFo=r(z6e," \u2014 "),Hq=n(z6e,"A",{href:!0});var AKr=s(Hq);rFo=r(AKr,"GPT2LMHeadModel"),AKr.forEach(t),tFo=r(z6e," (OpenAI GPT-2 model)"),z6e.forEach(t),aFo=i(V),o_=n(V,"LI",{});var Q6e=s(o_);ble=n(Q6e,"STRONG",{});var yKr=s(ble);nFo=r(yKr,"ibert"),yKr.forEach(t),sFo=r(Q6e," \u2014 "),Uq=n(Q6e,"A",{href:!0});var LKr=s(Uq);lFo=r(LKr,"IBertForMaskedLM"),LKr.forEach(t),iFo=r(Q6e," (I-BERT model)"),Q6e.forEach(t),dFo=i(V),r_=n(V,"LI",{});var W6e=s(r_);vle=n(W6e,"STRONG",{});var xKr=s(vle);cFo=r(xKr,"layoutlm"),xKr.forEach(t),fFo=r(W6e," \u2014 "),Jq=n(W6e,"A",{href:!0});var $Kr=s(Jq);mFo=r($Kr,"LayoutLMForMaskedLM"),$Kr.forEach(t),gFo=r(W6e," (LayoutLM model)"),W6e.forEach(t),hFo=i(V),t_=n(V,"LI",{});var H6e=s(t_);Fle=n(H6e,"STRONG",{});var kKr=s(Fle);pFo=r(kKr,"longformer"),kKr.forEach(t),uFo=r(H6e," \u2014 "),Yq=n(H6e,"A",{href:!0});var SKr=s(Yq);_Fo=r(SKr,"LongformerForMaskedLM"),SKr.forEach(t),bFo=r(H6e," (Longformer model)"),H6e.forEach(t),vFo=i(V),a_=n(V,"LI",{});var U6e=s(a_);Tle=n(U6e,"STRONG",{});var RKr=s(Tle);FFo=r(RKr,"lxmert"),RKr.forEach(t),TFo=r(U6e," \u2014 "),Kq=n(U6e,"A",{href:!0});var BKr=s(Kq);MFo=r(BKr,"LxmertForPreTraining"),BKr.forEach(t),EFo=r(U6e," (LXMERT model)"),U6e.forEach(t),CFo=i(V),n_=n(V,"LI",{});var J6e=s(n_);Mle=n(J6e,"STRONG",{});var PKr=s(Mle);wFo=r(PKr,"megatron-bert"),PKr.forEach(t),AFo=r(J6e," \u2014 "),Zq=n(J6e,"A",{href:!0});var IKr=s(Zq);yFo=r(IKr,"MegatronBertForPreTraining"),IKr.forEach(t),LFo=r(J6e," (MegatronBert model)"),J6e.forEach(t),xFo=i(V),s_=n(V,"LI",{});var Y6e=s(s_);Ele=n(Y6e,"STRONG",{});var qKr=s(Ele);$Fo=r(qKr,"mobilebert"),qKr.forEach(t),kFo=r(Y6e," \u2014 "),eN=n(Y6e,"A",{href:!0});var NKr=s(eN);SFo=r(NKr,"MobileBertForPreTraining"),NKr.forEach(t),RFo=r(Y6e," (MobileBERT model)"),Y6e.forEach(t),BFo=i(V),l_=n(V,"LI",{});var K6e=s(l_);Cle=n(K6e,"STRONG",{});var jKr=s(Cle);PFo=r(jKr,"mpnet"),jKr.forEach(t),IFo=r(K6e," \u2014 "),oN=n(K6e,"A",{href:!0});var DKr=s(oN);qFo=r(DKr,"MPNetForMaskedLM"),DKr.forEach(t),NFo=r(K6e," (MPNet model)"),K6e.forEach(t),jFo=i(V),i_=n(V,"LI",{});var Z6e=s(i_);wle=n(Z6e,"STRONG",{});var GKr=s(wle);DFo=r(GKr,"openai-gpt"),GKr.forEach(t),GFo=r(Z6e," \u2014 "),rN=n(Z6e,"A",{href:!0});var OKr=s(rN);OFo=r(OKr,"OpenAIGPTLMHeadModel"),OKr.forEach(t),VFo=r(Z6e," (OpenAI GPT model)"),Z6e.forEach(t),XFo=i(V),d_=n(V,"LI",{});var e0e=s(d_);Ale=n(e0e,"STRONG",{});var VKr=s(Ale);zFo=r(VKr,"retribert"),VKr.forEach(t),QFo=r(e0e," \u2014 "),tN=n(e0e,"A",{href:!0});var XKr=s(tN);WFo=r(XKr,"RetriBertModel"),XKr.forEach(t),HFo=r(e0e," (RetriBERT model)"),e0e.forEach(t),UFo=i(V),c_=n(V,"LI",{});var o0e=s(c_);yle=n(o0e,"STRONG",{});var zKr=s(yle);JFo=r(zKr,"roberta"),zKr.forEach(t),YFo=r(o0e," \u2014 "),aN=n(o0e,"A",{href:!0});var QKr=s(aN);KFo=r(QKr,"RobertaForMaskedLM"),QKr.forEach(t),ZFo=r(o0e," (RoBERTa model)"),o0e.forEach(t),eTo=i(V),f_=n(V,"LI",{});var r0e=s(f_);Lle=n(r0e,"STRONG",{});var WKr=s(Lle);oTo=r(WKr,"squeezebert"),WKr.forEach(t),rTo=r(r0e," \u2014 "),nN=n(r0e,"A",{href:!0});var HKr=s(nN);tTo=r(HKr,"SqueezeBertForMaskedLM"),HKr.forEach(t),aTo=r(r0e," (SqueezeBERT model)"),r0e.forEach(t),nTo=i(V),m_=n(V,"LI",{});var t0e=s(m_);xle=n(t0e,"STRONG",{});var UKr=s(xle);sTo=r(UKr,"t5"),UKr.forEach(t),lTo=r(t0e," \u2014 "),sN=n(t0e,"A",{href:!0});var JKr=s(sN);iTo=r(JKr,"T5ForConditionalGeneration"),JKr.forEach(t),dTo=r(t0e," (T5 model)"),t0e.forEach(t),cTo=i(V),g_=n(V,"LI",{});var a0e=s(g_);$le=n(a0e,"STRONG",{});var YKr=s($le);fTo=r(YKr,"tapas"),YKr.forEach(t),mTo=r(a0e," \u2014 "),lN=n(a0e,"A",{href:!0});var KKr=s(lN);gTo=r(KKr,"TapasForMaskedLM"),KKr.forEach(t),hTo=r(a0e," (TAPAS model)"),a0e.forEach(t),pTo=i(V),h_=n(V,"LI",{});var n0e=s(h_);kle=n(n0e,"STRONG",{});var ZKr=s(kle);uTo=r(ZKr,"transfo-xl"),ZKr.forEach(t),_To=r(n0e," \u2014 "),iN=n(n0e,"A",{href:!0});var eZr=s(iN);bTo=r(eZr,"TransfoXLLMHeadModel"),eZr.forEach(t),vTo=r(n0e," (Transformer-XL model)"),n0e.forEach(t),FTo=i(V),p_=n(V,"LI",{});var s0e=s(p_);Sle=n(s0e,"STRONG",{});var oZr=s(Sle);TTo=r(oZr,"unispeech"),oZr.forEach(t),MTo=r(s0e," \u2014 "),dN=n(s0e,"A",{href:!0});var rZr=s(dN);ETo=r(rZr,"UniSpeechForPreTraining"),rZr.forEach(t),CTo=r(s0e," (UniSpeech model)"),s0e.forEach(t),wTo=i(V),u_=n(V,"LI",{});var l0e=s(u_);Rle=n(l0e,"STRONG",{});var tZr=s(Rle);ATo=r(tZr,"unispeech-sat"),tZr.forEach(t),yTo=r(l0e," \u2014 "),cN=n(l0e,"A",{href:!0});var aZr=s(cN);LTo=r(aZr,"UniSpeechSatForPreTraining"),aZr.forEach(t),xTo=r(l0e," (UniSpeechSat model)"),l0e.forEach(t),$To=i(V),__=n(V,"LI",{});var i0e=s(__);Ble=n(i0e,"STRONG",{});var nZr=s(Ble);kTo=r(nZr,"visual_bert"),nZr.forEach(t),STo=r(i0e," \u2014 "),fN=n(i0e,"A",{href:!0});var sZr=s(fN);RTo=r(sZr,"VisualBertForPreTraining"),sZr.forEach(t),BTo=r(i0e," (VisualBert model)"),i0e.forEach(t),PTo=i(V),b_=n(V,"LI",{});var d0e=s(b_);Ple=n(d0e,"STRONG",{});var lZr=s(Ple);ITo=r(lZr,"vit_mae"),lZr.forEach(t),qTo=r(d0e," \u2014 "),mN=n(d0e,"A",{href:!0});var iZr=s(mN);NTo=r(iZr,"ViTMAEForPreTraining"),iZr.forEach(t),jTo=r(d0e," (ViTMAE model)"),d0e.forEach(t),DTo=i(V),v_=n(V,"LI",{});var c0e=s(v_);Ile=n(c0e,"STRONG",{});var dZr=s(Ile);GTo=r(dZr,"wav2vec2"),dZr.forEach(t),OTo=r(c0e," \u2014 "),gN=n(c0e,"A",{href:!0});var cZr=s(gN);VTo=r(cZr,"Wav2Vec2ForPreTraining"),cZr.forEach(t),XTo=r(c0e," (Wav2Vec2 model)"),c0e.forEach(t),zTo=i(V),F_=n(V,"LI",{});var f0e=s(F_);qle=n(f0e,"STRONG",{});var fZr=s(qle);QTo=r(fZr,"xlm"),fZr.forEach(t),WTo=r(f0e," \u2014 "),hN=n(f0e,"A",{href:!0});var mZr=s(hN);HTo=r(mZr,"XLMWithLMHeadModel"),mZr.forEach(t),UTo=r(f0e," (XLM model)"),f0e.forEach(t),JTo=i(V),T_=n(V,"LI",{});var m0e=s(T_);Nle=n(m0e,"STRONG",{});var gZr=s(Nle);YTo=r(gZr,"xlm-roberta"),gZr.forEach(t),KTo=r(m0e," \u2014 "),pN=n(m0e,"A",{href:!0});var hZr=s(pN);ZTo=r(hZr,"XLMRobertaForMaskedLM"),hZr.forEach(t),e7o=r(m0e," (XLM-RoBERTa model)"),m0e.forEach(t),o7o=i(V),M_=n(V,"LI",{});var g0e=s(M_);jle=n(g0e,"STRONG",{});var pZr=s(jle);r7o=r(pZr,"xlm-roberta-xl"),pZr.forEach(t),t7o=r(g0e," \u2014 "),uN=n(g0e,"A",{href:!0});var uZr=s(uN);a7o=r(uZr,"XLMRobertaXLForMaskedLM"),uZr.forEach(t),n7o=r(g0e," (XLM-RoBERTa-XL model)"),g0e.forEach(t),s7o=i(V),E_=n(V,"LI",{});var h0e=s(E_);Dle=n(h0e,"STRONG",{});var _Zr=s(Dle);l7o=r(_Zr,"xlnet"),_Zr.forEach(t),i7o=r(h0e," \u2014 "),_N=n(h0e,"A",{href:!0});var bZr=s(_N);d7o=r(bZr,"XLNetLMHeadModel"),bZr.forEach(t),c7o=r(h0e," (XLNet model)"),h0e.forEach(t),V.forEach(t),f7o=i(ea),C_=n(ea,"P",{});var p0e=s(C_);m7o=r(p0e,"The model is set in evaluation mode by default using "),Gle=n(p0e,"CODE",{});var vZr=s(Gle);g7o=r(vZr,"model.eval()"),vZr.forEach(t),h7o=r(p0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ole=n(p0e,"CODE",{});var FZr=s(Ole);p7o=r(FZr,"model.train()"),FZr.forEach(t),p0e.forEach(t),u7o=i(ea),T(w_.$$.fragment,ea),ea.forEach(t),Ds.forEach(t),rIe=i(f),yi=n(f,"H2",{class:!0});var sNe=s(yi);A_=n(sNe,"A",{id:!0,class:!0,href:!0});var TZr=s(A_);Vle=n(TZr,"SPAN",{});var MZr=s(Vle);T(S0.$$.fragment,MZr),MZr.forEach(t),TZr.forEach(t),_7o=i(sNe),Xle=n(sNe,"SPAN",{});var EZr=s(Xle);b7o=r(EZr,"AutoModelForCausalLM"),EZr.forEach(t),sNe.forEach(t),tIe=i(f),$o=n(f,"DIV",{class:!0});var Gs=s($o);T(R0.$$.fragment,Gs),v7o=i(Gs),Li=n(Gs,"P",{});var cK=s(Li);F7o=r(cK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bN=n(cK,"A",{href:!0});var CZr=s(bN);T7o=r(CZr,"from_pretrained()"),CZr.forEach(t),M7o=r(cK," class method or the "),vN=n(cK,"A",{href:!0});var wZr=s(vN);E7o=r(wZr,"from_config()"),wZr.forEach(t),C7o=r(cK,` class
method.`),cK.forEach(t),w7o=i(Gs),B0=n(Gs,"P",{});var lNe=s(B0);A7o=r(lNe,"This class cannot be instantiated directly using "),zle=n(lNe,"CODE",{});var AZr=s(zle);y7o=r(AZr,"__init__()"),AZr.forEach(t),L7o=r(lNe," (throws an error)."),lNe.forEach(t),x7o=i(Gs),tt=n(Gs,"DIV",{class:!0});var tA=s(tt);T(P0.$$.fragment,tA),$7o=i(tA),Qle=n(tA,"P",{});var yZr=s(Qle);k7o=r(yZr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yZr.forEach(t),S7o=i(tA),xi=n(tA,"P",{});var fK=s(xi);R7o=r(fK,`Note:
Loading a model from its configuration file does `),Wle=n(fK,"STRONG",{});var LZr=s(Wle);B7o=r(LZr,"not"),LZr.forEach(t),P7o=r(fK,` load the model weights. It only affects the
model\u2019s configuration. Use `),FN=n(fK,"A",{href:!0});var xZr=s(FN);I7o=r(xZr,"from_pretrained()"),xZr.forEach(t),q7o=r(fK," to load the model weights."),fK.forEach(t),N7o=i(tA),T(y_.$$.fragment,tA),tA.forEach(t),j7o=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(I0.$$.fragment,oa),D7o=i(oa),Hle=n(oa,"P",{});var $Zr=s(Hle);G7o=r($Zr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$Zr.forEach(t),O7o=i(oa),La=n(oa,"P",{});var aA=s(La);V7o=r(aA,"The model class to instantiate is selected based on the "),Ule=n(aA,"CODE",{});var kZr=s(Ule);X7o=r(kZr,"model_type"),kZr.forEach(t),z7o=r(aA,` property of the config object (either
passed as an argument or loaded from `),Jle=n(aA,"CODE",{});var SZr=s(Jle);Q7o=r(SZr,"pretrained_model_name_or_path"),SZr.forEach(t),W7o=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yle=n(aA,"CODE",{});var RZr=s(Yle);H7o=r(RZr,"pretrained_model_name_or_path"),RZr.forEach(t),U7o=r(aA,":"),aA.forEach(t),J7o=i(oa),z=n(oa,"UL",{});var W=s(z);L_=n(W,"LI",{});var u0e=s(L_);Kle=n(u0e,"STRONG",{});var BZr=s(Kle);Y7o=r(BZr,"bart"),BZr.forEach(t),K7o=r(u0e," \u2014 "),TN=n(u0e,"A",{href:!0});var PZr=s(TN);Z7o=r(PZr,"BartForCausalLM"),PZr.forEach(t),eMo=r(u0e," (BART model)"),u0e.forEach(t),oMo=i(W),x_=n(W,"LI",{});var _0e=s(x_);Zle=n(_0e,"STRONG",{});var IZr=s(Zle);rMo=r(IZr,"bert"),IZr.forEach(t),tMo=r(_0e," \u2014 "),MN=n(_0e,"A",{href:!0});var qZr=s(MN);aMo=r(qZr,"BertLMHeadModel"),qZr.forEach(t),nMo=r(_0e," (BERT model)"),_0e.forEach(t),sMo=i(W),$_=n(W,"LI",{});var b0e=s($_);eie=n(b0e,"STRONG",{});var NZr=s(eie);lMo=r(NZr,"bert-generation"),NZr.forEach(t),iMo=r(b0e," \u2014 "),EN=n(b0e,"A",{href:!0});var jZr=s(EN);dMo=r(jZr,"BertGenerationDecoder"),jZr.forEach(t),cMo=r(b0e," (Bert Generation model)"),b0e.forEach(t),fMo=i(W),k_=n(W,"LI",{});var v0e=s(k_);oie=n(v0e,"STRONG",{});var DZr=s(oie);mMo=r(DZr,"big_bird"),DZr.forEach(t),gMo=r(v0e," \u2014 "),CN=n(v0e,"A",{href:!0});var GZr=s(CN);hMo=r(GZr,"BigBirdForCausalLM"),GZr.forEach(t),pMo=r(v0e," (BigBird model)"),v0e.forEach(t),uMo=i(W),S_=n(W,"LI",{});var F0e=s(S_);rie=n(F0e,"STRONG",{});var OZr=s(rie);_Mo=r(OZr,"bigbird_pegasus"),OZr.forEach(t),bMo=r(F0e," \u2014 "),wN=n(F0e,"A",{href:!0});var VZr=s(wN);vMo=r(VZr,"BigBirdPegasusForCausalLM"),VZr.forEach(t),FMo=r(F0e," (BigBirdPegasus model)"),F0e.forEach(t),TMo=i(W),R_=n(W,"LI",{});var T0e=s(R_);tie=n(T0e,"STRONG",{});var XZr=s(tie);MMo=r(XZr,"blenderbot"),XZr.forEach(t),EMo=r(T0e," \u2014 "),AN=n(T0e,"A",{href:!0});var zZr=s(AN);CMo=r(zZr,"BlenderbotForCausalLM"),zZr.forEach(t),wMo=r(T0e," (Blenderbot model)"),T0e.forEach(t),AMo=i(W),B_=n(W,"LI",{});var M0e=s(B_);aie=n(M0e,"STRONG",{});var QZr=s(aie);yMo=r(QZr,"blenderbot-small"),QZr.forEach(t),LMo=r(M0e," \u2014 "),yN=n(M0e,"A",{href:!0});var WZr=s(yN);xMo=r(WZr,"BlenderbotSmallForCausalLM"),WZr.forEach(t),$Mo=r(M0e," (BlenderbotSmall model)"),M0e.forEach(t),kMo=i(W),P_=n(W,"LI",{});var E0e=s(P_);nie=n(E0e,"STRONG",{});var HZr=s(nie);SMo=r(HZr,"camembert"),HZr.forEach(t),RMo=r(E0e," \u2014 "),LN=n(E0e,"A",{href:!0});var UZr=s(LN);BMo=r(UZr,"CamembertForCausalLM"),UZr.forEach(t),PMo=r(E0e," (CamemBERT model)"),E0e.forEach(t),IMo=i(W),I_=n(W,"LI",{});var C0e=s(I_);sie=n(C0e,"STRONG",{});var JZr=s(sie);qMo=r(JZr,"ctrl"),JZr.forEach(t),NMo=r(C0e," \u2014 "),xN=n(C0e,"A",{href:!0});var YZr=s(xN);jMo=r(YZr,"CTRLLMHeadModel"),YZr.forEach(t),DMo=r(C0e," (CTRL model)"),C0e.forEach(t),GMo=i(W),q_=n(W,"LI",{});var w0e=s(q_);lie=n(w0e,"STRONG",{});var KZr=s(lie);OMo=r(KZr,"data2vec-text"),KZr.forEach(t),VMo=r(w0e," \u2014 "),$N=n(w0e,"A",{href:!0});var ZZr=s($N);XMo=r(ZZr,"Data2VecTextForCausalLM"),ZZr.forEach(t),zMo=r(w0e," (Data2VecText model)"),w0e.forEach(t),QMo=i(W),N_=n(W,"LI",{});var A0e=s(N_);iie=n(A0e,"STRONG",{});var eet=s(iie);WMo=r(eet,"electra"),eet.forEach(t),HMo=r(A0e," \u2014 "),kN=n(A0e,"A",{href:!0});var oet=s(kN);UMo=r(oet,"ElectraForCausalLM"),oet.forEach(t),JMo=r(A0e," (ELECTRA model)"),A0e.forEach(t),YMo=i(W),j_=n(W,"LI",{});var y0e=s(j_);die=n(y0e,"STRONG",{});var ret=s(die);KMo=r(ret,"gpt2"),ret.forEach(t),ZMo=r(y0e," \u2014 "),SN=n(y0e,"A",{href:!0});var tet=s(SN);e4o=r(tet,"GPT2LMHeadModel"),tet.forEach(t),o4o=r(y0e," (OpenAI GPT-2 model)"),y0e.forEach(t),r4o=i(W),D_=n(W,"LI",{});var L0e=s(D_);cie=n(L0e,"STRONG",{});var aet=s(cie);t4o=r(aet,"gpt_neo"),aet.forEach(t),a4o=r(L0e," \u2014 "),RN=n(L0e,"A",{href:!0});var net=s(RN);n4o=r(net,"GPTNeoForCausalLM"),net.forEach(t),s4o=r(L0e," (GPT Neo model)"),L0e.forEach(t),l4o=i(W),G_=n(W,"LI",{});var x0e=s(G_);fie=n(x0e,"STRONG",{});var set=s(fie);i4o=r(set,"gptj"),set.forEach(t),d4o=r(x0e," \u2014 "),BN=n(x0e,"A",{href:!0});var iet=s(BN);c4o=r(iet,"GPTJForCausalLM"),iet.forEach(t),f4o=r(x0e," (GPT-J model)"),x0e.forEach(t),m4o=i(W),O_=n(W,"LI",{});var $0e=s(O_);mie=n($0e,"STRONG",{});var det=s(mie);g4o=r(det,"marian"),det.forEach(t),h4o=r($0e," \u2014 "),PN=n($0e,"A",{href:!0});var cet=s(PN);p4o=r(cet,"MarianForCausalLM"),cet.forEach(t),u4o=r($0e," (Marian model)"),$0e.forEach(t),_4o=i(W),V_=n(W,"LI",{});var k0e=s(V_);gie=n(k0e,"STRONG",{});var fet=s(gie);b4o=r(fet,"mbart"),fet.forEach(t),v4o=r(k0e," \u2014 "),IN=n(k0e,"A",{href:!0});var met=s(IN);F4o=r(met,"MBartForCausalLM"),met.forEach(t),T4o=r(k0e," (mBART model)"),k0e.forEach(t),M4o=i(W),X_=n(W,"LI",{});var S0e=s(X_);hie=n(S0e,"STRONG",{});var get=s(hie);E4o=r(get,"megatron-bert"),get.forEach(t),C4o=r(S0e," \u2014 "),qN=n(S0e,"A",{href:!0});var het=s(qN);w4o=r(het,"MegatronBertForCausalLM"),het.forEach(t),A4o=r(S0e," (MegatronBert model)"),S0e.forEach(t),y4o=i(W),z_=n(W,"LI",{});var R0e=s(z_);pie=n(R0e,"STRONG",{});var pet=s(pie);L4o=r(pet,"openai-gpt"),pet.forEach(t),x4o=r(R0e," \u2014 "),NN=n(R0e,"A",{href:!0});var uet=s(NN);$4o=r(uet,"OpenAIGPTLMHeadModel"),uet.forEach(t),k4o=r(R0e," (OpenAI GPT model)"),R0e.forEach(t),S4o=i(W),Q_=n(W,"LI",{});var B0e=s(Q_);uie=n(B0e,"STRONG",{});var _et=s(uie);R4o=r(_et,"pegasus"),_et.forEach(t),B4o=r(B0e," \u2014 "),jN=n(B0e,"A",{href:!0});var bet=s(jN);P4o=r(bet,"PegasusForCausalLM"),bet.forEach(t),I4o=r(B0e," (Pegasus model)"),B0e.forEach(t),q4o=i(W),W_=n(W,"LI",{});var P0e=s(W_);_ie=n(P0e,"STRONG",{});var vet=s(_ie);N4o=r(vet,"plbart"),vet.forEach(t),j4o=r(P0e," \u2014 "),DN=n(P0e,"A",{href:!0});var Fet=s(DN);D4o=r(Fet,"PLBartForCausalLM"),Fet.forEach(t),G4o=r(P0e," (PLBart model)"),P0e.forEach(t),O4o=i(W),H_=n(W,"LI",{});var I0e=s(H_);bie=n(I0e,"STRONG",{});var Tet=s(bie);V4o=r(Tet,"prophetnet"),Tet.forEach(t),X4o=r(I0e," \u2014 "),GN=n(I0e,"A",{href:!0});var Met=s(GN);z4o=r(Met,"ProphetNetForCausalLM"),Met.forEach(t),Q4o=r(I0e," (ProphetNet model)"),I0e.forEach(t),W4o=i(W),U_=n(W,"LI",{});var q0e=s(U_);vie=n(q0e,"STRONG",{});var Eet=s(vie);H4o=r(Eet,"qdqbert"),Eet.forEach(t),U4o=r(q0e," \u2014 "),ON=n(q0e,"A",{href:!0});var Cet=s(ON);J4o=r(Cet,"QDQBertLMHeadModel"),Cet.forEach(t),Y4o=r(q0e," (QDQBert model)"),q0e.forEach(t),K4o=i(W),J_=n(W,"LI",{});var N0e=s(J_);Fie=n(N0e,"STRONG",{});var wet=s(Fie);Z4o=r(wet,"reformer"),wet.forEach(t),eEo=r(N0e," \u2014 "),VN=n(N0e,"A",{href:!0});var Aet=s(VN);oEo=r(Aet,"ReformerModelWithLMHead"),Aet.forEach(t),rEo=r(N0e," (Reformer model)"),N0e.forEach(t),tEo=i(W),Y_=n(W,"LI",{});var j0e=s(Y_);Tie=n(j0e,"STRONG",{});var yet=s(Tie);aEo=r(yet,"rembert"),yet.forEach(t),nEo=r(j0e," \u2014 "),XN=n(j0e,"A",{href:!0});var Let=s(XN);sEo=r(Let,"RemBertForCausalLM"),Let.forEach(t),lEo=r(j0e," (RemBERT model)"),j0e.forEach(t),iEo=i(W),K_=n(W,"LI",{});var D0e=s(K_);Mie=n(D0e,"STRONG",{});var xet=s(Mie);dEo=r(xet,"roberta"),xet.forEach(t),cEo=r(D0e," \u2014 "),zN=n(D0e,"A",{href:!0});var $et=s(zN);fEo=r($et,"RobertaForCausalLM"),$et.forEach(t),mEo=r(D0e," (RoBERTa model)"),D0e.forEach(t),gEo=i(W),Z_=n(W,"LI",{});var G0e=s(Z_);Eie=n(G0e,"STRONG",{});var ket=s(Eie);hEo=r(ket,"roformer"),ket.forEach(t),pEo=r(G0e," \u2014 "),QN=n(G0e,"A",{href:!0});var Set=s(QN);uEo=r(Set,"RoFormerForCausalLM"),Set.forEach(t),_Eo=r(G0e," (RoFormer model)"),G0e.forEach(t),bEo=i(W),e1=n(W,"LI",{});var O0e=s(e1);Cie=n(O0e,"STRONG",{});var Ret=s(Cie);vEo=r(Ret,"speech_to_text_2"),Ret.forEach(t),FEo=r(O0e," \u2014 "),WN=n(O0e,"A",{href:!0});var Bet=s(WN);TEo=r(Bet,"Speech2Text2ForCausalLM"),Bet.forEach(t),MEo=r(O0e," (Speech2Text2 model)"),O0e.forEach(t),EEo=i(W),o1=n(W,"LI",{});var V0e=s(o1);wie=n(V0e,"STRONG",{});var Pet=s(wie);CEo=r(Pet,"transfo-xl"),Pet.forEach(t),wEo=r(V0e," \u2014 "),HN=n(V0e,"A",{href:!0});var Iet=s(HN);AEo=r(Iet,"TransfoXLLMHeadModel"),Iet.forEach(t),yEo=r(V0e," (Transformer-XL model)"),V0e.forEach(t),LEo=i(W),r1=n(W,"LI",{});var X0e=s(r1);Aie=n(X0e,"STRONG",{});var qet=s(Aie);xEo=r(qet,"trocr"),qet.forEach(t),$Eo=r(X0e," \u2014 "),UN=n(X0e,"A",{href:!0});var Net=s(UN);kEo=r(Net,"TrOCRForCausalLM"),Net.forEach(t),SEo=r(X0e," (TrOCR model)"),X0e.forEach(t),REo=i(W),t1=n(W,"LI",{});var z0e=s(t1);yie=n(z0e,"STRONG",{});var jet=s(yie);BEo=r(jet,"xglm"),jet.forEach(t),PEo=r(z0e," \u2014 "),JN=n(z0e,"A",{href:!0});var Det=s(JN);IEo=r(Det,"XGLMForCausalLM"),Det.forEach(t),qEo=r(z0e," (XGLM model)"),z0e.forEach(t),NEo=i(W),a1=n(W,"LI",{});var Q0e=s(a1);Lie=n(Q0e,"STRONG",{});var Get=s(Lie);jEo=r(Get,"xlm"),Get.forEach(t),DEo=r(Q0e," \u2014 "),YN=n(Q0e,"A",{href:!0});var Oet=s(YN);GEo=r(Oet,"XLMWithLMHeadModel"),Oet.forEach(t),OEo=r(Q0e," (XLM model)"),Q0e.forEach(t),VEo=i(W),n1=n(W,"LI",{});var W0e=s(n1);xie=n(W0e,"STRONG",{});var Vet=s(xie);XEo=r(Vet,"xlm-prophetnet"),Vet.forEach(t),zEo=r(W0e," \u2014 "),KN=n(W0e,"A",{href:!0});var Xet=s(KN);QEo=r(Xet,"XLMProphetNetForCausalLM"),Xet.forEach(t),WEo=r(W0e," (XLMProphetNet model)"),W0e.forEach(t),HEo=i(W),s1=n(W,"LI",{});var H0e=s(s1);$ie=n(H0e,"STRONG",{});var zet=s($ie);UEo=r(zet,"xlm-roberta"),zet.forEach(t),JEo=r(H0e," \u2014 "),ZN=n(H0e,"A",{href:!0});var Qet=s(ZN);YEo=r(Qet,"XLMRobertaForCausalLM"),Qet.forEach(t),KEo=r(H0e," (XLM-RoBERTa model)"),H0e.forEach(t),ZEo=i(W),l1=n(W,"LI",{});var U0e=s(l1);kie=n(U0e,"STRONG",{});var Wet=s(kie);e5o=r(Wet,"xlm-roberta-xl"),Wet.forEach(t),o5o=r(U0e," \u2014 "),ej=n(U0e,"A",{href:!0});var Het=s(ej);r5o=r(Het,"XLMRobertaXLForCausalLM"),Het.forEach(t),t5o=r(U0e," (XLM-RoBERTa-XL model)"),U0e.forEach(t),a5o=i(W),i1=n(W,"LI",{});var J0e=s(i1);Sie=n(J0e,"STRONG",{});var Uet=s(Sie);n5o=r(Uet,"xlnet"),Uet.forEach(t),s5o=r(J0e," \u2014 "),oj=n(J0e,"A",{href:!0});var Jet=s(oj);l5o=r(Jet,"XLNetLMHeadModel"),Jet.forEach(t),i5o=r(J0e," (XLNet model)"),J0e.forEach(t),W.forEach(t),d5o=i(oa),d1=n(oa,"P",{});var Y0e=s(d1);c5o=r(Y0e,"The model is set in evaluation mode by default using "),Rie=n(Y0e,"CODE",{});var Yet=s(Rie);f5o=r(Yet,"model.eval()"),Yet.forEach(t),m5o=r(Y0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bie=n(Y0e,"CODE",{});var Ket=s(Bie);g5o=r(Ket,"model.train()"),Ket.forEach(t),Y0e.forEach(t),h5o=i(oa),T(c1.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),aIe=i(f),$i=n(f,"H2",{class:!0});var iNe=s($i);f1=n(iNe,"A",{id:!0,class:!0,href:!0});var Zet=s(f1);Pie=n(Zet,"SPAN",{});var eot=s(Pie);T(q0.$$.fragment,eot),eot.forEach(t),Zet.forEach(t),p5o=i(iNe),Iie=n(iNe,"SPAN",{});var oot=s(Iie);u5o=r(oot,"AutoModelForMaskedLM"),oot.forEach(t),iNe.forEach(t),nIe=i(f),ko=n(f,"DIV",{class:!0});var Os=s(ko);T(N0.$$.fragment,Os),_5o=i(Os),ki=n(Os,"P",{});var mK=s(ki);b5o=r(mK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rj=n(mK,"A",{href:!0});var rot=s(rj);v5o=r(rot,"from_pretrained()"),rot.forEach(t),F5o=r(mK," class method or the "),tj=n(mK,"A",{href:!0});var tot=s(tj);T5o=r(tot,"from_config()"),tot.forEach(t),M5o=r(mK,` class
method.`),mK.forEach(t),E5o=i(Os),j0=n(Os,"P",{});var dNe=s(j0);C5o=r(dNe,"This class cannot be instantiated directly using "),qie=n(dNe,"CODE",{});var aot=s(qie);w5o=r(aot,"__init__()"),aot.forEach(t),A5o=r(dNe," (throws an error)."),dNe.forEach(t),y5o=i(Os),at=n(Os,"DIV",{class:!0});var nA=s(at);T(D0.$$.fragment,nA),L5o=i(nA),Nie=n(nA,"P",{});var not=s(Nie);x5o=r(not,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),not.forEach(t),$5o=i(nA),Si=n(nA,"P",{});var gK=s(Si);k5o=r(gK,`Note:
Loading a model from its configuration file does `),jie=n(gK,"STRONG",{});var sot=s(jie);S5o=r(sot,"not"),sot.forEach(t),R5o=r(gK,` load the model weights. It only affects the
model\u2019s configuration. Use `),aj=n(gK,"A",{href:!0});var lot=s(aj);B5o=r(lot,"from_pretrained()"),lot.forEach(t),P5o=r(gK," to load the model weights."),gK.forEach(t),I5o=i(nA),T(m1.$$.fragment,nA),nA.forEach(t),q5o=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(G0.$$.fragment,ra),N5o=i(ra),Die=n(ra,"P",{});var iot=s(Die);j5o=r(iot,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),iot.forEach(t),D5o=i(ra),xa=n(ra,"P",{});var sA=s(xa);G5o=r(sA,"The model class to instantiate is selected based on the "),Gie=n(sA,"CODE",{});var dot=s(Gie);O5o=r(dot,"model_type"),dot.forEach(t),V5o=r(sA,` property of the config object (either
passed as an argument or loaded from `),Oie=n(sA,"CODE",{});var cot=s(Oie);X5o=r(cot,"pretrained_model_name_or_path"),cot.forEach(t),z5o=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vie=n(sA,"CODE",{});var fot=s(Vie);Q5o=r(fot,"pretrained_model_name_or_path"),fot.forEach(t),W5o=r(sA,":"),sA.forEach(t),H5o=i(ra),Q=n(ra,"UL",{});var H=s(Q);g1=n(H,"LI",{});var K0e=s(g1);Xie=n(K0e,"STRONG",{});var mot=s(Xie);U5o=r(mot,"albert"),mot.forEach(t),J5o=r(K0e," \u2014 "),nj=n(K0e,"A",{href:!0});var got=s(nj);Y5o=r(got,"AlbertForMaskedLM"),got.forEach(t),K5o=r(K0e," (ALBERT model)"),K0e.forEach(t),Z5o=i(H),h1=n(H,"LI",{});var Z0e=s(h1);zie=n(Z0e,"STRONG",{});var hot=s(zie);eCo=r(hot,"bart"),hot.forEach(t),oCo=r(Z0e," \u2014 "),sj=n(Z0e,"A",{href:!0});var pot=s(sj);rCo=r(pot,"BartForConditionalGeneration"),pot.forEach(t),tCo=r(Z0e," (BART model)"),Z0e.forEach(t),aCo=i(H),p1=n(H,"LI",{});var eye=s(p1);Qie=n(eye,"STRONG",{});var uot=s(Qie);nCo=r(uot,"bert"),uot.forEach(t),sCo=r(eye," \u2014 "),lj=n(eye,"A",{href:!0});var _ot=s(lj);lCo=r(_ot,"BertForMaskedLM"),_ot.forEach(t),iCo=r(eye," (BERT model)"),eye.forEach(t),dCo=i(H),u1=n(H,"LI",{});var oye=s(u1);Wie=n(oye,"STRONG",{});var bot=s(Wie);cCo=r(bot,"big_bird"),bot.forEach(t),fCo=r(oye," \u2014 "),ij=n(oye,"A",{href:!0});var vot=s(ij);mCo=r(vot,"BigBirdForMaskedLM"),vot.forEach(t),gCo=r(oye," (BigBird model)"),oye.forEach(t),hCo=i(H),_1=n(H,"LI",{});var rye=s(_1);Hie=n(rye,"STRONG",{});var Fot=s(Hie);pCo=r(Fot,"camembert"),Fot.forEach(t),uCo=r(rye," \u2014 "),dj=n(rye,"A",{href:!0});var Tot=s(dj);_Co=r(Tot,"CamembertForMaskedLM"),Tot.forEach(t),bCo=r(rye," (CamemBERT model)"),rye.forEach(t),vCo=i(H),b1=n(H,"LI",{});var tye=s(b1);Uie=n(tye,"STRONG",{});var Mot=s(Uie);FCo=r(Mot,"convbert"),Mot.forEach(t),TCo=r(tye," \u2014 "),cj=n(tye,"A",{href:!0});var Eot=s(cj);MCo=r(Eot,"ConvBertForMaskedLM"),Eot.forEach(t),ECo=r(tye," (ConvBERT model)"),tye.forEach(t),CCo=i(H),v1=n(H,"LI",{});var aye=s(v1);Jie=n(aye,"STRONG",{});var Cot=s(Jie);wCo=r(Cot,"data2vec-text"),Cot.forEach(t),ACo=r(aye," \u2014 "),fj=n(aye,"A",{href:!0});var wot=s(fj);yCo=r(wot,"Data2VecTextForMaskedLM"),wot.forEach(t),LCo=r(aye," (Data2VecText model)"),aye.forEach(t),xCo=i(H),F1=n(H,"LI",{});var nye=s(F1);Yie=n(nye,"STRONG",{});var Aot=s(Yie);$Co=r(Aot,"deberta"),Aot.forEach(t),kCo=r(nye," \u2014 "),mj=n(nye,"A",{href:!0});var yot=s(mj);SCo=r(yot,"DebertaForMaskedLM"),yot.forEach(t),RCo=r(nye," (DeBERTa model)"),nye.forEach(t),BCo=i(H),T1=n(H,"LI",{});var sye=s(T1);Kie=n(sye,"STRONG",{});var Lot=s(Kie);PCo=r(Lot,"deberta-v2"),Lot.forEach(t),ICo=r(sye," \u2014 "),gj=n(sye,"A",{href:!0});var xot=s(gj);qCo=r(xot,"DebertaV2ForMaskedLM"),xot.forEach(t),NCo=r(sye," (DeBERTa-v2 model)"),sye.forEach(t),jCo=i(H),M1=n(H,"LI",{});var lye=s(M1);Zie=n(lye,"STRONG",{});var $ot=s(Zie);DCo=r($ot,"distilbert"),$ot.forEach(t),GCo=r(lye," \u2014 "),hj=n(lye,"A",{href:!0});var kot=s(hj);OCo=r(kot,"DistilBertForMaskedLM"),kot.forEach(t),VCo=r(lye," (DistilBERT model)"),lye.forEach(t),XCo=i(H),E1=n(H,"LI",{});var iye=s(E1);ede=n(iye,"STRONG",{});var Sot=s(ede);zCo=r(Sot,"electra"),Sot.forEach(t),QCo=r(iye," \u2014 "),pj=n(iye,"A",{href:!0});var Rot=s(pj);WCo=r(Rot,"ElectraForMaskedLM"),Rot.forEach(t),HCo=r(iye," (ELECTRA model)"),iye.forEach(t),UCo=i(H),C1=n(H,"LI",{});var dye=s(C1);ode=n(dye,"STRONG",{});var Bot=s(ode);JCo=r(Bot,"flaubert"),Bot.forEach(t),YCo=r(dye," \u2014 "),uj=n(dye,"A",{href:!0});var Pot=s(uj);KCo=r(Pot,"FlaubertWithLMHeadModel"),Pot.forEach(t),ZCo=r(dye," (FlauBERT model)"),dye.forEach(t),ewo=i(H),w1=n(H,"LI",{});var cye=s(w1);rde=n(cye,"STRONG",{});var Iot=s(rde);owo=r(Iot,"fnet"),Iot.forEach(t),rwo=r(cye," \u2014 "),_j=n(cye,"A",{href:!0});var qot=s(_j);two=r(qot,"FNetForMaskedLM"),qot.forEach(t),awo=r(cye," (FNet model)"),cye.forEach(t),nwo=i(H),A1=n(H,"LI",{});var fye=s(A1);tde=n(fye,"STRONG",{});var Not=s(tde);swo=r(Not,"funnel"),Not.forEach(t),lwo=r(fye," \u2014 "),bj=n(fye,"A",{href:!0});var jot=s(bj);iwo=r(jot,"FunnelForMaskedLM"),jot.forEach(t),dwo=r(fye," (Funnel Transformer model)"),fye.forEach(t),cwo=i(H),y1=n(H,"LI",{});var mye=s(y1);ade=n(mye,"STRONG",{});var Dot=s(ade);fwo=r(Dot,"ibert"),Dot.forEach(t),mwo=r(mye," \u2014 "),vj=n(mye,"A",{href:!0});var Got=s(vj);gwo=r(Got,"IBertForMaskedLM"),Got.forEach(t),hwo=r(mye," (I-BERT model)"),mye.forEach(t),pwo=i(H),L1=n(H,"LI",{});var gye=s(L1);nde=n(gye,"STRONG",{});var Oot=s(nde);uwo=r(Oot,"layoutlm"),Oot.forEach(t),_wo=r(gye," \u2014 "),Fj=n(gye,"A",{href:!0});var Vot=s(Fj);bwo=r(Vot,"LayoutLMForMaskedLM"),Vot.forEach(t),vwo=r(gye," (LayoutLM model)"),gye.forEach(t),Fwo=i(H),x1=n(H,"LI",{});var hye=s(x1);sde=n(hye,"STRONG",{});var Xot=s(sde);Two=r(Xot,"longformer"),Xot.forEach(t),Mwo=r(hye," \u2014 "),Tj=n(hye,"A",{href:!0});var zot=s(Tj);Ewo=r(zot,"LongformerForMaskedLM"),zot.forEach(t),Cwo=r(hye," (Longformer model)"),hye.forEach(t),wwo=i(H),$1=n(H,"LI",{});var pye=s($1);lde=n(pye,"STRONG",{});var Qot=s(lde);Awo=r(Qot,"mbart"),Qot.forEach(t),ywo=r(pye," \u2014 "),Mj=n(pye,"A",{href:!0});var Wot=s(Mj);Lwo=r(Wot,"MBartForConditionalGeneration"),Wot.forEach(t),xwo=r(pye," (mBART model)"),pye.forEach(t),$wo=i(H),k1=n(H,"LI",{});var uye=s(k1);ide=n(uye,"STRONG",{});var Hot=s(ide);kwo=r(Hot,"megatron-bert"),Hot.forEach(t),Swo=r(uye," \u2014 "),Ej=n(uye,"A",{href:!0});var Uot=s(Ej);Rwo=r(Uot,"MegatronBertForMaskedLM"),Uot.forEach(t),Bwo=r(uye," (MegatronBert model)"),uye.forEach(t),Pwo=i(H),S1=n(H,"LI",{});var _ye=s(S1);dde=n(_ye,"STRONG",{});var Jot=s(dde);Iwo=r(Jot,"mobilebert"),Jot.forEach(t),qwo=r(_ye," \u2014 "),Cj=n(_ye,"A",{href:!0});var Yot=s(Cj);Nwo=r(Yot,"MobileBertForMaskedLM"),Yot.forEach(t),jwo=r(_ye," (MobileBERT model)"),_ye.forEach(t),Dwo=i(H),R1=n(H,"LI",{});var bye=s(R1);cde=n(bye,"STRONG",{});var Kot=s(cde);Gwo=r(Kot,"mpnet"),Kot.forEach(t),Owo=r(bye," \u2014 "),wj=n(bye,"A",{href:!0});var Zot=s(wj);Vwo=r(Zot,"MPNetForMaskedLM"),Zot.forEach(t),Xwo=r(bye," (MPNet model)"),bye.forEach(t),zwo=i(H),B1=n(H,"LI",{});var vye=s(B1);fde=n(vye,"STRONG",{});var ert=s(fde);Qwo=r(ert,"nystromformer"),ert.forEach(t),Wwo=r(vye," \u2014 "),Aj=n(vye,"A",{href:!0});var ort=s(Aj);Hwo=r(ort,"NystromformerForMaskedLM"),ort.forEach(t),Uwo=r(vye," (Nystromformer model)"),vye.forEach(t),Jwo=i(H),P1=n(H,"LI",{});var Fye=s(P1);mde=n(Fye,"STRONG",{});var rrt=s(mde);Ywo=r(rrt,"perceiver"),rrt.forEach(t),Kwo=r(Fye," \u2014 "),yj=n(Fye,"A",{href:!0});var trt=s(yj);Zwo=r(trt,"PerceiverForMaskedLM"),trt.forEach(t),eAo=r(Fye," (Perceiver model)"),Fye.forEach(t),oAo=i(H),I1=n(H,"LI",{});var Tye=s(I1);gde=n(Tye,"STRONG",{});var art=s(gde);rAo=r(art,"qdqbert"),art.forEach(t),tAo=r(Tye," \u2014 "),Lj=n(Tye,"A",{href:!0});var nrt=s(Lj);aAo=r(nrt,"QDQBertForMaskedLM"),nrt.forEach(t),nAo=r(Tye," (QDQBert model)"),Tye.forEach(t),sAo=i(H),q1=n(H,"LI",{});var Mye=s(q1);hde=n(Mye,"STRONG",{});var srt=s(hde);lAo=r(srt,"reformer"),srt.forEach(t),iAo=r(Mye," \u2014 "),xj=n(Mye,"A",{href:!0});var lrt=s(xj);dAo=r(lrt,"ReformerForMaskedLM"),lrt.forEach(t),cAo=r(Mye," (Reformer model)"),Mye.forEach(t),fAo=i(H),N1=n(H,"LI",{});var Eye=s(N1);pde=n(Eye,"STRONG",{});var irt=s(pde);mAo=r(irt,"rembert"),irt.forEach(t),gAo=r(Eye," \u2014 "),$j=n(Eye,"A",{href:!0});var drt=s($j);hAo=r(drt,"RemBertForMaskedLM"),drt.forEach(t),pAo=r(Eye," (RemBERT model)"),Eye.forEach(t),uAo=i(H),j1=n(H,"LI",{});var Cye=s(j1);ude=n(Cye,"STRONG",{});var crt=s(ude);_Ao=r(crt,"roberta"),crt.forEach(t),bAo=r(Cye," \u2014 "),kj=n(Cye,"A",{href:!0});var frt=s(kj);vAo=r(frt,"RobertaForMaskedLM"),frt.forEach(t),FAo=r(Cye," (RoBERTa model)"),Cye.forEach(t),TAo=i(H),D1=n(H,"LI",{});var wye=s(D1);_de=n(wye,"STRONG",{});var mrt=s(_de);MAo=r(mrt,"roformer"),mrt.forEach(t),EAo=r(wye," \u2014 "),Sj=n(wye,"A",{href:!0});var grt=s(Sj);CAo=r(grt,"RoFormerForMaskedLM"),grt.forEach(t),wAo=r(wye," (RoFormer model)"),wye.forEach(t),AAo=i(H),G1=n(H,"LI",{});var Aye=s(G1);bde=n(Aye,"STRONG",{});var hrt=s(bde);yAo=r(hrt,"squeezebert"),hrt.forEach(t),LAo=r(Aye," \u2014 "),Rj=n(Aye,"A",{href:!0});var prt=s(Rj);xAo=r(prt,"SqueezeBertForMaskedLM"),prt.forEach(t),$Ao=r(Aye," (SqueezeBERT model)"),Aye.forEach(t),kAo=i(H),O1=n(H,"LI",{});var yye=s(O1);vde=n(yye,"STRONG",{});var urt=s(vde);SAo=r(urt,"tapas"),urt.forEach(t),RAo=r(yye," \u2014 "),Bj=n(yye,"A",{href:!0});var _rt=s(Bj);BAo=r(_rt,"TapasForMaskedLM"),_rt.forEach(t),PAo=r(yye," (TAPAS model)"),yye.forEach(t),IAo=i(H),V1=n(H,"LI",{});var Lye=s(V1);Fde=n(Lye,"STRONG",{});var brt=s(Fde);qAo=r(brt,"wav2vec2"),brt.forEach(t),NAo=r(Lye," \u2014 "),Tde=n(Lye,"CODE",{});var vrt=s(Tde);jAo=r(vrt,"Wav2Vec2ForMaskedLM"),vrt.forEach(t),DAo=r(Lye," (Wav2Vec2 model)"),Lye.forEach(t),GAo=i(H),X1=n(H,"LI",{});var xye=s(X1);Mde=n(xye,"STRONG",{});var Frt=s(Mde);OAo=r(Frt,"xlm"),Frt.forEach(t),VAo=r(xye," \u2014 "),Pj=n(xye,"A",{href:!0});var Trt=s(Pj);XAo=r(Trt,"XLMWithLMHeadModel"),Trt.forEach(t),zAo=r(xye," (XLM model)"),xye.forEach(t),QAo=i(H),z1=n(H,"LI",{});var $ye=s(z1);Ede=n($ye,"STRONG",{});var Mrt=s(Ede);WAo=r(Mrt,"xlm-roberta"),Mrt.forEach(t),HAo=r($ye," \u2014 "),Ij=n($ye,"A",{href:!0});var Ert=s(Ij);UAo=r(Ert,"XLMRobertaForMaskedLM"),Ert.forEach(t),JAo=r($ye," (XLM-RoBERTa model)"),$ye.forEach(t),YAo=i(H),Q1=n(H,"LI",{});var kye=s(Q1);Cde=n(kye,"STRONG",{});var Crt=s(Cde);KAo=r(Crt,"xlm-roberta-xl"),Crt.forEach(t),ZAo=r(kye," \u2014 "),qj=n(kye,"A",{href:!0});var wrt=s(qj);e6o=r(wrt,"XLMRobertaXLForMaskedLM"),wrt.forEach(t),o6o=r(kye," (XLM-RoBERTa-XL model)"),kye.forEach(t),r6o=i(H),W1=n(H,"LI",{});var Sye=s(W1);wde=n(Sye,"STRONG",{});var Art=s(wde);t6o=r(Art,"yoso"),Art.forEach(t),a6o=r(Sye," \u2014 "),Nj=n(Sye,"A",{href:!0});var yrt=s(Nj);n6o=r(yrt,"YosoForMaskedLM"),yrt.forEach(t),s6o=r(Sye," (YOSO model)"),Sye.forEach(t),H.forEach(t),l6o=i(ra),H1=n(ra,"P",{});var Rye=s(H1);i6o=r(Rye,"The model is set in evaluation mode by default using "),Ade=n(Rye,"CODE",{});var Lrt=s(Ade);d6o=r(Lrt,"model.eval()"),Lrt.forEach(t),c6o=r(Rye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yde=n(Rye,"CODE",{});var xrt=s(yde);f6o=r(xrt,"model.train()"),xrt.forEach(t),Rye.forEach(t),m6o=i(ra),T(U1.$$.fragment,ra),ra.forEach(t),Os.forEach(t),sIe=i(f),Ri=n(f,"H2",{class:!0});var cNe=s(Ri);J1=n(cNe,"A",{id:!0,class:!0,href:!0});var $rt=s(J1);Lde=n($rt,"SPAN",{});var krt=s(Lde);T(O0.$$.fragment,krt),krt.forEach(t),$rt.forEach(t),g6o=i(cNe),xde=n(cNe,"SPAN",{});var Srt=s(xde);h6o=r(Srt,"AutoModelForSeq2SeqLM"),Srt.forEach(t),cNe.forEach(t),lIe=i(f),So=n(f,"DIV",{class:!0});var Vs=s(So);T(V0.$$.fragment,Vs),p6o=i(Vs),Bi=n(Vs,"P",{});var hK=s(Bi);u6o=r(hK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),jj=n(hK,"A",{href:!0});var Rrt=s(jj);_6o=r(Rrt,"from_pretrained()"),Rrt.forEach(t),b6o=r(hK," class method or the "),Dj=n(hK,"A",{href:!0});var Brt=s(Dj);v6o=r(Brt,"from_config()"),Brt.forEach(t),F6o=r(hK,` class
method.`),hK.forEach(t),T6o=i(Vs),X0=n(Vs,"P",{});var fNe=s(X0);M6o=r(fNe,"This class cannot be instantiated directly using "),$de=n(fNe,"CODE",{});var Prt=s($de);E6o=r(Prt,"__init__()"),Prt.forEach(t),C6o=r(fNe," (throws an error)."),fNe.forEach(t),w6o=i(Vs),nt=n(Vs,"DIV",{class:!0});var lA=s(nt);T(z0.$$.fragment,lA),A6o=i(lA),kde=n(lA,"P",{});var Irt=s(kde);y6o=r(Irt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Irt.forEach(t),L6o=i(lA),Pi=n(lA,"P",{});var pK=s(Pi);x6o=r(pK,`Note:
Loading a model from its configuration file does `),Sde=n(pK,"STRONG",{});var qrt=s(Sde);$6o=r(qrt,"not"),qrt.forEach(t),k6o=r(pK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gj=n(pK,"A",{href:!0});var Nrt=s(Gj);S6o=r(Nrt,"from_pretrained()"),Nrt.forEach(t),R6o=r(pK," to load the model weights."),pK.forEach(t),B6o=i(lA),T(Y1.$$.fragment,lA),lA.forEach(t),P6o=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(Q0.$$.fragment,ta),I6o=i(ta),Rde=n(ta,"P",{});var jrt=s(Rde);q6o=r(jrt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),jrt.forEach(t),N6o=i(ta),$a=n(ta,"P",{});var iA=s($a);j6o=r(iA,"The model class to instantiate is selected based on the "),Bde=n(iA,"CODE",{});var Drt=s(Bde);D6o=r(Drt,"model_type"),Drt.forEach(t),G6o=r(iA,` property of the config object (either
passed as an argument or loaded from `),Pde=n(iA,"CODE",{});var Grt=s(Pde);O6o=r(Grt,"pretrained_model_name_or_path"),Grt.forEach(t),V6o=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ide=n(iA,"CODE",{});var Ort=s(Ide);X6o=r(Ort,"pretrained_model_name_or_path"),Ort.forEach(t),z6o=r(iA,":"),iA.forEach(t),Q6o=i(ta),he=n(ta,"UL",{});var ue=s(he);K1=n(ue,"LI",{});var Bye=s(K1);qde=n(Bye,"STRONG",{});var Vrt=s(qde);W6o=r(Vrt,"bart"),Vrt.forEach(t),H6o=r(Bye," \u2014 "),Oj=n(Bye,"A",{href:!0});var Xrt=s(Oj);U6o=r(Xrt,"BartForConditionalGeneration"),Xrt.forEach(t),J6o=r(Bye," (BART model)"),Bye.forEach(t),Y6o=i(ue),Z1=n(ue,"LI",{});var Pye=s(Z1);Nde=n(Pye,"STRONG",{});var zrt=s(Nde);K6o=r(zrt,"bigbird_pegasus"),zrt.forEach(t),Z6o=r(Pye," \u2014 "),Vj=n(Pye,"A",{href:!0});var Qrt=s(Vj);e0o=r(Qrt,"BigBirdPegasusForConditionalGeneration"),Qrt.forEach(t),o0o=r(Pye," (BigBirdPegasus model)"),Pye.forEach(t),r0o=i(ue),eb=n(ue,"LI",{});var Iye=s(eb);jde=n(Iye,"STRONG",{});var Wrt=s(jde);t0o=r(Wrt,"blenderbot"),Wrt.forEach(t),a0o=r(Iye," \u2014 "),Xj=n(Iye,"A",{href:!0});var Hrt=s(Xj);n0o=r(Hrt,"BlenderbotForConditionalGeneration"),Hrt.forEach(t),s0o=r(Iye," (Blenderbot model)"),Iye.forEach(t),l0o=i(ue),ob=n(ue,"LI",{});var qye=s(ob);Dde=n(qye,"STRONG",{});var Urt=s(Dde);i0o=r(Urt,"blenderbot-small"),Urt.forEach(t),d0o=r(qye," \u2014 "),zj=n(qye,"A",{href:!0});var Jrt=s(zj);c0o=r(Jrt,"BlenderbotSmallForConditionalGeneration"),Jrt.forEach(t),f0o=r(qye," (BlenderbotSmall model)"),qye.forEach(t),m0o=i(ue),rb=n(ue,"LI",{});var Nye=s(rb);Gde=n(Nye,"STRONG",{});var Yrt=s(Gde);g0o=r(Yrt,"encoder-decoder"),Yrt.forEach(t),h0o=r(Nye," \u2014 "),Qj=n(Nye,"A",{href:!0});var Krt=s(Qj);p0o=r(Krt,"EncoderDecoderModel"),Krt.forEach(t),u0o=r(Nye," (Encoder decoder model)"),Nye.forEach(t),_0o=i(ue),tb=n(ue,"LI",{});var jye=s(tb);Ode=n(jye,"STRONG",{});var Zrt=s(Ode);b0o=r(Zrt,"fsmt"),Zrt.forEach(t),v0o=r(jye," \u2014 "),Wj=n(jye,"A",{href:!0});var ett=s(Wj);F0o=r(ett,"FSMTForConditionalGeneration"),ett.forEach(t),T0o=r(jye," (FairSeq Machine-Translation model)"),jye.forEach(t),M0o=i(ue),ab=n(ue,"LI",{});var Dye=s(ab);Vde=n(Dye,"STRONG",{});var ott=s(Vde);E0o=r(ott,"led"),ott.forEach(t),C0o=r(Dye," \u2014 "),Hj=n(Dye,"A",{href:!0});var rtt=s(Hj);w0o=r(rtt,"LEDForConditionalGeneration"),rtt.forEach(t),A0o=r(Dye," (LED model)"),Dye.forEach(t),y0o=i(ue),nb=n(ue,"LI",{});var Gye=s(nb);Xde=n(Gye,"STRONG",{});var ttt=s(Xde);L0o=r(ttt,"m2m_100"),ttt.forEach(t),x0o=r(Gye," \u2014 "),Uj=n(Gye,"A",{href:!0});var att=s(Uj);$0o=r(att,"M2M100ForConditionalGeneration"),att.forEach(t),k0o=r(Gye," (M2M100 model)"),Gye.forEach(t),S0o=i(ue),sb=n(ue,"LI",{});var Oye=s(sb);zde=n(Oye,"STRONG",{});var ntt=s(zde);R0o=r(ntt,"marian"),ntt.forEach(t),B0o=r(Oye," \u2014 "),Jj=n(Oye,"A",{href:!0});var stt=s(Jj);P0o=r(stt,"MarianMTModel"),stt.forEach(t),I0o=r(Oye," (Marian model)"),Oye.forEach(t),q0o=i(ue),lb=n(ue,"LI",{});var Vye=s(lb);Qde=n(Vye,"STRONG",{});var ltt=s(Qde);N0o=r(ltt,"mbart"),ltt.forEach(t),j0o=r(Vye," \u2014 "),Yj=n(Vye,"A",{href:!0});var itt=s(Yj);D0o=r(itt,"MBartForConditionalGeneration"),itt.forEach(t),G0o=r(Vye," (mBART model)"),Vye.forEach(t),O0o=i(ue),ib=n(ue,"LI",{});var Xye=s(ib);Wde=n(Xye,"STRONG",{});var dtt=s(Wde);V0o=r(dtt,"mt5"),dtt.forEach(t),X0o=r(Xye," \u2014 "),Kj=n(Xye,"A",{href:!0});var ctt=s(Kj);z0o=r(ctt,"MT5ForConditionalGeneration"),ctt.forEach(t),Q0o=r(Xye," (mT5 model)"),Xye.forEach(t),W0o=i(ue),db=n(ue,"LI",{});var zye=s(db);Hde=n(zye,"STRONG",{});var ftt=s(Hde);H0o=r(ftt,"pegasus"),ftt.forEach(t),U0o=r(zye," \u2014 "),Zj=n(zye,"A",{href:!0});var mtt=s(Zj);J0o=r(mtt,"PegasusForConditionalGeneration"),mtt.forEach(t),Y0o=r(zye," (Pegasus model)"),zye.forEach(t),K0o=i(ue),cb=n(ue,"LI",{});var Qye=s(cb);Ude=n(Qye,"STRONG",{});var gtt=s(Ude);Z0o=r(gtt,"plbart"),gtt.forEach(t),eyo=r(Qye," \u2014 "),eD=n(Qye,"A",{href:!0});var htt=s(eD);oyo=r(htt,"PLBartForConditionalGeneration"),htt.forEach(t),ryo=r(Qye," (PLBart model)"),Qye.forEach(t),tyo=i(ue),fb=n(ue,"LI",{});var Wye=s(fb);Jde=n(Wye,"STRONG",{});var ptt=s(Jde);ayo=r(ptt,"prophetnet"),ptt.forEach(t),nyo=r(Wye," \u2014 "),oD=n(Wye,"A",{href:!0});var utt=s(oD);syo=r(utt,"ProphetNetForConditionalGeneration"),utt.forEach(t),lyo=r(Wye," (ProphetNet model)"),Wye.forEach(t),iyo=i(ue),mb=n(ue,"LI",{});var Hye=s(mb);Yde=n(Hye,"STRONG",{});var _tt=s(Yde);dyo=r(_tt,"t5"),_tt.forEach(t),cyo=r(Hye," \u2014 "),rD=n(Hye,"A",{href:!0});var btt=s(rD);fyo=r(btt,"T5ForConditionalGeneration"),btt.forEach(t),myo=r(Hye," (T5 model)"),Hye.forEach(t),gyo=i(ue),gb=n(ue,"LI",{});var Uye=s(gb);Kde=n(Uye,"STRONG",{});var vtt=s(Kde);hyo=r(vtt,"tapex"),vtt.forEach(t),pyo=r(Uye," \u2014 "),tD=n(Uye,"A",{href:!0});var Ftt=s(tD);uyo=r(Ftt,"BartForConditionalGeneration"),Ftt.forEach(t),_yo=r(Uye," (TAPEX model)"),Uye.forEach(t),byo=i(ue),hb=n(ue,"LI",{});var Jye=s(hb);Zde=n(Jye,"STRONG",{});var Ttt=s(Zde);vyo=r(Ttt,"xlm-prophetnet"),Ttt.forEach(t),Fyo=r(Jye," \u2014 "),aD=n(Jye,"A",{href:!0});var Mtt=s(aD);Tyo=r(Mtt,"XLMProphetNetForConditionalGeneration"),Mtt.forEach(t),Myo=r(Jye," (XLMProphetNet model)"),Jye.forEach(t),ue.forEach(t),Eyo=i(ta),pb=n(ta,"P",{});var Yye=s(pb);Cyo=r(Yye,"The model is set in evaluation mode by default using "),ece=n(Yye,"CODE",{});var Ett=s(ece);wyo=r(Ett,"model.eval()"),Ett.forEach(t),Ayo=r(Yye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oce=n(Yye,"CODE",{});var Ctt=s(oce);yyo=r(Ctt,"model.train()"),Ctt.forEach(t),Yye.forEach(t),Lyo=i(ta),T(ub.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),iIe=i(f),Ii=n(f,"H2",{class:!0});var mNe=s(Ii);_b=n(mNe,"A",{id:!0,class:!0,href:!0});var wtt=s(_b);rce=n(wtt,"SPAN",{});var Att=s(rce);T(W0.$$.fragment,Att),Att.forEach(t),wtt.forEach(t),xyo=i(mNe),tce=n(mNe,"SPAN",{});var ytt=s(tce);$yo=r(ytt,"AutoModelForSequenceClassification"),ytt.forEach(t),mNe.forEach(t),dIe=i(f),Ro=n(f,"DIV",{class:!0});var Xs=s(Ro);T(H0.$$.fragment,Xs),kyo=i(Xs),qi=n(Xs,"P",{});var uK=s(qi);Syo=r(uK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nD=n(uK,"A",{href:!0});var Ltt=s(nD);Ryo=r(Ltt,"from_pretrained()"),Ltt.forEach(t),Byo=r(uK," class method or the "),sD=n(uK,"A",{href:!0});var xtt=s(sD);Pyo=r(xtt,"from_config()"),xtt.forEach(t),Iyo=r(uK,` class
method.`),uK.forEach(t),qyo=i(Xs),U0=n(Xs,"P",{});var gNe=s(U0);Nyo=r(gNe,"This class cannot be instantiated directly using "),ace=n(gNe,"CODE",{});var $tt=s(ace);jyo=r($tt,"__init__()"),$tt.forEach(t),Dyo=r(gNe," (throws an error)."),gNe.forEach(t),Gyo=i(Xs),st=n(Xs,"DIV",{class:!0});var dA=s(st);T(J0.$$.fragment,dA),Oyo=i(dA),nce=n(dA,"P",{});var ktt=s(nce);Vyo=r(ktt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ktt.forEach(t),Xyo=i(dA),Ni=n(dA,"P",{});var _K=s(Ni);zyo=r(_K,`Note:
Loading a model from its configuration file does `),sce=n(_K,"STRONG",{});var Stt=s(sce);Qyo=r(Stt,"not"),Stt.forEach(t),Wyo=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),lD=n(_K,"A",{href:!0});var Rtt=s(lD);Hyo=r(Rtt,"from_pretrained()"),Rtt.forEach(t),Uyo=r(_K," to load the model weights."),_K.forEach(t),Jyo=i(dA),T(bb.$$.fragment,dA),dA.forEach(t),Yyo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(Y0.$$.fragment,aa),Kyo=i(aa),lce=n(aa,"P",{});var Btt=s(lce);Zyo=r(Btt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Btt.forEach(t),eLo=i(aa),ka=n(aa,"P",{});var cA=s(ka);oLo=r(cA,"The model class to instantiate is selected based on the "),ice=n(cA,"CODE",{});var Ptt=s(ice);rLo=r(Ptt,"model_type"),Ptt.forEach(t),tLo=r(cA,` property of the config object (either
passed as an argument or loaded from `),dce=n(cA,"CODE",{});var Itt=s(dce);aLo=r(Itt,"pretrained_model_name_or_path"),Itt.forEach(t),nLo=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cce=n(cA,"CODE",{});var qtt=s(cce);sLo=r(qtt,"pretrained_model_name_or_path"),qtt.forEach(t),lLo=r(cA,":"),cA.forEach(t),iLo=i(aa),q=n(aa,"UL",{});var N=s(q);vb=n(N,"LI",{});var Kye=s(vb);fce=n(Kye,"STRONG",{});var Ntt=s(fce);dLo=r(Ntt,"albert"),Ntt.forEach(t),cLo=r(Kye," \u2014 "),iD=n(Kye,"A",{href:!0});var jtt=s(iD);fLo=r(jtt,"AlbertForSequenceClassification"),jtt.forEach(t),mLo=r(Kye," (ALBERT model)"),Kye.forEach(t),gLo=i(N),Fb=n(N,"LI",{});var Zye=s(Fb);mce=n(Zye,"STRONG",{});var Dtt=s(mce);hLo=r(Dtt,"bart"),Dtt.forEach(t),pLo=r(Zye," \u2014 "),dD=n(Zye,"A",{href:!0});var Gtt=s(dD);uLo=r(Gtt,"BartForSequenceClassification"),Gtt.forEach(t),_Lo=r(Zye," (BART model)"),Zye.forEach(t),bLo=i(N),Tb=n(N,"LI",{});var eLe=s(Tb);gce=n(eLe,"STRONG",{});var Ott=s(gce);vLo=r(Ott,"bert"),Ott.forEach(t),FLo=r(eLe," \u2014 "),cD=n(eLe,"A",{href:!0});var Vtt=s(cD);TLo=r(Vtt,"BertForSequenceClassification"),Vtt.forEach(t),MLo=r(eLe," (BERT model)"),eLe.forEach(t),ELo=i(N),Mb=n(N,"LI",{});var oLe=s(Mb);hce=n(oLe,"STRONG",{});var Xtt=s(hce);CLo=r(Xtt,"big_bird"),Xtt.forEach(t),wLo=r(oLe," \u2014 "),fD=n(oLe,"A",{href:!0});var ztt=s(fD);ALo=r(ztt,"BigBirdForSequenceClassification"),ztt.forEach(t),yLo=r(oLe," (BigBird model)"),oLe.forEach(t),LLo=i(N),Eb=n(N,"LI",{});var rLe=s(Eb);pce=n(rLe,"STRONG",{});var Qtt=s(pce);xLo=r(Qtt,"bigbird_pegasus"),Qtt.forEach(t),$Lo=r(rLe," \u2014 "),mD=n(rLe,"A",{href:!0});var Wtt=s(mD);kLo=r(Wtt,"BigBirdPegasusForSequenceClassification"),Wtt.forEach(t),SLo=r(rLe," (BigBirdPegasus model)"),rLe.forEach(t),RLo=i(N),Cb=n(N,"LI",{});var tLe=s(Cb);uce=n(tLe,"STRONG",{});var Htt=s(uce);BLo=r(Htt,"camembert"),Htt.forEach(t),PLo=r(tLe," \u2014 "),gD=n(tLe,"A",{href:!0});var Utt=s(gD);ILo=r(Utt,"CamembertForSequenceClassification"),Utt.forEach(t),qLo=r(tLe," (CamemBERT model)"),tLe.forEach(t),NLo=i(N),wb=n(N,"LI",{});var aLe=s(wb);_ce=n(aLe,"STRONG",{});var Jtt=s(_ce);jLo=r(Jtt,"canine"),Jtt.forEach(t),DLo=r(aLe," \u2014 "),hD=n(aLe,"A",{href:!0});var Ytt=s(hD);GLo=r(Ytt,"CanineForSequenceClassification"),Ytt.forEach(t),OLo=r(aLe," (Canine model)"),aLe.forEach(t),VLo=i(N),Ab=n(N,"LI",{});var nLe=s(Ab);bce=n(nLe,"STRONG",{});var Ktt=s(bce);XLo=r(Ktt,"convbert"),Ktt.forEach(t),zLo=r(nLe," \u2014 "),pD=n(nLe,"A",{href:!0});var Ztt=s(pD);QLo=r(Ztt,"ConvBertForSequenceClassification"),Ztt.forEach(t),WLo=r(nLe," (ConvBERT model)"),nLe.forEach(t),HLo=i(N),yb=n(N,"LI",{});var sLe=s(yb);vce=n(sLe,"STRONG",{});var eat=s(vce);ULo=r(eat,"ctrl"),eat.forEach(t),JLo=r(sLe," \u2014 "),uD=n(sLe,"A",{href:!0});var oat=s(uD);YLo=r(oat,"CTRLForSequenceClassification"),oat.forEach(t),KLo=r(sLe," (CTRL model)"),sLe.forEach(t),ZLo=i(N),Lb=n(N,"LI",{});var lLe=s(Lb);Fce=n(lLe,"STRONG",{});var rat=s(Fce);e8o=r(rat,"data2vec-text"),rat.forEach(t),o8o=r(lLe," \u2014 "),_D=n(lLe,"A",{href:!0});var tat=s(_D);r8o=r(tat,"Data2VecTextForSequenceClassification"),tat.forEach(t),t8o=r(lLe," (Data2VecText model)"),lLe.forEach(t),a8o=i(N),xb=n(N,"LI",{});var iLe=s(xb);Tce=n(iLe,"STRONG",{});var aat=s(Tce);n8o=r(aat,"deberta"),aat.forEach(t),s8o=r(iLe," \u2014 "),bD=n(iLe,"A",{href:!0});var nat=s(bD);l8o=r(nat,"DebertaForSequenceClassification"),nat.forEach(t),i8o=r(iLe," (DeBERTa model)"),iLe.forEach(t),d8o=i(N),$b=n(N,"LI",{});var dLe=s($b);Mce=n(dLe,"STRONG",{});var sat=s(Mce);c8o=r(sat,"deberta-v2"),sat.forEach(t),f8o=r(dLe," \u2014 "),vD=n(dLe,"A",{href:!0});var lat=s(vD);m8o=r(lat,"DebertaV2ForSequenceClassification"),lat.forEach(t),g8o=r(dLe," (DeBERTa-v2 model)"),dLe.forEach(t),h8o=i(N),kb=n(N,"LI",{});var cLe=s(kb);Ece=n(cLe,"STRONG",{});var iat=s(Ece);p8o=r(iat,"distilbert"),iat.forEach(t),u8o=r(cLe," \u2014 "),FD=n(cLe,"A",{href:!0});var dat=s(FD);_8o=r(dat,"DistilBertForSequenceClassification"),dat.forEach(t),b8o=r(cLe," (DistilBERT model)"),cLe.forEach(t),v8o=i(N),Sb=n(N,"LI",{});var fLe=s(Sb);Cce=n(fLe,"STRONG",{});var cat=s(Cce);F8o=r(cat,"electra"),cat.forEach(t),T8o=r(fLe," \u2014 "),TD=n(fLe,"A",{href:!0});var fat=s(TD);M8o=r(fat,"ElectraForSequenceClassification"),fat.forEach(t),E8o=r(fLe," (ELECTRA model)"),fLe.forEach(t),C8o=i(N),Rb=n(N,"LI",{});var mLe=s(Rb);wce=n(mLe,"STRONG",{});var mat=s(wce);w8o=r(mat,"flaubert"),mat.forEach(t),A8o=r(mLe," \u2014 "),MD=n(mLe,"A",{href:!0});var gat=s(MD);y8o=r(gat,"FlaubertForSequenceClassification"),gat.forEach(t),L8o=r(mLe," (FlauBERT model)"),mLe.forEach(t),x8o=i(N),Bb=n(N,"LI",{});var gLe=s(Bb);Ace=n(gLe,"STRONG",{});var hat=s(Ace);$8o=r(hat,"fnet"),hat.forEach(t),k8o=r(gLe," \u2014 "),ED=n(gLe,"A",{href:!0});var pat=s(ED);S8o=r(pat,"FNetForSequenceClassification"),pat.forEach(t),R8o=r(gLe," (FNet model)"),gLe.forEach(t),B8o=i(N),Pb=n(N,"LI",{});var hLe=s(Pb);yce=n(hLe,"STRONG",{});var uat=s(yce);P8o=r(uat,"funnel"),uat.forEach(t),I8o=r(hLe," \u2014 "),CD=n(hLe,"A",{href:!0});var _at=s(CD);q8o=r(_at,"FunnelForSequenceClassification"),_at.forEach(t),N8o=r(hLe," (Funnel Transformer model)"),hLe.forEach(t),j8o=i(N),Ib=n(N,"LI",{});var pLe=s(Ib);Lce=n(pLe,"STRONG",{});var bat=s(Lce);D8o=r(bat,"glm"),bat.forEach(t),G8o=r(pLe," \u2014 "),wD=n(pLe,"A",{href:!0});var vat=s(wD);O8o=r(vat,"GLMForSequenceClassification"),vat.forEach(t),V8o=r(pLe," (GLM model)"),pLe.forEach(t),X8o=i(N),qb=n(N,"LI",{});var uLe=s(qb);xce=n(uLe,"STRONG",{});var Fat=s(xce);z8o=r(Fat,"gpt2"),Fat.forEach(t),Q8o=r(uLe," \u2014 "),AD=n(uLe,"A",{href:!0});var Tat=s(AD);W8o=r(Tat,"GPT2ForSequenceClassification"),Tat.forEach(t),H8o=r(uLe," (OpenAI GPT-2 model)"),uLe.forEach(t),U8o=i(N),Nb=n(N,"LI",{});var _Le=s(Nb);$ce=n(_Le,"STRONG",{});var Mat=s($ce);J8o=r(Mat,"gpt_neo"),Mat.forEach(t),Y8o=r(_Le," \u2014 "),yD=n(_Le,"A",{href:!0});var Eat=s(yD);K8o=r(Eat,"GPTNeoForSequenceClassification"),Eat.forEach(t),Z8o=r(_Le," (GPT Neo model)"),_Le.forEach(t),exo=i(N),jb=n(N,"LI",{});var bLe=s(jb);kce=n(bLe,"STRONG",{});var Cat=s(kce);oxo=r(Cat,"gptj"),Cat.forEach(t),rxo=r(bLe," \u2014 "),LD=n(bLe,"A",{href:!0});var wat=s(LD);txo=r(wat,"GPTJForSequenceClassification"),wat.forEach(t),axo=r(bLe," (GPT-J model)"),bLe.forEach(t),nxo=i(N),Db=n(N,"LI",{});var vLe=s(Db);Sce=n(vLe,"STRONG",{});var Aat=s(Sce);sxo=r(Aat,"ibert"),Aat.forEach(t),lxo=r(vLe," \u2014 "),xD=n(vLe,"A",{href:!0});var yat=s(xD);ixo=r(yat,"IBertForSequenceClassification"),yat.forEach(t),dxo=r(vLe," (I-BERT model)"),vLe.forEach(t),cxo=i(N),Gb=n(N,"LI",{});var FLe=s(Gb);Rce=n(FLe,"STRONG",{});var Lat=s(Rce);fxo=r(Lat,"layoutlm"),Lat.forEach(t),mxo=r(FLe," \u2014 "),$D=n(FLe,"A",{href:!0});var xat=s($D);gxo=r(xat,"LayoutLMForSequenceClassification"),xat.forEach(t),hxo=r(FLe," (LayoutLM model)"),FLe.forEach(t),pxo=i(N),Ob=n(N,"LI",{});var TLe=s(Ob);Bce=n(TLe,"STRONG",{});var $at=s(Bce);uxo=r($at,"layoutlmv2"),$at.forEach(t),_xo=r(TLe," \u2014 "),kD=n(TLe,"A",{href:!0});var kat=s(kD);bxo=r(kat,"LayoutLMv2ForSequenceClassification"),kat.forEach(t),vxo=r(TLe," (LayoutLMv2 model)"),TLe.forEach(t),Fxo=i(N),Vb=n(N,"LI",{});var MLe=s(Vb);Pce=n(MLe,"STRONG",{});var Sat=s(Pce);Txo=r(Sat,"led"),Sat.forEach(t),Mxo=r(MLe," \u2014 "),SD=n(MLe,"A",{href:!0});var Rat=s(SD);Exo=r(Rat,"LEDForSequenceClassification"),Rat.forEach(t),Cxo=r(MLe," (LED model)"),MLe.forEach(t),wxo=i(N),Xb=n(N,"LI",{});var ELe=s(Xb);Ice=n(ELe,"STRONG",{});var Bat=s(Ice);Axo=r(Bat,"longformer"),Bat.forEach(t),yxo=r(ELe," \u2014 "),RD=n(ELe,"A",{href:!0});var Pat=s(RD);Lxo=r(Pat,"LongformerForSequenceClassification"),Pat.forEach(t),xxo=r(ELe," (Longformer model)"),ELe.forEach(t),$xo=i(N),zb=n(N,"LI",{});var CLe=s(zb);qce=n(CLe,"STRONG",{});var Iat=s(qce);kxo=r(Iat,"mbart"),Iat.forEach(t),Sxo=r(CLe," \u2014 "),BD=n(CLe,"A",{href:!0});var qat=s(BD);Rxo=r(qat,"MBartForSequenceClassification"),qat.forEach(t),Bxo=r(CLe," (mBART model)"),CLe.forEach(t),Pxo=i(N),Qb=n(N,"LI",{});var wLe=s(Qb);Nce=n(wLe,"STRONG",{});var Nat=s(Nce);Ixo=r(Nat,"megatron-bert"),Nat.forEach(t),qxo=r(wLe," \u2014 "),PD=n(wLe,"A",{href:!0});var jat=s(PD);Nxo=r(jat,"MegatronBertForSequenceClassification"),jat.forEach(t),jxo=r(wLe," (MegatronBert model)"),wLe.forEach(t),Dxo=i(N),Wb=n(N,"LI",{});var ALe=s(Wb);jce=n(ALe,"STRONG",{});var Dat=s(jce);Gxo=r(Dat,"mobilebert"),Dat.forEach(t),Oxo=r(ALe," \u2014 "),ID=n(ALe,"A",{href:!0});var Gat=s(ID);Vxo=r(Gat,"MobileBertForSequenceClassification"),Gat.forEach(t),Xxo=r(ALe," (MobileBERT model)"),ALe.forEach(t),zxo=i(N),Hb=n(N,"LI",{});var yLe=s(Hb);Dce=n(yLe,"STRONG",{});var Oat=s(Dce);Qxo=r(Oat,"mpnet"),Oat.forEach(t),Wxo=r(yLe," \u2014 "),qD=n(yLe,"A",{href:!0});var Vat=s(qD);Hxo=r(Vat,"MPNetForSequenceClassification"),Vat.forEach(t),Uxo=r(yLe," (MPNet model)"),yLe.forEach(t),Jxo=i(N),Ub=n(N,"LI",{});var LLe=s(Ub);Gce=n(LLe,"STRONG",{});var Xat=s(Gce);Yxo=r(Xat,"nystromformer"),Xat.forEach(t),Kxo=r(LLe," \u2014 "),ND=n(LLe,"A",{href:!0});var zat=s(ND);Zxo=r(zat,"NystromformerForSequenceClassification"),zat.forEach(t),e9o=r(LLe," (Nystromformer model)"),LLe.forEach(t),o9o=i(N),Jb=n(N,"LI",{});var xLe=s(Jb);Oce=n(xLe,"STRONG",{});var Qat=s(Oce);r9o=r(Qat,"openai-gpt"),Qat.forEach(t),t9o=r(xLe," \u2014 "),jD=n(xLe,"A",{href:!0});var Wat=s(jD);a9o=r(Wat,"OpenAIGPTForSequenceClassification"),Wat.forEach(t),n9o=r(xLe," (OpenAI GPT model)"),xLe.forEach(t),s9o=i(N),Yb=n(N,"LI",{});var $Le=s(Yb);Vce=n($Le,"STRONG",{});var Hat=s(Vce);l9o=r(Hat,"perceiver"),Hat.forEach(t),i9o=r($Le," \u2014 "),DD=n($Le,"A",{href:!0});var Uat=s(DD);d9o=r(Uat,"PerceiverForSequenceClassification"),Uat.forEach(t),c9o=r($Le," (Perceiver model)"),$Le.forEach(t),f9o=i(N),Kb=n(N,"LI",{});var kLe=s(Kb);Xce=n(kLe,"STRONG",{});var Jat=s(Xce);m9o=r(Jat,"plbart"),Jat.forEach(t),g9o=r(kLe," \u2014 "),GD=n(kLe,"A",{href:!0});var Yat=s(GD);h9o=r(Yat,"PLBartForSequenceClassification"),Yat.forEach(t),p9o=r(kLe," (PLBart model)"),kLe.forEach(t),u9o=i(N),Zb=n(N,"LI",{});var SLe=s(Zb);zce=n(SLe,"STRONG",{});var Kat=s(zce);_9o=r(Kat,"qdqbert"),Kat.forEach(t),b9o=r(SLe," \u2014 "),OD=n(SLe,"A",{href:!0});var Zat=s(OD);v9o=r(Zat,"QDQBertForSequenceClassification"),Zat.forEach(t),F9o=r(SLe," (QDQBert model)"),SLe.forEach(t),T9o=i(N),e2=n(N,"LI",{});var RLe=s(e2);Qce=n(RLe,"STRONG",{});var ent=s(Qce);M9o=r(ent,"reformer"),ent.forEach(t),E9o=r(RLe," \u2014 "),VD=n(RLe,"A",{href:!0});var ont=s(VD);C9o=r(ont,"ReformerForSequenceClassification"),ont.forEach(t),w9o=r(RLe," (Reformer model)"),RLe.forEach(t),A9o=i(N),o2=n(N,"LI",{});var BLe=s(o2);Wce=n(BLe,"STRONG",{});var rnt=s(Wce);y9o=r(rnt,"rembert"),rnt.forEach(t),L9o=r(BLe," \u2014 "),XD=n(BLe,"A",{href:!0});var tnt=s(XD);x9o=r(tnt,"RemBertForSequenceClassification"),tnt.forEach(t),$9o=r(BLe," (RemBERT model)"),BLe.forEach(t),k9o=i(N),r2=n(N,"LI",{});var PLe=s(r2);Hce=n(PLe,"STRONG",{});var ant=s(Hce);S9o=r(ant,"roberta"),ant.forEach(t),R9o=r(PLe," \u2014 "),zD=n(PLe,"A",{href:!0});var nnt=s(zD);B9o=r(nnt,"RobertaForSequenceClassification"),nnt.forEach(t),P9o=r(PLe," (RoBERTa model)"),PLe.forEach(t),I9o=i(N),t2=n(N,"LI",{});var ILe=s(t2);Uce=n(ILe,"STRONG",{});var snt=s(Uce);q9o=r(snt,"roformer"),snt.forEach(t),N9o=r(ILe," \u2014 "),QD=n(ILe,"A",{href:!0});var lnt=s(QD);j9o=r(lnt,"RoFormerForSequenceClassification"),lnt.forEach(t),D9o=r(ILe," (RoFormer model)"),ILe.forEach(t),G9o=i(N),a2=n(N,"LI",{});var qLe=s(a2);Jce=n(qLe,"STRONG",{});var int=s(Jce);O9o=r(int,"squeezebert"),int.forEach(t),V9o=r(qLe," \u2014 "),WD=n(qLe,"A",{href:!0});var dnt=s(WD);X9o=r(dnt,"SqueezeBertForSequenceClassification"),dnt.forEach(t),z9o=r(qLe," (SqueezeBERT model)"),qLe.forEach(t),Q9o=i(N),n2=n(N,"LI",{});var NLe=s(n2);Yce=n(NLe,"STRONG",{});var cnt=s(Yce);W9o=r(cnt,"tapas"),cnt.forEach(t),H9o=r(NLe," \u2014 "),HD=n(NLe,"A",{href:!0});var fnt=s(HD);U9o=r(fnt,"TapasForSequenceClassification"),fnt.forEach(t),J9o=r(NLe," (TAPAS model)"),NLe.forEach(t),Y9o=i(N),s2=n(N,"LI",{});var jLe=s(s2);Kce=n(jLe,"STRONG",{});var mnt=s(Kce);K9o=r(mnt,"tapex"),mnt.forEach(t),Z9o=r(jLe," \u2014 "),UD=n(jLe,"A",{href:!0});var gnt=s(UD);e$o=r(gnt,"BartForSequenceClassification"),gnt.forEach(t),o$o=r(jLe," (TAPEX model)"),jLe.forEach(t),r$o=i(N),l2=n(N,"LI",{});var DLe=s(l2);Zce=n(DLe,"STRONG",{});var hnt=s(Zce);t$o=r(hnt,"transfo-xl"),hnt.forEach(t),a$o=r(DLe," \u2014 "),JD=n(DLe,"A",{href:!0});var pnt=s(JD);n$o=r(pnt,"TransfoXLForSequenceClassification"),pnt.forEach(t),s$o=r(DLe," (Transformer-XL model)"),DLe.forEach(t),l$o=i(N),i2=n(N,"LI",{});var GLe=s(i2);efe=n(GLe,"STRONG",{});var unt=s(efe);i$o=r(unt,"xlm"),unt.forEach(t),d$o=r(GLe," \u2014 "),YD=n(GLe,"A",{href:!0});var _nt=s(YD);c$o=r(_nt,"XLMForSequenceClassification"),_nt.forEach(t),f$o=r(GLe," (XLM model)"),GLe.forEach(t),m$o=i(N),d2=n(N,"LI",{});var OLe=s(d2);ofe=n(OLe,"STRONG",{});var bnt=s(ofe);g$o=r(bnt,"xlm-roberta"),bnt.forEach(t),h$o=r(OLe," \u2014 "),KD=n(OLe,"A",{href:!0});var vnt=s(KD);p$o=r(vnt,"XLMRobertaForSequenceClassification"),vnt.forEach(t),u$o=r(OLe," (XLM-RoBERTa model)"),OLe.forEach(t),_$o=i(N),c2=n(N,"LI",{});var VLe=s(c2);rfe=n(VLe,"STRONG",{});var Fnt=s(rfe);b$o=r(Fnt,"xlm-roberta-xl"),Fnt.forEach(t),v$o=r(VLe," \u2014 "),ZD=n(VLe,"A",{href:!0});var Tnt=s(ZD);F$o=r(Tnt,"XLMRobertaXLForSequenceClassification"),Tnt.forEach(t),T$o=r(VLe," (XLM-RoBERTa-XL model)"),VLe.forEach(t),M$o=i(N),f2=n(N,"LI",{});var XLe=s(f2);tfe=n(XLe,"STRONG",{});var Mnt=s(tfe);E$o=r(Mnt,"xlnet"),Mnt.forEach(t),C$o=r(XLe," \u2014 "),eG=n(XLe,"A",{href:!0});var Ent=s(eG);w$o=r(Ent,"XLNetForSequenceClassification"),Ent.forEach(t),A$o=r(XLe," (XLNet model)"),XLe.forEach(t),y$o=i(N),m2=n(N,"LI",{});var zLe=s(m2);afe=n(zLe,"STRONG",{});var Cnt=s(afe);L$o=r(Cnt,"yoso"),Cnt.forEach(t),x$o=r(zLe," \u2014 "),oG=n(zLe,"A",{href:!0});var wnt=s(oG);$$o=r(wnt,"YosoForSequenceClassification"),wnt.forEach(t),k$o=r(zLe," (YOSO model)"),zLe.forEach(t),N.forEach(t),S$o=i(aa),g2=n(aa,"P",{});var QLe=s(g2);R$o=r(QLe,"The model is set in evaluation mode by default using "),nfe=n(QLe,"CODE",{});var Ant=s(nfe);B$o=r(Ant,"model.eval()"),Ant.forEach(t),P$o=r(QLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sfe=n(QLe,"CODE",{});var ynt=s(sfe);I$o=r(ynt,"model.train()"),ynt.forEach(t),QLe.forEach(t),q$o=i(aa),T(h2.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),cIe=i(f),ji=n(f,"H2",{class:!0});var hNe=s(ji);p2=n(hNe,"A",{id:!0,class:!0,href:!0});var Lnt=s(p2);lfe=n(Lnt,"SPAN",{});var xnt=s(lfe);T(K0.$$.fragment,xnt),xnt.forEach(t),Lnt.forEach(t),N$o=i(hNe),ife=n(hNe,"SPAN",{});var $nt=s(ife);j$o=r($nt,"AutoModelForMultipleChoice"),$nt.forEach(t),hNe.forEach(t),fIe=i(f),Bo=n(f,"DIV",{class:!0});var zs=s(Bo);T(Z0.$$.fragment,zs),D$o=i(zs),Di=n(zs,"P",{});var bK=s(Di);G$o=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rG=n(bK,"A",{href:!0});var knt=s(rG);O$o=r(knt,"from_pretrained()"),knt.forEach(t),V$o=r(bK," class method or the "),tG=n(bK,"A",{href:!0});var Snt=s(tG);X$o=r(Snt,"from_config()"),Snt.forEach(t),z$o=r(bK,` class
method.`),bK.forEach(t),Q$o=i(zs),ey=n(zs,"P",{});var pNe=s(ey);W$o=r(pNe,"This class cannot be instantiated directly using "),dfe=n(pNe,"CODE",{});var Rnt=s(dfe);H$o=r(Rnt,"__init__()"),Rnt.forEach(t),U$o=r(pNe," (throws an error)."),pNe.forEach(t),J$o=i(zs),lt=n(zs,"DIV",{class:!0});var fA=s(lt);T(oy.$$.fragment,fA),Y$o=i(fA),cfe=n(fA,"P",{});var Bnt=s(cfe);K$o=r(Bnt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Bnt.forEach(t),Z$o=i(fA),Gi=n(fA,"P",{});var vK=s(Gi);eko=r(vK,`Note:
Loading a model from its configuration file does `),ffe=n(vK,"STRONG",{});var Pnt=s(ffe);oko=r(Pnt,"not"),Pnt.forEach(t),rko=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),aG=n(vK,"A",{href:!0});var Int=s(aG);tko=r(Int,"from_pretrained()"),Int.forEach(t),ako=r(vK," to load the model weights."),vK.forEach(t),nko=i(fA),T(u2.$$.fragment,fA),fA.forEach(t),sko=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(ry.$$.fragment,na),lko=i(na),mfe=n(na,"P",{});var qnt=s(mfe);iko=r(qnt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),qnt.forEach(t),dko=i(na),Sa=n(na,"P",{});var mA=s(Sa);cko=r(mA,"The model class to instantiate is selected based on the "),gfe=n(mA,"CODE",{});var Nnt=s(gfe);fko=r(Nnt,"model_type"),Nnt.forEach(t),mko=r(mA,` property of the config object (either
passed as an argument or loaded from `),hfe=n(mA,"CODE",{});var jnt=s(hfe);gko=r(jnt,"pretrained_model_name_or_path"),jnt.forEach(t),hko=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=n(mA,"CODE",{});var Dnt=s(pfe);pko=r(Dnt,"pretrained_model_name_or_path"),Dnt.forEach(t),uko=r(mA,":"),mA.forEach(t),_ko=i(na),Y=n(na,"UL",{});var K=s(Y);_2=n(K,"LI",{});var WLe=s(_2);ufe=n(WLe,"STRONG",{});var Gnt=s(ufe);bko=r(Gnt,"albert"),Gnt.forEach(t),vko=r(WLe," \u2014 "),nG=n(WLe,"A",{href:!0});var Ont=s(nG);Fko=r(Ont,"AlbertForMultipleChoice"),Ont.forEach(t),Tko=r(WLe," (ALBERT model)"),WLe.forEach(t),Mko=i(K),b2=n(K,"LI",{});var HLe=s(b2);_fe=n(HLe,"STRONG",{});var Vnt=s(_fe);Eko=r(Vnt,"bert"),Vnt.forEach(t),Cko=r(HLe," \u2014 "),sG=n(HLe,"A",{href:!0});var Xnt=s(sG);wko=r(Xnt,"BertForMultipleChoice"),Xnt.forEach(t),Ako=r(HLe," (BERT model)"),HLe.forEach(t),yko=i(K),v2=n(K,"LI",{});var ULe=s(v2);bfe=n(ULe,"STRONG",{});var znt=s(bfe);Lko=r(znt,"big_bird"),znt.forEach(t),xko=r(ULe," \u2014 "),lG=n(ULe,"A",{href:!0});var Qnt=s(lG);$ko=r(Qnt,"BigBirdForMultipleChoice"),Qnt.forEach(t),kko=r(ULe," (BigBird model)"),ULe.forEach(t),Sko=i(K),F2=n(K,"LI",{});var JLe=s(F2);vfe=n(JLe,"STRONG",{});var Wnt=s(vfe);Rko=r(Wnt,"camembert"),Wnt.forEach(t),Bko=r(JLe," \u2014 "),iG=n(JLe,"A",{href:!0});var Hnt=s(iG);Pko=r(Hnt,"CamembertForMultipleChoice"),Hnt.forEach(t),Iko=r(JLe," (CamemBERT model)"),JLe.forEach(t),qko=i(K),T2=n(K,"LI",{});var YLe=s(T2);Ffe=n(YLe,"STRONG",{});var Unt=s(Ffe);Nko=r(Unt,"canine"),Unt.forEach(t),jko=r(YLe," \u2014 "),dG=n(YLe,"A",{href:!0});var Jnt=s(dG);Dko=r(Jnt,"CanineForMultipleChoice"),Jnt.forEach(t),Gko=r(YLe," (Canine model)"),YLe.forEach(t),Oko=i(K),M2=n(K,"LI",{});var KLe=s(M2);Tfe=n(KLe,"STRONG",{});var Ynt=s(Tfe);Vko=r(Ynt,"convbert"),Ynt.forEach(t),Xko=r(KLe," \u2014 "),cG=n(KLe,"A",{href:!0});var Knt=s(cG);zko=r(Knt,"ConvBertForMultipleChoice"),Knt.forEach(t),Qko=r(KLe," (ConvBERT model)"),KLe.forEach(t),Wko=i(K),E2=n(K,"LI",{});var ZLe=s(E2);Mfe=n(ZLe,"STRONG",{});var Znt=s(Mfe);Hko=r(Znt,"data2vec-text"),Znt.forEach(t),Uko=r(ZLe," \u2014 "),fG=n(ZLe,"A",{href:!0});var est=s(fG);Jko=r(est,"Data2VecTextForMultipleChoice"),est.forEach(t),Yko=r(ZLe," (Data2VecText model)"),ZLe.forEach(t),Kko=i(K),C2=n(K,"LI",{});var e8e=s(C2);Efe=n(e8e,"STRONG",{});var ost=s(Efe);Zko=r(ost,"deberta-v2"),ost.forEach(t),eSo=r(e8e," \u2014 "),mG=n(e8e,"A",{href:!0});var rst=s(mG);oSo=r(rst,"DebertaV2ForMultipleChoice"),rst.forEach(t),rSo=r(e8e," (DeBERTa-v2 model)"),e8e.forEach(t),tSo=i(K),w2=n(K,"LI",{});var o8e=s(w2);Cfe=n(o8e,"STRONG",{});var tst=s(Cfe);aSo=r(tst,"distilbert"),tst.forEach(t),nSo=r(o8e," \u2014 "),gG=n(o8e,"A",{href:!0});var ast=s(gG);sSo=r(ast,"DistilBertForMultipleChoice"),ast.forEach(t),lSo=r(o8e," (DistilBERT model)"),o8e.forEach(t),iSo=i(K),A2=n(K,"LI",{});var r8e=s(A2);wfe=n(r8e,"STRONG",{});var nst=s(wfe);dSo=r(nst,"electra"),nst.forEach(t),cSo=r(r8e," \u2014 "),hG=n(r8e,"A",{href:!0});var sst=s(hG);fSo=r(sst,"ElectraForMultipleChoice"),sst.forEach(t),mSo=r(r8e," (ELECTRA model)"),r8e.forEach(t),gSo=i(K),y2=n(K,"LI",{});var t8e=s(y2);Afe=n(t8e,"STRONG",{});var lst=s(Afe);hSo=r(lst,"flaubert"),lst.forEach(t),pSo=r(t8e," \u2014 "),pG=n(t8e,"A",{href:!0});var ist=s(pG);uSo=r(ist,"FlaubertForMultipleChoice"),ist.forEach(t),_So=r(t8e," (FlauBERT model)"),t8e.forEach(t),bSo=i(K),L2=n(K,"LI",{});var a8e=s(L2);yfe=n(a8e,"STRONG",{});var dst=s(yfe);vSo=r(dst,"fnet"),dst.forEach(t),FSo=r(a8e," \u2014 "),uG=n(a8e,"A",{href:!0});var cst=s(uG);TSo=r(cst,"FNetForMultipleChoice"),cst.forEach(t),MSo=r(a8e," (FNet model)"),a8e.forEach(t),ESo=i(K),x2=n(K,"LI",{});var n8e=s(x2);Lfe=n(n8e,"STRONG",{});var fst=s(Lfe);CSo=r(fst,"funnel"),fst.forEach(t),wSo=r(n8e," \u2014 "),_G=n(n8e,"A",{href:!0});var mst=s(_G);ASo=r(mst,"FunnelForMultipleChoice"),mst.forEach(t),ySo=r(n8e," (Funnel Transformer model)"),n8e.forEach(t),LSo=i(K),$2=n(K,"LI",{});var s8e=s($2);xfe=n(s8e,"STRONG",{});var gst=s(xfe);xSo=r(gst,"ibert"),gst.forEach(t),$So=r(s8e," \u2014 "),bG=n(s8e,"A",{href:!0});var hst=s(bG);kSo=r(hst,"IBertForMultipleChoice"),hst.forEach(t),SSo=r(s8e," (I-BERT model)"),s8e.forEach(t),RSo=i(K),k2=n(K,"LI",{});var l8e=s(k2);$fe=n(l8e,"STRONG",{});var pst=s($fe);BSo=r(pst,"longformer"),pst.forEach(t),PSo=r(l8e," \u2014 "),vG=n(l8e,"A",{href:!0});var ust=s(vG);ISo=r(ust,"LongformerForMultipleChoice"),ust.forEach(t),qSo=r(l8e," (Longformer model)"),l8e.forEach(t),NSo=i(K),S2=n(K,"LI",{});var i8e=s(S2);kfe=n(i8e,"STRONG",{});var _st=s(kfe);jSo=r(_st,"megatron-bert"),_st.forEach(t),DSo=r(i8e," \u2014 "),FG=n(i8e,"A",{href:!0});var bst=s(FG);GSo=r(bst,"MegatronBertForMultipleChoice"),bst.forEach(t),OSo=r(i8e," (MegatronBert model)"),i8e.forEach(t),VSo=i(K),R2=n(K,"LI",{});var d8e=s(R2);Sfe=n(d8e,"STRONG",{});var vst=s(Sfe);XSo=r(vst,"mobilebert"),vst.forEach(t),zSo=r(d8e," \u2014 "),TG=n(d8e,"A",{href:!0});var Fst=s(TG);QSo=r(Fst,"MobileBertForMultipleChoice"),Fst.forEach(t),WSo=r(d8e," (MobileBERT model)"),d8e.forEach(t),HSo=i(K),B2=n(K,"LI",{});var c8e=s(B2);Rfe=n(c8e,"STRONG",{});var Tst=s(Rfe);USo=r(Tst,"mpnet"),Tst.forEach(t),JSo=r(c8e," \u2014 "),MG=n(c8e,"A",{href:!0});var Mst=s(MG);YSo=r(Mst,"MPNetForMultipleChoice"),Mst.forEach(t),KSo=r(c8e," (MPNet model)"),c8e.forEach(t),ZSo=i(K),P2=n(K,"LI",{});var f8e=s(P2);Bfe=n(f8e,"STRONG",{});var Est=s(Bfe);eRo=r(Est,"nystromformer"),Est.forEach(t),oRo=r(f8e," \u2014 "),EG=n(f8e,"A",{href:!0});var Cst=s(EG);rRo=r(Cst,"NystromformerForMultipleChoice"),Cst.forEach(t),tRo=r(f8e," (Nystromformer model)"),f8e.forEach(t),aRo=i(K),I2=n(K,"LI",{});var m8e=s(I2);Pfe=n(m8e,"STRONG",{});var wst=s(Pfe);nRo=r(wst,"qdqbert"),wst.forEach(t),sRo=r(m8e," \u2014 "),CG=n(m8e,"A",{href:!0});var Ast=s(CG);lRo=r(Ast,"QDQBertForMultipleChoice"),Ast.forEach(t),iRo=r(m8e," (QDQBert model)"),m8e.forEach(t),dRo=i(K),q2=n(K,"LI",{});var g8e=s(q2);Ife=n(g8e,"STRONG",{});var yst=s(Ife);cRo=r(yst,"rembert"),yst.forEach(t),fRo=r(g8e," \u2014 "),wG=n(g8e,"A",{href:!0});var Lst=s(wG);mRo=r(Lst,"RemBertForMultipleChoice"),Lst.forEach(t),gRo=r(g8e," (RemBERT model)"),g8e.forEach(t),hRo=i(K),N2=n(K,"LI",{});var h8e=s(N2);qfe=n(h8e,"STRONG",{});var xst=s(qfe);pRo=r(xst,"roberta"),xst.forEach(t),uRo=r(h8e," \u2014 "),AG=n(h8e,"A",{href:!0});var $st=s(AG);_Ro=r($st,"RobertaForMultipleChoice"),$st.forEach(t),bRo=r(h8e," (RoBERTa model)"),h8e.forEach(t),vRo=i(K),j2=n(K,"LI",{});var p8e=s(j2);Nfe=n(p8e,"STRONG",{});var kst=s(Nfe);FRo=r(kst,"roformer"),kst.forEach(t),TRo=r(p8e," \u2014 "),yG=n(p8e,"A",{href:!0});var Sst=s(yG);MRo=r(Sst,"RoFormerForMultipleChoice"),Sst.forEach(t),ERo=r(p8e," (RoFormer model)"),p8e.forEach(t),CRo=i(K),D2=n(K,"LI",{});var u8e=s(D2);jfe=n(u8e,"STRONG",{});var Rst=s(jfe);wRo=r(Rst,"squeezebert"),Rst.forEach(t),ARo=r(u8e," \u2014 "),LG=n(u8e,"A",{href:!0});var Bst=s(LG);yRo=r(Bst,"SqueezeBertForMultipleChoice"),Bst.forEach(t),LRo=r(u8e," (SqueezeBERT model)"),u8e.forEach(t),xRo=i(K),G2=n(K,"LI",{});var _8e=s(G2);Dfe=n(_8e,"STRONG",{});var Pst=s(Dfe);$Ro=r(Pst,"xlm"),Pst.forEach(t),kRo=r(_8e," \u2014 "),xG=n(_8e,"A",{href:!0});var Ist=s(xG);SRo=r(Ist,"XLMForMultipleChoice"),Ist.forEach(t),RRo=r(_8e," (XLM model)"),_8e.forEach(t),BRo=i(K),O2=n(K,"LI",{});var b8e=s(O2);Gfe=n(b8e,"STRONG",{});var qst=s(Gfe);PRo=r(qst,"xlm-roberta"),qst.forEach(t),IRo=r(b8e," \u2014 "),$G=n(b8e,"A",{href:!0});var Nst=s($G);qRo=r(Nst,"XLMRobertaForMultipleChoice"),Nst.forEach(t),NRo=r(b8e," (XLM-RoBERTa model)"),b8e.forEach(t),jRo=i(K),V2=n(K,"LI",{});var v8e=s(V2);Ofe=n(v8e,"STRONG",{});var jst=s(Ofe);DRo=r(jst,"xlm-roberta-xl"),jst.forEach(t),GRo=r(v8e," \u2014 "),kG=n(v8e,"A",{href:!0});var Dst=s(kG);ORo=r(Dst,"XLMRobertaXLForMultipleChoice"),Dst.forEach(t),VRo=r(v8e," (XLM-RoBERTa-XL model)"),v8e.forEach(t),XRo=i(K),X2=n(K,"LI",{});var F8e=s(X2);Vfe=n(F8e,"STRONG",{});var Gst=s(Vfe);zRo=r(Gst,"xlnet"),Gst.forEach(t),QRo=r(F8e," \u2014 "),SG=n(F8e,"A",{href:!0});var Ost=s(SG);WRo=r(Ost,"XLNetForMultipleChoice"),Ost.forEach(t),HRo=r(F8e," (XLNet model)"),F8e.forEach(t),URo=i(K),z2=n(K,"LI",{});var T8e=s(z2);Xfe=n(T8e,"STRONG",{});var Vst=s(Xfe);JRo=r(Vst,"yoso"),Vst.forEach(t),YRo=r(T8e," \u2014 "),RG=n(T8e,"A",{href:!0});var Xst=s(RG);KRo=r(Xst,"YosoForMultipleChoice"),Xst.forEach(t),ZRo=r(T8e," (YOSO model)"),T8e.forEach(t),K.forEach(t),eBo=i(na),Q2=n(na,"P",{});var M8e=s(Q2);oBo=r(M8e,"The model is set in evaluation mode by default using "),zfe=n(M8e,"CODE",{});var zst=s(zfe);rBo=r(zst,"model.eval()"),zst.forEach(t),tBo=r(M8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qfe=n(M8e,"CODE",{});var Qst=s(Qfe);aBo=r(Qst,"model.train()"),Qst.forEach(t),M8e.forEach(t),nBo=i(na),T(W2.$$.fragment,na),na.forEach(t),zs.forEach(t),mIe=i(f),Oi=n(f,"H2",{class:!0});var uNe=s(Oi);H2=n(uNe,"A",{id:!0,class:!0,href:!0});var Wst=s(H2);Wfe=n(Wst,"SPAN",{});var Hst=s(Wfe);T(ty.$$.fragment,Hst),Hst.forEach(t),Wst.forEach(t),sBo=i(uNe),Hfe=n(uNe,"SPAN",{});var Ust=s(Hfe);lBo=r(Ust,"AutoModelForNextSentencePrediction"),Ust.forEach(t),uNe.forEach(t),gIe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(ay.$$.fragment,Qs),iBo=i(Qs),Vi=n(Qs,"P",{});var FK=s(Vi);dBo=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),BG=n(FK,"A",{href:!0});var Jst=s(BG);cBo=r(Jst,"from_pretrained()"),Jst.forEach(t),fBo=r(FK," class method or the "),PG=n(FK,"A",{href:!0});var Yst=s(PG);mBo=r(Yst,"from_config()"),Yst.forEach(t),gBo=r(FK,` class
method.`),FK.forEach(t),hBo=i(Qs),ny=n(Qs,"P",{});var _Ne=s(ny);pBo=r(_Ne,"This class cannot be instantiated directly using "),Ufe=n(_Ne,"CODE",{});var Kst=s(Ufe);uBo=r(Kst,"__init__()"),Kst.forEach(t),_Bo=r(_Ne," (throws an error)."),_Ne.forEach(t),bBo=i(Qs),it=n(Qs,"DIV",{class:!0});var gA=s(it);T(sy.$$.fragment,gA),vBo=i(gA),Jfe=n(gA,"P",{});var Zst=s(Jfe);FBo=r(Zst,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Zst.forEach(t),TBo=i(gA),Xi=n(gA,"P",{});var TK=s(Xi);MBo=r(TK,`Note:
Loading a model from its configuration file does `),Yfe=n(TK,"STRONG",{});var elt=s(Yfe);EBo=r(elt,"not"),elt.forEach(t),CBo=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=n(TK,"A",{href:!0});var olt=s(IG);wBo=r(olt,"from_pretrained()"),olt.forEach(t),ABo=r(TK," to load the model weights."),TK.forEach(t),yBo=i(gA),T(U2.$$.fragment,gA),gA.forEach(t),LBo=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(ly.$$.fragment,sa),xBo=i(sa),Kfe=n(sa,"P",{});var rlt=s(Kfe);$Bo=r(rlt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),rlt.forEach(t),kBo=i(sa),Ra=n(sa,"P",{});var hA=s(Ra);SBo=r(hA,"The model class to instantiate is selected based on the "),Zfe=n(hA,"CODE",{});var tlt=s(Zfe);RBo=r(tlt,"model_type"),tlt.forEach(t),BBo=r(hA,` property of the config object (either
passed as an argument or loaded from `),eme=n(hA,"CODE",{});var alt=s(eme);PBo=r(alt,"pretrained_model_name_or_path"),alt.forEach(t),IBo=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ome=n(hA,"CODE",{});var nlt=s(ome);qBo=r(nlt,"pretrained_model_name_or_path"),nlt.forEach(t),NBo=r(hA,":"),hA.forEach(t),jBo=i(sa),Yr=n(sa,"UL",{});var Ws=s(Yr);J2=n(Ws,"LI",{});var E8e=s(J2);rme=n(E8e,"STRONG",{});var slt=s(rme);DBo=r(slt,"bert"),slt.forEach(t),GBo=r(E8e," \u2014 "),qG=n(E8e,"A",{href:!0});var llt=s(qG);OBo=r(llt,"BertForNextSentencePrediction"),llt.forEach(t),VBo=r(E8e," (BERT model)"),E8e.forEach(t),XBo=i(Ws),Y2=n(Ws,"LI",{});var C8e=s(Y2);tme=n(C8e,"STRONG",{});var ilt=s(tme);zBo=r(ilt,"fnet"),ilt.forEach(t),QBo=r(C8e," \u2014 "),NG=n(C8e,"A",{href:!0});var dlt=s(NG);WBo=r(dlt,"FNetForNextSentencePrediction"),dlt.forEach(t),HBo=r(C8e," (FNet model)"),C8e.forEach(t),UBo=i(Ws),K2=n(Ws,"LI",{});var w8e=s(K2);ame=n(w8e,"STRONG",{});var clt=s(ame);JBo=r(clt,"megatron-bert"),clt.forEach(t),YBo=r(w8e," \u2014 "),jG=n(w8e,"A",{href:!0});var flt=s(jG);KBo=r(flt,"MegatronBertForNextSentencePrediction"),flt.forEach(t),ZBo=r(w8e," (MegatronBert model)"),w8e.forEach(t),ePo=i(Ws),Z2=n(Ws,"LI",{});var A8e=s(Z2);nme=n(A8e,"STRONG",{});var mlt=s(nme);oPo=r(mlt,"mobilebert"),mlt.forEach(t),rPo=r(A8e," \u2014 "),DG=n(A8e,"A",{href:!0});var glt=s(DG);tPo=r(glt,"MobileBertForNextSentencePrediction"),glt.forEach(t),aPo=r(A8e," (MobileBERT model)"),A8e.forEach(t),nPo=i(Ws),e3=n(Ws,"LI",{});var y8e=s(e3);sme=n(y8e,"STRONG",{});var hlt=s(sme);sPo=r(hlt,"qdqbert"),hlt.forEach(t),lPo=r(y8e," \u2014 "),GG=n(y8e,"A",{href:!0});var plt=s(GG);iPo=r(plt,"QDQBertForNextSentencePrediction"),plt.forEach(t),dPo=r(y8e," (QDQBert model)"),y8e.forEach(t),Ws.forEach(t),cPo=i(sa),o3=n(sa,"P",{});var L8e=s(o3);fPo=r(L8e,"The model is set in evaluation mode by default using "),lme=n(L8e,"CODE",{});var ult=s(lme);mPo=r(ult,"model.eval()"),ult.forEach(t),gPo=r(L8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ime=n(L8e,"CODE",{});var _lt=s(ime);hPo=r(_lt,"model.train()"),_lt.forEach(t),L8e.forEach(t),pPo=i(sa),T(r3.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),hIe=i(f),zi=n(f,"H2",{class:!0});var bNe=s(zi);t3=n(bNe,"A",{id:!0,class:!0,href:!0});var blt=s(t3);dme=n(blt,"SPAN",{});var vlt=s(dme);T(iy.$$.fragment,vlt),vlt.forEach(t),blt.forEach(t),uPo=i(bNe),cme=n(bNe,"SPAN",{});var Flt=s(cme);_Po=r(Flt,"AutoModelForTokenClassification"),Flt.forEach(t),bNe.forEach(t),pIe=i(f),Io=n(f,"DIV",{class:!0});var Hs=s(Io);T(dy.$$.fragment,Hs),bPo=i(Hs),Qi=n(Hs,"P",{});var MK=s(Qi);vPo=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OG=n(MK,"A",{href:!0});var Tlt=s(OG);FPo=r(Tlt,"from_pretrained()"),Tlt.forEach(t),TPo=r(MK," class method or the "),VG=n(MK,"A",{href:!0});var Mlt=s(VG);MPo=r(Mlt,"from_config()"),Mlt.forEach(t),EPo=r(MK,` class
method.`),MK.forEach(t),CPo=i(Hs),cy=n(Hs,"P",{});var vNe=s(cy);wPo=r(vNe,"This class cannot be instantiated directly using "),fme=n(vNe,"CODE",{});var Elt=s(fme);APo=r(Elt,"__init__()"),Elt.forEach(t),yPo=r(vNe," (throws an error)."),vNe.forEach(t),LPo=i(Hs),dt=n(Hs,"DIV",{class:!0});var pA=s(dt);T(fy.$$.fragment,pA),xPo=i(pA),mme=n(pA,"P",{});var Clt=s(mme);$Po=r(Clt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Clt.forEach(t),kPo=i(pA),Wi=n(pA,"P",{});var EK=s(Wi);SPo=r(EK,`Note:
Loading a model from its configuration file does `),gme=n(EK,"STRONG",{});var wlt=s(gme);RPo=r(wlt,"not"),wlt.forEach(t),BPo=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),XG=n(EK,"A",{href:!0});var Alt=s(XG);PPo=r(Alt,"from_pretrained()"),Alt.forEach(t),IPo=r(EK," to load the model weights."),EK.forEach(t),qPo=i(pA),T(a3.$$.fragment,pA),pA.forEach(t),NPo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(my.$$.fragment,la),jPo=i(la),hme=n(la,"P",{});var ylt=s(hme);DPo=r(ylt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ylt.forEach(t),GPo=i(la),Ba=n(la,"P",{});var uA=s(Ba);OPo=r(uA,"The model class to instantiate is selected based on the "),pme=n(uA,"CODE",{});var Llt=s(pme);VPo=r(Llt,"model_type"),Llt.forEach(t),XPo=r(uA,` property of the config object (either
passed as an argument or loaded from `),ume=n(uA,"CODE",{});var xlt=s(ume);zPo=r(xlt,"pretrained_model_name_or_path"),xlt.forEach(t),QPo=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_me=n(uA,"CODE",{});var $lt=s(_me);WPo=r($lt,"pretrained_model_name_or_path"),$lt.forEach(t),HPo=r(uA,":"),uA.forEach(t),UPo=i(la),U=n(la,"UL",{});var J=s(U);n3=n(J,"LI",{});var x8e=s(n3);bme=n(x8e,"STRONG",{});var klt=s(bme);JPo=r(klt,"albert"),klt.forEach(t),YPo=r(x8e," \u2014 "),zG=n(x8e,"A",{href:!0});var Slt=s(zG);KPo=r(Slt,"AlbertForTokenClassification"),Slt.forEach(t),ZPo=r(x8e," (ALBERT model)"),x8e.forEach(t),eIo=i(J),s3=n(J,"LI",{});var $8e=s(s3);vme=n($8e,"STRONG",{});var Rlt=s(vme);oIo=r(Rlt,"bert"),Rlt.forEach(t),rIo=r($8e," \u2014 "),QG=n($8e,"A",{href:!0});var Blt=s(QG);tIo=r(Blt,"BertForTokenClassification"),Blt.forEach(t),aIo=r($8e," (BERT model)"),$8e.forEach(t),nIo=i(J),l3=n(J,"LI",{});var k8e=s(l3);Fme=n(k8e,"STRONG",{});var Plt=s(Fme);sIo=r(Plt,"big_bird"),Plt.forEach(t),lIo=r(k8e," \u2014 "),WG=n(k8e,"A",{href:!0});var Ilt=s(WG);iIo=r(Ilt,"BigBirdForTokenClassification"),Ilt.forEach(t),dIo=r(k8e," (BigBird model)"),k8e.forEach(t),cIo=i(J),i3=n(J,"LI",{});var S8e=s(i3);Tme=n(S8e,"STRONG",{});var qlt=s(Tme);fIo=r(qlt,"camembert"),qlt.forEach(t),mIo=r(S8e," \u2014 "),HG=n(S8e,"A",{href:!0});var Nlt=s(HG);gIo=r(Nlt,"CamembertForTokenClassification"),Nlt.forEach(t),hIo=r(S8e," (CamemBERT model)"),S8e.forEach(t),pIo=i(J),d3=n(J,"LI",{});var R8e=s(d3);Mme=n(R8e,"STRONG",{});var jlt=s(Mme);uIo=r(jlt,"canine"),jlt.forEach(t),_Io=r(R8e," \u2014 "),UG=n(R8e,"A",{href:!0});var Dlt=s(UG);bIo=r(Dlt,"CanineForTokenClassification"),Dlt.forEach(t),vIo=r(R8e," (Canine model)"),R8e.forEach(t),FIo=i(J),c3=n(J,"LI",{});var B8e=s(c3);Eme=n(B8e,"STRONG",{});var Glt=s(Eme);TIo=r(Glt,"convbert"),Glt.forEach(t),MIo=r(B8e," \u2014 "),JG=n(B8e,"A",{href:!0});var Olt=s(JG);EIo=r(Olt,"ConvBertForTokenClassification"),Olt.forEach(t),CIo=r(B8e," (ConvBERT model)"),B8e.forEach(t),wIo=i(J),f3=n(J,"LI",{});var P8e=s(f3);Cme=n(P8e,"STRONG",{});var Vlt=s(Cme);AIo=r(Vlt,"data2vec-text"),Vlt.forEach(t),yIo=r(P8e," \u2014 "),YG=n(P8e,"A",{href:!0});var Xlt=s(YG);LIo=r(Xlt,"Data2VecTextForTokenClassification"),Xlt.forEach(t),xIo=r(P8e," (Data2VecText model)"),P8e.forEach(t),$Io=i(J),m3=n(J,"LI",{});var I8e=s(m3);wme=n(I8e,"STRONG",{});var zlt=s(wme);kIo=r(zlt,"deberta"),zlt.forEach(t),SIo=r(I8e," \u2014 "),KG=n(I8e,"A",{href:!0});var Qlt=s(KG);RIo=r(Qlt,"DebertaForTokenClassification"),Qlt.forEach(t),BIo=r(I8e," (DeBERTa model)"),I8e.forEach(t),PIo=i(J),g3=n(J,"LI",{});var q8e=s(g3);Ame=n(q8e,"STRONG",{});var Wlt=s(Ame);IIo=r(Wlt,"deberta-v2"),Wlt.forEach(t),qIo=r(q8e," \u2014 "),ZG=n(q8e,"A",{href:!0});var Hlt=s(ZG);NIo=r(Hlt,"DebertaV2ForTokenClassification"),Hlt.forEach(t),jIo=r(q8e," (DeBERTa-v2 model)"),q8e.forEach(t),DIo=i(J),h3=n(J,"LI",{});var N8e=s(h3);yme=n(N8e,"STRONG",{});var Ult=s(yme);GIo=r(Ult,"distilbert"),Ult.forEach(t),OIo=r(N8e," \u2014 "),eO=n(N8e,"A",{href:!0});var Jlt=s(eO);VIo=r(Jlt,"DistilBertForTokenClassification"),Jlt.forEach(t),XIo=r(N8e," (DistilBERT model)"),N8e.forEach(t),zIo=i(J),p3=n(J,"LI",{});var j8e=s(p3);Lme=n(j8e,"STRONG",{});var Ylt=s(Lme);QIo=r(Ylt,"electra"),Ylt.forEach(t),WIo=r(j8e," \u2014 "),oO=n(j8e,"A",{href:!0});var Klt=s(oO);HIo=r(Klt,"ElectraForTokenClassification"),Klt.forEach(t),UIo=r(j8e," (ELECTRA model)"),j8e.forEach(t),JIo=i(J),u3=n(J,"LI",{});var D8e=s(u3);xme=n(D8e,"STRONG",{});var Zlt=s(xme);YIo=r(Zlt,"flaubert"),Zlt.forEach(t),KIo=r(D8e," \u2014 "),rO=n(D8e,"A",{href:!0});var eit=s(rO);ZIo=r(eit,"FlaubertForTokenClassification"),eit.forEach(t),eqo=r(D8e," (FlauBERT model)"),D8e.forEach(t),oqo=i(J),_3=n(J,"LI",{});var G8e=s(_3);$me=n(G8e,"STRONG",{});var oit=s($me);rqo=r(oit,"fnet"),oit.forEach(t),tqo=r(G8e," \u2014 "),tO=n(G8e,"A",{href:!0});var rit=s(tO);aqo=r(rit,"FNetForTokenClassification"),rit.forEach(t),nqo=r(G8e," (FNet model)"),G8e.forEach(t),sqo=i(J),b3=n(J,"LI",{});var O8e=s(b3);kme=n(O8e,"STRONG",{});var tit=s(kme);lqo=r(tit,"funnel"),tit.forEach(t),iqo=r(O8e," \u2014 "),aO=n(O8e,"A",{href:!0});var ait=s(aO);dqo=r(ait,"FunnelForTokenClassification"),ait.forEach(t),cqo=r(O8e," (Funnel Transformer model)"),O8e.forEach(t),fqo=i(J),v3=n(J,"LI",{});var V8e=s(v3);Sme=n(V8e,"STRONG",{});var nit=s(Sme);mqo=r(nit,"gpt2"),nit.forEach(t),gqo=r(V8e," \u2014 "),nO=n(V8e,"A",{href:!0});var sit=s(nO);hqo=r(sit,"GPT2ForTokenClassification"),sit.forEach(t),pqo=r(V8e," (OpenAI GPT-2 model)"),V8e.forEach(t),uqo=i(J),F3=n(J,"LI",{});var X8e=s(F3);Rme=n(X8e,"STRONG",{});var lit=s(Rme);_qo=r(lit,"ibert"),lit.forEach(t),bqo=r(X8e," \u2014 "),sO=n(X8e,"A",{href:!0});var iit=s(sO);vqo=r(iit,"IBertForTokenClassification"),iit.forEach(t),Fqo=r(X8e," (I-BERT model)"),X8e.forEach(t),Tqo=i(J),T3=n(J,"LI",{});var z8e=s(T3);Bme=n(z8e,"STRONG",{});var dit=s(Bme);Mqo=r(dit,"layoutlm"),dit.forEach(t),Eqo=r(z8e," \u2014 "),lO=n(z8e,"A",{href:!0});var cit=s(lO);Cqo=r(cit,"LayoutLMForTokenClassification"),cit.forEach(t),wqo=r(z8e," (LayoutLM model)"),z8e.forEach(t),Aqo=i(J),M3=n(J,"LI",{});var Q8e=s(M3);Pme=n(Q8e,"STRONG",{});var fit=s(Pme);yqo=r(fit,"layoutlmv2"),fit.forEach(t),Lqo=r(Q8e," \u2014 "),iO=n(Q8e,"A",{href:!0});var mit=s(iO);xqo=r(mit,"LayoutLMv2ForTokenClassification"),mit.forEach(t),$qo=r(Q8e," (LayoutLMv2 model)"),Q8e.forEach(t),kqo=i(J),E3=n(J,"LI",{});var W8e=s(E3);Ime=n(W8e,"STRONG",{});var git=s(Ime);Sqo=r(git,"longformer"),git.forEach(t),Rqo=r(W8e," \u2014 "),dO=n(W8e,"A",{href:!0});var hit=s(dO);Bqo=r(hit,"LongformerForTokenClassification"),hit.forEach(t),Pqo=r(W8e," (Longformer model)"),W8e.forEach(t),Iqo=i(J),C3=n(J,"LI",{});var H8e=s(C3);qme=n(H8e,"STRONG",{});var pit=s(qme);qqo=r(pit,"megatron-bert"),pit.forEach(t),Nqo=r(H8e," \u2014 "),cO=n(H8e,"A",{href:!0});var uit=s(cO);jqo=r(uit,"MegatronBertForTokenClassification"),uit.forEach(t),Dqo=r(H8e," (MegatronBert model)"),H8e.forEach(t),Gqo=i(J),w3=n(J,"LI",{});var U8e=s(w3);Nme=n(U8e,"STRONG",{});var _it=s(Nme);Oqo=r(_it,"mobilebert"),_it.forEach(t),Vqo=r(U8e," \u2014 "),fO=n(U8e,"A",{href:!0});var bit=s(fO);Xqo=r(bit,"MobileBertForTokenClassification"),bit.forEach(t),zqo=r(U8e," (MobileBERT model)"),U8e.forEach(t),Qqo=i(J),A3=n(J,"LI",{});var J8e=s(A3);jme=n(J8e,"STRONG",{});var vit=s(jme);Wqo=r(vit,"mpnet"),vit.forEach(t),Hqo=r(J8e," \u2014 "),mO=n(J8e,"A",{href:!0});var Fit=s(mO);Uqo=r(Fit,"MPNetForTokenClassification"),Fit.forEach(t),Jqo=r(J8e," (MPNet model)"),J8e.forEach(t),Yqo=i(J),y3=n(J,"LI",{});var Y8e=s(y3);Dme=n(Y8e,"STRONG",{});var Tit=s(Dme);Kqo=r(Tit,"nystromformer"),Tit.forEach(t),Zqo=r(Y8e," \u2014 "),gO=n(Y8e,"A",{href:!0});var Mit=s(gO);eNo=r(Mit,"NystromformerForTokenClassification"),Mit.forEach(t),oNo=r(Y8e," (Nystromformer model)"),Y8e.forEach(t),rNo=i(J),L3=n(J,"LI",{});var K8e=s(L3);Gme=n(K8e,"STRONG",{});var Eit=s(Gme);tNo=r(Eit,"qdqbert"),Eit.forEach(t),aNo=r(K8e," \u2014 "),hO=n(K8e,"A",{href:!0});var Cit=s(hO);nNo=r(Cit,"QDQBertForTokenClassification"),Cit.forEach(t),sNo=r(K8e," (QDQBert model)"),K8e.forEach(t),lNo=i(J),x3=n(J,"LI",{});var Z8e=s(x3);Ome=n(Z8e,"STRONG",{});var wit=s(Ome);iNo=r(wit,"rembert"),wit.forEach(t),dNo=r(Z8e," \u2014 "),pO=n(Z8e,"A",{href:!0});var Ait=s(pO);cNo=r(Ait,"RemBertForTokenClassification"),Ait.forEach(t),fNo=r(Z8e," (RemBERT model)"),Z8e.forEach(t),mNo=i(J),$3=n(J,"LI",{});var exe=s($3);Vme=n(exe,"STRONG",{});var yit=s(Vme);gNo=r(yit,"roberta"),yit.forEach(t),hNo=r(exe," \u2014 "),uO=n(exe,"A",{href:!0});var Lit=s(uO);pNo=r(Lit,"RobertaForTokenClassification"),Lit.forEach(t),uNo=r(exe," (RoBERTa model)"),exe.forEach(t),_No=i(J),k3=n(J,"LI",{});var oxe=s(k3);Xme=n(oxe,"STRONG",{});var xit=s(Xme);bNo=r(xit,"roformer"),xit.forEach(t),vNo=r(oxe," \u2014 "),_O=n(oxe,"A",{href:!0});var $it=s(_O);FNo=r($it,"RoFormerForTokenClassification"),$it.forEach(t),TNo=r(oxe," (RoFormer model)"),oxe.forEach(t),MNo=i(J),S3=n(J,"LI",{});var rxe=s(S3);zme=n(rxe,"STRONG",{});var kit=s(zme);ENo=r(kit,"squeezebert"),kit.forEach(t),CNo=r(rxe," \u2014 "),bO=n(rxe,"A",{href:!0});var Sit=s(bO);wNo=r(Sit,"SqueezeBertForTokenClassification"),Sit.forEach(t),ANo=r(rxe," (SqueezeBERT model)"),rxe.forEach(t),yNo=i(J),R3=n(J,"LI",{});var txe=s(R3);Qme=n(txe,"STRONG",{});var Rit=s(Qme);LNo=r(Rit,"xlm"),Rit.forEach(t),xNo=r(txe," \u2014 "),vO=n(txe,"A",{href:!0});var Bit=s(vO);$No=r(Bit,"XLMForTokenClassification"),Bit.forEach(t),kNo=r(txe," (XLM model)"),txe.forEach(t),SNo=i(J),B3=n(J,"LI",{});var axe=s(B3);Wme=n(axe,"STRONG",{});var Pit=s(Wme);RNo=r(Pit,"xlm-roberta"),Pit.forEach(t),BNo=r(axe," \u2014 "),FO=n(axe,"A",{href:!0});var Iit=s(FO);PNo=r(Iit,"XLMRobertaForTokenClassification"),Iit.forEach(t),INo=r(axe," (XLM-RoBERTa model)"),axe.forEach(t),qNo=i(J),P3=n(J,"LI",{});var nxe=s(P3);Hme=n(nxe,"STRONG",{});var qit=s(Hme);NNo=r(qit,"xlm-roberta-xl"),qit.forEach(t),jNo=r(nxe," \u2014 "),TO=n(nxe,"A",{href:!0});var Nit=s(TO);DNo=r(Nit,"XLMRobertaXLForTokenClassification"),Nit.forEach(t),GNo=r(nxe," (XLM-RoBERTa-XL model)"),nxe.forEach(t),ONo=i(J),I3=n(J,"LI",{});var sxe=s(I3);Ume=n(sxe,"STRONG",{});var jit=s(Ume);VNo=r(jit,"xlnet"),jit.forEach(t),XNo=r(sxe," \u2014 "),MO=n(sxe,"A",{href:!0});var Dit=s(MO);zNo=r(Dit,"XLNetForTokenClassification"),Dit.forEach(t),QNo=r(sxe," (XLNet model)"),sxe.forEach(t),WNo=i(J),q3=n(J,"LI",{});var lxe=s(q3);Jme=n(lxe,"STRONG",{});var Git=s(Jme);HNo=r(Git,"yoso"),Git.forEach(t),UNo=r(lxe," \u2014 "),EO=n(lxe,"A",{href:!0});var Oit=s(EO);JNo=r(Oit,"YosoForTokenClassification"),Oit.forEach(t),YNo=r(lxe," (YOSO model)"),lxe.forEach(t),J.forEach(t),KNo=i(la),N3=n(la,"P",{});var ixe=s(N3);ZNo=r(ixe,"The model is set in evaluation mode by default using "),Yme=n(ixe,"CODE",{});var Vit=s(Yme);ejo=r(Vit,"model.eval()"),Vit.forEach(t),ojo=r(ixe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kme=n(ixe,"CODE",{});var Xit=s(Kme);rjo=r(Xit,"model.train()"),Xit.forEach(t),ixe.forEach(t),tjo=i(la),T(j3.$$.fragment,la),la.forEach(t),Hs.forEach(t),uIe=i(f),Hi=n(f,"H2",{class:!0});var FNe=s(Hi);D3=n(FNe,"A",{id:!0,class:!0,href:!0});var zit=s(D3);Zme=n(zit,"SPAN",{});var Qit=s(Zme);T(gy.$$.fragment,Qit),Qit.forEach(t),zit.forEach(t),ajo=i(FNe),ege=n(FNe,"SPAN",{});var Wit=s(ege);njo=r(Wit,"AutoModelForQuestionAnswering"),Wit.forEach(t),FNe.forEach(t),_Ie=i(f),qo=n(f,"DIV",{class:!0});var Us=s(qo);T(hy.$$.fragment,Us),sjo=i(Us),Ui=n(Us,"P",{});var CK=s(Ui);ljo=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),CO=n(CK,"A",{href:!0});var Hit=s(CO);ijo=r(Hit,"from_pretrained()"),Hit.forEach(t),djo=r(CK," class method or the "),wO=n(CK,"A",{href:!0});var Uit=s(wO);cjo=r(Uit,"from_config()"),Uit.forEach(t),fjo=r(CK,` class
method.`),CK.forEach(t),mjo=i(Us),py=n(Us,"P",{});var TNe=s(py);gjo=r(TNe,"This class cannot be instantiated directly using "),oge=n(TNe,"CODE",{});var Jit=s(oge);hjo=r(Jit,"__init__()"),Jit.forEach(t),pjo=r(TNe," (throws an error)."),TNe.forEach(t),ujo=i(Us),ct=n(Us,"DIV",{class:!0});var _A=s(ct);T(uy.$$.fragment,_A),_jo=i(_A),rge=n(_A,"P",{});var Yit=s(rge);bjo=r(Yit,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Yit.forEach(t),vjo=i(_A),Ji=n(_A,"P",{});var wK=s(Ji);Fjo=r(wK,`Note:
Loading a model from its configuration file does `),tge=n(wK,"STRONG",{});var Kit=s(tge);Tjo=r(Kit,"not"),Kit.forEach(t),Mjo=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),AO=n(wK,"A",{href:!0});var Zit=s(AO);Ejo=r(Zit,"from_pretrained()"),Zit.forEach(t),Cjo=r(wK," to load the model weights."),wK.forEach(t),wjo=i(_A),T(G3.$$.fragment,_A),_A.forEach(t),Ajo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(_y.$$.fragment,ia),yjo=i(ia),age=n(ia,"P",{});var edt=s(age);Ljo=r(edt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),edt.forEach(t),xjo=i(ia),Pa=n(ia,"P",{});var bA=s(Pa);$jo=r(bA,"The model class to instantiate is selected based on the "),nge=n(bA,"CODE",{});var odt=s(nge);kjo=r(odt,"model_type"),odt.forEach(t),Sjo=r(bA,` property of the config object (either
passed as an argument or loaded from `),sge=n(bA,"CODE",{});var rdt=s(sge);Rjo=r(rdt,"pretrained_model_name_or_path"),rdt.forEach(t),Bjo=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lge=n(bA,"CODE",{});var tdt=s(lge);Pjo=r(tdt,"pretrained_model_name_or_path"),tdt.forEach(t),Ijo=r(bA,":"),bA.forEach(t),qjo=i(ia),O=n(ia,"UL",{});var X=s(O);O3=n(X,"LI",{});var dxe=s(O3);ige=n(dxe,"STRONG",{});var adt=s(ige);Njo=r(adt,"albert"),adt.forEach(t),jjo=r(dxe," \u2014 "),yO=n(dxe,"A",{href:!0});var ndt=s(yO);Djo=r(ndt,"AlbertForQuestionAnswering"),ndt.forEach(t),Gjo=r(dxe," (ALBERT model)"),dxe.forEach(t),Ojo=i(X),V3=n(X,"LI",{});var cxe=s(V3);dge=n(cxe,"STRONG",{});var sdt=s(dge);Vjo=r(sdt,"bart"),sdt.forEach(t),Xjo=r(cxe," \u2014 "),LO=n(cxe,"A",{href:!0});var ldt=s(LO);zjo=r(ldt,"BartForQuestionAnswering"),ldt.forEach(t),Qjo=r(cxe," (BART model)"),cxe.forEach(t),Wjo=i(X),X3=n(X,"LI",{});var fxe=s(X3);cge=n(fxe,"STRONG",{});var idt=s(cge);Hjo=r(idt,"bert"),idt.forEach(t),Ujo=r(fxe," \u2014 "),xO=n(fxe,"A",{href:!0});var ddt=s(xO);Jjo=r(ddt,"BertForQuestionAnswering"),ddt.forEach(t),Yjo=r(fxe," (BERT model)"),fxe.forEach(t),Kjo=i(X),z3=n(X,"LI",{});var mxe=s(z3);fge=n(mxe,"STRONG",{});var cdt=s(fge);Zjo=r(cdt,"big_bird"),cdt.forEach(t),eDo=r(mxe," \u2014 "),$O=n(mxe,"A",{href:!0});var fdt=s($O);oDo=r(fdt,"BigBirdForQuestionAnswering"),fdt.forEach(t),rDo=r(mxe," (BigBird model)"),mxe.forEach(t),tDo=i(X),Q3=n(X,"LI",{});var gxe=s(Q3);mge=n(gxe,"STRONG",{});var mdt=s(mge);aDo=r(mdt,"bigbird_pegasus"),mdt.forEach(t),nDo=r(gxe," \u2014 "),kO=n(gxe,"A",{href:!0});var gdt=s(kO);sDo=r(gdt,"BigBirdPegasusForQuestionAnswering"),gdt.forEach(t),lDo=r(gxe," (BigBirdPegasus model)"),gxe.forEach(t),iDo=i(X),W3=n(X,"LI",{});var hxe=s(W3);gge=n(hxe,"STRONG",{});var hdt=s(gge);dDo=r(hdt,"camembert"),hdt.forEach(t),cDo=r(hxe," \u2014 "),SO=n(hxe,"A",{href:!0});var pdt=s(SO);fDo=r(pdt,"CamembertForQuestionAnswering"),pdt.forEach(t),mDo=r(hxe," (CamemBERT model)"),hxe.forEach(t),gDo=i(X),H3=n(X,"LI",{});var pxe=s(H3);hge=n(pxe,"STRONG",{});var udt=s(hge);hDo=r(udt,"canine"),udt.forEach(t),pDo=r(pxe," \u2014 "),RO=n(pxe,"A",{href:!0});var _dt=s(RO);uDo=r(_dt,"CanineForQuestionAnswering"),_dt.forEach(t),_Do=r(pxe," (Canine model)"),pxe.forEach(t),bDo=i(X),U3=n(X,"LI",{});var uxe=s(U3);pge=n(uxe,"STRONG",{});var bdt=s(pge);vDo=r(bdt,"convbert"),bdt.forEach(t),FDo=r(uxe," \u2014 "),BO=n(uxe,"A",{href:!0});var vdt=s(BO);TDo=r(vdt,"ConvBertForQuestionAnswering"),vdt.forEach(t),MDo=r(uxe," (ConvBERT model)"),uxe.forEach(t),EDo=i(X),J3=n(X,"LI",{});var _xe=s(J3);uge=n(_xe,"STRONG",{});var Fdt=s(uge);CDo=r(Fdt,"data2vec-text"),Fdt.forEach(t),wDo=r(_xe," \u2014 "),PO=n(_xe,"A",{href:!0});var Tdt=s(PO);ADo=r(Tdt,"Data2VecTextForQuestionAnswering"),Tdt.forEach(t),yDo=r(_xe," (Data2VecText model)"),_xe.forEach(t),LDo=i(X),Y3=n(X,"LI",{});var bxe=s(Y3);_ge=n(bxe,"STRONG",{});var Mdt=s(_ge);xDo=r(Mdt,"deberta"),Mdt.forEach(t),$Do=r(bxe," \u2014 "),IO=n(bxe,"A",{href:!0});var Edt=s(IO);kDo=r(Edt,"DebertaForQuestionAnswering"),Edt.forEach(t),SDo=r(bxe," (DeBERTa model)"),bxe.forEach(t),RDo=i(X),K3=n(X,"LI",{});var vxe=s(K3);bge=n(vxe,"STRONG",{});var Cdt=s(bge);BDo=r(Cdt,"deberta-v2"),Cdt.forEach(t),PDo=r(vxe," \u2014 "),qO=n(vxe,"A",{href:!0});var wdt=s(qO);IDo=r(wdt,"DebertaV2ForQuestionAnswering"),wdt.forEach(t),qDo=r(vxe," (DeBERTa-v2 model)"),vxe.forEach(t),NDo=i(X),Z3=n(X,"LI",{});var Fxe=s(Z3);vge=n(Fxe,"STRONG",{});var Adt=s(vge);jDo=r(Adt,"distilbert"),Adt.forEach(t),DDo=r(Fxe," \u2014 "),NO=n(Fxe,"A",{href:!0});var ydt=s(NO);GDo=r(ydt,"DistilBertForQuestionAnswering"),ydt.forEach(t),ODo=r(Fxe," (DistilBERT model)"),Fxe.forEach(t),VDo=i(X),ev=n(X,"LI",{});var Txe=s(ev);Fge=n(Txe,"STRONG",{});var Ldt=s(Fge);XDo=r(Ldt,"electra"),Ldt.forEach(t),zDo=r(Txe," \u2014 "),jO=n(Txe,"A",{href:!0});var xdt=s(jO);QDo=r(xdt,"ElectraForQuestionAnswering"),xdt.forEach(t),WDo=r(Txe," (ELECTRA model)"),Txe.forEach(t),HDo=i(X),ov=n(X,"LI",{});var Mxe=s(ov);Tge=n(Mxe,"STRONG",{});var $dt=s(Tge);UDo=r($dt,"flaubert"),$dt.forEach(t),JDo=r(Mxe," \u2014 "),DO=n(Mxe,"A",{href:!0});var kdt=s(DO);YDo=r(kdt,"FlaubertForQuestionAnsweringSimple"),kdt.forEach(t),KDo=r(Mxe," (FlauBERT model)"),Mxe.forEach(t),ZDo=i(X),rv=n(X,"LI",{});var Exe=s(rv);Mge=n(Exe,"STRONG",{});var Sdt=s(Mge);eGo=r(Sdt,"fnet"),Sdt.forEach(t),oGo=r(Exe," \u2014 "),GO=n(Exe,"A",{href:!0});var Rdt=s(GO);rGo=r(Rdt,"FNetForQuestionAnswering"),Rdt.forEach(t),tGo=r(Exe," (FNet model)"),Exe.forEach(t),aGo=i(X),tv=n(X,"LI",{});var Cxe=s(tv);Ege=n(Cxe,"STRONG",{});var Bdt=s(Ege);nGo=r(Bdt,"funnel"),Bdt.forEach(t),sGo=r(Cxe," \u2014 "),OO=n(Cxe,"A",{href:!0});var Pdt=s(OO);lGo=r(Pdt,"FunnelForQuestionAnswering"),Pdt.forEach(t),iGo=r(Cxe," (Funnel Transformer model)"),Cxe.forEach(t),dGo=i(X),av=n(X,"LI",{});var wxe=s(av);Cge=n(wxe,"STRONG",{});var Idt=s(Cge);cGo=r(Idt,"gptj"),Idt.forEach(t),fGo=r(wxe," \u2014 "),VO=n(wxe,"A",{href:!0});var qdt=s(VO);mGo=r(qdt,"GPTJForQuestionAnswering"),qdt.forEach(t),gGo=r(wxe," (GPT-J model)"),wxe.forEach(t),hGo=i(X),nv=n(X,"LI",{});var Axe=s(nv);wge=n(Axe,"STRONG",{});var Ndt=s(wge);pGo=r(Ndt,"ibert"),Ndt.forEach(t),uGo=r(Axe," \u2014 "),XO=n(Axe,"A",{href:!0});var jdt=s(XO);_Go=r(jdt,"IBertForQuestionAnswering"),jdt.forEach(t),bGo=r(Axe," (I-BERT model)"),Axe.forEach(t),vGo=i(X),sv=n(X,"LI",{});var yxe=s(sv);Age=n(yxe,"STRONG",{});var Ddt=s(Age);FGo=r(Ddt,"layoutlmv2"),Ddt.forEach(t),TGo=r(yxe," \u2014 "),zO=n(yxe,"A",{href:!0});var Gdt=s(zO);MGo=r(Gdt,"LayoutLMv2ForQuestionAnswering"),Gdt.forEach(t),EGo=r(yxe," (LayoutLMv2 model)"),yxe.forEach(t),CGo=i(X),lv=n(X,"LI",{});var Lxe=s(lv);yge=n(Lxe,"STRONG",{});var Odt=s(yge);wGo=r(Odt,"led"),Odt.forEach(t),AGo=r(Lxe," \u2014 "),QO=n(Lxe,"A",{href:!0});var Vdt=s(QO);yGo=r(Vdt,"LEDForQuestionAnswering"),Vdt.forEach(t),LGo=r(Lxe," (LED model)"),Lxe.forEach(t),xGo=i(X),iv=n(X,"LI",{});var xxe=s(iv);Lge=n(xxe,"STRONG",{});var Xdt=s(Lge);$Go=r(Xdt,"longformer"),Xdt.forEach(t),kGo=r(xxe," \u2014 "),WO=n(xxe,"A",{href:!0});var zdt=s(WO);SGo=r(zdt,"LongformerForQuestionAnswering"),zdt.forEach(t),RGo=r(xxe," (Longformer model)"),xxe.forEach(t),BGo=i(X),dv=n(X,"LI",{});var $xe=s(dv);xge=n($xe,"STRONG",{});var Qdt=s(xge);PGo=r(Qdt,"lxmert"),Qdt.forEach(t),IGo=r($xe," \u2014 "),HO=n($xe,"A",{href:!0});var Wdt=s(HO);qGo=r(Wdt,"LxmertForQuestionAnswering"),Wdt.forEach(t),NGo=r($xe," (LXMERT model)"),$xe.forEach(t),jGo=i(X),cv=n(X,"LI",{});var kxe=s(cv);$ge=n(kxe,"STRONG",{});var Hdt=s($ge);DGo=r(Hdt,"mbart"),Hdt.forEach(t),GGo=r(kxe," \u2014 "),UO=n(kxe,"A",{href:!0});var Udt=s(UO);OGo=r(Udt,"MBartForQuestionAnswering"),Udt.forEach(t),VGo=r(kxe," (mBART model)"),kxe.forEach(t),XGo=i(X),fv=n(X,"LI",{});var Sxe=s(fv);kge=n(Sxe,"STRONG",{});var Jdt=s(kge);zGo=r(Jdt,"megatron-bert"),Jdt.forEach(t),QGo=r(Sxe," \u2014 "),JO=n(Sxe,"A",{href:!0});var Ydt=s(JO);WGo=r(Ydt,"MegatronBertForQuestionAnswering"),Ydt.forEach(t),HGo=r(Sxe," (MegatronBert model)"),Sxe.forEach(t),UGo=i(X),mv=n(X,"LI",{});var Rxe=s(mv);Sge=n(Rxe,"STRONG",{});var Kdt=s(Sge);JGo=r(Kdt,"mobilebert"),Kdt.forEach(t),YGo=r(Rxe," \u2014 "),YO=n(Rxe,"A",{href:!0});var Zdt=s(YO);KGo=r(Zdt,"MobileBertForQuestionAnswering"),Zdt.forEach(t),ZGo=r(Rxe," (MobileBERT model)"),Rxe.forEach(t),eOo=i(X),gv=n(X,"LI",{});var Bxe=s(gv);Rge=n(Bxe,"STRONG",{});var ect=s(Rge);oOo=r(ect,"mpnet"),ect.forEach(t),rOo=r(Bxe," \u2014 "),KO=n(Bxe,"A",{href:!0});var oct=s(KO);tOo=r(oct,"MPNetForQuestionAnswering"),oct.forEach(t),aOo=r(Bxe," (MPNet model)"),Bxe.forEach(t),nOo=i(X),hv=n(X,"LI",{});var Pxe=s(hv);Bge=n(Pxe,"STRONG",{});var rct=s(Bge);sOo=r(rct,"nystromformer"),rct.forEach(t),lOo=r(Pxe," \u2014 "),ZO=n(Pxe,"A",{href:!0});var tct=s(ZO);iOo=r(tct,"NystromformerForQuestionAnswering"),tct.forEach(t),dOo=r(Pxe," (Nystromformer model)"),Pxe.forEach(t),cOo=i(X),pv=n(X,"LI",{});var Ixe=s(pv);Pge=n(Ixe,"STRONG",{});var act=s(Pge);fOo=r(act,"qdqbert"),act.forEach(t),mOo=r(Ixe," \u2014 "),eV=n(Ixe,"A",{href:!0});var nct=s(eV);gOo=r(nct,"QDQBertForQuestionAnswering"),nct.forEach(t),hOo=r(Ixe," (QDQBert model)"),Ixe.forEach(t),pOo=i(X),uv=n(X,"LI",{});var qxe=s(uv);Ige=n(qxe,"STRONG",{});var sct=s(Ige);uOo=r(sct,"reformer"),sct.forEach(t),_Oo=r(qxe," \u2014 "),oV=n(qxe,"A",{href:!0});var lct=s(oV);bOo=r(lct,"ReformerForQuestionAnswering"),lct.forEach(t),vOo=r(qxe," (Reformer model)"),qxe.forEach(t),FOo=i(X),_v=n(X,"LI",{});var Nxe=s(_v);qge=n(Nxe,"STRONG",{});var ict=s(qge);TOo=r(ict,"rembert"),ict.forEach(t),MOo=r(Nxe," \u2014 "),rV=n(Nxe,"A",{href:!0});var dct=s(rV);EOo=r(dct,"RemBertForQuestionAnswering"),dct.forEach(t),COo=r(Nxe," (RemBERT model)"),Nxe.forEach(t),wOo=i(X),bv=n(X,"LI",{});var jxe=s(bv);Nge=n(jxe,"STRONG",{});var cct=s(Nge);AOo=r(cct,"roberta"),cct.forEach(t),yOo=r(jxe," \u2014 "),tV=n(jxe,"A",{href:!0});var fct=s(tV);LOo=r(fct,"RobertaForQuestionAnswering"),fct.forEach(t),xOo=r(jxe," (RoBERTa model)"),jxe.forEach(t),$Oo=i(X),vv=n(X,"LI",{});var Dxe=s(vv);jge=n(Dxe,"STRONG",{});var mct=s(jge);kOo=r(mct,"roformer"),mct.forEach(t),SOo=r(Dxe," \u2014 "),aV=n(Dxe,"A",{href:!0});var gct=s(aV);ROo=r(gct,"RoFormerForQuestionAnswering"),gct.forEach(t),BOo=r(Dxe," (RoFormer model)"),Dxe.forEach(t),POo=i(X),Fv=n(X,"LI",{});var Gxe=s(Fv);Dge=n(Gxe,"STRONG",{});var hct=s(Dge);IOo=r(hct,"splinter"),hct.forEach(t),qOo=r(Gxe," \u2014 "),nV=n(Gxe,"A",{href:!0});var pct=s(nV);NOo=r(pct,"SplinterForQuestionAnswering"),pct.forEach(t),jOo=r(Gxe," (Splinter model)"),Gxe.forEach(t),DOo=i(X),Tv=n(X,"LI",{});var Oxe=s(Tv);Gge=n(Oxe,"STRONG",{});var uct=s(Gge);GOo=r(uct,"squeezebert"),uct.forEach(t),OOo=r(Oxe," \u2014 "),sV=n(Oxe,"A",{href:!0});var _ct=s(sV);VOo=r(_ct,"SqueezeBertForQuestionAnswering"),_ct.forEach(t),XOo=r(Oxe," (SqueezeBERT model)"),Oxe.forEach(t),zOo=i(X),Mv=n(X,"LI",{});var Vxe=s(Mv);Oge=n(Vxe,"STRONG",{});var bct=s(Oge);QOo=r(bct,"xlm"),bct.forEach(t),WOo=r(Vxe," \u2014 "),lV=n(Vxe,"A",{href:!0});var vct=s(lV);HOo=r(vct,"XLMForQuestionAnsweringSimple"),vct.forEach(t),UOo=r(Vxe," (XLM model)"),Vxe.forEach(t),JOo=i(X),Ev=n(X,"LI",{});var Xxe=s(Ev);Vge=n(Xxe,"STRONG",{});var Fct=s(Vge);YOo=r(Fct,"xlm-roberta"),Fct.forEach(t),KOo=r(Xxe," \u2014 "),iV=n(Xxe,"A",{href:!0});var Tct=s(iV);ZOo=r(Tct,"XLMRobertaForQuestionAnswering"),Tct.forEach(t),eVo=r(Xxe," (XLM-RoBERTa model)"),Xxe.forEach(t),oVo=i(X),Cv=n(X,"LI",{});var zxe=s(Cv);Xge=n(zxe,"STRONG",{});var Mct=s(Xge);rVo=r(Mct,"xlm-roberta-xl"),Mct.forEach(t),tVo=r(zxe," \u2014 "),dV=n(zxe,"A",{href:!0});var Ect=s(dV);aVo=r(Ect,"XLMRobertaXLForQuestionAnswering"),Ect.forEach(t),nVo=r(zxe," (XLM-RoBERTa-XL model)"),zxe.forEach(t),sVo=i(X),wv=n(X,"LI",{});var Qxe=s(wv);zge=n(Qxe,"STRONG",{});var Cct=s(zge);lVo=r(Cct,"xlnet"),Cct.forEach(t),iVo=r(Qxe," \u2014 "),cV=n(Qxe,"A",{href:!0});var wct=s(cV);dVo=r(wct,"XLNetForQuestionAnsweringSimple"),wct.forEach(t),cVo=r(Qxe," (XLNet model)"),Qxe.forEach(t),fVo=i(X),Av=n(X,"LI",{});var Wxe=s(Av);Qge=n(Wxe,"STRONG",{});var Act=s(Qge);mVo=r(Act,"yoso"),Act.forEach(t),gVo=r(Wxe," \u2014 "),fV=n(Wxe,"A",{href:!0});var yct=s(fV);hVo=r(yct,"YosoForQuestionAnswering"),yct.forEach(t),pVo=r(Wxe," (YOSO model)"),Wxe.forEach(t),X.forEach(t),uVo=i(ia),yv=n(ia,"P",{});var Hxe=s(yv);_Vo=r(Hxe,"The model is set in evaluation mode by default using "),Wge=n(Hxe,"CODE",{});var Lct=s(Wge);bVo=r(Lct,"model.eval()"),Lct.forEach(t),vVo=r(Hxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hge=n(Hxe,"CODE",{});var xct=s(Hge);FVo=r(xct,"model.train()"),xct.forEach(t),Hxe.forEach(t),TVo=i(ia),T(Lv.$$.fragment,ia),ia.forEach(t),Us.forEach(t),bIe=i(f),Yi=n(f,"H2",{class:!0});var MNe=s(Yi);xv=n(MNe,"A",{id:!0,class:!0,href:!0});var $ct=s(xv);Uge=n($ct,"SPAN",{});var kct=s(Uge);T(by.$$.fragment,kct),kct.forEach(t),$ct.forEach(t),MVo=i(MNe),Jge=n(MNe,"SPAN",{});var Sct=s(Jge);EVo=r(Sct,"AutoModelForTableQuestionAnswering"),Sct.forEach(t),MNe.forEach(t),vIe=i(f),No=n(f,"DIV",{class:!0});var Js=s(No);T(vy.$$.fragment,Js),CVo=i(Js),Ki=n(Js,"P",{});var AK=s(Ki);wVo=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),mV=n(AK,"A",{href:!0});var Rct=s(mV);AVo=r(Rct,"from_pretrained()"),Rct.forEach(t),yVo=r(AK," class method or the "),gV=n(AK,"A",{href:!0});var Bct=s(gV);LVo=r(Bct,"from_config()"),Bct.forEach(t),xVo=r(AK,` class
method.`),AK.forEach(t),$Vo=i(Js),Fy=n(Js,"P",{});var ENe=s(Fy);kVo=r(ENe,"This class cannot be instantiated directly using "),Yge=n(ENe,"CODE",{});var Pct=s(Yge);SVo=r(Pct,"__init__()"),Pct.forEach(t),RVo=r(ENe," (throws an error)."),ENe.forEach(t),BVo=i(Js),ft=n(Js,"DIV",{class:!0});var vA=s(ft);T(Ty.$$.fragment,vA),PVo=i(vA),Kge=n(vA,"P",{});var Ict=s(Kge);IVo=r(Ict,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Ict.forEach(t),qVo=i(vA),Zi=n(vA,"P",{});var yK=s(Zi);NVo=r(yK,`Note:
Loading a model from its configuration file does `),Zge=n(yK,"STRONG",{});var qct=s(Zge);jVo=r(qct,"not"),qct.forEach(t),DVo=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),hV=n(yK,"A",{href:!0});var Nct=s(hV);GVo=r(Nct,"from_pretrained()"),Nct.forEach(t),OVo=r(yK," to load the model weights."),yK.forEach(t),VVo=i(vA),T($v.$$.fragment,vA),vA.forEach(t),XVo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(My.$$.fragment,da),zVo=i(da),ehe=n(da,"P",{});var jct=s(ehe);QVo=r(jct,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),jct.forEach(t),WVo=i(da),Ia=n(da,"P",{});var FA=s(Ia);HVo=r(FA,"The model class to instantiate is selected based on the "),ohe=n(FA,"CODE",{});var Dct=s(ohe);UVo=r(Dct,"model_type"),Dct.forEach(t),JVo=r(FA,` property of the config object (either
passed as an argument or loaded from `),rhe=n(FA,"CODE",{});var Gct=s(rhe);YVo=r(Gct,"pretrained_model_name_or_path"),Gct.forEach(t),KVo=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=n(FA,"CODE",{});var Oct=s(the);ZVo=r(Oct,"pretrained_model_name_or_path"),Oct.forEach(t),eXo=r(FA,":"),FA.forEach(t),oXo=i(da),ahe=n(da,"UL",{});var Vct=s(ahe);kv=n(Vct,"LI",{});var Uxe=s(kv);nhe=n(Uxe,"STRONG",{});var Xct=s(nhe);rXo=r(Xct,"tapas"),Xct.forEach(t),tXo=r(Uxe," \u2014 "),pV=n(Uxe,"A",{href:!0});var zct=s(pV);aXo=r(zct,"TapasForQuestionAnswering"),zct.forEach(t),nXo=r(Uxe," (TAPAS model)"),Uxe.forEach(t),Vct.forEach(t),sXo=i(da),Sv=n(da,"P",{});var Jxe=s(Sv);lXo=r(Jxe,"The model is set in evaluation mode by default using "),she=n(Jxe,"CODE",{});var Qct=s(she);iXo=r(Qct,"model.eval()"),Qct.forEach(t),dXo=r(Jxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=n(Jxe,"CODE",{});var Wct=s(lhe);cXo=r(Wct,"model.train()"),Wct.forEach(t),Jxe.forEach(t),fXo=i(da),T(Rv.$$.fragment,da),da.forEach(t),Js.forEach(t),FIe=i(f),ed=n(f,"H2",{class:!0});var CNe=s(ed);Bv=n(CNe,"A",{id:!0,class:!0,href:!0});var Hct=s(Bv);ihe=n(Hct,"SPAN",{});var Uct=s(ihe);T(Ey.$$.fragment,Uct),Uct.forEach(t),Hct.forEach(t),mXo=i(CNe),dhe=n(CNe,"SPAN",{});var Jct=s(dhe);gXo=r(Jct,"AutoModelForImageClassification"),Jct.forEach(t),CNe.forEach(t),TIe=i(f),jo=n(f,"DIV",{class:!0});var Ys=s(jo);T(Cy.$$.fragment,Ys),hXo=i(Ys),od=n(Ys,"P",{});var LK=s(od);pXo=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),uV=n(LK,"A",{href:!0});var Yct=s(uV);uXo=r(Yct,"from_pretrained()"),Yct.forEach(t),_Xo=r(LK," class method or the "),_V=n(LK,"A",{href:!0});var Kct=s(_V);bXo=r(Kct,"from_config()"),Kct.forEach(t),vXo=r(LK,` class
method.`),LK.forEach(t),FXo=i(Ys),wy=n(Ys,"P",{});var wNe=s(wy);TXo=r(wNe,"This class cannot be instantiated directly using "),che=n(wNe,"CODE",{});var Zct=s(che);MXo=r(Zct,"__init__()"),Zct.forEach(t),EXo=r(wNe," (throws an error)."),wNe.forEach(t),CXo=i(Ys),mt=n(Ys,"DIV",{class:!0});var TA=s(mt);T(Ay.$$.fragment,TA),wXo=i(TA),fhe=n(TA,"P",{});var eft=s(fhe);AXo=r(eft,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),eft.forEach(t),yXo=i(TA),rd=n(TA,"P",{});var xK=s(rd);LXo=r(xK,`Note:
Loading a model from its configuration file does `),mhe=n(xK,"STRONG",{});var oft=s(mhe);xXo=r(oft,"not"),oft.forEach(t),$Xo=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),bV=n(xK,"A",{href:!0});var rft=s(bV);kXo=r(rft,"from_pretrained()"),rft.forEach(t),SXo=r(xK," to load the model weights."),xK.forEach(t),RXo=i(TA),T(Pv.$$.fragment,TA),TA.forEach(t),BXo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(yy.$$.fragment,ca),PXo=i(ca),ghe=n(ca,"P",{});var tft=s(ghe);IXo=r(tft,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),tft.forEach(t),qXo=i(ca),qa=n(ca,"P",{});var MA=s(qa);NXo=r(MA,"The model class to instantiate is selected based on the "),hhe=n(MA,"CODE",{});var aft=s(hhe);jXo=r(aft,"model_type"),aft.forEach(t),DXo=r(MA,` property of the config object (either
passed as an argument or loaded from `),phe=n(MA,"CODE",{});var nft=s(phe);GXo=r(nft,"pretrained_model_name_or_path"),nft.forEach(t),OXo=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uhe=n(MA,"CODE",{});var sft=s(uhe);VXo=r(sft,"pretrained_model_name_or_path"),sft.forEach(t),XXo=r(MA,":"),MA.forEach(t),zXo=i(ca),Fe=n(ca,"UL",{});var Ee=s(Fe);Iv=n(Ee,"LI",{});var Yxe=s(Iv);_he=n(Yxe,"STRONG",{});var lft=s(_he);QXo=r(lft,"beit"),lft.forEach(t),WXo=r(Yxe," \u2014 "),vV=n(Yxe,"A",{href:!0});var ift=s(vV);HXo=r(ift,"BeitForImageClassification"),ift.forEach(t),UXo=r(Yxe," (BEiT model)"),Yxe.forEach(t),JXo=i(Ee),qv=n(Ee,"LI",{});var Kxe=s(qv);bhe=n(Kxe,"STRONG",{});var dft=s(bhe);YXo=r(dft,"convnext"),dft.forEach(t),KXo=r(Kxe," \u2014 "),FV=n(Kxe,"A",{href:!0});var cft=s(FV);ZXo=r(cft,"ConvNextForImageClassification"),cft.forEach(t),ezo=r(Kxe," (ConvNext model)"),Kxe.forEach(t),ozo=i(Ee),Nv=n(Ee,"LI",{});var Zxe=s(Nv);vhe=n(Zxe,"STRONG",{});var fft=s(vhe);rzo=r(fft,"data2vec-vision"),fft.forEach(t),tzo=r(Zxe," \u2014 "),TV=n(Zxe,"A",{href:!0});var mft=s(TV);azo=r(mft,"Data2VecVisionForImageClassification"),mft.forEach(t),nzo=r(Zxe," (Data2VecVision model)"),Zxe.forEach(t),szo=i(Ee),Rs=n(Ee,"LI",{});var f$=s(Rs);Fhe=n(f$,"STRONG",{});var gft=s(Fhe);lzo=r(gft,"deit"),gft.forEach(t),izo=r(f$," \u2014 "),MV=n(f$,"A",{href:!0});var hft=s(MV);dzo=r(hft,"DeiTForImageClassification"),hft.forEach(t),czo=r(f$," or "),EV=n(f$,"A",{href:!0});var pft=s(EV);fzo=r(pft,"DeiTForImageClassificationWithTeacher"),pft.forEach(t),mzo=r(f$," (DeiT model)"),f$.forEach(t),gzo=i(Ee),jv=n(Ee,"LI",{});var e9e=s(jv);The=n(e9e,"STRONG",{});var uft=s(The);hzo=r(uft,"imagegpt"),uft.forEach(t),pzo=r(e9e," \u2014 "),CV=n(e9e,"A",{href:!0});var _ft=s(CV);uzo=r(_ft,"ImageGPTForImageClassification"),_ft.forEach(t),_zo=r(e9e," (ImageGPT model)"),e9e.forEach(t),bzo=i(Ee),gt=n(Ee,"LI",{});var ff=s(gt);Mhe=n(ff,"STRONG",{});var bft=s(Mhe);vzo=r(bft,"perceiver"),bft.forEach(t),Fzo=r(ff," \u2014 "),wV=n(ff,"A",{href:!0});var vft=s(wV);Tzo=r(vft,"PerceiverForImageClassificationLearned"),vft.forEach(t),Mzo=r(ff," or "),AV=n(ff,"A",{href:!0});var Fft=s(AV);Ezo=r(Fft,"PerceiverForImageClassificationFourier"),Fft.forEach(t),Czo=r(ff," or "),yV=n(ff,"A",{href:!0});var Tft=s(yV);wzo=r(Tft,"PerceiverForImageClassificationConvProcessing"),Tft.forEach(t),Azo=r(ff," (Perceiver model)"),ff.forEach(t),yzo=i(Ee),Dv=n(Ee,"LI",{});var o9e=s(Dv);Ehe=n(o9e,"STRONG",{});var Mft=s(Ehe);Lzo=r(Mft,"poolformer"),Mft.forEach(t),xzo=r(o9e," \u2014 "),LV=n(o9e,"A",{href:!0});var Eft=s(LV);$zo=r(Eft,"PoolFormerForImageClassification"),Eft.forEach(t),kzo=r(o9e," (PoolFormer model)"),o9e.forEach(t),Szo=i(Ee),Gv=n(Ee,"LI",{});var r9e=s(Gv);Che=n(r9e,"STRONG",{});var Cft=s(Che);Rzo=r(Cft,"regnet"),Cft.forEach(t),Bzo=r(r9e," \u2014 "),xV=n(r9e,"A",{href:!0});var wft=s(xV);Pzo=r(wft,"RegNetForImageClassification"),wft.forEach(t),Izo=r(r9e," (RegNet model)"),r9e.forEach(t),qzo=i(Ee),Ov=n(Ee,"LI",{});var t9e=s(Ov);whe=n(t9e,"STRONG",{});var Aft=s(whe);Nzo=r(Aft,"resnet"),Aft.forEach(t),jzo=r(t9e," \u2014 "),$V=n(t9e,"A",{href:!0});var yft=s($V);Dzo=r(yft,"ResNetForImageClassification"),yft.forEach(t),Gzo=r(t9e," (ResNet model)"),t9e.forEach(t),Ozo=i(Ee),Vv=n(Ee,"LI",{});var a9e=s(Vv);Ahe=n(a9e,"STRONG",{});var Lft=s(Ahe);Vzo=r(Lft,"segformer"),Lft.forEach(t),Xzo=r(a9e," \u2014 "),kV=n(a9e,"A",{href:!0});var xft=s(kV);zzo=r(xft,"SegformerForImageClassification"),xft.forEach(t),Qzo=r(a9e," (SegFormer model)"),a9e.forEach(t),Wzo=i(Ee),Xv=n(Ee,"LI",{});var n9e=s(Xv);yhe=n(n9e,"STRONG",{});var $ft=s(yhe);Hzo=r($ft,"swin"),$ft.forEach(t),Uzo=r(n9e," \u2014 "),SV=n(n9e,"A",{href:!0});var kft=s(SV);Jzo=r(kft,"SwinForImageClassification"),kft.forEach(t),Yzo=r(n9e," (Swin model)"),n9e.forEach(t),Kzo=i(Ee),zv=n(Ee,"LI",{});var s9e=s(zv);Lhe=n(s9e,"STRONG",{});var Sft=s(Lhe);Zzo=r(Sft,"van"),Sft.forEach(t),eQo=r(s9e," \u2014 "),RV=n(s9e,"A",{href:!0});var Rft=s(RV);oQo=r(Rft,"VanForImageClassification"),Rft.forEach(t),rQo=r(s9e," (VAN model)"),s9e.forEach(t),tQo=i(Ee),Qv=n(Ee,"LI",{});var l9e=s(Qv);xhe=n(l9e,"STRONG",{});var Bft=s(xhe);aQo=r(Bft,"vit"),Bft.forEach(t),nQo=r(l9e," \u2014 "),BV=n(l9e,"A",{href:!0});var Pft=s(BV);sQo=r(Pft,"ViTForImageClassification"),Pft.forEach(t),lQo=r(l9e," (ViT model)"),l9e.forEach(t),Ee.forEach(t),iQo=i(ca),Wv=n(ca,"P",{});var i9e=s(Wv);dQo=r(i9e,"The model is set in evaluation mode by default using "),$he=n(i9e,"CODE",{});var Ift=s($he);cQo=r(Ift,"model.eval()"),Ift.forEach(t),fQo=r(i9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),khe=n(i9e,"CODE",{});var qft=s(khe);mQo=r(qft,"model.train()"),qft.forEach(t),i9e.forEach(t),gQo=i(ca),T(Hv.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),MIe=i(f),td=n(f,"H2",{class:!0});var ANe=s(td);Uv=n(ANe,"A",{id:!0,class:!0,href:!0});var Nft=s(Uv);She=n(Nft,"SPAN",{});var jft=s(She);T(Ly.$$.fragment,jft),jft.forEach(t),Nft.forEach(t),hQo=i(ANe),Rhe=n(ANe,"SPAN",{});var Dft=s(Rhe);pQo=r(Dft,"AutoModelForVision2Seq"),Dft.forEach(t),ANe.forEach(t),EIe=i(f),Do=n(f,"DIV",{class:!0});var Ks=s(Do);T(xy.$$.fragment,Ks),uQo=i(Ks),ad=n(Ks,"P",{});var $K=s(ad);_Qo=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),PV=n($K,"A",{href:!0});var Gft=s(PV);bQo=r(Gft,"from_pretrained()"),Gft.forEach(t),vQo=r($K," class method or the "),IV=n($K,"A",{href:!0});var Oft=s(IV);FQo=r(Oft,"from_config()"),Oft.forEach(t),TQo=r($K,` class
method.`),$K.forEach(t),MQo=i(Ks),$y=n(Ks,"P",{});var yNe=s($y);EQo=r(yNe,"This class cannot be instantiated directly using "),Bhe=n(yNe,"CODE",{});var Vft=s(Bhe);CQo=r(Vft,"__init__()"),Vft.forEach(t),wQo=r(yNe," (throws an error)."),yNe.forEach(t),AQo=i(Ks),ht=n(Ks,"DIV",{class:!0});var EA=s(ht);T(ky.$$.fragment,EA),yQo=i(EA),Phe=n(EA,"P",{});var Xft=s(Phe);LQo=r(Xft,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Xft.forEach(t),xQo=i(EA),nd=n(EA,"P",{});var kK=s(nd);$Qo=r(kK,`Note:
Loading a model from its configuration file does `),Ihe=n(kK,"STRONG",{});var zft=s(Ihe);kQo=r(zft,"not"),zft.forEach(t),SQo=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qV=n(kK,"A",{href:!0});var Qft=s(qV);RQo=r(Qft,"from_pretrained()"),Qft.forEach(t),BQo=r(kK," to load the model weights."),kK.forEach(t),PQo=i(EA),T(Jv.$$.fragment,EA),EA.forEach(t),IQo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(Sy.$$.fragment,fa),qQo=i(fa),qhe=n(fa,"P",{});var Wft=s(qhe);NQo=r(Wft,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Wft.forEach(t),jQo=i(fa),Na=n(fa,"P",{});var CA=s(Na);DQo=r(CA,"The model class to instantiate is selected based on the "),Nhe=n(CA,"CODE",{});var Hft=s(Nhe);GQo=r(Hft,"model_type"),Hft.forEach(t),OQo=r(CA,` property of the config object (either
passed as an argument or loaded from `),jhe=n(CA,"CODE",{});var Uft=s(jhe);VQo=r(Uft,"pretrained_model_name_or_path"),Uft.forEach(t),XQo=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dhe=n(CA,"CODE",{});var Jft=s(Dhe);zQo=r(Jft,"pretrained_model_name_or_path"),Jft.forEach(t),QQo=r(CA,":"),CA.forEach(t),WQo=i(fa),Ghe=n(fa,"UL",{});var Yft=s(Ghe);Yv=n(Yft,"LI",{});var d9e=s(Yv);Ohe=n(d9e,"STRONG",{});var Kft=s(Ohe);HQo=r(Kft,"vision-encoder-decoder"),Kft.forEach(t),UQo=r(d9e," \u2014 "),NV=n(d9e,"A",{href:!0});var Zft=s(NV);JQo=r(Zft,"VisionEncoderDecoderModel"),Zft.forEach(t),YQo=r(d9e," (Vision Encoder decoder model)"),d9e.forEach(t),Yft.forEach(t),KQo=i(fa),Kv=n(fa,"P",{});var c9e=s(Kv);ZQo=r(c9e,"The model is set in evaluation mode by default using "),Vhe=n(c9e,"CODE",{});var emt=s(Vhe);eWo=r(emt,"model.eval()"),emt.forEach(t),oWo=r(c9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xhe=n(c9e,"CODE",{});var omt=s(Xhe);rWo=r(omt,"model.train()"),omt.forEach(t),c9e.forEach(t),tWo=i(fa),T(Zv.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),CIe=i(f),sd=n(f,"H2",{class:!0});var LNe=s(sd);eF=n(LNe,"A",{id:!0,class:!0,href:!0});var rmt=s(eF);zhe=n(rmt,"SPAN",{});var tmt=s(zhe);T(Ry.$$.fragment,tmt),tmt.forEach(t),rmt.forEach(t),aWo=i(LNe),Qhe=n(LNe,"SPAN",{});var amt=s(Qhe);nWo=r(amt,"AutoModelForAudioClassification"),amt.forEach(t),LNe.forEach(t),wIe=i(f),Go=n(f,"DIV",{class:!0});var Zs=s(Go);T(By.$$.fragment,Zs),sWo=i(Zs),ld=n(Zs,"P",{});var SK=s(ld);lWo=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),jV=n(SK,"A",{href:!0});var nmt=s(jV);iWo=r(nmt,"from_pretrained()"),nmt.forEach(t),dWo=r(SK," class method or the "),DV=n(SK,"A",{href:!0});var smt=s(DV);cWo=r(smt,"from_config()"),smt.forEach(t),fWo=r(SK,` class
method.`),SK.forEach(t),mWo=i(Zs),Py=n(Zs,"P",{});var xNe=s(Py);gWo=r(xNe,"This class cannot be instantiated directly using "),Whe=n(xNe,"CODE",{});var lmt=s(Whe);hWo=r(lmt,"__init__()"),lmt.forEach(t),pWo=r(xNe," (throws an error)."),xNe.forEach(t),uWo=i(Zs),pt=n(Zs,"DIV",{class:!0});var wA=s(pt);T(Iy.$$.fragment,wA),_Wo=i(wA),Hhe=n(wA,"P",{});var imt=s(Hhe);bWo=r(imt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),imt.forEach(t),vWo=i(wA),id=n(wA,"P",{});var RK=s(id);FWo=r(RK,`Note:
Loading a model from its configuration file does `),Uhe=n(RK,"STRONG",{});var dmt=s(Uhe);TWo=r(dmt,"not"),dmt.forEach(t),MWo=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=n(RK,"A",{href:!0});var cmt=s(GV);EWo=r(cmt,"from_pretrained()"),cmt.forEach(t),CWo=r(RK," to load the model weights."),RK.forEach(t),wWo=i(wA),T(oF.$$.fragment,wA),wA.forEach(t),AWo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(qy.$$.fragment,ma),yWo=i(ma),Jhe=n(ma,"P",{});var fmt=s(Jhe);LWo=r(fmt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),fmt.forEach(t),xWo=i(ma),ja=n(ma,"P",{});var AA=s(ja);$Wo=r(AA,"The model class to instantiate is selected based on the "),Yhe=n(AA,"CODE",{});var mmt=s(Yhe);kWo=r(mmt,"model_type"),mmt.forEach(t),SWo=r(AA,` property of the config object (either
passed as an argument or loaded from `),Khe=n(AA,"CODE",{});var gmt=s(Khe);RWo=r(gmt,"pretrained_model_name_or_path"),gmt.forEach(t),BWo=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zhe=n(AA,"CODE",{});var hmt=s(Zhe);PWo=r(hmt,"pretrained_model_name_or_path"),hmt.forEach(t),IWo=r(AA,":"),AA.forEach(t),qWo=i(ma),Ne=n(ma,"UL",{});var bo=s(Ne);rF=n(bo,"LI",{});var f9e=s(rF);epe=n(f9e,"STRONG",{});var pmt=s(epe);NWo=r(pmt,"data2vec-audio"),pmt.forEach(t),jWo=r(f9e," \u2014 "),OV=n(f9e,"A",{href:!0});var umt=s(OV);DWo=r(umt,"Data2VecAudioForSequenceClassification"),umt.forEach(t),GWo=r(f9e," (Data2VecAudio model)"),f9e.forEach(t),OWo=i(bo),tF=n(bo,"LI",{});var m9e=s(tF);ope=n(m9e,"STRONG",{});var _mt=s(ope);VWo=r(_mt,"hubert"),_mt.forEach(t),XWo=r(m9e," \u2014 "),VV=n(m9e,"A",{href:!0});var bmt=s(VV);zWo=r(bmt,"HubertForSequenceClassification"),bmt.forEach(t),QWo=r(m9e," (Hubert model)"),m9e.forEach(t),WWo=i(bo),aF=n(bo,"LI",{});var g9e=s(aF);rpe=n(g9e,"STRONG",{});var vmt=s(rpe);HWo=r(vmt,"sew"),vmt.forEach(t),UWo=r(g9e," \u2014 "),XV=n(g9e,"A",{href:!0});var Fmt=s(XV);JWo=r(Fmt,"SEWForSequenceClassification"),Fmt.forEach(t),YWo=r(g9e," (SEW model)"),g9e.forEach(t),KWo=i(bo),nF=n(bo,"LI",{});var h9e=s(nF);tpe=n(h9e,"STRONG",{});var Tmt=s(tpe);ZWo=r(Tmt,"sew-d"),Tmt.forEach(t),eHo=r(h9e," \u2014 "),zV=n(h9e,"A",{href:!0});var Mmt=s(zV);oHo=r(Mmt,"SEWDForSequenceClassification"),Mmt.forEach(t),rHo=r(h9e," (SEW-D model)"),h9e.forEach(t),tHo=i(bo),sF=n(bo,"LI",{});var p9e=s(sF);ape=n(p9e,"STRONG",{});var Emt=s(ape);aHo=r(Emt,"unispeech"),Emt.forEach(t),nHo=r(p9e," \u2014 "),QV=n(p9e,"A",{href:!0});var Cmt=s(QV);sHo=r(Cmt,"UniSpeechForSequenceClassification"),Cmt.forEach(t),lHo=r(p9e," (UniSpeech model)"),p9e.forEach(t),iHo=i(bo),lF=n(bo,"LI",{});var u9e=s(lF);npe=n(u9e,"STRONG",{});var wmt=s(npe);dHo=r(wmt,"unispeech-sat"),wmt.forEach(t),cHo=r(u9e," \u2014 "),WV=n(u9e,"A",{href:!0});var Amt=s(WV);fHo=r(Amt,"UniSpeechSatForSequenceClassification"),Amt.forEach(t),mHo=r(u9e," (UniSpeechSat model)"),u9e.forEach(t),gHo=i(bo),iF=n(bo,"LI",{});var _9e=s(iF);spe=n(_9e,"STRONG",{});var ymt=s(spe);hHo=r(ymt,"wav2vec2"),ymt.forEach(t),pHo=r(_9e," \u2014 "),HV=n(_9e,"A",{href:!0});var Lmt=s(HV);uHo=r(Lmt,"Wav2Vec2ForSequenceClassification"),Lmt.forEach(t),_Ho=r(_9e," (Wav2Vec2 model)"),_9e.forEach(t),bHo=i(bo),dF=n(bo,"LI",{});var b9e=s(dF);lpe=n(b9e,"STRONG",{});var xmt=s(lpe);vHo=r(xmt,"wavlm"),xmt.forEach(t),FHo=r(b9e," \u2014 "),UV=n(b9e,"A",{href:!0});var $mt=s(UV);THo=r($mt,"WavLMForSequenceClassification"),$mt.forEach(t),MHo=r(b9e," (WavLM model)"),b9e.forEach(t),bo.forEach(t),EHo=i(ma),cF=n(ma,"P",{});var v9e=s(cF);CHo=r(v9e,"The model is set in evaluation mode by default using "),ipe=n(v9e,"CODE",{});var kmt=s(ipe);wHo=r(kmt,"model.eval()"),kmt.forEach(t),AHo=r(v9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dpe=n(v9e,"CODE",{});var Smt=s(dpe);yHo=r(Smt,"model.train()"),Smt.forEach(t),v9e.forEach(t),LHo=i(ma),T(fF.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),AIe=i(f),dd=n(f,"H2",{class:!0});var $Ne=s(dd);mF=n($Ne,"A",{id:!0,class:!0,href:!0});var Rmt=s(mF);cpe=n(Rmt,"SPAN",{});var Bmt=s(cpe);T(Ny.$$.fragment,Bmt),Bmt.forEach(t),Rmt.forEach(t),xHo=i($Ne),fpe=n($Ne,"SPAN",{});var Pmt=s(fpe);$Ho=r(Pmt,"AutoModelForAudioFrameClassification"),Pmt.forEach(t),$Ne.forEach(t),yIe=i(f),Oo=n(f,"DIV",{class:!0});var el=s(Oo);T(jy.$$.fragment,el),kHo=i(el),cd=n(el,"P",{});var BK=s(cd);SHo=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),JV=n(BK,"A",{href:!0});var Imt=s(JV);RHo=r(Imt,"from_pretrained()"),Imt.forEach(t),BHo=r(BK," class method or the "),YV=n(BK,"A",{href:!0});var qmt=s(YV);PHo=r(qmt,"from_config()"),qmt.forEach(t),IHo=r(BK,` class
method.`),BK.forEach(t),qHo=i(el),Dy=n(el,"P",{});var kNe=s(Dy);NHo=r(kNe,"This class cannot be instantiated directly using "),mpe=n(kNe,"CODE",{});var Nmt=s(mpe);jHo=r(Nmt,"__init__()"),Nmt.forEach(t),DHo=r(kNe," (throws an error)."),kNe.forEach(t),GHo=i(el),ut=n(el,"DIV",{class:!0});var yA=s(ut);T(Gy.$$.fragment,yA),OHo=i(yA),gpe=n(yA,"P",{});var jmt=s(gpe);VHo=r(jmt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),jmt.forEach(t),XHo=i(yA),fd=n(yA,"P",{});var PK=s(fd);zHo=r(PK,`Note:
Loading a model from its configuration file does `),hpe=n(PK,"STRONG",{});var Dmt=s(hpe);QHo=r(Dmt,"not"),Dmt.forEach(t),WHo=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),KV=n(PK,"A",{href:!0});var Gmt=s(KV);HHo=r(Gmt,"from_pretrained()"),Gmt.forEach(t),UHo=r(PK," to load the model weights."),PK.forEach(t),JHo=i(yA),T(gF.$$.fragment,yA),yA.forEach(t),YHo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(Oy.$$.fragment,ga),KHo=i(ga),ppe=n(ga,"P",{});var Omt=s(ppe);ZHo=r(Omt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Omt.forEach(t),eUo=i(ga),Da=n(ga,"P",{});var LA=s(Da);oUo=r(LA,"The model class to instantiate is selected based on the "),upe=n(LA,"CODE",{});var Vmt=s(upe);rUo=r(Vmt,"model_type"),Vmt.forEach(t),tUo=r(LA,` property of the config object (either
passed as an argument or loaded from `),_pe=n(LA,"CODE",{});var Xmt=s(_pe);aUo=r(Xmt,"pretrained_model_name_or_path"),Xmt.forEach(t),nUo=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bpe=n(LA,"CODE",{});var zmt=s(bpe);sUo=r(zmt,"pretrained_model_name_or_path"),zmt.forEach(t),lUo=r(LA,":"),LA.forEach(t),iUo=i(ga),Ga=n(ga,"UL",{});var xA=s(Ga);hF=n(xA,"LI",{});var F9e=s(hF);vpe=n(F9e,"STRONG",{});var Qmt=s(vpe);dUo=r(Qmt,"data2vec-audio"),Qmt.forEach(t),cUo=r(F9e," \u2014 "),ZV=n(F9e,"A",{href:!0});var Wmt=s(ZV);fUo=r(Wmt,"Data2VecAudioForAudioFrameClassification"),Wmt.forEach(t),mUo=r(F9e," (Data2VecAudio model)"),F9e.forEach(t),gUo=i(xA),pF=n(xA,"LI",{});var T9e=s(pF);Fpe=n(T9e,"STRONG",{});var Hmt=s(Fpe);hUo=r(Hmt,"unispeech-sat"),Hmt.forEach(t),pUo=r(T9e," \u2014 "),eX=n(T9e,"A",{href:!0});var Umt=s(eX);uUo=r(Umt,"UniSpeechSatForAudioFrameClassification"),Umt.forEach(t),_Uo=r(T9e," (UniSpeechSat model)"),T9e.forEach(t),bUo=i(xA),uF=n(xA,"LI",{});var M9e=s(uF);Tpe=n(M9e,"STRONG",{});var Jmt=s(Tpe);vUo=r(Jmt,"wav2vec2"),Jmt.forEach(t),FUo=r(M9e," \u2014 "),oX=n(M9e,"A",{href:!0});var Ymt=s(oX);TUo=r(Ymt,"Wav2Vec2ForAudioFrameClassification"),Ymt.forEach(t),MUo=r(M9e," (Wav2Vec2 model)"),M9e.forEach(t),EUo=i(xA),_F=n(xA,"LI",{});var E9e=s(_F);Mpe=n(E9e,"STRONG",{});var Kmt=s(Mpe);CUo=r(Kmt,"wavlm"),Kmt.forEach(t),wUo=r(E9e," \u2014 "),rX=n(E9e,"A",{href:!0});var Zmt=s(rX);AUo=r(Zmt,"WavLMForAudioFrameClassification"),Zmt.forEach(t),yUo=r(E9e," (WavLM model)"),E9e.forEach(t),xA.forEach(t),LUo=i(ga),bF=n(ga,"P",{});var C9e=s(bF);xUo=r(C9e,"The model is set in evaluation mode by default using "),Epe=n(C9e,"CODE",{});var egt=s(Epe);$Uo=r(egt,"model.eval()"),egt.forEach(t),kUo=r(C9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cpe=n(C9e,"CODE",{});var ogt=s(Cpe);SUo=r(ogt,"model.train()"),ogt.forEach(t),C9e.forEach(t),RUo=i(ga),T(vF.$$.fragment,ga),ga.forEach(t),el.forEach(t),LIe=i(f),md=n(f,"H2",{class:!0});var SNe=s(md);FF=n(SNe,"A",{id:!0,class:!0,href:!0});var rgt=s(FF);wpe=n(rgt,"SPAN",{});var tgt=s(wpe);T(Vy.$$.fragment,tgt),tgt.forEach(t),rgt.forEach(t),BUo=i(SNe),Ape=n(SNe,"SPAN",{});var agt=s(Ape);PUo=r(agt,"AutoModelForCTC"),agt.forEach(t),SNe.forEach(t),xIe=i(f),Vo=n(f,"DIV",{class:!0});var ol=s(Vo);T(Xy.$$.fragment,ol),IUo=i(ol),gd=n(ol,"P",{});var IK=s(gd);qUo=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),tX=n(IK,"A",{href:!0});var ngt=s(tX);NUo=r(ngt,"from_pretrained()"),ngt.forEach(t),jUo=r(IK," class method or the "),aX=n(IK,"A",{href:!0});var sgt=s(aX);DUo=r(sgt,"from_config()"),sgt.forEach(t),GUo=r(IK,` class
method.`),IK.forEach(t),OUo=i(ol),zy=n(ol,"P",{});var RNe=s(zy);VUo=r(RNe,"This class cannot be instantiated directly using "),ype=n(RNe,"CODE",{});var lgt=s(ype);XUo=r(lgt,"__init__()"),lgt.forEach(t),zUo=r(RNe," (throws an error)."),RNe.forEach(t),QUo=i(ol),_t=n(ol,"DIV",{class:!0});var $A=s(_t);T(Qy.$$.fragment,$A),WUo=i($A),Lpe=n($A,"P",{});var igt=s(Lpe);HUo=r(igt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),igt.forEach(t),UUo=i($A),hd=n($A,"P",{});var qK=s(hd);JUo=r(qK,`Note:
Loading a model from its configuration file does `),xpe=n(qK,"STRONG",{});var dgt=s(xpe);YUo=r(dgt,"not"),dgt.forEach(t),KUo=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nX=n(qK,"A",{href:!0});var cgt=s(nX);ZUo=r(cgt,"from_pretrained()"),cgt.forEach(t),eJo=r(qK," to load the model weights."),qK.forEach(t),oJo=i($A),T(TF.$$.fragment,$A),$A.forEach(t),rJo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(Wy.$$.fragment,ha),tJo=i(ha),$pe=n(ha,"P",{});var fgt=s($pe);aJo=r(fgt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),fgt.forEach(t),nJo=i(ha),Oa=n(ha,"P",{});var kA=s(Oa);sJo=r(kA,"The model class to instantiate is selected based on the "),kpe=n(kA,"CODE",{});var mgt=s(kpe);lJo=r(mgt,"model_type"),mgt.forEach(t),iJo=r(kA,` property of the config object (either
passed as an argument or loaded from `),Spe=n(kA,"CODE",{});var ggt=s(Spe);dJo=r(ggt,"pretrained_model_name_or_path"),ggt.forEach(t),cJo=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rpe=n(kA,"CODE",{});var hgt=s(Rpe);fJo=r(hgt,"pretrained_model_name_or_path"),hgt.forEach(t),mJo=r(kA,":"),kA.forEach(t),gJo=i(ha),je=n(ha,"UL",{});var vo=s(je);MF=n(vo,"LI",{});var w9e=s(MF);Bpe=n(w9e,"STRONG",{});var pgt=s(Bpe);hJo=r(pgt,"data2vec-audio"),pgt.forEach(t),pJo=r(w9e," \u2014 "),sX=n(w9e,"A",{href:!0});var ugt=s(sX);uJo=r(ugt,"Data2VecAudioForCTC"),ugt.forEach(t),_Jo=r(w9e," (Data2VecAudio model)"),w9e.forEach(t),bJo=i(vo),EF=n(vo,"LI",{});var A9e=s(EF);Ppe=n(A9e,"STRONG",{});var _gt=s(Ppe);vJo=r(_gt,"hubert"),_gt.forEach(t),FJo=r(A9e," \u2014 "),lX=n(A9e,"A",{href:!0});var bgt=s(lX);TJo=r(bgt,"HubertForCTC"),bgt.forEach(t),MJo=r(A9e," (Hubert model)"),A9e.forEach(t),EJo=i(vo),CF=n(vo,"LI",{});var y9e=s(CF);Ipe=n(y9e,"STRONG",{});var vgt=s(Ipe);CJo=r(vgt,"sew"),vgt.forEach(t),wJo=r(y9e," \u2014 "),iX=n(y9e,"A",{href:!0});var Fgt=s(iX);AJo=r(Fgt,"SEWForCTC"),Fgt.forEach(t),yJo=r(y9e," (SEW model)"),y9e.forEach(t),LJo=i(vo),wF=n(vo,"LI",{});var L9e=s(wF);qpe=n(L9e,"STRONG",{});var Tgt=s(qpe);xJo=r(Tgt,"sew-d"),Tgt.forEach(t),$Jo=r(L9e," \u2014 "),dX=n(L9e,"A",{href:!0});var Mgt=s(dX);kJo=r(Mgt,"SEWDForCTC"),Mgt.forEach(t),SJo=r(L9e," (SEW-D model)"),L9e.forEach(t),RJo=i(vo),AF=n(vo,"LI",{});var x9e=s(AF);Npe=n(x9e,"STRONG",{});var Egt=s(Npe);BJo=r(Egt,"unispeech"),Egt.forEach(t),PJo=r(x9e," \u2014 "),cX=n(x9e,"A",{href:!0});var Cgt=s(cX);IJo=r(Cgt,"UniSpeechForCTC"),Cgt.forEach(t),qJo=r(x9e," (UniSpeech model)"),x9e.forEach(t),NJo=i(vo),yF=n(vo,"LI",{});var $9e=s(yF);jpe=n($9e,"STRONG",{});var wgt=s(jpe);jJo=r(wgt,"unispeech-sat"),wgt.forEach(t),DJo=r($9e," \u2014 "),fX=n($9e,"A",{href:!0});var Agt=s(fX);GJo=r(Agt,"UniSpeechSatForCTC"),Agt.forEach(t),OJo=r($9e," (UniSpeechSat model)"),$9e.forEach(t),VJo=i(vo),LF=n(vo,"LI",{});var k9e=s(LF);Dpe=n(k9e,"STRONG",{});var ygt=s(Dpe);XJo=r(ygt,"wav2vec2"),ygt.forEach(t),zJo=r(k9e," \u2014 "),mX=n(k9e,"A",{href:!0});var Lgt=s(mX);QJo=r(Lgt,"Wav2Vec2ForCTC"),Lgt.forEach(t),WJo=r(k9e," (Wav2Vec2 model)"),k9e.forEach(t),HJo=i(vo),xF=n(vo,"LI",{});var S9e=s(xF);Gpe=n(S9e,"STRONG",{});var xgt=s(Gpe);UJo=r(xgt,"wavlm"),xgt.forEach(t),JJo=r(S9e," \u2014 "),gX=n(S9e,"A",{href:!0});var $gt=s(gX);YJo=r($gt,"WavLMForCTC"),$gt.forEach(t),KJo=r(S9e," (WavLM model)"),S9e.forEach(t),vo.forEach(t),ZJo=i(ha),$F=n(ha,"P",{});var R9e=s($F);eYo=r(R9e,"The model is set in evaluation mode by default using "),Ope=n(R9e,"CODE",{});var kgt=s(Ope);oYo=r(kgt,"model.eval()"),kgt.forEach(t),rYo=r(R9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vpe=n(R9e,"CODE",{});var Sgt=s(Vpe);tYo=r(Sgt,"model.train()"),Sgt.forEach(t),R9e.forEach(t),aYo=i(ha),T(kF.$$.fragment,ha),ha.forEach(t),ol.forEach(t),$Ie=i(f),pd=n(f,"H2",{class:!0});var BNe=s(pd);SF=n(BNe,"A",{id:!0,class:!0,href:!0});var Rgt=s(SF);Xpe=n(Rgt,"SPAN",{});var Bgt=s(Xpe);T(Hy.$$.fragment,Bgt),Bgt.forEach(t),Rgt.forEach(t),nYo=i(BNe),zpe=n(BNe,"SPAN",{});var Pgt=s(zpe);sYo=r(Pgt,"AutoModelForSpeechSeq2Seq"),Pgt.forEach(t),BNe.forEach(t),kIe=i(f),Xo=n(f,"DIV",{class:!0});var rl=s(Xo);T(Uy.$$.fragment,rl),lYo=i(rl),ud=n(rl,"P",{});var NK=s(ud);iYo=r(NK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hX=n(NK,"A",{href:!0});var Igt=s(hX);dYo=r(Igt,"from_pretrained()"),Igt.forEach(t),cYo=r(NK," class method or the "),pX=n(NK,"A",{href:!0});var qgt=s(pX);fYo=r(qgt,"from_config()"),qgt.forEach(t),mYo=r(NK,` class
method.`),NK.forEach(t),gYo=i(rl),Jy=n(rl,"P",{});var PNe=s(Jy);hYo=r(PNe,"This class cannot be instantiated directly using "),Qpe=n(PNe,"CODE",{});var Ngt=s(Qpe);pYo=r(Ngt,"__init__()"),Ngt.forEach(t),uYo=r(PNe," (throws an error)."),PNe.forEach(t),_Yo=i(rl),bt=n(rl,"DIV",{class:!0});var SA=s(bt);T(Yy.$$.fragment,SA),bYo=i(SA),Wpe=n(SA,"P",{});var jgt=s(Wpe);vYo=r(jgt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),jgt.forEach(t),FYo=i(SA),_d=n(SA,"P",{});var jK=s(_d);TYo=r(jK,`Note:
Loading a model from its configuration file does `),Hpe=n(jK,"STRONG",{});var Dgt=s(Hpe);MYo=r(Dgt,"not"),Dgt.forEach(t),EYo=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=n(jK,"A",{href:!0});var Ggt=s(uX);CYo=r(Ggt,"from_pretrained()"),Ggt.forEach(t),wYo=r(jK," to load the model weights."),jK.forEach(t),AYo=i(SA),T(RF.$$.fragment,SA),SA.forEach(t),yYo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(Ky.$$.fragment,pa),LYo=i(pa),Upe=n(pa,"P",{});var Ogt=s(Upe);xYo=r(Ogt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Ogt.forEach(t),$Yo=i(pa),Va=n(pa,"P",{});var RA=s(Va);kYo=r(RA,"The model class to instantiate is selected based on the "),Jpe=n(RA,"CODE",{});var Vgt=s(Jpe);SYo=r(Vgt,"model_type"),Vgt.forEach(t),RYo=r(RA,` property of the config object (either
passed as an argument or loaded from `),Ype=n(RA,"CODE",{});var Xgt=s(Ype);BYo=r(Xgt,"pretrained_model_name_or_path"),Xgt.forEach(t),PYo=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kpe=n(RA,"CODE",{});var zgt=s(Kpe);IYo=r(zgt,"pretrained_model_name_or_path"),zgt.forEach(t),qYo=r(RA,":"),RA.forEach(t),NYo=i(pa),Zy=n(pa,"UL",{});var INe=s(Zy);BF=n(INe,"LI",{});var B9e=s(BF);Zpe=n(B9e,"STRONG",{});var Qgt=s(Zpe);jYo=r(Qgt,"speech-encoder-decoder"),Qgt.forEach(t),DYo=r(B9e," \u2014 "),_X=n(B9e,"A",{href:!0});var Wgt=s(_X);GYo=r(Wgt,"SpeechEncoderDecoderModel"),Wgt.forEach(t),OYo=r(B9e," (Speech Encoder decoder model)"),B9e.forEach(t),VYo=i(INe),PF=n(INe,"LI",{});var P9e=s(PF);eue=n(P9e,"STRONG",{});var Hgt=s(eue);XYo=r(Hgt,"speech_to_text"),Hgt.forEach(t),zYo=r(P9e," \u2014 "),bX=n(P9e,"A",{href:!0});var Ugt=s(bX);QYo=r(Ugt,"Speech2TextForConditionalGeneration"),Ugt.forEach(t),WYo=r(P9e," (Speech2Text model)"),P9e.forEach(t),INe.forEach(t),HYo=i(pa),IF=n(pa,"P",{});var I9e=s(IF);UYo=r(I9e,"The model is set in evaluation mode by default using "),oue=n(I9e,"CODE",{});var Jgt=s(oue);JYo=r(Jgt,"model.eval()"),Jgt.forEach(t),YYo=r(I9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rue=n(I9e,"CODE",{});var Ygt=s(rue);KYo=r(Ygt,"model.train()"),Ygt.forEach(t),I9e.forEach(t),ZYo=i(pa),T(qF.$$.fragment,pa),pa.forEach(t),rl.forEach(t),SIe=i(f),bd=n(f,"H2",{class:!0});var qNe=s(bd);NF=n(qNe,"A",{id:!0,class:!0,href:!0});var Kgt=s(NF);tue=n(Kgt,"SPAN",{});var Zgt=s(tue);T(eL.$$.fragment,Zgt),Zgt.forEach(t),Kgt.forEach(t),eKo=i(qNe),aue=n(qNe,"SPAN",{});var eht=s(aue);oKo=r(eht,"AutoModelForAudioXVector"),eht.forEach(t),qNe.forEach(t),RIe=i(f),zo=n(f,"DIV",{class:!0});var tl=s(zo);T(oL.$$.fragment,tl),rKo=i(tl),vd=n(tl,"P",{});var DK=s(vd);tKo=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),vX=n(DK,"A",{href:!0});var oht=s(vX);aKo=r(oht,"from_pretrained()"),oht.forEach(t),nKo=r(DK," class method or the "),FX=n(DK,"A",{href:!0});var rht=s(FX);sKo=r(rht,"from_config()"),rht.forEach(t),lKo=r(DK,` class
method.`),DK.forEach(t),iKo=i(tl),rL=n(tl,"P",{});var NNe=s(rL);dKo=r(NNe,"This class cannot be instantiated directly using "),nue=n(NNe,"CODE",{});var tht=s(nue);cKo=r(tht,"__init__()"),tht.forEach(t),fKo=r(NNe," (throws an error)."),NNe.forEach(t),mKo=i(tl),vt=n(tl,"DIV",{class:!0});var BA=s(vt);T(tL.$$.fragment,BA),gKo=i(BA),sue=n(BA,"P",{});var aht=s(sue);hKo=r(aht,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),aht.forEach(t),pKo=i(BA),Fd=n(BA,"P",{});var GK=s(Fd);uKo=r(GK,`Note:
Loading a model from its configuration file does `),lue=n(GK,"STRONG",{});var nht=s(lue);_Ko=r(nht,"not"),nht.forEach(t),bKo=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TX=n(GK,"A",{href:!0});var sht=s(TX);vKo=r(sht,"from_pretrained()"),sht.forEach(t),FKo=r(GK," to load the model weights."),GK.forEach(t),TKo=i(BA),T(jF.$$.fragment,BA),BA.forEach(t),MKo=i(tl),mo=n(tl,"DIV",{class:!0});var ua=s(mo);T(aL.$$.fragment,ua),EKo=i(ua),iue=n(ua,"P",{});var lht=s(iue);CKo=r(lht,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),lht.forEach(t),wKo=i(ua),Xa=n(ua,"P",{});var PA=s(Xa);AKo=r(PA,"The model class to instantiate is selected based on the "),due=n(PA,"CODE",{});var iht=s(due);yKo=r(iht,"model_type"),iht.forEach(t),LKo=r(PA,` property of the config object (either
passed as an argument or loaded from `),cue=n(PA,"CODE",{});var dht=s(cue);xKo=r(dht,"pretrained_model_name_or_path"),dht.forEach(t),$Ko=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=n(PA,"CODE",{});var cht=s(fue);kKo=r(cht,"pretrained_model_name_or_path"),cht.forEach(t),SKo=r(PA,":"),PA.forEach(t),RKo=i(ua),za=n(ua,"UL",{});var IA=s(za);DF=n(IA,"LI",{});var q9e=s(DF);mue=n(q9e,"STRONG",{});var fht=s(mue);BKo=r(fht,"data2vec-audio"),fht.forEach(t),PKo=r(q9e," \u2014 "),MX=n(q9e,"A",{href:!0});var mht=s(MX);IKo=r(mht,"Data2VecAudioForXVector"),mht.forEach(t),qKo=r(q9e," (Data2VecAudio model)"),q9e.forEach(t),NKo=i(IA),GF=n(IA,"LI",{});var N9e=s(GF);gue=n(N9e,"STRONG",{});var ght=s(gue);jKo=r(ght,"unispeech-sat"),ght.forEach(t),DKo=r(N9e," \u2014 "),EX=n(N9e,"A",{href:!0});var hht=s(EX);GKo=r(hht,"UniSpeechSatForXVector"),hht.forEach(t),OKo=r(N9e," (UniSpeechSat model)"),N9e.forEach(t),VKo=i(IA),OF=n(IA,"LI",{});var j9e=s(OF);hue=n(j9e,"STRONG",{});var pht=s(hue);XKo=r(pht,"wav2vec2"),pht.forEach(t),zKo=r(j9e," \u2014 "),CX=n(j9e,"A",{href:!0});var uht=s(CX);QKo=r(uht,"Wav2Vec2ForXVector"),uht.forEach(t),WKo=r(j9e," (Wav2Vec2 model)"),j9e.forEach(t),HKo=i(IA),VF=n(IA,"LI",{});var D9e=s(VF);pue=n(D9e,"STRONG",{});var _ht=s(pue);UKo=r(_ht,"wavlm"),_ht.forEach(t),JKo=r(D9e," \u2014 "),wX=n(D9e,"A",{href:!0});var bht=s(wX);YKo=r(bht,"WavLMForXVector"),bht.forEach(t),KKo=r(D9e," (WavLM model)"),D9e.forEach(t),IA.forEach(t),ZKo=i(ua),XF=n(ua,"P",{});var G9e=s(XF);eZo=r(G9e,"The model is set in evaluation mode by default using "),uue=n(G9e,"CODE",{});var vht=s(uue);oZo=r(vht,"model.eval()"),vht.forEach(t),rZo=r(G9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ue=n(G9e,"CODE",{});var Fht=s(_ue);tZo=r(Fht,"model.train()"),Fht.forEach(t),G9e.forEach(t),aZo=i(ua),T(zF.$$.fragment,ua),ua.forEach(t),tl.forEach(t),BIe=i(f),Td=n(f,"H2",{class:!0});var jNe=s(Td);QF=n(jNe,"A",{id:!0,class:!0,href:!0});var Tht=s(QF);bue=n(Tht,"SPAN",{});var Mht=s(bue);T(nL.$$.fragment,Mht),Mht.forEach(t),Tht.forEach(t),nZo=i(jNe),vue=n(jNe,"SPAN",{});var Eht=s(vue);sZo=r(Eht,"AutoModelForMaskedImageModeling"),Eht.forEach(t),jNe.forEach(t),PIe=i(f),Qo=n(f,"DIV",{class:!0});var al=s(Qo);T(sL.$$.fragment,al),lZo=i(al),Md=n(al,"P",{});var OK=s(Md);iZo=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),AX=n(OK,"A",{href:!0});var Cht=s(AX);dZo=r(Cht,"from_pretrained()"),Cht.forEach(t),cZo=r(OK," class method or the "),yX=n(OK,"A",{href:!0});var wht=s(yX);fZo=r(wht,"from_config()"),wht.forEach(t),mZo=r(OK,` class
method.`),OK.forEach(t),gZo=i(al),lL=n(al,"P",{});var DNe=s(lL);hZo=r(DNe,"This class cannot be instantiated directly using "),Fue=n(DNe,"CODE",{});var Aht=s(Fue);pZo=r(Aht,"__init__()"),Aht.forEach(t),uZo=r(DNe," (throws an error)."),DNe.forEach(t),_Zo=i(al),Ft=n(al,"DIV",{class:!0});var qA=s(Ft);T(iL.$$.fragment,qA),bZo=i(qA),Tue=n(qA,"P",{});var yht=s(Tue);vZo=r(yht,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),yht.forEach(t),FZo=i(qA),Ed=n(qA,"P",{});var VK=s(Ed);TZo=r(VK,`Note:
Loading a model from its configuration file does `),Mue=n(VK,"STRONG",{});var Lht=s(Mue);MZo=r(Lht,"not"),Lht.forEach(t),EZo=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=n(VK,"A",{href:!0});var xht=s(LX);CZo=r(xht,"from_pretrained()"),xht.forEach(t),wZo=r(VK," to load the model weights."),VK.forEach(t),AZo=i(qA),T(WF.$$.fragment,qA),qA.forEach(t),yZo=i(al),go=n(al,"DIV",{class:!0});var _a=s(go);T(dL.$$.fragment,_a),LZo=i(_a),Eue=n(_a,"P",{});var $ht=s(Eue);xZo=r($ht,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),$ht.forEach(t),$Zo=i(_a),Qa=n(_a,"P",{});var NA=s(Qa);kZo=r(NA,"The model class to instantiate is selected based on the "),Cue=n(NA,"CODE",{});var kht=s(Cue);SZo=r(kht,"model_type"),kht.forEach(t),RZo=r(NA,` property of the config object (either
passed as an argument or loaded from `),wue=n(NA,"CODE",{});var Sht=s(wue);BZo=r(Sht,"pretrained_model_name_or_path"),Sht.forEach(t),PZo=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aue=n(NA,"CODE",{});var Rht=s(Aue);IZo=r(Rht,"pretrained_model_name_or_path"),Rht.forEach(t),qZo=r(NA,":"),NA.forEach(t),NZo=i(_a),Cd=n(_a,"UL",{});var XK=s(Cd);HF=n(XK,"LI",{});var O9e=s(HF);yue=n(O9e,"STRONG",{});var Bht=s(yue);jZo=r(Bht,"deit"),Bht.forEach(t),DZo=r(O9e," \u2014 "),xX=n(O9e,"A",{href:!0});var Pht=s(xX);GZo=r(Pht,"DeiTForMaskedImageModeling"),Pht.forEach(t),OZo=r(O9e," (DeiT model)"),O9e.forEach(t),VZo=i(XK),UF=n(XK,"LI",{});var V9e=s(UF);Lue=n(V9e,"STRONG",{});var Iht=s(Lue);XZo=r(Iht,"swin"),Iht.forEach(t),zZo=r(V9e," \u2014 "),$X=n(V9e,"A",{href:!0});var qht=s($X);QZo=r(qht,"SwinForMaskedImageModeling"),qht.forEach(t),WZo=r(V9e," (Swin model)"),V9e.forEach(t),HZo=i(XK),JF=n(XK,"LI",{});var X9e=s(JF);xue=n(X9e,"STRONG",{});var Nht=s(xue);UZo=r(Nht,"vit"),Nht.forEach(t),JZo=r(X9e," \u2014 "),kX=n(X9e,"A",{href:!0});var jht=s(kX);YZo=r(jht,"ViTForMaskedImageModeling"),jht.forEach(t),KZo=r(X9e," (ViT model)"),X9e.forEach(t),XK.forEach(t),ZZo=i(_a),YF=n(_a,"P",{});var z9e=s(YF);eer=r(z9e,"The model is set in evaluation mode by default using "),$ue=n(z9e,"CODE",{});var Dht=s($ue);oer=r(Dht,"model.eval()"),Dht.forEach(t),rer=r(z9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kue=n(z9e,"CODE",{});var Ght=s(kue);ter=r(Ght,"model.train()"),Ght.forEach(t),z9e.forEach(t),aer=i(_a),T(KF.$$.fragment,_a),_a.forEach(t),al.forEach(t),IIe=i(f),wd=n(f,"H2",{class:!0});var GNe=s(wd);ZF=n(GNe,"A",{id:!0,class:!0,href:!0});var Oht=s(ZF);Sue=n(Oht,"SPAN",{});var Vht=s(Sue);T(cL.$$.fragment,Vht),Vht.forEach(t),Oht.forEach(t),ner=i(GNe),Rue=n(GNe,"SPAN",{});var Xht=s(Rue);ser=r(Xht,"AutoModelForObjectDetection"),Xht.forEach(t),GNe.forEach(t),qIe=i(f),Wo=n(f,"DIV",{class:!0});var nl=s(Wo);T(fL.$$.fragment,nl),ler=i(nl),Ad=n(nl,"P",{});var zK=s(Ad);ier=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),SX=n(zK,"A",{href:!0});var zht=s(SX);der=r(zht,"from_pretrained()"),zht.forEach(t),cer=r(zK," class method or the "),RX=n(zK,"A",{href:!0});var Qht=s(RX);fer=r(Qht,"from_config()"),Qht.forEach(t),mer=r(zK,` class
method.`),zK.forEach(t),ger=i(nl),mL=n(nl,"P",{});var ONe=s(mL);her=r(ONe,"This class cannot be instantiated directly using "),Bue=n(ONe,"CODE",{});var Wht=s(Bue);per=r(Wht,"__init__()"),Wht.forEach(t),uer=r(ONe," (throws an error)."),ONe.forEach(t),_er=i(nl),Tt=n(nl,"DIV",{class:!0});var jA=s(Tt);T(gL.$$.fragment,jA),ber=i(jA),Pue=n(jA,"P",{});var Hht=s(Pue);ver=r(Hht,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Hht.forEach(t),Fer=i(jA),yd=n(jA,"P",{});var QK=s(yd);Ter=r(QK,`Note:
Loading a model from its configuration file does `),Iue=n(QK,"STRONG",{});var Uht=s(Iue);Mer=r(Uht,"not"),Uht.forEach(t),Eer=r(QK,` load the model weights. It only affects the
model\u2019s configuration. Use `),BX=n(QK,"A",{href:!0});var Jht=s(BX);Cer=r(Jht,"from_pretrained()"),Jht.forEach(t),wer=r(QK," to load the model weights."),QK.forEach(t),Aer=i(jA),T(eT.$$.fragment,jA),jA.forEach(t),yer=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(hL.$$.fragment,ba),Ler=i(ba),que=n(ba,"P",{});var Yht=s(que);xer=r(Yht,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Yht.forEach(t),$er=i(ba),Wa=n(ba,"P",{});var DA=s(Wa);ker=r(DA,"The model class to instantiate is selected based on the "),Nue=n(DA,"CODE",{});var Kht=s(Nue);Ser=r(Kht,"model_type"),Kht.forEach(t),Rer=r(DA,` property of the config object (either
passed as an argument or loaded from `),jue=n(DA,"CODE",{});var Zht=s(jue);Ber=r(Zht,"pretrained_model_name_or_path"),Zht.forEach(t),Per=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Due=n(DA,"CODE",{});var ept=s(Due);Ier=r(ept,"pretrained_model_name_or_path"),ept.forEach(t),qer=r(DA,":"),DA.forEach(t),Ner=i(ba),pL=n(ba,"UL",{});var VNe=s(pL);oT=n(VNe,"LI",{});var Q9e=s(oT);Gue=n(Q9e,"STRONG",{});var opt=s(Gue);jer=r(opt,"detr"),opt.forEach(t),Der=r(Q9e," \u2014 "),PX=n(Q9e,"A",{href:!0});var rpt=s(PX);Ger=r(rpt,"DetrForObjectDetection"),rpt.forEach(t),Oer=r(Q9e," (DETR model)"),Q9e.forEach(t),Ver=i(VNe),rT=n(VNe,"LI",{});var W9e=s(rT);Oue=n(W9e,"STRONG",{});var tpt=s(Oue);Xer=r(tpt,"yolos"),tpt.forEach(t),zer=r(W9e," \u2014 "),IX=n(W9e,"A",{href:!0});var apt=s(IX);Qer=r(apt,"YolosForObjectDetection"),apt.forEach(t),Wer=r(W9e," (YOLOS model)"),W9e.forEach(t),VNe.forEach(t),Her=i(ba),tT=n(ba,"P",{});var H9e=s(tT);Uer=r(H9e,"The model is set in evaluation mode by default using "),Vue=n(H9e,"CODE",{});var npt=s(Vue);Jer=r(npt,"model.eval()"),npt.forEach(t),Yer=r(H9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xue=n(H9e,"CODE",{});var spt=s(Xue);Ker=r(spt,"model.train()"),spt.forEach(t),H9e.forEach(t),Zer=i(ba),T(aT.$$.fragment,ba),ba.forEach(t),nl.forEach(t),NIe=i(f),Ld=n(f,"H2",{class:!0});var XNe=s(Ld);nT=n(XNe,"A",{id:!0,class:!0,href:!0});var lpt=s(nT);zue=n(lpt,"SPAN",{});var ipt=s(zue);T(uL.$$.fragment,ipt),ipt.forEach(t),lpt.forEach(t),eor=i(XNe),Que=n(XNe,"SPAN",{});var dpt=s(Que);oor=r(dpt,"AutoModelForImageSegmentation"),dpt.forEach(t),XNe.forEach(t),jIe=i(f),Ho=n(f,"DIV",{class:!0});var sl=s(Ho);T(_L.$$.fragment,sl),ror=i(sl),xd=n(sl,"P",{});var WK=s(xd);tor=r(WK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),qX=n(WK,"A",{href:!0});var cpt=s(qX);aor=r(cpt,"from_pretrained()"),cpt.forEach(t),nor=r(WK," class method or the "),NX=n(WK,"A",{href:!0});var fpt=s(NX);sor=r(fpt,"from_config()"),fpt.forEach(t),lor=r(WK,` class
method.`),WK.forEach(t),ior=i(sl),bL=n(sl,"P",{});var zNe=s(bL);dor=r(zNe,"This class cannot be instantiated directly using "),Wue=n(zNe,"CODE",{});var mpt=s(Wue);cor=r(mpt,"__init__()"),mpt.forEach(t),mor=r(zNe," (throws an error)."),zNe.forEach(t),gor=i(sl),Mt=n(sl,"DIV",{class:!0});var GA=s(Mt);T(vL.$$.fragment,GA),hor=i(GA),Hue=n(GA,"P",{});var gpt=s(Hue);por=r(gpt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),gpt.forEach(t),uor=i(GA),$d=n(GA,"P",{});var HK=s($d);_or=r(HK,`Note:
Loading a model from its configuration file does `),Uue=n(HK,"STRONG",{});var hpt=s(Uue);bor=r(hpt,"not"),hpt.forEach(t),vor=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jX=n(HK,"A",{href:!0});var ppt=s(jX);For=r(ppt,"from_pretrained()"),ppt.forEach(t),Tor=r(HK," to load the model weights."),HK.forEach(t),Mor=i(GA),T(sT.$$.fragment,GA),GA.forEach(t),Eor=i(sl),po=n(sl,"DIV",{class:!0});var va=s(po);T(FL.$$.fragment,va),Cor=i(va),Jue=n(va,"P",{});var upt=s(Jue);wor=r(upt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),upt.forEach(t),Aor=i(va),Ha=n(va,"P",{});var OA=s(Ha);yor=r(OA,"The model class to instantiate is selected based on the "),Yue=n(OA,"CODE",{});var _pt=s(Yue);Lor=r(_pt,"model_type"),_pt.forEach(t),xor=r(OA,` property of the config object (either
passed as an argument or loaded from `),Kue=n(OA,"CODE",{});var bpt=s(Kue);$or=r(bpt,"pretrained_model_name_or_path"),bpt.forEach(t),kor=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zue=n(OA,"CODE",{});var vpt=s(Zue);Sor=r(vpt,"pretrained_model_name_or_path"),vpt.forEach(t),Ror=r(OA,":"),OA.forEach(t),Bor=i(va),e_e=n(va,"UL",{});var Fpt=s(e_e);lT=n(Fpt,"LI",{});var U9e=s(lT);o_e=n(U9e,"STRONG",{});var Tpt=s(o_e);Por=r(Tpt,"detr"),Tpt.forEach(t),Ior=r(U9e," \u2014 "),DX=n(U9e,"A",{href:!0});var Mpt=s(DX);qor=r(Mpt,"DetrForSegmentation"),Mpt.forEach(t),Nor=r(U9e," (DETR model)"),U9e.forEach(t),Fpt.forEach(t),jor=i(va),iT=n(va,"P",{});var J9e=s(iT);Dor=r(J9e,"The model is set in evaluation mode by default using "),r_e=n(J9e,"CODE",{});var Ept=s(r_e);Gor=r(Ept,"model.eval()"),Ept.forEach(t),Oor=r(J9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t_e=n(J9e,"CODE",{});var Cpt=s(t_e);Vor=r(Cpt,"model.train()"),Cpt.forEach(t),J9e.forEach(t),Xor=i(va),T(dT.$$.fragment,va),va.forEach(t),sl.forEach(t),DIe=i(f),kd=n(f,"H2",{class:!0});var QNe=s(kd);cT=n(QNe,"A",{id:!0,class:!0,href:!0});var wpt=s(cT);a_e=n(wpt,"SPAN",{});var Apt=s(a_e);T(TL.$$.fragment,Apt),Apt.forEach(t),wpt.forEach(t),zor=i(QNe),n_e=n(QNe,"SPAN",{});var ypt=s(n_e);Qor=r(ypt,"AutoModelForSemanticSegmentation"),ypt.forEach(t),QNe.forEach(t),GIe=i(f),Uo=n(f,"DIV",{class:!0});var ll=s(Uo);T(ML.$$.fragment,ll),Wor=i(ll),Sd=n(ll,"P",{});var UK=s(Sd);Hor=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),GX=n(UK,"A",{href:!0});var Lpt=s(GX);Uor=r(Lpt,"from_pretrained()"),Lpt.forEach(t),Jor=r(UK," class method or the "),OX=n(UK,"A",{href:!0});var xpt=s(OX);Yor=r(xpt,"from_config()"),xpt.forEach(t),Kor=r(UK,` class
method.`),UK.forEach(t),Zor=i(ll),EL=n(ll,"P",{});var WNe=s(EL);err=r(WNe,"This class cannot be instantiated directly using "),s_e=n(WNe,"CODE",{});var $pt=s(s_e);orr=r($pt,"__init__()"),$pt.forEach(t),rrr=r(WNe," (throws an error)."),WNe.forEach(t),trr=i(ll),Et=n(ll,"DIV",{class:!0});var VA=s(Et);T(CL.$$.fragment,VA),arr=i(VA),l_e=n(VA,"P",{});var kpt=s(l_e);nrr=r(kpt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),kpt.forEach(t),srr=i(VA),Rd=n(VA,"P",{});var JK=s(Rd);lrr=r(JK,`Note:
Loading a model from its configuration file does `),i_e=n(JK,"STRONG",{});var Spt=s(i_e);irr=r(Spt,"not"),Spt.forEach(t),drr=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VX=n(JK,"A",{href:!0});var Rpt=s(VX);crr=r(Rpt,"from_pretrained()"),Rpt.forEach(t),frr=r(JK," to load the model weights."),JK.forEach(t),mrr=i(VA),T(fT.$$.fragment,VA),VA.forEach(t),grr=i(ll),uo=n(ll,"DIV",{class:!0});var Fa=s(uo);T(wL.$$.fragment,Fa),hrr=i(Fa),d_e=n(Fa,"P",{});var Bpt=s(d_e);prr=r(Bpt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Bpt.forEach(t),urr=i(Fa),Ua=n(Fa,"P",{});var XA=s(Ua);_rr=r(XA,"The model class to instantiate is selected based on the "),c_e=n(XA,"CODE",{});var Ppt=s(c_e);brr=r(Ppt,"model_type"),Ppt.forEach(t),vrr=r(XA,` property of the config object (either
passed as an argument or loaded from `),f_e=n(XA,"CODE",{});var Ipt=s(f_e);Frr=r(Ipt,"pretrained_model_name_or_path"),Ipt.forEach(t),Trr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m_e=n(XA,"CODE",{});var qpt=s(m_e);Mrr=r(qpt,"pretrained_model_name_or_path"),qpt.forEach(t),Err=r(XA,":"),XA.forEach(t),Crr=i(Fa),Ja=n(Fa,"UL",{});var zA=s(Ja);mT=n(zA,"LI",{});var Y9e=s(mT);g_e=n(Y9e,"STRONG",{});var Npt=s(g_e);wrr=r(Npt,"beit"),Npt.forEach(t),Arr=r(Y9e," \u2014 "),XX=n(Y9e,"A",{href:!0});var jpt=s(XX);yrr=r(jpt,"BeitForSemanticSegmentation"),jpt.forEach(t),Lrr=r(Y9e," (BEiT model)"),Y9e.forEach(t),xrr=i(zA),gT=n(zA,"LI",{});var K9e=s(gT);h_e=n(K9e,"STRONG",{});var Dpt=s(h_e);$rr=r(Dpt,"data2vec-vision"),Dpt.forEach(t),krr=r(K9e," \u2014 "),zX=n(K9e,"A",{href:!0});var Gpt=s(zX);Srr=r(Gpt,"Data2VecVisionForSemanticSegmentation"),Gpt.forEach(t),Rrr=r(K9e," (Data2VecVision model)"),K9e.forEach(t),Brr=i(zA),hT=n(zA,"LI",{});var Z9e=s(hT);p_e=n(Z9e,"STRONG",{});var Opt=s(p_e);Prr=r(Opt,"dpt"),Opt.forEach(t),Irr=r(Z9e," \u2014 "),QX=n(Z9e,"A",{href:!0});var Vpt=s(QX);qrr=r(Vpt,"DPTForSemanticSegmentation"),Vpt.forEach(t),Nrr=r(Z9e," (DPT model)"),Z9e.forEach(t),jrr=i(zA),pT=n(zA,"LI",{});var e$e=s(pT);u_e=n(e$e,"STRONG",{});var Xpt=s(u_e);Drr=r(Xpt,"segformer"),Xpt.forEach(t),Grr=r(e$e," \u2014 "),WX=n(e$e,"A",{href:!0});var zpt=s(WX);Orr=r(zpt,"SegformerForSemanticSegmentation"),zpt.forEach(t),Vrr=r(e$e," (SegFormer model)"),e$e.forEach(t),zA.forEach(t),Xrr=i(Fa),uT=n(Fa,"P",{});var o$e=s(uT);zrr=r(o$e,"The model is set in evaluation mode by default using "),__e=n(o$e,"CODE",{});var Qpt=s(__e);Qrr=r(Qpt,"model.eval()"),Qpt.forEach(t),Wrr=r(o$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b_e=n(o$e,"CODE",{});var Wpt=s(b_e);Hrr=r(Wpt,"model.train()"),Wpt.forEach(t),o$e.forEach(t),Urr=i(Fa),T(_T.$$.fragment,Fa),Fa.forEach(t),ll.forEach(t),OIe=i(f),Bd=n(f,"H2",{class:!0});var HNe=s(Bd);bT=n(HNe,"A",{id:!0,class:!0,href:!0});var Hpt=s(bT);v_e=n(Hpt,"SPAN",{});var Upt=s(v_e);T(AL.$$.fragment,Upt),Upt.forEach(t),Hpt.forEach(t),Jrr=i(HNe),F_e=n(HNe,"SPAN",{});var Jpt=s(F_e);Yrr=r(Jpt,"AutoModelForInstanceSegmentation"),Jpt.forEach(t),HNe.forEach(t),VIe=i(f),Jo=n(f,"DIV",{class:!0});var il=s(Jo);T(yL.$$.fragment,il),Krr=i(il),Pd=n(il,"P",{});var YK=s(Pd);Zrr=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),HX=n(YK,"A",{href:!0});var Ypt=s(HX);etr=r(Ypt,"from_pretrained()"),Ypt.forEach(t),otr=r(YK," class method or the "),UX=n(YK,"A",{href:!0});var Kpt=s(UX);rtr=r(Kpt,"from_config()"),Kpt.forEach(t),ttr=r(YK,` class
method.`),YK.forEach(t),atr=i(il),LL=n(il,"P",{});var UNe=s(LL);ntr=r(UNe,"This class cannot be instantiated directly using "),T_e=n(UNe,"CODE",{});var Zpt=s(T_e);str=r(Zpt,"__init__()"),Zpt.forEach(t),ltr=r(UNe," (throws an error)."),UNe.forEach(t),itr=i(il),Ct=n(il,"DIV",{class:!0});var QA=s(Ct);T(xL.$$.fragment,QA),dtr=i(QA),M_e=n(QA,"P",{});var eut=s(M_e);ctr=r(eut,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),eut.forEach(t),ftr=i(QA),Id=n(QA,"P",{});var KK=s(Id);mtr=r(KK,`Note:
Loading a model from its configuration file does `),E_e=n(KK,"STRONG",{});var out=s(E_e);gtr=r(out,"not"),out.forEach(t),htr=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=n(KK,"A",{href:!0});var rut=s(JX);ptr=r(rut,"from_pretrained()"),rut.forEach(t),utr=r(KK," to load the model weights."),KK.forEach(t),_tr=i(QA),T(vT.$$.fragment,QA),QA.forEach(t),btr=i(il),_o=n(il,"DIV",{class:!0});var Ta=s(_o);T($L.$$.fragment,Ta),vtr=i(Ta),C_e=n(Ta,"P",{});var tut=s(C_e);Ftr=r(tut,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),tut.forEach(t),Ttr=i(Ta),Ya=n(Ta,"P",{});var WA=s(Ya);Mtr=r(WA,"The model class to instantiate is selected based on the "),w_e=n(WA,"CODE",{});var aut=s(w_e);Etr=r(aut,"model_type"),aut.forEach(t),Ctr=r(WA,` property of the config object (either
passed as an argument or loaded from `),A_e=n(WA,"CODE",{});var nut=s(A_e);wtr=r(nut,"pretrained_model_name_or_path"),nut.forEach(t),Atr=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y_e=n(WA,"CODE",{});var sut=s(y_e);ytr=r(sut,"pretrained_model_name_or_path"),sut.forEach(t),Ltr=r(WA,":"),WA.forEach(t),xtr=i(Ta),L_e=n(Ta,"UL",{});var lut=s(L_e);FT=n(lut,"LI",{});var r$e=s(FT);x_e=n(r$e,"STRONG",{});var iut=s(x_e);$tr=r(iut,"maskformer"),iut.forEach(t),ktr=r(r$e," \u2014 "),YX=n(r$e,"A",{href:!0});var dut=s(YX);Str=r(dut,"MaskFormerForInstanceSegmentation"),dut.forEach(t),Rtr=r(r$e," (MaskFormer model)"),r$e.forEach(t),lut.forEach(t),Btr=i(Ta),TT=n(Ta,"P",{});var t$e=s(TT);Ptr=r(t$e,"The model is set in evaluation mode by default using "),$_e=n(t$e,"CODE",{});var cut=s($_e);Itr=r(cut,"model.eval()"),cut.forEach(t),qtr=r(t$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k_e=n(t$e,"CODE",{});var fut=s(k_e);Ntr=r(fut,"model.train()"),fut.forEach(t),t$e.forEach(t),jtr=i(Ta),T(MT.$$.fragment,Ta),Ta.forEach(t),il.forEach(t),XIe=i(f),qd=n(f,"H2",{class:!0});var JNe=s(qd);ET=n(JNe,"A",{id:!0,class:!0,href:!0});var mut=s(ET);S_e=n(mut,"SPAN",{});var gut=s(S_e);T(kL.$$.fragment,gut),gut.forEach(t),mut.forEach(t),Dtr=i(JNe),R_e=n(JNe,"SPAN",{});var hut=s(R_e);Gtr=r(hut,"TFAutoModel"),hut.forEach(t),JNe.forEach(t),zIe=i(f),Yo=n(f,"DIV",{class:!0});var dl=s(Yo);T(SL.$$.fragment,dl),Otr=i(dl),Nd=n(dl,"P",{});var ZK=s(Nd);Vtr=r(ZK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),KX=n(ZK,"A",{href:!0});var put=s(KX);Xtr=r(put,"from_pretrained()"),put.forEach(t),ztr=r(ZK," class method or the "),ZX=n(ZK,"A",{href:!0});var uut=s(ZX);Qtr=r(uut,"from_config()"),uut.forEach(t),Wtr=r(ZK,` class
method.`),ZK.forEach(t),Htr=i(dl),RL=n(dl,"P",{});var YNe=s(RL);Utr=r(YNe,"This class cannot be instantiated directly using "),B_e=n(YNe,"CODE",{});var _ut=s(B_e);Jtr=r(_ut,"__init__()"),_ut.forEach(t),Ytr=r(YNe," (throws an error)."),YNe.forEach(t),Ktr=i(dl),wt=n(dl,"DIV",{class:!0});var HA=s(wt);T(BL.$$.fragment,HA),Ztr=i(HA),P_e=n(HA,"P",{});var but=s(P_e);ear=r(but,"Instantiates one of the base model classes of the library from a configuration."),but.forEach(t),oar=i(HA),jd=n(HA,"P",{});var eZ=s(jd);rar=r(eZ,`Note:
Loading a model from its configuration file does `),I_e=n(eZ,"STRONG",{});var vut=s(I_e);tar=r(vut,"not"),vut.forEach(t),aar=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=n(eZ,"A",{href:!0});var Fut=s(ez);nar=r(Fut,"from_pretrained()"),Fut.forEach(t),sar=r(eZ," to load the model weights."),eZ.forEach(t),lar=i(HA),T(CT.$$.fragment,HA),HA.forEach(t),iar=i(dl),wr=n(dl,"DIV",{class:!0});var cl=s(wr);T(PL.$$.fragment,cl),dar=i(cl),q_e=n(cl,"P",{});var Tut=s(q_e);car=r(Tut,"Instantiate one of the base model classes of the library from a pretrained model."),Tut.forEach(t),far=i(cl),Ka=n(cl,"P",{});var UA=s(Ka);mar=r(UA,"The model class to instantiate is selected based on the "),N_e=n(UA,"CODE",{});var Mut=s(N_e);gar=r(Mut,"model_type"),Mut.forEach(t),har=r(UA,` property of the config object (either
passed as an argument or loaded from `),j_e=n(UA,"CODE",{});var Eut=s(j_e);par=r(Eut,"pretrained_model_name_or_path"),Eut.forEach(t),uar=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=n(UA,"CODE",{});var Cut=s(D_e);_ar=r(Cut,"pretrained_model_name_or_path"),Cut.forEach(t),bar=r(UA,":"),UA.forEach(t),Far=i(cl),j=n(cl,"UL",{});var D=s(j);wT=n(D,"LI",{});var a$e=s(wT);G_e=n(a$e,"STRONG",{});var wut=s(G_e);Tar=r(wut,"albert"),wut.forEach(t),Mar=r(a$e," \u2014 "),oz=n(a$e,"A",{href:!0});var Aut=s(oz);Ear=r(Aut,"TFAlbertModel"),Aut.forEach(t),Car=r(a$e," (ALBERT model)"),a$e.forEach(t),war=i(D),AT=n(D,"LI",{});var n$e=s(AT);O_e=n(n$e,"STRONG",{});var yut=s(O_e);Aar=r(yut,"bart"),yut.forEach(t),yar=r(n$e," \u2014 "),rz=n(n$e,"A",{href:!0});var Lut=s(rz);Lar=r(Lut,"TFBartModel"),Lut.forEach(t),xar=r(n$e," (BART model)"),n$e.forEach(t),$ar=i(D),yT=n(D,"LI",{});var s$e=s(yT);V_e=n(s$e,"STRONG",{});var xut=s(V_e);kar=r(xut,"bert"),xut.forEach(t),Sar=r(s$e," \u2014 "),tz=n(s$e,"A",{href:!0});var $ut=s(tz);Rar=r($ut,"TFBertModel"),$ut.forEach(t),Bar=r(s$e," (BERT model)"),s$e.forEach(t),Par=i(D),LT=n(D,"LI",{});var l$e=s(LT);X_e=n(l$e,"STRONG",{});var kut=s(X_e);Iar=r(kut,"blenderbot"),kut.forEach(t),qar=r(l$e," \u2014 "),az=n(l$e,"A",{href:!0});var Sut=s(az);Nar=r(Sut,"TFBlenderbotModel"),Sut.forEach(t),jar=r(l$e," (Blenderbot model)"),l$e.forEach(t),Dar=i(D),xT=n(D,"LI",{});var i$e=s(xT);z_e=n(i$e,"STRONG",{});var Rut=s(z_e);Gar=r(Rut,"blenderbot-small"),Rut.forEach(t),Oar=r(i$e," \u2014 "),nz=n(i$e,"A",{href:!0});var But=s(nz);Var=r(But,"TFBlenderbotSmallModel"),But.forEach(t),Xar=r(i$e," (BlenderbotSmall model)"),i$e.forEach(t),zar=i(D),$T=n(D,"LI",{});var d$e=s($T);Q_e=n(d$e,"STRONG",{});var Put=s(Q_e);Qar=r(Put,"camembert"),Put.forEach(t),War=r(d$e," \u2014 "),sz=n(d$e,"A",{href:!0});var Iut=s(sz);Har=r(Iut,"TFCamembertModel"),Iut.forEach(t),Uar=r(d$e," (CamemBERT model)"),d$e.forEach(t),Jar=i(D),kT=n(D,"LI",{});var c$e=s(kT);W_e=n(c$e,"STRONG",{});var qut=s(W_e);Yar=r(qut,"clip"),qut.forEach(t),Kar=r(c$e," \u2014 "),lz=n(c$e,"A",{href:!0});var Nut=s(lz);Zar=r(Nut,"TFCLIPModel"),Nut.forEach(t),enr=r(c$e," (CLIP model)"),c$e.forEach(t),onr=i(D),ST=n(D,"LI",{});var f$e=s(ST);H_e=n(f$e,"STRONG",{});var jut=s(H_e);rnr=r(jut,"convbert"),jut.forEach(t),tnr=r(f$e," \u2014 "),iz=n(f$e,"A",{href:!0});var Dut=s(iz);anr=r(Dut,"TFConvBertModel"),Dut.forEach(t),nnr=r(f$e," (ConvBERT model)"),f$e.forEach(t),snr=i(D),RT=n(D,"LI",{});var m$e=s(RT);U_e=n(m$e,"STRONG",{});var Gut=s(U_e);lnr=r(Gut,"convnext"),Gut.forEach(t),inr=r(m$e," \u2014 "),dz=n(m$e,"A",{href:!0});var Out=s(dz);dnr=r(Out,"TFConvNextModel"),Out.forEach(t),cnr=r(m$e," (ConvNext model)"),m$e.forEach(t),fnr=i(D),BT=n(D,"LI",{});var g$e=s(BT);J_e=n(g$e,"STRONG",{});var Vut=s(J_e);mnr=r(Vut,"ctrl"),Vut.forEach(t),gnr=r(g$e," \u2014 "),cz=n(g$e,"A",{href:!0});var Xut=s(cz);hnr=r(Xut,"TFCTRLModel"),Xut.forEach(t),pnr=r(g$e," (CTRL model)"),g$e.forEach(t),unr=i(D),PT=n(D,"LI",{});var h$e=s(PT);Y_e=n(h$e,"STRONG",{});var zut=s(Y_e);_nr=r(zut,"data2vec-vision"),zut.forEach(t),bnr=r(h$e," \u2014 "),fz=n(h$e,"A",{href:!0});var Qut=s(fz);vnr=r(Qut,"TFData2VecVisionModel"),Qut.forEach(t),Fnr=r(h$e," (Data2VecVision model)"),h$e.forEach(t),Tnr=i(D),IT=n(D,"LI",{});var p$e=s(IT);K_e=n(p$e,"STRONG",{});var Wut=s(K_e);Mnr=r(Wut,"deberta"),Wut.forEach(t),Enr=r(p$e," \u2014 "),mz=n(p$e,"A",{href:!0});var Hut=s(mz);Cnr=r(Hut,"TFDebertaModel"),Hut.forEach(t),wnr=r(p$e," (DeBERTa model)"),p$e.forEach(t),Anr=i(D),qT=n(D,"LI",{});var u$e=s(qT);Z_e=n(u$e,"STRONG",{});var Uut=s(Z_e);ynr=r(Uut,"deberta-v2"),Uut.forEach(t),Lnr=r(u$e," \u2014 "),gz=n(u$e,"A",{href:!0});var Jut=s(gz);xnr=r(Jut,"TFDebertaV2Model"),Jut.forEach(t),$nr=r(u$e," (DeBERTa-v2 model)"),u$e.forEach(t),knr=i(D),NT=n(D,"LI",{});var _$e=s(NT);e1e=n(_$e,"STRONG",{});var Yut=s(e1e);Snr=r(Yut,"distilbert"),Yut.forEach(t),Rnr=r(_$e," \u2014 "),hz=n(_$e,"A",{href:!0});var Kut=s(hz);Bnr=r(Kut,"TFDistilBertModel"),Kut.forEach(t),Pnr=r(_$e," (DistilBERT model)"),_$e.forEach(t),Inr=i(D),jT=n(D,"LI",{});var b$e=s(jT);o1e=n(b$e,"STRONG",{});var Zut=s(o1e);qnr=r(Zut,"dpr"),Zut.forEach(t),Nnr=r(b$e," \u2014 "),pz=n(b$e,"A",{href:!0});var e_t=s(pz);jnr=r(e_t,"TFDPRQuestionEncoder"),e_t.forEach(t),Dnr=r(b$e," (DPR model)"),b$e.forEach(t),Gnr=i(D),DT=n(D,"LI",{});var v$e=s(DT);r1e=n(v$e,"STRONG",{});var o_t=s(r1e);Onr=r(o_t,"electra"),o_t.forEach(t),Vnr=r(v$e," \u2014 "),uz=n(v$e,"A",{href:!0});var r_t=s(uz);Xnr=r(r_t,"TFElectraModel"),r_t.forEach(t),znr=r(v$e," (ELECTRA model)"),v$e.forEach(t),Qnr=i(D),GT=n(D,"LI",{});var F$e=s(GT);t1e=n(F$e,"STRONG",{});var t_t=s(t1e);Wnr=r(t_t,"flaubert"),t_t.forEach(t),Hnr=r(F$e," \u2014 "),_z=n(F$e,"A",{href:!0});var a_t=s(_z);Unr=r(a_t,"TFFlaubertModel"),a_t.forEach(t),Jnr=r(F$e," (FlauBERT model)"),F$e.forEach(t),Ynr=i(D),Bs=n(D,"LI",{});var m$=s(Bs);a1e=n(m$,"STRONG",{});var n_t=s(a1e);Knr=r(n_t,"funnel"),n_t.forEach(t),Znr=r(m$," \u2014 "),bz=n(m$,"A",{href:!0});var s_t=s(bz);esr=r(s_t,"TFFunnelModel"),s_t.forEach(t),osr=r(m$," or "),vz=n(m$,"A",{href:!0});var l_t=s(vz);rsr=r(l_t,"TFFunnelBaseModel"),l_t.forEach(t),tsr=r(m$," (Funnel Transformer model)"),m$.forEach(t),asr=i(D),OT=n(D,"LI",{});var T$e=s(OT);n1e=n(T$e,"STRONG",{});var i_t=s(n1e);nsr=r(i_t,"gpt2"),i_t.forEach(t),ssr=r(T$e," \u2014 "),Fz=n(T$e,"A",{href:!0});var d_t=s(Fz);lsr=r(d_t,"TFGPT2Model"),d_t.forEach(t),isr=r(T$e," (OpenAI GPT-2 model)"),T$e.forEach(t),dsr=i(D),VT=n(D,"LI",{});var M$e=s(VT);s1e=n(M$e,"STRONG",{});var c_t=s(s1e);csr=r(c_t,"gptj"),c_t.forEach(t),fsr=r(M$e," \u2014 "),Tz=n(M$e,"A",{href:!0});var f_t=s(Tz);msr=r(f_t,"TFGPTJModel"),f_t.forEach(t),gsr=r(M$e," (GPT-J model)"),M$e.forEach(t),hsr=i(D),XT=n(D,"LI",{});var E$e=s(XT);l1e=n(E$e,"STRONG",{});var m_t=s(l1e);psr=r(m_t,"hubert"),m_t.forEach(t),usr=r(E$e," \u2014 "),Mz=n(E$e,"A",{href:!0});var g_t=s(Mz);_sr=r(g_t,"TFHubertModel"),g_t.forEach(t),bsr=r(E$e," (Hubert model)"),E$e.forEach(t),vsr=i(D),zT=n(D,"LI",{});var C$e=s(zT);i1e=n(C$e,"STRONG",{});var h_t=s(i1e);Fsr=r(h_t,"layoutlm"),h_t.forEach(t),Tsr=r(C$e," \u2014 "),Ez=n(C$e,"A",{href:!0});var p_t=s(Ez);Msr=r(p_t,"TFLayoutLMModel"),p_t.forEach(t),Esr=r(C$e," (LayoutLM model)"),C$e.forEach(t),Csr=i(D),QT=n(D,"LI",{});var w$e=s(QT);d1e=n(w$e,"STRONG",{});var u_t=s(d1e);wsr=r(u_t,"led"),u_t.forEach(t),Asr=r(w$e," \u2014 "),Cz=n(w$e,"A",{href:!0});var __t=s(Cz);ysr=r(__t,"TFLEDModel"),__t.forEach(t),Lsr=r(w$e," (LED model)"),w$e.forEach(t),xsr=i(D),WT=n(D,"LI",{});var A$e=s(WT);c1e=n(A$e,"STRONG",{});var b_t=s(c1e);$sr=r(b_t,"longformer"),b_t.forEach(t),ksr=r(A$e," \u2014 "),wz=n(A$e,"A",{href:!0});var v_t=s(wz);Ssr=r(v_t,"TFLongformerModel"),v_t.forEach(t),Rsr=r(A$e," (Longformer model)"),A$e.forEach(t),Bsr=i(D),HT=n(D,"LI",{});var y$e=s(HT);f1e=n(y$e,"STRONG",{});var F_t=s(f1e);Psr=r(F_t,"lxmert"),F_t.forEach(t),Isr=r(y$e," \u2014 "),Az=n(y$e,"A",{href:!0});var T_t=s(Az);qsr=r(T_t,"TFLxmertModel"),T_t.forEach(t),Nsr=r(y$e," (LXMERT model)"),y$e.forEach(t),jsr=i(D),UT=n(D,"LI",{});var L$e=s(UT);m1e=n(L$e,"STRONG",{});var M_t=s(m1e);Dsr=r(M_t,"marian"),M_t.forEach(t),Gsr=r(L$e," \u2014 "),yz=n(L$e,"A",{href:!0});var E_t=s(yz);Osr=r(E_t,"TFMarianModel"),E_t.forEach(t),Vsr=r(L$e," (Marian model)"),L$e.forEach(t),Xsr=i(D),JT=n(D,"LI",{});var x$e=s(JT);g1e=n(x$e,"STRONG",{});var C_t=s(g1e);zsr=r(C_t,"mbart"),C_t.forEach(t),Qsr=r(x$e," \u2014 "),Lz=n(x$e,"A",{href:!0});var w_t=s(Lz);Wsr=r(w_t,"TFMBartModel"),w_t.forEach(t),Hsr=r(x$e," (mBART model)"),x$e.forEach(t),Usr=i(D),YT=n(D,"LI",{});var $$e=s(YT);h1e=n($$e,"STRONG",{});var A_t=s(h1e);Jsr=r(A_t,"mobilebert"),A_t.forEach(t),Ysr=r($$e," \u2014 "),xz=n($$e,"A",{href:!0});var y_t=s(xz);Ksr=r(y_t,"TFMobileBertModel"),y_t.forEach(t),Zsr=r($$e," (MobileBERT model)"),$$e.forEach(t),elr=i(D),KT=n(D,"LI",{});var k$e=s(KT);p1e=n(k$e,"STRONG",{});var L_t=s(p1e);olr=r(L_t,"mpnet"),L_t.forEach(t),rlr=r(k$e," \u2014 "),$z=n(k$e,"A",{href:!0});var x_t=s($z);tlr=r(x_t,"TFMPNetModel"),x_t.forEach(t),alr=r(k$e," (MPNet model)"),k$e.forEach(t),nlr=i(D),ZT=n(D,"LI",{});var S$e=s(ZT);u1e=n(S$e,"STRONG",{});var $_t=s(u1e);slr=r($_t,"mt5"),$_t.forEach(t),llr=r(S$e," \u2014 "),kz=n(S$e,"A",{href:!0});var k_t=s(kz);ilr=r(k_t,"TFMT5Model"),k_t.forEach(t),dlr=r(S$e," (mT5 model)"),S$e.forEach(t),clr=i(D),e7=n(D,"LI",{});var R$e=s(e7);_1e=n(R$e,"STRONG",{});var S_t=s(_1e);flr=r(S_t,"openai-gpt"),S_t.forEach(t),mlr=r(R$e," \u2014 "),Sz=n(R$e,"A",{href:!0});var R_t=s(Sz);glr=r(R_t,"TFOpenAIGPTModel"),R_t.forEach(t),hlr=r(R$e," (OpenAI GPT model)"),R$e.forEach(t),plr=i(D),o7=n(D,"LI",{});var B$e=s(o7);b1e=n(B$e,"STRONG",{});var B_t=s(b1e);ulr=r(B_t,"pegasus"),B_t.forEach(t),_lr=r(B$e," \u2014 "),Rz=n(B$e,"A",{href:!0});var P_t=s(Rz);blr=r(P_t,"TFPegasusModel"),P_t.forEach(t),vlr=r(B$e," (Pegasus model)"),B$e.forEach(t),Flr=i(D),r7=n(D,"LI",{});var P$e=s(r7);v1e=n(P$e,"STRONG",{});var I_t=s(v1e);Tlr=r(I_t,"rembert"),I_t.forEach(t),Mlr=r(P$e," \u2014 "),Bz=n(P$e,"A",{href:!0});var q_t=s(Bz);Elr=r(q_t,"TFRemBertModel"),q_t.forEach(t),Clr=r(P$e," (RemBERT model)"),P$e.forEach(t),wlr=i(D),t7=n(D,"LI",{});var I$e=s(t7);F1e=n(I$e,"STRONG",{});var N_t=s(F1e);Alr=r(N_t,"roberta"),N_t.forEach(t),ylr=r(I$e," \u2014 "),Pz=n(I$e,"A",{href:!0});var j_t=s(Pz);Llr=r(j_t,"TFRobertaModel"),j_t.forEach(t),xlr=r(I$e," (RoBERTa model)"),I$e.forEach(t),$lr=i(D),a7=n(D,"LI",{});var q$e=s(a7);T1e=n(q$e,"STRONG",{});var D_t=s(T1e);klr=r(D_t,"roformer"),D_t.forEach(t),Slr=r(q$e," \u2014 "),Iz=n(q$e,"A",{href:!0});var G_t=s(Iz);Rlr=r(G_t,"TFRoFormerModel"),G_t.forEach(t),Blr=r(q$e," (RoFormer model)"),q$e.forEach(t),Plr=i(D),n7=n(D,"LI",{});var N$e=s(n7);M1e=n(N$e,"STRONG",{});var O_t=s(M1e);Ilr=r(O_t,"speech_to_text"),O_t.forEach(t),qlr=r(N$e," \u2014 "),qz=n(N$e,"A",{href:!0});var V_t=s(qz);Nlr=r(V_t,"TFSpeech2TextModel"),V_t.forEach(t),jlr=r(N$e," (Speech2Text model)"),N$e.forEach(t),Dlr=i(D),s7=n(D,"LI",{});var j$e=s(s7);E1e=n(j$e,"STRONG",{});var X_t=s(E1e);Glr=r(X_t,"t5"),X_t.forEach(t),Olr=r(j$e," \u2014 "),Nz=n(j$e,"A",{href:!0});var z_t=s(Nz);Vlr=r(z_t,"TFT5Model"),z_t.forEach(t),Xlr=r(j$e," (T5 model)"),j$e.forEach(t),zlr=i(D),l7=n(D,"LI",{});var D$e=s(l7);C1e=n(D$e,"STRONG",{});var Q_t=s(C1e);Qlr=r(Q_t,"tapas"),Q_t.forEach(t),Wlr=r(D$e," \u2014 "),jz=n(D$e,"A",{href:!0});var W_t=s(jz);Hlr=r(W_t,"TFTapasModel"),W_t.forEach(t),Ulr=r(D$e," (TAPAS model)"),D$e.forEach(t),Jlr=i(D),i7=n(D,"LI",{});var G$e=s(i7);w1e=n(G$e,"STRONG",{});var H_t=s(w1e);Ylr=r(H_t,"transfo-xl"),H_t.forEach(t),Klr=r(G$e," \u2014 "),Dz=n(G$e,"A",{href:!0});var U_t=s(Dz);Zlr=r(U_t,"TFTransfoXLModel"),U_t.forEach(t),eir=r(G$e," (Transformer-XL model)"),G$e.forEach(t),oir=i(D),d7=n(D,"LI",{});var O$e=s(d7);A1e=n(O$e,"STRONG",{});var J_t=s(A1e);rir=r(J_t,"vit"),J_t.forEach(t),tir=r(O$e," \u2014 "),Gz=n(O$e,"A",{href:!0});var Y_t=s(Gz);air=r(Y_t,"TFViTModel"),Y_t.forEach(t),nir=r(O$e," (ViT model)"),O$e.forEach(t),sir=i(D),c7=n(D,"LI",{});var V$e=s(c7);y1e=n(V$e,"STRONG",{});var K_t=s(y1e);lir=r(K_t,"vit_mae"),K_t.forEach(t),iir=r(V$e," \u2014 "),Oz=n(V$e,"A",{href:!0});var Z_t=s(Oz);dir=r(Z_t,"TFViTMAEModel"),Z_t.forEach(t),cir=r(V$e," (ViTMAE model)"),V$e.forEach(t),fir=i(D),f7=n(D,"LI",{});var X$e=s(f7);L1e=n(X$e,"STRONG",{});var e1t=s(L1e);mir=r(e1t,"wav2vec2"),e1t.forEach(t),gir=r(X$e," \u2014 "),Vz=n(X$e,"A",{href:!0});var o1t=s(Vz);hir=r(o1t,"TFWav2Vec2Model"),o1t.forEach(t),pir=r(X$e," (Wav2Vec2 model)"),X$e.forEach(t),uir=i(D),m7=n(D,"LI",{});var z$e=s(m7);x1e=n(z$e,"STRONG",{});var r1t=s(x1e);_ir=r(r1t,"xlm"),r1t.forEach(t),bir=r(z$e," \u2014 "),Xz=n(z$e,"A",{href:!0});var t1t=s(Xz);vir=r(t1t,"TFXLMModel"),t1t.forEach(t),Fir=r(z$e," (XLM model)"),z$e.forEach(t),Tir=i(D),g7=n(D,"LI",{});var Q$e=s(g7);$1e=n(Q$e,"STRONG",{});var a1t=s($1e);Mir=r(a1t,"xlm-roberta"),a1t.forEach(t),Eir=r(Q$e," \u2014 "),zz=n(Q$e,"A",{href:!0});var n1t=s(zz);Cir=r(n1t,"TFXLMRobertaModel"),n1t.forEach(t),wir=r(Q$e," (XLM-RoBERTa model)"),Q$e.forEach(t),Air=i(D),h7=n(D,"LI",{});var W$e=s(h7);k1e=n(W$e,"STRONG",{});var s1t=s(k1e);yir=r(s1t,"xlnet"),s1t.forEach(t),Lir=r(W$e," \u2014 "),Qz=n(W$e,"A",{href:!0});var l1t=s(Qz);xir=r(l1t,"TFXLNetModel"),l1t.forEach(t),$ir=r(W$e," (XLNet model)"),W$e.forEach(t),D.forEach(t),kir=i(cl),T(p7.$$.fragment,cl),cl.forEach(t),dl.forEach(t),QIe=i(f),Dd=n(f,"H2",{class:!0});var KNe=s(Dd);u7=n(KNe,"A",{id:!0,class:!0,href:!0});var i1t=s(u7);S1e=n(i1t,"SPAN",{});var d1t=s(S1e);T(IL.$$.fragment,d1t),d1t.forEach(t),i1t.forEach(t),Sir=i(KNe),R1e=n(KNe,"SPAN",{});var c1t=s(R1e);Rir=r(c1t,"TFAutoModelForPreTraining"),c1t.forEach(t),KNe.forEach(t),WIe=i(f),Ko=n(f,"DIV",{class:!0});var fl=s(Ko);T(qL.$$.fragment,fl),Bir=i(fl),Gd=n(fl,"P",{});var oZ=s(Gd);Pir=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Wz=n(oZ,"A",{href:!0});var f1t=s(Wz);Iir=r(f1t,"from_pretrained()"),f1t.forEach(t),qir=r(oZ," class method or the "),Hz=n(oZ,"A",{href:!0});var m1t=s(Hz);Nir=r(m1t,"from_config()"),m1t.forEach(t),jir=r(oZ,` class
method.`),oZ.forEach(t),Dir=i(fl),NL=n(fl,"P",{});var ZNe=s(NL);Gir=r(ZNe,"This class cannot be instantiated directly using "),B1e=n(ZNe,"CODE",{});var g1t=s(B1e);Oir=r(g1t,"__init__()"),g1t.forEach(t),Vir=r(ZNe," (throws an error)."),ZNe.forEach(t),Xir=i(fl),At=n(fl,"DIV",{class:!0});var JA=s(At);T(jL.$$.fragment,JA),zir=i(JA),P1e=n(JA,"P",{});var h1t=s(P1e);Qir=r(h1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),h1t.forEach(t),Wir=i(JA),Od=n(JA,"P",{});var rZ=s(Od);Hir=r(rZ,`Note:
Loading a model from its configuration file does `),I1e=n(rZ,"STRONG",{});var p1t=s(I1e);Uir=r(p1t,"not"),p1t.forEach(t),Jir=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=n(rZ,"A",{href:!0});var u1t=s(Uz);Yir=r(u1t,"from_pretrained()"),u1t.forEach(t),Kir=r(rZ," to load the model weights."),rZ.forEach(t),Zir=i(JA),T(_7.$$.fragment,JA),JA.forEach(t),edr=i(fl),Ar=n(fl,"DIV",{class:!0});var ml=s(Ar);T(DL.$$.fragment,ml),odr=i(ml),q1e=n(ml,"P",{});var _1t=s(q1e);rdr=r(_1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_1t.forEach(t),tdr=i(ml),Za=n(ml,"P",{});var YA=s(Za);adr=r(YA,"The model class to instantiate is selected based on the "),N1e=n(YA,"CODE",{});var b1t=s(N1e);ndr=r(b1t,"model_type"),b1t.forEach(t),sdr=r(YA,` property of the config object (either
passed as an argument or loaded from `),j1e=n(YA,"CODE",{});var v1t=s(j1e);ldr=r(v1t,"pretrained_model_name_or_path"),v1t.forEach(t),idr=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D1e=n(YA,"CODE",{});var F1t=s(D1e);ddr=r(F1t,"pretrained_model_name_or_path"),F1t.forEach(t),cdr=r(YA,":"),YA.forEach(t),fdr=i(ml),se=n(ml,"UL",{});var le=s(se);b7=n(le,"LI",{});var H$e=s(b7);G1e=n(H$e,"STRONG",{});var T1t=s(G1e);mdr=r(T1t,"albert"),T1t.forEach(t),gdr=r(H$e," \u2014 "),Jz=n(H$e,"A",{href:!0});var M1t=s(Jz);hdr=r(M1t,"TFAlbertForPreTraining"),M1t.forEach(t),pdr=r(H$e," (ALBERT model)"),H$e.forEach(t),udr=i(le),v7=n(le,"LI",{});var U$e=s(v7);O1e=n(U$e,"STRONG",{});var E1t=s(O1e);_dr=r(E1t,"bart"),E1t.forEach(t),bdr=r(U$e," \u2014 "),Yz=n(U$e,"A",{href:!0});var C1t=s(Yz);vdr=r(C1t,"TFBartForConditionalGeneration"),C1t.forEach(t),Fdr=r(U$e," (BART model)"),U$e.forEach(t),Tdr=i(le),F7=n(le,"LI",{});var J$e=s(F7);V1e=n(J$e,"STRONG",{});var w1t=s(V1e);Mdr=r(w1t,"bert"),w1t.forEach(t),Edr=r(J$e," \u2014 "),Kz=n(J$e,"A",{href:!0});var A1t=s(Kz);Cdr=r(A1t,"TFBertForPreTraining"),A1t.forEach(t),wdr=r(J$e," (BERT model)"),J$e.forEach(t),Adr=i(le),T7=n(le,"LI",{});var Y$e=s(T7);X1e=n(Y$e,"STRONG",{});var y1t=s(X1e);ydr=r(y1t,"camembert"),y1t.forEach(t),Ldr=r(Y$e," \u2014 "),Zz=n(Y$e,"A",{href:!0});var L1t=s(Zz);xdr=r(L1t,"TFCamembertForMaskedLM"),L1t.forEach(t),$dr=r(Y$e," (CamemBERT model)"),Y$e.forEach(t),kdr=i(le),M7=n(le,"LI",{});var K$e=s(M7);z1e=n(K$e,"STRONG",{});var x1t=s(z1e);Sdr=r(x1t,"ctrl"),x1t.forEach(t),Rdr=r(K$e," \u2014 "),eQ=n(K$e,"A",{href:!0});var $1t=s(eQ);Bdr=r($1t,"TFCTRLLMHeadModel"),$1t.forEach(t),Pdr=r(K$e," (CTRL model)"),K$e.forEach(t),Idr=i(le),E7=n(le,"LI",{});var Z$e=s(E7);Q1e=n(Z$e,"STRONG",{});var k1t=s(Q1e);qdr=r(k1t,"distilbert"),k1t.forEach(t),Ndr=r(Z$e," \u2014 "),oQ=n(Z$e,"A",{href:!0});var S1t=s(oQ);jdr=r(S1t,"TFDistilBertForMaskedLM"),S1t.forEach(t),Ddr=r(Z$e," (DistilBERT model)"),Z$e.forEach(t),Gdr=i(le),C7=n(le,"LI",{});var eke=s(C7);W1e=n(eke,"STRONG",{});var R1t=s(W1e);Odr=r(R1t,"electra"),R1t.forEach(t),Vdr=r(eke," \u2014 "),rQ=n(eke,"A",{href:!0});var B1t=s(rQ);Xdr=r(B1t,"TFElectraForPreTraining"),B1t.forEach(t),zdr=r(eke," (ELECTRA model)"),eke.forEach(t),Qdr=i(le),w7=n(le,"LI",{});var oke=s(w7);H1e=n(oke,"STRONG",{});var P1t=s(H1e);Wdr=r(P1t,"flaubert"),P1t.forEach(t),Hdr=r(oke," \u2014 "),tQ=n(oke,"A",{href:!0});var I1t=s(tQ);Udr=r(I1t,"TFFlaubertWithLMHeadModel"),I1t.forEach(t),Jdr=r(oke," (FlauBERT model)"),oke.forEach(t),Ydr=i(le),A7=n(le,"LI",{});var rke=s(A7);U1e=n(rke,"STRONG",{});var q1t=s(U1e);Kdr=r(q1t,"funnel"),q1t.forEach(t),Zdr=r(rke," \u2014 "),aQ=n(rke,"A",{href:!0});var N1t=s(aQ);ecr=r(N1t,"TFFunnelForPreTraining"),N1t.forEach(t),ocr=r(rke," (Funnel Transformer model)"),rke.forEach(t),rcr=i(le),y7=n(le,"LI",{});var tke=s(y7);J1e=n(tke,"STRONG",{});var j1t=s(J1e);tcr=r(j1t,"gpt2"),j1t.forEach(t),acr=r(tke," \u2014 "),nQ=n(tke,"A",{href:!0});var D1t=s(nQ);ncr=r(D1t,"TFGPT2LMHeadModel"),D1t.forEach(t),scr=r(tke," (OpenAI GPT-2 model)"),tke.forEach(t),lcr=i(le),L7=n(le,"LI",{});var ake=s(L7);Y1e=n(ake,"STRONG",{});var G1t=s(Y1e);icr=r(G1t,"layoutlm"),G1t.forEach(t),dcr=r(ake," \u2014 "),sQ=n(ake,"A",{href:!0});var O1t=s(sQ);ccr=r(O1t,"TFLayoutLMForMaskedLM"),O1t.forEach(t),fcr=r(ake," (LayoutLM model)"),ake.forEach(t),mcr=i(le),x7=n(le,"LI",{});var nke=s(x7);K1e=n(nke,"STRONG",{});var V1t=s(K1e);gcr=r(V1t,"lxmert"),V1t.forEach(t),hcr=r(nke," \u2014 "),lQ=n(nke,"A",{href:!0});var X1t=s(lQ);pcr=r(X1t,"TFLxmertForPreTraining"),X1t.forEach(t),ucr=r(nke," (LXMERT model)"),nke.forEach(t),_cr=i(le),$7=n(le,"LI",{});var ske=s($7);Z1e=n(ske,"STRONG",{});var z1t=s(Z1e);bcr=r(z1t,"mobilebert"),z1t.forEach(t),vcr=r(ske," \u2014 "),iQ=n(ske,"A",{href:!0});var Q1t=s(iQ);Fcr=r(Q1t,"TFMobileBertForPreTraining"),Q1t.forEach(t),Tcr=r(ske," (MobileBERT model)"),ske.forEach(t),Mcr=i(le),k7=n(le,"LI",{});var lke=s(k7);ebe=n(lke,"STRONG",{});var W1t=s(ebe);Ecr=r(W1t,"mpnet"),W1t.forEach(t),Ccr=r(lke," \u2014 "),dQ=n(lke,"A",{href:!0});var H1t=s(dQ);wcr=r(H1t,"TFMPNetForMaskedLM"),H1t.forEach(t),Acr=r(lke," (MPNet model)"),lke.forEach(t),ycr=i(le),S7=n(le,"LI",{});var ike=s(S7);obe=n(ike,"STRONG",{});var U1t=s(obe);Lcr=r(U1t,"openai-gpt"),U1t.forEach(t),xcr=r(ike," \u2014 "),cQ=n(ike,"A",{href:!0});var J1t=s(cQ);$cr=r(J1t,"TFOpenAIGPTLMHeadModel"),J1t.forEach(t),kcr=r(ike," (OpenAI GPT model)"),ike.forEach(t),Scr=i(le),R7=n(le,"LI",{});var dke=s(R7);rbe=n(dke,"STRONG",{});var Y1t=s(rbe);Rcr=r(Y1t,"roberta"),Y1t.forEach(t),Bcr=r(dke," \u2014 "),fQ=n(dke,"A",{href:!0});var K1t=s(fQ);Pcr=r(K1t,"TFRobertaForMaskedLM"),K1t.forEach(t),Icr=r(dke," (RoBERTa model)"),dke.forEach(t),qcr=i(le),B7=n(le,"LI",{});var cke=s(B7);tbe=n(cke,"STRONG",{});var Z1t=s(tbe);Ncr=r(Z1t,"t5"),Z1t.forEach(t),jcr=r(cke," \u2014 "),mQ=n(cke,"A",{href:!0});var ebt=s(mQ);Dcr=r(ebt,"TFT5ForConditionalGeneration"),ebt.forEach(t),Gcr=r(cke," (T5 model)"),cke.forEach(t),Ocr=i(le),P7=n(le,"LI",{});var fke=s(P7);abe=n(fke,"STRONG",{});var obt=s(abe);Vcr=r(obt,"tapas"),obt.forEach(t),Xcr=r(fke," \u2014 "),gQ=n(fke,"A",{href:!0});var rbt=s(gQ);zcr=r(rbt,"TFTapasForMaskedLM"),rbt.forEach(t),Qcr=r(fke," (TAPAS model)"),fke.forEach(t),Wcr=i(le),I7=n(le,"LI",{});var mke=s(I7);nbe=n(mke,"STRONG",{});var tbt=s(nbe);Hcr=r(tbt,"transfo-xl"),tbt.forEach(t),Ucr=r(mke," \u2014 "),hQ=n(mke,"A",{href:!0});var abt=s(hQ);Jcr=r(abt,"TFTransfoXLLMHeadModel"),abt.forEach(t),Ycr=r(mke," (Transformer-XL model)"),mke.forEach(t),Kcr=i(le),q7=n(le,"LI",{});var gke=s(q7);sbe=n(gke,"STRONG",{});var nbt=s(sbe);Zcr=r(nbt,"vit_mae"),nbt.forEach(t),efr=r(gke," \u2014 "),pQ=n(gke,"A",{href:!0});var sbt=s(pQ);ofr=r(sbt,"TFViTMAEForPreTraining"),sbt.forEach(t),rfr=r(gke," (ViTMAE model)"),gke.forEach(t),tfr=i(le),N7=n(le,"LI",{});var hke=s(N7);lbe=n(hke,"STRONG",{});var lbt=s(lbe);afr=r(lbt,"xlm"),lbt.forEach(t),nfr=r(hke," \u2014 "),uQ=n(hke,"A",{href:!0});var ibt=s(uQ);sfr=r(ibt,"TFXLMWithLMHeadModel"),ibt.forEach(t),lfr=r(hke," (XLM model)"),hke.forEach(t),ifr=i(le),j7=n(le,"LI",{});var pke=s(j7);ibe=n(pke,"STRONG",{});var dbt=s(ibe);dfr=r(dbt,"xlm-roberta"),dbt.forEach(t),cfr=r(pke," \u2014 "),_Q=n(pke,"A",{href:!0});var cbt=s(_Q);ffr=r(cbt,"TFXLMRobertaForMaskedLM"),cbt.forEach(t),mfr=r(pke," (XLM-RoBERTa model)"),pke.forEach(t),gfr=i(le),D7=n(le,"LI",{});var uke=s(D7);dbe=n(uke,"STRONG",{});var fbt=s(dbe);hfr=r(fbt,"xlnet"),fbt.forEach(t),pfr=r(uke," \u2014 "),bQ=n(uke,"A",{href:!0});var mbt=s(bQ);ufr=r(mbt,"TFXLNetLMHeadModel"),mbt.forEach(t),_fr=r(uke," (XLNet model)"),uke.forEach(t),le.forEach(t),bfr=i(ml),T(G7.$$.fragment,ml),ml.forEach(t),fl.forEach(t),HIe=i(f),Vd=n(f,"H2",{class:!0});var eje=s(Vd);O7=n(eje,"A",{id:!0,class:!0,href:!0});var gbt=s(O7);cbe=n(gbt,"SPAN",{});var hbt=s(cbe);T(GL.$$.fragment,hbt),hbt.forEach(t),gbt.forEach(t),vfr=i(eje),fbe=n(eje,"SPAN",{});var pbt=s(fbe);Ffr=r(pbt,"TFAutoModelForCausalLM"),pbt.forEach(t),eje.forEach(t),UIe=i(f),Zo=n(f,"DIV",{class:!0});var gl=s(Zo);T(OL.$$.fragment,gl),Tfr=i(gl),Xd=n(gl,"P",{});var tZ=s(Xd);Mfr=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vQ=n(tZ,"A",{href:!0});var ubt=s(vQ);Efr=r(ubt,"from_pretrained()"),ubt.forEach(t),Cfr=r(tZ," class method or the "),FQ=n(tZ,"A",{href:!0});var _bt=s(FQ);wfr=r(_bt,"from_config()"),_bt.forEach(t),Afr=r(tZ,` class
method.`),tZ.forEach(t),yfr=i(gl),VL=n(gl,"P",{});var oje=s(VL);Lfr=r(oje,"This class cannot be instantiated directly using "),mbe=n(oje,"CODE",{});var bbt=s(mbe);xfr=r(bbt,"__init__()"),bbt.forEach(t),$fr=r(oje," (throws an error)."),oje.forEach(t),kfr=i(gl),yt=n(gl,"DIV",{class:!0});var KA=s(yt);T(XL.$$.fragment,KA),Sfr=i(KA),gbe=n(KA,"P",{});var vbt=s(gbe);Rfr=r(vbt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vbt.forEach(t),Bfr=i(KA),zd=n(KA,"P",{});var aZ=s(zd);Pfr=r(aZ,`Note:
Loading a model from its configuration file does `),hbe=n(aZ,"STRONG",{});var Fbt=s(hbe);Ifr=r(Fbt,"not"),Fbt.forEach(t),qfr=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=n(aZ,"A",{href:!0});var Tbt=s(TQ);Nfr=r(Tbt,"from_pretrained()"),Tbt.forEach(t),jfr=r(aZ," to load the model weights."),aZ.forEach(t),Dfr=i(KA),T(V7.$$.fragment,KA),KA.forEach(t),Gfr=i(gl),yr=n(gl,"DIV",{class:!0});var hl=s(yr);T(zL.$$.fragment,hl),Ofr=i(hl),pbe=n(hl,"P",{});var Mbt=s(pbe);Vfr=r(Mbt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Mbt.forEach(t),Xfr=i(hl),en=n(hl,"P",{});var ZA=s(en);zfr=r(ZA,"The model class to instantiate is selected based on the "),ube=n(ZA,"CODE",{});var Ebt=s(ube);Qfr=r(Ebt,"model_type"),Ebt.forEach(t),Wfr=r(ZA,` property of the config object (either
passed as an argument or loaded from `),_be=n(ZA,"CODE",{});var Cbt=s(_be);Hfr=r(Cbt,"pretrained_model_name_or_path"),Cbt.forEach(t),Ufr=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bbe=n(ZA,"CODE",{});var wbt=s(bbe);Jfr=r(wbt,"pretrained_model_name_or_path"),wbt.forEach(t),Yfr=r(ZA,":"),ZA.forEach(t),Kfr=i(hl),Te=n(hl,"UL",{});var Ce=s(Te);X7=n(Ce,"LI",{});var _ke=s(X7);vbe=n(_ke,"STRONG",{});var Abt=s(vbe);Zfr=r(Abt,"bert"),Abt.forEach(t),emr=r(_ke," \u2014 "),MQ=n(_ke,"A",{href:!0});var ybt=s(MQ);omr=r(ybt,"TFBertLMHeadModel"),ybt.forEach(t),rmr=r(_ke," (BERT model)"),_ke.forEach(t),tmr=i(Ce),z7=n(Ce,"LI",{});var bke=s(z7);Fbe=n(bke,"STRONG",{});var Lbt=s(Fbe);amr=r(Lbt,"camembert"),Lbt.forEach(t),nmr=r(bke," \u2014 "),EQ=n(bke,"A",{href:!0});var xbt=s(EQ);smr=r(xbt,"TFCamembertForCausalLM"),xbt.forEach(t),lmr=r(bke," (CamemBERT model)"),bke.forEach(t),imr=i(Ce),Q7=n(Ce,"LI",{});var vke=s(Q7);Tbe=n(vke,"STRONG",{});var $bt=s(Tbe);dmr=r($bt,"ctrl"),$bt.forEach(t),cmr=r(vke," \u2014 "),CQ=n(vke,"A",{href:!0});var kbt=s(CQ);fmr=r(kbt,"TFCTRLLMHeadModel"),kbt.forEach(t),mmr=r(vke," (CTRL model)"),vke.forEach(t),gmr=i(Ce),W7=n(Ce,"LI",{});var Fke=s(W7);Mbe=n(Fke,"STRONG",{});var Sbt=s(Mbe);hmr=r(Sbt,"gpt2"),Sbt.forEach(t),pmr=r(Fke," \u2014 "),wQ=n(Fke,"A",{href:!0});var Rbt=s(wQ);umr=r(Rbt,"TFGPT2LMHeadModel"),Rbt.forEach(t),_mr=r(Fke," (OpenAI GPT-2 model)"),Fke.forEach(t),bmr=i(Ce),H7=n(Ce,"LI",{});var Tke=s(H7);Ebe=n(Tke,"STRONG",{});var Bbt=s(Ebe);vmr=r(Bbt,"gptj"),Bbt.forEach(t),Fmr=r(Tke," \u2014 "),AQ=n(Tke,"A",{href:!0});var Pbt=s(AQ);Tmr=r(Pbt,"TFGPTJForCausalLM"),Pbt.forEach(t),Mmr=r(Tke," (GPT-J model)"),Tke.forEach(t),Emr=i(Ce),U7=n(Ce,"LI",{});var Mke=s(U7);Cbe=n(Mke,"STRONG",{});var Ibt=s(Cbe);Cmr=r(Ibt,"openai-gpt"),Ibt.forEach(t),wmr=r(Mke," \u2014 "),yQ=n(Mke,"A",{href:!0});var qbt=s(yQ);Amr=r(qbt,"TFOpenAIGPTLMHeadModel"),qbt.forEach(t),ymr=r(Mke," (OpenAI GPT model)"),Mke.forEach(t),Lmr=i(Ce),J7=n(Ce,"LI",{});var Eke=s(J7);wbe=n(Eke,"STRONG",{});var Nbt=s(wbe);xmr=r(Nbt,"rembert"),Nbt.forEach(t),$mr=r(Eke," \u2014 "),LQ=n(Eke,"A",{href:!0});var jbt=s(LQ);kmr=r(jbt,"TFRemBertForCausalLM"),jbt.forEach(t),Smr=r(Eke," (RemBERT model)"),Eke.forEach(t),Rmr=i(Ce),Y7=n(Ce,"LI",{});var Cke=s(Y7);Abe=n(Cke,"STRONG",{});var Dbt=s(Abe);Bmr=r(Dbt,"roberta"),Dbt.forEach(t),Pmr=r(Cke," \u2014 "),xQ=n(Cke,"A",{href:!0});var Gbt=s(xQ);Imr=r(Gbt,"TFRobertaForCausalLM"),Gbt.forEach(t),qmr=r(Cke," (RoBERTa model)"),Cke.forEach(t),Nmr=i(Ce),K7=n(Ce,"LI",{});var wke=s(K7);ybe=n(wke,"STRONG",{});var Obt=s(ybe);jmr=r(Obt,"roformer"),Obt.forEach(t),Dmr=r(wke," \u2014 "),$Q=n(wke,"A",{href:!0});var Vbt=s($Q);Gmr=r(Vbt,"TFRoFormerForCausalLM"),Vbt.forEach(t),Omr=r(wke," (RoFormer model)"),wke.forEach(t),Vmr=i(Ce),Z7=n(Ce,"LI",{});var Ake=s(Z7);Lbe=n(Ake,"STRONG",{});var Xbt=s(Lbe);Xmr=r(Xbt,"transfo-xl"),Xbt.forEach(t),zmr=r(Ake," \u2014 "),kQ=n(Ake,"A",{href:!0});var zbt=s(kQ);Qmr=r(zbt,"TFTransfoXLLMHeadModel"),zbt.forEach(t),Wmr=r(Ake," (Transformer-XL model)"),Ake.forEach(t),Hmr=i(Ce),eM=n(Ce,"LI",{});var yke=s(eM);xbe=n(yke,"STRONG",{});var Qbt=s(xbe);Umr=r(Qbt,"xlm"),Qbt.forEach(t),Jmr=r(yke," \u2014 "),SQ=n(yke,"A",{href:!0});var Wbt=s(SQ);Ymr=r(Wbt,"TFXLMWithLMHeadModel"),Wbt.forEach(t),Kmr=r(yke," (XLM model)"),yke.forEach(t),Zmr=i(Ce),oM=n(Ce,"LI",{});var Lke=s(oM);$be=n(Lke,"STRONG",{});var Hbt=s($be);egr=r(Hbt,"xlnet"),Hbt.forEach(t),ogr=r(Lke," \u2014 "),RQ=n(Lke,"A",{href:!0});var Ubt=s(RQ);rgr=r(Ubt,"TFXLNetLMHeadModel"),Ubt.forEach(t),tgr=r(Lke," (XLNet model)"),Lke.forEach(t),Ce.forEach(t),agr=i(hl),T(rM.$$.fragment,hl),hl.forEach(t),gl.forEach(t),JIe=i(f),Qd=n(f,"H2",{class:!0});var rje=s(Qd);tM=n(rje,"A",{id:!0,class:!0,href:!0});var Jbt=s(tM);kbe=n(Jbt,"SPAN",{});var Ybt=s(kbe);T(QL.$$.fragment,Ybt),Ybt.forEach(t),Jbt.forEach(t),ngr=i(rje),Sbe=n(rje,"SPAN",{});var Kbt=s(Sbe);sgr=r(Kbt,"TFAutoModelForImageClassification"),Kbt.forEach(t),rje.forEach(t),YIe=i(f),er=n(f,"DIV",{class:!0});var pl=s(er);T(WL.$$.fragment,pl),lgr=i(pl),Wd=n(pl,"P",{});var nZ=s(Wd);igr=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BQ=n(nZ,"A",{href:!0});var Zbt=s(BQ);dgr=r(Zbt,"from_pretrained()"),Zbt.forEach(t),cgr=r(nZ," class method or the "),PQ=n(nZ,"A",{href:!0});var e2t=s(PQ);fgr=r(e2t,"from_config()"),e2t.forEach(t),mgr=r(nZ,` class
method.`),nZ.forEach(t),ggr=i(pl),HL=n(pl,"P",{});var tje=s(HL);hgr=r(tje,"This class cannot be instantiated directly using "),Rbe=n(tje,"CODE",{});var o2t=s(Rbe);pgr=r(o2t,"__init__()"),o2t.forEach(t),ugr=r(tje," (throws an error)."),tje.forEach(t),_gr=i(pl),Lt=n(pl,"DIV",{class:!0});var e6=s(Lt);T(UL.$$.fragment,e6),bgr=i(e6),Bbe=n(e6,"P",{});var r2t=s(Bbe);vgr=r(r2t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),r2t.forEach(t),Fgr=i(e6),Hd=n(e6,"P",{});var sZ=s(Hd);Tgr=r(sZ,`Note:
Loading a model from its configuration file does `),Pbe=n(sZ,"STRONG",{});var t2t=s(Pbe);Mgr=r(t2t,"not"),t2t.forEach(t),Egr=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=n(sZ,"A",{href:!0});var a2t=s(IQ);Cgr=r(a2t,"from_pretrained()"),a2t.forEach(t),wgr=r(sZ," to load the model weights."),sZ.forEach(t),Agr=i(e6),T(aM.$$.fragment,e6),e6.forEach(t),ygr=i(pl),Lr=n(pl,"DIV",{class:!0});var ul=s(Lr);T(JL.$$.fragment,ul),Lgr=i(ul),Ibe=n(ul,"P",{});var n2t=s(Ibe);xgr=r(n2t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),n2t.forEach(t),$gr=i(ul),on=n(ul,"P",{});var o6=s(on);kgr=r(o6,"The model class to instantiate is selected based on the "),qbe=n(o6,"CODE",{});var s2t=s(qbe);Sgr=r(s2t,"model_type"),s2t.forEach(t),Rgr=r(o6,` property of the config object (either
passed as an argument or loaded from `),Nbe=n(o6,"CODE",{});var l2t=s(Nbe);Bgr=r(l2t,"pretrained_model_name_or_path"),l2t.forEach(t),Pgr=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=n(o6,"CODE",{});var i2t=s(jbe);Igr=r(i2t,"pretrained_model_name_or_path"),i2t.forEach(t),qgr=r(o6,":"),o6.forEach(t),Ngr=i(ul),Ud=n(ul,"UL",{});var lZ=s(Ud);nM=n(lZ,"LI",{});var xke=s(nM);Dbe=n(xke,"STRONG",{});var d2t=s(Dbe);jgr=r(d2t,"convnext"),d2t.forEach(t),Dgr=r(xke," \u2014 "),qQ=n(xke,"A",{href:!0});var c2t=s(qQ);Ggr=r(c2t,"TFConvNextForImageClassification"),c2t.forEach(t),Ogr=r(xke," (ConvNext model)"),xke.forEach(t),Vgr=i(lZ),sM=n(lZ,"LI",{});var $ke=s(sM);Gbe=n($ke,"STRONG",{});var f2t=s(Gbe);Xgr=r(f2t,"data2vec-vision"),f2t.forEach(t),zgr=r($ke," \u2014 "),NQ=n($ke,"A",{href:!0});var m2t=s(NQ);Qgr=r(m2t,"TFData2VecVisionForImageClassification"),m2t.forEach(t),Wgr=r($ke," (Data2VecVision model)"),$ke.forEach(t),Hgr=i(lZ),lM=n(lZ,"LI",{});var kke=s(lM);Obe=n(kke,"STRONG",{});var g2t=s(Obe);Ugr=r(g2t,"vit"),g2t.forEach(t),Jgr=r(kke," \u2014 "),jQ=n(kke,"A",{href:!0});var h2t=s(jQ);Ygr=r(h2t,"TFViTForImageClassification"),h2t.forEach(t),Kgr=r(kke," (ViT model)"),kke.forEach(t),lZ.forEach(t),Zgr=i(ul),T(iM.$$.fragment,ul),ul.forEach(t),pl.forEach(t),KIe=i(f),Jd=n(f,"H2",{class:!0});var aje=s(Jd);dM=n(aje,"A",{id:!0,class:!0,href:!0});var p2t=s(dM);Vbe=n(p2t,"SPAN",{});var u2t=s(Vbe);T(YL.$$.fragment,u2t),u2t.forEach(t),p2t.forEach(t),ehr=i(aje),Xbe=n(aje,"SPAN",{});var _2t=s(Xbe);ohr=r(_2t,"TFAutoModelForMaskedLM"),_2t.forEach(t),aje.forEach(t),ZIe=i(f),or=n(f,"DIV",{class:!0});var _l=s(or);T(KL.$$.fragment,_l),rhr=i(_l),Yd=n(_l,"P",{});var iZ=s(Yd);thr=r(iZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),DQ=n(iZ,"A",{href:!0});var b2t=s(DQ);ahr=r(b2t,"from_pretrained()"),b2t.forEach(t),nhr=r(iZ," class method or the "),GQ=n(iZ,"A",{href:!0});var v2t=s(GQ);shr=r(v2t,"from_config()"),v2t.forEach(t),lhr=r(iZ,` class
method.`),iZ.forEach(t),ihr=i(_l),ZL=n(_l,"P",{});var nje=s(ZL);dhr=r(nje,"This class cannot be instantiated directly using "),zbe=n(nje,"CODE",{});var F2t=s(zbe);chr=r(F2t,"__init__()"),F2t.forEach(t),fhr=r(nje," (throws an error)."),nje.forEach(t),mhr=i(_l),xt=n(_l,"DIV",{class:!0});var r6=s(xt);T(e8.$$.fragment,r6),ghr=i(r6),Qbe=n(r6,"P",{});var T2t=s(Qbe);hhr=r(T2t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),T2t.forEach(t),phr=i(r6),Kd=n(r6,"P",{});var dZ=s(Kd);uhr=r(dZ,`Note:
Loading a model from its configuration file does `),Wbe=n(dZ,"STRONG",{});var M2t=s(Wbe);_hr=r(M2t,"not"),M2t.forEach(t),bhr=r(dZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=n(dZ,"A",{href:!0});var E2t=s(OQ);vhr=r(E2t,"from_pretrained()"),E2t.forEach(t),Fhr=r(dZ," to load the model weights."),dZ.forEach(t),Thr=i(r6),T(cM.$$.fragment,r6),r6.forEach(t),Mhr=i(_l),xr=n(_l,"DIV",{class:!0});var bl=s(xr);T(o8.$$.fragment,bl),Ehr=i(bl),Hbe=n(bl,"P",{});var C2t=s(Hbe);Chr=r(C2t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),C2t.forEach(t),whr=i(bl),rn=n(bl,"P",{});var t6=s(rn);Ahr=r(t6,"The model class to instantiate is selected based on the "),Ube=n(t6,"CODE",{});var w2t=s(Ube);yhr=r(w2t,"model_type"),w2t.forEach(t),Lhr=r(t6,` property of the config object (either
passed as an argument or loaded from `),Jbe=n(t6,"CODE",{});var A2t=s(Jbe);xhr=r(A2t,"pretrained_model_name_or_path"),A2t.forEach(t),$hr=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ybe=n(t6,"CODE",{});var y2t=s(Ybe);khr=r(y2t,"pretrained_model_name_or_path"),y2t.forEach(t),Shr=r(t6,":"),t6.forEach(t),Rhr=i(bl),ie=n(bl,"UL",{});var fe=s(ie);fM=n(fe,"LI",{});var Ske=s(fM);Kbe=n(Ske,"STRONG",{});var L2t=s(Kbe);Bhr=r(L2t,"albert"),L2t.forEach(t),Phr=r(Ske," \u2014 "),VQ=n(Ske,"A",{href:!0});var x2t=s(VQ);Ihr=r(x2t,"TFAlbertForMaskedLM"),x2t.forEach(t),qhr=r(Ske," (ALBERT model)"),Ske.forEach(t),Nhr=i(fe),mM=n(fe,"LI",{});var Rke=s(mM);Zbe=n(Rke,"STRONG",{});var $2t=s(Zbe);jhr=r($2t,"bert"),$2t.forEach(t),Dhr=r(Rke," \u2014 "),XQ=n(Rke,"A",{href:!0});var k2t=s(XQ);Ghr=r(k2t,"TFBertForMaskedLM"),k2t.forEach(t),Ohr=r(Rke," (BERT model)"),Rke.forEach(t),Vhr=i(fe),gM=n(fe,"LI",{});var Bke=s(gM);e2e=n(Bke,"STRONG",{});var S2t=s(e2e);Xhr=r(S2t,"camembert"),S2t.forEach(t),zhr=r(Bke," \u2014 "),zQ=n(Bke,"A",{href:!0});var R2t=s(zQ);Qhr=r(R2t,"TFCamembertForMaskedLM"),R2t.forEach(t),Whr=r(Bke," (CamemBERT model)"),Bke.forEach(t),Hhr=i(fe),hM=n(fe,"LI",{});var Pke=s(hM);o2e=n(Pke,"STRONG",{});var B2t=s(o2e);Uhr=r(B2t,"convbert"),B2t.forEach(t),Jhr=r(Pke," \u2014 "),QQ=n(Pke,"A",{href:!0});var P2t=s(QQ);Yhr=r(P2t,"TFConvBertForMaskedLM"),P2t.forEach(t),Khr=r(Pke," (ConvBERT model)"),Pke.forEach(t),Zhr=i(fe),pM=n(fe,"LI",{});var Ike=s(pM);r2e=n(Ike,"STRONG",{});var I2t=s(r2e);epr=r(I2t,"deberta"),I2t.forEach(t),opr=r(Ike," \u2014 "),WQ=n(Ike,"A",{href:!0});var q2t=s(WQ);rpr=r(q2t,"TFDebertaForMaskedLM"),q2t.forEach(t),tpr=r(Ike," (DeBERTa model)"),Ike.forEach(t),apr=i(fe),uM=n(fe,"LI",{});var qke=s(uM);t2e=n(qke,"STRONG",{});var N2t=s(t2e);npr=r(N2t,"deberta-v2"),N2t.forEach(t),spr=r(qke," \u2014 "),HQ=n(qke,"A",{href:!0});var j2t=s(HQ);lpr=r(j2t,"TFDebertaV2ForMaskedLM"),j2t.forEach(t),ipr=r(qke," (DeBERTa-v2 model)"),qke.forEach(t),dpr=i(fe),_M=n(fe,"LI",{});var Nke=s(_M);a2e=n(Nke,"STRONG",{});var D2t=s(a2e);cpr=r(D2t,"distilbert"),D2t.forEach(t),fpr=r(Nke," \u2014 "),UQ=n(Nke,"A",{href:!0});var G2t=s(UQ);mpr=r(G2t,"TFDistilBertForMaskedLM"),G2t.forEach(t),gpr=r(Nke," (DistilBERT model)"),Nke.forEach(t),hpr=i(fe),bM=n(fe,"LI",{});var jke=s(bM);n2e=n(jke,"STRONG",{});var O2t=s(n2e);ppr=r(O2t,"electra"),O2t.forEach(t),upr=r(jke," \u2014 "),JQ=n(jke,"A",{href:!0});var V2t=s(JQ);_pr=r(V2t,"TFElectraForMaskedLM"),V2t.forEach(t),bpr=r(jke," (ELECTRA model)"),jke.forEach(t),vpr=i(fe),vM=n(fe,"LI",{});var Dke=s(vM);s2e=n(Dke,"STRONG",{});var X2t=s(s2e);Fpr=r(X2t,"flaubert"),X2t.forEach(t),Tpr=r(Dke," \u2014 "),YQ=n(Dke,"A",{href:!0});var z2t=s(YQ);Mpr=r(z2t,"TFFlaubertWithLMHeadModel"),z2t.forEach(t),Epr=r(Dke," (FlauBERT model)"),Dke.forEach(t),Cpr=i(fe),FM=n(fe,"LI",{});var Gke=s(FM);l2e=n(Gke,"STRONG",{});var Q2t=s(l2e);wpr=r(Q2t,"funnel"),Q2t.forEach(t),Apr=r(Gke," \u2014 "),KQ=n(Gke,"A",{href:!0});var W2t=s(KQ);ypr=r(W2t,"TFFunnelForMaskedLM"),W2t.forEach(t),Lpr=r(Gke," (Funnel Transformer model)"),Gke.forEach(t),xpr=i(fe),TM=n(fe,"LI",{});var Oke=s(TM);i2e=n(Oke,"STRONG",{});var H2t=s(i2e);$pr=r(H2t,"layoutlm"),H2t.forEach(t),kpr=r(Oke," \u2014 "),ZQ=n(Oke,"A",{href:!0});var U2t=s(ZQ);Spr=r(U2t,"TFLayoutLMForMaskedLM"),U2t.forEach(t),Rpr=r(Oke," (LayoutLM model)"),Oke.forEach(t),Bpr=i(fe),MM=n(fe,"LI",{});var Vke=s(MM);d2e=n(Vke,"STRONG",{});var J2t=s(d2e);Ppr=r(J2t,"longformer"),J2t.forEach(t),Ipr=r(Vke," \u2014 "),eW=n(Vke,"A",{href:!0});var Y2t=s(eW);qpr=r(Y2t,"TFLongformerForMaskedLM"),Y2t.forEach(t),Npr=r(Vke," (Longformer model)"),Vke.forEach(t),jpr=i(fe),EM=n(fe,"LI",{});var Xke=s(EM);c2e=n(Xke,"STRONG",{});var K2t=s(c2e);Dpr=r(K2t,"mobilebert"),K2t.forEach(t),Gpr=r(Xke," \u2014 "),oW=n(Xke,"A",{href:!0});var Z2t=s(oW);Opr=r(Z2t,"TFMobileBertForMaskedLM"),Z2t.forEach(t),Vpr=r(Xke," (MobileBERT model)"),Xke.forEach(t),Xpr=i(fe),CM=n(fe,"LI",{});var zke=s(CM);f2e=n(zke,"STRONG",{});var e3t=s(f2e);zpr=r(e3t,"mpnet"),e3t.forEach(t),Qpr=r(zke," \u2014 "),rW=n(zke,"A",{href:!0});var o3t=s(rW);Wpr=r(o3t,"TFMPNetForMaskedLM"),o3t.forEach(t),Hpr=r(zke," (MPNet model)"),zke.forEach(t),Upr=i(fe),wM=n(fe,"LI",{});var Qke=s(wM);m2e=n(Qke,"STRONG",{});var r3t=s(m2e);Jpr=r(r3t,"rembert"),r3t.forEach(t),Ypr=r(Qke," \u2014 "),tW=n(Qke,"A",{href:!0});var t3t=s(tW);Kpr=r(t3t,"TFRemBertForMaskedLM"),t3t.forEach(t),Zpr=r(Qke," (RemBERT model)"),Qke.forEach(t),eur=i(fe),AM=n(fe,"LI",{});var Wke=s(AM);g2e=n(Wke,"STRONG",{});var a3t=s(g2e);our=r(a3t,"roberta"),a3t.forEach(t),rur=r(Wke," \u2014 "),aW=n(Wke,"A",{href:!0});var n3t=s(aW);tur=r(n3t,"TFRobertaForMaskedLM"),n3t.forEach(t),aur=r(Wke," (RoBERTa model)"),Wke.forEach(t),nur=i(fe),yM=n(fe,"LI",{});var Hke=s(yM);h2e=n(Hke,"STRONG",{});var s3t=s(h2e);sur=r(s3t,"roformer"),s3t.forEach(t),lur=r(Hke," \u2014 "),nW=n(Hke,"A",{href:!0});var l3t=s(nW);iur=r(l3t,"TFRoFormerForMaskedLM"),l3t.forEach(t),dur=r(Hke," (RoFormer model)"),Hke.forEach(t),cur=i(fe),LM=n(fe,"LI",{});var Uke=s(LM);p2e=n(Uke,"STRONG",{});var i3t=s(p2e);fur=r(i3t,"tapas"),i3t.forEach(t),mur=r(Uke," \u2014 "),sW=n(Uke,"A",{href:!0});var d3t=s(sW);gur=r(d3t,"TFTapasForMaskedLM"),d3t.forEach(t),hur=r(Uke," (TAPAS model)"),Uke.forEach(t),pur=i(fe),xM=n(fe,"LI",{});var Jke=s(xM);u2e=n(Jke,"STRONG",{});var c3t=s(u2e);uur=r(c3t,"xlm"),c3t.forEach(t),_ur=r(Jke," \u2014 "),lW=n(Jke,"A",{href:!0});var f3t=s(lW);bur=r(f3t,"TFXLMWithLMHeadModel"),f3t.forEach(t),vur=r(Jke," (XLM model)"),Jke.forEach(t),Fur=i(fe),$M=n(fe,"LI",{});var Yke=s($M);_2e=n(Yke,"STRONG",{});var m3t=s(_2e);Tur=r(m3t,"xlm-roberta"),m3t.forEach(t),Mur=r(Yke," \u2014 "),iW=n(Yke,"A",{href:!0});var g3t=s(iW);Eur=r(g3t,"TFXLMRobertaForMaskedLM"),g3t.forEach(t),Cur=r(Yke," (XLM-RoBERTa model)"),Yke.forEach(t),fe.forEach(t),wur=i(bl),T(kM.$$.fragment,bl),bl.forEach(t),_l.forEach(t),eqe=i(f),Zd=n(f,"H2",{class:!0});var sje=s(Zd);SM=n(sje,"A",{id:!0,class:!0,href:!0});var h3t=s(SM);b2e=n(h3t,"SPAN",{});var p3t=s(b2e);T(r8.$$.fragment,p3t),p3t.forEach(t),h3t.forEach(t),Aur=i(sje),v2e=n(sje,"SPAN",{});var u3t=s(v2e);yur=r(u3t,"TFAutoModelForSeq2SeqLM"),u3t.forEach(t),sje.forEach(t),oqe=i(f),rr=n(f,"DIV",{class:!0});var vl=s(rr);T(t8.$$.fragment,vl),Lur=i(vl),ec=n(vl,"P",{});var cZ=s(ec);xur=r(cZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dW=n(cZ,"A",{href:!0});var _3t=s(dW);$ur=r(_3t,"from_pretrained()"),_3t.forEach(t),kur=r(cZ," class method or the "),cW=n(cZ,"A",{href:!0});var b3t=s(cW);Sur=r(b3t,"from_config()"),b3t.forEach(t),Rur=r(cZ,` class
method.`),cZ.forEach(t),Bur=i(vl),a8=n(vl,"P",{});var lje=s(a8);Pur=r(lje,"This class cannot be instantiated directly using "),F2e=n(lje,"CODE",{});var v3t=s(F2e);Iur=r(v3t,"__init__()"),v3t.forEach(t),qur=r(lje," (throws an error)."),lje.forEach(t),Nur=i(vl),$t=n(vl,"DIV",{class:!0});var a6=s($t);T(n8.$$.fragment,a6),jur=i(a6),T2e=n(a6,"P",{});var F3t=s(T2e);Dur=r(F3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),F3t.forEach(t),Gur=i(a6),oc=n(a6,"P",{});var fZ=s(oc);Our=r(fZ,`Note:
Loading a model from its configuration file does `),M2e=n(fZ,"STRONG",{});var T3t=s(M2e);Vur=r(T3t,"not"),T3t.forEach(t),Xur=r(fZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=n(fZ,"A",{href:!0});var M3t=s(fW);zur=r(M3t,"from_pretrained()"),M3t.forEach(t),Qur=r(fZ," to load the model weights."),fZ.forEach(t),Wur=i(a6),T(RM.$$.fragment,a6),a6.forEach(t),Hur=i(vl),$r=n(vl,"DIV",{class:!0});var Fl=s($r);T(s8.$$.fragment,Fl),Uur=i(Fl),E2e=n(Fl,"P",{});var E3t=s(E2e);Jur=r(E3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),E3t.forEach(t),Yur=i(Fl),tn=n(Fl,"P",{});var n6=s(tn);Kur=r(n6,"The model class to instantiate is selected based on the "),C2e=n(n6,"CODE",{});var C3t=s(C2e);Zur=r(C3t,"model_type"),C3t.forEach(t),e_r=r(n6,` property of the config object (either
passed as an argument or loaded from `),w2e=n(n6,"CODE",{});var w3t=s(w2e);o_r=r(w3t,"pretrained_model_name_or_path"),w3t.forEach(t),r_r=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=n(n6,"CODE",{});var A3t=s(A2e);t_r=r(A3t,"pretrained_model_name_or_path"),A3t.forEach(t),a_r=r(n6,":"),n6.forEach(t),n_r=i(Fl),ye=n(Fl,"UL",{});var Re=s(ye);BM=n(Re,"LI",{});var Kke=s(BM);y2e=n(Kke,"STRONG",{});var y3t=s(y2e);s_r=r(y3t,"bart"),y3t.forEach(t),l_r=r(Kke," \u2014 "),mW=n(Kke,"A",{href:!0});var L3t=s(mW);i_r=r(L3t,"TFBartForConditionalGeneration"),L3t.forEach(t),d_r=r(Kke," (BART model)"),Kke.forEach(t),c_r=i(Re),PM=n(Re,"LI",{});var Zke=s(PM);L2e=n(Zke,"STRONG",{});var x3t=s(L2e);f_r=r(x3t,"blenderbot"),x3t.forEach(t),m_r=r(Zke," \u2014 "),gW=n(Zke,"A",{href:!0});var $3t=s(gW);g_r=r($3t,"TFBlenderbotForConditionalGeneration"),$3t.forEach(t),h_r=r(Zke," (Blenderbot model)"),Zke.forEach(t),p_r=i(Re),IM=n(Re,"LI",{});var eSe=s(IM);x2e=n(eSe,"STRONG",{});var k3t=s(x2e);u_r=r(k3t,"blenderbot-small"),k3t.forEach(t),__r=r(eSe," \u2014 "),hW=n(eSe,"A",{href:!0});var S3t=s(hW);b_r=r(S3t,"TFBlenderbotSmallForConditionalGeneration"),S3t.forEach(t),v_r=r(eSe," (BlenderbotSmall model)"),eSe.forEach(t),F_r=i(Re),qM=n(Re,"LI",{});var oSe=s(qM);$2e=n(oSe,"STRONG",{});var R3t=s($2e);T_r=r(R3t,"encoder-decoder"),R3t.forEach(t),M_r=r(oSe," \u2014 "),pW=n(oSe,"A",{href:!0});var B3t=s(pW);E_r=r(B3t,"TFEncoderDecoderModel"),B3t.forEach(t),C_r=r(oSe," (Encoder decoder model)"),oSe.forEach(t),w_r=i(Re),NM=n(Re,"LI",{});var rSe=s(NM);k2e=n(rSe,"STRONG",{});var P3t=s(k2e);A_r=r(P3t,"led"),P3t.forEach(t),y_r=r(rSe," \u2014 "),uW=n(rSe,"A",{href:!0});var I3t=s(uW);L_r=r(I3t,"TFLEDForConditionalGeneration"),I3t.forEach(t),x_r=r(rSe," (LED model)"),rSe.forEach(t),$_r=i(Re),jM=n(Re,"LI",{});var tSe=s(jM);S2e=n(tSe,"STRONG",{});var q3t=s(S2e);k_r=r(q3t,"marian"),q3t.forEach(t),S_r=r(tSe," \u2014 "),_W=n(tSe,"A",{href:!0});var N3t=s(_W);R_r=r(N3t,"TFMarianMTModel"),N3t.forEach(t),B_r=r(tSe," (Marian model)"),tSe.forEach(t),P_r=i(Re),DM=n(Re,"LI",{});var aSe=s(DM);R2e=n(aSe,"STRONG",{});var j3t=s(R2e);I_r=r(j3t,"mbart"),j3t.forEach(t),q_r=r(aSe," \u2014 "),bW=n(aSe,"A",{href:!0});var D3t=s(bW);N_r=r(D3t,"TFMBartForConditionalGeneration"),D3t.forEach(t),j_r=r(aSe," (mBART model)"),aSe.forEach(t),D_r=i(Re),GM=n(Re,"LI",{});var nSe=s(GM);B2e=n(nSe,"STRONG",{});var G3t=s(B2e);G_r=r(G3t,"mt5"),G3t.forEach(t),O_r=r(nSe," \u2014 "),vW=n(nSe,"A",{href:!0});var O3t=s(vW);V_r=r(O3t,"TFMT5ForConditionalGeneration"),O3t.forEach(t),X_r=r(nSe," (mT5 model)"),nSe.forEach(t),z_r=i(Re),OM=n(Re,"LI",{});var sSe=s(OM);P2e=n(sSe,"STRONG",{});var V3t=s(P2e);Q_r=r(V3t,"pegasus"),V3t.forEach(t),W_r=r(sSe," \u2014 "),FW=n(sSe,"A",{href:!0});var X3t=s(FW);H_r=r(X3t,"TFPegasusForConditionalGeneration"),X3t.forEach(t),U_r=r(sSe," (Pegasus model)"),sSe.forEach(t),J_r=i(Re),VM=n(Re,"LI",{});var lSe=s(VM);I2e=n(lSe,"STRONG",{});var z3t=s(I2e);Y_r=r(z3t,"t5"),z3t.forEach(t),K_r=r(lSe," \u2014 "),TW=n(lSe,"A",{href:!0});var Q3t=s(TW);Z_r=r(Q3t,"TFT5ForConditionalGeneration"),Q3t.forEach(t),e1r=r(lSe," (T5 model)"),lSe.forEach(t),Re.forEach(t),o1r=i(Fl),T(XM.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),rqe=i(f),rc=n(f,"H2",{class:!0});var ije=s(rc);zM=n(ije,"A",{id:!0,class:!0,href:!0});var W3t=s(zM);q2e=n(W3t,"SPAN",{});var H3t=s(q2e);T(l8.$$.fragment,H3t),H3t.forEach(t),W3t.forEach(t),r1r=i(ije),N2e=n(ije,"SPAN",{});var U3t=s(N2e);t1r=r(U3t,"TFAutoModelForSequenceClassification"),U3t.forEach(t),ije.forEach(t),tqe=i(f),tr=n(f,"DIV",{class:!0});var Tl=s(tr);T(i8.$$.fragment,Tl),a1r=i(Tl),tc=n(Tl,"P",{});var mZ=s(tc);n1r=r(mZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),MW=n(mZ,"A",{href:!0});var J3t=s(MW);s1r=r(J3t,"from_pretrained()"),J3t.forEach(t),l1r=r(mZ," class method or the "),EW=n(mZ,"A",{href:!0});var Y3t=s(EW);i1r=r(Y3t,"from_config()"),Y3t.forEach(t),d1r=r(mZ,` class
method.`),mZ.forEach(t),c1r=i(Tl),d8=n(Tl,"P",{});var dje=s(d8);f1r=r(dje,"This class cannot be instantiated directly using "),j2e=n(dje,"CODE",{});var K3t=s(j2e);m1r=r(K3t,"__init__()"),K3t.forEach(t),g1r=r(dje," (throws an error)."),dje.forEach(t),h1r=i(Tl),kt=n(Tl,"DIV",{class:!0});var s6=s(kt);T(c8.$$.fragment,s6),p1r=i(s6),D2e=n(s6,"P",{});var Z3t=s(D2e);u1r=r(Z3t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Z3t.forEach(t),_1r=i(s6),ac=n(s6,"P",{});var gZ=s(ac);b1r=r(gZ,`Note:
Loading a model from its configuration file does `),G2e=n(gZ,"STRONG",{});var evt=s(G2e);v1r=r(evt,"not"),evt.forEach(t),F1r=r(gZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CW=n(gZ,"A",{href:!0});var ovt=s(CW);T1r=r(ovt,"from_pretrained()"),ovt.forEach(t),M1r=r(gZ," to load the model weights."),gZ.forEach(t),E1r=i(s6),T(QM.$$.fragment,s6),s6.forEach(t),C1r=i(Tl),kr=n(Tl,"DIV",{class:!0});var Ml=s(kr);T(f8.$$.fragment,Ml),w1r=i(Ml),O2e=n(Ml,"P",{});var rvt=s(O2e);A1r=r(rvt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rvt.forEach(t),y1r=i(Ml),an=n(Ml,"P",{});var l6=s(an);L1r=r(l6,"The model class to instantiate is selected based on the "),V2e=n(l6,"CODE",{});var tvt=s(V2e);x1r=r(tvt,"model_type"),tvt.forEach(t),$1r=r(l6,` property of the config object (either
passed as an argument or loaded from `),X2e=n(l6,"CODE",{});var avt=s(X2e);k1r=r(avt,"pretrained_model_name_or_path"),avt.forEach(t),S1r=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=n(l6,"CODE",{});var nvt=s(z2e);R1r=r(nvt,"pretrained_model_name_or_path"),nvt.forEach(t),B1r=r(l6,":"),l6.forEach(t),P1r=i(Ml),Z=n(Ml,"UL",{});var te=s(Z);WM=n(te,"LI",{});var iSe=s(WM);Q2e=n(iSe,"STRONG",{});var svt=s(Q2e);I1r=r(svt,"albert"),svt.forEach(t),q1r=r(iSe," \u2014 "),wW=n(iSe,"A",{href:!0});var lvt=s(wW);N1r=r(lvt,"TFAlbertForSequenceClassification"),lvt.forEach(t),j1r=r(iSe," (ALBERT model)"),iSe.forEach(t),D1r=i(te),HM=n(te,"LI",{});var dSe=s(HM);W2e=n(dSe,"STRONG",{});var ivt=s(W2e);G1r=r(ivt,"bert"),ivt.forEach(t),O1r=r(dSe," \u2014 "),AW=n(dSe,"A",{href:!0});var dvt=s(AW);V1r=r(dvt,"TFBertForSequenceClassification"),dvt.forEach(t),X1r=r(dSe," (BERT model)"),dSe.forEach(t),z1r=i(te),UM=n(te,"LI",{});var cSe=s(UM);H2e=n(cSe,"STRONG",{});var cvt=s(H2e);Q1r=r(cvt,"camembert"),cvt.forEach(t),W1r=r(cSe," \u2014 "),yW=n(cSe,"A",{href:!0});var fvt=s(yW);H1r=r(fvt,"TFCamembertForSequenceClassification"),fvt.forEach(t),U1r=r(cSe," (CamemBERT model)"),cSe.forEach(t),J1r=i(te),JM=n(te,"LI",{});var fSe=s(JM);U2e=n(fSe,"STRONG",{});var mvt=s(U2e);Y1r=r(mvt,"convbert"),mvt.forEach(t),K1r=r(fSe," \u2014 "),LW=n(fSe,"A",{href:!0});var gvt=s(LW);Z1r=r(gvt,"TFConvBertForSequenceClassification"),gvt.forEach(t),ebr=r(fSe," (ConvBERT model)"),fSe.forEach(t),obr=i(te),YM=n(te,"LI",{});var mSe=s(YM);J2e=n(mSe,"STRONG",{});var hvt=s(J2e);rbr=r(hvt,"ctrl"),hvt.forEach(t),tbr=r(mSe," \u2014 "),xW=n(mSe,"A",{href:!0});var pvt=s(xW);abr=r(pvt,"TFCTRLForSequenceClassification"),pvt.forEach(t),nbr=r(mSe," (CTRL model)"),mSe.forEach(t),sbr=i(te),KM=n(te,"LI",{});var gSe=s(KM);Y2e=n(gSe,"STRONG",{});var uvt=s(Y2e);lbr=r(uvt,"deberta"),uvt.forEach(t),ibr=r(gSe," \u2014 "),$W=n(gSe,"A",{href:!0});var _vt=s($W);dbr=r(_vt,"TFDebertaForSequenceClassification"),_vt.forEach(t),cbr=r(gSe," (DeBERTa model)"),gSe.forEach(t),fbr=i(te),ZM=n(te,"LI",{});var hSe=s(ZM);K2e=n(hSe,"STRONG",{});var bvt=s(K2e);mbr=r(bvt,"deberta-v2"),bvt.forEach(t),gbr=r(hSe," \u2014 "),kW=n(hSe,"A",{href:!0});var vvt=s(kW);hbr=r(vvt,"TFDebertaV2ForSequenceClassification"),vvt.forEach(t),pbr=r(hSe," (DeBERTa-v2 model)"),hSe.forEach(t),ubr=i(te),e4=n(te,"LI",{});var pSe=s(e4);Z2e=n(pSe,"STRONG",{});var Fvt=s(Z2e);_br=r(Fvt,"distilbert"),Fvt.forEach(t),bbr=r(pSe," \u2014 "),SW=n(pSe,"A",{href:!0});var Tvt=s(SW);vbr=r(Tvt,"TFDistilBertForSequenceClassification"),Tvt.forEach(t),Fbr=r(pSe," (DistilBERT model)"),pSe.forEach(t),Tbr=i(te),o4=n(te,"LI",{});var uSe=s(o4);e3e=n(uSe,"STRONG",{});var Mvt=s(e3e);Mbr=r(Mvt,"electra"),Mvt.forEach(t),Ebr=r(uSe," \u2014 "),RW=n(uSe,"A",{href:!0});var Evt=s(RW);Cbr=r(Evt,"TFElectraForSequenceClassification"),Evt.forEach(t),wbr=r(uSe," (ELECTRA model)"),uSe.forEach(t),Abr=i(te),r4=n(te,"LI",{});var _Se=s(r4);o3e=n(_Se,"STRONG",{});var Cvt=s(o3e);ybr=r(Cvt,"flaubert"),Cvt.forEach(t),Lbr=r(_Se," \u2014 "),BW=n(_Se,"A",{href:!0});var wvt=s(BW);xbr=r(wvt,"TFFlaubertForSequenceClassification"),wvt.forEach(t),$br=r(_Se," (FlauBERT model)"),_Se.forEach(t),kbr=i(te),t4=n(te,"LI",{});var bSe=s(t4);r3e=n(bSe,"STRONG",{});var Avt=s(r3e);Sbr=r(Avt,"funnel"),Avt.forEach(t),Rbr=r(bSe," \u2014 "),PW=n(bSe,"A",{href:!0});var yvt=s(PW);Bbr=r(yvt,"TFFunnelForSequenceClassification"),yvt.forEach(t),Pbr=r(bSe," (Funnel Transformer model)"),bSe.forEach(t),Ibr=i(te),a4=n(te,"LI",{});var vSe=s(a4);t3e=n(vSe,"STRONG",{});var Lvt=s(t3e);qbr=r(Lvt,"gpt2"),Lvt.forEach(t),Nbr=r(vSe," \u2014 "),IW=n(vSe,"A",{href:!0});var xvt=s(IW);jbr=r(xvt,"TFGPT2ForSequenceClassification"),xvt.forEach(t),Dbr=r(vSe," (OpenAI GPT-2 model)"),vSe.forEach(t),Gbr=i(te),n4=n(te,"LI",{});var FSe=s(n4);a3e=n(FSe,"STRONG",{});var $vt=s(a3e);Obr=r($vt,"gptj"),$vt.forEach(t),Vbr=r(FSe," \u2014 "),qW=n(FSe,"A",{href:!0});var kvt=s(qW);Xbr=r(kvt,"TFGPTJForSequenceClassification"),kvt.forEach(t),zbr=r(FSe," (GPT-J model)"),FSe.forEach(t),Qbr=i(te),s4=n(te,"LI",{});var TSe=s(s4);n3e=n(TSe,"STRONG",{});var Svt=s(n3e);Wbr=r(Svt,"layoutlm"),Svt.forEach(t),Hbr=r(TSe," \u2014 "),NW=n(TSe,"A",{href:!0});var Rvt=s(NW);Ubr=r(Rvt,"TFLayoutLMForSequenceClassification"),Rvt.forEach(t),Jbr=r(TSe," (LayoutLM model)"),TSe.forEach(t),Ybr=i(te),l4=n(te,"LI",{});var MSe=s(l4);s3e=n(MSe,"STRONG",{});var Bvt=s(s3e);Kbr=r(Bvt,"longformer"),Bvt.forEach(t),Zbr=r(MSe," \u2014 "),jW=n(MSe,"A",{href:!0});var Pvt=s(jW);e2r=r(Pvt,"TFLongformerForSequenceClassification"),Pvt.forEach(t),o2r=r(MSe," (Longformer model)"),MSe.forEach(t),r2r=i(te),i4=n(te,"LI",{});var ESe=s(i4);l3e=n(ESe,"STRONG",{});var Ivt=s(l3e);t2r=r(Ivt,"mobilebert"),Ivt.forEach(t),a2r=r(ESe," \u2014 "),DW=n(ESe,"A",{href:!0});var qvt=s(DW);n2r=r(qvt,"TFMobileBertForSequenceClassification"),qvt.forEach(t),s2r=r(ESe," (MobileBERT model)"),ESe.forEach(t),l2r=i(te),d4=n(te,"LI",{});var CSe=s(d4);i3e=n(CSe,"STRONG",{});var Nvt=s(i3e);i2r=r(Nvt,"mpnet"),Nvt.forEach(t),d2r=r(CSe," \u2014 "),GW=n(CSe,"A",{href:!0});var jvt=s(GW);c2r=r(jvt,"TFMPNetForSequenceClassification"),jvt.forEach(t),f2r=r(CSe," (MPNet model)"),CSe.forEach(t),m2r=i(te),c4=n(te,"LI",{});var wSe=s(c4);d3e=n(wSe,"STRONG",{});var Dvt=s(d3e);g2r=r(Dvt,"openai-gpt"),Dvt.forEach(t),h2r=r(wSe," \u2014 "),OW=n(wSe,"A",{href:!0});var Gvt=s(OW);p2r=r(Gvt,"TFOpenAIGPTForSequenceClassification"),Gvt.forEach(t),u2r=r(wSe," (OpenAI GPT model)"),wSe.forEach(t),_2r=i(te),f4=n(te,"LI",{});var ASe=s(f4);c3e=n(ASe,"STRONG",{});var Ovt=s(c3e);b2r=r(Ovt,"rembert"),Ovt.forEach(t),v2r=r(ASe," \u2014 "),VW=n(ASe,"A",{href:!0});var Vvt=s(VW);F2r=r(Vvt,"TFRemBertForSequenceClassification"),Vvt.forEach(t),T2r=r(ASe," (RemBERT model)"),ASe.forEach(t),M2r=i(te),m4=n(te,"LI",{});var ySe=s(m4);f3e=n(ySe,"STRONG",{});var Xvt=s(f3e);E2r=r(Xvt,"roberta"),Xvt.forEach(t),C2r=r(ySe," \u2014 "),XW=n(ySe,"A",{href:!0});var zvt=s(XW);w2r=r(zvt,"TFRobertaForSequenceClassification"),zvt.forEach(t),A2r=r(ySe," (RoBERTa model)"),ySe.forEach(t),y2r=i(te),g4=n(te,"LI",{});var LSe=s(g4);m3e=n(LSe,"STRONG",{});var Qvt=s(m3e);L2r=r(Qvt,"roformer"),Qvt.forEach(t),x2r=r(LSe," \u2014 "),zW=n(LSe,"A",{href:!0});var Wvt=s(zW);$2r=r(Wvt,"TFRoFormerForSequenceClassification"),Wvt.forEach(t),k2r=r(LSe," (RoFormer model)"),LSe.forEach(t),S2r=i(te),h4=n(te,"LI",{});var xSe=s(h4);g3e=n(xSe,"STRONG",{});var Hvt=s(g3e);R2r=r(Hvt,"tapas"),Hvt.forEach(t),B2r=r(xSe," \u2014 "),QW=n(xSe,"A",{href:!0});var Uvt=s(QW);P2r=r(Uvt,"TFTapasForSequenceClassification"),Uvt.forEach(t),I2r=r(xSe," (TAPAS model)"),xSe.forEach(t),q2r=i(te),p4=n(te,"LI",{});var $Se=s(p4);h3e=n($Se,"STRONG",{});var Jvt=s(h3e);N2r=r(Jvt,"transfo-xl"),Jvt.forEach(t),j2r=r($Se," \u2014 "),WW=n($Se,"A",{href:!0});var Yvt=s(WW);D2r=r(Yvt,"TFTransfoXLForSequenceClassification"),Yvt.forEach(t),G2r=r($Se," (Transformer-XL model)"),$Se.forEach(t),O2r=i(te),u4=n(te,"LI",{});var kSe=s(u4);p3e=n(kSe,"STRONG",{});var Kvt=s(p3e);V2r=r(Kvt,"xlm"),Kvt.forEach(t),X2r=r(kSe," \u2014 "),HW=n(kSe,"A",{href:!0});var Zvt=s(HW);z2r=r(Zvt,"TFXLMForSequenceClassification"),Zvt.forEach(t),Q2r=r(kSe," (XLM model)"),kSe.forEach(t),W2r=i(te),_4=n(te,"LI",{});var SSe=s(_4);u3e=n(SSe,"STRONG",{});var eFt=s(u3e);H2r=r(eFt,"xlm-roberta"),eFt.forEach(t),U2r=r(SSe," \u2014 "),UW=n(SSe,"A",{href:!0});var oFt=s(UW);J2r=r(oFt,"TFXLMRobertaForSequenceClassification"),oFt.forEach(t),Y2r=r(SSe," (XLM-RoBERTa model)"),SSe.forEach(t),K2r=i(te),b4=n(te,"LI",{});var RSe=s(b4);_3e=n(RSe,"STRONG",{});var rFt=s(_3e);Z2r=r(rFt,"xlnet"),rFt.forEach(t),e3r=r(RSe," \u2014 "),JW=n(RSe,"A",{href:!0});var tFt=s(JW);o3r=r(tFt,"TFXLNetForSequenceClassification"),tFt.forEach(t),r3r=r(RSe," (XLNet model)"),RSe.forEach(t),te.forEach(t),t3r=i(Ml),T(v4.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),aqe=i(f),nc=n(f,"H2",{class:!0});var cje=s(nc);F4=n(cje,"A",{id:!0,class:!0,href:!0});var aFt=s(F4);b3e=n(aFt,"SPAN",{});var nFt=s(b3e);T(m8.$$.fragment,nFt),nFt.forEach(t),aFt.forEach(t),a3r=i(cje),v3e=n(cje,"SPAN",{});var sFt=s(v3e);n3r=r(sFt,"TFAutoModelForMultipleChoice"),sFt.forEach(t),cje.forEach(t),nqe=i(f),ar=n(f,"DIV",{class:!0});var El=s(ar);T(g8.$$.fragment,El),s3r=i(El),sc=n(El,"P",{});var hZ=s(sc);l3r=r(hZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YW=n(hZ,"A",{href:!0});var lFt=s(YW);i3r=r(lFt,"from_pretrained()"),lFt.forEach(t),d3r=r(hZ," class method or the "),KW=n(hZ,"A",{href:!0});var iFt=s(KW);c3r=r(iFt,"from_config()"),iFt.forEach(t),f3r=r(hZ,` class
method.`),hZ.forEach(t),m3r=i(El),h8=n(El,"P",{});var fje=s(h8);g3r=r(fje,"This class cannot be instantiated directly using "),F3e=n(fje,"CODE",{});var dFt=s(F3e);h3r=r(dFt,"__init__()"),dFt.forEach(t),p3r=r(fje," (throws an error)."),fje.forEach(t),u3r=i(El),St=n(El,"DIV",{class:!0});var i6=s(St);T(p8.$$.fragment,i6),_3r=i(i6),T3e=n(i6,"P",{});var cFt=s(T3e);b3r=r(cFt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cFt.forEach(t),v3r=i(i6),lc=n(i6,"P",{});var pZ=s(lc);F3r=r(pZ,`Note:
Loading a model from its configuration file does `),M3e=n(pZ,"STRONG",{});var fFt=s(M3e);T3r=r(fFt,"not"),fFt.forEach(t),M3r=r(pZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=n(pZ,"A",{href:!0});var mFt=s(ZW);E3r=r(mFt,"from_pretrained()"),mFt.forEach(t),C3r=r(pZ," to load the model weights."),pZ.forEach(t),w3r=i(i6),T(T4.$$.fragment,i6),i6.forEach(t),A3r=i(El),Sr=n(El,"DIV",{class:!0});var Cl=s(Sr);T(u8.$$.fragment,Cl),y3r=i(Cl),E3e=n(Cl,"P",{});var gFt=s(E3e);L3r=r(gFt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gFt.forEach(t),x3r=i(Cl),nn=n(Cl,"P",{});var d6=s(nn);$3r=r(d6,"The model class to instantiate is selected based on the "),C3e=n(d6,"CODE",{});var hFt=s(C3e);k3r=r(hFt,"model_type"),hFt.forEach(t),S3r=r(d6,` property of the config object (either
passed as an argument or loaded from `),w3e=n(d6,"CODE",{});var pFt=s(w3e);R3r=r(pFt,"pretrained_model_name_or_path"),pFt.forEach(t),B3r=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A3e=n(d6,"CODE",{});var uFt=s(A3e);P3r=r(uFt,"pretrained_model_name_or_path"),uFt.forEach(t),I3r=r(d6,":"),d6.forEach(t),q3r=i(Cl),pe=n(Cl,"UL",{});var _e=s(pe);M4=n(_e,"LI",{});var BSe=s(M4);y3e=n(BSe,"STRONG",{});var _Ft=s(y3e);N3r=r(_Ft,"albert"),_Ft.forEach(t),j3r=r(BSe," \u2014 "),eH=n(BSe,"A",{href:!0});var bFt=s(eH);D3r=r(bFt,"TFAlbertForMultipleChoice"),bFt.forEach(t),G3r=r(BSe," (ALBERT model)"),BSe.forEach(t),O3r=i(_e),E4=n(_e,"LI",{});var PSe=s(E4);L3e=n(PSe,"STRONG",{});var vFt=s(L3e);V3r=r(vFt,"bert"),vFt.forEach(t),X3r=r(PSe," \u2014 "),oH=n(PSe,"A",{href:!0});var FFt=s(oH);z3r=r(FFt,"TFBertForMultipleChoice"),FFt.forEach(t),Q3r=r(PSe," (BERT model)"),PSe.forEach(t),W3r=i(_e),C4=n(_e,"LI",{});var ISe=s(C4);x3e=n(ISe,"STRONG",{});var TFt=s(x3e);H3r=r(TFt,"camembert"),TFt.forEach(t),U3r=r(ISe," \u2014 "),rH=n(ISe,"A",{href:!0});var MFt=s(rH);J3r=r(MFt,"TFCamembertForMultipleChoice"),MFt.forEach(t),Y3r=r(ISe," (CamemBERT model)"),ISe.forEach(t),K3r=i(_e),w4=n(_e,"LI",{});var qSe=s(w4);$3e=n(qSe,"STRONG",{});var EFt=s($3e);Z3r=r(EFt,"convbert"),EFt.forEach(t),evr=r(qSe," \u2014 "),tH=n(qSe,"A",{href:!0});var CFt=s(tH);ovr=r(CFt,"TFConvBertForMultipleChoice"),CFt.forEach(t),rvr=r(qSe," (ConvBERT model)"),qSe.forEach(t),tvr=i(_e),A4=n(_e,"LI",{});var NSe=s(A4);k3e=n(NSe,"STRONG",{});var wFt=s(k3e);avr=r(wFt,"distilbert"),wFt.forEach(t),nvr=r(NSe," \u2014 "),aH=n(NSe,"A",{href:!0});var AFt=s(aH);svr=r(AFt,"TFDistilBertForMultipleChoice"),AFt.forEach(t),lvr=r(NSe," (DistilBERT model)"),NSe.forEach(t),ivr=i(_e),y4=n(_e,"LI",{});var jSe=s(y4);S3e=n(jSe,"STRONG",{});var yFt=s(S3e);dvr=r(yFt,"electra"),yFt.forEach(t),cvr=r(jSe," \u2014 "),nH=n(jSe,"A",{href:!0});var LFt=s(nH);fvr=r(LFt,"TFElectraForMultipleChoice"),LFt.forEach(t),mvr=r(jSe," (ELECTRA model)"),jSe.forEach(t),gvr=i(_e),L4=n(_e,"LI",{});var DSe=s(L4);R3e=n(DSe,"STRONG",{});var xFt=s(R3e);hvr=r(xFt,"flaubert"),xFt.forEach(t),pvr=r(DSe," \u2014 "),sH=n(DSe,"A",{href:!0});var $Ft=s(sH);uvr=r($Ft,"TFFlaubertForMultipleChoice"),$Ft.forEach(t),_vr=r(DSe," (FlauBERT model)"),DSe.forEach(t),bvr=i(_e),x4=n(_e,"LI",{});var GSe=s(x4);B3e=n(GSe,"STRONG",{});var kFt=s(B3e);vvr=r(kFt,"funnel"),kFt.forEach(t),Fvr=r(GSe," \u2014 "),lH=n(GSe,"A",{href:!0});var SFt=s(lH);Tvr=r(SFt,"TFFunnelForMultipleChoice"),SFt.forEach(t),Mvr=r(GSe," (Funnel Transformer model)"),GSe.forEach(t),Evr=i(_e),$4=n(_e,"LI",{});var OSe=s($4);P3e=n(OSe,"STRONG",{});var RFt=s(P3e);Cvr=r(RFt,"longformer"),RFt.forEach(t),wvr=r(OSe," \u2014 "),iH=n(OSe,"A",{href:!0});var BFt=s(iH);Avr=r(BFt,"TFLongformerForMultipleChoice"),BFt.forEach(t),yvr=r(OSe," (Longformer model)"),OSe.forEach(t),Lvr=i(_e),k4=n(_e,"LI",{});var VSe=s(k4);I3e=n(VSe,"STRONG",{});var PFt=s(I3e);xvr=r(PFt,"mobilebert"),PFt.forEach(t),$vr=r(VSe," \u2014 "),dH=n(VSe,"A",{href:!0});var IFt=s(dH);kvr=r(IFt,"TFMobileBertForMultipleChoice"),IFt.forEach(t),Svr=r(VSe," (MobileBERT model)"),VSe.forEach(t),Rvr=i(_e),S4=n(_e,"LI",{});var XSe=s(S4);q3e=n(XSe,"STRONG",{});var qFt=s(q3e);Bvr=r(qFt,"mpnet"),qFt.forEach(t),Pvr=r(XSe," \u2014 "),cH=n(XSe,"A",{href:!0});var NFt=s(cH);Ivr=r(NFt,"TFMPNetForMultipleChoice"),NFt.forEach(t),qvr=r(XSe," (MPNet model)"),XSe.forEach(t),Nvr=i(_e),R4=n(_e,"LI",{});var zSe=s(R4);N3e=n(zSe,"STRONG",{});var jFt=s(N3e);jvr=r(jFt,"rembert"),jFt.forEach(t),Dvr=r(zSe," \u2014 "),fH=n(zSe,"A",{href:!0});var DFt=s(fH);Gvr=r(DFt,"TFRemBertForMultipleChoice"),DFt.forEach(t),Ovr=r(zSe," (RemBERT model)"),zSe.forEach(t),Vvr=i(_e),B4=n(_e,"LI",{});var QSe=s(B4);j3e=n(QSe,"STRONG",{});var GFt=s(j3e);Xvr=r(GFt,"roberta"),GFt.forEach(t),zvr=r(QSe," \u2014 "),mH=n(QSe,"A",{href:!0});var OFt=s(mH);Qvr=r(OFt,"TFRobertaForMultipleChoice"),OFt.forEach(t),Wvr=r(QSe," (RoBERTa model)"),QSe.forEach(t),Hvr=i(_e),P4=n(_e,"LI",{});var WSe=s(P4);D3e=n(WSe,"STRONG",{});var VFt=s(D3e);Uvr=r(VFt,"roformer"),VFt.forEach(t),Jvr=r(WSe," \u2014 "),gH=n(WSe,"A",{href:!0});var XFt=s(gH);Yvr=r(XFt,"TFRoFormerForMultipleChoice"),XFt.forEach(t),Kvr=r(WSe," (RoFormer model)"),WSe.forEach(t),Zvr=i(_e),I4=n(_e,"LI",{});var HSe=s(I4);G3e=n(HSe,"STRONG",{});var zFt=s(G3e);eFr=r(zFt,"xlm"),zFt.forEach(t),oFr=r(HSe," \u2014 "),hH=n(HSe,"A",{href:!0});var QFt=s(hH);rFr=r(QFt,"TFXLMForMultipleChoice"),QFt.forEach(t),tFr=r(HSe," (XLM model)"),HSe.forEach(t),aFr=i(_e),q4=n(_e,"LI",{});var USe=s(q4);O3e=n(USe,"STRONG",{});var WFt=s(O3e);nFr=r(WFt,"xlm-roberta"),WFt.forEach(t),sFr=r(USe," \u2014 "),pH=n(USe,"A",{href:!0});var HFt=s(pH);lFr=r(HFt,"TFXLMRobertaForMultipleChoice"),HFt.forEach(t),iFr=r(USe," (XLM-RoBERTa model)"),USe.forEach(t),dFr=i(_e),N4=n(_e,"LI",{});var JSe=s(N4);V3e=n(JSe,"STRONG",{});var UFt=s(V3e);cFr=r(UFt,"xlnet"),UFt.forEach(t),fFr=r(JSe," \u2014 "),uH=n(JSe,"A",{href:!0});var JFt=s(uH);mFr=r(JFt,"TFXLNetForMultipleChoice"),JFt.forEach(t),gFr=r(JSe," (XLNet model)"),JSe.forEach(t),_e.forEach(t),hFr=i(Cl),T(j4.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),sqe=i(f),ic=n(f,"H2",{class:!0});var mje=s(ic);D4=n(mje,"A",{id:!0,class:!0,href:!0});var YFt=s(D4);X3e=n(YFt,"SPAN",{});var KFt=s(X3e);T(_8.$$.fragment,KFt),KFt.forEach(t),YFt.forEach(t),pFr=i(mje),z3e=n(mje,"SPAN",{});var ZFt=s(z3e);uFr=r(ZFt,"TFAutoModelForNextSentencePrediction"),ZFt.forEach(t),mje.forEach(t),lqe=i(f),nr=n(f,"DIV",{class:!0});var wl=s(nr);T(b8.$$.fragment,wl),_Fr=i(wl),dc=n(wl,"P",{});var uZ=s(dc);bFr=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),_H=n(uZ,"A",{href:!0});var eTt=s(_H);vFr=r(eTt,"from_pretrained()"),eTt.forEach(t),FFr=r(uZ," class method or the "),bH=n(uZ,"A",{href:!0});var oTt=s(bH);TFr=r(oTt,"from_config()"),oTt.forEach(t),MFr=r(uZ,` class
method.`),uZ.forEach(t),EFr=i(wl),v8=n(wl,"P",{});var gje=s(v8);CFr=r(gje,"This class cannot be instantiated directly using "),Q3e=n(gje,"CODE",{});var rTt=s(Q3e);wFr=r(rTt,"__init__()"),rTt.forEach(t),AFr=r(gje," (throws an error)."),gje.forEach(t),yFr=i(wl),Rt=n(wl,"DIV",{class:!0});var c6=s(Rt);T(F8.$$.fragment,c6),LFr=i(c6),W3e=n(c6,"P",{});var tTt=s(W3e);xFr=r(tTt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tTt.forEach(t),$Fr=i(c6),cc=n(c6,"P",{});var _Z=s(cc);kFr=r(_Z,`Note:
Loading a model from its configuration file does `),H3e=n(_Z,"STRONG",{});var aTt=s(H3e);SFr=r(aTt,"not"),aTt.forEach(t),RFr=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=n(_Z,"A",{href:!0});var nTt=s(vH);BFr=r(nTt,"from_pretrained()"),nTt.forEach(t),PFr=r(_Z," to load the model weights."),_Z.forEach(t),IFr=i(c6),T(G4.$$.fragment,c6),c6.forEach(t),qFr=i(wl),Rr=n(wl,"DIV",{class:!0});var Al=s(Rr);T(T8.$$.fragment,Al),NFr=i(Al),U3e=n(Al,"P",{});var sTt=s(U3e);jFr=r(sTt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),sTt.forEach(t),DFr=i(Al),sn=n(Al,"P",{});var f6=s(sn);GFr=r(f6,"The model class to instantiate is selected based on the "),J3e=n(f6,"CODE",{});var lTt=s(J3e);OFr=r(lTt,"model_type"),lTt.forEach(t),VFr=r(f6,` property of the config object (either
passed as an argument or loaded from `),Y3e=n(f6,"CODE",{});var iTt=s(Y3e);XFr=r(iTt,"pretrained_model_name_or_path"),iTt.forEach(t),zFr=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K3e=n(f6,"CODE",{});var dTt=s(K3e);QFr=r(dTt,"pretrained_model_name_or_path"),dTt.forEach(t),WFr=r(f6,":"),f6.forEach(t),HFr=i(Al),M8=n(Al,"UL",{});var hje=s(M8);O4=n(hje,"LI",{});var YSe=s(O4);Z3e=n(YSe,"STRONG",{});var cTt=s(Z3e);UFr=r(cTt,"bert"),cTt.forEach(t),JFr=r(YSe," \u2014 "),FH=n(YSe,"A",{href:!0});var fTt=s(FH);YFr=r(fTt,"TFBertForNextSentencePrediction"),fTt.forEach(t),KFr=r(YSe," (BERT model)"),YSe.forEach(t),ZFr=i(hje),V4=n(hje,"LI",{});var KSe=s(V4);eve=n(KSe,"STRONG",{});var mTt=s(eve);eTr=r(mTt,"mobilebert"),mTt.forEach(t),oTr=r(KSe," \u2014 "),TH=n(KSe,"A",{href:!0});var gTt=s(TH);rTr=r(gTt,"TFMobileBertForNextSentencePrediction"),gTt.forEach(t),tTr=r(KSe," (MobileBERT model)"),KSe.forEach(t),hje.forEach(t),aTr=i(Al),T(X4.$$.fragment,Al),Al.forEach(t),wl.forEach(t),iqe=i(f),fc=n(f,"H2",{class:!0});var pje=s(fc);z4=n(pje,"A",{id:!0,class:!0,href:!0});var hTt=s(z4);ove=n(hTt,"SPAN",{});var pTt=s(ove);T(E8.$$.fragment,pTt),pTt.forEach(t),hTt.forEach(t),nTr=i(pje),rve=n(pje,"SPAN",{});var uTt=s(rve);sTr=r(uTt,"TFAutoModelForTableQuestionAnswering"),uTt.forEach(t),pje.forEach(t),dqe=i(f),sr=n(f,"DIV",{class:!0});var yl=s(sr);T(C8.$$.fragment,yl),lTr=i(yl),mc=n(yl,"P",{});var bZ=s(mc);iTr=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),MH=n(bZ,"A",{href:!0});var _Tt=s(MH);dTr=r(_Tt,"from_pretrained()"),_Tt.forEach(t),cTr=r(bZ," class method or the "),EH=n(bZ,"A",{href:!0});var bTt=s(EH);fTr=r(bTt,"from_config()"),bTt.forEach(t),mTr=r(bZ,` class
method.`),bZ.forEach(t),gTr=i(yl),w8=n(yl,"P",{});var uje=s(w8);hTr=r(uje,"This class cannot be instantiated directly using "),tve=n(uje,"CODE",{});var vTt=s(tve);pTr=r(vTt,"__init__()"),vTt.forEach(t),uTr=r(uje," (throws an error)."),uje.forEach(t),_Tr=i(yl),Bt=n(yl,"DIV",{class:!0});var m6=s(Bt);T(A8.$$.fragment,m6),bTr=i(m6),ave=n(m6,"P",{});var FTt=s(ave);vTr=r(FTt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),FTt.forEach(t),FTr=i(m6),gc=n(m6,"P",{});var vZ=s(gc);TTr=r(vZ,`Note:
Loading a model from its configuration file does `),nve=n(vZ,"STRONG",{});var TTt=s(nve);MTr=r(TTt,"not"),TTt.forEach(t),ETr=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=n(vZ,"A",{href:!0});var MTt=s(CH);CTr=r(MTt,"from_pretrained()"),MTt.forEach(t),wTr=r(vZ," to load the model weights."),vZ.forEach(t),ATr=i(m6),T(Q4.$$.fragment,m6),m6.forEach(t),yTr=i(yl),Br=n(yl,"DIV",{class:!0});var Ll=s(Br);T(y8.$$.fragment,Ll),LTr=i(Ll),sve=n(Ll,"P",{});var ETt=s(sve);xTr=r(ETt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ETt.forEach(t),$Tr=i(Ll),ln=n(Ll,"P",{});var g6=s(ln);kTr=r(g6,"The model class to instantiate is selected based on the "),lve=n(g6,"CODE",{});var CTt=s(lve);STr=r(CTt,"model_type"),CTt.forEach(t),RTr=r(g6,` property of the config object (either
passed as an argument or loaded from `),ive=n(g6,"CODE",{});var wTt=s(ive);BTr=r(wTt,"pretrained_model_name_or_path"),wTt.forEach(t),PTr=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=n(g6,"CODE",{});var ATt=s(dve);ITr=r(ATt,"pretrained_model_name_or_path"),ATt.forEach(t),qTr=r(g6,":"),g6.forEach(t),NTr=i(Ll),cve=n(Ll,"UL",{});var yTt=s(cve);W4=n(yTt,"LI",{});var ZSe=s(W4);fve=n(ZSe,"STRONG",{});var LTt=s(fve);jTr=r(LTt,"tapas"),LTt.forEach(t),DTr=r(ZSe," \u2014 "),wH=n(ZSe,"A",{href:!0});var xTt=s(wH);GTr=r(xTt,"TFTapasForQuestionAnswering"),xTt.forEach(t),OTr=r(ZSe," (TAPAS model)"),ZSe.forEach(t),yTt.forEach(t),VTr=i(Ll),T(H4.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),cqe=i(f),hc=n(f,"H2",{class:!0});var _je=s(hc);U4=n(_je,"A",{id:!0,class:!0,href:!0});var $Tt=s(U4);mve=n($Tt,"SPAN",{});var kTt=s(mve);T(L8.$$.fragment,kTt),kTt.forEach(t),$Tt.forEach(t),XTr=i(_je),gve=n(_je,"SPAN",{});var STt=s(gve);zTr=r(STt,"TFAutoModelForTokenClassification"),STt.forEach(t),_je.forEach(t),fqe=i(f),lr=n(f,"DIV",{class:!0});var xl=s(lr);T(x8.$$.fragment,xl),QTr=i(xl),pc=n(xl,"P",{});var FZ=s(pc);WTr=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),AH=n(FZ,"A",{href:!0});var RTt=s(AH);HTr=r(RTt,"from_pretrained()"),RTt.forEach(t),UTr=r(FZ," class method or the "),yH=n(FZ,"A",{href:!0});var BTt=s(yH);JTr=r(BTt,"from_config()"),BTt.forEach(t),YTr=r(FZ,` class
method.`),FZ.forEach(t),KTr=i(xl),$8=n(xl,"P",{});var bje=s($8);ZTr=r(bje,"This class cannot be instantiated directly using "),hve=n(bje,"CODE",{});var PTt=s(hve);e7r=r(PTt,"__init__()"),PTt.forEach(t),o7r=r(bje," (throws an error)."),bje.forEach(t),r7r=i(xl),Pt=n(xl,"DIV",{class:!0});var h6=s(Pt);T(k8.$$.fragment,h6),t7r=i(h6),pve=n(h6,"P",{});var ITt=s(pve);a7r=r(ITt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ITt.forEach(t),n7r=i(h6),uc=n(h6,"P",{});var TZ=s(uc);s7r=r(TZ,`Note:
Loading a model from its configuration file does `),uve=n(TZ,"STRONG",{});var qTt=s(uve);l7r=r(qTt,"not"),qTt.forEach(t),i7r=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=n(TZ,"A",{href:!0});var NTt=s(LH);d7r=r(NTt,"from_pretrained()"),NTt.forEach(t),c7r=r(TZ," to load the model weights."),TZ.forEach(t),f7r=i(h6),T(J4.$$.fragment,h6),h6.forEach(t),m7r=i(xl),Pr=n(xl,"DIV",{class:!0});var $l=s(Pr);T(S8.$$.fragment,$l),g7r=i($l),_ve=n($l,"P",{});var jTt=s(_ve);h7r=r(jTt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jTt.forEach(t),p7r=i($l),dn=n($l,"P",{});var p6=s(dn);u7r=r(p6,"The model class to instantiate is selected based on the "),bve=n(p6,"CODE",{});var DTt=s(bve);_7r=r(DTt,"model_type"),DTt.forEach(t),b7r=r(p6,` property of the config object (either
passed as an argument or loaded from `),vve=n(p6,"CODE",{});var GTt=s(vve);v7r=r(GTt,"pretrained_model_name_or_path"),GTt.forEach(t),F7r=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fve=n(p6,"CODE",{});var OTt=s(Fve);T7r=r(OTt,"pretrained_model_name_or_path"),OTt.forEach(t),M7r=r(p6,":"),p6.forEach(t),E7r=i($l),de=n($l,"UL",{});var me=s(de);Y4=n(me,"LI",{});var eRe=s(Y4);Tve=n(eRe,"STRONG",{});var VTt=s(Tve);C7r=r(VTt,"albert"),VTt.forEach(t),w7r=r(eRe," \u2014 "),xH=n(eRe,"A",{href:!0});var XTt=s(xH);A7r=r(XTt,"TFAlbertForTokenClassification"),XTt.forEach(t),y7r=r(eRe," (ALBERT model)"),eRe.forEach(t),L7r=i(me),K4=n(me,"LI",{});var oRe=s(K4);Mve=n(oRe,"STRONG",{});var zTt=s(Mve);x7r=r(zTt,"bert"),zTt.forEach(t),$7r=r(oRe," \u2014 "),$H=n(oRe,"A",{href:!0});var QTt=s($H);k7r=r(QTt,"TFBertForTokenClassification"),QTt.forEach(t),S7r=r(oRe," (BERT model)"),oRe.forEach(t),R7r=i(me),Z4=n(me,"LI",{});var rRe=s(Z4);Eve=n(rRe,"STRONG",{});var WTt=s(Eve);B7r=r(WTt,"camembert"),WTt.forEach(t),P7r=r(rRe," \u2014 "),kH=n(rRe,"A",{href:!0});var HTt=s(kH);I7r=r(HTt,"TFCamembertForTokenClassification"),HTt.forEach(t),q7r=r(rRe," (CamemBERT model)"),rRe.forEach(t),N7r=i(me),eE=n(me,"LI",{});var tRe=s(eE);Cve=n(tRe,"STRONG",{});var UTt=s(Cve);j7r=r(UTt,"convbert"),UTt.forEach(t),D7r=r(tRe," \u2014 "),SH=n(tRe,"A",{href:!0});var JTt=s(SH);G7r=r(JTt,"TFConvBertForTokenClassification"),JTt.forEach(t),O7r=r(tRe," (ConvBERT model)"),tRe.forEach(t),V7r=i(me),oE=n(me,"LI",{});var aRe=s(oE);wve=n(aRe,"STRONG",{});var YTt=s(wve);X7r=r(YTt,"deberta"),YTt.forEach(t),z7r=r(aRe," \u2014 "),RH=n(aRe,"A",{href:!0});var KTt=s(RH);Q7r=r(KTt,"TFDebertaForTokenClassification"),KTt.forEach(t),W7r=r(aRe," (DeBERTa model)"),aRe.forEach(t),H7r=i(me),rE=n(me,"LI",{});var nRe=s(rE);Ave=n(nRe,"STRONG",{});var ZTt=s(Ave);U7r=r(ZTt,"deberta-v2"),ZTt.forEach(t),J7r=r(nRe," \u2014 "),BH=n(nRe,"A",{href:!0});var e7t=s(BH);Y7r=r(e7t,"TFDebertaV2ForTokenClassification"),e7t.forEach(t),K7r=r(nRe," (DeBERTa-v2 model)"),nRe.forEach(t),Z7r=i(me),tE=n(me,"LI",{});var sRe=s(tE);yve=n(sRe,"STRONG",{});var o7t=s(yve);eMr=r(o7t,"distilbert"),o7t.forEach(t),oMr=r(sRe," \u2014 "),PH=n(sRe,"A",{href:!0});var r7t=s(PH);rMr=r(r7t,"TFDistilBertForTokenClassification"),r7t.forEach(t),tMr=r(sRe," (DistilBERT model)"),sRe.forEach(t),aMr=i(me),aE=n(me,"LI",{});var lRe=s(aE);Lve=n(lRe,"STRONG",{});var t7t=s(Lve);nMr=r(t7t,"electra"),t7t.forEach(t),sMr=r(lRe," \u2014 "),IH=n(lRe,"A",{href:!0});var a7t=s(IH);lMr=r(a7t,"TFElectraForTokenClassification"),a7t.forEach(t),iMr=r(lRe," (ELECTRA model)"),lRe.forEach(t),dMr=i(me),nE=n(me,"LI",{});var iRe=s(nE);xve=n(iRe,"STRONG",{});var n7t=s(xve);cMr=r(n7t,"flaubert"),n7t.forEach(t),fMr=r(iRe," \u2014 "),qH=n(iRe,"A",{href:!0});var s7t=s(qH);mMr=r(s7t,"TFFlaubertForTokenClassification"),s7t.forEach(t),gMr=r(iRe," (FlauBERT model)"),iRe.forEach(t),hMr=i(me),sE=n(me,"LI",{});var dRe=s(sE);$ve=n(dRe,"STRONG",{});var l7t=s($ve);pMr=r(l7t,"funnel"),l7t.forEach(t),uMr=r(dRe," \u2014 "),NH=n(dRe,"A",{href:!0});var i7t=s(NH);_Mr=r(i7t,"TFFunnelForTokenClassification"),i7t.forEach(t),bMr=r(dRe," (Funnel Transformer model)"),dRe.forEach(t),vMr=i(me),lE=n(me,"LI",{});var cRe=s(lE);kve=n(cRe,"STRONG",{});var d7t=s(kve);FMr=r(d7t,"layoutlm"),d7t.forEach(t),TMr=r(cRe," \u2014 "),jH=n(cRe,"A",{href:!0});var c7t=s(jH);MMr=r(c7t,"TFLayoutLMForTokenClassification"),c7t.forEach(t),EMr=r(cRe," (LayoutLM model)"),cRe.forEach(t),CMr=i(me),iE=n(me,"LI",{});var fRe=s(iE);Sve=n(fRe,"STRONG",{});var f7t=s(Sve);wMr=r(f7t,"longformer"),f7t.forEach(t),AMr=r(fRe," \u2014 "),DH=n(fRe,"A",{href:!0});var m7t=s(DH);yMr=r(m7t,"TFLongformerForTokenClassification"),m7t.forEach(t),LMr=r(fRe," (Longformer model)"),fRe.forEach(t),xMr=i(me),dE=n(me,"LI",{});var mRe=s(dE);Rve=n(mRe,"STRONG",{});var g7t=s(Rve);$Mr=r(g7t,"mobilebert"),g7t.forEach(t),kMr=r(mRe," \u2014 "),GH=n(mRe,"A",{href:!0});var h7t=s(GH);SMr=r(h7t,"TFMobileBertForTokenClassification"),h7t.forEach(t),RMr=r(mRe," (MobileBERT model)"),mRe.forEach(t),BMr=i(me),cE=n(me,"LI",{});var gRe=s(cE);Bve=n(gRe,"STRONG",{});var p7t=s(Bve);PMr=r(p7t,"mpnet"),p7t.forEach(t),IMr=r(gRe," \u2014 "),OH=n(gRe,"A",{href:!0});var u7t=s(OH);qMr=r(u7t,"TFMPNetForTokenClassification"),u7t.forEach(t),NMr=r(gRe," (MPNet model)"),gRe.forEach(t),jMr=i(me),fE=n(me,"LI",{});var hRe=s(fE);Pve=n(hRe,"STRONG",{});var _7t=s(Pve);DMr=r(_7t,"rembert"),_7t.forEach(t),GMr=r(hRe," \u2014 "),VH=n(hRe,"A",{href:!0});var b7t=s(VH);OMr=r(b7t,"TFRemBertForTokenClassification"),b7t.forEach(t),VMr=r(hRe," (RemBERT model)"),hRe.forEach(t),XMr=i(me),mE=n(me,"LI",{});var pRe=s(mE);Ive=n(pRe,"STRONG",{});var v7t=s(Ive);zMr=r(v7t,"roberta"),v7t.forEach(t),QMr=r(pRe," \u2014 "),XH=n(pRe,"A",{href:!0});var F7t=s(XH);WMr=r(F7t,"TFRobertaForTokenClassification"),F7t.forEach(t),HMr=r(pRe," (RoBERTa model)"),pRe.forEach(t),UMr=i(me),gE=n(me,"LI",{});var uRe=s(gE);qve=n(uRe,"STRONG",{});var T7t=s(qve);JMr=r(T7t,"roformer"),T7t.forEach(t),YMr=r(uRe," \u2014 "),zH=n(uRe,"A",{href:!0});var M7t=s(zH);KMr=r(M7t,"TFRoFormerForTokenClassification"),M7t.forEach(t),ZMr=r(uRe," (RoFormer model)"),uRe.forEach(t),e4r=i(me),hE=n(me,"LI",{});var _Re=s(hE);Nve=n(_Re,"STRONG",{});var E7t=s(Nve);o4r=r(E7t,"xlm"),E7t.forEach(t),r4r=r(_Re," \u2014 "),QH=n(_Re,"A",{href:!0});var C7t=s(QH);t4r=r(C7t,"TFXLMForTokenClassification"),C7t.forEach(t),a4r=r(_Re," (XLM model)"),_Re.forEach(t),n4r=i(me),pE=n(me,"LI",{});var bRe=s(pE);jve=n(bRe,"STRONG",{});var w7t=s(jve);s4r=r(w7t,"xlm-roberta"),w7t.forEach(t),l4r=r(bRe," \u2014 "),WH=n(bRe,"A",{href:!0});var A7t=s(WH);i4r=r(A7t,"TFXLMRobertaForTokenClassification"),A7t.forEach(t),d4r=r(bRe," (XLM-RoBERTa model)"),bRe.forEach(t),c4r=i(me),uE=n(me,"LI",{});var vRe=s(uE);Dve=n(vRe,"STRONG",{});var y7t=s(Dve);f4r=r(y7t,"xlnet"),y7t.forEach(t),m4r=r(vRe," \u2014 "),HH=n(vRe,"A",{href:!0});var L7t=s(HH);g4r=r(L7t,"TFXLNetForTokenClassification"),L7t.forEach(t),h4r=r(vRe," (XLNet model)"),vRe.forEach(t),me.forEach(t),p4r=i($l),T(_E.$$.fragment,$l),$l.forEach(t),xl.forEach(t),mqe=i(f),_c=n(f,"H2",{class:!0});var vje=s(_c);bE=n(vje,"A",{id:!0,class:!0,href:!0});var x7t=s(bE);Gve=n(x7t,"SPAN",{});var $7t=s(Gve);T(R8.$$.fragment,$7t),$7t.forEach(t),x7t.forEach(t),u4r=i(vje),Ove=n(vje,"SPAN",{});var k7t=s(Ove);_4r=r(k7t,"TFAutoModelForQuestionAnswering"),k7t.forEach(t),vje.forEach(t),gqe=i(f),ir=n(f,"DIV",{class:!0});var kl=s(ir);T(B8.$$.fragment,kl),b4r=i(kl),bc=n(kl,"P",{});var MZ=s(bc);v4r=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),UH=n(MZ,"A",{href:!0});var S7t=s(UH);F4r=r(S7t,"from_pretrained()"),S7t.forEach(t),T4r=r(MZ," class method or the "),JH=n(MZ,"A",{href:!0});var R7t=s(JH);M4r=r(R7t,"from_config()"),R7t.forEach(t),E4r=r(MZ,` class
method.`),MZ.forEach(t),C4r=i(kl),P8=n(kl,"P",{});var Fje=s(P8);w4r=r(Fje,"This class cannot be instantiated directly using "),Vve=n(Fje,"CODE",{});var B7t=s(Vve);A4r=r(B7t,"__init__()"),B7t.forEach(t),y4r=r(Fje," (throws an error)."),Fje.forEach(t),L4r=i(kl),It=n(kl,"DIV",{class:!0});var u6=s(It);T(I8.$$.fragment,u6),x4r=i(u6),Xve=n(u6,"P",{});var P7t=s(Xve);$4r=r(P7t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),P7t.forEach(t),k4r=i(u6),vc=n(u6,"P",{});var EZ=s(vc);S4r=r(EZ,`Note:
Loading a model from its configuration file does `),zve=n(EZ,"STRONG",{});var I7t=s(zve);R4r=r(I7t,"not"),I7t.forEach(t),B4r=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(EZ,"A",{href:!0});var q7t=s(YH);P4r=r(q7t,"from_pretrained()"),q7t.forEach(t),I4r=r(EZ," to load the model weights."),EZ.forEach(t),q4r=i(u6),T(vE.$$.fragment,u6),u6.forEach(t),N4r=i(kl),Ir=n(kl,"DIV",{class:!0});var Sl=s(Ir);T(q8.$$.fragment,Sl),j4r=i(Sl),Qve=n(Sl,"P",{});var N7t=s(Qve);D4r=r(N7t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),N7t.forEach(t),G4r=i(Sl),cn=n(Sl,"P",{});var _6=s(cn);O4r=r(_6,"The model class to instantiate is selected based on the "),Wve=n(_6,"CODE",{});var j7t=s(Wve);V4r=r(j7t,"model_type"),j7t.forEach(t),X4r=r(_6,` property of the config object (either
passed as an argument or loaded from `),Hve=n(_6,"CODE",{});var D7t=s(Hve);z4r=r(D7t,"pretrained_model_name_or_path"),D7t.forEach(t),Q4r=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=n(_6,"CODE",{});var G7t=s(Uve);W4r=r(G7t,"pretrained_model_name_or_path"),G7t.forEach(t),H4r=r(_6,":"),_6.forEach(t),U4r=i(Sl),ce=n(Sl,"UL",{});var ge=s(ce);FE=n(ge,"LI",{});var FRe=s(FE);Jve=n(FRe,"STRONG",{});var O7t=s(Jve);J4r=r(O7t,"albert"),O7t.forEach(t),Y4r=r(FRe," \u2014 "),KH=n(FRe,"A",{href:!0});var V7t=s(KH);K4r=r(V7t,"TFAlbertForQuestionAnswering"),V7t.forEach(t),Z4r=r(FRe," (ALBERT model)"),FRe.forEach(t),eEr=i(ge),TE=n(ge,"LI",{});var TRe=s(TE);Yve=n(TRe,"STRONG",{});var X7t=s(Yve);oEr=r(X7t,"bert"),X7t.forEach(t),rEr=r(TRe," \u2014 "),ZH=n(TRe,"A",{href:!0});var z7t=s(ZH);tEr=r(z7t,"TFBertForQuestionAnswering"),z7t.forEach(t),aEr=r(TRe," (BERT model)"),TRe.forEach(t),nEr=i(ge),ME=n(ge,"LI",{});var MRe=s(ME);Kve=n(MRe,"STRONG",{});var Q7t=s(Kve);sEr=r(Q7t,"camembert"),Q7t.forEach(t),lEr=r(MRe," \u2014 "),eU=n(MRe,"A",{href:!0});var W7t=s(eU);iEr=r(W7t,"TFCamembertForQuestionAnswering"),W7t.forEach(t),dEr=r(MRe," (CamemBERT model)"),MRe.forEach(t),cEr=i(ge),EE=n(ge,"LI",{});var ERe=s(EE);Zve=n(ERe,"STRONG",{});var H7t=s(Zve);fEr=r(H7t,"convbert"),H7t.forEach(t),mEr=r(ERe," \u2014 "),oU=n(ERe,"A",{href:!0});var U7t=s(oU);gEr=r(U7t,"TFConvBertForQuestionAnswering"),U7t.forEach(t),hEr=r(ERe," (ConvBERT model)"),ERe.forEach(t),pEr=i(ge),CE=n(ge,"LI",{});var CRe=s(CE);eFe=n(CRe,"STRONG",{});var J7t=s(eFe);uEr=r(J7t,"deberta"),J7t.forEach(t),_Er=r(CRe," \u2014 "),rU=n(CRe,"A",{href:!0});var Y7t=s(rU);bEr=r(Y7t,"TFDebertaForQuestionAnswering"),Y7t.forEach(t),vEr=r(CRe," (DeBERTa model)"),CRe.forEach(t),FEr=i(ge),wE=n(ge,"LI",{});var wRe=s(wE);oFe=n(wRe,"STRONG",{});var K7t=s(oFe);TEr=r(K7t,"deberta-v2"),K7t.forEach(t),MEr=r(wRe," \u2014 "),tU=n(wRe,"A",{href:!0});var Z7t=s(tU);EEr=r(Z7t,"TFDebertaV2ForQuestionAnswering"),Z7t.forEach(t),CEr=r(wRe," (DeBERTa-v2 model)"),wRe.forEach(t),wEr=i(ge),AE=n(ge,"LI",{});var ARe=s(AE);rFe=n(ARe,"STRONG",{});var eMt=s(rFe);AEr=r(eMt,"distilbert"),eMt.forEach(t),yEr=r(ARe," \u2014 "),aU=n(ARe,"A",{href:!0});var oMt=s(aU);LEr=r(oMt,"TFDistilBertForQuestionAnswering"),oMt.forEach(t),xEr=r(ARe," (DistilBERT model)"),ARe.forEach(t),$Er=i(ge),yE=n(ge,"LI",{});var yRe=s(yE);tFe=n(yRe,"STRONG",{});var rMt=s(tFe);kEr=r(rMt,"electra"),rMt.forEach(t),SEr=r(yRe," \u2014 "),nU=n(yRe,"A",{href:!0});var tMt=s(nU);REr=r(tMt,"TFElectraForQuestionAnswering"),tMt.forEach(t),BEr=r(yRe," (ELECTRA model)"),yRe.forEach(t),PEr=i(ge),LE=n(ge,"LI",{});var LRe=s(LE);aFe=n(LRe,"STRONG",{});var aMt=s(aFe);IEr=r(aMt,"flaubert"),aMt.forEach(t),qEr=r(LRe," \u2014 "),sU=n(LRe,"A",{href:!0});var nMt=s(sU);NEr=r(nMt,"TFFlaubertForQuestionAnsweringSimple"),nMt.forEach(t),jEr=r(LRe," (FlauBERT model)"),LRe.forEach(t),DEr=i(ge),xE=n(ge,"LI",{});var xRe=s(xE);nFe=n(xRe,"STRONG",{});var sMt=s(nFe);GEr=r(sMt,"funnel"),sMt.forEach(t),OEr=r(xRe," \u2014 "),lU=n(xRe,"A",{href:!0});var lMt=s(lU);VEr=r(lMt,"TFFunnelForQuestionAnswering"),lMt.forEach(t),XEr=r(xRe," (Funnel Transformer model)"),xRe.forEach(t),zEr=i(ge),$E=n(ge,"LI",{});var $Re=s($E);sFe=n($Re,"STRONG",{});var iMt=s(sFe);QEr=r(iMt,"gptj"),iMt.forEach(t),WEr=r($Re," \u2014 "),iU=n($Re,"A",{href:!0});var dMt=s(iU);HEr=r(dMt,"TFGPTJForQuestionAnswering"),dMt.forEach(t),UEr=r($Re," (GPT-J model)"),$Re.forEach(t),JEr=i(ge),kE=n(ge,"LI",{});var kRe=s(kE);lFe=n(kRe,"STRONG",{});var cMt=s(lFe);YEr=r(cMt,"longformer"),cMt.forEach(t),KEr=r(kRe," \u2014 "),dU=n(kRe,"A",{href:!0});var fMt=s(dU);ZEr=r(fMt,"TFLongformerForQuestionAnswering"),fMt.forEach(t),e5r=r(kRe," (Longformer model)"),kRe.forEach(t),o5r=i(ge),SE=n(ge,"LI",{});var SRe=s(SE);iFe=n(SRe,"STRONG",{});var mMt=s(iFe);r5r=r(mMt,"mobilebert"),mMt.forEach(t),t5r=r(SRe," \u2014 "),cU=n(SRe,"A",{href:!0});var gMt=s(cU);a5r=r(gMt,"TFMobileBertForQuestionAnswering"),gMt.forEach(t),n5r=r(SRe," (MobileBERT model)"),SRe.forEach(t),s5r=i(ge),RE=n(ge,"LI",{});var RRe=s(RE);dFe=n(RRe,"STRONG",{});var hMt=s(dFe);l5r=r(hMt,"mpnet"),hMt.forEach(t),i5r=r(RRe," \u2014 "),fU=n(RRe,"A",{href:!0});var pMt=s(fU);d5r=r(pMt,"TFMPNetForQuestionAnswering"),pMt.forEach(t),c5r=r(RRe," (MPNet model)"),RRe.forEach(t),f5r=i(ge),BE=n(ge,"LI",{});var BRe=s(BE);cFe=n(BRe,"STRONG",{});var uMt=s(cFe);m5r=r(uMt,"rembert"),uMt.forEach(t),g5r=r(BRe," \u2014 "),mU=n(BRe,"A",{href:!0});var _Mt=s(mU);h5r=r(_Mt,"TFRemBertForQuestionAnswering"),_Mt.forEach(t),p5r=r(BRe," (RemBERT model)"),BRe.forEach(t),u5r=i(ge),PE=n(ge,"LI",{});var PRe=s(PE);fFe=n(PRe,"STRONG",{});var bMt=s(fFe);_5r=r(bMt,"roberta"),bMt.forEach(t),b5r=r(PRe," \u2014 "),gU=n(PRe,"A",{href:!0});var vMt=s(gU);v5r=r(vMt,"TFRobertaForQuestionAnswering"),vMt.forEach(t),F5r=r(PRe," (RoBERTa model)"),PRe.forEach(t),T5r=i(ge),IE=n(ge,"LI",{});var IRe=s(IE);mFe=n(IRe,"STRONG",{});var FMt=s(mFe);M5r=r(FMt,"roformer"),FMt.forEach(t),E5r=r(IRe," \u2014 "),hU=n(IRe,"A",{href:!0});var TMt=s(hU);C5r=r(TMt,"TFRoFormerForQuestionAnswering"),TMt.forEach(t),w5r=r(IRe," (RoFormer model)"),IRe.forEach(t),A5r=i(ge),qE=n(ge,"LI",{});var qRe=s(qE);gFe=n(qRe,"STRONG",{});var MMt=s(gFe);y5r=r(MMt,"xlm"),MMt.forEach(t),L5r=r(qRe," \u2014 "),pU=n(qRe,"A",{href:!0});var EMt=s(pU);x5r=r(EMt,"TFXLMForQuestionAnsweringSimple"),EMt.forEach(t),$5r=r(qRe," (XLM model)"),qRe.forEach(t),k5r=i(ge),NE=n(ge,"LI",{});var NRe=s(NE);hFe=n(NRe,"STRONG",{});var CMt=s(hFe);S5r=r(CMt,"xlm-roberta"),CMt.forEach(t),R5r=r(NRe," \u2014 "),uU=n(NRe,"A",{href:!0});var wMt=s(uU);B5r=r(wMt,"TFXLMRobertaForQuestionAnswering"),wMt.forEach(t),P5r=r(NRe," (XLM-RoBERTa model)"),NRe.forEach(t),I5r=i(ge),jE=n(ge,"LI",{});var jRe=s(jE);pFe=n(jRe,"STRONG",{});var AMt=s(pFe);q5r=r(AMt,"xlnet"),AMt.forEach(t),N5r=r(jRe," \u2014 "),_U=n(jRe,"A",{href:!0});var yMt=s(_U);j5r=r(yMt,"TFXLNetForQuestionAnsweringSimple"),yMt.forEach(t),D5r=r(jRe," (XLNet model)"),jRe.forEach(t),ge.forEach(t),G5r=i(Sl),T(DE.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),hqe=i(f),Fc=n(f,"H2",{class:!0});var Tje=s(Fc);GE=n(Tje,"A",{id:!0,class:!0,href:!0});var LMt=s(GE);uFe=n(LMt,"SPAN",{});var xMt=s(uFe);T(N8.$$.fragment,xMt),xMt.forEach(t),LMt.forEach(t),O5r=i(Tje),_Fe=n(Tje,"SPAN",{});var $Mt=s(_Fe);V5r=r($Mt,"TFAutoModelForVision2Seq"),$Mt.forEach(t),Tje.forEach(t),pqe=i(f),dr=n(f,"DIV",{class:!0});var Rl=s(dr);T(j8.$$.fragment,Rl),X5r=i(Rl),Tc=n(Rl,"P",{});var CZ=s(Tc);z5r=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bU=n(CZ,"A",{href:!0});var kMt=s(bU);Q5r=r(kMt,"from_pretrained()"),kMt.forEach(t),W5r=r(CZ," class method or the "),vU=n(CZ,"A",{href:!0});var SMt=s(vU);H5r=r(SMt,"from_config()"),SMt.forEach(t),U5r=r(CZ,` class
method.`),CZ.forEach(t),J5r=i(Rl),D8=n(Rl,"P",{});var Mje=s(D8);Y5r=r(Mje,"This class cannot be instantiated directly using "),bFe=n(Mje,"CODE",{});var RMt=s(bFe);K5r=r(RMt,"__init__()"),RMt.forEach(t),Z5r=r(Mje," (throws an error)."),Mje.forEach(t),eCr=i(Rl),qt=n(Rl,"DIV",{class:!0});var b6=s(qt);T(G8.$$.fragment,b6),oCr=i(b6),vFe=n(b6,"P",{});var BMt=s(vFe);rCr=r(BMt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),BMt.forEach(t),tCr=i(b6),Mc=n(b6,"P",{});var wZ=s(Mc);aCr=r(wZ,`Note:
Loading a model from its configuration file does `),FFe=n(wZ,"STRONG",{});var PMt=s(FFe);nCr=r(PMt,"not"),PMt.forEach(t),sCr=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=n(wZ,"A",{href:!0});var IMt=s(FU);lCr=r(IMt,"from_pretrained()"),IMt.forEach(t),iCr=r(wZ," to load the model weights."),wZ.forEach(t),dCr=i(b6),T(OE.$$.fragment,b6),b6.forEach(t),cCr=i(Rl),qr=n(Rl,"DIV",{class:!0});var Bl=s(qr);T(O8.$$.fragment,Bl),fCr=i(Bl),TFe=n(Bl,"P",{});var qMt=s(TFe);mCr=r(qMt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qMt.forEach(t),gCr=i(Bl),fn=n(Bl,"P",{});var v6=s(fn);hCr=r(v6,"The model class to instantiate is selected based on the "),MFe=n(v6,"CODE",{});var NMt=s(MFe);pCr=r(NMt,"model_type"),NMt.forEach(t),uCr=r(v6,` property of the config object (either
passed as an argument or loaded from `),EFe=n(v6,"CODE",{});var jMt=s(EFe);_Cr=r(jMt,"pretrained_model_name_or_path"),jMt.forEach(t),bCr=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=n(v6,"CODE",{});var DMt=s(CFe);vCr=r(DMt,"pretrained_model_name_or_path"),DMt.forEach(t),FCr=r(v6,":"),v6.forEach(t),TCr=i(Bl),wFe=n(Bl,"UL",{});var GMt=s(wFe);VE=n(GMt,"LI",{});var DRe=s(VE);AFe=n(DRe,"STRONG",{});var OMt=s(AFe);MCr=r(OMt,"vision-encoder-decoder"),OMt.forEach(t),ECr=r(DRe," \u2014 "),TU=n(DRe,"A",{href:!0});var VMt=s(TU);CCr=r(VMt,"TFVisionEncoderDecoderModel"),VMt.forEach(t),wCr=r(DRe," (Vision Encoder decoder model)"),DRe.forEach(t),GMt.forEach(t),ACr=i(Bl),T(XE.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),uqe=i(f),Ec=n(f,"H2",{class:!0});var Eje=s(Ec);zE=n(Eje,"A",{id:!0,class:!0,href:!0});var XMt=s(zE);yFe=n(XMt,"SPAN",{});var zMt=s(yFe);T(V8.$$.fragment,zMt),zMt.forEach(t),XMt.forEach(t),yCr=i(Eje),LFe=n(Eje,"SPAN",{});var QMt=s(LFe);LCr=r(QMt,"TFAutoModelForSpeechSeq2Seq"),QMt.forEach(t),Eje.forEach(t),_qe=i(f),cr=n(f,"DIV",{class:!0});var Pl=s(cr);T(X8.$$.fragment,Pl),xCr=i(Pl),Cc=n(Pl,"P",{});var AZ=s(Cc);$Cr=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),MU=n(AZ,"A",{href:!0});var WMt=s(MU);kCr=r(WMt,"from_pretrained()"),WMt.forEach(t),SCr=r(AZ," class method or the "),EU=n(AZ,"A",{href:!0});var HMt=s(EU);RCr=r(HMt,"from_config()"),HMt.forEach(t),BCr=r(AZ,` class
method.`),AZ.forEach(t),PCr=i(Pl),z8=n(Pl,"P",{});var Cje=s(z8);ICr=r(Cje,"This class cannot be instantiated directly using "),xFe=n(Cje,"CODE",{});var UMt=s(xFe);qCr=r(UMt,"__init__()"),UMt.forEach(t),NCr=r(Cje," (throws an error)."),Cje.forEach(t),jCr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var F6=s(Nt);T(Q8.$$.fragment,F6),DCr=i(F6),$Fe=n(F6,"P",{});var JMt=s($Fe);GCr=r(JMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),JMt.forEach(t),OCr=i(F6),wc=n(F6,"P",{});var yZ=s(wc);VCr=r(yZ,`Note:
Loading a model from its configuration file does `),kFe=n(yZ,"STRONG",{});var YMt=s(kFe);XCr=r(YMt,"not"),YMt.forEach(t),zCr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=n(yZ,"A",{href:!0});var KMt=s(CU);QCr=r(KMt,"from_pretrained()"),KMt.forEach(t),WCr=r(yZ," to load the model weights."),yZ.forEach(t),HCr=i(F6),T(QE.$$.fragment,F6),F6.forEach(t),UCr=i(Pl),Nr=n(Pl,"DIV",{class:!0});var Il=s(Nr);T(W8.$$.fragment,Il),JCr=i(Il),SFe=n(Il,"P",{});var ZMt=s(SFe);YCr=r(ZMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ZMt.forEach(t),KCr=i(Il),mn=n(Il,"P",{});var T6=s(mn);ZCr=r(T6,"The model class to instantiate is selected based on the "),RFe=n(T6,"CODE",{});var e4t=s(RFe);ewr=r(e4t,"model_type"),e4t.forEach(t),owr=r(T6,` property of the config object (either
passed as an argument or loaded from `),BFe=n(T6,"CODE",{});var o4t=s(BFe);rwr=r(o4t,"pretrained_model_name_or_path"),o4t.forEach(t),twr=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=n(T6,"CODE",{});var r4t=s(PFe);awr=r(r4t,"pretrained_model_name_or_path"),r4t.forEach(t),nwr=r(T6,":"),T6.forEach(t),swr=i(Il),IFe=n(Il,"UL",{});var t4t=s(IFe);WE=n(t4t,"LI",{});var GRe=s(WE);qFe=n(GRe,"STRONG",{});var a4t=s(qFe);lwr=r(a4t,"speech_to_text"),a4t.forEach(t),iwr=r(GRe," \u2014 "),wU=n(GRe,"A",{href:!0});var n4t=s(wU);dwr=r(n4t,"TFSpeech2TextForConditionalGeneration"),n4t.forEach(t),cwr=r(GRe," (Speech2Text model)"),GRe.forEach(t),t4t.forEach(t),fwr=i(Il),T(HE.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),bqe=i(f),Ac=n(f,"H2",{class:!0});var wje=s(Ac);UE=n(wje,"A",{id:!0,class:!0,href:!0});var s4t=s(UE);NFe=n(s4t,"SPAN",{});var l4t=s(NFe);T(H8.$$.fragment,l4t),l4t.forEach(t),s4t.forEach(t),mwr=i(wje),jFe=n(wje,"SPAN",{});var i4t=s(jFe);gwr=r(i4t,"FlaxAutoModel"),i4t.forEach(t),wje.forEach(t),vqe=i(f),fr=n(f,"DIV",{class:!0});var ql=s(fr);T(U8.$$.fragment,ql),hwr=i(ql),yc=n(ql,"P",{});var LZ=s(yc);pwr=r(LZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),AU=n(LZ,"A",{href:!0});var d4t=s(AU);uwr=r(d4t,"from_pretrained()"),d4t.forEach(t),_wr=r(LZ," class method or the "),yU=n(LZ,"A",{href:!0});var c4t=s(yU);bwr=r(c4t,"from_config()"),c4t.forEach(t),vwr=r(LZ,` class
method.`),LZ.forEach(t),Fwr=i(ql),J8=n(ql,"P",{});var Aje=s(J8);Twr=r(Aje,"This class cannot be instantiated directly using "),DFe=n(Aje,"CODE",{});var f4t=s(DFe);Mwr=r(f4t,"__init__()"),f4t.forEach(t),Ewr=r(Aje," (throws an error)."),Aje.forEach(t),Cwr=i(ql),jt=n(ql,"DIV",{class:!0});var M6=s(jt);T(Y8.$$.fragment,M6),wwr=i(M6),GFe=n(M6,"P",{});var m4t=s(GFe);Awr=r(m4t,"Instantiates one of the base model classes of the library from a configuration."),m4t.forEach(t),ywr=i(M6),Lc=n(M6,"P",{});var xZ=s(Lc);Lwr=r(xZ,`Note:
Loading a model from its configuration file does `),OFe=n(xZ,"STRONG",{});var g4t=s(OFe);xwr=r(g4t,"not"),g4t.forEach(t),$wr=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=n(xZ,"A",{href:!0});var h4t=s(LU);kwr=r(h4t,"from_pretrained()"),h4t.forEach(t),Swr=r(xZ," to load the model weights."),xZ.forEach(t),Rwr=i(M6),T(JE.$$.fragment,M6),M6.forEach(t),Bwr=i(ql),jr=n(ql,"DIV",{class:!0});var Nl=s(jr);T(K8.$$.fragment,Nl),Pwr=i(Nl),VFe=n(Nl,"P",{});var p4t=s(VFe);Iwr=r(p4t,"Instantiate one of the base model classes of the library from a pretrained model."),p4t.forEach(t),qwr=i(Nl),gn=n(Nl,"P",{});var E6=s(gn);Nwr=r(E6,"The model class to instantiate is selected based on the "),XFe=n(E6,"CODE",{});var u4t=s(XFe);jwr=r(u4t,"model_type"),u4t.forEach(t),Dwr=r(E6,` property of the config object (either
passed as an argument or loaded from `),zFe=n(E6,"CODE",{});var _4t=s(zFe);Gwr=r(_4t,"pretrained_model_name_or_path"),_4t.forEach(t),Owr=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=n(E6,"CODE",{});var b4t=s(QFe);Vwr=r(b4t,"pretrained_model_name_or_path"),b4t.forEach(t),Xwr=r(E6,":"),E6.forEach(t),zwr=i(Nl),re=n(Nl,"UL",{});var ne=s(re);YE=n(ne,"LI",{});var ORe=s(YE);WFe=n(ORe,"STRONG",{});var v4t=s(WFe);Qwr=r(v4t,"albert"),v4t.forEach(t),Wwr=r(ORe," \u2014 "),xU=n(ORe,"A",{href:!0});var F4t=s(xU);Hwr=r(F4t,"FlaxAlbertModel"),F4t.forEach(t),Uwr=r(ORe," (ALBERT model)"),ORe.forEach(t),Jwr=i(ne),KE=n(ne,"LI",{});var VRe=s(KE);HFe=n(VRe,"STRONG",{});var T4t=s(HFe);Ywr=r(T4t,"bart"),T4t.forEach(t),Kwr=r(VRe," \u2014 "),$U=n(VRe,"A",{href:!0});var M4t=s($U);Zwr=r(M4t,"FlaxBartModel"),M4t.forEach(t),eAr=r(VRe," (BART model)"),VRe.forEach(t),oAr=i(ne),ZE=n(ne,"LI",{});var XRe=s(ZE);UFe=n(XRe,"STRONG",{});var E4t=s(UFe);rAr=r(E4t,"beit"),E4t.forEach(t),tAr=r(XRe," \u2014 "),kU=n(XRe,"A",{href:!0});var C4t=s(kU);aAr=r(C4t,"FlaxBeitModel"),C4t.forEach(t),nAr=r(XRe," (BEiT model)"),XRe.forEach(t),sAr=i(ne),e5=n(ne,"LI",{});var zRe=s(e5);JFe=n(zRe,"STRONG",{});var w4t=s(JFe);lAr=r(w4t,"bert"),w4t.forEach(t),iAr=r(zRe," \u2014 "),SU=n(zRe,"A",{href:!0});var A4t=s(SU);dAr=r(A4t,"FlaxBertModel"),A4t.forEach(t),cAr=r(zRe," (BERT model)"),zRe.forEach(t),fAr=i(ne),o5=n(ne,"LI",{});var QRe=s(o5);YFe=n(QRe,"STRONG",{});var y4t=s(YFe);mAr=r(y4t,"big_bird"),y4t.forEach(t),gAr=r(QRe," \u2014 "),RU=n(QRe,"A",{href:!0});var L4t=s(RU);hAr=r(L4t,"FlaxBigBirdModel"),L4t.forEach(t),pAr=r(QRe," (BigBird model)"),QRe.forEach(t),uAr=i(ne),r5=n(ne,"LI",{});var WRe=s(r5);KFe=n(WRe,"STRONG",{});var x4t=s(KFe);_Ar=r(x4t,"blenderbot"),x4t.forEach(t),bAr=r(WRe," \u2014 "),BU=n(WRe,"A",{href:!0});var $4t=s(BU);vAr=r($4t,"FlaxBlenderbotModel"),$4t.forEach(t),FAr=r(WRe," (Blenderbot model)"),WRe.forEach(t),TAr=i(ne),t5=n(ne,"LI",{});var HRe=s(t5);ZFe=n(HRe,"STRONG",{});var k4t=s(ZFe);MAr=r(k4t,"blenderbot-small"),k4t.forEach(t),EAr=r(HRe," \u2014 "),PU=n(HRe,"A",{href:!0});var S4t=s(PU);CAr=r(S4t,"FlaxBlenderbotSmallModel"),S4t.forEach(t),wAr=r(HRe," (BlenderbotSmall model)"),HRe.forEach(t),AAr=i(ne),a5=n(ne,"LI",{});var URe=s(a5);eTe=n(URe,"STRONG",{});var R4t=s(eTe);yAr=r(R4t,"clip"),R4t.forEach(t),LAr=r(URe," \u2014 "),IU=n(URe,"A",{href:!0});var B4t=s(IU);xAr=r(B4t,"FlaxCLIPModel"),B4t.forEach(t),$Ar=r(URe," (CLIP model)"),URe.forEach(t),kAr=i(ne),n5=n(ne,"LI",{});var JRe=s(n5);oTe=n(JRe,"STRONG",{});var P4t=s(oTe);SAr=r(P4t,"distilbert"),P4t.forEach(t),RAr=r(JRe," \u2014 "),qU=n(JRe,"A",{href:!0});var I4t=s(qU);BAr=r(I4t,"FlaxDistilBertModel"),I4t.forEach(t),PAr=r(JRe," (DistilBERT model)"),JRe.forEach(t),IAr=i(ne),s5=n(ne,"LI",{});var YRe=s(s5);rTe=n(YRe,"STRONG",{});var q4t=s(rTe);qAr=r(q4t,"electra"),q4t.forEach(t),NAr=r(YRe," \u2014 "),NU=n(YRe,"A",{href:!0});var N4t=s(NU);jAr=r(N4t,"FlaxElectraModel"),N4t.forEach(t),DAr=r(YRe," (ELECTRA model)"),YRe.forEach(t),GAr=i(ne),l5=n(ne,"LI",{});var KRe=s(l5);tTe=n(KRe,"STRONG",{});var j4t=s(tTe);OAr=r(j4t,"gpt2"),j4t.forEach(t),VAr=r(KRe," \u2014 "),jU=n(KRe,"A",{href:!0});var D4t=s(jU);XAr=r(D4t,"FlaxGPT2Model"),D4t.forEach(t),zAr=r(KRe," (OpenAI GPT-2 model)"),KRe.forEach(t),QAr=i(ne),i5=n(ne,"LI",{});var ZRe=s(i5);aTe=n(ZRe,"STRONG",{});var G4t=s(aTe);WAr=r(G4t,"gpt_neo"),G4t.forEach(t),HAr=r(ZRe," \u2014 "),DU=n(ZRe,"A",{href:!0});var O4t=s(DU);UAr=r(O4t,"FlaxGPTNeoModel"),O4t.forEach(t),JAr=r(ZRe," (GPT Neo model)"),ZRe.forEach(t),YAr=i(ne),d5=n(ne,"LI",{});var eBe=s(d5);nTe=n(eBe,"STRONG",{});var V4t=s(nTe);KAr=r(V4t,"gptj"),V4t.forEach(t),ZAr=r(eBe," \u2014 "),GU=n(eBe,"A",{href:!0});var X4t=s(GU);e6r=r(X4t,"FlaxGPTJModel"),X4t.forEach(t),o6r=r(eBe," (GPT-J model)"),eBe.forEach(t),r6r=i(ne),c5=n(ne,"LI",{});var oBe=s(c5);sTe=n(oBe,"STRONG",{});var z4t=s(sTe);t6r=r(z4t,"marian"),z4t.forEach(t),a6r=r(oBe," \u2014 "),OU=n(oBe,"A",{href:!0});var Q4t=s(OU);n6r=r(Q4t,"FlaxMarianModel"),Q4t.forEach(t),s6r=r(oBe," (Marian model)"),oBe.forEach(t),l6r=i(ne),f5=n(ne,"LI",{});var rBe=s(f5);lTe=n(rBe,"STRONG",{});var W4t=s(lTe);i6r=r(W4t,"mbart"),W4t.forEach(t),d6r=r(rBe," \u2014 "),VU=n(rBe,"A",{href:!0});var H4t=s(VU);c6r=r(H4t,"FlaxMBartModel"),H4t.forEach(t),f6r=r(rBe," (mBART model)"),rBe.forEach(t),m6r=i(ne),m5=n(ne,"LI",{});var tBe=s(m5);iTe=n(tBe,"STRONG",{});var U4t=s(iTe);g6r=r(U4t,"mt5"),U4t.forEach(t),h6r=r(tBe," \u2014 "),XU=n(tBe,"A",{href:!0});var J4t=s(XU);p6r=r(J4t,"FlaxMT5Model"),J4t.forEach(t),u6r=r(tBe," (mT5 model)"),tBe.forEach(t),_6r=i(ne),g5=n(ne,"LI",{});var aBe=s(g5);dTe=n(aBe,"STRONG",{});var Y4t=s(dTe);b6r=r(Y4t,"pegasus"),Y4t.forEach(t),v6r=r(aBe," \u2014 "),zU=n(aBe,"A",{href:!0});var K4t=s(zU);F6r=r(K4t,"FlaxPegasusModel"),K4t.forEach(t),T6r=r(aBe," (Pegasus model)"),aBe.forEach(t),M6r=i(ne),h5=n(ne,"LI",{});var nBe=s(h5);cTe=n(nBe,"STRONG",{});var Z4t=s(cTe);E6r=r(Z4t,"roberta"),Z4t.forEach(t),C6r=r(nBe," \u2014 "),QU=n(nBe,"A",{href:!0});var eEt=s(QU);w6r=r(eEt,"FlaxRobertaModel"),eEt.forEach(t),A6r=r(nBe," (RoBERTa model)"),nBe.forEach(t),y6r=i(ne),p5=n(ne,"LI",{});var sBe=s(p5);fTe=n(sBe,"STRONG",{});var oEt=s(fTe);L6r=r(oEt,"roformer"),oEt.forEach(t),x6r=r(sBe," \u2014 "),WU=n(sBe,"A",{href:!0});var rEt=s(WU);$6r=r(rEt,"FlaxRoFormerModel"),rEt.forEach(t),k6r=r(sBe," (RoFormer model)"),sBe.forEach(t),S6r=i(ne),u5=n(ne,"LI",{});var lBe=s(u5);mTe=n(lBe,"STRONG",{});var tEt=s(mTe);R6r=r(tEt,"t5"),tEt.forEach(t),B6r=r(lBe," \u2014 "),HU=n(lBe,"A",{href:!0});var aEt=s(HU);P6r=r(aEt,"FlaxT5Model"),aEt.forEach(t),I6r=r(lBe," (T5 model)"),lBe.forEach(t),q6r=i(ne),_5=n(ne,"LI",{});var iBe=s(_5);gTe=n(iBe,"STRONG",{});var nEt=s(gTe);N6r=r(nEt,"vision-text-dual-encoder"),nEt.forEach(t),j6r=r(iBe," \u2014 "),UU=n(iBe,"A",{href:!0});var sEt=s(UU);D6r=r(sEt,"FlaxVisionTextDualEncoderModel"),sEt.forEach(t),G6r=r(iBe," (VisionTextDualEncoder model)"),iBe.forEach(t),O6r=i(ne),b5=n(ne,"LI",{});var dBe=s(b5);hTe=n(dBe,"STRONG",{});var lEt=s(hTe);V6r=r(lEt,"vit"),lEt.forEach(t),X6r=r(dBe," \u2014 "),JU=n(dBe,"A",{href:!0});var iEt=s(JU);z6r=r(iEt,"FlaxViTModel"),iEt.forEach(t),Q6r=r(dBe," (ViT model)"),dBe.forEach(t),W6r=i(ne),v5=n(ne,"LI",{});var cBe=s(v5);pTe=n(cBe,"STRONG",{});var dEt=s(pTe);H6r=r(dEt,"wav2vec2"),dEt.forEach(t),U6r=r(cBe," \u2014 "),YU=n(cBe,"A",{href:!0});var cEt=s(YU);J6r=r(cEt,"FlaxWav2Vec2Model"),cEt.forEach(t),Y6r=r(cBe," (Wav2Vec2 model)"),cBe.forEach(t),K6r=i(ne),F5=n(ne,"LI",{});var fBe=s(F5);uTe=n(fBe,"STRONG",{});var fEt=s(uTe);Z6r=r(fEt,"xglm"),fEt.forEach(t),e0r=r(fBe," \u2014 "),KU=n(fBe,"A",{href:!0});var mEt=s(KU);o0r=r(mEt,"FlaxXGLMModel"),mEt.forEach(t),r0r=r(fBe," (XGLM model)"),fBe.forEach(t),t0r=i(ne),T5=n(ne,"LI",{});var mBe=s(T5);_Te=n(mBe,"STRONG",{});var gEt=s(_Te);a0r=r(gEt,"xlm-roberta"),gEt.forEach(t),n0r=r(mBe," \u2014 "),ZU=n(mBe,"A",{href:!0});var hEt=s(ZU);s0r=r(hEt,"FlaxXLMRobertaModel"),hEt.forEach(t),l0r=r(mBe," (XLM-RoBERTa model)"),mBe.forEach(t),ne.forEach(t),i0r=i(Nl),T(M5.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),Fqe=i(f),xc=n(f,"H2",{class:!0});var yje=s(xc);E5=n(yje,"A",{id:!0,class:!0,href:!0});var pEt=s(E5);bTe=n(pEt,"SPAN",{});var uEt=s(bTe);T(Z8.$$.fragment,uEt),uEt.forEach(t),pEt.forEach(t),d0r=i(yje),vTe=n(yje,"SPAN",{});var _Et=s(vTe);c0r=r(_Et,"FlaxAutoModelForCausalLM"),_Et.forEach(t),yje.forEach(t),Tqe=i(f),mr=n(f,"DIV",{class:!0});var jl=s(mr);T(ex.$$.fragment,jl),f0r=i(jl),$c=n(jl,"P",{});var $Z=s($c);m0r=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),eJ=n($Z,"A",{href:!0});var bEt=s(eJ);g0r=r(bEt,"from_pretrained()"),bEt.forEach(t),h0r=r($Z," class method or the "),oJ=n($Z,"A",{href:!0});var vEt=s(oJ);p0r=r(vEt,"from_config()"),vEt.forEach(t),u0r=r($Z,` class
method.`),$Z.forEach(t),_0r=i(jl),ox=n(jl,"P",{});var Lje=s(ox);b0r=r(Lje,"This class cannot be instantiated directly using "),FTe=n(Lje,"CODE",{});var FEt=s(FTe);v0r=r(FEt,"__init__()"),FEt.forEach(t),F0r=r(Lje," (throws an error)."),Lje.forEach(t),T0r=i(jl),Dt=n(jl,"DIV",{class:!0});var C6=s(Dt);T(rx.$$.fragment,C6),M0r=i(C6),TTe=n(C6,"P",{});var TEt=s(TTe);E0r=r(TEt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),TEt.forEach(t),C0r=i(C6),kc=n(C6,"P",{});var kZ=s(kc);w0r=r(kZ,`Note:
Loading a model from its configuration file does `),MTe=n(kZ,"STRONG",{});var MEt=s(MTe);A0r=r(MEt,"not"),MEt.forEach(t),y0r=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=n(kZ,"A",{href:!0});var EEt=s(rJ);L0r=r(EEt,"from_pretrained()"),EEt.forEach(t),x0r=r(kZ," to load the model weights."),kZ.forEach(t),$0r=i(C6),T(C5.$$.fragment,C6),C6.forEach(t),k0r=i(jl),Dr=n(jl,"DIV",{class:!0});var Dl=s(Dr);T(tx.$$.fragment,Dl),S0r=i(Dl),ETe=n(Dl,"P",{});var CEt=s(ETe);R0r=r(CEt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),CEt.forEach(t),B0r=i(Dl),hn=n(Dl,"P",{});var w6=s(hn);P0r=r(w6,"The model class to instantiate is selected based on the "),CTe=n(w6,"CODE",{});var wEt=s(CTe);I0r=r(wEt,"model_type"),wEt.forEach(t),q0r=r(w6,` property of the config object (either
passed as an argument or loaded from `),wTe=n(w6,"CODE",{});var AEt=s(wTe);N0r=r(AEt,"pretrained_model_name_or_path"),AEt.forEach(t),j0r=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ATe=n(w6,"CODE",{});var yEt=s(ATe);D0r=r(yEt,"pretrained_model_name_or_path"),yEt.forEach(t),G0r=r(w6,":"),w6.forEach(t),O0r=i(Dl),ke=n(Dl,"UL",{});var Oe=s(ke);w5=n(Oe,"LI",{});var gBe=s(w5);yTe=n(gBe,"STRONG",{});var LEt=s(yTe);V0r=r(LEt,"bart"),LEt.forEach(t),X0r=r(gBe," \u2014 "),tJ=n(gBe,"A",{href:!0});var xEt=s(tJ);z0r=r(xEt,"FlaxBartForCausalLM"),xEt.forEach(t),Q0r=r(gBe," (BART model)"),gBe.forEach(t),W0r=i(Oe),A5=n(Oe,"LI",{});var hBe=s(A5);LTe=n(hBe,"STRONG",{});var $Et=s(LTe);H0r=r($Et,"bert"),$Et.forEach(t),U0r=r(hBe," \u2014 "),aJ=n(hBe,"A",{href:!0});var kEt=s(aJ);J0r=r(kEt,"FlaxBertForCausalLM"),kEt.forEach(t),Y0r=r(hBe," (BERT model)"),hBe.forEach(t),K0r=i(Oe),y5=n(Oe,"LI",{});var pBe=s(y5);xTe=n(pBe,"STRONG",{});var SEt=s(xTe);Z0r=r(SEt,"big_bird"),SEt.forEach(t),eyr=r(pBe," \u2014 "),nJ=n(pBe,"A",{href:!0});var REt=s(nJ);oyr=r(REt,"FlaxBigBirdForCausalLM"),REt.forEach(t),ryr=r(pBe," (BigBird model)"),pBe.forEach(t),tyr=i(Oe),L5=n(Oe,"LI",{});var uBe=s(L5);$Te=n(uBe,"STRONG",{});var BEt=s($Te);ayr=r(BEt,"electra"),BEt.forEach(t),nyr=r(uBe," \u2014 "),sJ=n(uBe,"A",{href:!0});var PEt=s(sJ);syr=r(PEt,"FlaxElectraForCausalLM"),PEt.forEach(t),lyr=r(uBe," (ELECTRA model)"),uBe.forEach(t),iyr=i(Oe),x5=n(Oe,"LI",{});var _Be=s(x5);kTe=n(_Be,"STRONG",{});var IEt=s(kTe);dyr=r(IEt,"gpt2"),IEt.forEach(t),cyr=r(_Be," \u2014 "),lJ=n(_Be,"A",{href:!0});var qEt=s(lJ);fyr=r(qEt,"FlaxGPT2LMHeadModel"),qEt.forEach(t),myr=r(_Be," (OpenAI GPT-2 model)"),_Be.forEach(t),gyr=i(Oe),$5=n(Oe,"LI",{});var bBe=s($5);STe=n(bBe,"STRONG",{});var NEt=s(STe);hyr=r(NEt,"gpt_neo"),NEt.forEach(t),pyr=r(bBe," \u2014 "),iJ=n(bBe,"A",{href:!0});var jEt=s(iJ);uyr=r(jEt,"FlaxGPTNeoForCausalLM"),jEt.forEach(t),_yr=r(bBe," (GPT Neo model)"),bBe.forEach(t),byr=i(Oe),k5=n(Oe,"LI",{});var vBe=s(k5);RTe=n(vBe,"STRONG",{});var DEt=s(RTe);vyr=r(DEt,"gptj"),DEt.forEach(t),Fyr=r(vBe," \u2014 "),dJ=n(vBe,"A",{href:!0});var GEt=s(dJ);Tyr=r(GEt,"FlaxGPTJForCausalLM"),GEt.forEach(t),Myr=r(vBe," (GPT-J model)"),vBe.forEach(t),Eyr=i(Oe),S5=n(Oe,"LI",{});var FBe=s(S5);BTe=n(FBe,"STRONG",{});var OEt=s(BTe);Cyr=r(OEt,"roberta"),OEt.forEach(t),wyr=r(FBe," \u2014 "),cJ=n(FBe,"A",{href:!0});var VEt=s(cJ);Ayr=r(VEt,"FlaxRobertaForCausalLM"),VEt.forEach(t),yyr=r(FBe," (RoBERTa model)"),FBe.forEach(t),Lyr=i(Oe),R5=n(Oe,"LI",{});var TBe=s(R5);PTe=n(TBe,"STRONG",{});var XEt=s(PTe);xyr=r(XEt,"xglm"),XEt.forEach(t),$yr=r(TBe," \u2014 "),fJ=n(TBe,"A",{href:!0});var zEt=s(fJ);kyr=r(zEt,"FlaxXGLMForCausalLM"),zEt.forEach(t),Syr=r(TBe," (XGLM model)"),TBe.forEach(t),Oe.forEach(t),Ryr=i(Dl),T(B5.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),Mqe=i(f),Sc=n(f,"H2",{class:!0});var xje=s(Sc);P5=n(xje,"A",{id:!0,class:!0,href:!0});var QEt=s(P5);ITe=n(QEt,"SPAN",{});var WEt=s(ITe);T(ax.$$.fragment,WEt),WEt.forEach(t),QEt.forEach(t),Byr=i(xje),qTe=n(xje,"SPAN",{});var HEt=s(qTe);Pyr=r(HEt,"FlaxAutoModelForPreTraining"),HEt.forEach(t),xje.forEach(t),Eqe=i(f),gr=n(f,"DIV",{class:!0});var Gl=s(gr);T(nx.$$.fragment,Gl),Iyr=i(Gl),Rc=n(Gl,"P",{});var SZ=s(Rc);qyr=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),mJ=n(SZ,"A",{href:!0});var UEt=s(mJ);Nyr=r(UEt,"from_pretrained()"),UEt.forEach(t),jyr=r(SZ," class method or the "),gJ=n(SZ,"A",{href:!0});var JEt=s(gJ);Dyr=r(JEt,"from_config()"),JEt.forEach(t),Gyr=r(SZ,` class
method.`),SZ.forEach(t),Oyr=i(Gl),sx=n(Gl,"P",{});var $je=s(sx);Vyr=r($je,"This class cannot be instantiated directly using "),NTe=n($je,"CODE",{});var YEt=s(NTe);Xyr=r(YEt,"__init__()"),YEt.forEach(t),zyr=r($je," (throws an error)."),$je.forEach(t),Qyr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var A6=s(Gt);T(lx.$$.fragment,A6),Wyr=i(A6),jTe=n(A6,"P",{});var KEt=s(jTe);Hyr=r(KEt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),KEt.forEach(t),Uyr=i(A6),Bc=n(A6,"P",{});var RZ=s(Bc);Jyr=r(RZ,`Note:
Loading a model from its configuration file does `),DTe=n(RZ,"STRONG",{});var ZEt=s(DTe);Yyr=r(ZEt,"not"),ZEt.forEach(t),Kyr=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=n(RZ,"A",{href:!0});var e5t=s(hJ);Zyr=r(e5t,"from_pretrained()"),e5t.forEach(t),eLr=r(RZ," to load the model weights."),RZ.forEach(t),oLr=i(A6),T(I5.$$.fragment,A6),A6.forEach(t),rLr=i(Gl),Gr=n(Gl,"DIV",{class:!0});var Ol=s(Gr);T(ix.$$.fragment,Ol),tLr=i(Ol),GTe=n(Ol,"P",{});var o5t=s(GTe);aLr=r(o5t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),o5t.forEach(t),nLr=i(Ol),pn=n(Ol,"P",{});var y6=s(pn);sLr=r(y6,"The model class to instantiate is selected based on the "),OTe=n(y6,"CODE",{});var r5t=s(OTe);lLr=r(r5t,"model_type"),r5t.forEach(t),iLr=r(y6,` property of the config object (either
passed as an argument or loaded from `),VTe=n(y6,"CODE",{});var t5t=s(VTe);dLr=r(t5t,"pretrained_model_name_or_path"),t5t.forEach(t),cLr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=n(y6,"CODE",{});var a5t=s(XTe);fLr=r(a5t,"pretrained_model_name_or_path"),a5t.forEach(t),mLr=r(y6,":"),y6.forEach(t),gLr=i(Ol),Me=n(Ol,"UL",{});var we=s(Me);q5=n(we,"LI",{});var MBe=s(q5);zTe=n(MBe,"STRONG",{});var n5t=s(zTe);hLr=r(n5t,"albert"),n5t.forEach(t),pLr=r(MBe," \u2014 "),pJ=n(MBe,"A",{href:!0});var s5t=s(pJ);uLr=r(s5t,"FlaxAlbertForPreTraining"),s5t.forEach(t),_Lr=r(MBe," (ALBERT model)"),MBe.forEach(t),bLr=i(we),N5=n(we,"LI",{});var EBe=s(N5);QTe=n(EBe,"STRONG",{});var l5t=s(QTe);vLr=r(l5t,"bart"),l5t.forEach(t),FLr=r(EBe," \u2014 "),uJ=n(EBe,"A",{href:!0});var i5t=s(uJ);TLr=r(i5t,"FlaxBartForConditionalGeneration"),i5t.forEach(t),MLr=r(EBe," (BART model)"),EBe.forEach(t),ELr=i(we),j5=n(we,"LI",{});var CBe=s(j5);WTe=n(CBe,"STRONG",{});var d5t=s(WTe);CLr=r(d5t,"bert"),d5t.forEach(t),wLr=r(CBe," \u2014 "),_J=n(CBe,"A",{href:!0});var c5t=s(_J);ALr=r(c5t,"FlaxBertForPreTraining"),c5t.forEach(t),yLr=r(CBe," (BERT model)"),CBe.forEach(t),LLr=i(we),D5=n(we,"LI",{});var wBe=s(D5);HTe=n(wBe,"STRONG",{});var f5t=s(HTe);xLr=r(f5t,"big_bird"),f5t.forEach(t),$Lr=r(wBe," \u2014 "),bJ=n(wBe,"A",{href:!0});var m5t=s(bJ);kLr=r(m5t,"FlaxBigBirdForPreTraining"),m5t.forEach(t),SLr=r(wBe," (BigBird model)"),wBe.forEach(t),RLr=i(we),G5=n(we,"LI",{});var ABe=s(G5);UTe=n(ABe,"STRONG",{});var g5t=s(UTe);BLr=r(g5t,"electra"),g5t.forEach(t),PLr=r(ABe," \u2014 "),vJ=n(ABe,"A",{href:!0});var h5t=s(vJ);ILr=r(h5t,"FlaxElectraForPreTraining"),h5t.forEach(t),qLr=r(ABe," (ELECTRA model)"),ABe.forEach(t),NLr=i(we),O5=n(we,"LI",{});var yBe=s(O5);JTe=n(yBe,"STRONG",{});var p5t=s(JTe);jLr=r(p5t,"mbart"),p5t.forEach(t),DLr=r(yBe," \u2014 "),FJ=n(yBe,"A",{href:!0});var u5t=s(FJ);GLr=r(u5t,"FlaxMBartForConditionalGeneration"),u5t.forEach(t),OLr=r(yBe," (mBART model)"),yBe.forEach(t),VLr=i(we),V5=n(we,"LI",{});var LBe=s(V5);YTe=n(LBe,"STRONG",{});var _5t=s(YTe);XLr=r(_5t,"mt5"),_5t.forEach(t),zLr=r(LBe," \u2014 "),TJ=n(LBe,"A",{href:!0});var b5t=s(TJ);QLr=r(b5t,"FlaxMT5ForConditionalGeneration"),b5t.forEach(t),WLr=r(LBe," (mT5 model)"),LBe.forEach(t),HLr=i(we),X5=n(we,"LI",{});var xBe=s(X5);KTe=n(xBe,"STRONG",{});var v5t=s(KTe);ULr=r(v5t,"roberta"),v5t.forEach(t),JLr=r(xBe," \u2014 "),MJ=n(xBe,"A",{href:!0});var F5t=s(MJ);YLr=r(F5t,"FlaxRobertaForMaskedLM"),F5t.forEach(t),KLr=r(xBe," (RoBERTa model)"),xBe.forEach(t),ZLr=i(we),z5=n(we,"LI",{});var $Be=s(z5);ZTe=n($Be,"STRONG",{});var T5t=s(ZTe);e8r=r(T5t,"roformer"),T5t.forEach(t),o8r=r($Be," \u2014 "),EJ=n($Be,"A",{href:!0});var M5t=s(EJ);r8r=r(M5t,"FlaxRoFormerForMaskedLM"),M5t.forEach(t),t8r=r($Be," (RoFormer model)"),$Be.forEach(t),a8r=i(we),Q5=n(we,"LI",{});var kBe=s(Q5);e7e=n(kBe,"STRONG",{});var E5t=s(e7e);n8r=r(E5t,"t5"),E5t.forEach(t),s8r=r(kBe," \u2014 "),CJ=n(kBe,"A",{href:!0});var C5t=s(CJ);l8r=r(C5t,"FlaxT5ForConditionalGeneration"),C5t.forEach(t),i8r=r(kBe," (T5 model)"),kBe.forEach(t),d8r=i(we),W5=n(we,"LI",{});var SBe=s(W5);o7e=n(SBe,"STRONG",{});var w5t=s(o7e);c8r=r(w5t,"wav2vec2"),w5t.forEach(t),f8r=r(SBe," \u2014 "),wJ=n(SBe,"A",{href:!0});var A5t=s(wJ);m8r=r(A5t,"FlaxWav2Vec2ForPreTraining"),A5t.forEach(t),g8r=r(SBe," (Wav2Vec2 model)"),SBe.forEach(t),h8r=i(we),H5=n(we,"LI",{});var RBe=s(H5);r7e=n(RBe,"STRONG",{});var y5t=s(r7e);p8r=r(y5t,"xlm-roberta"),y5t.forEach(t),u8r=r(RBe," \u2014 "),AJ=n(RBe,"A",{href:!0});var L5t=s(AJ);_8r=r(L5t,"FlaxXLMRobertaForMaskedLM"),L5t.forEach(t),b8r=r(RBe," (XLM-RoBERTa model)"),RBe.forEach(t),we.forEach(t),v8r=i(Ol),T(U5.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),Cqe=i(f),Pc=n(f,"H2",{class:!0});var kje=s(Pc);J5=n(kje,"A",{id:!0,class:!0,href:!0});var x5t=s(J5);t7e=n(x5t,"SPAN",{});var $5t=s(t7e);T(dx.$$.fragment,$5t),$5t.forEach(t),x5t.forEach(t),F8r=i(kje),a7e=n(kje,"SPAN",{});var k5t=s(a7e);T8r=r(k5t,"FlaxAutoModelForMaskedLM"),k5t.forEach(t),kje.forEach(t),wqe=i(f),hr=n(f,"DIV",{class:!0});var Vl=s(hr);T(cx.$$.fragment,Vl),M8r=i(Vl),Ic=n(Vl,"P",{});var BZ=s(Ic);E8r=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),yJ=n(BZ,"A",{href:!0});var S5t=s(yJ);C8r=r(S5t,"from_pretrained()"),S5t.forEach(t),w8r=r(BZ," class method or the "),LJ=n(BZ,"A",{href:!0});var R5t=s(LJ);A8r=r(R5t,"from_config()"),R5t.forEach(t),y8r=r(BZ,` class
method.`),BZ.forEach(t),L8r=i(Vl),fx=n(Vl,"P",{});var Sje=s(fx);x8r=r(Sje,"This class cannot be instantiated directly using "),n7e=n(Sje,"CODE",{});var B5t=s(n7e);$8r=r(B5t,"__init__()"),B5t.forEach(t),k8r=r(Sje," (throws an error)."),Sje.forEach(t),S8r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var L6=s(Ot);T(mx.$$.fragment,L6),R8r=i(L6),s7e=n(L6,"P",{});var P5t=s(s7e);B8r=r(P5t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),P5t.forEach(t),P8r=i(L6),qc=n(L6,"P",{});var PZ=s(qc);I8r=r(PZ,`Note:
Loading a model from its configuration file does `),l7e=n(PZ,"STRONG",{});var I5t=s(l7e);q8r=r(I5t,"not"),I5t.forEach(t),N8r=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=n(PZ,"A",{href:!0});var q5t=s(xJ);j8r=r(q5t,"from_pretrained()"),q5t.forEach(t),D8r=r(PZ," to load the model weights."),PZ.forEach(t),G8r=i(L6),T(Y5.$$.fragment,L6),L6.forEach(t),O8r=i(Vl),Or=n(Vl,"DIV",{class:!0});var Xl=s(Or);T(gx.$$.fragment,Xl),V8r=i(Xl),i7e=n(Xl,"P",{});var N5t=s(i7e);X8r=r(N5t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),N5t.forEach(t),z8r=i(Xl),un=n(Xl,"P",{});var x6=s(un);Q8r=r(x6,"The model class to instantiate is selected based on the "),d7e=n(x6,"CODE",{});var j5t=s(d7e);W8r=r(j5t,"model_type"),j5t.forEach(t),H8r=r(x6,` property of the config object (either
passed as an argument or loaded from `),c7e=n(x6,"CODE",{});var D5t=s(c7e);U8r=r(D5t,"pretrained_model_name_or_path"),D5t.forEach(t),J8r=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f7e=n(x6,"CODE",{});var G5t=s(f7e);Y8r=r(G5t,"pretrained_model_name_or_path"),G5t.forEach(t),K8r=r(x6,":"),x6.forEach(t),Z8r=i(Xl),Le=n(Xl,"UL",{});var Be=s(Le);K5=n(Be,"LI",{});var BBe=s(K5);m7e=n(BBe,"STRONG",{});var O5t=s(m7e);exr=r(O5t,"albert"),O5t.forEach(t),oxr=r(BBe," \u2014 "),$J=n(BBe,"A",{href:!0});var V5t=s($J);rxr=r(V5t,"FlaxAlbertForMaskedLM"),V5t.forEach(t),txr=r(BBe," (ALBERT model)"),BBe.forEach(t),axr=i(Be),Z5=n(Be,"LI",{});var PBe=s(Z5);g7e=n(PBe,"STRONG",{});var X5t=s(g7e);nxr=r(X5t,"bart"),X5t.forEach(t),sxr=r(PBe," \u2014 "),kJ=n(PBe,"A",{href:!0});var z5t=s(kJ);lxr=r(z5t,"FlaxBartForConditionalGeneration"),z5t.forEach(t),ixr=r(PBe," (BART model)"),PBe.forEach(t),dxr=i(Be),eC=n(Be,"LI",{});var IBe=s(eC);h7e=n(IBe,"STRONG",{});var Q5t=s(h7e);cxr=r(Q5t,"bert"),Q5t.forEach(t),fxr=r(IBe," \u2014 "),SJ=n(IBe,"A",{href:!0});var W5t=s(SJ);mxr=r(W5t,"FlaxBertForMaskedLM"),W5t.forEach(t),gxr=r(IBe," (BERT model)"),IBe.forEach(t),hxr=i(Be),oC=n(Be,"LI",{});var qBe=s(oC);p7e=n(qBe,"STRONG",{});var H5t=s(p7e);pxr=r(H5t,"big_bird"),H5t.forEach(t),uxr=r(qBe," \u2014 "),RJ=n(qBe,"A",{href:!0});var U5t=s(RJ);_xr=r(U5t,"FlaxBigBirdForMaskedLM"),U5t.forEach(t),bxr=r(qBe," (BigBird model)"),qBe.forEach(t),vxr=i(Be),rC=n(Be,"LI",{});var NBe=s(rC);u7e=n(NBe,"STRONG",{});var J5t=s(u7e);Fxr=r(J5t,"distilbert"),J5t.forEach(t),Txr=r(NBe," \u2014 "),BJ=n(NBe,"A",{href:!0});var Y5t=s(BJ);Mxr=r(Y5t,"FlaxDistilBertForMaskedLM"),Y5t.forEach(t),Exr=r(NBe," (DistilBERT model)"),NBe.forEach(t),Cxr=i(Be),tC=n(Be,"LI",{});var jBe=s(tC);_7e=n(jBe,"STRONG",{});var K5t=s(_7e);wxr=r(K5t,"electra"),K5t.forEach(t),Axr=r(jBe," \u2014 "),PJ=n(jBe,"A",{href:!0});var Z5t=s(PJ);yxr=r(Z5t,"FlaxElectraForMaskedLM"),Z5t.forEach(t),Lxr=r(jBe," (ELECTRA model)"),jBe.forEach(t),xxr=i(Be),aC=n(Be,"LI",{});var DBe=s(aC);b7e=n(DBe,"STRONG",{});var eCt=s(b7e);$xr=r(eCt,"mbart"),eCt.forEach(t),kxr=r(DBe," \u2014 "),IJ=n(DBe,"A",{href:!0});var oCt=s(IJ);Sxr=r(oCt,"FlaxMBartForConditionalGeneration"),oCt.forEach(t),Rxr=r(DBe," (mBART model)"),DBe.forEach(t),Bxr=i(Be),nC=n(Be,"LI",{});var GBe=s(nC);v7e=n(GBe,"STRONG",{});var rCt=s(v7e);Pxr=r(rCt,"roberta"),rCt.forEach(t),Ixr=r(GBe," \u2014 "),qJ=n(GBe,"A",{href:!0});var tCt=s(qJ);qxr=r(tCt,"FlaxRobertaForMaskedLM"),tCt.forEach(t),Nxr=r(GBe," (RoBERTa model)"),GBe.forEach(t),jxr=i(Be),sC=n(Be,"LI",{});var OBe=s(sC);F7e=n(OBe,"STRONG",{});var aCt=s(F7e);Dxr=r(aCt,"roformer"),aCt.forEach(t),Gxr=r(OBe," \u2014 "),NJ=n(OBe,"A",{href:!0});var nCt=s(NJ);Oxr=r(nCt,"FlaxRoFormerForMaskedLM"),nCt.forEach(t),Vxr=r(OBe," (RoFormer model)"),OBe.forEach(t),Xxr=i(Be),lC=n(Be,"LI",{});var VBe=s(lC);T7e=n(VBe,"STRONG",{});var sCt=s(T7e);zxr=r(sCt,"xlm-roberta"),sCt.forEach(t),Qxr=r(VBe," \u2014 "),jJ=n(VBe,"A",{href:!0});var lCt=s(jJ);Wxr=r(lCt,"FlaxXLMRobertaForMaskedLM"),lCt.forEach(t),Hxr=r(VBe," (XLM-RoBERTa model)"),VBe.forEach(t),Be.forEach(t),Uxr=i(Xl),T(iC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),Aqe=i(f),Nc=n(f,"H2",{class:!0});var Rje=s(Nc);dC=n(Rje,"A",{id:!0,class:!0,href:!0});var iCt=s(dC);M7e=n(iCt,"SPAN",{});var dCt=s(M7e);T(hx.$$.fragment,dCt),dCt.forEach(t),iCt.forEach(t),Jxr=i(Rje),E7e=n(Rje,"SPAN",{});var cCt=s(E7e);Yxr=r(cCt,"FlaxAutoModelForSeq2SeqLM"),cCt.forEach(t),Rje.forEach(t),yqe=i(f),pr=n(f,"DIV",{class:!0});var zl=s(pr);T(px.$$.fragment,zl),Kxr=i(zl),jc=n(zl,"P",{});var IZ=s(jc);Zxr=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),DJ=n(IZ,"A",{href:!0});var fCt=s(DJ);e9r=r(fCt,"from_pretrained()"),fCt.forEach(t),o9r=r(IZ," class method or the "),GJ=n(IZ,"A",{href:!0});var mCt=s(GJ);r9r=r(mCt,"from_config()"),mCt.forEach(t),t9r=r(IZ,` class
method.`),IZ.forEach(t),a9r=i(zl),ux=n(zl,"P",{});var Bje=s(ux);n9r=r(Bje,"This class cannot be instantiated directly using "),C7e=n(Bje,"CODE",{});var gCt=s(C7e);s9r=r(gCt,"__init__()"),gCt.forEach(t),l9r=r(Bje," (throws an error)."),Bje.forEach(t),i9r=i(zl),Vt=n(zl,"DIV",{class:!0});var $6=s(Vt);T(_x.$$.fragment,$6),d9r=i($6),w7e=n($6,"P",{});var hCt=s(w7e);c9r=r(hCt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hCt.forEach(t),f9r=i($6),Dc=n($6,"P",{});var qZ=s(Dc);m9r=r(qZ,`Note:
Loading a model from its configuration file does `),A7e=n(qZ,"STRONG",{});var pCt=s(A7e);g9r=r(pCt,"not"),pCt.forEach(t),h9r=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=n(qZ,"A",{href:!0});var uCt=s(OJ);p9r=r(uCt,"from_pretrained()"),uCt.forEach(t),u9r=r(qZ," to load the model weights."),qZ.forEach(t),_9r=i($6),T(cC.$$.fragment,$6),$6.forEach(t),b9r=i(zl),Vr=n(zl,"DIV",{class:!0});var Ql=s(Vr);T(bx.$$.fragment,Ql),v9r=i(Ql),y7e=n(Ql,"P",{});var _Ct=s(y7e);F9r=r(_Ct,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_Ct.forEach(t),T9r=i(Ql),_n=n(Ql,"P",{});var k6=s(_n);M9r=r(k6,"The model class to instantiate is selected based on the "),L7e=n(k6,"CODE",{});var bCt=s(L7e);E9r=r(bCt,"model_type"),bCt.forEach(t),C9r=r(k6,` property of the config object (either
passed as an argument or loaded from `),x7e=n(k6,"CODE",{});var vCt=s(x7e);w9r=r(vCt,"pretrained_model_name_or_path"),vCt.forEach(t),A9r=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$7e=n(k6,"CODE",{});var FCt=s($7e);y9r=r(FCt,"pretrained_model_name_or_path"),FCt.forEach(t),L9r=r(k6,":"),k6.forEach(t),x9r=i(Ql),Se=n(Ql,"UL",{});var Ve=s(Se);fC=n(Ve,"LI",{});var XBe=s(fC);k7e=n(XBe,"STRONG",{});var TCt=s(k7e);$9r=r(TCt,"bart"),TCt.forEach(t),k9r=r(XBe," \u2014 "),VJ=n(XBe,"A",{href:!0});var MCt=s(VJ);S9r=r(MCt,"FlaxBartForConditionalGeneration"),MCt.forEach(t),R9r=r(XBe," (BART model)"),XBe.forEach(t),B9r=i(Ve),mC=n(Ve,"LI",{});var zBe=s(mC);S7e=n(zBe,"STRONG",{});var ECt=s(S7e);P9r=r(ECt,"blenderbot"),ECt.forEach(t),I9r=r(zBe," \u2014 "),XJ=n(zBe,"A",{href:!0});var CCt=s(XJ);q9r=r(CCt,"FlaxBlenderbotForConditionalGeneration"),CCt.forEach(t),N9r=r(zBe," (Blenderbot model)"),zBe.forEach(t),j9r=i(Ve),gC=n(Ve,"LI",{});var QBe=s(gC);R7e=n(QBe,"STRONG",{});var wCt=s(R7e);D9r=r(wCt,"blenderbot-small"),wCt.forEach(t),G9r=r(QBe," \u2014 "),zJ=n(QBe,"A",{href:!0});var ACt=s(zJ);O9r=r(ACt,"FlaxBlenderbotSmallForConditionalGeneration"),ACt.forEach(t),V9r=r(QBe," (BlenderbotSmall model)"),QBe.forEach(t),X9r=i(Ve),hC=n(Ve,"LI",{});var WBe=s(hC);B7e=n(WBe,"STRONG",{});var yCt=s(B7e);z9r=r(yCt,"encoder-decoder"),yCt.forEach(t),Q9r=r(WBe," \u2014 "),QJ=n(WBe,"A",{href:!0});var LCt=s(QJ);W9r=r(LCt,"FlaxEncoderDecoderModel"),LCt.forEach(t),H9r=r(WBe," (Encoder decoder model)"),WBe.forEach(t),U9r=i(Ve),pC=n(Ve,"LI",{});var HBe=s(pC);P7e=n(HBe,"STRONG",{});var xCt=s(P7e);J9r=r(xCt,"marian"),xCt.forEach(t),Y9r=r(HBe," \u2014 "),WJ=n(HBe,"A",{href:!0});var $Ct=s(WJ);K9r=r($Ct,"FlaxMarianMTModel"),$Ct.forEach(t),Z9r=r(HBe," (Marian model)"),HBe.forEach(t),e$r=i(Ve),uC=n(Ve,"LI",{});var UBe=s(uC);I7e=n(UBe,"STRONG",{});var kCt=s(I7e);o$r=r(kCt,"mbart"),kCt.forEach(t),r$r=r(UBe," \u2014 "),HJ=n(UBe,"A",{href:!0});var SCt=s(HJ);t$r=r(SCt,"FlaxMBartForConditionalGeneration"),SCt.forEach(t),a$r=r(UBe," (mBART model)"),UBe.forEach(t),n$r=i(Ve),_C=n(Ve,"LI",{});var JBe=s(_C);q7e=n(JBe,"STRONG",{});var RCt=s(q7e);s$r=r(RCt,"mt5"),RCt.forEach(t),l$r=r(JBe," \u2014 "),UJ=n(JBe,"A",{href:!0});var BCt=s(UJ);i$r=r(BCt,"FlaxMT5ForConditionalGeneration"),BCt.forEach(t),d$r=r(JBe," (mT5 model)"),JBe.forEach(t),c$r=i(Ve),bC=n(Ve,"LI",{});var YBe=s(bC);N7e=n(YBe,"STRONG",{});var PCt=s(N7e);f$r=r(PCt,"pegasus"),PCt.forEach(t),m$r=r(YBe," \u2014 "),JJ=n(YBe,"A",{href:!0});var ICt=s(JJ);g$r=r(ICt,"FlaxPegasusForConditionalGeneration"),ICt.forEach(t),h$r=r(YBe," (Pegasus model)"),YBe.forEach(t),p$r=i(Ve),vC=n(Ve,"LI",{});var KBe=s(vC);j7e=n(KBe,"STRONG",{});var qCt=s(j7e);u$r=r(qCt,"t5"),qCt.forEach(t),_$r=r(KBe," \u2014 "),YJ=n(KBe,"A",{href:!0});var NCt=s(YJ);b$r=r(NCt,"FlaxT5ForConditionalGeneration"),NCt.forEach(t),v$r=r(KBe," (T5 model)"),KBe.forEach(t),Ve.forEach(t),F$r=i(Ql),T(FC.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),Lqe=i(f),Gc=n(f,"H2",{class:!0});var Pje=s(Gc);TC=n(Pje,"A",{id:!0,class:!0,href:!0});var jCt=s(TC);D7e=n(jCt,"SPAN",{});var DCt=s(D7e);T(vx.$$.fragment,DCt),DCt.forEach(t),jCt.forEach(t),T$r=i(Pje),G7e=n(Pje,"SPAN",{});var GCt=s(G7e);M$r=r(GCt,"FlaxAutoModelForSequenceClassification"),GCt.forEach(t),Pje.forEach(t),xqe=i(f),ur=n(f,"DIV",{class:!0});var Wl=s(ur);T(Fx.$$.fragment,Wl),E$r=i(Wl),Oc=n(Wl,"P",{});var NZ=s(Oc);C$r=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),KJ=n(NZ,"A",{href:!0});var OCt=s(KJ);w$r=r(OCt,"from_pretrained()"),OCt.forEach(t),A$r=r(NZ," class method or the "),ZJ=n(NZ,"A",{href:!0});var VCt=s(ZJ);y$r=r(VCt,"from_config()"),VCt.forEach(t),L$r=r(NZ,` class
method.`),NZ.forEach(t),x$r=i(Wl),Tx=n(Wl,"P",{});var Ije=s(Tx);$$r=r(Ije,"This class cannot be instantiated directly using "),O7e=n(Ije,"CODE",{});var XCt=s(O7e);k$r=r(XCt,"__init__()"),XCt.forEach(t),S$r=r(Ije," (throws an error)."),Ije.forEach(t),R$r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var S6=s(Xt);T(Mx.$$.fragment,S6),B$r=i(S6),V7e=n(S6,"P",{});var zCt=s(V7e);P$r=r(zCt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),zCt.forEach(t),I$r=i(S6),Vc=n(S6,"P",{});var jZ=s(Vc);q$r=r(jZ,`Note:
Loading a model from its configuration file does `),X7e=n(jZ,"STRONG",{});var QCt=s(X7e);N$r=r(QCt,"not"),QCt.forEach(t),j$r=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=n(jZ,"A",{href:!0});var WCt=s(eY);D$r=r(WCt,"from_pretrained()"),WCt.forEach(t),G$r=r(jZ," to load the model weights."),jZ.forEach(t),O$r=i(S6),T(MC.$$.fragment,S6),S6.forEach(t),V$r=i(Wl),Xr=n(Wl,"DIV",{class:!0});var Hl=s(Xr);T(Ex.$$.fragment,Hl),X$r=i(Hl),z7e=n(Hl,"P",{});var HCt=s(z7e);z$r=r(HCt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),HCt.forEach(t),Q$r=i(Hl),bn=n(Hl,"P",{});var R6=s(bn);W$r=r(R6,"The model class to instantiate is selected based on the "),Q7e=n(R6,"CODE",{});var UCt=s(Q7e);H$r=r(UCt,"model_type"),UCt.forEach(t),U$r=r(R6,` property of the config object (either
passed as an argument or loaded from `),W7e=n(R6,"CODE",{});var JCt=s(W7e);J$r=r(JCt,"pretrained_model_name_or_path"),JCt.forEach(t),Y$r=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H7e=n(R6,"CODE",{});var YCt=s(H7e);K$r=r(YCt,"pretrained_model_name_or_path"),YCt.forEach(t),Z$r=r(R6,":"),R6.forEach(t),ekr=i(Hl),xe=n(Hl,"UL",{});var Pe=s(xe);EC=n(Pe,"LI",{});var ZBe=s(EC);U7e=n(ZBe,"STRONG",{});var KCt=s(U7e);okr=r(KCt,"albert"),KCt.forEach(t),rkr=r(ZBe," \u2014 "),oY=n(ZBe,"A",{href:!0});var ZCt=s(oY);tkr=r(ZCt,"FlaxAlbertForSequenceClassification"),ZCt.forEach(t),akr=r(ZBe," (ALBERT model)"),ZBe.forEach(t),nkr=i(Pe),CC=n(Pe,"LI",{});var ePe=s(CC);J7e=n(ePe,"STRONG",{});var ewt=s(J7e);skr=r(ewt,"bart"),ewt.forEach(t),lkr=r(ePe," \u2014 "),rY=n(ePe,"A",{href:!0});var owt=s(rY);ikr=r(owt,"FlaxBartForSequenceClassification"),owt.forEach(t),dkr=r(ePe," (BART model)"),ePe.forEach(t),ckr=i(Pe),wC=n(Pe,"LI",{});var oPe=s(wC);Y7e=n(oPe,"STRONG",{});var rwt=s(Y7e);fkr=r(rwt,"bert"),rwt.forEach(t),mkr=r(oPe," \u2014 "),tY=n(oPe,"A",{href:!0});var twt=s(tY);gkr=r(twt,"FlaxBertForSequenceClassification"),twt.forEach(t),hkr=r(oPe," (BERT model)"),oPe.forEach(t),pkr=i(Pe),AC=n(Pe,"LI",{});var rPe=s(AC);K7e=n(rPe,"STRONG",{});var awt=s(K7e);ukr=r(awt,"big_bird"),awt.forEach(t),_kr=r(rPe," \u2014 "),aY=n(rPe,"A",{href:!0});var nwt=s(aY);bkr=r(nwt,"FlaxBigBirdForSequenceClassification"),nwt.forEach(t),vkr=r(rPe," (BigBird model)"),rPe.forEach(t),Fkr=i(Pe),yC=n(Pe,"LI",{});var tPe=s(yC);Z7e=n(tPe,"STRONG",{});var swt=s(Z7e);Tkr=r(swt,"distilbert"),swt.forEach(t),Mkr=r(tPe," \u2014 "),nY=n(tPe,"A",{href:!0});var lwt=s(nY);Ekr=r(lwt,"FlaxDistilBertForSequenceClassification"),lwt.forEach(t),Ckr=r(tPe," (DistilBERT model)"),tPe.forEach(t),wkr=i(Pe),LC=n(Pe,"LI",{});var aPe=s(LC);eMe=n(aPe,"STRONG",{});var iwt=s(eMe);Akr=r(iwt,"electra"),iwt.forEach(t),ykr=r(aPe," \u2014 "),sY=n(aPe,"A",{href:!0});var dwt=s(sY);Lkr=r(dwt,"FlaxElectraForSequenceClassification"),dwt.forEach(t),xkr=r(aPe," (ELECTRA model)"),aPe.forEach(t),$kr=i(Pe),xC=n(Pe,"LI",{});var nPe=s(xC);oMe=n(nPe,"STRONG",{});var cwt=s(oMe);kkr=r(cwt,"mbart"),cwt.forEach(t),Skr=r(nPe," \u2014 "),lY=n(nPe,"A",{href:!0});var fwt=s(lY);Rkr=r(fwt,"FlaxMBartForSequenceClassification"),fwt.forEach(t),Bkr=r(nPe," (mBART model)"),nPe.forEach(t),Pkr=i(Pe),$C=n(Pe,"LI",{});var sPe=s($C);rMe=n(sPe,"STRONG",{});var mwt=s(rMe);Ikr=r(mwt,"roberta"),mwt.forEach(t),qkr=r(sPe," \u2014 "),iY=n(sPe,"A",{href:!0});var gwt=s(iY);Nkr=r(gwt,"FlaxRobertaForSequenceClassification"),gwt.forEach(t),jkr=r(sPe," (RoBERTa model)"),sPe.forEach(t),Dkr=i(Pe),kC=n(Pe,"LI",{});var lPe=s(kC);tMe=n(lPe,"STRONG",{});var hwt=s(tMe);Gkr=r(hwt,"roformer"),hwt.forEach(t),Okr=r(lPe," \u2014 "),dY=n(lPe,"A",{href:!0});var pwt=s(dY);Vkr=r(pwt,"FlaxRoFormerForSequenceClassification"),pwt.forEach(t),Xkr=r(lPe," (RoFormer model)"),lPe.forEach(t),zkr=i(Pe),SC=n(Pe,"LI",{});var iPe=s(SC);aMe=n(iPe,"STRONG",{});var uwt=s(aMe);Qkr=r(uwt,"xlm-roberta"),uwt.forEach(t),Wkr=r(iPe," \u2014 "),cY=n(iPe,"A",{href:!0});var _wt=s(cY);Hkr=r(_wt,"FlaxXLMRobertaForSequenceClassification"),_wt.forEach(t),Ukr=r(iPe," (XLM-RoBERTa model)"),iPe.forEach(t),Pe.forEach(t),Jkr=i(Hl),T(RC.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),$qe=i(f),Xc=n(f,"H2",{class:!0});var qje=s(Xc);BC=n(qje,"A",{id:!0,class:!0,href:!0});var bwt=s(BC);nMe=n(bwt,"SPAN",{});var vwt=s(nMe);T(Cx.$$.fragment,vwt),vwt.forEach(t),bwt.forEach(t),Ykr=i(qje),sMe=n(qje,"SPAN",{});var Fwt=s(sMe);Kkr=r(Fwt,"FlaxAutoModelForQuestionAnswering"),Fwt.forEach(t),qje.forEach(t),kqe=i(f),_r=n(f,"DIV",{class:!0});var Ul=s(_r);T(wx.$$.fragment,Ul),Zkr=i(Ul),zc=n(Ul,"P",{});var DZ=s(zc);eSr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),fY=n(DZ,"A",{href:!0});var Twt=s(fY);oSr=r(Twt,"from_pretrained()"),Twt.forEach(t),rSr=r(DZ," class method or the "),mY=n(DZ,"A",{href:!0});var Mwt=s(mY);tSr=r(Mwt,"from_config()"),Mwt.forEach(t),aSr=r(DZ,` class
method.`),DZ.forEach(t),nSr=i(Ul),Ax=n(Ul,"P",{});var Nje=s(Ax);sSr=r(Nje,"This class cannot be instantiated directly using "),lMe=n(Nje,"CODE",{});var Ewt=s(lMe);lSr=r(Ewt,"__init__()"),Ewt.forEach(t),iSr=r(Nje," (throws an error)."),Nje.forEach(t),dSr=i(Ul),zt=n(Ul,"DIV",{class:!0});var B6=s(zt);T(yx.$$.fragment,B6),cSr=i(B6),iMe=n(B6,"P",{});var Cwt=s(iMe);fSr=r(Cwt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Cwt.forEach(t),mSr=i(B6),Qc=n(B6,"P",{});var GZ=s(Qc);gSr=r(GZ,`Note:
Loading a model from its configuration file does `),dMe=n(GZ,"STRONG",{});var wwt=s(dMe);hSr=r(wwt,"not"),wwt.forEach(t),pSr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=n(GZ,"A",{href:!0});var Awt=s(gY);uSr=r(Awt,"from_pretrained()"),Awt.forEach(t),_Sr=r(GZ," to load the model weights."),GZ.forEach(t),bSr=i(B6),T(PC.$$.fragment,B6),B6.forEach(t),vSr=i(Ul),zr=n(Ul,"DIV",{class:!0});var Jl=s(zr);T(Lx.$$.fragment,Jl),FSr=i(Jl),cMe=n(Jl,"P",{});var ywt=s(cMe);TSr=r(ywt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ywt.forEach(t),MSr=i(Jl),vn=n(Jl,"P",{});var P6=s(vn);ESr=r(P6,"The model class to instantiate is selected based on the "),fMe=n(P6,"CODE",{});var Lwt=s(fMe);CSr=r(Lwt,"model_type"),Lwt.forEach(t),wSr=r(P6,` property of the config object (either
passed as an argument or loaded from `),mMe=n(P6,"CODE",{});var xwt=s(mMe);ASr=r(xwt,"pretrained_model_name_or_path"),xwt.forEach(t),ySr=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gMe=n(P6,"CODE",{});var $wt=s(gMe);LSr=r($wt,"pretrained_model_name_or_path"),$wt.forEach(t),xSr=r(P6,":"),P6.forEach(t),$Sr=i(Jl),$e=n(Jl,"UL",{});var Ie=s($e);IC=n(Ie,"LI",{});var dPe=s(IC);hMe=n(dPe,"STRONG",{});var kwt=s(hMe);kSr=r(kwt,"albert"),kwt.forEach(t),SSr=r(dPe," \u2014 "),hY=n(dPe,"A",{href:!0});var Swt=s(hY);RSr=r(Swt,"FlaxAlbertForQuestionAnswering"),Swt.forEach(t),BSr=r(dPe," (ALBERT model)"),dPe.forEach(t),PSr=i(Ie),qC=n(Ie,"LI",{});var cPe=s(qC);pMe=n(cPe,"STRONG",{});var Rwt=s(pMe);ISr=r(Rwt,"bart"),Rwt.forEach(t),qSr=r(cPe," \u2014 "),pY=n(cPe,"A",{href:!0});var Bwt=s(pY);NSr=r(Bwt,"FlaxBartForQuestionAnswering"),Bwt.forEach(t),jSr=r(cPe," (BART model)"),cPe.forEach(t),DSr=i(Ie),NC=n(Ie,"LI",{});var fPe=s(NC);uMe=n(fPe,"STRONG",{});var Pwt=s(uMe);GSr=r(Pwt,"bert"),Pwt.forEach(t),OSr=r(fPe," \u2014 "),uY=n(fPe,"A",{href:!0});var Iwt=s(uY);VSr=r(Iwt,"FlaxBertForQuestionAnswering"),Iwt.forEach(t),XSr=r(fPe," (BERT model)"),fPe.forEach(t),zSr=i(Ie),jC=n(Ie,"LI",{});var mPe=s(jC);_Me=n(mPe,"STRONG",{});var qwt=s(_Me);QSr=r(qwt,"big_bird"),qwt.forEach(t),WSr=r(mPe," \u2014 "),_Y=n(mPe,"A",{href:!0});var Nwt=s(_Y);HSr=r(Nwt,"FlaxBigBirdForQuestionAnswering"),Nwt.forEach(t),USr=r(mPe," (BigBird model)"),mPe.forEach(t),JSr=i(Ie),DC=n(Ie,"LI",{});var gPe=s(DC);bMe=n(gPe,"STRONG",{});var jwt=s(bMe);YSr=r(jwt,"distilbert"),jwt.forEach(t),KSr=r(gPe," \u2014 "),bY=n(gPe,"A",{href:!0});var Dwt=s(bY);ZSr=r(Dwt,"FlaxDistilBertForQuestionAnswering"),Dwt.forEach(t),eRr=r(gPe," (DistilBERT model)"),gPe.forEach(t),oRr=i(Ie),GC=n(Ie,"LI",{});var hPe=s(GC);vMe=n(hPe,"STRONG",{});var Gwt=s(vMe);rRr=r(Gwt,"electra"),Gwt.forEach(t),tRr=r(hPe," \u2014 "),vY=n(hPe,"A",{href:!0});var Owt=s(vY);aRr=r(Owt,"FlaxElectraForQuestionAnswering"),Owt.forEach(t),nRr=r(hPe," (ELECTRA model)"),hPe.forEach(t),sRr=i(Ie),OC=n(Ie,"LI",{});var pPe=s(OC);FMe=n(pPe,"STRONG",{});var Vwt=s(FMe);lRr=r(Vwt,"mbart"),Vwt.forEach(t),iRr=r(pPe," \u2014 "),FY=n(pPe,"A",{href:!0});var Xwt=s(FY);dRr=r(Xwt,"FlaxMBartForQuestionAnswering"),Xwt.forEach(t),cRr=r(pPe," (mBART model)"),pPe.forEach(t),fRr=i(Ie),VC=n(Ie,"LI",{});var uPe=s(VC);TMe=n(uPe,"STRONG",{});var zwt=s(TMe);mRr=r(zwt,"roberta"),zwt.forEach(t),gRr=r(uPe," \u2014 "),TY=n(uPe,"A",{href:!0});var Qwt=s(TY);hRr=r(Qwt,"FlaxRobertaForQuestionAnswering"),Qwt.forEach(t),pRr=r(uPe," (RoBERTa model)"),uPe.forEach(t),uRr=i(Ie),XC=n(Ie,"LI",{});var _Pe=s(XC);MMe=n(_Pe,"STRONG",{});var Wwt=s(MMe);_Rr=r(Wwt,"roformer"),Wwt.forEach(t),bRr=r(_Pe," \u2014 "),MY=n(_Pe,"A",{href:!0});var Hwt=s(MY);vRr=r(Hwt,"FlaxRoFormerForQuestionAnswering"),Hwt.forEach(t),FRr=r(_Pe," (RoFormer model)"),_Pe.forEach(t),TRr=i(Ie),zC=n(Ie,"LI",{});var bPe=s(zC);EMe=n(bPe,"STRONG",{});var Uwt=s(EMe);MRr=r(Uwt,"xlm-roberta"),Uwt.forEach(t),ERr=r(bPe," \u2014 "),EY=n(bPe,"A",{href:!0});var Jwt=s(EY);CRr=r(Jwt,"FlaxXLMRobertaForQuestionAnswering"),Jwt.forEach(t),wRr=r(bPe," (XLM-RoBERTa model)"),bPe.forEach(t),Ie.forEach(t),ARr=i(Jl),T(QC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),Sqe=i(f),Wc=n(f,"H2",{class:!0});var jje=s(Wc);WC=n(jje,"A",{id:!0,class:!0,href:!0});var Ywt=s(WC);CMe=n(Ywt,"SPAN",{});var Kwt=s(CMe);T(xx.$$.fragment,Kwt),Kwt.forEach(t),Ywt.forEach(t),yRr=i(jje),wMe=n(jje,"SPAN",{});var Zwt=s(wMe);LRr=r(Zwt,"FlaxAutoModelForTokenClassification"),Zwt.forEach(t),jje.forEach(t),Rqe=i(f),br=n(f,"DIV",{class:!0});var Yl=s(br);T($x.$$.fragment,Yl),xRr=i(Yl),Hc=n(Yl,"P",{});var OZ=s(Hc);$Rr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),CY=n(OZ,"A",{href:!0});var eAt=s(CY);kRr=r(eAt,"from_pretrained()"),eAt.forEach(t),SRr=r(OZ," class method or the "),wY=n(OZ,"A",{href:!0});var oAt=s(wY);RRr=r(oAt,"from_config()"),oAt.forEach(t),BRr=r(OZ,` class
method.`),OZ.forEach(t),PRr=i(Yl),kx=n(Yl,"P",{});var Dje=s(kx);IRr=r(Dje,"This class cannot be instantiated directly using "),AMe=n(Dje,"CODE",{});var rAt=s(AMe);qRr=r(rAt,"__init__()"),rAt.forEach(t),NRr=r(Dje," (throws an error)."),Dje.forEach(t),jRr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var I6=s(Qt);T(Sx.$$.fragment,I6),DRr=i(I6),yMe=n(I6,"P",{});var tAt=s(yMe);GRr=r(tAt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),tAt.forEach(t),ORr=i(I6),Uc=n(I6,"P",{});var VZ=s(Uc);VRr=r(VZ,`Note:
Loading a model from its configuration file does `),LMe=n(VZ,"STRONG",{});var aAt=s(LMe);XRr=r(aAt,"not"),aAt.forEach(t),zRr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AY=n(VZ,"A",{href:!0});var nAt=s(AY);QRr=r(nAt,"from_pretrained()"),nAt.forEach(t),WRr=r(VZ," to load the model weights."),VZ.forEach(t),HRr=i(I6),T(HC.$$.fragment,I6),I6.forEach(t),URr=i(Yl),Qr=n(Yl,"DIV",{class:!0});var Kl=s(Qr);T(Rx.$$.fragment,Kl),JRr=i(Kl),xMe=n(Kl,"P",{});var sAt=s(xMe);YRr=r(sAt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sAt.forEach(t),KRr=i(Kl),Fn=n(Kl,"P",{});var q6=s(Fn);ZRr=r(q6,"The model class to instantiate is selected based on the "),$Me=n(q6,"CODE",{});var lAt=s($Me);eBr=r(lAt,"model_type"),lAt.forEach(t),oBr=r(q6,` property of the config object (either
passed as an argument or loaded from `),kMe=n(q6,"CODE",{});var iAt=s(kMe);rBr=r(iAt,"pretrained_model_name_or_path"),iAt.forEach(t),tBr=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SMe=n(q6,"CODE",{});var dAt=s(SMe);aBr=r(dAt,"pretrained_model_name_or_path"),dAt.forEach(t),nBr=r(q6,":"),q6.forEach(t),sBr=i(Kl),De=n(Kl,"UL",{});var Fo=s(De);UC=n(Fo,"LI",{});var vPe=s(UC);RMe=n(vPe,"STRONG",{});var cAt=s(RMe);lBr=r(cAt,"albert"),cAt.forEach(t),iBr=r(vPe," \u2014 "),yY=n(vPe,"A",{href:!0});var fAt=s(yY);dBr=r(fAt,"FlaxAlbertForTokenClassification"),fAt.forEach(t),cBr=r(vPe," (ALBERT model)"),vPe.forEach(t),fBr=i(Fo),JC=n(Fo,"LI",{});var FPe=s(JC);BMe=n(FPe,"STRONG",{});var mAt=s(BMe);mBr=r(mAt,"bert"),mAt.forEach(t),gBr=r(FPe," \u2014 "),LY=n(FPe,"A",{href:!0});var gAt=s(LY);hBr=r(gAt,"FlaxBertForTokenClassification"),gAt.forEach(t),pBr=r(FPe," (BERT model)"),FPe.forEach(t),uBr=i(Fo),YC=n(Fo,"LI",{});var TPe=s(YC);PMe=n(TPe,"STRONG",{});var hAt=s(PMe);_Br=r(hAt,"big_bird"),hAt.forEach(t),bBr=r(TPe," \u2014 "),xY=n(TPe,"A",{href:!0});var pAt=s(xY);vBr=r(pAt,"FlaxBigBirdForTokenClassification"),pAt.forEach(t),FBr=r(TPe," (BigBird model)"),TPe.forEach(t),TBr=i(Fo),KC=n(Fo,"LI",{});var MPe=s(KC);IMe=n(MPe,"STRONG",{});var uAt=s(IMe);MBr=r(uAt,"distilbert"),uAt.forEach(t),EBr=r(MPe," \u2014 "),$Y=n(MPe,"A",{href:!0});var _At=s($Y);CBr=r(_At,"FlaxDistilBertForTokenClassification"),_At.forEach(t),wBr=r(MPe," (DistilBERT model)"),MPe.forEach(t),ABr=i(Fo),ZC=n(Fo,"LI",{});var EPe=s(ZC);qMe=n(EPe,"STRONG",{});var bAt=s(qMe);yBr=r(bAt,"electra"),bAt.forEach(t),LBr=r(EPe," \u2014 "),kY=n(EPe,"A",{href:!0});var vAt=s(kY);xBr=r(vAt,"FlaxElectraForTokenClassification"),vAt.forEach(t),$Br=r(EPe," (ELECTRA model)"),EPe.forEach(t),kBr=i(Fo),ew=n(Fo,"LI",{});var CPe=s(ew);NMe=n(CPe,"STRONG",{});var FAt=s(NMe);SBr=r(FAt,"roberta"),FAt.forEach(t),RBr=r(CPe," \u2014 "),SY=n(CPe,"A",{href:!0});var TAt=s(SY);BBr=r(TAt,"FlaxRobertaForTokenClassification"),TAt.forEach(t),PBr=r(CPe," (RoBERTa model)"),CPe.forEach(t),IBr=i(Fo),ow=n(Fo,"LI",{});var wPe=s(ow);jMe=n(wPe,"STRONG",{});var MAt=s(jMe);qBr=r(MAt,"roformer"),MAt.forEach(t),NBr=r(wPe," \u2014 "),RY=n(wPe,"A",{href:!0});var EAt=s(RY);jBr=r(EAt,"FlaxRoFormerForTokenClassification"),EAt.forEach(t),DBr=r(wPe," (RoFormer model)"),wPe.forEach(t),GBr=i(Fo),rw=n(Fo,"LI",{});var APe=s(rw);DMe=n(APe,"STRONG",{});var CAt=s(DMe);OBr=r(CAt,"xlm-roberta"),CAt.forEach(t),VBr=r(APe," \u2014 "),BY=n(APe,"A",{href:!0});var wAt=s(BY);XBr=r(wAt,"FlaxXLMRobertaForTokenClassification"),wAt.forEach(t),zBr=r(APe," (XLM-RoBERTa model)"),APe.forEach(t),Fo.forEach(t),QBr=i(Kl),T(tw.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),Bqe=i(f),Jc=n(f,"H2",{class:!0});var Gje=s(Jc);aw=n(Gje,"A",{id:!0,class:!0,href:!0});var AAt=s(aw);GMe=n(AAt,"SPAN",{});var yAt=s(GMe);T(Bx.$$.fragment,yAt),yAt.forEach(t),AAt.forEach(t),WBr=i(Gje),OMe=n(Gje,"SPAN",{});var LAt=s(OMe);HBr=r(LAt,"FlaxAutoModelForMultipleChoice"),LAt.forEach(t),Gje.forEach(t),Pqe=i(f),vr=n(f,"DIV",{class:!0});var Zl=s(vr);T(Px.$$.fragment,Zl),UBr=i(Zl),Yc=n(Zl,"P",{});var XZ=s(Yc);JBr=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),PY=n(XZ,"A",{href:!0});var xAt=s(PY);YBr=r(xAt,"from_pretrained()"),xAt.forEach(t),KBr=r(XZ," class method or the "),IY=n(XZ,"A",{href:!0});var $At=s(IY);ZBr=r($At,"from_config()"),$At.forEach(t),ePr=r(XZ,` class
method.`),XZ.forEach(t),oPr=i(Zl),Ix=n(Zl,"P",{});var Oje=s(Ix);rPr=r(Oje,"This class cannot be instantiated directly using "),VMe=n(Oje,"CODE",{});var kAt=s(VMe);tPr=r(kAt,"__init__()"),kAt.forEach(t),aPr=r(Oje," (throws an error)."),Oje.forEach(t),nPr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var N6=s(Wt);T(qx.$$.fragment,N6),sPr=i(N6),XMe=n(N6,"P",{});var SAt=s(XMe);lPr=r(SAt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),SAt.forEach(t),iPr=i(N6),Kc=n(N6,"P",{});var zZ=s(Kc);dPr=r(zZ,`Note:
Loading a model from its configuration file does `),zMe=n(zZ,"STRONG",{});var RAt=s(zMe);cPr=r(RAt,"not"),RAt.forEach(t),fPr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=n(zZ,"A",{href:!0});var BAt=s(qY);mPr=r(BAt,"from_pretrained()"),BAt.forEach(t),gPr=r(zZ," to load the model weights."),zZ.forEach(t),hPr=i(N6),T(nw.$$.fragment,N6),N6.forEach(t),pPr=i(Zl),Wr=n(Zl,"DIV",{class:!0});var ei=s(Wr);T(Nx.$$.fragment,ei),uPr=i(ei),QMe=n(ei,"P",{});var PAt=s(QMe);_Pr=r(PAt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),PAt.forEach(t),bPr=i(ei),Tn=n(ei,"P",{});var j6=s(Tn);vPr=r(j6,"The model class to instantiate is selected based on the "),WMe=n(j6,"CODE",{});var IAt=s(WMe);FPr=r(IAt,"model_type"),IAt.forEach(t),TPr=r(j6,` property of the config object (either
passed as an argument or loaded from `),HMe=n(j6,"CODE",{});var qAt=s(HMe);MPr=r(qAt,"pretrained_model_name_or_path"),qAt.forEach(t),EPr=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UMe=n(j6,"CODE",{});var NAt=s(UMe);CPr=r(NAt,"pretrained_model_name_or_path"),NAt.forEach(t),wPr=r(j6,":"),j6.forEach(t),APr=i(ei),Ge=n(ei,"UL",{});var To=s(Ge);sw=n(To,"LI",{});var yPe=s(sw);JMe=n(yPe,"STRONG",{});var jAt=s(JMe);yPr=r(jAt,"albert"),jAt.forEach(t),LPr=r(yPe," \u2014 "),NY=n(yPe,"A",{href:!0});var DAt=s(NY);xPr=r(DAt,"FlaxAlbertForMultipleChoice"),DAt.forEach(t),$Pr=r(yPe," (ALBERT model)"),yPe.forEach(t),kPr=i(To),lw=n(To,"LI",{});var LPe=s(lw);YMe=n(LPe,"STRONG",{});var GAt=s(YMe);SPr=r(GAt,"bert"),GAt.forEach(t),RPr=r(LPe," \u2014 "),jY=n(LPe,"A",{href:!0});var OAt=s(jY);BPr=r(OAt,"FlaxBertForMultipleChoice"),OAt.forEach(t),PPr=r(LPe," (BERT model)"),LPe.forEach(t),IPr=i(To),iw=n(To,"LI",{});var xPe=s(iw);KMe=n(xPe,"STRONG",{});var VAt=s(KMe);qPr=r(VAt,"big_bird"),VAt.forEach(t),NPr=r(xPe," \u2014 "),DY=n(xPe,"A",{href:!0});var XAt=s(DY);jPr=r(XAt,"FlaxBigBirdForMultipleChoice"),XAt.forEach(t),DPr=r(xPe," (BigBird model)"),xPe.forEach(t),GPr=i(To),dw=n(To,"LI",{});var $Pe=s(dw);ZMe=n($Pe,"STRONG",{});var zAt=s(ZMe);OPr=r(zAt,"distilbert"),zAt.forEach(t),VPr=r($Pe," \u2014 "),GY=n($Pe,"A",{href:!0});var QAt=s(GY);XPr=r(QAt,"FlaxDistilBertForMultipleChoice"),QAt.forEach(t),zPr=r($Pe," (DistilBERT model)"),$Pe.forEach(t),QPr=i(To),cw=n(To,"LI",{});var kPe=s(cw);e4e=n(kPe,"STRONG",{});var WAt=s(e4e);WPr=r(WAt,"electra"),WAt.forEach(t),HPr=r(kPe," \u2014 "),OY=n(kPe,"A",{href:!0});var HAt=s(OY);UPr=r(HAt,"FlaxElectraForMultipleChoice"),HAt.forEach(t),JPr=r(kPe," (ELECTRA model)"),kPe.forEach(t),YPr=i(To),fw=n(To,"LI",{});var SPe=s(fw);o4e=n(SPe,"STRONG",{});var UAt=s(o4e);KPr=r(UAt,"roberta"),UAt.forEach(t),ZPr=r(SPe," \u2014 "),VY=n(SPe,"A",{href:!0});var JAt=s(VY);eIr=r(JAt,"FlaxRobertaForMultipleChoice"),JAt.forEach(t),oIr=r(SPe," (RoBERTa model)"),SPe.forEach(t),rIr=i(To),mw=n(To,"LI",{});var RPe=s(mw);r4e=n(RPe,"STRONG",{});var YAt=s(r4e);tIr=r(YAt,"roformer"),YAt.forEach(t),aIr=r(RPe," \u2014 "),XY=n(RPe,"A",{href:!0});var KAt=s(XY);nIr=r(KAt,"FlaxRoFormerForMultipleChoice"),KAt.forEach(t),sIr=r(RPe," (RoFormer model)"),RPe.forEach(t),lIr=i(To),gw=n(To,"LI",{});var BPe=s(gw);t4e=n(BPe,"STRONG",{});var ZAt=s(t4e);iIr=r(ZAt,"xlm-roberta"),ZAt.forEach(t),dIr=r(BPe," \u2014 "),zY=n(BPe,"A",{href:!0});var e6t=s(zY);cIr=r(e6t,"FlaxXLMRobertaForMultipleChoice"),e6t.forEach(t),fIr=r(BPe," (XLM-RoBERTa model)"),BPe.forEach(t),To.forEach(t),mIr=i(ei),T(hw.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),Iqe=i(f),Zc=n(f,"H2",{class:!0});var Vje=s(Zc);pw=n(Vje,"A",{id:!0,class:!0,href:!0});var o6t=s(pw);a4e=n(o6t,"SPAN",{});var r6t=s(a4e);T(jx.$$.fragment,r6t),r6t.forEach(t),o6t.forEach(t),gIr=i(Vje),n4e=n(Vje,"SPAN",{});var t6t=s(n4e);hIr=r(t6t,"FlaxAutoModelForNextSentencePrediction"),t6t.forEach(t),Vje.forEach(t),qqe=i(f),Fr=n(f,"DIV",{class:!0});var oi=s(Fr);T(Dx.$$.fragment,oi),pIr=i(oi),ef=n(oi,"P",{});var QZ=s(ef);uIr=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),QY=n(QZ,"A",{href:!0});var a6t=s(QY);_Ir=r(a6t,"from_pretrained()"),a6t.forEach(t),bIr=r(QZ," class method or the "),WY=n(QZ,"A",{href:!0});var n6t=s(WY);vIr=r(n6t,"from_config()"),n6t.forEach(t),FIr=r(QZ,` class
method.`),QZ.forEach(t),TIr=i(oi),Gx=n(oi,"P",{});var Xje=s(Gx);MIr=r(Xje,"This class cannot be instantiated directly using "),s4e=n(Xje,"CODE",{});var s6t=s(s4e);EIr=r(s6t,"__init__()"),s6t.forEach(t),CIr=r(Xje," (throws an error)."),Xje.forEach(t),wIr=i(oi),Ht=n(oi,"DIV",{class:!0});var D6=s(Ht);T(Ox.$$.fragment,D6),AIr=i(D6),l4e=n(D6,"P",{});var l6t=s(l4e);yIr=r(l6t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),l6t.forEach(t),LIr=i(D6),of=n(D6,"P",{});var WZ=s(of);xIr=r(WZ,`Note:
Loading a model from its configuration file does `),i4e=n(WZ,"STRONG",{});var i6t=s(i4e);$Ir=r(i6t,"not"),i6t.forEach(t),kIr=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=n(WZ,"A",{href:!0});var d6t=s(HY);SIr=r(d6t,"from_pretrained()"),d6t.forEach(t),RIr=r(WZ," to load the model weights."),WZ.forEach(t),BIr=i(D6),T(uw.$$.fragment,D6),D6.forEach(t),PIr=i(oi),Hr=n(oi,"DIV",{class:!0});var ri=s(Hr);T(Vx.$$.fragment,ri),IIr=i(ri),d4e=n(ri,"P",{});var c6t=s(d4e);qIr=r(c6t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),c6t.forEach(t),NIr=i(ri),Mn=n(ri,"P",{});var G6=s(Mn);jIr=r(G6,"The model class to instantiate is selected based on the "),c4e=n(G6,"CODE",{});var f6t=s(c4e);DIr=r(f6t,"model_type"),f6t.forEach(t),GIr=r(G6,` property of the config object (either
passed as an argument or loaded from `),f4e=n(G6,"CODE",{});var m6t=s(f4e);OIr=r(m6t,"pretrained_model_name_or_path"),m6t.forEach(t),VIr=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m4e=n(G6,"CODE",{});var g6t=s(m4e);XIr=r(g6t,"pretrained_model_name_or_path"),g6t.forEach(t),zIr=r(G6,":"),G6.forEach(t),QIr=i(ri),g4e=n(ri,"UL",{});var h6t=s(g4e);_w=n(h6t,"LI",{});var PPe=s(_w);h4e=n(PPe,"STRONG",{});var p6t=s(h4e);WIr=r(p6t,"bert"),p6t.forEach(t),HIr=r(PPe," \u2014 "),UY=n(PPe,"A",{href:!0});var u6t=s(UY);UIr=r(u6t,"FlaxBertForNextSentencePrediction"),u6t.forEach(t),JIr=r(PPe," (BERT model)"),PPe.forEach(t),h6t.forEach(t),YIr=i(ri),T(bw.$$.fragment,ri),ri.forEach(t),oi.forEach(t),Nqe=i(f),rf=n(f,"H2",{class:!0});var zje=s(rf);vw=n(zje,"A",{id:!0,class:!0,href:!0});var _6t=s(vw);p4e=n(_6t,"SPAN",{});var b6t=s(p4e);T(Xx.$$.fragment,b6t),b6t.forEach(t),_6t.forEach(t),KIr=i(zje),u4e=n(zje,"SPAN",{});var v6t=s(u4e);ZIr=r(v6t,"FlaxAutoModelForImageClassification"),v6t.forEach(t),zje.forEach(t),jqe=i(f),Tr=n(f,"DIV",{class:!0});var ti=s(Tr);T(zx.$$.fragment,ti),eqr=i(ti),tf=n(ti,"P",{});var HZ=s(tf);oqr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),JY=n(HZ,"A",{href:!0});var F6t=s(JY);rqr=r(F6t,"from_pretrained()"),F6t.forEach(t),tqr=r(HZ," class method or the "),YY=n(HZ,"A",{href:!0});var T6t=s(YY);aqr=r(T6t,"from_config()"),T6t.forEach(t),nqr=r(HZ,` class
method.`),HZ.forEach(t),sqr=i(ti),Qx=n(ti,"P",{});var Qje=s(Qx);lqr=r(Qje,"This class cannot be instantiated directly using "),_4e=n(Qje,"CODE",{});var M6t=s(_4e);iqr=r(M6t,"__init__()"),M6t.forEach(t),dqr=r(Qje," (throws an error)."),Qje.forEach(t),cqr=i(ti),Ut=n(ti,"DIV",{class:!0});var O6=s(Ut);T(Wx.$$.fragment,O6),fqr=i(O6),b4e=n(O6,"P",{});var E6t=s(b4e);mqr=r(E6t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),E6t.forEach(t),gqr=i(O6),af=n(O6,"P",{});var UZ=s(af);hqr=r(UZ,`Note:
Loading a model from its configuration file does `),v4e=n(UZ,"STRONG",{});var C6t=s(v4e);pqr=r(C6t,"not"),C6t.forEach(t),uqr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KY=n(UZ,"A",{href:!0});var w6t=s(KY);_qr=r(w6t,"from_pretrained()"),w6t.forEach(t),bqr=r(UZ," to load the model weights."),UZ.forEach(t),vqr=i(O6),T(Fw.$$.fragment,O6),O6.forEach(t),Fqr=i(ti),Ur=n(ti,"DIV",{class:!0});var ai=s(Ur);T(Hx.$$.fragment,ai),Tqr=i(ai),F4e=n(ai,"P",{});var A6t=s(F4e);Mqr=r(A6t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),A6t.forEach(t),Eqr=i(ai),En=n(ai,"P",{});var V6=s(En);Cqr=r(V6,"The model class to instantiate is selected based on the "),T4e=n(V6,"CODE",{});var y6t=s(T4e);wqr=r(y6t,"model_type"),y6t.forEach(t),Aqr=r(V6,` property of the config object (either
passed as an argument or loaded from `),M4e=n(V6,"CODE",{});var L6t=s(M4e);yqr=r(L6t,"pretrained_model_name_or_path"),L6t.forEach(t),Lqr=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=n(V6,"CODE",{});var x6t=s(E4e);xqr=r(x6t,"pretrained_model_name_or_path"),x6t.forEach(t),$qr=r(V6,":"),V6.forEach(t),kqr=i(ai),Ux=n(ai,"UL",{});var Wje=s(Ux);Tw=n(Wje,"LI",{});var IPe=s(Tw);C4e=n(IPe,"STRONG",{});var $6t=s(C4e);Sqr=r($6t,"beit"),$6t.forEach(t),Rqr=r(IPe," \u2014 "),ZY=n(IPe,"A",{href:!0});var k6t=s(ZY);Bqr=r(k6t,"FlaxBeitForImageClassification"),k6t.forEach(t),Pqr=r(IPe," (BEiT model)"),IPe.forEach(t),Iqr=i(Wje),Mw=n(Wje,"LI",{});var qPe=s(Mw);w4e=n(qPe,"STRONG",{});var S6t=s(w4e);qqr=r(S6t,"vit"),S6t.forEach(t),Nqr=r(qPe," \u2014 "),eK=n(qPe,"A",{href:!0});var R6t=s(eK);jqr=r(R6t,"FlaxViTForImageClassification"),R6t.forEach(t),Dqr=r(qPe," (ViT model)"),qPe.forEach(t),Wje.forEach(t),Gqr=i(ai),T(Ew.$$.fragment,ai),ai.forEach(t),ti.forEach(t),Dqe=i(f),nf=n(f,"H2",{class:!0});var Hje=s(nf);Cw=n(Hje,"A",{id:!0,class:!0,href:!0});var B6t=s(Cw);A4e=n(B6t,"SPAN",{});var P6t=s(A4e);T(Jx.$$.fragment,P6t),P6t.forEach(t),B6t.forEach(t),Oqr=i(Hje),y4e=n(Hje,"SPAN",{});var I6t=s(y4e);Vqr=r(I6t,"FlaxAutoModelForVision2Seq"),I6t.forEach(t),Hje.forEach(t),Gqe=i(f),Mr=n(f,"DIV",{class:!0});var ni=s(Mr);T(Yx.$$.fragment,ni),Xqr=i(ni),sf=n(ni,"P",{});var JZ=s(sf);zqr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oK=n(JZ,"A",{href:!0});var q6t=s(oK);Qqr=r(q6t,"from_pretrained()"),q6t.forEach(t),Wqr=r(JZ," class method or the "),rK=n(JZ,"A",{href:!0});var N6t=s(rK);Hqr=r(N6t,"from_config()"),N6t.forEach(t),Uqr=r(JZ,` class
method.`),JZ.forEach(t),Jqr=i(ni),Kx=n(ni,"P",{});var Uje=s(Kx);Yqr=r(Uje,"This class cannot be instantiated directly using "),L4e=n(Uje,"CODE",{});var j6t=s(L4e);Kqr=r(j6t,"__init__()"),j6t.forEach(t),Zqr=r(Uje," (throws an error)."),Uje.forEach(t),eNr=i(ni),Jt=n(ni,"DIV",{class:!0});var X6=s(Jt);T(Zx.$$.fragment,X6),oNr=i(X6),x4e=n(X6,"P",{});var D6t=s(x4e);rNr=r(D6t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),D6t.forEach(t),tNr=i(X6),lf=n(X6,"P",{});var YZ=s(lf);aNr=r(YZ,`Note:
Loading a model from its configuration file does `),$4e=n(YZ,"STRONG",{});var G6t=s($4e);nNr=r(G6t,"not"),G6t.forEach(t),sNr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tK=n(YZ,"A",{href:!0});var O6t=s(tK);lNr=r(O6t,"from_pretrained()"),O6t.forEach(t),iNr=r(YZ," to load the model weights."),YZ.forEach(t),dNr=i(X6),T(ww.$$.fragment,X6),X6.forEach(t),cNr=i(ni),Jr=n(ni,"DIV",{class:!0});var si=s(Jr);T(e9.$$.fragment,si),fNr=i(si),k4e=n(si,"P",{});var V6t=s(k4e);mNr=r(V6t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),V6t.forEach(t),gNr=i(si),Cn=n(si,"P",{});var z6=s(Cn);hNr=r(z6,"The model class to instantiate is selected based on the "),S4e=n(z6,"CODE",{});var X6t=s(S4e);pNr=r(X6t,"model_type"),X6t.forEach(t),uNr=r(z6,` property of the config object (either
passed as an argument or loaded from `),R4e=n(z6,"CODE",{});var z6t=s(R4e);_Nr=r(z6t,"pretrained_model_name_or_path"),z6t.forEach(t),bNr=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B4e=n(z6,"CODE",{});var Q6t=s(B4e);vNr=r(Q6t,"pretrained_model_name_or_path"),Q6t.forEach(t),FNr=r(z6,":"),z6.forEach(t),TNr=i(si),P4e=n(si,"UL",{});var W6t=s(P4e);Aw=n(W6t,"LI",{});var NPe=s(Aw);I4e=n(NPe,"STRONG",{});var H6t=s(I4e);MNr=r(H6t,"vision-encoder-decoder"),H6t.forEach(t),ENr=r(NPe," \u2014 "),aK=n(NPe,"A",{href:!0});var U6t=s(aK);CNr=r(U6t,"FlaxVisionEncoderDecoderModel"),U6t.forEach(t),wNr=r(NPe," (Vision Encoder decoder model)"),NPe.forEach(t),W6t.forEach(t),ANr=i(si),T(yw.$$.fragment,si),si.forEach(t),ni.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Zyt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(An,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.AutoConfig"),c(Ln,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.AutoModel"),c(xn,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.AutoTokenizer"),c(gi,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertModel"),c(uf,"id","extending-the-auto-classes"),c(uf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uf,"href","#extending-the-auto-classes"),c(hi,"class","relative group"),c(bf,"id","transformers.AutoConfig"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#transformers.AutoConfig"),c(pi,"class","relative group"),c(v$,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(F$,"href","/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertConfig"),c(T$,"href","/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartConfig"),c(M$,"href","/docs/transformers/pr_17113/en/model_doc/beit#transformers.BeitConfig"),c(E$,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertConfig"),c(C$,"href","/docs/transformers/pr_17113/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(w$,"href","/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdConfig"),c(A$,"href","/docs/transformers/pr_17113/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(y$,"href","/docs/transformers/pr_17113/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(L$,"href","/docs/transformers/pr_17113/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(x$,"href","/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertConfig"),c($$,"href","/docs/transformers/pr_17113/en/model_doc/canine#transformers.CanineConfig"),c(k$,"href","/docs/transformers/pr_17113/en/model_doc/clip#transformers.CLIPConfig"),c(S$,"href","/docs/transformers/pr_17113/en/model_doc/convbert#transformers.ConvBertConfig"),c(R$,"href","/docs/transformers/pr_17113/en/model_doc/convnext#transformers.ConvNextConfig"),c(B$,"href","/docs/transformers/pr_17113/en/model_doc/ctrl#transformers.CTRLConfig"),c(P$,"href","/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(I$,"href","/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(q$,"href","/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(N$,"href","/docs/transformers/pr_17113/en/model_doc/deberta#transformers.DebertaConfig"),c(j$,"href","/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(D$,"href","/docs/transformers/pr_17113/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(G$,"href","/docs/transformers/pr_17113/en/model_doc/deit#transformers.DeiTConfig"),c(O$,"href","/docs/transformers/pr_17113/en/model_doc/detr#transformers.DetrConfig"),c(V$,"href","/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertConfig"),c(X$,"href","/docs/transformers/pr_17113/en/model_doc/dpr#transformers.DPRConfig"),c(z$,"href","/docs/transformers/pr_17113/en/model_doc/dpt#transformers.DPTConfig"),c(Q$,"href","/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraConfig"),c(W$,"href","/docs/transformers/pr_17113/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(H$,"href","/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertConfig"),c(U$,"href","/docs/transformers/pr_17113/en/model_doc/flava#transformers.FlavaConfig"),c(J$,"href","/docs/transformers/pr_17113/en/model_doc/fnet#transformers.FNetConfig"),c(Y$,"href","/docs/transformers/pr_17113/en/model_doc/fsmt#transformers.FSMTConfig"),c(K$,"href","/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelConfig"),c(Z$,"href","/docs/transformers/pr_17113/en/model_doc/glm#transformers.GLMConfig"),c(ek,"href","/docs/transformers/pr_17113/en/model_doc/glpn#transformers.GLPNConfig"),c(ok,"href","/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.GPT2Config"),c(rk,"href","/docs/transformers/pr_17113/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(tk,"href","/docs/transformers/pr_17113/en/model_doc/gptj#transformers.GPTJConfig"),c(ak,"href","/docs/transformers/pr_17113/en/model_doc/hubert#transformers.HubertConfig"),c(nk,"href","/docs/transformers/pr_17113/en/model_doc/ibert#transformers.IBertConfig"),c(sk,"href","/docs/transformers/pr_17113/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(lk,"href","/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(ik,"href","/docs/transformers/pr_17113/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(dk,"href","/docs/transformers/pr_17113/en/model_doc/led#transformers.LEDConfig"),c(ck,"href","/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerConfig"),c(fk,"href","/docs/transformers/pr_17113/en/model_doc/luke#transformers.LukeConfig"),c(mk,"href","/docs/transformers/pr_17113/en/model_doc/lxmert#transformers.LxmertConfig"),c(gk,"href","/docs/transformers/pr_17113/en/model_doc/m2m_100#transformers.M2M100Config"),c(hk,"href","/docs/transformers/pr_17113/en/model_doc/marian#transformers.MarianConfig"),c(pk,"href","/docs/transformers/pr_17113/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(uk,"href","/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartConfig"),c(_k,"href","/docs/transformers/pr_17113/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(bk,"href","/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(vk,"href","/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetConfig"),c(Fk,"href","/docs/transformers/pr_17113/en/model_doc/mt5#transformers.MT5Config"),c(Tk,"href","/docs/transformers/pr_17113/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Mk,"href","/docs/transformers/pr_17113/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Ek,"href","/docs/transformers/pr_17113/en/model_doc/pegasus#transformers.PegasusConfig"),c(Ck,"href","/docs/transformers/pr_17113/en/model_doc/perceiver#transformers.PerceiverConfig"),c(wk,"href","/docs/transformers/pr_17113/en/model_doc/plbart#transformers.PLBartConfig"),c(Ak,"href","/docs/transformers/pr_17113/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(yk,"href","/docs/transformers/pr_17113/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Lk,"href","/docs/transformers/pr_17113/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(xk,"href","/docs/transformers/pr_17113/en/model_doc/rag#transformers.RagConfig"),c($k,"href","/docs/transformers/pr_17113/en/model_doc/realm#transformers.RealmConfig"),c(kk,"href","/docs/transformers/pr_17113/en/model_doc/reformer#transformers.ReformerConfig"),c(Sk,"href","/docs/transformers/pr_17113/en/model_doc/regnet#transformers.RegNetConfig"),c(Rk,"href","/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertConfig"),c(Bk,"href","/docs/transformers/pr_17113/en/model_doc/resnet#transformers.ResNetConfig"),c(Pk,"href","/docs/transformers/pr_17113/en/model_doc/retribert#transformers.RetriBertConfig"),c(Ik,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaConfig"),c(qk,"href","/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerConfig"),c(Nk,"href","/docs/transformers/pr_17113/en/model_doc/segformer#transformers.SegformerConfig"),c(jk,"href","/docs/transformers/pr_17113/en/model_doc/sew#transformers.SEWConfig"),c(Dk,"href","/docs/transformers/pr_17113/en/model_doc/sew-d#transformers.SEWDConfig"),c(Gk,"href","/docs/transformers/pr_17113/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Ok,"href","/docs/transformers/pr_17113/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Vk,"href","/docs/transformers/pr_17113/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Xk,"href","/docs/transformers/pr_17113/en/model_doc/splinter#transformers.SplinterConfig"),c(zk,"href","/docs/transformers/pr_17113/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Qk,"href","/docs/transformers/pr_17113/en/model_doc/swin#transformers.SwinConfig"),c(Wk,"href","/docs/transformers/pr_17113/en/model_doc/t5#transformers.T5Config"),c(Hk,"href","/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TapasConfig"),c(Uk,"href","/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartConfig"),c(Jk,"href","/docs/transformers/pr_17113/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Yk,"href","/docs/transformers/pr_17113/en/model_doc/trocr#transformers.TrOCRConfig"),c(Kk,"href","/docs/transformers/pr_17113/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Zk,"href","/docs/transformers/pr_17113/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(eS,"href","/docs/transformers/pr_17113/en/model_doc/van#transformers.VanConfig"),c(oS,"href","/docs/transformers/pr_17113/en/model_doc/vilt#transformers.ViltConfig"),c(rS,"href","/docs/transformers/pr_17113/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(tS,"href","/docs/transformers/pr_17113/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(aS,"href","/docs/transformers/pr_17113/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(nS,"href","/docs/transformers/pr_17113/en/model_doc/vit#transformers.ViTConfig"),c(sS,"href","/docs/transformers/pr_17113/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(lS,"href","/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(iS,"href","/docs/transformers/pr_17113/en/model_doc/wavlm#transformers.WavLMConfig"),c(dS,"href","/docs/transformers/pr_17113/en/model_doc/xglm#transformers.XGLMConfig"),c(cS,"href","/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMConfig"),c(fS,"href","/docs/transformers/pr_17113/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(mS,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(gS,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(hS,"href","/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetConfig"),c(pS,"href","/docs/transformers/pr_17113/en/model_doc/yolos#transformers.YolosConfig"),c(uS,"href","/docs/transformers/pr_17113/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_g,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bg,"id","transformers.AutoTokenizer"),c(bg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bg,"href","#transformers.AutoTokenizer"),c(_i,"class","relative group"),c(_S,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(bS,"href","/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertTokenizer"),c(vS,"href","/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(FS,"href","/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartTokenizer"),c(TS,"href","/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartTokenizerFast"),c(MS,"href","/docs/transformers/pr_17113/en/model_doc/barthez#transformers.BarthezTokenizer"),c(ES,"href","/docs/transformers/pr_17113/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(CS,"href","/docs/transformers/pr_17113/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(wS,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertTokenizer"),c(AS,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertTokenizerFast"),c(yS,"href","/docs/transformers/pr_17113/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(LS,"href","/docs/transformers/pr_17113/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(xS,"href","/docs/transformers/pr_17113/en/model_doc/bertweet#transformers.BertweetTokenizer"),c($S,"href","/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(kS,"href","/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(SS,"href","/docs/transformers/pr_17113/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(RS,"href","/docs/transformers/pr_17113/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(BS,"href","/docs/transformers/pr_17113/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(PS,"href","/docs/transformers/pr_17113/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(IS,"href","/docs/transformers/pr_17113/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(qS,"href","/docs/transformers/pr_17113/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(NS,"href","/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertTokenizer"),c(jS,"href","/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(DS,"href","/docs/transformers/pr_17113/en/model_doc/canine#transformers.CanineTokenizer"),c(GS,"href","/docs/transformers/pr_17113/en/model_doc/clip#transformers.CLIPTokenizer"),c(OS,"href","/docs/transformers/pr_17113/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(VS,"href","/docs/transformers/pr_17113/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(XS,"href","/docs/transformers/pr_17113/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(zS,"href","/docs/transformers/pr_17113/en/model_doc/cpm#transformers.CpmTokenizer"),c(QS,"href","/docs/transformers/pr_17113/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(WS,"href","/docs/transformers/pr_17113/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(HS,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaTokenizer"),c(US,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(JS,"href","/docs/transformers/pr_17113/en/model_doc/deberta#transformers.DebertaTokenizer"),c(YS,"href","/docs/transformers/pr_17113/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(KS,"href","/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(ZS,"href","/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(eR,"href","/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(oR,"href","/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(rR,"href","/docs/transformers/pr_17113/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(tR,"href","/docs/transformers/pr_17113/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(aR,"href","/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraTokenizer"),c(nR,"href","/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(sR,"href","/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(lR,"href","/docs/transformers/pr_17113/en/model_doc/fnet#transformers.FNetTokenizer"),c(iR,"href","/docs/transformers/pr_17113/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(dR,"href","/docs/transformers/pr_17113/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(cR,"href","/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelTokenizer"),c(fR,"href","/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(mR,"href","/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(gR,"href","/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(hR,"href","/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(pR,"href","/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(uR,"href","/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(_R,"href","/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(bR,"href","/docs/transformers/pr_17113/en/model_doc/herbert#transformers.HerbertTokenizer"),c(vR,"href","/docs/transformers/pr_17113/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(FR,"href","/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(TR,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaTokenizer"),c(MR,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(ER,"href","/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(CR,"href","/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(wR,"href","/docs/transformers/pr_17113/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(AR,"href","/docs/transformers/pr_17113/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(yR,"href","/docs/transformers/pr_17113/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(LR,"href","/docs/transformers/pr_17113/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(xR,"href","/docs/transformers/pr_17113/en/model_doc/led#transformers.LEDTokenizer"),c($R,"href","/docs/transformers/pr_17113/en/model_doc/led#transformers.LEDTokenizerFast"),c(kR,"href","/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerTokenizer"),c(SR,"href","/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(RR,"href","/docs/transformers/pr_17113/en/model_doc/luke#transformers.LukeTokenizer"),c(BR,"href","/docs/transformers/pr_17113/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(PR,"href","/docs/transformers/pr_17113/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(IR,"href","/docs/transformers/pr_17113/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(qR,"href","/docs/transformers/pr_17113/en/model_doc/marian#transformers.MarianTokenizer"),c(NR,"href","/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartTokenizer"),c(jR,"href","/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(DR,"href","/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(GR,"href","/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(OR,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertTokenizer"),c(VR,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertTokenizerFast"),c(XR,"href","/docs/transformers/pr_17113/en/model_doc/mluke#transformers.MLukeTokenizer"),c(zR,"href","/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(QR,"href","/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(WR,"href","/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(HR,"href","/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(UR,"href","/docs/transformers/pr_17113/en/model_doc/mt5#transformers.T5Tokenizer"),c(JR,"href","/docs/transformers/pr_17113/en/model_doc/mt5#transformers.T5TokenizerFast"),c(YR,"href","/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertTokenizer"),c(KR,"href","/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17113/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(eB,"href","/docs/transformers/pr_17113/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(oB,"href","/docs/transformers/pr_17113/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(rB,"href","/docs/transformers/pr_17113/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(tB,"href","/docs/transformers/pr_17113/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(aB,"href","/docs/transformers/pr_17113/en/model_doc/phobert#transformers.PhobertTokenizer"),c(nB,"href","/docs/transformers/pr_17113/en/model_doc/plbart#transformers.PLBartTokenizer"),c(sB,"href","/docs/transformers/pr_17113/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(lB,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertTokenizer"),c(iB,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertTokenizerFast"),c(dB,"href","/docs/transformers/pr_17113/en/model_doc/rag#transformers.RagTokenizer"),c(cB,"href","/docs/transformers/pr_17113/en/model_doc/realm#transformers.RealmTokenizer"),c(fB,"href","/docs/transformers/pr_17113/en/model_doc/realm#transformers.RealmTokenizerFast"),c(mB,"href","/docs/transformers/pr_17113/en/model_doc/reformer#transformers.ReformerTokenizer"),c(gB,"href","/docs/transformers/pr_17113/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(hB,"href","/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertTokenizer"),c(pB,"href","/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(uB,"href","/docs/transformers/pr_17113/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(_B,"href","/docs/transformers/pr_17113/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(bB,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaTokenizer"),c(vB,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(FB,"href","/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(TB,"href","/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(MB,"href","/docs/transformers/pr_17113/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(EB,"href","/docs/transformers/pr_17113/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(CB,"href","/docs/transformers/pr_17113/en/model_doc/splinter#transformers.SplinterTokenizer"),c(wB,"href","/docs/transformers/pr_17113/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(AB,"href","/docs/transformers/pr_17113/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(yB,"href","/docs/transformers/pr_17113/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(LB,"href","/docs/transformers/pr_17113/en/model_doc/mt5#transformers.T5Tokenizer"),c(xB,"href","/docs/transformers/pr_17113/en/model_doc/mt5#transformers.T5TokenizerFast"),c($B,"href","/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TapasTokenizer"),c(kB,"href","/docs/transformers/pr_17113/en/model_doc/tapex#transformers.TapexTokenizer"),c(SB,"href","/docs/transformers/pr_17113/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(RB,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertTokenizer"),c(BB,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertTokenizerFast"),c(PB,"href","/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(IB,"href","/docs/transformers/pr_17113/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(qB,"href","/docs/transformers/pr_17113/en/model_doc/xglm#transformers.XGLMTokenizer"),c(NB,"href","/docs/transformers/pr_17113/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(jB,"href","/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMTokenizer"),c(DB,"href","/docs/transformers/pr_17113/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(GB,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(OB,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(VB,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaTokenizer"),c(XB,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(zB,"href","/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(QB,"href","/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(WB,"href","/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertTokenizer"),c(HB,"href","/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jg,"id","transformers.AutoFeatureExtractor"),c(Jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jg,"href","#transformers.AutoFeatureExtractor"),c(bi,"class","relative group"),c(UB,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(JB,"href","/docs/transformers/pr_17113/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(YB,"href","/docs/transformers/pr_17113/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(KB,"href","/docs/transformers/pr_17113/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(eP,"href","/docs/transformers/pr_17113/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(oP,"href","/docs/transformers/pr_17113/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(rP,"href","/docs/transformers/pr_17113/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(tP,"href","/docs/transformers/pr_17113/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(aP,"href","/docs/transformers/pr_17113/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(nP,"href","/docs/transformers/pr_17113/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(sP,"href","/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(lP,"href","/docs/transformers/pr_17113/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(iP,"href","/docs/transformers/pr_17113/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(dP,"href","/docs/transformers/pr_17113/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(cP,"href","/docs/transformers/pr_17113/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(fP,"href","/docs/transformers/pr_17113/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(mP,"href","/docs/transformers/pr_17113/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(gP,"href","/docs/transformers/pr_17113/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(hP,"href","/docs/transformers/pr_17113/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(pP,"href","/docs/transformers/pr_17113/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(uP,"href","/docs/transformers/pr_17113/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(_P,"href","/docs/transformers/pr_17113/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(bP,"href","/docs/transformers/pr_17113/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(vP,"href","/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(FP,"href","/docs/transformers/pr_17113/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wh,"id","transformers.AutoProcessor"),c(wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wh,"href","#transformers.AutoProcessor"),c(vi,"class","relative group"),c(TP,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(MP,"href","/docs/transformers/pr_17113/en/model_doc/clip#transformers.CLIPProcessor"),c(EP,"href","/docs/transformers/pr_17113/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(CP,"href","/docs/transformers/pr_17113/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(wP,"href","/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(AP,"href","/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(yP,"href","/docs/transformers/pr_17113/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(LP,"href","/docs/transformers/pr_17113/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(xP,"href","/docs/transformers/pr_17113/en/model_doc/trocr#transformers.TrOCRProcessor"),c($P,"href","/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kP,"href","/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(SP,"href","/docs/transformers/pr_17113/en/model_doc/vilt#transformers.ViltProcessor"),c(RP,"href","/docs/transformers/pr_17113/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(BP,"href","/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(PP,"href","/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xh,"id","transformers.AutoModel"),c(Xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xh,"href","#transformers.AutoModel"),c(Ti,"class","relative group"),c(IP,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qP,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NP,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jP,"href","/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertModel"),c(DP,"href","/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartModel"),c(GP,"href","/docs/transformers/pr_17113/en/model_doc/beit#transformers.BeitModel"),c(OP,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertModel"),c(VP,"href","/docs/transformers/pr_17113/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(XP,"href","/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdModel"),c(zP,"href","/docs/transformers/pr_17113/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(QP,"href","/docs/transformers/pr_17113/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(WP,"href","/docs/transformers/pr_17113/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(HP,"href","/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertModel"),c(UP,"href","/docs/transformers/pr_17113/en/model_doc/canine#transformers.CanineModel"),c(JP,"href","/docs/transformers/pr_17113/en/model_doc/clip#transformers.CLIPModel"),c(YP,"href","/docs/transformers/pr_17113/en/model_doc/convbert#transformers.ConvBertModel"),c(KP,"href","/docs/transformers/pr_17113/en/model_doc/convnext#transformers.ConvNextModel"),c(ZP,"href","/docs/transformers/pr_17113/en/model_doc/ctrl#transformers.CTRLModel"),c(eI,"href","/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(oI,"href","/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(rI,"href","/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(tI,"href","/docs/transformers/pr_17113/en/model_doc/deberta#transformers.DebertaModel"),c(aI,"href","/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(nI,"href","/docs/transformers/pr_17113/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(sI,"href","/docs/transformers/pr_17113/en/model_doc/deit#transformers.DeiTModel"),c(lI,"href","/docs/transformers/pr_17113/en/model_doc/detr#transformers.DetrModel"),c(iI,"href","/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertModel"),c(dI,"href","/docs/transformers/pr_17113/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(cI,"href","/docs/transformers/pr_17113/en/model_doc/dpt#transformers.DPTModel"),c(fI,"href","/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraModel"),c(mI,"href","/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertModel"),c(gI,"href","/docs/transformers/pr_17113/en/model_doc/flava#transformers.FlavaModel"),c(hI,"href","/docs/transformers/pr_17113/en/model_doc/fnet#transformers.FNetModel"),c(pI,"href","/docs/transformers/pr_17113/en/model_doc/fsmt#transformers.FSMTModel"),c(uI,"href","/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelModel"),c(_I,"href","/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelBaseModel"),c(bI,"href","/docs/transformers/pr_17113/en/model_doc/glm#transformers.GLMModel"),c(vI,"href","/docs/transformers/pr_17113/en/model_doc/glpn#transformers.GLPNModel"),c(FI,"href","/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.GPT2Model"),c(TI,"href","/docs/transformers/pr_17113/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(MI,"href","/docs/transformers/pr_17113/en/model_doc/gptj#transformers.GPTJModel"),c(EI,"href","/docs/transformers/pr_17113/en/model_doc/hubert#transformers.HubertModel"),c(CI,"href","/docs/transformers/pr_17113/en/model_doc/ibert#transformers.IBertModel"),c(wI,"href","/docs/transformers/pr_17113/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(AI,"href","/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(yI,"href","/docs/transformers/pr_17113/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(LI,"href","/docs/transformers/pr_17113/en/model_doc/led#transformers.LEDModel"),c(xI,"href","/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerModel"),c($I,"href","/docs/transformers/pr_17113/en/model_doc/luke#transformers.LukeModel"),c(kI,"href","/docs/transformers/pr_17113/en/model_doc/lxmert#transformers.LxmertModel"),c(SI,"href","/docs/transformers/pr_17113/en/model_doc/m2m_100#transformers.M2M100Model"),c(RI,"href","/docs/transformers/pr_17113/en/model_doc/marian#transformers.MarianModel"),c(BI,"href","/docs/transformers/pr_17113/en/model_doc/maskformer#transformers.MaskFormerModel"),c(PI,"href","/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartModel"),c(II,"href","/docs/transformers/pr_17113/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(qI,"href","/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertModel"),c(NI,"href","/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetModel"),c(jI,"href","/docs/transformers/pr_17113/en/model_doc/mt5#transformers.MT5Model"),c(DI,"href","/docs/transformers/pr_17113/en/model_doc/nystromformer#transformers.NystromformerModel"),c(GI,"href","/docs/transformers/pr_17113/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(OI,"href","/docs/transformers/pr_17113/en/model_doc/pegasus#transformers.PegasusModel"),c(VI,"href","/docs/transformers/pr_17113/en/model_doc/perceiver#transformers.PerceiverModel"),c(XI,"href","/docs/transformers/pr_17113/en/model_doc/plbart#transformers.PLBartModel"),c(zI,"href","/docs/transformers/pr_17113/en/model_doc/poolformer#transformers.PoolFormerModel"),c(QI,"href","/docs/transformers/pr_17113/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(WI,"href","/docs/transformers/pr_17113/en/model_doc/qdqbert#transformers.QDQBertModel"),c(HI,"href","/docs/transformers/pr_17113/en/model_doc/reformer#transformers.ReformerModel"),c(UI,"href","/docs/transformers/pr_17113/en/model_doc/regnet#transformers.RegNetModel"),c(JI,"href","/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertModel"),c(YI,"href","/docs/transformers/pr_17113/en/model_doc/resnet#transformers.ResNetModel"),c(KI,"href","/docs/transformers/pr_17113/en/model_doc/retribert#transformers.RetriBertModel"),c(ZI,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaModel"),c(eq,"href","/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerModel"),c(oq,"href","/docs/transformers/pr_17113/en/model_doc/segformer#transformers.SegformerModel"),c(rq,"href","/docs/transformers/pr_17113/en/model_doc/sew#transformers.SEWModel"),c(tq,"href","/docs/transformers/pr_17113/en/model_doc/sew-d#transformers.SEWDModel"),c(aq,"href","/docs/transformers/pr_17113/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(nq,"href","/docs/transformers/pr_17113/en/model_doc/splinter#transformers.SplinterModel"),c(sq,"href","/docs/transformers/pr_17113/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(lq,"href","/docs/transformers/pr_17113/en/model_doc/swin#transformers.SwinModel"),c(iq,"href","/docs/transformers/pr_17113/en/model_doc/t5#transformers.T5Model"),c(dq,"href","/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TapasModel"),c(cq,"href","/docs/transformers/pr_17113/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(fq,"href","/docs/transformers/pr_17113/en/model_doc/unispeech#transformers.UniSpeechModel"),c(mq,"href","/docs/transformers/pr_17113/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(gq,"href","/docs/transformers/pr_17113/en/model_doc/van#transformers.VanModel"),c(hq,"href","/docs/transformers/pr_17113/en/model_doc/vilt#transformers.ViltModel"),c(pq,"href","/docs/transformers/pr_17113/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(uq,"href","/docs/transformers/pr_17113/en/model_doc/visual_bert#transformers.VisualBertModel"),c(_q,"href","/docs/transformers/pr_17113/en/model_doc/vit#transformers.ViTModel"),c(bq,"href","/docs/transformers/pr_17113/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(vq,"href","/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Fq,"href","/docs/transformers/pr_17113/en/model_doc/wavlm#transformers.WavLMModel"),c(Tq,"href","/docs/transformers/pr_17113/en/model_doc/xglm#transformers.XGLMModel"),c(Mq,"href","/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMModel"),c(Eq,"href","/docs/transformers/pr_17113/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Cq,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(wq,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Aq,"href","/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetModel"),c(yq,"href","/docs/transformers/pr_17113/en/model_doc/yolos#transformers.YolosModel"),c(Lq,"href","/docs/transformers/pr_17113/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iu,"id","transformers.AutoModelForPreTraining"),c(Iu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iu,"href","#transformers.AutoModelForPreTraining"),c(Ci,"class","relative group"),c(xq,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($q,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kq,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sq,"href","/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Rq,"href","/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Bq,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertForPreTraining"),c(Pq,"href","/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Iq,"href","/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(qq,"href","/docs/transformers/pr_17113/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Nq,"href","/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(jq,"href","/docs/transformers/pr_17113/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Dq,"href","/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Gq,"href","/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Oq,"href","/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Vq,"href","/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Xq,"href","/docs/transformers/pr_17113/en/model_doc/flava#transformers.FlavaForPreTraining"),c(zq,"href","/docs/transformers/pr_17113/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Qq,"href","/docs/transformers/pr_17113/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Wq,"href","/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Hq,"href","/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Uq,"href","/docs/transformers/pr_17113/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Jq,"href","/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Yq,"href","/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Kq,"href","/docs/transformers/pr_17113/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Zq,"href","/docs/transformers/pr_17113/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(eN,"href","/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(oN,"href","/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(rN,"href","/docs/transformers/pr_17113/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(tN,"href","/docs/transformers/pr_17113/en/model_doc/retribert#transformers.RetriBertModel"),c(aN,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(nN,"href","/docs/transformers/pr_17113/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(sN,"href","/docs/transformers/pr_17113/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(lN,"href","/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(iN,"href","/docs/transformers/pr_17113/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(dN,"href","/docs/transformers/pr_17113/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(cN,"href","/docs/transformers/pr_17113/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(fN,"href","/docs/transformers/pr_17113/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(mN,"href","/docs/transformers/pr_17113/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(gN,"href","/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(hN,"href","/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(pN,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(uN,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(_N,"href","/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A_,"id","transformers.AutoModelForCausalLM"),c(A_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A_,"href","#transformers.AutoModelForCausalLM"),c(yi,"class","relative group"),c(bN,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vN,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FN,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TN,"href","/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartForCausalLM"),c(MN,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertLMHeadModel"),c(EN,"href","/docs/transformers/pr_17113/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(CN,"href","/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(wN,"href","/docs/transformers/pr_17113/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(AN,"href","/docs/transformers/pr_17113/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(yN,"href","/docs/transformers/pr_17113/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(LN,"href","/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(xN,"href","/docs/transformers/pr_17113/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c($N,"href","/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(kN,"href","/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraForCausalLM"),c(SN,"href","/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(RN,"href","/docs/transformers/pr_17113/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(BN,"href","/docs/transformers/pr_17113/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(PN,"href","/docs/transformers/pr_17113/en/model_doc/marian#transformers.MarianForCausalLM"),c(IN,"href","/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartForCausalLM"),c(qN,"href","/docs/transformers/pr_17113/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(NN,"href","/docs/transformers/pr_17113/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(jN,"href","/docs/transformers/pr_17113/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(DN,"href","/docs/transformers/pr_17113/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(GN,"href","/docs/transformers/pr_17113/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(ON,"href","/docs/transformers/pr_17113/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(VN,"href","/docs/transformers/pr_17113/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(XN,"href","/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(zN,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(QN,"href","/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(WN,"href","/docs/transformers/pr_17113/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(HN,"href","/docs/transformers/pr_17113/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(UN,"href","/docs/transformers/pr_17113/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(JN,"href","/docs/transformers/pr_17113/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(YN,"href","/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(KN,"href","/docs/transformers/pr_17113/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(ZN,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(ej,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(oj,"href","/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f1,"id","transformers.AutoModelForMaskedLM"),c(f1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f1,"href","#transformers.AutoModelForMaskedLM"),c($i,"class","relative group"),c(rj,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tj,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aj,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nj,"href","/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(sj,"href","/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(lj,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertForMaskedLM"),c(ij,"href","/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(dj,"href","/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(cj,"href","/docs/transformers/pr_17113/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(fj,"href","/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(mj,"href","/docs/transformers/pr_17113/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(gj,"href","/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(hj,"href","/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(pj,"href","/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(uj,"href","/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(_j,"href","/docs/transformers/pr_17113/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(bj,"href","/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(vj,"href","/docs/transformers/pr_17113/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Tj,"href","/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Mj,"href","/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Ej,"href","/docs/transformers/pr_17113/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Cj,"href","/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(wj,"href","/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Aj,"href","/docs/transformers/pr_17113/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(yj,"href","/docs/transformers/pr_17113/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17113/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(xj,"href","/docs/transformers/pr_17113/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c($j,"href","/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(kj,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Sj,"href","/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Rj,"href","/docs/transformers/pr_17113/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Bj,"href","/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Pj,"href","/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Ij,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(qj,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Nj,"href","/docs/transformers/pr_17113/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J1,"id","transformers.AutoModelForSeq2SeqLM"),c(J1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ri,"class","relative group"),c(jj,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dj,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gj,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oj,"href","/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Vj,"href","/docs/transformers/pr_17113/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Xj,"href","/docs/transformers/pr_17113/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(zj,"href","/docs/transformers/pr_17113/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Qj,"href","/docs/transformers/pr_17113/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Wj,"href","/docs/transformers/pr_17113/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Hj,"href","/docs/transformers/pr_17113/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Uj,"href","/docs/transformers/pr_17113/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Jj,"href","/docs/transformers/pr_17113/en/model_doc/marian#transformers.MarianMTModel"),c(Yj,"href","/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Kj,"href","/docs/transformers/pr_17113/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Zj,"href","/docs/transformers/pr_17113/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(eD,"href","/docs/transformers/pr_17113/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(oD,"href","/docs/transformers/pr_17113/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(rD,"href","/docs/transformers/pr_17113/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(tD,"href","/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(aD,"href","/docs/transformers/pr_17113/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_b,"id","transformers.AutoModelForSequenceClassification"),c(_b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_b,"href","#transformers.AutoModelForSequenceClassification"),c(Ii,"class","relative group"),c(nD,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sD,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lD,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iD,"href","/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(dD,"href","/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartForSequenceClassification"),c(cD,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertForSequenceClassification"),c(fD,"href","/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(mD,"href","/docs/transformers/pr_17113/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(gD,"href","/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(hD,"href","/docs/transformers/pr_17113/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(pD,"href","/docs/transformers/pr_17113/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(uD,"href","/docs/transformers/pr_17113/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(_D,"href","/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(bD,"href","/docs/transformers/pr_17113/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(vD,"href","/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(FD,"href","/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(TD,"href","/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(MD,"href","/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(ED,"href","/docs/transformers/pr_17113/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(CD,"href","/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(wD,"href","/docs/transformers/pr_17113/en/model_doc/glm#transformers.GLMForSequenceClassification"),c(AD,"href","/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(yD,"href","/docs/transformers/pr_17113/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(LD,"href","/docs/transformers/pr_17113/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(xD,"href","/docs/transformers/pr_17113/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c($D,"href","/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(kD,"href","/docs/transformers/pr_17113/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(SD,"href","/docs/transformers/pr_17113/en/model_doc/led#transformers.LEDForSequenceClassification"),c(RD,"href","/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(BD,"href","/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(PD,"href","/docs/transformers/pr_17113/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(ND,"href","/docs/transformers/pr_17113/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17113/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17113/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17113/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17113/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17113/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17113/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17113/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17113/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p2,"id","transformers.AutoModelForMultipleChoice"),c(p2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p2,"href","#transformers.AutoModelForMultipleChoice"),c(ji,"class","relative group"),c(rG,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tG,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aG,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nG,"href","/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(sG,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertForMultipleChoice"),c(lG,"href","/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(iG,"href","/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(dG,"href","/docs/transformers/pr_17113/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(cG,"href","/docs/transformers/pr_17113/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(fG,"href","/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(mG,"href","/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(gG,"href","/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(hG,"href","/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(pG,"href","/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(uG,"href","/docs/transformers/pr_17113/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(_G,"href","/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(bG,"href","/docs/transformers/pr_17113/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(vG,"href","/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(FG,"href","/docs/transformers/pr_17113/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(TG,"href","/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(MG,"href","/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(EG,"href","/docs/transformers/pr_17113/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(CG,"href","/docs/transformers/pr_17113/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(wG,"href","/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(AG,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(yG,"href","/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(LG,"href","/docs/transformers/pr_17113/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(xG,"href","/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c($G,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(kG,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(SG,"href","/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(RG,"href","/docs/transformers/pr_17113/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H2,"id","transformers.AutoModelForNextSentencePrediction"),c(H2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H2,"href","#transformers.AutoModelForNextSentencePrediction"),c(Oi,"class","relative group"),c(BG,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PG,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IG,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qG,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(NG,"href","/docs/transformers/pr_17113/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(jG,"href","/docs/transformers/pr_17113/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(DG,"href","/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(GG,"href","/docs/transformers/pr_17113/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t3,"id","transformers.AutoModelForTokenClassification"),c(t3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t3,"href","#transformers.AutoModelForTokenClassification"),c(zi,"class","relative group"),c(OG,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VG,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XG,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zG,"href","/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(QG,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertForTokenClassification"),c(WG,"href","/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(HG,"href","/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(UG,"href","/docs/transformers/pr_17113/en/model_doc/canine#transformers.CanineForTokenClassification"),c(JG,"href","/docs/transformers/pr_17113/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(YG,"href","/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(KG,"href","/docs/transformers/pr_17113/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(ZG,"href","/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(eO,"href","/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(oO,"href","/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(rO,"href","/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(tO,"href","/docs/transformers/pr_17113/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(aO,"href","/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(nO,"href","/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(sO,"href","/docs/transformers/pr_17113/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(lO,"href","/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(iO,"href","/docs/transformers/pr_17113/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(dO,"href","/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(cO,"href","/docs/transformers/pr_17113/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(fO,"href","/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(mO,"href","/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(gO,"href","/docs/transformers/pr_17113/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(hO,"href","/docs/transformers/pr_17113/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(pO,"href","/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(uO,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(_O,"href","/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(bO,"href","/docs/transformers/pr_17113/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(vO,"href","/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(FO,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(TO,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(MO,"href","/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(EO,"href","/docs/transformers/pr_17113/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D3,"id","transformers.AutoModelForQuestionAnswering"),c(D3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D3,"href","#transformers.AutoModelForQuestionAnswering"),c(Hi,"class","relative group"),c(CO,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wO,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AO,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yO,"href","/docs/transformers/pr_17113/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(LO,"href","/docs/transformers/pr_17113/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(xO,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.BertForQuestionAnswering"),c($O,"href","/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(kO,"href","/docs/transformers/pr_17113/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(SO,"href","/docs/transformers/pr_17113/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(RO,"href","/docs/transformers/pr_17113/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(BO,"href","/docs/transformers/pr_17113/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(PO,"href","/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(IO,"href","/docs/transformers/pr_17113/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(qO,"href","/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(NO,"href","/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(jO,"href","/docs/transformers/pr_17113/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(DO,"href","/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(GO,"href","/docs/transformers/pr_17113/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_17113/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_17113/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_17113/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_17113/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_17113/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_17113/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_17113/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_17113/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_17113/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_17113/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_17113/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_17113/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_17113/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_17113/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_17113/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_17113/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_17113/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(iV,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(fV,"href","/docs/transformers/pr_17113/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xv,"id","transformers.AutoModelForTableQuestionAnswering"),c(xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Yi,"class","relative group"),c(mV,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gV,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hV,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pV,"href","/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bv,"id","transformers.AutoModelForImageClassification"),c(Bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bv,"href","#transformers.AutoModelForImageClassification"),c(ed,"class","relative group"),c(uV,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_V,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bV,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vV,"href","/docs/transformers/pr_17113/en/model_doc/beit#transformers.BeitForImageClassification"),c(FV,"href","/docs/transformers/pr_17113/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(TV,"href","/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(MV,"href","/docs/transformers/pr_17113/en/model_doc/deit#transformers.DeiTForImageClassification"),c(EV,"href","/docs/transformers/pr_17113/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(CV,"href","/docs/transformers/pr_17113/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(wV,"href","/docs/transformers/pr_17113/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(AV,"href","/docs/transformers/pr_17113/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(yV,"href","/docs/transformers/pr_17113/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(LV,"href","/docs/transformers/pr_17113/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(xV,"href","/docs/transformers/pr_17113/en/model_doc/regnet#transformers.RegNetForImageClassification"),c($V,"href","/docs/transformers/pr_17113/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(kV,"href","/docs/transformers/pr_17113/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(SV,"href","/docs/transformers/pr_17113/en/model_doc/swin#transformers.SwinForImageClassification"),c(RV,"href","/docs/transformers/pr_17113/en/model_doc/van#transformers.VanForImageClassification"),c(BV,"href","/docs/transformers/pr_17113/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uv,"id","transformers.AutoModelForVision2Seq"),c(Uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uv,"href","#transformers.AutoModelForVision2Seq"),c(td,"class","relative group"),c(PV,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IV,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qV,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NV,"href","/docs/transformers/pr_17113/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eF,"id","transformers.AutoModelForAudioClassification"),c(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eF,"href","#transformers.AutoModelForAudioClassification"),c(sd,"class","relative group"),c(jV,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DV,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GV,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OV,"href","/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(VV,"href","/docs/transformers/pr_17113/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(XV,"href","/docs/transformers/pr_17113/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(zV,"href","/docs/transformers/pr_17113/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(QV,"href","/docs/transformers/pr_17113/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(WV,"href","/docs/transformers/pr_17113/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(HV,"href","/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(UV,"href","/docs/transformers/pr_17113/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mF,"id","transformers.AutoModelForAudioFrameClassification"),c(mF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mF,"href","#transformers.AutoModelForAudioFrameClassification"),c(dd,"class","relative group"),c(JV,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YV,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KV,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZV,"href","/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(eX,"href","/docs/transformers/pr_17113/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(oX,"href","/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(rX,"href","/docs/transformers/pr_17113/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FF,"id","transformers.AutoModelForCTC"),c(FF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FF,"href","#transformers.AutoModelForCTC"),c(md,"class","relative group"),c(tX,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aX,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nX,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sX,"href","/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(lX,"href","/docs/transformers/pr_17113/en/model_doc/hubert#transformers.HubertForCTC"),c(iX,"href","/docs/transformers/pr_17113/en/model_doc/sew#transformers.SEWForCTC"),c(dX,"href","/docs/transformers/pr_17113/en/model_doc/sew-d#transformers.SEWDForCTC"),c(cX,"href","/docs/transformers/pr_17113/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(fX,"href","/docs/transformers/pr_17113/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(mX,"href","/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(gX,"href","/docs/transformers/pr_17113/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(SF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(pd,"class","relative group"),c(hX,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pX,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uX,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_X,"href","/docs/transformers/pr_17113/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(bX,"href","/docs/transformers/pr_17113/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NF,"id","transformers.AutoModelForAudioXVector"),c(NF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NF,"href","#transformers.AutoModelForAudioXVector"),c(bd,"class","relative group"),c(vX,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FX,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TX,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MX,"href","/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(EX,"href","/docs/transformers/pr_17113/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(CX,"href","/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(wX,"href","/docs/transformers/pr_17113/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QF,"id","transformers.AutoModelForMaskedImageModeling"),c(QF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Td,"class","relative group"),c(AX,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yX,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LX,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xX,"href","/docs/transformers/pr_17113/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c($X,"href","/docs/transformers/pr_17113/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(kX,"href","/docs/transformers/pr_17113/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZF,"id","transformers.AutoModelForObjectDetection"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.AutoModelForObjectDetection"),c(wd,"class","relative group"),c(SX,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RX,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BX,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PX,"href","/docs/transformers/pr_17113/en/model_doc/detr#transformers.DetrForObjectDetection"),c(IX,"href","/docs/transformers/pr_17113/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nT,"id","transformers.AutoModelForImageSegmentation"),c(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nT,"href","#transformers.AutoModelForImageSegmentation"),c(Ld,"class","relative group"),c(qX,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NX,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jX,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DX,"href","/docs/transformers/pr_17113/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cT,"id","transformers.AutoModelForSemanticSegmentation"),c(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cT,"href","#transformers.AutoModelForSemanticSegmentation"),c(kd,"class","relative group"),c(GX,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OX,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VX,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XX,"href","/docs/transformers/pr_17113/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(zX,"href","/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(QX,"href","/docs/transformers/pr_17113/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(WX,"href","/docs/transformers/pr_17113/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bT,"id","transformers.AutoModelForInstanceSegmentation"),c(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Bd,"class","relative group"),c(HX,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UX,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JX,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YX,"href","/docs/transformers/pr_17113/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ET,"id","transformers.TFAutoModel"),c(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ET,"href","#transformers.TFAutoModel"),c(qd,"class","relative group"),c(KX,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZX,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ez,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oz,"href","/docs/transformers/pr_17113/en/model_doc/albert#transformers.TFAlbertModel"),c(rz,"href","/docs/transformers/pr_17113/en/model_doc/bart#transformers.TFBartModel"),c(tz,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.TFBertModel"),c(az,"href","/docs/transformers/pr_17113/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(nz,"href","/docs/transformers/pr_17113/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(sz,"href","/docs/transformers/pr_17113/en/model_doc/camembert#transformers.TFCamembertModel"),c(lz,"href","/docs/transformers/pr_17113/en/model_doc/clip#transformers.TFCLIPModel"),c(iz,"href","/docs/transformers/pr_17113/en/model_doc/convbert#transformers.TFConvBertModel"),c(dz,"href","/docs/transformers/pr_17113/en/model_doc/convnext#transformers.TFConvNextModel"),c(cz,"href","/docs/transformers/pr_17113/en/model_doc/ctrl#transformers.TFCTRLModel"),c(fz,"href","/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(mz,"href","/docs/transformers/pr_17113/en/model_doc/deberta#transformers.TFDebertaModel"),c(gz,"href","/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(hz,"href","/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(pz,"href","/docs/transformers/pr_17113/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(uz,"href","/docs/transformers/pr_17113/en/model_doc/electra#transformers.TFElectraModel"),c(_z,"href","/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(bz,"href","/docs/transformers/pr_17113/en/model_doc/funnel#transformers.TFFunnelModel"),c(vz,"href","/docs/transformers/pr_17113/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Fz,"href","/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Tz,"href","/docs/transformers/pr_17113/en/model_doc/gptj#transformers.TFGPTJModel"),c(Mz,"href","/docs/transformers/pr_17113/en/model_doc/hubert#transformers.TFHubertModel"),c(Ez,"href","/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Cz,"href","/docs/transformers/pr_17113/en/model_doc/led#transformers.TFLEDModel"),c(wz,"href","/docs/transformers/pr_17113/en/model_doc/longformer#transformers.TFLongformerModel"),c(Az,"href","/docs/transformers/pr_17113/en/model_doc/lxmert#transformers.TFLxmertModel"),c(yz,"href","/docs/transformers/pr_17113/en/model_doc/marian#transformers.TFMarianModel"),c(Lz,"href","/docs/transformers/pr_17113/en/model_doc/mbart#transformers.TFMBartModel"),c(xz,"href","/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c($z,"href","/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.TFMPNetModel"),c(kz,"href","/docs/transformers/pr_17113/en/model_doc/mt5#transformers.TFMT5Model"),c(Sz,"href","/docs/transformers/pr_17113/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Rz,"href","/docs/transformers/pr_17113/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Bz,"href","/docs/transformers/pr_17113/en/model_doc/rembert#transformers.TFRemBertModel"),c(Pz,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.TFRobertaModel"),c(Iz,"href","/docs/transformers/pr_17113/en/model_doc/roformer#transformers.TFRoFormerModel"),c(qz,"href","/docs/transformers/pr_17113/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Nz,"href","/docs/transformers/pr_17113/en/model_doc/t5#transformers.TFT5Model"),c(jz,"href","/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TFTapasModel"),c(Dz,"href","/docs/transformers/pr_17113/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Gz,"href","/docs/transformers/pr_17113/en/model_doc/vit#transformers.TFViTModel"),c(Oz,"href","/docs/transformers/pr_17113/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Vz,"href","/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Xz,"href","/docs/transformers/pr_17113/en/model_doc/xlm#transformers.TFXLMModel"),c(zz,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Qz,"href","/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u7,"id","transformers.TFAutoModelForPreTraining"),c(u7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u7,"href","#transformers.TFAutoModelForPreTraining"),c(Dd,"class","relative group"),c(Wz,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hz,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uz,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jz,"href","/docs/transformers/pr_17113/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Yz,"href","/docs/transformers/pr_17113/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Kz,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Zz,"href","/docs/transformers/pr_17113/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(eQ,"href","/docs/transformers/pr_17113/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(oQ,"href","/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(rQ,"href","/docs/transformers/pr_17113/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(tQ,"href","/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(aQ,"href","/docs/transformers/pr_17113/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(nQ,"href","/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(sQ,"href","/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(lQ,"href","/docs/transformers/pr_17113/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(iQ,"href","/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(dQ,"href","/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(cQ,"href","/docs/transformers/pr_17113/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(fQ,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(mQ,"href","/docs/transformers/pr_17113/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(gQ,"href","/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(hQ,"href","/docs/transformers/pr_17113/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(pQ,"href","/docs/transformers/pr_17113/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(uQ,"href","/docs/transformers/pr_17113/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(_Q,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(bQ,"href","/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O7,"id","transformers.TFAutoModelForCausalLM"),c(O7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O7,"href","#transformers.TFAutoModelForCausalLM"),c(Vd,"class","relative group"),c(vQ,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FQ,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TQ,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MQ,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(EQ,"href","/docs/transformers/pr_17113/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(CQ,"href","/docs/transformers/pr_17113/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(wQ,"href","/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(AQ,"href","/docs/transformers/pr_17113/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(yQ,"href","/docs/transformers/pr_17113/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(LQ,"href","/docs/transformers/pr_17113/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(xQ,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c($Q,"href","/docs/transformers/pr_17113/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(kQ,"href","/docs/transformers/pr_17113/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(SQ,"href","/docs/transformers/pr_17113/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(RQ,"href","/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tM,"id","transformers.TFAutoModelForImageClassification"),c(tM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tM,"href","#transformers.TFAutoModelForImageClassification"),c(Qd,"class","relative group"),c(BQ,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PQ,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IQ,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qQ,"href","/docs/transformers/pr_17113/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(NQ,"href","/docs/transformers/pr_17113/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(jQ,"href","/docs/transformers/pr_17113/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dM,"id","transformers.TFAutoModelForMaskedLM"),c(dM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dM,"href","#transformers.TFAutoModelForMaskedLM"),c(Jd,"class","relative group"),c(DQ,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GQ,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OQ,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VQ,"href","/docs/transformers/pr_17113/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(XQ,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(zQ,"href","/docs/transformers/pr_17113/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(QQ,"href","/docs/transformers/pr_17113/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(WQ,"href","/docs/transformers/pr_17113/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(HQ,"href","/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(UQ,"href","/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(JQ,"href","/docs/transformers/pr_17113/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(YQ,"href","/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(KQ,"href","/docs/transformers/pr_17113/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(eW,"href","/docs/transformers/pr_17113/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(oW,"href","/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(rW,"href","/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(tW,"href","/docs/transformers/pr_17113/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(aW,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(nW,"href","/docs/transformers/pr_17113/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(sW,"href","/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(lW,"href","/docs/transformers/pr_17113/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(iW,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(SM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Zd,"class","relative group"),c(dW,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cW,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fW,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mW,"href","/docs/transformers/pr_17113/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(gW,"href","/docs/transformers/pr_17113/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(hW,"href","/docs/transformers/pr_17113/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(pW,"href","/docs/transformers/pr_17113/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(uW,"href","/docs/transformers/pr_17113/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(_W,"href","/docs/transformers/pr_17113/en/model_doc/marian#transformers.TFMarianMTModel"),c(bW,"href","/docs/transformers/pr_17113/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(vW,"href","/docs/transformers/pr_17113/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(FW,"href","/docs/transformers/pr_17113/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(TW,"href","/docs/transformers/pr_17113/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zM,"id","transformers.TFAutoModelForSequenceClassification"),c(zM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zM,"href","#transformers.TFAutoModelForSequenceClassification"),c(rc,"class","relative group"),c(MW,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EW,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CW,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wW,"href","/docs/transformers/pr_17113/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(AW,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(yW,"href","/docs/transformers/pr_17113/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(LW,"href","/docs/transformers/pr_17113/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(xW,"href","/docs/transformers/pr_17113/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c($W,"href","/docs/transformers/pr_17113/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(kW,"href","/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(SW,"href","/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(RW,"href","/docs/transformers/pr_17113/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(BW,"href","/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(PW,"href","/docs/transformers/pr_17113/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(IW,"href","/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(qW,"href","/docs/transformers/pr_17113/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(NW,"href","/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(jW,"href","/docs/transformers/pr_17113/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(DW,"href","/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(GW,"href","/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(OW,"href","/docs/transformers/pr_17113/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(VW,"href","/docs/transformers/pr_17113/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(XW,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(zW,"href","/docs/transformers/pr_17113/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(QW,"href","/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(WW,"href","/docs/transformers/pr_17113/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(HW,"href","/docs/transformers/pr_17113/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(UW,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(JW,"href","/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F4,"id","transformers.TFAutoModelForMultipleChoice"),c(F4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F4,"href","#transformers.TFAutoModelForMultipleChoice"),c(nc,"class","relative group"),c(YW,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KW,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZW,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eH,"href","/docs/transformers/pr_17113/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(oH,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(rH,"href","/docs/transformers/pr_17113/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(tH,"href","/docs/transformers/pr_17113/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(aH,"href","/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(nH,"href","/docs/transformers/pr_17113/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(sH,"href","/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(lH,"href","/docs/transformers/pr_17113/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(iH,"href","/docs/transformers/pr_17113/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(dH,"href","/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(cH,"href","/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(fH,"href","/docs/transformers/pr_17113/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(mH,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(gH,"href","/docs/transformers/pr_17113/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(hH,"href","/docs/transformers/pr_17113/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(pH,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(uH,"href","/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(D4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(ic,"class","relative group"),c(_H,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bH,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vH,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FH,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(TH,"href","/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(fc,"class","relative group"),c(MH,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EH,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CH,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wH,"href","/docs/transformers/pr_17113/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U4,"id","transformers.TFAutoModelForTokenClassification"),c(U4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U4,"href","#transformers.TFAutoModelForTokenClassification"),c(hc,"class","relative group"),c(AH,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yH,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LH,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xH,"href","/docs/transformers/pr_17113/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c($H,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(kH,"href","/docs/transformers/pr_17113/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(SH,"href","/docs/transformers/pr_17113/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(RH,"href","/docs/transformers/pr_17113/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(BH,"href","/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(PH,"href","/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(IH,"href","/docs/transformers/pr_17113/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(qH,"href","/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(NH,"href","/docs/transformers/pr_17113/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(jH,"href","/docs/transformers/pr_17113/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(DH,"href","/docs/transformers/pr_17113/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(GH,"href","/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(OH,"href","/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(VH,"href","/docs/transformers/pr_17113/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(XH,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(zH,"href","/docs/transformers/pr_17113/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(QH,"href","/docs/transformers/pr_17113/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(WH,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(HH,"href","/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bE,"id","transformers.TFAutoModelForQuestionAnswering"),c(bE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(_c,"class","relative group"),c(UH,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JH,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YH,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KH,"href","/docs/transformers/pr_17113/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(ZH,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(eU,"href","/docs/transformers/pr_17113/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(oU,"href","/docs/transformers/pr_17113/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(rU,"href","/docs/transformers/pr_17113/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(tU,"href","/docs/transformers/pr_17113/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(aU,"href","/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(nU,"href","/docs/transformers/pr_17113/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(sU,"href","/docs/transformers/pr_17113/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(lU,"href","/docs/transformers/pr_17113/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(iU,"href","/docs/transformers/pr_17113/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(dU,"href","/docs/transformers/pr_17113/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(cU,"href","/docs/transformers/pr_17113/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(fU,"href","/docs/transformers/pr_17113/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(mU,"href","/docs/transformers/pr_17113/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(gU,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(hU,"href","/docs/transformers/pr_17113/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(pU,"href","/docs/transformers/pr_17113/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(uU,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(_U,"href","/docs/transformers/pr_17113/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GE,"id","transformers.TFAutoModelForVision2Seq"),c(GE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GE,"href","#transformers.TFAutoModelForVision2Seq"),c(Fc,"class","relative group"),c(bU,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vU,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FU,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TU,"href","/docs/transformers/pr_17113/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(zE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ec,"class","relative group"),c(MU,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EU,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CU,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wU,"href","/docs/transformers/pr_17113/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UE,"id","transformers.FlaxAutoModel"),c(UE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UE,"href","#transformers.FlaxAutoModel"),c(Ac,"class","relative group"),c(AU,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yU,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LU,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xU,"href","/docs/transformers/pr_17113/en/model_doc/albert#transformers.FlaxAlbertModel"),c($U,"href","/docs/transformers/pr_17113/en/model_doc/bart#transformers.FlaxBartModel"),c(kU,"href","/docs/transformers/pr_17113/en/model_doc/beit#transformers.FlaxBeitModel"),c(SU,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.FlaxBertModel"),c(RU,"href","/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(BU,"href","/docs/transformers/pr_17113/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(PU,"href","/docs/transformers/pr_17113/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(IU,"href","/docs/transformers/pr_17113/en/model_doc/clip#transformers.FlaxCLIPModel"),c(qU,"href","/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(NU,"href","/docs/transformers/pr_17113/en/model_doc/electra#transformers.FlaxElectraModel"),c(jU,"href","/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(DU,"href","/docs/transformers/pr_17113/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(GU,"href","/docs/transformers/pr_17113/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(OU,"href","/docs/transformers/pr_17113/en/model_doc/marian#transformers.FlaxMarianModel"),c(VU,"href","/docs/transformers/pr_17113/en/model_doc/mbart#transformers.FlaxMBartModel"),c(XU,"href","/docs/transformers/pr_17113/en/model_doc/mt5#transformers.FlaxMT5Model"),c(zU,"href","/docs/transformers/pr_17113/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(QU,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(WU,"href","/docs/transformers/pr_17113/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(HU,"href","/docs/transformers/pr_17113/en/model_doc/t5#transformers.FlaxT5Model"),c(UU,"href","/docs/transformers/pr_17113/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(JU,"href","/docs/transformers/pr_17113/en/model_doc/vit#transformers.FlaxViTModel"),c(YU,"href","/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(KU,"href","/docs/transformers/pr_17113/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(ZU,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E5,"id","transformers.FlaxAutoModelForCausalLM"),c(E5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E5,"href","#transformers.FlaxAutoModelForCausalLM"),c(xc,"class","relative group"),c(eJ,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oJ,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rJ,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tJ,"href","/docs/transformers/pr_17113/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(aJ,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(nJ,"href","/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(sJ,"href","/docs/transformers/pr_17113/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(lJ,"href","/docs/transformers/pr_17113/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(iJ,"href","/docs/transformers/pr_17113/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(dJ,"href","/docs/transformers/pr_17113/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(cJ,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(fJ,"href","/docs/transformers/pr_17113/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P5,"id","transformers.FlaxAutoModelForPreTraining"),c(P5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Sc,"class","relative group"),c(mJ,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gJ,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hJ,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pJ,"href","/docs/transformers/pr_17113/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(uJ,"href","/docs/transformers/pr_17113/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(_J,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(bJ,"href","/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(vJ,"href","/docs/transformers/pr_17113/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(FJ,"href","/docs/transformers/pr_17113/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(TJ,"href","/docs/transformers/pr_17113/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(MJ,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(EJ,"href","/docs/transformers/pr_17113/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(CJ,"href","/docs/transformers/pr_17113/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(wJ,"href","/docs/transformers/pr_17113/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(AJ,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J5,"id","transformers.FlaxAutoModelForMaskedLM"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Pc,"class","relative group"),c(yJ,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LJ,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xJ,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($J,"href","/docs/transformers/pr_17113/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(kJ,"href","/docs/transformers/pr_17113/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(SJ,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(RJ,"href","/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(BJ,"href","/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(PJ,"href","/docs/transformers/pr_17113/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(IJ,"href","/docs/transformers/pr_17113/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(qJ,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(NJ,"href","/docs/transformers/pr_17113/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(jJ,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(dC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Nc,"class","relative group"),c(DJ,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GJ,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OJ,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VJ,"href","/docs/transformers/pr_17113/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(XJ,"href","/docs/transformers/pr_17113/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(zJ,"href","/docs/transformers/pr_17113/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(QJ,"href","/docs/transformers/pr_17113/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(WJ,"href","/docs/transformers/pr_17113/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(HJ,"href","/docs/transformers/pr_17113/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(UJ,"href","/docs/transformers/pr_17113/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(JJ,"href","/docs/transformers/pr_17113/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(YJ,"href","/docs/transformers/pr_17113/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(TC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Gc,"class","relative group"),c(KJ,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZJ,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eY,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oY,"href","/docs/transformers/pr_17113/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(rY,"href","/docs/transformers/pr_17113/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(tY,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(aY,"href","/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(nY,"href","/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(sY,"href","/docs/transformers/pr_17113/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(lY,"href","/docs/transformers/pr_17113/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(iY,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(dY,"href","/docs/transformers/pr_17113/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(cY,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(BC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(fY,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mY,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gY,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hY,"href","/docs/transformers/pr_17113/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(pY,"href","/docs/transformers/pr_17113/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(uY,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(_Y,"href","/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(bY,"href","/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(vY,"href","/docs/transformers/pr_17113/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(FY,"href","/docs/transformers/pr_17113/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(TY,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(MY,"href","/docs/transformers/pr_17113/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(EY,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WC,"id","transformers.FlaxAutoModelForTokenClassification"),c(WC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Wc,"class","relative group"),c(CY,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wY,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AY,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yY,"href","/docs/transformers/pr_17113/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(LY,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(xY,"href","/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c($Y,"href","/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(kY,"href","/docs/transformers/pr_17113/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(SY,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(RY,"href","/docs/transformers/pr_17113/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(BY,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(aw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Jc,"class","relative group"),c(PY,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IY,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qY,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NY,"href","/docs/transformers/pr_17113/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(jY,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(DY,"href","/docs/transformers/pr_17113/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(GY,"href","/docs/transformers/pr_17113/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(OY,"href","/docs/transformers/pr_17113/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(VY,"href","/docs/transformers/pr_17113/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(XY,"href","/docs/transformers/pr_17113/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(zY,"href","/docs/transformers/pr_17113/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Zc,"class","relative group"),c(QY,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WY,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HY,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UY,"href","/docs/transformers/pr_17113/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vw,"id","transformers.FlaxAutoModelForImageClassification"),c(vw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vw,"href","#transformers.FlaxAutoModelForImageClassification"),c(rf,"class","relative group"),c(JY,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YY,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KY,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZY,"href","/docs/transformers/pr_17113/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(eK,"href","/docs/transformers/pr_17113/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Cw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(nf,"class","relative group"),c(oK,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rK,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tK,"href","/docs/transformers/pr_17113/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aK,"href","/docs/transformers/pr_17113/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,li),b(f,mf,_),b(f,et,_),e(et,ii),e(et,di),e(di,Q6),e(et,gf),b(f,qe,_),b(f,Xe,_),e(Xe,ci),e(Xe,An),e(An,W6),e(Xe,yn),e(Xe,Ln),e(Ln,H6),e(Xe,fi),e(Xe,xn),e(xn,U6),e(Xe,mi),b(f,hf,_),M(Ma,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,g$),e(Ae,gi),e(gi,h$),e(Ae,p$),b(f,Eo,_),b(f,Ea,_),e(Ea,u$),e(Ea,pf),e(pf,_$),e(Ea,Jje),b(f,jPe,_),b(f,hi,_),e(hi,uf),e(uf,KZ),M(J6,KZ,null),e(hi,Yje),e(hi,ZZ),e(ZZ,Kje),b(f,DPe,_),b(f,$n,_),e($n,Zje),e($n,eee),e(eee,eDe),e($n,oDe),e($n,oee),e(oee,rDe),e($n,tDe),b(f,GPe,_),M(Y6,f,_),b(f,OPe,_),b(f,b$,_),e(b$,aDe),b(f,VPe,_),M(_f,f,_),b(f,XPe,_),b(f,pi,_),e(pi,bf),e(bf,ree),M(K6,ree,null),e(pi,nDe),e(pi,tee),e(tee,sDe),b(f,zPe,_),b(f,Co,_),M(Z6,Co,null),e(Co,lDe),e(Co,e0),e(e0,iDe),e(e0,v$),e(v$,dDe),e(e0,cDe),e(Co,fDe),e(Co,o0),e(o0,mDe),e(o0,aee),e(aee,gDe),e(o0,hDe),e(Co,pDe),e(Co,Er),M(r0,Er,null),e(Er,uDe),e(Er,nee),e(nee,_De),e(Er,bDe),e(Er,ui),e(ui,vDe),e(ui,see),e(see,FDe),e(ui,TDe),e(ui,lee),e(lee,MDe),e(ui,EDe),e(Er,CDe),e(Er,A),e(A,vf),e(vf,iee),e(iee,wDe),e(vf,ADe),e(vf,F$),e(F$,yDe),e(vf,LDe),e(A,xDe),e(A,Ff),e(Ff,dee),e(dee,$De),e(Ff,kDe),e(Ff,T$),e(T$,SDe),e(Ff,RDe),e(A,BDe),e(A,Tf),e(Tf,cee),e(cee,PDe),e(Tf,IDe),e(Tf,M$),e(M$,qDe),e(Tf,NDe),e(A,jDe),e(A,Mf),e(Mf,fee),e(fee,DDe),e(Mf,GDe),e(Mf,E$),e(E$,ODe),e(Mf,VDe),e(A,XDe),e(A,Ef),e(Ef,mee),e(mee,zDe),e(Ef,QDe),e(Ef,C$),e(C$,WDe),e(Ef,HDe),e(A,UDe),e(A,Cf),e(Cf,gee),e(gee,JDe),e(Cf,YDe),e(Cf,w$),e(w$,KDe),e(Cf,ZDe),e(A,eGe),e(A,wf),e(wf,hee),e(hee,oGe),e(wf,rGe),e(wf,A$),e(A$,tGe),e(wf,aGe),e(A,nGe),e(A,Af),e(Af,pee),e(pee,sGe),e(Af,lGe),e(Af,y$),e(y$,iGe),e(Af,dGe),e(A,cGe),e(A,yf),e(yf,uee),e(uee,fGe),e(yf,mGe),e(yf,L$),e(L$,gGe),e(yf,hGe),e(A,pGe),e(A,Lf),e(Lf,_ee),e(_ee,uGe),e(Lf,_Ge),e(Lf,x$),e(x$,bGe),e(Lf,vGe),e(A,FGe),e(A,xf),e(xf,bee),e(bee,TGe),e(xf,MGe),e(xf,$$),e($$,EGe),e(xf,CGe),e(A,wGe),e(A,$f),e($f,vee),e(vee,AGe),e($f,yGe),e($f,k$),e(k$,LGe),e($f,xGe),e(A,$Ge),e(A,kf),e(kf,Fee),e(Fee,kGe),e(kf,SGe),e(kf,S$),e(S$,RGe),e(kf,BGe),e(A,PGe),e(A,Sf),e(Sf,Tee),e(Tee,IGe),e(Sf,qGe),e(Sf,R$),e(R$,NGe),e(Sf,jGe),e(A,DGe),e(A,Rf),e(Rf,Mee),e(Mee,GGe),e(Rf,OGe),e(Rf,B$),e(B$,VGe),e(Rf,XGe),e(A,zGe),e(A,Bf),e(Bf,Eee),e(Eee,QGe),e(Bf,WGe),e(Bf,P$),e(P$,HGe),e(Bf,UGe),e(A,JGe),e(A,Pf),e(Pf,Cee),e(Cee,YGe),e(Pf,KGe),e(Pf,I$),e(I$,ZGe),e(Pf,eOe),e(A,oOe),e(A,If),e(If,wee),e(wee,rOe),e(If,tOe),e(If,q$),e(q$,aOe),e(If,nOe),e(A,sOe),e(A,qf),e(qf,Aee),e(Aee,lOe),e(qf,iOe),e(qf,N$),e(N$,dOe),e(qf,cOe),e(A,fOe),e(A,Nf),e(Nf,yee),e(yee,mOe),e(Nf,gOe),e(Nf,j$),e(j$,hOe),e(Nf,pOe),e(A,uOe),e(A,jf),e(jf,Lee),e(Lee,_Oe),e(jf,bOe),e(jf,D$),e(D$,vOe),e(jf,FOe),e(A,TOe),e(A,Df),e(Df,xee),e(xee,MOe),e(Df,EOe),e(Df,G$),e(G$,COe),e(Df,wOe),e(A,AOe),e(A,Gf),e(Gf,$ee),e($ee,yOe),e(Gf,LOe),e(Gf,O$),e(O$,xOe),e(Gf,$Oe),e(A,kOe),e(A,Of),e(Of,kee),e(kee,SOe),e(Of,ROe),e(Of,V$),e(V$,BOe),e(Of,POe),e(A,IOe),e(A,Vf),e(Vf,See),e(See,qOe),e(Vf,NOe),e(Vf,X$),e(X$,jOe),e(Vf,DOe),e(A,GOe),e(A,Xf),e(Xf,Ree),e(Ree,OOe),e(Xf,VOe),e(Xf,z$),e(z$,XOe),e(Xf,zOe),e(A,QOe),e(A,zf),e(zf,Bee),e(Bee,WOe),e(zf,HOe),e(zf,Q$),e(Q$,UOe),e(zf,JOe),e(A,YOe),e(A,Qf),e(Qf,Pee),e(Pee,KOe),e(Qf,ZOe),e(Qf,W$),e(W$,eVe),e(Qf,oVe),e(A,rVe),e(A,Wf),e(Wf,Iee),e(Iee,tVe),e(Wf,aVe),e(Wf,H$),e(H$,nVe),e(Wf,sVe),e(A,lVe),e(A,Hf),e(Hf,qee),e(qee,iVe),e(Hf,dVe),e(Hf,U$),e(U$,cVe),e(Hf,fVe),e(A,mVe),e(A,Uf),e(Uf,Nee),e(Nee,gVe),e(Uf,hVe),e(Uf,J$),e(J$,pVe),e(Uf,uVe),e(A,_Ve),e(A,Jf),e(Jf,jee),e(jee,bVe),e(Jf,vVe),e(Jf,Y$),e(Y$,FVe),e(Jf,TVe),e(A,MVe),e(A,Yf),e(Yf,Dee),e(Dee,EVe),e(Yf,CVe),e(Yf,K$),e(K$,wVe),e(Yf,AVe),e(A,yVe),e(A,Kf),e(Kf,Gee),e(Gee,LVe),e(Kf,xVe),e(Kf,Z$),e(Z$,$Ve),e(Kf,kVe),e(A,SVe),e(A,Zf),e(Zf,Oee),e(Oee,RVe),e(Zf,BVe),e(Zf,ek),e(ek,PVe),e(Zf,IVe),e(A,qVe),e(A,em),e(em,Vee),e(Vee,NVe),e(em,jVe),e(em,ok),e(ok,DVe),e(em,GVe),e(A,OVe),e(A,om),e(om,Xee),e(Xee,VVe),e(om,XVe),e(om,rk),e(rk,zVe),e(om,QVe),e(A,WVe),e(A,rm),e(rm,zee),e(zee,HVe),e(rm,UVe),e(rm,tk),e(tk,JVe),e(rm,YVe),e(A,KVe),e(A,tm),e(tm,Qee),e(Qee,ZVe),e(tm,eXe),e(tm,ak),e(ak,oXe),e(tm,rXe),e(A,tXe),e(A,am),e(am,Wee),e(Wee,aXe),e(am,nXe),e(am,nk),e(nk,sXe),e(am,lXe),e(A,iXe),e(A,nm),e(nm,Hee),e(Hee,dXe),e(nm,cXe),e(nm,sk),e(sk,fXe),e(nm,mXe),e(A,gXe),e(A,sm),e(sm,Uee),e(Uee,hXe),e(sm,pXe),e(sm,lk),e(lk,uXe),e(sm,_Xe),e(A,bXe),e(A,lm),e(lm,Jee),e(Jee,vXe),e(lm,FXe),e(lm,ik),e(ik,TXe),e(lm,MXe),e(A,EXe),e(A,im),e(im,Yee),e(Yee,CXe),e(im,wXe),e(im,dk),e(dk,AXe),e(im,yXe),e(A,LXe),e(A,dm),e(dm,Kee),e(Kee,xXe),e(dm,$Xe),e(dm,ck),e(ck,kXe),e(dm,SXe),e(A,RXe),e(A,cm),e(cm,Zee),e(Zee,BXe),e(cm,PXe),e(cm,fk),e(fk,IXe),e(cm,qXe),e(A,NXe),e(A,fm),e(fm,eoe),e(eoe,jXe),e(fm,DXe),e(fm,mk),e(mk,GXe),e(fm,OXe),e(A,VXe),e(A,mm),e(mm,ooe),e(ooe,XXe),e(mm,zXe),e(mm,gk),e(gk,QXe),e(mm,WXe),e(A,HXe),e(A,gm),e(gm,roe),e(roe,UXe),e(gm,JXe),e(gm,hk),e(hk,YXe),e(gm,KXe),e(A,ZXe),e(A,hm),e(hm,toe),e(toe,eze),e(hm,oze),e(hm,pk),e(pk,rze),e(hm,tze),e(A,aze),e(A,pm),e(pm,aoe),e(aoe,nze),e(pm,sze),e(pm,uk),e(uk,lze),e(pm,ize),e(A,dze),e(A,um),e(um,noe),e(noe,cze),e(um,fze),e(um,_k),e(_k,mze),e(um,gze),e(A,hze),e(A,_m),e(_m,soe),e(soe,pze),e(_m,uze),e(_m,bk),e(bk,_ze),e(_m,bze),e(A,vze),e(A,bm),e(bm,loe),e(loe,Fze),e(bm,Tze),e(bm,vk),e(vk,Mze),e(bm,Eze),e(A,Cze),e(A,vm),e(vm,ioe),e(ioe,wze),e(vm,Aze),e(vm,Fk),e(Fk,yze),e(vm,Lze),e(A,xze),e(A,Fm),e(Fm,doe),e(doe,$ze),e(Fm,kze),e(Fm,Tk),e(Tk,Sze),e(Fm,Rze),e(A,Bze),e(A,Tm),e(Tm,coe),e(coe,Pze),e(Tm,Ize),e(Tm,Mk),e(Mk,qze),e(Tm,Nze),e(A,jze),e(A,Mm),e(Mm,foe),e(foe,Dze),e(Mm,Gze),e(Mm,Ek),e(Ek,Oze),e(Mm,Vze),e(A,Xze),e(A,Em),e(Em,moe),e(moe,zze),e(Em,Qze),e(Em,Ck),e(Ck,Wze),e(Em,Hze),e(A,Uze),e(A,Cm),e(Cm,goe),e(goe,Jze),e(Cm,Yze),e(Cm,wk),e(wk,Kze),e(Cm,Zze),e(A,eQe),e(A,wm),e(wm,hoe),e(hoe,oQe),e(wm,rQe),e(wm,Ak),e(Ak,tQe),e(wm,aQe),e(A,nQe),e(A,Am),e(Am,poe),e(poe,sQe),e(Am,lQe),e(Am,yk),e(yk,iQe),e(Am,dQe),e(A,cQe),e(A,ym),e(ym,uoe),e(uoe,fQe),e(ym,mQe),e(ym,Lk),e(Lk,gQe),e(ym,hQe),e(A,pQe),e(A,Lm),e(Lm,_oe),e(_oe,uQe),e(Lm,_Qe),e(Lm,xk),e(xk,bQe),e(Lm,vQe),e(A,FQe),e(A,xm),e(xm,boe),e(boe,TQe),e(xm,MQe),e(xm,$k),e($k,EQe),e(xm,CQe),e(A,wQe),e(A,$m),e($m,voe),e(voe,AQe),e($m,yQe),e($m,kk),e(kk,LQe),e($m,xQe),e(A,$Qe),e(A,km),e(km,Foe),e(Foe,kQe),e(km,SQe),e(km,Sk),e(Sk,RQe),e(km,BQe),e(A,PQe),e(A,Sm),e(Sm,Toe),e(Toe,IQe),e(Sm,qQe),e(Sm,Rk),e(Rk,NQe),e(Sm,jQe),e(A,DQe),e(A,Rm),e(Rm,Moe),e(Moe,GQe),e(Rm,OQe),e(Rm,Bk),e(Bk,VQe),e(Rm,XQe),e(A,zQe),e(A,Bm),e(Bm,Eoe),e(Eoe,QQe),e(Bm,WQe),e(Bm,Pk),e(Pk,HQe),e(Bm,UQe),e(A,JQe),e(A,Pm),e(Pm,Coe),e(Coe,YQe),e(Pm,KQe),e(Pm,Ik),e(Ik,ZQe),e(Pm,eWe),e(A,oWe),e(A,Im),e(Im,woe),e(woe,rWe),e(Im,tWe),e(Im,qk),e(qk,aWe),e(Im,nWe),e(A,sWe),e(A,qm),e(qm,Aoe),e(Aoe,lWe),e(qm,iWe),e(qm,Nk),e(Nk,dWe),e(qm,cWe),e(A,fWe),e(A,Nm),e(Nm,yoe),e(yoe,mWe),e(Nm,gWe),e(Nm,jk),e(jk,hWe),e(Nm,pWe),e(A,uWe),e(A,jm),e(jm,Loe),e(Loe,_We),e(jm,bWe),e(jm,Dk),e(Dk,vWe),e(jm,FWe),e(A,TWe),e(A,Dm),e(Dm,xoe),e(xoe,MWe),e(Dm,EWe),e(Dm,Gk),e(Gk,CWe),e(Dm,wWe),e(A,AWe),e(A,Gm),e(Gm,$oe),e($oe,yWe),e(Gm,LWe),e(Gm,Ok),e(Ok,xWe),e(Gm,$We),e(A,kWe),e(A,Om),e(Om,koe),e(koe,SWe),e(Om,RWe),e(Om,Vk),e(Vk,BWe),e(Om,PWe),e(A,IWe),e(A,Vm),e(Vm,Soe),e(Soe,qWe),e(Vm,NWe),e(Vm,Xk),e(Xk,jWe),e(Vm,DWe),e(A,GWe),e(A,Xm),e(Xm,Roe),e(Roe,OWe),e(Xm,VWe),e(Xm,zk),e(zk,XWe),e(Xm,zWe),e(A,QWe),e(A,zm),e(zm,Boe),e(Boe,WWe),e(zm,HWe),e(zm,Qk),e(Qk,UWe),e(zm,JWe),e(A,YWe),e(A,Qm),e(Qm,Poe),e(Poe,KWe),e(Qm,ZWe),e(Qm,Wk),e(Wk,eHe),e(Qm,oHe),e(A,rHe),e(A,Wm),e(Wm,Ioe),e(Ioe,tHe),e(Wm,aHe),e(Wm,Hk),e(Hk,nHe),e(Wm,sHe),e(A,lHe),e(A,Hm),e(Hm,qoe),e(qoe,iHe),e(Hm,dHe),e(Hm,Uk),e(Uk,cHe),e(Hm,fHe),e(A,mHe),e(A,Um),e(Um,Noe),e(Noe,gHe),e(Um,hHe),e(Um,Jk),e(Jk,pHe),e(Um,uHe),e(A,_He),e(A,Jm),e(Jm,joe),e(joe,bHe),e(Jm,vHe),e(Jm,Yk),e(Yk,FHe),e(Jm,THe),e(A,MHe),e(A,Ym),e(Ym,Doe),e(Doe,EHe),e(Ym,CHe),e(Ym,Kk),e(Kk,wHe),e(Ym,AHe),e(A,yHe),e(A,Km),e(Km,Goe),e(Goe,LHe),e(Km,xHe),e(Km,Zk),e(Zk,$He),e(Km,kHe),e(A,SHe),e(A,Zm),e(Zm,Ooe),e(Ooe,RHe),e(Zm,BHe),e(Zm,eS),e(eS,PHe),e(Zm,IHe),e(A,qHe),e(A,eg),e(eg,Voe),e(Voe,NHe),e(eg,jHe),e(eg,oS),e(oS,DHe),e(eg,GHe),e(A,OHe),e(A,og),e(og,Xoe),e(Xoe,VHe),e(og,XHe),e(og,rS),e(rS,zHe),e(og,QHe),e(A,WHe),e(A,rg),e(rg,zoe),e(zoe,HHe),e(rg,UHe),e(rg,tS),e(tS,JHe),e(rg,YHe),e(A,KHe),e(A,tg),e(tg,Qoe),e(Qoe,ZHe),e(tg,eUe),e(tg,aS),e(aS,oUe),e(tg,rUe),e(A,tUe),e(A,ag),e(ag,Woe),e(Woe,aUe),e(ag,nUe),e(ag,nS),e(nS,sUe),e(ag,lUe),e(A,iUe),e(A,ng),e(ng,Hoe),e(Hoe,dUe),e(ng,cUe),e(ng,sS),e(sS,fUe),e(ng,mUe),e(A,gUe),e(A,sg),e(sg,Uoe),e(Uoe,hUe),e(sg,pUe),e(sg,lS),e(lS,uUe),e(sg,_Ue),e(A,bUe),e(A,lg),e(lg,Joe),e(Joe,vUe),e(lg,FUe),e(lg,iS),e(iS,TUe),e(lg,MUe),e(A,EUe),e(A,ig),e(ig,Yoe),e(Yoe,CUe),e(ig,wUe),e(ig,dS),e(dS,AUe),e(ig,yUe),e(A,LUe),e(A,dg),e(dg,Koe),e(Koe,xUe),e(dg,$Ue),e(dg,cS),e(cS,kUe),e(dg,SUe),e(A,RUe),e(A,cg),e(cg,Zoe),e(Zoe,BUe),e(cg,PUe),e(cg,fS),e(fS,IUe),e(cg,qUe),e(A,NUe),e(A,fg),e(fg,ere),e(ere,jUe),e(fg,DUe),e(fg,mS),e(mS,GUe),e(fg,OUe),e(A,VUe),e(A,mg),e(mg,ore),e(ore,XUe),e(mg,zUe),e(mg,gS),e(gS,QUe),e(mg,WUe),e(A,HUe),e(A,gg),e(gg,rre),e(rre,UUe),e(gg,JUe),e(gg,hS),e(hS,YUe),e(gg,KUe),e(A,ZUe),e(A,hg),e(hg,tre),e(tre,eJe),e(hg,oJe),e(hg,pS),e(pS,rJe),e(hg,tJe),e(A,aJe),e(A,pg),e(pg,are),e(are,nJe),e(pg,sJe),e(pg,uS),e(uS,lJe),e(pg,iJe),e(Er,dJe),M(ug,Er,null),e(Co,cJe),e(Co,_g),M(t0,_g,null),e(_g,fJe),e(_g,nre),e(nre,mJe),b(f,QPe,_),b(f,_i,_),e(_i,bg),e(bg,sre),M(a0,sre,null),e(_i,gJe),e(_i,lre),e(lre,hJe),b(f,WPe,_),b(f,wo,_),M(n0,wo,null),e(wo,pJe),e(wo,s0),e(s0,uJe),e(s0,_S),e(_S,_Je),e(s0,bJe),e(wo,vJe),e(wo,l0),e(l0,FJe),e(l0,ire),e(ire,TJe),e(l0,MJe),e(wo,EJe),e(wo,Cr),M(i0,Cr,null),e(Cr,CJe),e(Cr,dre),e(dre,wJe),e(Cr,AJe),e(Cr,Ca),e(Ca,yJe),e(Ca,cre),e(cre,LJe),e(Ca,xJe),e(Ca,fre),e(fre,$Je),e(Ca,kJe),e(Ca,mre),e(mre,SJe),e(Ca,RJe),e(Cr,BJe),e(Cr,k),e(k,kn),e(kn,gre),e(gre,PJe),e(kn,IJe),e(kn,bS),e(bS,qJe),e(kn,NJe),e(kn,vS),e(vS,jJe),e(kn,DJe),e(k,GJe),e(k,Sn),e(Sn,hre),e(hre,OJe),e(Sn,VJe),e(Sn,FS),e(FS,XJe),e(Sn,zJe),e(Sn,TS),e(TS,QJe),e(Sn,WJe),e(k,HJe),e(k,Rn),e(Rn,pre),e(pre,UJe),e(Rn,JJe),e(Rn,MS),e(MS,YJe),e(Rn,KJe),e(Rn,ES),e(ES,ZJe),e(Rn,eYe),e(k,oYe),e(k,vg),e(vg,ure),e(ure,rYe),e(vg,tYe),e(vg,CS),e(CS,aYe),e(vg,nYe),e(k,sYe),e(k,Bn),e(Bn,_re),e(_re,lYe),e(Bn,iYe),e(Bn,wS),e(wS,dYe),e(Bn,cYe),e(Bn,AS),e(AS,fYe),e(Bn,mYe),e(k,gYe),e(k,Fg),e(Fg,bre),e(bre,hYe),e(Fg,pYe),e(Fg,yS),e(yS,uYe),e(Fg,_Ye),e(k,bYe),e(k,Tg),e(Tg,vre),e(vre,vYe),e(Tg,FYe),e(Tg,LS),e(LS,TYe),e(Tg,MYe),e(k,EYe),e(k,Mg),e(Mg,Fre),e(Fre,CYe),e(Mg,wYe),e(Mg,xS),e(xS,AYe),e(Mg,yYe),e(k,LYe),e(k,Pn),e(Pn,Tre),e(Tre,xYe),e(Pn,$Ye),e(Pn,$S),e($S,kYe),e(Pn,SYe),e(Pn,kS),e(kS,RYe),e(Pn,BYe),e(k,PYe),e(k,In),e(In,Mre),e(Mre,IYe),e(In,qYe),e(In,SS),e(SS,NYe),e(In,jYe),e(In,RS),e(RS,DYe),e(In,GYe),e(k,OYe),e(k,qn),e(qn,Ere),e(Ere,VYe),e(qn,XYe),e(qn,BS),e(BS,zYe),e(qn,QYe),e(qn,PS),e(PS,WYe),e(qn,HYe),e(k,UYe),e(k,Eg),e(Eg,Cre),e(Cre,JYe),e(Eg,YYe),e(Eg,IS),e(IS,KYe),e(Eg,ZYe),e(k,eKe),e(k,Cg),e(Cg,wre),e(wre,oKe),e(Cg,rKe),e(Cg,qS),e(qS,tKe),e(Cg,aKe),e(k,nKe),e(k,Nn),e(Nn,Are),e(Are,sKe),e(Nn,lKe),e(Nn,NS),e(NS,iKe),e(Nn,dKe),e(Nn,jS),e(jS,cKe),e(Nn,fKe),e(k,mKe),e(k,wg),e(wg,yre),e(yre,gKe),e(wg,hKe),e(wg,DS),e(DS,pKe),e(wg,uKe),e(k,_Ke),e(k,jn),e(jn,Lre),e(Lre,bKe),e(jn,vKe),e(jn,GS),e(GS,FKe),e(jn,TKe),e(jn,OS),e(OS,MKe),e(jn,EKe),e(k,CKe),e(k,Dn),e(Dn,xre),e(xre,wKe),e(Dn,AKe),e(Dn,VS),e(VS,yKe),e(Dn,LKe),e(Dn,XS),e(XS,xKe),e(Dn,$Ke),e(k,kKe),e(k,Gn),e(Gn,$re),e($re,SKe),e(Gn,RKe),e(Gn,zS),e(zS,BKe),e(Gn,PKe),e(Gn,QS),e(QS,IKe),e(Gn,qKe),e(k,NKe),e(k,Ag),e(Ag,kre),e(kre,jKe),e(Ag,DKe),e(Ag,WS),e(WS,GKe),e(Ag,OKe),e(k,VKe),e(k,On),e(On,Sre),e(Sre,XKe),e(On,zKe),e(On,HS),e(HS,QKe),e(On,WKe),e(On,US),e(US,HKe),e(On,UKe),e(k,JKe),e(k,Vn),e(Vn,Rre),e(Rre,YKe),e(Vn,KKe),e(Vn,JS),e(JS,ZKe),e(Vn,eZe),e(Vn,YS),e(YS,oZe),e(Vn,rZe),e(k,tZe),e(k,Xn),e(Xn,Bre),e(Bre,aZe),e(Xn,nZe),e(Xn,KS),e(KS,sZe),e(Xn,lZe),e(Xn,ZS),e(ZS,iZe),e(Xn,dZe),e(k,cZe),e(k,zn),e(zn,Pre),e(Pre,fZe),e(zn,mZe),e(zn,eR),e(eR,gZe),e(zn,hZe),e(zn,oR),e(oR,pZe),e(zn,uZe),e(k,_Ze),e(k,Qn),e(Qn,Ire),e(Ire,bZe),e(Qn,vZe),e(Qn,rR),e(rR,FZe),e(Qn,TZe),e(Qn,tR),e(tR,MZe),e(Qn,EZe),e(k,CZe),e(k,Wn),e(Wn,qre),e(qre,wZe),e(Wn,AZe),e(Wn,aR),e(aR,yZe),e(Wn,LZe),e(Wn,nR),e(nR,xZe),e(Wn,$Ze),e(k,kZe),e(k,yg),e(yg,Nre),e(Nre,SZe),e(yg,RZe),e(yg,sR),e(sR,BZe),e(yg,PZe),e(k,IZe),e(k,Hn),e(Hn,jre),e(jre,qZe),e(Hn,NZe),e(Hn,lR),e(lR,jZe),e(Hn,DZe),e(Hn,iR),e(iR,GZe),e(Hn,OZe),e(k,VZe),e(k,Lg),e(Lg,Dre),e(Dre,XZe),e(Lg,zZe),e(Lg,dR),e(dR,QZe),e(Lg,WZe),e(k,HZe),e(k,Un),e(Un,Gre),e(Gre,UZe),e(Un,JZe),e(Un,cR),e(cR,YZe),e(Un,KZe),e(Un,fR),e(fR,ZZe),e(Un,eeo),e(k,oeo),e(k,Jn),e(Jn,Ore),e(Ore,reo),e(Jn,teo),e(Jn,mR),e(mR,aeo),e(Jn,neo),e(Jn,gR),e(gR,seo),e(Jn,leo),e(k,ieo),e(k,Yn),e(Yn,Vre),e(Vre,deo),e(Yn,ceo),e(Yn,hR),e(hR,feo),e(Yn,meo),e(Yn,pR),e(pR,geo),e(Yn,heo),e(k,peo),e(k,Kn),e(Kn,Xre),e(Xre,ueo),e(Kn,_eo),e(Kn,uR),e(uR,beo),e(Kn,veo),e(Kn,_R),e(_R,Feo),e(Kn,Teo),e(k,Meo),e(k,Zn),e(Zn,zre),e(zre,Eeo),e(Zn,Ceo),e(Zn,bR),e(bR,weo),e(Zn,Aeo),e(Zn,vR),e(vR,yeo),e(Zn,Leo),e(k,xeo),e(k,xg),e(xg,Qre),e(Qre,$eo),e(xg,keo),e(xg,FR),e(FR,Seo),e(xg,Reo),e(k,Beo),e(k,es),e(es,Wre),e(Wre,Peo),e(es,Ieo),e(es,TR),e(TR,qeo),e(es,Neo),e(es,MR),e(MR,jeo),e(es,Deo),e(k,Geo),e(k,os),e(os,Hre),e(Hre,Oeo),e(os,Veo),e(os,ER),e(ER,Xeo),e(os,zeo),e(os,CR),e(CR,Qeo),e(os,Weo),e(k,Heo),e(k,rs),e(rs,Ure),e(Ure,Ueo),e(rs,Jeo),e(rs,wR),e(wR,Yeo),e(rs,Keo),e(rs,AR),e(AR,Zeo),e(rs,eoo),e(k,ooo),e(k,ts),e(ts,Jre),e(Jre,roo),e(ts,too),e(ts,yR),e(yR,aoo),e(ts,noo),e(ts,LR),e(LR,soo),e(ts,loo),e(k,ioo),e(k,as),e(as,Yre),e(Yre,doo),e(as,coo),e(as,xR),e(xR,foo),e(as,moo),e(as,$R),e($R,goo),e(as,hoo),e(k,poo),e(k,ns),e(ns,Kre),e(Kre,uoo),e(ns,_oo),e(ns,kR),e(kR,boo),e(ns,voo),e(ns,SR),e(SR,Foo),e(ns,Too),e(k,Moo),e(k,$g),e($g,Zre),e(Zre,Eoo),e($g,Coo),e($g,RR),e(RR,woo),e($g,Aoo),e(k,yoo),e(k,ss),e(ss,ete),e(ete,Loo),e(ss,xoo),e(ss,BR),e(BR,$oo),e(ss,koo),e(ss,PR),e(PR,Soo),e(ss,Roo),e(k,Boo),e(k,kg),e(kg,ote),e(ote,Poo),e(kg,Ioo),e(kg,IR),e(IR,qoo),e(kg,Noo),e(k,joo),e(k,Sg),e(Sg,rte),e(rte,Doo),e(Sg,Goo),e(Sg,qR),e(qR,Ooo),e(Sg,Voo),e(k,Xoo),e(k,ls),e(ls,tte),e(tte,zoo),e(ls,Qoo),e(ls,NR),e(NR,Woo),e(ls,Hoo),e(ls,jR),e(jR,Uoo),e(ls,Joo),e(k,Yoo),e(k,is),e(is,ate),e(ate,Koo),e(is,Zoo),e(is,DR),e(DR,ero),e(is,oro),e(is,GR),e(GR,rro),e(is,tro),e(k,aro),e(k,ds),e(ds,nte),e(nte,nro),e(ds,sro),e(ds,OR),e(OR,lro),e(ds,iro),e(ds,VR),e(VR,dro),e(ds,cro),e(k,fro),e(k,Rg),e(Rg,ste),e(ste,mro),e(Rg,gro),e(Rg,XR),e(XR,hro),e(Rg,pro),e(k,uro),e(k,cs),e(cs,lte),e(lte,_ro),e(cs,bro),e(cs,zR),e(zR,vro),e(cs,Fro),e(cs,QR),e(QR,Tro),e(cs,Mro),e(k,Ero),e(k,fs),e(fs,ite),e(ite,Cro),e(fs,wro),e(fs,WR),e(WR,Aro),e(fs,yro),e(fs,HR),e(HR,Lro),e(fs,xro),e(k,$ro),e(k,ms),e(ms,dte),e(dte,kro),e(ms,Sro),e(ms,UR),e(UR,Rro),e(ms,Bro),e(ms,JR),e(JR,Pro),e(ms,Iro),e(k,qro),e(k,gs),e(gs,cte),e(cte,Nro),e(gs,jro),e(gs,YR),e(YR,Dro),e(gs,Gro),e(gs,KR),e(KR,Oro),e(gs,Vro),e(k,Xro),e(k,hs),e(hs,fte),e(fte,zro),e(hs,Qro),e(hs,ZR),e(ZR,Wro),e(hs,Hro),e(hs,eB),e(eB,Uro),e(hs,Jro),e(k,Yro),e(k,ps),e(ps,mte),e(mte,Kro),e(ps,Zro),e(ps,oB),e(oB,eto),e(ps,oto),e(ps,rB),e(rB,rto),e(ps,tto),e(k,ato),e(k,Bg),e(Bg,gte),e(gte,nto),e(Bg,sto),e(Bg,tB),e(tB,lto),e(Bg,ito),e(k,dto),e(k,Pg),e(Pg,hte),e(hte,cto),e(Pg,fto),e(Pg,aB),e(aB,mto),e(Pg,gto),e(k,hto),e(k,Ig),e(Ig,pte),e(pte,pto),e(Ig,uto),e(Ig,nB),e(nB,_to),e(Ig,bto),e(k,vto),e(k,qg),e(qg,ute),e(ute,Fto),e(qg,Tto),e(qg,sB),e(sB,Mto),e(qg,Eto),e(k,Cto),e(k,us),e(us,_te),e(_te,wto),e(us,Ato),e(us,lB),e(lB,yto),e(us,Lto),e(us,iB),e(iB,xto),e(us,$to),e(k,kto),e(k,Ng),e(Ng,bte),e(bte,Sto),e(Ng,Rto),e(Ng,dB),e(dB,Bto),e(Ng,Pto),e(k,Ito),e(k,_s),e(_s,vte),e(vte,qto),e(_s,Nto),e(_s,cB),e(cB,jto),e(_s,Dto),e(_s,fB),e(fB,Gto),e(_s,Oto),e(k,Vto),e(k,bs),e(bs,Fte),e(Fte,Xto),e(bs,zto),e(bs,mB),e(mB,Qto),e(bs,Wto),e(bs,gB),e(gB,Hto),e(bs,Uto),e(k,Jto),e(k,vs),e(vs,Tte),e(Tte,Yto),e(vs,Kto),e(vs,hB),e(hB,Zto),e(vs,eao),e(vs,pB),e(pB,oao),e(vs,rao),e(k,tao),e(k,Fs),e(Fs,Mte),e(Mte,aao),e(Fs,nao),e(Fs,uB),e(uB,sao),e(Fs,lao),e(Fs,_B),e(_B,iao),e(Fs,dao),e(k,cao),e(k,Ts),e(Ts,Ete),e(Ete,fao),e(Ts,mao),e(Ts,bB),e(bB,gao),e(Ts,hao),e(Ts,vB),e(vB,pao),e(Ts,uao),e(k,_ao),e(k,Ms),e(Ms,Cte),e(Cte,bao),e(Ms,vao),e(Ms,FB),e(FB,Fao),e(Ms,Tao),e(Ms,TB),e(TB,Mao),e(Ms,Eao),e(k,Cao),e(k,jg),e(jg,wte),e(wte,wao),e(jg,Aao),e(jg,MB),e(MB,yao),e(jg,Lao),e(k,xao),e(k,Dg),e(Dg,Ate),e(Ate,$ao),e(Dg,kao),e(Dg,EB),e(EB,Sao),e(Dg,Rao),e(k,Bao),e(k,Es),e(Es,yte),e(yte,Pao),e(Es,Iao),e(Es,CB),e(CB,qao),e(Es,Nao),e(Es,wB),e(wB,jao),e(Es,Dao),e(k,Gao),e(k,Cs),e(Cs,Lte),e(Lte,Oao),e(Cs,Vao),e(Cs,AB),e(AB,Xao),e(Cs,zao),e(Cs,yB),e(yB,Qao),e(Cs,Wao),e(k,Hao),e(k,ws),e(ws,xte),e(xte,Uao),e(ws,Jao),e(ws,LB),e(LB,Yao),e(ws,Kao),e(ws,xB),e(xB,Zao),e(ws,eno),e(k,ono),e(k,Gg),e(Gg,$te),e($te,rno),e(Gg,tno),e(Gg,$B),e($B,ano),e(Gg,nno),e(k,sno),e(k,Og),e(Og,kte),e(kte,lno),e(Og,ino),e(Og,kB),e(kB,dno),e(Og,cno),e(k,fno),e(k,Vg),e(Vg,Ste),e(Ste,mno),e(Vg,gno),e(Vg,SB),e(SB,hno),e(Vg,pno),e(k,uno),e(k,As),e(As,Rte),e(Rte,_no),e(As,bno),e(As,RB),e(RB,vno),e(As,Fno),e(As,BB),e(BB,Tno),e(As,Mno),e(k,Eno),e(k,Xg),e(Xg,Bte),e(Bte,Cno),e(Xg,wno),e(Xg,PB),e(PB,Ano),e(Xg,yno),e(k,Lno),e(k,zg),e(zg,Pte),e(Pte,xno),e(zg,$no),e(zg,IB),e(IB,kno),e(zg,Sno),e(k,Rno),e(k,ys),e(ys,Ite),e(Ite,Bno),e(ys,Pno),e(ys,qB),e(qB,Ino),e(ys,qno),e(ys,NB),e(NB,Nno),e(ys,jno),e(k,Dno),e(k,Qg),e(Qg,qte),e(qte,Gno),e(Qg,Ono),e(Qg,jB),e(jB,Vno),e(Qg,Xno),e(k,zno),e(k,Wg),e(Wg,Nte),e(Nte,Qno),e(Wg,Wno),e(Wg,DB),e(DB,Hno),e(Wg,Uno),e(k,Jno),e(k,Ls),e(Ls,jte),e(jte,Yno),e(Ls,Kno),e(Ls,GB),e(GB,Zno),e(Ls,eso),e(Ls,OB),e(OB,oso),e(Ls,rso),e(k,tso),e(k,xs),e(xs,Dte),e(Dte,aso),e(xs,nso),e(xs,VB),e(VB,sso),e(xs,lso),e(xs,XB),e(XB,iso),e(xs,dso),e(k,cso),e(k,$s),e($s,Gte),e(Gte,fso),e($s,mso),e($s,zB),e(zB,gso),e($s,hso),e($s,QB),e(QB,pso),e($s,uso),e(k,_so),e(k,ks),e(ks,Ote),e(Ote,bso),e(ks,vso),e(ks,WB),e(WB,Fso),e(ks,Tso),e(ks,HB),e(HB,Mso),e(ks,Eso),e(Cr,Cso),M(Hg,Cr,null),e(wo,wso),e(wo,Ug),M(d0,Ug,null),e(Ug,Aso),e(Ug,Vte),e(Vte,yso),b(f,HPe,_),b(f,bi,_),e(bi,Jg),e(Jg,Xte),M(c0,Xte,null),e(bi,Lso),e(bi,zte),e(zte,xso),b(f,UPe,_),b(f,Ao,_),M(f0,Ao,null),e(Ao,$so),e(Ao,m0),e(m0,kso),e(m0,UB),e(UB,Sso),e(m0,Rso),e(Ao,Bso),e(Ao,g0),e(g0,Pso),e(g0,Qte),e(Qte,Iso),e(g0,qso),e(Ao,Nso),e(Ao,Qe),M(h0,Qe,null),e(Qe,jso),e(Qe,Wte),e(Wte,Dso),e(Qe,Gso),e(Qe,wa),e(wa,Oso),e(wa,Hte),e(Hte,Vso),e(wa,Xso),e(wa,Ute),e(Ute,zso),e(wa,Qso),e(wa,Jte),e(Jte,Wso),e(wa,Hso),e(Qe,Uso),e(Qe,oe),e(oe,Yg),e(Yg,Yte),e(Yte,Jso),e(Yg,Yso),e(Yg,JB),e(JB,Kso),e(Yg,Zso),e(oe,elo),e(oe,Kg),e(Kg,Kte),e(Kte,olo),e(Kg,rlo),e(Kg,YB),e(YB,tlo),e(Kg,alo),e(oe,nlo),e(oe,Zg),e(Zg,Zte),e(Zte,slo),e(Zg,llo),e(Zg,KB),e(KB,ilo),e(Zg,dlo),e(oe,clo),e(oe,eh),e(eh,eae),e(eae,flo),e(eh,mlo),e(eh,ZB),e(ZB,glo),e(eh,hlo),e(oe,plo),e(oe,oh),e(oh,oae),e(oae,ulo),e(oh,_lo),e(oh,eP),e(eP,blo),e(oh,vlo),e(oe,Flo),e(oe,rh),e(rh,rae),e(rae,Tlo),e(rh,Mlo),e(rh,oP),e(oP,Elo),e(rh,Clo),e(oe,wlo),e(oe,th),e(th,tae),e(tae,Alo),e(th,ylo),e(th,rP),e(rP,Llo),e(th,xlo),e(oe,$lo),e(oe,ah),e(ah,aae),e(aae,klo),e(ah,Slo),e(ah,tP),e(tP,Rlo),e(ah,Blo),e(oe,Plo),e(oe,nh),e(nh,nae),e(nae,Ilo),e(nh,qlo),e(nh,aP),e(aP,Nlo),e(nh,jlo),e(oe,Dlo),e(oe,sh),e(sh,sae),e(sae,Glo),e(sh,Olo),e(sh,nP),e(nP,Vlo),e(sh,Xlo),e(oe,zlo),e(oe,lh),e(lh,lae),e(lae,Qlo),e(lh,Wlo),e(lh,sP),e(sP,Hlo),e(lh,Ulo),e(oe,Jlo),e(oe,ih),e(ih,iae),e(iae,Ylo),e(ih,Klo),e(ih,lP),e(lP,Zlo),e(ih,eio),e(oe,oio),e(oe,dh),e(dh,dae),e(dae,rio),e(dh,tio),e(dh,iP),e(iP,aio),e(dh,nio),e(oe,sio),e(oe,ch),e(ch,cae),e(cae,lio),e(ch,iio),e(ch,dP),e(dP,dio),e(ch,cio),e(oe,fio),e(oe,fh),e(fh,fae),e(fae,mio),e(fh,gio),e(fh,cP),e(cP,hio),e(fh,pio),e(oe,uio),e(oe,mh),e(mh,mae),e(mae,_io),e(mh,bio),e(mh,fP),e(fP,vio),e(mh,Fio),e(oe,Tio),e(oe,gh),e(gh,gae),e(gae,Mio),e(gh,Eio),e(gh,mP),e(mP,Cio),e(gh,wio),e(oe,Aio),e(oe,hh),e(hh,hae),e(hae,yio),e(hh,Lio),e(hh,gP),e(gP,xio),e(hh,$io),e(oe,kio),e(oe,ph),e(ph,pae),e(pae,Sio),e(ph,Rio),e(ph,hP),e(hP,Bio),e(ph,Pio),e(oe,Iio),e(oe,uh),e(uh,uae),e(uae,qio),e(uh,Nio),e(uh,pP),e(pP,jio),e(uh,Dio),e(oe,Gio),e(oe,_h),e(_h,_ae),e(_ae,Oio),e(_h,Vio),e(_h,uP),e(uP,Xio),e(_h,zio),e(oe,Qio),e(oe,bh),e(bh,bae),e(bae,Wio),e(bh,Hio),e(bh,_P),e(_P,Uio),e(bh,Jio),e(oe,Yio),e(oe,vh),e(vh,vae),e(vae,Kio),e(vh,Zio),e(vh,bP),e(bP,edo),e(vh,odo),e(oe,rdo),e(oe,Fh),e(Fh,Fae),e(Fae,tdo),e(Fh,ado),e(Fh,vP),e(vP,ndo),e(Fh,sdo),e(oe,ldo),e(oe,Th),e(Th,Tae),e(Tae,ido),e(Th,ddo),e(Th,FP),e(FP,cdo),e(Th,fdo),e(Qe,mdo),M(Mh,Qe,null),e(Qe,gdo),M(Eh,Qe,null),e(Ao,hdo),e(Ao,Ch),M(p0,Ch,null),e(Ch,pdo),e(Ch,Mae),e(Mae,udo),b(f,JPe,_),b(f,vi,_),e(vi,wh),e(wh,Eae),M(u0,Eae,null),e(vi,_do),e(vi,Cae),e(Cae,bdo),b(f,YPe,_),b(f,yo,_),M(_0,yo,null),e(yo,vdo),e(yo,b0),e(b0,Fdo),e(b0,TP),e(TP,Tdo),e(b0,Mdo),e(yo,Edo),e(yo,v0),e(v0,Cdo),e(v0,wae),e(wae,wdo),e(v0,Ado),e(yo,ydo),e(yo,We),M(F0,We,null),e(We,Ldo),e(We,Aae),e(Aae,xdo),e(We,$do),e(We,Fi),e(Fi,kdo),e(Fi,yae),e(yae,Sdo),e(Fi,Rdo),e(Fi,Lae),e(Lae,Bdo),e(Fi,Pdo),e(We,Ido),e(We,be),e(be,Ah),e(Ah,xae),e(xae,qdo),e(Ah,Ndo),e(Ah,MP),e(MP,jdo),e(Ah,Ddo),e(be,Gdo),e(be,yh),e(yh,$ae),e($ae,Odo),e(yh,Vdo),e(yh,kae),e(kae,Xdo),e(yh,zdo),e(be,Qdo),e(be,Lh),e(Lh,Sae),e(Sae,Wdo),e(Lh,Hdo),e(Lh,EP),e(EP,Udo),e(Lh,Jdo),e(be,Ydo),e(be,xh),e(xh,Rae),e(Rae,Kdo),e(xh,Zdo),e(xh,CP),e(CP,eco),e(xh,oco),e(be,rco),e(be,$h),e($h,Bae),e(Bae,tco),e($h,aco),e($h,wP),e(wP,nco),e($h,sco),e(be,lco),e(be,kh),e(kh,Pae),e(Pae,ico),e(kh,dco),e(kh,AP),e(AP,cco),e(kh,fco),e(be,mco),e(be,Sh),e(Sh,Iae),e(Iae,gco),e(Sh,hco),e(Sh,yP),e(yP,pco),e(Sh,uco),e(be,_co),e(be,Rh),e(Rh,qae),e(qae,bco),e(Rh,vco),e(Rh,LP),e(LP,Fco),e(Rh,Tco),e(be,Mco),e(be,Bh),e(Bh,Nae),e(Nae,Eco),e(Bh,Cco),e(Bh,xP),e(xP,wco),e(Bh,Aco),e(be,yco),e(be,Ph),e(Ph,jae),e(jae,Lco),e(Ph,xco),e(Ph,$P),e($P,$co),e(Ph,kco),e(be,Sco),e(be,Ih),e(Ih,Dae),e(Dae,Rco),e(Ih,Bco),e(Ih,kP),e(kP,Pco),e(Ih,Ico),e(be,qco),e(be,qh),e(qh,Gae),e(Gae,Nco),e(qh,jco),e(qh,SP),e(SP,Dco),e(qh,Gco),e(be,Oco),e(be,Nh),e(Nh,Oae),e(Oae,Vco),e(Nh,Xco),e(Nh,RP),e(RP,zco),e(Nh,Qco),e(be,Wco),e(be,jh),e(jh,Vae),e(Vae,Hco),e(jh,Uco),e(jh,BP),e(BP,Jco),e(jh,Yco),e(be,Kco),e(be,Dh),e(Dh,Xae),e(Xae,Zco),e(Dh,efo),e(Dh,PP),e(PP,ofo),e(Dh,rfo),e(We,tfo),M(Gh,We,null),e(We,afo),M(Oh,We,null),e(yo,nfo),e(yo,Vh),M(T0,Vh,null),e(Vh,sfo),e(Vh,zae),e(zae,lfo),b(f,KPe,_),b(f,Ti,_),e(Ti,Xh),e(Xh,Qae),M(M0,Qae,null),e(Ti,ifo),e(Ti,Wae),e(Wae,dfo),b(f,ZPe,_),b(f,Lo,_),M(E0,Lo,null),e(Lo,cfo),e(Lo,Mi),e(Mi,ffo),e(Mi,IP),e(IP,mfo),e(Mi,gfo),e(Mi,qP),e(qP,hfo),e(Mi,pfo),e(Lo,ufo),e(Lo,C0),e(C0,_fo),e(C0,Hae),e(Hae,bfo),e(C0,vfo),e(Lo,Ffo),e(Lo,ot),M(w0,ot,null),e(ot,Tfo),e(ot,Uae),e(Uae,Mfo),e(ot,Efo),e(ot,Ei),e(Ei,Cfo),e(Ei,Jae),e(Jae,wfo),e(Ei,Afo),e(Ei,NP),e(NP,yfo),e(Ei,Lfo),e(ot,xfo),M(zh,ot,null),e(Lo,$fo),e(Lo,He),M(A0,He,null),e(He,kfo),e(He,Yae),e(Yae,Sfo),e(He,Rfo),e(He,Aa),e(Aa,Bfo),e(Aa,Kae),e(Kae,Pfo),e(Aa,Ifo),e(Aa,Zae),e(Zae,qfo),e(Aa,Nfo),e(Aa,ene),e(ene,jfo),e(Aa,Dfo),e(He,Gfo),e(He,x),e(x,Qh),e(Qh,one),e(one,Ofo),e(Qh,Vfo),e(Qh,jP),e(jP,Xfo),e(Qh,zfo),e(x,Qfo),e(x,Wh),e(Wh,rne),e(rne,Wfo),e(Wh,Hfo),e(Wh,DP),e(DP,Ufo),e(Wh,Jfo),e(x,Yfo),e(x,Hh),e(Hh,tne),e(tne,Kfo),e(Hh,Zfo),e(Hh,GP),e(GP,emo),e(Hh,omo),e(x,rmo),e(x,Uh),e(Uh,ane),e(ane,tmo),e(Uh,amo),e(Uh,OP),e(OP,nmo),e(Uh,smo),e(x,lmo),e(x,Jh),e(Jh,nne),e(nne,imo),e(Jh,dmo),e(Jh,VP),e(VP,cmo),e(Jh,fmo),e(x,mmo),e(x,Yh),e(Yh,sne),e(sne,gmo),e(Yh,hmo),e(Yh,XP),e(XP,pmo),e(Yh,umo),e(x,_mo),e(x,Kh),e(Kh,lne),e(lne,bmo),e(Kh,vmo),e(Kh,zP),e(zP,Fmo),e(Kh,Tmo),e(x,Mmo),e(x,Zh),e(Zh,ine),e(ine,Emo),e(Zh,Cmo),e(Zh,QP),e(QP,wmo),e(Zh,Amo),e(x,ymo),e(x,ep),e(ep,dne),e(dne,Lmo),e(ep,xmo),e(ep,WP),e(WP,$mo),e(ep,kmo),e(x,Smo),e(x,op),e(op,cne),e(cne,Rmo),e(op,Bmo),e(op,HP),e(HP,Pmo),e(op,Imo),e(x,qmo),e(x,rp),e(rp,fne),e(fne,Nmo),e(rp,jmo),e(rp,UP),e(UP,Dmo),e(rp,Gmo),e(x,Omo),e(x,tp),e(tp,mne),e(mne,Vmo),e(tp,Xmo),e(tp,JP),e(JP,zmo),e(tp,Qmo),e(x,Wmo),e(x,ap),e(ap,gne),e(gne,Hmo),e(ap,Umo),e(ap,YP),e(YP,Jmo),e(ap,Ymo),e(x,Kmo),e(x,np),e(np,hne),e(hne,Zmo),e(np,ego),e(np,KP),e(KP,ogo),e(np,rgo),e(x,tgo),e(x,sp),e(sp,pne),e(pne,ago),e(sp,ngo),e(sp,ZP),e(ZP,sgo),e(sp,lgo),e(x,igo),e(x,lp),e(lp,une),e(une,dgo),e(lp,cgo),e(lp,eI),e(eI,fgo),e(lp,mgo),e(x,ggo),e(x,ip),e(ip,_ne),e(_ne,hgo),e(ip,pgo),e(ip,oI),e(oI,ugo),e(ip,_go),e(x,bgo),e(x,dp),e(dp,bne),e(bne,vgo),e(dp,Fgo),e(dp,rI),e(rI,Tgo),e(dp,Mgo),e(x,Ego),e(x,cp),e(cp,vne),e(vne,Cgo),e(cp,wgo),e(cp,tI),e(tI,Ago),e(cp,ygo),e(x,Lgo),e(x,fp),e(fp,Fne),e(Fne,xgo),e(fp,$go),e(fp,aI),e(aI,kgo),e(fp,Sgo),e(x,Rgo),e(x,mp),e(mp,Tne),e(Tne,Bgo),e(mp,Pgo),e(mp,nI),e(nI,Igo),e(mp,qgo),e(x,Ngo),e(x,gp),e(gp,Mne),e(Mne,jgo),e(gp,Dgo),e(gp,sI),e(sI,Ggo),e(gp,Ogo),e(x,Vgo),e(x,hp),e(hp,Ene),e(Ene,Xgo),e(hp,zgo),e(hp,lI),e(lI,Qgo),e(hp,Wgo),e(x,Hgo),e(x,pp),e(pp,Cne),e(Cne,Ugo),e(pp,Jgo),e(pp,iI),e(iI,Ygo),e(pp,Kgo),e(x,Zgo),e(x,up),e(up,wne),e(wne,eho),e(up,oho),e(up,dI),e(dI,rho),e(up,tho),e(x,aho),e(x,_p),e(_p,Ane),e(Ane,nho),e(_p,sho),e(_p,cI),e(cI,lho),e(_p,iho),e(x,dho),e(x,bp),e(bp,yne),e(yne,cho),e(bp,fho),e(bp,fI),e(fI,mho),e(bp,gho),e(x,hho),e(x,vp),e(vp,Lne),e(Lne,pho),e(vp,uho),e(vp,mI),e(mI,_ho),e(vp,bho),e(x,vho),e(x,Fp),e(Fp,xne),e(xne,Fho),e(Fp,Tho),e(Fp,gI),e(gI,Mho),e(Fp,Eho),e(x,Cho),e(x,Tp),e(Tp,$ne),e($ne,who),e(Tp,Aho),e(Tp,hI),e(hI,yho),e(Tp,Lho),e(x,xho),e(x,Mp),e(Mp,kne),e(kne,$ho),e(Mp,kho),e(Mp,pI),e(pI,Sho),e(Mp,Rho),e(x,Bho),e(x,Ss),e(Ss,Sne),e(Sne,Pho),e(Ss,Iho),e(Ss,uI),e(uI,qho),e(Ss,Nho),e(Ss,_I),e(_I,jho),e(Ss,Dho),e(x,Gho),e(x,Ep),e(Ep,Rne),e(Rne,Oho),e(Ep,Vho),e(Ep,bI),e(bI,Xho),e(Ep,zho),e(x,Qho),e(x,Cp),e(Cp,Bne),e(Bne,Who),e(Cp,Hho),e(Cp,vI),e(vI,Uho),e(Cp,Jho),e(x,Yho),e(x,wp),e(wp,Pne),e(Pne,Kho),e(wp,Zho),e(wp,FI),e(FI,epo),e(wp,opo),e(x,rpo),e(x,Ap),e(Ap,Ine),e(Ine,tpo),e(Ap,apo),e(Ap,TI),e(TI,npo),e(Ap,spo),e(x,lpo),e(x,yp),e(yp,qne),e(qne,ipo),e(yp,dpo),e(yp,MI),e(MI,cpo),e(yp,fpo),e(x,mpo),e(x,Lp),e(Lp,Nne),e(Nne,gpo),e(Lp,hpo),e(Lp,EI),e(EI,ppo),e(Lp,upo),e(x,_po),e(x,xp),e(xp,jne),e(jne,bpo),e(xp,vpo),e(xp,CI),e(CI,Fpo),e(xp,Tpo),e(x,Mpo),e(x,$p),e($p,Dne),e(Dne,Epo),e($p,Cpo),e($p,wI),e(wI,wpo),e($p,Apo),e(x,ypo),e(x,kp),e(kp,Gne),e(Gne,Lpo),e(kp,xpo),e(kp,AI),e(AI,$po),e(kp,kpo),e(x,Spo),e(x,Sp),e(Sp,One),e(One,Rpo),e(Sp,Bpo),e(Sp,yI),e(yI,Ppo),e(Sp,Ipo),e(x,qpo),e(x,Rp),e(Rp,Vne),e(Vne,Npo),e(Rp,jpo),e(Rp,LI),e(LI,Dpo),e(Rp,Gpo),e(x,Opo),e(x,Bp),e(Bp,Xne),e(Xne,Vpo),e(Bp,Xpo),e(Bp,xI),e(xI,zpo),e(Bp,Qpo),e(x,Wpo),e(x,Pp),e(Pp,zne),e(zne,Hpo),e(Pp,Upo),e(Pp,$I),e($I,Jpo),e(Pp,Ypo),e(x,Kpo),e(x,Ip),e(Ip,Qne),e(Qne,Zpo),e(Ip,euo),e(Ip,kI),e(kI,ouo),e(Ip,ruo),e(x,tuo),e(x,qp),e(qp,Wne),e(Wne,auo),e(qp,nuo),e(qp,SI),e(SI,suo),e(qp,luo),e(x,iuo),e(x,Np),e(Np,Hne),e(Hne,duo),e(Np,cuo),e(Np,RI),e(RI,fuo),e(Np,muo),e(x,guo),e(x,jp),e(jp,Une),e(Une,huo),e(jp,puo),e(jp,BI),e(BI,uuo),e(jp,_uo),e(x,buo),e(x,Dp),e(Dp,Jne),e(Jne,vuo),e(Dp,Fuo),e(Dp,PI),e(PI,Tuo),e(Dp,Muo),e(x,Euo),e(x,Gp),e(Gp,Yne),e(Yne,Cuo),e(Gp,wuo),e(Gp,II),e(II,Auo),e(Gp,yuo),e(x,Luo),e(x,Op),e(Op,Kne),e(Kne,xuo),e(Op,$uo),e(Op,qI),e(qI,kuo),e(Op,Suo),e(x,Ruo),e(x,Vp),e(Vp,Zne),e(Zne,Buo),e(Vp,Puo),e(Vp,NI),e(NI,Iuo),e(Vp,quo),e(x,Nuo),e(x,Xp),e(Xp,ese),e(ese,juo),e(Xp,Duo),e(Xp,jI),e(jI,Guo),e(Xp,Ouo),e(x,Vuo),e(x,zp),e(zp,ose),e(ose,Xuo),e(zp,zuo),e(zp,DI),e(DI,Quo),e(zp,Wuo),e(x,Huo),e(x,Qp),e(Qp,rse),e(rse,Uuo),e(Qp,Juo),e(Qp,GI),e(GI,Yuo),e(Qp,Kuo),e(x,Zuo),e(x,Wp),e(Wp,tse),e(tse,e_o),e(Wp,o_o),e(Wp,OI),e(OI,r_o),e(Wp,t_o),e(x,a_o),e(x,Hp),e(Hp,ase),e(ase,n_o),e(Hp,s_o),e(Hp,VI),e(VI,l_o),e(Hp,i_o),e(x,d_o),e(x,Up),e(Up,nse),e(nse,c_o),e(Up,f_o),e(Up,XI),e(XI,m_o),e(Up,g_o),e(x,h_o),e(x,Jp),e(Jp,sse),e(sse,p_o),e(Jp,u_o),e(Jp,zI),e(zI,__o),e(Jp,b_o),e(x,v_o),e(x,Yp),e(Yp,lse),e(lse,F_o),e(Yp,T_o),e(Yp,QI),e(QI,M_o),e(Yp,E_o),e(x,C_o),e(x,Kp),e(Kp,ise),e(ise,w_o),e(Kp,A_o),e(Kp,WI),e(WI,y_o),e(Kp,L_o),e(x,x_o),e(x,Zp),e(Zp,dse),e(dse,$_o),e(Zp,k_o),e(Zp,HI),e(HI,S_o),e(Zp,R_o),e(x,B_o),e(x,eu),e(eu,cse),e(cse,P_o),e(eu,I_o),e(eu,UI),e(UI,q_o),e(eu,N_o),e(x,j_o),e(x,ou),e(ou,fse),e(fse,D_o),e(ou,G_o),e(ou,JI),e(JI,O_o),e(ou,V_o),e(x,X_o),e(x,ru),e(ru,mse),e(mse,z_o),e(ru,Q_o),e(ru,YI),e(YI,W_o),e(ru,H_o),e(x,U_o),e(x,tu),e(tu,gse),e(gse,J_o),e(tu,Y_o),e(tu,KI),e(KI,K_o),e(tu,Z_o),e(x,e1o),e(x,au),e(au,hse),e(hse,o1o),e(au,r1o),e(au,ZI),e(ZI,t1o),e(au,a1o),e(x,n1o),e(x,nu),e(nu,pse),e(pse,s1o),e(nu,l1o),e(nu,eq),e(eq,i1o),e(nu,d1o),e(x,c1o),e(x,su),e(su,use),e(use,f1o),e(su,m1o),e(su,oq),e(oq,g1o),e(su,h1o),e(x,p1o),e(x,lu),e(lu,_se),e(_se,u1o),e(lu,_1o),e(lu,rq),e(rq,b1o),e(lu,v1o),e(x,F1o),e(x,iu),e(iu,bse),e(bse,T1o),e(iu,M1o),e(iu,tq),e(tq,E1o),e(iu,C1o),e(x,w1o),e(x,du),e(du,vse),e(vse,A1o),e(du,y1o),e(du,aq),e(aq,L1o),e(du,x1o),e(x,$1o),e(x,cu),e(cu,Fse),e(Fse,k1o),e(cu,S1o),e(cu,nq),e(nq,R1o),e(cu,B1o),e(x,P1o),e(x,fu),e(fu,Tse),e(Tse,I1o),e(fu,q1o),e(fu,sq),e(sq,N1o),e(fu,j1o),e(x,D1o),e(x,mu),e(mu,Mse),e(Mse,G1o),e(mu,O1o),e(mu,lq),e(lq,V1o),e(mu,X1o),e(x,z1o),e(x,gu),e(gu,Ese),e(Ese,Q1o),e(gu,W1o),e(gu,iq),e(iq,H1o),e(gu,U1o),e(x,J1o),e(x,hu),e(hu,Cse),e(Cse,Y1o),e(hu,K1o),e(hu,dq),e(dq,Z1o),e(hu,ebo),e(x,obo),e(x,pu),e(pu,wse),e(wse,rbo),e(pu,tbo),e(pu,cq),e(cq,abo),e(pu,nbo),e(x,sbo),e(x,uu),e(uu,Ase),e(Ase,lbo),e(uu,ibo),e(uu,fq),e(fq,dbo),e(uu,cbo),e(x,fbo),e(x,_u),e(_u,yse),e(yse,mbo),e(_u,gbo),e(_u,mq),e(mq,hbo),e(_u,pbo),e(x,ubo),e(x,bu),e(bu,Lse),e(Lse,_bo),e(bu,bbo),e(bu,gq),e(gq,vbo),e(bu,Fbo),e(x,Tbo),e(x,vu),e(vu,xse),e(xse,Mbo),e(vu,Ebo),e(vu,hq),e(hq,Cbo),e(vu,wbo),e(x,Abo),e(x,Fu),e(Fu,$se),e($se,ybo),e(Fu,Lbo),e(Fu,pq),e(pq,xbo),e(Fu,$bo),e(x,kbo),e(x,Tu),e(Tu,kse),e(kse,Sbo),e(Tu,Rbo),e(Tu,uq),e(uq,Bbo),e(Tu,Pbo),e(x,Ibo),e(x,Mu),e(Mu,Sse),e(Sse,qbo),e(Mu,Nbo),e(Mu,_q),e(_q,jbo),e(Mu,Dbo),e(x,Gbo),e(x,Eu),e(Eu,Rse),e(Rse,Obo),e(Eu,Vbo),e(Eu,bq),e(bq,Xbo),e(Eu,zbo),e(x,Qbo),e(x,Cu),e(Cu,Bse),e(Bse,Wbo),e(Cu,Hbo),e(Cu,vq),e(vq,Ubo),e(Cu,Jbo),e(x,Ybo),e(x,wu),e(wu,Pse),e(Pse,Kbo),e(wu,Zbo),e(wu,Fq),e(Fq,e2o),e(wu,o2o),e(x,r2o),e(x,Au),e(Au,Ise),e(Ise,t2o),e(Au,a2o),e(Au,Tq),e(Tq,n2o),e(Au,s2o),e(x,l2o),e(x,yu),e(yu,qse),e(qse,i2o),e(yu,d2o),e(yu,Mq),e(Mq,c2o),e(yu,f2o),e(x,m2o),e(x,Lu),e(Lu,Nse),e(Nse,g2o),e(Lu,h2o),e(Lu,Eq),e(Eq,p2o),e(Lu,u2o),e(x,_2o),e(x,xu),e(xu,jse),e(jse,b2o),e(xu,v2o),e(xu,Cq),e(Cq,F2o),e(xu,T2o),e(x,M2o),e(x,$u),e($u,Dse),e(Dse,E2o),e($u,C2o),e($u,wq),e(wq,w2o),e($u,A2o),e(x,y2o),e(x,ku),e(ku,Gse),e(Gse,L2o),e(ku,x2o),e(ku,Aq),e(Aq,$2o),e(ku,k2o),e(x,S2o),e(x,Su),e(Su,Ose),e(Ose,R2o),e(Su,B2o),e(Su,yq),e(yq,P2o),e(Su,I2o),e(x,q2o),e(x,Ru),e(Ru,Vse),e(Vse,N2o),e(Ru,j2o),e(Ru,Lq),e(Lq,D2o),e(Ru,G2o),e(He,O2o),e(He,Bu),e(Bu,V2o),e(Bu,Xse),e(Xse,X2o),e(Bu,z2o),e(Bu,zse),e(zse,Q2o),e(He,W2o),M(Pu,He,null),b(f,eIe,_),b(f,Ci,_),e(Ci,Iu),e(Iu,Qse),M(y0,Qse,null),e(Ci,H2o),e(Ci,Wse),e(Wse,U2o),b(f,oIe,_),b(f,xo,_),M(L0,xo,null),e(xo,J2o),e(xo,wi),e(wi,Y2o),e(wi,xq),e(xq,K2o),e(wi,Z2o),e(wi,$q),e($q,e3o),e(wi,o3o),e(xo,r3o),e(xo,x0),e(x0,t3o),e(x0,Hse),e(Hse,a3o),e(x0,n3o),e(xo,s3o),e(xo,rt),M($0,rt,null),e(rt,l3o),e(rt,Use),e(Use,i3o),e(rt,d3o),e(rt,Ai),e(Ai,c3o),e(Ai,Jse),e(Jse,f3o),e(Ai,m3o),e(Ai,kq),e(kq,g3o),e(Ai,h3o),e(rt,p3o),M(qu,rt,null),e(xo,u3o),e(xo,Ue),M(k0,Ue,null),e(Ue,_3o),e(Ue,Yse),e(Yse,b3o),e(Ue,v3o),e(Ue,ya),e(ya,F3o),e(ya,Kse),e(Kse,T3o),e(ya,M3o),e(ya,Zse),e(Zse,E3o),e(ya,C3o),e(ya,ele),e(ele,w3o),e(ya,A3o),e(Ue,y3o),e(Ue,G),e(G,Nu),e(Nu,ole),e(ole,L3o),e(Nu,x3o),e(Nu,Sq),e(Sq,$3o),e(Nu,k3o),e(G,S3o),e(G,ju),e(ju,rle),e(rle,R3o),e(ju,B3o),e(ju,Rq),e(Rq,P3o),e(ju,I3o),e(G,q3o),e(G,Du),e(Du,tle),e(tle,N3o),e(Du,j3o),e(Du,Bq),e(Bq,D3o),e(Du,G3o),e(G,O3o),e(G,Gu),e(Gu,ale),e(ale,V3o),e(Gu,X3o),e(Gu,Pq),e(Pq,z3o),e(Gu,Q3o),e(G,W3o),e(G,Ou),e(Ou,nle),e(nle,H3o),e(Ou,U3o),e(Ou,Iq),e(Iq,J3o),e(Ou,Y3o),e(G,K3o),e(G,Vu),e(Vu,sle),e(sle,Z3o),e(Vu,evo),e(Vu,qq),e(qq,ovo),e(Vu,rvo),e(G,tvo),e(G,Xu),e(Xu,lle),e(lle,avo),e(Xu,nvo),e(Xu,Nq),e(Nq,svo),e(Xu,lvo),e(G,ivo),e(G,zu),e(zu,ile),e(ile,dvo),e(zu,cvo),e(zu,jq),e(jq,fvo),e(zu,mvo),e(G,gvo),e(G,Qu),e(Qu,dle),e(dle,hvo),e(Qu,pvo),e(Qu,Dq),e(Dq,uvo),e(Qu,_vo),e(G,bvo),e(G,Wu),e(Wu,cle),e(cle,vvo),e(Wu,Fvo),e(Wu,Gq),e(Gq,Tvo),e(Wu,Mvo),e(G,Evo),e(G,Hu),e(Hu,fle),e(fle,Cvo),e(Hu,wvo),e(Hu,Oq),e(Oq,Avo),e(Hu,yvo),e(G,Lvo),e(G,Uu),e(Uu,mle),e(mle,xvo),e(Uu,$vo),e(Uu,Vq),e(Vq,kvo),e(Uu,Svo),e(G,Rvo),e(G,Ju),e(Ju,gle),e(gle,Bvo),e(Ju,Pvo),e(Ju,Xq),e(Xq,Ivo),e(Ju,qvo),e(G,Nvo),e(G,Yu),e(Yu,hle),e(hle,jvo),e(Yu,Dvo),e(Yu,zq),e(zq,Gvo),e(Yu,Ovo),e(G,Vvo),e(G,Ku),e(Ku,ple),e(ple,Xvo),e(Ku,zvo),e(Ku,Qq),e(Qq,Qvo),e(Ku,Wvo),e(G,Hvo),e(G,Zu),e(Zu,ule),e(ule,Uvo),e(Zu,Jvo),e(Zu,Wq),e(Wq,Yvo),e(Zu,Kvo),e(G,Zvo),e(G,e_),e(e_,_le),e(_le,eFo),e(e_,oFo),e(e_,Hq),e(Hq,rFo),e(e_,tFo),e(G,aFo),e(G,o_),e(o_,ble),e(ble,nFo),e(o_,sFo),e(o_,Uq),e(Uq,lFo),e(o_,iFo),e(G,dFo),e(G,r_),e(r_,vle),e(vle,cFo),e(r_,fFo),e(r_,Jq),e(Jq,mFo),e(r_,gFo),e(G,hFo),e(G,t_),e(t_,Fle),e(Fle,pFo),e(t_,uFo),e(t_,Yq),e(Yq,_Fo),e(t_,bFo),e(G,vFo),e(G,a_),e(a_,Tle),e(Tle,FFo),e(a_,TFo),e(a_,Kq),e(Kq,MFo),e(a_,EFo),e(G,CFo),e(G,n_),e(n_,Mle),e(Mle,wFo),e(n_,AFo),e(n_,Zq),e(Zq,yFo),e(n_,LFo),e(G,xFo),e(G,s_),e(s_,Ele),e(Ele,$Fo),e(s_,kFo),e(s_,eN),e(eN,SFo),e(s_,RFo),e(G,BFo),e(G,l_),e(l_,Cle),e(Cle,PFo),e(l_,IFo),e(l_,oN),e(oN,qFo),e(l_,NFo),e(G,jFo),e(G,i_),e(i_,wle),e(wle,DFo),e(i_,GFo),e(i_,rN),e(rN,OFo),e(i_,VFo),e(G,XFo),e(G,d_),e(d_,Ale),e(Ale,zFo),e(d_,QFo),e(d_,tN),e(tN,WFo),e(d_,HFo),e(G,UFo),e(G,c_),e(c_,yle),e(yle,JFo),e(c_,YFo),e(c_,aN),e(aN,KFo),e(c_,ZFo),e(G,eTo),e(G,f_),e(f_,Lle),e(Lle,oTo),e(f_,rTo),e(f_,nN),e(nN,tTo),e(f_,aTo),e(G,nTo),e(G,m_),e(m_,xle),e(xle,sTo),e(m_,lTo),e(m_,sN),e(sN,iTo),e(m_,dTo),e(G,cTo),e(G,g_),e(g_,$le),e($le,fTo),e(g_,mTo),e(g_,lN),e(lN,gTo),e(g_,hTo),e(G,pTo),e(G,h_),e(h_,kle),e(kle,uTo),e(h_,_To),e(h_,iN),e(iN,bTo),e(h_,vTo),e(G,FTo),e(G,p_),e(p_,Sle),e(Sle,TTo),e(p_,MTo),e(p_,dN),e(dN,ETo),e(p_,CTo),e(G,wTo),e(G,u_),e(u_,Rle),e(Rle,ATo),e(u_,yTo),e(u_,cN),e(cN,LTo),e(u_,xTo),e(G,$To),e(G,__),e(__,Ble),e(Ble,kTo),e(__,STo),e(__,fN),e(fN,RTo),e(__,BTo),e(G,PTo),e(G,b_),e(b_,Ple),e(Ple,ITo),e(b_,qTo),e(b_,mN),e(mN,NTo),e(b_,jTo),e(G,DTo),e(G,v_),e(v_,Ile),e(Ile,GTo),e(v_,OTo),e(v_,gN),e(gN,VTo),e(v_,XTo),e(G,zTo),e(G,F_),e(F_,qle),e(qle,QTo),e(F_,WTo),e(F_,hN),e(hN,HTo),e(F_,UTo),e(G,JTo),e(G,T_),e(T_,Nle),e(Nle,YTo),e(T_,KTo),e(T_,pN),e(pN,ZTo),e(T_,e7o),e(G,o7o),e(G,M_),e(M_,jle),e(jle,r7o),e(M_,t7o),e(M_,uN),e(uN,a7o),e(M_,n7o),e(G,s7o),e(G,E_),e(E_,Dle),e(Dle,l7o),e(E_,i7o),e(E_,_N),e(_N,d7o),e(E_,c7o),e(Ue,f7o),e(Ue,C_),e(C_,m7o),e(C_,Gle),e(Gle,g7o),e(C_,h7o),e(C_,Ole),e(Ole,p7o),e(Ue,u7o),M(w_,Ue,null),b(f,rIe,_),b(f,yi,_),e(yi,A_),e(A_,Vle),M(S0,Vle,null),e(yi,_7o),e(yi,Xle),e(Xle,b7o),b(f,tIe,_),b(f,$o,_),M(R0,$o,null),e($o,v7o),e($o,Li),e(Li,F7o),e(Li,bN),e(bN,T7o),e(Li,M7o),e(Li,vN),e(vN,E7o),e(Li,C7o),e($o,w7o),e($o,B0),e(B0,A7o),e(B0,zle),e(zle,y7o),e(B0,L7o),e($o,x7o),e($o,tt),M(P0,tt,null),e(tt,$7o),e(tt,Qle),e(Qle,k7o),e(tt,S7o),e(tt,xi),e(xi,R7o),e(xi,Wle),e(Wle,B7o),e(xi,P7o),e(xi,FN),e(FN,I7o),e(xi,q7o),e(tt,N7o),M(y_,tt,null),e($o,j7o),e($o,Je),M(I0,Je,null),e(Je,D7o),e(Je,Hle),e(Hle,G7o),e(Je,O7o),e(Je,La),e(La,V7o),e(La,Ule),e(Ule,X7o),e(La,z7o),e(La,Jle),e(Jle,Q7o),e(La,W7o),e(La,Yle),e(Yle,H7o),e(La,U7o),e(Je,J7o),e(Je,z),e(z,L_),e(L_,Kle),e(Kle,Y7o),e(L_,K7o),e(L_,TN),e(TN,Z7o),e(L_,eMo),e(z,oMo),e(z,x_),e(x_,Zle),e(Zle,rMo),e(x_,tMo),e(x_,MN),e(MN,aMo),e(x_,nMo),e(z,sMo),e(z,$_),e($_,eie),e(eie,lMo),e($_,iMo),e($_,EN),e(EN,dMo),e($_,cMo),e(z,fMo),e(z,k_),e(k_,oie),e(oie,mMo),e(k_,gMo),e(k_,CN),e(CN,hMo),e(k_,pMo),e(z,uMo),e(z,S_),e(S_,rie),e(rie,_Mo),e(S_,bMo),e(S_,wN),e(wN,vMo),e(S_,FMo),e(z,TMo),e(z,R_),e(R_,tie),e(tie,MMo),e(R_,EMo),e(R_,AN),e(AN,CMo),e(R_,wMo),e(z,AMo),e(z,B_),e(B_,aie),e(aie,yMo),e(B_,LMo),e(B_,yN),e(yN,xMo),e(B_,$Mo),e(z,kMo),e(z,P_),e(P_,nie),e(nie,SMo),e(P_,RMo),e(P_,LN),e(LN,BMo),e(P_,PMo),e(z,IMo),e(z,I_),e(I_,sie),e(sie,qMo),e(I_,NMo),e(I_,xN),e(xN,jMo),e(I_,DMo),e(z,GMo),e(z,q_),e(q_,lie),e(lie,OMo),e(q_,VMo),e(q_,$N),e($N,XMo),e(q_,zMo),e(z,QMo),e(z,N_),e(N_,iie),e(iie,WMo),e(N_,HMo),e(N_,kN),e(kN,UMo),e(N_,JMo),e(z,YMo),e(z,j_),e(j_,die),e(die,KMo),e(j_,ZMo),e(j_,SN),e(SN,e4o),e(j_,o4o),e(z,r4o),e(z,D_),e(D_,cie),e(cie,t4o),e(D_,a4o),e(D_,RN),e(RN,n4o),e(D_,s4o),e(z,l4o),e(z,G_),e(G_,fie),e(fie,i4o),e(G_,d4o),e(G_,BN),e(BN,c4o),e(G_,f4o),e(z,m4o),e(z,O_),e(O_,mie),e(mie,g4o),e(O_,h4o),e(O_,PN),e(PN,p4o),e(O_,u4o),e(z,_4o),e(z,V_),e(V_,gie),e(gie,b4o),e(V_,v4o),e(V_,IN),e(IN,F4o),e(V_,T4o),e(z,M4o),e(z,X_),e(X_,hie),e(hie,E4o),e(X_,C4o),e(X_,qN),e(qN,w4o),e(X_,A4o),e(z,y4o),e(z,z_),e(z_,pie),e(pie,L4o),e(z_,x4o),e(z_,NN),e(NN,$4o),e(z_,k4o),e(z,S4o),e(z,Q_),e(Q_,uie),e(uie,R4o),e(Q_,B4o),e(Q_,jN),e(jN,P4o),e(Q_,I4o),e(z,q4o),e(z,W_),e(W_,_ie),e(_ie,N4o),e(W_,j4o),e(W_,DN),e(DN,D4o),e(W_,G4o),e(z,O4o),e(z,H_),e(H_,bie),e(bie,V4o),e(H_,X4o),e(H_,GN),e(GN,z4o),e(H_,Q4o),e(z,W4o),e(z,U_),e(U_,vie),e(vie,H4o),e(U_,U4o),e(U_,ON),e(ON,J4o),e(U_,Y4o),e(z,K4o),e(z,J_),e(J_,Fie),e(Fie,Z4o),e(J_,eEo),e(J_,VN),e(VN,oEo),e(J_,rEo),e(z,tEo),e(z,Y_),e(Y_,Tie),e(Tie,aEo),e(Y_,nEo),e(Y_,XN),e(XN,sEo),e(Y_,lEo),e(z,iEo),e(z,K_),e(K_,Mie),e(Mie,dEo),e(K_,cEo),e(K_,zN),e(zN,fEo),e(K_,mEo),e(z,gEo),e(z,Z_),e(Z_,Eie),e(Eie,hEo),e(Z_,pEo),e(Z_,QN),e(QN,uEo),e(Z_,_Eo),e(z,bEo),e(z,e1),e(e1,Cie),e(Cie,vEo),e(e1,FEo),e(e1,WN),e(WN,TEo),e(e1,MEo),e(z,EEo),e(z,o1),e(o1,wie),e(wie,CEo),e(o1,wEo),e(o1,HN),e(HN,AEo),e(o1,yEo),e(z,LEo),e(z,r1),e(r1,Aie),e(Aie,xEo),e(r1,$Eo),e(r1,UN),e(UN,kEo),e(r1,SEo),e(z,REo),e(z,t1),e(t1,yie),e(yie,BEo),e(t1,PEo),e(t1,JN),e(JN,IEo),e(t1,qEo),e(z,NEo),e(z,a1),e(a1,Lie),e(Lie,jEo),e(a1,DEo),e(a1,YN),e(YN,GEo),e(a1,OEo),e(z,VEo),e(z,n1),e(n1,xie),e(xie,XEo),e(n1,zEo),e(n1,KN),e(KN,QEo),e(n1,WEo),e(z,HEo),e(z,s1),e(s1,$ie),e($ie,UEo),e(s1,JEo),e(s1,ZN),e(ZN,YEo),e(s1,KEo),e(z,ZEo),e(z,l1),e(l1,kie),e(kie,e5o),e(l1,o5o),e(l1,ej),e(ej,r5o),e(l1,t5o),e(z,a5o),e(z,i1),e(i1,Sie),e(Sie,n5o),e(i1,s5o),e(i1,oj),e(oj,l5o),e(i1,i5o),e(Je,d5o),e(Je,d1),e(d1,c5o),e(d1,Rie),e(Rie,f5o),e(d1,m5o),e(d1,Bie),e(Bie,g5o),e(Je,h5o),M(c1,Je,null),b(f,aIe,_),b(f,$i,_),e($i,f1),e(f1,Pie),M(q0,Pie,null),e($i,p5o),e($i,Iie),e(Iie,u5o),b(f,nIe,_),b(f,ko,_),M(N0,ko,null),e(ko,_5o),e(ko,ki),e(ki,b5o),e(ki,rj),e(rj,v5o),e(ki,F5o),e(ki,tj),e(tj,T5o),e(ki,M5o),e(ko,E5o),e(ko,j0),e(j0,C5o),e(j0,qie),e(qie,w5o),e(j0,A5o),e(ko,y5o),e(ko,at),M(D0,at,null),e(at,L5o),e(at,Nie),e(Nie,x5o),e(at,$5o),e(at,Si),e(Si,k5o),e(Si,jie),e(jie,S5o),e(Si,R5o),e(Si,aj),e(aj,B5o),e(Si,P5o),e(at,I5o),M(m1,at,null),e(ko,q5o),e(ko,Ye),M(G0,Ye,null),e(Ye,N5o),e(Ye,Die),e(Die,j5o),e(Ye,D5o),e(Ye,xa),e(xa,G5o),e(xa,Gie),e(Gie,O5o),e(xa,V5o),e(xa,Oie),e(Oie,X5o),e(xa,z5o),e(xa,Vie),e(Vie,Q5o),e(xa,W5o),e(Ye,H5o),e(Ye,Q),e(Q,g1),e(g1,Xie),e(Xie,U5o),e(g1,J5o),e(g1,nj),e(nj,Y5o),e(g1,K5o),e(Q,Z5o),e(Q,h1),e(h1,zie),e(zie,eCo),e(h1,oCo),e(h1,sj),e(sj,rCo),e(h1,tCo),e(Q,aCo),e(Q,p1),e(p1,Qie),e(Qie,nCo),e(p1,sCo),e(p1,lj),e(lj,lCo),e(p1,iCo),e(Q,dCo),e(Q,u1),e(u1,Wie),e(Wie,cCo),e(u1,fCo),e(u1,ij),e(ij,mCo),e(u1,gCo),e(Q,hCo),e(Q,_1),e(_1,Hie),e(Hie,pCo),e(_1,uCo),e(_1,dj),e(dj,_Co),e(_1,bCo),e(Q,vCo),e(Q,b1),e(b1,Uie),e(Uie,FCo),e(b1,TCo),e(b1,cj),e(cj,MCo),e(b1,ECo),e(Q,CCo),e(Q,v1),e(v1,Jie),e(Jie,wCo),e(v1,ACo),e(v1,fj),e(fj,yCo),e(v1,LCo),e(Q,xCo),e(Q,F1),e(F1,Yie),e(Yie,$Co),e(F1,kCo),e(F1,mj),e(mj,SCo),e(F1,RCo),e(Q,BCo),e(Q,T1),e(T1,Kie),e(Kie,PCo),e(T1,ICo),e(T1,gj),e(gj,qCo),e(T1,NCo),e(Q,jCo),e(Q,M1),e(M1,Zie),e(Zie,DCo),e(M1,GCo),e(M1,hj),e(hj,OCo),e(M1,VCo),e(Q,XCo),e(Q,E1),e(E1,ede),e(ede,zCo),e(E1,QCo),e(E1,pj),e(pj,WCo),e(E1,HCo),e(Q,UCo),e(Q,C1),e(C1,ode),e(ode,JCo),e(C1,YCo),e(C1,uj),e(uj,KCo),e(C1,ZCo),e(Q,ewo),e(Q,w1),e(w1,rde),e(rde,owo),e(w1,rwo),e(w1,_j),e(_j,two),e(w1,awo),e(Q,nwo),e(Q,A1),e(A1,tde),e(tde,swo),e(A1,lwo),e(A1,bj),e(bj,iwo),e(A1,dwo),e(Q,cwo),e(Q,y1),e(y1,ade),e(ade,fwo),e(y1,mwo),e(y1,vj),e(vj,gwo),e(y1,hwo),e(Q,pwo),e(Q,L1),e(L1,nde),e(nde,uwo),e(L1,_wo),e(L1,Fj),e(Fj,bwo),e(L1,vwo),e(Q,Fwo),e(Q,x1),e(x1,sde),e(sde,Two),e(x1,Mwo),e(x1,Tj),e(Tj,Ewo),e(x1,Cwo),e(Q,wwo),e(Q,$1),e($1,lde),e(lde,Awo),e($1,ywo),e($1,Mj),e(Mj,Lwo),e($1,xwo),e(Q,$wo),e(Q,k1),e(k1,ide),e(ide,kwo),e(k1,Swo),e(k1,Ej),e(Ej,Rwo),e(k1,Bwo),e(Q,Pwo),e(Q,S1),e(S1,dde),e(dde,Iwo),e(S1,qwo),e(S1,Cj),e(Cj,Nwo),e(S1,jwo),e(Q,Dwo),e(Q,R1),e(R1,cde),e(cde,Gwo),e(R1,Owo),e(R1,wj),e(wj,Vwo),e(R1,Xwo),e(Q,zwo),e(Q,B1),e(B1,fde),e(fde,Qwo),e(B1,Wwo),e(B1,Aj),e(Aj,Hwo),e(B1,Uwo),e(Q,Jwo),e(Q,P1),e(P1,mde),e(mde,Ywo),e(P1,Kwo),e(P1,yj),e(yj,Zwo),e(P1,eAo),e(Q,oAo),e(Q,I1),e(I1,gde),e(gde,rAo),e(I1,tAo),e(I1,Lj),e(Lj,aAo),e(I1,nAo),e(Q,sAo),e(Q,q1),e(q1,hde),e(hde,lAo),e(q1,iAo),e(q1,xj),e(xj,dAo),e(q1,cAo),e(Q,fAo),e(Q,N1),e(N1,pde),e(pde,mAo),e(N1,gAo),e(N1,$j),e($j,hAo),e(N1,pAo),e(Q,uAo),e(Q,j1),e(j1,ude),e(ude,_Ao),e(j1,bAo),e(j1,kj),e(kj,vAo),e(j1,FAo),e(Q,TAo),e(Q,D1),e(D1,_de),e(_de,MAo),e(D1,EAo),e(D1,Sj),e(Sj,CAo),e(D1,wAo),e(Q,AAo),e(Q,G1),e(G1,bde),e(bde,yAo),e(G1,LAo),e(G1,Rj),e(Rj,xAo),e(G1,$Ao),e(Q,kAo),e(Q,O1),e(O1,vde),e(vde,SAo),e(O1,RAo),e(O1,Bj),e(Bj,BAo),e(O1,PAo),e(Q,IAo),e(Q,V1),e(V1,Fde),e(Fde,qAo),e(V1,NAo),e(V1,Tde),e(Tde,jAo),e(V1,DAo),e(Q,GAo),e(Q,X1),e(X1,Mde),e(Mde,OAo),e(X1,VAo),e(X1,Pj),e(Pj,XAo),e(X1,zAo),e(Q,QAo),e(Q,z1),e(z1,Ede),e(Ede,WAo),e(z1,HAo),e(z1,Ij),e(Ij,UAo),e(z1,JAo),e(Q,YAo),e(Q,Q1),e(Q1,Cde),e(Cde,KAo),e(Q1,ZAo),e(Q1,qj),e(qj,e6o),e(Q1,o6o),e(Q,r6o),e(Q,W1),e(W1,wde),e(wde,t6o),e(W1,a6o),e(W1,Nj),e(Nj,n6o),e(W1,s6o),e(Ye,l6o),e(Ye,H1),e(H1,i6o),e(H1,Ade),e(Ade,d6o),e(H1,c6o),e(H1,yde),e(yde,f6o),e(Ye,m6o),M(U1,Ye,null),b(f,sIe,_),b(f,Ri,_),e(Ri,J1),e(J1,Lde),M(O0,Lde,null),e(Ri,g6o),e(Ri,xde),e(xde,h6o),b(f,lIe,_),b(f,So,_),M(V0,So,null),e(So,p6o),e(So,Bi),e(Bi,u6o),e(Bi,jj),e(jj,_6o),e(Bi,b6o),e(Bi,Dj),e(Dj,v6o),e(Bi,F6o),e(So,T6o),e(So,X0),e(X0,M6o),e(X0,$de),e($de,E6o),e(X0,C6o),e(So,w6o),e(So,nt),M(z0,nt,null),e(nt,A6o),e(nt,kde),e(kde,y6o),e(nt,L6o),e(nt,Pi),e(Pi,x6o),e(Pi,Sde),e(Sde,$6o),e(Pi,k6o),e(Pi,Gj),e(Gj,S6o),e(Pi,R6o),e(nt,B6o),M(Y1,nt,null),e(So,P6o),e(So,Ke),M(Q0,Ke,null),e(Ke,I6o),e(Ke,Rde),e(Rde,q6o),e(Ke,N6o),e(Ke,$a),e($a,j6o),e($a,Bde),e(Bde,D6o),e($a,G6o),e($a,Pde),e(Pde,O6o),e($a,V6o),e($a,Ide),e(Ide,X6o),e($a,z6o),e(Ke,Q6o),e(Ke,he),e(he,K1),e(K1,qde),e(qde,W6o),e(K1,H6o),e(K1,Oj),e(Oj,U6o),e(K1,J6o),e(he,Y6o),e(he,Z1),e(Z1,Nde),e(Nde,K6o),e(Z1,Z6o),e(Z1,Vj),e(Vj,e0o),e(Z1,o0o),e(he,r0o),e(he,eb),e(eb,jde),e(jde,t0o),e(eb,a0o),e(eb,Xj),e(Xj,n0o),e(eb,s0o),e(he,l0o),e(he,ob),e(ob,Dde),e(Dde,i0o),e(ob,d0o),e(ob,zj),e(zj,c0o),e(ob,f0o),e(he,m0o),e(he,rb),e(rb,Gde),e(Gde,g0o),e(rb,h0o),e(rb,Qj),e(Qj,p0o),e(rb,u0o),e(he,_0o),e(he,tb),e(tb,Ode),e(Ode,b0o),e(tb,v0o),e(tb,Wj),e(Wj,F0o),e(tb,T0o),e(he,M0o),e(he,ab),e(ab,Vde),e(Vde,E0o),e(ab,C0o),e(ab,Hj),e(Hj,w0o),e(ab,A0o),e(he,y0o),e(he,nb),e(nb,Xde),e(Xde,L0o),e(nb,x0o),e(nb,Uj),e(Uj,$0o),e(nb,k0o),e(he,S0o),e(he,sb),e(sb,zde),e(zde,R0o),e(sb,B0o),e(sb,Jj),e(Jj,P0o),e(sb,I0o),e(he,q0o),e(he,lb),e(lb,Qde),e(Qde,N0o),e(lb,j0o),e(lb,Yj),e(Yj,D0o),e(lb,G0o),e(he,O0o),e(he,ib),e(ib,Wde),e(Wde,V0o),e(ib,X0o),e(ib,Kj),e(Kj,z0o),e(ib,Q0o),e(he,W0o),e(he,db),e(db,Hde),e(Hde,H0o),e(db,U0o),e(db,Zj),e(Zj,J0o),e(db,Y0o),e(he,K0o),e(he,cb),e(cb,Ude),e(Ude,Z0o),e(cb,eyo),e(cb,eD),e(eD,oyo),e(cb,ryo),e(he,tyo),e(he,fb),e(fb,Jde),e(Jde,ayo),e(fb,nyo),e(fb,oD),e(oD,syo),e(fb,lyo),e(he,iyo),e(he,mb),e(mb,Yde),e(Yde,dyo),e(mb,cyo),e(mb,rD),e(rD,fyo),e(mb,myo),e(he,gyo),e(he,gb),e(gb,Kde),e(Kde,hyo),e(gb,pyo),e(gb,tD),e(tD,uyo),e(gb,_yo),e(he,byo),e(he,hb),e(hb,Zde),e(Zde,vyo),e(hb,Fyo),e(hb,aD),e(aD,Tyo),e(hb,Myo),e(Ke,Eyo),e(Ke,pb),e(pb,Cyo),e(pb,ece),e(ece,wyo),e(pb,Ayo),e(pb,oce),e(oce,yyo),e(Ke,Lyo),M(ub,Ke,null),b(f,iIe,_),b(f,Ii,_),e(Ii,_b),e(_b,rce),M(W0,rce,null),e(Ii,xyo),e(Ii,tce),e(tce,$yo),b(f,dIe,_),b(f,Ro,_),M(H0,Ro,null),e(Ro,kyo),e(Ro,qi),e(qi,Syo),e(qi,nD),e(nD,Ryo),e(qi,Byo),e(qi,sD),e(sD,Pyo),e(qi,Iyo),e(Ro,qyo),e(Ro,U0),e(U0,Nyo),e(U0,ace),e(ace,jyo),e(U0,Dyo),e(Ro,Gyo),e(Ro,st),M(J0,st,null),e(st,Oyo),e(st,nce),e(nce,Vyo),e(st,Xyo),e(st,Ni),e(Ni,zyo),e(Ni,sce),e(sce,Qyo),e(Ni,Wyo),e(Ni,lD),e(lD,Hyo),e(Ni,Uyo),e(st,Jyo),M(bb,st,null),e(Ro,Yyo),e(Ro,Ze),M(Y0,Ze,null),e(Ze,Kyo),e(Ze,lce),e(lce,Zyo),e(Ze,eLo),e(Ze,ka),e(ka,oLo),e(ka,ice),e(ice,rLo),e(ka,tLo),e(ka,dce),e(dce,aLo),e(ka,nLo),e(ka,cce),e(cce,sLo),e(ka,lLo),e(Ze,iLo),e(Ze,q),e(q,vb),e(vb,fce),e(fce,dLo),e(vb,cLo),e(vb,iD),e(iD,fLo),e(vb,mLo),e(q,gLo),e(q,Fb),e(Fb,mce),e(mce,hLo),e(Fb,pLo),e(Fb,dD),e(dD,uLo),e(Fb,_Lo),e(q,bLo),e(q,Tb),e(Tb,gce),e(gce,vLo),e(Tb,FLo),e(Tb,cD),e(cD,TLo),e(Tb,MLo),e(q,ELo),e(q,Mb),e(Mb,hce),e(hce,CLo),e(Mb,wLo),e(Mb,fD),e(fD,ALo),e(Mb,yLo),e(q,LLo),e(q,Eb),e(Eb,pce),e(pce,xLo),e(Eb,$Lo),e(Eb,mD),e(mD,kLo),e(Eb,SLo),e(q,RLo),e(q,Cb),e(Cb,uce),e(uce,BLo),e(Cb,PLo),e(Cb,gD),e(gD,ILo),e(Cb,qLo),e(q,NLo),e(q,wb),e(wb,_ce),e(_ce,jLo),e(wb,DLo),e(wb,hD),e(hD,GLo),e(wb,OLo),e(q,VLo),e(q,Ab),e(Ab,bce),e(bce,XLo),e(Ab,zLo),e(Ab,pD),e(pD,QLo),e(Ab,WLo),e(q,HLo),e(q,yb),e(yb,vce),e(vce,ULo),e(yb,JLo),e(yb,uD),e(uD,YLo),e(yb,KLo),e(q,ZLo),e(q,Lb),e(Lb,Fce),e(Fce,e8o),e(Lb,o8o),e(Lb,_D),e(_D,r8o),e(Lb,t8o),e(q,a8o),e(q,xb),e(xb,Tce),e(Tce,n8o),e(xb,s8o),e(xb,bD),e(bD,l8o),e(xb,i8o),e(q,d8o),e(q,$b),e($b,Mce),e(Mce,c8o),e($b,f8o),e($b,vD),e(vD,m8o),e($b,g8o),e(q,h8o),e(q,kb),e(kb,Ece),e(Ece,p8o),e(kb,u8o),e(kb,FD),e(FD,_8o),e(kb,b8o),e(q,v8o),e(q,Sb),e(Sb,Cce),e(Cce,F8o),e(Sb,T8o),e(Sb,TD),e(TD,M8o),e(Sb,E8o),e(q,C8o),e(q,Rb),e(Rb,wce),e(wce,w8o),e(Rb,A8o),e(Rb,MD),e(MD,y8o),e(Rb,L8o),e(q,x8o),e(q,Bb),e(Bb,Ace),e(Ace,$8o),e(Bb,k8o),e(Bb,ED),e(ED,S8o),e(Bb,R8o),e(q,B8o),e(q,Pb),e(Pb,yce),e(yce,P8o),e(Pb,I8o),e(Pb,CD),e(CD,q8o),e(Pb,N8o),e(q,j8o),e(q,Ib),e(Ib,Lce),e(Lce,D8o),e(Ib,G8o),e(Ib,wD),e(wD,O8o),e(Ib,V8o),e(q,X8o),e(q,qb),e(qb,xce),e(xce,z8o),e(qb,Q8o),e(qb,AD),e(AD,W8o),e(qb,H8o),e(q,U8o),e(q,Nb),e(Nb,$ce),e($ce,J8o),e(Nb,Y8o),e(Nb,yD),e(yD,K8o),e(Nb,Z8o),e(q,exo),e(q,jb),e(jb,kce),e(kce,oxo),e(jb,rxo),e(jb,LD),e(LD,txo),e(jb,axo),e(q,nxo),e(q,Db),e(Db,Sce),e(Sce,sxo),e(Db,lxo),e(Db,xD),e(xD,ixo),e(Db,dxo),e(q,cxo),e(q,Gb),e(Gb,Rce),e(Rce,fxo),e(Gb,mxo),e(Gb,$D),e($D,gxo),e(Gb,hxo),e(q,pxo),e(q,Ob),e(Ob,Bce),e(Bce,uxo),e(Ob,_xo),e(Ob,kD),e(kD,bxo),e(Ob,vxo),e(q,Fxo),e(q,Vb),e(Vb,Pce),e(Pce,Txo),e(Vb,Mxo),e(Vb,SD),e(SD,Exo),e(Vb,Cxo),e(q,wxo),e(q,Xb),e(Xb,Ice),e(Ice,Axo),e(Xb,yxo),e(Xb,RD),e(RD,Lxo),e(Xb,xxo),e(q,$xo),e(q,zb),e(zb,qce),e(qce,kxo),e(zb,Sxo),e(zb,BD),e(BD,Rxo),e(zb,Bxo),e(q,Pxo),e(q,Qb),e(Qb,Nce),e(Nce,Ixo),e(Qb,qxo),e(Qb,PD),e(PD,Nxo),e(Qb,jxo),e(q,Dxo),e(q,Wb),e(Wb,jce),e(jce,Gxo),e(Wb,Oxo),e(Wb,ID),e(ID,Vxo),e(Wb,Xxo),e(q,zxo),e(q,Hb),e(Hb,Dce),e(Dce,Qxo),e(Hb,Wxo),e(Hb,qD),e(qD,Hxo),e(Hb,Uxo),e(q,Jxo),e(q,Ub),e(Ub,Gce),e(Gce,Yxo),e(Ub,Kxo),e(Ub,ND),e(ND,Zxo),e(Ub,e9o),e(q,o9o),e(q,Jb),e(Jb,Oce),e(Oce,r9o),e(Jb,t9o),e(Jb,jD),e(jD,a9o),e(Jb,n9o),e(q,s9o),e(q,Yb),e(Yb,Vce),e(Vce,l9o),e(Yb,i9o),e(Yb,DD),e(DD,d9o),e(Yb,c9o),e(q,f9o),e(q,Kb),e(Kb,Xce),e(Xce,m9o),e(Kb,g9o),e(Kb,GD),e(GD,h9o),e(Kb,p9o),e(q,u9o),e(q,Zb),e(Zb,zce),e(zce,_9o),e(Zb,b9o),e(Zb,OD),e(OD,v9o),e(Zb,F9o),e(q,T9o),e(q,e2),e(e2,Qce),e(Qce,M9o),e(e2,E9o),e(e2,VD),e(VD,C9o),e(e2,w9o),e(q,A9o),e(q,o2),e(o2,Wce),e(Wce,y9o),e(o2,L9o),e(o2,XD),e(XD,x9o),e(o2,$9o),e(q,k9o),e(q,r2),e(r2,Hce),e(Hce,S9o),e(r2,R9o),e(r2,zD),e(zD,B9o),e(r2,P9o),e(q,I9o),e(q,t2),e(t2,Uce),e(Uce,q9o),e(t2,N9o),e(t2,QD),e(QD,j9o),e(t2,D9o),e(q,G9o),e(q,a2),e(a2,Jce),e(Jce,O9o),e(a2,V9o),e(a2,WD),e(WD,X9o),e(a2,z9o),e(q,Q9o),e(q,n2),e(n2,Yce),e(Yce,W9o),e(n2,H9o),e(n2,HD),e(HD,U9o),e(n2,J9o),e(q,Y9o),e(q,s2),e(s2,Kce),e(Kce,K9o),e(s2,Z9o),e(s2,UD),e(UD,e$o),e(s2,o$o),e(q,r$o),e(q,l2),e(l2,Zce),e(Zce,t$o),e(l2,a$o),e(l2,JD),e(JD,n$o),e(l2,s$o),e(q,l$o),e(q,i2),e(i2,efe),e(efe,i$o),e(i2,d$o),e(i2,YD),e(YD,c$o),e(i2,f$o),e(q,m$o),e(q,d2),e(d2,ofe),e(ofe,g$o),e(d2,h$o),e(d2,KD),e(KD,p$o),e(d2,u$o),e(q,_$o),e(q,c2),e(c2,rfe),e(rfe,b$o),e(c2,v$o),e(c2,ZD),e(ZD,F$o),e(c2,T$o),e(q,M$o),e(q,f2),e(f2,tfe),e(tfe,E$o),e(f2,C$o),e(f2,eG),e(eG,w$o),e(f2,A$o),e(q,y$o),e(q,m2),e(m2,afe),e(afe,L$o),e(m2,x$o),e(m2,oG),e(oG,$$o),e(m2,k$o),e(Ze,S$o),e(Ze,g2),e(g2,R$o),e(g2,nfe),e(nfe,B$o),e(g2,P$o),e(g2,sfe),e(sfe,I$o),e(Ze,q$o),M(h2,Ze,null),b(f,cIe,_),b(f,ji,_),e(ji,p2),e(p2,lfe),M(K0,lfe,null),e(ji,N$o),e(ji,ife),e(ife,j$o),b(f,fIe,_),b(f,Bo,_),M(Z0,Bo,null),e(Bo,D$o),e(Bo,Di),e(Di,G$o),e(Di,rG),e(rG,O$o),e(Di,V$o),e(Di,tG),e(tG,X$o),e(Di,z$o),e(Bo,Q$o),e(Bo,ey),e(ey,W$o),e(ey,dfe),e(dfe,H$o),e(ey,U$o),e(Bo,J$o),e(Bo,lt),M(oy,lt,null),e(lt,Y$o),e(lt,cfe),e(cfe,K$o),e(lt,Z$o),e(lt,Gi),e(Gi,eko),e(Gi,ffe),e(ffe,oko),e(Gi,rko),e(Gi,aG),e(aG,tko),e(Gi,ako),e(lt,nko),M(u2,lt,null),e(Bo,sko),e(Bo,eo),M(ry,eo,null),e(eo,lko),e(eo,mfe),e(mfe,iko),e(eo,dko),e(eo,Sa),e(Sa,cko),e(Sa,gfe),e(gfe,fko),e(Sa,mko),e(Sa,hfe),e(hfe,gko),e(Sa,hko),e(Sa,pfe),e(pfe,pko),e(Sa,uko),e(eo,_ko),e(eo,Y),e(Y,_2),e(_2,ufe),e(ufe,bko),e(_2,vko),e(_2,nG),e(nG,Fko),e(_2,Tko),e(Y,Mko),e(Y,b2),e(b2,_fe),e(_fe,Eko),e(b2,Cko),e(b2,sG),e(sG,wko),e(b2,Ako),e(Y,yko),e(Y,v2),e(v2,bfe),e(bfe,Lko),e(v2,xko),e(v2,lG),e(lG,$ko),e(v2,kko),e(Y,Sko),e(Y,F2),e(F2,vfe),e(vfe,Rko),e(F2,Bko),e(F2,iG),e(iG,Pko),e(F2,Iko),e(Y,qko),e(Y,T2),e(T2,Ffe),e(Ffe,Nko),e(T2,jko),e(T2,dG),e(dG,Dko),e(T2,Gko),e(Y,Oko),e(Y,M2),e(M2,Tfe),e(Tfe,Vko),e(M2,Xko),e(M2,cG),e(cG,zko),e(M2,Qko),e(Y,Wko),e(Y,E2),e(E2,Mfe),e(Mfe,Hko),e(E2,Uko),e(E2,fG),e(fG,Jko),e(E2,Yko),e(Y,Kko),e(Y,C2),e(C2,Efe),e(Efe,Zko),e(C2,eSo),e(C2,mG),e(mG,oSo),e(C2,rSo),e(Y,tSo),e(Y,w2),e(w2,Cfe),e(Cfe,aSo),e(w2,nSo),e(w2,gG),e(gG,sSo),e(w2,lSo),e(Y,iSo),e(Y,A2),e(A2,wfe),e(wfe,dSo),e(A2,cSo),e(A2,hG),e(hG,fSo),e(A2,mSo),e(Y,gSo),e(Y,y2),e(y2,Afe),e(Afe,hSo),e(y2,pSo),e(y2,pG),e(pG,uSo),e(y2,_So),e(Y,bSo),e(Y,L2),e(L2,yfe),e(yfe,vSo),e(L2,FSo),e(L2,uG),e(uG,TSo),e(L2,MSo),e(Y,ESo),e(Y,x2),e(x2,Lfe),e(Lfe,CSo),e(x2,wSo),e(x2,_G),e(_G,ASo),e(x2,ySo),e(Y,LSo),e(Y,$2),e($2,xfe),e(xfe,xSo),e($2,$So),e($2,bG),e(bG,kSo),e($2,SSo),e(Y,RSo),e(Y,k2),e(k2,$fe),e($fe,BSo),e(k2,PSo),e(k2,vG),e(vG,ISo),e(k2,qSo),e(Y,NSo),e(Y,S2),e(S2,kfe),e(kfe,jSo),e(S2,DSo),e(S2,FG),e(FG,GSo),e(S2,OSo),e(Y,VSo),e(Y,R2),e(R2,Sfe),e(Sfe,XSo),e(R2,zSo),e(R2,TG),e(TG,QSo),e(R2,WSo),e(Y,HSo),e(Y,B2),e(B2,Rfe),e(Rfe,USo),e(B2,JSo),e(B2,MG),e(MG,YSo),e(B2,KSo),e(Y,ZSo),e(Y,P2),e(P2,Bfe),e(Bfe,eRo),e(P2,oRo),e(P2,EG),e(EG,rRo),e(P2,tRo),e(Y,aRo),e(Y,I2),e(I2,Pfe),e(Pfe,nRo),e(I2,sRo),e(I2,CG),e(CG,lRo),e(I2,iRo),e(Y,dRo),e(Y,q2),e(q2,Ife),e(Ife,cRo),e(q2,fRo),e(q2,wG),e(wG,mRo),e(q2,gRo),e(Y,hRo),e(Y,N2),e(N2,qfe),e(qfe,pRo),e(N2,uRo),e(N2,AG),e(AG,_Ro),e(N2,bRo),e(Y,vRo),e(Y,j2),e(j2,Nfe),e(Nfe,FRo),e(j2,TRo),e(j2,yG),e(yG,MRo),e(j2,ERo),e(Y,CRo),e(Y,D2),e(D2,jfe),e(jfe,wRo),e(D2,ARo),e(D2,LG),e(LG,yRo),e(D2,LRo),e(Y,xRo),e(Y,G2),e(G2,Dfe),e(Dfe,$Ro),e(G2,kRo),e(G2,xG),e(xG,SRo),e(G2,RRo),e(Y,BRo),e(Y,O2),e(O2,Gfe),e(Gfe,PRo),e(O2,IRo),e(O2,$G),e($G,qRo),e(O2,NRo),e(Y,jRo),e(Y,V2),e(V2,Ofe),e(Ofe,DRo),e(V2,GRo),e(V2,kG),e(kG,ORo),e(V2,VRo),e(Y,XRo),e(Y,X2),e(X2,Vfe),e(Vfe,zRo),e(X2,QRo),e(X2,SG),e(SG,WRo),e(X2,HRo),e(Y,URo),e(Y,z2),e(z2,Xfe),e(Xfe,JRo),e(z2,YRo),e(z2,RG),e(RG,KRo),e(z2,ZRo),e(eo,eBo),e(eo,Q2),e(Q2,oBo),e(Q2,zfe),e(zfe,rBo),e(Q2,tBo),e(Q2,Qfe),e(Qfe,aBo),e(eo,nBo),M(W2,eo,null),b(f,mIe,_),b(f,Oi,_),e(Oi,H2),e(H2,Wfe),M(ty,Wfe,null),e(Oi,sBo),e(Oi,Hfe),e(Hfe,lBo),b(f,gIe,_),b(f,Po,_),M(ay,Po,null),e(Po,iBo),e(Po,Vi),e(Vi,dBo),e(Vi,BG),e(BG,cBo),e(Vi,fBo),e(Vi,PG),e(PG,mBo),e(Vi,gBo),e(Po,hBo),e(Po,ny),e(ny,pBo),e(ny,Ufe),e(Ufe,uBo),e(ny,_Bo),e(Po,bBo),e(Po,it),M(sy,it,null),e(it,vBo),e(it,Jfe),e(Jfe,FBo),e(it,TBo),e(it,Xi),e(Xi,MBo),e(Xi,Yfe),e(Yfe,EBo),e(Xi,CBo),e(Xi,IG),e(IG,wBo),e(Xi,ABo),e(it,yBo),M(U2,it,null),e(Po,LBo),e(Po,oo),M(ly,oo,null),e(oo,xBo),e(oo,Kfe),e(Kfe,$Bo),e(oo,kBo),e(oo,Ra),e(Ra,SBo),e(Ra,Zfe),e(Zfe,RBo),e(Ra,BBo),e(Ra,eme),e(eme,PBo),e(Ra,IBo),e(Ra,ome),e(ome,qBo),e(Ra,NBo),e(oo,jBo),e(oo,Yr),e(Yr,J2),e(J2,rme),e(rme,DBo),e(J2,GBo),e(J2,qG),e(qG,OBo),e(J2,VBo),e(Yr,XBo),e(Yr,Y2),e(Y2,tme),e(tme,zBo),e(Y2,QBo),e(Y2,NG),e(NG,WBo),e(Y2,HBo),e(Yr,UBo),e(Yr,K2),e(K2,ame),e(ame,JBo),e(K2,YBo),e(K2,jG),e(jG,KBo),e(K2,ZBo),e(Yr,ePo),e(Yr,Z2),e(Z2,nme),e(nme,oPo),e(Z2,rPo),e(Z2,DG),e(DG,tPo),e(Z2,aPo),e(Yr,nPo),e(Yr,e3),e(e3,sme),e(sme,sPo),e(e3,lPo),e(e3,GG),e(GG,iPo),e(e3,dPo),e(oo,cPo),e(oo,o3),e(o3,fPo),e(o3,lme),e(lme,mPo),e(o3,gPo),e(o3,ime),e(ime,hPo),e(oo,pPo),M(r3,oo,null),b(f,hIe,_),b(f,zi,_),e(zi,t3),e(t3,dme),M(iy,dme,null),e(zi,uPo),e(zi,cme),e(cme,_Po),b(f,pIe,_),b(f,Io,_),M(dy,Io,null),e(Io,bPo),e(Io,Qi),e(Qi,vPo),e(Qi,OG),e(OG,FPo),e(Qi,TPo),e(Qi,VG),e(VG,MPo),e(Qi,EPo),e(Io,CPo),e(Io,cy),e(cy,wPo),e(cy,fme),e(fme,APo),e(cy,yPo),e(Io,LPo),e(Io,dt),M(fy,dt,null),e(dt,xPo),e(dt,mme),e(mme,$Po),e(dt,kPo),e(dt,Wi),e(Wi,SPo),e(Wi,gme),e(gme,RPo),e(Wi,BPo),e(Wi,XG),e(XG,PPo),e(Wi,IPo),e(dt,qPo),M(a3,dt,null),e(Io,NPo),e(Io,ro),M(my,ro,null),e(ro,jPo),e(ro,hme),e(hme,DPo),e(ro,GPo),e(ro,Ba),e(Ba,OPo),e(Ba,pme),e(pme,VPo),e(Ba,XPo),e(Ba,ume),e(ume,zPo),e(Ba,QPo),e(Ba,_me),e(_me,WPo),e(Ba,HPo),e(ro,UPo),e(ro,U),e(U,n3),e(n3,bme),e(bme,JPo),e(n3,YPo),e(n3,zG),e(zG,KPo),e(n3,ZPo),e(U,eIo),e(U,s3),e(s3,vme),e(vme,oIo),e(s3,rIo),e(s3,QG),e(QG,tIo),e(s3,aIo),e(U,nIo),e(U,l3),e(l3,Fme),e(Fme,sIo),e(l3,lIo),e(l3,WG),e(WG,iIo),e(l3,dIo),e(U,cIo),e(U,i3),e(i3,Tme),e(Tme,fIo),e(i3,mIo),e(i3,HG),e(HG,gIo),e(i3,hIo),e(U,pIo),e(U,d3),e(d3,Mme),e(Mme,uIo),e(d3,_Io),e(d3,UG),e(UG,bIo),e(d3,vIo),e(U,FIo),e(U,c3),e(c3,Eme),e(Eme,TIo),e(c3,MIo),e(c3,JG),e(JG,EIo),e(c3,CIo),e(U,wIo),e(U,f3),e(f3,Cme),e(Cme,AIo),e(f3,yIo),e(f3,YG),e(YG,LIo),e(f3,xIo),e(U,$Io),e(U,m3),e(m3,wme),e(wme,kIo),e(m3,SIo),e(m3,KG),e(KG,RIo),e(m3,BIo),e(U,PIo),e(U,g3),e(g3,Ame),e(Ame,IIo),e(g3,qIo),e(g3,ZG),e(ZG,NIo),e(g3,jIo),e(U,DIo),e(U,h3),e(h3,yme),e(yme,GIo),e(h3,OIo),e(h3,eO),e(eO,VIo),e(h3,XIo),e(U,zIo),e(U,p3),e(p3,Lme),e(Lme,QIo),e(p3,WIo),e(p3,oO),e(oO,HIo),e(p3,UIo),e(U,JIo),e(U,u3),e(u3,xme),e(xme,YIo),e(u3,KIo),e(u3,rO),e(rO,ZIo),e(u3,eqo),e(U,oqo),e(U,_3),e(_3,$me),e($me,rqo),e(_3,tqo),e(_3,tO),e(tO,aqo),e(_3,nqo),e(U,sqo),e(U,b3),e(b3,kme),e(kme,lqo),e(b3,iqo),e(b3,aO),e(aO,dqo),e(b3,cqo),e(U,fqo),e(U,v3),e(v3,Sme),e(Sme,mqo),e(v3,gqo),e(v3,nO),e(nO,hqo),e(v3,pqo),e(U,uqo),e(U,F3),e(F3,Rme),e(Rme,_qo),e(F3,bqo),e(F3,sO),e(sO,vqo),e(F3,Fqo),e(U,Tqo),e(U,T3),e(T3,Bme),e(Bme,Mqo),e(T3,Eqo),e(T3,lO),e(lO,Cqo),e(T3,wqo),e(U,Aqo),e(U,M3),e(M3,Pme),e(Pme,yqo),e(M3,Lqo),e(M3,iO),e(iO,xqo),e(M3,$qo),e(U,kqo),e(U,E3),e(E3,Ime),e(Ime,Sqo),e(E3,Rqo),e(E3,dO),e(dO,Bqo),e(E3,Pqo),e(U,Iqo),e(U,C3),e(C3,qme),e(qme,qqo),e(C3,Nqo),e(C3,cO),e(cO,jqo),e(C3,Dqo),e(U,Gqo),e(U,w3),e(w3,Nme),e(Nme,Oqo),e(w3,Vqo),e(w3,fO),e(fO,Xqo),e(w3,zqo),e(U,Qqo),e(U,A3),e(A3,jme),e(jme,Wqo),e(A3,Hqo),e(A3,mO),e(mO,Uqo),e(A3,Jqo),e(U,Yqo),e(U,y3),e(y3,Dme),e(Dme,Kqo),e(y3,Zqo),e(y3,gO),e(gO,eNo),e(y3,oNo),e(U,rNo),e(U,L3),e(L3,Gme),e(Gme,tNo),e(L3,aNo),e(L3,hO),e(hO,nNo),e(L3,sNo),e(U,lNo),e(U,x3),e(x3,Ome),e(Ome,iNo),e(x3,dNo),e(x3,pO),e(pO,cNo),e(x3,fNo),e(U,mNo),e(U,$3),e($3,Vme),e(Vme,gNo),e($3,hNo),e($3,uO),e(uO,pNo),e($3,uNo),e(U,_No),e(U,k3),e(k3,Xme),e(Xme,bNo),e(k3,vNo),e(k3,_O),e(_O,FNo),e(k3,TNo),e(U,MNo),e(U,S3),e(S3,zme),e(zme,ENo),e(S3,CNo),e(S3,bO),e(bO,wNo),e(S3,ANo),e(U,yNo),e(U,R3),e(R3,Qme),e(Qme,LNo),e(R3,xNo),e(R3,vO),e(vO,$No),e(R3,kNo),e(U,SNo),e(U,B3),e(B3,Wme),e(Wme,RNo),e(B3,BNo),e(B3,FO),e(FO,PNo),e(B3,INo),e(U,qNo),e(U,P3),e(P3,Hme),e(Hme,NNo),e(P3,jNo),e(P3,TO),e(TO,DNo),e(P3,GNo),e(U,ONo),e(U,I3),e(I3,Ume),e(Ume,VNo),e(I3,XNo),e(I3,MO),e(MO,zNo),e(I3,QNo),e(U,WNo),e(U,q3),e(q3,Jme),e(Jme,HNo),e(q3,UNo),e(q3,EO),e(EO,JNo),e(q3,YNo),e(ro,KNo),e(ro,N3),e(N3,ZNo),e(N3,Yme),e(Yme,ejo),e(N3,ojo),e(N3,Kme),e(Kme,rjo),e(ro,tjo),M(j3,ro,null),b(f,uIe,_),b(f,Hi,_),e(Hi,D3),e(D3,Zme),M(gy,Zme,null),e(Hi,ajo),e(Hi,ege),e(ege,njo),b(f,_Ie,_),b(f,qo,_),M(hy,qo,null),e(qo,sjo),e(qo,Ui),e(Ui,ljo),e(Ui,CO),e(CO,ijo),e(Ui,djo),e(Ui,wO),e(wO,cjo),e(Ui,fjo),e(qo,mjo),e(qo,py),e(py,gjo),e(py,oge),e(oge,hjo),e(py,pjo),e(qo,ujo),e(qo,ct),M(uy,ct,null),e(ct,_jo),e(ct,rge),e(rge,bjo),e(ct,vjo),e(ct,Ji),e(Ji,Fjo),e(Ji,tge),e(tge,Tjo),e(Ji,Mjo),e(Ji,AO),e(AO,Ejo),e(Ji,Cjo),e(ct,wjo),M(G3,ct,null),e(qo,Ajo),e(qo,to),M(_y,to,null),e(to,yjo),e(to,age),e(age,Ljo),e(to,xjo),e(to,Pa),e(Pa,$jo),e(Pa,nge),e(nge,kjo),e(Pa,Sjo),e(Pa,sge),e(sge,Rjo),e(Pa,Bjo),e(Pa,lge),e(lge,Pjo),e(Pa,Ijo),e(to,qjo),e(to,O),e(O,O3),e(O3,ige),e(ige,Njo),e(O3,jjo),e(O3,yO),e(yO,Djo),e(O3,Gjo),e(O,Ojo),e(O,V3),e(V3,dge),e(dge,Vjo),e(V3,Xjo),e(V3,LO),e(LO,zjo),e(V3,Qjo),e(O,Wjo),e(O,X3),e(X3,cge),e(cge,Hjo),e(X3,Ujo),e(X3,xO),e(xO,Jjo),e(X3,Yjo),e(O,Kjo),e(O,z3),e(z3,fge),e(fge,Zjo),e(z3,eDo),e(z3,$O),e($O,oDo),e(z3,rDo),e(O,tDo),e(O,Q3),e(Q3,mge),e(mge,aDo),e(Q3,nDo),e(Q3,kO),e(kO,sDo),e(Q3,lDo),e(O,iDo),e(O,W3),e(W3,gge),e(gge,dDo),e(W3,cDo),e(W3,SO),e(SO,fDo),e(W3,mDo),e(O,gDo),e(O,H3),e(H3,hge),e(hge,hDo),e(H3,pDo),e(H3,RO),e(RO,uDo),e(H3,_Do),e(O,bDo),e(O,U3),e(U3,pge),e(pge,vDo),e(U3,FDo),e(U3,BO),e(BO,TDo),e(U3,MDo),e(O,EDo),e(O,J3),e(J3,uge),e(uge,CDo),e(J3,wDo),e(J3,PO),e(PO,ADo),e(J3,yDo),e(O,LDo),e(O,Y3),e(Y3,_ge),e(_ge,xDo),e(Y3,$Do),e(Y3,IO),e(IO,kDo),e(Y3,SDo),e(O,RDo),e(O,K3),e(K3,bge),e(bge,BDo),e(K3,PDo),e(K3,qO),e(qO,IDo),e(K3,qDo),e(O,NDo),e(O,Z3),e(Z3,vge),e(vge,jDo),e(Z3,DDo),e(Z3,NO),e(NO,GDo),e(Z3,ODo),e(O,VDo),e(O,ev),e(ev,Fge),e(Fge,XDo),e(ev,zDo),e(ev,jO),e(jO,QDo),e(ev,WDo),e(O,HDo),e(O,ov),e(ov,Tge),e(Tge,UDo),e(ov,JDo),e(ov,DO),e(DO,YDo),e(ov,KDo),e(O,ZDo),e(O,rv),e(rv,Mge),e(Mge,eGo),e(rv,oGo),e(rv,GO),e(GO,rGo),e(rv,tGo),e(O,aGo),e(O,tv),e(tv,Ege),e(Ege,nGo),e(tv,sGo),e(tv,OO),e(OO,lGo),e(tv,iGo),e(O,dGo),e(O,av),e(av,Cge),e(Cge,cGo),e(av,fGo),e(av,VO),e(VO,mGo),e(av,gGo),e(O,hGo),e(O,nv),e(nv,wge),e(wge,pGo),e(nv,uGo),e(nv,XO),e(XO,_Go),e(nv,bGo),e(O,vGo),e(O,sv),e(sv,Age),e(Age,FGo),e(sv,TGo),e(sv,zO),e(zO,MGo),e(sv,EGo),e(O,CGo),e(O,lv),e(lv,yge),e(yge,wGo),e(lv,AGo),e(lv,QO),e(QO,yGo),e(lv,LGo),e(O,xGo),e(O,iv),e(iv,Lge),e(Lge,$Go),e(iv,kGo),e(iv,WO),e(WO,SGo),e(iv,RGo),e(O,BGo),e(O,dv),e(dv,xge),e(xge,PGo),e(dv,IGo),e(dv,HO),e(HO,qGo),e(dv,NGo),e(O,jGo),e(O,cv),e(cv,$ge),e($ge,DGo),e(cv,GGo),e(cv,UO),e(UO,OGo),e(cv,VGo),e(O,XGo),e(O,fv),e(fv,kge),e(kge,zGo),e(fv,QGo),e(fv,JO),e(JO,WGo),e(fv,HGo),e(O,UGo),e(O,mv),e(mv,Sge),e(Sge,JGo),e(mv,YGo),e(mv,YO),e(YO,KGo),e(mv,ZGo),e(O,eOo),e(O,gv),e(gv,Rge),e(Rge,oOo),e(gv,rOo),e(gv,KO),e(KO,tOo),e(gv,aOo),e(O,nOo),e(O,hv),e(hv,Bge),e(Bge,sOo),e(hv,lOo),e(hv,ZO),e(ZO,iOo),e(hv,dOo),e(O,cOo),e(O,pv),e(pv,Pge),e(Pge,fOo),e(pv,mOo),e(pv,eV),e(eV,gOo),e(pv,hOo),e(O,pOo),e(O,uv),e(uv,Ige),e(Ige,uOo),e(uv,_Oo),e(uv,oV),e(oV,bOo),e(uv,vOo),e(O,FOo),e(O,_v),e(_v,qge),e(qge,TOo),e(_v,MOo),e(_v,rV),e(rV,EOo),e(_v,COo),e(O,wOo),e(O,bv),e(bv,Nge),e(Nge,AOo),e(bv,yOo),e(bv,tV),e(tV,LOo),e(bv,xOo),e(O,$Oo),e(O,vv),e(vv,jge),e(jge,kOo),e(vv,SOo),e(vv,aV),e(aV,ROo),e(vv,BOo),e(O,POo),e(O,Fv),e(Fv,Dge),e(Dge,IOo),e(Fv,qOo),e(Fv,nV),e(nV,NOo),e(Fv,jOo),e(O,DOo),e(O,Tv),e(Tv,Gge),e(Gge,GOo),e(Tv,OOo),e(Tv,sV),e(sV,VOo),e(Tv,XOo),e(O,zOo),e(O,Mv),e(Mv,Oge),e(Oge,QOo),e(Mv,WOo),e(Mv,lV),e(lV,HOo),e(Mv,UOo),e(O,JOo),e(O,Ev),e(Ev,Vge),e(Vge,YOo),e(Ev,KOo),e(Ev,iV),e(iV,ZOo),e(Ev,eVo),e(O,oVo),e(O,Cv),e(Cv,Xge),e(Xge,rVo),e(Cv,tVo),e(Cv,dV),e(dV,aVo),e(Cv,nVo),e(O,sVo),e(O,wv),e(wv,zge),e(zge,lVo),e(wv,iVo),e(wv,cV),e(cV,dVo),e(wv,cVo),e(O,fVo),e(O,Av),e(Av,Qge),e(Qge,mVo),e(Av,gVo),e(Av,fV),e(fV,hVo),e(Av,pVo),e(to,uVo),e(to,yv),e(yv,_Vo),e(yv,Wge),e(Wge,bVo),e(yv,vVo),e(yv,Hge),e(Hge,FVo),e(to,TVo),M(Lv,to,null),b(f,bIe,_),b(f,Yi,_),e(Yi,xv),e(xv,Uge),M(by,Uge,null),e(Yi,MVo),e(Yi,Jge),e(Jge,EVo),b(f,vIe,_),b(f,No,_),M(vy,No,null),e(No,CVo),e(No,Ki),e(Ki,wVo),e(Ki,mV),e(mV,AVo),e(Ki,yVo),e(Ki,gV),e(gV,LVo),e(Ki,xVo),e(No,$Vo),e(No,Fy),e(Fy,kVo),e(Fy,Yge),e(Yge,SVo),e(Fy,RVo),e(No,BVo),e(No,ft),M(Ty,ft,null),e(ft,PVo),e(ft,Kge),e(Kge,IVo),e(ft,qVo),e(ft,Zi),e(Zi,NVo),e(Zi,Zge),e(Zge,jVo),e(Zi,DVo),e(Zi,hV),e(hV,GVo),e(Zi,OVo),e(ft,VVo),M($v,ft,null),e(No,XVo),e(No,ao),M(My,ao,null),e(ao,zVo),e(ao,ehe),e(ehe,QVo),e(ao,WVo),e(ao,Ia),e(Ia,HVo),e(Ia,ohe),e(ohe,UVo),e(Ia,JVo),e(Ia,rhe),e(rhe,YVo),e(Ia,KVo),e(Ia,the),e(the,ZVo),e(Ia,eXo),e(ao,oXo),e(ao,ahe),e(ahe,kv),e(kv,nhe),e(nhe,rXo),e(kv,tXo),e(kv,pV),e(pV,aXo),e(kv,nXo),e(ao,sXo),e(ao,Sv),e(Sv,lXo),e(Sv,she),e(she,iXo),e(Sv,dXo),e(Sv,lhe),e(lhe,cXo),e(ao,fXo),M(Rv,ao,null),b(f,FIe,_),b(f,ed,_),e(ed,Bv),e(Bv,ihe),M(Ey,ihe,null),e(ed,mXo),e(ed,dhe),e(dhe,gXo),b(f,TIe,_),b(f,jo,_),M(Cy,jo,null),e(jo,hXo),e(jo,od),e(od,pXo),e(od,uV),e(uV,uXo),e(od,_Xo),e(od,_V),e(_V,bXo),e(od,vXo),e(jo,FXo),e(jo,wy),e(wy,TXo),e(wy,che),e(che,MXo),e(wy,EXo),e(jo,CXo),e(jo,mt),M(Ay,mt,null),e(mt,wXo),e(mt,fhe),e(fhe,AXo),e(mt,yXo),e(mt,rd),e(rd,LXo),e(rd,mhe),e(mhe,xXo),e(rd,$Xo),e(rd,bV),e(bV,kXo),e(rd,SXo),e(mt,RXo),M(Pv,mt,null),e(jo,BXo),e(jo,no),M(yy,no,null),e(no,PXo),e(no,ghe),e(ghe,IXo),e(no,qXo),e(no,qa),e(qa,NXo),e(qa,hhe),e(hhe,jXo),e(qa,DXo),e(qa,phe),e(phe,GXo),e(qa,OXo),e(qa,uhe),e(uhe,VXo),e(qa,XXo),e(no,zXo),e(no,Fe),e(Fe,Iv),e(Iv,_he),e(_he,QXo),e(Iv,WXo),e(Iv,vV),e(vV,HXo),e(Iv,UXo),e(Fe,JXo),e(Fe,qv),e(qv,bhe),e(bhe,YXo),e(qv,KXo),e(qv,FV),e(FV,ZXo),e(qv,ezo),e(Fe,ozo),e(Fe,Nv),e(Nv,vhe),e(vhe,rzo),e(Nv,tzo),e(Nv,TV),e(TV,azo),e(Nv,nzo),e(Fe,szo),e(Fe,Rs),e(Rs,Fhe),e(Fhe,lzo),e(Rs,izo),e(Rs,MV),e(MV,dzo),e(Rs,czo),e(Rs,EV),e(EV,fzo),e(Rs,mzo),e(Fe,gzo),e(Fe,jv),e(jv,The),e(The,hzo),e(jv,pzo),e(jv,CV),e(CV,uzo),e(jv,_zo),e(Fe,bzo),e(Fe,gt),e(gt,Mhe),e(Mhe,vzo),e(gt,Fzo),e(gt,wV),e(wV,Tzo),e(gt,Mzo),e(gt,AV),e(AV,Ezo),e(gt,Czo),e(gt,yV),e(yV,wzo),e(gt,Azo),e(Fe,yzo),e(Fe,Dv),e(Dv,Ehe),e(Ehe,Lzo),e(Dv,xzo),e(Dv,LV),e(LV,$zo),e(Dv,kzo),e(Fe,Szo),e(Fe,Gv),e(Gv,Che),e(Che,Rzo),e(Gv,Bzo),e(Gv,xV),e(xV,Pzo),e(Gv,Izo),e(Fe,qzo),e(Fe,Ov),e(Ov,whe),e(whe,Nzo),e(Ov,jzo),e(Ov,$V),e($V,Dzo),e(Ov,Gzo),e(Fe,Ozo),e(Fe,Vv),e(Vv,Ahe),e(Ahe,Vzo),e(Vv,Xzo),e(Vv,kV),e(kV,zzo),e(Vv,Qzo),e(Fe,Wzo),e(Fe,Xv),e(Xv,yhe),e(yhe,Hzo),e(Xv,Uzo),e(Xv,SV),e(SV,Jzo),e(Xv,Yzo),e(Fe,Kzo),e(Fe,zv),e(zv,Lhe),e(Lhe,Zzo),e(zv,eQo),e(zv,RV),e(RV,oQo),e(zv,rQo),e(Fe,tQo),e(Fe,Qv),e(Qv,xhe),e(xhe,aQo),e(Qv,nQo),e(Qv,BV),e(BV,sQo),e(Qv,lQo),e(no,iQo),e(no,Wv),e(Wv,dQo),e(Wv,$he),e($he,cQo),e(Wv,fQo),e(Wv,khe),e(khe,mQo),e(no,gQo),M(Hv,no,null),b(f,MIe,_),b(f,td,_),e(td,Uv),e(Uv,She),M(Ly,She,null),e(td,hQo),e(td,Rhe),e(Rhe,pQo),b(f,EIe,_),b(f,Do,_),M(xy,Do,null),e(Do,uQo),e(Do,ad),e(ad,_Qo),e(ad,PV),e(PV,bQo),e(ad,vQo),e(ad,IV),e(IV,FQo),e(ad,TQo),e(Do,MQo),e(Do,$y),e($y,EQo),e($y,Bhe),e(Bhe,CQo),e($y,wQo),e(Do,AQo),e(Do,ht),M(ky,ht,null),e(ht,yQo),e(ht,Phe),e(Phe,LQo),e(ht,xQo),e(ht,nd),e(nd,$Qo),e(nd,Ihe),e(Ihe,kQo),e(nd,SQo),e(nd,qV),e(qV,RQo),e(nd,BQo),e(ht,PQo),M(Jv,ht,null),e(Do,IQo),e(Do,so),M(Sy,so,null),e(so,qQo),e(so,qhe),e(qhe,NQo),e(so,jQo),e(so,Na),e(Na,DQo),e(Na,Nhe),e(Nhe,GQo),e(Na,OQo),e(Na,jhe),e(jhe,VQo),e(Na,XQo),e(Na,Dhe),e(Dhe,zQo),e(Na,QQo),e(so,WQo),e(so,Ghe),e(Ghe,Yv),e(Yv,Ohe),e(Ohe,HQo),e(Yv,UQo),e(Yv,NV),e(NV,JQo),e(Yv,YQo),e(so,KQo),e(so,Kv),e(Kv,ZQo),e(Kv,Vhe),e(Vhe,eWo),e(Kv,oWo),e(Kv,Xhe),e(Xhe,rWo),e(so,tWo),M(Zv,so,null),b(f,CIe,_),b(f,sd,_),e(sd,eF),e(eF,zhe),M(Ry,zhe,null),e(sd,aWo),e(sd,Qhe),e(Qhe,nWo),b(f,wIe,_),b(f,Go,_),M(By,Go,null),e(Go,sWo),e(Go,ld),e(ld,lWo),e(ld,jV),e(jV,iWo),e(ld,dWo),e(ld,DV),e(DV,cWo),e(ld,fWo),e(Go,mWo),e(Go,Py),e(Py,gWo),e(Py,Whe),e(Whe,hWo),e(Py,pWo),e(Go,uWo),e(Go,pt),M(Iy,pt,null),e(pt,_Wo),e(pt,Hhe),e(Hhe,bWo),e(pt,vWo),e(pt,id),e(id,FWo),e(id,Uhe),e(Uhe,TWo),e(id,MWo),e(id,GV),e(GV,EWo),e(id,CWo),e(pt,wWo),M(oF,pt,null),e(Go,AWo),e(Go,lo),M(qy,lo,null),e(lo,yWo),e(lo,Jhe),e(Jhe,LWo),e(lo,xWo),e(lo,ja),e(ja,$Wo),e(ja,Yhe),e(Yhe,kWo),e(ja,SWo),e(ja,Khe),e(Khe,RWo),e(ja,BWo),e(ja,Zhe),e(Zhe,PWo),e(ja,IWo),e(lo,qWo),e(lo,Ne),e(Ne,rF),e(rF,epe),e(epe,NWo),e(rF,jWo),e(rF,OV),e(OV,DWo),e(rF,GWo),e(Ne,OWo),e(Ne,tF),e(tF,ope),e(ope,VWo),e(tF,XWo),e(tF,VV),e(VV,zWo),e(tF,QWo),e(Ne,WWo),e(Ne,aF),e(aF,rpe),e(rpe,HWo),e(aF,UWo),e(aF,XV),e(XV,JWo),e(aF,YWo),e(Ne,KWo),e(Ne,nF),e(nF,tpe),e(tpe,ZWo),e(nF,eHo),e(nF,zV),e(zV,oHo),e(nF,rHo),e(Ne,tHo),e(Ne,sF),e(sF,ape),e(ape,aHo),e(sF,nHo),e(sF,QV),e(QV,sHo),e(sF,lHo),e(Ne,iHo),e(Ne,lF),e(lF,npe),e(npe,dHo),e(lF,cHo),e(lF,WV),e(WV,fHo),e(lF,mHo),e(Ne,gHo),e(Ne,iF),e(iF,spe),e(spe,hHo),e(iF,pHo),e(iF,HV),e(HV,uHo),e(iF,_Ho),e(Ne,bHo),e(Ne,dF),e(dF,lpe),e(lpe,vHo),e(dF,FHo),e(dF,UV),e(UV,THo),e(dF,MHo),e(lo,EHo),e(lo,cF),e(cF,CHo),e(cF,ipe),e(ipe,wHo),e(cF,AHo),e(cF,dpe),e(dpe,yHo),e(lo,LHo),M(fF,lo,null),b(f,AIe,_),b(f,dd,_),e(dd,mF),e(mF,cpe),M(Ny,cpe,null),e(dd,xHo),e(dd,fpe),e(fpe,$Ho),b(f,yIe,_),b(f,Oo,_),M(jy,Oo,null),e(Oo,kHo),e(Oo,cd),e(cd,SHo),e(cd,JV),e(JV,RHo),e(cd,BHo),e(cd,YV),e(YV,PHo),e(cd,IHo),e(Oo,qHo),e(Oo,Dy),e(Dy,NHo),e(Dy,mpe),e(mpe,jHo),e(Dy,DHo),e(Oo,GHo),e(Oo,ut),M(Gy,ut,null),e(ut,OHo),e(ut,gpe),e(gpe,VHo),e(ut,XHo),e(ut,fd),e(fd,zHo),e(fd,hpe),e(hpe,QHo),e(fd,WHo),e(fd,KV),e(KV,HHo),e(fd,UHo),e(ut,JHo),M(gF,ut,null),e(Oo,YHo),e(Oo,io),M(Oy,io,null),e(io,KHo),e(io,ppe),e(ppe,ZHo),e(io,eUo),e(io,Da),e(Da,oUo),e(Da,upe),e(upe,rUo),e(Da,tUo),e(Da,_pe),e(_pe,aUo),e(Da,nUo),e(Da,bpe),e(bpe,sUo),e(Da,lUo),e(io,iUo),e(io,Ga),e(Ga,hF),e(hF,vpe),e(vpe,dUo),e(hF,cUo),e(hF,ZV),e(ZV,fUo),e(hF,mUo),e(Ga,gUo),e(Ga,pF),e(pF,Fpe),e(Fpe,hUo),e(pF,pUo),e(pF,eX),e(eX,uUo),e(pF,_Uo),e(Ga,bUo),e(Ga,uF),e(uF,Tpe),e(Tpe,vUo),e(uF,FUo),e(uF,oX),e(oX,TUo),e(uF,MUo),e(Ga,EUo),e(Ga,_F),e(_F,Mpe),e(Mpe,CUo),e(_F,wUo),e(_F,rX),e(rX,AUo),e(_F,yUo),e(io,LUo),e(io,bF),e(bF,xUo),e(bF,Epe),e(Epe,$Uo),e(bF,kUo),e(bF,Cpe),e(Cpe,SUo),e(io,RUo),M(vF,io,null),b(f,LIe,_),b(f,md,_),e(md,FF),e(FF,wpe),M(Vy,wpe,null),e(md,BUo),e(md,Ape),e(Ape,PUo),b(f,xIe,_),b(f,Vo,_),M(Xy,Vo,null),e(Vo,IUo),e(Vo,gd),e(gd,qUo),e(gd,tX),e(tX,NUo),e(gd,jUo),e(gd,aX),e(aX,DUo),e(gd,GUo),e(Vo,OUo),e(Vo,zy),e(zy,VUo),e(zy,ype),e(ype,XUo),e(zy,zUo),e(Vo,QUo),e(Vo,_t),M(Qy,_t,null),e(_t,WUo),e(_t,Lpe),e(Lpe,HUo),e(_t,UUo),e(_t,hd),e(hd,JUo),e(hd,xpe),e(xpe,YUo),e(hd,KUo),e(hd,nX),e(nX,ZUo),e(hd,eJo),e(_t,oJo),M(TF,_t,null),e(Vo,rJo),e(Vo,co),M(Wy,co,null),e(co,tJo),e(co,$pe),e($pe,aJo),e(co,nJo),e(co,Oa),e(Oa,sJo),e(Oa,kpe),e(kpe,lJo),e(Oa,iJo),e(Oa,Spe),e(Spe,dJo),e(Oa,cJo),e(Oa,Rpe),e(Rpe,fJo),e(Oa,mJo),e(co,gJo),e(co,je),e(je,MF),e(MF,Bpe),e(Bpe,hJo),e(MF,pJo),e(MF,sX),e(sX,uJo),e(MF,_Jo),e(je,bJo),e(je,EF),e(EF,Ppe),e(Ppe,vJo),e(EF,FJo),e(EF,lX),e(lX,TJo),e(EF,MJo),e(je,EJo),e(je,CF),e(CF,Ipe),e(Ipe,CJo),e(CF,wJo),e(CF,iX),e(iX,AJo),e(CF,yJo),e(je,LJo),e(je,wF),e(wF,qpe),e(qpe,xJo),e(wF,$Jo),e(wF,dX),e(dX,kJo),e(wF,SJo),e(je,RJo),e(je,AF),e(AF,Npe),e(Npe,BJo),e(AF,PJo),e(AF,cX),e(cX,IJo),e(AF,qJo),e(je,NJo),e(je,yF),e(yF,jpe),e(jpe,jJo),e(yF,DJo),e(yF,fX),e(fX,GJo),e(yF,OJo),e(je,VJo),e(je,LF),e(LF,Dpe),e(Dpe,XJo),e(LF,zJo),e(LF,mX),e(mX,QJo),e(LF,WJo),e(je,HJo),e(je,xF),e(xF,Gpe),e(Gpe,UJo),e(xF,JJo),e(xF,gX),e(gX,YJo),e(xF,KJo),e(co,ZJo),e(co,$F),e($F,eYo),e($F,Ope),e(Ope,oYo),e($F,rYo),e($F,Vpe),e(Vpe,tYo),e(co,aYo),M(kF,co,null),b(f,$Ie,_),b(f,pd,_),e(pd,SF),e(SF,Xpe),M(Hy,Xpe,null),e(pd,nYo),e(pd,zpe),e(zpe,sYo),b(f,kIe,_),b(f,Xo,_),M(Uy,Xo,null),e(Xo,lYo),e(Xo,ud),e(ud,iYo),e(ud,hX),e(hX,dYo),e(ud,cYo),e(ud,pX),e(pX,fYo),e(ud,mYo),e(Xo,gYo),e(Xo,Jy),e(Jy,hYo),e(Jy,Qpe),e(Qpe,pYo),e(Jy,uYo),e(Xo,_Yo),e(Xo,bt),M(Yy,bt,null),e(bt,bYo),e(bt,Wpe),e(Wpe,vYo),e(bt,FYo),e(bt,_d),e(_d,TYo),e(_d,Hpe),e(Hpe,MYo),e(_d,EYo),e(_d,uX),e(uX,CYo),e(_d,wYo),e(bt,AYo),M(RF,bt,null),e(Xo,yYo),e(Xo,fo),M(Ky,fo,null),e(fo,LYo),e(fo,Upe),e(Upe,xYo),e(fo,$Yo),e(fo,Va),e(Va,kYo),e(Va,Jpe),e(Jpe,SYo),e(Va,RYo),e(Va,Ype),e(Ype,BYo),e(Va,PYo),e(Va,Kpe),e(Kpe,IYo),e(Va,qYo),e(fo,NYo),e(fo,Zy),e(Zy,BF),e(BF,Zpe),e(Zpe,jYo),e(BF,DYo),e(BF,_X),e(_X,GYo),e(BF,OYo),e(Zy,VYo),e(Zy,PF),e(PF,eue),e(eue,XYo),e(PF,zYo),e(PF,bX),e(bX,QYo),e(PF,WYo),e(fo,HYo),e(fo,IF),e(IF,UYo),e(IF,oue),e(oue,JYo),e(IF,YYo),e(IF,rue),e(rue,KYo),e(fo,ZYo),M(qF,fo,null),b(f,SIe,_),b(f,bd,_),e(bd,NF),e(NF,tue),M(eL,tue,null),e(bd,eKo),e(bd,aue),e(aue,oKo),b(f,RIe,_),b(f,zo,_),M(oL,zo,null),e(zo,rKo),e(zo,vd),e(vd,tKo),e(vd,vX),e(vX,aKo),e(vd,nKo),e(vd,FX),e(FX,sKo),e(vd,lKo),e(zo,iKo),e(zo,rL),e(rL,dKo),e(rL,nue),e(nue,cKo),e(rL,fKo),e(zo,mKo),e(zo,vt),M(tL,vt,null),e(vt,gKo),e(vt,sue),e(sue,hKo),e(vt,pKo),e(vt,Fd),e(Fd,uKo),e(Fd,lue),e(lue,_Ko),e(Fd,bKo),e(Fd,TX),e(TX,vKo),e(Fd,FKo),e(vt,TKo),M(jF,vt,null),e(zo,MKo),e(zo,mo),M(aL,mo,null),e(mo,EKo),e(mo,iue),e(iue,CKo),e(mo,wKo),e(mo,Xa),e(Xa,AKo),e(Xa,due),e(due,yKo),e(Xa,LKo),e(Xa,cue),e(cue,xKo),e(Xa,$Ko),e(Xa,fue),e(fue,kKo),e(Xa,SKo),e(mo,RKo),e(mo,za),e(za,DF),e(DF,mue),e(mue,BKo),e(DF,PKo),e(DF,MX),e(MX,IKo),e(DF,qKo),e(za,NKo),e(za,GF),e(GF,gue),e(gue,jKo),e(GF,DKo),e(GF,EX),e(EX,GKo),e(GF,OKo),e(za,VKo),e(za,OF),e(OF,hue),e(hue,XKo),e(OF,zKo),e(OF,CX),e(CX,QKo),e(OF,WKo),e(za,HKo),e(za,VF),e(VF,pue),e(pue,UKo),e(VF,JKo),e(VF,wX),e(wX,YKo),e(VF,KKo),e(mo,ZKo),e(mo,XF),e(XF,eZo),e(XF,uue),e(uue,oZo),e(XF,rZo),e(XF,_ue),e(_ue,tZo),e(mo,aZo),M(zF,mo,null),b(f,BIe,_),b(f,Td,_),e(Td,QF),e(QF,bue),M(nL,bue,null),e(Td,nZo),e(Td,vue),e(vue,sZo),b(f,PIe,_),b(f,Qo,_),M(sL,Qo,null),e(Qo,lZo),e(Qo,Md),e(Md,iZo),e(Md,AX),e(AX,dZo),e(Md,cZo),e(Md,yX),e(yX,fZo),e(Md,mZo),e(Qo,gZo),e(Qo,lL),e(lL,hZo),e(lL,Fue),e(Fue,pZo),e(lL,uZo),e(Qo,_Zo),e(Qo,Ft),M(iL,Ft,null),e(Ft,bZo),e(Ft,Tue),e(Tue,vZo),e(Ft,FZo),e(Ft,Ed),e(Ed,TZo),e(Ed,Mue),e(Mue,MZo),e(Ed,EZo),e(Ed,LX),e(LX,CZo),e(Ed,wZo),e(Ft,AZo),M(WF,Ft,null),e(Qo,yZo),e(Qo,go),M(dL,go,null),e(go,LZo),e(go,Eue),e(Eue,xZo),e(go,$Zo),e(go,Qa),e(Qa,kZo),e(Qa,Cue),e(Cue,SZo),e(Qa,RZo),e(Qa,wue),e(wue,BZo),e(Qa,PZo),e(Qa,Aue),e(Aue,IZo),e(Qa,qZo),e(go,NZo),e(go,Cd),e(Cd,HF),e(HF,yue),e(yue,jZo),e(HF,DZo),e(HF,xX),e(xX,GZo),e(HF,OZo),e(Cd,VZo),e(Cd,UF),e(UF,Lue),e(Lue,XZo),e(UF,zZo),e(UF,$X),e($X,QZo),e(UF,WZo),e(Cd,HZo),e(Cd,JF),e(JF,xue),e(xue,UZo),e(JF,JZo),e(JF,kX),e(kX,YZo),e(JF,KZo),e(go,ZZo),e(go,YF),e(YF,eer),e(YF,$ue),e($ue,oer),e(YF,rer),e(YF,kue),e(kue,ter),e(go,aer),M(KF,go,null),b(f,IIe,_),b(f,wd,_),e(wd,ZF),e(ZF,Sue),M(cL,Sue,null),e(wd,ner),e(wd,Rue),e(Rue,ser),b(f,qIe,_),b(f,Wo,_),M(fL,Wo,null),e(Wo,ler),e(Wo,Ad),e(Ad,ier),e(Ad,SX),e(SX,der),e(Ad,cer),e(Ad,RX),e(RX,fer),e(Ad,mer),e(Wo,ger),e(Wo,mL),e(mL,her),e(mL,Bue),e(Bue,per),e(mL,uer),e(Wo,_er),e(Wo,Tt),M(gL,Tt,null),e(Tt,ber),e(Tt,Pue),e(Pue,ver),e(Tt,Fer),e(Tt,yd),e(yd,Ter),e(yd,Iue),e(Iue,Mer),e(yd,Eer),e(yd,BX),e(BX,Cer),e(yd,wer),e(Tt,Aer),M(eT,Tt,null),e(Wo,yer),e(Wo,ho),M(hL,ho,null),e(ho,Ler),e(ho,que),e(que,xer),e(ho,$er),e(ho,Wa),e(Wa,ker),e(Wa,Nue),e(Nue,Ser),e(Wa,Rer),e(Wa,jue),e(jue,Ber),e(Wa,Per),e(Wa,Due),e(Due,Ier),e(Wa,qer),e(ho,Ner),e(ho,pL),e(pL,oT),e(oT,Gue),e(Gue,jer),e(oT,Der),e(oT,PX),e(PX,Ger),e(oT,Oer),e(pL,Ver),e(pL,rT),e(rT,Oue),e(Oue,Xer),e(rT,zer),e(rT,IX),e(IX,Qer),e(rT,Wer),e(ho,Her),e(ho,tT),e(tT,Uer),e(tT,Vue),e(Vue,Jer),e(tT,Yer),e(tT,Xue),e(Xue,Ker),e(ho,Zer),M(aT,ho,null),b(f,NIe,_),b(f,Ld,_),e(Ld,nT),e(nT,zue),M(uL,zue,null),e(Ld,eor),e(Ld,Que),e(Que,oor),b(f,jIe,_),b(f,Ho,_),M(_L,Ho,null),e(Ho,ror),e(Ho,xd),e(xd,tor),e(xd,qX),e(qX,aor),e(xd,nor),e(xd,NX),e(NX,sor),e(xd,lor),e(Ho,ior),e(Ho,bL),e(bL,dor),e(bL,Wue),e(Wue,cor),e(bL,mor),e(Ho,gor),e(Ho,Mt),M(vL,Mt,null),e(Mt,hor),e(Mt,Hue),e(Hue,por),e(Mt,uor),e(Mt,$d),e($d,_or),e($d,Uue),e(Uue,bor),e($d,vor),e($d,jX),e(jX,For),e($d,Tor),e(Mt,Mor),M(sT,Mt,null),e(Ho,Eor),e(Ho,po),M(FL,po,null),e(po,Cor),e(po,Jue),e(Jue,wor),e(po,Aor),e(po,Ha),e(Ha,yor),e(Ha,Yue),e(Yue,Lor),e(Ha,xor),e(Ha,Kue),e(Kue,$or),e(Ha,kor),e(Ha,Zue),e(Zue,Sor),e(Ha,Ror),e(po,Bor),e(po,e_e),e(e_e,lT),e(lT,o_e),e(o_e,Por),e(lT,Ior),e(lT,DX),e(DX,qor),e(lT,Nor),e(po,jor),e(po,iT),e(iT,Dor),e(iT,r_e),e(r_e,Gor),e(iT,Oor),e(iT,t_e),e(t_e,Vor),e(po,Xor),M(dT,po,null),b(f,DIe,_),b(f,kd,_),e(kd,cT),e(cT,a_e),M(TL,a_e,null),e(kd,zor),e(kd,n_e),e(n_e,Qor),b(f,GIe,_),b(f,Uo,_),M(ML,Uo,null),e(Uo,Wor),e(Uo,Sd),e(Sd,Hor),e(Sd,GX),e(GX,Uor),e(Sd,Jor),e(Sd,OX),e(OX,Yor),e(Sd,Kor),e(Uo,Zor),e(Uo,EL),e(EL,err),e(EL,s_e),e(s_e,orr),e(EL,rrr),e(Uo,trr),e(Uo,Et),M(CL,Et,null),e(Et,arr),e(Et,l_e),e(l_e,nrr),e(Et,srr),e(Et,Rd),e(Rd,lrr),e(Rd,i_e),e(i_e,irr),e(Rd,drr),e(Rd,VX),e(VX,crr),e(Rd,frr),e(Et,mrr),M(fT,Et,null),e(Uo,grr),e(Uo,uo),M(wL,uo,null),e(uo,hrr),e(uo,d_e),e(d_e,prr),e(uo,urr),e(uo,Ua),e(Ua,_rr),e(Ua,c_e),e(c_e,brr),e(Ua,vrr),e(Ua,f_e),e(f_e,Frr),e(Ua,Trr),e(Ua,m_e),e(m_e,Mrr),e(Ua,Err),e(uo,Crr),e(uo,Ja),e(Ja,mT),e(mT,g_e),e(g_e,wrr),e(mT,Arr),e(mT,XX),e(XX,yrr),e(mT,Lrr),e(Ja,xrr),e(Ja,gT),e(gT,h_e),e(h_e,$rr),e(gT,krr),e(gT,zX),e(zX,Srr),e(gT,Rrr),e(Ja,Brr),e(Ja,hT),e(hT,p_e),e(p_e,Prr),e(hT,Irr),e(hT,QX),e(QX,qrr),e(hT,Nrr),e(Ja,jrr),e(Ja,pT),e(pT,u_e),e(u_e,Drr),e(pT,Grr),e(pT,WX),e(WX,Orr),e(pT,Vrr),e(uo,Xrr),e(uo,uT),e(uT,zrr),e(uT,__e),e(__e,Qrr),e(uT,Wrr),e(uT,b_e),e(b_e,Hrr),e(uo,Urr),M(_T,uo,null),b(f,OIe,_),b(f,Bd,_),e(Bd,bT),e(bT,v_e),M(AL,v_e,null),e(Bd,Jrr),e(Bd,F_e),e(F_e,Yrr),b(f,VIe,_),b(f,Jo,_),M(yL,Jo,null),e(Jo,Krr),e(Jo,Pd),e(Pd,Zrr),e(Pd,HX),e(HX,etr),e(Pd,otr),e(Pd,UX),e(UX,rtr),e(Pd,ttr),e(Jo,atr),e(Jo,LL),e(LL,ntr),e(LL,T_e),e(T_e,str),e(LL,ltr),e(Jo,itr),e(Jo,Ct),M(xL,Ct,null),e(Ct,dtr),e(Ct,M_e),e(M_e,ctr),e(Ct,ftr),e(Ct,Id),e(Id,mtr),e(Id,E_e),e(E_e,gtr),e(Id,htr),e(Id,JX),e(JX,ptr),e(Id,utr),e(Ct,_tr),M(vT,Ct,null),e(Jo,btr),e(Jo,_o),M($L,_o,null),e(_o,vtr),e(_o,C_e),e(C_e,Ftr),e(_o,Ttr),e(_o,Ya),e(Ya,Mtr),e(Ya,w_e),e(w_e,Etr),e(Ya,Ctr),e(Ya,A_e),e(A_e,wtr),e(Ya,Atr),e(Ya,y_e),e(y_e,ytr),e(Ya,Ltr),e(_o,xtr),e(_o,L_e),e(L_e,FT),e(FT,x_e),e(x_e,$tr),e(FT,ktr),e(FT,YX),e(YX,Str),e(FT,Rtr),e(_o,Btr),e(_o,TT),e(TT,Ptr),e(TT,$_e),e($_e,Itr),e(TT,qtr),e(TT,k_e),e(k_e,Ntr),e(_o,jtr),M(MT,_o,null),b(f,XIe,_),b(f,qd,_),e(qd,ET),e(ET,S_e),M(kL,S_e,null),e(qd,Dtr),e(qd,R_e),e(R_e,Gtr),b(f,zIe,_),b(f,Yo,_),M(SL,Yo,null),e(Yo,Otr),e(Yo,Nd),e(Nd,Vtr),e(Nd,KX),e(KX,Xtr),e(Nd,ztr),e(Nd,ZX),e(ZX,Qtr),e(Nd,Wtr),e(Yo,Htr),e(Yo,RL),e(RL,Utr),e(RL,B_e),e(B_e,Jtr),e(RL,Ytr),e(Yo,Ktr),e(Yo,wt),M(BL,wt,null),e(wt,Ztr),e(wt,P_e),e(P_e,ear),e(wt,oar),e(wt,jd),e(jd,rar),e(jd,I_e),e(I_e,tar),e(jd,aar),e(jd,ez),e(ez,nar),e(jd,sar),e(wt,lar),M(CT,wt,null),e(Yo,iar),e(Yo,wr),M(PL,wr,null),e(wr,dar),e(wr,q_e),e(q_e,car),e(wr,far),e(wr,Ka),e(Ka,mar),e(Ka,N_e),e(N_e,gar),e(Ka,har),e(Ka,j_e),e(j_e,par),e(Ka,uar),e(Ka,D_e),e(D_e,_ar),e(Ka,bar),e(wr,Far),e(wr,j),e(j,wT),e(wT,G_e),e(G_e,Tar),e(wT,Mar),e(wT,oz),e(oz,Ear),e(wT,Car),e(j,war),e(j,AT),e(AT,O_e),e(O_e,Aar),e(AT,yar),e(AT,rz),e(rz,Lar),e(AT,xar),e(j,$ar),e(j,yT),e(yT,V_e),e(V_e,kar),e(yT,Sar),e(yT,tz),e(tz,Rar),e(yT,Bar),e(j,Par),e(j,LT),e(LT,X_e),e(X_e,Iar),e(LT,qar),e(LT,az),e(az,Nar),e(LT,jar),e(j,Dar),e(j,xT),e(xT,z_e),e(z_e,Gar),e(xT,Oar),e(xT,nz),e(nz,Var),e(xT,Xar),e(j,zar),e(j,$T),e($T,Q_e),e(Q_e,Qar),e($T,War),e($T,sz),e(sz,Har),e($T,Uar),e(j,Jar),e(j,kT),e(kT,W_e),e(W_e,Yar),e(kT,Kar),e(kT,lz),e(lz,Zar),e(kT,enr),e(j,onr),e(j,ST),e(ST,H_e),e(H_e,rnr),e(ST,tnr),e(ST,iz),e(iz,anr),e(ST,nnr),e(j,snr),e(j,RT),e(RT,U_e),e(U_e,lnr),e(RT,inr),e(RT,dz),e(dz,dnr),e(RT,cnr),e(j,fnr),e(j,BT),e(BT,J_e),e(J_e,mnr),e(BT,gnr),e(BT,cz),e(cz,hnr),e(BT,pnr),e(j,unr),e(j,PT),e(PT,Y_e),e(Y_e,_nr),e(PT,bnr),e(PT,fz),e(fz,vnr),e(PT,Fnr),e(j,Tnr),e(j,IT),e(IT,K_e),e(K_e,Mnr),e(IT,Enr),e(IT,mz),e(mz,Cnr),e(IT,wnr),e(j,Anr),e(j,qT),e(qT,Z_e),e(Z_e,ynr),e(qT,Lnr),e(qT,gz),e(gz,xnr),e(qT,$nr),e(j,knr),e(j,NT),e(NT,e1e),e(e1e,Snr),e(NT,Rnr),e(NT,hz),e(hz,Bnr),e(NT,Pnr),e(j,Inr),e(j,jT),e(jT,o1e),e(o1e,qnr),e(jT,Nnr),e(jT,pz),e(pz,jnr),e(jT,Dnr),e(j,Gnr),e(j,DT),e(DT,r1e),e(r1e,Onr),e(DT,Vnr),e(DT,uz),e(uz,Xnr),e(DT,znr),e(j,Qnr),e(j,GT),e(GT,t1e),e(t1e,Wnr),e(GT,Hnr),e(GT,_z),e(_z,Unr),e(GT,Jnr),e(j,Ynr),e(j,Bs),e(Bs,a1e),e(a1e,Knr),e(Bs,Znr),e(Bs,bz),e(bz,esr),e(Bs,osr),e(Bs,vz),e(vz,rsr),e(Bs,tsr),e(j,asr),e(j,OT),e(OT,n1e),e(n1e,nsr),e(OT,ssr),e(OT,Fz),e(Fz,lsr),e(OT,isr),e(j,dsr),e(j,VT),e(VT,s1e),e(s1e,csr),e(VT,fsr),e(VT,Tz),e(Tz,msr),e(VT,gsr),e(j,hsr),e(j,XT),e(XT,l1e),e(l1e,psr),e(XT,usr),e(XT,Mz),e(Mz,_sr),e(XT,bsr),e(j,vsr),e(j,zT),e(zT,i1e),e(i1e,Fsr),e(zT,Tsr),e(zT,Ez),e(Ez,Msr),e(zT,Esr),e(j,Csr),e(j,QT),e(QT,d1e),e(d1e,wsr),e(QT,Asr),e(QT,Cz),e(Cz,ysr),e(QT,Lsr),e(j,xsr),e(j,WT),e(WT,c1e),e(c1e,$sr),e(WT,ksr),e(WT,wz),e(wz,Ssr),e(WT,Rsr),e(j,Bsr),e(j,HT),e(HT,f1e),e(f1e,Psr),e(HT,Isr),e(HT,Az),e(Az,qsr),e(HT,Nsr),e(j,jsr),e(j,UT),e(UT,m1e),e(m1e,Dsr),e(UT,Gsr),e(UT,yz),e(yz,Osr),e(UT,Vsr),e(j,Xsr),e(j,JT),e(JT,g1e),e(g1e,zsr),e(JT,Qsr),e(JT,Lz),e(Lz,Wsr),e(JT,Hsr),e(j,Usr),e(j,YT),e(YT,h1e),e(h1e,Jsr),e(YT,Ysr),e(YT,xz),e(xz,Ksr),e(YT,Zsr),e(j,elr),e(j,KT),e(KT,p1e),e(p1e,olr),e(KT,rlr),e(KT,$z),e($z,tlr),e(KT,alr),e(j,nlr),e(j,ZT),e(ZT,u1e),e(u1e,slr),e(ZT,llr),e(ZT,kz),e(kz,ilr),e(ZT,dlr),e(j,clr),e(j,e7),e(e7,_1e),e(_1e,flr),e(e7,mlr),e(e7,Sz),e(Sz,glr),e(e7,hlr),e(j,plr),e(j,o7),e(o7,b1e),e(b1e,ulr),e(o7,_lr),e(o7,Rz),e(Rz,blr),e(o7,vlr),e(j,Flr),e(j,r7),e(r7,v1e),e(v1e,Tlr),e(r7,Mlr),e(r7,Bz),e(Bz,Elr),e(r7,Clr),e(j,wlr),e(j,t7),e(t7,F1e),e(F1e,Alr),e(t7,ylr),e(t7,Pz),e(Pz,Llr),e(t7,xlr),e(j,$lr),e(j,a7),e(a7,T1e),e(T1e,klr),e(a7,Slr),e(a7,Iz),e(Iz,Rlr),e(a7,Blr),e(j,Plr),e(j,n7),e(n7,M1e),e(M1e,Ilr),e(n7,qlr),e(n7,qz),e(qz,Nlr),e(n7,jlr),e(j,Dlr),e(j,s7),e(s7,E1e),e(E1e,Glr),e(s7,Olr),e(s7,Nz),e(Nz,Vlr),e(s7,Xlr),e(j,zlr),e(j,l7),e(l7,C1e),e(C1e,Qlr),e(l7,Wlr),e(l7,jz),e(jz,Hlr),e(l7,Ulr),e(j,Jlr),e(j,i7),e(i7,w1e),e(w1e,Ylr),e(i7,Klr),e(i7,Dz),e(Dz,Zlr),e(i7,eir),e(j,oir),e(j,d7),e(d7,A1e),e(A1e,rir),e(d7,tir),e(d7,Gz),e(Gz,air),e(d7,nir),e(j,sir),e(j,c7),e(c7,y1e),e(y1e,lir),e(c7,iir),e(c7,Oz),e(Oz,dir),e(c7,cir),e(j,fir),e(j,f7),e(f7,L1e),e(L1e,mir),e(f7,gir),e(f7,Vz),e(Vz,hir),e(f7,pir),e(j,uir),e(j,m7),e(m7,x1e),e(x1e,_ir),e(m7,bir),e(m7,Xz),e(Xz,vir),e(m7,Fir),e(j,Tir),e(j,g7),e(g7,$1e),e($1e,Mir),e(g7,Eir),e(g7,zz),e(zz,Cir),e(g7,wir),e(j,Air),e(j,h7),e(h7,k1e),e(k1e,yir),e(h7,Lir),e(h7,Qz),e(Qz,xir),e(h7,$ir),e(wr,kir),M(p7,wr,null),b(f,QIe,_),b(f,Dd,_),e(Dd,u7),e(u7,S1e),M(IL,S1e,null),e(Dd,Sir),e(Dd,R1e),e(R1e,Rir),b(f,WIe,_),b(f,Ko,_),M(qL,Ko,null),e(Ko,Bir),e(Ko,Gd),e(Gd,Pir),e(Gd,Wz),e(Wz,Iir),e(Gd,qir),e(Gd,Hz),e(Hz,Nir),e(Gd,jir),e(Ko,Dir),e(Ko,NL),e(NL,Gir),e(NL,B1e),e(B1e,Oir),e(NL,Vir),e(Ko,Xir),e(Ko,At),M(jL,At,null),e(At,zir),e(At,P1e),e(P1e,Qir),e(At,Wir),e(At,Od),e(Od,Hir),e(Od,I1e),e(I1e,Uir),e(Od,Jir),e(Od,Uz),e(Uz,Yir),e(Od,Kir),e(At,Zir),M(_7,At,null),e(Ko,edr),e(Ko,Ar),M(DL,Ar,null),e(Ar,odr),e(Ar,q1e),e(q1e,rdr),e(Ar,tdr),e(Ar,Za),e(Za,adr),e(Za,N1e),e(N1e,ndr),e(Za,sdr),e(Za,j1e),e(j1e,ldr),e(Za,idr),e(Za,D1e),e(D1e,ddr),e(Za,cdr),e(Ar,fdr),e(Ar,se),e(se,b7),e(b7,G1e),e(G1e,mdr),e(b7,gdr),e(b7,Jz),e(Jz,hdr),e(b7,pdr),e(se,udr),e(se,v7),e(v7,O1e),e(O1e,_dr),e(v7,bdr),e(v7,Yz),e(Yz,vdr),e(v7,Fdr),e(se,Tdr),e(se,F7),e(F7,V1e),e(V1e,Mdr),e(F7,Edr),e(F7,Kz),e(Kz,Cdr),e(F7,wdr),e(se,Adr),e(se,T7),e(T7,X1e),e(X1e,ydr),e(T7,Ldr),e(T7,Zz),e(Zz,xdr),e(T7,$dr),e(se,kdr),e(se,M7),e(M7,z1e),e(z1e,Sdr),e(M7,Rdr),e(M7,eQ),e(eQ,Bdr),e(M7,Pdr),e(se,Idr),e(se,E7),e(E7,Q1e),e(Q1e,qdr),e(E7,Ndr),e(E7,oQ),e(oQ,jdr),e(E7,Ddr),e(se,Gdr),e(se,C7),e(C7,W1e),e(W1e,Odr),e(C7,Vdr),e(C7,rQ),e(rQ,Xdr),e(C7,zdr),e(se,Qdr),e(se,w7),e(w7,H1e),e(H1e,Wdr),e(w7,Hdr),e(w7,tQ),e(tQ,Udr),e(w7,Jdr),e(se,Ydr),e(se,A7),e(A7,U1e),e(U1e,Kdr),e(A7,Zdr),e(A7,aQ),e(aQ,ecr),e(A7,ocr),e(se,rcr),e(se,y7),e(y7,J1e),e(J1e,tcr),e(y7,acr),e(y7,nQ),e(nQ,ncr),e(y7,scr),e(se,lcr),e(se,L7),e(L7,Y1e),e(Y1e,icr),e(L7,dcr),e(L7,sQ),e(sQ,ccr),e(L7,fcr),e(se,mcr),e(se,x7),e(x7,K1e),e(K1e,gcr),e(x7,hcr),e(x7,lQ),e(lQ,pcr),e(x7,ucr),e(se,_cr),e(se,$7),e($7,Z1e),e(Z1e,bcr),e($7,vcr),e($7,iQ),e(iQ,Fcr),e($7,Tcr),e(se,Mcr),e(se,k7),e(k7,ebe),e(ebe,Ecr),e(k7,Ccr),e(k7,dQ),e(dQ,wcr),e(k7,Acr),e(se,ycr),e(se,S7),e(S7,obe),e(obe,Lcr),e(S7,xcr),e(S7,cQ),e(cQ,$cr),e(S7,kcr),e(se,Scr),e(se,R7),e(R7,rbe),e(rbe,Rcr),e(R7,Bcr),e(R7,fQ),e(fQ,Pcr),e(R7,Icr),e(se,qcr),e(se,B7),e(B7,tbe),e(tbe,Ncr),e(B7,jcr),e(B7,mQ),e(mQ,Dcr),e(B7,Gcr),e(se,Ocr),e(se,P7),e(P7,abe),e(abe,Vcr),e(P7,Xcr),e(P7,gQ),e(gQ,zcr),e(P7,Qcr),e(se,Wcr),e(se,I7),e(I7,nbe),e(nbe,Hcr),e(I7,Ucr),e(I7,hQ),e(hQ,Jcr),e(I7,Ycr),e(se,Kcr),e(se,q7),e(q7,sbe),e(sbe,Zcr),e(q7,efr),e(q7,pQ),e(pQ,ofr),e(q7,rfr),e(se,tfr),e(se,N7),e(N7,lbe),e(lbe,afr),e(N7,nfr),e(N7,uQ),e(uQ,sfr),e(N7,lfr),e(se,ifr),e(se,j7),e(j7,ibe),e(ibe,dfr),e(j7,cfr),e(j7,_Q),e(_Q,ffr),e(j7,mfr),e(se,gfr),e(se,D7),e(D7,dbe),e(dbe,hfr),e(D7,pfr),e(D7,bQ),e(bQ,ufr),e(D7,_fr),e(Ar,bfr),M(G7,Ar,null),b(f,HIe,_),b(f,Vd,_),e(Vd,O7),e(O7,cbe),M(GL,cbe,null),e(Vd,vfr),e(Vd,fbe),e(fbe,Ffr),b(f,UIe,_),b(f,Zo,_),M(OL,Zo,null),e(Zo,Tfr),e(Zo,Xd),e(Xd,Mfr),e(Xd,vQ),e(vQ,Efr),e(Xd,Cfr),e(Xd,FQ),e(FQ,wfr),e(Xd,Afr),e(Zo,yfr),e(Zo,VL),e(VL,Lfr),e(VL,mbe),e(mbe,xfr),e(VL,$fr),e(Zo,kfr),e(Zo,yt),M(XL,yt,null),e(yt,Sfr),e(yt,gbe),e(gbe,Rfr),e(yt,Bfr),e(yt,zd),e(zd,Pfr),e(zd,hbe),e(hbe,Ifr),e(zd,qfr),e(zd,TQ),e(TQ,Nfr),e(zd,jfr),e(yt,Dfr),M(V7,yt,null),e(Zo,Gfr),e(Zo,yr),M(zL,yr,null),e(yr,Ofr),e(yr,pbe),e(pbe,Vfr),e(yr,Xfr),e(yr,en),e(en,zfr),e(en,ube),e(ube,Qfr),e(en,Wfr),e(en,_be),e(_be,Hfr),e(en,Ufr),e(en,bbe),e(bbe,Jfr),e(en,Yfr),e(yr,Kfr),e(yr,Te),e(Te,X7),e(X7,vbe),e(vbe,Zfr),e(X7,emr),e(X7,MQ),e(MQ,omr),e(X7,rmr),e(Te,tmr),e(Te,z7),e(z7,Fbe),e(Fbe,amr),e(z7,nmr),e(z7,EQ),e(EQ,smr),e(z7,lmr),e(Te,imr),e(Te,Q7),e(Q7,Tbe),e(Tbe,dmr),e(Q7,cmr),e(Q7,CQ),e(CQ,fmr),e(Q7,mmr),e(Te,gmr),e(Te,W7),e(W7,Mbe),e(Mbe,hmr),e(W7,pmr),e(W7,wQ),e(wQ,umr),e(W7,_mr),e(Te,bmr),e(Te,H7),e(H7,Ebe),e(Ebe,vmr),e(H7,Fmr),e(H7,AQ),e(AQ,Tmr),e(H7,Mmr),e(Te,Emr),e(Te,U7),e(U7,Cbe),e(Cbe,Cmr),e(U7,wmr),e(U7,yQ),e(yQ,Amr),e(U7,ymr),e(Te,Lmr),e(Te,J7),e(J7,wbe),e(wbe,xmr),e(J7,$mr),e(J7,LQ),e(LQ,kmr),e(J7,Smr),e(Te,Rmr),e(Te,Y7),e(Y7,Abe),e(Abe,Bmr),e(Y7,Pmr),e(Y7,xQ),e(xQ,Imr),e(Y7,qmr),e(Te,Nmr),e(Te,K7),e(K7,ybe),e(ybe,jmr),e(K7,Dmr),e(K7,$Q),e($Q,Gmr),e(K7,Omr),e(Te,Vmr),e(Te,Z7),e(Z7,Lbe),e(Lbe,Xmr),e(Z7,zmr),e(Z7,kQ),e(kQ,Qmr),e(Z7,Wmr),e(Te,Hmr),e(Te,eM),e(eM,xbe),e(xbe,Umr),e(eM,Jmr),e(eM,SQ),e(SQ,Ymr),e(eM,Kmr),e(Te,Zmr),e(Te,oM),e(oM,$be),e($be,egr),e(oM,ogr),e(oM,RQ),e(RQ,rgr),e(oM,tgr),e(yr,agr),M(rM,yr,null),b(f,JIe,_),b(f,Qd,_),e(Qd,tM),e(tM,kbe),M(QL,kbe,null),e(Qd,ngr),e(Qd,Sbe),e(Sbe,sgr),b(f,YIe,_),b(f,er,_),M(WL,er,null),e(er,lgr),e(er,Wd),e(Wd,igr),e(Wd,BQ),e(BQ,dgr),e(Wd,cgr),e(Wd,PQ),e(PQ,fgr),e(Wd,mgr),e(er,ggr),e(er,HL),e(HL,hgr),e(HL,Rbe),e(Rbe,pgr),e(HL,ugr),e(er,_gr),e(er,Lt),M(UL,Lt,null),e(Lt,bgr),e(Lt,Bbe),e(Bbe,vgr),e(Lt,Fgr),e(Lt,Hd),e(Hd,Tgr),e(Hd,Pbe),e(Pbe,Mgr),e(Hd,Egr),e(Hd,IQ),e(IQ,Cgr),e(Hd,wgr),e(Lt,Agr),M(aM,Lt,null),e(er,ygr),e(er,Lr),M(JL,Lr,null),e(Lr,Lgr),e(Lr,Ibe),e(Ibe,xgr),e(Lr,$gr),e(Lr,on),e(on,kgr),e(on,qbe),e(qbe,Sgr),e(on,Rgr),e(on,Nbe),e(Nbe,Bgr),e(on,Pgr),e(on,jbe),e(jbe,Igr),e(on,qgr),e(Lr,Ngr),e(Lr,Ud),e(Ud,nM),e(nM,Dbe),e(Dbe,jgr),e(nM,Dgr),e(nM,qQ),e(qQ,Ggr),e(nM,Ogr),e(Ud,Vgr),e(Ud,sM),e(sM,Gbe),e(Gbe,Xgr),e(sM,zgr),e(sM,NQ),e(NQ,Qgr),e(sM,Wgr),e(Ud,Hgr),e(Ud,lM),e(lM,Obe),e(Obe,Ugr),e(lM,Jgr),e(lM,jQ),e(jQ,Ygr),e(lM,Kgr),e(Lr,Zgr),M(iM,Lr,null),b(f,KIe,_),b(f,Jd,_),e(Jd,dM),e(dM,Vbe),M(YL,Vbe,null),e(Jd,ehr),e(Jd,Xbe),e(Xbe,ohr),b(f,ZIe,_),b(f,or,_),M(KL,or,null),e(or,rhr),e(or,Yd),e(Yd,thr),e(Yd,DQ),e(DQ,ahr),e(Yd,nhr),e(Yd,GQ),e(GQ,shr),e(Yd,lhr),e(or,ihr),e(or,ZL),e(ZL,dhr),e(ZL,zbe),e(zbe,chr),e(ZL,fhr),e(or,mhr),e(or,xt),M(e8,xt,null),e(xt,ghr),e(xt,Qbe),e(Qbe,hhr),e(xt,phr),e(xt,Kd),e(Kd,uhr),e(Kd,Wbe),e(Wbe,_hr),e(Kd,bhr),e(Kd,OQ),e(OQ,vhr),e(Kd,Fhr),e(xt,Thr),M(cM,xt,null),e(or,Mhr),e(or,xr),M(o8,xr,null),e(xr,Ehr),e(xr,Hbe),e(Hbe,Chr),e(xr,whr),e(xr,rn),e(rn,Ahr),e(rn,Ube),e(Ube,yhr),e(rn,Lhr),e(rn,Jbe),e(Jbe,xhr),e(rn,$hr),e(rn,Ybe),e(Ybe,khr),e(rn,Shr),e(xr,Rhr),e(xr,ie),e(ie,fM),e(fM,Kbe),e(Kbe,Bhr),e(fM,Phr),e(fM,VQ),e(VQ,Ihr),e(fM,qhr),e(ie,Nhr),e(ie,mM),e(mM,Zbe),e(Zbe,jhr),e(mM,Dhr),e(mM,XQ),e(XQ,Ghr),e(mM,Ohr),e(ie,Vhr),e(ie,gM),e(gM,e2e),e(e2e,Xhr),e(gM,zhr),e(gM,zQ),e(zQ,Qhr),e(gM,Whr),e(ie,Hhr),e(ie,hM),e(hM,o2e),e(o2e,Uhr),e(hM,Jhr),e(hM,QQ),e(QQ,Yhr),e(hM,Khr),e(ie,Zhr),e(ie,pM),e(pM,r2e),e(r2e,epr),e(pM,opr),e(pM,WQ),e(WQ,rpr),e(pM,tpr),e(ie,apr),e(ie,uM),e(uM,t2e),e(t2e,npr),e(uM,spr),e(uM,HQ),e(HQ,lpr),e(uM,ipr),e(ie,dpr),e(ie,_M),e(_M,a2e),e(a2e,cpr),e(_M,fpr),e(_M,UQ),e(UQ,mpr),e(_M,gpr),e(ie,hpr),e(ie,bM),e(bM,n2e),e(n2e,ppr),e(bM,upr),e(bM,JQ),e(JQ,_pr),e(bM,bpr),e(ie,vpr),e(ie,vM),e(vM,s2e),e(s2e,Fpr),e(vM,Tpr),e(vM,YQ),e(YQ,Mpr),e(vM,Epr),e(ie,Cpr),e(ie,FM),e(FM,l2e),e(l2e,wpr),e(FM,Apr),e(FM,KQ),e(KQ,ypr),e(FM,Lpr),e(ie,xpr),e(ie,TM),e(TM,i2e),e(i2e,$pr),e(TM,kpr),e(TM,ZQ),e(ZQ,Spr),e(TM,Rpr),e(ie,Bpr),e(ie,MM),e(MM,d2e),e(d2e,Ppr),e(MM,Ipr),e(MM,eW),e(eW,qpr),e(MM,Npr),e(ie,jpr),e(ie,EM),e(EM,c2e),e(c2e,Dpr),e(EM,Gpr),e(EM,oW),e(oW,Opr),e(EM,Vpr),e(ie,Xpr),e(ie,CM),e(CM,f2e),e(f2e,zpr),e(CM,Qpr),e(CM,rW),e(rW,Wpr),e(CM,Hpr),e(ie,Upr),e(ie,wM),e(wM,m2e),e(m2e,Jpr),e(wM,Ypr),e(wM,tW),e(tW,Kpr),e(wM,Zpr),e(ie,eur),e(ie,AM),e(AM,g2e),e(g2e,our),e(AM,rur),e(AM,aW),e(aW,tur),e(AM,aur),e(ie,nur),e(ie,yM),e(yM,h2e),e(h2e,sur),e(yM,lur),e(yM,nW),e(nW,iur),e(yM,dur),e(ie,cur),e(ie,LM),e(LM,p2e),e(p2e,fur),e(LM,mur),e(LM,sW),e(sW,gur),e(LM,hur),e(ie,pur),e(ie,xM),e(xM,u2e),e(u2e,uur),e(xM,_ur),e(xM,lW),e(lW,bur),e(xM,vur),e(ie,Fur),e(ie,$M),e($M,_2e),e(_2e,Tur),e($M,Mur),e($M,iW),e(iW,Eur),e($M,Cur),e(xr,wur),M(kM,xr,null),b(f,eqe,_),b(f,Zd,_),e(Zd,SM),e(SM,b2e),M(r8,b2e,null),e(Zd,Aur),e(Zd,v2e),e(v2e,yur),b(f,oqe,_),b(f,rr,_),M(t8,rr,null),e(rr,Lur),e(rr,ec),e(ec,xur),e(ec,dW),e(dW,$ur),e(ec,kur),e(ec,cW),e(cW,Sur),e(ec,Rur),e(rr,Bur),e(rr,a8),e(a8,Pur),e(a8,F2e),e(F2e,Iur),e(a8,qur),e(rr,Nur),e(rr,$t),M(n8,$t,null),e($t,jur),e($t,T2e),e(T2e,Dur),e($t,Gur),e($t,oc),e(oc,Our),e(oc,M2e),e(M2e,Vur),e(oc,Xur),e(oc,fW),e(fW,zur),e(oc,Qur),e($t,Wur),M(RM,$t,null),e(rr,Hur),e(rr,$r),M(s8,$r,null),e($r,Uur),e($r,E2e),e(E2e,Jur),e($r,Yur),e($r,tn),e(tn,Kur),e(tn,C2e),e(C2e,Zur),e(tn,e_r),e(tn,w2e),e(w2e,o_r),e(tn,r_r),e(tn,A2e),e(A2e,t_r),e(tn,a_r),e($r,n_r),e($r,ye),e(ye,BM),e(BM,y2e),e(y2e,s_r),e(BM,l_r),e(BM,mW),e(mW,i_r),e(BM,d_r),e(ye,c_r),e(ye,PM),e(PM,L2e),e(L2e,f_r),e(PM,m_r),e(PM,gW),e(gW,g_r),e(PM,h_r),e(ye,p_r),e(ye,IM),e(IM,x2e),e(x2e,u_r),e(IM,__r),e(IM,hW),e(hW,b_r),e(IM,v_r),e(ye,F_r),e(ye,qM),e(qM,$2e),e($2e,T_r),e(qM,M_r),e(qM,pW),e(pW,E_r),e(qM,C_r),e(ye,w_r),e(ye,NM),e(NM,k2e),e(k2e,A_r),e(NM,y_r),e(NM,uW),e(uW,L_r),e(NM,x_r),e(ye,$_r),e(ye,jM),e(jM,S2e),e(S2e,k_r),e(jM,S_r),e(jM,_W),e(_W,R_r),e(jM,B_r),e(ye,P_r),e(ye,DM),e(DM,R2e),e(R2e,I_r),e(DM,q_r),e(DM,bW),e(bW,N_r),e(DM,j_r),e(ye,D_r),e(ye,GM),e(GM,B2e),e(B2e,G_r),e(GM,O_r),e(GM,vW),e(vW,V_r),e(GM,X_r),e(ye,z_r),e(ye,OM),e(OM,P2e),e(P2e,Q_r),e(OM,W_r),e(OM,FW),e(FW,H_r),e(OM,U_r),e(ye,J_r),e(ye,VM),e(VM,I2e),e(I2e,Y_r),e(VM,K_r),e(VM,TW),e(TW,Z_r),e(VM,e1r),e($r,o1r),M(XM,$r,null),b(f,rqe,_),b(f,rc,_),e(rc,zM),e(zM,q2e),M(l8,q2e,null),e(rc,r1r),e(rc,N2e),e(N2e,t1r),b(f,tqe,_),b(f,tr,_),M(i8,tr,null),e(tr,a1r),e(tr,tc),e(tc,n1r),e(tc,MW),e(MW,s1r),e(tc,l1r),e(tc,EW),e(EW,i1r),e(tc,d1r),e(tr,c1r),e(tr,d8),e(d8,f1r),e(d8,j2e),e(j2e,m1r),e(d8,g1r),e(tr,h1r),e(tr,kt),M(c8,kt,null),e(kt,p1r),e(kt,D2e),e(D2e,u1r),e(kt,_1r),e(kt,ac),e(ac,b1r),e(ac,G2e),e(G2e,v1r),e(ac,F1r),e(ac,CW),e(CW,T1r),e(ac,M1r),e(kt,E1r),M(QM,kt,null),e(tr,C1r),e(tr,kr),M(f8,kr,null),e(kr,w1r),e(kr,O2e),e(O2e,A1r),e(kr,y1r),e(kr,an),e(an,L1r),e(an,V2e),e(V2e,x1r),e(an,$1r),e(an,X2e),e(X2e,k1r),e(an,S1r),e(an,z2e),e(z2e,R1r),e(an,B1r),e(kr,P1r),e(kr,Z),e(Z,WM),e(WM,Q2e),e(Q2e,I1r),e(WM,q1r),e(WM,wW),e(wW,N1r),e(WM,j1r),e(Z,D1r),e(Z,HM),e(HM,W2e),e(W2e,G1r),e(HM,O1r),e(HM,AW),e(AW,V1r),e(HM,X1r),e(Z,z1r),e(Z,UM),e(UM,H2e),e(H2e,Q1r),e(UM,W1r),e(UM,yW),e(yW,H1r),e(UM,U1r),e(Z,J1r),e(Z,JM),e(JM,U2e),e(U2e,Y1r),e(JM,K1r),e(JM,LW),e(LW,Z1r),e(JM,ebr),e(Z,obr),e(Z,YM),e(YM,J2e),e(J2e,rbr),e(YM,tbr),e(YM,xW),e(xW,abr),e(YM,nbr),e(Z,sbr),e(Z,KM),e(KM,Y2e),e(Y2e,lbr),e(KM,ibr),e(KM,$W),e($W,dbr),e(KM,cbr),e(Z,fbr),e(Z,ZM),e(ZM,K2e),e(K2e,mbr),e(ZM,gbr),e(ZM,kW),e(kW,hbr),e(ZM,pbr),e(Z,ubr),e(Z,e4),e(e4,Z2e),e(Z2e,_br),e(e4,bbr),e(e4,SW),e(SW,vbr),e(e4,Fbr),e(Z,Tbr),e(Z,o4),e(o4,e3e),e(e3e,Mbr),e(o4,Ebr),e(o4,RW),e(RW,Cbr),e(o4,wbr),e(Z,Abr),e(Z,r4),e(r4,o3e),e(o3e,ybr),e(r4,Lbr),e(r4,BW),e(BW,xbr),e(r4,$br),e(Z,kbr),e(Z,t4),e(t4,r3e),e(r3e,Sbr),e(t4,Rbr),e(t4,PW),e(PW,Bbr),e(t4,Pbr),e(Z,Ibr),e(Z,a4),e(a4,t3e),e(t3e,qbr),e(a4,Nbr),e(a4,IW),e(IW,jbr),e(a4,Dbr),e(Z,Gbr),e(Z,n4),e(n4,a3e),e(a3e,Obr),e(n4,Vbr),e(n4,qW),e(qW,Xbr),e(n4,zbr),e(Z,Qbr),e(Z,s4),e(s4,n3e),e(n3e,Wbr),e(s4,Hbr),e(s4,NW),e(NW,Ubr),e(s4,Jbr),e(Z,Ybr),e(Z,l4),e(l4,s3e),e(s3e,Kbr),e(l4,Zbr),e(l4,jW),e(jW,e2r),e(l4,o2r),e(Z,r2r),e(Z,i4),e(i4,l3e),e(l3e,t2r),e(i4,a2r),e(i4,DW),e(DW,n2r),e(i4,s2r),e(Z,l2r),e(Z,d4),e(d4,i3e),e(i3e,i2r),e(d4,d2r),e(d4,GW),e(GW,c2r),e(d4,f2r),e(Z,m2r),e(Z,c4),e(c4,d3e),e(d3e,g2r),e(c4,h2r),e(c4,OW),e(OW,p2r),e(c4,u2r),e(Z,_2r),e(Z,f4),e(f4,c3e),e(c3e,b2r),e(f4,v2r),e(f4,VW),e(VW,F2r),e(f4,T2r),e(Z,M2r),e(Z,m4),e(m4,f3e),e(f3e,E2r),e(m4,C2r),e(m4,XW),e(XW,w2r),e(m4,A2r),e(Z,y2r),e(Z,g4),e(g4,m3e),e(m3e,L2r),e(g4,x2r),e(g4,zW),e(zW,$2r),e(g4,k2r),e(Z,S2r),e(Z,h4),e(h4,g3e),e(g3e,R2r),e(h4,B2r),e(h4,QW),e(QW,P2r),e(h4,I2r),e(Z,q2r),e(Z,p4),e(p4,h3e),e(h3e,N2r),e(p4,j2r),e(p4,WW),e(WW,D2r),e(p4,G2r),e(Z,O2r),e(Z,u4),e(u4,p3e),e(p3e,V2r),e(u4,X2r),e(u4,HW),e(HW,z2r),e(u4,Q2r),e(Z,W2r),e(Z,_4),e(_4,u3e),e(u3e,H2r),e(_4,U2r),e(_4,UW),e(UW,J2r),e(_4,Y2r),e(Z,K2r),e(Z,b4),e(b4,_3e),e(_3e,Z2r),e(b4,e3r),e(b4,JW),e(JW,o3r),e(b4,r3r),e(kr,t3r),M(v4,kr,null),b(f,aqe,_),b(f,nc,_),e(nc,F4),e(F4,b3e),M(m8,b3e,null),e(nc,a3r),e(nc,v3e),e(v3e,n3r),b(f,nqe,_),b(f,ar,_),M(g8,ar,null),e(ar,s3r),e(ar,sc),e(sc,l3r),e(sc,YW),e(YW,i3r),e(sc,d3r),e(sc,KW),e(KW,c3r),e(sc,f3r),e(ar,m3r),e(ar,h8),e(h8,g3r),e(h8,F3e),e(F3e,h3r),e(h8,p3r),e(ar,u3r),e(ar,St),M(p8,St,null),e(St,_3r),e(St,T3e),e(T3e,b3r),e(St,v3r),e(St,lc),e(lc,F3r),e(lc,M3e),e(M3e,T3r),e(lc,M3r),e(lc,ZW),e(ZW,E3r),e(lc,C3r),e(St,w3r),M(T4,St,null),e(ar,A3r),e(ar,Sr),M(u8,Sr,null),e(Sr,y3r),e(Sr,E3e),e(E3e,L3r),e(Sr,x3r),e(Sr,nn),e(nn,$3r),e(nn,C3e),e(C3e,k3r),e(nn,S3r),e(nn,w3e),e(w3e,R3r),e(nn,B3r),e(nn,A3e),e(A3e,P3r),e(nn,I3r),e(Sr,q3r),e(Sr,pe),e(pe,M4),e(M4,y3e),e(y3e,N3r),e(M4,j3r),e(M4,eH),e(eH,D3r),e(M4,G3r),e(pe,O3r),e(pe,E4),e(E4,L3e),e(L3e,V3r),e(E4,X3r),e(E4,oH),e(oH,z3r),e(E4,Q3r),e(pe,W3r),e(pe,C4),e(C4,x3e),e(x3e,H3r),e(C4,U3r),e(C4,rH),e(rH,J3r),e(C4,Y3r),e(pe,K3r),e(pe,w4),e(w4,$3e),e($3e,Z3r),e(w4,evr),e(w4,tH),e(tH,ovr),e(w4,rvr),e(pe,tvr),e(pe,A4),e(A4,k3e),e(k3e,avr),e(A4,nvr),e(A4,aH),e(aH,svr),e(A4,lvr),e(pe,ivr),e(pe,y4),e(y4,S3e),e(S3e,dvr),e(y4,cvr),e(y4,nH),e(nH,fvr),e(y4,mvr),e(pe,gvr),e(pe,L4),e(L4,R3e),e(R3e,hvr),e(L4,pvr),e(L4,sH),e(sH,uvr),e(L4,_vr),e(pe,bvr),e(pe,x4),e(x4,B3e),e(B3e,vvr),e(x4,Fvr),e(x4,lH),e(lH,Tvr),e(x4,Mvr),e(pe,Evr),e(pe,$4),e($4,P3e),e(P3e,Cvr),e($4,wvr),e($4,iH),e(iH,Avr),e($4,yvr),e(pe,Lvr),e(pe,k4),e(k4,I3e),e(I3e,xvr),e(k4,$vr),e(k4,dH),e(dH,kvr),e(k4,Svr),e(pe,Rvr),e(pe,S4),e(S4,q3e),e(q3e,Bvr),e(S4,Pvr),e(S4,cH),e(cH,Ivr),e(S4,qvr),e(pe,Nvr),e(pe,R4),e(R4,N3e),e(N3e,jvr),e(R4,Dvr),e(R4,fH),e(fH,Gvr),e(R4,Ovr),e(pe,Vvr),e(pe,B4),e(B4,j3e),e(j3e,Xvr),e(B4,zvr),e(B4,mH),e(mH,Qvr),e(B4,Wvr),e(pe,Hvr),e(pe,P4),e(P4,D3e),e(D3e,Uvr),e(P4,Jvr),e(P4,gH),e(gH,Yvr),e(P4,Kvr),e(pe,Zvr),e(pe,I4),e(I4,G3e),e(G3e,eFr),e(I4,oFr),e(I4,hH),e(hH,rFr),e(I4,tFr),e(pe,aFr),e(pe,q4),e(q4,O3e),e(O3e,nFr),e(q4,sFr),e(q4,pH),e(pH,lFr),e(q4,iFr),e(pe,dFr),e(pe,N4),e(N4,V3e),e(V3e,cFr),e(N4,fFr),e(N4,uH),e(uH,mFr),e(N4,gFr),e(Sr,hFr),M(j4,Sr,null),b(f,sqe,_),b(f,ic,_),e(ic,D4),e(D4,X3e),M(_8,X3e,null),e(ic,pFr),e(ic,z3e),e(z3e,uFr),b(f,lqe,_),b(f,nr,_),M(b8,nr,null),e(nr,_Fr),e(nr,dc),e(dc,bFr),e(dc,_H),e(_H,vFr),e(dc,FFr),e(dc,bH),e(bH,TFr),e(dc,MFr),e(nr,EFr),e(nr,v8),e(v8,CFr),e(v8,Q3e),e(Q3e,wFr),e(v8,AFr),e(nr,yFr),e(nr,Rt),M(F8,Rt,null),e(Rt,LFr),e(Rt,W3e),e(W3e,xFr),e(Rt,$Fr),e(Rt,cc),e(cc,kFr),e(cc,H3e),e(H3e,SFr),e(cc,RFr),e(cc,vH),e(vH,BFr),e(cc,PFr),e(Rt,IFr),M(G4,Rt,null),e(nr,qFr),e(nr,Rr),M(T8,Rr,null),e(Rr,NFr),e(Rr,U3e),e(U3e,jFr),e(Rr,DFr),e(Rr,sn),e(sn,GFr),e(sn,J3e),e(J3e,OFr),e(sn,VFr),e(sn,Y3e),e(Y3e,XFr),e(sn,zFr),e(sn,K3e),e(K3e,QFr),e(sn,WFr),e(Rr,HFr),e(Rr,M8),e(M8,O4),e(O4,Z3e),e(Z3e,UFr),e(O4,JFr),e(O4,FH),e(FH,YFr),e(O4,KFr),e(M8,ZFr),e(M8,V4),e(V4,eve),e(eve,eTr),e(V4,oTr),e(V4,TH),e(TH,rTr),e(V4,tTr),e(Rr,aTr),M(X4,Rr,null),b(f,iqe,_),b(f,fc,_),e(fc,z4),e(z4,ove),M(E8,ove,null),e(fc,nTr),e(fc,rve),e(rve,sTr),b(f,dqe,_),b(f,sr,_),M(C8,sr,null),e(sr,lTr),e(sr,mc),e(mc,iTr),e(mc,MH),e(MH,dTr),e(mc,cTr),e(mc,EH),e(EH,fTr),e(mc,mTr),e(sr,gTr),e(sr,w8),e(w8,hTr),e(w8,tve),e(tve,pTr),e(w8,uTr),e(sr,_Tr),e(sr,Bt),M(A8,Bt,null),e(Bt,bTr),e(Bt,ave),e(ave,vTr),e(Bt,FTr),e(Bt,gc),e(gc,TTr),e(gc,nve),e(nve,MTr),e(gc,ETr),e(gc,CH),e(CH,CTr),e(gc,wTr),e(Bt,ATr),M(Q4,Bt,null),e(sr,yTr),e(sr,Br),M(y8,Br,null),e(Br,LTr),e(Br,sve),e(sve,xTr),e(Br,$Tr),e(Br,ln),e(ln,kTr),e(ln,lve),e(lve,STr),e(ln,RTr),e(ln,ive),e(ive,BTr),e(ln,PTr),e(ln,dve),e(dve,ITr),e(ln,qTr),e(Br,NTr),e(Br,cve),e(cve,W4),e(W4,fve),e(fve,jTr),e(W4,DTr),e(W4,wH),e(wH,GTr),e(W4,OTr),e(Br,VTr),M(H4,Br,null),b(f,cqe,_),b(f,hc,_),e(hc,U4),e(U4,mve),M(L8,mve,null),e(hc,XTr),e(hc,gve),e(gve,zTr),b(f,fqe,_),b(f,lr,_),M(x8,lr,null),e(lr,QTr),e(lr,pc),e(pc,WTr),e(pc,AH),e(AH,HTr),e(pc,UTr),e(pc,yH),e(yH,JTr),e(pc,YTr),e(lr,KTr),e(lr,$8),e($8,ZTr),e($8,hve),e(hve,e7r),e($8,o7r),e(lr,r7r),e(lr,Pt),M(k8,Pt,null),e(Pt,t7r),e(Pt,pve),e(pve,a7r),e(Pt,n7r),e(Pt,uc),e(uc,s7r),e(uc,uve),e(uve,l7r),e(uc,i7r),e(uc,LH),e(LH,d7r),e(uc,c7r),e(Pt,f7r),M(J4,Pt,null),e(lr,m7r),e(lr,Pr),M(S8,Pr,null),e(Pr,g7r),e(Pr,_ve),e(_ve,h7r),e(Pr,p7r),e(Pr,dn),e(dn,u7r),e(dn,bve),e(bve,_7r),e(dn,b7r),e(dn,vve),e(vve,v7r),e(dn,F7r),e(dn,Fve),e(Fve,T7r),e(dn,M7r),e(Pr,E7r),e(Pr,de),e(de,Y4),e(Y4,Tve),e(Tve,C7r),e(Y4,w7r),e(Y4,xH),e(xH,A7r),e(Y4,y7r),e(de,L7r),e(de,K4),e(K4,Mve),e(Mve,x7r),e(K4,$7r),e(K4,$H),e($H,k7r),e(K4,S7r),e(de,R7r),e(de,Z4),e(Z4,Eve),e(Eve,B7r),e(Z4,P7r),e(Z4,kH),e(kH,I7r),e(Z4,q7r),e(de,N7r),e(de,eE),e(eE,Cve),e(Cve,j7r),e(eE,D7r),e(eE,SH),e(SH,G7r),e(eE,O7r),e(de,V7r),e(de,oE),e(oE,wve),e(wve,X7r),e(oE,z7r),e(oE,RH),e(RH,Q7r),e(oE,W7r),e(de,H7r),e(de,rE),e(rE,Ave),e(Ave,U7r),e(rE,J7r),e(rE,BH),e(BH,Y7r),e(rE,K7r),e(de,Z7r),e(de,tE),e(tE,yve),e(yve,eMr),e(tE,oMr),e(tE,PH),e(PH,rMr),e(tE,tMr),e(de,aMr),e(de,aE),e(aE,Lve),e(Lve,nMr),e(aE,sMr),e(aE,IH),e(IH,lMr),e(aE,iMr),e(de,dMr),e(de,nE),e(nE,xve),e(xve,cMr),e(nE,fMr),e(nE,qH),e(qH,mMr),e(nE,gMr),e(de,hMr),e(de,sE),e(sE,$ve),e($ve,pMr),e(sE,uMr),e(sE,NH),e(NH,_Mr),e(sE,bMr),e(de,vMr),e(de,lE),e(lE,kve),e(kve,FMr),e(lE,TMr),e(lE,jH),e(jH,MMr),e(lE,EMr),e(de,CMr),e(de,iE),e(iE,Sve),e(Sve,wMr),e(iE,AMr),e(iE,DH),e(DH,yMr),e(iE,LMr),e(de,xMr),e(de,dE),e(dE,Rve),e(Rve,$Mr),e(dE,kMr),e(dE,GH),e(GH,SMr),e(dE,RMr),e(de,BMr),e(de,cE),e(cE,Bve),e(Bve,PMr),e(cE,IMr),e(cE,OH),e(OH,qMr),e(cE,NMr),e(de,jMr),e(de,fE),e(fE,Pve),e(Pve,DMr),e(fE,GMr),e(fE,VH),e(VH,OMr),e(fE,VMr),e(de,XMr),e(de,mE),e(mE,Ive),e(Ive,zMr),e(mE,QMr),e(mE,XH),e(XH,WMr),e(mE,HMr),e(de,UMr),e(de,gE),e(gE,qve),e(qve,JMr),e(gE,YMr),e(gE,zH),e(zH,KMr),e(gE,ZMr),e(de,e4r),e(de,hE),e(hE,Nve),e(Nve,o4r),e(hE,r4r),e(hE,QH),e(QH,t4r),e(hE,a4r),e(de,n4r),e(de,pE),e(pE,jve),e(jve,s4r),e(pE,l4r),e(pE,WH),e(WH,i4r),e(pE,d4r),e(de,c4r),e(de,uE),e(uE,Dve),e(Dve,f4r),e(uE,m4r),e(uE,HH),e(HH,g4r),e(uE,h4r),e(Pr,p4r),M(_E,Pr,null),b(f,mqe,_),b(f,_c,_),e(_c,bE),e(bE,Gve),M(R8,Gve,null),e(_c,u4r),e(_c,Ove),e(Ove,_4r),b(f,gqe,_),b(f,ir,_),M(B8,ir,null),e(ir,b4r),e(ir,bc),e(bc,v4r),e(bc,UH),e(UH,F4r),e(bc,T4r),e(bc,JH),e(JH,M4r),e(bc,E4r),e(ir,C4r),e(ir,P8),e(P8,w4r),e(P8,Vve),e(Vve,A4r),e(P8,y4r),e(ir,L4r),e(ir,It),M(I8,It,null),e(It,x4r),e(It,Xve),e(Xve,$4r),e(It,k4r),e(It,vc),e(vc,S4r),e(vc,zve),e(zve,R4r),e(vc,B4r),e(vc,YH),e(YH,P4r),e(vc,I4r),e(It,q4r),M(vE,It,null),e(ir,N4r),e(ir,Ir),M(q8,Ir,null),e(Ir,j4r),e(Ir,Qve),e(Qve,D4r),e(Ir,G4r),e(Ir,cn),e(cn,O4r),e(cn,Wve),e(Wve,V4r),e(cn,X4r),e(cn,Hve),e(Hve,z4r),e(cn,Q4r),e(cn,Uve),e(Uve,W4r),e(cn,H4r),e(Ir,U4r),e(Ir,ce),e(ce,FE),e(FE,Jve),e(Jve,J4r),e(FE,Y4r),e(FE,KH),e(KH,K4r),e(FE,Z4r),e(ce,eEr),e(ce,TE),e(TE,Yve),e(Yve,oEr),e(TE,rEr),e(TE,ZH),e(ZH,tEr),e(TE,aEr),e(ce,nEr),e(ce,ME),e(ME,Kve),e(Kve,sEr),e(ME,lEr),e(ME,eU),e(eU,iEr),e(ME,dEr),e(ce,cEr),e(ce,EE),e(EE,Zve),e(Zve,fEr),e(EE,mEr),e(EE,oU),e(oU,gEr),e(EE,hEr),e(ce,pEr),e(ce,CE),e(CE,eFe),e(eFe,uEr),e(CE,_Er),e(CE,rU),e(rU,bEr),e(CE,vEr),e(ce,FEr),e(ce,wE),e(wE,oFe),e(oFe,TEr),e(wE,MEr),e(wE,tU),e(tU,EEr),e(wE,CEr),e(ce,wEr),e(ce,AE),e(AE,rFe),e(rFe,AEr),e(AE,yEr),e(AE,aU),e(aU,LEr),e(AE,xEr),e(ce,$Er),e(ce,yE),e(yE,tFe),e(tFe,kEr),e(yE,SEr),e(yE,nU),e(nU,REr),e(yE,BEr),e(ce,PEr),e(ce,LE),e(LE,aFe),e(aFe,IEr),e(LE,qEr),e(LE,sU),e(sU,NEr),e(LE,jEr),e(ce,DEr),e(ce,xE),e(xE,nFe),e(nFe,GEr),e(xE,OEr),e(xE,lU),e(lU,VEr),e(xE,XEr),e(ce,zEr),e(ce,$E),e($E,sFe),e(sFe,QEr),e($E,WEr),e($E,iU),e(iU,HEr),e($E,UEr),e(ce,JEr),e(ce,kE),e(kE,lFe),e(lFe,YEr),e(kE,KEr),e(kE,dU),e(dU,ZEr),e(kE,e5r),e(ce,o5r),e(ce,SE),e(SE,iFe),e(iFe,r5r),e(SE,t5r),e(SE,cU),e(cU,a5r),e(SE,n5r),e(ce,s5r),e(ce,RE),e(RE,dFe),e(dFe,l5r),e(RE,i5r),e(RE,fU),e(fU,d5r),e(RE,c5r),e(ce,f5r),e(ce,BE),e(BE,cFe),e(cFe,m5r),e(BE,g5r),e(BE,mU),e(mU,h5r),e(BE,p5r),e(ce,u5r),e(ce,PE),e(PE,fFe),e(fFe,_5r),e(PE,b5r),e(PE,gU),e(gU,v5r),e(PE,F5r),e(ce,T5r),e(ce,IE),e(IE,mFe),e(mFe,M5r),e(IE,E5r),e(IE,hU),e(hU,C5r),e(IE,w5r),e(ce,A5r),e(ce,qE),e(qE,gFe),e(gFe,y5r),e(qE,L5r),e(qE,pU),e(pU,x5r),e(qE,$5r),e(ce,k5r),e(ce,NE),e(NE,hFe),e(hFe,S5r),e(NE,R5r),e(NE,uU),e(uU,B5r),e(NE,P5r),e(ce,I5r),e(ce,jE),e(jE,pFe),e(pFe,q5r),e(jE,N5r),e(jE,_U),e(_U,j5r),e(jE,D5r),e(Ir,G5r),M(DE,Ir,null),b(f,hqe,_),b(f,Fc,_),e(Fc,GE),e(GE,uFe),M(N8,uFe,null),e(Fc,O5r),e(Fc,_Fe),e(_Fe,V5r),b(f,pqe,_),b(f,dr,_),M(j8,dr,null),e(dr,X5r),e(dr,Tc),e(Tc,z5r),e(Tc,bU),e(bU,Q5r),e(Tc,W5r),e(Tc,vU),e(vU,H5r),e(Tc,U5r),e(dr,J5r),e(dr,D8),e(D8,Y5r),e(D8,bFe),e(bFe,K5r),e(D8,Z5r),e(dr,eCr),e(dr,qt),M(G8,qt,null),e(qt,oCr),e(qt,vFe),e(vFe,rCr),e(qt,tCr),e(qt,Mc),e(Mc,aCr),e(Mc,FFe),e(FFe,nCr),e(Mc,sCr),e(Mc,FU),e(FU,lCr),e(Mc,iCr),e(qt,dCr),M(OE,qt,null),e(dr,cCr),e(dr,qr),M(O8,qr,null),e(qr,fCr),e(qr,TFe),e(TFe,mCr),e(qr,gCr),e(qr,fn),e(fn,hCr),e(fn,MFe),e(MFe,pCr),e(fn,uCr),e(fn,EFe),e(EFe,_Cr),e(fn,bCr),e(fn,CFe),e(CFe,vCr),e(fn,FCr),e(qr,TCr),e(qr,wFe),e(wFe,VE),e(VE,AFe),e(AFe,MCr),e(VE,ECr),e(VE,TU),e(TU,CCr),e(VE,wCr),e(qr,ACr),M(XE,qr,null),b(f,uqe,_),b(f,Ec,_),e(Ec,zE),e(zE,yFe),M(V8,yFe,null),e(Ec,yCr),e(Ec,LFe),e(LFe,LCr),b(f,_qe,_),b(f,cr,_),M(X8,cr,null),e(cr,xCr),e(cr,Cc),e(Cc,$Cr),e(Cc,MU),e(MU,kCr),e(Cc,SCr),e(Cc,EU),e(EU,RCr),e(Cc,BCr),e(cr,PCr),e(cr,z8),e(z8,ICr),e(z8,xFe),e(xFe,qCr),e(z8,NCr),e(cr,jCr),e(cr,Nt),M(Q8,Nt,null),e(Nt,DCr),e(Nt,$Fe),e($Fe,GCr),e(Nt,OCr),e(Nt,wc),e(wc,VCr),e(wc,kFe),e(kFe,XCr),e(wc,zCr),e(wc,CU),e(CU,QCr),e(wc,WCr),e(Nt,HCr),M(QE,Nt,null),e(cr,UCr),e(cr,Nr),M(W8,Nr,null),e(Nr,JCr),e(Nr,SFe),e(SFe,YCr),e(Nr,KCr),e(Nr,mn),e(mn,ZCr),e(mn,RFe),e(RFe,ewr),e(mn,owr),e(mn,BFe),e(BFe,rwr),e(mn,twr),e(mn,PFe),e(PFe,awr),e(mn,nwr),e(Nr,swr),e(Nr,IFe),e(IFe,WE),e(WE,qFe),e(qFe,lwr),e(WE,iwr),e(WE,wU),e(wU,dwr),e(WE,cwr),e(Nr,fwr),M(HE,Nr,null),b(f,bqe,_),b(f,Ac,_),e(Ac,UE),e(UE,NFe),M(H8,NFe,null),e(Ac,mwr),e(Ac,jFe),e(jFe,gwr),b(f,vqe,_),b(f,fr,_),M(U8,fr,null),e(fr,hwr),e(fr,yc),e(yc,pwr),e(yc,AU),e(AU,uwr),e(yc,_wr),e(yc,yU),e(yU,bwr),e(yc,vwr),e(fr,Fwr),e(fr,J8),e(J8,Twr),e(J8,DFe),e(DFe,Mwr),e(J8,Ewr),e(fr,Cwr),e(fr,jt),M(Y8,jt,null),e(jt,wwr),e(jt,GFe),e(GFe,Awr),e(jt,ywr),e(jt,Lc),e(Lc,Lwr),e(Lc,OFe),e(OFe,xwr),e(Lc,$wr),e(Lc,LU),e(LU,kwr),e(Lc,Swr),e(jt,Rwr),M(JE,jt,null),e(fr,Bwr),e(fr,jr),M(K8,jr,null),e(jr,Pwr),e(jr,VFe),e(VFe,Iwr),e(jr,qwr),e(jr,gn),e(gn,Nwr),e(gn,XFe),e(XFe,jwr),e(gn,Dwr),e(gn,zFe),e(zFe,Gwr),e(gn,Owr),e(gn,QFe),e(QFe,Vwr),e(gn,Xwr),e(jr,zwr),e(jr,re),e(re,YE),e(YE,WFe),e(WFe,Qwr),e(YE,Wwr),e(YE,xU),e(xU,Hwr),e(YE,Uwr),e(re,Jwr),e(re,KE),e(KE,HFe),e(HFe,Ywr),e(KE,Kwr),e(KE,$U),e($U,Zwr),e(KE,eAr),e(re,oAr),e(re,ZE),e(ZE,UFe),e(UFe,rAr),e(ZE,tAr),e(ZE,kU),e(kU,aAr),e(ZE,nAr),e(re,sAr),e(re,e5),e(e5,JFe),e(JFe,lAr),e(e5,iAr),e(e5,SU),e(SU,dAr),e(e5,cAr),e(re,fAr),e(re,o5),e(o5,YFe),e(YFe,mAr),e(o5,gAr),e(o5,RU),e(RU,hAr),e(o5,pAr),e(re,uAr),e(re,r5),e(r5,KFe),e(KFe,_Ar),e(r5,bAr),e(r5,BU),e(BU,vAr),e(r5,FAr),e(re,TAr),e(re,t5),e(t5,ZFe),e(ZFe,MAr),e(t5,EAr),e(t5,PU),e(PU,CAr),e(t5,wAr),e(re,AAr),e(re,a5),e(a5,eTe),e(eTe,yAr),e(a5,LAr),e(a5,IU),e(IU,xAr),e(a5,$Ar),e(re,kAr),e(re,n5),e(n5,oTe),e(oTe,SAr),e(n5,RAr),e(n5,qU),e(qU,BAr),e(n5,PAr),e(re,IAr),e(re,s5),e(s5,rTe),e(rTe,qAr),e(s5,NAr),e(s5,NU),e(NU,jAr),e(s5,DAr),e(re,GAr),e(re,l5),e(l5,tTe),e(tTe,OAr),e(l5,VAr),e(l5,jU),e(jU,XAr),e(l5,zAr),e(re,QAr),e(re,i5),e(i5,aTe),e(aTe,WAr),e(i5,HAr),e(i5,DU),e(DU,UAr),e(i5,JAr),e(re,YAr),e(re,d5),e(d5,nTe),e(nTe,KAr),e(d5,ZAr),e(d5,GU),e(GU,e6r),e(d5,o6r),e(re,r6r),e(re,c5),e(c5,sTe),e(sTe,t6r),e(c5,a6r),e(c5,OU),e(OU,n6r),e(c5,s6r),e(re,l6r),e(re,f5),e(f5,lTe),e(lTe,i6r),e(f5,d6r),e(f5,VU),e(VU,c6r),e(f5,f6r),e(re,m6r),e(re,m5),e(m5,iTe),e(iTe,g6r),e(m5,h6r),e(m5,XU),e(XU,p6r),e(m5,u6r),e(re,_6r),e(re,g5),e(g5,dTe),e(dTe,b6r),e(g5,v6r),e(g5,zU),e(zU,F6r),e(g5,T6r),e(re,M6r),e(re,h5),e(h5,cTe),e(cTe,E6r),e(h5,C6r),e(h5,QU),e(QU,w6r),e(h5,A6r),e(re,y6r),e(re,p5),e(p5,fTe),e(fTe,L6r),e(p5,x6r),e(p5,WU),e(WU,$6r),e(p5,k6r),e(re,S6r),e(re,u5),e(u5,mTe),e(mTe,R6r),e(u5,B6r),e(u5,HU),e(HU,P6r),e(u5,I6r),e(re,q6r),e(re,_5),e(_5,gTe),e(gTe,N6r),e(_5,j6r),e(_5,UU),e(UU,D6r),e(_5,G6r),e(re,O6r),e(re,b5),e(b5,hTe),e(hTe,V6r),e(b5,X6r),e(b5,JU),e(JU,z6r),e(b5,Q6r),e(re,W6r),e(re,v5),e(v5,pTe),e(pTe,H6r),e(v5,U6r),e(v5,YU),e(YU,J6r),e(v5,Y6r),e(re,K6r),e(re,F5),e(F5,uTe),e(uTe,Z6r),e(F5,e0r),e(F5,KU),e(KU,o0r),e(F5,r0r),e(re,t0r),e(re,T5),e(T5,_Te),e(_Te,a0r),e(T5,n0r),e(T5,ZU),e(ZU,s0r),e(T5,l0r),e(jr,i0r),M(M5,jr,null),b(f,Fqe,_),b(f,xc,_),e(xc,E5),e(E5,bTe),M(Z8,bTe,null),e(xc,d0r),e(xc,vTe),e(vTe,c0r),b(f,Tqe,_),b(f,mr,_),M(ex,mr,null),e(mr,f0r),e(mr,$c),e($c,m0r),e($c,eJ),e(eJ,g0r),e($c,h0r),e($c,oJ),e(oJ,p0r),e($c,u0r),e(mr,_0r),e(mr,ox),e(ox,b0r),e(ox,FTe),e(FTe,v0r),e(ox,F0r),e(mr,T0r),e(mr,Dt),M(rx,Dt,null),e(Dt,M0r),e(Dt,TTe),e(TTe,E0r),e(Dt,C0r),e(Dt,kc),e(kc,w0r),e(kc,MTe),e(MTe,A0r),e(kc,y0r),e(kc,rJ),e(rJ,L0r),e(kc,x0r),e(Dt,$0r),M(C5,Dt,null),e(mr,k0r),e(mr,Dr),M(tx,Dr,null),e(Dr,S0r),e(Dr,ETe),e(ETe,R0r),e(Dr,B0r),e(Dr,hn),e(hn,P0r),e(hn,CTe),e(CTe,I0r),e(hn,q0r),e(hn,wTe),e(wTe,N0r),e(hn,j0r),e(hn,ATe),e(ATe,D0r),e(hn,G0r),e(Dr,O0r),e(Dr,ke),e(ke,w5),e(w5,yTe),e(yTe,V0r),e(w5,X0r),e(w5,tJ),e(tJ,z0r),e(w5,Q0r),e(ke,W0r),e(ke,A5),e(A5,LTe),e(LTe,H0r),e(A5,U0r),e(A5,aJ),e(aJ,J0r),e(A5,Y0r),e(ke,K0r),e(ke,y5),e(y5,xTe),e(xTe,Z0r),e(y5,eyr),e(y5,nJ),e(nJ,oyr),e(y5,ryr),e(ke,tyr),e(ke,L5),e(L5,$Te),e($Te,ayr),e(L5,nyr),e(L5,sJ),e(sJ,syr),e(L5,lyr),e(ke,iyr),e(ke,x5),e(x5,kTe),e(kTe,dyr),e(x5,cyr),e(x5,lJ),e(lJ,fyr),e(x5,myr),e(ke,gyr),e(ke,$5),e($5,STe),e(STe,hyr),e($5,pyr),e($5,iJ),e(iJ,uyr),e($5,_yr),e(ke,byr),e(ke,k5),e(k5,RTe),e(RTe,vyr),e(k5,Fyr),e(k5,dJ),e(dJ,Tyr),e(k5,Myr),e(ke,Eyr),e(ke,S5),e(S5,BTe),e(BTe,Cyr),e(S5,wyr),e(S5,cJ),e(cJ,Ayr),e(S5,yyr),e(ke,Lyr),e(ke,R5),e(R5,PTe),e(PTe,xyr),e(R5,$yr),e(R5,fJ),e(fJ,kyr),e(R5,Syr),e(Dr,Ryr),M(B5,Dr,null),b(f,Mqe,_),b(f,Sc,_),e(Sc,P5),e(P5,ITe),M(ax,ITe,null),e(Sc,Byr),e(Sc,qTe),e(qTe,Pyr),b(f,Eqe,_),b(f,gr,_),M(nx,gr,null),e(gr,Iyr),e(gr,Rc),e(Rc,qyr),e(Rc,mJ),e(mJ,Nyr),e(Rc,jyr),e(Rc,gJ),e(gJ,Dyr),e(Rc,Gyr),e(gr,Oyr),e(gr,sx),e(sx,Vyr),e(sx,NTe),e(NTe,Xyr),e(sx,zyr),e(gr,Qyr),e(gr,Gt),M(lx,Gt,null),e(Gt,Wyr),e(Gt,jTe),e(jTe,Hyr),e(Gt,Uyr),e(Gt,Bc),e(Bc,Jyr),e(Bc,DTe),e(DTe,Yyr),e(Bc,Kyr),e(Bc,hJ),e(hJ,Zyr),e(Bc,eLr),e(Gt,oLr),M(I5,Gt,null),e(gr,rLr),e(gr,Gr),M(ix,Gr,null),e(Gr,tLr),e(Gr,GTe),e(GTe,aLr),e(Gr,nLr),e(Gr,pn),e(pn,sLr),e(pn,OTe),e(OTe,lLr),e(pn,iLr),e(pn,VTe),e(VTe,dLr),e(pn,cLr),e(pn,XTe),e(XTe,fLr),e(pn,mLr),e(Gr,gLr),e(Gr,Me),e(Me,q5),e(q5,zTe),e(zTe,hLr),e(q5,pLr),e(q5,pJ),e(pJ,uLr),e(q5,_Lr),e(Me,bLr),e(Me,N5),e(N5,QTe),e(QTe,vLr),e(N5,FLr),e(N5,uJ),e(uJ,TLr),e(N5,MLr),e(Me,ELr),e(Me,j5),e(j5,WTe),e(WTe,CLr),e(j5,wLr),e(j5,_J),e(_J,ALr),e(j5,yLr),e(Me,LLr),e(Me,D5),e(D5,HTe),e(HTe,xLr),e(D5,$Lr),e(D5,bJ),e(bJ,kLr),e(D5,SLr),e(Me,RLr),e(Me,G5),e(G5,UTe),e(UTe,BLr),e(G5,PLr),e(G5,vJ),e(vJ,ILr),e(G5,qLr),e(Me,NLr),e(Me,O5),e(O5,JTe),e(JTe,jLr),e(O5,DLr),e(O5,FJ),e(FJ,GLr),e(O5,OLr),e(Me,VLr),e(Me,V5),e(V5,YTe),e(YTe,XLr),e(V5,zLr),e(V5,TJ),e(TJ,QLr),e(V5,WLr),e(Me,HLr),e(Me,X5),e(X5,KTe),e(KTe,ULr),e(X5,JLr),e(X5,MJ),e(MJ,YLr),e(X5,KLr),e(Me,ZLr),e(Me,z5),e(z5,ZTe),e(ZTe,e8r),e(z5,o8r),e(z5,EJ),e(EJ,r8r),e(z5,t8r),e(Me,a8r),e(Me,Q5),e(Q5,e7e),e(e7e,n8r),e(Q5,s8r),e(Q5,CJ),e(CJ,l8r),e(Q5,i8r),e(Me,d8r),e(Me,W5),e(W5,o7e),e(o7e,c8r),e(W5,f8r),e(W5,wJ),e(wJ,m8r),e(W5,g8r),e(Me,h8r),e(Me,H5),e(H5,r7e),e(r7e,p8r),e(H5,u8r),e(H5,AJ),e(AJ,_8r),e(H5,b8r),e(Gr,v8r),M(U5,Gr,null),b(f,Cqe,_),b(f,Pc,_),e(Pc,J5),e(J5,t7e),M(dx,t7e,null),e(Pc,F8r),e(Pc,a7e),e(a7e,T8r),b(f,wqe,_),b(f,hr,_),M(cx,hr,null),e(hr,M8r),e(hr,Ic),e(Ic,E8r),e(Ic,yJ),e(yJ,C8r),e(Ic,w8r),e(Ic,LJ),e(LJ,A8r),e(Ic,y8r),e(hr,L8r),e(hr,fx),e(fx,x8r),e(fx,n7e),e(n7e,$8r),e(fx,k8r),e(hr,S8r),e(hr,Ot),M(mx,Ot,null),e(Ot,R8r),e(Ot,s7e),e(s7e,B8r),e(Ot,P8r),e(Ot,qc),e(qc,I8r),e(qc,l7e),e(l7e,q8r),e(qc,N8r),e(qc,xJ),e(xJ,j8r),e(qc,D8r),e(Ot,G8r),M(Y5,Ot,null),e(hr,O8r),e(hr,Or),M(gx,Or,null),e(Or,V8r),e(Or,i7e),e(i7e,X8r),e(Or,z8r),e(Or,un),e(un,Q8r),e(un,d7e),e(d7e,W8r),e(un,H8r),e(un,c7e),e(c7e,U8r),e(un,J8r),e(un,f7e),e(f7e,Y8r),e(un,K8r),e(Or,Z8r),e(Or,Le),e(Le,K5),e(K5,m7e),e(m7e,exr),e(K5,oxr),e(K5,$J),e($J,rxr),e(K5,txr),e(Le,axr),e(Le,Z5),e(Z5,g7e),e(g7e,nxr),e(Z5,sxr),e(Z5,kJ),e(kJ,lxr),e(Z5,ixr),e(Le,dxr),e(Le,eC),e(eC,h7e),e(h7e,cxr),e(eC,fxr),e(eC,SJ),e(SJ,mxr),e(eC,gxr),e(Le,hxr),e(Le,oC),e(oC,p7e),e(p7e,pxr),e(oC,uxr),e(oC,RJ),e(RJ,_xr),e(oC,bxr),e(Le,vxr),e(Le,rC),e(rC,u7e),e(u7e,Fxr),e(rC,Txr),e(rC,BJ),e(BJ,Mxr),e(rC,Exr),e(Le,Cxr),e(Le,tC),e(tC,_7e),e(_7e,wxr),e(tC,Axr),e(tC,PJ),e(PJ,yxr),e(tC,Lxr),e(Le,xxr),e(Le,aC),e(aC,b7e),e(b7e,$xr),e(aC,kxr),e(aC,IJ),e(IJ,Sxr),e(aC,Rxr),e(Le,Bxr),e(Le,nC),e(nC,v7e),e(v7e,Pxr),e(nC,Ixr),e(nC,qJ),e(qJ,qxr),e(nC,Nxr),e(Le,jxr),e(Le,sC),e(sC,F7e),e(F7e,Dxr),e(sC,Gxr),e(sC,NJ),e(NJ,Oxr),e(sC,Vxr),e(Le,Xxr),e(Le,lC),e(lC,T7e),e(T7e,zxr),e(lC,Qxr),e(lC,jJ),e(jJ,Wxr),e(lC,Hxr),e(Or,Uxr),M(iC,Or,null),b(f,Aqe,_),b(f,Nc,_),e(Nc,dC),e(dC,M7e),M(hx,M7e,null),e(Nc,Jxr),e(Nc,E7e),e(E7e,Yxr),b(f,yqe,_),b(f,pr,_),M(px,pr,null),e(pr,Kxr),e(pr,jc),e(jc,Zxr),e(jc,DJ),e(DJ,e9r),e(jc,o9r),e(jc,GJ),e(GJ,r9r),e(jc,t9r),e(pr,a9r),e(pr,ux),e(ux,n9r),e(ux,C7e),e(C7e,s9r),e(ux,l9r),e(pr,i9r),e(pr,Vt),M(_x,Vt,null),e(Vt,d9r),e(Vt,w7e),e(w7e,c9r),e(Vt,f9r),e(Vt,Dc),e(Dc,m9r),e(Dc,A7e),e(A7e,g9r),e(Dc,h9r),e(Dc,OJ),e(OJ,p9r),e(Dc,u9r),e(Vt,_9r),M(cC,Vt,null),e(pr,b9r),e(pr,Vr),M(bx,Vr,null),e(Vr,v9r),e(Vr,y7e),e(y7e,F9r),e(Vr,T9r),e(Vr,_n),e(_n,M9r),e(_n,L7e),e(L7e,E9r),e(_n,C9r),e(_n,x7e),e(x7e,w9r),e(_n,A9r),e(_n,$7e),e($7e,y9r),e(_n,L9r),e(Vr,x9r),e(Vr,Se),e(Se,fC),e(fC,k7e),e(k7e,$9r),e(fC,k9r),e(fC,VJ),e(VJ,S9r),e(fC,R9r),e(Se,B9r),e(Se,mC),e(mC,S7e),e(S7e,P9r),e(mC,I9r),e(mC,XJ),e(XJ,q9r),e(mC,N9r),e(Se,j9r),e(Se,gC),e(gC,R7e),e(R7e,D9r),e(gC,G9r),e(gC,zJ),e(zJ,O9r),e(gC,V9r),e(Se,X9r),e(Se,hC),e(hC,B7e),e(B7e,z9r),e(hC,Q9r),e(hC,QJ),e(QJ,W9r),e(hC,H9r),e(Se,U9r),e(Se,pC),e(pC,P7e),e(P7e,J9r),e(pC,Y9r),e(pC,WJ),e(WJ,K9r),e(pC,Z9r),e(Se,e$r),e(Se,uC),e(uC,I7e),e(I7e,o$r),e(uC,r$r),e(uC,HJ),e(HJ,t$r),e(uC,a$r),e(Se,n$r),e(Se,_C),e(_C,q7e),e(q7e,s$r),e(_C,l$r),e(_C,UJ),e(UJ,i$r),e(_C,d$r),e(Se,c$r),e(Se,bC),e(bC,N7e),e(N7e,f$r),e(bC,m$r),e(bC,JJ),e(JJ,g$r),e(bC,h$r),e(Se,p$r),e(Se,vC),e(vC,j7e),e(j7e,u$r),e(vC,_$r),e(vC,YJ),e(YJ,b$r),e(vC,v$r),e(Vr,F$r),M(FC,Vr,null),b(f,Lqe,_),b(f,Gc,_),e(Gc,TC),e(TC,D7e),M(vx,D7e,null),e(Gc,T$r),e(Gc,G7e),e(G7e,M$r),b(f,xqe,_),b(f,ur,_),M(Fx,ur,null),e(ur,E$r),e(ur,Oc),e(Oc,C$r),e(Oc,KJ),e(KJ,w$r),e(Oc,A$r),e(Oc,ZJ),e(ZJ,y$r),e(Oc,L$r),e(ur,x$r),e(ur,Tx),e(Tx,$$r),e(Tx,O7e),e(O7e,k$r),e(Tx,S$r),e(ur,R$r),e(ur,Xt),M(Mx,Xt,null),e(Xt,B$r),e(Xt,V7e),e(V7e,P$r),e(Xt,I$r),e(Xt,Vc),e(Vc,q$r),e(Vc,X7e),e(X7e,N$r),e(Vc,j$r),e(Vc,eY),e(eY,D$r),e(Vc,G$r),e(Xt,O$r),M(MC,Xt,null),e(ur,V$r),e(ur,Xr),M(Ex,Xr,null),e(Xr,X$r),e(Xr,z7e),e(z7e,z$r),e(Xr,Q$r),e(Xr,bn),e(bn,W$r),e(bn,Q7e),e(Q7e,H$r),e(bn,U$r),e(bn,W7e),e(W7e,J$r),e(bn,Y$r),e(bn,H7e),e(H7e,K$r),e(bn,Z$r),e(Xr,ekr),e(Xr,xe),e(xe,EC),e(EC,U7e),e(U7e,okr),e(EC,rkr),e(EC,oY),e(oY,tkr),e(EC,akr),e(xe,nkr),e(xe,CC),e(CC,J7e),e(J7e,skr),e(CC,lkr),e(CC,rY),e(rY,ikr),e(CC,dkr),e(xe,ckr),e(xe,wC),e(wC,Y7e),e(Y7e,fkr),e(wC,mkr),e(wC,tY),e(tY,gkr),e(wC,hkr),e(xe,pkr),e(xe,AC),e(AC,K7e),e(K7e,ukr),e(AC,_kr),e(AC,aY),e(aY,bkr),e(AC,vkr),e(xe,Fkr),e(xe,yC),e(yC,Z7e),e(Z7e,Tkr),e(yC,Mkr),e(yC,nY),e(nY,Ekr),e(yC,Ckr),e(xe,wkr),e(xe,LC),e(LC,eMe),e(eMe,Akr),e(LC,ykr),e(LC,sY),e(sY,Lkr),e(LC,xkr),e(xe,$kr),e(xe,xC),e(xC,oMe),e(oMe,kkr),e(xC,Skr),e(xC,lY),e(lY,Rkr),e(xC,Bkr),e(xe,Pkr),e(xe,$C),e($C,rMe),e(rMe,Ikr),e($C,qkr),e($C,iY),e(iY,Nkr),e($C,jkr),e(xe,Dkr),e(xe,kC),e(kC,tMe),e(tMe,Gkr),e(kC,Okr),e(kC,dY),e(dY,Vkr),e(kC,Xkr),e(xe,zkr),e(xe,SC),e(SC,aMe),e(aMe,Qkr),e(SC,Wkr),e(SC,cY),e(cY,Hkr),e(SC,Ukr),e(Xr,Jkr),M(RC,Xr,null),b(f,$qe,_),b(f,Xc,_),e(Xc,BC),e(BC,nMe),M(Cx,nMe,null),e(Xc,Ykr),e(Xc,sMe),e(sMe,Kkr),b(f,kqe,_),b(f,_r,_),M(wx,_r,null),e(_r,Zkr),e(_r,zc),e(zc,eSr),e(zc,fY),e(fY,oSr),e(zc,rSr),e(zc,mY),e(mY,tSr),e(zc,aSr),e(_r,nSr),e(_r,Ax),e(Ax,sSr),e(Ax,lMe),e(lMe,lSr),e(Ax,iSr),e(_r,dSr),e(_r,zt),M(yx,zt,null),e(zt,cSr),e(zt,iMe),e(iMe,fSr),e(zt,mSr),e(zt,Qc),e(Qc,gSr),e(Qc,dMe),e(dMe,hSr),e(Qc,pSr),e(Qc,gY),e(gY,uSr),e(Qc,_Sr),e(zt,bSr),M(PC,zt,null),e(_r,vSr),e(_r,zr),M(Lx,zr,null),e(zr,FSr),e(zr,cMe),e(cMe,TSr),e(zr,MSr),e(zr,vn),e(vn,ESr),e(vn,fMe),e(fMe,CSr),e(vn,wSr),e(vn,mMe),e(mMe,ASr),e(vn,ySr),e(vn,gMe),e(gMe,LSr),e(vn,xSr),e(zr,$Sr),e(zr,$e),e($e,IC),e(IC,hMe),e(hMe,kSr),e(IC,SSr),e(IC,hY),e(hY,RSr),e(IC,BSr),e($e,PSr),e($e,qC),e(qC,pMe),e(pMe,ISr),e(qC,qSr),e(qC,pY),e(pY,NSr),e(qC,jSr),e($e,DSr),e($e,NC),e(NC,uMe),e(uMe,GSr),e(NC,OSr),e(NC,uY),e(uY,VSr),e(NC,XSr),e($e,zSr),e($e,jC),e(jC,_Me),e(_Me,QSr),e(jC,WSr),e(jC,_Y),e(_Y,HSr),e(jC,USr),e($e,JSr),e($e,DC),e(DC,bMe),e(bMe,YSr),e(DC,KSr),e(DC,bY),e(bY,ZSr),e(DC,eRr),e($e,oRr),e($e,GC),e(GC,vMe),e(vMe,rRr),e(GC,tRr),e(GC,vY),e(vY,aRr),e(GC,nRr),e($e,sRr),e($e,OC),e(OC,FMe),e(FMe,lRr),e(OC,iRr),e(OC,FY),e(FY,dRr),e(OC,cRr),e($e,fRr),e($e,VC),e(VC,TMe),e(TMe,mRr),e(VC,gRr),e(VC,TY),e(TY,hRr),e(VC,pRr),e($e,uRr),e($e,XC),e(XC,MMe),e(MMe,_Rr),e(XC,bRr),e(XC,MY),e(MY,vRr),e(XC,FRr),e($e,TRr),e($e,zC),e(zC,EMe),e(EMe,MRr),e(zC,ERr),e(zC,EY),e(EY,CRr),e(zC,wRr),e(zr,ARr),M(QC,zr,null),b(f,Sqe,_),b(f,Wc,_),e(Wc,WC),e(WC,CMe),M(xx,CMe,null),e(Wc,yRr),e(Wc,wMe),e(wMe,LRr),b(f,Rqe,_),b(f,br,_),M($x,br,null),e(br,xRr),e(br,Hc),e(Hc,$Rr),e(Hc,CY),e(CY,kRr),e(Hc,SRr),e(Hc,wY),e(wY,RRr),e(Hc,BRr),e(br,PRr),e(br,kx),e(kx,IRr),e(kx,AMe),e(AMe,qRr),e(kx,NRr),e(br,jRr),e(br,Qt),M(Sx,Qt,null),e(Qt,DRr),e(Qt,yMe),e(yMe,GRr),e(Qt,ORr),e(Qt,Uc),e(Uc,VRr),e(Uc,LMe),e(LMe,XRr),e(Uc,zRr),e(Uc,AY),e(AY,QRr),e(Uc,WRr),e(Qt,HRr),M(HC,Qt,null),e(br,URr),e(br,Qr),M(Rx,Qr,null),e(Qr,JRr),e(Qr,xMe),e(xMe,YRr),e(Qr,KRr),e(Qr,Fn),e(Fn,ZRr),e(Fn,$Me),e($Me,eBr),e(Fn,oBr),e(Fn,kMe),e(kMe,rBr),e(Fn,tBr),e(Fn,SMe),e(SMe,aBr),e(Fn,nBr),e(Qr,sBr),e(Qr,De),e(De,UC),e(UC,RMe),e(RMe,lBr),e(UC,iBr),e(UC,yY),e(yY,dBr),e(UC,cBr),e(De,fBr),e(De,JC),e(JC,BMe),e(BMe,mBr),e(JC,gBr),e(JC,LY),e(LY,hBr),e(JC,pBr),e(De,uBr),e(De,YC),e(YC,PMe),e(PMe,_Br),e(YC,bBr),e(YC,xY),e(xY,vBr),e(YC,FBr),e(De,TBr),e(De,KC),e(KC,IMe),e(IMe,MBr),e(KC,EBr),e(KC,$Y),e($Y,CBr),e(KC,wBr),e(De,ABr),e(De,ZC),e(ZC,qMe),e(qMe,yBr),e(ZC,LBr),e(ZC,kY),e(kY,xBr),e(ZC,$Br),e(De,kBr),e(De,ew),e(ew,NMe),e(NMe,SBr),e(ew,RBr),e(ew,SY),e(SY,BBr),e(ew,PBr),e(De,IBr),e(De,ow),e(ow,jMe),e(jMe,qBr),e(ow,NBr),e(ow,RY),e(RY,jBr),e(ow,DBr),e(De,GBr),e(De,rw),e(rw,DMe),e(DMe,OBr),e(rw,VBr),e(rw,BY),e(BY,XBr),e(rw,zBr),e(Qr,QBr),M(tw,Qr,null),b(f,Bqe,_),b(f,Jc,_),e(Jc,aw),e(aw,GMe),M(Bx,GMe,null),e(Jc,WBr),e(Jc,OMe),e(OMe,HBr),b(f,Pqe,_),b(f,vr,_),M(Px,vr,null),e(vr,UBr),e(vr,Yc),e(Yc,JBr),e(Yc,PY),e(PY,YBr),e(Yc,KBr),e(Yc,IY),e(IY,ZBr),e(Yc,ePr),e(vr,oPr),e(vr,Ix),e(Ix,rPr),e(Ix,VMe),e(VMe,tPr),e(Ix,aPr),e(vr,nPr),e(vr,Wt),M(qx,Wt,null),e(Wt,sPr),e(Wt,XMe),e(XMe,lPr),e(Wt,iPr),e(Wt,Kc),e(Kc,dPr),e(Kc,zMe),e(zMe,cPr),e(Kc,fPr),e(Kc,qY),e(qY,mPr),e(Kc,gPr),e(Wt,hPr),M(nw,Wt,null),e(vr,pPr),e(vr,Wr),M(Nx,Wr,null),e(Wr,uPr),e(Wr,QMe),e(QMe,_Pr),e(Wr,bPr),e(Wr,Tn),e(Tn,vPr),e(Tn,WMe),e(WMe,FPr),e(Tn,TPr),e(Tn,HMe),e(HMe,MPr),e(Tn,EPr),e(Tn,UMe),e(UMe,CPr),e(Tn,wPr),e(Wr,APr),e(Wr,Ge),e(Ge,sw),e(sw,JMe),e(JMe,yPr),e(sw,LPr),e(sw,NY),e(NY,xPr),e(sw,$Pr),e(Ge,kPr),e(Ge,lw),e(lw,YMe),e(YMe,SPr),e(lw,RPr),e(lw,jY),e(jY,BPr),e(lw,PPr),e(Ge,IPr),e(Ge,iw),e(iw,KMe),e(KMe,qPr),e(iw,NPr),e(iw,DY),e(DY,jPr),e(iw,DPr),e(Ge,GPr),e(Ge,dw),e(dw,ZMe),e(ZMe,OPr),e(dw,VPr),e(dw,GY),e(GY,XPr),e(dw,zPr),e(Ge,QPr),e(Ge,cw),e(cw,e4e),e(e4e,WPr),e(cw,HPr),e(cw,OY),e(OY,UPr),e(cw,JPr),e(Ge,YPr),e(Ge,fw),e(fw,o4e),e(o4e,KPr),e(fw,ZPr),e(fw,VY),e(VY,eIr),e(fw,oIr),e(Ge,rIr),e(Ge,mw),e(mw,r4e),e(r4e,tIr),e(mw,aIr),e(mw,XY),e(XY,nIr),e(mw,sIr),e(Ge,lIr),e(Ge,gw),e(gw,t4e),e(t4e,iIr),e(gw,dIr),e(gw,zY),e(zY,cIr),e(gw,fIr),e(Wr,mIr),M(hw,Wr,null),b(f,Iqe,_),b(f,Zc,_),e(Zc,pw),e(pw,a4e),M(jx,a4e,null),e(Zc,gIr),e(Zc,n4e),e(n4e,hIr),b(f,qqe,_),b(f,Fr,_),M(Dx,Fr,null),e(Fr,pIr),e(Fr,ef),e(ef,uIr),e(ef,QY),e(QY,_Ir),e(ef,bIr),e(ef,WY),e(WY,vIr),e(ef,FIr),e(Fr,TIr),e(Fr,Gx),e(Gx,MIr),e(Gx,s4e),e(s4e,EIr),e(Gx,CIr),e(Fr,wIr),e(Fr,Ht),M(Ox,Ht,null),e(Ht,AIr),e(Ht,l4e),e(l4e,yIr),e(Ht,LIr),e(Ht,of),e(of,xIr),e(of,i4e),e(i4e,$Ir),e(of,kIr),e(of,HY),e(HY,SIr),e(of,RIr),e(Ht,BIr),M(uw,Ht,null),e(Fr,PIr),e(Fr,Hr),M(Vx,Hr,null),e(Hr,IIr),e(Hr,d4e),e(d4e,qIr),e(Hr,NIr),e(Hr,Mn),e(Mn,jIr),e(Mn,c4e),e(c4e,DIr),e(Mn,GIr),e(Mn,f4e),e(f4e,OIr),e(Mn,VIr),e(Mn,m4e),e(m4e,XIr),e(Mn,zIr),e(Hr,QIr),e(Hr,g4e),e(g4e,_w),e(_w,h4e),e(h4e,WIr),e(_w,HIr),e(_w,UY),e(UY,UIr),e(_w,JIr),e(Hr,YIr),M(bw,Hr,null),b(f,Nqe,_),b(f,rf,_),e(rf,vw),e(vw,p4e),M(Xx,p4e,null),e(rf,KIr),e(rf,u4e),e(u4e,ZIr),b(f,jqe,_),b(f,Tr,_),M(zx,Tr,null),e(Tr,eqr),e(Tr,tf),e(tf,oqr),e(tf,JY),e(JY,rqr),e(tf,tqr),e(tf,YY),e(YY,aqr),e(tf,nqr),e(Tr,sqr),e(Tr,Qx),e(Qx,lqr),e(Qx,_4e),e(_4e,iqr),e(Qx,dqr),e(Tr,cqr),e(Tr,Ut),M(Wx,Ut,null),e(Ut,fqr),e(Ut,b4e),e(b4e,mqr),e(Ut,gqr),e(Ut,af),e(af,hqr),e(af,v4e),e(v4e,pqr),e(af,uqr),e(af,KY),e(KY,_qr),e(af,bqr),e(Ut,vqr),M(Fw,Ut,null),e(Tr,Fqr),e(Tr,Ur),M(Hx,Ur,null),e(Ur,Tqr),e(Ur,F4e),e(F4e,Mqr),e(Ur,Eqr),e(Ur,En),e(En,Cqr),e(En,T4e),e(T4e,wqr),e(En,Aqr),e(En,M4e),e(M4e,yqr),e(En,Lqr),e(En,E4e),e(E4e,xqr),e(En,$qr),e(Ur,kqr),e(Ur,Ux),e(Ux,Tw),e(Tw,C4e),e(C4e,Sqr),e(Tw,Rqr),e(Tw,ZY),e(ZY,Bqr),e(Tw,Pqr),e(Ux,Iqr),e(Ux,Mw),e(Mw,w4e),e(w4e,qqr),e(Mw,Nqr),e(Mw,eK),e(eK,jqr),e(Mw,Dqr),e(Ur,Gqr),M(Ew,Ur,null),b(f,Dqe,_),b(f,nf,_),e(nf,Cw),e(Cw,A4e),M(Jx,A4e,null),e(nf,Oqr),e(nf,y4e),e(y4e,Vqr),b(f,Gqe,_),b(f,Mr,_),M(Yx,Mr,null),e(Mr,Xqr),e(Mr,sf),e(sf,zqr),e(sf,oK),e(oK,Qqr),e(sf,Wqr),e(sf,rK),e(rK,Hqr),e(sf,Uqr),e(Mr,Jqr),e(Mr,Kx),e(Kx,Yqr),e(Kx,L4e),e(L4e,Kqr),e(Kx,Zqr),e(Mr,eNr),e(Mr,Jt),M(Zx,Jt,null),e(Jt,oNr),e(Jt,x4e),e(x4e,rNr),e(Jt,tNr),e(Jt,lf),e(lf,aNr),e(lf,$4e),e($4e,nNr),e(lf,sNr),e(lf,tK),e(tK,lNr),e(lf,iNr),e(Jt,dNr),M(ww,Jt,null),e(Mr,cNr),e(Mr,Jr),M(e9,Jr,null),e(Jr,fNr),e(Jr,k4e),e(k4e,mNr),e(Jr,gNr),e(Jr,Cn),e(Cn,hNr),e(Cn,S4e),e(S4e,pNr),e(Cn,uNr),e(Cn,R4e),e(R4e,_Nr),e(Cn,bNr),e(Cn,B4e),e(B4e,vNr),e(Cn,FNr),e(Jr,TNr),e(Jr,P4e),e(P4e,Aw),e(Aw,I4e),e(I4e,MNr),e(Aw,ENr),e(Aw,aK),e(aK,CNr),e(Aw,wNr),e(Jr,ANr),M(yw,Jr,null),Oqe=!0},p(f,[_]){const o9={};_&2&&(o9.$$scope={dirty:_,ctx:f}),_f.$set(o9);const q4e={};_&2&&(q4e.$$scope={dirty:_,ctx:f}),ug.$set(q4e);const N4e={};_&2&&(N4e.$$scope={dirty:_,ctx:f}),Hg.$set(N4e);const j4e={};_&2&&(j4e.$$scope={dirty:_,ctx:f}),Mh.$set(j4e);const r9={};_&2&&(r9.$$scope={dirty:_,ctx:f}),Eh.$set(r9);const D4e={};_&2&&(D4e.$$scope={dirty:_,ctx:f}),Gh.$set(D4e);const wn={};_&2&&(wn.$$scope={dirty:_,ctx:f}),Oh.$set(wn);const G4e={};_&2&&(G4e.$$scope={dirty:_,ctx:f}),zh.$set(G4e);const O4e={};_&2&&(O4e.$$scope={dirty:_,ctx:f}),Pu.$set(O4e);const V4e={};_&2&&(V4e.$$scope={dirty:_,ctx:f}),qu.$set(V4e);const t9={};_&2&&(t9.$$scope={dirty:_,ctx:f}),w_.$set(t9);const X4e={};_&2&&(X4e.$$scope={dirty:_,ctx:f}),y_.$set(X4e);const a9={};_&2&&(a9.$$scope={dirty:_,ctx:f}),c1.$set(a9);const z4e={};_&2&&(z4e.$$scope={dirty:_,ctx:f}),m1.$set(z4e);const n9={};_&2&&(n9.$$scope={dirty:_,ctx:f}),U1.$set(n9);const Q4e={};_&2&&(Q4e.$$scope={dirty:_,ctx:f}),Y1.$set(Q4e);const W4e={};_&2&&(W4e.$$scope={dirty:_,ctx:f}),ub.$set(W4e);const H4e={};_&2&&(H4e.$$scope={dirty:_,ctx:f}),bb.$set(H4e);const df={};_&2&&(df.$$scope={dirty:_,ctx:f}),h2.$set(df);const U4e={};_&2&&(U4e.$$scope={dirty:_,ctx:f}),u2.$set(U4e);const J4e={};_&2&&(J4e.$$scope={dirty:_,ctx:f}),W2.$set(J4e);const Y4e={};_&2&&(Y4e.$$scope={dirty:_,ctx:f}),U2.$set(Y4e);const s9={};_&2&&(s9.$$scope={dirty:_,ctx:f}),r3.$set(s9);const K4e={};_&2&&(K4e.$$scope={dirty:_,ctx:f}),a3.$set(K4e);const Z4e={};_&2&&(Z4e.$$scope={dirty:_,ctx:f}),j3.$set(Z4e);const eEe={};_&2&&(eEe.$$scope={dirty:_,ctx:f}),G3.$set(eEe);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),Lv.$set(Kr);const l9={};_&2&&(l9.$$scope={dirty:_,ctx:f}),$v.$set(l9);const oEe={};_&2&&(oEe.$$scope={dirty:_,ctx:f}),Rv.$set(oEe);const i9={};_&2&&(i9.$$scope={dirty:_,ctx:f}),Pv.$set(i9);const rEe={};_&2&&(rEe.$$scope={dirty:_,ctx:f}),Hv.$set(rEe);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),Jv.$set(Zr);const tEe={};_&2&&(tEe.$$scope={dirty:_,ctx:f}),Zv.$set(tEe);const cf={};_&2&&(cf.$$scope={dirty:_,ctx:f}),oF.$set(cf);const aEe={};_&2&&(aEe.$$scope={dirty:_,ctx:f}),fF.$set(aEe);const nEe={};_&2&&(nEe.$$scope={dirty:_,ctx:f}),gF.$set(nEe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),vF.$set(y);const Lw={};_&2&&(Lw.$$scope={dirty:_,ctx:f}),TF.$set(Lw);const sEe={};_&2&&(sEe.$$scope={dirty:_,ctx:f}),kF.$set(sEe);const lEe={};_&2&&(lEe.$$scope={dirty:_,ctx:f}),RF.$set(lEe);const xw={};_&2&&(xw.$$scope={dirty:_,ctx:f}),qF.$set(xw);const iEe={};_&2&&(iEe.$$scope={dirty:_,ctx:f}),jF.$set(iEe);const dEe={};_&2&&(dEe.$$scope={dirty:_,ctx:f}),zF.$set(dEe);const $w={};_&2&&($w.$$scope={dirty:_,ctx:f}),WF.$set($w);const cEe={};_&2&&(cEe.$$scope={dirty:_,ctx:f}),KF.$set(cEe);const fEe={};_&2&&(fEe.$$scope={dirty:_,ctx:f}),eT.$set(fEe);const kw={};_&2&&(kw.$$scope={dirty:_,ctx:f}),aT.$set(kw);const mEe={};_&2&&(mEe.$$scope={dirty:_,ctx:f}),sT.$set(mEe);const gEe={};_&2&&(gEe.$$scope={dirty:_,ctx:f}),dT.$set(gEe);const Sw={};_&2&&(Sw.$$scope={dirty:_,ctx:f}),fT.$set(Sw);const hEe={};_&2&&(hEe.$$scope={dirty:_,ctx:f}),_T.$set(hEe);const pEe={};_&2&&(pEe.$$scope={dirty:_,ctx:f}),vT.$set(pEe);const Rw={};_&2&&(Rw.$$scope={dirty:_,ctx:f}),MT.$set(Rw);const uEe={};_&2&&(uEe.$$scope={dirty:_,ctx:f}),CT.$set(uEe);const _Ee={};_&2&&(_Ee.$$scope={dirty:_,ctx:f}),p7.$set(_Ee);const Bw={};_&2&&(Bw.$$scope={dirty:_,ctx:f}),_7.$set(Bw);const bEe={};_&2&&(bEe.$$scope={dirty:_,ctx:f}),G7.$set(bEe);const vEe={};_&2&&(vEe.$$scope={dirty:_,ctx:f}),V7.$set(vEe);const Pw={};_&2&&(Pw.$$scope={dirty:_,ctx:f}),rM.$set(Pw);const FEe={};_&2&&(FEe.$$scope={dirty:_,ctx:f}),aM.$set(FEe);const TEe={};_&2&&(TEe.$$scope={dirty:_,ctx:f}),iM.$set(TEe);const Iw={};_&2&&(Iw.$$scope={dirty:_,ctx:f}),cM.$set(Iw);const MEe={};_&2&&(MEe.$$scope={dirty:_,ctx:f}),kM.$set(MEe);const EEe={};_&2&&(EEe.$$scope={dirty:_,ctx:f}),RM.$set(EEe);const qw={};_&2&&(qw.$$scope={dirty:_,ctx:f}),XM.$set(qw);const CEe={};_&2&&(CEe.$$scope={dirty:_,ctx:f}),QM.$set(CEe);const wEe={};_&2&&(wEe.$$scope={dirty:_,ctx:f}),v4.$set(wEe);const Nw={};_&2&&(Nw.$$scope={dirty:_,ctx:f}),T4.$set(Nw);const AEe={};_&2&&(AEe.$$scope={dirty:_,ctx:f}),j4.$set(AEe);const yEe={};_&2&&(yEe.$$scope={dirty:_,ctx:f}),G4.$set(yEe);const jw={};_&2&&(jw.$$scope={dirty:_,ctx:f}),X4.$set(jw);const LEe={};_&2&&(LEe.$$scope={dirty:_,ctx:f}),Q4.$set(LEe);const xEe={};_&2&&(xEe.$$scope={dirty:_,ctx:f}),H4.$set(xEe);const Dw={};_&2&&(Dw.$$scope={dirty:_,ctx:f}),J4.$set(Dw);const $Ee={};_&2&&($Ee.$$scope={dirty:_,ctx:f}),_E.$set($Ee);const kEe={};_&2&&(kEe.$$scope={dirty:_,ctx:f}),vE.$set(kEe);const Gw={};_&2&&(Gw.$$scope={dirty:_,ctx:f}),DE.$set(Gw);const SEe={};_&2&&(SEe.$$scope={dirty:_,ctx:f}),OE.$set(SEe);const REe={};_&2&&(REe.$$scope={dirty:_,ctx:f}),XE.$set(REe);const Ow={};_&2&&(Ow.$$scope={dirty:_,ctx:f}),QE.$set(Ow);const BEe={};_&2&&(BEe.$$scope={dirty:_,ctx:f}),HE.$set(BEe);const PEe={};_&2&&(PEe.$$scope={dirty:_,ctx:f}),JE.$set(PEe);const Vw={};_&2&&(Vw.$$scope={dirty:_,ctx:f}),M5.$set(Vw);const IEe={};_&2&&(IEe.$$scope={dirty:_,ctx:f}),C5.$set(IEe);const qEe={};_&2&&(qEe.$$scope={dirty:_,ctx:f}),B5.$set(qEe);const Xw={};_&2&&(Xw.$$scope={dirty:_,ctx:f}),I5.$set(Xw);const NEe={};_&2&&(NEe.$$scope={dirty:_,ctx:f}),U5.$set(NEe);const jEe={};_&2&&(jEe.$$scope={dirty:_,ctx:f}),Y5.$set(jEe);const zw={};_&2&&(zw.$$scope={dirty:_,ctx:f}),iC.$set(zw);const DEe={};_&2&&(DEe.$$scope={dirty:_,ctx:f}),cC.$set(DEe);const GEe={};_&2&&(GEe.$$scope={dirty:_,ctx:f}),FC.$set(GEe);const Qw={};_&2&&(Qw.$$scope={dirty:_,ctx:f}),MC.$set(Qw);const OEe={};_&2&&(OEe.$$scope={dirty:_,ctx:f}),RC.$set(OEe);const VEe={};_&2&&(VEe.$$scope={dirty:_,ctx:f}),PC.$set(VEe);const Ww={};_&2&&(Ww.$$scope={dirty:_,ctx:f}),QC.$set(Ww);const XEe={};_&2&&(XEe.$$scope={dirty:_,ctx:f}),HC.$set(XEe);const zEe={};_&2&&(zEe.$$scope={dirty:_,ctx:f}),tw.$set(zEe);const Hw={};_&2&&(Hw.$$scope={dirty:_,ctx:f}),nw.$set(Hw);const QEe={};_&2&&(QEe.$$scope={dirty:_,ctx:f}),hw.$set(QEe);const WEe={};_&2&&(WEe.$$scope={dirty:_,ctx:f}),uw.$set(WEe);const Uw={};_&2&&(Uw.$$scope={dirty:_,ctx:f}),bw.$set(Uw);const HEe={};_&2&&(HEe.$$scope={dirty:_,ctx:f}),Fw.$set(HEe);const UEe={};_&2&&(UEe.$$scope={dirty:_,ctx:f}),Ew.$set(UEe);const Jw={};_&2&&(Jw.$$scope={dirty:_,ctx:f}),ww.$set(Jw);const JEe={};_&2&&(JEe.$$scope={dirty:_,ctx:f}),yw.$set(JEe)},i(f){Oqe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(J6.$$.fragment,f),E(Y6.$$.fragment,f),E(_f.$$.fragment,f),E(K6.$$.fragment,f),E(Z6.$$.fragment,f),E(r0.$$.fragment,f),E(ug.$$.fragment,f),E(t0.$$.fragment,f),E(a0.$$.fragment,f),E(n0.$$.fragment,f),E(i0.$$.fragment,f),E(Hg.$$.fragment,f),E(d0.$$.fragment,f),E(c0.$$.fragment,f),E(f0.$$.fragment,f),E(h0.$$.fragment,f),E(Mh.$$.fragment,f),E(Eh.$$.fragment,f),E(p0.$$.fragment,f),E(u0.$$.fragment,f),E(_0.$$.fragment,f),E(F0.$$.fragment,f),E(Gh.$$.fragment,f),E(Oh.$$.fragment,f),E(T0.$$.fragment,f),E(M0.$$.fragment,f),E(E0.$$.fragment,f),E(w0.$$.fragment,f),E(zh.$$.fragment,f),E(A0.$$.fragment,f),E(Pu.$$.fragment,f),E(y0.$$.fragment,f),E(L0.$$.fragment,f),E($0.$$.fragment,f),E(qu.$$.fragment,f),E(k0.$$.fragment,f),E(w_.$$.fragment,f),E(S0.$$.fragment,f),E(R0.$$.fragment,f),E(P0.$$.fragment,f),E(y_.$$.fragment,f),E(I0.$$.fragment,f),E(c1.$$.fragment,f),E(q0.$$.fragment,f),E(N0.$$.fragment,f),E(D0.$$.fragment,f),E(m1.$$.fragment,f),E(G0.$$.fragment,f),E(U1.$$.fragment,f),E(O0.$$.fragment,f),E(V0.$$.fragment,f),E(z0.$$.fragment,f),E(Y1.$$.fragment,f),E(Q0.$$.fragment,f),E(ub.$$.fragment,f),E(W0.$$.fragment,f),E(H0.$$.fragment,f),E(J0.$$.fragment,f),E(bb.$$.fragment,f),E(Y0.$$.fragment,f),E(h2.$$.fragment,f),E(K0.$$.fragment,f),E(Z0.$$.fragment,f),E(oy.$$.fragment,f),E(u2.$$.fragment,f),E(ry.$$.fragment,f),E(W2.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(U2.$$.fragment,f),E(ly.$$.fragment,f),E(r3.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(a3.$$.fragment,f),E(my.$$.fragment,f),E(j3.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(uy.$$.fragment,f),E(G3.$$.fragment,f),E(_y.$$.fragment,f),E(Lv.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E($v.$$.fragment,f),E(My.$$.fragment,f),E(Rv.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(Pv.$$.fragment,f),E(yy.$$.fragment,f),E(Hv.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(Jv.$$.fragment,f),E(Sy.$$.fragment,f),E(Zv.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(oF.$$.fragment,f),E(qy.$$.fragment,f),E(fF.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(gF.$$.fragment,f),E(Oy.$$.fragment,f),E(vF.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Qy.$$.fragment,f),E(TF.$$.fragment,f),E(Wy.$$.fragment,f),E(kF.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(RF.$$.fragment,f),E(Ky.$$.fragment,f),E(qF.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(jF.$$.fragment,f),E(aL.$$.fragment,f),E(zF.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(WF.$$.fragment,f),E(dL.$$.fragment,f),E(KF.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(eT.$$.fragment,f),E(hL.$$.fragment,f),E(aT.$$.fragment,f),E(uL.$$.fragment,f),E(_L.$$.fragment,f),E(vL.$$.fragment,f),E(sT.$$.fragment,f),E(FL.$$.fragment,f),E(dT.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(fT.$$.fragment,f),E(wL.$$.fragment,f),E(_T.$$.fragment,f),E(AL.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(vT.$$.fragment,f),E($L.$$.fragment,f),E(MT.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(BL.$$.fragment,f),E(CT.$$.fragment,f),E(PL.$$.fragment,f),E(p7.$$.fragment,f),E(IL.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(_7.$$.fragment,f),E(DL.$$.fragment,f),E(G7.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(V7.$$.fragment,f),E(zL.$$.fragment,f),E(rM.$$.fragment,f),E(QL.$$.fragment,f),E(WL.$$.fragment,f),E(UL.$$.fragment,f),E(aM.$$.fragment,f),E(JL.$$.fragment,f),E(iM.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(e8.$$.fragment,f),E(cM.$$.fragment,f),E(o8.$$.fragment,f),E(kM.$$.fragment,f),E(r8.$$.fragment,f),E(t8.$$.fragment,f),E(n8.$$.fragment,f),E(RM.$$.fragment,f),E(s8.$$.fragment,f),E(XM.$$.fragment,f),E(l8.$$.fragment,f),E(i8.$$.fragment,f),E(c8.$$.fragment,f),E(QM.$$.fragment,f),E(f8.$$.fragment,f),E(v4.$$.fragment,f),E(m8.$$.fragment,f),E(g8.$$.fragment,f),E(p8.$$.fragment,f),E(T4.$$.fragment,f),E(u8.$$.fragment,f),E(j4.$$.fragment,f),E(_8.$$.fragment,f),E(b8.$$.fragment,f),E(F8.$$.fragment,f),E(G4.$$.fragment,f),E(T8.$$.fragment,f),E(X4.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(Q4.$$.fragment,f),E(y8.$$.fragment,f),E(H4.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(J4.$$.fragment,f),E(S8.$$.fragment,f),E(_E.$$.fragment,f),E(R8.$$.fragment,f),E(B8.$$.fragment,f),E(I8.$$.fragment,f),E(vE.$$.fragment,f),E(q8.$$.fragment,f),E(DE.$$.fragment,f),E(N8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(OE.$$.fragment,f),E(O8.$$.fragment,f),E(XE.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(Q8.$$.fragment,f),E(QE.$$.fragment,f),E(W8.$$.fragment,f),E(HE.$$.fragment,f),E(H8.$$.fragment,f),E(U8.$$.fragment,f),E(Y8.$$.fragment,f),E(JE.$$.fragment,f),E(K8.$$.fragment,f),E(M5.$$.fragment,f),E(Z8.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(C5.$$.fragment,f),E(tx.$$.fragment,f),E(B5.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(I5.$$.fragment,f),E(ix.$$.fragment,f),E(U5.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(Y5.$$.fragment,f),E(gx.$$.fragment,f),E(iC.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(cC.$$.fragment,f),E(bx.$$.fragment,f),E(FC.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(MC.$$.fragment,f),E(Ex.$$.fragment,f),E(RC.$$.fragment,f),E(Cx.$$.fragment,f),E(wx.$$.fragment,f),E(yx.$$.fragment,f),E(PC.$$.fragment,f),E(Lx.$$.fragment,f),E(QC.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(HC.$$.fragment,f),E(Rx.$$.fragment,f),E(tw.$$.fragment,f),E(Bx.$$.fragment,f),E(Px.$$.fragment,f),E(qx.$$.fragment,f),E(nw.$$.fragment,f),E(Nx.$$.fragment,f),E(hw.$$.fragment,f),E(jx.$$.fragment,f),E(Dx.$$.fragment,f),E(Ox.$$.fragment,f),E(uw.$$.fragment,f),E(Vx.$$.fragment,f),E(bw.$$.fragment,f),E(Xx.$$.fragment,f),E(zx.$$.fragment,f),E(Wx.$$.fragment,f),E(Fw.$$.fragment,f),E(Hx.$$.fragment,f),E(Ew.$$.fragment,f),E(Jx.$$.fragment,f),E(Yx.$$.fragment,f),E(Zx.$$.fragment,f),E(ww.$$.fragment,f),E(e9.$$.fragment,f),E(yw.$$.fragment,f),Oqe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(J6.$$.fragment,f),C(Y6.$$.fragment,f),C(_f.$$.fragment,f),C(K6.$$.fragment,f),C(Z6.$$.fragment,f),C(r0.$$.fragment,f),C(ug.$$.fragment,f),C(t0.$$.fragment,f),C(a0.$$.fragment,f),C(n0.$$.fragment,f),C(i0.$$.fragment,f),C(Hg.$$.fragment,f),C(d0.$$.fragment,f),C(c0.$$.fragment,f),C(f0.$$.fragment,f),C(h0.$$.fragment,f),C(Mh.$$.fragment,f),C(Eh.$$.fragment,f),C(p0.$$.fragment,f),C(u0.$$.fragment,f),C(_0.$$.fragment,f),C(F0.$$.fragment,f),C(Gh.$$.fragment,f),C(Oh.$$.fragment,f),C(T0.$$.fragment,f),C(M0.$$.fragment,f),C(E0.$$.fragment,f),C(w0.$$.fragment,f),C(zh.$$.fragment,f),C(A0.$$.fragment,f),C(Pu.$$.fragment,f),C(y0.$$.fragment,f),C(L0.$$.fragment,f),C($0.$$.fragment,f),C(qu.$$.fragment,f),C(k0.$$.fragment,f),C(w_.$$.fragment,f),C(S0.$$.fragment,f),C(R0.$$.fragment,f),C(P0.$$.fragment,f),C(y_.$$.fragment,f),C(I0.$$.fragment,f),C(c1.$$.fragment,f),C(q0.$$.fragment,f),C(N0.$$.fragment,f),C(D0.$$.fragment,f),C(m1.$$.fragment,f),C(G0.$$.fragment,f),C(U1.$$.fragment,f),C(O0.$$.fragment,f),C(V0.$$.fragment,f),C(z0.$$.fragment,f),C(Y1.$$.fragment,f),C(Q0.$$.fragment,f),C(ub.$$.fragment,f),C(W0.$$.fragment,f),C(H0.$$.fragment,f),C(J0.$$.fragment,f),C(bb.$$.fragment,f),C(Y0.$$.fragment,f),C(h2.$$.fragment,f),C(K0.$$.fragment,f),C(Z0.$$.fragment,f),C(oy.$$.fragment,f),C(u2.$$.fragment,f),C(ry.$$.fragment,f),C(W2.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(U2.$$.fragment,f),C(ly.$$.fragment,f),C(r3.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(a3.$$.fragment,f),C(my.$$.fragment,f),C(j3.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(uy.$$.fragment,f),C(G3.$$.fragment,f),C(_y.$$.fragment,f),C(Lv.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C($v.$$.fragment,f),C(My.$$.fragment,f),C(Rv.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(Pv.$$.fragment,f),C(yy.$$.fragment,f),C(Hv.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(Jv.$$.fragment,f),C(Sy.$$.fragment,f),C(Zv.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(oF.$$.fragment,f),C(qy.$$.fragment,f),C(fF.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(gF.$$.fragment,f),C(Oy.$$.fragment,f),C(vF.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Qy.$$.fragment,f),C(TF.$$.fragment,f),C(Wy.$$.fragment,f),C(kF.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(RF.$$.fragment,f),C(Ky.$$.fragment,f),C(qF.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(jF.$$.fragment,f),C(aL.$$.fragment,f),C(zF.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(WF.$$.fragment,f),C(dL.$$.fragment,f),C(KF.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(eT.$$.fragment,f),C(hL.$$.fragment,f),C(aT.$$.fragment,f),C(uL.$$.fragment,f),C(_L.$$.fragment,f),C(vL.$$.fragment,f),C(sT.$$.fragment,f),C(FL.$$.fragment,f),C(dT.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(fT.$$.fragment,f),C(wL.$$.fragment,f),C(_T.$$.fragment,f),C(AL.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(vT.$$.fragment,f),C($L.$$.fragment,f),C(MT.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(BL.$$.fragment,f),C(CT.$$.fragment,f),C(PL.$$.fragment,f),C(p7.$$.fragment,f),C(IL.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(_7.$$.fragment,f),C(DL.$$.fragment,f),C(G7.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(V7.$$.fragment,f),C(zL.$$.fragment,f),C(rM.$$.fragment,f),C(QL.$$.fragment,f),C(WL.$$.fragment,f),C(UL.$$.fragment,f),C(aM.$$.fragment,f),C(JL.$$.fragment,f),C(iM.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(e8.$$.fragment,f),C(cM.$$.fragment,f),C(o8.$$.fragment,f),C(kM.$$.fragment,f),C(r8.$$.fragment,f),C(t8.$$.fragment,f),C(n8.$$.fragment,f),C(RM.$$.fragment,f),C(s8.$$.fragment,f),C(XM.$$.fragment,f),C(l8.$$.fragment,f),C(i8.$$.fragment,f),C(c8.$$.fragment,f),C(QM.$$.fragment,f),C(f8.$$.fragment,f),C(v4.$$.fragment,f),C(m8.$$.fragment,f),C(g8.$$.fragment,f),C(p8.$$.fragment,f),C(T4.$$.fragment,f),C(u8.$$.fragment,f),C(j4.$$.fragment,f),C(_8.$$.fragment,f),C(b8.$$.fragment,f),C(F8.$$.fragment,f),C(G4.$$.fragment,f),C(T8.$$.fragment,f),C(X4.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(Q4.$$.fragment,f),C(y8.$$.fragment,f),C(H4.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(J4.$$.fragment,f),C(S8.$$.fragment,f),C(_E.$$.fragment,f),C(R8.$$.fragment,f),C(B8.$$.fragment,f),C(I8.$$.fragment,f),C(vE.$$.fragment,f),C(q8.$$.fragment,f),C(DE.$$.fragment,f),C(N8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(OE.$$.fragment,f),C(O8.$$.fragment,f),C(XE.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(Q8.$$.fragment,f),C(QE.$$.fragment,f),C(W8.$$.fragment,f),C(HE.$$.fragment,f),C(H8.$$.fragment,f),C(U8.$$.fragment,f),C(Y8.$$.fragment,f),C(JE.$$.fragment,f),C(K8.$$.fragment,f),C(M5.$$.fragment,f),C(Z8.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(C5.$$.fragment,f),C(tx.$$.fragment,f),C(B5.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(I5.$$.fragment,f),C(ix.$$.fragment,f),C(U5.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(Y5.$$.fragment,f),C(gx.$$.fragment,f),C(iC.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(cC.$$.fragment,f),C(bx.$$.fragment,f),C(FC.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(MC.$$.fragment,f),C(Ex.$$.fragment,f),C(RC.$$.fragment,f),C(Cx.$$.fragment,f),C(wx.$$.fragment,f),C(yx.$$.fragment,f),C(PC.$$.fragment,f),C(Lx.$$.fragment,f),C(QC.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(HC.$$.fragment,f),C(Rx.$$.fragment,f),C(tw.$$.fragment,f),C(Bx.$$.fragment,f),C(Px.$$.fragment,f),C(qx.$$.fragment,f),C(nw.$$.fragment,f),C(Nx.$$.fragment,f),C(hw.$$.fragment,f),C(jx.$$.fragment,f),C(Dx.$$.fragment,f),C(Ox.$$.fragment,f),C(uw.$$.fragment,f),C(Vx.$$.fragment,f),C(bw.$$.fragment,f),C(Xx.$$.fragment,f),C(zx.$$.fragment,f),C(Wx.$$.fragment,f),C(Fw.$$.fragment,f),C(Hx.$$.fragment,f),C(Ew.$$.fragment,f),C(Jx.$$.fragment,f),C(Yx.$$.fragment,f),C(Zx.$$.fragment,f),C(ww.$$.fragment,f),C(e9.$$.fragment,f),C(yw.$$.fragment,f),Oqe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(mf),f&&t(et),f&&t(qe),f&&t(Xe),f&&t(hf),w(Ma,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(jPe),f&&t(hi),w(J6),f&&t(DPe),f&&t($n),f&&t(GPe),w(Y6,f),f&&t(OPe),f&&t(b$),f&&t(VPe),w(_f,f),f&&t(XPe),f&&t(pi),w(K6),f&&t(zPe),f&&t(Co),w(Z6),w(r0),w(ug),w(t0),f&&t(QPe),f&&t(_i),w(a0),f&&t(WPe),f&&t(wo),w(n0),w(i0),w(Hg),w(d0),f&&t(HPe),f&&t(bi),w(c0),f&&t(UPe),f&&t(Ao),w(f0),w(h0),w(Mh),w(Eh),w(p0),f&&t(JPe),f&&t(vi),w(u0),f&&t(YPe),f&&t(yo),w(_0),w(F0),w(Gh),w(Oh),w(T0),f&&t(KPe),f&&t(Ti),w(M0),f&&t(ZPe),f&&t(Lo),w(E0),w(w0),w(zh),w(A0),w(Pu),f&&t(eIe),f&&t(Ci),w(y0),f&&t(oIe),f&&t(xo),w(L0),w($0),w(qu),w(k0),w(w_),f&&t(rIe),f&&t(yi),w(S0),f&&t(tIe),f&&t($o),w(R0),w(P0),w(y_),w(I0),w(c1),f&&t(aIe),f&&t($i),w(q0),f&&t(nIe),f&&t(ko),w(N0),w(D0),w(m1),w(G0),w(U1),f&&t(sIe),f&&t(Ri),w(O0),f&&t(lIe),f&&t(So),w(V0),w(z0),w(Y1),w(Q0),w(ub),f&&t(iIe),f&&t(Ii),w(W0),f&&t(dIe),f&&t(Ro),w(H0),w(J0),w(bb),w(Y0),w(h2),f&&t(cIe),f&&t(ji),w(K0),f&&t(fIe),f&&t(Bo),w(Z0),w(oy),w(u2),w(ry),w(W2),f&&t(mIe),f&&t(Oi),w(ty),f&&t(gIe),f&&t(Po),w(ay),w(sy),w(U2),w(ly),w(r3),f&&t(hIe),f&&t(zi),w(iy),f&&t(pIe),f&&t(Io),w(dy),w(fy),w(a3),w(my),w(j3),f&&t(uIe),f&&t(Hi),w(gy),f&&t(_Ie),f&&t(qo),w(hy),w(uy),w(G3),w(_y),w(Lv),f&&t(bIe),f&&t(Yi),w(by),f&&t(vIe),f&&t(No),w(vy),w(Ty),w($v),w(My),w(Rv),f&&t(FIe),f&&t(ed),w(Ey),f&&t(TIe),f&&t(jo),w(Cy),w(Ay),w(Pv),w(yy),w(Hv),f&&t(MIe),f&&t(td),w(Ly),f&&t(EIe),f&&t(Do),w(xy),w(ky),w(Jv),w(Sy),w(Zv),f&&t(CIe),f&&t(sd),w(Ry),f&&t(wIe),f&&t(Go),w(By),w(Iy),w(oF),w(qy),w(fF),f&&t(AIe),f&&t(dd),w(Ny),f&&t(yIe),f&&t(Oo),w(jy),w(Gy),w(gF),w(Oy),w(vF),f&&t(LIe),f&&t(md),w(Vy),f&&t(xIe),f&&t(Vo),w(Xy),w(Qy),w(TF),w(Wy),w(kF),f&&t($Ie),f&&t(pd),w(Hy),f&&t(kIe),f&&t(Xo),w(Uy),w(Yy),w(RF),w(Ky),w(qF),f&&t(SIe),f&&t(bd),w(eL),f&&t(RIe),f&&t(zo),w(oL),w(tL),w(jF),w(aL),w(zF),f&&t(BIe),f&&t(Td),w(nL),f&&t(PIe),f&&t(Qo),w(sL),w(iL),w(WF),w(dL),w(KF),f&&t(IIe),f&&t(wd),w(cL),f&&t(qIe),f&&t(Wo),w(fL),w(gL),w(eT),w(hL),w(aT),f&&t(NIe),f&&t(Ld),w(uL),f&&t(jIe),f&&t(Ho),w(_L),w(vL),w(sT),w(FL),w(dT),f&&t(DIe),f&&t(kd),w(TL),f&&t(GIe),f&&t(Uo),w(ML),w(CL),w(fT),w(wL),w(_T),f&&t(OIe),f&&t(Bd),w(AL),f&&t(VIe),f&&t(Jo),w(yL),w(xL),w(vT),w($L),w(MT),f&&t(XIe),f&&t(qd),w(kL),f&&t(zIe),f&&t(Yo),w(SL),w(BL),w(CT),w(PL),w(p7),f&&t(QIe),f&&t(Dd),w(IL),f&&t(WIe),f&&t(Ko),w(qL),w(jL),w(_7),w(DL),w(G7),f&&t(HIe),f&&t(Vd),w(GL),f&&t(UIe),f&&t(Zo),w(OL),w(XL),w(V7),w(zL),w(rM),f&&t(JIe),f&&t(Qd),w(QL),f&&t(YIe),f&&t(er),w(WL),w(UL),w(aM),w(JL),w(iM),f&&t(KIe),f&&t(Jd),w(YL),f&&t(ZIe),f&&t(or),w(KL),w(e8),w(cM),w(o8),w(kM),f&&t(eqe),f&&t(Zd),w(r8),f&&t(oqe),f&&t(rr),w(t8),w(n8),w(RM),w(s8),w(XM),f&&t(rqe),f&&t(rc),w(l8),f&&t(tqe),f&&t(tr),w(i8),w(c8),w(QM),w(f8),w(v4),f&&t(aqe),f&&t(nc),w(m8),f&&t(nqe),f&&t(ar),w(g8),w(p8),w(T4),w(u8),w(j4),f&&t(sqe),f&&t(ic),w(_8),f&&t(lqe),f&&t(nr),w(b8),w(F8),w(G4),w(T8),w(X4),f&&t(iqe),f&&t(fc),w(E8),f&&t(dqe),f&&t(sr),w(C8),w(A8),w(Q4),w(y8),w(H4),f&&t(cqe),f&&t(hc),w(L8),f&&t(fqe),f&&t(lr),w(x8),w(k8),w(J4),w(S8),w(_E),f&&t(mqe),f&&t(_c),w(R8),f&&t(gqe),f&&t(ir),w(B8),w(I8),w(vE),w(q8),w(DE),f&&t(hqe),f&&t(Fc),w(N8),f&&t(pqe),f&&t(dr),w(j8),w(G8),w(OE),w(O8),w(XE),f&&t(uqe),f&&t(Ec),w(V8),f&&t(_qe),f&&t(cr),w(X8),w(Q8),w(QE),w(W8),w(HE),f&&t(bqe),f&&t(Ac),w(H8),f&&t(vqe),f&&t(fr),w(U8),w(Y8),w(JE),w(K8),w(M5),f&&t(Fqe),f&&t(xc),w(Z8),f&&t(Tqe),f&&t(mr),w(ex),w(rx),w(C5),w(tx),w(B5),f&&t(Mqe),f&&t(Sc),w(ax),f&&t(Eqe),f&&t(gr),w(nx),w(lx),w(I5),w(ix),w(U5),f&&t(Cqe),f&&t(Pc),w(dx),f&&t(wqe),f&&t(hr),w(cx),w(mx),w(Y5),w(gx),w(iC),f&&t(Aqe),f&&t(Nc),w(hx),f&&t(yqe),f&&t(pr),w(px),w(_x),w(cC),w(bx),w(FC),f&&t(Lqe),f&&t(Gc),w(vx),f&&t(xqe),f&&t(ur),w(Fx),w(Mx),w(MC),w(Ex),w(RC),f&&t($qe),f&&t(Xc),w(Cx),f&&t(kqe),f&&t(_r),w(wx),w(yx),w(PC),w(Lx),w(QC),f&&t(Sqe),f&&t(Wc),w(xx),f&&t(Rqe),f&&t(br),w($x),w(Sx),w(HC),w(Rx),w(tw),f&&t(Bqe),f&&t(Jc),w(Bx),f&&t(Pqe),f&&t(vr),w(Px),w(qx),w(nw),w(Nx),w(hw),f&&t(Iqe),f&&t(Zc),w(jx),f&&t(qqe),f&&t(Fr),w(Dx),w(Ox),w(uw),w(Vx),w(bw),f&&t(Nqe),f&&t(rf),w(Xx),f&&t(jqe),f&&t(Tr),w(zx),w(Wx),w(Fw),w(Hx),w(Ew),f&&t(Dqe),f&&t(nf),w(Jx),f&&t(Gqe),f&&t(Mr),w(Yx),w(Zx),w(ww),w(e9),w(yw)}}}const Zyt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function eLt(L){return e0t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class lLt extends J6t{constructor(g){super();Y6t(this,g,eLt,Kyt,K6t,{})}}export{lLt as default,Zyt as metadata};
