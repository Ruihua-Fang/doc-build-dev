import{S as Tn,i as Dn,s as Cn,e as r,k as p,w as m,t as i,M as An,c as o,d as s,m as d,a as n,x as u,h as l,b as a,F as t,g as c,y as f,L as Sn,q as g,o as _,B as k,v as In}from"../../chunks/vendor-6b77c823.js";import{D as q}from"../../chunks/Docstring-1088f2fb.js";import{C as It}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as G}from"../../chunks/IconCopyLink-7a11ce68.js";function Fn(xo){let E,Ft,x,B,it,le,zs,lt,Ts,Gt,X,pt,Ds,Cs,pe,As,Ss,Bt,j,R,dt,de,Is,ht,Fs,Rt,O,Gs,he,Bs,Rs,Ot,Ve,Os,Ht,We,Hs,Vt,Ue,ct,Vs,Wt,H,Ws,ce,Us,Ys,Ut,z,V,mt,me,Js,ut,Qs,Yt,T,ue,Zs,fe,Ks,Ye,er,tr,Jt,D,W,ft,ge,sr,gt,rr,Qt,v,_e,or,M,nr,Je,ar,ir,Qe,lr,pr,ke,dr,hr,cr,ve,mr,Ze,ur,fr,gr,y,be,_r,_t,kr,vr,Pe,Ke,br,kt,Pr,wr,et,Nr,vt,$r,Lr,U,we,Mr,bt,qr,yr,Y,Ne,Er,Pt,xr,Xr,J,$e,jr,Le,zr,wt,Tr,Dr,Zt,C,Q,Nt,Me,Cr,$t,Ar,Kt,P,qe,Sr,ye,Ir,tt,Fr,Gr,Br,Lt,Rr,Or,Ee,es,A,Z,Mt,xe,Hr,qt,Vr,ts,w,Xe,Wr,je,Ur,st,Yr,Jr,Qr,yt,Zr,Kr,ze,ss,S,K,Et,Te,eo,xt,to,rs,N,De,so,Ce,ro,rt,oo,no,ao,Xt,io,lo,Ae,os,I,ee,jt,Se,po,zt,ho,ns,$,Ie,co,Fe,mo,ot,uo,fo,go,Tt,_o,ko,Ge,as,F,te,Dt,Be,vo,Ct,bo,is,L,Re,Po,Oe,wo,nt,No,$o,Lo,At,Mo,qo,He,ls;return le=new G({}),de=new G({}),me=new G({}),ue=new q({props:{name:"class transformers.XLMProphetNetConfig",anchor:"transformers.XLMProphetNetConfig",parameters:[{name:"activation_dropout",val:" = 0.1"},{name:"activation_function",val:" = 'gelu'"},{name:"vocab_size",val:" = 30522"},{name:"hidden_size",val:" = 1024"},{name:"encoder_ffn_dim",val:" = 4096"},{name:"num_encoder_layers",val:" = 12"},{name:"num_encoder_attention_heads",val:" = 16"},{name:"decoder_ffn_dim",val:" = 4096"},{name:"num_decoder_layers",val:" = 12"},{name:"num_decoder_attention_heads",val:" = 16"},{name:"attention_dropout",val:" = 0.1"},{name:"dropout",val:" = 0.1"},{name:"max_position_embeddings",val:" = 512"},{name:"init_std",val:" = 0.02"},{name:"is_encoder_decoder",val:" = True"},{name:"add_cross_attention",val:" = True"},{name:"decoder_start_token_id",val:" = 0"},{name:"ngram",val:" = 2"},{name:"num_buckets",val:" = 32"},{name:"relative_max_distance",val:" = 128"},{name:"disable_ngram_loss",val:" = False"},{name:"eps",val:" = 0.0"},{name:"use_cache",val:" = True"},{name:"pad_token_id",val:" = 0"},{name:"bos_token_id",val:" = 1"},{name:"eos_token_id",val:" = 2"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16825/src/transformers/models/xlm_prophetnet/configuration_xlm_prophetnet.py#L29"}}),ge=new G({}),_e=new q({props:{name:"class transformers.XLMProphetNetTokenizer",anchor:"transformers.XLMProphetNetTokenizer",parameters:[{name:"vocab_file",val:""},{name:"bos_token",val:" = '[SEP]'"},{name:"eos_token",val:" = '[SEP]'"},{name:"sep_token",val:" = '[SEP]'"},{name:"unk_token",val:" = '[UNK]'"},{name:"pad_token",val:" = '[PAD]'"},{name:"cls_token",val:" = '[CLS]'"},{name:"mask_token",val:" = '[MASK]'"},{name:"sp_model_kwargs",val:": typing.Union[typing.Dict[str, typing.Any], NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.XLMProphetNetTokenizer.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
Path to the vocabulary file.`,name:"vocab_file"},{anchor:"transformers.XLMProphetNetTokenizer.bos_token",description:`<strong>bos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The beginning of sequence token that was used during pretraining. Can be used a sequence classifier token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the beginning of
sequence. The token used is the <code>cls_token</code>.</p>

					</div>`,name:"bos_token"},{anchor:"transformers.XLMProphetNetTokenizer.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The end of sequence token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the end of sequence.
The token used is the <code>sep_token</code>.</p>

					</div>`,name:"eos_token"},{anchor:"transformers.XLMProphetNetTokenizer.sep_token",description:`<strong>sep_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The separator token, which is used when building a sequence from multiple sequences, e.g. two sequences for
sequence classification or for a text and a question for question answering. It is also used as the last
token of a sequence built with special tokens.`,name:"sep_token"},{anchor:"transformers.XLMProphetNetTokenizer.cls_token",description:`<strong>cls_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The classifier token which is used when doing sequence classification (classification of the whole sequence
instead of per-token classification). It is the first token of the sequence when built with special tokens.`,name:"cls_token"},{anchor:"transformers.XLMProphetNetTokenizer.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.XLMProphetNetTokenizer.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;pad&gt;&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.XLMProphetNetTokenizer.mask_token",description:`<strong>mask_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;mask&gt;&quot;</code>) &#x2014;
The token used for masking values. This is the token used when training this model with masked language
modeling. This is the token which the model will try to predict.`,name:"mask_token"},{anchor:"transformers.XLMProphetNetTokenizer.additional_special_tokens",description:`<strong>additional_special_tokens</strong> (<code>List[str]</code>, <em>optional</em>, defaults to <code>[&quot;&lt;s&gt;NOTUSED&quot;, &quot;&lt;/s&gt;NOTUSED&quot;]</code>) &#x2014;
Additional special tokens used by the tokenizer.`,name:"additional_special_tokens"},{anchor:"transformers.XLMProphetNetTokenizer.sp_model_kwargs",description:`<strong>sp_model_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Will be passed to the <code>SentencePieceProcessor.__init__()</code> method. The <a href="https://github.com/google/sentencepiece/tree/master/python" rel="nofollow">Python wrapper for
SentencePiece</a> can be used, among other things,
to set:</p>
<ul>
<li>
<p><code>enable_sampling</code>: Enable subword regularization.</p>
</li>
<li>
<p><code>nbest_size</code>: Sampling parameters for unigram. Invalid for BPE-Dropout.</p>
<ul>
<li><code>nbest_size = {0,1}</code>: No sampling is performed.</li>
<li><code>nbest_size &gt; 1</code>: samples from the nbest_size results.</li>
<li><code>nbest_size &lt; 0</code>: assuming that nbest_size is infinite and samples from the all hypothesis (lattice)
using forward-filtering-and-backward-sampling algorithm.</li>
</ul>
</li>
<li>
<p><code>alpha</code>: Smoothing parameter for unigram sampling, and dropout probability of merge operations for
BPE-dropout.</p>
</li>
</ul>`,name:"sp_model_kwargs"},{anchor:"transformers.XLMProphetNetTokenizer.sp_model",description:`<strong>sp_model</strong> (<code>SentencePieceProcessor</code>) &#x2014;
The <em>SentencePiece</em> processor that is used for every conversion (string, tokens and IDs).`,name:"sp_model"}],source:"https://github.com/huggingface/transformers/blob/pr_16825/src/transformers/models/xlm_prophetnet/tokenization_xlm_prophetnet.py#L57"}}),be=new q({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.XLMProphetNetTokenizer.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],parametersDescription:[{anchor:"transformers.XLMProphetNetTokenizer.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added`,name:"token_ids_0"},{anchor:"transformers.XLMProphetNetTokenizer.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/huggingface/transformers/blob/pr_16825/src/transformers/models/xlm_prophetnet/tokenization_xlm_prophetnet.py#L314",returnDescription:`
<p>list of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),we=new q({props:{name:"convert_tokens_to_string",anchor:"transformers.XLMProphetNetTokenizer.convert_tokens_to_string",parameters:[{name:"tokens",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16825/src/transformers/models/xlm_prophetnet/tokenization_xlm_prophetnet.py#L292"}}),Ne=new q({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.XLMProphetNetTokenizer.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],parametersDescription:[{anchor:"transformers.XLMProphetNetTokenizer.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.XLMProphetNetTokenizer.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/huggingface/transformers/blob/pr_16825/src/transformers/models/xlm_prophetnet/tokenization_xlm_prophetnet.py#L241",returnDescription:`
<p>List of zeros.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),$e=new q({props:{name:"get_special_tokens_mask",anchor:"transformers.XLMProphetNetTokenizer.get_special_tokens_mask",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"},{name:"already_has_special_tokens",val:": bool = False"}],parametersDescription:[{anchor:"transformers.XLMProphetNetTokenizer.get_special_tokens_mask.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.XLMProphetNetTokenizer.get_special_tokens_mask.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"},{anchor:"transformers.XLMProphetNetTokenizer.get_special_tokens_mask.already_has_special_tokens",description:`<strong>already_has_special_tokens</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the token list is already formatted with special tokens for the model.`,name:"already_has_special_tokens"}],source:"https://github.com/huggingface/transformers/blob/pr_16825/src/transformers/models/xlm_prophetnet/tokenization_xlm_prophetnet.py#L213",returnDescription:`
<p>A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),Me=new G({}),qe=new q({props:{name:"class transformers.XLMProphetNetModel",anchor:"transformers.XLMProphetNetModel",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16825/src/transformers/models/xlm_prophetnet/modeling_xlm_prophetnet.py#L86"}}),Ee=new It({props:{code:`from transformers import XLMProphetNetTokenizer, XLMProphetNetModel

tokenizer = XLMProphetNetTokenizer.from_pretrained("microsoft/xprophetnet-large-wiki100-cased")
model = XLMProphetNetModel.from_pretrained("microsoft/xprophetnet-large-wiki100-cased")

input_ids = tokenizer(
    "Studies have been shown that owning a dog is good for you", return_tensors="pt"
).input_ids  # Batch size 1
decoder_input_ids = tokenizer("Studies show that", return_tensors="pt").input_ids  # Batch size 1
outputs = model(input_ids=input_ids, decoder_input_ids=decoder_input_ids)

last_hidden_states = outputs.last_hidden_state  # main stream hidden states
last_hidden_states_ngram = outputs.last_hidden_state_ngram  # predict hidden states`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> XLMProphetNetTokenizer, XLMProphetNetModel

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = XLMProphetNetTokenizer.from_pretrained(<span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = XLMProphetNetModel.from_pretrained(<span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>input_ids = tokenizer(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;Studies have been shown that owning a dog is good for you&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>).input_ids  <span class="hljs-comment"># Batch size 1</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>decoder_input_ids = tokenizer(<span class="hljs-string">&quot;Studies show that&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).input_ids  <span class="hljs-comment"># Batch size 1</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(input_ids=input_ids, decoder_input_ids=decoder_input_ids)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state  <span class="hljs-comment"># main stream hidden states</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states_ngram = outputs.last_hidden_state_ngram  <span class="hljs-comment"># predict hidden states</span>`}}),xe=new G({}),Xe=new q({props:{name:"class transformers.XLMProphetNetEncoder",anchor:"transformers.XLMProphetNetEncoder",parameters:[{name:"config",val:": ProphetNetConfig"},{name:"word_embeddings",val:": Embedding = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16825/src/transformers/models/xlm_prophetnet/modeling_xlm_prophetnet.py#L38"}}),ze=new It({props:{code:`from transformers import XLMProphetNetTokenizer, XLMProphetNetEncoder
import torch

tokenizer = XLMProphetNetTokenizer.from_pretrained("microsoft/xprophetnet-large-wiki100-cased")
model = XLMProphetNetEncoder.from_pretrained("patrickvonplaten/xprophetnet-large-uncased-standalone")
assert model.config.is_decoder, f"{model.__class__} has to be configured as a decoder."
inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> XLMProphetNetTokenizer, XLMProphetNetEncoder
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = XLMProphetNetTokenizer.from_pretrained(<span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = XLMProphetNetEncoder.from_pretrained(<span class="hljs-string">&quot;patrickvonplaten/xprophetnet-large-uncased-standalone&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> model.config.is_decoder, <span class="hljs-string">f&quot;<span class="hljs-subst">{model.__class__}</span> has to be configured as a decoder.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),Te=new G({}),De=new q({props:{name:"class transformers.XLMProphetNetDecoder",anchor:"transformers.XLMProphetNetDecoder",parameters:[{name:"config",val:": ProphetNetConfig"},{name:"word_embeddings",val:": Embedding = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16825/src/transformers/models/xlm_prophetnet/modeling_xlm_prophetnet.py#L61"}}),Ae=new It({props:{code:`from transformers import XLMProphetNetTokenizer, XLMProphetNetDecoder
import torch

tokenizer = XLMProphetNetTokenizer.from_pretrained("microsoft/xprophetnet-large-wiki100-cased")
model = XLMProphetNetDecoder.from_pretrained(
    "patrickvonplaten/xprophetnet-large-uncased-standalone", add_cross_attention=False
)
assert model.config.is_decoder, f"{model.__class__} has to be configured as a decoder."
inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> XLMProphetNetTokenizer, XLMProphetNetDecoder
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = XLMProphetNetTokenizer.from_pretrained(<span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = XLMProphetNetDecoder.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;patrickvonplaten/xprophetnet-large-uncased-standalone&quot;</span>, add_cross_attention=<span class="hljs-literal">False</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> model.config.is_decoder, <span class="hljs-string">f&quot;<span class="hljs-subst">{model.__class__}</span> has to be configured as a decoder.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),Se=new G({}),Ie=new q({props:{name:"class transformers.XLMProphetNetForConditionalGeneration",anchor:"transformers.XLMProphetNetForConditionalGeneration",parameters:[{name:"config",val:": ProphetNetConfig"}],source:"https://github.com/huggingface/transformers/blob/pr_16825/src/transformers/models/xlm_prophetnet/modeling_xlm_prophetnet.py#L112"}}),Ge=new It({props:{code:`from transformers import XLMProphetNetTokenizer, XLMProphetNetForConditionalGeneration

tokenizer = XLMProphetNetTokenizer.from_pretrained("microsoft/xprophetnet-large-wiki100-cased")
model = XLMProphetNetForConditionalGeneration.from_pretrained("microsoft/xprophetnet-large-wiki100-cased")

input_ids = tokenizer(
    "Studies have been shown that owning a dog is good for you", return_tensors="pt"
).input_ids  # Batch size 1
decoder_input_ids = tokenizer("Studies show that", return_tensors="pt").input_ids  # Batch size 1
outputs = model(input_ids=input_ids, decoder_input_ids=decoder_input_ids)

logits_next_token = outputs.logits  # logits to predict next token as usual
logits_ngram_next_tokens = outputs.logits_ngram  # logits to predict 2nd, 3rd, ... next tokens`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> XLMProphetNetTokenizer, XLMProphetNetForConditionalGeneration

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = XLMProphetNetTokenizer.from_pretrained(<span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = XLMProphetNetForConditionalGeneration.from_pretrained(<span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>input_ids = tokenizer(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;Studies have been shown that owning a dog is good for you&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>).input_ids  <span class="hljs-comment"># Batch size 1</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>decoder_input_ids = tokenizer(<span class="hljs-string">&quot;Studies show that&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).input_ids  <span class="hljs-comment"># Batch size 1</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(input_ids=input_ids, decoder_input_ids=decoder_input_ids)

<span class="hljs-meta">&gt;&gt;&gt; </span>logits_next_token = outputs.logits  <span class="hljs-comment"># logits to predict next token as usual</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>logits_ngram_next_tokens = outputs.logits_ngram  <span class="hljs-comment"># logits to predict 2nd, 3rd, ... next tokens</span>`}}),Be=new G({}),Re=new q({props:{name:"class transformers.XLMProphetNetForCausalLM",anchor:"transformers.XLMProphetNetForCausalLM",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16825/src/transformers/models/xlm_prophetnet/modeling_xlm_prophetnet.py#L138"}}),He=new It({props:{code:`from transformers import XLMProphetNetTokenizer, XLMProphetNetForCausalLM
import torch

tokenizer = XLMProphetNetTokenizer.from_pretrained("microsoft/xprophetnet-large-wiki100-cased")
model = XLMProphetNetForCausalLM.from_pretrained("microsoft/xprophetnet-large-wiki100-cased")
assert model.config.is_decoder, f"{model.__class__} has to be configured as a decoder."
inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
outputs = model(**inputs)

logits = outputs.logits

# Model can also be used with EncoderDecoder framework
from transformers import EncoderDecoderModel, XLMProphetNetTokenizer, XLMRobertaTokenizer
import torch

tokenizer_enc = XLMRobertaTokenizer.from_pretrained("xlm-roberta-large")
tokenizer_dec = XLMProphetNetTokenizer.from_pretrained("microsoft/xprophetnet-large-wiki100-cased")
model = EncoderDecoderModel.from_encoder_decoder_pretrained(
    "xlm-roberta-large", "microsoft/xprophetnet-large-wiki100-cased"
)

ARTICLE = (
    "the us state department said wednesday it had received no "
    "formal word from bolivia that it was expelling the us ambassador there "
    "but said the charges made against him are \`\` baseless ."
)
input_ids = tokenizer_enc(ARTICLE, return_tensors="pt").input_ids
labels = tokenizer_dec("us rejects charges against its ambassador in bolivia", return_tensors="pt").input_ids
outputs = model(input_ids=input_ids, decoder_input_ids=labels[:, :-1], labels=labels[:, 1:])

loss = outputs.loss`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> XLMProphetNetTokenizer, XLMProphetNetForCausalLM
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = XLMProphetNetTokenizer.from_pretrained(<span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = XLMProphetNetForCausalLM.from_pretrained(<span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> model.config.is_decoder, <span class="hljs-string">f&quot;<span class="hljs-subst">{model.__class__}</span> has to be configured as a decoder.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Model can also be used with EncoderDecoder framework</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> EncoderDecoderModel, XLMProphetNetTokenizer, XLMRobertaTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer_enc = XLMRobertaTokenizer.from_pretrained(<span class="hljs-string">&quot;xlm-roberta-large&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer_dec = XLMProphetNetTokenizer.from_pretrained(<span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = EncoderDecoderModel.from_encoder_decoder_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;xlm-roberta-large&quot;</span>, <span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>ARTICLE = (
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;the us state department said wednesday it had received no &quot;</span>
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;formal word from bolivia that it was expelling the us ambassador there &quot;</span>
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;but said the charges made against him are \`\` baseless .&quot;</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>input_ids = tokenizer_enc(ARTICLE, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).input_ids
<span class="hljs-meta">&gt;&gt;&gt; </span>labels = tokenizer_dec(<span class="hljs-string">&quot;us rejects charges against its ambassador in bolivia&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).input_ids
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(input_ids=input_ids, decoder_input_ids=labels[:, :-<span class="hljs-number">1</span>], labels=labels[:, <span class="hljs-number">1</span>:])

<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss`}}),{c(){E=r("meta"),Ft=p(),x=r("h1"),B=r("a"),it=r("span"),m(le.$$.fragment),zs=p(),lt=r("span"),Ts=i("XLM-ProphetNet"),Gt=p(),X=r("p"),pt=r("strong"),Ds=i("DISCLAIMER:"),Cs=i(" If you see something strange, file a "),pe=r("a"),As=i("Github Issue"),Ss=i(` and assign
@patrickvonplaten`),Bt=p(),j=r("h2"),R=r("a"),dt=r("span"),m(de.$$.fragment),Is=p(),ht=r("span"),Fs=i("Overview"),Rt=p(),O=r("p"),Gs=i("The XLM-ProphetNet model was proposed in "),he=r("a"),Bs=i("ProphetNet: Predicting Future N-gram for Sequence-to-Sequence Pre-training,"),Rs=i(` by Yu Yan, Weizhen Qi, Yeyun Gong, Dayiheng Liu, Nan Duan, Jiusheng Chen, Ruofei
Zhang, Ming Zhou on 13 Jan, 2020.`),Ot=p(),Ve=r("p"),Os=i(`XLM-ProphetNet is an encoder-decoder model and can predict n-future tokens for \u201Cngram\u201D language modeling instead of
just the next token. Its architecture is identical to ProhpetNet, but the model was trained on the multi-lingual
\u201Cwiki100\u201D Wikipedia dump.`),Ht=p(),We=r("p"),Hs=i("The abstract from the paper is the following:"),Vt=p(),Ue=r("p"),ct=r("em"),Vs=i(`In this paper, we present a new sequence-to-sequence pretraining model called ProphetNet, which introduces a novel
self-supervised objective named future n-gram prediction and the proposed n-stream self-attention mechanism. Instead of
the optimization of one-step ahead prediction in traditional sequence-to-sequence model, the ProphetNet is optimized by
n-step ahead prediction which predicts the next n tokens simultaneously based on previous context tokens at each time
step. The future n-gram prediction explicitly encourages the model to plan for the future tokens and prevent
overfitting on strong local correlations. We pre-train ProphetNet using a base scale dataset (16GB) and a large scale
dataset (160GB) respectively. Then we conduct experiments on CNN/DailyMail, Gigaword, and SQuAD 1.1 benchmarks for
abstractive summarization and question generation tasks. Experimental results show that ProphetNet achieves new
state-of-the-art results on all these datasets compared to the models using the same scale pretraining corpus.`),Wt=p(),H=r("p"),Ws=i("The Authors\u2019 code can be found "),ce=r("a"),Us=i("here"),Ys=i("."),Ut=p(),z=r("h2"),V=r("a"),mt=r("span"),m(me.$$.fragment),Js=p(),ut=r("span"),Qs=i("XLMProphetNetConfig"),Yt=p(),T=r("div"),m(ue.$$.fragment),Zs=p(),fe=r("p"),Ks=i("This class overrides "),Ye=r("a"),er=i("ProphetNetConfig"),tr=i(`. Please check the superclass for the appropriate documentation alongside
usage examples.`),Jt=p(),D=r("h2"),W=r("a"),ft=r("span"),m(ge.$$.fragment),sr=p(),gt=r("span"),rr=i("XLMProphetNetTokenizer"),Qt=p(),v=r("div"),m(_e.$$.fragment),or=p(),M=r("p"),nr=i("Adapted from "),Je=r("a"),ar=i("RobertaTokenizer"),ir=i(" and "),Qe=r("a"),lr=i("XLNetTokenizer"),pr=i(`. Based on
`),ke=r("a"),dr=i("SentencePiece"),hr=i("."),cr=p(),ve=r("p"),mr=i("This tokenizer inherits from "),Ze=r("a"),ur=i("PreTrainedTokenizer"),fr=i(` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),gr=p(),y=r("div"),m(be.$$.fragment),_r=p(),_t=r("p"),kr=i(`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A XLMProphetNet sequence has the following format:`),vr=p(),Pe=r("ul"),Ke=r("li"),br=i("single sequence: "),kt=r("code"),Pr=i("X [SEP]"),wr=p(),et=r("li"),Nr=i("pair of sequences: "),vt=r("code"),$r=i("A [SEP] B [SEP]"),Lr=p(),U=r("div"),m(we.$$.fragment),Mr=p(),bt=r("p"),qr=i("Converts a sequence of tokens (strings for sub-words) in a single string."),yr=p(),Y=r("div"),m(Ne.$$.fragment),Er=p(),Pt=r("p"),xr=i(`Create a mask from the two sequences passed to be used in a sequence-pair classification task. XLMProphetNet
does not make use of token type ids, therefore a list of zeros is returned.`),Xr=p(),J=r("div"),m($e.$$.fragment),jr=p(),Le=r("p"),zr=i(`Retrieve sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer `),wt=r("code"),Tr=i("prepare_for_model"),Dr=i(" method."),Zt=p(),C=r("h2"),Q=r("a"),Nt=r("span"),m(Me.$$.fragment),Cr=p(),$t=r("span"),Ar=i("XLMProphetNetModel"),Kt=p(),P=r("div"),m(qe.$$.fragment),Sr=p(),ye=r("p"),Ir=i("This class overrides "),tt=r("a"),Fr=i("ProphetNetModel"),Gr=i(`. Please check the superclass for the appropriate documentation alongside
usage examples.`),Br=p(),Lt=r("p"),Rr=i("Example:"),Or=p(),m(Ee.$$.fragment),es=p(),A=r("h2"),Z=r("a"),Mt=r("span"),m(xe.$$.fragment),Hr=p(),qt=r("span"),Vr=i("XLMProphetNetEncoder"),ts=p(),w=r("div"),m(Xe.$$.fragment),Wr=p(),je=r("p"),Ur=i("This class overrides "),st=r("a"),Yr=i("ProphetNetEncoder"),Jr=i(`. Please check the superclass for the appropriate documentation alongside
usage examples.`),Qr=p(),yt=r("p"),Zr=i("Example:"),Kr=p(),m(ze.$$.fragment),ss=p(),S=r("h2"),K=r("a"),Et=r("span"),m(Te.$$.fragment),eo=p(),xt=r("span"),to=i("XLMProphetNetDecoder"),rs=p(),N=r("div"),m(De.$$.fragment),so=p(),Ce=r("p"),ro=i("This class overrides "),rt=r("a"),oo=i("ProphetNetDecoder"),no=i(`. Please check the superclass for the appropriate documentation alongside
usage examples.`),ao=p(),Xt=r("p"),io=i("Example:"),lo=p(),m(Ae.$$.fragment),os=p(),I=r("h2"),ee=r("a"),jt=r("span"),m(Se.$$.fragment),po=p(),zt=r("span"),ho=i("XLMProphetNetForConditionalGeneration"),ns=p(),$=r("div"),m(Ie.$$.fragment),co=p(),Fe=r("p"),mo=i("This class overrides "),ot=r("a"),uo=i("ProphetNetForConditionalGeneration"),fo=i(`. Please check the superclass for the appropriate
documentation alongside usage examples.`),go=p(),Tt=r("p"),_o=i("Example:"),ko=p(),m(Ge.$$.fragment),as=p(),F=r("h2"),te=r("a"),Dt=r("span"),m(Be.$$.fragment),vo=p(),Ct=r("span"),bo=i("XLMProphetNetForCausalLM"),is=p(),L=r("div"),m(Re.$$.fragment),Po=p(),Oe=r("p"),wo=i("This class overrides "),nt=r("a"),No=i("ProphetNetForCausalLM"),$o=i(`. Please check the superclass for the appropriate documentation
alongside usage examples.`),Lo=p(),At=r("p"),Mo=i("Example:"),qo=p(),m(He.$$.fragment),this.h()},l(e){const h=An('[data-svelte="svelte-1phssyn"]',document.head);E=o(h,"META",{name:!0,content:!0}),h.forEach(s),Ft=d(e),x=o(e,"H1",{class:!0});var ps=n(x);B=o(ps,"A",{id:!0,class:!0,href:!0});var Xo=n(B);it=o(Xo,"SPAN",{});var jo=n(it);u(le.$$.fragment,jo),jo.forEach(s),Xo.forEach(s),zs=d(ps),lt=o(ps,"SPAN",{});var zo=n(lt);Ts=l(zo,"XLM-ProphetNet"),zo.forEach(s),ps.forEach(s),Gt=d(e),X=o(e,"P",{});var St=n(X);pt=o(St,"STRONG",{});var To=n(pt);Ds=l(To,"DISCLAIMER:"),To.forEach(s),Cs=l(St," If you see something strange, file a "),pe=o(St,"A",{href:!0,rel:!0});var Do=n(pe);As=l(Do,"Github Issue"),Do.forEach(s),Ss=l(St,` and assign
@patrickvonplaten`),St.forEach(s),Bt=d(e),j=o(e,"H2",{class:!0});var ds=n(j);R=o(ds,"A",{id:!0,class:!0,href:!0});var Co=n(R);dt=o(Co,"SPAN",{});var Ao=n(dt);u(de.$$.fragment,Ao),Ao.forEach(s),Co.forEach(s),Is=d(ds),ht=o(ds,"SPAN",{});var So=n(ht);Fs=l(So,"Overview"),So.forEach(s),ds.forEach(s),Rt=d(e),O=o(e,"P",{});var hs=n(O);Gs=l(hs,"The XLM-ProphetNet model was proposed in "),he=o(hs,"A",{href:!0,rel:!0});var Io=n(he);Bs=l(Io,"ProphetNet: Predicting Future N-gram for Sequence-to-Sequence Pre-training,"),Io.forEach(s),Rs=l(hs,` by Yu Yan, Weizhen Qi, Yeyun Gong, Dayiheng Liu, Nan Duan, Jiusheng Chen, Ruofei
Zhang, Ming Zhou on 13 Jan, 2020.`),hs.forEach(s),Ot=d(e),Ve=o(e,"P",{});var Fo=n(Ve);Os=l(Fo,`XLM-ProphetNet is an encoder-decoder model and can predict n-future tokens for \u201Cngram\u201D language modeling instead of
just the next token. Its architecture is identical to ProhpetNet, but the model was trained on the multi-lingual
\u201Cwiki100\u201D Wikipedia dump.`),Fo.forEach(s),Ht=d(e),We=o(e,"P",{});var Go=n(We);Hs=l(Go,"The abstract from the paper is the following:"),Go.forEach(s),Vt=d(e),Ue=o(e,"P",{});var Bo=n(Ue);ct=o(Bo,"EM",{});var Ro=n(ct);Vs=l(Ro,`In this paper, we present a new sequence-to-sequence pretraining model called ProphetNet, which introduces a novel
self-supervised objective named future n-gram prediction and the proposed n-stream self-attention mechanism. Instead of
the optimization of one-step ahead prediction in traditional sequence-to-sequence model, the ProphetNet is optimized by
n-step ahead prediction which predicts the next n tokens simultaneously based on previous context tokens at each time
step. The future n-gram prediction explicitly encourages the model to plan for the future tokens and prevent
overfitting on strong local correlations. We pre-train ProphetNet using a base scale dataset (16GB) and a large scale
dataset (160GB) respectively. Then we conduct experiments on CNN/DailyMail, Gigaword, and SQuAD 1.1 benchmarks for
abstractive summarization and question generation tasks. Experimental results show that ProphetNet achieves new
state-of-the-art results on all these datasets compared to the models using the same scale pretraining corpus.`),Ro.forEach(s),Bo.forEach(s),Wt=d(e),H=o(e,"P",{});var cs=n(H);Ws=l(cs,"The Authors\u2019 code can be found "),ce=o(cs,"A",{href:!0,rel:!0});var Oo=n(ce);Us=l(Oo,"here"),Oo.forEach(s),Ys=l(cs,"."),cs.forEach(s),Ut=d(e),z=o(e,"H2",{class:!0});var ms=n(z);V=o(ms,"A",{id:!0,class:!0,href:!0});var Ho=n(V);mt=o(Ho,"SPAN",{});var Vo=n(mt);u(me.$$.fragment,Vo),Vo.forEach(s),Ho.forEach(s),Js=d(ms),ut=o(ms,"SPAN",{});var Wo=n(ut);Qs=l(Wo,"XLMProphetNetConfig"),Wo.forEach(s),ms.forEach(s),Yt=d(e),T=o(e,"DIV",{class:!0});var us=n(T);u(ue.$$.fragment,us),Zs=d(us),fe=o(us,"P",{});var fs=n(fe);Ks=l(fs,"This class overrides "),Ye=o(fs,"A",{href:!0});var Uo=n(Ye);er=l(Uo,"ProphetNetConfig"),Uo.forEach(s),tr=l(fs,`. Please check the superclass for the appropriate documentation alongside
usage examples.`),fs.forEach(s),us.forEach(s),Jt=d(e),D=o(e,"H2",{class:!0});var gs=n(D);W=o(gs,"A",{id:!0,class:!0,href:!0});var Yo=n(W);ft=o(Yo,"SPAN",{});var Jo=n(ft);u(ge.$$.fragment,Jo),Jo.forEach(s),Yo.forEach(s),sr=d(gs),gt=o(gs,"SPAN",{});var Qo=n(gt);rr=l(Qo,"XLMProphetNetTokenizer"),Qo.forEach(s),gs.forEach(s),Qt=d(e),v=o(e,"DIV",{class:!0});var b=n(v);u(_e.$$.fragment,b),or=d(b),M=o(b,"P",{});var se=n(M);nr=l(se,"Adapted from "),Je=o(se,"A",{href:!0});var Zo=n(Je);ar=l(Zo,"RobertaTokenizer"),Zo.forEach(s),ir=l(se," and "),Qe=o(se,"A",{href:!0});var Ko=n(Qe);lr=l(Ko,"XLNetTokenizer"),Ko.forEach(s),pr=l(se,`. Based on
`),ke=o(se,"A",{href:!0,rel:!0});var en=n(ke);dr=l(en,"SentencePiece"),en.forEach(s),hr=l(se,"."),se.forEach(s),cr=d(b),ve=o(b,"P",{});var _s=n(ve);mr=l(_s,"This tokenizer inherits from "),Ze=o(_s,"A",{href:!0});var tn=n(Ze);ur=l(tn,"PreTrainedTokenizer"),tn.forEach(s),fr=l(_s,` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),_s.forEach(s),gr=d(b),y=o(b,"DIV",{class:!0});var at=n(y);u(be.$$.fragment,at),_r=d(at),_t=o(at,"P",{});var sn=n(_t);kr=l(sn,`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A XLMProphetNet sequence has the following format:`),sn.forEach(s),vr=d(at),Pe=o(at,"UL",{});var ks=n(Pe);Ke=o(ks,"LI",{});var yo=n(Ke);br=l(yo,"single sequence: "),kt=o(yo,"CODE",{});var rn=n(kt);Pr=l(rn,"X [SEP]"),rn.forEach(s),yo.forEach(s),wr=d(ks),et=o(ks,"LI",{});var Eo=n(et);Nr=l(Eo,"pair of sequences: "),vt=o(Eo,"CODE",{});var on=n(vt);$r=l(on,"A [SEP] B [SEP]"),on.forEach(s),Eo.forEach(s),ks.forEach(s),at.forEach(s),Lr=d(b),U=o(b,"DIV",{class:!0});var vs=n(U);u(we.$$.fragment,vs),Mr=d(vs),bt=o(vs,"P",{});var nn=n(bt);qr=l(nn,"Converts a sequence of tokens (strings for sub-words) in a single string."),nn.forEach(s),vs.forEach(s),yr=d(b),Y=o(b,"DIV",{class:!0});var bs=n(Y);u(Ne.$$.fragment,bs),Er=d(bs),Pt=o(bs,"P",{});var an=n(Pt);xr=l(an,`Create a mask from the two sequences passed to be used in a sequence-pair classification task. XLMProphetNet
does not make use of token type ids, therefore a list of zeros is returned.`),an.forEach(s),bs.forEach(s),Xr=d(b),J=o(b,"DIV",{class:!0});var Ps=n(J);u($e.$$.fragment,Ps),jr=d(Ps),Le=o(Ps,"P",{});var ws=n(Le);zr=l(ws,`Retrieve sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer `),wt=o(ws,"CODE",{});var ln=n(wt);Tr=l(ln,"prepare_for_model"),ln.forEach(s),Dr=l(ws," method."),ws.forEach(s),Ps.forEach(s),b.forEach(s),Zt=d(e),C=o(e,"H2",{class:!0});var Ns=n(C);Q=o(Ns,"A",{id:!0,class:!0,href:!0});var pn=n(Q);Nt=o(pn,"SPAN",{});var dn=n(Nt);u(Me.$$.fragment,dn),dn.forEach(s),pn.forEach(s),Cr=d(Ns),$t=o(Ns,"SPAN",{});var hn=n($t);Ar=l(hn,"XLMProphetNetModel"),hn.forEach(s),Ns.forEach(s),Kt=d(e),P=o(e,"DIV",{class:!0});var re=n(P);u(qe.$$.fragment,re),Sr=d(re),ye=o(re,"P",{});var $s=n(ye);Ir=l($s,"This class overrides "),tt=o($s,"A",{href:!0});var cn=n(tt);Fr=l(cn,"ProphetNetModel"),cn.forEach(s),Gr=l($s,`. Please check the superclass for the appropriate documentation alongside
usage examples.`),$s.forEach(s),Br=d(re),Lt=o(re,"P",{});var mn=n(Lt);Rr=l(mn,"Example:"),mn.forEach(s),Or=d(re),u(Ee.$$.fragment,re),re.forEach(s),es=d(e),A=o(e,"H2",{class:!0});var Ls=n(A);Z=o(Ls,"A",{id:!0,class:!0,href:!0});var un=n(Z);Mt=o(un,"SPAN",{});var fn=n(Mt);u(xe.$$.fragment,fn),fn.forEach(s),un.forEach(s),Hr=d(Ls),qt=o(Ls,"SPAN",{});var gn=n(qt);Vr=l(gn,"XLMProphetNetEncoder"),gn.forEach(s),Ls.forEach(s),ts=d(e),w=o(e,"DIV",{class:!0});var oe=n(w);u(Xe.$$.fragment,oe),Wr=d(oe),je=o(oe,"P",{});var Ms=n(je);Ur=l(Ms,"This class overrides "),st=o(Ms,"A",{href:!0});var _n=n(st);Yr=l(_n,"ProphetNetEncoder"),_n.forEach(s),Jr=l(Ms,`. Please check the superclass for the appropriate documentation alongside
usage examples.`),Ms.forEach(s),Qr=d(oe),yt=o(oe,"P",{});var kn=n(yt);Zr=l(kn,"Example:"),kn.forEach(s),Kr=d(oe),u(ze.$$.fragment,oe),oe.forEach(s),ss=d(e),S=o(e,"H2",{class:!0});var qs=n(S);K=o(qs,"A",{id:!0,class:!0,href:!0});var vn=n(K);Et=o(vn,"SPAN",{});var bn=n(Et);u(Te.$$.fragment,bn),bn.forEach(s),vn.forEach(s),eo=d(qs),xt=o(qs,"SPAN",{});var Pn=n(xt);to=l(Pn,"XLMProphetNetDecoder"),Pn.forEach(s),qs.forEach(s),rs=d(e),N=o(e,"DIV",{class:!0});var ne=n(N);u(De.$$.fragment,ne),so=d(ne),Ce=o(ne,"P",{});var ys=n(Ce);ro=l(ys,"This class overrides "),rt=o(ys,"A",{href:!0});var wn=n(rt);oo=l(wn,"ProphetNetDecoder"),wn.forEach(s),no=l(ys,`. Please check the superclass for the appropriate documentation alongside
usage examples.`),ys.forEach(s),ao=d(ne),Xt=o(ne,"P",{});var Nn=n(Xt);io=l(Nn,"Example:"),Nn.forEach(s),lo=d(ne),u(Ae.$$.fragment,ne),ne.forEach(s),os=d(e),I=o(e,"H2",{class:!0});var Es=n(I);ee=o(Es,"A",{id:!0,class:!0,href:!0});var $n=n(ee);jt=o($n,"SPAN",{});var Ln=n(jt);u(Se.$$.fragment,Ln),Ln.forEach(s),$n.forEach(s),po=d(Es),zt=o(Es,"SPAN",{});var Mn=n(zt);ho=l(Mn,"XLMProphetNetForConditionalGeneration"),Mn.forEach(s),Es.forEach(s),ns=d(e),$=o(e,"DIV",{class:!0});var ae=n($);u(Ie.$$.fragment,ae),co=d(ae),Fe=o(ae,"P",{});var xs=n(Fe);mo=l(xs,"This class overrides "),ot=o(xs,"A",{href:!0});var qn=n(ot);uo=l(qn,"ProphetNetForConditionalGeneration"),qn.forEach(s),fo=l(xs,`. Please check the superclass for the appropriate
documentation alongside usage examples.`),xs.forEach(s),go=d(ae),Tt=o(ae,"P",{});var yn=n(Tt);_o=l(yn,"Example:"),yn.forEach(s),ko=d(ae),u(Ge.$$.fragment,ae),ae.forEach(s),as=d(e),F=o(e,"H2",{class:!0});var Xs=n(F);te=o(Xs,"A",{id:!0,class:!0,href:!0});var En=n(te);Dt=o(En,"SPAN",{});var xn=n(Dt);u(Be.$$.fragment,xn),xn.forEach(s),En.forEach(s),vo=d(Xs),Ct=o(Xs,"SPAN",{});var Xn=n(Ct);bo=l(Xn,"XLMProphetNetForCausalLM"),Xn.forEach(s),Xs.forEach(s),is=d(e),L=o(e,"DIV",{class:!0});var ie=n(L);u(Re.$$.fragment,ie),Po=d(ie),Oe=o(ie,"P",{});var js=n(Oe);wo=l(js,"This class overrides "),nt=o(js,"A",{href:!0});var jn=n(nt);No=l(jn,"ProphetNetForCausalLM"),jn.forEach(s),$o=l(js,`. Please check the superclass for the appropriate documentation
alongside usage examples.`),js.forEach(s),Lo=d(ie),At=o(ie,"P",{});var zn=n(At);Mo=l(zn,"Example:"),zn.forEach(s),qo=d(ie),u(He.$$.fragment,ie),ie.forEach(s),this.h()},h(){a(E,"name","hf:doc:metadata"),a(E,"content",JSON.stringify(Gn)),a(B,"id","xlmprophetnet"),a(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(B,"href","#xlmprophetnet"),a(x,"class","relative group"),a(pe,"href","https://github.com/huggingface/transformers/issues/new?assignees=&labels=&template=bug-report.md&title"),a(pe,"rel","nofollow"),a(R,"id","overview"),a(R,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(R,"href","#overview"),a(j,"class","relative group"),a(he,"href","https://arxiv.org/abs/2001.04063"),a(he,"rel","nofollow"),a(ce,"href","https://github.com/microsoft/ProphetNet"),a(ce,"rel","nofollow"),a(V,"id","transformers.XLMProphetNetConfig"),a(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(V,"href","#transformers.XLMProphetNetConfig"),a(z,"class","relative group"),a(Ye,"href","/docs/transformers/pr_16825/en/model_doc/prophetnet#transformers.ProphetNetConfig"),a(T,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(W,"id","transformers.XLMProphetNetTokenizer"),a(W,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(W,"href","#transformers.XLMProphetNetTokenizer"),a(D,"class","relative group"),a(Je,"href","/docs/transformers/pr_16825/en/model_doc/roberta#transformers.RobertaTokenizer"),a(Qe,"href","/docs/transformers/pr_16825/en/model_doc/xlnet#transformers.XLNetTokenizer"),a(ke,"href","https://github.com/google/sentencepiece"),a(ke,"rel","nofollow"),a(Ze,"href","/docs/transformers/pr_16825/en/main_classes/tokenizer#transformers.PreTrainedTokenizer"),a(y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(v,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(Q,"id","transformers.XLMProphetNetModel"),a(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(Q,"href","#transformers.XLMProphetNetModel"),a(C,"class","relative group"),a(tt,"href","/docs/transformers/pr_16825/en/model_doc/prophetnet#transformers.ProphetNetModel"),a(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(Z,"id","transformers.XLMProphetNetEncoder"),a(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(Z,"href","#transformers.XLMProphetNetEncoder"),a(A,"class","relative group"),a(st,"href","/docs/transformers/pr_16825/en/model_doc/prophetnet#transformers.ProphetNetEncoder"),a(w,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(K,"id","transformers.XLMProphetNetDecoder"),a(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(K,"href","#transformers.XLMProphetNetDecoder"),a(S,"class","relative group"),a(rt,"href","/docs/transformers/pr_16825/en/model_doc/prophetnet#transformers.ProphetNetDecoder"),a(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(ee,"id","transformers.XLMProphetNetForConditionalGeneration"),a(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(ee,"href","#transformers.XLMProphetNetForConditionalGeneration"),a(I,"class","relative group"),a(ot,"href","/docs/transformers/pr_16825/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),a($,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(te,"id","transformers.XLMProphetNetForCausalLM"),a(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(te,"href","#transformers.XLMProphetNetForCausalLM"),a(F,"class","relative group"),a(nt,"href","/docs/transformers/pr_16825/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),a(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,h){t(document.head,E),c(e,Ft,h),c(e,x,h),t(x,B),t(B,it),f(le,it,null),t(x,zs),t(x,lt),t(lt,Ts),c(e,Gt,h),c(e,X,h),t(X,pt),t(pt,Ds),t(X,Cs),t(X,pe),t(pe,As),t(X,Ss),c(e,Bt,h),c(e,j,h),t(j,R),t(R,dt),f(de,dt,null),t(j,Is),t(j,ht),t(ht,Fs),c(e,Rt,h),c(e,O,h),t(O,Gs),t(O,he),t(he,Bs),t(O,Rs),c(e,Ot,h),c(e,Ve,h),t(Ve,Os),c(e,Ht,h),c(e,We,h),t(We,Hs),c(e,Vt,h),c(e,Ue,h),t(Ue,ct),t(ct,Vs),c(e,Wt,h),c(e,H,h),t(H,Ws),t(H,ce),t(ce,Us),t(H,Ys),c(e,Ut,h),c(e,z,h),t(z,V),t(V,mt),f(me,mt,null),t(z,Js),t(z,ut),t(ut,Qs),c(e,Yt,h),c(e,T,h),f(ue,T,null),t(T,Zs),t(T,fe),t(fe,Ks),t(fe,Ye),t(Ye,er),t(fe,tr),c(e,Jt,h),c(e,D,h),t(D,W),t(W,ft),f(ge,ft,null),t(D,sr),t(D,gt),t(gt,rr),c(e,Qt,h),c(e,v,h),f(_e,v,null),t(v,or),t(v,M),t(M,nr),t(M,Je),t(Je,ar),t(M,ir),t(M,Qe),t(Qe,lr),t(M,pr),t(M,ke),t(ke,dr),t(M,hr),t(v,cr),t(v,ve),t(ve,mr),t(ve,Ze),t(Ze,ur),t(ve,fr),t(v,gr),t(v,y),f(be,y,null),t(y,_r),t(y,_t),t(_t,kr),t(y,vr),t(y,Pe),t(Pe,Ke),t(Ke,br),t(Ke,kt),t(kt,Pr),t(Pe,wr),t(Pe,et),t(et,Nr),t(et,vt),t(vt,$r),t(v,Lr),t(v,U),f(we,U,null),t(U,Mr),t(U,bt),t(bt,qr),t(v,yr),t(v,Y),f(Ne,Y,null),t(Y,Er),t(Y,Pt),t(Pt,xr),t(v,Xr),t(v,J),f($e,J,null),t(J,jr),t(J,Le),t(Le,zr),t(Le,wt),t(wt,Tr),t(Le,Dr),c(e,Zt,h),c(e,C,h),t(C,Q),t(Q,Nt),f(Me,Nt,null),t(C,Cr),t(C,$t),t($t,Ar),c(e,Kt,h),c(e,P,h),f(qe,P,null),t(P,Sr),t(P,ye),t(ye,Ir),t(ye,tt),t(tt,Fr),t(ye,Gr),t(P,Br),t(P,Lt),t(Lt,Rr),t(P,Or),f(Ee,P,null),c(e,es,h),c(e,A,h),t(A,Z),t(Z,Mt),f(xe,Mt,null),t(A,Hr),t(A,qt),t(qt,Vr),c(e,ts,h),c(e,w,h),f(Xe,w,null),t(w,Wr),t(w,je),t(je,Ur),t(je,st),t(st,Yr),t(je,Jr),t(w,Qr),t(w,yt),t(yt,Zr),t(w,Kr),f(ze,w,null),c(e,ss,h),c(e,S,h),t(S,K),t(K,Et),f(Te,Et,null),t(S,eo),t(S,xt),t(xt,to),c(e,rs,h),c(e,N,h),f(De,N,null),t(N,so),t(N,Ce),t(Ce,ro),t(Ce,rt),t(rt,oo),t(Ce,no),t(N,ao),t(N,Xt),t(Xt,io),t(N,lo),f(Ae,N,null),c(e,os,h),c(e,I,h),t(I,ee),t(ee,jt),f(Se,jt,null),t(I,po),t(I,zt),t(zt,ho),c(e,ns,h),c(e,$,h),f(Ie,$,null),t($,co),t($,Fe),t(Fe,mo),t(Fe,ot),t(ot,uo),t(Fe,fo),t($,go),t($,Tt),t(Tt,_o),t($,ko),f(Ge,$,null),c(e,as,h),c(e,F,h),t(F,te),t(te,Dt),f(Be,Dt,null),t(F,vo),t(F,Ct),t(Ct,bo),c(e,is,h),c(e,L,h),f(Re,L,null),t(L,Po),t(L,Oe),t(Oe,wo),t(Oe,nt),t(nt,No),t(Oe,$o),t(L,Lo),t(L,At),t(At,Mo),t(L,qo),f(He,L,null),ls=!0},p:Sn,i(e){ls||(g(le.$$.fragment,e),g(de.$$.fragment,e),g(me.$$.fragment,e),g(ue.$$.fragment,e),g(ge.$$.fragment,e),g(_e.$$.fragment,e),g(be.$$.fragment,e),g(we.$$.fragment,e),g(Ne.$$.fragment,e),g($e.$$.fragment,e),g(Me.$$.fragment,e),g(qe.$$.fragment,e),g(Ee.$$.fragment,e),g(xe.$$.fragment,e),g(Xe.$$.fragment,e),g(ze.$$.fragment,e),g(Te.$$.fragment,e),g(De.$$.fragment,e),g(Ae.$$.fragment,e),g(Se.$$.fragment,e),g(Ie.$$.fragment,e),g(Ge.$$.fragment,e),g(Be.$$.fragment,e),g(Re.$$.fragment,e),g(He.$$.fragment,e),ls=!0)},o(e){_(le.$$.fragment,e),_(de.$$.fragment,e),_(me.$$.fragment,e),_(ue.$$.fragment,e),_(ge.$$.fragment,e),_(_e.$$.fragment,e),_(be.$$.fragment,e),_(we.$$.fragment,e),_(Ne.$$.fragment,e),_($e.$$.fragment,e),_(Me.$$.fragment,e),_(qe.$$.fragment,e),_(Ee.$$.fragment,e),_(xe.$$.fragment,e),_(Xe.$$.fragment,e),_(ze.$$.fragment,e),_(Te.$$.fragment,e),_(De.$$.fragment,e),_(Ae.$$.fragment,e),_(Se.$$.fragment,e),_(Ie.$$.fragment,e),_(Ge.$$.fragment,e),_(Be.$$.fragment,e),_(Re.$$.fragment,e),_(He.$$.fragment,e),ls=!1},d(e){s(E),e&&s(Ft),e&&s(x),k(le),e&&s(Gt),e&&s(X),e&&s(Bt),e&&s(j),k(de),e&&s(Rt),e&&s(O),e&&s(Ot),e&&s(Ve),e&&s(Ht),e&&s(We),e&&s(Vt),e&&s(Ue),e&&s(Wt),e&&s(H),e&&s(Ut),e&&s(z),k(me),e&&s(Yt),e&&s(T),k(ue),e&&s(Jt),e&&s(D),k(ge),e&&s(Qt),e&&s(v),k(_e),k(be),k(we),k(Ne),k($e),e&&s(Zt),e&&s(C),k(Me),e&&s(Kt),e&&s(P),k(qe),k(Ee),e&&s(es),e&&s(A),k(xe),e&&s(ts),e&&s(w),k(Xe),k(ze),e&&s(ss),e&&s(S),k(Te),e&&s(rs),e&&s(N),k(De),k(Ae),e&&s(os),e&&s(I),k(Se),e&&s(ns),e&&s($),k(Ie),k(Ge),e&&s(as),e&&s(F),k(Be),e&&s(is),e&&s(L),k(Re),k(He)}}}const Gn={local:"xlmprophetnet",sections:[{local:"overview",title:"Overview"},{local:"transformers.XLMProphetNetConfig",title:"XLMProphetNetConfig"},{local:"transformers.XLMProphetNetTokenizer",title:"XLMProphetNetTokenizer"},{local:"transformers.XLMProphetNetModel",title:"XLMProphetNetModel"},{local:"transformers.XLMProphetNetEncoder",title:"XLMProphetNetEncoder"},{local:"transformers.XLMProphetNetDecoder",title:"XLMProphetNetDecoder"},{local:"transformers.XLMProphetNetForConditionalGeneration",title:"XLMProphetNetForConditionalGeneration"},{local:"transformers.XLMProphetNetForCausalLM",title:"XLMProphetNetForCausalLM"}],title:"XLM-ProphetNet"};function Bn(xo){return In(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Wn extends Tn{constructor(E){super();Dn(this,E,Bn,Fn,Cn,{})}}export{Wn as default,Gn as metadata};
