import{S as UFt,i as JFt,s as YFt,e as a,k as l,w as f,t as o,M as KFt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as ZFt}from"../../chunks/vendor-6b77c823.js";import{T as Vkr}from"../../chunks/Tip-39098574.js";import{D as M}from"../../chunks/Docstring-abef54e3.js";import{C as w}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as V}from"../../chunks/IconCopyLink-7a11ce68.js";function eCt($f){let Z,io,de,Ee,lo,me,Ce,Vo,Ii,If,fa,ji,Ni,dE,jf,Be,co,Di,Gn,cE,On,Xn,fE,qi,Vn,mE,Gi,Nf,qa;return{c(){Z=a("p"),io=o("If your "),de=a("code"),Ee=o("NewModelConfig"),lo=o(" is a subclass of "),me=a("code"),Ce=o("PretrainedConfig"),Vo=o(`, make sure its
`),Ii=a("code"),If=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),ji=a("code"),Ni=o('"new-model"'),dE=o(")."),jf=l(),Be=a("p"),co=o("Likewise, if your "),Di=a("code"),Gn=o("NewModel"),cE=o(" is a subclass of "),On=a("a"),Xn=o("PreTrainedModel"),fE=o(`, make sure its
`),qi=a("code"),Vn=o("config_class"),mE=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),Nf=o("NewModelConfig"),qa=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var _e=s(Z);io=r(_e,"If your "),de=n(_e,"CODE",{});var r9=s(de);Ee=r(r9,"NewModelConfig"),r9.forEach(t),lo=r(_e," is a subclass of "),me=n(_e,"CODE",{});var Oi=s(me);Ce=r(Oi,"PretrainedConfig"),Oi.forEach(t),Vo=r(_e,`, make sure its
`),Ii=n(_e,"CODE",{});var t9=s(Ii);If=r(t9,"model_type"),t9.forEach(t),fa=r(_e," attribute is set to the same key you use when registering the config (here "),ji=n(_e,"CODE",{});var a9=s(ji);Ni=r(a9,'"new-model"'),a9.forEach(t),dE=r(_e,")."),_e.forEach(t),jf=i(fo),Be=n(fo,"P",{});var zo=s(Be);co=r(zo,"Likewise, if your "),Di=n(zo,"CODE",{});var Ga=s(Di);Gn=r(Ga,"NewModel"),Ga.forEach(t),cE=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var n9=s(On);Xn=r(n9,"PreTrainedModel"),n9.forEach(t),fE=r(zo,`, make sure its
`),qi=n(zo,"CODE",{});var Df=s(qi);Vn=r(Df,"config_class"),Df.forEach(t),mE=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var s9=s(Gi);Nf=r(s9,"NewModelConfig"),s9.forEach(t),qa=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel")},m(fo,_e){b(fo,Z,_e),e(Z,io),e(Z,de),e(de,Ee),e(Z,lo),e(Z,me),e(me,Ce),e(Z,Vo),e(Z,Ii),e(Ii,If),e(Z,fa),e(Z,ji),e(ji,Ni),e(Z,dE),b(fo,jf,_e),b(fo,Be,_e),e(Be,co),e(Be,Di),e(Di,Gn),e(Be,cE),e(Be,On),e(On,Xn),e(Be,fE),e(Be,qi),e(qi,Vn),e(Be,mE),e(Be,Gi),e(Gi,Nf),e(Be,qa)},d(fo){fo&&t(Z),fo&&t(jf),fo&&t(Be)}}}function oCt($f){let Z,io,de,Ee,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ee=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Ce=s(Z);io=r(Ce,"Passing "),de=n(Ce,"CODE",{});var Vo=s(de);Ee=r(Vo,"use_auth_token=True"),Vo.forEach(t),lo=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(me,Ce){b(me,Z,Ce),e(Z,io),e(Z,de),e(de,Ee),e(Z,lo)},d(me){me&&t(Z)}}}function rCt($f){let Z,io,de,Ee,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ee=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Ce=s(Z);io=r(Ce,"Passing "),de=n(Ce,"CODE",{});var Vo=s(de);Ee=r(Vo,"use_auth_token=True"),Vo.forEach(t),lo=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(me,Ce){b(me,Z,Ce),e(Z,io),e(Z,de),e(de,Ee),e(Z,lo)},d(me){me&&t(Z)}}}function tCt($f){let Z,io,de,Ee,lo,me,Ce,Vo,Ii,If,fa,ji,Ni,dE,jf,Be,co,Di,Gn,cE,On,Xn,fE,qi,Vn,mE,Gi,Nf,qa,fo,_e,r9,Oi,t9,a9,zo,Ga,n9,Df,s9,x$e,_ke,Xi,qf,WQ,gE,k$e,QQ,R$e,uke,zn,S$e,HQ,P$e,$$e,UQ,I$e,j$e,bke,hE,vke,l9,N$e,Tke,Gf,Fke,Vi,Of,JQ,pE,D$e,YQ,q$e,Cke,Wo,_E,G$e,uE,O$e,i9,X$e,V$e,z$e,bE,W$e,KQ,Q$e,H$e,U$e,mo,vE,J$e,ZQ,Y$e,K$e,zi,Z$e,eH,eIe,oIe,oH,rIe,tIe,aIe,v,Xf,rH,nIe,sIe,d9,lIe,iIe,dIe,Vf,tH,cIe,fIe,c9,mIe,gIe,hIe,zf,aH,pIe,_Ie,f9,uIe,bIe,vIe,Wf,nH,TIe,FIe,m9,CIe,MIe,EIe,Qf,sH,yIe,wIe,g9,AIe,LIe,BIe,Hf,lH,xIe,kIe,h9,RIe,SIe,PIe,Uf,iH,$Ie,IIe,p9,jIe,NIe,DIe,Jf,dH,qIe,GIe,_9,OIe,XIe,VIe,Yf,cH,zIe,WIe,u9,QIe,HIe,UIe,Kf,fH,JIe,YIe,b9,KIe,ZIe,eje,Zf,mH,oje,rje,v9,tje,aje,nje,em,gH,sje,lje,T9,ije,dje,cje,om,hH,fje,mje,F9,gje,hje,pje,rm,pH,_je,uje,C9,bje,vje,Tje,tm,_H,Fje,Cje,M9,Mje,Eje,yje,am,uH,wje,Aje,E9,Lje,Bje,xje,nm,bH,kje,Rje,y9,Sje,Pje,$je,sm,vH,Ije,jje,w9,Nje,Dje,qje,lm,TH,Gje,Oje,A9,Xje,Vje,zje,im,FH,Wje,Qje,L9,Hje,Uje,Jje,dm,CH,Yje,Kje,B9,Zje,eNe,oNe,cm,MH,rNe,tNe,x9,aNe,nNe,sNe,fm,EH,lNe,iNe,k9,dNe,cNe,fNe,mm,yH,mNe,gNe,R9,hNe,pNe,_Ne,gm,wH,uNe,bNe,S9,vNe,TNe,FNe,hm,AH,CNe,MNe,P9,ENe,yNe,wNe,pm,LH,ANe,LNe,$9,BNe,xNe,kNe,_m,BH,RNe,SNe,I9,PNe,$Ne,INe,um,xH,jNe,NNe,j9,DNe,qNe,GNe,bm,kH,ONe,XNe,N9,VNe,zNe,WNe,vm,RH,QNe,HNe,D9,UNe,JNe,YNe,Tm,SH,KNe,ZNe,q9,eDe,oDe,rDe,Fm,PH,tDe,aDe,G9,nDe,sDe,lDe,Cm,$H,iDe,dDe,O9,cDe,fDe,mDe,Mm,IH,gDe,hDe,X9,pDe,_De,uDe,Em,jH,bDe,vDe,V9,TDe,FDe,CDe,ym,NH,MDe,EDe,z9,yDe,wDe,ADe,wm,DH,LDe,BDe,W9,xDe,kDe,RDe,Am,qH,SDe,PDe,Q9,$De,IDe,jDe,Lm,GH,NDe,DDe,H9,qDe,GDe,ODe,Bm,OH,XDe,VDe,U9,zDe,WDe,QDe,xm,XH,HDe,UDe,J9,JDe,YDe,KDe,km,VH,ZDe,eqe,Y9,oqe,rqe,tqe,Rm,zH,aqe,nqe,K9,sqe,lqe,iqe,Sm,WH,dqe,cqe,Z9,fqe,mqe,gqe,Pm,QH,hqe,pqe,eB,_qe,uqe,bqe,$m,HH,vqe,Tqe,oB,Fqe,Cqe,Mqe,Im,UH,Eqe,yqe,rB,wqe,Aqe,Lqe,jm,JH,Bqe,xqe,tB,kqe,Rqe,Sqe,Nm,YH,Pqe,$qe,aB,Iqe,jqe,Nqe,Dm,KH,Dqe,qqe,nB,Gqe,Oqe,Xqe,qm,ZH,Vqe,zqe,sB,Wqe,Qqe,Hqe,Gm,eU,Uqe,Jqe,lB,Yqe,Kqe,Zqe,Om,oU,eGe,oGe,iB,rGe,tGe,aGe,Xm,rU,nGe,sGe,dB,lGe,iGe,dGe,Vm,tU,cGe,fGe,cB,mGe,gGe,hGe,zm,aU,pGe,_Ge,fB,uGe,bGe,vGe,Wm,nU,TGe,FGe,mB,CGe,MGe,EGe,Qm,sU,yGe,wGe,gB,AGe,LGe,BGe,Hm,lU,xGe,kGe,hB,RGe,SGe,PGe,Um,iU,$Ge,IGe,pB,jGe,NGe,DGe,Jm,dU,qGe,GGe,_B,OGe,XGe,VGe,Ym,cU,zGe,WGe,uB,QGe,HGe,UGe,Km,fU,JGe,YGe,bB,KGe,ZGe,eOe,Zm,mU,oOe,rOe,vB,tOe,aOe,nOe,eg,gU,sOe,lOe,TB,iOe,dOe,cOe,og,hU,fOe,mOe,FB,gOe,hOe,pOe,rg,pU,_Oe,uOe,CB,bOe,vOe,TOe,tg,_U,FOe,COe,MB,MOe,EOe,yOe,ag,uU,wOe,AOe,EB,LOe,BOe,xOe,ng,bU,kOe,ROe,yB,SOe,POe,$Oe,sg,vU,IOe,jOe,wB,NOe,DOe,qOe,lg,TU,GOe,OOe,AB,XOe,VOe,zOe,ig,FU,WOe,QOe,LB,HOe,UOe,JOe,dg,CU,YOe,KOe,BB,ZOe,eXe,oXe,cg,MU,rXe,tXe,xB,aXe,nXe,sXe,fg,EU,lXe,iXe,kB,dXe,cXe,fXe,mg,yU,mXe,gXe,RB,hXe,pXe,_Xe,gg,wU,uXe,bXe,SB,vXe,TXe,FXe,hg,AU,CXe,MXe,PB,EXe,yXe,wXe,pg,LU,AXe,LXe,$B,BXe,xXe,kXe,_g,BU,RXe,SXe,IB,PXe,$Xe,IXe,ug,xU,jXe,NXe,jB,DXe,qXe,GXe,bg,kU,OXe,XXe,NB,VXe,zXe,WXe,vg,RU,QXe,HXe,DB,UXe,JXe,YXe,Tg,SU,KXe,ZXe,qB,eVe,oVe,rVe,Fg,PU,tVe,aVe,GB,nVe,sVe,lVe,Cg,$U,iVe,dVe,OB,cVe,fVe,mVe,Mg,IU,gVe,hVe,XB,pVe,_Ve,uVe,Eg,jU,bVe,vVe,VB,TVe,FVe,CVe,yg,NU,MVe,EVe,zB,yVe,wVe,AVe,wg,DU,LVe,BVe,WB,xVe,kVe,RVe,Ag,qU,SVe,PVe,QB,$Ve,IVe,jVe,Lg,GU,NVe,DVe,HB,qVe,GVe,OVe,Bg,OU,XVe,VVe,UB,zVe,WVe,QVe,xg,XU,HVe,UVe,JB,JVe,YVe,KVe,kg,VU,ZVe,eze,YB,oze,rze,tze,Rg,zU,aze,nze,KB,sze,lze,ize,WU,dze,cze,TE,fze,Sg,FE,mze,QU,gze,Mke,Wi,Pg,HU,CE,hze,UU,pze,Eke,Qo,ME,_ze,EE,uze,ZB,bze,vze,Tze,yE,Fze,JU,Cze,Mze,Eze,go,wE,yze,YU,wze,Aze,Oa,Lze,KU,Bze,xze,ZU,kze,Rze,eJ,Sze,Pze,$ze,E,Wn,oJ,Ize,jze,ex,Nze,Dze,ox,qze,Gze,Oze,Qn,rJ,Xze,Vze,rx,zze,Wze,tx,Qze,Hze,Uze,Hn,tJ,Jze,Yze,ax,Kze,Zze,nx,eWe,oWe,rWe,$g,aJ,tWe,aWe,sx,nWe,sWe,lWe,Un,nJ,iWe,dWe,lx,cWe,fWe,ix,mWe,gWe,hWe,Ig,sJ,pWe,_We,dx,uWe,bWe,vWe,jg,lJ,TWe,FWe,cx,CWe,MWe,EWe,Ng,iJ,yWe,wWe,fx,AWe,LWe,BWe,Jn,dJ,xWe,kWe,mx,RWe,SWe,gx,PWe,$We,IWe,Yn,cJ,jWe,NWe,hx,DWe,qWe,px,GWe,OWe,XWe,Kn,fJ,VWe,zWe,_x,WWe,QWe,ux,HWe,UWe,JWe,Dg,mJ,YWe,KWe,bx,ZWe,eQe,oQe,qg,gJ,rQe,tQe,vx,aQe,nQe,sQe,Zn,hJ,lQe,iQe,Tx,dQe,cQe,Fx,fQe,mQe,gQe,Gg,pJ,hQe,pQe,Cx,_Qe,uQe,bQe,es,_J,vQe,TQe,Mx,FQe,CQe,Ex,MQe,EQe,yQe,os,uJ,wQe,AQe,yx,LQe,BQe,wx,xQe,kQe,RQe,rs,bJ,SQe,PQe,Ax,$Qe,IQe,vJ,jQe,NQe,DQe,Og,TJ,qQe,GQe,Lx,OQe,XQe,VQe,ts,FJ,zQe,WQe,Bx,QQe,HQe,xx,UQe,JQe,YQe,Xg,CJ,KQe,ZQe,kx,eHe,oHe,rHe,as,MJ,tHe,aHe,Rx,nHe,sHe,Sx,lHe,iHe,dHe,ns,EJ,cHe,fHe,Px,mHe,gHe,$x,hHe,pHe,_He,ss,yJ,uHe,bHe,Ix,vHe,THe,jx,FHe,CHe,MHe,Vg,wJ,EHe,yHe,Nx,wHe,AHe,LHe,ls,AJ,BHe,xHe,Dx,kHe,RHe,qx,SHe,PHe,$He,zg,LJ,IHe,jHe,Gx,NHe,DHe,qHe,is,BJ,GHe,OHe,Ox,XHe,VHe,Xx,zHe,WHe,QHe,ds,xJ,HHe,UHe,Vx,JHe,YHe,zx,KHe,ZHe,eUe,cs,kJ,oUe,rUe,Wx,tUe,aUe,Qx,nUe,sUe,lUe,fs,RJ,iUe,dUe,Hx,cUe,fUe,Ux,mUe,gUe,hUe,Wg,SJ,pUe,_Ue,Jx,uUe,bUe,vUe,ms,PJ,TUe,FUe,Yx,CUe,MUe,Kx,EUe,yUe,wUe,gs,$J,AUe,LUe,Zx,BUe,xUe,ek,kUe,RUe,SUe,hs,IJ,PUe,$Ue,ok,IUe,jUe,rk,NUe,DUe,qUe,ps,jJ,GUe,OUe,tk,XUe,VUe,ak,zUe,WUe,QUe,_s,NJ,HUe,UUe,nk,JUe,YUe,sk,KUe,ZUe,eJe,us,DJ,oJe,rJe,lk,tJe,aJe,ik,nJe,sJe,lJe,Qg,qJ,iJe,dJe,dk,cJe,fJe,mJe,bs,GJ,gJe,hJe,ck,pJe,_Je,fk,uJe,bJe,vJe,Hg,OJ,TJe,FJe,mk,CJe,MJe,EJe,Ug,XJ,yJe,wJe,gk,AJe,LJe,BJe,vs,VJ,xJe,kJe,hk,RJe,SJe,pk,PJe,$Je,IJe,Ts,zJ,jJe,NJe,_k,DJe,qJe,uk,GJe,OJe,XJe,Jg,WJ,VJe,zJe,bk,WJe,QJe,HJe,Fs,QJ,UJe,JJe,vk,YJe,KJe,Tk,ZJe,eYe,oYe,Cs,HJ,rYe,tYe,Fk,aYe,nYe,Ck,sYe,lYe,iYe,Ms,UJ,dYe,cYe,Mk,fYe,mYe,Ek,gYe,hYe,pYe,Es,JJ,_Ye,uYe,yk,bYe,vYe,wk,TYe,FYe,CYe,ys,YJ,MYe,EYe,Ak,yYe,wYe,Lk,AYe,LYe,BYe,Yg,KJ,xYe,kYe,Bk,RYe,SYe,PYe,Kg,ZJ,$Ye,IYe,xk,jYe,NYe,DYe,Zg,eY,qYe,GYe,kk,OYe,XYe,VYe,eh,oY,zYe,WYe,Rk,QYe,HYe,UYe,ws,rY,JYe,YYe,Sk,KYe,ZYe,Pk,eKe,oKe,rKe,oh,tY,tKe,aKe,$k,nKe,sKe,lKe,As,aY,iKe,dKe,Ik,cKe,fKe,jk,mKe,gKe,hKe,Ls,nY,pKe,_Ke,Nk,uKe,bKe,Dk,vKe,TKe,FKe,Bs,sY,CKe,MKe,qk,EKe,yKe,Gk,wKe,AKe,LKe,xs,lY,BKe,xKe,Ok,kKe,RKe,Xk,SKe,PKe,$Ke,ks,iY,IKe,jKe,Vk,NKe,DKe,zk,qKe,GKe,OKe,Rs,dY,XKe,VKe,Wk,zKe,WKe,Qk,QKe,HKe,UKe,rh,cY,JKe,YKe,Hk,KKe,ZKe,eZe,th,fY,oZe,rZe,Uk,tZe,aZe,nZe,Ss,mY,sZe,lZe,Jk,iZe,dZe,Yk,cZe,fZe,mZe,Ps,gY,gZe,hZe,Kk,pZe,_Ze,Zk,uZe,bZe,vZe,$s,hY,TZe,FZe,eR,CZe,MZe,oR,EZe,yZe,wZe,ah,pY,AZe,LZe,rR,BZe,xZe,kZe,nh,_Y,RZe,SZe,tR,PZe,$Ze,IZe,sh,uY,jZe,NZe,aR,DZe,qZe,GZe,lh,bY,OZe,XZe,nR,VZe,zZe,WZe,Is,vY,QZe,HZe,sR,UZe,JZe,lR,YZe,KZe,ZZe,ih,TY,eeo,oeo,iR,reo,teo,aeo,dh,FY,neo,seo,dR,leo,ieo,deo,js,CY,ceo,feo,cR,meo,geo,fR,heo,peo,_eo,Ns,MY,ueo,beo,mR,veo,Teo,gR,Feo,Ceo,Meo,EY,Eeo,yeo,AE,weo,ch,LE,Aeo,yY,Leo,yke,Qi,fh,wY,BE,Beo,AY,xeo,wke,Ho,xE,keo,kE,Reo,hR,Seo,Peo,$eo,RE,Ieo,LY,jeo,Neo,Deo,$e,SE,qeo,BY,Geo,Oeo,Xa,Xeo,xY,Veo,zeo,kY,Weo,Qeo,RY,Heo,Ueo,Jeo,te,mh,SY,Yeo,Keo,pR,Zeo,eoo,ooo,gh,PY,roo,too,_R,aoo,noo,soo,hh,$Y,loo,ioo,uR,doo,coo,foo,ph,IY,moo,goo,bR,hoo,poo,_oo,_h,jY,uoo,boo,vR,voo,Too,Foo,uh,NY,Coo,Moo,TR,Eoo,yoo,woo,bh,DY,Aoo,Loo,FR,Boo,xoo,koo,vh,qY,Roo,Soo,CR,Poo,$oo,Ioo,Th,GY,joo,Noo,MR,Doo,qoo,Goo,Fh,OY,Ooo,Xoo,ER,Voo,zoo,Woo,Ch,XY,Qoo,Hoo,yR,Uoo,Joo,Yoo,Mh,VY,Koo,Zoo,wR,ero,oro,rro,Eh,zY,tro,aro,AR,nro,sro,lro,yh,WY,iro,dro,LR,cro,fro,mro,wh,QY,gro,hro,BR,pro,_ro,uro,Ah,HY,bro,vro,xR,Tro,Fro,Cro,Lh,UY,Mro,Ero,kR,yro,wro,Aro,Bh,JY,Lro,Bro,RR,xro,kro,Rro,xh,Sro,YY,Pro,$ro,PE,Iro,kh,$E,jro,KY,Nro,Ake,Hi,Rh,ZY,IE,Dro,eK,qro,Lke,Uo,jE,Gro,NE,Oro,SR,Xro,Vro,zro,DE,Wro,oK,Qro,Hro,Uro,Ie,qE,Jro,rK,Yro,Kro,Ui,Zro,tK,eto,oto,aK,rto,tto,ato,xe,Sh,nK,nto,sto,PR,lto,ito,dto,Ph,sK,cto,fto,$R,mto,gto,hto,$h,lK,pto,_to,IR,uto,bto,vto,Ih,iK,Tto,Fto,jR,Cto,Mto,Eto,jh,dK,yto,wto,NR,Ato,Lto,Bto,Nh,cK,xto,kto,DR,Rto,Sto,Pto,Dh,fK,$to,Ito,qR,jto,Nto,Dto,qh,mK,qto,Gto,GR,Oto,Xto,Vto,Gh,zto,gK,Wto,Qto,GE,Hto,Oh,OE,Uto,hK,Jto,Bke,Ji,Xh,pK,XE,Yto,_K,Kto,xke,Jo,VE,Zto,Yi,eao,uK,oao,rao,bK,tao,aao,nao,zE,sao,vK,lao,iao,dao,Vr,WE,cao,TK,fao,mao,Ki,gao,FK,hao,pao,CK,_ao,uao,bao,MK,vao,Tao,QE,Fao,je,HE,Cao,EK,Mao,Eao,Va,yao,yK,wao,Aao,wK,Lao,Bao,AK,xao,kao,Rao,F,Vh,LK,Sao,Pao,OR,$ao,Iao,jao,zh,BK,Nao,Dao,XR,qao,Gao,Oao,Wh,xK,Xao,Vao,VR,zao,Wao,Qao,Qh,kK,Hao,Uao,zR,Jao,Yao,Kao,Hh,RK,Zao,eno,WR,ono,rno,tno,Uh,SK,ano,nno,QR,sno,lno,ino,Jh,PK,dno,cno,HR,fno,mno,gno,Yh,$K,hno,pno,UR,_no,uno,bno,Kh,IK,vno,Tno,JR,Fno,Cno,Mno,Zh,jK,Eno,yno,YR,wno,Ano,Lno,ep,NK,Bno,xno,KR,kno,Rno,Sno,op,DK,Pno,$no,ZR,Ino,jno,Nno,rp,qK,Dno,qno,eS,Gno,Ono,Xno,tp,GK,Vno,zno,oS,Wno,Qno,Hno,ap,OK,Uno,Jno,rS,Yno,Kno,Zno,np,XK,eso,oso,tS,rso,tso,aso,sp,VK,nso,sso,aS,lso,iso,dso,lp,zK,cso,fso,nS,mso,gso,hso,ip,WK,pso,_so,sS,uso,bso,vso,dp,QK,Tso,Fso,lS,Cso,Mso,Eso,cp,HK,yso,wso,iS,Aso,Lso,Bso,fp,UK,xso,kso,dS,Rso,Sso,Pso,mp,JK,$so,Iso,cS,jso,Nso,Dso,gp,YK,qso,Gso,fS,Oso,Xso,Vso,hp,KK,zso,Wso,mS,Qso,Hso,Uso,pp,ZK,Jso,Yso,gS,Kso,Zso,elo,_p,eZ,olo,rlo,hS,tlo,alo,nlo,up,oZ,slo,llo,pS,ilo,dlo,clo,Ds,rZ,flo,mlo,_S,glo,hlo,uS,plo,_lo,ulo,bp,tZ,blo,vlo,bS,Tlo,Flo,Clo,vp,aZ,Mlo,Elo,vS,ylo,wlo,Alo,Tp,nZ,Llo,Blo,TS,xlo,klo,Rlo,Fp,sZ,Slo,Plo,FS,$lo,Ilo,jlo,Cp,lZ,Nlo,Dlo,CS,qlo,Glo,Olo,Mp,iZ,Xlo,Vlo,MS,zlo,Wlo,Qlo,Ep,dZ,Hlo,Ulo,ES,Jlo,Ylo,Klo,yp,cZ,Zlo,eio,yS,oio,rio,tio,wp,fZ,aio,nio,wS,sio,lio,iio,Ap,mZ,dio,cio,AS,fio,mio,gio,Lp,gZ,hio,pio,LS,_io,uio,bio,Bp,hZ,vio,Tio,BS,Fio,Cio,Mio,xp,pZ,Eio,yio,xS,wio,Aio,Lio,kp,_Z,Bio,xio,kS,kio,Rio,Sio,Rp,uZ,Pio,$io,RS,Iio,jio,Nio,Sp,bZ,Dio,qio,SS,Gio,Oio,Xio,Pp,vZ,Vio,zio,PS,Wio,Qio,Hio,$p,TZ,Uio,Jio,$S,Yio,Kio,Zio,Ip,FZ,edo,odo,IS,rdo,tdo,ado,jp,CZ,ndo,sdo,jS,ldo,ido,ddo,Np,MZ,cdo,fdo,NS,mdo,gdo,hdo,Dp,EZ,pdo,_do,DS,udo,bdo,vdo,qp,yZ,Tdo,Fdo,qS,Cdo,Mdo,Edo,Gp,wZ,ydo,wdo,GS,Ado,Ldo,Bdo,Op,AZ,xdo,kdo,OS,Rdo,Sdo,Pdo,Xp,LZ,$do,Ido,XS,jdo,Ndo,Ddo,Vp,BZ,qdo,Gdo,VS,Odo,Xdo,Vdo,zp,xZ,zdo,Wdo,zS,Qdo,Hdo,Udo,Wp,kZ,Jdo,Ydo,WS,Kdo,Zdo,eco,Qp,RZ,oco,rco,QS,tco,aco,nco,Hp,SZ,sco,lco,HS,ico,dco,cco,Up,PZ,fco,mco,US,gco,hco,pco,Jp,$Z,_co,uco,JS,bco,vco,Tco,Yp,IZ,Fco,Cco,YS,Mco,Eco,yco,Kp,jZ,wco,Aco,KS,Lco,Bco,xco,Zp,NZ,kco,Rco,ZS,Sco,Pco,$co,e_,DZ,Ico,jco,eP,Nco,Dco,qco,o_,qZ,Gco,Oco,oP,Xco,Vco,zco,r_,GZ,Wco,Qco,rP,Hco,Uco,Jco,t_,OZ,Yco,Kco,tP,Zco,efo,ofo,a_,XZ,rfo,tfo,aP,afo,nfo,sfo,n_,VZ,lfo,ifo,nP,dfo,cfo,ffo,s_,zZ,mfo,gfo,sP,hfo,pfo,_fo,l_,WZ,ufo,bfo,lP,vfo,Tfo,Ffo,i_,QZ,Cfo,Mfo,iP,Efo,yfo,wfo,d_,HZ,Afo,Lfo,dP,Bfo,xfo,kfo,c_,UZ,Rfo,Sfo,cP,Pfo,$fo,Ifo,f_,JZ,jfo,Nfo,fP,Dfo,qfo,Gfo,m_,YZ,Ofo,Xfo,mP,Vfo,zfo,Wfo,g_,KZ,Qfo,Hfo,gP,Ufo,Jfo,Yfo,h_,ZZ,Kfo,Zfo,hP,emo,omo,rmo,p_,eee,tmo,amo,pP,nmo,smo,lmo,__,oee,imo,dmo,_P,cmo,fmo,mmo,u_,ree,gmo,hmo,uP,pmo,_mo,umo,b_,tee,bmo,vmo,bP,Tmo,Fmo,Cmo,v_,aee,Mmo,Emo,vP,ymo,wmo,Amo,T_,nee,Lmo,Bmo,TP,xmo,kmo,Rmo,F_,see,Smo,Pmo,FP,$mo,Imo,jmo,C_,lee,Nmo,Dmo,CP,qmo,Gmo,Omo,M_,iee,Xmo,Vmo,MP,zmo,Wmo,Qmo,E_,dee,Hmo,Umo,EP,Jmo,Ymo,Kmo,y_,cee,Zmo,ego,yP,ogo,rgo,tgo,w_,ago,fee,ngo,sgo,mee,lgo,igo,gee,dgo,cgo,UE,kke,Zi,A_,hee,JE,fgo,pee,mgo,Rke,Yo,YE,ggo,ed,hgo,_ee,pgo,_go,uee,ugo,bgo,vgo,KE,Tgo,bee,Fgo,Cgo,Mgo,zr,ZE,Ego,vee,ygo,wgo,od,Ago,Tee,Lgo,Bgo,Fee,xgo,kgo,Rgo,Cee,Sgo,Pgo,e3,$go,Ne,o3,Igo,Mee,jgo,Ngo,za,Dgo,Eee,qgo,Ggo,yee,Ogo,Xgo,wee,Vgo,zgo,Wgo,k,L_,Aee,Qgo,Hgo,wP,Ugo,Jgo,Ygo,B_,Lee,Kgo,Zgo,AP,eho,oho,rho,x_,Bee,tho,aho,LP,nho,sho,lho,k_,xee,iho,dho,BP,cho,fho,mho,R_,kee,gho,hho,xP,pho,_ho,uho,S_,Ree,bho,vho,kP,Tho,Fho,Cho,P_,See,Mho,Eho,RP,yho,who,Aho,$_,Pee,Lho,Bho,SP,xho,kho,Rho,I_,$ee,Sho,Pho,PP,$ho,Iho,jho,j_,Iee,Nho,Dho,$P,qho,Gho,Oho,N_,jee,Xho,Vho,IP,zho,Who,Qho,D_,Nee,Hho,Uho,jP,Jho,Yho,Kho,q_,Dee,Zho,epo,NP,opo,rpo,tpo,G_,qee,apo,npo,DP,spo,lpo,ipo,O_,Gee,dpo,cpo,qP,fpo,mpo,gpo,X_,Oee,hpo,ppo,GP,_po,upo,bpo,V_,Xee,vpo,Tpo,OP,Fpo,Cpo,Mpo,z_,Vee,Epo,ypo,XP,wpo,Apo,Lpo,W_,zee,Bpo,xpo,VP,kpo,Rpo,Spo,Q_,Wee,Ppo,$po,zP,Ipo,jpo,Npo,H_,Qee,Dpo,qpo,WP,Gpo,Opo,Xpo,U_,Hee,Vpo,zpo,QP,Wpo,Qpo,Hpo,J_,Uee,Upo,Jpo,HP,Ypo,Kpo,Zpo,Y_,Jee,e_o,o_o,UP,r_o,t_o,a_o,K_,Yee,n_o,s_o,JP,l_o,i_o,d_o,Z_,Kee,c_o,f_o,YP,m_o,g_o,h_o,eu,Zee,p_o,__o,KP,u_o,b_o,v_o,ou,eoe,T_o,F_o,ZP,C_o,M_o,E_o,ru,ooe,y_o,w_o,e$,A_o,L_o,B_o,tu,roe,x_o,k_o,o$,R_o,S_o,P_o,au,toe,$_o,I_o,r$,j_o,N_o,D_o,nu,aoe,q_o,G_o,t$,O_o,X_o,V_o,su,noe,z_o,W_o,a$,Q_o,H_o,U_o,lu,soe,J_o,Y_o,n$,K_o,Z_o,euo,iu,loe,ouo,ruo,s$,tuo,auo,nuo,du,ioe,suo,luo,l$,iuo,duo,cuo,cu,doe,fuo,muo,i$,guo,huo,puo,fu,coe,_uo,uuo,d$,buo,vuo,Tuo,mu,foe,Fuo,Cuo,c$,Muo,Euo,yuo,gu,wuo,moe,Auo,Luo,goe,Buo,xuo,hoe,kuo,Ruo,r3,Ske,rd,hu,poe,t3,Suo,_oe,Puo,Pke,Ko,a3,$uo,td,Iuo,uoe,juo,Nuo,boe,Duo,quo,Guo,n3,Ouo,voe,Xuo,Vuo,zuo,Wr,s3,Wuo,Toe,Quo,Huo,ad,Uuo,Foe,Juo,Yuo,Coe,Kuo,Zuo,e1o,Moe,o1o,r1o,l3,t1o,De,i3,a1o,Eoe,n1o,s1o,Wa,l1o,yoe,i1o,d1o,woe,c1o,f1o,Aoe,m1o,g1o,h1o,$,pu,Loe,p1o,_1o,f$,u1o,b1o,v1o,_u,Boe,T1o,F1o,m$,C1o,M1o,E1o,uu,xoe,y1o,w1o,g$,A1o,L1o,B1o,bu,koe,x1o,k1o,h$,R1o,S1o,P1o,vu,Roe,$1o,I1o,p$,j1o,N1o,D1o,Tu,Soe,q1o,G1o,_$,O1o,X1o,V1o,Fu,Poe,z1o,W1o,u$,Q1o,H1o,U1o,Cu,$oe,J1o,Y1o,b$,K1o,Z1o,e4o,Mu,Ioe,o4o,r4o,v$,t4o,a4o,n4o,Eu,joe,s4o,l4o,T$,i4o,d4o,c4o,yu,Noe,f4o,m4o,F$,g4o,h4o,p4o,wu,Doe,_4o,u4o,C$,b4o,v4o,T4o,Au,qoe,F4o,C4o,M$,M4o,E4o,y4o,Lu,Goe,w4o,A4o,E$,L4o,B4o,x4o,Bu,Ooe,k4o,R4o,y$,S4o,P4o,$4o,xu,Xoe,I4o,j4o,w$,N4o,D4o,q4o,ku,Voe,G4o,O4o,A$,X4o,V4o,z4o,Ru,zoe,W4o,Q4o,L$,H4o,U4o,J4o,Su,Woe,Y4o,K4o,B$,Z4o,ebo,obo,Pu,Qoe,rbo,tbo,x$,abo,nbo,sbo,$u,Hoe,lbo,ibo,k$,dbo,cbo,fbo,Iu,Uoe,mbo,gbo,R$,hbo,pbo,_bo,ju,Joe,ubo,bbo,S$,vbo,Tbo,Fbo,Nu,Yoe,Cbo,Mbo,P$,Ebo,ybo,wbo,Du,Koe,Abo,Lbo,$$,Bbo,xbo,kbo,qu,Zoe,Rbo,Sbo,I$,Pbo,$bo,Ibo,Gu,ere,jbo,Nbo,j$,Dbo,qbo,Gbo,Ou,ore,Obo,Xbo,N$,Vbo,zbo,Wbo,Xu,rre,Qbo,Hbo,D$,Ubo,Jbo,Ybo,Vu,tre,Kbo,Zbo,q$,e5o,o5o,r5o,zu,are,t5o,a5o,G$,n5o,s5o,l5o,Wu,nre,i5o,d5o,O$,c5o,f5o,m5o,Qu,sre,g5o,h5o,X$,p5o,_5o,u5o,Hu,lre,b5o,v5o,V$,T5o,F5o,C5o,Uu,ire,M5o,E5o,z$,y5o,w5o,A5o,Ju,L5o,dre,B5o,x5o,cre,k5o,R5o,fre,S5o,P5o,d3,$ke,nd,Yu,mre,c3,$5o,gre,I5o,Ike,Zo,f3,j5o,sd,N5o,hre,D5o,q5o,pre,G5o,O5o,X5o,m3,V5o,_re,z5o,W5o,Q5o,Qr,g3,H5o,ure,U5o,J5o,ld,Y5o,bre,K5o,Z5o,vre,e2o,o2o,r2o,Tre,t2o,a2o,h3,n2o,qe,p3,s2o,Fre,l2o,i2o,Qa,d2o,Cre,c2o,f2o,Mre,m2o,g2o,Ere,h2o,p2o,_2o,I,Ku,yre,u2o,b2o,W$,v2o,T2o,F2o,Zu,wre,C2o,M2o,Q$,E2o,y2o,w2o,e1,Are,A2o,L2o,H$,B2o,x2o,k2o,o1,Lre,R2o,S2o,U$,P2o,$2o,I2o,r1,Bre,j2o,N2o,J$,D2o,q2o,G2o,t1,xre,O2o,X2o,Y$,V2o,z2o,W2o,a1,kre,Q2o,H2o,K$,U2o,J2o,Y2o,n1,Rre,K2o,Z2o,Z$,evo,ovo,rvo,s1,Sre,tvo,avo,eI,nvo,svo,lvo,l1,Pre,ivo,dvo,oI,cvo,fvo,mvo,i1,$re,gvo,hvo,rI,pvo,_vo,uvo,d1,Ire,bvo,vvo,tI,Tvo,Fvo,Cvo,c1,jre,Mvo,Evo,aI,yvo,wvo,Avo,f1,Nre,Lvo,Bvo,nI,xvo,kvo,Rvo,m1,Dre,Svo,Pvo,sI,$vo,Ivo,jvo,g1,qre,Nvo,Dvo,lI,qvo,Gvo,Ovo,h1,Gre,Xvo,Vvo,iI,zvo,Wvo,Qvo,p1,Ore,Hvo,Uvo,dI,Jvo,Yvo,Kvo,_1,Xre,Zvo,e6o,cI,o6o,r6o,t6o,u1,Vre,a6o,n6o,fI,s6o,l6o,i6o,b1,zre,d6o,c6o,mI,f6o,m6o,g6o,v1,Wre,h6o,p6o,gI,_6o,u6o,b6o,T1,Qre,v6o,T6o,hI,F6o,C6o,M6o,F1,Hre,E6o,y6o,pI,w6o,A6o,L6o,C1,Ure,B6o,x6o,_I,k6o,R6o,S6o,M1,Jre,P6o,$6o,uI,I6o,j6o,N6o,E1,Yre,D6o,q6o,bI,G6o,O6o,X6o,y1,Kre,V6o,z6o,vI,W6o,Q6o,H6o,w1,Zre,U6o,J6o,TI,Y6o,K6o,Z6o,A1,ete,e0o,o0o,FI,r0o,t0o,a0o,L1,ote,n0o,s0o,rte,l0o,i0o,d0o,B1,tte,c0o,f0o,CI,m0o,g0o,h0o,x1,ate,p0o,_0o,MI,u0o,b0o,v0o,k1,nte,T0o,F0o,EI,C0o,M0o,E0o,R1,ste,y0o,w0o,yI,A0o,L0o,B0o,S1,x0o,lte,k0o,R0o,ite,S0o,P0o,dte,$0o,I0o,_3,jke,id,P1,cte,u3,j0o,fte,N0o,Nke,er,b3,D0o,dd,q0o,mte,G0o,O0o,gte,X0o,V0o,z0o,v3,W0o,hte,Q0o,H0o,U0o,Hr,T3,J0o,pte,Y0o,K0o,cd,Z0o,_te,eTo,oTo,ute,rTo,tTo,aTo,bte,nTo,sTo,F3,lTo,Ge,C3,iTo,vte,dTo,cTo,Ha,fTo,Tte,mTo,gTo,Fte,hTo,pTo,Cte,_To,uTo,bTo,se,$1,Mte,vTo,TTo,wI,FTo,CTo,MTo,I1,Ete,ETo,yTo,AI,wTo,ATo,LTo,j1,yte,BTo,xTo,LI,kTo,RTo,STo,N1,wte,PTo,$To,BI,ITo,jTo,NTo,D1,Ate,DTo,qTo,xI,GTo,OTo,XTo,q1,Lte,VTo,zTo,kI,WTo,QTo,HTo,G1,Bte,UTo,JTo,RI,YTo,KTo,ZTo,O1,xte,eFo,oFo,SI,rFo,tFo,aFo,X1,kte,nFo,sFo,PI,lFo,iFo,dFo,V1,Rte,cFo,fFo,$I,mFo,gFo,hFo,z1,Ste,pFo,_Fo,II,uFo,bFo,vFo,W1,Pte,TFo,FFo,jI,CFo,MFo,EFo,Q1,$te,yFo,wFo,NI,AFo,LFo,BFo,H1,Ite,xFo,kFo,DI,RFo,SFo,PFo,U1,jte,$Fo,IFo,qI,jFo,NFo,DFo,J1,Nte,qFo,GFo,GI,OFo,XFo,VFo,Y1,zFo,Dte,WFo,QFo,qte,HFo,UFo,Gte,JFo,YFo,M3,Dke,fd,K1,Ote,E3,KFo,Xte,ZFo,qke,or,y3,eCo,md,oCo,Vte,rCo,tCo,zte,aCo,nCo,sCo,w3,lCo,Wte,iCo,dCo,cCo,Ur,A3,fCo,Qte,mCo,gCo,gd,hCo,Hte,pCo,_Co,Ute,uCo,bCo,vCo,Jte,TCo,FCo,L3,CCo,Oe,B3,MCo,Yte,ECo,yCo,Ua,wCo,Kte,ACo,LCo,Zte,BCo,xCo,eae,kCo,RCo,SCo,A,Z1,oae,PCo,$Co,OI,ICo,jCo,NCo,e4,rae,DCo,qCo,XI,GCo,OCo,XCo,o4,tae,VCo,zCo,VI,WCo,QCo,HCo,r4,aae,UCo,JCo,zI,YCo,KCo,ZCo,t4,nae,eMo,oMo,WI,rMo,tMo,aMo,a4,sae,nMo,sMo,QI,lMo,iMo,dMo,n4,lae,cMo,fMo,HI,mMo,gMo,hMo,s4,iae,pMo,_Mo,UI,uMo,bMo,vMo,l4,dae,TMo,FMo,JI,CMo,MMo,EMo,i4,cae,yMo,wMo,YI,AMo,LMo,BMo,d4,fae,xMo,kMo,KI,RMo,SMo,PMo,c4,mae,$Mo,IMo,ZI,jMo,NMo,DMo,f4,gae,qMo,GMo,ej,OMo,XMo,VMo,m4,hae,zMo,WMo,oj,QMo,HMo,UMo,g4,pae,JMo,YMo,rj,KMo,ZMo,eEo,h4,_ae,oEo,rEo,tj,tEo,aEo,nEo,p4,uae,sEo,lEo,aj,iEo,dEo,cEo,_4,bae,fEo,mEo,nj,gEo,hEo,pEo,u4,vae,_Eo,uEo,sj,bEo,vEo,TEo,b4,Tae,FEo,CEo,lj,MEo,EEo,yEo,v4,Fae,wEo,AEo,ij,LEo,BEo,xEo,T4,Cae,kEo,REo,dj,SEo,PEo,$Eo,F4,Mae,IEo,jEo,cj,NEo,DEo,qEo,C4,Eae,GEo,OEo,fj,XEo,VEo,zEo,M4,yae,WEo,QEo,mj,HEo,UEo,JEo,E4,wae,YEo,KEo,gj,ZEo,e3o,o3o,y4,Aae,r3o,t3o,hj,a3o,n3o,s3o,w4,Lae,l3o,i3o,pj,d3o,c3o,f3o,A4,Bae,m3o,g3o,_j,h3o,p3o,_3o,L4,xae,u3o,b3o,uj,v3o,T3o,F3o,B4,kae,C3o,M3o,bj,E3o,y3o,w3o,x4,Rae,A3o,L3o,vj,B3o,x3o,k3o,k4,Sae,R3o,S3o,Tj,P3o,$3o,I3o,R4,Pae,j3o,N3o,Fj,D3o,q3o,G3o,S4,$ae,O3o,X3o,Cj,V3o,z3o,W3o,P4,Iae,Q3o,H3o,Mj,U3o,J3o,Y3o,$4,jae,K3o,Z3o,Ej,eyo,oyo,ryo,I4,Nae,tyo,ayo,yj,nyo,syo,lyo,j4,Dae,iyo,dyo,wj,cyo,fyo,myo,N4,qae,gyo,hyo,Aj,pyo,_yo,uyo,D4,Gae,byo,vyo,Lj,Tyo,Fyo,Cyo,q4,Oae,Myo,Eyo,Bj,yyo,wyo,Ayo,G4,Xae,Lyo,Byo,xj,xyo,kyo,Ryo,O4,Vae,Syo,Pyo,kj,$yo,Iyo,jyo,X4,zae,Nyo,Dyo,Rj,qyo,Gyo,Oyo,V4,Wae,Xyo,Vyo,Sj,zyo,Wyo,Qyo,z4,Hyo,Qae,Uyo,Jyo,Hae,Yyo,Kyo,Uae,Zyo,ewo,x3,Gke,hd,W4,Jae,k3,owo,Yae,rwo,Oke,rr,R3,two,pd,awo,Kae,nwo,swo,Zae,lwo,iwo,dwo,S3,cwo,ene,fwo,mwo,gwo,Jr,P3,hwo,one,pwo,_wo,_d,uwo,rne,bwo,vwo,tne,Two,Fwo,Cwo,ane,Mwo,Ewo,$3,ywo,Xe,I3,wwo,nne,Awo,Lwo,Ja,Bwo,sne,xwo,kwo,lne,Rwo,Swo,ine,Pwo,$wo,Iwo,G,Q4,dne,jwo,Nwo,Pj,Dwo,qwo,Gwo,H4,cne,Owo,Xwo,$j,Vwo,zwo,Wwo,U4,fne,Qwo,Hwo,Ij,Uwo,Jwo,Ywo,J4,mne,Kwo,Zwo,jj,eAo,oAo,rAo,Y4,gne,tAo,aAo,Nj,nAo,sAo,lAo,K4,hne,iAo,dAo,Dj,cAo,fAo,mAo,Z4,pne,gAo,hAo,qj,pAo,_Ao,uAo,eb,_ne,bAo,vAo,Gj,TAo,FAo,CAo,ob,une,MAo,EAo,Oj,yAo,wAo,AAo,rb,bne,LAo,BAo,Xj,xAo,kAo,RAo,tb,vne,SAo,PAo,Vj,$Ao,IAo,jAo,ab,Tne,NAo,DAo,zj,qAo,GAo,OAo,nb,Fne,XAo,VAo,Wj,zAo,WAo,QAo,sb,Cne,HAo,UAo,Qj,JAo,YAo,KAo,lb,Mne,ZAo,eLo,Hj,oLo,rLo,tLo,ib,Ene,aLo,nLo,Uj,sLo,lLo,iLo,db,yne,dLo,cLo,Jj,fLo,mLo,gLo,cb,wne,hLo,pLo,Yj,_Lo,uLo,bLo,fb,Ane,vLo,TLo,Kj,FLo,CLo,MLo,mb,Lne,ELo,yLo,Zj,wLo,ALo,LLo,gb,Bne,BLo,xLo,eN,kLo,RLo,SLo,hb,xne,PLo,$Lo,oN,ILo,jLo,NLo,pb,kne,DLo,qLo,rN,GLo,OLo,XLo,_b,Rne,VLo,zLo,tN,WLo,QLo,HLo,ub,Sne,ULo,JLo,aN,YLo,KLo,ZLo,bb,Pne,e7o,o7o,nN,r7o,t7o,a7o,vb,$ne,n7o,s7o,sN,l7o,i7o,d7o,Tb,Ine,c7o,f7o,lN,m7o,g7o,h7o,Fb,p7o,jne,_7o,u7o,Nne,b7o,v7o,Dne,T7o,F7o,j3,Xke,ud,Cb,qne,N3,C7o,Gne,M7o,Vke,tr,D3,E7o,bd,y7o,One,w7o,A7o,Xne,L7o,B7o,x7o,q3,k7o,Vne,R7o,S7o,P7o,Yr,G3,$7o,zne,I7o,j7o,vd,N7o,Wne,D7o,q7o,Qne,G7o,O7o,X7o,Hne,V7o,z7o,O3,W7o,Ve,X3,Q7o,Une,H7o,U7o,Ya,J7o,Jne,Y7o,K7o,Yne,Z7o,e8o,Kne,o8o,r8o,t8o,da,Mb,Zne,a8o,n8o,iN,s8o,l8o,i8o,Eb,ese,d8o,c8o,dN,f8o,m8o,g8o,yb,ose,h8o,p8o,cN,_8o,u8o,b8o,wb,rse,v8o,T8o,fN,F8o,C8o,M8o,Ab,tse,E8o,y8o,mN,w8o,A8o,L8o,Lb,B8o,ase,x8o,k8o,nse,R8o,S8o,sse,P8o,$8o,V3,zke,Td,Bb,lse,z3,I8o,ise,j8o,Wke,ar,W3,N8o,Fd,D8o,dse,q8o,G8o,cse,O8o,X8o,V8o,Q3,z8o,fse,W8o,Q8o,H8o,Kr,H3,U8o,mse,J8o,Y8o,Cd,K8o,gse,Z8o,e9o,hse,o9o,r9o,t9o,pse,a9o,n9o,U3,s9o,ze,J3,l9o,_se,i9o,d9o,Ka,c9o,use,f9o,m9o,bse,g9o,h9o,vse,p9o,_9o,u9o,D,xb,Tse,b9o,v9o,gN,T9o,F9o,C9o,kb,Fse,M9o,E9o,hN,y9o,w9o,A9o,Rb,Cse,L9o,B9o,pN,x9o,k9o,R9o,Sb,Mse,S9o,P9o,_N,$9o,I9o,j9o,Pb,Ese,N9o,D9o,uN,q9o,G9o,O9o,$b,yse,X9o,V9o,bN,z9o,W9o,Q9o,Ib,wse,H9o,U9o,vN,J9o,Y9o,K9o,jb,Ase,Z9o,eBo,TN,oBo,rBo,tBo,Nb,Lse,aBo,nBo,FN,sBo,lBo,iBo,Db,Bse,dBo,cBo,CN,fBo,mBo,gBo,qb,xse,hBo,pBo,MN,_Bo,uBo,bBo,Gb,kse,vBo,TBo,EN,FBo,CBo,MBo,Ob,Rse,EBo,yBo,yN,wBo,ABo,LBo,Xb,Sse,BBo,xBo,wN,kBo,RBo,SBo,Vb,Pse,PBo,$Bo,AN,IBo,jBo,NBo,zb,$se,DBo,qBo,LN,GBo,OBo,XBo,Wb,Ise,VBo,zBo,BN,WBo,QBo,HBo,Qb,jse,UBo,JBo,xN,YBo,KBo,ZBo,Hb,Nse,exo,oxo,kN,rxo,txo,axo,Ub,Dse,nxo,sxo,RN,lxo,ixo,dxo,Jb,qse,cxo,fxo,SN,mxo,gxo,hxo,Yb,Gse,pxo,_xo,PN,uxo,bxo,vxo,Kb,Ose,Txo,Fxo,$N,Cxo,Mxo,Exo,Zb,Xse,yxo,wxo,IN,Axo,Lxo,Bxo,e5,Vse,xxo,kxo,jN,Rxo,Sxo,Pxo,o5,zse,$xo,Ixo,NN,jxo,Nxo,Dxo,r5,Wse,qxo,Gxo,DN,Oxo,Xxo,Vxo,t5,Qse,zxo,Wxo,qN,Qxo,Hxo,Uxo,a5,Hse,Jxo,Yxo,GN,Kxo,Zxo,eko,n5,Use,oko,rko,ON,tko,ako,nko,s5,Jse,sko,lko,XN,iko,dko,cko,l5,Yse,fko,mko,VN,gko,hko,pko,i5,Kse,_ko,uko,zN,bko,vko,Tko,d5,Fko,Zse,Cko,Mko,ele,Eko,yko,ole,wko,Ako,Y3,Qke,Md,c5,rle,K3,Lko,tle,Bko,Hke,nr,Z3,xko,Ed,kko,ale,Rko,Sko,nle,Pko,$ko,Iko,ey,jko,sle,Nko,Dko,qko,Zr,oy,Gko,lle,Oko,Xko,yd,Vko,ile,zko,Wko,dle,Qko,Hko,Uko,cle,Jko,Yko,ry,Kko,We,ty,Zko,fle,eRo,oRo,Za,rRo,mle,tRo,aRo,gle,nRo,sRo,hle,lRo,iRo,dRo,R,f5,ple,cRo,fRo,WN,mRo,gRo,hRo,m5,_le,pRo,_Ro,QN,uRo,bRo,vRo,g5,ule,TRo,FRo,HN,CRo,MRo,ERo,h5,ble,yRo,wRo,UN,ARo,LRo,BRo,p5,vle,xRo,kRo,JN,RRo,SRo,PRo,_5,Tle,$Ro,IRo,YN,jRo,NRo,DRo,u5,Fle,qRo,GRo,KN,ORo,XRo,VRo,b5,Cle,zRo,WRo,ZN,QRo,HRo,URo,v5,Mle,JRo,YRo,eD,KRo,ZRo,eSo,T5,Ele,oSo,rSo,oD,tSo,aSo,nSo,F5,yle,sSo,lSo,rD,iSo,dSo,cSo,C5,wle,fSo,mSo,tD,gSo,hSo,pSo,M5,Ale,_So,uSo,aD,bSo,vSo,TSo,E5,Lle,FSo,CSo,nD,MSo,ESo,ySo,y5,Ble,wSo,ASo,sD,LSo,BSo,xSo,w5,xle,kSo,RSo,lD,SSo,PSo,$So,A5,kle,ISo,jSo,iD,NSo,DSo,qSo,L5,Rle,GSo,OSo,dD,XSo,VSo,zSo,B5,Sle,WSo,QSo,cD,HSo,USo,JSo,x5,Ple,YSo,KSo,fD,ZSo,ePo,oPo,k5,$le,rPo,tPo,mD,aPo,nPo,sPo,R5,Ile,lPo,iPo,gD,dPo,cPo,fPo,S5,jle,mPo,gPo,hD,hPo,pPo,_Po,P5,Nle,uPo,bPo,pD,vPo,TPo,FPo,$5,Dle,CPo,MPo,_D,EPo,yPo,wPo,I5,qle,APo,LPo,uD,BPo,xPo,kPo,j5,Gle,RPo,SPo,bD,PPo,$Po,IPo,N5,Ole,jPo,NPo,vD,DPo,qPo,GPo,D5,Xle,OPo,XPo,TD,VPo,zPo,WPo,q5,Vle,QPo,HPo,FD,UPo,JPo,YPo,G5,zle,KPo,ZPo,CD,e$o,o$o,r$o,O5,Wle,t$o,a$o,MD,n$o,s$o,l$o,X5,Qle,i$o,d$o,ED,c$o,f$o,m$o,V5,Hle,g$o,h$o,yD,p$o,_$o,u$o,z5,Ule,b$o,v$o,wD,T$o,F$o,C$o,W5,Jle,M$o,E$o,AD,y$o,w$o,A$o,Q5,Yle,L$o,B$o,LD,x$o,k$o,R$o,H5,Kle,S$o,P$o,BD,$$o,I$o,j$o,U5,Zle,N$o,D$o,xD,q$o,G$o,O$o,J5,X$o,eie,V$o,z$o,oie,W$o,Q$o,rie,H$o,U$o,ay,Uke,wd,Y5,tie,ny,J$o,aie,Y$o,Jke,sr,sy,K$o,Ad,Z$o,nie,eIo,oIo,sie,rIo,tIo,aIo,ly,nIo,lie,sIo,lIo,iIo,et,iy,dIo,iie,cIo,fIo,Ld,mIo,die,gIo,hIo,cie,pIo,_Io,uIo,fie,bIo,vIo,dy,TIo,Qe,cy,FIo,mie,CIo,MIo,en,EIo,gie,yIo,wIo,hie,AIo,LIo,pie,BIo,xIo,kIo,_ie,K5,uie,RIo,SIo,kD,PIo,$Io,IIo,Z5,jIo,bie,NIo,DIo,vie,qIo,GIo,Tie,OIo,XIo,fy,Yke,Bd,e2,Fie,my,VIo,Cie,zIo,Kke,lr,gy,WIo,xd,QIo,Mie,HIo,UIo,Eie,JIo,YIo,KIo,hy,ZIo,yie,ejo,ojo,rjo,ot,py,tjo,wie,ajo,njo,kd,sjo,Aie,ljo,ijo,Lie,djo,cjo,fjo,Bie,mjo,gjo,_y,hjo,He,uy,pjo,xie,_jo,ujo,on,bjo,kie,vjo,Tjo,Rie,Fjo,Cjo,Sie,Mjo,Ejo,yjo,ge,o2,Pie,wjo,Ajo,RD,Ljo,Bjo,xjo,r2,$ie,kjo,Rjo,SD,Sjo,Pjo,$jo,qs,Iie,Ijo,jjo,PD,Njo,Djo,$D,qjo,Gjo,Ojo,t2,jie,Xjo,Vjo,ID,zjo,Wjo,Qjo,ma,Nie,Hjo,Ujo,jD,Jjo,Yjo,ND,Kjo,Zjo,DD,eNo,oNo,rNo,a2,Die,tNo,aNo,qD,nNo,sNo,lNo,n2,qie,iNo,dNo,GD,cNo,fNo,mNo,s2,Gie,gNo,hNo,OD,pNo,_No,uNo,l2,Oie,bNo,vNo,XD,TNo,FNo,CNo,i2,Xie,MNo,ENo,VD,yNo,wNo,ANo,d2,Vie,LNo,BNo,zD,xNo,kNo,RNo,c2,SNo,zie,PNo,$No,Wie,INo,jNo,Qie,NNo,DNo,by,Zke,Rd,f2,Hie,vy,qNo,Uie,GNo,eRe,ir,Ty,ONo,Sd,XNo,Jie,VNo,zNo,Yie,WNo,QNo,HNo,Fy,UNo,Kie,JNo,YNo,KNo,rt,Cy,ZNo,Zie,eDo,oDo,Pd,rDo,ede,tDo,aDo,ode,nDo,sDo,lDo,rde,iDo,dDo,My,cDo,Ue,Ey,fDo,tde,mDo,gDo,rn,hDo,ade,pDo,_Do,nde,uDo,bDo,sde,vDo,TDo,FDo,lde,m2,ide,CDo,MDo,WD,EDo,yDo,wDo,g2,ADo,dde,LDo,BDo,cde,xDo,kDo,fde,RDo,SDo,yy,oRe,$d,h2,mde,wy,PDo,gde,$Do,rRe,dr,Ay,IDo,Id,jDo,hde,NDo,DDo,pde,qDo,GDo,ODo,Ly,XDo,_de,VDo,zDo,WDo,tt,By,QDo,ude,HDo,UDo,jd,JDo,bde,YDo,KDo,vde,ZDo,eqo,oqo,Tde,rqo,tqo,xy,aqo,Je,ky,nqo,Fde,sqo,lqo,tn,iqo,Cde,dqo,cqo,Mde,fqo,mqo,Ede,gqo,hqo,pqo,ke,p2,yde,_qo,uqo,QD,bqo,vqo,Tqo,_2,wde,Fqo,Cqo,HD,Mqo,Eqo,yqo,u2,Ade,wqo,Aqo,UD,Lqo,Bqo,xqo,b2,Lde,kqo,Rqo,JD,Sqo,Pqo,$qo,v2,Bde,Iqo,jqo,YD,Nqo,Dqo,qqo,T2,xde,Gqo,Oqo,KD,Xqo,Vqo,zqo,F2,kde,Wqo,Qqo,ZD,Hqo,Uqo,Jqo,C2,Rde,Yqo,Kqo,eq,Zqo,eGo,oGo,M2,rGo,Sde,tGo,aGo,Pde,nGo,sGo,$de,lGo,iGo,Ry,tRe,Nd,E2,Ide,Sy,dGo,jde,cGo,aRe,cr,Py,fGo,Dd,mGo,Nde,gGo,hGo,Dde,pGo,_Go,uGo,$y,bGo,qde,vGo,TGo,FGo,at,Iy,CGo,Gde,MGo,EGo,qd,yGo,Ode,wGo,AGo,Xde,LGo,BGo,xGo,Vde,kGo,RGo,jy,SGo,Ye,Ny,PGo,zde,$Go,IGo,an,jGo,Wde,NGo,DGo,Qde,qGo,GGo,Hde,OGo,XGo,VGo,nn,y2,Ude,zGo,WGo,oq,QGo,HGo,UGo,w2,Jde,JGo,YGo,rq,KGo,ZGo,eOo,A2,Yde,oOo,rOo,tq,tOo,aOo,nOo,L2,Kde,sOo,lOo,aq,iOo,dOo,cOo,B2,fOo,Zde,mOo,gOo,ece,hOo,pOo,oce,_Oo,uOo,Dy,nRe,Gd,x2,rce,qy,bOo,tce,vOo,sRe,fr,Gy,TOo,Od,FOo,ace,COo,MOo,nce,EOo,yOo,wOo,Oy,AOo,sce,LOo,BOo,xOo,nt,Xy,kOo,lce,ROo,SOo,Xd,POo,ice,$Oo,IOo,dce,jOo,NOo,DOo,cce,qOo,GOo,Vy,OOo,Ke,zy,XOo,fce,VOo,zOo,sn,WOo,mce,QOo,HOo,gce,UOo,JOo,hce,YOo,KOo,ZOo,Re,k2,pce,eXo,oXo,nq,rXo,tXo,aXo,R2,_ce,nXo,sXo,sq,lXo,iXo,dXo,S2,uce,cXo,fXo,lq,mXo,gXo,hXo,P2,bce,pXo,_Xo,iq,uXo,bXo,vXo,$2,vce,TXo,FXo,dq,CXo,MXo,EXo,I2,Tce,yXo,wXo,cq,AXo,LXo,BXo,j2,Fce,xXo,kXo,fq,RXo,SXo,PXo,N2,Cce,$Xo,IXo,mq,jXo,NXo,DXo,D2,qXo,Mce,GXo,OXo,Ece,XXo,VXo,yce,zXo,WXo,Wy,lRe,Vd,q2,wce,Qy,QXo,Ace,HXo,iRe,mr,Hy,UXo,zd,JXo,Lce,YXo,KXo,Bce,ZXo,eVo,oVo,Uy,rVo,xce,tVo,aVo,nVo,st,Jy,sVo,kce,lVo,iVo,Wd,dVo,Rce,cVo,fVo,Sce,mVo,gVo,hVo,Pce,pVo,_Vo,Yy,uVo,Ze,Ky,bVo,$ce,vVo,TVo,ln,FVo,Ice,CVo,MVo,jce,EVo,yVo,Nce,wVo,AVo,LVo,Zy,G2,Dce,BVo,xVo,gq,kVo,RVo,SVo,O2,qce,PVo,$Vo,hq,IVo,jVo,NVo,X2,DVo,Gce,qVo,GVo,Oce,OVo,XVo,Xce,VVo,zVo,ew,dRe,Qd,V2,Vce,ow,WVo,zce,QVo,cRe,gr,rw,HVo,Hd,UVo,Wce,JVo,YVo,Qce,KVo,ZVo,ezo,tw,ozo,Hce,rzo,tzo,azo,lt,aw,nzo,Uce,szo,lzo,Ud,izo,Jce,dzo,czo,Yce,fzo,mzo,gzo,Kce,hzo,pzo,nw,_zo,eo,sw,uzo,Zce,bzo,vzo,dn,Tzo,efe,Fzo,Czo,ofe,Mzo,Ezo,rfe,yzo,wzo,Azo,cn,z2,tfe,Lzo,Bzo,pq,xzo,kzo,Rzo,W2,afe,Szo,Pzo,_q,$zo,Izo,jzo,Q2,nfe,Nzo,Dzo,uq,qzo,Gzo,Ozo,H2,sfe,Xzo,Vzo,bq,zzo,Wzo,Qzo,U2,Hzo,lfe,Uzo,Jzo,ife,Yzo,Kzo,dfe,Zzo,eWo,lw,fRe,Jd,J2,cfe,iw,oWo,ffe,rWo,mRe,hr,dw,tWo,Yd,aWo,mfe,nWo,sWo,gfe,lWo,iWo,dWo,cw,cWo,hfe,fWo,mWo,gWo,it,fw,hWo,pfe,pWo,_Wo,Kd,uWo,_fe,bWo,vWo,ufe,TWo,FWo,CWo,bfe,MWo,EWo,mw,yWo,oo,gw,wWo,vfe,AWo,LWo,fn,BWo,Tfe,xWo,kWo,Ffe,RWo,SWo,Cfe,PWo,$Wo,IWo,Zd,Y2,Mfe,jWo,NWo,vq,DWo,qWo,GWo,K2,Efe,OWo,XWo,Tq,VWo,zWo,WWo,Z2,yfe,QWo,HWo,Fq,UWo,JWo,YWo,ev,KWo,wfe,ZWo,eQo,Afe,oQo,rQo,Lfe,tQo,aQo,hw,gRe,ec,ov,Bfe,pw,nQo,xfe,sQo,hRe,pr,_w,lQo,oc,iQo,kfe,dQo,cQo,Rfe,fQo,mQo,gQo,uw,hQo,Sfe,pQo,_Qo,uQo,dt,bw,bQo,Pfe,vQo,TQo,rc,FQo,$fe,CQo,MQo,Ife,EQo,yQo,wQo,jfe,AQo,LQo,vw,BQo,ro,Tw,xQo,Nfe,kQo,RQo,mn,SQo,Dfe,PQo,$Qo,qfe,IQo,jQo,Gfe,NQo,DQo,qQo,Ofe,rv,Xfe,GQo,OQo,Cq,XQo,VQo,zQo,tv,WQo,Vfe,QQo,HQo,zfe,UQo,JQo,Wfe,YQo,KQo,Fw,pRe,tc,av,Qfe,Cw,ZQo,Hfe,eHo,_Re,_r,Mw,oHo,ac,rHo,Ufe,tHo,aHo,Jfe,nHo,sHo,lHo,Ew,iHo,Yfe,dHo,cHo,fHo,ct,yw,mHo,Kfe,gHo,hHo,nc,pHo,Zfe,_Ho,uHo,eme,bHo,vHo,THo,ome,FHo,CHo,ww,MHo,to,Aw,EHo,rme,yHo,wHo,gn,AHo,tme,LHo,BHo,ame,xHo,kHo,nme,RHo,SHo,PHo,sme,nv,lme,$Ho,IHo,Mq,jHo,NHo,DHo,sv,qHo,ime,GHo,OHo,dme,XHo,VHo,cme,zHo,WHo,Lw,uRe,sc,lv,fme,Bw,QHo,mme,HHo,bRe,ur,xw,UHo,lc,JHo,gme,YHo,KHo,hme,ZHo,eUo,oUo,kw,rUo,pme,tUo,aUo,nUo,ft,Rw,sUo,_me,lUo,iUo,ic,dUo,ume,cUo,fUo,bme,mUo,gUo,hUo,vme,pUo,_Uo,Sw,uUo,ao,Pw,bUo,Tme,vUo,TUo,hn,FUo,Fme,CUo,MUo,Cme,EUo,yUo,Mme,wUo,AUo,LUo,$w,iv,Eme,BUo,xUo,Eq,kUo,RUo,SUo,dv,yme,PUo,$Uo,yq,IUo,jUo,NUo,cv,DUo,wme,qUo,GUo,Ame,OUo,XUo,Lme,VUo,zUo,Iw,vRe,dc,fv,Bme,jw,WUo,xme,QUo,TRe,br,Nw,HUo,cc,UUo,kme,JUo,YUo,Rme,KUo,ZUo,eJo,Dw,oJo,Sme,rJo,tJo,aJo,mt,qw,nJo,Pme,sJo,lJo,fc,iJo,$me,dJo,cJo,Ime,fJo,mJo,gJo,jme,hJo,pJo,Gw,_Jo,no,Ow,uJo,Nme,bJo,vJo,pn,TJo,Dme,FJo,CJo,qme,MJo,EJo,Gme,yJo,wJo,AJo,Ome,mv,Xme,LJo,BJo,wq,xJo,kJo,RJo,gv,SJo,Vme,PJo,$Jo,zme,IJo,jJo,Wme,NJo,DJo,Xw,FRe,mc,hv,Qme,Vw,qJo,Hme,GJo,CRe,vr,zw,OJo,gc,XJo,Ume,VJo,zJo,Jme,WJo,QJo,HJo,Ww,UJo,Yme,JJo,YJo,KJo,gt,Qw,ZJo,Kme,eYo,oYo,hc,rYo,Zme,tYo,aYo,ege,nYo,sYo,lYo,oge,iYo,dYo,Hw,cYo,ho,Uw,fYo,rge,mYo,gYo,_n,hYo,tge,pYo,_Yo,age,uYo,bYo,nge,vYo,TYo,FYo,B,pv,sge,CYo,MYo,Aq,EYo,yYo,wYo,_v,lge,AYo,LYo,Lq,BYo,xYo,kYo,uv,ige,RYo,SYo,Bq,PYo,$Yo,IYo,bv,dge,jYo,NYo,xq,DYo,qYo,GYo,vv,cge,OYo,XYo,kq,VYo,zYo,WYo,Tv,fge,QYo,HYo,Rq,UYo,JYo,YYo,Fv,mge,KYo,ZYo,Sq,eKo,oKo,rKo,Cv,gge,tKo,aKo,Pq,nKo,sKo,lKo,Mv,hge,iKo,dKo,$q,cKo,fKo,mKo,Ev,pge,gKo,hKo,Iq,pKo,_Ko,uKo,yv,_ge,bKo,vKo,jq,TKo,FKo,CKo,wv,uge,MKo,EKo,Nq,yKo,wKo,AKo,Av,bge,LKo,BKo,Dq,xKo,kKo,RKo,Lv,vge,SKo,PKo,qq,$Ko,IKo,jKo,Bv,Tge,NKo,DKo,Gq,qKo,GKo,OKo,xv,Fge,XKo,VKo,Oq,zKo,WKo,QKo,Gs,Cge,HKo,UKo,Xq,JKo,YKo,Vq,KKo,ZKo,eZo,kv,Mge,oZo,rZo,zq,tZo,aZo,nZo,Rv,Ege,sZo,lZo,Wq,iZo,dZo,cZo,Sv,yge,fZo,mZo,Qq,gZo,hZo,pZo,Pv,wge,_Zo,uZo,Hq,bZo,vZo,TZo,$v,Age,FZo,CZo,Uq,MZo,EZo,yZo,Iv,Lge,wZo,AZo,Jq,LZo,BZo,xZo,jv,Bge,kZo,RZo,Yq,SZo,PZo,$Zo,Nv,xge,IZo,jZo,Kq,NZo,DZo,qZo,Dv,kge,GZo,OZo,Zq,XZo,VZo,zZo,qv,Rge,WZo,QZo,eG,HZo,UZo,JZo,Gv,Sge,YZo,KZo,oG,ZZo,eer,oer,Ov,Pge,rer,ter,rG,aer,ner,ser,Xv,$ge,ler,ier,tG,der,cer,fer,Vv,Ige,mer,ger,aG,her,per,_er,zv,jge,uer,ber,nG,ver,Ter,Fer,Wv,Nge,Cer,Mer,sG,Eer,yer,wer,Qv,Dge,Aer,Ler,lG,Ber,xer,ker,Hv,qge,Rer,Ser,iG,Per,$er,Ier,Uv,Gge,jer,Ner,dG,Der,qer,Ger,Jv,Oge,Oer,Xer,cG,Ver,zer,Wer,Yv,Xge,Qer,Her,fG,Uer,Jer,Yer,Kv,Vge,Ker,Zer,mG,eor,oor,ror,Zv,zge,tor,aor,gG,nor,sor,lor,e6,Wge,ior,dor,hG,cor,mor,gor,o6,Qge,hor,por,pG,_or,uor,bor,r6,Hge,vor,Tor,_G,For,Cor,Mor,Uge,Eor,yor,Jw,MRe,pc,t6,Jge,Yw,wor,Yge,Aor,ERe,Tr,Kw,Lor,_c,Bor,Kge,xor,kor,Zge,Ror,Sor,Por,Zw,$or,ehe,Ior,jor,Nor,ht,eA,Dor,ohe,qor,Gor,uc,Oor,rhe,Xor,Vor,the,zor,Wor,Qor,ahe,Hor,Uor,oA,Jor,po,rA,Yor,nhe,Kor,Zor,un,err,she,orr,rrr,lhe,trr,arr,ihe,nrr,srr,lrr,H,a6,dhe,irr,drr,uG,crr,frr,mrr,n6,che,grr,hrr,bG,prr,_rr,urr,s6,fhe,brr,vrr,vG,Trr,Frr,Crr,l6,mhe,Mrr,Err,TG,yrr,wrr,Arr,i6,ghe,Lrr,Brr,FG,xrr,krr,Rrr,d6,hhe,Srr,Prr,CG,$rr,Irr,jrr,c6,phe,Nrr,Drr,MG,qrr,Grr,Orr,f6,_he,Xrr,Vrr,EG,zrr,Wrr,Qrr,m6,uhe,Hrr,Urr,yG,Jrr,Yrr,Krr,g6,bhe,Zrr,etr,wG,otr,rtr,ttr,h6,vhe,atr,ntr,AG,str,ltr,itr,p6,The,dtr,ctr,LG,ftr,mtr,gtr,_6,Fhe,htr,ptr,BG,_tr,utr,btr,u6,Che,vtr,Ttr,xG,Ftr,Ctr,Mtr,b6,Mhe,Etr,ytr,kG,wtr,Atr,Ltr,v6,Ehe,Btr,xtr,RG,ktr,Rtr,Str,T6,yhe,Ptr,$tr,SG,Itr,jtr,Ntr,F6,whe,Dtr,qtr,PG,Gtr,Otr,Xtr,C6,Ahe,Vtr,ztr,$G,Wtr,Qtr,Htr,M6,Lhe,Utr,Jtr,IG,Ytr,Ktr,Ztr,E6,Bhe,ear,oar,jG,rar,tar,aar,y6,xhe,nar,sar,NG,lar,iar,dar,khe,car,far,tA,yRe,bc,w6,Rhe,aA,mar,She,gar,wRe,Fr,nA,har,vc,par,Phe,_ar,uar,$he,bar,Tar,Far,sA,Car,Ihe,Mar,Ear,yar,pt,lA,war,jhe,Aar,Lar,Tc,Bar,Nhe,xar,kar,Dhe,Rar,Sar,Par,qhe,$ar,Iar,iA,jar,_o,dA,Nar,Ghe,Dar,qar,bn,Gar,Ohe,Oar,Xar,Xhe,Var,zar,Vhe,War,Qar,Har,ce,A6,zhe,Uar,Jar,DG,Yar,Kar,Zar,L6,Whe,enr,onr,qG,rnr,tnr,anr,B6,Qhe,nnr,snr,GG,lnr,inr,dnr,x6,Hhe,cnr,fnr,OG,mnr,gnr,hnr,k6,Uhe,pnr,_nr,XG,unr,bnr,vnr,R6,Jhe,Tnr,Fnr,VG,Cnr,Mnr,Enr,S6,Yhe,ynr,wnr,zG,Anr,Lnr,Bnr,P6,Khe,xnr,knr,WG,Rnr,Snr,Pnr,$6,Zhe,$nr,Inr,QG,jnr,Nnr,Dnr,I6,epe,qnr,Gnr,HG,Onr,Xnr,Vnr,j6,ope,znr,Wnr,UG,Qnr,Hnr,Unr,N6,rpe,Jnr,Ynr,JG,Knr,Znr,esr,tpe,osr,rsr,cA,ARe,Fc,D6,ape,fA,tsr,npe,asr,LRe,Cr,mA,nsr,Cc,ssr,spe,lsr,isr,lpe,dsr,csr,fsr,gA,msr,ipe,gsr,hsr,psr,_t,hA,_sr,dpe,usr,bsr,Mc,vsr,cpe,Tsr,Fsr,fpe,Csr,Msr,Esr,mpe,ysr,wsr,pA,Asr,uo,_A,Lsr,gpe,Bsr,xsr,vn,ksr,hpe,Rsr,Ssr,ppe,Psr,$sr,_pe,Isr,jsr,Nsr,uA,q6,upe,Dsr,qsr,YG,Gsr,Osr,Xsr,G6,bpe,Vsr,zsr,KG,Wsr,Qsr,Hsr,vpe,Usr,Jsr,bA,BRe,Ec,O6,Tpe,vA,Ysr,Fpe,Ksr,xRe,Mr,TA,Zsr,yc,elr,Cpe,olr,rlr,Mpe,tlr,alr,nlr,FA,slr,Epe,llr,ilr,dlr,ut,CA,clr,ype,flr,mlr,wc,glr,wpe,hlr,plr,Ape,_lr,ulr,blr,Lpe,vlr,Tlr,MA,Flr,bo,EA,Clr,Bpe,Mlr,Elr,Tn,ylr,xpe,wlr,Alr,kpe,Llr,Blr,Rpe,xlr,klr,Rlr,J,X6,Spe,Slr,Plr,ZG,$lr,Ilr,jlr,V6,Ppe,Nlr,Dlr,eO,qlr,Glr,Olr,z6,$pe,Xlr,Vlr,oO,zlr,Wlr,Qlr,W6,Ipe,Hlr,Ulr,rO,Jlr,Ylr,Klr,Q6,jpe,Zlr,eir,tO,oir,rir,tir,H6,Npe,air,nir,aO,sir,lir,iir,U6,Dpe,dir,cir,nO,fir,mir,gir,J6,qpe,hir,pir,sO,_ir,uir,bir,Y6,Gpe,vir,Tir,lO,Fir,Cir,Mir,K6,Ope,Eir,yir,iO,wir,Air,Lir,Z6,Xpe,Bir,xir,dO,kir,Rir,Sir,e0,Vpe,Pir,$ir,cO,Iir,jir,Nir,o0,zpe,Dir,qir,fO,Gir,Oir,Xir,r0,Wpe,Vir,zir,mO,Wir,Qir,Hir,t0,Qpe,Uir,Jir,gO,Yir,Kir,Zir,a0,Hpe,edr,odr,hO,rdr,tdr,adr,n0,Upe,ndr,sdr,pO,ldr,idr,ddr,s0,Jpe,cdr,fdr,_O,mdr,gdr,hdr,l0,Ype,pdr,_dr,uO,udr,bdr,vdr,i0,Kpe,Tdr,Fdr,bO,Cdr,Mdr,Edr,Zpe,ydr,wdr,yA,kRe,Ac,d0,e_e,wA,Adr,o_e,Ldr,RRe,Er,AA,Bdr,Lc,xdr,r_e,kdr,Rdr,t_e,Sdr,Pdr,$dr,LA,Idr,a_e,jdr,Ndr,Ddr,bt,BA,qdr,n_e,Gdr,Odr,Bc,Xdr,s_e,Vdr,zdr,l_e,Wdr,Qdr,Hdr,i_e,Udr,Jdr,xA,Ydr,vo,kA,Kdr,d_e,Zdr,ecr,Fn,ocr,c_e,rcr,tcr,f_e,acr,ncr,m_e,scr,lcr,icr,ue,c0,g_e,dcr,ccr,vO,fcr,mcr,gcr,f0,h_e,hcr,pcr,TO,_cr,ucr,bcr,m0,p_e,vcr,Tcr,FO,Fcr,Ccr,Mcr,g0,__e,Ecr,ycr,CO,wcr,Acr,Lcr,h0,u_e,Bcr,xcr,MO,kcr,Rcr,Scr,p0,b_e,Pcr,$cr,EO,Icr,jcr,Ncr,_0,v_e,Dcr,qcr,yO,Gcr,Ocr,Xcr,u0,T_e,Vcr,zcr,wO,Wcr,Qcr,Hcr,b0,F_e,Ucr,Jcr,AO,Ycr,Kcr,Zcr,v0,C_e,efr,ofr,LO,rfr,tfr,afr,M_e,nfr,sfr,RA,SRe,xc,T0,E_e,SA,lfr,y_e,ifr,PRe,yr,PA,dfr,kc,cfr,w_e,ffr,mfr,A_e,gfr,hfr,pfr,$A,_fr,L_e,ufr,bfr,vfr,vt,IA,Tfr,B_e,Ffr,Cfr,Rc,Mfr,x_e,Efr,yfr,k_e,wfr,Afr,Lfr,R_e,Bfr,xfr,jA,kfr,To,NA,Rfr,S_e,Sfr,Pfr,Cn,$fr,P_e,Ifr,jfr,$_e,Nfr,Dfr,I_e,qfr,Gfr,Ofr,X,F0,j_e,Xfr,Vfr,BO,zfr,Wfr,Qfr,C0,N_e,Hfr,Ufr,xO,Jfr,Yfr,Kfr,M0,D_e,Zfr,emr,kO,omr,rmr,tmr,E0,q_e,amr,nmr,RO,smr,lmr,imr,y0,G_e,dmr,cmr,SO,fmr,mmr,gmr,w0,O_e,hmr,pmr,PO,_mr,umr,bmr,A0,X_e,vmr,Tmr,$O,Fmr,Cmr,Mmr,L0,V_e,Emr,ymr,IO,wmr,Amr,Lmr,B0,z_e,Bmr,xmr,jO,kmr,Rmr,Smr,x0,W_e,Pmr,$mr,NO,Imr,jmr,Nmr,k0,Q_e,Dmr,qmr,DO,Gmr,Omr,Xmr,R0,H_e,Vmr,zmr,qO,Wmr,Qmr,Hmr,S0,U_e,Umr,Jmr,GO,Ymr,Kmr,Zmr,P0,J_e,egr,ogr,OO,rgr,tgr,agr,$0,Y_e,ngr,sgr,XO,lgr,igr,dgr,I0,K_e,cgr,fgr,VO,mgr,ggr,hgr,j0,Z_e,pgr,_gr,zO,ugr,bgr,vgr,N0,eue,Tgr,Fgr,WO,Cgr,Mgr,Egr,D0,oue,ygr,wgr,QO,Agr,Lgr,Bgr,q0,rue,xgr,kgr,HO,Rgr,Sgr,Pgr,G0,tue,$gr,Igr,UO,jgr,Ngr,Dgr,O0,aue,qgr,Ggr,JO,Ogr,Xgr,Vgr,X0,nue,zgr,Wgr,YO,Qgr,Hgr,Ugr,V0,sue,Jgr,Ygr,KO,Kgr,Zgr,ehr,z0,lue,ohr,rhr,ZO,thr,ahr,nhr,W0,iue,shr,lhr,eX,ihr,dhr,chr,due,fhr,mhr,DA,$Re,Sc,Q0,cue,qA,ghr,fue,hhr,IRe,wr,GA,phr,Pc,_hr,mue,uhr,bhr,gue,vhr,Thr,Fhr,OA,Chr,hue,Mhr,Ehr,yhr,Tt,XA,whr,pue,Ahr,Lhr,$c,Bhr,_ue,xhr,khr,uue,Rhr,Shr,Phr,bue,$hr,Ihr,VA,jhr,Fo,zA,Nhr,vue,Dhr,qhr,Mn,Ghr,Tue,Ohr,Xhr,Fue,Vhr,zhr,Cue,Whr,Qhr,Hhr,ae,H0,Mue,Uhr,Jhr,oX,Yhr,Khr,Zhr,U0,Eue,epr,opr,rX,rpr,tpr,apr,J0,yue,npr,spr,tX,lpr,ipr,dpr,Y0,wue,cpr,fpr,aX,mpr,gpr,hpr,K0,Aue,ppr,_pr,nX,upr,bpr,vpr,Z0,Lue,Tpr,Fpr,sX,Cpr,Mpr,Epr,eT,Bue,ypr,wpr,lX,Apr,Lpr,Bpr,oT,xue,xpr,kpr,iX,Rpr,Spr,Ppr,rT,kue,$pr,Ipr,dX,jpr,Npr,Dpr,tT,Rue,qpr,Gpr,cX,Opr,Xpr,Vpr,aT,Sue,zpr,Wpr,fX,Qpr,Hpr,Upr,nT,Pue,Jpr,Ypr,mX,Kpr,Zpr,e_r,sT,$ue,o_r,r_r,gX,t_r,a_r,n_r,lT,Iue,s_r,l_r,hX,i_r,d_r,c_r,iT,jue,f_r,m_r,pX,g_r,h_r,p_r,dT,Nue,__r,u_r,_X,b_r,v_r,T_r,cT,Due,F_r,C_r,uX,M_r,E_r,y_r,que,w_r,A_r,WA,jRe,Ic,fT,Gue,QA,L_r,Oue,B_r,NRe,Ar,HA,x_r,jc,k_r,Xue,R_r,S_r,Vue,P_r,$_r,I_r,UA,j_r,zue,N_r,D_r,q_r,Ft,JA,G_r,Wue,O_r,X_r,Nc,V_r,Que,z_r,W_r,Hue,Q_r,H_r,U_r,Uue,J_r,Y_r,YA,K_r,Co,KA,Z_r,Jue,eur,our,En,rur,Yue,tur,aur,Kue,nur,sur,Zue,lur,iur,dur,e1e,mT,o1e,cur,fur,bX,mur,gur,hur,r1e,pur,_ur,ZA,DRe,Dc,gT,t1e,eL,uur,a1e,bur,qRe,Lr,oL,vur,qc,Tur,n1e,Fur,Cur,s1e,Mur,Eur,yur,rL,wur,l1e,Aur,Lur,Bur,Ct,tL,xur,i1e,kur,Rur,Gc,Sur,d1e,Pur,$ur,c1e,Iur,jur,Nur,f1e,Dur,qur,aL,Gur,Mo,nL,Our,m1e,Xur,Vur,yn,zur,g1e,Wur,Qur,h1e,Hur,Uur,p1e,Jur,Yur,Kur,Y,hT,_1e,Zur,e1r,vX,o1r,r1r,t1r,pT,u1e,a1r,n1r,TX,s1r,l1r,i1r,_T,b1e,d1r,c1r,FX,f1r,m1r,g1r,uT,v1e,h1r,p1r,CX,_1r,u1r,b1r,bT,T1e,v1r,T1r,MX,F1r,C1r,M1r,vT,F1e,E1r,y1r,EX,w1r,A1r,L1r,TT,C1e,B1r,x1r,yX,k1r,R1r,S1r,FT,M1e,P1r,$1r,wX,I1r,j1r,N1r,CT,E1e,D1r,q1r,AX,G1r,O1r,X1r,MT,y1e,V1r,z1r,LX,W1r,Q1r,H1r,ET,w1e,U1r,J1r,BX,Y1r,K1r,Z1r,yT,A1e,e4r,o4r,xX,r4r,t4r,a4r,wT,L1e,n4r,s4r,kX,l4r,i4r,d4r,AT,B1e,c4r,f4r,RX,m4r,g4r,h4r,LT,x1e,p4r,_4r,SX,u4r,b4r,v4r,BT,k1e,T4r,F4r,PX,C4r,M4r,E4r,xT,R1e,y4r,w4r,$X,A4r,L4r,B4r,kT,S1e,x4r,k4r,IX,R4r,S4r,P4r,RT,P1e,$4r,I4r,jX,j4r,N4r,D4r,ST,$1e,q4r,G4r,NX,O4r,X4r,V4r,I1e,z4r,W4r,sL,GRe,Oc,PT,j1e,lL,Q4r,N1e,H4r,ORe,Br,iL,U4r,Xc,J4r,D1e,Y4r,K4r,q1e,Z4r,ebr,obr,dL,rbr,G1e,tbr,abr,nbr,Mt,cL,sbr,O1e,lbr,ibr,Vc,dbr,X1e,cbr,fbr,V1e,mbr,gbr,hbr,z1e,pbr,_br,fL,ubr,Eo,mL,bbr,W1e,vbr,Tbr,wn,Fbr,Q1e,Cbr,Mbr,H1e,Ebr,ybr,U1e,wbr,Abr,Lbr,K,$T,J1e,Bbr,xbr,DX,kbr,Rbr,Sbr,IT,Y1e,Pbr,$br,qX,Ibr,jbr,Nbr,jT,K1e,Dbr,qbr,GX,Gbr,Obr,Xbr,NT,Z1e,Vbr,zbr,OX,Wbr,Qbr,Hbr,DT,e4e,Ubr,Jbr,XX,Ybr,Kbr,Zbr,qT,o4e,e5r,o5r,VX,r5r,t5r,a5r,GT,r4e,n5r,s5r,zX,l5r,i5r,d5r,OT,t4e,c5r,f5r,WX,m5r,g5r,h5r,XT,a4e,p5r,_5r,QX,u5r,b5r,v5r,VT,n4e,T5r,F5r,HX,C5r,M5r,E5r,zT,s4e,y5r,w5r,UX,A5r,L5r,B5r,WT,l4e,x5r,k5r,JX,R5r,S5r,P5r,QT,i4e,$5r,I5r,YX,j5r,N5r,D5r,HT,d4e,q5r,G5r,KX,O5r,X5r,V5r,UT,c4e,z5r,W5r,ZX,Q5r,H5r,U5r,JT,f4e,J5r,Y5r,eV,K5r,Z5r,e2r,YT,m4e,o2r,r2r,oV,t2r,a2r,n2r,KT,g4e,s2r,l2r,rV,i2r,d2r,c2r,ZT,h4e,f2r,m2r,tV,g2r,h2r,p2r,eF,p4e,_2r,u2r,aV,b2r,v2r,T2r,_4e,F2r,C2r,gL,XRe,zc,oF,u4e,hL,M2r,b4e,E2r,VRe,xr,pL,y2r,Wc,w2r,v4e,A2r,L2r,T4e,B2r,x2r,k2r,_L,R2r,F4e,S2r,P2r,$2r,Et,uL,I2r,C4e,j2r,N2r,Qc,D2r,M4e,q2r,G2r,E4e,O2r,X2r,V2r,y4e,z2r,W2r,bL,Q2r,yo,vL,H2r,w4e,U2r,J2r,An,Y2r,A4e,K2r,Z2r,L4e,evr,ovr,B4e,rvr,tvr,avr,x4e,rF,k4e,nvr,svr,nV,lvr,ivr,dvr,R4e,cvr,fvr,TL,zRe,Hc,tF,S4e,FL,mvr,P4e,gvr,WRe,kr,CL,hvr,Uc,pvr,$4e,_vr,uvr,I4e,bvr,vvr,Tvr,ML,Fvr,j4e,Cvr,Mvr,Evr,yt,EL,yvr,N4e,wvr,Avr,Jc,Lvr,D4e,Bvr,xvr,q4e,kvr,Rvr,Svr,G4e,Pvr,$vr,yL,Ivr,wo,wL,jvr,O4e,Nvr,Dvr,Ln,qvr,X4e,Gvr,Ovr,V4e,Xvr,Vvr,z4e,zvr,Wvr,Qvr,W4e,aF,Q4e,Hvr,Uvr,sV,Jvr,Yvr,Kvr,H4e,Zvr,e6r,AL,QRe,Yc,nF,U4e,LL,o6r,J4e,r6r,HRe,Rr,BL,t6r,Kc,a6r,Y4e,n6r,s6r,K4e,l6r,i6r,d6r,xL,c6r,Z4e,f6r,m6r,g6r,wt,kL,h6r,ebe,p6r,_6r,Zc,u6r,obe,b6r,v6r,rbe,T6r,F6r,C6r,tbe,M6r,E6r,RL,y6r,Ao,SL,w6r,abe,A6r,L6r,Bn,B6r,nbe,x6r,k6r,sbe,R6r,S6r,lbe,P6r,$6r,I6r,z,sF,ibe,j6r,N6r,lV,D6r,q6r,G6r,lF,dbe,O6r,X6r,iV,V6r,z6r,W6r,iF,cbe,Q6r,H6r,dV,U6r,J6r,Y6r,dF,fbe,K6r,Z6r,cV,e0r,o0r,r0r,cF,mbe,t0r,a0r,fV,n0r,s0r,l0r,fF,gbe,i0r,d0r,mV,c0r,f0r,m0r,mF,hbe,g0r,h0r,gV,p0r,_0r,u0r,gF,pbe,b0r,v0r,hV,T0r,F0r,C0r,hF,_be,M0r,E0r,pV,y0r,w0r,A0r,pF,ube,L0r,B0r,_V,x0r,k0r,R0r,_F,bbe,S0r,P0r,uV,$0r,I0r,j0r,uF,vbe,N0r,D0r,bV,q0r,G0r,O0r,bF,Tbe,X0r,V0r,vV,z0r,W0r,Q0r,vF,Fbe,H0r,U0r,TV,J0r,Y0r,K0r,TF,Cbe,Z0r,eTr,FV,oTr,rTr,tTr,FF,Mbe,aTr,nTr,CV,sTr,lTr,iTr,CF,Ebe,dTr,cTr,MV,fTr,mTr,gTr,MF,ybe,hTr,pTr,EV,_Tr,uTr,bTr,EF,wbe,vTr,TTr,yV,FTr,CTr,MTr,yF,Abe,ETr,yTr,wV,wTr,ATr,LTr,wF,Lbe,BTr,xTr,AV,kTr,RTr,STr,AF,Bbe,PTr,$Tr,LV,ITr,jTr,NTr,LF,xbe,DTr,qTr,BV,GTr,OTr,XTr,BF,kbe,VTr,zTr,xV,WTr,QTr,HTr,xF,Rbe,UTr,JTr,kV,YTr,KTr,ZTr,Sbe,eFr,oFr,PL,URe,ef,kF,Pbe,$L,rFr,$be,tFr,JRe,Sr,IL,aFr,of,nFr,Ibe,sFr,lFr,jbe,iFr,dFr,cFr,jL,fFr,Nbe,mFr,gFr,hFr,At,NL,pFr,Dbe,_Fr,uFr,rf,bFr,qbe,vFr,TFr,Gbe,FFr,CFr,MFr,Obe,EFr,yFr,DL,wFr,Lo,qL,AFr,Xbe,LFr,BFr,xn,xFr,Vbe,kFr,RFr,zbe,SFr,PFr,Wbe,$Fr,IFr,jFr,ca,RF,Qbe,NFr,DFr,RV,qFr,GFr,OFr,SF,Hbe,XFr,VFr,SV,zFr,WFr,QFr,PF,Ube,HFr,UFr,PV,JFr,YFr,KFr,$F,Jbe,ZFr,eCr,$V,oCr,rCr,tCr,IF,Ybe,aCr,nCr,IV,sCr,lCr,iCr,Kbe,dCr,cCr,GL,YRe,tf,jF,Zbe,OL,fCr,e5e,mCr,KRe,Pr,XL,gCr,af,hCr,o5e,pCr,_Cr,r5e,uCr,bCr,vCr,VL,TCr,t5e,FCr,CCr,MCr,Lt,zL,ECr,a5e,yCr,wCr,nf,ACr,n5e,LCr,BCr,s5e,xCr,kCr,RCr,l5e,SCr,PCr,WL,$Cr,Bo,QL,ICr,i5e,jCr,NCr,kn,DCr,d5e,qCr,GCr,c5e,OCr,XCr,f5e,VCr,zCr,WCr,fe,NF,m5e,QCr,HCr,jV,UCr,JCr,YCr,DF,g5e,KCr,ZCr,NV,eMr,oMr,rMr,qF,h5e,tMr,aMr,DV,nMr,sMr,lMr,GF,p5e,iMr,dMr,qV,cMr,fMr,mMr,OF,_5e,gMr,hMr,GV,pMr,_Mr,uMr,XF,u5e,bMr,vMr,OV,TMr,FMr,CMr,VF,b5e,MMr,EMr,XV,yMr,wMr,AMr,zF,v5e,LMr,BMr,VV,xMr,kMr,RMr,WF,T5e,SMr,PMr,zV,$Mr,IMr,jMr,QF,F5e,NMr,DMr,WV,qMr,GMr,OMr,HF,C5e,XMr,VMr,QV,zMr,WMr,QMr,UF,M5e,HMr,UMr,HV,JMr,YMr,KMr,E5e,ZMr,eEr,HL,ZRe,sf,JF,y5e,UL,oEr,w5e,rEr,eSe,$r,JL,tEr,lf,aEr,A5e,nEr,sEr,L5e,lEr,iEr,dEr,YL,cEr,B5e,fEr,mEr,gEr,Bt,KL,hEr,x5e,pEr,_Er,df,uEr,k5e,bEr,vEr,R5e,TEr,FEr,CEr,S5e,MEr,EEr,ZL,yEr,xo,e7,wEr,P5e,AEr,LEr,Rn,BEr,$5e,xEr,kEr,I5e,REr,SEr,j5e,PEr,$Er,IEr,be,YF,N5e,jEr,NEr,UV,DEr,qEr,GEr,KF,D5e,OEr,XEr,JV,VEr,zEr,WEr,ZF,q5e,QEr,HEr,YV,UEr,JEr,YEr,eC,G5e,KEr,ZEr,KV,e3r,o3r,r3r,oC,O5e,t3r,a3r,ZV,n3r,s3r,l3r,rC,X5e,i3r,d3r,ez,c3r,f3r,m3r,tC,V5e,g3r,h3r,oz,p3r,_3r,u3r,aC,z5e,b3r,v3r,rz,T3r,F3r,C3r,nC,W5e,M3r,E3r,tz,y3r,w3r,A3r,sC,Q5e,L3r,B3r,az,x3r,k3r,R3r,H5e,S3r,P3r,o7,oSe,cf,lC,U5e,r7,$3r,J5e,I3r,rSe,Ir,t7,j3r,ff,N3r,Y5e,D3r,q3r,K5e,G3r,O3r,X3r,a7,V3r,Z5e,z3r,W3r,Q3r,xt,n7,H3r,e2e,U3r,J3r,mf,Y3r,o2e,K3r,Z3r,r2e,eyr,oyr,ryr,t2e,tyr,ayr,s7,nyr,ko,l7,syr,a2e,lyr,iyr,Sn,dyr,n2e,cyr,fyr,s2e,myr,gyr,l2e,hyr,pyr,_yr,Me,iC,i2e,uyr,byr,nz,vyr,Tyr,Fyr,dC,d2e,Cyr,Myr,sz,Eyr,yyr,wyr,cC,c2e,Ayr,Lyr,lz,Byr,xyr,kyr,fC,f2e,Ryr,Syr,iz,Pyr,$yr,Iyr,mC,m2e,jyr,Nyr,dz,Dyr,qyr,Gyr,gC,g2e,Oyr,Xyr,cz,Vyr,zyr,Wyr,hC,h2e,Qyr,Hyr,fz,Uyr,Jyr,Yyr,pC,p2e,Kyr,Zyr,mz,ewr,owr,rwr,_C,_2e,twr,awr,gz,nwr,swr,lwr,u2e,iwr,dwr,i7,tSe,gf,uC,b2e,d7,cwr,v2e,fwr,aSe,jr,c7,mwr,hf,gwr,T2e,hwr,pwr,F2e,_wr,uwr,bwr,f7,vwr,C2e,Twr,Fwr,Cwr,kt,m7,Mwr,M2e,Ewr,ywr,pf,wwr,E2e,Awr,Lwr,y2e,Bwr,xwr,kwr,w2e,Rwr,Swr,g7,Pwr,Ro,h7,$wr,A2e,Iwr,jwr,Pn,Nwr,L2e,Dwr,qwr,B2e,Gwr,Owr,x2e,Xwr,Vwr,zwr,ve,bC,k2e,Wwr,Qwr,hz,Hwr,Uwr,Jwr,vC,R2e,Ywr,Kwr,pz,Zwr,eAr,oAr,TC,S2e,rAr,tAr,_z,aAr,nAr,sAr,FC,P2e,lAr,iAr,uz,dAr,cAr,fAr,CC,$2e,mAr,gAr,bz,hAr,pAr,_Ar,MC,I2e,uAr,bAr,vz,vAr,TAr,FAr,EC,j2e,CAr,MAr,Tz,EAr,yAr,wAr,yC,N2e,AAr,LAr,Fz,BAr,xAr,kAr,wC,D2e,RAr,SAr,Cz,PAr,$Ar,IAr,AC,q2e,jAr,NAr,Mz,DAr,qAr,GAr,G2e,OAr,XAr,p7,nSe,_f,LC,O2e,_7,VAr,X2e,zAr,sSe,Nr,u7,WAr,uf,QAr,V2e,HAr,UAr,z2e,JAr,YAr,KAr,b7,ZAr,W2e,eLr,oLr,rLr,Rt,v7,tLr,Q2e,aLr,nLr,bf,sLr,H2e,lLr,iLr,U2e,dLr,cLr,fLr,J2e,mLr,gLr,T7,hLr,So,F7,pLr,Y2e,_Lr,uLr,$n,bLr,K2e,vLr,TLr,Z2e,FLr,CLr,eve,MLr,ELr,yLr,Te,BC,ove,wLr,ALr,Ez,LLr,BLr,xLr,xC,rve,kLr,RLr,yz,SLr,PLr,$Lr,kC,tve,ILr,jLr,wz,NLr,DLr,qLr,RC,ave,GLr,OLr,Az,XLr,VLr,zLr,SC,nve,WLr,QLr,Lz,HLr,ULr,JLr,PC,sve,YLr,KLr,Bz,ZLr,e7r,o7r,$C,lve,r7r,t7r,xz,a7r,n7r,s7r,IC,ive,l7r,i7r,kz,d7r,c7r,f7r,jC,dve,m7r,g7r,Rz,h7r,p7r,_7r,NC,cve,u7r,b7r,Sz,v7r,T7r,F7r,fve,C7r,M7r,C7,lSe,vf,DC,mve,M7,E7r,gve,y7r,iSe,Dr,E7,w7r,Tf,A7r,hve,L7r,B7r,pve,x7r,k7r,R7r,y7,S7r,_ve,P7r,$7r,I7r,St,w7,j7r,uve,N7r,D7r,Ff,q7r,bve,G7r,O7r,vve,X7r,V7r,z7r,Tve,W7r,Q7r,A7,H7r,Po,L7,U7r,Fve,J7r,Y7r,In,K7r,Cve,Z7r,e8r,Mve,o8r,r8r,Eve,t8r,a8r,n8r,Se,qC,yve,s8r,l8r,Pz,i8r,d8r,c8r,GC,wve,f8r,m8r,$z,g8r,h8r,p8r,OC,Ave,_8r,u8r,Iz,b8r,v8r,T8r,XC,Lve,F8r,C8r,jz,M8r,E8r,y8r,VC,Bve,w8r,A8r,Nz,L8r,B8r,x8r,zC,xve,k8r,R8r,Dz,S8r,P8r,$8r,WC,kve,I8r,j8r,qz,N8r,D8r,q8r,QC,Rve,G8r,O8r,Gz,X8r,V8r,z8r,Sve,W8r,Q8r,B7,dSe,Cf,HC,Pve,x7,H8r,$ve,U8r,cSe,qr,k7,J8r,Mf,Y8r,Ive,K8r,Z8r,jve,e9r,o9r,r9r,R7,t9r,Nve,a9r,n9r,s9r,Pt,S7,l9r,Dve,i9r,d9r,Ef,c9r,qve,f9r,m9r,Gve,g9r,h9r,p9r,Ove,_9r,u9r,P7,b9r,$o,$7,v9r,Xve,T9r,F9r,jn,C9r,Vve,M9r,E9r,zve,y9r,w9r,Wve,A9r,L9r,B9r,Pe,UC,Qve,x9r,k9r,Oz,R9r,S9r,P9r,JC,Hve,$9r,I9r,Xz,j9r,N9r,D9r,YC,Uve,q9r,G9r,Vz,O9r,X9r,V9r,KC,Jve,z9r,W9r,zz,Q9r,H9r,U9r,ZC,Yve,J9r,Y9r,Wz,K9r,Z9r,eBr,eM,Kve,oBr,rBr,Qz,tBr,aBr,nBr,oM,Zve,sBr,lBr,Hz,iBr,dBr,cBr,rM,e6e,fBr,mBr,Uz,gBr,hBr,pBr,o6e,_Br,uBr,I7,fSe,yf,tM,r6e,j7,bBr,t6e,vBr,mSe,Gr,N7,TBr,wf,FBr,a6e,CBr,MBr,n6e,EBr,yBr,wBr,D7,ABr,s6e,LBr,BBr,xBr,$t,q7,kBr,l6e,RBr,SBr,Af,PBr,i6e,$Br,IBr,d6e,jBr,NBr,DBr,c6e,qBr,GBr,G7,OBr,Io,O7,XBr,f6e,VBr,zBr,Nn,WBr,m6e,QBr,HBr,g6e,UBr,JBr,h6e,YBr,KBr,ZBr,p6e,aM,_6e,exr,oxr,Jz,rxr,txr,axr,u6e,nxr,sxr,X7,gSe,Lf,nM,b6e,V7,lxr,v6e,ixr,hSe,Or,z7,dxr,Bf,cxr,T6e,fxr,mxr,F6e,gxr,hxr,pxr,W7,_xr,C6e,uxr,bxr,vxr,It,Q7,Txr,M6e,Fxr,Cxr,xf,Mxr,E6e,Exr,yxr,y6e,wxr,Axr,Lxr,w6e,Bxr,xxr,H7,kxr,jo,U7,Rxr,A6e,Sxr,Pxr,Dn,$xr,L6e,Ixr,jxr,B6e,Nxr,Dxr,x6e,qxr,Gxr,Oxr,J7,sM,k6e,Xxr,Vxr,Yz,zxr,Wxr,Qxr,lM,R6e,Hxr,Uxr,Kz,Jxr,Yxr,Kxr,S6e,Zxr,ekr,Y7,pSe,kf,iM,P6e,K7,okr,$6e,rkr,_Se,Xr,Z7,tkr,Rf,akr,I6e,nkr,skr,j6e,lkr,ikr,dkr,e8,ckr,N6e,fkr,mkr,gkr,jt,o8,hkr,D6e,pkr,_kr,Sf,ukr,q6e,bkr,vkr,G6e,Tkr,Fkr,Ckr,O6e,Mkr,Ekr,r8,ykr,No,t8,wkr,X6e,Akr,Lkr,qn,Bkr,V6e,xkr,kkr,z6e,Rkr,Skr,W6e,Pkr,$kr,Ikr,Q6e,dM,H6e,jkr,Nkr,Zz,Dkr,qkr,Gkr,U6e,Okr,Xkr,a8,uSe;return me=new V({}),qa=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),gE=new V({}),hE=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Gf=new Vkr({props:{warning:!0,$$slots:{default:[eCt]},$$scope:{ctx:$f}}}),pE=new V({}),_E=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/configuration_auto.py#L538"}}),vE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/configuration_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),TE=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),FE=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/configuration_auto.py#L683",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),CE=new V({}),ME=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/tokenization_auto.py#L351"}}),wE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16450/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),AE=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),LE=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),BE=new V({}),xE=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),SE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/feature_extraction_auto.py#L185",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16450/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),xh=new Vkr({props:{$$slots:{default:[oCt]},$$scope:{ctx:$f}}}),PE=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),$E=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/feature_extraction_auto.py#L312",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),IE=new V({}),jE=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/processing_auto.py#L70"}}),qE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/processing_auto.py#L84",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Gh=new Vkr({props:{$$slots:{default:[rCt]},$$scope:{ctx:$f}}}),GE=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),OE=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/processing_auto.py#L237",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),XE=new V({}),VE=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_auto.py#L705"}}),WE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),QE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),HE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),UE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),JE=new V({}),YE=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_auto.py#L712"}}),ZE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),e3=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),o3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),r3=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t3=new V({}),a3=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_auto.py#L727"}}),s3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),l3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),i3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),d3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c3=new V({}),f3=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_auto.py#L734"}}),g3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),h3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),p3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u3=new V({}),b3=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_auto.py#L741"}}),T3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),F3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),C3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),M3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E3=new V({}),y3=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_auto.py#L750"}}),A3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),L3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),B3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),x3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k3=new V({}),R3=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_auto.py#L784"}}),P3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),$3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),I3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),j3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),N3=new V({}),D3=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_auto.py#L791"}}),G3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),O3=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),X3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),V3=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),z3=new V({}),W3=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_auto.py#L777"}}),H3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),U3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),J3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Y3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),K3=new V({}),Z3=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_auto.py#L759"}}),oy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),ry=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),ty=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ay=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ny=new V({}),sy=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_auto.py#L766"}}),iy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),dy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),cy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),my=new V({}),gy=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_auto.py#L800"}}),py=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16450/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16450/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16450/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),_y=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),uy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),by=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vy=new V({}),Ty=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_auto.py#L839"}}),Cy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),My=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),Ey=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yy=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wy=new V({}),Ay=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_auto.py#L846"}}),By=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),xy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),ky=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ry=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Sy=new V({}),Py=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_auto.py#L869"}}),Iy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),jy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Ny=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Dy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qy=new V({}),Gy=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_auto.py#L853"}}),Xy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Vy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),zy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Wy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Qy=new V({}),Hy=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_auto.py#L860"}}),Jy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Yy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),Ky=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ew=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ow=new V({}),rw=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_auto.py#L878"}}),aw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),nw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),sw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iw=new V({}),dw=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_auto.py#L885"}}),fw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),mw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),gw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pw=new V({}),_w=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_auto.py#L832"}}),bw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),vw=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),Tw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Fw=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Cw=new V({}),Mw=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_auto.py#L807"}}),yw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),ww=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),Aw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Lw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Bw=new V({}),xw=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_auto.py#L814"}}),Rw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),Sw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),Pw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Iw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jw=new V({}),Nw=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_auto.py#L823"}}),qw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),Gw=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),Ow=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Xw=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Vw=new V({}),zw=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_tf_auto.py#L379"}}),Qw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Hw=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),Uw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Jw=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Yw=new V({}),Kw=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_tf_auto.py#L386"}}),eA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),oA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),rA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),tA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aA=new V({}),nA=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),lA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),iA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),dA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fA=new V({}),mA=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_tf_auto.py#L408"}}),hA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),pA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),_A=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vA=new V({}),TA=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_tf_auto.py#L422"}}),CA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),MA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),EA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wA=new V({}),AA=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_tf_auto.py#L429"}}),BA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),xA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),kA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),RA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),SA=new V({}),PA=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),IA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),jA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),NA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),DA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qA=new V({}),GA=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_tf_auto.py#L474"}}),XA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),VA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),zA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),WA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),QA=new V({}),HA=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),JA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),YA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),KA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ZA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),eL=new V({}),oL=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_tf_auto.py#L465"}}),tL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),aL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),nL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lL=new V({}),iL=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_tf_auto.py#L447"}}),cL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),fL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),mL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hL=new V({}),pL=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_tf_auto.py#L415"}}),uL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),bL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),vL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),TL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),FL=new V({}),CL=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_tf_auto.py#L490"}}),EL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),yL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),wL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),AL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),LL=new V({}),BL=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),kL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),RL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),SL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),PL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$L=new V({}),IL=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),NL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),DL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),qL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),GL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),OL=new V({}),XL=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),zL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),WL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),QL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),HL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),UL=new V({}),JL=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),KL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),ZL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),e7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),o7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),r7=new V({}),t7=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),n7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),s7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),l7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),i7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),d7=new V({}),c7=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),m7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),g7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),h7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),p7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_7=new V({}),u7=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),v7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),T7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),F7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),C7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),M7=new V({}),E7=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),w7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),A7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),L7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),B7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),x7=new V({}),k7=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),S7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),P7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),$7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),I7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),j7=new V({}),N7=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),q7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),G7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),O7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),X7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),V7=new V({}),z7=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),Q7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16450/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),H7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),U7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Y7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),K7=new V({}),Z7=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),o8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16450/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16450/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),r8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),t8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16450/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16450/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16450/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),a8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),de=a("h1"),Ee=a("a"),lo=a("span"),f(me.$$.fragment),Ce=l(),Vo=a("span"),Ii=o("Auto Classes"),If=l(),fa=a("p"),ji=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),dE=o("from_pretrained()"),jf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Be=l(),co=a("p"),Di=o("Instantiating one of "),Gn=a("a"),cE=o("AutoConfig"),On=o(", "),Xn=a("a"),fE=o("AutoModel"),qi=o(`, and
`),Vn=a("a"),mE=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),Nf=l(),f(qa.$$.fragment),fo=l(),_e=a("p"),r9=o("will create a model that is an instance of "),Oi=a("a"),t9=o("BertModel"),a9=o("."),zo=l(),Ga=a("p"),n9=o("There is one class of "),Df=a("code"),s9=o("AutoModel"),x$e=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),_ke=l(),Xi=a("h2"),qf=a("a"),WQ=a("span"),f(gE.$$.fragment),k$e=l(),QQ=a("span"),R$e=o("Extending the Auto Classes"),uke=l(),zn=a("p"),S$e=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),HQ=a("code"),P$e=o("NewModel"),$$e=o(", make sure you have a "),UQ=a("code"),I$e=o("NewModelConfig"),j$e=o(` then you can add those to the auto
classes like this:`),bke=l(),f(hE.$$.fragment),vke=l(),l9=a("p"),N$e=o("You will then be able to use the auto classes like you would usually do!"),Tke=l(),f(Gf.$$.fragment),Fke=l(),Vi=a("h2"),Of=a("a"),JQ=a("span"),f(pE.$$.fragment),D$e=l(),YQ=a("span"),q$e=o("AutoConfig"),Cke=l(),Wo=a("div"),f(_E.$$.fragment),G$e=l(),uE=a("p"),O$e=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),i9=a("a"),X$e=o("from_pretrained()"),V$e=o(" class method."),z$e=l(),bE=a("p"),W$e=o("This class cannot be instantiated directly using "),KQ=a("code"),Q$e=o("__init__()"),H$e=o(" (throws an error)."),U$e=l(),mo=a("div"),f(vE.$$.fragment),J$e=l(),ZQ=a("p"),Y$e=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),K$e=l(),zi=a("p"),Z$e=o("The configuration class to instantiate is selected based on the "),eH=a("code"),eIe=o("model_type"),oIe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),oH=a("code"),rIe=o("pretrained_model_name_or_path"),tIe=o(":"),aIe=l(),v=a("ul"),Xf=a("li"),rH=a("strong"),nIe=o("albert"),sIe=o(" \u2014 "),d9=a("a"),lIe=o("AlbertConfig"),iIe=o(" (ALBERT model)"),dIe=l(),Vf=a("li"),tH=a("strong"),cIe=o("bart"),fIe=o(" \u2014 "),c9=a("a"),mIe=o("BartConfig"),gIe=o(" (BART model)"),hIe=l(),zf=a("li"),aH=a("strong"),pIe=o("beit"),_Ie=o(" \u2014 "),f9=a("a"),uIe=o("BeitConfig"),bIe=o(" (BEiT model)"),vIe=l(),Wf=a("li"),nH=a("strong"),TIe=o("bert"),FIe=o(" \u2014 "),m9=a("a"),CIe=o("BertConfig"),MIe=o(" (BERT model)"),EIe=l(),Qf=a("li"),sH=a("strong"),yIe=o("bert-generation"),wIe=o(" \u2014 "),g9=a("a"),AIe=o("BertGenerationConfig"),LIe=o(" (Bert Generation model)"),BIe=l(),Hf=a("li"),lH=a("strong"),xIe=o("big_bird"),kIe=o(" \u2014 "),h9=a("a"),RIe=o("BigBirdConfig"),SIe=o(" (BigBird model)"),PIe=l(),Uf=a("li"),iH=a("strong"),$Ie=o("bigbird_pegasus"),IIe=o(" \u2014 "),p9=a("a"),jIe=o("BigBirdPegasusConfig"),NIe=o(" (BigBirdPegasus model)"),DIe=l(),Jf=a("li"),dH=a("strong"),qIe=o("blenderbot"),GIe=o(" \u2014 "),_9=a("a"),OIe=o("BlenderbotConfig"),XIe=o(" (Blenderbot model)"),VIe=l(),Yf=a("li"),cH=a("strong"),zIe=o("blenderbot-small"),WIe=o(" \u2014 "),u9=a("a"),QIe=o("BlenderbotSmallConfig"),HIe=o(" (BlenderbotSmall model)"),UIe=l(),Kf=a("li"),fH=a("strong"),JIe=o("camembert"),YIe=o(" \u2014 "),b9=a("a"),KIe=o("CamembertConfig"),ZIe=o(" (CamemBERT model)"),eje=l(),Zf=a("li"),mH=a("strong"),oje=o("canine"),rje=o(" \u2014 "),v9=a("a"),tje=o("CanineConfig"),aje=o(" (Canine model)"),nje=l(),em=a("li"),gH=a("strong"),sje=o("clip"),lje=o(" \u2014 "),T9=a("a"),ije=o("CLIPConfig"),dje=o(" (CLIP model)"),cje=l(),om=a("li"),hH=a("strong"),fje=o("convbert"),mje=o(" \u2014 "),F9=a("a"),gje=o("ConvBertConfig"),hje=o(" (ConvBERT model)"),pje=l(),rm=a("li"),pH=a("strong"),_je=o("convnext"),uje=o(" \u2014 "),C9=a("a"),bje=o("ConvNextConfig"),vje=o(" (ConvNext model)"),Tje=l(),tm=a("li"),_H=a("strong"),Fje=o("ctrl"),Cje=o(" \u2014 "),M9=a("a"),Mje=o("CTRLConfig"),Eje=o(" (CTRL model)"),yje=l(),am=a("li"),uH=a("strong"),wje=o("data2vec-audio"),Aje=o(" \u2014 "),E9=a("a"),Lje=o("Data2VecAudioConfig"),Bje=o(" (Data2VecAudio model)"),xje=l(),nm=a("li"),bH=a("strong"),kje=o("data2vec-text"),Rje=o(" \u2014 "),y9=a("a"),Sje=o("Data2VecTextConfig"),Pje=o(" (Data2VecText model)"),$je=l(),sm=a("li"),vH=a("strong"),Ije=o("deberta"),jje=o(" \u2014 "),w9=a("a"),Nje=o("DebertaConfig"),Dje=o(" (DeBERTa model)"),qje=l(),lm=a("li"),TH=a("strong"),Gje=o("deberta-v2"),Oje=o(" \u2014 "),A9=a("a"),Xje=o("DebertaV2Config"),Vje=o(" (DeBERTa-v2 model)"),zje=l(),im=a("li"),FH=a("strong"),Wje=o("decision_transformer"),Qje=o(" \u2014 "),L9=a("a"),Hje=o("DecisionTransformerConfig"),Uje=o(" (Decision Transformer model)"),Jje=l(),dm=a("li"),CH=a("strong"),Yje=o("deit"),Kje=o(" \u2014 "),B9=a("a"),Zje=o("DeiTConfig"),eNe=o(" (DeiT model)"),oNe=l(),cm=a("li"),MH=a("strong"),rNe=o("detr"),tNe=o(" \u2014 "),x9=a("a"),aNe=o("DetrConfig"),nNe=o(" (DETR model)"),sNe=l(),fm=a("li"),EH=a("strong"),lNe=o("distilbert"),iNe=o(" \u2014 "),k9=a("a"),dNe=o("DistilBertConfig"),cNe=o(" (DistilBERT model)"),fNe=l(),mm=a("li"),yH=a("strong"),mNe=o("dpr"),gNe=o(" \u2014 "),R9=a("a"),hNe=o("DPRConfig"),pNe=o(" (DPR model)"),_Ne=l(),gm=a("li"),wH=a("strong"),uNe=o("electra"),bNe=o(" \u2014 "),S9=a("a"),vNe=o("ElectraConfig"),TNe=o(" (ELECTRA model)"),FNe=l(),hm=a("li"),AH=a("strong"),CNe=o("encoder-decoder"),MNe=o(" \u2014 "),P9=a("a"),ENe=o("EncoderDecoderConfig"),yNe=o(" (Encoder decoder model)"),wNe=l(),pm=a("li"),LH=a("strong"),ANe=o("flaubert"),LNe=o(" \u2014 "),$9=a("a"),BNe=o("FlaubertConfig"),xNe=o(" (FlauBERT model)"),kNe=l(),_m=a("li"),BH=a("strong"),RNe=o("fnet"),SNe=o(" \u2014 "),I9=a("a"),PNe=o("FNetConfig"),$Ne=o(" (FNet model)"),INe=l(),um=a("li"),xH=a("strong"),jNe=o("fsmt"),NNe=o(" \u2014 "),j9=a("a"),DNe=o("FSMTConfig"),qNe=o(" (FairSeq Machine-Translation model)"),GNe=l(),bm=a("li"),kH=a("strong"),ONe=o("funnel"),XNe=o(" \u2014 "),N9=a("a"),VNe=o("FunnelConfig"),zNe=o(" (Funnel Transformer model)"),WNe=l(),vm=a("li"),RH=a("strong"),QNe=o("glpn"),HNe=o(" \u2014 "),D9=a("a"),UNe=o("GLPNConfig"),JNe=o(" (GLPN model)"),YNe=l(),Tm=a("li"),SH=a("strong"),KNe=o("gpt2"),ZNe=o(" \u2014 "),q9=a("a"),eDe=o("GPT2Config"),oDe=o(" (OpenAI GPT-2 model)"),rDe=l(),Fm=a("li"),PH=a("strong"),tDe=o("gpt_neo"),aDe=o(" \u2014 "),G9=a("a"),nDe=o("GPTNeoConfig"),sDe=o(" (GPT Neo model)"),lDe=l(),Cm=a("li"),$H=a("strong"),iDe=o("gptj"),dDe=o(" \u2014 "),O9=a("a"),cDe=o("GPTJConfig"),fDe=o(" (GPT-J model)"),mDe=l(),Mm=a("li"),IH=a("strong"),gDe=o("hubert"),hDe=o(" \u2014 "),X9=a("a"),pDe=o("HubertConfig"),_De=o(" (Hubert model)"),uDe=l(),Em=a("li"),jH=a("strong"),bDe=o("ibert"),vDe=o(" \u2014 "),V9=a("a"),TDe=o("IBertConfig"),FDe=o(" (I-BERT model)"),CDe=l(),ym=a("li"),NH=a("strong"),MDe=o("imagegpt"),EDe=o(" \u2014 "),z9=a("a"),yDe=o("ImageGPTConfig"),wDe=o(" (ImageGPT model)"),ADe=l(),wm=a("li"),DH=a("strong"),LDe=o("layoutlm"),BDe=o(" \u2014 "),W9=a("a"),xDe=o("LayoutLMConfig"),kDe=o(" (LayoutLM model)"),RDe=l(),Am=a("li"),qH=a("strong"),SDe=o("layoutlmv2"),PDe=o(" \u2014 "),Q9=a("a"),$De=o("LayoutLMv2Config"),IDe=o(" (LayoutLMv2 model)"),jDe=l(),Lm=a("li"),GH=a("strong"),NDe=o("led"),DDe=o(" \u2014 "),H9=a("a"),qDe=o("LEDConfig"),GDe=o(" (LED model)"),ODe=l(),Bm=a("li"),OH=a("strong"),XDe=o("longformer"),VDe=o(" \u2014 "),U9=a("a"),zDe=o("LongformerConfig"),WDe=o(" (Longformer model)"),QDe=l(),xm=a("li"),XH=a("strong"),HDe=o("luke"),UDe=o(" \u2014 "),J9=a("a"),JDe=o("LukeConfig"),YDe=o(" (LUKE model)"),KDe=l(),km=a("li"),VH=a("strong"),ZDe=o("lxmert"),eqe=o(" \u2014 "),Y9=a("a"),oqe=o("LxmertConfig"),rqe=o(" (LXMERT model)"),tqe=l(),Rm=a("li"),zH=a("strong"),aqe=o("m2m_100"),nqe=o(" \u2014 "),K9=a("a"),sqe=o("M2M100Config"),lqe=o(" (M2M100 model)"),iqe=l(),Sm=a("li"),WH=a("strong"),dqe=o("marian"),cqe=o(" \u2014 "),Z9=a("a"),fqe=o("MarianConfig"),mqe=o(" (Marian model)"),gqe=l(),Pm=a("li"),QH=a("strong"),hqe=o("maskformer"),pqe=o(" \u2014 "),eB=a("a"),_qe=o("MaskFormerConfig"),uqe=o(" (MaskFormer model)"),bqe=l(),$m=a("li"),HH=a("strong"),vqe=o("mbart"),Tqe=o(" \u2014 "),oB=a("a"),Fqe=o("MBartConfig"),Cqe=o(" (mBART model)"),Mqe=l(),Im=a("li"),UH=a("strong"),Eqe=o("megatron-bert"),yqe=o(" \u2014 "),rB=a("a"),wqe=o("MegatronBertConfig"),Aqe=o(" (MegatronBert model)"),Lqe=l(),jm=a("li"),JH=a("strong"),Bqe=o("mobilebert"),xqe=o(" \u2014 "),tB=a("a"),kqe=o("MobileBertConfig"),Rqe=o(" (MobileBERT model)"),Sqe=l(),Nm=a("li"),YH=a("strong"),Pqe=o("mpnet"),$qe=o(" \u2014 "),aB=a("a"),Iqe=o("MPNetConfig"),jqe=o(" (MPNet model)"),Nqe=l(),Dm=a("li"),KH=a("strong"),Dqe=o("mt5"),qqe=o(" \u2014 "),nB=a("a"),Gqe=o("MT5Config"),Oqe=o(" (mT5 model)"),Xqe=l(),qm=a("li"),ZH=a("strong"),Vqe=o("nystromformer"),zqe=o(" \u2014 "),sB=a("a"),Wqe=o("NystromformerConfig"),Qqe=o(" (Nystromformer model)"),Hqe=l(),Gm=a("li"),eU=a("strong"),Uqe=o("openai-gpt"),Jqe=o(" \u2014 "),lB=a("a"),Yqe=o("OpenAIGPTConfig"),Kqe=o(" (OpenAI GPT model)"),Zqe=l(),Om=a("li"),oU=a("strong"),eGe=o("pegasus"),oGe=o(" \u2014 "),iB=a("a"),rGe=o("PegasusConfig"),tGe=o(" (Pegasus model)"),aGe=l(),Xm=a("li"),rU=a("strong"),nGe=o("perceiver"),sGe=o(" \u2014 "),dB=a("a"),lGe=o("PerceiverConfig"),iGe=o(" (Perceiver model)"),dGe=l(),Vm=a("li"),tU=a("strong"),cGe=o("plbart"),fGe=o(" \u2014 "),cB=a("a"),mGe=o("PLBartConfig"),gGe=o(" (PLBart model)"),hGe=l(),zm=a("li"),aU=a("strong"),pGe=o("poolformer"),_Ge=o(" \u2014 "),fB=a("a"),uGe=o("PoolFormerConfig"),bGe=o(" (PoolFormer model)"),vGe=l(),Wm=a("li"),nU=a("strong"),TGe=o("prophetnet"),FGe=o(" \u2014 "),mB=a("a"),CGe=o("ProphetNetConfig"),MGe=o(" (ProphetNet model)"),EGe=l(),Qm=a("li"),sU=a("strong"),yGe=o("qdqbert"),wGe=o(" \u2014 "),gB=a("a"),AGe=o("QDQBertConfig"),LGe=o(" (QDQBert model)"),BGe=l(),Hm=a("li"),lU=a("strong"),xGe=o("rag"),kGe=o(" \u2014 "),hB=a("a"),RGe=o("RagConfig"),SGe=o(" (RAG model)"),PGe=l(),Um=a("li"),iU=a("strong"),$Ge=o("realm"),IGe=o(" \u2014 "),pB=a("a"),jGe=o("RealmConfig"),NGe=o(" (Realm model)"),DGe=l(),Jm=a("li"),dU=a("strong"),qGe=o("reformer"),GGe=o(" \u2014 "),_B=a("a"),OGe=o("ReformerConfig"),XGe=o(" (Reformer model)"),VGe=l(),Ym=a("li"),cU=a("strong"),zGe=o("rembert"),WGe=o(" \u2014 "),uB=a("a"),QGe=o("RemBertConfig"),HGe=o(" (RemBERT model)"),UGe=l(),Km=a("li"),fU=a("strong"),JGe=o("resnet"),YGe=o(" \u2014 "),bB=a("a"),KGe=o("ResNetConfig"),ZGe=o(" (ResNet model)"),eOe=l(),Zm=a("li"),mU=a("strong"),oOe=o("retribert"),rOe=o(" \u2014 "),vB=a("a"),tOe=o("RetriBertConfig"),aOe=o(" (RetriBERT model)"),nOe=l(),eg=a("li"),gU=a("strong"),sOe=o("roberta"),lOe=o(" \u2014 "),TB=a("a"),iOe=o("RobertaConfig"),dOe=o(" (RoBERTa model)"),cOe=l(),og=a("li"),hU=a("strong"),fOe=o("roformer"),mOe=o(" \u2014 "),FB=a("a"),gOe=o("RoFormerConfig"),hOe=o(" (RoFormer model)"),pOe=l(),rg=a("li"),pU=a("strong"),_Oe=o("segformer"),uOe=o(" \u2014 "),CB=a("a"),bOe=o("SegformerConfig"),vOe=o(" (SegFormer model)"),TOe=l(),tg=a("li"),_U=a("strong"),FOe=o("sew"),COe=o(" \u2014 "),MB=a("a"),MOe=o("SEWConfig"),EOe=o(" (SEW model)"),yOe=l(),ag=a("li"),uU=a("strong"),wOe=o("sew-d"),AOe=o(" \u2014 "),EB=a("a"),LOe=o("SEWDConfig"),BOe=o(" (SEW-D model)"),xOe=l(),ng=a("li"),bU=a("strong"),kOe=o("speech-encoder-decoder"),ROe=o(" \u2014 "),yB=a("a"),SOe=o("SpeechEncoderDecoderConfig"),POe=o(" (Speech Encoder decoder model)"),$Oe=l(),sg=a("li"),vU=a("strong"),IOe=o("speech_to_text"),jOe=o(" \u2014 "),wB=a("a"),NOe=o("Speech2TextConfig"),DOe=o(" (Speech2Text model)"),qOe=l(),lg=a("li"),TU=a("strong"),GOe=o("speech_to_text_2"),OOe=o(" \u2014 "),AB=a("a"),XOe=o("Speech2Text2Config"),VOe=o(" (Speech2Text2 model)"),zOe=l(),ig=a("li"),FU=a("strong"),WOe=o("splinter"),QOe=o(" \u2014 "),LB=a("a"),HOe=o("SplinterConfig"),UOe=o(" (Splinter model)"),JOe=l(),dg=a("li"),CU=a("strong"),YOe=o("squeezebert"),KOe=o(" \u2014 "),BB=a("a"),ZOe=o("SqueezeBertConfig"),eXe=o(" (SqueezeBERT model)"),oXe=l(),cg=a("li"),MU=a("strong"),rXe=o("swin"),tXe=o(" \u2014 "),xB=a("a"),aXe=o("SwinConfig"),nXe=o(" (Swin model)"),sXe=l(),fg=a("li"),EU=a("strong"),lXe=o("t5"),iXe=o(" \u2014 "),kB=a("a"),dXe=o("T5Config"),cXe=o(" (T5 model)"),fXe=l(),mg=a("li"),yU=a("strong"),mXe=o("tapas"),gXe=o(" \u2014 "),RB=a("a"),hXe=o("TapasConfig"),pXe=o(" (TAPAS model)"),_Xe=l(),gg=a("li"),wU=a("strong"),uXe=o("transfo-xl"),bXe=o(" \u2014 "),SB=a("a"),vXe=o("TransfoXLConfig"),TXe=o(" (Transformer-XL model)"),FXe=l(),hg=a("li"),AU=a("strong"),CXe=o("trocr"),MXe=o(" \u2014 "),PB=a("a"),EXe=o("TrOCRConfig"),yXe=o(" (TrOCR model)"),wXe=l(),pg=a("li"),LU=a("strong"),AXe=o("unispeech"),LXe=o(" \u2014 "),$B=a("a"),BXe=o("UniSpeechConfig"),xXe=o(" (UniSpeech model)"),kXe=l(),_g=a("li"),BU=a("strong"),RXe=o("unispeech-sat"),SXe=o(" \u2014 "),IB=a("a"),PXe=o("UniSpeechSatConfig"),$Xe=o(" (UniSpeechSat model)"),IXe=l(),ug=a("li"),xU=a("strong"),jXe=o("van"),NXe=o(" \u2014 "),jB=a("a"),DXe=o("VanConfig"),qXe=o(" (VAN model)"),GXe=l(),bg=a("li"),kU=a("strong"),OXe=o("vilt"),XXe=o(" \u2014 "),NB=a("a"),VXe=o("ViltConfig"),zXe=o(" (ViLT model)"),WXe=l(),vg=a("li"),RU=a("strong"),QXe=o("vision-encoder-decoder"),HXe=o(" \u2014 "),DB=a("a"),UXe=o("VisionEncoderDecoderConfig"),JXe=o(" (Vision Encoder decoder model)"),YXe=l(),Tg=a("li"),SU=a("strong"),KXe=o("vision-text-dual-encoder"),ZXe=o(" \u2014 "),qB=a("a"),eVe=o("VisionTextDualEncoderConfig"),oVe=o(" (VisionTextDualEncoder model)"),rVe=l(),Fg=a("li"),PU=a("strong"),tVe=o("visual_bert"),aVe=o(" \u2014 "),GB=a("a"),nVe=o("VisualBertConfig"),sVe=o(" (VisualBert model)"),lVe=l(),Cg=a("li"),$U=a("strong"),iVe=o("vit"),dVe=o(" \u2014 "),OB=a("a"),cVe=o("ViTConfig"),fVe=o(" (ViT model)"),mVe=l(),Mg=a("li"),IU=a("strong"),gVe=o("vit_mae"),hVe=o(" \u2014 "),XB=a("a"),pVe=o("ViTMAEConfig"),_Ve=o(" (ViTMAE model)"),uVe=l(),Eg=a("li"),jU=a("strong"),bVe=o("wav2vec2"),vVe=o(" \u2014 "),VB=a("a"),TVe=o("Wav2Vec2Config"),FVe=o(" (Wav2Vec2 model)"),CVe=l(),yg=a("li"),NU=a("strong"),MVe=o("wavlm"),EVe=o(" \u2014 "),zB=a("a"),yVe=o("WavLMConfig"),wVe=o(" (WavLM model)"),AVe=l(),wg=a("li"),DU=a("strong"),LVe=o("xglm"),BVe=o(" \u2014 "),WB=a("a"),xVe=o("XGLMConfig"),kVe=o(" (XGLM model)"),RVe=l(),Ag=a("li"),qU=a("strong"),SVe=o("xlm"),PVe=o(" \u2014 "),QB=a("a"),$Ve=o("XLMConfig"),IVe=o(" (XLM model)"),jVe=l(),Lg=a("li"),GU=a("strong"),NVe=o("xlm-prophetnet"),DVe=o(" \u2014 "),HB=a("a"),qVe=o("XLMProphetNetConfig"),GVe=o(" (XLMProphetNet model)"),OVe=l(),Bg=a("li"),OU=a("strong"),XVe=o("xlm-roberta"),VVe=o(" \u2014 "),UB=a("a"),zVe=o("XLMRobertaConfig"),WVe=o(" (XLM-RoBERTa model)"),QVe=l(),xg=a("li"),XU=a("strong"),HVe=o("xlm-roberta-xl"),UVe=o(" \u2014 "),JB=a("a"),JVe=o("XLMRobertaXLConfig"),YVe=o(" (XLM-RoBERTa-XL model)"),KVe=l(),kg=a("li"),VU=a("strong"),ZVe=o("xlnet"),eze=o(" \u2014 "),YB=a("a"),oze=o("XLNetConfig"),rze=o(" (XLNet model)"),tze=l(),Rg=a("li"),zU=a("strong"),aze=o("yoso"),nze=o(" \u2014 "),KB=a("a"),sze=o("YosoConfig"),lze=o(" (YOSO model)"),ize=l(),WU=a("p"),dze=o("Examples:"),cze=l(),f(TE.$$.fragment),fze=l(),Sg=a("div"),f(FE.$$.fragment),mze=l(),QU=a("p"),gze=o("Register a new configuration for this class."),Mke=l(),Wi=a("h2"),Pg=a("a"),HU=a("span"),f(CE.$$.fragment),hze=l(),UU=a("span"),pze=o("AutoTokenizer"),Eke=l(),Qo=a("div"),f(ME.$$.fragment),_ze=l(),EE=a("p"),uze=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ZB=a("a"),bze=o("AutoTokenizer.from_pretrained()"),vze=o(" class method."),Tze=l(),yE=a("p"),Fze=o("This class cannot be instantiated directly using "),JU=a("code"),Cze=o("__init__()"),Mze=o(" (throws an error)."),Eze=l(),go=a("div"),f(wE.$$.fragment),yze=l(),YU=a("p"),wze=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Aze=l(),Oa=a("p"),Lze=o("The tokenizer class to instantiate is selected based on the "),KU=a("code"),Bze=o("model_type"),xze=o(` property of the config object (either
passed as an argument or loaded from `),ZU=a("code"),kze=o("pretrained_model_name_or_path"),Rze=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eJ=a("code"),Sze=o("pretrained_model_name_or_path"),Pze=o(":"),$ze=l(),E=a("ul"),Wn=a("li"),oJ=a("strong"),Ize=o("albert"),jze=o(" \u2014 "),ex=a("a"),Nze=o("AlbertTokenizer"),Dze=o(" or "),ox=a("a"),qze=o("AlbertTokenizerFast"),Gze=o(" (ALBERT model)"),Oze=l(),Qn=a("li"),rJ=a("strong"),Xze=o("bart"),Vze=o(" \u2014 "),rx=a("a"),zze=o("BartTokenizer"),Wze=o(" or "),tx=a("a"),Qze=o("BartTokenizerFast"),Hze=o(" (BART model)"),Uze=l(),Hn=a("li"),tJ=a("strong"),Jze=o("barthez"),Yze=o(" \u2014 "),ax=a("a"),Kze=o("BarthezTokenizer"),Zze=o(" or "),nx=a("a"),eWe=o("BarthezTokenizerFast"),oWe=o(" (BARThez model)"),rWe=l(),$g=a("li"),aJ=a("strong"),tWe=o("bartpho"),aWe=o(" \u2014 "),sx=a("a"),nWe=o("BartphoTokenizer"),sWe=o(" (BARTpho model)"),lWe=l(),Un=a("li"),nJ=a("strong"),iWe=o("bert"),dWe=o(" \u2014 "),lx=a("a"),cWe=o("BertTokenizer"),fWe=o(" or "),ix=a("a"),mWe=o("BertTokenizerFast"),gWe=o(" (BERT model)"),hWe=l(),Ig=a("li"),sJ=a("strong"),pWe=o("bert-generation"),_We=o(" \u2014 "),dx=a("a"),uWe=o("BertGenerationTokenizer"),bWe=o(" (Bert Generation model)"),vWe=l(),jg=a("li"),lJ=a("strong"),TWe=o("bert-japanese"),FWe=o(" \u2014 "),cx=a("a"),CWe=o("BertJapaneseTokenizer"),MWe=o(" (BertJapanese model)"),EWe=l(),Ng=a("li"),iJ=a("strong"),yWe=o("bertweet"),wWe=o(" \u2014 "),fx=a("a"),AWe=o("BertweetTokenizer"),LWe=o(" (Bertweet model)"),BWe=l(),Jn=a("li"),dJ=a("strong"),xWe=o("big_bird"),kWe=o(" \u2014 "),mx=a("a"),RWe=o("BigBirdTokenizer"),SWe=o(" or "),gx=a("a"),PWe=o("BigBirdTokenizerFast"),$We=o(" (BigBird model)"),IWe=l(),Yn=a("li"),cJ=a("strong"),jWe=o("bigbird_pegasus"),NWe=o(" \u2014 "),hx=a("a"),DWe=o("PegasusTokenizer"),qWe=o(" or "),px=a("a"),GWe=o("PegasusTokenizerFast"),OWe=o(" (BigBirdPegasus model)"),XWe=l(),Kn=a("li"),fJ=a("strong"),VWe=o("blenderbot"),zWe=o(" \u2014 "),_x=a("a"),WWe=o("BlenderbotTokenizer"),QWe=o(" or "),ux=a("a"),HWe=o("BlenderbotTokenizerFast"),UWe=o(" (Blenderbot model)"),JWe=l(),Dg=a("li"),mJ=a("strong"),YWe=o("blenderbot-small"),KWe=o(" \u2014 "),bx=a("a"),ZWe=o("BlenderbotSmallTokenizer"),eQe=o(" (BlenderbotSmall model)"),oQe=l(),qg=a("li"),gJ=a("strong"),rQe=o("byt5"),tQe=o(" \u2014 "),vx=a("a"),aQe=o("ByT5Tokenizer"),nQe=o(" (ByT5 model)"),sQe=l(),Zn=a("li"),hJ=a("strong"),lQe=o("camembert"),iQe=o(" \u2014 "),Tx=a("a"),dQe=o("CamembertTokenizer"),cQe=o(" or "),Fx=a("a"),fQe=o("CamembertTokenizerFast"),mQe=o(" (CamemBERT model)"),gQe=l(),Gg=a("li"),pJ=a("strong"),hQe=o("canine"),pQe=o(" \u2014 "),Cx=a("a"),_Qe=o("CanineTokenizer"),uQe=o(" (Canine model)"),bQe=l(),es=a("li"),_J=a("strong"),vQe=o("clip"),TQe=o(" \u2014 "),Mx=a("a"),FQe=o("CLIPTokenizer"),CQe=o(" or "),Ex=a("a"),MQe=o("CLIPTokenizerFast"),EQe=o(" (CLIP model)"),yQe=l(),os=a("li"),uJ=a("strong"),wQe=o("convbert"),AQe=o(" \u2014 "),yx=a("a"),LQe=o("ConvBertTokenizer"),BQe=o(" or "),wx=a("a"),xQe=o("ConvBertTokenizerFast"),kQe=o(" (ConvBERT model)"),RQe=l(),rs=a("li"),bJ=a("strong"),SQe=o("cpm"),PQe=o(" \u2014 "),Ax=a("a"),$Qe=o("CpmTokenizer"),IQe=o(" or "),vJ=a("code"),jQe=o("CpmTokenizerFast"),NQe=o(" (CPM model)"),DQe=l(),Og=a("li"),TJ=a("strong"),qQe=o("ctrl"),GQe=o(" \u2014 "),Lx=a("a"),OQe=o("CTRLTokenizer"),XQe=o(" (CTRL model)"),VQe=l(),ts=a("li"),FJ=a("strong"),zQe=o("deberta"),WQe=o(" \u2014 "),Bx=a("a"),QQe=o("DebertaTokenizer"),HQe=o(" or "),xx=a("a"),UQe=o("DebertaTokenizerFast"),JQe=o(" (DeBERTa model)"),YQe=l(),Xg=a("li"),CJ=a("strong"),KQe=o("deberta-v2"),ZQe=o(" \u2014 "),kx=a("a"),eHe=o("DebertaV2Tokenizer"),oHe=o(" (DeBERTa-v2 model)"),rHe=l(),as=a("li"),MJ=a("strong"),tHe=o("distilbert"),aHe=o(" \u2014 "),Rx=a("a"),nHe=o("DistilBertTokenizer"),sHe=o(" or "),Sx=a("a"),lHe=o("DistilBertTokenizerFast"),iHe=o(" (DistilBERT model)"),dHe=l(),ns=a("li"),EJ=a("strong"),cHe=o("dpr"),fHe=o(" \u2014 "),Px=a("a"),mHe=o("DPRQuestionEncoderTokenizer"),gHe=o(" or "),$x=a("a"),hHe=o("DPRQuestionEncoderTokenizerFast"),pHe=o(" (DPR model)"),_He=l(),ss=a("li"),yJ=a("strong"),uHe=o("electra"),bHe=o(" \u2014 "),Ix=a("a"),vHe=o("ElectraTokenizer"),THe=o(" or "),jx=a("a"),FHe=o("ElectraTokenizerFast"),CHe=o(" (ELECTRA model)"),MHe=l(),Vg=a("li"),wJ=a("strong"),EHe=o("flaubert"),yHe=o(" \u2014 "),Nx=a("a"),wHe=o("FlaubertTokenizer"),AHe=o(" (FlauBERT model)"),LHe=l(),ls=a("li"),AJ=a("strong"),BHe=o("fnet"),xHe=o(" \u2014 "),Dx=a("a"),kHe=o("FNetTokenizer"),RHe=o(" or "),qx=a("a"),SHe=o("FNetTokenizerFast"),PHe=o(" (FNet model)"),$He=l(),zg=a("li"),LJ=a("strong"),IHe=o("fsmt"),jHe=o(" \u2014 "),Gx=a("a"),NHe=o("FSMTTokenizer"),DHe=o(" (FairSeq Machine-Translation model)"),qHe=l(),is=a("li"),BJ=a("strong"),GHe=o("funnel"),OHe=o(" \u2014 "),Ox=a("a"),XHe=o("FunnelTokenizer"),VHe=o(" or "),Xx=a("a"),zHe=o("FunnelTokenizerFast"),WHe=o(" (Funnel Transformer model)"),QHe=l(),ds=a("li"),xJ=a("strong"),HHe=o("gpt2"),UHe=o(" \u2014 "),Vx=a("a"),JHe=o("GPT2Tokenizer"),YHe=o(" or "),zx=a("a"),KHe=o("GPT2TokenizerFast"),ZHe=o(" (OpenAI GPT-2 model)"),eUe=l(),cs=a("li"),kJ=a("strong"),oUe=o("gpt_neo"),rUe=o(" \u2014 "),Wx=a("a"),tUe=o("GPT2Tokenizer"),aUe=o(" or "),Qx=a("a"),nUe=o("GPT2TokenizerFast"),sUe=o(" (GPT Neo model)"),lUe=l(),fs=a("li"),RJ=a("strong"),iUe=o("herbert"),dUe=o(" \u2014 "),Hx=a("a"),cUe=o("HerbertTokenizer"),fUe=o(" or "),Ux=a("a"),mUe=o("HerbertTokenizerFast"),gUe=o(" (HerBERT model)"),hUe=l(),Wg=a("li"),SJ=a("strong"),pUe=o("hubert"),_Ue=o(" \u2014 "),Jx=a("a"),uUe=o("Wav2Vec2CTCTokenizer"),bUe=o(" (Hubert model)"),vUe=l(),ms=a("li"),PJ=a("strong"),TUe=o("ibert"),FUe=o(" \u2014 "),Yx=a("a"),CUe=o("RobertaTokenizer"),MUe=o(" or "),Kx=a("a"),EUe=o("RobertaTokenizerFast"),yUe=o(" (I-BERT model)"),wUe=l(),gs=a("li"),$J=a("strong"),AUe=o("layoutlm"),LUe=o(" \u2014 "),Zx=a("a"),BUe=o("LayoutLMTokenizer"),xUe=o(" or "),ek=a("a"),kUe=o("LayoutLMTokenizerFast"),RUe=o(" (LayoutLM model)"),SUe=l(),hs=a("li"),IJ=a("strong"),PUe=o("layoutlmv2"),$Ue=o(" \u2014 "),ok=a("a"),IUe=o("LayoutLMv2Tokenizer"),jUe=o(" or "),rk=a("a"),NUe=o("LayoutLMv2TokenizerFast"),DUe=o(" (LayoutLMv2 model)"),qUe=l(),ps=a("li"),jJ=a("strong"),GUe=o("layoutxlm"),OUe=o(" \u2014 "),tk=a("a"),XUe=o("LayoutXLMTokenizer"),VUe=o(" or "),ak=a("a"),zUe=o("LayoutXLMTokenizerFast"),WUe=o(" (LayoutXLM model)"),QUe=l(),_s=a("li"),NJ=a("strong"),HUe=o("led"),UUe=o(" \u2014 "),nk=a("a"),JUe=o("LEDTokenizer"),YUe=o(" or "),sk=a("a"),KUe=o("LEDTokenizerFast"),ZUe=o(" (LED model)"),eJe=l(),us=a("li"),DJ=a("strong"),oJe=o("longformer"),rJe=o(" \u2014 "),lk=a("a"),tJe=o("LongformerTokenizer"),aJe=o(" or "),ik=a("a"),nJe=o("LongformerTokenizerFast"),sJe=o(" (Longformer model)"),lJe=l(),Qg=a("li"),qJ=a("strong"),iJe=o("luke"),dJe=o(" \u2014 "),dk=a("a"),cJe=o("LukeTokenizer"),fJe=o(" (LUKE model)"),mJe=l(),bs=a("li"),GJ=a("strong"),gJe=o("lxmert"),hJe=o(" \u2014 "),ck=a("a"),pJe=o("LxmertTokenizer"),_Je=o(" or "),fk=a("a"),uJe=o("LxmertTokenizerFast"),bJe=o(" (LXMERT model)"),vJe=l(),Hg=a("li"),OJ=a("strong"),TJe=o("m2m_100"),FJe=o(" \u2014 "),mk=a("a"),CJe=o("M2M100Tokenizer"),MJe=o(" (M2M100 model)"),EJe=l(),Ug=a("li"),XJ=a("strong"),yJe=o("marian"),wJe=o(" \u2014 "),gk=a("a"),AJe=o("MarianTokenizer"),LJe=o(" (Marian model)"),BJe=l(),vs=a("li"),VJ=a("strong"),xJe=o("mbart"),kJe=o(" \u2014 "),hk=a("a"),RJe=o("MBartTokenizer"),SJe=o(" or "),pk=a("a"),PJe=o("MBartTokenizerFast"),$Je=o(" (mBART model)"),IJe=l(),Ts=a("li"),zJ=a("strong"),jJe=o("mbart50"),NJe=o(" \u2014 "),_k=a("a"),DJe=o("MBart50Tokenizer"),qJe=o(" or "),uk=a("a"),GJe=o("MBart50TokenizerFast"),OJe=o(" (mBART-50 model)"),XJe=l(),Jg=a("li"),WJ=a("strong"),VJe=o("mluke"),zJe=o(" \u2014 "),bk=a("a"),WJe=o("MLukeTokenizer"),QJe=o(" (mLUKE model)"),HJe=l(),Fs=a("li"),QJ=a("strong"),UJe=o("mobilebert"),JJe=o(" \u2014 "),vk=a("a"),YJe=o("MobileBertTokenizer"),KJe=o(" or "),Tk=a("a"),ZJe=o("MobileBertTokenizerFast"),eYe=o(" (MobileBERT model)"),oYe=l(),Cs=a("li"),HJ=a("strong"),rYe=o("mpnet"),tYe=o(" \u2014 "),Fk=a("a"),aYe=o("MPNetTokenizer"),nYe=o(" or "),Ck=a("a"),sYe=o("MPNetTokenizerFast"),lYe=o(" (MPNet model)"),iYe=l(),Ms=a("li"),UJ=a("strong"),dYe=o("mt5"),cYe=o(" \u2014 "),Mk=a("a"),fYe=o("MT5Tokenizer"),mYe=o(" or "),Ek=a("a"),gYe=o("MT5TokenizerFast"),hYe=o(" (mT5 model)"),pYe=l(),Es=a("li"),JJ=a("strong"),_Ye=o("openai-gpt"),uYe=o(" \u2014 "),yk=a("a"),bYe=o("OpenAIGPTTokenizer"),vYe=o(" or "),wk=a("a"),TYe=o("OpenAIGPTTokenizerFast"),FYe=o(" (OpenAI GPT model)"),CYe=l(),ys=a("li"),YJ=a("strong"),MYe=o("pegasus"),EYe=o(" \u2014 "),Ak=a("a"),yYe=o("PegasusTokenizer"),wYe=o(" or "),Lk=a("a"),AYe=o("PegasusTokenizerFast"),LYe=o(" (Pegasus model)"),BYe=l(),Yg=a("li"),KJ=a("strong"),xYe=o("perceiver"),kYe=o(" \u2014 "),Bk=a("a"),RYe=o("PerceiverTokenizer"),SYe=o(" (Perceiver model)"),PYe=l(),Kg=a("li"),ZJ=a("strong"),$Ye=o("phobert"),IYe=o(" \u2014 "),xk=a("a"),jYe=o("PhobertTokenizer"),NYe=o(" (PhoBERT model)"),DYe=l(),Zg=a("li"),eY=a("strong"),qYe=o("plbart"),GYe=o(" \u2014 "),kk=a("a"),OYe=o("PLBartTokenizer"),XYe=o(" (PLBart model)"),VYe=l(),eh=a("li"),oY=a("strong"),zYe=o("prophetnet"),WYe=o(" \u2014 "),Rk=a("a"),QYe=o("ProphetNetTokenizer"),HYe=o(" (ProphetNet model)"),UYe=l(),ws=a("li"),rY=a("strong"),JYe=o("qdqbert"),YYe=o(" \u2014 "),Sk=a("a"),KYe=o("BertTokenizer"),ZYe=o(" or "),Pk=a("a"),eKe=o("BertTokenizerFast"),oKe=o(" (QDQBert model)"),rKe=l(),oh=a("li"),tY=a("strong"),tKe=o("rag"),aKe=o(" \u2014 "),$k=a("a"),nKe=o("RagTokenizer"),sKe=o(" (RAG model)"),lKe=l(),As=a("li"),aY=a("strong"),iKe=o("realm"),dKe=o(" \u2014 "),Ik=a("a"),cKe=o("RealmTokenizer"),fKe=o(" or "),jk=a("a"),mKe=o("RealmTokenizerFast"),gKe=o(" (Realm model)"),hKe=l(),Ls=a("li"),nY=a("strong"),pKe=o("reformer"),_Ke=o(" \u2014 "),Nk=a("a"),uKe=o("ReformerTokenizer"),bKe=o(" or "),Dk=a("a"),vKe=o("ReformerTokenizerFast"),TKe=o(" (Reformer model)"),FKe=l(),Bs=a("li"),sY=a("strong"),CKe=o("rembert"),MKe=o(" \u2014 "),qk=a("a"),EKe=o("RemBertTokenizer"),yKe=o(" or "),Gk=a("a"),wKe=o("RemBertTokenizerFast"),AKe=o(" (RemBERT model)"),LKe=l(),xs=a("li"),lY=a("strong"),BKe=o("retribert"),xKe=o(" \u2014 "),Ok=a("a"),kKe=o("RetriBertTokenizer"),RKe=o(" or "),Xk=a("a"),SKe=o("RetriBertTokenizerFast"),PKe=o(" (RetriBERT model)"),$Ke=l(),ks=a("li"),iY=a("strong"),IKe=o("roberta"),jKe=o(" \u2014 "),Vk=a("a"),NKe=o("RobertaTokenizer"),DKe=o(" or "),zk=a("a"),qKe=o("RobertaTokenizerFast"),GKe=o(" (RoBERTa model)"),OKe=l(),Rs=a("li"),dY=a("strong"),XKe=o("roformer"),VKe=o(" \u2014 "),Wk=a("a"),zKe=o("RoFormerTokenizer"),WKe=o(" or "),Qk=a("a"),QKe=o("RoFormerTokenizerFast"),HKe=o(" (RoFormer model)"),UKe=l(),rh=a("li"),cY=a("strong"),JKe=o("speech_to_text"),YKe=o(" \u2014 "),Hk=a("a"),KKe=o("Speech2TextTokenizer"),ZKe=o(" (Speech2Text model)"),eZe=l(),th=a("li"),fY=a("strong"),oZe=o("speech_to_text_2"),rZe=o(" \u2014 "),Uk=a("a"),tZe=o("Speech2Text2Tokenizer"),aZe=o(" (Speech2Text2 model)"),nZe=l(),Ss=a("li"),mY=a("strong"),sZe=o("splinter"),lZe=o(" \u2014 "),Jk=a("a"),iZe=o("SplinterTokenizer"),dZe=o(" or "),Yk=a("a"),cZe=o("SplinterTokenizerFast"),fZe=o(" (Splinter model)"),mZe=l(),Ps=a("li"),gY=a("strong"),gZe=o("squeezebert"),hZe=o(" \u2014 "),Kk=a("a"),pZe=o("SqueezeBertTokenizer"),_Ze=o(" or "),Zk=a("a"),uZe=o("SqueezeBertTokenizerFast"),bZe=o(" (SqueezeBERT model)"),vZe=l(),$s=a("li"),hY=a("strong"),TZe=o("t5"),FZe=o(" \u2014 "),eR=a("a"),CZe=o("T5Tokenizer"),MZe=o(" or "),oR=a("a"),EZe=o("T5TokenizerFast"),yZe=o(" (T5 model)"),wZe=l(),ah=a("li"),pY=a("strong"),AZe=o("tapas"),LZe=o(" \u2014 "),rR=a("a"),BZe=o("TapasTokenizer"),xZe=o(" (TAPAS model)"),kZe=l(),nh=a("li"),_Y=a("strong"),RZe=o("transfo-xl"),SZe=o(" \u2014 "),tR=a("a"),PZe=o("TransfoXLTokenizer"),$Ze=o(" (Transformer-XL model)"),IZe=l(),sh=a("li"),uY=a("strong"),jZe=o("wav2vec2"),NZe=o(" \u2014 "),aR=a("a"),DZe=o("Wav2Vec2CTCTokenizer"),qZe=o(" (Wav2Vec2 model)"),GZe=l(),lh=a("li"),bY=a("strong"),OZe=o("wav2vec2_phoneme"),XZe=o(" \u2014 "),nR=a("a"),VZe=o("Wav2Vec2PhonemeCTCTokenizer"),zZe=o(" (Wav2Vec2Phoneme model)"),WZe=l(),Is=a("li"),vY=a("strong"),QZe=o("xglm"),HZe=o(" \u2014 "),sR=a("a"),UZe=o("XGLMTokenizer"),JZe=o(" or "),lR=a("a"),YZe=o("XGLMTokenizerFast"),KZe=o(" (XGLM model)"),ZZe=l(),ih=a("li"),TY=a("strong"),eeo=o("xlm"),oeo=o(" \u2014 "),iR=a("a"),reo=o("XLMTokenizer"),teo=o(" (XLM model)"),aeo=l(),dh=a("li"),FY=a("strong"),neo=o("xlm-prophetnet"),seo=o(" \u2014 "),dR=a("a"),leo=o("XLMProphetNetTokenizer"),ieo=o(" (XLMProphetNet model)"),deo=l(),js=a("li"),CY=a("strong"),ceo=o("xlm-roberta"),feo=o(" \u2014 "),cR=a("a"),meo=o("XLMRobertaTokenizer"),geo=o(" or "),fR=a("a"),heo=o("XLMRobertaTokenizerFast"),peo=o(" (XLM-RoBERTa model)"),_eo=l(),Ns=a("li"),MY=a("strong"),ueo=o("xlnet"),beo=o(" \u2014 "),mR=a("a"),veo=o("XLNetTokenizer"),Teo=o(" or "),gR=a("a"),Feo=o("XLNetTokenizerFast"),Ceo=o(" (XLNet model)"),Meo=l(),EY=a("p"),Eeo=o("Examples:"),yeo=l(),f(AE.$$.fragment),weo=l(),ch=a("div"),f(LE.$$.fragment),Aeo=l(),yY=a("p"),Leo=o("Register a new tokenizer in this mapping."),yke=l(),Qi=a("h2"),fh=a("a"),wY=a("span"),f(BE.$$.fragment),Beo=l(),AY=a("span"),xeo=o("AutoFeatureExtractor"),wke=l(),Ho=a("div"),f(xE.$$.fragment),keo=l(),kE=a("p"),Reo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),hR=a("a"),Seo=o("AutoFeatureExtractor.from_pretrained()"),Peo=o(" class method."),$eo=l(),RE=a("p"),Ieo=o("This class cannot be instantiated directly using "),LY=a("code"),jeo=o("__init__()"),Neo=o(" (throws an error)."),Deo=l(),$e=a("div"),f(SE.$$.fragment),qeo=l(),BY=a("p"),Geo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Oeo=l(),Xa=a("p"),Xeo=o("The feature extractor class to instantiate is selected based on the "),xY=a("code"),Veo=o("model_type"),zeo=o(` property of the config object
(either passed as an argument or loaded from `),kY=a("code"),Weo=o("pretrained_model_name_or_path"),Qeo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),RY=a("code"),Heo=o("pretrained_model_name_or_path"),Ueo=o(":"),Jeo=l(),te=a("ul"),mh=a("li"),SY=a("strong"),Yeo=o("beit"),Keo=o(" \u2014 "),pR=a("a"),Zeo=o("BeitFeatureExtractor"),eoo=o(" (BEiT model)"),ooo=l(),gh=a("li"),PY=a("strong"),roo=o("clip"),too=o(" \u2014 "),_R=a("a"),aoo=o("CLIPFeatureExtractor"),noo=o(" (CLIP model)"),soo=l(),hh=a("li"),$Y=a("strong"),loo=o("convnext"),ioo=o(" \u2014 "),uR=a("a"),doo=o("ConvNextFeatureExtractor"),coo=o(" (ConvNext model)"),foo=l(),ph=a("li"),IY=a("strong"),moo=o("deit"),goo=o(" \u2014 "),bR=a("a"),hoo=o("DeiTFeatureExtractor"),poo=o(" (DeiT model)"),_oo=l(),_h=a("li"),jY=a("strong"),uoo=o("detr"),boo=o(" \u2014 "),vR=a("a"),voo=o("DetrFeatureExtractor"),Too=o(" (DETR model)"),Foo=l(),uh=a("li"),NY=a("strong"),Coo=o("hubert"),Moo=o(" \u2014 "),TR=a("a"),Eoo=o("Wav2Vec2FeatureExtractor"),yoo=o(" (Hubert model)"),woo=l(),bh=a("li"),DY=a("strong"),Aoo=o("layoutlmv2"),Loo=o(" \u2014 "),FR=a("a"),Boo=o("LayoutLMv2FeatureExtractor"),xoo=o(" (LayoutLMv2 model)"),koo=l(),vh=a("li"),qY=a("strong"),Roo=o("maskformer"),Soo=o(" \u2014 "),CR=a("a"),Poo=o("MaskFormerFeatureExtractor"),$oo=o(" (MaskFormer model)"),Ioo=l(),Th=a("li"),GY=a("strong"),joo=o("perceiver"),Noo=o(" \u2014 "),MR=a("a"),Doo=o("PerceiverFeatureExtractor"),qoo=o(" (Perceiver model)"),Goo=l(),Fh=a("li"),OY=a("strong"),Ooo=o("poolformer"),Xoo=o(" \u2014 "),ER=a("a"),Voo=o("PoolFormerFeatureExtractor"),zoo=o(" (PoolFormer model)"),Woo=l(),Ch=a("li"),XY=a("strong"),Qoo=o("resnet"),Hoo=o(" \u2014 "),yR=a("a"),Uoo=o("ConvNextFeatureExtractor"),Joo=o(" (ResNet model)"),Yoo=l(),Mh=a("li"),VY=a("strong"),Koo=o("segformer"),Zoo=o(" \u2014 "),wR=a("a"),ero=o("SegformerFeatureExtractor"),oro=o(" (SegFormer model)"),rro=l(),Eh=a("li"),zY=a("strong"),tro=o("speech_to_text"),aro=o(" \u2014 "),AR=a("a"),nro=o("Speech2TextFeatureExtractor"),sro=o(" (Speech2Text model)"),lro=l(),yh=a("li"),WY=a("strong"),iro=o("swin"),dro=o(" \u2014 "),LR=a("a"),cro=o("ViTFeatureExtractor"),fro=o(" (Swin model)"),mro=l(),wh=a("li"),QY=a("strong"),gro=o("van"),hro=o(" \u2014 "),BR=a("a"),pro=o("ConvNextFeatureExtractor"),_ro=o(" (VAN model)"),uro=l(),Ah=a("li"),HY=a("strong"),bro=o("vit"),vro=o(" \u2014 "),xR=a("a"),Tro=o("ViTFeatureExtractor"),Fro=o(" (ViT model)"),Cro=l(),Lh=a("li"),UY=a("strong"),Mro=o("vit_mae"),Ero=o(" \u2014 "),kR=a("a"),yro=o("ViTFeatureExtractor"),wro=o(" (ViTMAE model)"),Aro=l(),Bh=a("li"),JY=a("strong"),Lro=o("wav2vec2"),Bro=o(" \u2014 "),RR=a("a"),xro=o("Wav2Vec2FeatureExtractor"),kro=o(" (Wav2Vec2 model)"),Rro=l(),f(xh.$$.fragment),Sro=l(),YY=a("p"),Pro=o("Examples:"),$ro=l(),f(PE.$$.fragment),Iro=l(),kh=a("div"),f($E.$$.fragment),jro=l(),KY=a("p"),Nro=o("Register a new feature extractor for this class."),Ake=l(),Hi=a("h2"),Rh=a("a"),ZY=a("span"),f(IE.$$.fragment),Dro=l(),eK=a("span"),qro=o("AutoProcessor"),Lke=l(),Uo=a("div"),f(jE.$$.fragment),Gro=l(),NE=a("p"),Oro=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),SR=a("a"),Xro=o("AutoProcessor.from_pretrained()"),Vro=o(" class method."),zro=l(),DE=a("p"),Wro=o("This class cannot be instantiated directly using "),oK=a("code"),Qro=o("__init__()"),Hro=o(" (throws an error)."),Uro=l(),Ie=a("div"),f(qE.$$.fragment),Jro=l(),rK=a("p"),Yro=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Kro=l(),Ui=a("p"),Zro=o("The processor class to instantiate is selected based on the "),tK=a("code"),eto=o("model_type"),oto=o(` property of the config object (either
passed as an argument or loaded from `),aK=a("code"),rto=o("pretrained_model_name_or_path"),tto=o(" if possible):"),ato=l(),xe=a("ul"),Sh=a("li"),nK=a("strong"),nto=o("clip"),sto=o(" \u2014 "),PR=a("a"),lto=o("CLIPProcessor"),ito=o(" (CLIP model)"),dto=l(),Ph=a("li"),sK=a("strong"),cto=o("layoutlmv2"),fto=o(" \u2014 "),$R=a("a"),mto=o("LayoutLMv2Processor"),gto=o(" (LayoutLMv2 model)"),hto=l(),$h=a("li"),lK=a("strong"),pto=o("layoutxlm"),_to=o(" \u2014 "),IR=a("a"),uto=o("LayoutXLMProcessor"),bto=o(" (LayoutXLM model)"),vto=l(),Ih=a("li"),iK=a("strong"),Tto=o("speech_to_text"),Fto=o(" \u2014 "),jR=a("a"),Cto=o("Speech2TextProcessor"),Mto=o(" (Speech2Text model)"),Eto=l(),jh=a("li"),dK=a("strong"),yto=o("speech_to_text_2"),wto=o(" \u2014 "),NR=a("a"),Ato=o("Speech2Text2Processor"),Lto=o(" (Speech2Text2 model)"),Bto=l(),Nh=a("li"),cK=a("strong"),xto=o("trocr"),kto=o(" \u2014 "),DR=a("a"),Rto=o("TrOCRProcessor"),Sto=o(" (TrOCR model)"),Pto=l(),Dh=a("li"),fK=a("strong"),$to=o("vision-text-dual-encoder"),Ito=o(" \u2014 "),qR=a("a"),jto=o("VisionTextDualEncoderProcessor"),Nto=o(" (VisionTextDualEncoder model)"),Dto=l(),qh=a("li"),mK=a("strong"),qto=o("wav2vec2"),Gto=o(" \u2014 "),GR=a("a"),Oto=o("Wav2Vec2Processor"),Xto=o(" (Wav2Vec2 model)"),Vto=l(),f(Gh.$$.fragment),zto=l(),gK=a("p"),Wto=o("Examples:"),Qto=l(),f(GE.$$.fragment),Hto=l(),Oh=a("div"),f(OE.$$.fragment),Uto=l(),hK=a("p"),Jto=o("Register a new processor for this class."),Bke=l(),Ji=a("h2"),Xh=a("a"),pK=a("span"),f(XE.$$.fragment),Yto=l(),_K=a("span"),Kto=o("AutoModel"),xke=l(),Jo=a("div"),f(VE.$$.fragment),Zto=l(),Yi=a("p"),eao=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uK=a("code"),oao=o("from_pretrained()"),rao=o("class method or the "),bK=a("code"),tao=o("from_config()"),aao=o(`class
method.`),nao=l(),zE=a("p"),sao=o("This class cannot be instantiated directly using "),vK=a("code"),lao=o("__init__()"),iao=o(" (throws an error)."),dao=l(),Vr=a("div"),f(WE.$$.fragment),cao=l(),TK=a("p"),fao=o("Instantiates one of the base model classes of the library from a configuration."),mao=l(),Ki=a("p"),gao=o(`Note:
Loading a model from its configuration file does `),FK=a("strong"),hao=o("not"),pao=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=a("code"),_ao=o("from_pretrained()"),uao=o("to load the model weights."),bao=l(),MK=a("p"),vao=o("Examples:"),Tao=l(),f(QE.$$.fragment),Fao=l(),je=a("div"),f(HE.$$.fragment),Cao=l(),EK=a("p"),Mao=o("Instantiate one of the base model classes of the library from a pretrained model."),Eao=l(),Va=a("p"),yao=o("The model class to instantiate is selected based on the "),yK=a("code"),wao=o("model_type"),Aao=o(` property of the config object (either
passed as an argument or loaded from `),wK=a("code"),Lao=o("pretrained_model_name_or_path"),Bao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AK=a("code"),xao=o("pretrained_model_name_or_path"),kao=o(":"),Rao=l(),F=a("ul"),Vh=a("li"),LK=a("strong"),Sao=o("albert"),Pao=o(" \u2014 "),OR=a("a"),$ao=o("AlbertModel"),Iao=o(" (ALBERT model)"),jao=l(),zh=a("li"),BK=a("strong"),Nao=o("bart"),Dao=o(" \u2014 "),XR=a("a"),qao=o("BartModel"),Gao=o(" (BART model)"),Oao=l(),Wh=a("li"),xK=a("strong"),Xao=o("beit"),Vao=o(" \u2014 "),VR=a("a"),zao=o("BeitModel"),Wao=o(" (BEiT model)"),Qao=l(),Qh=a("li"),kK=a("strong"),Hao=o("bert"),Uao=o(" \u2014 "),zR=a("a"),Jao=o("BertModel"),Yao=o(" (BERT model)"),Kao=l(),Hh=a("li"),RK=a("strong"),Zao=o("bert-generation"),eno=o(" \u2014 "),WR=a("a"),ono=o("BertGenerationEncoder"),rno=o(" (Bert Generation model)"),tno=l(),Uh=a("li"),SK=a("strong"),ano=o("big_bird"),nno=o(" \u2014 "),QR=a("a"),sno=o("BigBirdModel"),lno=o(" (BigBird model)"),ino=l(),Jh=a("li"),PK=a("strong"),dno=o("bigbird_pegasus"),cno=o(" \u2014 "),HR=a("a"),fno=o("BigBirdPegasusModel"),mno=o(" (BigBirdPegasus model)"),gno=l(),Yh=a("li"),$K=a("strong"),hno=o("blenderbot"),pno=o(" \u2014 "),UR=a("a"),_no=o("BlenderbotModel"),uno=o(" (Blenderbot model)"),bno=l(),Kh=a("li"),IK=a("strong"),vno=o("blenderbot-small"),Tno=o(" \u2014 "),JR=a("a"),Fno=o("BlenderbotSmallModel"),Cno=o(" (BlenderbotSmall model)"),Mno=l(),Zh=a("li"),jK=a("strong"),Eno=o("camembert"),yno=o(" \u2014 "),YR=a("a"),wno=o("CamembertModel"),Ano=o(" (CamemBERT model)"),Lno=l(),ep=a("li"),NK=a("strong"),Bno=o("canine"),xno=o(" \u2014 "),KR=a("a"),kno=o("CanineModel"),Rno=o(" (Canine model)"),Sno=l(),op=a("li"),DK=a("strong"),Pno=o("clip"),$no=o(" \u2014 "),ZR=a("a"),Ino=o("CLIPModel"),jno=o(" (CLIP model)"),Nno=l(),rp=a("li"),qK=a("strong"),Dno=o("convbert"),qno=o(" \u2014 "),eS=a("a"),Gno=o("ConvBertModel"),Ono=o(" (ConvBERT model)"),Xno=l(),tp=a("li"),GK=a("strong"),Vno=o("convnext"),zno=o(" \u2014 "),oS=a("a"),Wno=o("ConvNextModel"),Qno=o(" (ConvNext model)"),Hno=l(),ap=a("li"),OK=a("strong"),Uno=o("ctrl"),Jno=o(" \u2014 "),rS=a("a"),Yno=o("CTRLModel"),Kno=o(" (CTRL model)"),Zno=l(),np=a("li"),XK=a("strong"),eso=o("data2vec-audio"),oso=o(" \u2014 "),tS=a("a"),rso=o("Data2VecAudioModel"),tso=o(" (Data2VecAudio model)"),aso=l(),sp=a("li"),VK=a("strong"),nso=o("data2vec-text"),sso=o(" \u2014 "),aS=a("a"),lso=o("Data2VecTextModel"),iso=o(" (Data2VecText model)"),dso=l(),lp=a("li"),zK=a("strong"),cso=o("deberta"),fso=o(" \u2014 "),nS=a("a"),mso=o("DebertaModel"),gso=o(" (DeBERTa model)"),hso=l(),ip=a("li"),WK=a("strong"),pso=o("deberta-v2"),_so=o(" \u2014 "),sS=a("a"),uso=o("DebertaV2Model"),bso=o(" (DeBERTa-v2 model)"),vso=l(),dp=a("li"),QK=a("strong"),Tso=o("decision_transformer"),Fso=o(" \u2014 "),lS=a("a"),Cso=o("DecisionTransformerModel"),Mso=o(" (Decision Transformer model)"),Eso=l(),cp=a("li"),HK=a("strong"),yso=o("deit"),wso=o(" \u2014 "),iS=a("a"),Aso=o("DeiTModel"),Lso=o(" (DeiT model)"),Bso=l(),fp=a("li"),UK=a("strong"),xso=o("detr"),kso=o(" \u2014 "),dS=a("a"),Rso=o("DetrModel"),Sso=o(" (DETR model)"),Pso=l(),mp=a("li"),JK=a("strong"),$so=o("distilbert"),Iso=o(" \u2014 "),cS=a("a"),jso=o("DistilBertModel"),Nso=o(" (DistilBERT model)"),Dso=l(),gp=a("li"),YK=a("strong"),qso=o("dpr"),Gso=o(" \u2014 "),fS=a("a"),Oso=o("DPRQuestionEncoder"),Xso=o(" (DPR model)"),Vso=l(),hp=a("li"),KK=a("strong"),zso=o("electra"),Wso=o(" \u2014 "),mS=a("a"),Qso=o("ElectraModel"),Hso=o(" (ELECTRA model)"),Uso=l(),pp=a("li"),ZK=a("strong"),Jso=o("flaubert"),Yso=o(" \u2014 "),gS=a("a"),Kso=o("FlaubertModel"),Zso=o(" (FlauBERT model)"),elo=l(),_p=a("li"),eZ=a("strong"),olo=o("fnet"),rlo=o(" \u2014 "),hS=a("a"),tlo=o("FNetModel"),alo=o(" (FNet model)"),nlo=l(),up=a("li"),oZ=a("strong"),slo=o("fsmt"),llo=o(" \u2014 "),pS=a("a"),ilo=o("FSMTModel"),dlo=o(" (FairSeq Machine-Translation model)"),clo=l(),Ds=a("li"),rZ=a("strong"),flo=o("funnel"),mlo=o(" \u2014 "),_S=a("a"),glo=o("FunnelModel"),hlo=o(" or "),uS=a("a"),plo=o("FunnelBaseModel"),_lo=o(" (Funnel Transformer model)"),ulo=l(),bp=a("li"),tZ=a("strong"),blo=o("glpn"),vlo=o(" \u2014 "),bS=a("a"),Tlo=o("GLPNModel"),Flo=o(" (GLPN model)"),Clo=l(),vp=a("li"),aZ=a("strong"),Mlo=o("gpt2"),Elo=o(" \u2014 "),vS=a("a"),ylo=o("GPT2Model"),wlo=o(" (OpenAI GPT-2 model)"),Alo=l(),Tp=a("li"),nZ=a("strong"),Llo=o("gpt_neo"),Blo=o(" \u2014 "),TS=a("a"),xlo=o("GPTNeoModel"),klo=o(" (GPT Neo model)"),Rlo=l(),Fp=a("li"),sZ=a("strong"),Slo=o("gptj"),Plo=o(" \u2014 "),FS=a("a"),$lo=o("GPTJModel"),Ilo=o(" (GPT-J model)"),jlo=l(),Cp=a("li"),lZ=a("strong"),Nlo=o("hubert"),Dlo=o(" \u2014 "),CS=a("a"),qlo=o("HubertModel"),Glo=o(" (Hubert model)"),Olo=l(),Mp=a("li"),iZ=a("strong"),Xlo=o("ibert"),Vlo=o(" \u2014 "),MS=a("a"),zlo=o("IBertModel"),Wlo=o(" (I-BERT model)"),Qlo=l(),Ep=a("li"),dZ=a("strong"),Hlo=o("imagegpt"),Ulo=o(" \u2014 "),ES=a("a"),Jlo=o("ImageGPTModel"),Ylo=o(" (ImageGPT model)"),Klo=l(),yp=a("li"),cZ=a("strong"),Zlo=o("layoutlm"),eio=o(" \u2014 "),yS=a("a"),oio=o("LayoutLMModel"),rio=o(" (LayoutLM model)"),tio=l(),wp=a("li"),fZ=a("strong"),aio=o("layoutlmv2"),nio=o(" \u2014 "),wS=a("a"),sio=o("LayoutLMv2Model"),lio=o(" (LayoutLMv2 model)"),iio=l(),Ap=a("li"),mZ=a("strong"),dio=o("led"),cio=o(" \u2014 "),AS=a("a"),fio=o("LEDModel"),mio=o(" (LED model)"),gio=l(),Lp=a("li"),gZ=a("strong"),hio=o("longformer"),pio=o(" \u2014 "),LS=a("a"),_io=o("LongformerModel"),uio=o(" (Longformer model)"),bio=l(),Bp=a("li"),hZ=a("strong"),vio=o("luke"),Tio=o(" \u2014 "),BS=a("a"),Fio=o("LukeModel"),Cio=o(" (LUKE model)"),Mio=l(),xp=a("li"),pZ=a("strong"),Eio=o("lxmert"),yio=o(" \u2014 "),xS=a("a"),wio=o("LxmertModel"),Aio=o(" (LXMERT model)"),Lio=l(),kp=a("li"),_Z=a("strong"),Bio=o("m2m_100"),xio=o(" \u2014 "),kS=a("a"),kio=o("M2M100Model"),Rio=o(" (M2M100 model)"),Sio=l(),Rp=a("li"),uZ=a("strong"),Pio=o("marian"),$io=o(" \u2014 "),RS=a("a"),Iio=o("MarianModel"),jio=o(" (Marian model)"),Nio=l(),Sp=a("li"),bZ=a("strong"),Dio=o("maskformer"),qio=o(" \u2014 "),SS=a("a"),Gio=o("MaskFormerModel"),Oio=o(" (MaskFormer model)"),Xio=l(),Pp=a("li"),vZ=a("strong"),Vio=o("mbart"),zio=o(" \u2014 "),PS=a("a"),Wio=o("MBartModel"),Qio=o(" (mBART model)"),Hio=l(),$p=a("li"),TZ=a("strong"),Uio=o("megatron-bert"),Jio=o(" \u2014 "),$S=a("a"),Yio=o("MegatronBertModel"),Kio=o(" (MegatronBert model)"),Zio=l(),Ip=a("li"),FZ=a("strong"),edo=o("mobilebert"),odo=o(" \u2014 "),IS=a("a"),rdo=o("MobileBertModel"),tdo=o(" (MobileBERT model)"),ado=l(),jp=a("li"),CZ=a("strong"),ndo=o("mpnet"),sdo=o(" \u2014 "),jS=a("a"),ldo=o("MPNetModel"),ido=o(" (MPNet model)"),ddo=l(),Np=a("li"),MZ=a("strong"),cdo=o("mt5"),fdo=o(" \u2014 "),NS=a("a"),mdo=o("MT5Model"),gdo=o(" (mT5 model)"),hdo=l(),Dp=a("li"),EZ=a("strong"),pdo=o("nystromformer"),_do=o(" \u2014 "),DS=a("a"),udo=o("NystromformerModel"),bdo=o(" (Nystromformer model)"),vdo=l(),qp=a("li"),yZ=a("strong"),Tdo=o("openai-gpt"),Fdo=o(" \u2014 "),qS=a("a"),Cdo=o("OpenAIGPTModel"),Mdo=o(" (OpenAI GPT model)"),Edo=l(),Gp=a("li"),wZ=a("strong"),ydo=o("pegasus"),wdo=o(" \u2014 "),GS=a("a"),Ado=o("PegasusModel"),Ldo=o(" (Pegasus model)"),Bdo=l(),Op=a("li"),AZ=a("strong"),xdo=o("perceiver"),kdo=o(" \u2014 "),OS=a("a"),Rdo=o("PerceiverModel"),Sdo=o(" (Perceiver model)"),Pdo=l(),Xp=a("li"),LZ=a("strong"),$do=o("plbart"),Ido=o(" \u2014 "),XS=a("a"),jdo=o("PLBartModel"),Ndo=o(" (PLBart model)"),Ddo=l(),Vp=a("li"),BZ=a("strong"),qdo=o("poolformer"),Gdo=o(" \u2014 "),VS=a("a"),Odo=o("PoolFormerModel"),Xdo=o(" (PoolFormer model)"),Vdo=l(),zp=a("li"),xZ=a("strong"),zdo=o("prophetnet"),Wdo=o(" \u2014 "),zS=a("a"),Qdo=o("ProphetNetModel"),Hdo=o(" (ProphetNet model)"),Udo=l(),Wp=a("li"),kZ=a("strong"),Jdo=o("qdqbert"),Ydo=o(" \u2014 "),WS=a("a"),Kdo=o("QDQBertModel"),Zdo=o(" (QDQBert model)"),eco=l(),Qp=a("li"),RZ=a("strong"),oco=o("reformer"),rco=o(" \u2014 "),QS=a("a"),tco=o("ReformerModel"),aco=o(" (Reformer model)"),nco=l(),Hp=a("li"),SZ=a("strong"),sco=o("rembert"),lco=o(" \u2014 "),HS=a("a"),ico=o("RemBertModel"),dco=o(" (RemBERT model)"),cco=l(),Up=a("li"),PZ=a("strong"),fco=o("resnet"),mco=o(" \u2014 "),US=a("a"),gco=o("ResNetModel"),hco=o(" (ResNet model)"),pco=l(),Jp=a("li"),$Z=a("strong"),_co=o("retribert"),uco=o(" \u2014 "),JS=a("a"),bco=o("RetriBertModel"),vco=o(" (RetriBERT model)"),Tco=l(),Yp=a("li"),IZ=a("strong"),Fco=o("roberta"),Cco=o(" \u2014 "),YS=a("a"),Mco=o("RobertaModel"),Eco=o(" (RoBERTa model)"),yco=l(),Kp=a("li"),jZ=a("strong"),wco=o("roformer"),Aco=o(" \u2014 "),KS=a("a"),Lco=o("RoFormerModel"),Bco=o(" (RoFormer model)"),xco=l(),Zp=a("li"),NZ=a("strong"),kco=o("segformer"),Rco=o(" \u2014 "),ZS=a("a"),Sco=o("SegformerModel"),Pco=o(" (SegFormer model)"),$co=l(),e_=a("li"),DZ=a("strong"),Ico=o("sew"),jco=o(" \u2014 "),eP=a("a"),Nco=o("SEWModel"),Dco=o(" (SEW model)"),qco=l(),o_=a("li"),qZ=a("strong"),Gco=o("sew-d"),Oco=o(" \u2014 "),oP=a("a"),Xco=o("SEWDModel"),Vco=o(" (SEW-D model)"),zco=l(),r_=a("li"),GZ=a("strong"),Wco=o("speech_to_text"),Qco=o(" \u2014 "),rP=a("a"),Hco=o("Speech2TextModel"),Uco=o(" (Speech2Text model)"),Jco=l(),t_=a("li"),OZ=a("strong"),Yco=o("splinter"),Kco=o(" \u2014 "),tP=a("a"),Zco=o("SplinterModel"),efo=o(" (Splinter model)"),ofo=l(),a_=a("li"),XZ=a("strong"),rfo=o("squeezebert"),tfo=o(" \u2014 "),aP=a("a"),afo=o("SqueezeBertModel"),nfo=o(" (SqueezeBERT model)"),sfo=l(),n_=a("li"),VZ=a("strong"),lfo=o("swin"),ifo=o(" \u2014 "),nP=a("a"),dfo=o("SwinModel"),cfo=o(" (Swin model)"),ffo=l(),s_=a("li"),zZ=a("strong"),mfo=o("t5"),gfo=o(" \u2014 "),sP=a("a"),hfo=o("T5Model"),pfo=o(" (T5 model)"),_fo=l(),l_=a("li"),WZ=a("strong"),ufo=o("tapas"),bfo=o(" \u2014 "),lP=a("a"),vfo=o("TapasModel"),Tfo=o(" (TAPAS model)"),Ffo=l(),i_=a("li"),QZ=a("strong"),Cfo=o("transfo-xl"),Mfo=o(" \u2014 "),iP=a("a"),Efo=o("TransfoXLModel"),yfo=o(" (Transformer-XL model)"),wfo=l(),d_=a("li"),HZ=a("strong"),Afo=o("unispeech"),Lfo=o(" \u2014 "),dP=a("a"),Bfo=o("UniSpeechModel"),xfo=o(" (UniSpeech model)"),kfo=l(),c_=a("li"),UZ=a("strong"),Rfo=o("unispeech-sat"),Sfo=o(" \u2014 "),cP=a("a"),Pfo=o("UniSpeechSatModel"),$fo=o(" (UniSpeechSat model)"),Ifo=l(),f_=a("li"),JZ=a("strong"),jfo=o("van"),Nfo=o(" \u2014 "),fP=a("a"),Dfo=o("VanModel"),qfo=o(" (VAN model)"),Gfo=l(),m_=a("li"),YZ=a("strong"),Ofo=o("vilt"),Xfo=o(" \u2014 "),mP=a("a"),Vfo=o("ViltModel"),zfo=o(" (ViLT model)"),Wfo=l(),g_=a("li"),KZ=a("strong"),Qfo=o("vision-text-dual-encoder"),Hfo=o(" \u2014 "),gP=a("a"),Ufo=o("VisionTextDualEncoderModel"),Jfo=o(" (VisionTextDualEncoder model)"),Yfo=l(),h_=a("li"),ZZ=a("strong"),Kfo=o("visual_bert"),Zfo=o(" \u2014 "),hP=a("a"),emo=o("VisualBertModel"),omo=o(" (VisualBert model)"),rmo=l(),p_=a("li"),eee=a("strong"),tmo=o("vit"),amo=o(" \u2014 "),pP=a("a"),nmo=o("ViTModel"),smo=o(" (ViT model)"),lmo=l(),__=a("li"),oee=a("strong"),imo=o("vit_mae"),dmo=o(" \u2014 "),_P=a("a"),cmo=o("ViTMAEModel"),fmo=o(" (ViTMAE model)"),mmo=l(),u_=a("li"),ree=a("strong"),gmo=o("wav2vec2"),hmo=o(" \u2014 "),uP=a("a"),pmo=o("Wav2Vec2Model"),_mo=o(" (Wav2Vec2 model)"),umo=l(),b_=a("li"),tee=a("strong"),bmo=o("wavlm"),vmo=o(" \u2014 "),bP=a("a"),Tmo=o("WavLMModel"),Fmo=o(" (WavLM model)"),Cmo=l(),v_=a("li"),aee=a("strong"),Mmo=o("xglm"),Emo=o(" \u2014 "),vP=a("a"),ymo=o("XGLMModel"),wmo=o(" (XGLM model)"),Amo=l(),T_=a("li"),nee=a("strong"),Lmo=o("xlm"),Bmo=o(" \u2014 "),TP=a("a"),xmo=o("XLMModel"),kmo=o(" (XLM model)"),Rmo=l(),F_=a("li"),see=a("strong"),Smo=o("xlm-prophetnet"),Pmo=o(" \u2014 "),FP=a("a"),$mo=o("XLMProphetNetModel"),Imo=o(" (XLMProphetNet model)"),jmo=l(),C_=a("li"),lee=a("strong"),Nmo=o("xlm-roberta"),Dmo=o(" \u2014 "),CP=a("a"),qmo=o("XLMRobertaModel"),Gmo=o(" (XLM-RoBERTa model)"),Omo=l(),M_=a("li"),iee=a("strong"),Xmo=o("xlm-roberta-xl"),Vmo=o(" \u2014 "),MP=a("a"),zmo=o("XLMRobertaXLModel"),Wmo=o(" (XLM-RoBERTa-XL model)"),Qmo=l(),E_=a("li"),dee=a("strong"),Hmo=o("xlnet"),Umo=o(" \u2014 "),EP=a("a"),Jmo=o("XLNetModel"),Ymo=o(" (XLNet model)"),Kmo=l(),y_=a("li"),cee=a("strong"),Zmo=o("yoso"),ego=o(" \u2014 "),yP=a("a"),ogo=o("YosoModel"),rgo=o(" (YOSO model)"),tgo=l(),w_=a("p"),ago=o("The model is set in evaluation mode by default using "),fee=a("code"),ngo=o("model.eval()"),sgo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mee=a("code"),lgo=o("model.train()"),igo=l(),gee=a("p"),dgo=o("Examples:"),cgo=l(),f(UE.$$.fragment),kke=l(),Zi=a("h2"),A_=a("a"),hee=a("span"),f(JE.$$.fragment),fgo=l(),pee=a("span"),mgo=o("AutoModelForPreTraining"),Rke=l(),Yo=a("div"),f(YE.$$.fragment),ggo=l(),ed=a("p"),hgo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_ee=a("code"),pgo=o("from_pretrained()"),_go=o("class method or the "),uee=a("code"),ugo=o("from_config()"),bgo=o(`class
method.`),vgo=l(),KE=a("p"),Tgo=o("This class cannot be instantiated directly using "),bee=a("code"),Fgo=o("__init__()"),Cgo=o(" (throws an error)."),Mgo=l(),zr=a("div"),f(ZE.$$.fragment),Ego=l(),vee=a("p"),ygo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wgo=l(),od=a("p"),Ago=o(`Note:
Loading a model from its configuration file does `),Tee=a("strong"),Lgo=o("not"),Bgo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fee=a("code"),xgo=o("from_pretrained()"),kgo=o("to load the model weights."),Rgo=l(),Cee=a("p"),Sgo=o("Examples:"),Pgo=l(),f(e3.$$.fragment),$go=l(),Ne=a("div"),f(o3.$$.fragment),Igo=l(),Mee=a("p"),jgo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ngo=l(),za=a("p"),Dgo=o("The model class to instantiate is selected based on the "),Eee=a("code"),qgo=o("model_type"),Ggo=o(` property of the config object (either
passed as an argument or loaded from `),yee=a("code"),Ogo=o("pretrained_model_name_or_path"),Xgo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wee=a("code"),Vgo=o("pretrained_model_name_or_path"),zgo=o(":"),Wgo=l(),k=a("ul"),L_=a("li"),Aee=a("strong"),Qgo=o("albert"),Hgo=o(" \u2014 "),wP=a("a"),Ugo=o("AlbertForPreTraining"),Jgo=o(" (ALBERT model)"),Ygo=l(),B_=a("li"),Lee=a("strong"),Kgo=o("bart"),Zgo=o(" \u2014 "),AP=a("a"),eho=o("BartForConditionalGeneration"),oho=o(" (BART model)"),rho=l(),x_=a("li"),Bee=a("strong"),tho=o("bert"),aho=o(" \u2014 "),LP=a("a"),nho=o("BertForPreTraining"),sho=o(" (BERT model)"),lho=l(),k_=a("li"),xee=a("strong"),iho=o("big_bird"),dho=o(" \u2014 "),BP=a("a"),cho=o("BigBirdForPreTraining"),fho=o(" (BigBird model)"),mho=l(),R_=a("li"),kee=a("strong"),gho=o("camembert"),hho=o(" \u2014 "),xP=a("a"),pho=o("CamembertForMaskedLM"),_ho=o(" (CamemBERT model)"),uho=l(),S_=a("li"),Ree=a("strong"),bho=o("ctrl"),vho=o(" \u2014 "),kP=a("a"),Tho=o("CTRLLMHeadModel"),Fho=o(" (CTRL model)"),Cho=l(),P_=a("li"),See=a("strong"),Mho=o("data2vec-text"),Eho=o(" \u2014 "),RP=a("a"),yho=o("Data2VecTextForMaskedLM"),who=o(" (Data2VecText model)"),Aho=l(),$_=a("li"),Pee=a("strong"),Lho=o("deberta"),Bho=o(" \u2014 "),SP=a("a"),xho=o("DebertaForMaskedLM"),kho=o(" (DeBERTa model)"),Rho=l(),I_=a("li"),$ee=a("strong"),Sho=o("deberta-v2"),Pho=o(" \u2014 "),PP=a("a"),$ho=o("DebertaV2ForMaskedLM"),Iho=o(" (DeBERTa-v2 model)"),jho=l(),j_=a("li"),Iee=a("strong"),Nho=o("distilbert"),Dho=o(" \u2014 "),$P=a("a"),qho=o("DistilBertForMaskedLM"),Gho=o(" (DistilBERT model)"),Oho=l(),N_=a("li"),jee=a("strong"),Xho=o("electra"),Vho=o(" \u2014 "),IP=a("a"),zho=o("ElectraForPreTraining"),Who=o(" (ELECTRA model)"),Qho=l(),D_=a("li"),Nee=a("strong"),Hho=o("flaubert"),Uho=o(" \u2014 "),jP=a("a"),Jho=o("FlaubertWithLMHeadModel"),Yho=o(" (FlauBERT model)"),Kho=l(),q_=a("li"),Dee=a("strong"),Zho=o("fnet"),epo=o(" \u2014 "),NP=a("a"),opo=o("FNetForPreTraining"),rpo=o(" (FNet model)"),tpo=l(),G_=a("li"),qee=a("strong"),apo=o("fsmt"),npo=o(" \u2014 "),DP=a("a"),spo=o("FSMTForConditionalGeneration"),lpo=o(" (FairSeq Machine-Translation model)"),ipo=l(),O_=a("li"),Gee=a("strong"),dpo=o("funnel"),cpo=o(" \u2014 "),qP=a("a"),fpo=o("FunnelForPreTraining"),mpo=o(" (Funnel Transformer model)"),gpo=l(),X_=a("li"),Oee=a("strong"),hpo=o("gpt2"),ppo=o(" \u2014 "),GP=a("a"),_po=o("GPT2LMHeadModel"),upo=o(" (OpenAI GPT-2 model)"),bpo=l(),V_=a("li"),Xee=a("strong"),vpo=o("ibert"),Tpo=o(" \u2014 "),OP=a("a"),Fpo=o("IBertForMaskedLM"),Cpo=o(" (I-BERT model)"),Mpo=l(),z_=a("li"),Vee=a("strong"),Epo=o("layoutlm"),ypo=o(" \u2014 "),XP=a("a"),wpo=o("LayoutLMForMaskedLM"),Apo=o(" (LayoutLM model)"),Lpo=l(),W_=a("li"),zee=a("strong"),Bpo=o("longformer"),xpo=o(" \u2014 "),VP=a("a"),kpo=o("LongformerForMaskedLM"),Rpo=o(" (Longformer model)"),Spo=l(),Q_=a("li"),Wee=a("strong"),Ppo=o("lxmert"),$po=o(" \u2014 "),zP=a("a"),Ipo=o("LxmertForPreTraining"),jpo=o(" (LXMERT model)"),Npo=l(),H_=a("li"),Qee=a("strong"),Dpo=o("megatron-bert"),qpo=o(" \u2014 "),WP=a("a"),Gpo=o("MegatronBertForPreTraining"),Opo=o(" (MegatronBert model)"),Xpo=l(),U_=a("li"),Hee=a("strong"),Vpo=o("mobilebert"),zpo=o(" \u2014 "),QP=a("a"),Wpo=o("MobileBertForPreTraining"),Qpo=o(" (MobileBERT model)"),Hpo=l(),J_=a("li"),Uee=a("strong"),Upo=o("mpnet"),Jpo=o(" \u2014 "),HP=a("a"),Ypo=o("MPNetForMaskedLM"),Kpo=o(" (MPNet model)"),Zpo=l(),Y_=a("li"),Jee=a("strong"),e_o=o("openai-gpt"),o_o=o(" \u2014 "),UP=a("a"),r_o=o("OpenAIGPTLMHeadModel"),t_o=o(" (OpenAI GPT model)"),a_o=l(),K_=a("li"),Yee=a("strong"),n_o=o("retribert"),s_o=o(" \u2014 "),JP=a("a"),l_o=o("RetriBertModel"),i_o=o(" (RetriBERT model)"),d_o=l(),Z_=a("li"),Kee=a("strong"),c_o=o("roberta"),f_o=o(" \u2014 "),YP=a("a"),m_o=o("RobertaForMaskedLM"),g_o=o(" (RoBERTa model)"),h_o=l(),eu=a("li"),Zee=a("strong"),p_o=o("squeezebert"),__o=o(" \u2014 "),KP=a("a"),u_o=o("SqueezeBertForMaskedLM"),b_o=o(" (SqueezeBERT model)"),v_o=l(),ou=a("li"),eoe=a("strong"),T_o=o("t5"),F_o=o(" \u2014 "),ZP=a("a"),C_o=o("T5ForConditionalGeneration"),M_o=o(" (T5 model)"),E_o=l(),ru=a("li"),ooe=a("strong"),y_o=o("tapas"),w_o=o(" \u2014 "),e$=a("a"),A_o=o("TapasForMaskedLM"),L_o=o(" (TAPAS model)"),B_o=l(),tu=a("li"),roe=a("strong"),x_o=o("transfo-xl"),k_o=o(" \u2014 "),o$=a("a"),R_o=o("TransfoXLLMHeadModel"),S_o=o(" (Transformer-XL model)"),P_o=l(),au=a("li"),toe=a("strong"),$_o=o("unispeech"),I_o=o(" \u2014 "),r$=a("a"),j_o=o("UniSpeechForPreTraining"),N_o=o(" (UniSpeech model)"),D_o=l(),nu=a("li"),aoe=a("strong"),q_o=o("unispeech-sat"),G_o=o(" \u2014 "),t$=a("a"),O_o=o("UniSpeechSatForPreTraining"),X_o=o(" (UniSpeechSat model)"),V_o=l(),su=a("li"),noe=a("strong"),z_o=o("visual_bert"),W_o=o(" \u2014 "),a$=a("a"),Q_o=o("VisualBertForPreTraining"),H_o=o(" (VisualBert model)"),U_o=l(),lu=a("li"),soe=a("strong"),J_o=o("vit_mae"),Y_o=o(" \u2014 "),n$=a("a"),K_o=o("ViTMAEForPreTraining"),Z_o=o(" (ViTMAE model)"),euo=l(),iu=a("li"),loe=a("strong"),ouo=o("wav2vec2"),ruo=o(" \u2014 "),s$=a("a"),tuo=o("Wav2Vec2ForPreTraining"),auo=o(" (Wav2Vec2 model)"),nuo=l(),du=a("li"),ioe=a("strong"),suo=o("xlm"),luo=o(" \u2014 "),l$=a("a"),iuo=o("XLMWithLMHeadModel"),duo=o(" (XLM model)"),cuo=l(),cu=a("li"),doe=a("strong"),fuo=o("xlm-roberta"),muo=o(" \u2014 "),i$=a("a"),guo=o("XLMRobertaForMaskedLM"),huo=o(" (XLM-RoBERTa model)"),puo=l(),fu=a("li"),coe=a("strong"),_uo=o("xlm-roberta-xl"),uuo=o(" \u2014 "),d$=a("a"),buo=o("XLMRobertaXLForMaskedLM"),vuo=o(" (XLM-RoBERTa-XL model)"),Tuo=l(),mu=a("li"),foe=a("strong"),Fuo=o("xlnet"),Cuo=o(" \u2014 "),c$=a("a"),Muo=o("XLNetLMHeadModel"),Euo=o(" (XLNet model)"),yuo=l(),gu=a("p"),wuo=o("The model is set in evaluation mode by default using "),moe=a("code"),Auo=o("model.eval()"),Luo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),goe=a("code"),Buo=o("model.train()"),xuo=l(),hoe=a("p"),kuo=o("Examples:"),Ruo=l(),f(r3.$$.fragment),Ske=l(),rd=a("h2"),hu=a("a"),poe=a("span"),f(t3.$$.fragment),Suo=l(),_oe=a("span"),Puo=o("AutoModelForCausalLM"),Pke=l(),Ko=a("div"),f(a3.$$.fragment),$uo=l(),td=a("p"),Iuo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),uoe=a("code"),juo=o("from_pretrained()"),Nuo=o("class method or the "),boe=a("code"),Duo=o("from_config()"),quo=o(`class
method.`),Guo=l(),n3=a("p"),Ouo=o("This class cannot be instantiated directly using "),voe=a("code"),Xuo=o("__init__()"),Vuo=o(" (throws an error)."),zuo=l(),Wr=a("div"),f(s3.$$.fragment),Wuo=l(),Toe=a("p"),Quo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Huo=l(),ad=a("p"),Uuo=o(`Note:
Loading a model from its configuration file does `),Foe=a("strong"),Juo=o("not"),Yuo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Coe=a("code"),Kuo=o("from_pretrained()"),Zuo=o("to load the model weights."),e1o=l(),Moe=a("p"),o1o=o("Examples:"),r1o=l(),f(l3.$$.fragment),t1o=l(),De=a("div"),f(i3.$$.fragment),a1o=l(),Eoe=a("p"),n1o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),s1o=l(),Wa=a("p"),l1o=o("The model class to instantiate is selected based on the "),yoe=a("code"),i1o=o("model_type"),d1o=o(` property of the config object (either
passed as an argument or loaded from `),woe=a("code"),c1o=o("pretrained_model_name_or_path"),f1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aoe=a("code"),m1o=o("pretrained_model_name_or_path"),g1o=o(":"),h1o=l(),$=a("ul"),pu=a("li"),Loe=a("strong"),p1o=o("bart"),_1o=o(" \u2014 "),f$=a("a"),u1o=o("BartForCausalLM"),b1o=o(" (BART model)"),v1o=l(),_u=a("li"),Boe=a("strong"),T1o=o("bert"),F1o=o(" \u2014 "),m$=a("a"),C1o=o("BertLMHeadModel"),M1o=o(" (BERT model)"),E1o=l(),uu=a("li"),xoe=a("strong"),y1o=o("bert-generation"),w1o=o(" \u2014 "),g$=a("a"),A1o=o("BertGenerationDecoder"),L1o=o(" (Bert Generation model)"),B1o=l(),bu=a("li"),koe=a("strong"),x1o=o("big_bird"),k1o=o(" \u2014 "),h$=a("a"),R1o=o("BigBirdForCausalLM"),S1o=o(" (BigBird model)"),P1o=l(),vu=a("li"),Roe=a("strong"),$1o=o("bigbird_pegasus"),I1o=o(" \u2014 "),p$=a("a"),j1o=o("BigBirdPegasusForCausalLM"),N1o=o(" (BigBirdPegasus model)"),D1o=l(),Tu=a("li"),Soe=a("strong"),q1o=o("blenderbot"),G1o=o(" \u2014 "),_$=a("a"),O1o=o("BlenderbotForCausalLM"),X1o=o(" (Blenderbot model)"),V1o=l(),Fu=a("li"),Poe=a("strong"),z1o=o("blenderbot-small"),W1o=o(" \u2014 "),u$=a("a"),Q1o=o("BlenderbotSmallForCausalLM"),H1o=o(" (BlenderbotSmall model)"),U1o=l(),Cu=a("li"),$oe=a("strong"),J1o=o("camembert"),Y1o=o(" \u2014 "),b$=a("a"),K1o=o("CamembertForCausalLM"),Z1o=o(" (CamemBERT model)"),e4o=l(),Mu=a("li"),Ioe=a("strong"),o4o=o("ctrl"),r4o=o(" \u2014 "),v$=a("a"),t4o=o("CTRLLMHeadModel"),a4o=o(" (CTRL model)"),n4o=l(),Eu=a("li"),joe=a("strong"),s4o=o("data2vec-text"),l4o=o(" \u2014 "),T$=a("a"),i4o=o("Data2VecTextForCausalLM"),d4o=o(" (Data2VecText model)"),c4o=l(),yu=a("li"),Noe=a("strong"),f4o=o("electra"),m4o=o(" \u2014 "),F$=a("a"),g4o=o("ElectraForCausalLM"),h4o=o(" (ELECTRA model)"),p4o=l(),wu=a("li"),Doe=a("strong"),_4o=o("gpt2"),u4o=o(" \u2014 "),C$=a("a"),b4o=o("GPT2LMHeadModel"),v4o=o(" (OpenAI GPT-2 model)"),T4o=l(),Au=a("li"),qoe=a("strong"),F4o=o("gpt_neo"),C4o=o(" \u2014 "),M$=a("a"),M4o=o("GPTNeoForCausalLM"),E4o=o(" (GPT Neo model)"),y4o=l(),Lu=a("li"),Goe=a("strong"),w4o=o("gptj"),A4o=o(" \u2014 "),E$=a("a"),L4o=o("GPTJForCausalLM"),B4o=o(" (GPT-J model)"),x4o=l(),Bu=a("li"),Ooe=a("strong"),k4o=o("marian"),R4o=o(" \u2014 "),y$=a("a"),S4o=o("MarianForCausalLM"),P4o=o(" (Marian model)"),$4o=l(),xu=a("li"),Xoe=a("strong"),I4o=o("mbart"),j4o=o(" \u2014 "),w$=a("a"),N4o=o("MBartForCausalLM"),D4o=o(" (mBART model)"),q4o=l(),ku=a("li"),Voe=a("strong"),G4o=o("megatron-bert"),O4o=o(" \u2014 "),A$=a("a"),X4o=o("MegatronBertForCausalLM"),V4o=o(" (MegatronBert model)"),z4o=l(),Ru=a("li"),zoe=a("strong"),W4o=o("openai-gpt"),Q4o=o(" \u2014 "),L$=a("a"),H4o=o("OpenAIGPTLMHeadModel"),U4o=o(" (OpenAI GPT model)"),J4o=l(),Su=a("li"),Woe=a("strong"),Y4o=o("pegasus"),K4o=o(" \u2014 "),B$=a("a"),Z4o=o("PegasusForCausalLM"),ebo=o(" (Pegasus model)"),obo=l(),Pu=a("li"),Qoe=a("strong"),rbo=o("plbart"),tbo=o(" \u2014 "),x$=a("a"),abo=o("PLBartForCausalLM"),nbo=o(" (PLBart model)"),sbo=l(),$u=a("li"),Hoe=a("strong"),lbo=o("prophetnet"),ibo=o(" \u2014 "),k$=a("a"),dbo=o("ProphetNetForCausalLM"),cbo=o(" (ProphetNet model)"),fbo=l(),Iu=a("li"),Uoe=a("strong"),mbo=o("qdqbert"),gbo=o(" \u2014 "),R$=a("a"),hbo=o("QDQBertLMHeadModel"),pbo=o(" (QDQBert model)"),_bo=l(),ju=a("li"),Joe=a("strong"),ubo=o("reformer"),bbo=o(" \u2014 "),S$=a("a"),vbo=o("ReformerModelWithLMHead"),Tbo=o(" (Reformer model)"),Fbo=l(),Nu=a("li"),Yoe=a("strong"),Cbo=o("rembert"),Mbo=o(" \u2014 "),P$=a("a"),Ebo=o("RemBertForCausalLM"),ybo=o(" (RemBERT model)"),wbo=l(),Du=a("li"),Koe=a("strong"),Abo=o("roberta"),Lbo=o(" \u2014 "),$$=a("a"),Bbo=o("RobertaForCausalLM"),xbo=o(" (RoBERTa model)"),kbo=l(),qu=a("li"),Zoe=a("strong"),Rbo=o("roformer"),Sbo=o(" \u2014 "),I$=a("a"),Pbo=o("RoFormerForCausalLM"),$bo=o(" (RoFormer model)"),Ibo=l(),Gu=a("li"),ere=a("strong"),jbo=o("speech_to_text_2"),Nbo=o(" \u2014 "),j$=a("a"),Dbo=o("Speech2Text2ForCausalLM"),qbo=o(" (Speech2Text2 model)"),Gbo=l(),Ou=a("li"),ore=a("strong"),Obo=o("transfo-xl"),Xbo=o(" \u2014 "),N$=a("a"),Vbo=o("TransfoXLLMHeadModel"),zbo=o(" (Transformer-XL model)"),Wbo=l(),Xu=a("li"),rre=a("strong"),Qbo=o("trocr"),Hbo=o(" \u2014 "),D$=a("a"),Ubo=o("TrOCRForCausalLM"),Jbo=o(" (TrOCR model)"),Ybo=l(),Vu=a("li"),tre=a("strong"),Kbo=o("xglm"),Zbo=o(" \u2014 "),q$=a("a"),e5o=o("XGLMForCausalLM"),o5o=o(" (XGLM model)"),r5o=l(),zu=a("li"),are=a("strong"),t5o=o("xlm"),a5o=o(" \u2014 "),G$=a("a"),n5o=o("XLMWithLMHeadModel"),s5o=o(" (XLM model)"),l5o=l(),Wu=a("li"),nre=a("strong"),i5o=o("xlm-prophetnet"),d5o=o(" \u2014 "),O$=a("a"),c5o=o("XLMProphetNetForCausalLM"),f5o=o(" (XLMProphetNet model)"),m5o=l(),Qu=a("li"),sre=a("strong"),g5o=o("xlm-roberta"),h5o=o(" \u2014 "),X$=a("a"),p5o=o("XLMRobertaForCausalLM"),_5o=o(" (XLM-RoBERTa model)"),u5o=l(),Hu=a("li"),lre=a("strong"),b5o=o("xlm-roberta-xl"),v5o=o(" \u2014 "),V$=a("a"),T5o=o("XLMRobertaXLForCausalLM"),F5o=o(" (XLM-RoBERTa-XL model)"),C5o=l(),Uu=a("li"),ire=a("strong"),M5o=o("xlnet"),E5o=o(" \u2014 "),z$=a("a"),y5o=o("XLNetLMHeadModel"),w5o=o(" (XLNet model)"),A5o=l(),Ju=a("p"),L5o=o("The model is set in evaluation mode by default using "),dre=a("code"),B5o=o("model.eval()"),x5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cre=a("code"),k5o=o("model.train()"),R5o=l(),fre=a("p"),S5o=o("Examples:"),P5o=l(),f(d3.$$.fragment),$ke=l(),nd=a("h2"),Yu=a("a"),mre=a("span"),f(c3.$$.fragment),$5o=l(),gre=a("span"),I5o=o("AutoModelForMaskedLM"),Ike=l(),Zo=a("div"),f(f3.$$.fragment),j5o=l(),sd=a("p"),N5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hre=a("code"),D5o=o("from_pretrained()"),q5o=o("class method or the "),pre=a("code"),G5o=o("from_config()"),O5o=o(`class
method.`),X5o=l(),m3=a("p"),V5o=o("This class cannot be instantiated directly using "),_re=a("code"),z5o=o("__init__()"),W5o=o(" (throws an error)."),Q5o=l(),Qr=a("div"),f(g3.$$.fragment),H5o=l(),ure=a("p"),U5o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),J5o=l(),ld=a("p"),Y5o=o(`Note:
Loading a model from its configuration file does `),bre=a("strong"),K5o=o("not"),Z5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vre=a("code"),e2o=o("from_pretrained()"),o2o=o("to load the model weights."),r2o=l(),Tre=a("p"),t2o=o("Examples:"),a2o=l(),f(h3.$$.fragment),n2o=l(),qe=a("div"),f(p3.$$.fragment),s2o=l(),Fre=a("p"),l2o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),i2o=l(),Qa=a("p"),d2o=o("The model class to instantiate is selected based on the "),Cre=a("code"),c2o=o("model_type"),f2o=o(` property of the config object (either
passed as an argument or loaded from `),Mre=a("code"),m2o=o("pretrained_model_name_or_path"),g2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ere=a("code"),h2o=o("pretrained_model_name_or_path"),p2o=o(":"),_2o=l(),I=a("ul"),Ku=a("li"),yre=a("strong"),u2o=o("albert"),b2o=o(" \u2014 "),W$=a("a"),v2o=o("AlbertForMaskedLM"),T2o=o(" (ALBERT model)"),F2o=l(),Zu=a("li"),wre=a("strong"),C2o=o("bart"),M2o=o(" \u2014 "),Q$=a("a"),E2o=o("BartForConditionalGeneration"),y2o=o(" (BART model)"),w2o=l(),e1=a("li"),Are=a("strong"),A2o=o("bert"),L2o=o(" \u2014 "),H$=a("a"),B2o=o("BertForMaskedLM"),x2o=o(" (BERT model)"),k2o=l(),o1=a("li"),Lre=a("strong"),R2o=o("big_bird"),S2o=o(" \u2014 "),U$=a("a"),P2o=o("BigBirdForMaskedLM"),$2o=o(" (BigBird model)"),I2o=l(),r1=a("li"),Bre=a("strong"),j2o=o("camembert"),N2o=o(" \u2014 "),J$=a("a"),D2o=o("CamembertForMaskedLM"),q2o=o(" (CamemBERT model)"),G2o=l(),t1=a("li"),xre=a("strong"),O2o=o("convbert"),X2o=o(" \u2014 "),Y$=a("a"),V2o=o("ConvBertForMaskedLM"),z2o=o(" (ConvBERT model)"),W2o=l(),a1=a("li"),kre=a("strong"),Q2o=o("data2vec-text"),H2o=o(" \u2014 "),K$=a("a"),U2o=o("Data2VecTextForMaskedLM"),J2o=o(" (Data2VecText model)"),Y2o=l(),n1=a("li"),Rre=a("strong"),K2o=o("deberta"),Z2o=o(" \u2014 "),Z$=a("a"),evo=o("DebertaForMaskedLM"),ovo=o(" (DeBERTa model)"),rvo=l(),s1=a("li"),Sre=a("strong"),tvo=o("deberta-v2"),avo=o(" \u2014 "),eI=a("a"),nvo=o("DebertaV2ForMaskedLM"),svo=o(" (DeBERTa-v2 model)"),lvo=l(),l1=a("li"),Pre=a("strong"),ivo=o("distilbert"),dvo=o(" \u2014 "),oI=a("a"),cvo=o("DistilBertForMaskedLM"),fvo=o(" (DistilBERT model)"),mvo=l(),i1=a("li"),$re=a("strong"),gvo=o("electra"),hvo=o(" \u2014 "),rI=a("a"),pvo=o("ElectraForMaskedLM"),_vo=o(" (ELECTRA model)"),uvo=l(),d1=a("li"),Ire=a("strong"),bvo=o("flaubert"),vvo=o(" \u2014 "),tI=a("a"),Tvo=o("FlaubertWithLMHeadModel"),Fvo=o(" (FlauBERT model)"),Cvo=l(),c1=a("li"),jre=a("strong"),Mvo=o("fnet"),Evo=o(" \u2014 "),aI=a("a"),yvo=o("FNetForMaskedLM"),wvo=o(" (FNet model)"),Avo=l(),f1=a("li"),Nre=a("strong"),Lvo=o("funnel"),Bvo=o(" \u2014 "),nI=a("a"),xvo=o("FunnelForMaskedLM"),kvo=o(" (Funnel Transformer model)"),Rvo=l(),m1=a("li"),Dre=a("strong"),Svo=o("ibert"),Pvo=o(" \u2014 "),sI=a("a"),$vo=o("IBertForMaskedLM"),Ivo=o(" (I-BERT model)"),jvo=l(),g1=a("li"),qre=a("strong"),Nvo=o("layoutlm"),Dvo=o(" \u2014 "),lI=a("a"),qvo=o("LayoutLMForMaskedLM"),Gvo=o(" (LayoutLM model)"),Ovo=l(),h1=a("li"),Gre=a("strong"),Xvo=o("longformer"),Vvo=o(" \u2014 "),iI=a("a"),zvo=o("LongformerForMaskedLM"),Wvo=o(" (Longformer model)"),Qvo=l(),p1=a("li"),Ore=a("strong"),Hvo=o("mbart"),Uvo=o(" \u2014 "),dI=a("a"),Jvo=o("MBartForConditionalGeneration"),Yvo=o(" (mBART model)"),Kvo=l(),_1=a("li"),Xre=a("strong"),Zvo=o("megatron-bert"),e6o=o(" \u2014 "),cI=a("a"),o6o=o("MegatronBertForMaskedLM"),r6o=o(" (MegatronBert model)"),t6o=l(),u1=a("li"),Vre=a("strong"),a6o=o("mobilebert"),n6o=o(" \u2014 "),fI=a("a"),s6o=o("MobileBertForMaskedLM"),l6o=o(" (MobileBERT model)"),i6o=l(),b1=a("li"),zre=a("strong"),d6o=o("mpnet"),c6o=o(" \u2014 "),mI=a("a"),f6o=o("MPNetForMaskedLM"),m6o=o(" (MPNet model)"),g6o=l(),v1=a("li"),Wre=a("strong"),h6o=o("nystromformer"),p6o=o(" \u2014 "),gI=a("a"),_6o=o("NystromformerForMaskedLM"),u6o=o(" (Nystromformer model)"),b6o=l(),T1=a("li"),Qre=a("strong"),v6o=o("perceiver"),T6o=o(" \u2014 "),hI=a("a"),F6o=o("PerceiverForMaskedLM"),C6o=o(" (Perceiver model)"),M6o=l(),F1=a("li"),Hre=a("strong"),E6o=o("qdqbert"),y6o=o(" \u2014 "),pI=a("a"),w6o=o("QDQBertForMaskedLM"),A6o=o(" (QDQBert model)"),L6o=l(),C1=a("li"),Ure=a("strong"),B6o=o("reformer"),x6o=o(" \u2014 "),_I=a("a"),k6o=o("ReformerForMaskedLM"),R6o=o(" (Reformer model)"),S6o=l(),M1=a("li"),Jre=a("strong"),P6o=o("rembert"),$6o=o(" \u2014 "),uI=a("a"),I6o=o("RemBertForMaskedLM"),j6o=o(" (RemBERT model)"),N6o=l(),E1=a("li"),Yre=a("strong"),D6o=o("roberta"),q6o=o(" \u2014 "),bI=a("a"),G6o=o("RobertaForMaskedLM"),O6o=o(" (RoBERTa model)"),X6o=l(),y1=a("li"),Kre=a("strong"),V6o=o("roformer"),z6o=o(" \u2014 "),vI=a("a"),W6o=o("RoFormerForMaskedLM"),Q6o=o(" (RoFormer model)"),H6o=l(),w1=a("li"),Zre=a("strong"),U6o=o("squeezebert"),J6o=o(" \u2014 "),TI=a("a"),Y6o=o("SqueezeBertForMaskedLM"),K6o=o(" (SqueezeBERT model)"),Z6o=l(),A1=a("li"),ete=a("strong"),e0o=o("tapas"),o0o=o(" \u2014 "),FI=a("a"),r0o=o("TapasForMaskedLM"),t0o=o(" (TAPAS model)"),a0o=l(),L1=a("li"),ote=a("strong"),n0o=o("wav2vec2"),s0o=o(" \u2014 "),rte=a("code"),l0o=o("Wav2Vec2ForMaskedLM"),i0o=o("(Wav2Vec2 model)"),d0o=l(),B1=a("li"),tte=a("strong"),c0o=o("xlm"),f0o=o(" \u2014 "),CI=a("a"),m0o=o("XLMWithLMHeadModel"),g0o=o(" (XLM model)"),h0o=l(),x1=a("li"),ate=a("strong"),p0o=o("xlm-roberta"),_0o=o(" \u2014 "),MI=a("a"),u0o=o("XLMRobertaForMaskedLM"),b0o=o(" (XLM-RoBERTa model)"),v0o=l(),k1=a("li"),nte=a("strong"),T0o=o("xlm-roberta-xl"),F0o=o(" \u2014 "),EI=a("a"),C0o=o("XLMRobertaXLForMaskedLM"),M0o=o(" (XLM-RoBERTa-XL model)"),E0o=l(),R1=a("li"),ste=a("strong"),y0o=o("yoso"),w0o=o(" \u2014 "),yI=a("a"),A0o=o("YosoForMaskedLM"),L0o=o(" (YOSO model)"),B0o=l(),S1=a("p"),x0o=o("The model is set in evaluation mode by default using "),lte=a("code"),k0o=o("model.eval()"),R0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ite=a("code"),S0o=o("model.train()"),P0o=l(),dte=a("p"),$0o=o("Examples:"),I0o=l(),f(_3.$$.fragment),jke=l(),id=a("h2"),P1=a("a"),cte=a("span"),f(u3.$$.fragment),j0o=l(),fte=a("span"),N0o=o("AutoModelForSeq2SeqLM"),Nke=l(),er=a("div"),f(b3.$$.fragment),D0o=l(),dd=a("p"),q0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),mte=a("code"),G0o=o("from_pretrained()"),O0o=o("class method or the "),gte=a("code"),X0o=o("from_config()"),V0o=o(`class
method.`),z0o=l(),v3=a("p"),W0o=o("This class cannot be instantiated directly using "),hte=a("code"),Q0o=o("__init__()"),H0o=o(" (throws an error)."),U0o=l(),Hr=a("div"),f(T3.$$.fragment),J0o=l(),pte=a("p"),Y0o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),K0o=l(),cd=a("p"),Z0o=o(`Note:
Loading a model from its configuration file does `),_te=a("strong"),eTo=o("not"),oTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ute=a("code"),rTo=o("from_pretrained()"),tTo=o("to load the model weights."),aTo=l(),bte=a("p"),nTo=o("Examples:"),sTo=l(),f(F3.$$.fragment),lTo=l(),Ge=a("div"),f(C3.$$.fragment),iTo=l(),vte=a("p"),dTo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),cTo=l(),Ha=a("p"),fTo=o("The model class to instantiate is selected based on the "),Tte=a("code"),mTo=o("model_type"),gTo=o(` property of the config object (either
passed as an argument or loaded from `),Fte=a("code"),hTo=o("pretrained_model_name_or_path"),pTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cte=a("code"),_To=o("pretrained_model_name_or_path"),uTo=o(":"),bTo=l(),se=a("ul"),$1=a("li"),Mte=a("strong"),vTo=o("bart"),TTo=o(" \u2014 "),wI=a("a"),FTo=o("BartForConditionalGeneration"),CTo=o(" (BART model)"),MTo=l(),I1=a("li"),Ete=a("strong"),ETo=o("bigbird_pegasus"),yTo=o(" \u2014 "),AI=a("a"),wTo=o("BigBirdPegasusForConditionalGeneration"),ATo=o(" (BigBirdPegasus model)"),LTo=l(),j1=a("li"),yte=a("strong"),BTo=o("blenderbot"),xTo=o(" \u2014 "),LI=a("a"),kTo=o("BlenderbotForConditionalGeneration"),RTo=o(" (Blenderbot model)"),STo=l(),N1=a("li"),wte=a("strong"),PTo=o("blenderbot-small"),$To=o(" \u2014 "),BI=a("a"),ITo=o("BlenderbotSmallForConditionalGeneration"),jTo=o(" (BlenderbotSmall model)"),NTo=l(),D1=a("li"),Ate=a("strong"),DTo=o("encoder-decoder"),qTo=o(" \u2014 "),xI=a("a"),GTo=o("EncoderDecoderModel"),OTo=o(" (Encoder decoder model)"),XTo=l(),q1=a("li"),Lte=a("strong"),VTo=o("fsmt"),zTo=o(" \u2014 "),kI=a("a"),WTo=o("FSMTForConditionalGeneration"),QTo=o(" (FairSeq Machine-Translation model)"),HTo=l(),G1=a("li"),Bte=a("strong"),UTo=o("led"),JTo=o(" \u2014 "),RI=a("a"),YTo=o("LEDForConditionalGeneration"),KTo=o(" (LED model)"),ZTo=l(),O1=a("li"),xte=a("strong"),eFo=o("m2m_100"),oFo=o(" \u2014 "),SI=a("a"),rFo=o("M2M100ForConditionalGeneration"),tFo=o(" (M2M100 model)"),aFo=l(),X1=a("li"),kte=a("strong"),nFo=o("marian"),sFo=o(" \u2014 "),PI=a("a"),lFo=o("MarianMTModel"),iFo=o(" (Marian model)"),dFo=l(),V1=a("li"),Rte=a("strong"),cFo=o("mbart"),fFo=o(" \u2014 "),$I=a("a"),mFo=o("MBartForConditionalGeneration"),gFo=o(" (mBART model)"),hFo=l(),z1=a("li"),Ste=a("strong"),pFo=o("mt5"),_Fo=o(" \u2014 "),II=a("a"),uFo=o("MT5ForConditionalGeneration"),bFo=o(" (mT5 model)"),vFo=l(),W1=a("li"),Pte=a("strong"),TFo=o("pegasus"),FFo=o(" \u2014 "),jI=a("a"),CFo=o("PegasusForConditionalGeneration"),MFo=o(" (Pegasus model)"),EFo=l(),Q1=a("li"),$te=a("strong"),yFo=o("plbart"),wFo=o(" \u2014 "),NI=a("a"),AFo=o("PLBartForConditionalGeneration"),LFo=o(" (PLBart model)"),BFo=l(),H1=a("li"),Ite=a("strong"),xFo=o("prophetnet"),kFo=o(" \u2014 "),DI=a("a"),RFo=o("ProphetNetForConditionalGeneration"),SFo=o(" (ProphetNet model)"),PFo=l(),U1=a("li"),jte=a("strong"),$Fo=o("t5"),IFo=o(" \u2014 "),qI=a("a"),jFo=o("T5ForConditionalGeneration"),NFo=o(" (T5 model)"),DFo=l(),J1=a("li"),Nte=a("strong"),qFo=o("xlm-prophetnet"),GFo=o(" \u2014 "),GI=a("a"),OFo=o("XLMProphetNetForConditionalGeneration"),XFo=o(" (XLMProphetNet model)"),VFo=l(),Y1=a("p"),zFo=o("The model is set in evaluation mode by default using "),Dte=a("code"),WFo=o("model.eval()"),QFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qte=a("code"),HFo=o("model.train()"),UFo=l(),Gte=a("p"),JFo=o("Examples:"),YFo=l(),f(M3.$$.fragment),Dke=l(),fd=a("h2"),K1=a("a"),Ote=a("span"),f(E3.$$.fragment),KFo=l(),Xte=a("span"),ZFo=o("AutoModelForSequenceClassification"),qke=l(),or=a("div"),f(y3.$$.fragment),eCo=l(),md=a("p"),oCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Vte=a("code"),rCo=o("from_pretrained()"),tCo=o("class method or the "),zte=a("code"),aCo=o("from_config()"),nCo=o(`class
method.`),sCo=l(),w3=a("p"),lCo=o("This class cannot be instantiated directly using "),Wte=a("code"),iCo=o("__init__()"),dCo=o(" (throws an error)."),cCo=l(),Ur=a("div"),f(A3.$$.fragment),fCo=l(),Qte=a("p"),mCo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gCo=l(),gd=a("p"),hCo=o(`Note:
Loading a model from its configuration file does `),Hte=a("strong"),pCo=o("not"),_Co=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ute=a("code"),uCo=o("from_pretrained()"),bCo=o("to load the model weights."),vCo=l(),Jte=a("p"),TCo=o("Examples:"),FCo=l(),f(L3.$$.fragment),CCo=l(),Oe=a("div"),f(B3.$$.fragment),MCo=l(),Yte=a("p"),ECo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),yCo=l(),Ua=a("p"),wCo=o("The model class to instantiate is selected based on the "),Kte=a("code"),ACo=o("model_type"),LCo=o(` property of the config object (either
passed as an argument or loaded from `),Zte=a("code"),BCo=o("pretrained_model_name_or_path"),xCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eae=a("code"),kCo=o("pretrained_model_name_or_path"),RCo=o(":"),SCo=l(),A=a("ul"),Z1=a("li"),oae=a("strong"),PCo=o("albert"),$Co=o(" \u2014 "),OI=a("a"),ICo=o("AlbertForSequenceClassification"),jCo=o(" (ALBERT model)"),NCo=l(),e4=a("li"),rae=a("strong"),DCo=o("bart"),qCo=o(" \u2014 "),XI=a("a"),GCo=o("BartForSequenceClassification"),OCo=o(" (BART model)"),XCo=l(),o4=a("li"),tae=a("strong"),VCo=o("bert"),zCo=o(" \u2014 "),VI=a("a"),WCo=o("BertForSequenceClassification"),QCo=o(" (BERT model)"),HCo=l(),r4=a("li"),aae=a("strong"),UCo=o("big_bird"),JCo=o(" \u2014 "),zI=a("a"),YCo=o("BigBirdForSequenceClassification"),KCo=o(" (BigBird model)"),ZCo=l(),t4=a("li"),nae=a("strong"),eMo=o("bigbird_pegasus"),oMo=o(" \u2014 "),WI=a("a"),rMo=o("BigBirdPegasusForSequenceClassification"),tMo=o(" (BigBirdPegasus model)"),aMo=l(),a4=a("li"),sae=a("strong"),nMo=o("camembert"),sMo=o(" \u2014 "),QI=a("a"),lMo=o("CamembertForSequenceClassification"),iMo=o(" (CamemBERT model)"),dMo=l(),n4=a("li"),lae=a("strong"),cMo=o("canine"),fMo=o(" \u2014 "),HI=a("a"),mMo=o("CanineForSequenceClassification"),gMo=o(" (Canine model)"),hMo=l(),s4=a("li"),iae=a("strong"),pMo=o("convbert"),_Mo=o(" \u2014 "),UI=a("a"),uMo=o("ConvBertForSequenceClassification"),bMo=o(" (ConvBERT model)"),vMo=l(),l4=a("li"),dae=a("strong"),TMo=o("ctrl"),FMo=o(" \u2014 "),JI=a("a"),CMo=o("CTRLForSequenceClassification"),MMo=o(" (CTRL model)"),EMo=l(),i4=a("li"),cae=a("strong"),yMo=o("data2vec-text"),wMo=o(" \u2014 "),YI=a("a"),AMo=o("Data2VecTextForSequenceClassification"),LMo=o(" (Data2VecText model)"),BMo=l(),d4=a("li"),fae=a("strong"),xMo=o("deberta"),kMo=o(" \u2014 "),KI=a("a"),RMo=o("DebertaForSequenceClassification"),SMo=o(" (DeBERTa model)"),PMo=l(),c4=a("li"),mae=a("strong"),$Mo=o("deberta-v2"),IMo=o(" \u2014 "),ZI=a("a"),jMo=o("DebertaV2ForSequenceClassification"),NMo=o(" (DeBERTa-v2 model)"),DMo=l(),f4=a("li"),gae=a("strong"),qMo=o("distilbert"),GMo=o(" \u2014 "),ej=a("a"),OMo=o("DistilBertForSequenceClassification"),XMo=o(" (DistilBERT model)"),VMo=l(),m4=a("li"),hae=a("strong"),zMo=o("electra"),WMo=o(" \u2014 "),oj=a("a"),QMo=o("ElectraForSequenceClassification"),HMo=o(" (ELECTRA model)"),UMo=l(),g4=a("li"),pae=a("strong"),JMo=o("flaubert"),YMo=o(" \u2014 "),rj=a("a"),KMo=o("FlaubertForSequenceClassification"),ZMo=o(" (FlauBERT model)"),eEo=l(),h4=a("li"),_ae=a("strong"),oEo=o("fnet"),rEo=o(" \u2014 "),tj=a("a"),tEo=o("FNetForSequenceClassification"),aEo=o(" (FNet model)"),nEo=l(),p4=a("li"),uae=a("strong"),sEo=o("funnel"),lEo=o(" \u2014 "),aj=a("a"),iEo=o("FunnelForSequenceClassification"),dEo=o(" (Funnel Transformer model)"),cEo=l(),_4=a("li"),bae=a("strong"),fEo=o("gpt2"),mEo=o(" \u2014 "),nj=a("a"),gEo=o("GPT2ForSequenceClassification"),hEo=o(" (OpenAI GPT-2 model)"),pEo=l(),u4=a("li"),vae=a("strong"),_Eo=o("gpt_neo"),uEo=o(" \u2014 "),sj=a("a"),bEo=o("GPTNeoForSequenceClassification"),vEo=o(" (GPT Neo model)"),TEo=l(),b4=a("li"),Tae=a("strong"),FEo=o("gptj"),CEo=o(" \u2014 "),lj=a("a"),MEo=o("GPTJForSequenceClassification"),EEo=o(" (GPT-J model)"),yEo=l(),v4=a("li"),Fae=a("strong"),wEo=o("ibert"),AEo=o(" \u2014 "),ij=a("a"),LEo=o("IBertForSequenceClassification"),BEo=o(" (I-BERT model)"),xEo=l(),T4=a("li"),Cae=a("strong"),kEo=o("layoutlm"),REo=o(" \u2014 "),dj=a("a"),SEo=o("LayoutLMForSequenceClassification"),PEo=o(" (LayoutLM model)"),$Eo=l(),F4=a("li"),Mae=a("strong"),IEo=o("layoutlmv2"),jEo=o(" \u2014 "),cj=a("a"),NEo=o("LayoutLMv2ForSequenceClassification"),DEo=o(" (LayoutLMv2 model)"),qEo=l(),C4=a("li"),Eae=a("strong"),GEo=o("led"),OEo=o(" \u2014 "),fj=a("a"),XEo=o("LEDForSequenceClassification"),VEo=o(" (LED model)"),zEo=l(),M4=a("li"),yae=a("strong"),WEo=o("longformer"),QEo=o(" \u2014 "),mj=a("a"),HEo=o("LongformerForSequenceClassification"),UEo=o(" (Longformer model)"),JEo=l(),E4=a("li"),wae=a("strong"),YEo=o("mbart"),KEo=o(" \u2014 "),gj=a("a"),ZEo=o("MBartForSequenceClassification"),e3o=o(" (mBART model)"),o3o=l(),y4=a("li"),Aae=a("strong"),r3o=o("megatron-bert"),t3o=o(" \u2014 "),hj=a("a"),a3o=o("MegatronBertForSequenceClassification"),n3o=o(" (MegatronBert model)"),s3o=l(),w4=a("li"),Lae=a("strong"),l3o=o("mobilebert"),i3o=o(" \u2014 "),pj=a("a"),d3o=o("MobileBertForSequenceClassification"),c3o=o(" (MobileBERT model)"),f3o=l(),A4=a("li"),Bae=a("strong"),m3o=o("mpnet"),g3o=o(" \u2014 "),_j=a("a"),h3o=o("MPNetForSequenceClassification"),p3o=o(" (MPNet model)"),_3o=l(),L4=a("li"),xae=a("strong"),u3o=o("nystromformer"),b3o=o(" \u2014 "),uj=a("a"),v3o=o("NystromformerForSequenceClassification"),T3o=o(" (Nystromformer model)"),F3o=l(),B4=a("li"),kae=a("strong"),C3o=o("openai-gpt"),M3o=o(" \u2014 "),bj=a("a"),E3o=o("OpenAIGPTForSequenceClassification"),y3o=o(" (OpenAI GPT model)"),w3o=l(),x4=a("li"),Rae=a("strong"),A3o=o("perceiver"),L3o=o(" \u2014 "),vj=a("a"),B3o=o("PerceiverForSequenceClassification"),x3o=o(" (Perceiver model)"),k3o=l(),k4=a("li"),Sae=a("strong"),R3o=o("plbart"),S3o=o(" \u2014 "),Tj=a("a"),P3o=o("PLBartForSequenceClassification"),$3o=o(" (PLBart model)"),I3o=l(),R4=a("li"),Pae=a("strong"),j3o=o("qdqbert"),N3o=o(" \u2014 "),Fj=a("a"),D3o=o("QDQBertForSequenceClassification"),q3o=o(" (QDQBert model)"),G3o=l(),S4=a("li"),$ae=a("strong"),O3o=o("reformer"),X3o=o(" \u2014 "),Cj=a("a"),V3o=o("ReformerForSequenceClassification"),z3o=o(" (Reformer model)"),W3o=l(),P4=a("li"),Iae=a("strong"),Q3o=o("rembert"),H3o=o(" \u2014 "),Mj=a("a"),U3o=o("RemBertForSequenceClassification"),J3o=o(" (RemBERT model)"),Y3o=l(),$4=a("li"),jae=a("strong"),K3o=o("roberta"),Z3o=o(" \u2014 "),Ej=a("a"),eyo=o("RobertaForSequenceClassification"),oyo=o(" (RoBERTa model)"),ryo=l(),I4=a("li"),Nae=a("strong"),tyo=o("roformer"),ayo=o(" \u2014 "),yj=a("a"),nyo=o("RoFormerForSequenceClassification"),syo=o(" (RoFormer model)"),lyo=l(),j4=a("li"),Dae=a("strong"),iyo=o("squeezebert"),dyo=o(" \u2014 "),wj=a("a"),cyo=o("SqueezeBertForSequenceClassification"),fyo=o(" (SqueezeBERT model)"),myo=l(),N4=a("li"),qae=a("strong"),gyo=o("tapas"),hyo=o(" \u2014 "),Aj=a("a"),pyo=o("TapasForSequenceClassification"),_yo=o(" (TAPAS model)"),uyo=l(),D4=a("li"),Gae=a("strong"),byo=o("transfo-xl"),vyo=o(" \u2014 "),Lj=a("a"),Tyo=o("TransfoXLForSequenceClassification"),Fyo=o(" (Transformer-XL model)"),Cyo=l(),q4=a("li"),Oae=a("strong"),Myo=o("xlm"),Eyo=o(" \u2014 "),Bj=a("a"),yyo=o("XLMForSequenceClassification"),wyo=o(" (XLM model)"),Ayo=l(),G4=a("li"),Xae=a("strong"),Lyo=o("xlm-roberta"),Byo=o(" \u2014 "),xj=a("a"),xyo=o("XLMRobertaForSequenceClassification"),kyo=o(" (XLM-RoBERTa model)"),Ryo=l(),O4=a("li"),Vae=a("strong"),Syo=o("xlm-roberta-xl"),Pyo=o(" \u2014 "),kj=a("a"),$yo=o("XLMRobertaXLForSequenceClassification"),Iyo=o(" (XLM-RoBERTa-XL model)"),jyo=l(),X4=a("li"),zae=a("strong"),Nyo=o("xlnet"),Dyo=o(" \u2014 "),Rj=a("a"),qyo=o("XLNetForSequenceClassification"),Gyo=o(" (XLNet model)"),Oyo=l(),V4=a("li"),Wae=a("strong"),Xyo=o("yoso"),Vyo=o(" \u2014 "),Sj=a("a"),zyo=o("YosoForSequenceClassification"),Wyo=o(" (YOSO model)"),Qyo=l(),z4=a("p"),Hyo=o("The model is set in evaluation mode by default using "),Qae=a("code"),Uyo=o("model.eval()"),Jyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hae=a("code"),Yyo=o("model.train()"),Kyo=l(),Uae=a("p"),Zyo=o("Examples:"),ewo=l(),f(x3.$$.fragment),Gke=l(),hd=a("h2"),W4=a("a"),Jae=a("span"),f(k3.$$.fragment),owo=l(),Yae=a("span"),rwo=o("AutoModelForMultipleChoice"),Oke=l(),rr=a("div"),f(R3.$$.fragment),two=l(),pd=a("p"),awo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Kae=a("code"),nwo=o("from_pretrained()"),swo=o("class method or the "),Zae=a("code"),lwo=o("from_config()"),iwo=o(`class
method.`),dwo=l(),S3=a("p"),cwo=o("This class cannot be instantiated directly using "),ene=a("code"),fwo=o("__init__()"),mwo=o(" (throws an error)."),gwo=l(),Jr=a("div"),f(P3.$$.fragment),hwo=l(),one=a("p"),pwo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_wo=l(),_d=a("p"),uwo=o(`Note:
Loading a model from its configuration file does `),rne=a("strong"),bwo=o("not"),vwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tne=a("code"),Two=o("from_pretrained()"),Fwo=o("to load the model weights."),Cwo=l(),ane=a("p"),Mwo=o("Examples:"),Ewo=l(),f($3.$$.fragment),ywo=l(),Xe=a("div"),f(I3.$$.fragment),wwo=l(),nne=a("p"),Awo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Lwo=l(),Ja=a("p"),Bwo=o("The model class to instantiate is selected based on the "),sne=a("code"),xwo=o("model_type"),kwo=o(` property of the config object (either
passed as an argument or loaded from `),lne=a("code"),Rwo=o("pretrained_model_name_or_path"),Swo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ine=a("code"),Pwo=o("pretrained_model_name_or_path"),$wo=o(":"),Iwo=l(),G=a("ul"),Q4=a("li"),dne=a("strong"),jwo=o("albert"),Nwo=o(" \u2014 "),Pj=a("a"),Dwo=o("AlbertForMultipleChoice"),qwo=o(" (ALBERT model)"),Gwo=l(),H4=a("li"),cne=a("strong"),Owo=o("bert"),Xwo=o(" \u2014 "),$j=a("a"),Vwo=o("BertForMultipleChoice"),zwo=o(" (BERT model)"),Wwo=l(),U4=a("li"),fne=a("strong"),Qwo=o("big_bird"),Hwo=o(" \u2014 "),Ij=a("a"),Uwo=o("BigBirdForMultipleChoice"),Jwo=o(" (BigBird model)"),Ywo=l(),J4=a("li"),mne=a("strong"),Kwo=o("camembert"),Zwo=o(" \u2014 "),jj=a("a"),eAo=o("CamembertForMultipleChoice"),oAo=o(" (CamemBERT model)"),rAo=l(),Y4=a("li"),gne=a("strong"),tAo=o("canine"),aAo=o(" \u2014 "),Nj=a("a"),nAo=o("CanineForMultipleChoice"),sAo=o(" (Canine model)"),lAo=l(),K4=a("li"),hne=a("strong"),iAo=o("convbert"),dAo=o(" \u2014 "),Dj=a("a"),cAo=o("ConvBertForMultipleChoice"),fAo=o(" (ConvBERT model)"),mAo=l(),Z4=a("li"),pne=a("strong"),gAo=o("data2vec-text"),hAo=o(" \u2014 "),qj=a("a"),pAo=o("Data2VecTextForMultipleChoice"),_Ao=o(" (Data2VecText model)"),uAo=l(),eb=a("li"),_ne=a("strong"),bAo=o("distilbert"),vAo=o(" \u2014 "),Gj=a("a"),TAo=o("DistilBertForMultipleChoice"),FAo=o(" (DistilBERT model)"),CAo=l(),ob=a("li"),une=a("strong"),MAo=o("electra"),EAo=o(" \u2014 "),Oj=a("a"),yAo=o("ElectraForMultipleChoice"),wAo=o(" (ELECTRA model)"),AAo=l(),rb=a("li"),bne=a("strong"),LAo=o("flaubert"),BAo=o(" \u2014 "),Xj=a("a"),xAo=o("FlaubertForMultipleChoice"),kAo=o(" (FlauBERT model)"),RAo=l(),tb=a("li"),vne=a("strong"),SAo=o("fnet"),PAo=o(" \u2014 "),Vj=a("a"),$Ao=o("FNetForMultipleChoice"),IAo=o(" (FNet model)"),jAo=l(),ab=a("li"),Tne=a("strong"),NAo=o("funnel"),DAo=o(" \u2014 "),zj=a("a"),qAo=o("FunnelForMultipleChoice"),GAo=o(" (Funnel Transformer model)"),OAo=l(),nb=a("li"),Fne=a("strong"),XAo=o("ibert"),VAo=o(" \u2014 "),Wj=a("a"),zAo=o("IBertForMultipleChoice"),WAo=o(" (I-BERT model)"),QAo=l(),sb=a("li"),Cne=a("strong"),HAo=o("longformer"),UAo=o(" \u2014 "),Qj=a("a"),JAo=o("LongformerForMultipleChoice"),YAo=o(" (Longformer model)"),KAo=l(),lb=a("li"),Mne=a("strong"),ZAo=o("megatron-bert"),eLo=o(" \u2014 "),Hj=a("a"),oLo=o("MegatronBertForMultipleChoice"),rLo=o(" (MegatronBert model)"),tLo=l(),ib=a("li"),Ene=a("strong"),aLo=o("mobilebert"),nLo=o(" \u2014 "),Uj=a("a"),sLo=o("MobileBertForMultipleChoice"),lLo=o(" (MobileBERT model)"),iLo=l(),db=a("li"),yne=a("strong"),dLo=o("mpnet"),cLo=o(" \u2014 "),Jj=a("a"),fLo=o("MPNetForMultipleChoice"),mLo=o(" (MPNet model)"),gLo=l(),cb=a("li"),wne=a("strong"),hLo=o("nystromformer"),pLo=o(" \u2014 "),Yj=a("a"),_Lo=o("NystromformerForMultipleChoice"),uLo=o(" (Nystromformer model)"),bLo=l(),fb=a("li"),Ane=a("strong"),vLo=o("qdqbert"),TLo=o(" \u2014 "),Kj=a("a"),FLo=o("QDQBertForMultipleChoice"),CLo=o(" (QDQBert model)"),MLo=l(),mb=a("li"),Lne=a("strong"),ELo=o("rembert"),yLo=o(" \u2014 "),Zj=a("a"),wLo=o("RemBertForMultipleChoice"),ALo=o(" (RemBERT model)"),LLo=l(),gb=a("li"),Bne=a("strong"),BLo=o("roberta"),xLo=o(" \u2014 "),eN=a("a"),kLo=o("RobertaForMultipleChoice"),RLo=o(" (RoBERTa model)"),SLo=l(),hb=a("li"),xne=a("strong"),PLo=o("roformer"),$Lo=o(" \u2014 "),oN=a("a"),ILo=o("RoFormerForMultipleChoice"),jLo=o(" (RoFormer model)"),NLo=l(),pb=a("li"),kne=a("strong"),DLo=o("squeezebert"),qLo=o(" \u2014 "),rN=a("a"),GLo=o("SqueezeBertForMultipleChoice"),OLo=o(" (SqueezeBERT model)"),XLo=l(),_b=a("li"),Rne=a("strong"),VLo=o("xlm"),zLo=o(" \u2014 "),tN=a("a"),WLo=o("XLMForMultipleChoice"),QLo=o(" (XLM model)"),HLo=l(),ub=a("li"),Sne=a("strong"),ULo=o("xlm-roberta"),JLo=o(" \u2014 "),aN=a("a"),YLo=o("XLMRobertaForMultipleChoice"),KLo=o(" (XLM-RoBERTa model)"),ZLo=l(),bb=a("li"),Pne=a("strong"),e7o=o("xlm-roberta-xl"),o7o=o(" \u2014 "),nN=a("a"),r7o=o("XLMRobertaXLForMultipleChoice"),t7o=o(" (XLM-RoBERTa-XL model)"),a7o=l(),vb=a("li"),$ne=a("strong"),n7o=o("xlnet"),s7o=o(" \u2014 "),sN=a("a"),l7o=o("XLNetForMultipleChoice"),i7o=o(" (XLNet model)"),d7o=l(),Tb=a("li"),Ine=a("strong"),c7o=o("yoso"),f7o=o(" \u2014 "),lN=a("a"),m7o=o("YosoForMultipleChoice"),g7o=o(" (YOSO model)"),h7o=l(),Fb=a("p"),p7o=o("The model is set in evaluation mode by default using "),jne=a("code"),_7o=o("model.eval()"),u7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nne=a("code"),b7o=o("model.train()"),v7o=l(),Dne=a("p"),T7o=o("Examples:"),F7o=l(),f(j3.$$.fragment),Xke=l(),ud=a("h2"),Cb=a("a"),qne=a("span"),f(N3.$$.fragment),C7o=l(),Gne=a("span"),M7o=o("AutoModelForNextSentencePrediction"),Vke=l(),tr=a("div"),f(D3.$$.fragment),E7o=l(),bd=a("p"),y7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),One=a("code"),w7o=o("from_pretrained()"),A7o=o("class method or the "),Xne=a("code"),L7o=o("from_config()"),B7o=o(`class
method.`),x7o=l(),q3=a("p"),k7o=o("This class cannot be instantiated directly using "),Vne=a("code"),R7o=o("__init__()"),S7o=o(" (throws an error)."),P7o=l(),Yr=a("div"),f(G3.$$.fragment),$7o=l(),zne=a("p"),I7o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),j7o=l(),vd=a("p"),N7o=o(`Note:
Loading a model from its configuration file does `),Wne=a("strong"),D7o=o("not"),q7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qne=a("code"),G7o=o("from_pretrained()"),O7o=o("to load the model weights."),X7o=l(),Hne=a("p"),V7o=o("Examples:"),z7o=l(),f(O3.$$.fragment),W7o=l(),Ve=a("div"),f(X3.$$.fragment),Q7o=l(),Une=a("p"),H7o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),U7o=l(),Ya=a("p"),J7o=o("The model class to instantiate is selected based on the "),Jne=a("code"),Y7o=o("model_type"),K7o=o(` property of the config object (either
passed as an argument or loaded from `),Yne=a("code"),Z7o=o("pretrained_model_name_or_path"),e8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kne=a("code"),o8o=o("pretrained_model_name_or_path"),r8o=o(":"),t8o=l(),da=a("ul"),Mb=a("li"),Zne=a("strong"),a8o=o("bert"),n8o=o(" \u2014 "),iN=a("a"),s8o=o("BertForNextSentencePrediction"),l8o=o(" (BERT model)"),i8o=l(),Eb=a("li"),ese=a("strong"),d8o=o("fnet"),c8o=o(" \u2014 "),dN=a("a"),f8o=o("FNetForNextSentencePrediction"),m8o=o(" (FNet model)"),g8o=l(),yb=a("li"),ose=a("strong"),h8o=o("megatron-bert"),p8o=o(" \u2014 "),cN=a("a"),_8o=o("MegatronBertForNextSentencePrediction"),u8o=o(" (MegatronBert model)"),b8o=l(),wb=a("li"),rse=a("strong"),v8o=o("mobilebert"),T8o=o(" \u2014 "),fN=a("a"),F8o=o("MobileBertForNextSentencePrediction"),C8o=o(" (MobileBERT model)"),M8o=l(),Ab=a("li"),tse=a("strong"),E8o=o("qdqbert"),y8o=o(" \u2014 "),mN=a("a"),w8o=o("QDQBertForNextSentencePrediction"),A8o=o(" (QDQBert model)"),L8o=l(),Lb=a("p"),B8o=o("The model is set in evaluation mode by default using "),ase=a("code"),x8o=o("model.eval()"),k8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nse=a("code"),R8o=o("model.train()"),S8o=l(),sse=a("p"),P8o=o("Examples:"),$8o=l(),f(V3.$$.fragment),zke=l(),Td=a("h2"),Bb=a("a"),lse=a("span"),f(z3.$$.fragment),I8o=l(),ise=a("span"),j8o=o("AutoModelForTokenClassification"),Wke=l(),ar=a("div"),f(W3.$$.fragment),N8o=l(),Fd=a("p"),D8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dse=a("code"),q8o=o("from_pretrained()"),G8o=o("class method or the "),cse=a("code"),O8o=o("from_config()"),X8o=o(`class
method.`),V8o=l(),Q3=a("p"),z8o=o("This class cannot be instantiated directly using "),fse=a("code"),W8o=o("__init__()"),Q8o=o(" (throws an error)."),H8o=l(),Kr=a("div"),f(H3.$$.fragment),U8o=l(),mse=a("p"),J8o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Y8o=l(),Cd=a("p"),K8o=o(`Note:
Loading a model from its configuration file does `),gse=a("strong"),Z8o=o("not"),e9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hse=a("code"),o9o=o("from_pretrained()"),r9o=o("to load the model weights."),t9o=l(),pse=a("p"),a9o=o("Examples:"),n9o=l(),f(U3.$$.fragment),s9o=l(),ze=a("div"),f(J3.$$.fragment),l9o=l(),_se=a("p"),i9o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),d9o=l(),Ka=a("p"),c9o=o("The model class to instantiate is selected based on the "),use=a("code"),f9o=o("model_type"),m9o=o(` property of the config object (either
passed as an argument or loaded from `),bse=a("code"),g9o=o("pretrained_model_name_or_path"),h9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vse=a("code"),p9o=o("pretrained_model_name_or_path"),_9o=o(":"),u9o=l(),D=a("ul"),xb=a("li"),Tse=a("strong"),b9o=o("albert"),v9o=o(" \u2014 "),gN=a("a"),T9o=o("AlbertForTokenClassification"),F9o=o(" (ALBERT model)"),C9o=l(),kb=a("li"),Fse=a("strong"),M9o=o("bert"),E9o=o(" \u2014 "),hN=a("a"),y9o=o("BertForTokenClassification"),w9o=o(" (BERT model)"),A9o=l(),Rb=a("li"),Cse=a("strong"),L9o=o("big_bird"),B9o=o(" \u2014 "),pN=a("a"),x9o=o("BigBirdForTokenClassification"),k9o=o(" (BigBird model)"),R9o=l(),Sb=a("li"),Mse=a("strong"),S9o=o("camembert"),P9o=o(" \u2014 "),_N=a("a"),$9o=o("CamembertForTokenClassification"),I9o=o(" (CamemBERT model)"),j9o=l(),Pb=a("li"),Ese=a("strong"),N9o=o("canine"),D9o=o(" \u2014 "),uN=a("a"),q9o=o("CanineForTokenClassification"),G9o=o(" (Canine model)"),O9o=l(),$b=a("li"),yse=a("strong"),X9o=o("convbert"),V9o=o(" \u2014 "),bN=a("a"),z9o=o("ConvBertForTokenClassification"),W9o=o(" (ConvBERT model)"),Q9o=l(),Ib=a("li"),wse=a("strong"),H9o=o("data2vec-text"),U9o=o(" \u2014 "),vN=a("a"),J9o=o("Data2VecTextForTokenClassification"),Y9o=o(" (Data2VecText model)"),K9o=l(),jb=a("li"),Ase=a("strong"),Z9o=o("deberta"),eBo=o(" \u2014 "),TN=a("a"),oBo=o("DebertaForTokenClassification"),rBo=o(" (DeBERTa model)"),tBo=l(),Nb=a("li"),Lse=a("strong"),aBo=o("deberta-v2"),nBo=o(" \u2014 "),FN=a("a"),sBo=o("DebertaV2ForTokenClassification"),lBo=o(" (DeBERTa-v2 model)"),iBo=l(),Db=a("li"),Bse=a("strong"),dBo=o("distilbert"),cBo=o(" \u2014 "),CN=a("a"),fBo=o("DistilBertForTokenClassification"),mBo=o(" (DistilBERT model)"),gBo=l(),qb=a("li"),xse=a("strong"),hBo=o("electra"),pBo=o(" \u2014 "),MN=a("a"),_Bo=o("ElectraForTokenClassification"),uBo=o(" (ELECTRA model)"),bBo=l(),Gb=a("li"),kse=a("strong"),vBo=o("flaubert"),TBo=o(" \u2014 "),EN=a("a"),FBo=o("FlaubertForTokenClassification"),CBo=o(" (FlauBERT model)"),MBo=l(),Ob=a("li"),Rse=a("strong"),EBo=o("fnet"),yBo=o(" \u2014 "),yN=a("a"),wBo=o("FNetForTokenClassification"),ABo=o(" (FNet model)"),LBo=l(),Xb=a("li"),Sse=a("strong"),BBo=o("funnel"),xBo=o(" \u2014 "),wN=a("a"),kBo=o("FunnelForTokenClassification"),RBo=o(" (Funnel Transformer model)"),SBo=l(),Vb=a("li"),Pse=a("strong"),PBo=o("gpt2"),$Bo=o(" \u2014 "),AN=a("a"),IBo=o("GPT2ForTokenClassification"),jBo=o(" (OpenAI GPT-2 model)"),NBo=l(),zb=a("li"),$se=a("strong"),DBo=o("ibert"),qBo=o(" \u2014 "),LN=a("a"),GBo=o("IBertForTokenClassification"),OBo=o(" (I-BERT model)"),XBo=l(),Wb=a("li"),Ise=a("strong"),VBo=o("layoutlm"),zBo=o(" \u2014 "),BN=a("a"),WBo=o("LayoutLMForTokenClassification"),QBo=o(" (LayoutLM model)"),HBo=l(),Qb=a("li"),jse=a("strong"),UBo=o("layoutlmv2"),JBo=o(" \u2014 "),xN=a("a"),YBo=o("LayoutLMv2ForTokenClassification"),KBo=o(" (LayoutLMv2 model)"),ZBo=l(),Hb=a("li"),Nse=a("strong"),exo=o("longformer"),oxo=o(" \u2014 "),kN=a("a"),rxo=o("LongformerForTokenClassification"),txo=o(" (Longformer model)"),axo=l(),Ub=a("li"),Dse=a("strong"),nxo=o("megatron-bert"),sxo=o(" \u2014 "),RN=a("a"),lxo=o("MegatronBertForTokenClassification"),ixo=o(" (MegatronBert model)"),dxo=l(),Jb=a("li"),qse=a("strong"),cxo=o("mobilebert"),fxo=o(" \u2014 "),SN=a("a"),mxo=o("MobileBertForTokenClassification"),gxo=o(" (MobileBERT model)"),hxo=l(),Yb=a("li"),Gse=a("strong"),pxo=o("mpnet"),_xo=o(" \u2014 "),PN=a("a"),uxo=o("MPNetForTokenClassification"),bxo=o(" (MPNet model)"),vxo=l(),Kb=a("li"),Ose=a("strong"),Txo=o("nystromformer"),Fxo=o(" \u2014 "),$N=a("a"),Cxo=o("NystromformerForTokenClassification"),Mxo=o(" (Nystromformer model)"),Exo=l(),Zb=a("li"),Xse=a("strong"),yxo=o("qdqbert"),wxo=o(" \u2014 "),IN=a("a"),Axo=o("QDQBertForTokenClassification"),Lxo=o(" (QDQBert model)"),Bxo=l(),e5=a("li"),Vse=a("strong"),xxo=o("rembert"),kxo=o(" \u2014 "),jN=a("a"),Rxo=o("RemBertForTokenClassification"),Sxo=o(" (RemBERT model)"),Pxo=l(),o5=a("li"),zse=a("strong"),$xo=o("roberta"),Ixo=o(" \u2014 "),NN=a("a"),jxo=o("RobertaForTokenClassification"),Nxo=o(" (RoBERTa model)"),Dxo=l(),r5=a("li"),Wse=a("strong"),qxo=o("roformer"),Gxo=o(" \u2014 "),DN=a("a"),Oxo=o("RoFormerForTokenClassification"),Xxo=o(" (RoFormer model)"),Vxo=l(),t5=a("li"),Qse=a("strong"),zxo=o("squeezebert"),Wxo=o(" \u2014 "),qN=a("a"),Qxo=o("SqueezeBertForTokenClassification"),Hxo=o(" (SqueezeBERT model)"),Uxo=l(),a5=a("li"),Hse=a("strong"),Jxo=o("xlm"),Yxo=o(" \u2014 "),GN=a("a"),Kxo=o("XLMForTokenClassification"),Zxo=o(" (XLM model)"),eko=l(),n5=a("li"),Use=a("strong"),oko=o("xlm-roberta"),rko=o(" \u2014 "),ON=a("a"),tko=o("XLMRobertaForTokenClassification"),ako=o(" (XLM-RoBERTa model)"),nko=l(),s5=a("li"),Jse=a("strong"),sko=o("xlm-roberta-xl"),lko=o(" \u2014 "),XN=a("a"),iko=o("XLMRobertaXLForTokenClassification"),dko=o(" (XLM-RoBERTa-XL model)"),cko=l(),l5=a("li"),Yse=a("strong"),fko=o("xlnet"),mko=o(" \u2014 "),VN=a("a"),gko=o("XLNetForTokenClassification"),hko=o(" (XLNet model)"),pko=l(),i5=a("li"),Kse=a("strong"),_ko=o("yoso"),uko=o(" \u2014 "),zN=a("a"),bko=o("YosoForTokenClassification"),vko=o(" (YOSO model)"),Tko=l(),d5=a("p"),Fko=o("The model is set in evaluation mode by default using "),Zse=a("code"),Cko=o("model.eval()"),Mko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ele=a("code"),Eko=o("model.train()"),yko=l(),ole=a("p"),wko=o("Examples:"),Ako=l(),f(Y3.$$.fragment),Qke=l(),Md=a("h2"),c5=a("a"),rle=a("span"),f(K3.$$.fragment),Lko=l(),tle=a("span"),Bko=o("AutoModelForQuestionAnswering"),Hke=l(),nr=a("div"),f(Z3.$$.fragment),xko=l(),Ed=a("p"),kko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ale=a("code"),Rko=o("from_pretrained()"),Sko=o("class method or the "),nle=a("code"),Pko=o("from_config()"),$ko=o(`class
method.`),Iko=l(),ey=a("p"),jko=o("This class cannot be instantiated directly using "),sle=a("code"),Nko=o("__init__()"),Dko=o(" (throws an error)."),qko=l(),Zr=a("div"),f(oy.$$.fragment),Gko=l(),lle=a("p"),Oko=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Xko=l(),yd=a("p"),Vko=o(`Note:
Loading a model from its configuration file does `),ile=a("strong"),zko=o("not"),Wko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dle=a("code"),Qko=o("from_pretrained()"),Hko=o("to load the model weights."),Uko=l(),cle=a("p"),Jko=o("Examples:"),Yko=l(),f(ry.$$.fragment),Kko=l(),We=a("div"),f(ty.$$.fragment),Zko=l(),fle=a("p"),eRo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),oRo=l(),Za=a("p"),rRo=o("The model class to instantiate is selected based on the "),mle=a("code"),tRo=o("model_type"),aRo=o(` property of the config object (either
passed as an argument or loaded from `),gle=a("code"),nRo=o("pretrained_model_name_or_path"),sRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hle=a("code"),lRo=o("pretrained_model_name_or_path"),iRo=o(":"),dRo=l(),R=a("ul"),f5=a("li"),ple=a("strong"),cRo=o("albert"),fRo=o(" \u2014 "),WN=a("a"),mRo=o("AlbertForQuestionAnswering"),gRo=o(" (ALBERT model)"),hRo=l(),m5=a("li"),_le=a("strong"),pRo=o("bart"),_Ro=o(" \u2014 "),QN=a("a"),uRo=o("BartForQuestionAnswering"),bRo=o(" (BART model)"),vRo=l(),g5=a("li"),ule=a("strong"),TRo=o("bert"),FRo=o(" \u2014 "),HN=a("a"),CRo=o("BertForQuestionAnswering"),MRo=o(" (BERT model)"),ERo=l(),h5=a("li"),ble=a("strong"),yRo=o("big_bird"),wRo=o(" \u2014 "),UN=a("a"),ARo=o("BigBirdForQuestionAnswering"),LRo=o(" (BigBird model)"),BRo=l(),p5=a("li"),vle=a("strong"),xRo=o("bigbird_pegasus"),kRo=o(" \u2014 "),JN=a("a"),RRo=o("BigBirdPegasusForQuestionAnswering"),SRo=o(" (BigBirdPegasus model)"),PRo=l(),_5=a("li"),Tle=a("strong"),$Ro=o("camembert"),IRo=o(" \u2014 "),YN=a("a"),jRo=o("CamembertForQuestionAnswering"),NRo=o(" (CamemBERT model)"),DRo=l(),u5=a("li"),Fle=a("strong"),qRo=o("canine"),GRo=o(" \u2014 "),KN=a("a"),ORo=o("CanineForQuestionAnswering"),XRo=o(" (Canine model)"),VRo=l(),b5=a("li"),Cle=a("strong"),zRo=o("convbert"),WRo=o(" \u2014 "),ZN=a("a"),QRo=o("ConvBertForQuestionAnswering"),HRo=o(" (ConvBERT model)"),URo=l(),v5=a("li"),Mle=a("strong"),JRo=o("data2vec-text"),YRo=o(" \u2014 "),eD=a("a"),KRo=o("Data2VecTextForQuestionAnswering"),ZRo=o(" (Data2VecText model)"),eSo=l(),T5=a("li"),Ele=a("strong"),oSo=o("deberta"),rSo=o(" \u2014 "),oD=a("a"),tSo=o("DebertaForQuestionAnswering"),aSo=o(" (DeBERTa model)"),nSo=l(),F5=a("li"),yle=a("strong"),sSo=o("deberta-v2"),lSo=o(" \u2014 "),rD=a("a"),iSo=o("DebertaV2ForQuestionAnswering"),dSo=o(" (DeBERTa-v2 model)"),cSo=l(),C5=a("li"),wle=a("strong"),fSo=o("distilbert"),mSo=o(" \u2014 "),tD=a("a"),gSo=o("DistilBertForQuestionAnswering"),hSo=o(" (DistilBERT model)"),pSo=l(),M5=a("li"),Ale=a("strong"),_So=o("electra"),uSo=o(" \u2014 "),aD=a("a"),bSo=o("ElectraForQuestionAnswering"),vSo=o(" (ELECTRA model)"),TSo=l(),E5=a("li"),Lle=a("strong"),FSo=o("flaubert"),CSo=o(" \u2014 "),nD=a("a"),MSo=o("FlaubertForQuestionAnsweringSimple"),ESo=o(" (FlauBERT model)"),ySo=l(),y5=a("li"),Ble=a("strong"),wSo=o("fnet"),ASo=o(" \u2014 "),sD=a("a"),LSo=o("FNetForQuestionAnswering"),BSo=o(" (FNet model)"),xSo=l(),w5=a("li"),xle=a("strong"),kSo=o("funnel"),RSo=o(" \u2014 "),lD=a("a"),SSo=o("FunnelForQuestionAnswering"),PSo=o(" (Funnel Transformer model)"),$So=l(),A5=a("li"),kle=a("strong"),ISo=o("gptj"),jSo=o(" \u2014 "),iD=a("a"),NSo=o("GPTJForQuestionAnswering"),DSo=o(" (GPT-J model)"),qSo=l(),L5=a("li"),Rle=a("strong"),GSo=o("ibert"),OSo=o(" \u2014 "),dD=a("a"),XSo=o("IBertForQuestionAnswering"),VSo=o(" (I-BERT model)"),zSo=l(),B5=a("li"),Sle=a("strong"),WSo=o("layoutlmv2"),QSo=o(" \u2014 "),cD=a("a"),HSo=o("LayoutLMv2ForQuestionAnswering"),USo=o(" (LayoutLMv2 model)"),JSo=l(),x5=a("li"),Ple=a("strong"),YSo=o("led"),KSo=o(" \u2014 "),fD=a("a"),ZSo=o("LEDForQuestionAnswering"),ePo=o(" (LED model)"),oPo=l(),k5=a("li"),$le=a("strong"),rPo=o("longformer"),tPo=o(" \u2014 "),mD=a("a"),aPo=o("LongformerForQuestionAnswering"),nPo=o(" (Longformer model)"),sPo=l(),R5=a("li"),Ile=a("strong"),lPo=o("lxmert"),iPo=o(" \u2014 "),gD=a("a"),dPo=o("LxmertForQuestionAnswering"),cPo=o(" (LXMERT model)"),fPo=l(),S5=a("li"),jle=a("strong"),mPo=o("mbart"),gPo=o(" \u2014 "),hD=a("a"),hPo=o("MBartForQuestionAnswering"),pPo=o(" (mBART model)"),_Po=l(),P5=a("li"),Nle=a("strong"),uPo=o("megatron-bert"),bPo=o(" \u2014 "),pD=a("a"),vPo=o("MegatronBertForQuestionAnswering"),TPo=o(" (MegatronBert model)"),FPo=l(),$5=a("li"),Dle=a("strong"),CPo=o("mobilebert"),MPo=o(" \u2014 "),_D=a("a"),EPo=o("MobileBertForQuestionAnswering"),yPo=o(" (MobileBERT model)"),wPo=l(),I5=a("li"),qle=a("strong"),APo=o("mpnet"),LPo=o(" \u2014 "),uD=a("a"),BPo=o("MPNetForQuestionAnswering"),xPo=o(" (MPNet model)"),kPo=l(),j5=a("li"),Gle=a("strong"),RPo=o("nystromformer"),SPo=o(" \u2014 "),bD=a("a"),PPo=o("NystromformerForQuestionAnswering"),$Po=o(" (Nystromformer model)"),IPo=l(),N5=a("li"),Ole=a("strong"),jPo=o("qdqbert"),NPo=o(" \u2014 "),vD=a("a"),DPo=o("QDQBertForQuestionAnswering"),qPo=o(" (QDQBert model)"),GPo=l(),D5=a("li"),Xle=a("strong"),OPo=o("reformer"),XPo=o(" \u2014 "),TD=a("a"),VPo=o("ReformerForQuestionAnswering"),zPo=o(" (Reformer model)"),WPo=l(),q5=a("li"),Vle=a("strong"),QPo=o("rembert"),HPo=o(" \u2014 "),FD=a("a"),UPo=o("RemBertForQuestionAnswering"),JPo=o(" (RemBERT model)"),YPo=l(),G5=a("li"),zle=a("strong"),KPo=o("roberta"),ZPo=o(" \u2014 "),CD=a("a"),e$o=o("RobertaForQuestionAnswering"),o$o=o(" (RoBERTa model)"),r$o=l(),O5=a("li"),Wle=a("strong"),t$o=o("roformer"),a$o=o(" \u2014 "),MD=a("a"),n$o=o("RoFormerForQuestionAnswering"),s$o=o(" (RoFormer model)"),l$o=l(),X5=a("li"),Qle=a("strong"),i$o=o("splinter"),d$o=o(" \u2014 "),ED=a("a"),c$o=o("SplinterForQuestionAnswering"),f$o=o(" (Splinter model)"),m$o=l(),V5=a("li"),Hle=a("strong"),g$o=o("squeezebert"),h$o=o(" \u2014 "),yD=a("a"),p$o=o("SqueezeBertForQuestionAnswering"),_$o=o(" (SqueezeBERT model)"),u$o=l(),z5=a("li"),Ule=a("strong"),b$o=o("xlm"),v$o=o(" \u2014 "),wD=a("a"),T$o=o("XLMForQuestionAnsweringSimple"),F$o=o(" (XLM model)"),C$o=l(),W5=a("li"),Jle=a("strong"),M$o=o("xlm-roberta"),E$o=o(" \u2014 "),AD=a("a"),y$o=o("XLMRobertaForQuestionAnswering"),w$o=o(" (XLM-RoBERTa model)"),A$o=l(),Q5=a("li"),Yle=a("strong"),L$o=o("xlm-roberta-xl"),B$o=o(" \u2014 "),LD=a("a"),x$o=o("XLMRobertaXLForQuestionAnswering"),k$o=o(" (XLM-RoBERTa-XL model)"),R$o=l(),H5=a("li"),Kle=a("strong"),S$o=o("xlnet"),P$o=o(" \u2014 "),BD=a("a"),$$o=o("XLNetForQuestionAnsweringSimple"),I$o=o(" (XLNet model)"),j$o=l(),U5=a("li"),Zle=a("strong"),N$o=o("yoso"),D$o=o(" \u2014 "),xD=a("a"),q$o=o("YosoForQuestionAnswering"),G$o=o(" (YOSO model)"),O$o=l(),J5=a("p"),X$o=o("The model is set in evaluation mode by default using "),eie=a("code"),V$o=o("model.eval()"),z$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oie=a("code"),W$o=o("model.train()"),Q$o=l(),rie=a("p"),H$o=o("Examples:"),U$o=l(),f(ay.$$.fragment),Uke=l(),wd=a("h2"),Y5=a("a"),tie=a("span"),f(ny.$$.fragment),J$o=l(),aie=a("span"),Y$o=o("AutoModelForTableQuestionAnswering"),Jke=l(),sr=a("div"),f(sy.$$.fragment),K$o=l(),Ad=a("p"),Z$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nie=a("code"),eIo=o("from_pretrained()"),oIo=o("class method or the "),sie=a("code"),rIo=o("from_config()"),tIo=o(`class
method.`),aIo=l(),ly=a("p"),nIo=o("This class cannot be instantiated directly using "),lie=a("code"),sIo=o("__init__()"),lIo=o(" (throws an error)."),iIo=l(),et=a("div"),f(iy.$$.fragment),dIo=l(),iie=a("p"),cIo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fIo=l(),Ld=a("p"),mIo=o(`Note:
Loading a model from its configuration file does `),die=a("strong"),gIo=o("not"),hIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cie=a("code"),pIo=o("from_pretrained()"),_Io=o("to load the model weights."),uIo=l(),fie=a("p"),bIo=o("Examples:"),vIo=l(),f(dy.$$.fragment),TIo=l(),Qe=a("div"),f(cy.$$.fragment),FIo=l(),mie=a("p"),CIo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),MIo=l(),en=a("p"),EIo=o("The model class to instantiate is selected based on the "),gie=a("code"),yIo=o("model_type"),wIo=o(` property of the config object (either
passed as an argument or loaded from `),hie=a("code"),AIo=o("pretrained_model_name_or_path"),LIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pie=a("code"),BIo=o("pretrained_model_name_or_path"),xIo=o(":"),kIo=l(),_ie=a("ul"),K5=a("li"),uie=a("strong"),RIo=o("tapas"),SIo=o(" \u2014 "),kD=a("a"),PIo=o("TapasForQuestionAnswering"),$Io=o(" (TAPAS model)"),IIo=l(),Z5=a("p"),jIo=o("The model is set in evaluation mode by default using "),bie=a("code"),NIo=o("model.eval()"),DIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vie=a("code"),qIo=o("model.train()"),GIo=l(),Tie=a("p"),OIo=o("Examples:"),XIo=l(),f(fy.$$.fragment),Yke=l(),Bd=a("h2"),e2=a("a"),Fie=a("span"),f(my.$$.fragment),VIo=l(),Cie=a("span"),zIo=o("AutoModelForImageClassification"),Kke=l(),lr=a("div"),f(gy.$$.fragment),WIo=l(),xd=a("p"),QIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Mie=a("code"),HIo=o("from_pretrained()"),UIo=o("class method or the "),Eie=a("code"),JIo=o("from_config()"),YIo=o(`class
method.`),KIo=l(),hy=a("p"),ZIo=o("This class cannot be instantiated directly using "),yie=a("code"),ejo=o("__init__()"),ojo=o(" (throws an error)."),rjo=l(),ot=a("div"),f(py.$$.fragment),tjo=l(),wie=a("p"),ajo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),njo=l(),kd=a("p"),sjo=o(`Note:
Loading a model from its configuration file does `),Aie=a("strong"),ljo=o("not"),ijo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lie=a("code"),djo=o("from_pretrained()"),cjo=o("to load the model weights."),fjo=l(),Bie=a("p"),mjo=o("Examples:"),gjo=l(),f(_y.$$.fragment),hjo=l(),He=a("div"),f(uy.$$.fragment),pjo=l(),xie=a("p"),_jo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ujo=l(),on=a("p"),bjo=o("The model class to instantiate is selected based on the "),kie=a("code"),vjo=o("model_type"),Tjo=o(` property of the config object (either
passed as an argument or loaded from `),Rie=a("code"),Fjo=o("pretrained_model_name_or_path"),Cjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sie=a("code"),Mjo=o("pretrained_model_name_or_path"),Ejo=o(":"),yjo=l(),ge=a("ul"),o2=a("li"),Pie=a("strong"),wjo=o("beit"),Ajo=o(" \u2014 "),RD=a("a"),Ljo=o("BeitForImageClassification"),Bjo=o(" (BEiT model)"),xjo=l(),r2=a("li"),$ie=a("strong"),kjo=o("convnext"),Rjo=o(" \u2014 "),SD=a("a"),Sjo=o("ConvNextForImageClassification"),Pjo=o(" (ConvNext model)"),$jo=l(),qs=a("li"),Iie=a("strong"),Ijo=o("deit"),jjo=o(" \u2014 "),PD=a("a"),Njo=o("DeiTForImageClassification"),Djo=o(" or "),$D=a("a"),qjo=o("DeiTForImageClassificationWithTeacher"),Gjo=o(" (DeiT model)"),Ojo=l(),t2=a("li"),jie=a("strong"),Xjo=o("imagegpt"),Vjo=o(" \u2014 "),ID=a("a"),zjo=o("ImageGPTForImageClassification"),Wjo=o(" (ImageGPT model)"),Qjo=l(),ma=a("li"),Nie=a("strong"),Hjo=o("perceiver"),Ujo=o(" \u2014 "),jD=a("a"),Jjo=o("PerceiverForImageClassificationLearned"),Yjo=o(" or "),ND=a("a"),Kjo=o("PerceiverForImageClassificationFourier"),Zjo=o(" or "),DD=a("a"),eNo=o("PerceiverForImageClassificationConvProcessing"),oNo=o(" (Perceiver model)"),rNo=l(),a2=a("li"),Die=a("strong"),tNo=o("poolformer"),aNo=o(" \u2014 "),qD=a("a"),nNo=o("PoolFormerForImageClassification"),sNo=o(" (PoolFormer model)"),lNo=l(),n2=a("li"),qie=a("strong"),iNo=o("resnet"),dNo=o(" \u2014 "),GD=a("a"),cNo=o("ResNetForImageClassification"),fNo=o(" (ResNet model)"),mNo=l(),s2=a("li"),Gie=a("strong"),gNo=o("segformer"),hNo=o(" \u2014 "),OD=a("a"),pNo=o("SegformerForImageClassification"),_No=o(" (SegFormer model)"),uNo=l(),l2=a("li"),Oie=a("strong"),bNo=o("swin"),vNo=o(" \u2014 "),XD=a("a"),TNo=o("SwinForImageClassification"),FNo=o(" (Swin model)"),CNo=l(),i2=a("li"),Xie=a("strong"),MNo=o("van"),ENo=o(" \u2014 "),VD=a("a"),yNo=o("VanForImageClassification"),wNo=o(" (VAN model)"),ANo=l(),d2=a("li"),Vie=a("strong"),LNo=o("vit"),BNo=o(" \u2014 "),zD=a("a"),xNo=o("ViTForImageClassification"),kNo=o(" (ViT model)"),RNo=l(),c2=a("p"),SNo=o("The model is set in evaluation mode by default using "),zie=a("code"),PNo=o("model.eval()"),$No=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wie=a("code"),INo=o("model.train()"),jNo=l(),Qie=a("p"),NNo=o("Examples:"),DNo=l(),f(by.$$.fragment),Zke=l(),Rd=a("h2"),f2=a("a"),Hie=a("span"),f(vy.$$.fragment),qNo=l(),Uie=a("span"),GNo=o("AutoModelForVision2Seq"),eRe=l(),ir=a("div"),f(Ty.$$.fragment),ONo=l(),Sd=a("p"),XNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Jie=a("code"),VNo=o("from_pretrained()"),zNo=o("class method or the "),Yie=a("code"),WNo=o("from_config()"),QNo=o(`class
method.`),HNo=l(),Fy=a("p"),UNo=o("This class cannot be instantiated directly using "),Kie=a("code"),JNo=o("__init__()"),YNo=o(" (throws an error)."),KNo=l(),rt=a("div"),f(Cy.$$.fragment),ZNo=l(),Zie=a("p"),eDo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),oDo=l(),Pd=a("p"),rDo=o(`Note:
Loading a model from its configuration file does `),ede=a("strong"),tDo=o("not"),aDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ode=a("code"),nDo=o("from_pretrained()"),sDo=o("to load the model weights."),lDo=l(),rde=a("p"),iDo=o("Examples:"),dDo=l(),f(My.$$.fragment),cDo=l(),Ue=a("div"),f(Ey.$$.fragment),fDo=l(),tde=a("p"),mDo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gDo=l(),rn=a("p"),hDo=o("The model class to instantiate is selected based on the "),ade=a("code"),pDo=o("model_type"),_Do=o(` property of the config object (either
passed as an argument or loaded from `),nde=a("code"),uDo=o("pretrained_model_name_or_path"),bDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sde=a("code"),vDo=o("pretrained_model_name_or_path"),TDo=o(":"),FDo=l(),lde=a("ul"),m2=a("li"),ide=a("strong"),CDo=o("vision-encoder-decoder"),MDo=o(" \u2014 "),WD=a("a"),EDo=o("VisionEncoderDecoderModel"),yDo=o(" (Vision Encoder decoder model)"),wDo=l(),g2=a("p"),ADo=o("The model is set in evaluation mode by default using "),dde=a("code"),LDo=o("model.eval()"),BDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cde=a("code"),xDo=o("model.train()"),kDo=l(),fde=a("p"),RDo=o("Examples:"),SDo=l(),f(yy.$$.fragment),oRe=l(),$d=a("h2"),h2=a("a"),mde=a("span"),f(wy.$$.fragment),PDo=l(),gde=a("span"),$Do=o("AutoModelForAudioClassification"),rRe=l(),dr=a("div"),f(Ay.$$.fragment),IDo=l(),Id=a("p"),jDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),hde=a("code"),NDo=o("from_pretrained()"),DDo=o("class method or the "),pde=a("code"),qDo=o("from_config()"),GDo=o(`class
method.`),ODo=l(),Ly=a("p"),XDo=o("This class cannot be instantiated directly using "),_de=a("code"),VDo=o("__init__()"),zDo=o(" (throws an error)."),WDo=l(),tt=a("div"),f(By.$$.fragment),QDo=l(),ude=a("p"),HDo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),UDo=l(),jd=a("p"),JDo=o(`Note:
Loading a model from its configuration file does `),bde=a("strong"),YDo=o("not"),KDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vde=a("code"),ZDo=o("from_pretrained()"),eqo=o("to load the model weights."),oqo=l(),Tde=a("p"),rqo=o("Examples:"),tqo=l(),f(xy.$$.fragment),aqo=l(),Je=a("div"),f(ky.$$.fragment),nqo=l(),Fde=a("p"),sqo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),lqo=l(),tn=a("p"),iqo=o("The model class to instantiate is selected based on the "),Cde=a("code"),dqo=o("model_type"),cqo=o(` property of the config object (either
passed as an argument or loaded from `),Mde=a("code"),fqo=o("pretrained_model_name_or_path"),mqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ede=a("code"),gqo=o("pretrained_model_name_or_path"),hqo=o(":"),pqo=l(),ke=a("ul"),p2=a("li"),yde=a("strong"),_qo=o("data2vec-audio"),uqo=o(" \u2014 "),QD=a("a"),bqo=o("Data2VecAudioForSequenceClassification"),vqo=o(" (Data2VecAudio model)"),Tqo=l(),_2=a("li"),wde=a("strong"),Fqo=o("hubert"),Cqo=o(" \u2014 "),HD=a("a"),Mqo=o("HubertForSequenceClassification"),Eqo=o(" (Hubert model)"),yqo=l(),u2=a("li"),Ade=a("strong"),wqo=o("sew"),Aqo=o(" \u2014 "),UD=a("a"),Lqo=o("SEWForSequenceClassification"),Bqo=o(" (SEW model)"),xqo=l(),b2=a("li"),Lde=a("strong"),kqo=o("sew-d"),Rqo=o(" \u2014 "),JD=a("a"),Sqo=o("SEWDForSequenceClassification"),Pqo=o(" (SEW-D model)"),$qo=l(),v2=a("li"),Bde=a("strong"),Iqo=o("unispeech"),jqo=o(" \u2014 "),YD=a("a"),Nqo=o("UniSpeechForSequenceClassification"),Dqo=o(" (UniSpeech model)"),qqo=l(),T2=a("li"),xde=a("strong"),Gqo=o("unispeech-sat"),Oqo=o(" \u2014 "),KD=a("a"),Xqo=o("UniSpeechSatForSequenceClassification"),Vqo=o(" (UniSpeechSat model)"),zqo=l(),F2=a("li"),kde=a("strong"),Wqo=o("wav2vec2"),Qqo=o(" \u2014 "),ZD=a("a"),Hqo=o("Wav2Vec2ForSequenceClassification"),Uqo=o(" (Wav2Vec2 model)"),Jqo=l(),C2=a("li"),Rde=a("strong"),Yqo=o("wavlm"),Kqo=o(" \u2014 "),eq=a("a"),Zqo=o("WavLMForSequenceClassification"),eGo=o(" (WavLM model)"),oGo=l(),M2=a("p"),rGo=o("The model is set in evaluation mode by default using "),Sde=a("code"),tGo=o("model.eval()"),aGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=a("code"),nGo=o("model.train()"),sGo=l(),$de=a("p"),lGo=o("Examples:"),iGo=l(),f(Ry.$$.fragment),tRe=l(),Nd=a("h2"),E2=a("a"),Ide=a("span"),f(Sy.$$.fragment),dGo=l(),jde=a("span"),cGo=o("AutoModelForAudioFrameClassification"),aRe=l(),cr=a("div"),f(Py.$$.fragment),fGo=l(),Dd=a("p"),mGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Nde=a("code"),gGo=o("from_pretrained()"),hGo=o("class method or the "),Dde=a("code"),pGo=o("from_config()"),_Go=o(`class
method.`),uGo=l(),$y=a("p"),bGo=o("This class cannot be instantiated directly using "),qde=a("code"),vGo=o("__init__()"),TGo=o(" (throws an error)."),FGo=l(),at=a("div"),f(Iy.$$.fragment),CGo=l(),Gde=a("p"),MGo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),EGo=l(),qd=a("p"),yGo=o(`Note:
Loading a model from its configuration file does `),Ode=a("strong"),wGo=o("not"),AGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xde=a("code"),LGo=o("from_pretrained()"),BGo=o("to load the model weights."),xGo=l(),Vde=a("p"),kGo=o("Examples:"),RGo=l(),f(jy.$$.fragment),SGo=l(),Ye=a("div"),f(Ny.$$.fragment),PGo=l(),zde=a("p"),$Go=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),IGo=l(),an=a("p"),jGo=o("The model class to instantiate is selected based on the "),Wde=a("code"),NGo=o("model_type"),DGo=o(` property of the config object (either
passed as an argument or loaded from `),Qde=a("code"),qGo=o("pretrained_model_name_or_path"),GGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hde=a("code"),OGo=o("pretrained_model_name_or_path"),XGo=o(":"),VGo=l(),nn=a("ul"),y2=a("li"),Ude=a("strong"),zGo=o("data2vec-audio"),WGo=o(" \u2014 "),oq=a("a"),QGo=o("Data2VecAudioForAudioFrameClassification"),HGo=o(" (Data2VecAudio model)"),UGo=l(),w2=a("li"),Jde=a("strong"),JGo=o("unispeech-sat"),YGo=o(" \u2014 "),rq=a("a"),KGo=o("UniSpeechSatForAudioFrameClassification"),ZGo=o(" (UniSpeechSat model)"),eOo=l(),A2=a("li"),Yde=a("strong"),oOo=o("wav2vec2"),rOo=o(" \u2014 "),tq=a("a"),tOo=o("Wav2Vec2ForAudioFrameClassification"),aOo=o(" (Wav2Vec2 model)"),nOo=l(),L2=a("li"),Kde=a("strong"),sOo=o("wavlm"),lOo=o(" \u2014 "),aq=a("a"),iOo=o("WavLMForAudioFrameClassification"),dOo=o(" (WavLM model)"),cOo=l(),B2=a("p"),fOo=o("The model is set in evaluation mode by default using "),Zde=a("code"),mOo=o("model.eval()"),gOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ece=a("code"),hOo=o("model.train()"),pOo=l(),oce=a("p"),_Oo=o("Examples:"),uOo=l(),f(Dy.$$.fragment),nRe=l(),Gd=a("h2"),x2=a("a"),rce=a("span"),f(qy.$$.fragment),bOo=l(),tce=a("span"),vOo=o("AutoModelForCTC"),sRe=l(),fr=a("div"),f(Gy.$$.fragment),TOo=l(),Od=a("p"),FOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),ace=a("code"),COo=o("from_pretrained()"),MOo=o("class method or the "),nce=a("code"),EOo=o("from_config()"),yOo=o(`class
method.`),wOo=l(),Oy=a("p"),AOo=o("This class cannot be instantiated directly using "),sce=a("code"),LOo=o("__init__()"),BOo=o(" (throws an error)."),xOo=l(),nt=a("div"),f(Xy.$$.fragment),kOo=l(),lce=a("p"),ROo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),SOo=l(),Xd=a("p"),POo=o(`Note:
Loading a model from its configuration file does `),ice=a("strong"),$Oo=o("not"),IOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dce=a("code"),jOo=o("from_pretrained()"),NOo=o("to load the model weights."),DOo=l(),cce=a("p"),qOo=o("Examples:"),GOo=l(),f(Vy.$$.fragment),OOo=l(),Ke=a("div"),f(zy.$$.fragment),XOo=l(),fce=a("p"),VOo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),zOo=l(),sn=a("p"),WOo=o("The model class to instantiate is selected based on the "),mce=a("code"),QOo=o("model_type"),HOo=o(` property of the config object (either
passed as an argument or loaded from `),gce=a("code"),UOo=o("pretrained_model_name_or_path"),JOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hce=a("code"),YOo=o("pretrained_model_name_or_path"),KOo=o(":"),ZOo=l(),Re=a("ul"),k2=a("li"),pce=a("strong"),eXo=o("data2vec-audio"),oXo=o(" \u2014 "),nq=a("a"),rXo=o("Data2VecAudioForCTC"),tXo=o(" (Data2VecAudio model)"),aXo=l(),R2=a("li"),_ce=a("strong"),nXo=o("hubert"),sXo=o(" \u2014 "),sq=a("a"),lXo=o("HubertForCTC"),iXo=o(" (Hubert model)"),dXo=l(),S2=a("li"),uce=a("strong"),cXo=o("sew"),fXo=o(" \u2014 "),lq=a("a"),mXo=o("SEWForCTC"),gXo=o(" (SEW model)"),hXo=l(),P2=a("li"),bce=a("strong"),pXo=o("sew-d"),_Xo=o(" \u2014 "),iq=a("a"),uXo=o("SEWDForCTC"),bXo=o(" (SEW-D model)"),vXo=l(),$2=a("li"),vce=a("strong"),TXo=o("unispeech"),FXo=o(" \u2014 "),dq=a("a"),CXo=o("UniSpeechForCTC"),MXo=o(" (UniSpeech model)"),EXo=l(),I2=a("li"),Tce=a("strong"),yXo=o("unispeech-sat"),wXo=o(" \u2014 "),cq=a("a"),AXo=o("UniSpeechSatForCTC"),LXo=o(" (UniSpeechSat model)"),BXo=l(),j2=a("li"),Fce=a("strong"),xXo=o("wav2vec2"),kXo=o(" \u2014 "),fq=a("a"),RXo=o("Wav2Vec2ForCTC"),SXo=o(" (Wav2Vec2 model)"),PXo=l(),N2=a("li"),Cce=a("strong"),$Xo=o("wavlm"),IXo=o(" \u2014 "),mq=a("a"),jXo=o("WavLMForCTC"),NXo=o(" (WavLM model)"),DXo=l(),D2=a("p"),qXo=o("The model is set in evaluation mode by default using "),Mce=a("code"),GXo=o("model.eval()"),OXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ece=a("code"),XXo=o("model.train()"),VXo=l(),yce=a("p"),zXo=o("Examples:"),WXo=l(),f(Wy.$$.fragment),lRe=l(),Vd=a("h2"),q2=a("a"),wce=a("span"),f(Qy.$$.fragment),QXo=l(),Ace=a("span"),HXo=o("AutoModelForSpeechSeq2Seq"),iRe=l(),mr=a("div"),f(Hy.$$.fragment),UXo=l(),zd=a("p"),JXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Lce=a("code"),YXo=o("from_pretrained()"),KXo=o("class method or the "),Bce=a("code"),ZXo=o("from_config()"),eVo=o(`class
method.`),oVo=l(),Uy=a("p"),rVo=o("This class cannot be instantiated directly using "),xce=a("code"),tVo=o("__init__()"),aVo=o(" (throws an error)."),nVo=l(),st=a("div"),f(Jy.$$.fragment),sVo=l(),kce=a("p"),lVo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),iVo=l(),Wd=a("p"),dVo=o(`Note:
Loading a model from its configuration file does `),Rce=a("strong"),cVo=o("not"),fVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sce=a("code"),mVo=o("from_pretrained()"),gVo=o("to load the model weights."),hVo=l(),Pce=a("p"),pVo=o("Examples:"),_Vo=l(),f(Yy.$$.fragment),uVo=l(),Ze=a("div"),f(Ky.$$.fragment),bVo=l(),$ce=a("p"),vVo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),TVo=l(),ln=a("p"),FVo=o("The model class to instantiate is selected based on the "),Ice=a("code"),CVo=o("model_type"),MVo=o(` property of the config object (either
passed as an argument or loaded from `),jce=a("code"),EVo=o("pretrained_model_name_or_path"),yVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nce=a("code"),wVo=o("pretrained_model_name_or_path"),AVo=o(":"),LVo=l(),Zy=a("ul"),G2=a("li"),Dce=a("strong"),BVo=o("speech-encoder-decoder"),xVo=o(" \u2014 "),gq=a("a"),kVo=o("SpeechEncoderDecoderModel"),RVo=o(" (Speech Encoder decoder model)"),SVo=l(),O2=a("li"),qce=a("strong"),PVo=o("speech_to_text"),$Vo=o(" \u2014 "),hq=a("a"),IVo=o("Speech2TextForConditionalGeneration"),jVo=o(" (Speech2Text model)"),NVo=l(),X2=a("p"),DVo=o("The model is set in evaluation mode by default using "),Gce=a("code"),qVo=o("model.eval()"),GVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oce=a("code"),OVo=o("model.train()"),XVo=l(),Xce=a("p"),VVo=o("Examples:"),zVo=l(),f(ew.$$.fragment),dRe=l(),Qd=a("h2"),V2=a("a"),Vce=a("span"),f(ow.$$.fragment),WVo=l(),zce=a("span"),QVo=o("AutoModelForAudioXVector"),cRe=l(),gr=a("div"),f(rw.$$.fragment),HVo=l(),Hd=a("p"),UVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Wce=a("code"),JVo=o("from_pretrained()"),YVo=o("class method or the "),Qce=a("code"),KVo=o("from_config()"),ZVo=o(`class
method.`),ezo=l(),tw=a("p"),ozo=o("This class cannot be instantiated directly using "),Hce=a("code"),rzo=o("__init__()"),tzo=o(" (throws an error)."),azo=l(),lt=a("div"),f(aw.$$.fragment),nzo=l(),Uce=a("p"),szo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),lzo=l(),Ud=a("p"),izo=o(`Note:
Loading a model from its configuration file does `),Jce=a("strong"),dzo=o("not"),czo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yce=a("code"),fzo=o("from_pretrained()"),mzo=o("to load the model weights."),gzo=l(),Kce=a("p"),hzo=o("Examples:"),pzo=l(),f(nw.$$.fragment),_zo=l(),eo=a("div"),f(sw.$$.fragment),uzo=l(),Zce=a("p"),bzo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),vzo=l(),dn=a("p"),Tzo=o("The model class to instantiate is selected based on the "),efe=a("code"),Fzo=o("model_type"),Czo=o(` property of the config object (either
passed as an argument or loaded from `),ofe=a("code"),Mzo=o("pretrained_model_name_or_path"),Ezo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rfe=a("code"),yzo=o("pretrained_model_name_or_path"),wzo=o(":"),Azo=l(),cn=a("ul"),z2=a("li"),tfe=a("strong"),Lzo=o("data2vec-audio"),Bzo=o(" \u2014 "),pq=a("a"),xzo=o("Data2VecAudioForXVector"),kzo=o(" (Data2VecAudio model)"),Rzo=l(),W2=a("li"),afe=a("strong"),Szo=o("unispeech-sat"),Pzo=o(" \u2014 "),_q=a("a"),$zo=o("UniSpeechSatForXVector"),Izo=o(" (UniSpeechSat model)"),jzo=l(),Q2=a("li"),nfe=a("strong"),Nzo=o("wav2vec2"),Dzo=o(" \u2014 "),uq=a("a"),qzo=o("Wav2Vec2ForXVector"),Gzo=o(" (Wav2Vec2 model)"),Ozo=l(),H2=a("li"),sfe=a("strong"),Xzo=o("wavlm"),Vzo=o(" \u2014 "),bq=a("a"),zzo=o("WavLMForXVector"),Wzo=o(" (WavLM model)"),Qzo=l(),U2=a("p"),Hzo=o("The model is set in evaluation mode by default using "),lfe=a("code"),Uzo=o("model.eval()"),Jzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ife=a("code"),Yzo=o("model.train()"),Kzo=l(),dfe=a("p"),Zzo=o("Examples:"),eWo=l(),f(lw.$$.fragment),fRe=l(),Jd=a("h2"),J2=a("a"),cfe=a("span"),f(iw.$$.fragment),oWo=l(),ffe=a("span"),rWo=o("AutoModelForMaskedImageModeling"),mRe=l(),hr=a("div"),f(dw.$$.fragment),tWo=l(),Yd=a("p"),aWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),mfe=a("code"),nWo=o("from_pretrained()"),sWo=o("class method or the "),gfe=a("code"),lWo=o("from_config()"),iWo=o(`class
method.`),dWo=l(),cw=a("p"),cWo=o("This class cannot be instantiated directly using "),hfe=a("code"),fWo=o("__init__()"),mWo=o(" (throws an error)."),gWo=l(),it=a("div"),f(fw.$$.fragment),hWo=l(),pfe=a("p"),pWo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),_Wo=l(),Kd=a("p"),uWo=o(`Note:
Loading a model from its configuration file does `),_fe=a("strong"),bWo=o("not"),vWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ufe=a("code"),TWo=o("from_pretrained()"),FWo=o("to load the model weights."),CWo=l(),bfe=a("p"),MWo=o("Examples:"),EWo=l(),f(mw.$$.fragment),yWo=l(),oo=a("div"),f(gw.$$.fragment),wWo=l(),vfe=a("p"),AWo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),LWo=l(),fn=a("p"),BWo=o("The model class to instantiate is selected based on the "),Tfe=a("code"),xWo=o("model_type"),kWo=o(` property of the config object (either
passed as an argument or loaded from `),Ffe=a("code"),RWo=o("pretrained_model_name_or_path"),SWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cfe=a("code"),PWo=o("pretrained_model_name_or_path"),$Wo=o(":"),IWo=l(),Zd=a("ul"),Y2=a("li"),Mfe=a("strong"),jWo=o("deit"),NWo=o(" \u2014 "),vq=a("a"),DWo=o("DeiTForMaskedImageModeling"),qWo=o(" (DeiT model)"),GWo=l(),K2=a("li"),Efe=a("strong"),OWo=o("swin"),XWo=o(" \u2014 "),Tq=a("a"),VWo=o("SwinForMaskedImageModeling"),zWo=o(" (Swin model)"),WWo=l(),Z2=a("li"),yfe=a("strong"),QWo=o("vit"),HWo=o(" \u2014 "),Fq=a("a"),UWo=o("ViTForMaskedImageModeling"),JWo=o(" (ViT model)"),YWo=l(),ev=a("p"),KWo=o("The model is set in evaluation mode by default using "),wfe=a("code"),ZWo=o("model.eval()"),eQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Afe=a("code"),oQo=o("model.train()"),rQo=l(),Lfe=a("p"),tQo=o("Examples:"),aQo=l(),f(hw.$$.fragment),gRe=l(),ec=a("h2"),ov=a("a"),Bfe=a("span"),f(pw.$$.fragment),nQo=l(),xfe=a("span"),sQo=o("AutoModelForObjectDetection"),hRe=l(),pr=a("div"),f(_w.$$.fragment),lQo=l(),oc=a("p"),iQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),kfe=a("code"),dQo=o("from_pretrained()"),cQo=o("class method or the "),Rfe=a("code"),fQo=o("from_config()"),mQo=o(`class
method.`),gQo=l(),uw=a("p"),hQo=o("This class cannot be instantiated directly using "),Sfe=a("code"),pQo=o("__init__()"),_Qo=o(" (throws an error)."),uQo=l(),dt=a("div"),f(bw.$$.fragment),bQo=l(),Pfe=a("p"),vQo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),TQo=l(),rc=a("p"),FQo=o(`Note:
Loading a model from its configuration file does `),$fe=a("strong"),CQo=o("not"),MQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ife=a("code"),EQo=o("from_pretrained()"),yQo=o("to load the model weights."),wQo=l(),jfe=a("p"),AQo=o("Examples:"),LQo=l(),f(vw.$$.fragment),BQo=l(),ro=a("div"),f(Tw.$$.fragment),xQo=l(),Nfe=a("p"),kQo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),RQo=l(),mn=a("p"),SQo=o("The model class to instantiate is selected based on the "),Dfe=a("code"),PQo=o("model_type"),$Qo=o(` property of the config object (either
passed as an argument or loaded from `),qfe=a("code"),IQo=o("pretrained_model_name_or_path"),jQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gfe=a("code"),NQo=o("pretrained_model_name_or_path"),DQo=o(":"),qQo=l(),Ofe=a("ul"),rv=a("li"),Xfe=a("strong"),GQo=o("detr"),OQo=o(" \u2014 "),Cq=a("a"),XQo=o("DetrForObjectDetection"),VQo=o(" (DETR model)"),zQo=l(),tv=a("p"),WQo=o("The model is set in evaluation mode by default using "),Vfe=a("code"),QQo=o("model.eval()"),HQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zfe=a("code"),UQo=o("model.train()"),JQo=l(),Wfe=a("p"),YQo=o("Examples:"),KQo=l(),f(Fw.$$.fragment),pRe=l(),tc=a("h2"),av=a("a"),Qfe=a("span"),f(Cw.$$.fragment),ZQo=l(),Hfe=a("span"),eHo=o("AutoModelForImageSegmentation"),_Re=l(),_r=a("div"),f(Mw.$$.fragment),oHo=l(),ac=a("p"),rHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Ufe=a("code"),tHo=o("from_pretrained()"),aHo=o("class method or the "),Jfe=a("code"),nHo=o("from_config()"),sHo=o(`class
method.`),lHo=l(),Ew=a("p"),iHo=o("This class cannot be instantiated directly using "),Yfe=a("code"),dHo=o("__init__()"),cHo=o(" (throws an error)."),fHo=l(),ct=a("div"),f(yw.$$.fragment),mHo=l(),Kfe=a("p"),gHo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),hHo=l(),nc=a("p"),pHo=o(`Note:
Loading a model from its configuration file does `),Zfe=a("strong"),_Ho=o("not"),uHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eme=a("code"),bHo=o("from_pretrained()"),vHo=o("to load the model weights."),THo=l(),ome=a("p"),FHo=o("Examples:"),CHo=l(),f(ww.$$.fragment),MHo=l(),to=a("div"),f(Aw.$$.fragment),EHo=l(),rme=a("p"),yHo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),wHo=l(),gn=a("p"),AHo=o("The model class to instantiate is selected based on the "),tme=a("code"),LHo=o("model_type"),BHo=o(` property of the config object (either
passed as an argument or loaded from `),ame=a("code"),xHo=o("pretrained_model_name_or_path"),kHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nme=a("code"),RHo=o("pretrained_model_name_or_path"),SHo=o(":"),PHo=l(),sme=a("ul"),nv=a("li"),lme=a("strong"),$Ho=o("detr"),IHo=o(" \u2014 "),Mq=a("a"),jHo=o("DetrForSegmentation"),NHo=o(" (DETR model)"),DHo=l(),sv=a("p"),qHo=o("The model is set in evaluation mode by default using "),ime=a("code"),GHo=o("model.eval()"),OHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dme=a("code"),XHo=o("model.train()"),VHo=l(),cme=a("p"),zHo=o("Examples:"),WHo=l(),f(Lw.$$.fragment),uRe=l(),sc=a("h2"),lv=a("a"),fme=a("span"),f(Bw.$$.fragment),QHo=l(),mme=a("span"),HHo=o("AutoModelForSemanticSegmentation"),bRe=l(),ur=a("div"),f(xw.$$.fragment),UHo=l(),lc=a("p"),JHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),gme=a("code"),YHo=o("from_pretrained()"),KHo=o("class method or the "),hme=a("code"),ZHo=o("from_config()"),eUo=o(`class
method.`),oUo=l(),kw=a("p"),rUo=o("This class cannot be instantiated directly using "),pme=a("code"),tUo=o("__init__()"),aUo=o(" (throws an error)."),nUo=l(),ft=a("div"),f(Rw.$$.fragment),sUo=l(),_me=a("p"),lUo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),iUo=l(),ic=a("p"),dUo=o(`Note:
Loading a model from its configuration file does `),ume=a("strong"),cUo=o("not"),fUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bme=a("code"),mUo=o("from_pretrained()"),gUo=o("to load the model weights."),hUo=l(),vme=a("p"),pUo=o("Examples:"),_Uo=l(),f(Sw.$$.fragment),uUo=l(),ao=a("div"),f(Pw.$$.fragment),bUo=l(),Tme=a("p"),vUo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),TUo=l(),hn=a("p"),FUo=o("The model class to instantiate is selected based on the "),Fme=a("code"),CUo=o("model_type"),MUo=o(` property of the config object (either
passed as an argument or loaded from `),Cme=a("code"),EUo=o("pretrained_model_name_or_path"),yUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mme=a("code"),wUo=o("pretrained_model_name_or_path"),AUo=o(":"),LUo=l(),$w=a("ul"),iv=a("li"),Eme=a("strong"),BUo=o("beit"),xUo=o(" \u2014 "),Eq=a("a"),kUo=o("BeitForSemanticSegmentation"),RUo=o(" (BEiT model)"),SUo=l(),dv=a("li"),yme=a("strong"),PUo=o("segformer"),$Uo=o(" \u2014 "),yq=a("a"),IUo=o("SegformerForSemanticSegmentation"),jUo=o(" (SegFormer model)"),NUo=l(),cv=a("p"),DUo=o("The model is set in evaluation mode by default using "),wme=a("code"),qUo=o("model.eval()"),GUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ame=a("code"),OUo=o("model.train()"),XUo=l(),Lme=a("p"),VUo=o("Examples:"),zUo=l(),f(Iw.$$.fragment),vRe=l(),dc=a("h2"),fv=a("a"),Bme=a("span"),f(jw.$$.fragment),WUo=l(),xme=a("span"),QUo=o("AutoModelForInstanceSegmentation"),TRe=l(),br=a("div"),f(Nw.$$.fragment),HUo=l(),cc=a("p"),UUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),kme=a("code"),JUo=o("from_pretrained()"),YUo=o("class method or the "),Rme=a("code"),KUo=o("from_config()"),ZUo=o(`class
method.`),eJo=l(),Dw=a("p"),oJo=o("This class cannot be instantiated directly using "),Sme=a("code"),rJo=o("__init__()"),tJo=o(" (throws an error)."),aJo=l(),mt=a("div"),f(qw.$$.fragment),nJo=l(),Pme=a("p"),sJo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),lJo=l(),fc=a("p"),iJo=o(`Note:
Loading a model from its configuration file does `),$me=a("strong"),dJo=o("not"),cJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ime=a("code"),fJo=o("from_pretrained()"),mJo=o("to load the model weights."),gJo=l(),jme=a("p"),hJo=o("Examples:"),pJo=l(),f(Gw.$$.fragment),_Jo=l(),no=a("div"),f(Ow.$$.fragment),uJo=l(),Nme=a("p"),bJo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),vJo=l(),pn=a("p"),TJo=o("The model class to instantiate is selected based on the "),Dme=a("code"),FJo=o("model_type"),CJo=o(` property of the config object (either
passed as an argument or loaded from `),qme=a("code"),MJo=o("pretrained_model_name_or_path"),EJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gme=a("code"),yJo=o("pretrained_model_name_or_path"),wJo=o(":"),AJo=l(),Ome=a("ul"),mv=a("li"),Xme=a("strong"),LJo=o("maskformer"),BJo=o(" \u2014 "),wq=a("a"),xJo=o("MaskFormerForInstanceSegmentation"),kJo=o(" (MaskFormer model)"),RJo=l(),gv=a("p"),SJo=o("The model is set in evaluation mode by default using "),Vme=a("code"),PJo=o("model.eval()"),$Jo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zme=a("code"),IJo=o("model.train()"),jJo=l(),Wme=a("p"),NJo=o("Examples:"),DJo=l(),f(Xw.$$.fragment),FRe=l(),mc=a("h2"),hv=a("a"),Qme=a("span"),f(Vw.$$.fragment),qJo=l(),Hme=a("span"),GJo=o("TFAutoModel"),CRe=l(),vr=a("div"),f(zw.$$.fragment),OJo=l(),gc=a("p"),XJo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Ume=a("code"),VJo=o("from_pretrained()"),zJo=o("class method or the "),Jme=a("code"),WJo=o("from_config()"),QJo=o(`class
method.`),HJo=l(),Ww=a("p"),UJo=o("This class cannot be instantiated directly using "),Yme=a("code"),JJo=o("__init__()"),YJo=o(" (throws an error)."),KJo=l(),gt=a("div"),f(Qw.$$.fragment),ZJo=l(),Kme=a("p"),eYo=o("Instantiates one of the base model classes of the library from a configuration."),oYo=l(),hc=a("p"),rYo=o(`Note:
Loading a model from its configuration file does `),Zme=a("strong"),tYo=o("not"),aYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ege=a("code"),nYo=o("from_pretrained()"),sYo=o("to load the model weights."),lYo=l(),oge=a("p"),iYo=o("Examples:"),dYo=l(),f(Hw.$$.fragment),cYo=l(),ho=a("div"),f(Uw.$$.fragment),fYo=l(),rge=a("p"),mYo=o("Instantiate one of the base model classes of the library from a pretrained model."),gYo=l(),_n=a("p"),hYo=o("The model class to instantiate is selected based on the "),tge=a("code"),pYo=o("model_type"),_Yo=o(` property of the config object (either
passed as an argument or loaded from `),age=a("code"),uYo=o("pretrained_model_name_or_path"),bYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nge=a("code"),vYo=o("pretrained_model_name_or_path"),TYo=o(":"),FYo=l(),B=a("ul"),pv=a("li"),sge=a("strong"),CYo=o("albert"),MYo=o(" \u2014 "),Aq=a("a"),EYo=o("TFAlbertModel"),yYo=o(" (ALBERT model)"),wYo=l(),_v=a("li"),lge=a("strong"),AYo=o("bart"),LYo=o(" \u2014 "),Lq=a("a"),BYo=o("TFBartModel"),xYo=o(" (BART model)"),kYo=l(),uv=a("li"),ige=a("strong"),RYo=o("bert"),SYo=o(" \u2014 "),Bq=a("a"),PYo=o("TFBertModel"),$Yo=o(" (BERT model)"),IYo=l(),bv=a("li"),dge=a("strong"),jYo=o("blenderbot"),NYo=o(" \u2014 "),xq=a("a"),DYo=o("TFBlenderbotModel"),qYo=o(" (Blenderbot model)"),GYo=l(),vv=a("li"),cge=a("strong"),OYo=o("blenderbot-small"),XYo=o(" \u2014 "),kq=a("a"),VYo=o("TFBlenderbotSmallModel"),zYo=o(" (BlenderbotSmall model)"),WYo=l(),Tv=a("li"),fge=a("strong"),QYo=o("camembert"),HYo=o(" \u2014 "),Rq=a("a"),UYo=o("TFCamembertModel"),JYo=o(" (CamemBERT model)"),YYo=l(),Fv=a("li"),mge=a("strong"),KYo=o("clip"),ZYo=o(" \u2014 "),Sq=a("a"),eKo=o("TFCLIPModel"),oKo=o(" (CLIP model)"),rKo=l(),Cv=a("li"),gge=a("strong"),tKo=o("convbert"),aKo=o(" \u2014 "),Pq=a("a"),nKo=o("TFConvBertModel"),sKo=o(" (ConvBERT model)"),lKo=l(),Mv=a("li"),hge=a("strong"),iKo=o("convnext"),dKo=o(" \u2014 "),$q=a("a"),cKo=o("TFConvNextModel"),fKo=o(" (ConvNext model)"),mKo=l(),Ev=a("li"),pge=a("strong"),gKo=o("ctrl"),hKo=o(" \u2014 "),Iq=a("a"),pKo=o("TFCTRLModel"),_Ko=o(" (CTRL model)"),uKo=l(),yv=a("li"),_ge=a("strong"),bKo=o("deberta"),vKo=o(" \u2014 "),jq=a("a"),TKo=o("TFDebertaModel"),FKo=o(" (DeBERTa model)"),CKo=l(),wv=a("li"),uge=a("strong"),MKo=o("deberta-v2"),EKo=o(" \u2014 "),Nq=a("a"),yKo=o("TFDebertaV2Model"),wKo=o(" (DeBERTa-v2 model)"),AKo=l(),Av=a("li"),bge=a("strong"),LKo=o("distilbert"),BKo=o(" \u2014 "),Dq=a("a"),xKo=o("TFDistilBertModel"),kKo=o(" (DistilBERT model)"),RKo=l(),Lv=a("li"),vge=a("strong"),SKo=o("dpr"),PKo=o(" \u2014 "),qq=a("a"),$Ko=o("TFDPRQuestionEncoder"),IKo=o(" (DPR model)"),jKo=l(),Bv=a("li"),Tge=a("strong"),NKo=o("electra"),DKo=o(" \u2014 "),Gq=a("a"),qKo=o("TFElectraModel"),GKo=o(" (ELECTRA model)"),OKo=l(),xv=a("li"),Fge=a("strong"),XKo=o("flaubert"),VKo=o(" \u2014 "),Oq=a("a"),zKo=o("TFFlaubertModel"),WKo=o(" (FlauBERT model)"),QKo=l(),Gs=a("li"),Cge=a("strong"),HKo=o("funnel"),UKo=o(" \u2014 "),Xq=a("a"),JKo=o("TFFunnelModel"),YKo=o(" or "),Vq=a("a"),KKo=o("TFFunnelBaseModel"),ZKo=o(" (Funnel Transformer model)"),eZo=l(),kv=a("li"),Mge=a("strong"),oZo=o("gpt2"),rZo=o(" \u2014 "),zq=a("a"),tZo=o("TFGPT2Model"),aZo=o(" (OpenAI GPT-2 model)"),nZo=l(),Rv=a("li"),Ege=a("strong"),sZo=o("gptj"),lZo=o(" \u2014 "),Wq=a("a"),iZo=o("TFGPTJModel"),dZo=o(" (GPT-J model)"),cZo=l(),Sv=a("li"),yge=a("strong"),fZo=o("hubert"),mZo=o(" \u2014 "),Qq=a("a"),gZo=o("TFHubertModel"),hZo=o(" (Hubert model)"),pZo=l(),Pv=a("li"),wge=a("strong"),_Zo=o("layoutlm"),uZo=o(" \u2014 "),Hq=a("a"),bZo=o("TFLayoutLMModel"),vZo=o(" (LayoutLM model)"),TZo=l(),$v=a("li"),Age=a("strong"),FZo=o("led"),CZo=o(" \u2014 "),Uq=a("a"),MZo=o("TFLEDModel"),EZo=o(" (LED model)"),yZo=l(),Iv=a("li"),Lge=a("strong"),wZo=o("longformer"),AZo=o(" \u2014 "),Jq=a("a"),LZo=o("TFLongformerModel"),BZo=o(" (Longformer model)"),xZo=l(),jv=a("li"),Bge=a("strong"),kZo=o("lxmert"),RZo=o(" \u2014 "),Yq=a("a"),SZo=o("TFLxmertModel"),PZo=o(" (LXMERT model)"),$Zo=l(),Nv=a("li"),xge=a("strong"),IZo=o("marian"),jZo=o(" \u2014 "),Kq=a("a"),NZo=o("TFMarianModel"),DZo=o(" (Marian model)"),qZo=l(),Dv=a("li"),kge=a("strong"),GZo=o("mbart"),OZo=o(" \u2014 "),Zq=a("a"),XZo=o("TFMBartModel"),VZo=o(" (mBART model)"),zZo=l(),qv=a("li"),Rge=a("strong"),WZo=o("mobilebert"),QZo=o(" \u2014 "),eG=a("a"),HZo=o("TFMobileBertModel"),UZo=o(" (MobileBERT model)"),JZo=l(),Gv=a("li"),Sge=a("strong"),YZo=o("mpnet"),KZo=o(" \u2014 "),oG=a("a"),ZZo=o("TFMPNetModel"),eer=o(" (MPNet model)"),oer=l(),Ov=a("li"),Pge=a("strong"),rer=o("mt5"),ter=o(" \u2014 "),rG=a("a"),aer=o("TFMT5Model"),ner=o(" (mT5 model)"),ser=l(),Xv=a("li"),$ge=a("strong"),ler=o("openai-gpt"),ier=o(" \u2014 "),tG=a("a"),der=o("TFOpenAIGPTModel"),cer=o(" (OpenAI GPT model)"),fer=l(),Vv=a("li"),Ige=a("strong"),mer=o("pegasus"),ger=o(" \u2014 "),aG=a("a"),her=o("TFPegasusModel"),per=o(" (Pegasus model)"),_er=l(),zv=a("li"),jge=a("strong"),uer=o("rembert"),ber=o(" \u2014 "),nG=a("a"),ver=o("TFRemBertModel"),Ter=o(" (RemBERT model)"),Fer=l(),Wv=a("li"),Nge=a("strong"),Cer=o("roberta"),Mer=o(" \u2014 "),sG=a("a"),Eer=o("TFRobertaModel"),yer=o(" (RoBERTa model)"),wer=l(),Qv=a("li"),Dge=a("strong"),Aer=o("roformer"),Ler=o(" \u2014 "),lG=a("a"),Ber=o("TFRoFormerModel"),xer=o(" (RoFormer model)"),ker=l(),Hv=a("li"),qge=a("strong"),Rer=o("speech_to_text"),Ser=o(" \u2014 "),iG=a("a"),Per=o("TFSpeech2TextModel"),$er=o(" (Speech2Text model)"),Ier=l(),Uv=a("li"),Gge=a("strong"),jer=o("t5"),Ner=o(" \u2014 "),dG=a("a"),Der=o("TFT5Model"),qer=o(" (T5 model)"),Ger=l(),Jv=a("li"),Oge=a("strong"),Oer=o("tapas"),Xer=o(" \u2014 "),cG=a("a"),Ver=o("TFTapasModel"),zer=o(" (TAPAS model)"),Wer=l(),Yv=a("li"),Xge=a("strong"),Qer=o("transfo-xl"),Her=o(" \u2014 "),fG=a("a"),Uer=o("TFTransfoXLModel"),Jer=o(" (Transformer-XL model)"),Yer=l(),Kv=a("li"),Vge=a("strong"),Ker=o("vit"),Zer=o(" \u2014 "),mG=a("a"),eor=o("TFViTModel"),oor=o(" (ViT model)"),ror=l(),Zv=a("li"),zge=a("strong"),tor=o("wav2vec2"),aor=o(" \u2014 "),gG=a("a"),nor=o("TFWav2Vec2Model"),sor=o(" (Wav2Vec2 model)"),lor=l(),e6=a("li"),Wge=a("strong"),ior=o("xlm"),dor=o(" \u2014 "),hG=a("a"),cor=o("TFXLMModel"),mor=o(" (XLM model)"),gor=l(),o6=a("li"),Qge=a("strong"),hor=o("xlm-roberta"),por=o(" \u2014 "),pG=a("a"),_or=o("TFXLMRobertaModel"),uor=o(" (XLM-RoBERTa model)"),bor=l(),r6=a("li"),Hge=a("strong"),vor=o("xlnet"),Tor=o(" \u2014 "),_G=a("a"),For=o("TFXLNetModel"),Cor=o(" (XLNet model)"),Mor=l(),Uge=a("p"),Eor=o("Examples:"),yor=l(),f(Jw.$$.fragment),MRe=l(),pc=a("h2"),t6=a("a"),Jge=a("span"),f(Yw.$$.fragment),wor=l(),Yge=a("span"),Aor=o("TFAutoModelForPreTraining"),ERe=l(),Tr=a("div"),f(Kw.$$.fragment),Lor=l(),_c=a("p"),Bor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Kge=a("code"),xor=o("from_pretrained()"),kor=o("class method or the "),Zge=a("code"),Ror=o("from_config()"),Sor=o(`class
method.`),Por=l(),Zw=a("p"),$or=o("This class cannot be instantiated directly using "),ehe=a("code"),Ior=o("__init__()"),jor=o(" (throws an error)."),Nor=l(),ht=a("div"),f(eA.$$.fragment),Dor=l(),ohe=a("p"),qor=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Gor=l(),uc=a("p"),Oor=o(`Note:
Loading a model from its configuration file does `),rhe=a("strong"),Xor=o("not"),Vor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),the=a("code"),zor=o("from_pretrained()"),Wor=o("to load the model weights."),Qor=l(),ahe=a("p"),Hor=o("Examples:"),Uor=l(),f(oA.$$.fragment),Jor=l(),po=a("div"),f(rA.$$.fragment),Yor=l(),nhe=a("p"),Kor=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Zor=l(),un=a("p"),err=o("The model class to instantiate is selected based on the "),she=a("code"),orr=o("model_type"),rrr=o(` property of the config object (either
passed as an argument or loaded from `),lhe=a("code"),trr=o("pretrained_model_name_or_path"),arr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ihe=a("code"),nrr=o("pretrained_model_name_or_path"),srr=o(":"),lrr=l(),H=a("ul"),a6=a("li"),dhe=a("strong"),irr=o("albert"),drr=o(" \u2014 "),uG=a("a"),crr=o("TFAlbertForPreTraining"),frr=o(" (ALBERT model)"),mrr=l(),n6=a("li"),che=a("strong"),grr=o("bart"),hrr=o(" \u2014 "),bG=a("a"),prr=o("TFBartForConditionalGeneration"),_rr=o(" (BART model)"),urr=l(),s6=a("li"),fhe=a("strong"),brr=o("bert"),vrr=o(" \u2014 "),vG=a("a"),Trr=o("TFBertForPreTraining"),Frr=o(" (BERT model)"),Crr=l(),l6=a("li"),mhe=a("strong"),Mrr=o("camembert"),Err=o(" \u2014 "),TG=a("a"),yrr=o("TFCamembertForMaskedLM"),wrr=o(" (CamemBERT model)"),Arr=l(),i6=a("li"),ghe=a("strong"),Lrr=o("ctrl"),Brr=o(" \u2014 "),FG=a("a"),xrr=o("TFCTRLLMHeadModel"),krr=o(" (CTRL model)"),Rrr=l(),d6=a("li"),hhe=a("strong"),Srr=o("distilbert"),Prr=o(" \u2014 "),CG=a("a"),$rr=o("TFDistilBertForMaskedLM"),Irr=o(" (DistilBERT model)"),jrr=l(),c6=a("li"),phe=a("strong"),Nrr=o("electra"),Drr=o(" \u2014 "),MG=a("a"),qrr=o("TFElectraForPreTraining"),Grr=o(" (ELECTRA model)"),Orr=l(),f6=a("li"),_he=a("strong"),Xrr=o("flaubert"),Vrr=o(" \u2014 "),EG=a("a"),zrr=o("TFFlaubertWithLMHeadModel"),Wrr=o(" (FlauBERT model)"),Qrr=l(),m6=a("li"),uhe=a("strong"),Hrr=o("funnel"),Urr=o(" \u2014 "),yG=a("a"),Jrr=o("TFFunnelForPreTraining"),Yrr=o(" (Funnel Transformer model)"),Krr=l(),g6=a("li"),bhe=a("strong"),Zrr=o("gpt2"),etr=o(" \u2014 "),wG=a("a"),otr=o("TFGPT2LMHeadModel"),rtr=o(" (OpenAI GPT-2 model)"),ttr=l(),h6=a("li"),vhe=a("strong"),atr=o("layoutlm"),ntr=o(" \u2014 "),AG=a("a"),str=o("TFLayoutLMForMaskedLM"),ltr=o(" (LayoutLM model)"),itr=l(),p6=a("li"),The=a("strong"),dtr=o("lxmert"),ctr=o(" \u2014 "),LG=a("a"),ftr=o("TFLxmertForPreTraining"),mtr=o(" (LXMERT model)"),gtr=l(),_6=a("li"),Fhe=a("strong"),htr=o("mobilebert"),ptr=o(" \u2014 "),BG=a("a"),_tr=o("TFMobileBertForPreTraining"),utr=o(" (MobileBERT model)"),btr=l(),u6=a("li"),Che=a("strong"),vtr=o("mpnet"),Ttr=o(" \u2014 "),xG=a("a"),Ftr=o("TFMPNetForMaskedLM"),Ctr=o(" (MPNet model)"),Mtr=l(),b6=a("li"),Mhe=a("strong"),Etr=o("openai-gpt"),ytr=o(" \u2014 "),kG=a("a"),wtr=o("TFOpenAIGPTLMHeadModel"),Atr=o(" (OpenAI GPT model)"),Ltr=l(),v6=a("li"),Ehe=a("strong"),Btr=o("roberta"),xtr=o(" \u2014 "),RG=a("a"),ktr=o("TFRobertaForMaskedLM"),Rtr=o(" (RoBERTa model)"),Str=l(),T6=a("li"),yhe=a("strong"),Ptr=o("t5"),$tr=o(" \u2014 "),SG=a("a"),Itr=o("TFT5ForConditionalGeneration"),jtr=o(" (T5 model)"),Ntr=l(),F6=a("li"),whe=a("strong"),Dtr=o("tapas"),qtr=o(" \u2014 "),PG=a("a"),Gtr=o("TFTapasForMaskedLM"),Otr=o(" (TAPAS model)"),Xtr=l(),C6=a("li"),Ahe=a("strong"),Vtr=o("transfo-xl"),ztr=o(" \u2014 "),$G=a("a"),Wtr=o("TFTransfoXLLMHeadModel"),Qtr=o(" (Transformer-XL model)"),Htr=l(),M6=a("li"),Lhe=a("strong"),Utr=o("xlm"),Jtr=o(" \u2014 "),IG=a("a"),Ytr=o("TFXLMWithLMHeadModel"),Ktr=o(" (XLM model)"),Ztr=l(),E6=a("li"),Bhe=a("strong"),ear=o("xlm-roberta"),oar=o(" \u2014 "),jG=a("a"),rar=o("TFXLMRobertaForMaskedLM"),tar=o(" (XLM-RoBERTa model)"),aar=l(),y6=a("li"),xhe=a("strong"),nar=o("xlnet"),sar=o(" \u2014 "),NG=a("a"),lar=o("TFXLNetLMHeadModel"),iar=o(" (XLNet model)"),dar=l(),khe=a("p"),car=o("Examples:"),far=l(),f(tA.$$.fragment),yRe=l(),bc=a("h2"),w6=a("a"),Rhe=a("span"),f(aA.$$.fragment),mar=l(),She=a("span"),gar=o("TFAutoModelForCausalLM"),wRe=l(),Fr=a("div"),f(nA.$$.fragment),har=l(),vc=a("p"),par=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Phe=a("code"),_ar=o("from_pretrained()"),uar=o("class method or the "),$he=a("code"),bar=o("from_config()"),Tar=o(`class
method.`),Far=l(),sA=a("p"),Car=o("This class cannot be instantiated directly using "),Ihe=a("code"),Mar=o("__init__()"),Ear=o(" (throws an error)."),yar=l(),pt=a("div"),f(lA.$$.fragment),war=l(),jhe=a("p"),Aar=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Lar=l(),Tc=a("p"),Bar=o(`Note:
Loading a model from its configuration file does `),Nhe=a("strong"),xar=o("not"),kar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dhe=a("code"),Rar=o("from_pretrained()"),Sar=o("to load the model weights."),Par=l(),qhe=a("p"),$ar=o("Examples:"),Iar=l(),f(iA.$$.fragment),jar=l(),_o=a("div"),f(dA.$$.fragment),Nar=l(),Ghe=a("p"),Dar=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qar=l(),bn=a("p"),Gar=o("The model class to instantiate is selected based on the "),Ohe=a("code"),Oar=o("model_type"),Xar=o(` property of the config object (either
passed as an argument or loaded from `),Xhe=a("code"),Var=o("pretrained_model_name_or_path"),zar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vhe=a("code"),War=o("pretrained_model_name_or_path"),Qar=o(":"),Har=l(),ce=a("ul"),A6=a("li"),zhe=a("strong"),Uar=o("bert"),Jar=o(" \u2014 "),DG=a("a"),Yar=o("TFBertLMHeadModel"),Kar=o(" (BERT model)"),Zar=l(),L6=a("li"),Whe=a("strong"),enr=o("camembert"),onr=o(" \u2014 "),qG=a("a"),rnr=o("TFCamembertForCausalLM"),tnr=o(" (CamemBERT model)"),anr=l(),B6=a("li"),Qhe=a("strong"),nnr=o("ctrl"),snr=o(" \u2014 "),GG=a("a"),lnr=o("TFCTRLLMHeadModel"),inr=o(" (CTRL model)"),dnr=l(),x6=a("li"),Hhe=a("strong"),cnr=o("gpt2"),fnr=o(" \u2014 "),OG=a("a"),mnr=o("TFGPT2LMHeadModel"),gnr=o(" (OpenAI GPT-2 model)"),hnr=l(),k6=a("li"),Uhe=a("strong"),pnr=o("gptj"),_nr=o(" \u2014 "),XG=a("a"),unr=o("TFGPTJForCausalLM"),bnr=o(" (GPT-J model)"),vnr=l(),R6=a("li"),Jhe=a("strong"),Tnr=o("openai-gpt"),Fnr=o(" \u2014 "),VG=a("a"),Cnr=o("TFOpenAIGPTLMHeadModel"),Mnr=o(" (OpenAI GPT model)"),Enr=l(),S6=a("li"),Yhe=a("strong"),ynr=o("rembert"),wnr=o(" \u2014 "),zG=a("a"),Anr=o("TFRemBertForCausalLM"),Lnr=o(" (RemBERT model)"),Bnr=l(),P6=a("li"),Khe=a("strong"),xnr=o("roberta"),knr=o(" \u2014 "),WG=a("a"),Rnr=o("TFRobertaForCausalLM"),Snr=o(" (RoBERTa model)"),Pnr=l(),$6=a("li"),Zhe=a("strong"),$nr=o("roformer"),Inr=o(" \u2014 "),QG=a("a"),jnr=o("TFRoFormerForCausalLM"),Nnr=o(" (RoFormer model)"),Dnr=l(),I6=a("li"),epe=a("strong"),qnr=o("transfo-xl"),Gnr=o(" \u2014 "),HG=a("a"),Onr=o("TFTransfoXLLMHeadModel"),Xnr=o(" (Transformer-XL model)"),Vnr=l(),j6=a("li"),ope=a("strong"),znr=o("xlm"),Wnr=o(" \u2014 "),UG=a("a"),Qnr=o("TFXLMWithLMHeadModel"),Hnr=o(" (XLM model)"),Unr=l(),N6=a("li"),rpe=a("strong"),Jnr=o("xlnet"),Ynr=o(" \u2014 "),JG=a("a"),Knr=o("TFXLNetLMHeadModel"),Znr=o(" (XLNet model)"),esr=l(),tpe=a("p"),osr=o("Examples:"),rsr=l(),f(cA.$$.fragment),ARe=l(),Fc=a("h2"),D6=a("a"),ape=a("span"),f(fA.$$.fragment),tsr=l(),npe=a("span"),asr=o("TFAutoModelForImageClassification"),LRe=l(),Cr=a("div"),f(mA.$$.fragment),nsr=l(),Cc=a("p"),ssr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),spe=a("code"),lsr=o("from_pretrained()"),isr=o("class method or the "),lpe=a("code"),dsr=o("from_config()"),csr=o(`class
method.`),fsr=l(),gA=a("p"),msr=o("This class cannot be instantiated directly using "),ipe=a("code"),gsr=o("__init__()"),hsr=o(" (throws an error)."),psr=l(),_t=a("div"),f(hA.$$.fragment),_sr=l(),dpe=a("p"),usr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bsr=l(),Mc=a("p"),vsr=o(`Note:
Loading a model from its configuration file does `),cpe=a("strong"),Tsr=o("not"),Fsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fpe=a("code"),Csr=o("from_pretrained()"),Msr=o("to load the model weights."),Esr=l(),mpe=a("p"),ysr=o("Examples:"),wsr=l(),f(pA.$$.fragment),Asr=l(),uo=a("div"),f(_A.$$.fragment),Lsr=l(),gpe=a("p"),Bsr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),xsr=l(),vn=a("p"),ksr=o("The model class to instantiate is selected based on the "),hpe=a("code"),Rsr=o("model_type"),Ssr=o(` property of the config object (either
passed as an argument or loaded from `),ppe=a("code"),Psr=o("pretrained_model_name_or_path"),$sr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_pe=a("code"),Isr=o("pretrained_model_name_or_path"),jsr=o(":"),Nsr=l(),uA=a("ul"),q6=a("li"),upe=a("strong"),Dsr=o("convnext"),qsr=o(" \u2014 "),YG=a("a"),Gsr=o("TFConvNextForImageClassification"),Osr=o(" (ConvNext model)"),Xsr=l(),G6=a("li"),bpe=a("strong"),Vsr=o("vit"),zsr=o(" \u2014 "),KG=a("a"),Wsr=o("TFViTForImageClassification"),Qsr=o(" (ViT model)"),Hsr=l(),vpe=a("p"),Usr=o("Examples:"),Jsr=l(),f(bA.$$.fragment),BRe=l(),Ec=a("h2"),O6=a("a"),Tpe=a("span"),f(vA.$$.fragment),Ysr=l(),Fpe=a("span"),Ksr=o("TFAutoModelForMaskedLM"),xRe=l(),Mr=a("div"),f(TA.$$.fragment),Zsr=l(),yc=a("p"),elr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Cpe=a("code"),olr=o("from_pretrained()"),rlr=o("class method or the "),Mpe=a("code"),tlr=o("from_config()"),alr=o(`class
method.`),nlr=l(),FA=a("p"),slr=o("This class cannot be instantiated directly using "),Epe=a("code"),llr=o("__init__()"),ilr=o(" (throws an error)."),dlr=l(),ut=a("div"),f(CA.$$.fragment),clr=l(),ype=a("p"),flr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),mlr=l(),wc=a("p"),glr=o(`Note:
Loading a model from its configuration file does `),wpe=a("strong"),hlr=o("not"),plr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ape=a("code"),_lr=o("from_pretrained()"),ulr=o("to load the model weights."),blr=l(),Lpe=a("p"),vlr=o("Examples:"),Tlr=l(),f(MA.$$.fragment),Flr=l(),bo=a("div"),f(EA.$$.fragment),Clr=l(),Bpe=a("p"),Mlr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Elr=l(),Tn=a("p"),ylr=o("The model class to instantiate is selected based on the "),xpe=a("code"),wlr=o("model_type"),Alr=o(` property of the config object (either
passed as an argument or loaded from `),kpe=a("code"),Llr=o("pretrained_model_name_or_path"),Blr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rpe=a("code"),xlr=o("pretrained_model_name_or_path"),klr=o(":"),Rlr=l(),J=a("ul"),X6=a("li"),Spe=a("strong"),Slr=o("albert"),Plr=o(" \u2014 "),ZG=a("a"),$lr=o("TFAlbertForMaskedLM"),Ilr=o(" (ALBERT model)"),jlr=l(),V6=a("li"),Ppe=a("strong"),Nlr=o("bert"),Dlr=o(" \u2014 "),eO=a("a"),qlr=o("TFBertForMaskedLM"),Glr=o(" (BERT model)"),Olr=l(),z6=a("li"),$pe=a("strong"),Xlr=o("camembert"),Vlr=o(" \u2014 "),oO=a("a"),zlr=o("TFCamembertForMaskedLM"),Wlr=o(" (CamemBERT model)"),Qlr=l(),W6=a("li"),Ipe=a("strong"),Hlr=o("convbert"),Ulr=o(" \u2014 "),rO=a("a"),Jlr=o("TFConvBertForMaskedLM"),Ylr=o(" (ConvBERT model)"),Klr=l(),Q6=a("li"),jpe=a("strong"),Zlr=o("deberta"),eir=o(" \u2014 "),tO=a("a"),oir=o("TFDebertaForMaskedLM"),rir=o(" (DeBERTa model)"),tir=l(),H6=a("li"),Npe=a("strong"),air=o("deberta-v2"),nir=o(" \u2014 "),aO=a("a"),sir=o("TFDebertaV2ForMaskedLM"),lir=o(" (DeBERTa-v2 model)"),iir=l(),U6=a("li"),Dpe=a("strong"),dir=o("distilbert"),cir=o(" \u2014 "),nO=a("a"),fir=o("TFDistilBertForMaskedLM"),mir=o(" (DistilBERT model)"),gir=l(),J6=a("li"),qpe=a("strong"),hir=o("electra"),pir=o(" \u2014 "),sO=a("a"),_ir=o("TFElectraForMaskedLM"),uir=o(" (ELECTRA model)"),bir=l(),Y6=a("li"),Gpe=a("strong"),vir=o("flaubert"),Tir=o(" \u2014 "),lO=a("a"),Fir=o("TFFlaubertWithLMHeadModel"),Cir=o(" (FlauBERT model)"),Mir=l(),K6=a("li"),Ope=a("strong"),Eir=o("funnel"),yir=o(" \u2014 "),iO=a("a"),wir=o("TFFunnelForMaskedLM"),Air=o(" (Funnel Transformer model)"),Lir=l(),Z6=a("li"),Xpe=a("strong"),Bir=o("layoutlm"),xir=o(" \u2014 "),dO=a("a"),kir=o("TFLayoutLMForMaskedLM"),Rir=o(" (LayoutLM model)"),Sir=l(),e0=a("li"),Vpe=a("strong"),Pir=o("longformer"),$ir=o(" \u2014 "),cO=a("a"),Iir=o("TFLongformerForMaskedLM"),jir=o(" (Longformer model)"),Nir=l(),o0=a("li"),zpe=a("strong"),Dir=o("mobilebert"),qir=o(" \u2014 "),fO=a("a"),Gir=o("TFMobileBertForMaskedLM"),Oir=o(" (MobileBERT model)"),Xir=l(),r0=a("li"),Wpe=a("strong"),Vir=o("mpnet"),zir=o(" \u2014 "),mO=a("a"),Wir=o("TFMPNetForMaskedLM"),Qir=o(" (MPNet model)"),Hir=l(),t0=a("li"),Qpe=a("strong"),Uir=o("rembert"),Jir=o(" \u2014 "),gO=a("a"),Yir=o("TFRemBertForMaskedLM"),Kir=o(" (RemBERT model)"),Zir=l(),a0=a("li"),Hpe=a("strong"),edr=o("roberta"),odr=o(" \u2014 "),hO=a("a"),rdr=o("TFRobertaForMaskedLM"),tdr=o(" (RoBERTa model)"),adr=l(),n0=a("li"),Upe=a("strong"),ndr=o("roformer"),sdr=o(" \u2014 "),pO=a("a"),ldr=o("TFRoFormerForMaskedLM"),idr=o(" (RoFormer model)"),ddr=l(),s0=a("li"),Jpe=a("strong"),cdr=o("tapas"),fdr=o(" \u2014 "),_O=a("a"),mdr=o("TFTapasForMaskedLM"),gdr=o(" (TAPAS model)"),hdr=l(),l0=a("li"),Ype=a("strong"),pdr=o("xlm"),_dr=o(" \u2014 "),uO=a("a"),udr=o("TFXLMWithLMHeadModel"),bdr=o(" (XLM model)"),vdr=l(),i0=a("li"),Kpe=a("strong"),Tdr=o("xlm-roberta"),Fdr=o(" \u2014 "),bO=a("a"),Cdr=o("TFXLMRobertaForMaskedLM"),Mdr=o(" (XLM-RoBERTa model)"),Edr=l(),Zpe=a("p"),ydr=o("Examples:"),wdr=l(),f(yA.$$.fragment),kRe=l(),Ac=a("h2"),d0=a("a"),e_e=a("span"),f(wA.$$.fragment),Adr=l(),o_e=a("span"),Ldr=o("TFAutoModelForSeq2SeqLM"),RRe=l(),Er=a("div"),f(AA.$$.fragment),Bdr=l(),Lc=a("p"),xdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),r_e=a("code"),kdr=o("from_pretrained()"),Rdr=o("class method or the "),t_e=a("code"),Sdr=o("from_config()"),Pdr=o(`class
method.`),$dr=l(),LA=a("p"),Idr=o("This class cannot be instantiated directly using "),a_e=a("code"),jdr=o("__init__()"),Ndr=o(" (throws an error)."),Ddr=l(),bt=a("div"),f(BA.$$.fragment),qdr=l(),n_e=a("p"),Gdr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Odr=l(),Bc=a("p"),Xdr=o(`Note:
Loading a model from its configuration file does `),s_e=a("strong"),Vdr=o("not"),zdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),l_e=a("code"),Wdr=o("from_pretrained()"),Qdr=o("to load the model weights."),Hdr=l(),i_e=a("p"),Udr=o("Examples:"),Jdr=l(),f(xA.$$.fragment),Ydr=l(),vo=a("div"),f(kA.$$.fragment),Kdr=l(),d_e=a("p"),Zdr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ecr=l(),Fn=a("p"),ocr=o("The model class to instantiate is selected based on the "),c_e=a("code"),rcr=o("model_type"),tcr=o(` property of the config object (either
passed as an argument or loaded from `),f_e=a("code"),acr=o("pretrained_model_name_or_path"),ncr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m_e=a("code"),scr=o("pretrained_model_name_or_path"),lcr=o(":"),icr=l(),ue=a("ul"),c0=a("li"),g_e=a("strong"),dcr=o("bart"),ccr=o(" \u2014 "),vO=a("a"),fcr=o("TFBartForConditionalGeneration"),mcr=o(" (BART model)"),gcr=l(),f0=a("li"),h_e=a("strong"),hcr=o("blenderbot"),pcr=o(" \u2014 "),TO=a("a"),_cr=o("TFBlenderbotForConditionalGeneration"),ucr=o(" (Blenderbot model)"),bcr=l(),m0=a("li"),p_e=a("strong"),vcr=o("blenderbot-small"),Tcr=o(" \u2014 "),FO=a("a"),Fcr=o("TFBlenderbotSmallForConditionalGeneration"),Ccr=o(" (BlenderbotSmall model)"),Mcr=l(),g0=a("li"),__e=a("strong"),Ecr=o("encoder-decoder"),ycr=o(" \u2014 "),CO=a("a"),wcr=o("TFEncoderDecoderModel"),Acr=o(" (Encoder decoder model)"),Lcr=l(),h0=a("li"),u_e=a("strong"),Bcr=o("led"),xcr=o(" \u2014 "),MO=a("a"),kcr=o("TFLEDForConditionalGeneration"),Rcr=o(" (LED model)"),Scr=l(),p0=a("li"),b_e=a("strong"),Pcr=o("marian"),$cr=o(" \u2014 "),EO=a("a"),Icr=o("TFMarianMTModel"),jcr=o(" (Marian model)"),Ncr=l(),_0=a("li"),v_e=a("strong"),Dcr=o("mbart"),qcr=o(" \u2014 "),yO=a("a"),Gcr=o("TFMBartForConditionalGeneration"),Ocr=o(" (mBART model)"),Xcr=l(),u0=a("li"),T_e=a("strong"),Vcr=o("mt5"),zcr=o(" \u2014 "),wO=a("a"),Wcr=o("TFMT5ForConditionalGeneration"),Qcr=o(" (mT5 model)"),Hcr=l(),b0=a("li"),F_e=a("strong"),Ucr=o("pegasus"),Jcr=o(" \u2014 "),AO=a("a"),Ycr=o("TFPegasusForConditionalGeneration"),Kcr=o(" (Pegasus model)"),Zcr=l(),v0=a("li"),C_e=a("strong"),efr=o("t5"),ofr=o(" \u2014 "),LO=a("a"),rfr=o("TFT5ForConditionalGeneration"),tfr=o(" (T5 model)"),afr=l(),M_e=a("p"),nfr=o("Examples:"),sfr=l(),f(RA.$$.fragment),SRe=l(),xc=a("h2"),T0=a("a"),E_e=a("span"),f(SA.$$.fragment),lfr=l(),y_e=a("span"),ifr=o("TFAutoModelForSequenceClassification"),PRe=l(),yr=a("div"),f(PA.$$.fragment),dfr=l(),kc=a("p"),cfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),w_e=a("code"),ffr=o("from_pretrained()"),mfr=o("class method or the "),A_e=a("code"),gfr=o("from_config()"),hfr=o(`class
method.`),pfr=l(),$A=a("p"),_fr=o("This class cannot be instantiated directly using "),L_e=a("code"),ufr=o("__init__()"),bfr=o(" (throws an error)."),vfr=l(),vt=a("div"),f(IA.$$.fragment),Tfr=l(),B_e=a("p"),Ffr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Cfr=l(),Rc=a("p"),Mfr=o(`Note:
Loading a model from its configuration file does `),x_e=a("strong"),Efr=o("not"),yfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),k_e=a("code"),wfr=o("from_pretrained()"),Afr=o("to load the model weights."),Lfr=l(),R_e=a("p"),Bfr=o("Examples:"),xfr=l(),f(jA.$$.fragment),kfr=l(),To=a("div"),f(NA.$$.fragment),Rfr=l(),S_e=a("p"),Sfr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Pfr=l(),Cn=a("p"),$fr=o("The model class to instantiate is selected based on the "),P_e=a("code"),Ifr=o("model_type"),jfr=o(` property of the config object (either
passed as an argument or loaded from `),$_e=a("code"),Nfr=o("pretrained_model_name_or_path"),Dfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=a("code"),qfr=o("pretrained_model_name_or_path"),Gfr=o(":"),Ofr=l(),X=a("ul"),F0=a("li"),j_e=a("strong"),Xfr=o("albert"),Vfr=o(" \u2014 "),BO=a("a"),zfr=o("TFAlbertForSequenceClassification"),Wfr=o(" (ALBERT model)"),Qfr=l(),C0=a("li"),N_e=a("strong"),Hfr=o("bert"),Ufr=o(" \u2014 "),xO=a("a"),Jfr=o("TFBertForSequenceClassification"),Yfr=o(" (BERT model)"),Kfr=l(),M0=a("li"),D_e=a("strong"),Zfr=o("camembert"),emr=o(" \u2014 "),kO=a("a"),omr=o("TFCamembertForSequenceClassification"),rmr=o(" (CamemBERT model)"),tmr=l(),E0=a("li"),q_e=a("strong"),amr=o("convbert"),nmr=o(" \u2014 "),RO=a("a"),smr=o("TFConvBertForSequenceClassification"),lmr=o(" (ConvBERT model)"),imr=l(),y0=a("li"),G_e=a("strong"),dmr=o("ctrl"),cmr=o(" \u2014 "),SO=a("a"),fmr=o("TFCTRLForSequenceClassification"),mmr=o(" (CTRL model)"),gmr=l(),w0=a("li"),O_e=a("strong"),hmr=o("deberta"),pmr=o(" \u2014 "),PO=a("a"),_mr=o("TFDebertaForSequenceClassification"),umr=o(" (DeBERTa model)"),bmr=l(),A0=a("li"),X_e=a("strong"),vmr=o("deberta-v2"),Tmr=o(" \u2014 "),$O=a("a"),Fmr=o("TFDebertaV2ForSequenceClassification"),Cmr=o(" (DeBERTa-v2 model)"),Mmr=l(),L0=a("li"),V_e=a("strong"),Emr=o("distilbert"),ymr=o(" \u2014 "),IO=a("a"),wmr=o("TFDistilBertForSequenceClassification"),Amr=o(" (DistilBERT model)"),Lmr=l(),B0=a("li"),z_e=a("strong"),Bmr=o("electra"),xmr=o(" \u2014 "),jO=a("a"),kmr=o("TFElectraForSequenceClassification"),Rmr=o(" (ELECTRA model)"),Smr=l(),x0=a("li"),W_e=a("strong"),Pmr=o("flaubert"),$mr=o(" \u2014 "),NO=a("a"),Imr=o("TFFlaubertForSequenceClassification"),jmr=o(" (FlauBERT model)"),Nmr=l(),k0=a("li"),Q_e=a("strong"),Dmr=o("funnel"),qmr=o(" \u2014 "),DO=a("a"),Gmr=o("TFFunnelForSequenceClassification"),Omr=o(" (Funnel Transformer model)"),Xmr=l(),R0=a("li"),H_e=a("strong"),Vmr=o("gpt2"),zmr=o(" \u2014 "),qO=a("a"),Wmr=o("TFGPT2ForSequenceClassification"),Qmr=o(" (OpenAI GPT-2 model)"),Hmr=l(),S0=a("li"),U_e=a("strong"),Umr=o("gptj"),Jmr=o(" \u2014 "),GO=a("a"),Ymr=o("TFGPTJForSequenceClassification"),Kmr=o(" (GPT-J model)"),Zmr=l(),P0=a("li"),J_e=a("strong"),egr=o("layoutlm"),ogr=o(" \u2014 "),OO=a("a"),rgr=o("TFLayoutLMForSequenceClassification"),tgr=o(" (LayoutLM model)"),agr=l(),$0=a("li"),Y_e=a("strong"),ngr=o("longformer"),sgr=o(" \u2014 "),XO=a("a"),lgr=o("TFLongformerForSequenceClassification"),igr=o(" (Longformer model)"),dgr=l(),I0=a("li"),K_e=a("strong"),cgr=o("mobilebert"),fgr=o(" \u2014 "),VO=a("a"),mgr=o("TFMobileBertForSequenceClassification"),ggr=o(" (MobileBERT model)"),hgr=l(),j0=a("li"),Z_e=a("strong"),pgr=o("mpnet"),_gr=o(" \u2014 "),zO=a("a"),ugr=o("TFMPNetForSequenceClassification"),bgr=o(" (MPNet model)"),vgr=l(),N0=a("li"),eue=a("strong"),Tgr=o("openai-gpt"),Fgr=o(" \u2014 "),WO=a("a"),Cgr=o("TFOpenAIGPTForSequenceClassification"),Mgr=o(" (OpenAI GPT model)"),Egr=l(),D0=a("li"),oue=a("strong"),ygr=o("rembert"),wgr=o(" \u2014 "),QO=a("a"),Agr=o("TFRemBertForSequenceClassification"),Lgr=o(" (RemBERT model)"),Bgr=l(),q0=a("li"),rue=a("strong"),xgr=o("roberta"),kgr=o(" \u2014 "),HO=a("a"),Rgr=o("TFRobertaForSequenceClassification"),Sgr=o(" (RoBERTa model)"),Pgr=l(),G0=a("li"),tue=a("strong"),$gr=o("roformer"),Igr=o(" \u2014 "),UO=a("a"),jgr=o("TFRoFormerForSequenceClassification"),Ngr=o(" (RoFormer model)"),Dgr=l(),O0=a("li"),aue=a("strong"),qgr=o("tapas"),Ggr=o(" \u2014 "),JO=a("a"),Ogr=o("TFTapasForSequenceClassification"),Xgr=o(" (TAPAS model)"),Vgr=l(),X0=a("li"),nue=a("strong"),zgr=o("transfo-xl"),Wgr=o(" \u2014 "),YO=a("a"),Qgr=o("TFTransfoXLForSequenceClassification"),Hgr=o(" (Transformer-XL model)"),Ugr=l(),V0=a("li"),sue=a("strong"),Jgr=o("xlm"),Ygr=o(" \u2014 "),KO=a("a"),Kgr=o("TFXLMForSequenceClassification"),Zgr=o(" (XLM model)"),ehr=l(),z0=a("li"),lue=a("strong"),ohr=o("xlm-roberta"),rhr=o(" \u2014 "),ZO=a("a"),thr=o("TFXLMRobertaForSequenceClassification"),ahr=o(" (XLM-RoBERTa model)"),nhr=l(),W0=a("li"),iue=a("strong"),shr=o("xlnet"),lhr=o(" \u2014 "),eX=a("a"),ihr=o("TFXLNetForSequenceClassification"),dhr=o(" (XLNet model)"),chr=l(),due=a("p"),fhr=o("Examples:"),mhr=l(),f(DA.$$.fragment),$Re=l(),Sc=a("h2"),Q0=a("a"),cue=a("span"),f(qA.$$.fragment),ghr=l(),fue=a("span"),hhr=o("TFAutoModelForMultipleChoice"),IRe=l(),wr=a("div"),f(GA.$$.fragment),phr=l(),Pc=a("p"),_hr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mue=a("code"),uhr=o("from_pretrained()"),bhr=o("class method or the "),gue=a("code"),vhr=o("from_config()"),Thr=o(`class
method.`),Fhr=l(),OA=a("p"),Chr=o("This class cannot be instantiated directly using "),hue=a("code"),Mhr=o("__init__()"),Ehr=o(" (throws an error)."),yhr=l(),Tt=a("div"),f(XA.$$.fragment),whr=l(),pue=a("p"),Ahr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Lhr=l(),$c=a("p"),Bhr=o(`Note:
Loading a model from its configuration file does `),_ue=a("strong"),xhr=o("not"),khr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uue=a("code"),Rhr=o("from_pretrained()"),Shr=o("to load the model weights."),Phr=l(),bue=a("p"),$hr=o("Examples:"),Ihr=l(),f(VA.$$.fragment),jhr=l(),Fo=a("div"),f(zA.$$.fragment),Nhr=l(),vue=a("p"),Dhr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),qhr=l(),Mn=a("p"),Ghr=o("The model class to instantiate is selected based on the "),Tue=a("code"),Ohr=o("model_type"),Xhr=o(` property of the config object (either
passed as an argument or loaded from `),Fue=a("code"),Vhr=o("pretrained_model_name_or_path"),zhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=a("code"),Whr=o("pretrained_model_name_or_path"),Qhr=o(":"),Hhr=l(),ae=a("ul"),H0=a("li"),Mue=a("strong"),Uhr=o("albert"),Jhr=o(" \u2014 "),oX=a("a"),Yhr=o("TFAlbertForMultipleChoice"),Khr=o(" (ALBERT model)"),Zhr=l(),U0=a("li"),Eue=a("strong"),epr=o("bert"),opr=o(" \u2014 "),rX=a("a"),rpr=o("TFBertForMultipleChoice"),tpr=o(" (BERT model)"),apr=l(),J0=a("li"),yue=a("strong"),npr=o("camembert"),spr=o(" \u2014 "),tX=a("a"),lpr=o("TFCamembertForMultipleChoice"),ipr=o(" (CamemBERT model)"),dpr=l(),Y0=a("li"),wue=a("strong"),cpr=o("convbert"),fpr=o(" \u2014 "),aX=a("a"),mpr=o("TFConvBertForMultipleChoice"),gpr=o(" (ConvBERT model)"),hpr=l(),K0=a("li"),Aue=a("strong"),ppr=o("distilbert"),_pr=o(" \u2014 "),nX=a("a"),upr=o("TFDistilBertForMultipleChoice"),bpr=o(" (DistilBERT model)"),vpr=l(),Z0=a("li"),Lue=a("strong"),Tpr=o("electra"),Fpr=o(" \u2014 "),sX=a("a"),Cpr=o("TFElectraForMultipleChoice"),Mpr=o(" (ELECTRA model)"),Epr=l(),eT=a("li"),Bue=a("strong"),ypr=o("flaubert"),wpr=o(" \u2014 "),lX=a("a"),Apr=o("TFFlaubertForMultipleChoice"),Lpr=o(" (FlauBERT model)"),Bpr=l(),oT=a("li"),xue=a("strong"),xpr=o("funnel"),kpr=o(" \u2014 "),iX=a("a"),Rpr=o("TFFunnelForMultipleChoice"),Spr=o(" (Funnel Transformer model)"),Ppr=l(),rT=a("li"),kue=a("strong"),$pr=o("longformer"),Ipr=o(" \u2014 "),dX=a("a"),jpr=o("TFLongformerForMultipleChoice"),Npr=o(" (Longformer model)"),Dpr=l(),tT=a("li"),Rue=a("strong"),qpr=o("mobilebert"),Gpr=o(" \u2014 "),cX=a("a"),Opr=o("TFMobileBertForMultipleChoice"),Xpr=o(" (MobileBERT model)"),Vpr=l(),aT=a("li"),Sue=a("strong"),zpr=o("mpnet"),Wpr=o(" \u2014 "),fX=a("a"),Qpr=o("TFMPNetForMultipleChoice"),Hpr=o(" (MPNet model)"),Upr=l(),nT=a("li"),Pue=a("strong"),Jpr=o("rembert"),Ypr=o(" \u2014 "),mX=a("a"),Kpr=o("TFRemBertForMultipleChoice"),Zpr=o(" (RemBERT model)"),e_r=l(),sT=a("li"),$ue=a("strong"),o_r=o("roberta"),r_r=o(" \u2014 "),gX=a("a"),t_r=o("TFRobertaForMultipleChoice"),a_r=o(" (RoBERTa model)"),n_r=l(),lT=a("li"),Iue=a("strong"),s_r=o("roformer"),l_r=o(" \u2014 "),hX=a("a"),i_r=o("TFRoFormerForMultipleChoice"),d_r=o(" (RoFormer model)"),c_r=l(),iT=a("li"),jue=a("strong"),f_r=o("xlm"),m_r=o(" \u2014 "),pX=a("a"),g_r=o("TFXLMForMultipleChoice"),h_r=o(" (XLM model)"),p_r=l(),dT=a("li"),Nue=a("strong"),__r=o("xlm-roberta"),u_r=o(" \u2014 "),_X=a("a"),b_r=o("TFXLMRobertaForMultipleChoice"),v_r=o(" (XLM-RoBERTa model)"),T_r=l(),cT=a("li"),Due=a("strong"),F_r=o("xlnet"),C_r=o(" \u2014 "),uX=a("a"),M_r=o("TFXLNetForMultipleChoice"),E_r=o(" (XLNet model)"),y_r=l(),que=a("p"),w_r=o("Examples:"),A_r=l(),f(WA.$$.fragment),jRe=l(),Ic=a("h2"),fT=a("a"),Gue=a("span"),f(QA.$$.fragment),L_r=l(),Oue=a("span"),B_r=o("TFAutoModelForTableQuestionAnswering"),NRe=l(),Ar=a("div"),f(HA.$$.fragment),x_r=l(),jc=a("p"),k_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Xue=a("code"),R_r=o("from_pretrained()"),S_r=o("class method or the "),Vue=a("code"),P_r=o("from_config()"),$_r=o(`class
method.`),I_r=l(),UA=a("p"),j_r=o("This class cannot be instantiated directly using "),zue=a("code"),N_r=o("__init__()"),D_r=o(" (throws an error)."),q_r=l(),Ft=a("div"),f(JA.$$.fragment),G_r=l(),Wue=a("p"),O_r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),X_r=l(),Nc=a("p"),V_r=o(`Note:
Loading a model from its configuration file does `),Que=a("strong"),z_r=o("not"),W_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hue=a("code"),Q_r=o("from_pretrained()"),H_r=o("to load the model weights."),U_r=l(),Uue=a("p"),J_r=o("Examples:"),Y_r=l(),f(YA.$$.fragment),K_r=l(),Co=a("div"),f(KA.$$.fragment),Z_r=l(),Jue=a("p"),eur=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),our=l(),En=a("p"),rur=o("The model class to instantiate is selected based on the "),Yue=a("code"),tur=o("model_type"),aur=o(` property of the config object (either
passed as an argument or loaded from `),Kue=a("code"),nur=o("pretrained_model_name_or_path"),sur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zue=a("code"),lur=o("pretrained_model_name_or_path"),iur=o(":"),dur=l(),e1e=a("ul"),mT=a("li"),o1e=a("strong"),cur=o("tapas"),fur=o(" \u2014 "),bX=a("a"),mur=o("TFTapasForQuestionAnswering"),gur=o(" (TAPAS model)"),hur=l(),r1e=a("p"),pur=o("Examples:"),_ur=l(),f(ZA.$$.fragment),DRe=l(),Dc=a("h2"),gT=a("a"),t1e=a("span"),f(eL.$$.fragment),uur=l(),a1e=a("span"),bur=o("TFAutoModelForTokenClassification"),qRe=l(),Lr=a("div"),f(oL.$$.fragment),vur=l(),qc=a("p"),Tur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),n1e=a("code"),Fur=o("from_pretrained()"),Cur=o("class method or the "),s1e=a("code"),Mur=o("from_config()"),Eur=o(`class
method.`),yur=l(),rL=a("p"),wur=o("This class cannot be instantiated directly using "),l1e=a("code"),Aur=o("__init__()"),Lur=o(" (throws an error)."),Bur=l(),Ct=a("div"),f(tL.$$.fragment),xur=l(),i1e=a("p"),kur=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Rur=l(),Gc=a("p"),Sur=o(`Note:
Loading a model from its configuration file does `),d1e=a("strong"),Pur=o("not"),$ur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),c1e=a("code"),Iur=o("from_pretrained()"),jur=o("to load the model weights."),Nur=l(),f1e=a("p"),Dur=o("Examples:"),qur=l(),f(aL.$$.fragment),Gur=l(),Mo=a("div"),f(nL.$$.fragment),Our=l(),m1e=a("p"),Xur=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Vur=l(),yn=a("p"),zur=o("The model class to instantiate is selected based on the "),g1e=a("code"),Wur=o("model_type"),Qur=o(` property of the config object (either
passed as an argument or loaded from `),h1e=a("code"),Hur=o("pretrained_model_name_or_path"),Uur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p1e=a("code"),Jur=o("pretrained_model_name_or_path"),Yur=o(":"),Kur=l(),Y=a("ul"),hT=a("li"),_1e=a("strong"),Zur=o("albert"),e1r=o(" \u2014 "),vX=a("a"),o1r=o("TFAlbertForTokenClassification"),r1r=o(" (ALBERT model)"),t1r=l(),pT=a("li"),u1e=a("strong"),a1r=o("bert"),n1r=o(" \u2014 "),TX=a("a"),s1r=o("TFBertForTokenClassification"),l1r=o(" (BERT model)"),i1r=l(),_T=a("li"),b1e=a("strong"),d1r=o("camembert"),c1r=o(" \u2014 "),FX=a("a"),f1r=o("TFCamembertForTokenClassification"),m1r=o(" (CamemBERT model)"),g1r=l(),uT=a("li"),v1e=a("strong"),h1r=o("convbert"),p1r=o(" \u2014 "),CX=a("a"),_1r=o("TFConvBertForTokenClassification"),u1r=o(" (ConvBERT model)"),b1r=l(),bT=a("li"),T1e=a("strong"),v1r=o("deberta"),T1r=o(" \u2014 "),MX=a("a"),F1r=o("TFDebertaForTokenClassification"),C1r=o(" (DeBERTa model)"),M1r=l(),vT=a("li"),F1e=a("strong"),E1r=o("deberta-v2"),y1r=o(" \u2014 "),EX=a("a"),w1r=o("TFDebertaV2ForTokenClassification"),A1r=o(" (DeBERTa-v2 model)"),L1r=l(),TT=a("li"),C1e=a("strong"),B1r=o("distilbert"),x1r=o(" \u2014 "),yX=a("a"),k1r=o("TFDistilBertForTokenClassification"),R1r=o(" (DistilBERT model)"),S1r=l(),FT=a("li"),M1e=a("strong"),P1r=o("electra"),$1r=o(" \u2014 "),wX=a("a"),I1r=o("TFElectraForTokenClassification"),j1r=o(" (ELECTRA model)"),N1r=l(),CT=a("li"),E1e=a("strong"),D1r=o("flaubert"),q1r=o(" \u2014 "),AX=a("a"),G1r=o("TFFlaubertForTokenClassification"),O1r=o(" (FlauBERT model)"),X1r=l(),MT=a("li"),y1e=a("strong"),V1r=o("funnel"),z1r=o(" \u2014 "),LX=a("a"),W1r=o("TFFunnelForTokenClassification"),Q1r=o(" (Funnel Transformer model)"),H1r=l(),ET=a("li"),w1e=a("strong"),U1r=o("layoutlm"),J1r=o(" \u2014 "),BX=a("a"),Y1r=o("TFLayoutLMForTokenClassification"),K1r=o(" (LayoutLM model)"),Z1r=l(),yT=a("li"),A1e=a("strong"),e4r=o("longformer"),o4r=o(" \u2014 "),xX=a("a"),r4r=o("TFLongformerForTokenClassification"),t4r=o(" (Longformer model)"),a4r=l(),wT=a("li"),L1e=a("strong"),n4r=o("mobilebert"),s4r=o(" \u2014 "),kX=a("a"),l4r=o("TFMobileBertForTokenClassification"),i4r=o(" (MobileBERT model)"),d4r=l(),AT=a("li"),B1e=a("strong"),c4r=o("mpnet"),f4r=o(" \u2014 "),RX=a("a"),m4r=o("TFMPNetForTokenClassification"),g4r=o(" (MPNet model)"),h4r=l(),LT=a("li"),x1e=a("strong"),p4r=o("rembert"),_4r=o(" \u2014 "),SX=a("a"),u4r=o("TFRemBertForTokenClassification"),b4r=o(" (RemBERT model)"),v4r=l(),BT=a("li"),k1e=a("strong"),T4r=o("roberta"),F4r=o(" \u2014 "),PX=a("a"),C4r=o("TFRobertaForTokenClassification"),M4r=o(" (RoBERTa model)"),E4r=l(),xT=a("li"),R1e=a("strong"),y4r=o("roformer"),w4r=o(" \u2014 "),$X=a("a"),A4r=o("TFRoFormerForTokenClassification"),L4r=o(" (RoFormer model)"),B4r=l(),kT=a("li"),S1e=a("strong"),x4r=o("xlm"),k4r=o(" \u2014 "),IX=a("a"),R4r=o("TFXLMForTokenClassification"),S4r=o(" (XLM model)"),P4r=l(),RT=a("li"),P1e=a("strong"),$4r=o("xlm-roberta"),I4r=o(" \u2014 "),jX=a("a"),j4r=o("TFXLMRobertaForTokenClassification"),N4r=o(" (XLM-RoBERTa model)"),D4r=l(),ST=a("li"),$1e=a("strong"),q4r=o("xlnet"),G4r=o(" \u2014 "),NX=a("a"),O4r=o("TFXLNetForTokenClassification"),X4r=o(" (XLNet model)"),V4r=l(),I1e=a("p"),z4r=o("Examples:"),W4r=l(),f(sL.$$.fragment),GRe=l(),Oc=a("h2"),PT=a("a"),j1e=a("span"),f(lL.$$.fragment),Q4r=l(),N1e=a("span"),H4r=o("TFAutoModelForQuestionAnswering"),ORe=l(),Br=a("div"),f(iL.$$.fragment),U4r=l(),Xc=a("p"),J4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),D1e=a("code"),Y4r=o("from_pretrained()"),K4r=o("class method or the "),q1e=a("code"),Z4r=o("from_config()"),ebr=o(`class
method.`),obr=l(),dL=a("p"),rbr=o("This class cannot be instantiated directly using "),G1e=a("code"),tbr=o("__init__()"),abr=o(" (throws an error)."),nbr=l(),Mt=a("div"),f(cL.$$.fragment),sbr=l(),O1e=a("p"),lbr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ibr=l(),Vc=a("p"),dbr=o(`Note:
Loading a model from its configuration file does `),X1e=a("strong"),cbr=o("not"),fbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),V1e=a("code"),mbr=o("from_pretrained()"),gbr=o("to load the model weights."),hbr=l(),z1e=a("p"),pbr=o("Examples:"),_br=l(),f(fL.$$.fragment),ubr=l(),Eo=a("div"),f(mL.$$.fragment),bbr=l(),W1e=a("p"),vbr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Tbr=l(),wn=a("p"),Fbr=o("The model class to instantiate is selected based on the "),Q1e=a("code"),Cbr=o("model_type"),Mbr=o(` property of the config object (either
passed as an argument or loaded from `),H1e=a("code"),Ebr=o("pretrained_model_name_or_path"),ybr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=a("code"),wbr=o("pretrained_model_name_or_path"),Abr=o(":"),Lbr=l(),K=a("ul"),$T=a("li"),J1e=a("strong"),Bbr=o("albert"),xbr=o(" \u2014 "),DX=a("a"),kbr=o("TFAlbertForQuestionAnswering"),Rbr=o(" (ALBERT model)"),Sbr=l(),IT=a("li"),Y1e=a("strong"),Pbr=o("bert"),$br=o(" \u2014 "),qX=a("a"),Ibr=o("TFBertForQuestionAnswering"),jbr=o(" (BERT model)"),Nbr=l(),jT=a("li"),K1e=a("strong"),Dbr=o("camembert"),qbr=o(" \u2014 "),GX=a("a"),Gbr=o("TFCamembertForQuestionAnswering"),Obr=o(" (CamemBERT model)"),Xbr=l(),NT=a("li"),Z1e=a("strong"),Vbr=o("convbert"),zbr=o(" \u2014 "),OX=a("a"),Wbr=o("TFConvBertForQuestionAnswering"),Qbr=o(" (ConvBERT model)"),Hbr=l(),DT=a("li"),e4e=a("strong"),Ubr=o("deberta"),Jbr=o(" \u2014 "),XX=a("a"),Ybr=o("TFDebertaForQuestionAnswering"),Kbr=o(" (DeBERTa model)"),Zbr=l(),qT=a("li"),o4e=a("strong"),e5r=o("deberta-v2"),o5r=o(" \u2014 "),VX=a("a"),r5r=o("TFDebertaV2ForQuestionAnswering"),t5r=o(" (DeBERTa-v2 model)"),a5r=l(),GT=a("li"),r4e=a("strong"),n5r=o("distilbert"),s5r=o(" \u2014 "),zX=a("a"),l5r=o("TFDistilBertForQuestionAnswering"),i5r=o(" (DistilBERT model)"),d5r=l(),OT=a("li"),t4e=a("strong"),c5r=o("electra"),f5r=o(" \u2014 "),WX=a("a"),m5r=o("TFElectraForQuestionAnswering"),g5r=o(" (ELECTRA model)"),h5r=l(),XT=a("li"),a4e=a("strong"),p5r=o("flaubert"),_5r=o(" \u2014 "),QX=a("a"),u5r=o("TFFlaubertForQuestionAnsweringSimple"),b5r=o(" (FlauBERT model)"),v5r=l(),VT=a("li"),n4e=a("strong"),T5r=o("funnel"),F5r=o(" \u2014 "),HX=a("a"),C5r=o("TFFunnelForQuestionAnswering"),M5r=o(" (Funnel Transformer model)"),E5r=l(),zT=a("li"),s4e=a("strong"),y5r=o("gptj"),w5r=o(" \u2014 "),UX=a("a"),A5r=o("TFGPTJForQuestionAnswering"),L5r=o(" (GPT-J model)"),B5r=l(),WT=a("li"),l4e=a("strong"),x5r=o("longformer"),k5r=o(" \u2014 "),JX=a("a"),R5r=o("TFLongformerForQuestionAnswering"),S5r=o(" (Longformer model)"),P5r=l(),QT=a("li"),i4e=a("strong"),$5r=o("mobilebert"),I5r=o(" \u2014 "),YX=a("a"),j5r=o("TFMobileBertForQuestionAnswering"),N5r=o(" (MobileBERT model)"),D5r=l(),HT=a("li"),d4e=a("strong"),q5r=o("mpnet"),G5r=o(" \u2014 "),KX=a("a"),O5r=o("TFMPNetForQuestionAnswering"),X5r=o(" (MPNet model)"),V5r=l(),UT=a("li"),c4e=a("strong"),z5r=o("rembert"),W5r=o(" \u2014 "),ZX=a("a"),Q5r=o("TFRemBertForQuestionAnswering"),H5r=o(" (RemBERT model)"),U5r=l(),JT=a("li"),f4e=a("strong"),J5r=o("roberta"),Y5r=o(" \u2014 "),eV=a("a"),K5r=o("TFRobertaForQuestionAnswering"),Z5r=o(" (RoBERTa model)"),e2r=l(),YT=a("li"),m4e=a("strong"),o2r=o("roformer"),r2r=o(" \u2014 "),oV=a("a"),t2r=o("TFRoFormerForQuestionAnswering"),a2r=o(" (RoFormer model)"),n2r=l(),KT=a("li"),g4e=a("strong"),s2r=o("xlm"),l2r=o(" \u2014 "),rV=a("a"),i2r=o("TFXLMForQuestionAnsweringSimple"),d2r=o(" (XLM model)"),c2r=l(),ZT=a("li"),h4e=a("strong"),f2r=o("xlm-roberta"),m2r=o(" \u2014 "),tV=a("a"),g2r=o("TFXLMRobertaForQuestionAnswering"),h2r=o(" (XLM-RoBERTa model)"),p2r=l(),eF=a("li"),p4e=a("strong"),_2r=o("xlnet"),u2r=o(" \u2014 "),aV=a("a"),b2r=o("TFXLNetForQuestionAnsweringSimple"),v2r=o(" (XLNet model)"),T2r=l(),_4e=a("p"),F2r=o("Examples:"),C2r=l(),f(gL.$$.fragment),XRe=l(),zc=a("h2"),oF=a("a"),u4e=a("span"),f(hL.$$.fragment),M2r=l(),b4e=a("span"),E2r=o("TFAutoModelForVision2Seq"),VRe=l(),xr=a("div"),f(pL.$$.fragment),y2r=l(),Wc=a("p"),w2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),v4e=a("code"),A2r=o("from_pretrained()"),L2r=o("class method or the "),T4e=a("code"),B2r=o("from_config()"),x2r=o(`class
method.`),k2r=l(),_L=a("p"),R2r=o("This class cannot be instantiated directly using "),F4e=a("code"),S2r=o("__init__()"),P2r=o(" (throws an error)."),$2r=l(),Et=a("div"),f(uL.$$.fragment),I2r=l(),C4e=a("p"),j2r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),N2r=l(),Qc=a("p"),D2r=o(`Note:
Loading a model from its configuration file does `),M4e=a("strong"),q2r=o("not"),G2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),E4e=a("code"),O2r=o("from_pretrained()"),X2r=o("to load the model weights."),V2r=l(),y4e=a("p"),z2r=o("Examples:"),W2r=l(),f(bL.$$.fragment),Q2r=l(),yo=a("div"),f(vL.$$.fragment),H2r=l(),w4e=a("p"),U2r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),J2r=l(),An=a("p"),Y2r=o("The model class to instantiate is selected based on the "),A4e=a("code"),K2r=o("model_type"),Z2r=o(` property of the config object (either
passed as an argument or loaded from `),L4e=a("code"),evr=o("pretrained_model_name_or_path"),ovr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B4e=a("code"),rvr=o("pretrained_model_name_or_path"),tvr=o(":"),avr=l(),x4e=a("ul"),rF=a("li"),k4e=a("strong"),nvr=o("vision-encoder-decoder"),svr=o(" \u2014 "),nV=a("a"),lvr=o("TFVisionEncoderDecoderModel"),ivr=o(" (Vision Encoder decoder model)"),dvr=l(),R4e=a("p"),cvr=o("Examples:"),fvr=l(),f(TL.$$.fragment),zRe=l(),Hc=a("h2"),tF=a("a"),S4e=a("span"),f(FL.$$.fragment),mvr=l(),P4e=a("span"),gvr=o("TFAutoModelForSpeechSeq2Seq"),WRe=l(),kr=a("div"),f(CL.$$.fragment),hvr=l(),Uc=a("p"),pvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),$4e=a("code"),_vr=o("from_pretrained()"),uvr=o("class method or the "),I4e=a("code"),bvr=o("from_config()"),vvr=o(`class
method.`),Tvr=l(),ML=a("p"),Fvr=o("This class cannot be instantiated directly using "),j4e=a("code"),Cvr=o("__init__()"),Mvr=o(" (throws an error)."),Evr=l(),yt=a("div"),f(EL.$$.fragment),yvr=l(),N4e=a("p"),wvr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Avr=l(),Jc=a("p"),Lvr=o(`Note:
Loading a model from its configuration file does `),D4e=a("strong"),Bvr=o("not"),xvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),q4e=a("code"),kvr=o("from_pretrained()"),Rvr=o("to load the model weights."),Svr=l(),G4e=a("p"),Pvr=o("Examples:"),$vr=l(),f(yL.$$.fragment),Ivr=l(),wo=a("div"),f(wL.$$.fragment),jvr=l(),O4e=a("p"),Nvr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Dvr=l(),Ln=a("p"),qvr=o("The model class to instantiate is selected based on the "),X4e=a("code"),Gvr=o("model_type"),Ovr=o(` property of the config object (either
passed as an argument or loaded from `),V4e=a("code"),Xvr=o("pretrained_model_name_or_path"),Vvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=a("code"),zvr=o("pretrained_model_name_or_path"),Wvr=o(":"),Qvr=l(),W4e=a("ul"),aF=a("li"),Q4e=a("strong"),Hvr=o("speech_to_text"),Uvr=o(" \u2014 "),sV=a("a"),Jvr=o("TFSpeech2TextForConditionalGeneration"),Yvr=o(" (Speech2Text model)"),Kvr=l(),H4e=a("p"),Zvr=o("Examples:"),e6r=l(),f(AL.$$.fragment),QRe=l(),Yc=a("h2"),nF=a("a"),U4e=a("span"),f(LL.$$.fragment),o6r=l(),J4e=a("span"),r6r=o("FlaxAutoModel"),HRe=l(),Rr=a("div"),f(BL.$$.fragment),t6r=l(),Kc=a("p"),a6r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Y4e=a("code"),n6r=o("from_pretrained()"),s6r=o("class method or the "),K4e=a("code"),l6r=o("from_config()"),i6r=o(`class
method.`),d6r=l(),xL=a("p"),c6r=o("This class cannot be instantiated directly using "),Z4e=a("code"),f6r=o("__init__()"),m6r=o(" (throws an error)."),g6r=l(),wt=a("div"),f(kL.$$.fragment),h6r=l(),ebe=a("p"),p6r=o("Instantiates one of the base model classes of the library from a configuration."),_6r=l(),Zc=a("p"),u6r=o(`Note:
Loading a model from its configuration file does `),obe=a("strong"),b6r=o("not"),v6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rbe=a("code"),T6r=o("from_pretrained()"),F6r=o("to load the model weights."),C6r=l(),tbe=a("p"),M6r=o("Examples:"),E6r=l(),f(RL.$$.fragment),y6r=l(),Ao=a("div"),f(SL.$$.fragment),w6r=l(),abe=a("p"),A6r=o("Instantiate one of the base model classes of the library from a pretrained model."),L6r=l(),Bn=a("p"),B6r=o("The model class to instantiate is selected based on the "),nbe=a("code"),x6r=o("model_type"),k6r=o(` property of the config object (either
passed as an argument or loaded from `),sbe=a("code"),R6r=o("pretrained_model_name_or_path"),S6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=a("code"),P6r=o("pretrained_model_name_or_path"),$6r=o(":"),I6r=l(),z=a("ul"),sF=a("li"),ibe=a("strong"),j6r=o("albert"),N6r=o(" \u2014 "),lV=a("a"),D6r=o("FlaxAlbertModel"),q6r=o(" (ALBERT model)"),G6r=l(),lF=a("li"),dbe=a("strong"),O6r=o("bart"),X6r=o(" \u2014 "),iV=a("a"),V6r=o("FlaxBartModel"),z6r=o(" (BART model)"),W6r=l(),iF=a("li"),cbe=a("strong"),Q6r=o("beit"),H6r=o(" \u2014 "),dV=a("a"),U6r=o("FlaxBeitModel"),J6r=o(" (BEiT model)"),Y6r=l(),dF=a("li"),fbe=a("strong"),K6r=o("bert"),Z6r=o(" \u2014 "),cV=a("a"),e0r=o("FlaxBertModel"),o0r=o(" (BERT model)"),r0r=l(),cF=a("li"),mbe=a("strong"),t0r=o("big_bird"),a0r=o(" \u2014 "),fV=a("a"),n0r=o("FlaxBigBirdModel"),s0r=o(" (BigBird model)"),l0r=l(),fF=a("li"),gbe=a("strong"),i0r=o("blenderbot"),d0r=o(" \u2014 "),mV=a("a"),c0r=o("FlaxBlenderbotModel"),f0r=o(" (Blenderbot model)"),m0r=l(),mF=a("li"),hbe=a("strong"),g0r=o("blenderbot-small"),h0r=o(" \u2014 "),gV=a("a"),p0r=o("FlaxBlenderbotSmallModel"),_0r=o(" (BlenderbotSmall model)"),u0r=l(),gF=a("li"),pbe=a("strong"),b0r=o("clip"),v0r=o(" \u2014 "),hV=a("a"),T0r=o("FlaxCLIPModel"),F0r=o(" (CLIP model)"),C0r=l(),hF=a("li"),_be=a("strong"),M0r=o("distilbert"),E0r=o(" \u2014 "),pV=a("a"),y0r=o("FlaxDistilBertModel"),w0r=o(" (DistilBERT model)"),A0r=l(),pF=a("li"),ube=a("strong"),L0r=o("electra"),B0r=o(" \u2014 "),_V=a("a"),x0r=o("FlaxElectraModel"),k0r=o(" (ELECTRA model)"),R0r=l(),_F=a("li"),bbe=a("strong"),S0r=o("gpt2"),P0r=o(" \u2014 "),uV=a("a"),$0r=o("FlaxGPT2Model"),I0r=o(" (OpenAI GPT-2 model)"),j0r=l(),uF=a("li"),vbe=a("strong"),N0r=o("gpt_neo"),D0r=o(" \u2014 "),bV=a("a"),q0r=o("FlaxGPTNeoModel"),G0r=o(" (GPT Neo model)"),O0r=l(),bF=a("li"),Tbe=a("strong"),X0r=o("gptj"),V0r=o(" \u2014 "),vV=a("a"),z0r=o("FlaxGPTJModel"),W0r=o(" (GPT-J model)"),Q0r=l(),vF=a("li"),Fbe=a("strong"),H0r=o("marian"),U0r=o(" \u2014 "),TV=a("a"),J0r=o("FlaxMarianModel"),Y0r=o(" (Marian model)"),K0r=l(),TF=a("li"),Cbe=a("strong"),Z0r=o("mbart"),eTr=o(" \u2014 "),FV=a("a"),oTr=o("FlaxMBartModel"),rTr=o(" (mBART model)"),tTr=l(),FF=a("li"),Mbe=a("strong"),aTr=o("mt5"),nTr=o(" \u2014 "),CV=a("a"),sTr=o("FlaxMT5Model"),lTr=o(" (mT5 model)"),iTr=l(),CF=a("li"),Ebe=a("strong"),dTr=o("pegasus"),cTr=o(" \u2014 "),MV=a("a"),fTr=o("FlaxPegasusModel"),mTr=o(" (Pegasus model)"),gTr=l(),MF=a("li"),ybe=a("strong"),hTr=o("roberta"),pTr=o(" \u2014 "),EV=a("a"),_Tr=o("FlaxRobertaModel"),uTr=o(" (RoBERTa model)"),bTr=l(),EF=a("li"),wbe=a("strong"),vTr=o("roformer"),TTr=o(" \u2014 "),yV=a("a"),FTr=o("FlaxRoFormerModel"),CTr=o(" (RoFormer model)"),MTr=l(),yF=a("li"),Abe=a("strong"),ETr=o("t5"),yTr=o(" \u2014 "),wV=a("a"),wTr=o("FlaxT5Model"),ATr=o(" (T5 model)"),LTr=l(),wF=a("li"),Lbe=a("strong"),BTr=o("vision-text-dual-encoder"),xTr=o(" \u2014 "),AV=a("a"),kTr=o("FlaxVisionTextDualEncoderModel"),RTr=o(" (VisionTextDualEncoder model)"),STr=l(),AF=a("li"),Bbe=a("strong"),PTr=o("vit"),$Tr=o(" \u2014 "),LV=a("a"),ITr=o("FlaxViTModel"),jTr=o(" (ViT model)"),NTr=l(),LF=a("li"),xbe=a("strong"),DTr=o("wav2vec2"),qTr=o(" \u2014 "),BV=a("a"),GTr=o("FlaxWav2Vec2Model"),OTr=o(" (Wav2Vec2 model)"),XTr=l(),BF=a("li"),kbe=a("strong"),VTr=o("xglm"),zTr=o(" \u2014 "),xV=a("a"),WTr=o("FlaxXGLMModel"),QTr=o(" (XGLM model)"),HTr=l(),xF=a("li"),Rbe=a("strong"),UTr=o("xlm-roberta"),JTr=o(" \u2014 "),kV=a("a"),YTr=o("FlaxXLMRobertaModel"),KTr=o(" (XLM-RoBERTa model)"),ZTr=l(),Sbe=a("p"),eFr=o("Examples:"),oFr=l(),f(PL.$$.fragment),URe=l(),ef=a("h2"),kF=a("a"),Pbe=a("span"),f($L.$$.fragment),rFr=l(),$be=a("span"),tFr=o("FlaxAutoModelForCausalLM"),JRe=l(),Sr=a("div"),f(IL.$$.fragment),aFr=l(),of=a("p"),nFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Ibe=a("code"),sFr=o("from_pretrained()"),lFr=o("class method or the "),jbe=a("code"),iFr=o("from_config()"),dFr=o(`class
method.`),cFr=l(),jL=a("p"),fFr=o("This class cannot be instantiated directly using "),Nbe=a("code"),mFr=o("__init__()"),gFr=o(" (throws an error)."),hFr=l(),At=a("div"),f(NL.$$.fragment),pFr=l(),Dbe=a("p"),_Fr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),uFr=l(),rf=a("p"),bFr=o(`Note:
Loading a model from its configuration file does `),qbe=a("strong"),vFr=o("not"),TFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gbe=a("code"),FFr=o("from_pretrained()"),CFr=o("to load the model weights."),MFr=l(),Obe=a("p"),EFr=o("Examples:"),yFr=l(),f(DL.$$.fragment),wFr=l(),Lo=a("div"),f(qL.$$.fragment),AFr=l(),Xbe=a("p"),LFr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BFr=l(),xn=a("p"),xFr=o("The model class to instantiate is selected based on the "),Vbe=a("code"),kFr=o("model_type"),RFr=o(` property of the config object (either
passed as an argument or loaded from `),zbe=a("code"),SFr=o("pretrained_model_name_or_path"),PFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=a("code"),$Fr=o("pretrained_model_name_or_path"),IFr=o(":"),jFr=l(),ca=a("ul"),RF=a("li"),Qbe=a("strong"),NFr=o("bart"),DFr=o(" \u2014 "),RV=a("a"),qFr=o("FlaxBartForCausalLM"),GFr=o(" (BART model)"),OFr=l(),SF=a("li"),Hbe=a("strong"),XFr=o("gpt2"),VFr=o(" \u2014 "),SV=a("a"),zFr=o("FlaxGPT2LMHeadModel"),WFr=o(" (OpenAI GPT-2 model)"),QFr=l(),PF=a("li"),Ube=a("strong"),HFr=o("gpt_neo"),UFr=o(" \u2014 "),PV=a("a"),JFr=o("FlaxGPTNeoForCausalLM"),YFr=o(" (GPT Neo model)"),KFr=l(),$F=a("li"),Jbe=a("strong"),ZFr=o("gptj"),eCr=o(" \u2014 "),$V=a("a"),oCr=o("FlaxGPTJForCausalLM"),rCr=o(" (GPT-J model)"),tCr=l(),IF=a("li"),Ybe=a("strong"),aCr=o("xglm"),nCr=o(" \u2014 "),IV=a("a"),sCr=o("FlaxXGLMForCausalLM"),lCr=o(" (XGLM model)"),iCr=l(),Kbe=a("p"),dCr=o("Examples:"),cCr=l(),f(GL.$$.fragment),YRe=l(),tf=a("h2"),jF=a("a"),Zbe=a("span"),f(OL.$$.fragment),fCr=l(),e5e=a("span"),mCr=o("FlaxAutoModelForPreTraining"),KRe=l(),Pr=a("div"),f(XL.$$.fragment),gCr=l(),af=a("p"),hCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),o5e=a("code"),pCr=o("from_pretrained()"),_Cr=o("class method or the "),r5e=a("code"),uCr=o("from_config()"),bCr=o(`class
method.`),vCr=l(),VL=a("p"),TCr=o("This class cannot be instantiated directly using "),t5e=a("code"),FCr=o("__init__()"),CCr=o(" (throws an error)."),MCr=l(),Lt=a("div"),f(zL.$$.fragment),ECr=l(),a5e=a("p"),yCr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wCr=l(),nf=a("p"),ACr=o(`Note:
Loading a model from its configuration file does `),n5e=a("strong"),LCr=o("not"),BCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),s5e=a("code"),xCr=o("from_pretrained()"),kCr=o("to load the model weights."),RCr=l(),l5e=a("p"),SCr=o("Examples:"),PCr=l(),f(WL.$$.fragment),$Cr=l(),Bo=a("div"),f(QL.$$.fragment),ICr=l(),i5e=a("p"),jCr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),NCr=l(),kn=a("p"),DCr=o("The model class to instantiate is selected based on the "),d5e=a("code"),qCr=o("model_type"),GCr=o(` property of the config object (either
passed as an argument or loaded from `),c5e=a("code"),OCr=o("pretrained_model_name_or_path"),XCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f5e=a("code"),VCr=o("pretrained_model_name_or_path"),zCr=o(":"),WCr=l(),fe=a("ul"),NF=a("li"),m5e=a("strong"),QCr=o("albert"),HCr=o(" \u2014 "),jV=a("a"),UCr=o("FlaxAlbertForPreTraining"),JCr=o(" (ALBERT model)"),YCr=l(),DF=a("li"),g5e=a("strong"),KCr=o("bart"),ZCr=o(" \u2014 "),NV=a("a"),eMr=o("FlaxBartForConditionalGeneration"),oMr=o(" (BART model)"),rMr=l(),qF=a("li"),h5e=a("strong"),tMr=o("bert"),aMr=o(" \u2014 "),DV=a("a"),nMr=o("FlaxBertForPreTraining"),sMr=o(" (BERT model)"),lMr=l(),GF=a("li"),p5e=a("strong"),iMr=o("big_bird"),dMr=o(" \u2014 "),qV=a("a"),cMr=o("FlaxBigBirdForPreTraining"),fMr=o(" (BigBird model)"),mMr=l(),OF=a("li"),_5e=a("strong"),gMr=o("electra"),hMr=o(" \u2014 "),GV=a("a"),pMr=o("FlaxElectraForPreTraining"),_Mr=o(" (ELECTRA model)"),uMr=l(),XF=a("li"),u5e=a("strong"),bMr=o("mbart"),vMr=o(" \u2014 "),OV=a("a"),TMr=o("FlaxMBartForConditionalGeneration"),FMr=o(" (mBART model)"),CMr=l(),VF=a("li"),b5e=a("strong"),MMr=o("mt5"),EMr=o(" \u2014 "),XV=a("a"),yMr=o("FlaxMT5ForConditionalGeneration"),wMr=o(" (mT5 model)"),AMr=l(),zF=a("li"),v5e=a("strong"),LMr=o("roberta"),BMr=o(" \u2014 "),VV=a("a"),xMr=o("FlaxRobertaForMaskedLM"),kMr=o(" (RoBERTa model)"),RMr=l(),WF=a("li"),T5e=a("strong"),SMr=o("roformer"),PMr=o(" \u2014 "),zV=a("a"),$Mr=o("FlaxRoFormerForMaskedLM"),IMr=o(" (RoFormer model)"),jMr=l(),QF=a("li"),F5e=a("strong"),NMr=o("t5"),DMr=o(" \u2014 "),WV=a("a"),qMr=o("FlaxT5ForConditionalGeneration"),GMr=o(" (T5 model)"),OMr=l(),HF=a("li"),C5e=a("strong"),XMr=o("wav2vec2"),VMr=o(" \u2014 "),QV=a("a"),zMr=o("FlaxWav2Vec2ForPreTraining"),WMr=o(" (Wav2Vec2 model)"),QMr=l(),UF=a("li"),M5e=a("strong"),HMr=o("xlm-roberta"),UMr=o(" \u2014 "),HV=a("a"),JMr=o("FlaxXLMRobertaForMaskedLM"),YMr=o(" (XLM-RoBERTa model)"),KMr=l(),E5e=a("p"),ZMr=o("Examples:"),eEr=l(),f(HL.$$.fragment),ZRe=l(),sf=a("h2"),JF=a("a"),y5e=a("span"),f(UL.$$.fragment),oEr=l(),w5e=a("span"),rEr=o("FlaxAutoModelForMaskedLM"),eSe=l(),$r=a("div"),f(JL.$$.fragment),tEr=l(),lf=a("p"),aEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),A5e=a("code"),nEr=o("from_pretrained()"),sEr=o("class method or the "),L5e=a("code"),lEr=o("from_config()"),iEr=o(`class
method.`),dEr=l(),YL=a("p"),cEr=o("This class cannot be instantiated directly using "),B5e=a("code"),fEr=o("__init__()"),mEr=o(" (throws an error)."),gEr=l(),Bt=a("div"),f(KL.$$.fragment),hEr=l(),x5e=a("p"),pEr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Er=l(),df=a("p"),uEr=o(`Note:
Loading a model from its configuration file does `),k5e=a("strong"),bEr=o("not"),vEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),R5e=a("code"),TEr=o("from_pretrained()"),FEr=o("to load the model weights."),CEr=l(),S5e=a("p"),MEr=o("Examples:"),EEr=l(),f(ZL.$$.fragment),yEr=l(),xo=a("div"),f(e7.$$.fragment),wEr=l(),P5e=a("p"),AEr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),LEr=l(),Rn=a("p"),BEr=o("The model class to instantiate is selected based on the "),$5e=a("code"),xEr=o("model_type"),kEr=o(` property of the config object (either
passed as an argument or loaded from `),I5e=a("code"),REr=o("pretrained_model_name_or_path"),SEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j5e=a("code"),PEr=o("pretrained_model_name_or_path"),$Er=o(":"),IEr=l(),be=a("ul"),YF=a("li"),N5e=a("strong"),jEr=o("albert"),NEr=o(" \u2014 "),UV=a("a"),DEr=o("FlaxAlbertForMaskedLM"),qEr=o(" (ALBERT model)"),GEr=l(),KF=a("li"),D5e=a("strong"),OEr=o("bart"),XEr=o(" \u2014 "),JV=a("a"),VEr=o("FlaxBartForConditionalGeneration"),zEr=o(" (BART model)"),WEr=l(),ZF=a("li"),q5e=a("strong"),QEr=o("bert"),HEr=o(" \u2014 "),YV=a("a"),UEr=o("FlaxBertForMaskedLM"),JEr=o(" (BERT model)"),YEr=l(),eC=a("li"),G5e=a("strong"),KEr=o("big_bird"),ZEr=o(" \u2014 "),KV=a("a"),e3r=o("FlaxBigBirdForMaskedLM"),o3r=o(" (BigBird model)"),r3r=l(),oC=a("li"),O5e=a("strong"),t3r=o("distilbert"),a3r=o(" \u2014 "),ZV=a("a"),n3r=o("FlaxDistilBertForMaskedLM"),s3r=o(" (DistilBERT model)"),l3r=l(),rC=a("li"),X5e=a("strong"),i3r=o("electra"),d3r=o(" \u2014 "),ez=a("a"),c3r=o("FlaxElectraForMaskedLM"),f3r=o(" (ELECTRA model)"),m3r=l(),tC=a("li"),V5e=a("strong"),g3r=o("mbart"),h3r=o(" \u2014 "),oz=a("a"),p3r=o("FlaxMBartForConditionalGeneration"),_3r=o(" (mBART model)"),u3r=l(),aC=a("li"),z5e=a("strong"),b3r=o("roberta"),v3r=o(" \u2014 "),rz=a("a"),T3r=o("FlaxRobertaForMaskedLM"),F3r=o(" (RoBERTa model)"),C3r=l(),nC=a("li"),W5e=a("strong"),M3r=o("roformer"),E3r=o(" \u2014 "),tz=a("a"),y3r=o("FlaxRoFormerForMaskedLM"),w3r=o(" (RoFormer model)"),A3r=l(),sC=a("li"),Q5e=a("strong"),L3r=o("xlm-roberta"),B3r=o(" \u2014 "),az=a("a"),x3r=o("FlaxXLMRobertaForMaskedLM"),k3r=o(" (XLM-RoBERTa model)"),R3r=l(),H5e=a("p"),S3r=o("Examples:"),P3r=l(),f(o7.$$.fragment),oSe=l(),cf=a("h2"),lC=a("a"),U5e=a("span"),f(r7.$$.fragment),$3r=l(),J5e=a("span"),I3r=o("FlaxAutoModelForSeq2SeqLM"),rSe=l(),Ir=a("div"),f(t7.$$.fragment),j3r=l(),ff=a("p"),N3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Y5e=a("code"),D3r=o("from_pretrained()"),q3r=o("class method or the "),K5e=a("code"),G3r=o("from_config()"),O3r=o(`class
method.`),X3r=l(),a7=a("p"),V3r=o("This class cannot be instantiated directly using "),Z5e=a("code"),z3r=o("__init__()"),W3r=o(" (throws an error)."),Q3r=l(),xt=a("div"),f(n7.$$.fragment),H3r=l(),e2e=a("p"),U3r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),J3r=l(),mf=a("p"),Y3r=o(`Note:
Loading a model from its configuration file does `),o2e=a("strong"),K3r=o("not"),Z3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),r2e=a("code"),eyr=o("from_pretrained()"),oyr=o("to load the model weights."),ryr=l(),t2e=a("p"),tyr=o("Examples:"),ayr=l(),f(s7.$$.fragment),nyr=l(),ko=a("div"),f(l7.$$.fragment),syr=l(),a2e=a("p"),lyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),iyr=l(),Sn=a("p"),dyr=o("The model class to instantiate is selected based on the "),n2e=a("code"),cyr=o("model_type"),fyr=o(` property of the config object (either
passed as an argument or loaded from `),s2e=a("code"),myr=o("pretrained_model_name_or_path"),gyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=a("code"),hyr=o("pretrained_model_name_or_path"),pyr=o(":"),_yr=l(),Me=a("ul"),iC=a("li"),i2e=a("strong"),uyr=o("bart"),byr=o(" \u2014 "),nz=a("a"),vyr=o("FlaxBartForConditionalGeneration"),Tyr=o(" (BART model)"),Fyr=l(),dC=a("li"),d2e=a("strong"),Cyr=o("blenderbot"),Myr=o(" \u2014 "),sz=a("a"),Eyr=o("FlaxBlenderbotForConditionalGeneration"),yyr=o(" (Blenderbot model)"),wyr=l(),cC=a("li"),c2e=a("strong"),Ayr=o("blenderbot-small"),Lyr=o(" \u2014 "),lz=a("a"),Byr=o("FlaxBlenderbotSmallForConditionalGeneration"),xyr=o(" (BlenderbotSmall model)"),kyr=l(),fC=a("li"),f2e=a("strong"),Ryr=o("encoder-decoder"),Syr=o(" \u2014 "),iz=a("a"),Pyr=o("FlaxEncoderDecoderModel"),$yr=o(" (Encoder decoder model)"),Iyr=l(),mC=a("li"),m2e=a("strong"),jyr=o("marian"),Nyr=o(" \u2014 "),dz=a("a"),Dyr=o("FlaxMarianMTModel"),qyr=o(" (Marian model)"),Gyr=l(),gC=a("li"),g2e=a("strong"),Oyr=o("mbart"),Xyr=o(" \u2014 "),cz=a("a"),Vyr=o("FlaxMBartForConditionalGeneration"),zyr=o(" (mBART model)"),Wyr=l(),hC=a("li"),h2e=a("strong"),Qyr=o("mt5"),Hyr=o(" \u2014 "),fz=a("a"),Uyr=o("FlaxMT5ForConditionalGeneration"),Jyr=o(" (mT5 model)"),Yyr=l(),pC=a("li"),p2e=a("strong"),Kyr=o("pegasus"),Zyr=o(" \u2014 "),mz=a("a"),ewr=o("FlaxPegasusForConditionalGeneration"),owr=o(" (Pegasus model)"),rwr=l(),_C=a("li"),_2e=a("strong"),twr=o("t5"),awr=o(" \u2014 "),gz=a("a"),nwr=o("FlaxT5ForConditionalGeneration"),swr=o(" (T5 model)"),lwr=l(),u2e=a("p"),iwr=o("Examples:"),dwr=l(),f(i7.$$.fragment),tSe=l(),gf=a("h2"),uC=a("a"),b2e=a("span"),f(d7.$$.fragment),cwr=l(),v2e=a("span"),fwr=o("FlaxAutoModelForSequenceClassification"),aSe=l(),jr=a("div"),f(c7.$$.fragment),mwr=l(),hf=a("p"),gwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),T2e=a("code"),hwr=o("from_pretrained()"),pwr=o("class method or the "),F2e=a("code"),_wr=o("from_config()"),uwr=o(`class
method.`),bwr=l(),f7=a("p"),vwr=o("This class cannot be instantiated directly using "),C2e=a("code"),Twr=o("__init__()"),Fwr=o(" (throws an error)."),Cwr=l(),kt=a("div"),f(m7.$$.fragment),Mwr=l(),M2e=a("p"),Ewr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ywr=l(),pf=a("p"),wwr=o(`Note:
Loading a model from its configuration file does `),E2e=a("strong"),Awr=o("not"),Lwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),y2e=a("code"),Bwr=o("from_pretrained()"),xwr=o("to load the model weights."),kwr=l(),w2e=a("p"),Rwr=o("Examples:"),Swr=l(),f(g7.$$.fragment),Pwr=l(),Ro=a("div"),f(h7.$$.fragment),$wr=l(),A2e=a("p"),Iwr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),jwr=l(),Pn=a("p"),Nwr=o("The model class to instantiate is selected based on the "),L2e=a("code"),Dwr=o("model_type"),qwr=o(` property of the config object (either
passed as an argument or loaded from `),B2e=a("code"),Gwr=o("pretrained_model_name_or_path"),Owr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x2e=a("code"),Xwr=o("pretrained_model_name_or_path"),Vwr=o(":"),zwr=l(),ve=a("ul"),bC=a("li"),k2e=a("strong"),Wwr=o("albert"),Qwr=o(" \u2014 "),hz=a("a"),Hwr=o("FlaxAlbertForSequenceClassification"),Uwr=o(" (ALBERT model)"),Jwr=l(),vC=a("li"),R2e=a("strong"),Ywr=o("bart"),Kwr=o(" \u2014 "),pz=a("a"),Zwr=o("FlaxBartForSequenceClassification"),eAr=o(" (BART model)"),oAr=l(),TC=a("li"),S2e=a("strong"),rAr=o("bert"),tAr=o(" \u2014 "),_z=a("a"),aAr=o("FlaxBertForSequenceClassification"),nAr=o(" (BERT model)"),sAr=l(),FC=a("li"),P2e=a("strong"),lAr=o("big_bird"),iAr=o(" \u2014 "),uz=a("a"),dAr=o("FlaxBigBirdForSequenceClassification"),cAr=o(" (BigBird model)"),fAr=l(),CC=a("li"),$2e=a("strong"),mAr=o("distilbert"),gAr=o(" \u2014 "),bz=a("a"),hAr=o("FlaxDistilBertForSequenceClassification"),pAr=o(" (DistilBERT model)"),_Ar=l(),MC=a("li"),I2e=a("strong"),uAr=o("electra"),bAr=o(" \u2014 "),vz=a("a"),vAr=o("FlaxElectraForSequenceClassification"),TAr=o(" (ELECTRA model)"),FAr=l(),EC=a("li"),j2e=a("strong"),CAr=o("mbart"),MAr=o(" \u2014 "),Tz=a("a"),EAr=o("FlaxMBartForSequenceClassification"),yAr=o(" (mBART model)"),wAr=l(),yC=a("li"),N2e=a("strong"),AAr=o("roberta"),LAr=o(" \u2014 "),Fz=a("a"),BAr=o("FlaxRobertaForSequenceClassification"),xAr=o(" (RoBERTa model)"),kAr=l(),wC=a("li"),D2e=a("strong"),RAr=o("roformer"),SAr=o(" \u2014 "),Cz=a("a"),PAr=o("FlaxRoFormerForSequenceClassification"),$Ar=o(" (RoFormer model)"),IAr=l(),AC=a("li"),q2e=a("strong"),jAr=o("xlm-roberta"),NAr=o(" \u2014 "),Mz=a("a"),DAr=o("FlaxXLMRobertaForSequenceClassification"),qAr=o(" (XLM-RoBERTa model)"),GAr=l(),G2e=a("p"),OAr=o("Examples:"),XAr=l(),f(p7.$$.fragment),nSe=l(),_f=a("h2"),LC=a("a"),O2e=a("span"),f(_7.$$.fragment),VAr=l(),X2e=a("span"),zAr=o("FlaxAutoModelForQuestionAnswering"),sSe=l(),Nr=a("div"),f(u7.$$.fragment),WAr=l(),uf=a("p"),QAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),V2e=a("code"),HAr=o("from_pretrained()"),UAr=o("class method or the "),z2e=a("code"),JAr=o("from_config()"),YAr=o(`class
method.`),KAr=l(),b7=a("p"),ZAr=o("This class cannot be instantiated directly using "),W2e=a("code"),eLr=o("__init__()"),oLr=o(" (throws an error)."),rLr=l(),Rt=a("div"),f(v7.$$.fragment),tLr=l(),Q2e=a("p"),aLr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),nLr=l(),bf=a("p"),sLr=o(`Note:
Loading a model from its configuration file does `),H2e=a("strong"),lLr=o("not"),iLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),U2e=a("code"),dLr=o("from_pretrained()"),cLr=o("to load the model weights."),fLr=l(),J2e=a("p"),mLr=o("Examples:"),gLr=l(),f(T7.$$.fragment),hLr=l(),So=a("div"),f(F7.$$.fragment),pLr=l(),Y2e=a("p"),_Lr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uLr=l(),$n=a("p"),bLr=o("The model class to instantiate is selected based on the "),K2e=a("code"),vLr=o("model_type"),TLr=o(` property of the config object (either
passed as an argument or loaded from `),Z2e=a("code"),FLr=o("pretrained_model_name_or_path"),CLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=a("code"),MLr=o("pretrained_model_name_or_path"),ELr=o(":"),yLr=l(),Te=a("ul"),BC=a("li"),ove=a("strong"),wLr=o("albert"),ALr=o(" \u2014 "),Ez=a("a"),LLr=o("FlaxAlbertForQuestionAnswering"),BLr=o(" (ALBERT model)"),xLr=l(),xC=a("li"),rve=a("strong"),kLr=o("bart"),RLr=o(" \u2014 "),yz=a("a"),SLr=o("FlaxBartForQuestionAnswering"),PLr=o(" (BART model)"),$Lr=l(),kC=a("li"),tve=a("strong"),ILr=o("bert"),jLr=o(" \u2014 "),wz=a("a"),NLr=o("FlaxBertForQuestionAnswering"),DLr=o(" (BERT model)"),qLr=l(),RC=a("li"),ave=a("strong"),GLr=o("big_bird"),OLr=o(" \u2014 "),Az=a("a"),XLr=o("FlaxBigBirdForQuestionAnswering"),VLr=o(" (BigBird model)"),zLr=l(),SC=a("li"),nve=a("strong"),WLr=o("distilbert"),QLr=o(" \u2014 "),Lz=a("a"),HLr=o("FlaxDistilBertForQuestionAnswering"),ULr=o(" (DistilBERT model)"),JLr=l(),PC=a("li"),sve=a("strong"),YLr=o("electra"),KLr=o(" \u2014 "),Bz=a("a"),ZLr=o("FlaxElectraForQuestionAnswering"),e7r=o(" (ELECTRA model)"),o7r=l(),$C=a("li"),lve=a("strong"),r7r=o("mbart"),t7r=o(" \u2014 "),xz=a("a"),a7r=o("FlaxMBartForQuestionAnswering"),n7r=o(" (mBART model)"),s7r=l(),IC=a("li"),ive=a("strong"),l7r=o("roberta"),i7r=o(" \u2014 "),kz=a("a"),d7r=o("FlaxRobertaForQuestionAnswering"),c7r=o(" (RoBERTa model)"),f7r=l(),jC=a("li"),dve=a("strong"),m7r=o("roformer"),g7r=o(" \u2014 "),Rz=a("a"),h7r=o("FlaxRoFormerForQuestionAnswering"),p7r=o(" (RoFormer model)"),_7r=l(),NC=a("li"),cve=a("strong"),u7r=o("xlm-roberta"),b7r=o(" \u2014 "),Sz=a("a"),v7r=o("FlaxXLMRobertaForQuestionAnswering"),T7r=o(" (XLM-RoBERTa model)"),F7r=l(),fve=a("p"),C7r=o("Examples:"),M7r=l(),f(C7.$$.fragment),lSe=l(),vf=a("h2"),DC=a("a"),mve=a("span"),f(M7.$$.fragment),E7r=l(),gve=a("span"),y7r=o("FlaxAutoModelForTokenClassification"),iSe=l(),Dr=a("div"),f(E7.$$.fragment),w7r=l(),Tf=a("p"),A7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),hve=a("code"),L7r=o("from_pretrained()"),B7r=o("class method or the "),pve=a("code"),x7r=o("from_config()"),k7r=o(`class
method.`),R7r=l(),y7=a("p"),S7r=o("This class cannot be instantiated directly using "),_ve=a("code"),P7r=o("__init__()"),$7r=o(" (throws an error)."),I7r=l(),St=a("div"),f(w7.$$.fragment),j7r=l(),uve=a("p"),N7r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),D7r=l(),Ff=a("p"),q7r=o(`Note:
Loading a model from its configuration file does `),bve=a("strong"),G7r=o("not"),O7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vve=a("code"),X7r=o("from_pretrained()"),V7r=o("to load the model weights."),z7r=l(),Tve=a("p"),W7r=o("Examples:"),Q7r=l(),f(A7.$$.fragment),H7r=l(),Po=a("div"),f(L7.$$.fragment),U7r=l(),Fve=a("p"),J7r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Y7r=l(),In=a("p"),K7r=o("The model class to instantiate is selected based on the "),Cve=a("code"),Z7r=o("model_type"),e8r=o(` property of the config object (either
passed as an argument or loaded from `),Mve=a("code"),o8r=o("pretrained_model_name_or_path"),r8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eve=a("code"),t8r=o("pretrained_model_name_or_path"),a8r=o(":"),n8r=l(),Se=a("ul"),qC=a("li"),yve=a("strong"),s8r=o("albert"),l8r=o(" \u2014 "),Pz=a("a"),i8r=o("FlaxAlbertForTokenClassification"),d8r=o(" (ALBERT model)"),c8r=l(),GC=a("li"),wve=a("strong"),f8r=o("bert"),m8r=o(" \u2014 "),$z=a("a"),g8r=o("FlaxBertForTokenClassification"),h8r=o(" (BERT model)"),p8r=l(),OC=a("li"),Ave=a("strong"),_8r=o("big_bird"),u8r=o(" \u2014 "),Iz=a("a"),b8r=o("FlaxBigBirdForTokenClassification"),v8r=o(" (BigBird model)"),T8r=l(),XC=a("li"),Lve=a("strong"),F8r=o("distilbert"),C8r=o(" \u2014 "),jz=a("a"),M8r=o("FlaxDistilBertForTokenClassification"),E8r=o(" (DistilBERT model)"),y8r=l(),VC=a("li"),Bve=a("strong"),w8r=o("electra"),A8r=o(" \u2014 "),Nz=a("a"),L8r=o("FlaxElectraForTokenClassification"),B8r=o(" (ELECTRA model)"),x8r=l(),zC=a("li"),xve=a("strong"),k8r=o("roberta"),R8r=o(" \u2014 "),Dz=a("a"),S8r=o("FlaxRobertaForTokenClassification"),P8r=o(" (RoBERTa model)"),$8r=l(),WC=a("li"),kve=a("strong"),I8r=o("roformer"),j8r=o(" \u2014 "),qz=a("a"),N8r=o("FlaxRoFormerForTokenClassification"),D8r=o(" (RoFormer model)"),q8r=l(),QC=a("li"),Rve=a("strong"),G8r=o("xlm-roberta"),O8r=o(" \u2014 "),Gz=a("a"),X8r=o("FlaxXLMRobertaForTokenClassification"),V8r=o(" (XLM-RoBERTa model)"),z8r=l(),Sve=a("p"),W8r=o("Examples:"),Q8r=l(),f(B7.$$.fragment),dSe=l(),Cf=a("h2"),HC=a("a"),Pve=a("span"),f(x7.$$.fragment),H8r=l(),$ve=a("span"),U8r=o("FlaxAutoModelForMultipleChoice"),cSe=l(),qr=a("div"),f(k7.$$.fragment),J8r=l(),Mf=a("p"),Y8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Ive=a("code"),K8r=o("from_pretrained()"),Z8r=o("class method or the "),jve=a("code"),e9r=o("from_config()"),o9r=o(`class
method.`),r9r=l(),R7=a("p"),t9r=o("This class cannot be instantiated directly using "),Nve=a("code"),a9r=o("__init__()"),n9r=o(" (throws an error)."),s9r=l(),Pt=a("div"),f(S7.$$.fragment),l9r=l(),Dve=a("p"),i9r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),d9r=l(),Ef=a("p"),c9r=o(`Note:
Loading a model from its configuration file does `),qve=a("strong"),f9r=o("not"),m9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gve=a("code"),g9r=o("from_pretrained()"),h9r=o("to load the model weights."),p9r=l(),Ove=a("p"),_9r=o("Examples:"),u9r=l(),f(P7.$$.fragment),b9r=l(),$o=a("div"),f($7.$$.fragment),v9r=l(),Xve=a("p"),T9r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),F9r=l(),jn=a("p"),C9r=o("The model class to instantiate is selected based on the "),Vve=a("code"),M9r=o("model_type"),E9r=o(` property of the config object (either
passed as an argument or loaded from `),zve=a("code"),y9r=o("pretrained_model_name_or_path"),w9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=a("code"),A9r=o("pretrained_model_name_or_path"),L9r=o(":"),B9r=l(),Pe=a("ul"),UC=a("li"),Qve=a("strong"),x9r=o("albert"),k9r=o(" \u2014 "),Oz=a("a"),R9r=o("FlaxAlbertForMultipleChoice"),S9r=o(" (ALBERT model)"),P9r=l(),JC=a("li"),Hve=a("strong"),$9r=o("bert"),I9r=o(" \u2014 "),Xz=a("a"),j9r=o("FlaxBertForMultipleChoice"),N9r=o(" (BERT model)"),D9r=l(),YC=a("li"),Uve=a("strong"),q9r=o("big_bird"),G9r=o(" \u2014 "),Vz=a("a"),O9r=o("FlaxBigBirdForMultipleChoice"),X9r=o(" (BigBird model)"),V9r=l(),KC=a("li"),Jve=a("strong"),z9r=o("distilbert"),W9r=o(" \u2014 "),zz=a("a"),Q9r=o("FlaxDistilBertForMultipleChoice"),H9r=o(" (DistilBERT model)"),U9r=l(),ZC=a("li"),Yve=a("strong"),J9r=o("electra"),Y9r=o(" \u2014 "),Wz=a("a"),K9r=o("FlaxElectraForMultipleChoice"),Z9r=o(" (ELECTRA model)"),eBr=l(),eM=a("li"),Kve=a("strong"),oBr=o("roberta"),rBr=o(" \u2014 "),Qz=a("a"),tBr=o("FlaxRobertaForMultipleChoice"),aBr=o(" (RoBERTa model)"),nBr=l(),oM=a("li"),Zve=a("strong"),sBr=o("roformer"),lBr=o(" \u2014 "),Hz=a("a"),iBr=o("FlaxRoFormerForMultipleChoice"),dBr=o(" (RoFormer model)"),cBr=l(),rM=a("li"),e6e=a("strong"),fBr=o("xlm-roberta"),mBr=o(" \u2014 "),Uz=a("a"),gBr=o("FlaxXLMRobertaForMultipleChoice"),hBr=o(" (XLM-RoBERTa model)"),pBr=l(),o6e=a("p"),_Br=o("Examples:"),uBr=l(),f(I7.$$.fragment),fSe=l(),yf=a("h2"),tM=a("a"),r6e=a("span"),f(j7.$$.fragment),bBr=l(),t6e=a("span"),vBr=o("FlaxAutoModelForNextSentencePrediction"),mSe=l(),Gr=a("div"),f(N7.$$.fragment),TBr=l(),wf=a("p"),FBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),a6e=a("code"),CBr=o("from_pretrained()"),MBr=o("class method or the "),n6e=a("code"),EBr=o("from_config()"),yBr=o(`class
method.`),wBr=l(),D7=a("p"),ABr=o("This class cannot be instantiated directly using "),s6e=a("code"),LBr=o("__init__()"),BBr=o(" (throws an error)."),xBr=l(),$t=a("div"),f(q7.$$.fragment),kBr=l(),l6e=a("p"),RBr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),SBr=l(),Af=a("p"),PBr=o(`Note:
Loading a model from its configuration file does `),i6e=a("strong"),$Br=o("not"),IBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),d6e=a("code"),jBr=o("from_pretrained()"),NBr=o("to load the model weights."),DBr=l(),c6e=a("p"),qBr=o("Examples:"),GBr=l(),f(G7.$$.fragment),OBr=l(),Io=a("div"),f(O7.$$.fragment),XBr=l(),f6e=a("p"),VBr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),zBr=l(),Nn=a("p"),WBr=o("The model class to instantiate is selected based on the "),m6e=a("code"),QBr=o("model_type"),HBr=o(` property of the config object (either
passed as an argument or loaded from `),g6e=a("code"),UBr=o("pretrained_model_name_or_path"),JBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h6e=a("code"),YBr=o("pretrained_model_name_or_path"),KBr=o(":"),ZBr=l(),p6e=a("ul"),aM=a("li"),_6e=a("strong"),exr=o("bert"),oxr=o(" \u2014 "),Jz=a("a"),rxr=o("FlaxBertForNextSentencePrediction"),txr=o(" (BERT model)"),axr=l(),u6e=a("p"),nxr=o("Examples:"),sxr=l(),f(X7.$$.fragment),gSe=l(),Lf=a("h2"),nM=a("a"),b6e=a("span"),f(V7.$$.fragment),lxr=l(),v6e=a("span"),ixr=o("FlaxAutoModelForImageClassification"),hSe=l(),Or=a("div"),f(z7.$$.fragment),dxr=l(),Bf=a("p"),cxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),T6e=a("code"),fxr=o("from_pretrained()"),mxr=o("class method or the "),F6e=a("code"),gxr=o("from_config()"),hxr=o(`class
method.`),pxr=l(),W7=a("p"),_xr=o("This class cannot be instantiated directly using "),C6e=a("code"),uxr=o("__init__()"),bxr=o(" (throws an error)."),vxr=l(),It=a("div"),f(Q7.$$.fragment),Txr=l(),M6e=a("p"),Fxr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Cxr=l(),xf=a("p"),Mxr=o(`Note:
Loading a model from its configuration file does `),E6e=a("strong"),Exr=o("not"),yxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),y6e=a("code"),wxr=o("from_pretrained()"),Axr=o("to load the model weights."),Lxr=l(),w6e=a("p"),Bxr=o("Examples:"),xxr=l(),f(H7.$$.fragment),kxr=l(),jo=a("div"),f(U7.$$.fragment),Rxr=l(),A6e=a("p"),Sxr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Pxr=l(),Dn=a("p"),$xr=o("The model class to instantiate is selected based on the "),L6e=a("code"),Ixr=o("model_type"),jxr=o(` property of the config object (either
passed as an argument or loaded from `),B6e=a("code"),Nxr=o("pretrained_model_name_or_path"),Dxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x6e=a("code"),qxr=o("pretrained_model_name_or_path"),Gxr=o(":"),Oxr=l(),J7=a("ul"),sM=a("li"),k6e=a("strong"),Xxr=o("beit"),Vxr=o(" \u2014 "),Yz=a("a"),zxr=o("FlaxBeitForImageClassification"),Wxr=o(" (BEiT model)"),Qxr=l(),lM=a("li"),R6e=a("strong"),Hxr=o("vit"),Uxr=o(" \u2014 "),Kz=a("a"),Jxr=o("FlaxViTForImageClassification"),Yxr=o(" (ViT model)"),Kxr=l(),S6e=a("p"),Zxr=o("Examples:"),ekr=l(),f(Y7.$$.fragment),pSe=l(),kf=a("h2"),iM=a("a"),P6e=a("span"),f(K7.$$.fragment),okr=l(),$6e=a("span"),rkr=o("FlaxAutoModelForVision2Seq"),_Se=l(),Xr=a("div"),f(Z7.$$.fragment),tkr=l(),Rf=a("p"),akr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),I6e=a("code"),nkr=o("from_pretrained()"),skr=o("class method or the "),j6e=a("code"),lkr=o("from_config()"),ikr=o(`class
method.`),dkr=l(),e8=a("p"),ckr=o("This class cannot be instantiated directly using "),N6e=a("code"),fkr=o("__init__()"),mkr=o(" (throws an error)."),gkr=l(),jt=a("div"),f(o8.$$.fragment),hkr=l(),D6e=a("p"),pkr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_kr=l(),Sf=a("p"),ukr=o(`Note:
Loading a model from its configuration file does `),q6e=a("strong"),bkr=o("not"),vkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),G6e=a("code"),Tkr=o("from_pretrained()"),Fkr=o("to load the model weights."),Ckr=l(),O6e=a("p"),Mkr=o("Examples:"),Ekr=l(),f(r8.$$.fragment),ykr=l(),No=a("div"),f(t8.$$.fragment),wkr=l(),X6e=a("p"),Akr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Lkr=l(),qn=a("p"),Bkr=o("The model class to instantiate is selected based on the "),V6e=a("code"),xkr=o("model_type"),kkr=o(` property of the config object (either
passed as an argument or loaded from `),z6e=a("code"),Rkr=o("pretrained_model_name_or_path"),Skr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W6e=a("code"),Pkr=o("pretrained_model_name_or_path"),$kr=o(":"),Ikr=l(),Q6e=a("ul"),dM=a("li"),H6e=a("strong"),jkr=o("vision-encoder-decoder"),Nkr=o(" \u2014 "),Zz=a("a"),Dkr=o("FlaxVisionEncoderDecoderModel"),qkr=o(" (Vision Encoder decoder model)"),Gkr=l(),U6e=a("p"),Okr=o("Examples:"),Xkr=l(),f(a8.$$.fragment),this.h()},l(c){const u=KFt('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var n8=s(de);Ee=n(n8,"A",{id:!0,class:!0,href:!0});var J6e=s(Ee);lo=n(J6e,"SPAN",{});var Y6e=s(lo);m(me.$$.fragment,Y6e),Y6e.forEach(t),J6e.forEach(t),Ce=i(n8),Vo=n(n8,"SPAN",{});var zkr=s(Vo);Ii=r(zkr,"Auto Classes"),zkr.forEach(t),n8.forEach(t),If=i(c),fa=n(c,"P",{});var bSe=s(fa);ji=r(bSe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n(bSe,"CODE",{});var Wkr=s(Ni);dE=r(Wkr,"from_pretrained()"),Wkr.forEach(t),jf=r(bSe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),bSe.forEach(t),Be=i(c),co=n(c,"P",{});var cM=s(co);Di=r(cM,"Instantiating one of "),Gn=n(cM,"A",{href:!0});var Qkr=s(Gn);cE=r(Qkr,"AutoConfig"),Qkr.forEach(t),On=r(cM,", "),Xn=n(cM,"A",{href:!0});var Hkr=s(Xn);fE=r(Hkr,"AutoModel"),Hkr.forEach(t),qi=r(cM,`, and
`),Vn=n(cM,"A",{href:!0});var Ukr=s(Vn);mE=r(Ukr,"AutoTokenizer"),Ukr.forEach(t),Gi=r(cM," will directly create a class of the relevant architecture. For instance"),cM.forEach(t),Nf=i(c),m(qa.$$.fragment,c),fo=i(c),_e=n(c,"P",{});var vSe=s(_e);r9=r(vSe,"will create a model that is an instance of "),Oi=n(vSe,"A",{href:!0});var Jkr=s(Oi);t9=r(Jkr,"BertModel"),Jkr.forEach(t),a9=r(vSe,"."),vSe.forEach(t),zo=i(c),Ga=n(c,"P",{});var TSe=s(Ga);n9=r(TSe,"There is one class of "),Df=n(TSe,"CODE",{});var Ykr=s(Df);s9=r(Ykr,"AutoModel"),Ykr.forEach(t),x$e=r(TSe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),TSe.forEach(t),_ke=i(c),Xi=n(c,"H2",{class:!0});var FSe=s(Xi);qf=n(FSe,"A",{id:!0,class:!0,href:!0});var Kkr=s(qf);WQ=n(Kkr,"SPAN",{});var Zkr=s(WQ);m(gE.$$.fragment,Zkr),Zkr.forEach(t),Kkr.forEach(t),k$e=i(FSe),QQ=n(FSe,"SPAN",{});var eRr=s(QQ);R$e=r(eRr,"Extending the Auto Classes"),eRr.forEach(t),FSe.forEach(t),uke=i(c),zn=n(c,"P",{});var eW=s(zn);S$e=r(eW,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),HQ=n(eW,"CODE",{});var oRr=s(HQ);P$e=r(oRr,"NewModel"),oRr.forEach(t),$$e=r(eW,", make sure you have a "),UQ=n(eW,"CODE",{});var rRr=s(UQ);I$e=r(rRr,"NewModelConfig"),rRr.forEach(t),j$e=r(eW,` then you can add those to the auto
classes like this:`),eW.forEach(t),bke=i(c),m(hE.$$.fragment,c),vke=i(c),l9=n(c,"P",{});var tRr=s(l9);N$e=r(tRr,"You will then be able to use the auto classes like you would usually do!"),tRr.forEach(t),Tke=i(c),m(Gf.$$.fragment,c),Fke=i(c),Vi=n(c,"H2",{class:!0});var CSe=s(Vi);Of=n(CSe,"A",{id:!0,class:!0,href:!0});var aRr=s(Of);JQ=n(aRr,"SPAN",{});var nRr=s(JQ);m(pE.$$.fragment,nRr),nRr.forEach(t),aRr.forEach(t),D$e=i(CSe),YQ=n(CSe,"SPAN",{});var sRr=s(YQ);q$e=r(sRr,"AutoConfig"),sRr.forEach(t),CSe.forEach(t),Cke=i(c),Wo=n(c,"DIV",{class:!0});var Os=s(Wo);m(_E.$$.fragment,Os),G$e=i(Os),uE=n(Os,"P",{});var MSe=s(uE);O$e=r(MSe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),i9=n(MSe,"A",{href:!0});var lRr=s(i9);X$e=r(lRr,"from_pretrained()"),lRr.forEach(t),V$e=r(MSe," class method."),MSe.forEach(t),z$e=i(Os),bE=n(Os,"P",{});var ESe=s(bE);W$e=r(ESe,"This class cannot be instantiated directly using "),KQ=n(ESe,"CODE",{});var iRr=s(KQ);Q$e=r(iRr,"__init__()"),iRr.forEach(t),H$e=r(ESe," (throws an error)."),ESe.forEach(t),U$e=i(Os),mo=n(Os,"DIV",{class:!0});var ga=s(mo);m(vE.$$.fragment,ga),J$e=i(ga),ZQ=n(ga,"P",{});var dRr=s(ZQ);Y$e=r(dRr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),dRr.forEach(t),K$e=i(ga),zi=n(ga,"P",{});var oW=s(zi);Z$e=r(oW,"The configuration class to instantiate is selected based on the "),eH=n(oW,"CODE",{});var cRr=s(eH);eIe=r(cRr,"model_type"),cRr.forEach(t),oIe=r(oW,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),oH=n(oW,"CODE",{});var fRr=s(oH);rIe=r(fRr,"pretrained_model_name_or_path"),fRr.forEach(t),tIe=r(oW,":"),oW.forEach(t),aIe=i(ga),v=n(ga,"UL",{});var T=s(v);Xf=n(T,"LI",{});var K6e=s(Xf);rH=n(K6e,"STRONG",{});var mRr=s(rH);nIe=r(mRr,"albert"),mRr.forEach(t),sIe=r(K6e," \u2014 "),d9=n(K6e,"A",{href:!0});var gRr=s(d9);lIe=r(gRr,"AlbertConfig"),gRr.forEach(t),iIe=r(K6e," (ALBERT model)"),K6e.forEach(t),dIe=i(T),Vf=n(T,"LI",{});var Z6e=s(Vf);tH=n(Z6e,"STRONG",{});var hRr=s(tH);cIe=r(hRr,"bart"),hRr.forEach(t),fIe=r(Z6e," \u2014 "),c9=n(Z6e,"A",{href:!0});var pRr=s(c9);mIe=r(pRr,"BartConfig"),pRr.forEach(t),gIe=r(Z6e," (BART model)"),Z6e.forEach(t),hIe=i(T),zf=n(T,"LI",{});var e0e=s(zf);aH=n(e0e,"STRONG",{});var _Rr=s(aH);pIe=r(_Rr,"beit"),_Rr.forEach(t),_Ie=r(e0e," \u2014 "),f9=n(e0e,"A",{href:!0});var uRr=s(f9);uIe=r(uRr,"BeitConfig"),uRr.forEach(t),bIe=r(e0e," (BEiT model)"),e0e.forEach(t),vIe=i(T),Wf=n(T,"LI",{});var o0e=s(Wf);nH=n(o0e,"STRONG",{});var bRr=s(nH);TIe=r(bRr,"bert"),bRr.forEach(t),FIe=r(o0e," \u2014 "),m9=n(o0e,"A",{href:!0});var vRr=s(m9);CIe=r(vRr,"BertConfig"),vRr.forEach(t),MIe=r(o0e," (BERT model)"),o0e.forEach(t),EIe=i(T),Qf=n(T,"LI",{});var r0e=s(Qf);sH=n(r0e,"STRONG",{});var TRr=s(sH);yIe=r(TRr,"bert-generation"),TRr.forEach(t),wIe=r(r0e," \u2014 "),g9=n(r0e,"A",{href:!0});var FRr=s(g9);AIe=r(FRr,"BertGenerationConfig"),FRr.forEach(t),LIe=r(r0e," (Bert Generation model)"),r0e.forEach(t),BIe=i(T),Hf=n(T,"LI",{});var t0e=s(Hf);lH=n(t0e,"STRONG",{});var CRr=s(lH);xIe=r(CRr,"big_bird"),CRr.forEach(t),kIe=r(t0e," \u2014 "),h9=n(t0e,"A",{href:!0});var MRr=s(h9);RIe=r(MRr,"BigBirdConfig"),MRr.forEach(t),SIe=r(t0e," (BigBird model)"),t0e.forEach(t),PIe=i(T),Uf=n(T,"LI",{});var a0e=s(Uf);iH=n(a0e,"STRONG",{});var ERr=s(iH);$Ie=r(ERr,"bigbird_pegasus"),ERr.forEach(t),IIe=r(a0e," \u2014 "),p9=n(a0e,"A",{href:!0});var yRr=s(p9);jIe=r(yRr,"BigBirdPegasusConfig"),yRr.forEach(t),NIe=r(a0e," (BigBirdPegasus model)"),a0e.forEach(t),DIe=i(T),Jf=n(T,"LI",{});var n0e=s(Jf);dH=n(n0e,"STRONG",{});var wRr=s(dH);qIe=r(wRr,"blenderbot"),wRr.forEach(t),GIe=r(n0e," \u2014 "),_9=n(n0e,"A",{href:!0});var ARr=s(_9);OIe=r(ARr,"BlenderbotConfig"),ARr.forEach(t),XIe=r(n0e," (Blenderbot model)"),n0e.forEach(t),VIe=i(T),Yf=n(T,"LI",{});var s0e=s(Yf);cH=n(s0e,"STRONG",{});var LRr=s(cH);zIe=r(LRr,"blenderbot-small"),LRr.forEach(t),WIe=r(s0e," \u2014 "),u9=n(s0e,"A",{href:!0});var BRr=s(u9);QIe=r(BRr,"BlenderbotSmallConfig"),BRr.forEach(t),HIe=r(s0e," (BlenderbotSmall model)"),s0e.forEach(t),UIe=i(T),Kf=n(T,"LI",{});var l0e=s(Kf);fH=n(l0e,"STRONG",{});var xRr=s(fH);JIe=r(xRr,"camembert"),xRr.forEach(t),YIe=r(l0e," \u2014 "),b9=n(l0e,"A",{href:!0});var kRr=s(b9);KIe=r(kRr,"CamembertConfig"),kRr.forEach(t),ZIe=r(l0e," (CamemBERT model)"),l0e.forEach(t),eje=i(T),Zf=n(T,"LI",{});var i0e=s(Zf);mH=n(i0e,"STRONG",{});var RRr=s(mH);oje=r(RRr,"canine"),RRr.forEach(t),rje=r(i0e," \u2014 "),v9=n(i0e,"A",{href:!0});var SRr=s(v9);tje=r(SRr,"CanineConfig"),SRr.forEach(t),aje=r(i0e," (Canine model)"),i0e.forEach(t),nje=i(T),em=n(T,"LI",{});var d0e=s(em);gH=n(d0e,"STRONG",{});var PRr=s(gH);sje=r(PRr,"clip"),PRr.forEach(t),lje=r(d0e," \u2014 "),T9=n(d0e,"A",{href:!0});var $Rr=s(T9);ije=r($Rr,"CLIPConfig"),$Rr.forEach(t),dje=r(d0e," (CLIP model)"),d0e.forEach(t),cje=i(T),om=n(T,"LI",{});var c0e=s(om);hH=n(c0e,"STRONG",{});var IRr=s(hH);fje=r(IRr,"convbert"),IRr.forEach(t),mje=r(c0e," \u2014 "),F9=n(c0e,"A",{href:!0});var jRr=s(F9);gje=r(jRr,"ConvBertConfig"),jRr.forEach(t),hje=r(c0e," (ConvBERT model)"),c0e.forEach(t),pje=i(T),rm=n(T,"LI",{});var f0e=s(rm);pH=n(f0e,"STRONG",{});var NRr=s(pH);_je=r(NRr,"convnext"),NRr.forEach(t),uje=r(f0e," \u2014 "),C9=n(f0e,"A",{href:!0});var DRr=s(C9);bje=r(DRr,"ConvNextConfig"),DRr.forEach(t),vje=r(f0e," (ConvNext model)"),f0e.forEach(t),Tje=i(T),tm=n(T,"LI",{});var m0e=s(tm);_H=n(m0e,"STRONG",{});var qRr=s(_H);Fje=r(qRr,"ctrl"),qRr.forEach(t),Cje=r(m0e," \u2014 "),M9=n(m0e,"A",{href:!0});var GRr=s(M9);Mje=r(GRr,"CTRLConfig"),GRr.forEach(t),Eje=r(m0e," (CTRL model)"),m0e.forEach(t),yje=i(T),am=n(T,"LI",{});var g0e=s(am);uH=n(g0e,"STRONG",{});var ORr=s(uH);wje=r(ORr,"data2vec-audio"),ORr.forEach(t),Aje=r(g0e," \u2014 "),E9=n(g0e,"A",{href:!0});var XRr=s(E9);Lje=r(XRr,"Data2VecAudioConfig"),XRr.forEach(t),Bje=r(g0e," (Data2VecAudio model)"),g0e.forEach(t),xje=i(T),nm=n(T,"LI",{});var h0e=s(nm);bH=n(h0e,"STRONG",{});var VRr=s(bH);kje=r(VRr,"data2vec-text"),VRr.forEach(t),Rje=r(h0e," \u2014 "),y9=n(h0e,"A",{href:!0});var zRr=s(y9);Sje=r(zRr,"Data2VecTextConfig"),zRr.forEach(t),Pje=r(h0e," (Data2VecText model)"),h0e.forEach(t),$je=i(T),sm=n(T,"LI",{});var p0e=s(sm);vH=n(p0e,"STRONG",{});var WRr=s(vH);Ije=r(WRr,"deberta"),WRr.forEach(t),jje=r(p0e," \u2014 "),w9=n(p0e,"A",{href:!0});var QRr=s(w9);Nje=r(QRr,"DebertaConfig"),QRr.forEach(t),Dje=r(p0e," (DeBERTa model)"),p0e.forEach(t),qje=i(T),lm=n(T,"LI",{});var _0e=s(lm);TH=n(_0e,"STRONG",{});var HRr=s(TH);Gje=r(HRr,"deberta-v2"),HRr.forEach(t),Oje=r(_0e," \u2014 "),A9=n(_0e,"A",{href:!0});var URr=s(A9);Xje=r(URr,"DebertaV2Config"),URr.forEach(t),Vje=r(_0e," (DeBERTa-v2 model)"),_0e.forEach(t),zje=i(T),im=n(T,"LI",{});var u0e=s(im);FH=n(u0e,"STRONG",{});var JRr=s(FH);Wje=r(JRr,"decision_transformer"),JRr.forEach(t),Qje=r(u0e," \u2014 "),L9=n(u0e,"A",{href:!0});var YRr=s(L9);Hje=r(YRr,"DecisionTransformerConfig"),YRr.forEach(t),Uje=r(u0e," (Decision Transformer model)"),u0e.forEach(t),Jje=i(T),dm=n(T,"LI",{});var b0e=s(dm);CH=n(b0e,"STRONG",{});var KRr=s(CH);Yje=r(KRr,"deit"),KRr.forEach(t),Kje=r(b0e," \u2014 "),B9=n(b0e,"A",{href:!0});var ZRr=s(B9);Zje=r(ZRr,"DeiTConfig"),ZRr.forEach(t),eNe=r(b0e," (DeiT model)"),b0e.forEach(t),oNe=i(T),cm=n(T,"LI",{});var v0e=s(cm);MH=n(v0e,"STRONG",{});var eSr=s(MH);rNe=r(eSr,"detr"),eSr.forEach(t),tNe=r(v0e," \u2014 "),x9=n(v0e,"A",{href:!0});var oSr=s(x9);aNe=r(oSr,"DetrConfig"),oSr.forEach(t),nNe=r(v0e," (DETR model)"),v0e.forEach(t),sNe=i(T),fm=n(T,"LI",{});var T0e=s(fm);EH=n(T0e,"STRONG",{});var rSr=s(EH);lNe=r(rSr,"distilbert"),rSr.forEach(t),iNe=r(T0e," \u2014 "),k9=n(T0e,"A",{href:!0});var tSr=s(k9);dNe=r(tSr,"DistilBertConfig"),tSr.forEach(t),cNe=r(T0e," (DistilBERT model)"),T0e.forEach(t),fNe=i(T),mm=n(T,"LI",{});var F0e=s(mm);yH=n(F0e,"STRONG",{});var aSr=s(yH);mNe=r(aSr,"dpr"),aSr.forEach(t),gNe=r(F0e," \u2014 "),R9=n(F0e,"A",{href:!0});var nSr=s(R9);hNe=r(nSr,"DPRConfig"),nSr.forEach(t),pNe=r(F0e," (DPR model)"),F0e.forEach(t),_Ne=i(T),gm=n(T,"LI",{});var C0e=s(gm);wH=n(C0e,"STRONG",{});var sSr=s(wH);uNe=r(sSr,"electra"),sSr.forEach(t),bNe=r(C0e," \u2014 "),S9=n(C0e,"A",{href:!0});var lSr=s(S9);vNe=r(lSr,"ElectraConfig"),lSr.forEach(t),TNe=r(C0e," (ELECTRA model)"),C0e.forEach(t),FNe=i(T),hm=n(T,"LI",{});var M0e=s(hm);AH=n(M0e,"STRONG",{});var iSr=s(AH);CNe=r(iSr,"encoder-decoder"),iSr.forEach(t),MNe=r(M0e," \u2014 "),P9=n(M0e,"A",{href:!0});var dSr=s(P9);ENe=r(dSr,"EncoderDecoderConfig"),dSr.forEach(t),yNe=r(M0e," (Encoder decoder model)"),M0e.forEach(t),wNe=i(T),pm=n(T,"LI",{});var E0e=s(pm);LH=n(E0e,"STRONG",{});var cSr=s(LH);ANe=r(cSr,"flaubert"),cSr.forEach(t),LNe=r(E0e," \u2014 "),$9=n(E0e,"A",{href:!0});var fSr=s($9);BNe=r(fSr,"FlaubertConfig"),fSr.forEach(t),xNe=r(E0e," (FlauBERT model)"),E0e.forEach(t),kNe=i(T),_m=n(T,"LI",{});var y0e=s(_m);BH=n(y0e,"STRONG",{});var mSr=s(BH);RNe=r(mSr,"fnet"),mSr.forEach(t),SNe=r(y0e," \u2014 "),I9=n(y0e,"A",{href:!0});var gSr=s(I9);PNe=r(gSr,"FNetConfig"),gSr.forEach(t),$Ne=r(y0e," (FNet model)"),y0e.forEach(t),INe=i(T),um=n(T,"LI",{});var w0e=s(um);xH=n(w0e,"STRONG",{});var hSr=s(xH);jNe=r(hSr,"fsmt"),hSr.forEach(t),NNe=r(w0e," \u2014 "),j9=n(w0e,"A",{href:!0});var pSr=s(j9);DNe=r(pSr,"FSMTConfig"),pSr.forEach(t),qNe=r(w0e," (FairSeq Machine-Translation model)"),w0e.forEach(t),GNe=i(T),bm=n(T,"LI",{});var A0e=s(bm);kH=n(A0e,"STRONG",{});var _Sr=s(kH);ONe=r(_Sr,"funnel"),_Sr.forEach(t),XNe=r(A0e," \u2014 "),N9=n(A0e,"A",{href:!0});var uSr=s(N9);VNe=r(uSr,"FunnelConfig"),uSr.forEach(t),zNe=r(A0e," (Funnel Transformer model)"),A0e.forEach(t),WNe=i(T),vm=n(T,"LI",{});var L0e=s(vm);RH=n(L0e,"STRONG",{});var bSr=s(RH);QNe=r(bSr,"glpn"),bSr.forEach(t),HNe=r(L0e," \u2014 "),D9=n(L0e,"A",{href:!0});var vSr=s(D9);UNe=r(vSr,"GLPNConfig"),vSr.forEach(t),JNe=r(L0e," (GLPN model)"),L0e.forEach(t),YNe=i(T),Tm=n(T,"LI",{});var B0e=s(Tm);SH=n(B0e,"STRONG",{});var TSr=s(SH);KNe=r(TSr,"gpt2"),TSr.forEach(t),ZNe=r(B0e," \u2014 "),q9=n(B0e,"A",{href:!0});var FSr=s(q9);eDe=r(FSr,"GPT2Config"),FSr.forEach(t),oDe=r(B0e," (OpenAI GPT-2 model)"),B0e.forEach(t),rDe=i(T),Fm=n(T,"LI",{});var x0e=s(Fm);PH=n(x0e,"STRONG",{});var CSr=s(PH);tDe=r(CSr,"gpt_neo"),CSr.forEach(t),aDe=r(x0e," \u2014 "),G9=n(x0e,"A",{href:!0});var MSr=s(G9);nDe=r(MSr,"GPTNeoConfig"),MSr.forEach(t),sDe=r(x0e," (GPT Neo model)"),x0e.forEach(t),lDe=i(T),Cm=n(T,"LI",{});var k0e=s(Cm);$H=n(k0e,"STRONG",{});var ESr=s($H);iDe=r(ESr,"gptj"),ESr.forEach(t),dDe=r(k0e," \u2014 "),O9=n(k0e,"A",{href:!0});var ySr=s(O9);cDe=r(ySr,"GPTJConfig"),ySr.forEach(t),fDe=r(k0e," (GPT-J model)"),k0e.forEach(t),mDe=i(T),Mm=n(T,"LI",{});var R0e=s(Mm);IH=n(R0e,"STRONG",{});var wSr=s(IH);gDe=r(wSr,"hubert"),wSr.forEach(t),hDe=r(R0e," \u2014 "),X9=n(R0e,"A",{href:!0});var ASr=s(X9);pDe=r(ASr,"HubertConfig"),ASr.forEach(t),_De=r(R0e," (Hubert model)"),R0e.forEach(t),uDe=i(T),Em=n(T,"LI",{});var S0e=s(Em);jH=n(S0e,"STRONG",{});var LSr=s(jH);bDe=r(LSr,"ibert"),LSr.forEach(t),vDe=r(S0e," \u2014 "),V9=n(S0e,"A",{href:!0});var BSr=s(V9);TDe=r(BSr,"IBertConfig"),BSr.forEach(t),FDe=r(S0e," (I-BERT model)"),S0e.forEach(t),CDe=i(T),ym=n(T,"LI",{});var P0e=s(ym);NH=n(P0e,"STRONG",{});var xSr=s(NH);MDe=r(xSr,"imagegpt"),xSr.forEach(t),EDe=r(P0e," \u2014 "),z9=n(P0e,"A",{href:!0});var kSr=s(z9);yDe=r(kSr,"ImageGPTConfig"),kSr.forEach(t),wDe=r(P0e," (ImageGPT model)"),P0e.forEach(t),ADe=i(T),wm=n(T,"LI",{});var $0e=s(wm);DH=n($0e,"STRONG",{});var RSr=s(DH);LDe=r(RSr,"layoutlm"),RSr.forEach(t),BDe=r($0e," \u2014 "),W9=n($0e,"A",{href:!0});var SSr=s(W9);xDe=r(SSr,"LayoutLMConfig"),SSr.forEach(t),kDe=r($0e," (LayoutLM model)"),$0e.forEach(t),RDe=i(T),Am=n(T,"LI",{});var I0e=s(Am);qH=n(I0e,"STRONG",{});var PSr=s(qH);SDe=r(PSr,"layoutlmv2"),PSr.forEach(t),PDe=r(I0e," \u2014 "),Q9=n(I0e,"A",{href:!0});var $Sr=s(Q9);$De=r($Sr,"LayoutLMv2Config"),$Sr.forEach(t),IDe=r(I0e," (LayoutLMv2 model)"),I0e.forEach(t),jDe=i(T),Lm=n(T,"LI",{});var j0e=s(Lm);GH=n(j0e,"STRONG",{});var ISr=s(GH);NDe=r(ISr,"led"),ISr.forEach(t),DDe=r(j0e," \u2014 "),H9=n(j0e,"A",{href:!0});var jSr=s(H9);qDe=r(jSr,"LEDConfig"),jSr.forEach(t),GDe=r(j0e," (LED model)"),j0e.forEach(t),ODe=i(T),Bm=n(T,"LI",{});var N0e=s(Bm);OH=n(N0e,"STRONG",{});var NSr=s(OH);XDe=r(NSr,"longformer"),NSr.forEach(t),VDe=r(N0e," \u2014 "),U9=n(N0e,"A",{href:!0});var DSr=s(U9);zDe=r(DSr,"LongformerConfig"),DSr.forEach(t),WDe=r(N0e," (Longformer model)"),N0e.forEach(t),QDe=i(T),xm=n(T,"LI",{});var D0e=s(xm);XH=n(D0e,"STRONG",{});var qSr=s(XH);HDe=r(qSr,"luke"),qSr.forEach(t),UDe=r(D0e," \u2014 "),J9=n(D0e,"A",{href:!0});var GSr=s(J9);JDe=r(GSr,"LukeConfig"),GSr.forEach(t),YDe=r(D0e," (LUKE model)"),D0e.forEach(t),KDe=i(T),km=n(T,"LI",{});var q0e=s(km);VH=n(q0e,"STRONG",{});var OSr=s(VH);ZDe=r(OSr,"lxmert"),OSr.forEach(t),eqe=r(q0e," \u2014 "),Y9=n(q0e,"A",{href:!0});var XSr=s(Y9);oqe=r(XSr,"LxmertConfig"),XSr.forEach(t),rqe=r(q0e," (LXMERT model)"),q0e.forEach(t),tqe=i(T),Rm=n(T,"LI",{});var G0e=s(Rm);zH=n(G0e,"STRONG",{});var VSr=s(zH);aqe=r(VSr,"m2m_100"),VSr.forEach(t),nqe=r(G0e," \u2014 "),K9=n(G0e,"A",{href:!0});var zSr=s(K9);sqe=r(zSr,"M2M100Config"),zSr.forEach(t),lqe=r(G0e," (M2M100 model)"),G0e.forEach(t),iqe=i(T),Sm=n(T,"LI",{});var O0e=s(Sm);WH=n(O0e,"STRONG",{});var WSr=s(WH);dqe=r(WSr,"marian"),WSr.forEach(t),cqe=r(O0e," \u2014 "),Z9=n(O0e,"A",{href:!0});var QSr=s(Z9);fqe=r(QSr,"MarianConfig"),QSr.forEach(t),mqe=r(O0e," (Marian model)"),O0e.forEach(t),gqe=i(T),Pm=n(T,"LI",{});var X0e=s(Pm);QH=n(X0e,"STRONG",{});var HSr=s(QH);hqe=r(HSr,"maskformer"),HSr.forEach(t),pqe=r(X0e," \u2014 "),eB=n(X0e,"A",{href:!0});var USr=s(eB);_qe=r(USr,"MaskFormerConfig"),USr.forEach(t),uqe=r(X0e," (MaskFormer model)"),X0e.forEach(t),bqe=i(T),$m=n(T,"LI",{});var V0e=s($m);HH=n(V0e,"STRONG",{});var JSr=s(HH);vqe=r(JSr,"mbart"),JSr.forEach(t),Tqe=r(V0e," \u2014 "),oB=n(V0e,"A",{href:!0});var YSr=s(oB);Fqe=r(YSr,"MBartConfig"),YSr.forEach(t),Cqe=r(V0e," (mBART model)"),V0e.forEach(t),Mqe=i(T),Im=n(T,"LI",{});var z0e=s(Im);UH=n(z0e,"STRONG",{});var KSr=s(UH);Eqe=r(KSr,"megatron-bert"),KSr.forEach(t),yqe=r(z0e," \u2014 "),rB=n(z0e,"A",{href:!0});var ZSr=s(rB);wqe=r(ZSr,"MegatronBertConfig"),ZSr.forEach(t),Aqe=r(z0e," (MegatronBert model)"),z0e.forEach(t),Lqe=i(T),jm=n(T,"LI",{});var W0e=s(jm);JH=n(W0e,"STRONG",{});var ePr=s(JH);Bqe=r(ePr,"mobilebert"),ePr.forEach(t),xqe=r(W0e," \u2014 "),tB=n(W0e,"A",{href:!0});var oPr=s(tB);kqe=r(oPr,"MobileBertConfig"),oPr.forEach(t),Rqe=r(W0e," (MobileBERT model)"),W0e.forEach(t),Sqe=i(T),Nm=n(T,"LI",{});var Q0e=s(Nm);YH=n(Q0e,"STRONG",{});var rPr=s(YH);Pqe=r(rPr,"mpnet"),rPr.forEach(t),$qe=r(Q0e," \u2014 "),aB=n(Q0e,"A",{href:!0});var tPr=s(aB);Iqe=r(tPr,"MPNetConfig"),tPr.forEach(t),jqe=r(Q0e," (MPNet model)"),Q0e.forEach(t),Nqe=i(T),Dm=n(T,"LI",{});var H0e=s(Dm);KH=n(H0e,"STRONG",{});var aPr=s(KH);Dqe=r(aPr,"mt5"),aPr.forEach(t),qqe=r(H0e," \u2014 "),nB=n(H0e,"A",{href:!0});var nPr=s(nB);Gqe=r(nPr,"MT5Config"),nPr.forEach(t),Oqe=r(H0e," (mT5 model)"),H0e.forEach(t),Xqe=i(T),qm=n(T,"LI",{});var U0e=s(qm);ZH=n(U0e,"STRONG",{});var sPr=s(ZH);Vqe=r(sPr,"nystromformer"),sPr.forEach(t),zqe=r(U0e," \u2014 "),sB=n(U0e,"A",{href:!0});var lPr=s(sB);Wqe=r(lPr,"NystromformerConfig"),lPr.forEach(t),Qqe=r(U0e," (Nystromformer model)"),U0e.forEach(t),Hqe=i(T),Gm=n(T,"LI",{});var J0e=s(Gm);eU=n(J0e,"STRONG",{});var iPr=s(eU);Uqe=r(iPr,"openai-gpt"),iPr.forEach(t),Jqe=r(J0e," \u2014 "),lB=n(J0e,"A",{href:!0});var dPr=s(lB);Yqe=r(dPr,"OpenAIGPTConfig"),dPr.forEach(t),Kqe=r(J0e," (OpenAI GPT model)"),J0e.forEach(t),Zqe=i(T),Om=n(T,"LI",{});var Y0e=s(Om);oU=n(Y0e,"STRONG",{});var cPr=s(oU);eGe=r(cPr,"pegasus"),cPr.forEach(t),oGe=r(Y0e," \u2014 "),iB=n(Y0e,"A",{href:!0});var fPr=s(iB);rGe=r(fPr,"PegasusConfig"),fPr.forEach(t),tGe=r(Y0e," (Pegasus model)"),Y0e.forEach(t),aGe=i(T),Xm=n(T,"LI",{});var K0e=s(Xm);rU=n(K0e,"STRONG",{});var mPr=s(rU);nGe=r(mPr,"perceiver"),mPr.forEach(t),sGe=r(K0e," \u2014 "),dB=n(K0e,"A",{href:!0});var gPr=s(dB);lGe=r(gPr,"PerceiverConfig"),gPr.forEach(t),iGe=r(K0e," (Perceiver model)"),K0e.forEach(t),dGe=i(T),Vm=n(T,"LI",{});var Z0e=s(Vm);tU=n(Z0e,"STRONG",{});var hPr=s(tU);cGe=r(hPr,"plbart"),hPr.forEach(t),fGe=r(Z0e," \u2014 "),cB=n(Z0e,"A",{href:!0});var pPr=s(cB);mGe=r(pPr,"PLBartConfig"),pPr.forEach(t),gGe=r(Z0e," (PLBart model)"),Z0e.forEach(t),hGe=i(T),zm=n(T,"LI",{});var eTe=s(zm);aU=n(eTe,"STRONG",{});var _Pr=s(aU);pGe=r(_Pr,"poolformer"),_Pr.forEach(t),_Ge=r(eTe," \u2014 "),fB=n(eTe,"A",{href:!0});var uPr=s(fB);uGe=r(uPr,"PoolFormerConfig"),uPr.forEach(t),bGe=r(eTe," (PoolFormer model)"),eTe.forEach(t),vGe=i(T),Wm=n(T,"LI",{});var oTe=s(Wm);nU=n(oTe,"STRONG",{});var bPr=s(nU);TGe=r(bPr,"prophetnet"),bPr.forEach(t),FGe=r(oTe," \u2014 "),mB=n(oTe,"A",{href:!0});var vPr=s(mB);CGe=r(vPr,"ProphetNetConfig"),vPr.forEach(t),MGe=r(oTe," (ProphetNet model)"),oTe.forEach(t),EGe=i(T),Qm=n(T,"LI",{});var rTe=s(Qm);sU=n(rTe,"STRONG",{});var TPr=s(sU);yGe=r(TPr,"qdqbert"),TPr.forEach(t),wGe=r(rTe," \u2014 "),gB=n(rTe,"A",{href:!0});var FPr=s(gB);AGe=r(FPr,"QDQBertConfig"),FPr.forEach(t),LGe=r(rTe," (QDQBert model)"),rTe.forEach(t),BGe=i(T),Hm=n(T,"LI",{});var tTe=s(Hm);lU=n(tTe,"STRONG",{});var CPr=s(lU);xGe=r(CPr,"rag"),CPr.forEach(t),kGe=r(tTe," \u2014 "),hB=n(tTe,"A",{href:!0});var MPr=s(hB);RGe=r(MPr,"RagConfig"),MPr.forEach(t),SGe=r(tTe," (RAG model)"),tTe.forEach(t),PGe=i(T),Um=n(T,"LI",{});var aTe=s(Um);iU=n(aTe,"STRONG",{});var EPr=s(iU);$Ge=r(EPr,"realm"),EPr.forEach(t),IGe=r(aTe," \u2014 "),pB=n(aTe,"A",{href:!0});var yPr=s(pB);jGe=r(yPr,"RealmConfig"),yPr.forEach(t),NGe=r(aTe," (Realm model)"),aTe.forEach(t),DGe=i(T),Jm=n(T,"LI",{});var nTe=s(Jm);dU=n(nTe,"STRONG",{});var wPr=s(dU);qGe=r(wPr,"reformer"),wPr.forEach(t),GGe=r(nTe," \u2014 "),_B=n(nTe,"A",{href:!0});var APr=s(_B);OGe=r(APr,"ReformerConfig"),APr.forEach(t),XGe=r(nTe," (Reformer model)"),nTe.forEach(t),VGe=i(T),Ym=n(T,"LI",{});var sTe=s(Ym);cU=n(sTe,"STRONG",{});var LPr=s(cU);zGe=r(LPr,"rembert"),LPr.forEach(t),WGe=r(sTe," \u2014 "),uB=n(sTe,"A",{href:!0});var BPr=s(uB);QGe=r(BPr,"RemBertConfig"),BPr.forEach(t),HGe=r(sTe," (RemBERT model)"),sTe.forEach(t),UGe=i(T),Km=n(T,"LI",{});var lTe=s(Km);fU=n(lTe,"STRONG",{});var xPr=s(fU);JGe=r(xPr,"resnet"),xPr.forEach(t),YGe=r(lTe," \u2014 "),bB=n(lTe,"A",{href:!0});var kPr=s(bB);KGe=r(kPr,"ResNetConfig"),kPr.forEach(t),ZGe=r(lTe," (ResNet model)"),lTe.forEach(t),eOe=i(T),Zm=n(T,"LI",{});var iTe=s(Zm);mU=n(iTe,"STRONG",{});var RPr=s(mU);oOe=r(RPr,"retribert"),RPr.forEach(t),rOe=r(iTe," \u2014 "),vB=n(iTe,"A",{href:!0});var SPr=s(vB);tOe=r(SPr,"RetriBertConfig"),SPr.forEach(t),aOe=r(iTe," (RetriBERT model)"),iTe.forEach(t),nOe=i(T),eg=n(T,"LI",{});var dTe=s(eg);gU=n(dTe,"STRONG",{});var PPr=s(gU);sOe=r(PPr,"roberta"),PPr.forEach(t),lOe=r(dTe," \u2014 "),TB=n(dTe,"A",{href:!0});var $Pr=s(TB);iOe=r($Pr,"RobertaConfig"),$Pr.forEach(t),dOe=r(dTe," (RoBERTa model)"),dTe.forEach(t),cOe=i(T),og=n(T,"LI",{});var cTe=s(og);hU=n(cTe,"STRONG",{});var IPr=s(hU);fOe=r(IPr,"roformer"),IPr.forEach(t),mOe=r(cTe," \u2014 "),FB=n(cTe,"A",{href:!0});var jPr=s(FB);gOe=r(jPr,"RoFormerConfig"),jPr.forEach(t),hOe=r(cTe," (RoFormer model)"),cTe.forEach(t),pOe=i(T),rg=n(T,"LI",{});var fTe=s(rg);pU=n(fTe,"STRONG",{});var NPr=s(pU);_Oe=r(NPr,"segformer"),NPr.forEach(t),uOe=r(fTe," \u2014 "),CB=n(fTe,"A",{href:!0});var DPr=s(CB);bOe=r(DPr,"SegformerConfig"),DPr.forEach(t),vOe=r(fTe," (SegFormer model)"),fTe.forEach(t),TOe=i(T),tg=n(T,"LI",{});var mTe=s(tg);_U=n(mTe,"STRONG",{});var qPr=s(_U);FOe=r(qPr,"sew"),qPr.forEach(t),COe=r(mTe," \u2014 "),MB=n(mTe,"A",{href:!0});var GPr=s(MB);MOe=r(GPr,"SEWConfig"),GPr.forEach(t),EOe=r(mTe," (SEW model)"),mTe.forEach(t),yOe=i(T),ag=n(T,"LI",{});var gTe=s(ag);uU=n(gTe,"STRONG",{});var OPr=s(uU);wOe=r(OPr,"sew-d"),OPr.forEach(t),AOe=r(gTe," \u2014 "),EB=n(gTe,"A",{href:!0});var XPr=s(EB);LOe=r(XPr,"SEWDConfig"),XPr.forEach(t),BOe=r(gTe," (SEW-D model)"),gTe.forEach(t),xOe=i(T),ng=n(T,"LI",{});var hTe=s(ng);bU=n(hTe,"STRONG",{});var VPr=s(bU);kOe=r(VPr,"speech-encoder-decoder"),VPr.forEach(t),ROe=r(hTe," \u2014 "),yB=n(hTe,"A",{href:!0});var zPr=s(yB);SOe=r(zPr,"SpeechEncoderDecoderConfig"),zPr.forEach(t),POe=r(hTe," (Speech Encoder decoder model)"),hTe.forEach(t),$Oe=i(T),sg=n(T,"LI",{});var pTe=s(sg);vU=n(pTe,"STRONG",{});var WPr=s(vU);IOe=r(WPr,"speech_to_text"),WPr.forEach(t),jOe=r(pTe," \u2014 "),wB=n(pTe,"A",{href:!0});var QPr=s(wB);NOe=r(QPr,"Speech2TextConfig"),QPr.forEach(t),DOe=r(pTe," (Speech2Text model)"),pTe.forEach(t),qOe=i(T),lg=n(T,"LI",{});var _Te=s(lg);TU=n(_Te,"STRONG",{});var HPr=s(TU);GOe=r(HPr,"speech_to_text_2"),HPr.forEach(t),OOe=r(_Te," \u2014 "),AB=n(_Te,"A",{href:!0});var UPr=s(AB);XOe=r(UPr,"Speech2Text2Config"),UPr.forEach(t),VOe=r(_Te," (Speech2Text2 model)"),_Te.forEach(t),zOe=i(T),ig=n(T,"LI",{});var uTe=s(ig);FU=n(uTe,"STRONG",{});var JPr=s(FU);WOe=r(JPr,"splinter"),JPr.forEach(t),QOe=r(uTe," \u2014 "),LB=n(uTe,"A",{href:!0});var YPr=s(LB);HOe=r(YPr,"SplinterConfig"),YPr.forEach(t),UOe=r(uTe," (Splinter model)"),uTe.forEach(t),JOe=i(T),dg=n(T,"LI",{});var bTe=s(dg);CU=n(bTe,"STRONG",{});var KPr=s(CU);YOe=r(KPr,"squeezebert"),KPr.forEach(t),KOe=r(bTe," \u2014 "),BB=n(bTe,"A",{href:!0});var ZPr=s(BB);ZOe=r(ZPr,"SqueezeBertConfig"),ZPr.forEach(t),eXe=r(bTe," (SqueezeBERT model)"),bTe.forEach(t),oXe=i(T),cg=n(T,"LI",{});var vTe=s(cg);MU=n(vTe,"STRONG",{});var e$r=s(MU);rXe=r(e$r,"swin"),e$r.forEach(t),tXe=r(vTe," \u2014 "),xB=n(vTe,"A",{href:!0});var o$r=s(xB);aXe=r(o$r,"SwinConfig"),o$r.forEach(t),nXe=r(vTe," (Swin model)"),vTe.forEach(t),sXe=i(T),fg=n(T,"LI",{});var TTe=s(fg);EU=n(TTe,"STRONG",{});var r$r=s(EU);lXe=r(r$r,"t5"),r$r.forEach(t),iXe=r(TTe," \u2014 "),kB=n(TTe,"A",{href:!0});var t$r=s(kB);dXe=r(t$r,"T5Config"),t$r.forEach(t),cXe=r(TTe," (T5 model)"),TTe.forEach(t),fXe=i(T),mg=n(T,"LI",{});var FTe=s(mg);yU=n(FTe,"STRONG",{});var a$r=s(yU);mXe=r(a$r,"tapas"),a$r.forEach(t),gXe=r(FTe," \u2014 "),RB=n(FTe,"A",{href:!0});var n$r=s(RB);hXe=r(n$r,"TapasConfig"),n$r.forEach(t),pXe=r(FTe," (TAPAS model)"),FTe.forEach(t),_Xe=i(T),gg=n(T,"LI",{});var CTe=s(gg);wU=n(CTe,"STRONG",{});var s$r=s(wU);uXe=r(s$r,"transfo-xl"),s$r.forEach(t),bXe=r(CTe," \u2014 "),SB=n(CTe,"A",{href:!0});var l$r=s(SB);vXe=r(l$r,"TransfoXLConfig"),l$r.forEach(t),TXe=r(CTe," (Transformer-XL model)"),CTe.forEach(t),FXe=i(T),hg=n(T,"LI",{});var MTe=s(hg);AU=n(MTe,"STRONG",{});var i$r=s(AU);CXe=r(i$r,"trocr"),i$r.forEach(t),MXe=r(MTe," \u2014 "),PB=n(MTe,"A",{href:!0});var d$r=s(PB);EXe=r(d$r,"TrOCRConfig"),d$r.forEach(t),yXe=r(MTe," (TrOCR model)"),MTe.forEach(t),wXe=i(T),pg=n(T,"LI",{});var ETe=s(pg);LU=n(ETe,"STRONG",{});var c$r=s(LU);AXe=r(c$r,"unispeech"),c$r.forEach(t),LXe=r(ETe," \u2014 "),$B=n(ETe,"A",{href:!0});var f$r=s($B);BXe=r(f$r,"UniSpeechConfig"),f$r.forEach(t),xXe=r(ETe," (UniSpeech model)"),ETe.forEach(t),kXe=i(T),_g=n(T,"LI",{});var yTe=s(_g);BU=n(yTe,"STRONG",{});var m$r=s(BU);RXe=r(m$r,"unispeech-sat"),m$r.forEach(t),SXe=r(yTe," \u2014 "),IB=n(yTe,"A",{href:!0});var g$r=s(IB);PXe=r(g$r,"UniSpeechSatConfig"),g$r.forEach(t),$Xe=r(yTe," (UniSpeechSat model)"),yTe.forEach(t),IXe=i(T),ug=n(T,"LI",{});var wTe=s(ug);xU=n(wTe,"STRONG",{});var h$r=s(xU);jXe=r(h$r,"van"),h$r.forEach(t),NXe=r(wTe," \u2014 "),jB=n(wTe,"A",{href:!0});var p$r=s(jB);DXe=r(p$r,"VanConfig"),p$r.forEach(t),qXe=r(wTe," (VAN model)"),wTe.forEach(t),GXe=i(T),bg=n(T,"LI",{});var ATe=s(bg);kU=n(ATe,"STRONG",{});var _$r=s(kU);OXe=r(_$r,"vilt"),_$r.forEach(t),XXe=r(ATe," \u2014 "),NB=n(ATe,"A",{href:!0});var u$r=s(NB);VXe=r(u$r,"ViltConfig"),u$r.forEach(t),zXe=r(ATe," (ViLT model)"),ATe.forEach(t),WXe=i(T),vg=n(T,"LI",{});var LTe=s(vg);RU=n(LTe,"STRONG",{});var b$r=s(RU);QXe=r(b$r,"vision-encoder-decoder"),b$r.forEach(t),HXe=r(LTe," \u2014 "),DB=n(LTe,"A",{href:!0});var v$r=s(DB);UXe=r(v$r,"VisionEncoderDecoderConfig"),v$r.forEach(t),JXe=r(LTe," (Vision Encoder decoder model)"),LTe.forEach(t),YXe=i(T),Tg=n(T,"LI",{});var BTe=s(Tg);SU=n(BTe,"STRONG",{});var T$r=s(SU);KXe=r(T$r,"vision-text-dual-encoder"),T$r.forEach(t),ZXe=r(BTe," \u2014 "),qB=n(BTe,"A",{href:!0});var F$r=s(qB);eVe=r(F$r,"VisionTextDualEncoderConfig"),F$r.forEach(t),oVe=r(BTe," (VisionTextDualEncoder model)"),BTe.forEach(t),rVe=i(T),Fg=n(T,"LI",{});var xTe=s(Fg);PU=n(xTe,"STRONG",{});var C$r=s(PU);tVe=r(C$r,"visual_bert"),C$r.forEach(t),aVe=r(xTe," \u2014 "),GB=n(xTe,"A",{href:!0});var M$r=s(GB);nVe=r(M$r,"VisualBertConfig"),M$r.forEach(t),sVe=r(xTe," (VisualBert model)"),xTe.forEach(t),lVe=i(T),Cg=n(T,"LI",{});var kTe=s(Cg);$U=n(kTe,"STRONG",{});var E$r=s($U);iVe=r(E$r,"vit"),E$r.forEach(t),dVe=r(kTe," \u2014 "),OB=n(kTe,"A",{href:!0});var y$r=s(OB);cVe=r(y$r,"ViTConfig"),y$r.forEach(t),fVe=r(kTe," (ViT model)"),kTe.forEach(t),mVe=i(T),Mg=n(T,"LI",{});var RTe=s(Mg);IU=n(RTe,"STRONG",{});var w$r=s(IU);gVe=r(w$r,"vit_mae"),w$r.forEach(t),hVe=r(RTe," \u2014 "),XB=n(RTe,"A",{href:!0});var A$r=s(XB);pVe=r(A$r,"ViTMAEConfig"),A$r.forEach(t),_Ve=r(RTe," (ViTMAE model)"),RTe.forEach(t),uVe=i(T),Eg=n(T,"LI",{});var STe=s(Eg);jU=n(STe,"STRONG",{});var L$r=s(jU);bVe=r(L$r,"wav2vec2"),L$r.forEach(t),vVe=r(STe," \u2014 "),VB=n(STe,"A",{href:!0});var B$r=s(VB);TVe=r(B$r,"Wav2Vec2Config"),B$r.forEach(t),FVe=r(STe," (Wav2Vec2 model)"),STe.forEach(t),CVe=i(T),yg=n(T,"LI",{});var PTe=s(yg);NU=n(PTe,"STRONG",{});var x$r=s(NU);MVe=r(x$r,"wavlm"),x$r.forEach(t),EVe=r(PTe," \u2014 "),zB=n(PTe,"A",{href:!0});var k$r=s(zB);yVe=r(k$r,"WavLMConfig"),k$r.forEach(t),wVe=r(PTe," (WavLM model)"),PTe.forEach(t),AVe=i(T),wg=n(T,"LI",{});var $Te=s(wg);DU=n($Te,"STRONG",{});var R$r=s(DU);LVe=r(R$r,"xglm"),R$r.forEach(t),BVe=r($Te," \u2014 "),WB=n($Te,"A",{href:!0});var S$r=s(WB);xVe=r(S$r,"XGLMConfig"),S$r.forEach(t),kVe=r($Te," (XGLM model)"),$Te.forEach(t),RVe=i(T),Ag=n(T,"LI",{});var ITe=s(Ag);qU=n(ITe,"STRONG",{});var P$r=s(qU);SVe=r(P$r,"xlm"),P$r.forEach(t),PVe=r(ITe," \u2014 "),QB=n(ITe,"A",{href:!0});var $$r=s(QB);$Ve=r($$r,"XLMConfig"),$$r.forEach(t),IVe=r(ITe," (XLM model)"),ITe.forEach(t),jVe=i(T),Lg=n(T,"LI",{});var jTe=s(Lg);GU=n(jTe,"STRONG",{});var I$r=s(GU);NVe=r(I$r,"xlm-prophetnet"),I$r.forEach(t),DVe=r(jTe," \u2014 "),HB=n(jTe,"A",{href:!0});var j$r=s(HB);qVe=r(j$r,"XLMProphetNetConfig"),j$r.forEach(t),GVe=r(jTe," (XLMProphetNet model)"),jTe.forEach(t),OVe=i(T),Bg=n(T,"LI",{});var NTe=s(Bg);OU=n(NTe,"STRONG",{});var N$r=s(OU);XVe=r(N$r,"xlm-roberta"),N$r.forEach(t),VVe=r(NTe," \u2014 "),UB=n(NTe,"A",{href:!0});var D$r=s(UB);zVe=r(D$r,"XLMRobertaConfig"),D$r.forEach(t),WVe=r(NTe," (XLM-RoBERTa model)"),NTe.forEach(t),QVe=i(T),xg=n(T,"LI",{});var DTe=s(xg);XU=n(DTe,"STRONG",{});var q$r=s(XU);HVe=r(q$r,"xlm-roberta-xl"),q$r.forEach(t),UVe=r(DTe," \u2014 "),JB=n(DTe,"A",{href:!0});var G$r=s(JB);JVe=r(G$r,"XLMRobertaXLConfig"),G$r.forEach(t),YVe=r(DTe," (XLM-RoBERTa-XL model)"),DTe.forEach(t),KVe=i(T),kg=n(T,"LI",{});var qTe=s(kg);VU=n(qTe,"STRONG",{});var O$r=s(VU);ZVe=r(O$r,"xlnet"),O$r.forEach(t),eze=r(qTe," \u2014 "),YB=n(qTe,"A",{href:!0});var X$r=s(YB);oze=r(X$r,"XLNetConfig"),X$r.forEach(t),rze=r(qTe," (XLNet model)"),qTe.forEach(t),tze=i(T),Rg=n(T,"LI",{});var GTe=s(Rg);zU=n(GTe,"STRONG",{});var V$r=s(zU);aze=r(V$r,"yoso"),V$r.forEach(t),nze=r(GTe," \u2014 "),KB=n(GTe,"A",{href:!0});var z$r=s(KB);sze=r(z$r,"YosoConfig"),z$r.forEach(t),lze=r(GTe," (YOSO model)"),GTe.forEach(t),T.forEach(t),ize=i(ga),WU=n(ga,"P",{});var W$r=s(WU);dze=r(W$r,"Examples:"),W$r.forEach(t),cze=i(ga),m(TE.$$.fragment,ga),ga.forEach(t),fze=i(Os),Sg=n(Os,"DIV",{class:!0});var ySe=s(Sg);m(FE.$$.fragment,ySe),mze=i(ySe),QU=n(ySe,"P",{});var Q$r=s(QU);gze=r(Q$r,"Register a new configuration for this class."),Q$r.forEach(t),ySe.forEach(t),Os.forEach(t),Mke=i(c),Wi=n(c,"H2",{class:!0});var wSe=s(Wi);Pg=n(wSe,"A",{id:!0,class:!0,href:!0});var H$r=s(Pg);HU=n(H$r,"SPAN",{});var U$r=s(HU);m(CE.$$.fragment,U$r),U$r.forEach(t),H$r.forEach(t),hze=i(wSe),UU=n(wSe,"SPAN",{});var J$r=s(UU);pze=r(J$r,"AutoTokenizer"),J$r.forEach(t),wSe.forEach(t),Eke=i(c),Qo=n(c,"DIV",{class:!0});var Xs=s(Qo);m(ME.$$.fragment,Xs),_ze=i(Xs),EE=n(Xs,"P",{});var ASe=s(EE);uze=r(ASe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ZB=n(ASe,"A",{href:!0});var Y$r=s(ZB);bze=r(Y$r,"AutoTokenizer.from_pretrained()"),Y$r.forEach(t),vze=r(ASe," class method."),ASe.forEach(t),Tze=i(Xs),yE=n(Xs,"P",{});var LSe=s(yE);Fze=r(LSe,"This class cannot be instantiated directly using "),JU=n(LSe,"CODE",{});var K$r=s(JU);Cze=r(K$r,"__init__()"),K$r.forEach(t),Mze=r(LSe," (throws an error)."),LSe.forEach(t),Eze=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);m(wE.$$.fragment,ha),yze=i(ha),YU=n(ha,"P",{});var Z$r=s(YU);wze=r(Z$r,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Z$r.forEach(t),Aze=i(ha),Oa=n(ha,"P",{});var fM=s(Oa);Lze=r(fM,"The tokenizer class to instantiate is selected based on the "),KU=n(fM,"CODE",{});var eIr=s(KU);Bze=r(eIr,"model_type"),eIr.forEach(t),xze=r(fM,` property of the config object (either
passed as an argument or loaded from `),ZU=n(fM,"CODE",{});var oIr=s(ZU);kze=r(oIr,"pretrained_model_name_or_path"),oIr.forEach(t),Rze=r(fM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eJ=n(fM,"CODE",{});var rIr=s(eJ);Sze=r(rIr,"pretrained_model_name_or_path"),rIr.forEach(t),Pze=r(fM,":"),fM.forEach(t),$ze=i(ha),E=n(ha,"UL",{});var y=s(E);Wn=n(y,"LI",{});var s8=s(Wn);oJ=n(s8,"STRONG",{});var tIr=s(oJ);Ize=r(tIr,"albert"),tIr.forEach(t),jze=r(s8," \u2014 "),ex=n(s8,"A",{href:!0});var aIr=s(ex);Nze=r(aIr,"AlbertTokenizer"),aIr.forEach(t),Dze=r(s8," or "),ox=n(s8,"A",{href:!0});var nIr=s(ox);qze=r(nIr,"AlbertTokenizerFast"),nIr.forEach(t),Gze=r(s8," (ALBERT model)"),s8.forEach(t),Oze=i(y),Qn=n(y,"LI",{});var l8=s(Qn);rJ=n(l8,"STRONG",{});var sIr=s(rJ);Xze=r(sIr,"bart"),sIr.forEach(t),Vze=r(l8," \u2014 "),rx=n(l8,"A",{href:!0});var lIr=s(rx);zze=r(lIr,"BartTokenizer"),lIr.forEach(t),Wze=r(l8," or "),tx=n(l8,"A",{href:!0});var iIr=s(tx);Qze=r(iIr,"BartTokenizerFast"),iIr.forEach(t),Hze=r(l8," (BART model)"),l8.forEach(t),Uze=i(y),Hn=n(y,"LI",{});var i8=s(Hn);tJ=n(i8,"STRONG",{});var dIr=s(tJ);Jze=r(dIr,"barthez"),dIr.forEach(t),Yze=r(i8," \u2014 "),ax=n(i8,"A",{href:!0});var cIr=s(ax);Kze=r(cIr,"BarthezTokenizer"),cIr.forEach(t),Zze=r(i8," or "),nx=n(i8,"A",{href:!0});var fIr=s(nx);eWe=r(fIr,"BarthezTokenizerFast"),fIr.forEach(t),oWe=r(i8," (BARThez model)"),i8.forEach(t),rWe=i(y),$g=n(y,"LI",{});var OTe=s($g);aJ=n(OTe,"STRONG",{});var mIr=s(aJ);tWe=r(mIr,"bartpho"),mIr.forEach(t),aWe=r(OTe," \u2014 "),sx=n(OTe,"A",{href:!0});var gIr=s(sx);nWe=r(gIr,"BartphoTokenizer"),gIr.forEach(t),sWe=r(OTe," (BARTpho model)"),OTe.forEach(t),lWe=i(y),Un=n(y,"LI",{});var d8=s(Un);nJ=n(d8,"STRONG",{});var hIr=s(nJ);iWe=r(hIr,"bert"),hIr.forEach(t),dWe=r(d8," \u2014 "),lx=n(d8,"A",{href:!0});var pIr=s(lx);cWe=r(pIr,"BertTokenizer"),pIr.forEach(t),fWe=r(d8," or "),ix=n(d8,"A",{href:!0});var _Ir=s(ix);mWe=r(_Ir,"BertTokenizerFast"),_Ir.forEach(t),gWe=r(d8," (BERT model)"),d8.forEach(t),hWe=i(y),Ig=n(y,"LI",{});var XTe=s(Ig);sJ=n(XTe,"STRONG",{});var uIr=s(sJ);pWe=r(uIr,"bert-generation"),uIr.forEach(t),_We=r(XTe," \u2014 "),dx=n(XTe,"A",{href:!0});var bIr=s(dx);uWe=r(bIr,"BertGenerationTokenizer"),bIr.forEach(t),bWe=r(XTe," (Bert Generation model)"),XTe.forEach(t),vWe=i(y),jg=n(y,"LI",{});var VTe=s(jg);lJ=n(VTe,"STRONG",{});var vIr=s(lJ);TWe=r(vIr,"bert-japanese"),vIr.forEach(t),FWe=r(VTe," \u2014 "),cx=n(VTe,"A",{href:!0});var TIr=s(cx);CWe=r(TIr,"BertJapaneseTokenizer"),TIr.forEach(t),MWe=r(VTe," (BertJapanese model)"),VTe.forEach(t),EWe=i(y),Ng=n(y,"LI",{});var zTe=s(Ng);iJ=n(zTe,"STRONG",{});var FIr=s(iJ);yWe=r(FIr,"bertweet"),FIr.forEach(t),wWe=r(zTe," \u2014 "),fx=n(zTe,"A",{href:!0});var CIr=s(fx);AWe=r(CIr,"BertweetTokenizer"),CIr.forEach(t),LWe=r(zTe," (Bertweet model)"),zTe.forEach(t),BWe=i(y),Jn=n(y,"LI",{});var c8=s(Jn);dJ=n(c8,"STRONG",{});var MIr=s(dJ);xWe=r(MIr,"big_bird"),MIr.forEach(t),kWe=r(c8," \u2014 "),mx=n(c8,"A",{href:!0});var EIr=s(mx);RWe=r(EIr,"BigBirdTokenizer"),EIr.forEach(t),SWe=r(c8," or "),gx=n(c8,"A",{href:!0});var yIr=s(gx);PWe=r(yIr,"BigBirdTokenizerFast"),yIr.forEach(t),$We=r(c8," (BigBird model)"),c8.forEach(t),IWe=i(y),Yn=n(y,"LI",{});var f8=s(Yn);cJ=n(f8,"STRONG",{});var wIr=s(cJ);jWe=r(wIr,"bigbird_pegasus"),wIr.forEach(t),NWe=r(f8," \u2014 "),hx=n(f8,"A",{href:!0});var AIr=s(hx);DWe=r(AIr,"PegasusTokenizer"),AIr.forEach(t),qWe=r(f8," or "),px=n(f8,"A",{href:!0});var LIr=s(px);GWe=r(LIr,"PegasusTokenizerFast"),LIr.forEach(t),OWe=r(f8," (BigBirdPegasus model)"),f8.forEach(t),XWe=i(y),Kn=n(y,"LI",{});var m8=s(Kn);fJ=n(m8,"STRONG",{});var BIr=s(fJ);VWe=r(BIr,"blenderbot"),BIr.forEach(t),zWe=r(m8," \u2014 "),_x=n(m8,"A",{href:!0});var xIr=s(_x);WWe=r(xIr,"BlenderbotTokenizer"),xIr.forEach(t),QWe=r(m8," or "),ux=n(m8,"A",{href:!0});var kIr=s(ux);HWe=r(kIr,"BlenderbotTokenizerFast"),kIr.forEach(t),UWe=r(m8," (Blenderbot model)"),m8.forEach(t),JWe=i(y),Dg=n(y,"LI",{});var WTe=s(Dg);mJ=n(WTe,"STRONG",{});var RIr=s(mJ);YWe=r(RIr,"blenderbot-small"),RIr.forEach(t),KWe=r(WTe," \u2014 "),bx=n(WTe,"A",{href:!0});var SIr=s(bx);ZWe=r(SIr,"BlenderbotSmallTokenizer"),SIr.forEach(t),eQe=r(WTe," (BlenderbotSmall model)"),WTe.forEach(t),oQe=i(y),qg=n(y,"LI",{});var QTe=s(qg);gJ=n(QTe,"STRONG",{});var PIr=s(gJ);rQe=r(PIr,"byt5"),PIr.forEach(t),tQe=r(QTe," \u2014 "),vx=n(QTe,"A",{href:!0});var $Ir=s(vx);aQe=r($Ir,"ByT5Tokenizer"),$Ir.forEach(t),nQe=r(QTe," (ByT5 model)"),QTe.forEach(t),sQe=i(y),Zn=n(y,"LI",{});var g8=s(Zn);hJ=n(g8,"STRONG",{});var IIr=s(hJ);lQe=r(IIr,"camembert"),IIr.forEach(t),iQe=r(g8," \u2014 "),Tx=n(g8,"A",{href:!0});var jIr=s(Tx);dQe=r(jIr,"CamembertTokenizer"),jIr.forEach(t),cQe=r(g8," or "),Fx=n(g8,"A",{href:!0});var NIr=s(Fx);fQe=r(NIr,"CamembertTokenizerFast"),NIr.forEach(t),mQe=r(g8," (CamemBERT model)"),g8.forEach(t),gQe=i(y),Gg=n(y,"LI",{});var HTe=s(Gg);pJ=n(HTe,"STRONG",{});var DIr=s(pJ);hQe=r(DIr,"canine"),DIr.forEach(t),pQe=r(HTe," \u2014 "),Cx=n(HTe,"A",{href:!0});var qIr=s(Cx);_Qe=r(qIr,"CanineTokenizer"),qIr.forEach(t),uQe=r(HTe," (Canine model)"),HTe.forEach(t),bQe=i(y),es=n(y,"LI",{});var h8=s(es);_J=n(h8,"STRONG",{});var GIr=s(_J);vQe=r(GIr,"clip"),GIr.forEach(t),TQe=r(h8," \u2014 "),Mx=n(h8,"A",{href:!0});var OIr=s(Mx);FQe=r(OIr,"CLIPTokenizer"),OIr.forEach(t),CQe=r(h8," or "),Ex=n(h8,"A",{href:!0});var XIr=s(Ex);MQe=r(XIr,"CLIPTokenizerFast"),XIr.forEach(t),EQe=r(h8," (CLIP model)"),h8.forEach(t),yQe=i(y),os=n(y,"LI",{});var p8=s(os);uJ=n(p8,"STRONG",{});var VIr=s(uJ);wQe=r(VIr,"convbert"),VIr.forEach(t),AQe=r(p8," \u2014 "),yx=n(p8,"A",{href:!0});var zIr=s(yx);LQe=r(zIr,"ConvBertTokenizer"),zIr.forEach(t),BQe=r(p8," or "),wx=n(p8,"A",{href:!0});var WIr=s(wx);xQe=r(WIr,"ConvBertTokenizerFast"),WIr.forEach(t),kQe=r(p8," (ConvBERT model)"),p8.forEach(t),RQe=i(y),rs=n(y,"LI",{});var _8=s(rs);bJ=n(_8,"STRONG",{});var QIr=s(bJ);SQe=r(QIr,"cpm"),QIr.forEach(t),PQe=r(_8," \u2014 "),Ax=n(_8,"A",{href:!0});var HIr=s(Ax);$Qe=r(HIr,"CpmTokenizer"),HIr.forEach(t),IQe=r(_8," or "),vJ=n(_8,"CODE",{});var UIr=s(vJ);jQe=r(UIr,"CpmTokenizerFast"),UIr.forEach(t),NQe=r(_8," (CPM model)"),_8.forEach(t),DQe=i(y),Og=n(y,"LI",{});var UTe=s(Og);TJ=n(UTe,"STRONG",{});var JIr=s(TJ);qQe=r(JIr,"ctrl"),JIr.forEach(t),GQe=r(UTe," \u2014 "),Lx=n(UTe,"A",{href:!0});var YIr=s(Lx);OQe=r(YIr,"CTRLTokenizer"),YIr.forEach(t),XQe=r(UTe," (CTRL model)"),UTe.forEach(t),VQe=i(y),ts=n(y,"LI",{});var u8=s(ts);FJ=n(u8,"STRONG",{});var KIr=s(FJ);zQe=r(KIr,"deberta"),KIr.forEach(t),WQe=r(u8," \u2014 "),Bx=n(u8,"A",{href:!0});var ZIr=s(Bx);QQe=r(ZIr,"DebertaTokenizer"),ZIr.forEach(t),HQe=r(u8," or "),xx=n(u8,"A",{href:!0});var ejr=s(xx);UQe=r(ejr,"DebertaTokenizerFast"),ejr.forEach(t),JQe=r(u8," (DeBERTa model)"),u8.forEach(t),YQe=i(y),Xg=n(y,"LI",{});var JTe=s(Xg);CJ=n(JTe,"STRONG",{});var ojr=s(CJ);KQe=r(ojr,"deberta-v2"),ojr.forEach(t),ZQe=r(JTe," \u2014 "),kx=n(JTe,"A",{href:!0});var rjr=s(kx);eHe=r(rjr,"DebertaV2Tokenizer"),rjr.forEach(t),oHe=r(JTe," (DeBERTa-v2 model)"),JTe.forEach(t),rHe=i(y),as=n(y,"LI",{});var b8=s(as);MJ=n(b8,"STRONG",{});var tjr=s(MJ);tHe=r(tjr,"distilbert"),tjr.forEach(t),aHe=r(b8," \u2014 "),Rx=n(b8,"A",{href:!0});var ajr=s(Rx);nHe=r(ajr,"DistilBertTokenizer"),ajr.forEach(t),sHe=r(b8," or "),Sx=n(b8,"A",{href:!0});var njr=s(Sx);lHe=r(njr,"DistilBertTokenizerFast"),njr.forEach(t),iHe=r(b8," (DistilBERT model)"),b8.forEach(t),dHe=i(y),ns=n(y,"LI",{});var v8=s(ns);EJ=n(v8,"STRONG",{});var sjr=s(EJ);cHe=r(sjr,"dpr"),sjr.forEach(t),fHe=r(v8," \u2014 "),Px=n(v8,"A",{href:!0});var ljr=s(Px);mHe=r(ljr,"DPRQuestionEncoderTokenizer"),ljr.forEach(t),gHe=r(v8," or "),$x=n(v8,"A",{href:!0});var ijr=s($x);hHe=r(ijr,"DPRQuestionEncoderTokenizerFast"),ijr.forEach(t),pHe=r(v8," (DPR model)"),v8.forEach(t),_He=i(y),ss=n(y,"LI",{});var T8=s(ss);yJ=n(T8,"STRONG",{});var djr=s(yJ);uHe=r(djr,"electra"),djr.forEach(t),bHe=r(T8," \u2014 "),Ix=n(T8,"A",{href:!0});var cjr=s(Ix);vHe=r(cjr,"ElectraTokenizer"),cjr.forEach(t),THe=r(T8," or "),jx=n(T8,"A",{href:!0});var fjr=s(jx);FHe=r(fjr,"ElectraTokenizerFast"),fjr.forEach(t),CHe=r(T8," (ELECTRA model)"),T8.forEach(t),MHe=i(y),Vg=n(y,"LI",{});var YTe=s(Vg);wJ=n(YTe,"STRONG",{});var mjr=s(wJ);EHe=r(mjr,"flaubert"),mjr.forEach(t),yHe=r(YTe," \u2014 "),Nx=n(YTe,"A",{href:!0});var gjr=s(Nx);wHe=r(gjr,"FlaubertTokenizer"),gjr.forEach(t),AHe=r(YTe," (FlauBERT model)"),YTe.forEach(t),LHe=i(y),ls=n(y,"LI",{});var F8=s(ls);AJ=n(F8,"STRONG",{});var hjr=s(AJ);BHe=r(hjr,"fnet"),hjr.forEach(t),xHe=r(F8," \u2014 "),Dx=n(F8,"A",{href:!0});var pjr=s(Dx);kHe=r(pjr,"FNetTokenizer"),pjr.forEach(t),RHe=r(F8," or "),qx=n(F8,"A",{href:!0});var _jr=s(qx);SHe=r(_jr,"FNetTokenizerFast"),_jr.forEach(t),PHe=r(F8," (FNet model)"),F8.forEach(t),$He=i(y),zg=n(y,"LI",{});var KTe=s(zg);LJ=n(KTe,"STRONG",{});var ujr=s(LJ);IHe=r(ujr,"fsmt"),ujr.forEach(t),jHe=r(KTe," \u2014 "),Gx=n(KTe,"A",{href:!0});var bjr=s(Gx);NHe=r(bjr,"FSMTTokenizer"),bjr.forEach(t),DHe=r(KTe," (FairSeq Machine-Translation model)"),KTe.forEach(t),qHe=i(y),is=n(y,"LI",{});var C8=s(is);BJ=n(C8,"STRONG",{});var vjr=s(BJ);GHe=r(vjr,"funnel"),vjr.forEach(t),OHe=r(C8," \u2014 "),Ox=n(C8,"A",{href:!0});var Tjr=s(Ox);XHe=r(Tjr,"FunnelTokenizer"),Tjr.forEach(t),VHe=r(C8," or "),Xx=n(C8,"A",{href:!0});var Fjr=s(Xx);zHe=r(Fjr,"FunnelTokenizerFast"),Fjr.forEach(t),WHe=r(C8," (Funnel Transformer model)"),C8.forEach(t),QHe=i(y),ds=n(y,"LI",{});var M8=s(ds);xJ=n(M8,"STRONG",{});var Cjr=s(xJ);HHe=r(Cjr,"gpt2"),Cjr.forEach(t),UHe=r(M8," \u2014 "),Vx=n(M8,"A",{href:!0});var Mjr=s(Vx);JHe=r(Mjr,"GPT2Tokenizer"),Mjr.forEach(t),YHe=r(M8," or "),zx=n(M8,"A",{href:!0});var Ejr=s(zx);KHe=r(Ejr,"GPT2TokenizerFast"),Ejr.forEach(t),ZHe=r(M8," (OpenAI GPT-2 model)"),M8.forEach(t),eUe=i(y),cs=n(y,"LI",{});var E8=s(cs);kJ=n(E8,"STRONG",{});var yjr=s(kJ);oUe=r(yjr,"gpt_neo"),yjr.forEach(t),rUe=r(E8," \u2014 "),Wx=n(E8,"A",{href:!0});var wjr=s(Wx);tUe=r(wjr,"GPT2Tokenizer"),wjr.forEach(t),aUe=r(E8," or "),Qx=n(E8,"A",{href:!0});var Ajr=s(Qx);nUe=r(Ajr,"GPT2TokenizerFast"),Ajr.forEach(t),sUe=r(E8," (GPT Neo model)"),E8.forEach(t),lUe=i(y),fs=n(y,"LI",{});var y8=s(fs);RJ=n(y8,"STRONG",{});var Ljr=s(RJ);iUe=r(Ljr,"herbert"),Ljr.forEach(t),dUe=r(y8," \u2014 "),Hx=n(y8,"A",{href:!0});var Bjr=s(Hx);cUe=r(Bjr,"HerbertTokenizer"),Bjr.forEach(t),fUe=r(y8," or "),Ux=n(y8,"A",{href:!0});var xjr=s(Ux);mUe=r(xjr,"HerbertTokenizerFast"),xjr.forEach(t),gUe=r(y8," (HerBERT model)"),y8.forEach(t),hUe=i(y),Wg=n(y,"LI",{});var ZTe=s(Wg);SJ=n(ZTe,"STRONG",{});var kjr=s(SJ);pUe=r(kjr,"hubert"),kjr.forEach(t),_Ue=r(ZTe," \u2014 "),Jx=n(ZTe,"A",{href:!0});var Rjr=s(Jx);uUe=r(Rjr,"Wav2Vec2CTCTokenizer"),Rjr.forEach(t),bUe=r(ZTe," (Hubert model)"),ZTe.forEach(t),vUe=i(y),ms=n(y,"LI",{});var w8=s(ms);PJ=n(w8,"STRONG",{});var Sjr=s(PJ);TUe=r(Sjr,"ibert"),Sjr.forEach(t),FUe=r(w8," \u2014 "),Yx=n(w8,"A",{href:!0});var Pjr=s(Yx);CUe=r(Pjr,"RobertaTokenizer"),Pjr.forEach(t),MUe=r(w8," or "),Kx=n(w8,"A",{href:!0});var $jr=s(Kx);EUe=r($jr,"RobertaTokenizerFast"),$jr.forEach(t),yUe=r(w8," (I-BERT model)"),w8.forEach(t),wUe=i(y),gs=n(y,"LI",{});var A8=s(gs);$J=n(A8,"STRONG",{});var Ijr=s($J);AUe=r(Ijr,"layoutlm"),Ijr.forEach(t),LUe=r(A8," \u2014 "),Zx=n(A8,"A",{href:!0});var jjr=s(Zx);BUe=r(jjr,"LayoutLMTokenizer"),jjr.forEach(t),xUe=r(A8," or "),ek=n(A8,"A",{href:!0});var Njr=s(ek);kUe=r(Njr,"LayoutLMTokenizerFast"),Njr.forEach(t),RUe=r(A8," (LayoutLM model)"),A8.forEach(t),SUe=i(y),hs=n(y,"LI",{});var L8=s(hs);IJ=n(L8,"STRONG",{});var Djr=s(IJ);PUe=r(Djr,"layoutlmv2"),Djr.forEach(t),$Ue=r(L8," \u2014 "),ok=n(L8,"A",{href:!0});var qjr=s(ok);IUe=r(qjr,"LayoutLMv2Tokenizer"),qjr.forEach(t),jUe=r(L8," or "),rk=n(L8,"A",{href:!0});var Gjr=s(rk);NUe=r(Gjr,"LayoutLMv2TokenizerFast"),Gjr.forEach(t),DUe=r(L8," (LayoutLMv2 model)"),L8.forEach(t),qUe=i(y),ps=n(y,"LI",{});var B8=s(ps);jJ=n(B8,"STRONG",{});var Ojr=s(jJ);GUe=r(Ojr,"layoutxlm"),Ojr.forEach(t),OUe=r(B8," \u2014 "),tk=n(B8,"A",{href:!0});var Xjr=s(tk);XUe=r(Xjr,"LayoutXLMTokenizer"),Xjr.forEach(t),VUe=r(B8," or "),ak=n(B8,"A",{href:!0});var Vjr=s(ak);zUe=r(Vjr,"LayoutXLMTokenizerFast"),Vjr.forEach(t),WUe=r(B8," (LayoutXLM model)"),B8.forEach(t),QUe=i(y),_s=n(y,"LI",{});var x8=s(_s);NJ=n(x8,"STRONG",{});var zjr=s(NJ);HUe=r(zjr,"led"),zjr.forEach(t),UUe=r(x8," \u2014 "),nk=n(x8,"A",{href:!0});var Wjr=s(nk);JUe=r(Wjr,"LEDTokenizer"),Wjr.forEach(t),YUe=r(x8," or "),sk=n(x8,"A",{href:!0});var Qjr=s(sk);KUe=r(Qjr,"LEDTokenizerFast"),Qjr.forEach(t),ZUe=r(x8," (LED model)"),x8.forEach(t),eJe=i(y),us=n(y,"LI",{});var k8=s(us);DJ=n(k8,"STRONG",{});var Hjr=s(DJ);oJe=r(Hjr,"longformer"),Hjr.forEach(t),rJe=r(k8," \u2014 "),lk=n(k8,"A",{href:!0});var Ujr=s(lk);tJe=r(Ujr,"LongformerTokenizer"),Ujr.forEach(t),aJe=r(k8," or "),ik=n(k8,"A",{href:!0});var Jjr=s(ik);nJe=r(Jjr,"LongformerTokenizerFast"),Jjr.forEach(t),sJe=r(k8," (Longformer model)"),k8.forEach(t),lJe=i(y),Qg=n(y,"LI",{});var eFe=s(Qg);qJ=n(eFe,"STRONG",{});var Yjr=s(qJ);iJe=r(Yjr,"luke"),Yjr.forEach(t),dJe=r(eFe," \u2014 "),dk=n(eFe,"A",{href:!0});var Kjr=s(dk);cJe=r(Kjr,"LukeTokenizer"),Kjr.forEach(t),fJe=r(eFe," (LUKE model)"),eFe.forEach(t),mJe=i(y),bs=n(y,"LI",{});var R8=s(bs);GJ=n(R8,"STRONG",{});var Zjr=s(GJ);gJe=r(Zjr,"lxmert"),Zjr.forEach(t),hJe=r(R8," \u2014 "),ck=n(R8,"A",{href:!0});var eNr=s(ck);pJe=r(eNr,"LxmertTokenizer"),eNr.forEach(t),_Je=r(R8," or "),fk=n(R8,"A",{href:!0});var oNr=s(fk);uJe=r(oNr,"LxmertTokenizerFast"),oNr.forEach(t),bJe=r(R8," (LXMERT model)"),R8.forEach(t),vJe=i(y),Hg=n(y,"LI",{});var oFe=s(Hg);OJ=n(oFe,"STRONG",{});var rNr=s(OJ);TJe=r(rNr,"m2m_100"),rNr.forEach(t),FJe=r(oFe," \u2014 "),mk=n(oFe,"A",{href:!0});var tNr=s(mk);CJe=r(tNr,"M2M100Tokenizer"),tNr.forEach(t),MJe=r(oFe," (M2M100 model)"),oFe.forEach(t),EJe=i(y),Ug=n(y,"LI",{});var rFe=s(Ug);XJ=n(rFe,"STRONG",{});var aNr=s(XJ);yJe=r(aNr,"marian"),aNr.forEach(t),wJe=r(rFe," \u2014 "),gk=n(rFe,"A",{href:!0});var nNr=s(gk);AJe=r(nNr,"MarianTokenizer"),nNr.forEach(t),LJe=r(rFe," (Marian model)"),rFe.forEach(t),BJe=i(y),vs=n(y,"LI",{});var S8=s(vs);VJ=n(S8,"STRONG",{});var sNr=s(VJ);xJe=r(sNr,"mbart"),sNr.forEach(t),kJe=r(S8," \u2014 "),hk=n(S8,"A",{href:!0});var lNr=s(hk);RJe=r(lNr,"MBartTokenizer"),lNr.forEach(t),SJe=r(S8," or "),pk=n(S8,"A",{href:!0});var iNr=s(pk);PJe=r(iNr,"MBartTokenizerFast"),iNr.forEach(t),$Je=r(S8," (mBART model)"),S8.forEach(t),IJe=i(y),Ts=n(y,"LI",{});var P8=s(Ts);zJ=n(P8,"STRONG",{});var dNr=s(zJ);jJe=r(dNr,"mbart50"),dNr.forEach(t),NJe=r(P8," \u2014 "),_k=n(P8,"A",{href:!0});var cNr=s(_k);DJe=r(cNr,"MBart50Tokenizer"),cNr.forEach(t),qJe=r(P8," or "),uk=n(P8,"A",{href:!0});var fNr=s(uk);GJe=r(fNr,"MBart50TokenizerFast"),fNr.forEach(t),OJe=r(P8," (mBART-50 model)"),P8.forEach(t),XJe=i(y),Jg=n(y,"LI",{});var tFe=s(Jg);WJ=n(tFe,"STRONG",{});var mNr=s(WJ);VJe=r(mNr,"mluke"),mNr.forEach(t),zJe=r(tFe," \u2014 "),bk=n(tFe,"A",{href:!0});var gNr=s(bk);WJe=r(gNr,"MLukeTokenizer"),gNr.forEach(t),QJe=r(tFe," (mLUKE model)"),tFe.forEach(t),HJe=i(y),Fs=n(y,"LI",{});var $8=s(Fs);QJ=n($8,"STRONG",{});var hNr=s(QJ);UJe=r(hNr,"mobilebert"),hNr.forEach(t),JJe=r($8," \u2014 "),vk=n($8,"A",{href:!0});var pNr=s(vk);YJe=r(pNr,"MobileBertTokenizer"),pNr.forEach(t),KJe=r($8," or "),Tk=n($8,"A",{href:!0});var _Nr=s(Tk);ZJe=r(_Nr,"MobileBertTokenizerFast"),_Nr.forEach(t),eYe=r($8," (MobileBERT model)"),$8.forEach(t),oYe=i(y),Cs=n(y,"LI",{});var I8=s(Cs);HJ=n(I8,"STRONG",{});var uNr=s(HJ);rYe=r(uNr,"mpnet"),uNr.forEach(t),tYe=r(I8," \u2014 "),Fk=n(I8,"A",{href:!0});var bNr=s(Fk);aYe=r(bNr,"MPNetTokenizer"),bNr.forEach(t),nYe=r(I8," or "),Ck=n(I8,"A",{href:!0});var vNr=s(Ck);sYe=r(vNr,"MPNetTokenizerFast"),vNr.forEach(t),lYe=r(I8," (MPNet model)"),I8.forEach(t),iYe=i(y),Ms=n(y,"LI",{});var j8=s(Ms);UJ=n(j8,"STRONG",{});var TNr=s(UJ);dYe=r(TNr,"mt5"),TNr.forEach(t),cYe=r(j8," \u2014 "),Mk=n(j8,"A",{href:!0});var FNr=s(Mk);fYe=r(FNr,"MT5Tokenizer"),FNr.forEach(t),mYe=r(j8," or "),Ek=n(j8,"A",{href:!0});var CNr=s(Ek);gYe=r(CNr,"MT5TokenizerFast"),CNr.forEach(t),hYe=r(j8," (mT5 model)"),j8.forEach(t),pYe=i(y),Es=n(y,"LI",{});var N8=s(Es);JJ=n(N8,"STRONG",{});var MNr=s(JJ);_Ye=r(MNr,"openai-gpt"),MNr.forEach(t),uYe=r(N8," \u2014 "),yk=n(N8,"A",{href:!0});var ENr=s(yk);bYe=r(ENr,"OpenAIGPTTokenizer"),ENr.forEach(t),vYe=r(N8," or "),wk=n(N8,"A",{href:!0});var yNr=s(wk);TYe=r(yNr,"OpenAIGPTTokenizerFast"),yNr.forEach(t),FYe=r(N8," (OpenAI GPT model)"),N8.forEach(t),CYe=i(y),ys=n(y,"LI",{});var D8=s(ys);YJ=n(D8,"STRONG",{});var wNr=s(YJ);MYe=r(wNr,"pegasus"),wNr.forEach(t),EYe=r(D8," \u2014 "),Ak=n(D8,"A",{href:!0});var ANr=s(Ak);yYe=r(ANr,"PegasusTokenizer"),ANr.forEach(t),wYe=r(D8," or "),Lk=n(D8,"A",{href:!0});var LNr=s(Lk);AYe=r(LNr,"PegasusTokenizerFast"),LNr.forEach(t),LYe=r(D8," (Pegasus model)"),D8.forEach(t),BYe=i(y),Yg=n(y,"LI",{});var aFe=s(Yg);KJ=n(aFe,"STRONG",{});var BNr=s(KJ);xYe=r(BNr,"perceiver"),BNr.forEach(t),kYe=r(aFe," \u2014 "),Bk=n(aFe,"A",{href:!0});var xNr=s(Bk);RYe=r(xNr,"PerceiverTokenizer"),xNr.forEach(t),SYe=r(aFe," (Perceiver model)"),aFe.forEach(t),PYe=i(y),Kg=n(y,"LI",{});var nFe=s(Kg);ZJ=n(nFe,"STRONG",{});var kNr=s(ZJ);$Ye=r(kNr,"phobert"),kNr.forEach(t),IYe=r(nFe," \u2014 "),xk=n(nFe,"A",{href:!0});var RNr=s(xk);jYe=r(RNr,"PhobertTokenizer"),RNr.forEach(t),NYe=r(nFe," (PhoBERT model)"),nFe.forEach(t),DYe=i(y),Zg=n(y,"LI",{});var sFe=s(Zg);eY=n(sFe,"STRONG",{});var SNr=s(eY);qYe=r(SNr,"plbart"),SNr.forEach(t),GYe=r(sFe," \u2014 "),kk=n(sFe,"A",{href:!0});var PNr=s(kk);OYe=r(PNr,"PLBartTokenizer"),PNr.forEach(t),XYe=r(sFe," (PLBart model)"),sFe.forEach(t),VYe=i(y),eh=n(y,"LI",{});var lFe=s(eh);oY=n(lFe,"STRONG",{});var $Nr=s(oY);zYe=r($Nr,"prophetnet"),$Nr.forEach(t),WYe=r(lFe," \u2014 "),Rk=n(lFe,"A",{href:!0});var INr=s(Rk);QYe=r(INr,"ProphetNetTokenizer"),INr.forEach(t),HYe=r(lFe," (ProphetNet model)"),lFe.forEach(t),UYe=i(y),ws=n(y,"LI",{});var q8=s(ws);rY=n(q8,"STRONG",{});var jNr=s(rY);JYe=r(jNr,"qdqbert"),jNr.forEach(t),YYe=r(q8," \u2014 "),Sk=n(q8,"A",{href:!0});var NNr=s(Sk);KYe=r(NNr,"BertTokenizer"),NNr.forEach(t),ZYe=r(q8," or "),Pk=n(q8,"A",{href:!0});var DNr=s(Pk);eKe=r(DNr,"BertTokenizerFast"),DNr.forEach(t),oKe=r(q8," (QDQBert model)"),q8.forEach(t),rKe=i(y),oh=n(y,"LI",{});var iFe=s(oh);tY=n(iFe,"STRONG",{});var qNr=s(tY);tKe=r(qNr,"rag"),qNr.forEach(t),aKe=r(iFe," \u2014 "),$k=n(iFe,"A",{href:!0});var GNr=s($k);nKe=r(GNr,"RagTokenizer"),GNr.forEach(t),sKe=r(iFe," (RAG model)"),iFe.forEach(t),lKe=i(y),As=n(y,"LI",{});var G8=s(As);aY=n(G8,"STRONG",{});var ONr=s(aY);iKe=r(ONr,"realm"),ONr.forEach(t),dKe=r(G8," \u2014 "),Ik=n(G8,"A",{href:!0});var XNr=s(Ik);cKe=r(XNr,"RealmTokenizer"),XNr.forEach(t),fKe=r(G8," or "),jk=n(G8,"A",{href:!0});var VNr=s(jk);mKe=r(VNr,"RealmTokenizerFast"),VNr.forEach(t),gKe=r(G8," (Realm model)"),G8.forEach(t),hKe=i(y),Ls=n(y,"LI",{});var O8=s(Ls);nY=n(O8,"STRONG",{});var zNr=s(nY);pKe=r(zNr,"reformer"),zNr.forEach(t),_Ke=r(O8," \u2014 "),Nk=n(O8,"A",{href:!0});var WNr=s(Nk);uKe=r(WNr,"ReformerTokenizer"),WNr.forEach(t),bKe=r(O8," or "),Dk=n(O8,"A",{href:!0});var QNr=s(Dk);vKe=r(QNr,"ReformerTokenizerFast"),QNr.forEach(t),TKe=r(O8," (Reformer model)"),O8.forEach(t),FKe=i(y),Bs=n(y,"LI",{});var X8=s(Bs);sY=n(X8,"STRONG",{});var HNr=s(sY);CKe=r(HNr,"rembert"),HNr.forEach(t),MKe=r(X8," \u2014 "),qk=n(X8,"A",{href:!0});var UNr=s(qk);EKe=r(UNr,"RemBertTokenizer"),UNr.forEach(t),yKe=r(X8," or "),Gk=n(X8,"A",{href:!0});var JNr=s(Gk);wKe=r(JNr,"RemBertTokenizerFast"),JNr.forEach(t),AKe=r(X8," (RemBERT model)"),X8.forEach(t),LKe=i(y),xs=n(y,"LI",{});var V8=s(xs);lY=n(V8,"STRONG",{});var YNr=s(lY);BKe=r(YNr,"retribert"),YNr.forEach(t),xKe=r(V8," \u2014 "),Ok=n(V8,"A",{href:!0});var KNr=s(Ok);kKe=r(KNr,"RetriBertTokenizer"),KNr.forEach(t),RKe=r(V8," or "),Xk=n(V8,"A",{href:!0});var ZNr=s(Xk);SKe=r(ZNr,"RetriBertTokenizerFast"),ZNr.forEach(t),PKe=r(V8," (RetriBERT model)"),V8.forEach(t),$Ke=i(y),ks=n(y,"LI",{});var z8=s(ks);iY=n(z8,"STRONG",{});var eDr=s(iY);IKe=r(eDr,"roberta"),eDr.forEach(t),jKe=r(z8," \u2014 "),Vk=n(z8,"A",{href:!0});var oDr=s(Vk);NKe=r(oDr,"RobertaTokenizer"),oDr.forEach(t),DKe=r(z8," or "),zk=n(z8,"A",{href:!0});var rDr=s(zk);qKe=r(rDr,"RobertaTokenizerFast"),rDr.forEach(t),GKe=r(z8," (RoBERTa model)"),z8.forEach(t),OKe=i(y),Rs=n(y,"LI",{});var W8=s(Rs);dY=n(W8,"STRONG",{});var tDr=s(dY);XKe=r(tDr,"roformer"),tDr.forEach(t),VKe=r(W8," \u2014 "),Wk=n(W8,"A",{href:!0});var aDr=s(Wk);zKe=r(aDr,"RoFormerTokenizer"),aDr.forEach(t),WKe=r(W8," or "),Qk=n(W8,"A",{href:!0});var nDr=s(Qk);QKe=r(nDr,"RoFormerTokenizerFast"),nDr.forEach(t),HKe=r(W8," (RoFormer model)"),W8.forEach(t),UKe=i(y),rh=n(y,"LI",{});var dFe=s(rh);cY=n(dFe,"STRONG",{});var sDr=s(cY);JKe=r(sDr,"speech_to_text"),sDr.forEach(t),YKe=r(dFe," \u2014 "),Hk=n(dFe,"A",{href:!0});var lDr=s(Hk);KKe=r(lDr,"Speech2TextTokenizer"),lDr.forEach(t),ZKe=r(dFe," (Speech2Text model)"),dFe.forEach(t),eZe=i(y),th=n(y,"LI",{});var cFe=s(th);fY=n(cFe,"STRONG",{});var iDr=s(fY);oZe=r(iDr,"speech_to_text_2"),iDr.forEach(t),rZe=r(cFe," \u2014 "),Uk=n(cFe,"A",{href:!0});var dDr=s(Uk);tZe=r(dDr,"Speech2Text2Tokenizer"),dDr.forEach(t),aZe=r(cFe," (Speech2Text2 model)"),cFe.forEach(t),nZe=i(y),Ss=n(y,"LI",{});var Q8=s(Ss);mY=n(Q8,"STRONG",{});var cDr=s(mY);sZe=r(cDr,"splinter"),cDr.forEach(t),lZe=r(Q8," \u2014 "),Jk=n(Q8,"A",{href:!0});var fDr=s(Jk);iZe=r(fDr,"SplinterTokenizer"),fDr.forEach(t),dZe=r(Q8," or "),Yk=n(Q8,"A",{href:!0});var mDr=s(Yk);cZe=r(mDr,"SplinterTokenizerFast"),mDr.forEach(t),fZe=r(Q8," (Splinter model)"),Q8.forEach(t),mZe=i(y),Ps=n(y,"LI",{});var H8=s(Ps);gY=n(H8,"STRONG",{});var gDr=s(gY);gZe=r(gDr,"squeezebert"),gDr.forEach(t),hZe=r(H8," \u2014 "),Kk=n(H8,"A",{href:!0});var hDr=s(Kk);pZe=r(hDr,"SqueezeBertTokenizer"),hDr.forEach(t),_Ze=r(H8," or "),Zk=n(H8,"A",{href:!0});var pDr=s(Zk);uZe=r(pDr,"SqueezeBertTokenizerFast"),pDr.forEach(t),bZe=r(H8," (SqueezeBERT model)"),H8.forEach(t),vZe=i(y),$s=n(y,"LI",{});var U8=s($s);hY=n(U8,"STRONG",{});var _Dr=s(hY);TZe=r(_Dr,"t5"),_Dr.forEach(t),FZe=r(U8," \u2014 "),eR=n(U8,"A",{href:!0});var uDr=s(eR);CZe=r(uDr,"T5Tokenizer"),uDr.forEach(t),MZe=r(U8," or "),oR=n(U8,"A",{href:!0});var bDr=s(oR);EZe=r(bDr,"T5TokenizerFast"),bDr.forEach(t),yZe=r(U8," (T5 model)"),U8.forEach(t),wZe=i(y),ah=n(y,"LI",{});var fFe=s(ah);pY=n(fFe,"STRONG",{});var vDr=s(pY);AZe=r(vDr,"tapas"),vDr.forEach(t),LZe=r(fFe," \u2014 "),rR=n(fFe,"A",{href:!0});var TDr=s(rR);BZe=r(TDr,"TapasTokenizer"),TDr.forEach(t),xZe=r(fFe," (TAPAS model)"),fFe.forEach(t),kZe=i(y),nh=n(y,"LI",{});var mFe=s(nh);_Y=n(mFe,"STRONG",{});var FDr=s(_Y);RZe=r(FDr,"transfo-xl"),FDr.forEach(t),SZe=r(mFe," \u2014 "),tR=n(mFe,"A",{href:!0});var CDr=s(tR);PZe=r(CDr,"TransfoXLTokenizer"),CDr.forEach(t),$Ze=r(mFe," (Transformer-XL model)"),mFe.forEach(t),IZe=i(y),sh=n(y,"LI",{});var gFe=s(sh);uY=n(gFe,"STRONG",{});var MDr=s(uY);jZe=r(MDr,"wav2vec2"),MDr.forEach(t),NZe=r(gFe," \u2014 "),aR=n(gFe,"A",{href:!0});var EDr=s(aR);DZe=r(EDr,"Wav2Vec2CTCTokenizer"),EDr.forEach(t),qZe=r(gFe," (Wav2Vec2 model)"),gFe.forEach(t),GZe=i(y),lh=n(y,"LI",{});var hFe=s(lh);bY=n(hFe,"STRONG",{});var yDr=s(bY);OZe=r(yDr,"wav2vec2_phoneme"),yDr.forEach(t),XZe=r(hFe," \u2014 "),nR=n(hFe,"A",{href:!0});var wDr=s(nR);VZe=r(wDr,"Wav2Vec2PhonemeCTCTokenizer"),wDr.forEach(t),zZe=r(hFe," (Wav2Vec2Phoneme model)"),hFe.forEach(t),WZe=i(y),Is=n(y,"LI",{});var J8=s(Is);vY=n(J8,"STRONG",{});var ADr=s(vY);QZe=r(ADr,"xglm"),ADr.forEach(t),HZe=r(J8," \u2014 "),sR=n(J8,"A",{href:!0});var LDr=s(sR);UZe=r(LDr,"XGLMTokenizer"),LDr.forEach(t),JZe=r(J8," or "),lR=n(J8,"A",{href:!0});var BDr=s(lR);YZe=r(BDr,"XGLMTokenizerFast"),BDr.forEach(t),KZe=r(J8," (XGLM model)"),J8.forEach(t),ZZe=i(y),ih=n(y,"LI",{});var pFe=s(ih);TY=n(pFe,"STRONG",{});var xDr=s(TY);eeo=r(xDr,"xlm"),xDr.forEach(t),oeo=r(pFe," \u2014 "),iR=n(pFe,"A",{href:!0});var kDr=s(iR);reo=r(kDr,"XLMTokenizer"),kDr.forEach(t),teo=r(pFe," (XLM model)"),pFe.forEach(t),aeo=i(y),dh=n(y,"LI",{});var _Fe=s(dh);FY=n(_Fe,"STRONG",{});var RDr=s(FY);neo=r(RDr,"xlm-prophetnet"),RDr.forEach(t),seo=r(_Fe," \u2014 "),dR=n(_Fe,"A",{href:!0});var SDr=s(dR);leo=r(SDr,"XLMProphetNetTokenizer"),SDr.forEach(t),ieo=r(_Fe," (XLMProphetNet model)"),_Fe.forEach(t),deo=i(y),js=n(y,"LI",{});var Y8=s(js);CY=n(Y8,"STRONG",{});var PDr=s(CY);ceo=r(PDr,"xlm-roberta"),PDr.forEach(t),feo=r(Y8," \u2014 "),cR=n(Y8,"A",{href:!0});var $Dr=s(cR);meo=r($Dr,"XLMRobertaTokenizer"),$Dr.forEach(t),geo=r(Y8," or "),fR=n(Y8,"A",{href:!0});var IDr=s(fR);heo=r(IDr,"XLMRobertaTokenizerFast"),IDr.forEach(t),peo=r(Y8," (XLM-RoBERTa model)"),Y8.forEach(t),_eo=i(y),Ns=n(y,"LI",{});var K8=s(Ns);MY=n(K8,"STRONG",{});var jDr=s(MY);ueo=r(jDr,"xlnet"),jDr.forEach(t),beo=r(K8," \u2014 "),mR=n(K8,"A",{href:!0});var NDr=s(mR);veo=r(NDr,"XLNetTokenizer"),NDr.forEach(t),Teo=r(K8," or "),gR=n(K8,"A",{href:!0});var DDr=s(gR);Feo=r(DDr,"XLNetTokenizerFast"),DDr.forEach(t),Ceo=r(K8," (XLNet model)"),K8.forEach(t),y.forEach(t),Meo=i(ha),EY=n(ha,"P",{});var qDr=s(EY);Eeo=r(qDr,"Examples:"),qDr.forEach(t),yeo=i(ha),m(AE.$$.fragment,ha),ha.forEach(t),weo=i(Xs),ch=n(Xs,"DIV",{class:!0});var BSe=s(ch);m(LE.$$.fragment,BSe),Aeo=i(BSe),yY=n(BSe,"P",{});var GDr=s(yY);Leo=r(GDr,"Register a new tokenizer in this mapping."),GDr.forEach(t),BSe.forEach(t),Xs.forEach(t),yke=i(c),Qi=n(c,"H2",{class:!0});var xSe=s(Qi);fh=n(xSe,"A",{id:!0,class:!0,href:!0});var ODr=s(fh);wY=n(ODr,"SPAN",{});var XDr=s(wY);m(BE.$$.fragment,XDr),XDr.forEach(t),ODr.forEach(t),Beo=i(xSe),AY=n(xSe,"SPAN",{});var VDr=s(AY);xeo=r(VDr,"AutoFeatureExtractor"),VDr.forEach(t),xSe.forEach(t),wke=i(c),Ho=n(c,"DIV",{class:!0});var Vs=s(Ho);m(xE.$$.fragment,Vs),keo=i(Vs),kE=n(Vs,"P",{});var kSe=s(kE);Reo=r(kSe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),hR=n(kSe,"A",{href:!0});var zDr=s(hR);Seo=r(zDr,"AutoFeatureExtractor.from_pretrained()"),zDr.forEach(t),Peo=r(kSe," class method."),kSe.forEach(t),$eo=i(Vs),RE=n(Vs,"P",{});var RSe=s(RE);Ieo=r(RSe,"This class cannot be instantiated directly using "),LY=n(RSe,"CODE",{});var WDr=s(LY);jeo=r(WDr,"__init__()"),WDr.forEach(t),Neo=r(RSe," (throws an error)."),RSe.forEach(t),Deo=i(Vs),$e=n(Vs,"DIV",{class:!0});var Nt=s($e);m(SE.$$.fragment,Nt),qeo=i(Nt),BY=n(Nt,"P",{});var QDr=s(BY);Geo=r(QDr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),QDr.forEach(t),Oeo=i(Nt),Xa=n(Nt,"P",{});var mM=s(Xa);Xeo=r(mM,"The feature extractor class to instantiate is selected based on the "),xY=n(mM,"CODE",{});var HDr=s(xY);Veo=r(HDr,"model_type"),HDr.forEach(t),zeo=r(mM,` property of the config object
(either passed as an argument or loaded from `),kY=n(mM,"CODE",{});var UDr=s(kY);Weo=r(UDr,"pretrained_model_name_or_path"),UDr.forEach(t),Qeo=r(mM,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),RY=n(mM,"CODE",{});var JDr=s(RY);Heo=r(JDr,"pretrained_model_name_or_path"),JDr.forEach(t),Ueo=r(mM,":"),mM.forEach(t),Jeo=i(Nt),te=n(Nt,"UL",{});var ne=s(te);mh=n(ne,"LI",{});var uFe=s(mh);SY=n(uFe,"STRONG",{});var YDr=s(SY);Yeo=r(YDr,"beit"),YDr.forEach(t),Keo=r(uFe," \u2014 "),pR=n(uFe,"A",{href:!0});var KDr=s(pR);Zeo=r(KDr,"BeitFeatureExtractor"),KDr.forEach(t),eoo=r(uFe," (BEiT model)"),uFe.forEach(t),ooo=i(ne),gh=n(ne,"LI",{});var bFe=s(gh);PY=n(bFe,"STRONG",{});var ZDr=s(PY);roo=r(ZDr,"clip"),ZDr.forEach(t),too=r(bFe," \u2014 "),_R=n(bFe,"A",{href:!0});var eqr=s(_R);aoo=r(eqr,"CLIPFeatureExtractor"),eqr.forEach(t),noo=r(bFe," (CLIP model)"),bFe.forEach(t),soo=i(ne),hh=n(ne,"LI",{});var vFe=s(hh);$Y=n(vFe,"STRONG",{});var oqr=s($Y);loo=r(oqr,"convnext"),oqr.forEach(t),ioo=r(vFe," \u2014 "),uR=n(vFe,"A",{href:!0});var rqr=s(uR);doo=r(rqr,"ConvNextFeatureExtractor"),rqr.forEach(t),coo=r(vFe," (ConvNext model)"),vFe.forEach(t),foo=i(ne),ph=n(ne,"LI",{});var TFe=s(ph);IY=n(TFe,"STRONG",{});var tqr=s(IY);moo=r(tqr,"deit"),tqr.forEach(t),goo=r(TFe," \u2014 "),bR=n(TFe,"A",{href:!0});var aqr=s(bR);hoo=r(aqr,"DeiTFeatureExtractor"),aqr.forEach(t),poo=r(TFe," (DeiT model)"),TFe.forEach(t),_oo=i(ne),_h=n(ne,"LI",{});var FFe=s(_h);jY=n(FFe,"STRONG",{});var nqr=s(jY);uoo=r(nqr,"detr"),nqr.forEach(t),boo=r(FFe," \u2014 "),vR=n(FFe,"A",{href:!0});var sqr=s(vR);voo=r(sqr,"DetrFeatureExtractor"),sqr.forEach(t),Too=r(FFe," (DETR model)"),FFe.forEach(t),Foo=i(ne),uh=n(ne,"LI",{});var CFe=s(uh);NY=n(CFe,"STRONG",{});var lqr=s(NY);Coo=r(lqr,"hubert"),lqr.forEach(t),Moo=r(CFe," \u2014 "),TR=n(CFe,"A",{href:!0});var iqr=s(TR);Eoo=r(iqr,"Wav2Vec2FeatureExtractor"),iqr.forEach(t),yoo=r(CFe," (Hubert model)"),CFe.forEach(t),woo=i(ne),bh=n(ne,"LI",{});var MFe=s(bh);DY=n(MFe,"STRONG",{});var dqr=s(DY);Aoo=r(dqr,"layoutlmv2"),dqr.forEach(t),Loo=r(MFe," \u2014 "),FR=n(MFe,"A",{href:!0});var cqr=s(FR);Boo=r(cqr,"LayoutLMv2FeatureExtractor"),cqr.forEach(t),xoo=r(MFe," (LayoutLMv2 model)"),MFe.forEach(t),koo=i(ne),vh=n(ne,"LI",{});var EFe=s(vh);qY=n(EFe,"STRONG",{});var fqr=s(qY);Roo=r(fqr,"maskformer"),fqr.forEach(t),Soo=r(EFe," \u2014 "),CR=n(EFe,"A",{href:!0});var mqr=s(CR);Poo=r(mqr,"MaskFormerFeatureExtractor"),mqr.forEach(t),$oo=r(EFe," (MaskFormer model)"),EFe.forEach(t),Ioo=i(ne),Th=n(ne,"LI",{});var yFe=s(Th);GY=n(yFe,"STRONG",{});var gqr=s(GY);joo=r(gqr,"perceiver"),gqr.forEach(t),Noo=r(yFe," \u2014 "),MR=n(yFe,"A",{href:!0});var hqr=s(MR);Doo=r(hqr,"PerceiverFeatureExtractor"),hqr.forEach(t),qoo=r(yFe," (Perceiver model)"),yFe.forEach(t),Goo=i(ne),Fh=n(ne,"LI",{});var wFe=s(Fh);OY=n(wFe,"STRONG",{});var pqr=s(OY);Ooo=r(pqr,"poolformer"),pqr.forEach(t),Xoo=r(wFe," \u2014 "),ER=n(wFe,"A",{href:!0});var _qr=s(ER);Voo=r(_qr,"PoolFormerFeatureExtractor"),_qr.forEach(t),zoo=r(wFe," (PoolFormer model)"),wFe.forEach(t),Woo=i(ne),Ch=n(ne,"LI",{});var AFe=s(Ch);XY=n(AFe,"STRONG",{});var uqr=s(XY);Qoo=r(uqr,"resnet"),uqr.forEach(t),Hoo=r(AFe," \u2014 "),yR=n(AFe,"A",{href:!0});var bqr=s(yR);Uoo=r(bqr,"ConvNextFeatureExtractor"),bqr.forEach(t),Joo=r(AFe," (ResNet model)"),AFe.forEach(t),Yoo=i(ne),Mh=n(ne,"LI",{});var LFe=s(Mh);VY=n(LFe,"STRONG",{});var vqr=s(VY);Koo=r(vqr,"segformer"),vqr.forEach(t),Zoo=r(LFe," \u2014 "),wR=n(LFe,"A",{href:!0});var Tqr=s(wR);ero=r(Tqr,"SegformerFeatureExtractor"),Tqr.forEach(t),oro=r(LFe," (SegFormer model)"),LFe.forEach(t),rro=i(ne),Eh=n(ne,"LI",{});var BFe=s(Eh);zY=n(BFe,"STRONG",{});var Fqr=s(zY);tro=r(Fqr,"speech_to_text"),Fqr.forEach(t),aro=r(BFe," \u2014 "),AR=n(BFe,"A",{href:!0});var Cqr=s(AR);nro=r(Cqr,"Speech2TextFeatureExtractor"),Cqr.forEach(t),sro=r(BFe," (Speech2Text model)"),BFe.forEach(t),lro=i(ne),yh=n(ne,"LI",{});var xFe=s(yh);WY=n(xFe,"STRONG",{});var Mqr=s(WY);iro=r(Mqr,"swin"),Mqr.forEach(t),dro=r(xFe," \u2014 "),LR=n(xFe,"A",{href:!0});var Eqr=s(LR);cro=r(Eqr,"ViTFeatureExtractor"),Eqr.forEach(t),fro=r(xFe," (Swin model)"),xFe.forEach(t),mro=i(ne),wh=n(ne,"LI",{});var kFe=s(wh);QY=n(kFe,"STRONG",{});var yqr=s(QY);gro=r(yqr,"van"),yqr.forEach(t),hro=r(kFe," \u2014 "),BR=n(kFe,"A",{href:!0});var wqr=s(BR);pro=r(wqr,"ConvNextFeatureExtractor"),wqr.forEach(t),_ro=r(kFe," (VAN model)"),kFe.forEach(t),uro=i(ne),Ah=n(ne,"LI",{});var RFe=s(Ah);HY=n(RFe,"STRONG",{});var Aqr=s(HY);bro=r(Aqr,"vit"),Aqr.forEach(t),vro=r(RFe," \u2014 "),xR=n(RFe,"A",{href:!0});var Lqr=s(xR);Tro=r(Lqr,"ViTFeatureExtractor"),Lqr.forEach(t),Fro=r(RFe," (ViT model)"),RFe.forEach(t),Cro=i(ne),Lh=n(ne,"LI",{});var SFe=s(Lh);UY=n(SFe,"STRONG",{});var Bqr=s(UY);Mro=r(Bqr,"vit_mae"),Bqr.forEach(t),Ero=r(SFe," \u2014 "),kR=n(SFe,"A",{href:!0});var xqr=s(kR);yro=r(xqr,"ViTFeatureExtractor"),xqr.forEach(t),wro=r(SFe," (ViTMAE model)"),SFe.forEach(t),Aro=i(ne),Bh=n(ne,"LI",{});var PFe=s(Bh);JY=n(PFe,"STRONG",{});var kqr=s(JY);Lro=r(kqr,"wav2vec2"),kqr.forEach(t),Bro=r(PFe," \u2014 "),RR=n(PFe,"A",{href:!0});var Rqr=s(RR);xro=r(Rqr,"Wav2Vec2FeatureExtractor"),Rqr.forEach(t),kro=r(PFe," (Wav2Vec2 model)"),PFe.forEach(t),ne.forEach(t),Rro=i(Nt),m(xh.$$.fragment,Nt),Sro=i(Nt),YY=n(Nt,"P",{});var Sqr=s(YY);Pro=r(Sqr,"Examples:"),Sqr.forEach(t),$ro=i(Nt),m(PE.$$.fragment,Nt),Nt.forEach(t),Iro=i(Vs),kh=n(Vs,"DIV",{class:!0});var SSe=s(kh);m($E.$$.fragment,SSe),jro=i(SSe),KY=n(SSe,"P",{});var Pqr=s(KY);Nro=r(Pqr,"Register a new feature extractor for this class."),Pqr.forEach(t),SSe.forEach(t),Vs.forEach(t),Ake=i(c),Hi=n(c,"H2",{class:!0});var PSe=s(Hi);Rh=n(PSe,"A",{id:!0,class:!0,href:!0});var $qr=s(Rh);ZY=n($qr,"SPAN",{});var Iqr=s(ZY);m(IE.$$.fragment,Iqr),Iqr.forEach(t),$qr.forEach(t),Dro=i(PSe),eK=n(PSe,"SPAN",{});var jqr=s(eK);qro=r(jqr,"AutoProcessor"),jqr.forEach(t),PSe.forEach(t),Lke=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(jE.$$.fragment,zs),Gro=i(zs),NE=n(zs,"P",{});var $Se=s(NE);Oro=r($Se,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),SR=n($Se,"A",{href:!0});var Nqr=s(SR);Xro=r(Nqr,"AutoProcessor.from_pretrained()"),Nqr.forEach(t),Vro=r($Se," class method."),$Se.forEach(t),zro=i(zs),DE=n(zs,"P",{});var ISe=s(DE);Wro=r(ISe,"This class cannot be instantiated directly using "),oK=n(ISe,"CODE",{});var Dqr=s(oK);Qro=r(Dqr,"__init__()"),Dqr.forEach(t),Hro=r(ISe," (throws an error)."),ISe.forEach(t),Uro=i(zs),Ie=n(zs,"DIV",{class:!0});var Dt=s(Ie);m(qE.$$.fragment,Dt),Jro=i(Dt),rK=n(Dt,"P",{});var qqr=s(rK);Yro=r(qqr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),qqr.forEach(t),Kro=i(Dt),Ui=n(Dt,"P",{});var rW=s(Ui);Zro=r(rW,"The processor class to instantiate is selected based on the "),tK=n(rW,"CODE",{});var Gqr=s(tK);eto=r(Gqr,"model_type"),Gqr.forEach(t),oto=r(rW,` property of the config object (either
passed as an argument or loaded from `),aK=n(rW,"CODE",{});var Oqr=s(aK);rto=r(Oqr,"pretrained_model_name_or_path"),Oqr.forEach(t),tto=r(rW," if possible):"),rW.forEach(t),ato=i(Dt),xe=n(Dt,"UL",{});var Do=s(xe);Sh=n(Do,"LI",{});var $Fe=s(Sh);nK=n($Fe,"STRONG",{});var Xqr=s(nK);nto=r(Xqr,"clip"),Xqr.forEach(t),sto=r($Fe," \u2014 "),PR=n($Fe,"A",{href:!0});var Vqr=s(PR);lto=r(Vqr,"CLIPProcessor"),Vqr.forEach(t),ito=r($Fe," (CLIP model)"),$Fe.forEach(t),dto=i(Do),Ph=n(Do,"LI",{});var IFe=s(Ph);sK=n(IFe,"STRONG",{});var zqr=s(sK);cto=r(zqr,"layoutlmv2"),zqr.forEach(t),fto=r(IFe," \u2014 "),$R=n(IFe,"A",{href:!0});var Wqr=s($R);mto=r(Wqr,"LayoutLMv2Processor"),Wqr.forEach(t),gto=r(IFe," (LayoutLMv2 model)"),IFe.forEach(t),hto=i(Do),$h=n(Do,"LI",{});var jFe=s($h);lK=n(jFe,"STRONG",{});var Qqr=s(lK);pto=r(Qqr,"layoutxlm"),Qqr.forEach(t),_to=r(jFe," \u2014 "),IR=n(jFe,"A",{href:!0});var Hqr=s(IR);uto=r(Hqr,"LayoutXLMProcessor"),Hqr.forEach(t),bto=r(jFe," (LayoutXLM model)"),jFe.forEach(t),vto=i(Do),Ih=n(Do,"LI",{});var NFe=s(Ih);iK=n(NFe,"STRONG",{});var Uqr=s(iK);Tto=r(Uqr,"speech_to_text"),Uqr.forEach(t),Fto=r(NFe," \u2014 "),jR=n(NFe,"A",{href:!0});var Jqr=s(jR);Cto=r(Jqr,"Speech2TextProcessor"),Jqr.forEach(t),Mto=r(NFe," (Speech2Text model)"),NFe.forEach(t),Eto=i(Do),jh=n(Do,"LI",{});var DFe=s(jh);dK=n(DFe,"STRONG",{});var Yqr=s(dK);yto=r(Yqr,"speech_to_text_2"),Yqr.forEach(t),wto=r(DFe," \u2014 "),NR=n(DFe,"A",{href:!0});var Kqr=s(NR);Ato=r(Kqr,"Speech2Text2Processor"),Kqr.forEach(t),Lto=r(DFe," (Speech2Text2 model)"),DFe.forEach(t),Bto=i(Do),Nh=n(Do,"LI",{});var qFe=s(Nh);cK=n(qFe,"STRONG",{});var Zqr=s(cK);xto=r(Zqr,"trocr"),Zqr.forEach(t),kto=r(qFe," \u2014 "),DR=n(qFe,"A",{href:!0});var eGr=s(DR);Rto=r(eGr,"TrOCRProcessor"),eGr.forEach(t),Sto=r(qFe," (TrOCR model)"),qFe.forEach(t),Pto=i(Do),Dh=n(Do,"LI",{});var GFe=s(Dh);fK=n(GFe,"STRONG",{});var oGr=s(fK);$to=r(oGr,"vision-text-dual-encoder"),oGr.forEach(t),Ito=r(GFe," \u2014 "),qR=n(GFe,"A",{href:!0});var rGr=s(qR);jto=r(rGr,"VisionTextDualEncoderProcessor"),rGr.forEach(t),Nto=r(GFe," (VisionTextDualEncoder model)"),GFe.forEach(t),Dto=i(Do),qh=n(Do,"LI",{});var OFe=s(qh);mK=n(OFe,"STRONG",{});var tGr=s(mK);qto=r(tGr,"wav2vec2"),tGr.forEach(t),Gto=r(OFe," \u2014 "),GR=n(OFe,"A",{href:!0});var aGr=s(GR);Oto=r(aGr,"Wav2Vec2Processor"),aGr.forEach(t),Xto=r(OFe," (Wav2Vec2 model)"),OFe.forEach(t),Do.forEach(t),Vto=i(Dt),m(Gh.$$.fragment,Dt),zto=i(Dt),gK=n(Dt,"P",{});var nGr=s(gK);Wto=r(nGr,"Examples:"),nGr.forEach(t),Qto=i(Dt),m(GE.$$.fragment,Dt),Dt.forEach(t),Hto=i(zs),Oh=n(zs,"DIV",{class:!0});var jSe=s(Oh);m(OE.$$.fragment,jSe),Uto=i(jSe),hK=n(jSe,"P",{});var sGr=s(hK);Jto=r(sGr,"Register a new processor for this class."),sGr.forEach(t),jSe.forEach(t),zs.forEach(t),Bke=i(c),Ji=n(c,"H2",{class:!0});var NSe=s(Ji);Xh=n(NSe,"A",{id:!0,class:!0,href:!0});var lGr=s(Xh);pK=n(lGr,"SPAN",{});var iGr=s(pK);m(XE.$$.fragment,iGr),iGr.forEach(t),lGr.forEach(t),Yto=i(NSe),_K=n(NSe,"SPAN",{});var dGr=s(_K);Kto=r(dGr,"AutoModel"),dGr.forEach(t),NSe.forEach(t),xke=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(VE.$$.fragment,Ws),Zto=i(Ws),Yi=n(Ws,"P",{});var tW=s(Yi);eao=r(tW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uK=n(tW,"CODE",{});var cGr=s(uK);oao=r(cGr,"from_pretrained()"),cGr.forEach(t),rao=r(tW,"class method or the "),bK=n(tW,"CODE",{});var fGr=s(bK);tao=r(fGr,"from_config()"),fGr.forEach(t),aao=r(tW,`class
method.`),tW.forEach(t),nao=i(Ws),zE=n(Ws,"P",{});var DSe=s(zE);sao=r(DSe,"This class cannot be instantiated directly using "),vK=n(DSe,"CODE",{});var mGr=s(vK);lao=r(mGr,"__init__()"),mGr.forEach(t),iao=r(DSe," (throws an error)."),DSe.forEach(t),dao=i(Ws),Vr=n(Ws,"DIV",{class:!0});var Qs=s(Vr);m(WE.$$.fragment,Qs),cao=i(Qs),TK=n(Qs,"P",{});var gGr=s(TK);fao=r(gGr,"Instantiates one of the base model classes of the library from a configuration."),gGr.forEach(t),mao=i(Qs),Ki=n(Qs,"P",{});var aW=s(Ki);gao=r(aW,`Note:
Loading a model from its configuration file does `),FK=n(aW,"STRONG",{});var hGr=s(FK);hao=r(hGr,"not"),hGr.forEach(t),pao=r(aW,` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=n(aW,"CODE",{});var pGr=s(CK);_ao=r(pGr,"from_pretrained()"),pGr.forEach(t),uao=r(aW,"to load the model weights."),aW.forEach(t),bao=i(Qs),MK=n(Qs,"P",{});var _Gr=s(MK);vao=r(_Gr,"Examples:"),_Gr.forEach(t),Tao=i(Qs),m(QE.$$.fragment,Qs),Qs.forEach(t),Fao=i(Ws),je=n(Ws,"DIV",{class:!0});var qt=s(je);m(HE.$$.fragment,qt),Cao=i(qt),EK=n(qt,"P",{});var uGr=s(EK);Mao=r(uGr,"Instantiate one of the base model classes of the library from a pretrained model."),uGr.forEach(t),Eao=i(qt),Va=n(qt,"P",{});var gM=s(Va);yao=r(gM,"The model class to instantiate is selected based on the "),yK=n(gM,"CODE",{});var bGr=s(yK);wao=r(bGr,"model_type"),bGr.forEach(t),Aao=r(gM,` property of the config object (either
passed as an argument or loaded from `),wK=n(gM,"CODE",{});var vGr=s(wK);Lao=r(vGr,"pretrained_model_name_or_path"),vGr.forEach(t),Bao=r(gM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AK=n(gM,"CODE",{});var TGr=s(AK);xao=r(TGr,"pretrained_model_name_or_path"),TGr.forEach(t),kao=r(gM,":"),gM.forEach(t),Rao=i(qt),F=n(qt,"UL",{});var C=s(F);Vh=n(C,"LI",{});var XFe=s(Vh);LK=n(XFe,"STRONG",{});var FGr=s(LK);Sao=r(FGr,"albert"),FGr.forEach(t),Pao=r(XFe," \u2014 "),OR=n(XFe,"A",{href:!0});var CGr=s(OR);$ao=r(CGr,"AlbertModel"),CGr.forEach(t),Iao=r(XFe," (ALBERT model)"),XFe.forEach(t),jao=i(C),zh=n(C,"LI",{});var VFe=s(zh);BK=n(VFe,"STRONG",{});var MGr=s(BK);Nao=r(MGr,"bart"),MGr.forEach(t),Dao=r(VFe," \u2014 "),XR=n(VFe,"A",{href:!0});var EGr=s(XR);qao=r(EGr,"BartModel"),EGr.forEach(t),Gao=r(VFe," (BART model)"),VFe.forEach(t),Oao=i(C),Wh=n(C,"LI",{});var zFe=s(Wh);xK=n(zFe,"STRONG",{});var yGr=s(xK);Xao=r(yGr,"beit"),yGr.forEach(t),Vao=r(zFe," \u2014 "),VR=n(zFe,"A",{href:!0});var wGr=s(VR);zao=r(wGr,"BeitModel"),wGr.forEach(t),Wao=r(zFe," (BEiT model)"),zFe.forEach(t),Qao=i(C),Qh=n(C,"LI",{});var WFe=s(Qh);kK=n(WFe,"STRONG",{});var AGr=s(kK);Hao=r(AGr,"bert"),AGr.forEach(t),Uao=r(WFe," \u2014 "),zR=n(WFe,"A",{href:!0});var LGr=s(zR);Jao=r(LGr,"BertModel"),LGr.forEach(t),Yao=r(WFe," (BERT model)"),WFe.forEach(t),Kao=i(C),Hh=n(C,"LI",{});var QFe=s(Hh);RK=n(QFe,"STRONG",{});var BGr=s(RK);Zao=r(BGr,"bert-generation"),BGr.forEach(t),eno=r(QFe," \u2014 "),WR=n(QFe,"A",{href:!0});var xGr=s(WR);ono=r(xGr,"BertGenerationEncoder"),xGr.forEach(t),rno=r(QFe," (Bert Generation model)"),QFe.forEach(t),tno=i(C),Uh=n(C,"LI",{});var HFe=s(Uh);SK=n(HFe,"STRONG",{});var kGr=s(SK);ano=r(kGr,"big_bird"),kGr.forEach(t),nno=r(HFe," \u2014 "),QR=n(HFe,"A",{href:!0});var RGr=s(QR);sno=r(RGr,"BigBirdModel"),RGr.forEach(t),lno=r(HFe," (BigBird model)"),HFe.forEach(t),ino=i(C),Jh=n(C,"LI",{});var UFe=s(Jh);PK=n(UFe,"STRONG",{});var SGr=s(PK);dno=r(SGr,"bigbird_pegasus"),SGr.forEach(t),cno=r(UFe," \u2014 "),HR=n(UFe,"A",{href:!0});var PGr=s(HR);fno=r(PGr,"BigBirdPegasusModel"),PGr.forEach(t),mno=r(UFe," (BigBirdPegasus model)"),UFe.forEach(t),gno=i(C),Yh=n(C,"LI",{});var JFe=s(Yh);$K=n(JFe,"STRONG",{});var $Gr=s($K);hno=r($Gr,"blenderbot"),$Gr.forEach(t),pno=r(JFe," \u2014 "),UR=n(JFe,"A",{href:!0});var IGr=s(UR);_no=r(IGr,"BlenderbotModel"),IGr.forEach(t),uno=r(JFe," (Blenderbot model)"),JFe.forEach(t),bno=i(C),Kh=n(C,"LI",{});var YFe=s(Kh);IK=n(YFe,"STRONG",{});var jGr=s(IK);vno=r(jGr,"blenderbot-small"),jGr.forEach(t),Tno=r(YFe," \u2014 "),JR=n(YFe,"A",{href:!0});var NGr=s(JR);Fno=r(NGr,"BlenderbotSmallModel"),NGr.forEach(t),Cno=r(YFe," (BlenderbotSmall model)"),YFe.forEach(t),Mno=i(C),Zh=n(C,"LI",{});var KFe=s(Zh);jK=n(KFe,"STRONG",{});var DGr=s(jK);Eno=r(DGr,"camembert"),DGr.forEach(t),yno=r(KFe," \u2014 "),YR=n(KFe,"A",{href:!0});var qGr=s(YR);wno=r(qGr,"CamembertModel"),qGr.forEach(t),Ano=r(KFe," (CamemBERT model)"),KFe.forEach(t),Lno=i(C),ep=n(C,"LI",{});var ZFe=s(ep);NK=n(ZFe,"STRONG",{});var GGr=s(NK);Bno=r(GGr,"canine"),GGr.forEach(t),xno=r(ZFe," \u2014 "),KR=n(ZFe,"A",{href:!0});var OGr=s(KR);kno=r(OGr,"CanineModel"),OGr.forEach(t),Rno=r(ZFe," (Canine model)"),ZFe.forEach(t),Sno=i(C),op=n(C,"LI",{});var eCe=s(op);DK=n(eCe,"STRONG",{});var XGr=s(DK);Pno=r(XGr,"clip"),XGr.forEach(t),$no=r(eCe," \u2014 "),ZR=n(eCe,"A",{href:!0});var VGr=s(ZR);Ino=r(VGr,"CLIPModel"),VGr.forEach(t),jno=r(eCe," (CLIP model)"),eCe.forEach(t),Nno=i(C),rp=n(C,"LI",{});var oCe=s(rp);qK=n(oCe,"STRONG",{});var zGr=s(qK);Dno=r(zGr,"convbert"),zGr.forEach(t),qno=r(oCe," \u2014 "),eS=n(oCe,"A",{href:!0});var WGr=s(eS);Gno=r(WGr,"ConvBertModel"),WGr.forEach(t),Ono=r(oCe," (ConvBERT model)"),oCe.forEach(t),Xno=i(C),tp=n(C,"LI",{});var rCe=s(tp);GK=n(rCe,"STRONG",{});var QGr=s(GK);Vno=r(QGr,"convnext"),QGr.forEach(t),zno=r(rCe," \u2014 "),oS=n(rCe,"A",{href:!0});var HGr=s(oS);Wno=r(HGr,"ConvNextModel"),HGr.forEach(t),Qno=r(rCe," (ConvNext model)"),rCe.forEach(t),Hno=i(C),ap=n(C,"LI",{});var tCe=s(ap);OK=n(tCe,"STRONG",{});var UGr=s(OK);Uno=r(UGr,"ctrl"),UGr.forEach(t),Jno=r(tCe," \u2014 "),rS=n(tCe,"A",{href:!0});var JGr=s(rS);Yno=r(JGr,"CTRLModel"),JGr.forEach(t),Kno=r(tCe," (CTRL model)"),tCe.forEach(t),Zno=i(C),np=n(C,"LI",{});var aCe=s(np);XK=n(aCe,"STRONG",{});var YGr=s(XK);eso=r(YGr,"data2vec-audio"),YGr.forEach(t),oso=r(aCe," \u2014 "),tS=n(aCe,"A",{href:!0});var KGr=s(tS);rso=r(KGr,"Data2VecAudioModel"),KGr.forEach(t),tso=r(aCe," (Data2VecAudio model)"),aCe.forEach(t),aso=i(C),sp=n(C,"LI",{});var nCe=s(sp);VK=n(nCe,"STRONG",{});var ZGr=s(VK);nso=r(ZGr,"data2vec-text"),ZGr.forEach(t),sso=r(nCe," \u2014 "),aS=n(nCe,"A",{href:!0});var eOr=s(aS);lso=r(eOr,"Data2VecTextModel"),eOr.forEach(t),iso=r(nCe," (Data2VecText model)"),nCe.forEach(t),dso=i(C),lp=n(C,"LI",{});var sCe=s(lp);zK=n(sCe,"STRONG",{});var oOr=s(zK);cso=r(oOr,"deberta"),oOr.forEach(t),fso=r(sCe," \u2014 "),nS=n(sCe,"A",{href:!0});var rOr=s(nS);mso=r(rOr,"DebertaModel"),rOr.forEach(t),gso=r(sCe," (DeBERTa model)"),sCe.forEach(t),hso=i(C),ip=n(C,"LI",{});var lCe=s(ip);WK=n(lCe,"STRONG",{});var tOr=s(WK);pso=r(tOr,"deberta-v2"),tOr.forEach(t),_so=r(lCe," \u2014 "),sS=n(lCe,"A",{href:!0});var aOr=s(sS);uso=r(aOr,"DebertaV2Model"),aOr.forEach(t),bso=r(lCe," (DeBERTa-v2 model)"),lCe.forEach(t),vso=i(C),dp=n(C,"LI",{});var iCe=s(dp);QK=n(iCe,"STRONG",{});var nOr=s(QK);Tso=r(nOr,"decision_transformer"),nOr.forEach(t),Fso=r(iCe," \u2014 "),lS=n(iCe,"A",{href:!0});var sOr=s(lS);Cso=r(sOr,"DecisionTransformerModel"),sOr.forEach(t),Mso=r(iCe," (Decision Transformer model)"),iCe.forEach(t),Eso=i(C),cp=n(C,"LI",{});var dCe=s(cp);HK=n(dCe,"STRONG",{});var lOr=s(HK);yso=r(lOr,"deit"),lOr.forEach(t),wso=r(dCe," \u2014 "),iS=n(dCe,"A",{href:!0});var iOr=s(iS);Aso=r(iOr,"DeiTModel"),iOr.forEach(t),Lso=r(dCe," (DeiT model)"),dCe.forEach(t),Bso=i(C),fp=n(C,"LI",{});var cCe=s(fp);UK=n(cCe,"STRONG",{});var dOr=s(UK);xso=r(dOr,"detr"),dOr.forEach(t),kso=r(cCe," \u2014 "),dS=n(cCe,"A",{href:!0});var cOr=s(dS);Rso=r(cOr,"DetrModel"),cOr.forEach(t),Sso=r(cCe," (DETR model)"),cCe.forEach(t),Pso=i(C),mp=n(C,"LI",{});var fCe=s(mp);JK=n(fCe,"STRONG",{});var fOr=s(JK);$so=r(fOr,"distilbert"),fOr.forEach(t),Iso=r(fCe," \u2014 "),cS=n(fCe,"A",{href:!0});var mOr=s(cS);jso=r(mOr,"DistilBertModel"),mOr.forEach(t),Nso=r(fCe," (DistilBERT model)"),fCe.forEach(t),Dso=i(C),gp=n(C,"LI",{});var mCe=s(gp);YK=n(mCe,"STRONG",{});var gOr=s(YK);qso=r(gOr,"dpr"),gOr.forEach(t),Gso=r(mCe," \u2014 "),fS=n(mCe,"A",{href:!0});var hOr=s(fS);Oso=r(hOr,"DPRQuestionEncoder"),hOr.forEach(t),Xso=r(mCe," (DPR model)"),mCe.forEach(t),Vso=i(C),hp=n(C,"LI",{});var gCe=s(hp);KK=n(gCe,"STRONG",{});var pOr=s(KK);zso=r(pOr,"electra"),pOr.forEach(t),Wso=r(gCe," \u2014 "),mS=n(gCe,"A",{href:!0});var _Or=s(mS);Qso=r(_Or,"ElectraModel"),_Or.forEach(t),Hso=r(gCe," (ELECTRA model)"),gCe.forEach(t),Uso=i(C),pp=n(C,"LI",{});var hCe=s(pp);ZK=n(hCe,"STRONG",{});var uOr=s(ZK);Jso=r(uOr,"flaubert"),uOr.forEach(t),Yso=r(hCe," \u2014 "),gS=n(hCe,"A",{href:!0});var bOr=s(gS);Kso=r(bOr,"FlaubertModel"),bOr.forEach(t),Zso=r(hCe," (FlauBERT model)"),hCe.forEach(t),elo=i(C),_p=n(C,"LI",{});var pCe=s(_p);eZ=n(pCe,"STRONG",{});var vOr=s(eZ);olo=r(vOr,"fnet"),vOr.forEach(t),rlo=r(pCe," \u2014 "),hS=n(pCe,"A",{href:!0});var TOr=s(hS);tlo=r(TOr,"FNetModel"),TOr.forEach(t),alo=r(pCe," (FNet model)"),pCe.forEach(t),nlo=i(C),up=n(C,"LI",{});var _Ce=s(up);oZ=n(_Ce,"STRONG",{});var FOr=s(oZ);slo=r(FOr,"fsmt"),FOr.forEach(t),llo=r(_Ce," \u2014 "),pS=n(_Ce,"A",{href:!0});var COr=s(pS);ilo=r(COr,"FSMTModel"),COr.forEach(t),dlo=r(_Ce," (FairSeq Machine-Translation model)"),_Ce.forEach(t),clo=i(C),Ds=n(C,"LI",{});var Z8=s(Ds);rZ=n(Z8,"STRONG",{});var MOr=s(rZ);flo=r(MOr,"funnel"),MOr.forEach(t),mlo=r(Z8," \u2014 "),_S=n(Z8,"A",{href:!0});var EOr=s(_S);glo=r(EOr,"FunnelModel"),EOr.forEach(t),hlo=r(Z8," or "),uS=n(Z8,"A",{href:!0});var yOr=s(uS);plo=r(yOr,"FunnelBaseModel"),yOr.forEach(t),_lo=r(Z8," (Funnel Transformer model)"),Z8.forEach(t),ulo=i(C),bp=n(C,"LI",{});var uCe=s(bp);tZ=n(uCe,"STRONG",{});var wOr=s(tZ);blo=r(wOr,"glpn"),wOr.forEach(t),vlo=r(uCe," \u2014 "),bS=n(uCe,"A",{href:!0});var AOr=s(bS);Tlo=r(AOr,"GLPNModel"),AOr.forEach(t),Flo=r(uCe," (GLPN model)"),uCe.forEach(t),Clo=i(C),vp=n(C,"LI",{});var bCe=s(vp);aZ=n(bCe,"STRONG",{});var LOr=s(aZ);Mlo=r(LOr,"gpt2"),LOr.forEach(t),Elo=r(bCe," \u2014 "),vS=n(bCe,"A",{href:!0});var BOr=s(vS);ylo=r(BOr,"GPT2Model"),BOr.forEach(t),wlo=r(bCe," (OpenAI GPT-2 model)"),bCe.forEach(t),Alo=i(C),Tp=n(C,"LI",{});var vCe=s(Tp);nZ=n(vCe,"STRONG",{});var xOr=s(nZ);Llo=r(xOr,"gpt_neo"),xOr.forEach(t),Blo=r(vCe," \u2014 "),TS=n(vCe,"A",{href:!0});var kOr=s(TS);xlo=r(kOr,"GPTNeoModel"),kOr.forEach(t),klo=r(vCe," (GPT Neo model)"),vCe.forEach(t),Rlo=i(C),Fp=n(C,"LI",{});var TCe=s(Fp);sZ=n(TCe,"STRONG",{});var ROr=s(sZ);Slo=r(ROr,"gptj"),ROr.forEach(t),Plo=r(TCe," \u2014 "),FS=n(TCe,"A",{href:!0});var SOr=s(FS);$lo=r(SOr,"GPTJModel"),SOr.forEach(t),Ilo=r(TCe," (GPT-J model)"),TCe.forEach(t),jlo=i(C),Cp=n(C,"LI",{});var FCe=s(Cp);lZ=n(FCe,"STRONG",{});var POr=s(lZ);Nlo=r(POr,"hubert"),POr.forEach(t),Dlo=r(FCe," \u2014 "),CS=n(FCe,"A",{href:!0});var $Or=s(CS);qlo=r($Or,"HubertModel"),$Or.forEach(t),Glo=r(FCe," (Hubert model)"),FCe.forEach(t),Olo=i(C),Mp=n(C,"LI",{});var CCe=s(Mp);iZ=n(CCe,"STRONG",{});var IOr=s(iZ);Xlo=r(IOr,"ibert"),IOr.forEach(t),Vlo=r(CCe," \u2014 "),MS=n(CCe,"A",{href:!0});var jOr=s(MS);zlo=r(jOr,"IBertModel"),jOr.forEach(t),Wlo=r(CCe," (I-BERT model)"),CCe.forEach(t),Qlo=i(C),Ep=n(C,"LI",{});var MCe=s(Ep);dZ=n(MCe,"STRONG",{});var NOr=s(dZ);Hlo=r(NOr,"imagegpt"),NOr.forEach(t),Ulo=r(MCe," \u2014 "),ES=n(MCe,"A",{href:!0});var DOr=s(ES);Jlo=r(DOr,"ImageGPTModel"),DOr.forEach(t),Ylo=r(MCe," (ImageGPT model)"),MCe.forEach(t),Klo=i(C),yp=n(C,"LI",{});var ECe=s(yp);cZ=n(ECe,"STRONG",{});var qOr=s(cZ);Zlo=r(qOr,"layoutlm"),qOr.forEach(t),eio=r(ECe," \u2014 "),yS=n(ECe,"A",{href:!0});var GOr=s(yS);oio=r(GOr,"LayoutLMModel"),GOr.forEach(t),rio=r(ECe," (LayoutLM model)"),ECe.forEach(t),tio=i(C),wp=n(C,"LI",{});var yCe=s(wp);fZ=n(yCe,"STRONG",{});var OOr=s(fZ);aio=r(OOr,"layoutlmv2"),OOr.forEach(t),nio=r(yCe," \u2014 "),wS=n(yCe,"A",{href:!0});var XOr=s(wS);sio=r(XOr,"LayoutLMv2Model"),XOr.forEach(t),lio=r(yCe," (LayoutLMv2 model)"),yCe.forEach(t),iio=i(C),Ap=n(C,"LI",{});var wCe=s(Ap);mZ=n(wCe,"STRONG",{});var VOr=s(mZ);dio=r(VOr,"led"),VOr.forEach(t),cio=r(wCe," \u2014 "),AS=n(wCe,"A",{href:!0});var zOr=s(AS);fio=r(zOr,"LEDModel"),zOr.forEach(t),mio=r(wCe," (LED model)"),wCe.forEach(t),gio=i(C),Lp=n(C,"LI",{});var ACe=s(Lp);gZ=n(ACe,"STRONG",{});var WOr=s(gZ);hio=r(WOr,"longformer"),WOr.forEach(t),pio=r(ACe," \u2014 "),LS=n(ACe,"A",{href:!0});var QOr=s(LS);_io=r(QOr,"LongformerModel"),QOr.forEach(t),uio=r(ACe," (Longformer model)"),ACe.forEach(t),bio=i(C),Bp=n(C,"LI",{});var LCe=s(Bp);hZ=n(LCe,"STRONG",{});var HOr=s(hZ);vio=r(HOr,"luke"),HOr.forEach(t),Tio=r(LCe," \u2014 "),BS=n(LCe,"A",{href:!0});var UOr=s(BS);Fio=r(UOr,"LukeModel"),UOr.forEach(t),Cio=r(LCe," (LUKE model)"),LCe.forEach(t),Mio=i(C),xp=n(C,"LI",{});var BCe=s(xp);pZ=n(BCe,"STRONG",{});var JOr=s(pZ);Eio=r(JOr,"lxmert"),JOr.forEach(t),yio=r(BCe," \u2014 "),xS=n(BCe,"A",{href:!0});var YOr=s(xS);wio=r(YOr,"LxmertModel"),YOr.forEach(t),Aio=r(BCe," (LXMERT model)"),BCe.forEach(t),Lio=i(C),kp=n(C,"LI",{});var xCe=s(kp);_Z=n(xCe,"STRONG",{});var KOr=s(_Z);Bio=r(KOr,"m2m_100"),KOr.forEach(t),xio=r(xCe," \u2014 "),kS=n(xCe,"A",{href:!0});var ZOr=s(kS);kio=r(ZOr,"M2M100Model"),ZOr.forEach(t),Rio=r(xCe," (M2M100 model)"),xCe.forEach(t),Sio=i(C),Rp=n(C,"LI",{});var kCe=s(Rp);uZ=n(kCe,"STRONG",{});var eXr=s(uZ);Pio=r(eXr,"marian"),eXr.forEach(t),$io=r(kCe," \u2014 "),RS=n(kCe,"A",{href:!0});var oXr=s(RS);Iio=r(oXr,"MarianModel"),oXr.forEach(t),jio=r(kCe," (Marian model)"),kCe.forEach(t),Nio=i(C),Sp=n(C,"LI",{});var RCe=s(Sp);bZ=n(RCe,"STRONG",{});var rXr=s(bZ);Dio=r(rXr,"maskformer"),rXr.forEach(t),qio=r(RCe," \u2014 "),SS=n(RCe,"A",{href:!0});var tXr=s(SS);Gio=r(tXr,"MaskFormerModel"),tXr.forEach(t),Oio=r(RCe," (MaskFormer model)"),RCe.forEach(t),Xio=i(C),Pp=n(C,"LI",{});var SCe=s(Pp);vZ=n(SCe,"STRONG",{});var aXr=s(vZ);Vio=r(aXr,"mbart"),aXr.forEach(t),zio=r(SCe," \u2014 "),PS=n(SCe,"A",{href:!0});var nXr=s(PS);Wio=r(nXr,"MBartModel"),nXr.forEach(t),Qio=r(SCe," (mBART model)"),SCe.forEach(t),Hio=i(C),$p=n(C,"LI",{});var PCe=s($p);TZ=n(PCe,"STRONG",{});var sXr=s(TZ);Uio=r(sXr,"megatron-bert"),sXr.forEach(t),Jio=r(PCe," \u2014 "),$S=n(PCe,"A",{href:!0});var lXr=s($S);Yio=r(lXr,"MegatronBertModel"),lXr.forEach(t),Kio=r(PCe," (MegatronBert model)"),PCe.forEach(t),Zio=i(C),Ip=n(C,"LI",{});var $Ce=s(Ip);FZ=n($Ce,"STRONG",{});var iXr=s(FZ);edo=r(iXr,"mobilebert"),iXr.forEach(t),odo=r($Ce," \u2014 "),IS=n($Ce,"A",{href:!0});var dXr=s(IS);rdo=r(dXr,"MobileBertModel"),dXr.forEach(t),tdo=r($Ce," (MobileBERT model)"),$Ce.forEach(t),ado=i(C),jp=n(C,"LI",{});var ICe=s(jp);CZ=n(ICe,"STRONG",{});var cXr=s(CZ);ndo=r(cXr,"mpnet"),cXr.forEach(t),sdo=r(ICe," \u2014 "),jS=n(ICe,"A",{href:!0});var fXr=s(jS);ldo=r(fXr,"MPNetModel"),fXr.forEach(t),ido=r(ICe," (MPNet model)"),ICe.forEach(t),ddo=i(C),Np=n(C,"LI",{});var jCe=s(Np);MZ=n(jCe,"STRONG",{});var mXr=s(MZ);cdo=r(mXr,"mt5"),mXr.forEach(t),fdo=r(jCe," \u2014 "),NS=n(jCe,"A",{href:!0});var gXr=s(NS);mdo=r(gXr,"MT5Model"),gXr.forEach(t),gdo=r(jCe," (mT5 model)"),jCe.forEach(t),hdo=i(C),Dp=n(C,"LI",{});var NCe=s(Dp);EZ=n(NCe,"STRONG",{});var hXr=s(EZ);pdo=r(hXr,"nystromformer"),hXr.forEach(t),_do=r(NCe," \u2014 "),DS=n(NCe,"A",{href:!0});var pXr=s(DS);udo=r(pXr,"NystromformerModel"),pXr.forEach(t),bdo=r(NCe," (Nystromformer model)"),NCe.forEach(t),vdo=i(C),qp=n(C,"LI",{});var DCe=s(qp);yZ=n(DCe,"STRONG",{});var _Xr=s(yZ);Tdo=r(_Xr,"openai-gpt"),_Xr.forEach(t),Fdo=r(DCe," \u2014 "),qS=n(DCe,"A",{href:!0});var uXr=s(qS);Cdo=r(uXr,"OpenAIGPTModel"),uXr.forEach(t),Mdo=r(DCe," (OpenAI GPT model)"),DCe.forEach(t),Edo=i(C),Gp=n(C,"LI",{});var qCe=s(Gp);wZ=n(qCe,"STRONG",{});var bXr=s(wZ);ydo=r(bXr,"pegasus"),bXr.forEach(t),wdo=r(qCe," \u2014 "),GS=n(qCe,"A",{href:!0});var vXr=s(GS);Ado=r(vXr,"PegasusModel"),vXr.forEach(t),Ldo=r(qCe," (Pegasus model)"),qCe.forEach(t),Bdo=i(C),Op=n(C,"LI",{});var GCe=s(Op);AZ=n(GCe,"STRONG",{});var TXr=s(AZ);xdo=r(TXr,"perceiver"),TXr.forEach(t),kdo=r(GCe," \u2014 "),OS=n(GCe,"A",{href:!0});var FXr=s(OS);Rdo=r(FXr,"PerceiverModel"),FXr.forEach(t),Sdo=r(GCe," (Perceiver model)"),GCe.forEach(t),Pdo=i(C),Xp=n(C,"LI",{});var OCe=s(Xp);LZ=n(OCe,"STRONG",{});var CXr=s(LZ);$do=r(CXr,"plbart"),CXr.forEach(t),Ido=r(OCe," \u2014 "),XS=n(OCe,"A",{href:!0});var MXr=s(XS);jdo=r(MXr,"PLBartModel"),MXr.forEach(t),Ndo=r(OCe," (PLBart model)"),OCe.forEach(t),Ddo=i(C),Vp=n(C,"LI",{});var XCe=s(Vp);BZ=n(XCe,"STRONG",{});var EXr=s(BZ);qdo=r(EXr,"poolformer"),EXr.forEach(t),Gdo=r(XCe," \u2014 "),VS=n(XCe,"A",{href:!0});var yXr=s(VS);Odo=r(yXr,"PoolFormerModel"),yXr.forEach(t),Xdo=r(XCe," (PoolFormer model)"),XCe.forEach(t),Vdo=i(C),zp=n(C,"LI",{});var VCe=s(zp);xZ=n(VCe,"STRONG",{});var wXr=s(xZ);zdo=r(wXr,"prophetnet"),wXr.forEach(t),Wdo=r(VCe," \u2014 "),zS=n(VCe,"A",{href:!0});var AXr=s(zS);Qdo=r(AXr,"ProphetNetModel"),AXr.forEach(t),Hdo=r(VCe," (ProphetNet model)"),VCe.forEach(t),Udo=i(C),Wp=n(C,"LI",{});var zCe=s(Wp);kZ=n(zCe,"STRONG",{});var LXr=s(kZ);Jdo=r(LXr,"qdqbert"),LXr.forEach(t),Ydo=r(zCe," \u2014 "),WS=n(zCe,"A",{href:!0});var BXr=s(WS);Kdo=r(BXr,"QDQBertModel"),BXr.forEach(t),Zdo=r(zCe," (QDQBert model)"),zCe.forEach(t),eco=i(C),Qp=n(C,"LI",{});var WCe=s(Qp);RZ=n(WCe,"STRONG",{});var xXr=s(RZ);oco=r(xXr,"reformer"),xXr.forEach(t),rco=r(WCe," \u2014 "),QS=n(WCe,"A",{href:!0});var kXr=s(QS);tco=r(kXr,"ReformerModel"),kXr.forEach(t),aco=r(WCe," (Reformer model)"),WCe.forEach(t),nco=i(C),Hp=n(C,"LI",{});var QCe=s(Hp);SZ=n(QCe,"STRONG",{});var RXr=s(SZ);sco=r(RXr,"rembert"),RXr.forEach(t),lco=r(QCe," \u2014 "),HS=n(QCe,"A",{href:!0});var SXr=s(HS);ico=r(SXr,"RemBertModel"),SXr.forEach(t),dco=r(QCe," (RemBERT model)"),QCe.forEach(t),cco=i(C),Up=n(C,"LI",{});var HCe=s(Up);PZ=n(HCe,"STRONG",{});var PXr=s(PZ);fco=r(PXr,"resnet"),PXr.forEach(t),mco=r(HCe," \u2014 "),US=n(HCe,"A",{href:!0});var $Xr=s(US);gco=r($Xr,"ResNetModel"),$Xr.forEach(t),hco=r(HCe," (ResNet model)"),HCe.forEach(t),pco=i(C),Jp=n(C,"LI",{});var UCe=s(Jp);$Z=n(UCe,"STRONG",{});var IXr=s($Z);_co=r(IXr,"retribert"),IXr.forEach(t),uco=r(UCe," \u2014 "),JS=n(UCe,"A",{href:!0});var jXr=s(JS);bco=r(jXr,"RetriBertModel"),jXr.forEach(t),vco=r(UCe," (RetriBERT model)"),UCe.forEach(t),Tco=i(C),Yp=n(C,"LI",{});var JCe=s(Yp);IZ=n(JCe,"STRONG",{});var NXr=s(IZ);Fco=r(NXr,"roberta"),NXr.forEach(t),Cco=r(JCe," \u2014 "),YS=n(JCe,"A",{href:!0});var DXr=s(YS);Mco=r(DXr,"RobertaModel"),DXr.forEach(t),Eco=r(JCe," (RoBERTa model)"),JCe.forEach(t),yco=i(C),Kp=n(C,"LI",{});var YCe=s(Kp);jZ=n(YCe,"STRONG",{});var qXr=s(jZ);wco=r(qXr,"roformer"),qXr.forEach(t),Aco=r(YCe," \u2014 "),KS=n(YCe,"A",{href:!0});var GXr=s(KS);Lco=r(GXr,"RoFormerModel"),GXr.forEach(t),Bco=r(YCe," (RoFormer model)"),YCe.forEach(t),xco=i(C),Zp=n(C,"LI",{});var KCe=s(Zp);NZ=n(KCe,"STRONG",{});var OXr=s(NZ);kco=r(OXr,"segformer"),OXr.forEach(t),Rco=r(KCe," \u2014 "),ZS=n(KCe,"A",{href:!0});var XXr=s(ZS);Sco=r(XXr,"SegformerModel"),XXr.forEach(t),Pco=r(KCe," (SegFormer model)"),KCe.forEach(t),$co=i(C),e_=n(C,"LI",{});var ZCe=s(e_);DZ=n(ZCe,"STRONG",{});var VXr=s(DZ);Ico=r(VXr,"sew"),VXr.forEach(t),jco=r(ZCe," \u2014 "),eP=n(ZCe,"A",{href:!0});var zXr=s(eP);Nco=r(zXr,"SEWModel"),zXr.forEach(t),Dco=r(ZCe," (SEW model)"),ZCe.forEach(t),qco=i(C),o_=n(C,"LI",{});var eMe=s(o_);qZ=n(eMe,"STRONG",{});var WXr=s(qZ);Gco=r(WXr,"sew-d"),WXr.forEach(t),Oco=r(eMe," \u2014 "),oP=n(eMe,"A",{href:!0});var QXr=s(oP);Xco=r(QXr,"SEWDModel"),QXr.forEach(t),Vco=r(eMe," (SEW-D model)"),eMe.forEach(t),zco=i(C),r_=n(C,"LI",{});var oMe=s(r_);GZ=n(oMe,"STRONG",{});var HXr=s(GZ);Wco=r(HXr,"speech_to_text"),HXr.forEach(t),Qco=r(oMe," \u2014 "),rP=n(oMe,"A",{href:!0});var UXr=s(rP);Hco=r(UXr,"Speech2TextModel"),UXr.forEach(t),Uco=r(oMe," (Speech2Text model)"),oMe.forEach(t),Jco=i(C),t_=n(C,"LI",{});var rMe=s(t_);OZ=n(rMe,"STRONG",{});var JXr=s(OZ);Yco=r(JXr,"splinter"),JXr.forEach(t),Kco=r(rMe," \u2014 "),tP=n(rMe,"A",{href:!0});var YXr=s(tP);Zco=r(YXr,"SplinterModel"),YXr.forEach(t),efo=r(rMe," (Splinter model)"),rMe.forEach(t),ofo=i(C),a_=n(C,"LI",{});var tMe=s(a_);XZ=n(tMe,"STRONG",{});var KXr=s(XZ);rfo=r(KXr,"squeezebert"),KXr.forEach(t),tfo=r(tMe," \u2014 "),aP=n(tMe,"A",{href:!0});var ZXr=s(aP);afo=r(ZXr,"SqueezeBertModel"),ZXr.forEach(t),nfo=r(tMe," (SqueezeBERT model)"),tMe.forEach(t),sfo=i(C),n_=n(C,"LI",{});var aMe=s(n_);VZ=n(aMe,"STRONG",{});var eVr=s(VZ);lfo=r(eVr,"swin"),eVr.forEach(t),ifo=r(aMe," \u2014 "),nP=n(aMe,"A",{href:!0});var oVr=s(nP);dfo=r(oVr,"SwinModel"),oVr.forEach(t),cfo=r(aMe," (Swin model)"),aMe.forEach(t),ffo=i(C),s_=n(C,"LI",{});var nMe=s(s_);zZ=n(nMe,"STRONG",{});var rVr=s(zZ);mfo=r(rVr,"t5"),rVr.forEach(t),gfo=r(nMe," \u2014 "),sP=n(nMe,"A",{href:!0});var tVr=s(sP);hfo=r(tVr,"T5Model"),tVr.forEach(t),pfo=r(nMe," (T5 model)"),nMe.forEach(t),_fo=i(C),l_=n(C,"LI",{});var sMe=s(l_);WZ=n(sMe,"STRONG",{});var aVr=s(WZ);ufo=r(aVr,"tapas"),aVr.forEach(t),bfo=r(sMe," \u2014 "),lP=n(sMe,"A",{href:!0});var nVr=s(lP);vfo=r(nVr,"TapasModel"),nVr.forEach(t),Tfo=r(sMe," (TAPAS model)"),sMe.forEach(t),Ffo=i(C),i_=n(C,"LI",{});var lMe=s(i_);QZ=n(lMe,"STRONG",{});var sVr=s(QZ);Cfo=r(sVr,"transfo-xl"),sVr.forEach(t),Mfo=r(lMe," \u2014 "),iP=n(lMe,"A",{href:!0});var lVr=s(iP);Efo=r(lVr,"TransfoXLModel"),lVr.forEach(t),yfo=r(lMe," (Transformer-XL model)"),lMe.forEach(t),wfo=i(C),d_=n(C,"LI",{});var iMe=s(d_);HZ=n(iMe,"STRONG",{});var iVr=s(HZ);Afo=r(iVr,"unispeech"),iVr.forEach(t),Lfo=r(iMe," \u2014 "),dP=n(iMe,"A",{href:!0});var dVr=s(dP);Bfo=r(dVr,"UniSpeechModel"),dVr.forEach(t),xfo=r(iMe," (UniSpeech model)"),iMe.forEach(t),kfo=i(C),c_=n(C,"LI",{});var dMe=s(c_);UZ=n(dMe,"STRONG",{});var cVr=s(UZ);Rfo=r(cVr,"unispeech-sat"),cVr.forEach(t),Sfo=r(dMe," \u2014 "),cP=n(dMe,"A",{href:!0});var fVr=s(cP);Pfo=r(fVr,"UniSpeechSatModel"),fVr.forEach(t),$fo=r(dMe," (UniSpeechSat model)"),dMe.forEach(t),Ifo=i(C),f_=n(C,"LI",{});var cMe=s(f_);JZ=n(cMe,"STRONG",{});var mVr=s(JZ);jfo=r(mVr,"van"),mVr.forEach(t),Nfo=r(cMe," \u2014 "),fP=n(cMe,"A",{href:!0});var gVr=s(fP);Dfo=r(gVr,"VanModel"),gVr.forEach(t),qfo=r(cMe," (VAN model)"),cMe.forEach(t),Gfo=i(C),m_=n(C,"LI",{});var fMe=s(m_);YZ=n(fMe,"STRONG",{});var hVr=s(YZ);Ofo=r(hVr,"vilt"),hVr.forEach(t),Xfo=r(fMe," \u2014 "),mP=n(fMe,"A",{href:!0});var pVr=s(mP);Vfo=r(pVr,"ViltModel"),pVr.forEach(t),zfo=r(fMe," (ViLT model)"),fMe.forEach(t),Wfo=i(C),g_=n(C,"LI",{});var mMe=s(g_);KZ=n(mMe,"STRONG",{});var _Vr=s(KZ);Qfo=r(_Vr,"vision-text-dual-encoder"),_Vr.forEach(t),Hfo=r(mMe," \u2014 "),gP=n(mMe,"A",{href:!0});var uVr=s(gP);Ufo=r(uVr,"VisionTextDualEncoderModel"),uVr.forEach(t),Jfo=r(mMe," (VisionTextDualEncoder model)"),mMe.forEach(t),Yfo=i(C),h_=n(C,"LI",{});var gMe=s(h_);ZZ=n(gMe,"STRONG",{});var bVr=s(ZZ);Kfo=r(bVr,"visual_bert"),bVr.forEach(t),Zfo=r(gMe," \u2014 "),hP=n(gMe,"A",{href:!0});var vVr=s(hP);emo=r(vVr,"VisualBertModel"),vVr.forEach(t),omo=r(gMe," (VisualBert model)"),gMe.forEach(t),rmo=i(C),p_=n(C,"LI",{});var hMe=s(p_);eee=n(hMe,"STRONG",{});var TVr=s(eee);tmo=r(TVr,"vit"),TVr.forEach(t),amo=r(hMe," \u2014 "),pP=n(hMe,"A",{href:!0});var FVr=s(pP);nmo=r(FVr,"ViTModel"),FVr.forEach(t),smo=r(hMe," (ViT model)"),hMe.forEach(t),lmo=i(C),__=n(C,"LI",{});var pMe=s(__);oee=n(pMe,"STRONG",{});var CVr=s(oee);imo=r(CVr,"vit_mae"),CVr.forEach(t),dmo=r(pMe," \u2014 "),_P=n(pMe,"A",{href:!0});var MVr=s(_P);cmo=r(MVr,"ViTMAEModel"),MVr.forEach(t),fmo=r(pMe," (ViTMAE model)"),pMe.forEach(t),mmo=i(C),u_=n(C,"LI",{});var _Me=s(u_);ree=n(_Me,"STRONG",{});var EVr=s(ree);gmo=r(EVr,"wav2vec2"),EVr.forEach(t),hmo=r(_Me," \u2014 "),uP=n(_Me,"A",{href:!0});var yVr=s(uP);pmo=r(yVr,"Wav2Vec2Model"),yVr.forEach(t),_mo=r(_Me," (Wav2Vec2 model)"),_Me.forEach(t),umo=i(C),b_=n(C,"LI",{});var uMe=s(b_);tee=n(uMe,"STRONG",{});var wVr=s(tee);bmo=r(wVr,"wavlm"),wVr.forEach(t),vmo=r(uMe," \u2014 "),bP=n(uMe,"A",{href:!0});var AVr=s(bP);Tmo=r(AVr,"WavLMModel"),AVr.forEach(t),Fmo=r(uMe," (WavLM model)"),uMe.forEach(t),Cmo=i(C),v_=n(C,"LI",{});var bMe=s(v_);aee=n(bMe,"STRONG",{});var LVr=s(aee);Mmo=r(LVr,"xglm"),LVr.forEach(t),Emo=r(bMe," \u2014 "),vP=n(bMe,"A",{href:!0});var BVr=s(vP);ymo=r(BVr,"XGLMModel"),BVr.forEach(t),wmo=r(bMe," (XGLM model)"),bMe.forEach(t),Amo=i(C),T_=n(C,"LI",{});var vMe=s(T_);nee=n(vMe,"STRONG",{});var xVr=s(nee);Lmo=r(xVr,"xlm"),xVr.forEach(t),Bmo=r(vMe," \u2014 "),TP=n(vMe,"A",{href:!0});var kVr=s(TP);xmo=r(kVr,"XLMModel"),kVr.forEach(t),kmo=r(vMe," (XLM model)"),vMe.forEach(t),Rmo=i(C),F_=n(C,"LI",{});var TMe=s(F_);see=n(TMe,"STRONG",{});var RVr=s(see);Smo=r(RVr,"xlm-prophetnet"),RVr.forEach(t),Pmo=r(TMe," \u2014 "),FP=n(TMe,"A",{href:!0});var SVr=s(FP);$mo=r(SVr,"XLMProphetNetModel"),SVr.forEach(t),Imo=r(TMe," (XLMProphetNet model)"),TMe.forEach(t),jmo=i(C),C_=n(C,"LI",{});var FMe=s(C_);lee=n(FMe,"STRONG",{});var PVr=s(lee);Nmo=r(PVr,"xlm-roberta"),PVr.forEach(t),Dmo=r(FMe," \u2014 "),CP=n(FMe,"A",{href:!0});var $Vr=s(CP);qmo=r($Vr,"XLMRobertaModel"),$Vr.forEach(t),Gmo=r(FMe," (XLM-RoBERTa model)"),FMe.forEach(t),Omo=i(C),M_=n(C,"LI",{});var CMe=s(M_);iee=n(CMe,"STRONG",{});var IVr=s(iee);Xmo=r(IVr,"xlm-roberta-xl"),IVr.forEach(t),Vmo=r(CMe," \u2014 "),MP=n(CMe,"A",{href:!0});var jVr=s(MP);zmo=r(jVr,"XLMRobertaXLModel"),jVr.forEach(t),Wmo=r(CMe," (XLM-RoBERTa-XL model)"),CMe.forEach(t),Qmo=i(C),E_=n(C,"LI",{});var MMe=s(E_);dee=n(MMe,"STRONG",{});var NVr=s(dee);Hmo=r(NVr,"xlnet"),NVr.forEach(t),Umo=r(MMe," \u2014 "),EP=n(MMe,"A",{href:!0});var DVr=s(EP);Jmo=r(DVr,"XLNetModel"),DVr.forEach(t),Ymo=r(MMe," (XLNet model)"),MMe.forEach(t),Kmo=i(C),y_=n(C,"LI",{});var EMe=s(y_);cee=n(EMe,"STRONG",{});var qVr=s(cee);Zmo=r(qVr,"yoso"),qVr.forEach(t),ego=r(EMe," \u2014 "),yP=n(EMe,"A",{href:!0});var GVr=s(yP);ogo=r(GVr,"YosoModel"),GVr.forEach(t),rgo=r(EMe," (YOSO model)"),EMe.forEach(t),C.forEach(t),tgo=i(qt),w_=n(qt,"P",{});var yMe=s(w_);ago=r(yMe,"The model is set in evaluation mode by default using "),fee=n(yMe,"CODE",{});var OVr=s(fee);ngo=r(OVr,"model.eval()"),OVr.forEach(t),sgo=r(yMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mee=n(yMe,"CODE",{});var XVr=s(mee);lgo=r(XVr,"model.train()"),XVr.forEach(t),yMe.forEach(t),igo=i(qt),gee=n(qt,"P",{});var VVr=s(gee);dgo=r(VVr,"Examples:"),VVr.forEach(t),cgo=i(qt),m(UE.$$.fragment,qt),qt.forEach(t),Ws.forEach(t),kke=i(c),Zi=n(c,"H2",{class:!0});var qSe=s(Zi);A_=n(qSe,"A",{id:!0,class:!0,href:!0});var zVr=s(A_);hee=n(zVr,"SPAN",{});var WVr=s(hee);m(JE.$$.fragment,WVr),WVr.forEach(t),zVr.forEach(t),fgo=i(qSe),pee=n(qSe,"SPAN",{});var QVr=s(pee);mgo=r(QVr,"AutoModelForPreTraining"),QVr.forEach(t),qSe.forEach(t),Rke=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(YE.$$.fragment,Hs),ggo=i(Hs),ed=n(Hs,"P",{});var nW=s(ed);hgo=r(nW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_ee=n(nW,"CODE",{});var HVr=s(_ee);pgo=r(HVr,"from_pretrained()"),HVr.forEach(t),_go=r(nW,"class method or the "),uee=n(nW,"CODE",{});var UVr=s(uee);ugo=r(UVr,"from_config()"),UVr.forEach(t),bgo=r(nW,`class
method.`),nW.forEach(t),vgo=i(Hs),KE=n(Hs,"P",{});var GSe=s(KE);Tgo=r(GSe,"This class cannot be instantiated directly using "),bee=n(GSe,"CODE",{});var JVr=s(bee);Fgo=r(JVr,"__init__()"),JVr.forEach(t),Cgo=r(GSe," (throws an error)."),GSe.forEach(t),Mgo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(ZE.$$.fragment,Us),Ego=i(Us),vee=n(Us,"P",{});var YVr=s(vee);ygo=r(YVr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),YVr.forEach(t),wgo=i(Us),od=n(Us,"P",{});var sW=s(od);Ago=r(sW,`Note:
Loading a model from its configuration file does `),Tee=n(sW,"STRONG",{});var KVr=s(Tee);Lgo=r(KVr,"not"),KVr.forEach(t),Bgo=r(sW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fee=n(sW,"CODE",{});var ZVr=s(Fee);xgo=r(ZVr,"from_pretrained()"),ZVr.forEach(t),kgo=r(sW,"to load the model weights."),sW.forEach(t),Rgo=i(Us),Cee=n(Us,"P",{});var ezr=s(Cee);Sgo=r(ezr,"Examples:"),ezr.forEach(t),Pgo=i(Us),m(e3.$$.fragment,Us),Us.forEach(t),$go=i(Hs),Ne=n(Hs,"DIV",{class:!0});var Gt=s(Ne);m(o3.$$.fragment,Gt),Igo=i(Gt),Mee=n(Gt,"P",{});var ozr=s(Mee);jgo=r(ozr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ozr.forEach(t),Ngo=i(Gt),za=n(Gt,"P",{});var hM=s(za);Dgo=r(hM,"The model class to instantiate is selected based on the "),Eee=n(hM,"CODE",{});var rzr=s(Eee);qgo=r(rzr,"model_type"),rzr.forEach(t),Ggo=r(hM,` property of the config object (either
passed as an argument or loaded from `),yee=n(hM,"CODE",{});var tzr=s(yee);Ogo=r(tzr,"pretrained_model_name_or_path"),tzr.forEach(t),Xgo=r(hM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wee=n(hM,"CODE",{});var azr=s(wee);Vgo=r(azr,"pretrained_model_name_or_path"),azr.forEach(t),zgo=r(hM,":"),hM.forEach(t),Wgo=i(Gt),k=n(Gt,"UL",{});var S=s(k);L_=n(S,"LI",{});var wMe=s(L_);Aee=n(wMe,"STRONG",{});var nzr=s(Aee);Qgo=r(nzr,"albert"),nzr.forEach(t),Hgo=r(wMe," \u2014 "),wP=n(wMe,"A",{href:!0});var szr=s(wP);Ugo=r(szr,"AlbertForPreTraining"),szr.forEach(t),Jgo=r(wMe," (ALBERT model)"),wMe.forEach(t),Ygo=i(S),B_=n(S,"LI",{});var AMe=s(B_);Lee=n(AMe,"STRONG",{});var lzr=s(Lee);Kgo=r(lzr,"bart"),lzr.forEach(t),Zgo=r(AMe," \u2014 "),AP=n(AMe,"A",{href:!0});var izr=s(AP);eho=r(izr,"BartForConditionalGeneration"),izr.forEach(t),oho=r(AMe," (BART model)"),AMe.forEach(t),rho=i(S),x_=n(S,"LI",{});var LMe=s(x_);Bee=n(LMe,"STRONG",{});var dzr=s(Bee);tho=r(dzr,"bert"),dzr.forEach(t),aho=r(LMe," \u2014 "),LP=n(LMe,"A",{href:!0});var czr=s(LP);nho=r(czr,"BertForPreTraining"),czr.forEach(t),sho=r(LMe," (BERT model)"),LMe.forEach(t),lho=i(S),k_=n(S,"LI",{});var BMe=s(k_);xee=n(BMe,"STRONG",{});var fzr=s(xee);iho=r(fzr,"big_bird"),fzr.forEach(t),dho=r(BMe," \u2014 "),BP=n(BMe,"A",{href:!0});var mzr=s(BP);cho=r(mzr,"BigBirdForPreTraining"),mzr.forEach(t),fho=r(BMe," (BigBird model)"),BMe.forEach(t),mho=i(S),R_=n(S,"LI",{});var xMe=s(R_);kee=n(xMe,"STRONG",{});var gzr=s(kee);gho=r(gzr,"camembert"),gzr.forEach(t),hho=r(xMe," \u2014 "),xP=n(xMe,"A",{href:!0});var hzr=s(xP);pho=r(hzr,"CamembertForMaskedLM"),hzr.forEach(t),_ho=r(xMe," (CamemBERT model)"),xMe.forEach(t),uho=i(S),S_=n(S,"LI",{});var kMe=s(S_);Ree=n(kMe,"STRONG",{});var pzr=s(Ree);bho=r(pzr,"ctrl"),pzr.forEach(t),vho=r(kMe," \u2014 "),kP=n(kMe,"A",{href:!0});var _zr=s(kP);Tho=r(_zr,"CTRLLMHeadModel"),_zr.forEach(t),Fho=r(kMe," (CTRL model)"),kMe.forEach(t),Cho=i(S),P_=n(S,"LI",{});var RMe=s(P_);See=n(RMe,"STRONG",{});var uzr=s(See);Mho=r(uzr,"data2vec-text"),uzr.forEach(t),Eho=r(RMe," \u2014 "),RP=n(RMe,"A",{href:!0});var bzr=s(RP);yho=r(bzr,"Data2VecTextForMaskedLM"),bzr.forEach(t),who=r(RMe," (Data2VecText model)"),RMe.forEach(t),Aho=i(S),$_=n(S,"LI",{});var SMe=s($_);Pee=n(SMe,"STRONG",{});var vzr=s(Pee);Lho=r(vzr,"deberta"),vzr.forEach(t),Bho=r(SMe," \u2014 "),SP=n(SMe,"A",{href:!0});var Tzr=s(SP);xho=r(Tzr,"DebertaForMaskedLM"),Tzr.forEach(t),kho=r(SMe," (DeBERTa model)"),SMe.forEach(t),Rho=i(S),I_=n(S,"LI",{});var PMe=s(I_);$ee=n(PMe,"STRONG",{});var Fzr=s($ee);Sho=r(Fzr,"deberta-v2"),Fzr.forEach(t),Pho=r(PMe," \u2014 "),PP=n(PMe,"A",{href:!0});var Czr=s(PP);$ho=r(Czr,"DebertaV2ForMaskedLM"),Czr.forEach(t),Iho=r(PMe," (DeBERTa-v2 model)"),PMe.forEach(t),jho=i(S),j_=n(S,"LI",{});var $Me=s(j_);Iee=n($Me,"STRONG",{});var Mzr=s(Iee);Nho=r(Mzr,"distilbert"),Mzr.forEach(t),Dho=r($Me," \u2014 "),$P=n($Me,"A",{href:!0});var Ezr=s($P);qho=r(Ezr,"DistilBertForMaskedLM"),Ezr.forEach(t),Gho=r($Me," (DistilBERT model)"),$Me.forEach(t),Oho=i(S),N_=n(S,"LI",{});var IMe=s(N_);jee=n(IMe,"STRONG",{});var yzr=s(jee);Xho=r(yzr,"electra"),yzr.forEach(t),Vho=r(IMe," \u2014 "),IP=n(IMe,"A",{href:!0});var wzr=s(IP);zho=r(wzr,"ElectraForPreTraining"),wzr.forEach(t),Who=r(IMe," (ELECTRA model)"),IMe.forEach(t),Qho=i(S),D_=n(S,"LI",{});var jMe=s(D_);Nee=n(jMe,"STRONG",{});var Azr=s(Nee);Hho=r(Azr,"flaubert"),Azr.forEach(t),Uho=r(jMe," \u2014 "),jP=n(jMe,"A",{href:!0});var Lzr=s(jP);Jho=r(Lzr,"FlaubertWithLMHeadModel"),Lzr.forEach(t),Yho=r(jMe," (FlauBERT model)"),jMe.forEach(t),Kho=i(S),q_=n(S,"LI",{});var NMe=s(q_);Dee=n(NMe,"STRONG",{});var Bzr=s(Dee);Zho=r(Bzr,"fnet"),Bzr.forEach(t),epo=r(NMe," \u2014 "),NP=n(NMe,"A",{href:!0});var xzr=s(NP);opo=r(xzr,"FNetForPreTraining"),xzr.forEach(t),rpo=r(NMe," (FNet model)"),NMe.forEach(t),tpo=i(S),G_=n(S,"LI",{});var DMe=s(G_);qee=n(DMe,"STRONG",{});var kzr=s(qee);apo=r(kzr,"fsmt"),kzr.forEach(t),npo=r(DMe," \u2014 "),DP=n(DMe,"A",{href:!0});var Rzr=s(DP);spo=r(Rzr,"FSMTForConditionalGeneration"),Rzr.forEach(t),lpo=r(DMe," (FairSeq Machine-Translation model)"),DMe.forEach(t),ipo=i(S),O_=n(S,"LI",{});var qMe=s(O_);Gee=n(qMe,"STRONG",{});var Szr=s(Gee);dpo=r(Szr,"funnel"),Szr.forEach(t),cpo=r(qMe," \u2014 "),qP=n(qMe,"A",{href:!0});var Pzr=s(qP);fpo=r(Pzr,"FunnelForPreTraining"),Pzr.forEach(t),mpo=r(qMe," (Funnel Transformer model)"),qMe.forEach(t),gpo=i(S),X_=n(S,"LI",{});var GMe=s(X_);Oee=n(GMe,"STRONG",{});var $zr=s(Oee);hpo=r($zr,"gpt2"),$zr.forEach(t),ppo=r(GMe," \u2014 "),GP=n(GMe,"A",{href:!0});var Izr=s(GP);_po=r(Izr,"GPT2LMHeadModel"),Izr.forEach(t),upo=r(GMe," (OpenAI GPT-2 model)"),GMe.forEach(t),bpo=i(S),V_=n(S,"LI",{});var OMe=s(V_);Xee=n(OMe,"STRONG",{});var jzr=s(Xee);vpo=r(jzr,"ibert"),jzr.forEach(t),Tpo=r(OMe," \u2014 "),OP=n(OMe,"A",{href:!0});var Nzr=s(OP);Fpo=r(Nzr,"IBertForMaskedLM"),Nzr.forEach(t),Cpo=r(OMe," (I-BERT model)"),OMe.forEach(t),Mpo=i(S),z_=n(S,"LI",{});var XMe=s(z_);Vee=n(XMe,"STRONG",{});var Dzr=s(Vee);Epo=r(Dzr,"layoutlm"),Dzr.forEach(t),ypo=r(XMe," \u2014 "),XP=n(XMe,"A",{href:!0});var qzr=s(XP);wpo=r(qzr,"LayoutLMForMaskedLM"),qzr.forEach(t),Apo=r(XMe," (LayoutLM model)"),XMe.forEach(t),Lpo=i(S),W_=n(S,"LI",{});var VMe=s(W_);zee=n(VMe,"STRONG",{});var Gzr=s(zee);Bpo=r(Gzr,"longformer"),Gzr.forEach(t),xpo=r(VMe," \u2014 "),VP=n(VMe,"A",{href:!0});var Ozr=s(VP);kpo=r(Ozr,"LongformerForMaskedLM"),Ozr.forEach(t),Rpo=r(VMe," (Longformer model)"),VMe.forEach(t),Spo=i(S),Q_=n(S,"LI",{});var zMe=s(Q_);Wee=n(zMe,"STRONG",{});var Xzr=s(Wee);Ppo=r(Xzr,"lxmert"),Xzr.forEach(t),$po=r(zMe," \u2014 "),zP=n(zMe,"A",{href:!0});var Vzr=s(zP);Ipo=r(Vzr,"LxmertForPreTraining"),Vzr.forEach(t),jpo=r(zMe," (LXMERT model)"),zMe.forEach(t),Npo=i(S),H_=n(S,"LI",{});var WMe=s(H_);Qee=n(WMe,"STRONG",{});var zzr=s(Qee);Dpo=r(zzr,"megatron-bert"),zzr.forEach(t),qpo=r(WMe," \u2014 "),WP=n(WMe,"A",{href:!0});var Wzr=s(WP);Gpo=r(Wzr,"MegatronBertForPreTraining"),Wzr.forEach(t),Opo=r(WMe," (MegatronBert model)"),WMe.forEach(t),Xpo=i(S),U_=n(S,"LI",{});var QMe=s(U_);Hee=n(QMe,"STRONG",{});var Qzr=s(Hee);Vpo=r(Qzr,"mobilebert"),Qzr.forEach(t),zpo=r(QMe," \u2014 "),QP=n(QMe,"A",{href:!0});var Hzr=s(QP);Wpo=r(Hzr,"MobileBertForPreTraining"),Hzr.forEach(t),Qpo=r(QMe," (MobileBERT model)"),QMe.forEach(t),Hpo=i(S),J_=n(S,"LI",{});var HMe=s(J_);Uee=n(HMe,"STRONG",{});var Uzr=s(Uee);Upo=r(Uzr,"mpnet"),Uzr.forEach(t),Jpo=r(HMe," \u2014 "),HP=n(HMe,"A",{href:!0});var Jzr=s(HP);Ypo=r(Jzr,"MPNetForMaskedLM"),Jzr.forEach(t),Kpo=r(HMe," (MPNet model)"),HMe.forEach(t),Zpo=i(S),Y_=n(S,"LI",{});var UMe=s(Y_);Jee=n(UMe,"STRONG",{});var Yzr=s(Jee);e_o=r(Yzr,"openai-gpt"),Yzr.forEach(t),o_o=r(UMe," \u2014 "),UP=n(UMe,"A",{href:!0});var Kzr=s(UP);r_o=r(Kzr,"OpenAIGPTLMHeadModel"),Kzr.forEach(t),t_o=r(UMe," (OpenAI GPT model)"),UMe.forEach(t),a_o=i(S),K_=n(S,"LI",{});var JMe=s(K_);Yee=n(JMe,"STRONG",{});var Zzr=s(Yee);n_o=r(Zzr,"retribert"),Zzr.forEach(t),s_o=r(JMe," \u2014 "),JP=n(JMe,"A",{href:!0});var eWr=s(JP);l_o=r(eWr,"RetriBertModel"),eWr.forEach(t),i_o=r(JMe," (RetriBERT model)"),JMe.forEach(t),d_o=i(S),Z_=n(S,"LI",{});var YMe=s(Z_);Kee=n(YMe,"STRONG",{});var oWr=s(Kee);c_o=r(oWr,"roberta"),oWr.forEach(t),f_o=r(YMe," \u2014 "),YP=n(YMe,"A",{href:!0});var rWr=s(YP);m_o=r(rWr,"RobertaForMaskedLM"),rWr.forEach(t),g_o=r(YMe," (RoBERTa model)"),YMe.forEach(t),h_o=i(S),eu=n(S,"LI",{});var KMe=s(eu);Zee=n(KMe,"STRONG",{});var tWr=s(Zee);p_o=r(tWr,"squeezebert"),tWr.forEach(t),__o=r(KMe," \u2014 "),KP=n(KMe,"A",{href:!0});var aWr=s(KP);u_o=r(aWr,"SqueezeBertForMaskedLM"),aWr.forEach(t),b_o=r(KMe," (SqueezeBERT model)"),KMe.forEach(t),v_o=i(S),ou=n(S,"LI",{});var ZMe=s(ou);eoe=n(ZMe,"STRONG",{});var nWr=s(eoe);T_o=r(nWr,"t5"),nWr.forEach(t),F_o=r(ZMe," \u2014 "),ZP=n(ZMe,"A",{href:!0});var sWr=s(ZP);C_o=r(sWr,"T5ForConditionalGeneration"),sWr.forEach(t),M_o=r(ZMe," (T5 model)"),ZMe.forEach(t),E_o=i(S),ru=n(S,"LI",{});var eEe=s(ru);ooe=n(eEe,"STRONG",{});var lWr=s(ooe);y_o=r(lWr,"tapas"),lWr.forEach(t),w_o=r(eEe," \u2014 "),e$=n(eEe,"A",{href:!0});var iWr=s(e$);A_o=r(iWr,"TapasForMaskedLM"),iWr.forEach(t),L_o=r(eEe," (TAPAS model)"),eEe.forEach(t),B_o=i(S),tu=n(S,"LI",{});var oEe=s(tu);roe=n(oEe,"STRONG",{});var dWr=s(roe);x_o=r(dWr,"transfo-xl"),dWr.forEach(t),k_o=r(oEe," \u2014 "),o$=n(oEe,"A",{href:!0});var cWr=s(o$);R_o=r(cWr,"TransfoXLLMHeadModel"),cWr.forEach(t),S_o=r(oEe," (Transformer-XL model)"),oEe.forEach(t),P_o=i(S),au=n(S,"LI",{});var rEe=s(au);toe=n(rEe,"STRONG",{});var fWr=s(toe);$_o=r(fWr,"unispeech"),fWr.forEach(t),I_o=r(rEe," \u2014 "),r$=n(rEe,"A",{href:!0});var mWr=s(r$);j_o=r(mWr,"UniSpeechForPreTraining"),mWr.forEach(t),N_o=r(rEe," (UniSpeech model)"),rEe.forEach(t),D_o=i(S),nu=n(S,"LI",{});var tEe=s(nu);aoe=n(tEe,"STRONG",{});var gWr=s(aoe);q_o=r(gWr,"unispeech-sat"),gWr.forEach(t),G_o=r(tEe," \u2014 "),t$=n(tEe,"A",{href:!0});var hWr=s(t$);O_o=r(hWr,"UniSpeechSatForPreTraining"),hWr.forEach(t),X_o=r(tEe," (UniSpeechSat model)"),tEe.forEach(t),V_o=i(S),su=n(S,"LI",{});var aEe=s(su);noe=n(aEe,"STRONG",{});var pWr=s(noe);z_o=r(pWr,"visual_bert"),pWr.forEach(t),W_o=r(aEe," \u2014 "),a$=n(aEe,"A",{href:!0});var _Wr=s(a$);Q_o=r(_Wr,"VisualBertForPreTraining"),_Wr.forEach(t),H_o=r(aEe," (VisualBert model)"),aEe.forEach(t),U_o=i(S),lu=n(S,"LI",{});var nEe=s(lu);soe=n(nEe,"STRONG",{});var uWr=s(soe);J_o=r(uWr,"vit_mae"),uWr.forEach(t),Y_o=r(nEe," \u2014 "),n$=n(nEe,"A",{href:!0});var bWr=s(n$);K_o=r(bWr,"ViTMAEForPreTraining"),bWr.forEach(t),Z_o=r(nEe," (ViTMAE model)"),nEe.forEach(t),euo=i(S),iu=n(S,"LI",{});var sEe=s(iu);loe=n(sEe,"STRONG",{});var vWr=s(loe);ouo=r(vWr,"wav2vec2"),vWr.forEach(t),ruo=r(sEe," \u2014 "),s$=n(sEe,"A",{href:!0});var TWr=s(s$);tuo=r(TWr,"Wav2Vec2ForPreTraining"),TWr.forEach(t),auo=r(sEe," (Wav2Vec2 model)"),sEe.forEach(t),nuo=i(S),du=n(S,"LI",{});var lEe=s(du);ioe=n(lEe,"STRONG",{});var FWr=s(ioe);suo=r(FWr,"xlm"),FWr.forEach(t),luo=r(lEe," \u2014 "),l$=n(lEe,"A",{href:!0});var CWr=s(l$);iuo=r(CWr,"XLMWithLMHeadModel"),CWr.forEach(t),duo=r(lEe," (XLM model)"),lEe.forEach(t),cuo=i(S),cu=n(S,"LI",{});var iEe=s(cu);doe=n(iEe,"STRONG",{});var MWr=s(doe);fuo=r(MWr,"xlm-roberta"),MWr.forEach(t),muo=r(iEe," \u2014 "),i$=n(iEe,"A",{href:!0});var EWr=s(i$);guo=r(EWr,"XLMRobertaForMaskedLM"),EWr.forEach(t),huo=r(iEe," (XLM-RoBERTa model)"),iEe.forEach(t),puo=i(S),fu=n(S,"LI",{});var dEe=s(fu);coe=n(dEe,"STRONG",{});var yWr=s(coe);_uo=r(yWr,"xlm-roberta-xl"),yWr.forEach(t),uuo=r(dEe," \u2014 "),d$=n(dEe,"A",{href:!0});var wWr=s(d$);buo=r(wWr,"XLMRobertaXLForMaskedLM"),wWr.forEach(t),vuo=r(dEe," (XLM-RoBERTa-XL model)"),dEe.forEach(t),Tuo=i(S),mu=n(S,"LI",{});var cEe=s(mu);foe=n(cEe,"STRONG",{});var AWr=s(foe);Fuo=r(AWr,"xlnet"),AWr.forEach(t),Cuo=r(cEe," \u2014 "),c$=n(cEe,"A",{href:!0});var LWr=s(c$);Muo=r(LWr,"XLNetLMHeadModel"),LWr.forEach(t),Euo=r(cEe," (XLNet model)"),cEe.forEach(t),S.forEach(t),yuo=i(Gt),gu=n(Gt,"P",{});var fEe=s(gu);wuo=r(fEe,"The model is set in evaluation mode by default using "),moe=n(fEe,"CODE",{});var BWr=s(moe);Auo=r(BWr,"model.eval()"),BWr.forEach(t),Luo=r(fEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),goe=n(fEe,"CODE",{});var xWr=s(goe);Buo=r(xWr,"model.train()"),xWr.forEach(t),fEe.forEach(t),xuo=i(Gt),hoe=n(Gt,"P",{});var kWr=s(hoe);kuo=r(kWr,"Examples:"),kWr.forEach(t),Ruo=i(Gt),m(r3.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),Ske=i(c),rd=n(c,"H2",{class:!0});var OSe=s(rd);hu=n(OSe,"A",{id:!0,class:!0,href:!0});var RWr=s(hu);poe=n(RWr,"SPAN",{});var SWr=s(poe);m(t3.$$.fragment,SWr),SWr.forEach(t),RWr.forEach(t),Suo=i(OSe),_oe=n(OSe,"SPAN",{});var PWr=s(_oe);Puo=r(PWr,"AutoModelForCausalLM"),PWr.forEach(t),OSe.forEach(t),Pke=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(a3.$$.fragment,Js),$uo=i(Js),td=n(Js,"P",{});var lW=s(td);Iuo=r(lW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),uoe=n(lW,"CODE",{});var $Wr=s(uoe);juo=r($Wr,"from_pretrained()"),$Wr.forEach(t),Nuo=r(lW,"class method or the "),boe=n(lW,"CODE",{});var IWr=s(boe);Duo=r(IWr,"from_config()"),IWr.forEach(t),quo=r(lW,`class
method.`),lW.forEach(t),Guo=i(Js),n3=n(Js,"P",{});var XSe=s(n3);Ouo=r(XSe,"This class cannot be instantiated directly using "),voe=n(XSe,"CODE",{});var jWr=s(voe);Xuo=r(jWr,"__init__()"),jWr.forEach(t),Vuo=r(XSe," (throws an error)."),XSe.forEach(t),zuo=i(Js),Wr=n(Js,"DIV",{class:!0});var Ys=s(Wr);m(s3.$$.fragment,Ys),Wuo=i(Ys),Toe=n(Ys,"P",{});var NWr=s(Toe);Quo=r(NWr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),NWr.forEach(t),Huo=i(Ys),ad=n(Ys,"P",{});var iW=s(ad);Uuo=r(iW,`Note:
Loading a model from its configuration file does `),Foe=n(iW,"STRONG",{});var DWr=s(Foe);Juo=r(DWr,"not"),DWr.forEach(t),Yuo=r(iW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Coe=n(iW,"CODE",{});var qWr=s(Coe);Kuo=r(qWr,"from_pretrained()"),qWr.forEach(t),Zuo=r(iW,"to load the model weights."),iW.forEach(t),e1o=i(Ys),Moe=n(Ys,"P",{});var GWr=s(Moe);o1o=r(GWr,"Examples:"),GWr.forEach(t),r1o=i(Ys),m(l3.$$.fragment,Ys),Ys.forEach(t),t1o=i(Js),De=n(Js,"DIV",{class:!0});var Ot=s(De);m(i3.$$.fragment,Ot),a1o=i(Ot),Eoe=n(Ot,"P",{});var OWr=s(Eoe);n1o=r(OWr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),OWr.forEach(t),s1o=i(Ot),Wa=n(Ot,"P",{});var pM=s(Wa);l1o=r(pM,"The model class to instantiate is selected based on the "),yoe=n(pM,"CODE",{});var XWr=s(yoe);i1o=r(XWr,"model_type"),XWr.forEach(t),d1o=r(pM,` property of the config object (either
passed as an argument or loaded from `),woe=n(pM,"CODE",{});var VWr=s(woe);c1o=r(VWr,"pretrained_model_name_or_path"),VWr.forEach(t),f1o=r(pM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aoe=n(pM,"CODE",{});var zWr=s(Aoe);m1o=r(zWr,"pretrained_model_name_or_path"),zWr.forEach(t),g1o=r(pM,":"),pM.forEach(t),h1o=i(Ot),$=n(Ot,"UL",{});var j=s($);pu=n(j,"LI",{});var mEe=s(pu);Loe=n(mEe,"STRONG",{});var WWr=s(Loe);p1o=r(WWr,"bart"),WWr.forEach(t),_1o=r(mEe," \u2014 "),f$=n(mEe,"A",{href:!0});var QWr=s(f$);u1o=r(QWr,"BartForCausalLM"),QWr.forEach(t),b1o=r(mEe," (BART model)"),mEe.forEach(t),v1o=i(j),_u=n(j,"LI",{});var gEe=s(_u);Boe=n(gEe,"STRONG",{});var HWr=s(Boe);T1o=r(HWr,"bert"),HWr.forEach(t),F1o=r(gEe," \u2014 "),m$=n(gEe,"A",{href:!0});var UWr=s(m$);C1o=r(UWr,"BertLMHeadModel"),UWr.forEach(t),M1o=r(gEe," (BERT model)"),gEe.forEach(t),E1o=i(j),uu=n(j,"LI",{});var hEe=s(uu);xoe=n(hEe,"STRONG",{});var JWr=s(xoe);y1o=r(JWr,"bert-generation"),JWr.forEach(t),w1o=r(hEe," \u2014 "),g$=n(hEe,"A",{href:!0});var YWr=s(g$);A1o=r(YWr,"BertGenerationDecoder"),YWr.forEach(t),L1o=r(hEe," (Bert Generation model)"),hEe.forEach(t),B1o=i(j),bu=n(j,"LI",{});var pEe=s(bu);koe=n(pEe,"STRONG",{});var KWr=s(koe);x1o=r(KWr,"big_bird"),KWr.forEach(t),k1o=r(pEe," \u2014 "),h$=n(pEe,"A",{href:!0});var ZWr=s(h$);R1o=r(ZWr,"BigBirdForCausalLM"),ZWr.forEach(t),S1o=r(pEe," (BigBird model)"),pEe.forEach(t),P1o=i(j),vu=n(j,"LI",{});var _Ee=s(vu);Roe=n(_Ee,"STRONG",{});var eQr=s(Roe);$1o=r(eQr,"bigbird_pegasus"),eQr.forEach(t),I1o=r(_Ee," \u2014 "),p$=n(_Ee,"A",{href:!0});var oQr=s(p$);j1o=r(oQr,"BigBirdPegasusForCausalLM"),oQr.forEach(t),N1o=r(_Ee," (BigBirdPegasus model)"),_Ee.forEach(t),D1o=i(j),Tu=n(j,"LI",{});var uEe=s(Tu);Soe=n(uEe,"STRONG",{});var rQr=s(Soe);q1o=r(rQr,"blenderbot"),rQr.forEach(t),G1o=r(uEe," \u2014 "),_$=n(uEe,"A",{href:!0});var tQr=s(_$);O1o=r(tQr,"BlenderbotForCausalLM"),tQr.forEach(t),X1o=r(uEe," (Blenderbot model)"),uEe.forEach(t),V1o=i(j),Fu=n(j,"LI",{});var bEe=s(Fu);Poe=n(bEe,"STRONG",{});var aQr=s(Poe);z1o=r(aQr,"blenderbot-small"),aQr.forEach(t),W1o=r(bEe," \u2014 "),u$=n(bEe,"A",{href:!0});var nQr=s(u$);Q1o=r(nQr,"BlenderbotSmallForCausalLM"),nQr.forEach(t),H1o=r(bEe," (BlenderbotSmall model)"),bEe.forEach(t),U1o=i(j),Cu=n(j,"LI",{});var vEe=s(Cu);$oe=n(vEe,"STRONG",{});var sQr=s($oe);J1o=r(sQr,"camembert"),sQr.forEach(t),Y1o=r(vEe," \u2014 "),b$=n(vEe,"A",{href:!0});var lQr=s(b$);K1o=r(lQr,"CamembertForCausalLM"),lQr.forEach(t),Z1o=r(vEe," (CamemBERT model)"),vEe.forEach(t),e4o=i(j),Mu=n(j,"LI",{});var TEe=s(Mu);Ioe=n(TEe,"STRONG",{});var iQr=s(Ioe);o4o=r(iQr,"ctrl"),iQr.forEach(t),r4o=r(TEe," \u2014 "),v$=n(TEe,"A",{href:!0});var dQr=s(v$);t4o=r(dQr,"CTRLLMHeadModel"),dQr.forEach(t),a4o=r(TEe," (CTRL model)"),TEe.forEach(t),n4o=i(j),Eu=n(j,"LI",{});var FEe=s(Eu);joe=n(FEe,"STRONG",{});var cQr=s(joe);s4o=r(cQr,"data2vec-text"),cQr.forEach(t),l4o=r(FEe," \u2014 "),T$=n(FEe,"A",{href:!0});var fQr=s(T$);i4o=r(fQr,"Data2VecTextForCausalLM"),fQr.forEach(t),d4o=r(FEe," (Data2VecText model)"),FEe.forEach(t),c4o=i(j),yu=n(j,"LI",{});var CEe=s(yu);Noe=n(CEe,"STRONG",{});var mQr=s(Noe);f4o=r(mQr,"electra"),mQr.forEach(t),m4o=r(CEe," \u2014 "),F$=n(CEe,"A",{href:!0});var gQr=s(F$);g4o=r(gQr,"ElectraForCausalLM"),gQr.forEach(t),h4o=r(CEe," (ELECTRA model)"),CEe.forEach(t),p4o=i(j),wu=n(j,"LI",{});var MEe=s(wu);Doe=n(MEe,"STRONG",{});var hQr=s(Doe);_4o=r(hQr,"gpt2"),hQr.forEach(t),u4o=r(MEe," \u2014 "),C$=n(MEe,"A",{href:!0});var pQr=s(C$);b4o=r(pQr,"GPT2LMHeadModel"),pQr.forEach(t),v4o=r(MEe," (OpenAI GPT-2 model)"),MEe.forEach(t),T4o=i(j),Au=n(j,"LI",{});var EEe=s(Au);qoe=n(EEe,"STRONG",{});var _Qr=s(qoe);F4o=r(_Qr,"gpt_neo"),_Qr.forEach(t),C4o=r(EEe," \u2014 "),M$=n(EEe,"A",{href:!0});var uQr=s(M$);M4o=r(uQr,"GPTNeoForCausalLM"),uQr.forEach(t),E4o=r(EEe," (GPT Neo model)"),EEe.forEach(t),y4o=i(j),Lu=n(j,"LI",{});var yEe=s(Lu);Goe=n(yEe,"STRONG",{});var bQr=s(Goe);w4o=r(bQr,"gptj"),bQr.forEach(t),A4o=r(yEe," \u2014 "),E$=n(yEe,"A",{href:!0});var vQr=s(E$);L4o=r(vQr,"GPTJForCausalLM"),vQr.forEach(t),B4o=r(yEe," (GPT-J model)"),yEe.forEach(t),x4o=i(j),Bu=n(j,"LI",{});var wEe=s(Bu);Ooe=n(wEe,"STRONG",{});var TQr=s(Ooe);k4o=r(TQr,"marian"),TQr.forEach(t),R4o=r(wEe," \u2014 "),y$=n(wEe,"A",{href:!0});var FQr=s(y$);S4o=r(FQr,"MarianForCausalLM"),FQr.forEach(t),P4o=r(wEe," (Marian model)"),wEe.forEach(t),$4o=i(j),xu=n(j,"LI",{});var AEe=s(xu);Xoe=n(AEe,"STRONG",{});var CQr=s(Xoe);I4o=r(CQr,"mbart"),CQr.forEach(t),j4o=r(AEe," \u2014 "),w$=n(AEe,"A",{href:!0});var MQr=s(w$);N4o=r(MQr,"MBartForCausalLM"),MQr.forEach(t),D4o=r(AEe," (mBART model)"),AEe.forEach(t),q4o=i(j),ku=n(j,"LI",{});var LEe=s(ku);Voe=n(LEe,"STRONG",{});var EQr=s(Voe);G4o=r(EQr,"megatron-bert"),EQr.forEach(t),O4o=r(LEe," \u2014 "),A$=n(LEe,"A",{href:!0});var yQr=s(A$);X4o=r(yQr,"MegatronBertForCausalLM"),yQr.forEach(t),V4o=r(LEe," (MegatronBert model)"),LEe.forEach(t),z4o=i(j),Ru=n(j,"LI",{});var BEe=s(Ru);zoe=n(BEe,"STRONG",{});var wQr=s(zoe);W4o=r(wQr,"openai-gpt"),wQr.forEach(t),Q4o=r(BEe," \u2014 "),L$=n(BEe,"A",{href:!0});var AQr=s(L$);H4o=r(AQr,"OpenAIGPTLMHeadModel"),AQr.forEach(t),U4o=r(BEe," (OpenAI GPT model)"),BEe.forEach(t),J4o=i(j),Su=n(j,"LI",{});var xEe=s(Su);Woe=n(xEe,"STRONG",{});var LQr=s(Woe);Y4o=r(LQr,"pegasus"),LQr.forEach(t),K4o=r(xEe," \u2014 "),B$=n(xEe,"A",{href:!0});var BQr=s(B$);Z4o=r(BQr,"PegasusForCausalLM"),BQr.forEach(t),ebo=r(xEe," (Pegasus model)"),xEe.forEach(t),obo=i(j),Pu=n(j,"LI",{});var kEe=s(Pu);Qoe=n(kEe,"STRONG",{});var xQr=s(Qoe);rbo=r(xQr,"plbart"),xQr.forEach(t),tbo=r(kEe," \u2014 "),x$=n(kEe,"A",{href:!0});var kQr=s(x$);abo=r(kQr,"PLBartForCausalLM"),kQr.forEach(t),nbo=r(kEe," (PLBart model)"),kEe.forEach(t),sbo=i(j),$u=n(j,"LI",{});var REe=s($u);Hoe=n(REe,"STRONG",{});var RQr=s(Hoe);lbo=r(RQr,"prophetnet"),RQr.forEach(t),ibo=r(REe," \u2014 "),k$=n(REe,"A",{href:!0});var SQr=s(k$);dbo=r(SQr,"ProphetNetForCausalLM"),SQr.forEach(t),cbo=r(REe," (ProphetNet model)"),REe.forEach(t),fbo=i(j),Iu=n(j,"LI",{});var SEe=s(Iu);Uoe=n(SEe,"STRONG",{});var PQr=s(Uoe);mbo=r(PQr,"qdqbert"),PQr.forEach(t),gbo=r(SEe," \u2014 "),R$=n(SEe,"A",{href:!0});var $Qr=s(R$);hbo=r($Qr,"QDQBertLMHeadModel"),$Qr.forEach(t),pbo=r(SEe," (QDQBert model)"),SEe.forEach(t),_bo=i(j),ju=n(j,"LI",{});var PEe=s(ju);Joe=n(PEe,"STRONG",{});var IQr=s(Joe);ubo=r(IQr,"reformer"),IQr.forEach(t),bbo=r(PEe," \u2014 "),S$=n(PEe,"A",{href:!0});var jQr=s(S$);vbo=r(jQr,"ReformerModelWithLMHead"),jQr.forEach(t),Tbo=r(PEe," (Reformer model)"),PEe.forEach(t),Fbo=i(j),Nu=n(j,"LI",{});var $Ee=s(Nu);Yoe=n($Ee,"STRONG",{});var NQr=s(Yoe);Cbo=r(NQr,"rembert"),NQr.forEach(t),Mbo=r($Ee," \u2014 "),P$=n($Ee,"A",{href:!0});var DQr=s(P$);Ebo=r(DQr,"RemBertForCausalLM"),DQr.forEach(t),ybo=r($Ee," (RemBERT model)"),$Ee.forEach(t),wbo=i(j),Du=n(j,"LI",{});var IEe=s(Du);Koe=n(IEe,"STRONG",{});var qQr=s(Koe);Abo=r(qQr,"roberta"),qQr.forEach(t),Lbo=r(IEe," \u2014 "),$$=n(IEe,"A",{href:!0});var GQr=s($$);Bbo=r(GQr,"RobertaForCausalLM"),GQr.forEach(t),xbo=r(IEe," (RoBERTa model)"),IEe.forEach(t),kbo=i(j),qu=n(j,"LI",{});var jEe=s(qu);Zoe=n(jEe,"STRONG",{});var OQr=s(Zoe);Rbo=r(OQr,"roformer"),OQr.forEach(t),Sbo=r(jEe," \u2014 "),I$=n(jEe,"A",{href:!0});var XQr=s(I$);Pbo=r(XQr,"RoFormerForCausalLM"),XQr.forEach(t),$bo=r(jEe," (RoFormer model)"),jEe.forEach(t),Ibo=i(j),Gu=n(j,"LI",{});var NEe=s(Gu);ere=n(NEe,"STRONG",{});var VQr=s(ere);jbo=r(VQr,"speech_to_text_2"),VQr.forEach(t),Nbo=r(NEe," \u2014 "),j$=n(NEe,"A",{href:!0});var zQr=s(j$);Dbo=r(zQr,"Speech2Text2ForCausalLM"),zQr.forEach(t),qbo=r(NEe," (Speech2Text2 model)"),NEe.forEach(t),Gbo=i(j),Ou=n(j,"LI",{});var DEe=s(Ou);ore=n(DEe,"STRONG",{});var WQr=s(ore);Obo=r(WQr,"transfo-xl"),WQr.forEach(t),Xbo=r(DEe," \u2014 "),N$=n(DEe,"A",{href:!0});var QQr=s(N$);Vbo=r(QQr,"TransfoXLLMHeadModel"),QQr.forEach(t),zbo=r(DEe," (Transformer-XL model)"),DEe.forEach(t),Wbo=i(j),Xu=n(j,"LI",{});var qEe=s(Xu);rre=n(qEe,"STRONG",{});var HQr=s(rre);Qbo=r(HQr,"trocr"),HQr.forEach(t),Hbo=r(qEe," \u2014 "),D$=n(qEe,"A",{href:!0});var UQr=s(D$);Ubo=r(UQr,"TrOCRForCausalLM"),UQr.forEach(t),Jbo=r(qEe," (TrOCR model)"),qEe.forEach(t),Ybo=i(j),Vu=n(j,"LI",{});var GEe=s(Vu);tre=n(GEe,"STRONG",{});var JQr=s(tre);Kbo=r(JQr,"xglm"),JQr.forEach(t),Zbo=r(GEe," \u2014 "),q$=n(GEe,"A",{href:!0});var YQr=s(q$);e5o=r(YQr,"XGLMForCausalLM"),YQr.forEach(t),o5o=r(GEe," (XGLM model)"),GEe.forEach(t),r5o=i(j),zu=n(j,"LI",{});var OEe=s(zu);are=n(OEe,"STRONG",{});var KQr=s(are);t5o=r(KQr,"xlm"),KQr.forEach(t),a5o=r(OEe," \u2014 "),G$=n(OEe,"A",{href:!0});var ZQr=s(G$);n5o=r(ZQr,"XLMWithLMHeadModel"),ZQr.forEach(t),s5o=r(OEe," (XLM model)"),OEe.forEach(t),l5o=i(j),Wu=n(j,"LI",{});var XEe=s(Wu);nre=n(XEe,"STRONG",{});var eHr=s(nre);i5o=r(eHr,"xlm-prophetnet"),eHr.forEach(t),d5o=r(XEe," \u2014 "),O$=n(XEe,"A",{href:!0});var oHr=s(O$);c5o=r(oHr,"XLMProphetNetForCausalLM"),oHr.forEach(t),f5o=r(XEe," (XLMProphetNet model)"),XEe.forEach(t),m5o=i(j),Qu=n(j,"LI",{});var VEe=s(Qu);sre=n(VEe,"STRONG",{});var rHr=s(sre);g5o=r(rHr,"xlm-roberta"),rHr.forEach(t),h5o=r(VEe," \u2014 "),X$=n(VEe,"A",{href:!0});var tHr=s(X$);p5o=r(tHr,"XLMRobertaForCausalLM"),tHr.forEach(t),_5o=r(VEe," (XLM-RoBERTa model)"),VEe.forEach(t),u5o=i(j),Hu=n(j,"LI",{});var zEe=s(Hu);lre=n(zEe,"STRONG",{});var aHr=s(lre);b5o=r(aHr,"xlm-roberta-xl"),aHr.forEach(t),v5o=r(zEe," \u2014 "),V$=n(zEe,"A",{href:!0});var nHr=s(V$);T5o=r(nHr,"XLMRobertaXLForCausalLM"),nHr.forEach(t),F5o=r(zEe," (XLM-RoBERTa-XL model)"),zEe.forEach(t),C5o=i(j),Uu=n(j,"LI",{});var WEe=s(Uu);ire=n(WEe,"STRONG",{});var sHr=s(ire);M5o=r(sHr,"xlnet"),sHr.forEach(t),E5o=r(WEe," \u2014 "),z$=n(WEe,"A",{href:!0});var lHr=s(z$);y5o=r(lHr,"XLNetLMHeadModel"),lHr.forEach(t),w5o=r(WEe," (XLNet model)"),WEe.forEach(t),j.forEach(t),A5o=i(Ot),Ju=n(Ot,"P",{});var QEe=s(Ju);L5o=r(QEe,"The model is set in evaluation mode by default using "),dre=n(QEe,"CODE",{});var iHr=s(dre);B5o=r(iHr,"model.eval()"),iHr.forEach(t),x5o=r(QEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cre=n(QEe,"CODE",{});var dHr=s(cre);k5o=r(dHr,"model.train()"),dHr.forEach(t),QEe.forEach(t),R5o=i(Ot),fre=n(Ot,"P",{});var cHr=s(fre);S5o=r(cHr,"Examples:"),cHr.forEach(t),P5o=i(Ot),m(d3.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),$ke=i(c),nd=n(c,"H2",{class:!0});var VSe=s(nd);Yu=n(VSe,"A",{id:!0,class:!0,href:!0});var fHr=s(Yu);mre=n(fHr,"SPAN",{});var mHr=s(mre);m(c3.$$.fragment,mHr),mHr.forEach(t),fHr.forEach(t),$5o=i(VSe),gre=n(VSe,"SPAN",{});var gHr=s(gre);I5o=r(gHr,"AutoModelForMaskedLM"),gHr.forEach(t),VSe.forEach(t),Ike=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(f3.$$.fragment,Ks),j5o=i(Ks),sd=n(Ks,"P",{});var dW=s(sd);N5o=r(dW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hre=n(dW,"CODE",{});var hHr=s(hre);D5o=r(hHr,"from_pretrained()"),hHr.forEach(t),q5o=r(dW,"class method or the "),pre=n(dW,"CODE",{});var pHr=s(pre);G5o=r(pHr,"from_config()"),pHr.forEach(t),O5o=r(dW,`class
method.`),dW.forEach(t),X5o=i(Ks),m3=n(Ks,"P",{});var zSe=s(m3);V5o=r(zSe,"This class cannot be instantiated directly using "),_re=n(zSe,"CODE",{});var _Hr=s(_re);z5o=r(_Hr,"__init__()"),_Hr.forEach(t),W5o=r(zSe," (throws an error)."),zSe.forEach(t),Q5o=i(Ks),Qr=n(Ks,"DIV",{class:!0});var Zs=s(Qr);m(g3.$$.fragment,Zs),H5o=i(Zs),ure=n(Zs,"P",{});var uHr=s(ure);U5o=r(uHr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),uHr.forEach(t),J5o=i(Zs),ld=n(Zs,"P",{});var cW=s(ld);Y5o=r(cW,`Note:
Loading a model from its configuration file does `),bre=n(cW,"STRONG",{});var bHr=s(bre);K5o=r(bHr,"not"),bHr.forEach(t),Z5o=r(cW,` load the model weights. It only affects the
model\u2019s configuration. Use `),vre=n(cW,"CODE",{});var vHr=s(vre);e2o=r(vHr,"from_pretrained()"),vHr.forEach(t),o2o=r(cW,"to load the model weights."),cW.forEach(t),r2o=i(Zs),Tre=n(Zs,"P",{});var THr=s(Tre);t2o=r(THr,"Examples:"),THr.forEach(t),a2o=i(Zs),m(h3.$$.fragment,Zs),Zs.forEach(t),n2o=i(Ks),qe=n(Ks,"DIV",{class:!0});var Xt=s(qe);m(p3.$$.fragment,Xt),s2o=i(Xt),Fre=n(Xt,"P",{});var FHr=s(Fre);l2o=r(FHr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),FHr.forEach(t),i2o=i(Xt),Qa=n(Xt,"P",{});var _M=s(Qa);d2o=r(_M,"The model class to instantiate is selected based on the "),Cre=n(_M,"CODE",{});var CHr=s(Cre);c2o=r(CHr,"model_type"),CHr.forEach(t),f2o=r(_M,` property of the config object (either
passed as an argument or loaded from `),Mre=n(_M,"CODE",{});var MHr=s(Mre);m2o=r(MHr,"pretrained_model_name_or_path"),MHr.forEach(t),g2o=r(_M,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ere=n(_M,"CODE",{});var EHr=s(Ere);h2o=r(EHr,"pretrained_model_name_or_path"),EHr.forEach(t),p2o=r(_M,":"),_M.forEach(t),_2o=i(Xt),I=n(Xt,"UL",{});var N=s(I);Ku=n(N,"LI",{});var HEe=s(Ku);yre=n(HEe,"STRONG",{});var yHr=s(yre);u2o=r(yHr,"albert"),yHr.forEach(t),b2o=r(HEe," \u2014 "),W$=n(HEe,"A",{href:!0});var wHr=s(W$);v2o=r(wHr,"AlbertForMaskedLM"),wHr.forEach(t),T2o=r(HEe," (ALBERT model)"),HEe.forEach(t),F2o=i(N),Zu=n(N,"LI",{});var UEe=s(Zu);wre=n(UEe,"STRONG",{});var AHr=s(wre);C2o=r(AHr,"bart"),AHr.forEach(t),M2o=r(UEe," \u2014 "),Q$=n(UEe,"A",{href:!0});var LHr=s(Q$);E2o=r(LHr,"BartForConditionalGeneration"),LHr.forEach(t),y2o=r(UEe," (BART model)"),UEe.forEach(t),w2o=i(N),e1=n(N,"LI",{});var JEe=s(e1);Are=n(JEe,"STRONG",{});var BHr=s(Are);A2o=r(BHr,"bert"),BHr.forEach(t),L2o=r(JEe," \u2014 "),H$=n(JEe,"A",{href:!0});var xHr=s(H$);B2o=r(xHr,"BertForMaskedLM"),xHr.forEach(t),x2o=r(JEe," (BERT model)"),JEe.forEach(t),k2o=i(N),o1=n(N,"LI",{});var YEe=s(o1);Lre=n(YEe,"STRONG",{});var kHr=s(Lre);R2o=r(kHr,"big_bird"),kHr.forEach(t),S2o=r(YEe," \u2014 "),U$=n(YEe,"A",{href:!0});var RHr=s(U$);P2o=r(RHr,"BigBirdForMaskedLM"),RHr.forEach(t),$2o=r(YEe," (BigBird model)"),YEe.forEach(t),I2o=i(N),r1=n(N,"LI",{});var KEe=s(r1);Bre=n(KEe,"STRONG",{});var SHr=s(Bre);j2o=r(SHr,"camembert"),SHr.forEach(t),N2o=r(KEe," \u2014 "),J$=n(KEe,"A",{href:!0});var PHr=s(J$);D2o=r(PHr,"CamembertForMaskedLM"),PHr.forEach(t),q2o=r(KEe," (CamemBERT model)"),KEe.forEach(t),G2o=i(N),t1=n(N,"LI",{});var ZEe=s(t1);xre=n(ZEe,"STRONG",{});var $Hr=s(xre);O2o=r($Hr,"convbert"),$Hr.forEach(t),X2o=r(ZEe," \u2014 "),Y$=n(ZEe,"A",{href:!0});var IHr=s(Y$);V2o=r(IHr,"ConvBertForMaskedLM"),IHr.forEach(t),z2o=r(ZEe," (ConvBERT model)"),ZEe.forEach(t),W2o=i(N),a1=n(N,"LI",{});var e3e=s(a1);kre=n(e3e,"STRONG",{});var jHr=s(kre);Q2o=r(jHr,"data2vec-text"),jHr.forEach(t),H2o=r(e3e," \u2014 "),K$=n(e3e,"A",{href:!0});var NHr=s(K$);U2o=r(NHr,"Data2VecTextForMaskedLM"),NHr.forEach(t),J2o=r(e3e," (Data2VecText model)"),e3e.forEach(t),Y2o=i(N),n1=n(N,"LI",{});var o3e=s(n1);Rre=n(o3e,"STRONG",{});var DHr=s(Rre);K2o=r(DHr,"deberta"),DHr.forEach(t),Z2o=r(o3e," \u2014 "),Z$=n(o3e,"A",{href:!0});var qHr=s(Z$);evo=r(qHr,"DebertaForMaskedLM"),qHr.forEach(t),ovo=r(o3e," (DeBERTa model)"),o3e.forEach(t),rvo=i(N),s1=n(N,"LI",{});var r3e=s(s1);Sre=n(r3e,"STRONG",{});var GHr=s(Sre);tvo=r(GHr,"deberta-v2"),GHr.forEach(t),avo=r(r3e," \u2014 "),eI=n(r3e,"A",{href:!0});var OHr=s(eI);nvo=r(OHr,"DebertaV2ForMaskedLM"),OHr.forEach(t),svo=r(r3e," (DeBERTa-v2 model)"),r3e.forEach(t),lvo=i(N),l1=n(N,"LI",{});var t3e=s(l1);Pre=n(t3e,"STRONG",{});var XHr=s(Pre);ivo=r(XHr,"distilbert"),XHr.forEach(t),dvo=r(t3e," \u2014 "),oI=n(t3e,"A",{href:!0});var VHr=s(oI);cvo=r(VHr,"DistilBertForMaskedLM"),VHr.forEach(t),fvo=r(t3e," (DistilBERT model)"),t3e.forEach(t),mvo=i(N),i1=n(N,"LI",{});var a3e=s(i1);$re=n(a3e,"STRONG",{});var zHr=s($re);gvo=r(zHr,"electra"),zHr.forEach(t),hvo=r(a3e," \u2014 "),rI=n(a3e,"A",{href:!0});var WHr=s(rI);pvo=r(WHr,"ElectraForMaskedLM"),WHr.forEach(t),_vo=r(a3e," (ELECTRA model)"),a3e.forEach(t),uvo=i(N),d1=n(N,"LI",{});var n3e=s(d1);Ire=n(n3e,"STRONG",{});var QHr=s(Ire);bvo=r(QHr,"flaubert"),QHr.forEach(t),vvo=r(n3e," \u2014 "),tI=n(n3e,"A",{href:!0});var HHr=s(tI);Tvo=r(HHr,"FlaubertWithLMHeadModel"),HHr.forEach(t),Fvo=r(n3e," (FlauBERT model)"),n3e.forEach(t),Cvo=i(N),c1=n(N,"LI",{});var s3e=s(c1);jre=n(s3e,"STRONG",{});var UHr=s(jre);Mvo=r(UHr,"fnet"),UHr.forEach(t),Evo=r(s3e," \u2014 "),aI=n(s3e,"A",{href:!0});var JHr=s(aI);yvo=r(JHr,"FNetForMaskedLM"),JHr.forEach(t),wvo=r(s3e," (FNet model)"),s3e.forEach(t),Avo=i(N),f1=n(N,"LI",{});var l3e=s(f1);Nre=n(l3e,"STRONG",{});var YHr=s(Nre);Lvo=r(YHr,"funnel"),YHr.forEach(t),Bvo=r(l3e," \u2014 "),nI=n(l3e,"A",{href:!0});var KHr=s(nI);xvo=r(KHr,"FunnelForMaskedLM"),KHr.forEach(t),kvo=r(l3e," (Funnel Transformer model)"),l3e.forEach(t),Rvo=i(N),m1=n(N,"LI",{});var i3e=s(m1);Dre=n(i3e,"STRONG",{});var ZHr=s(Dre);Svo=r(ZHr,"ibert"),ZHr.forEach(t),Pvo=r(i3e," \u2014 "),sI=n(i3e,"A",{href:!0});var eUr=s(sI);$vo=r(eUr,"IBertForMaskedLM"),eUr.forEach(t),Ivo=r(i3e," (I-BERT model)"),i3e.forEach(t),jvo=i(N),g1=n(N,"LI",{});var d3e=s(g1);qre=n(d3e,"STRONG",{});var oUr=s(qre);Nvo=r(oUr,"layoutlm"),oUr.forEach(t),Dvo=r(d3e," \u2014 "),lI=n(d3e,"A",{href:!0});var rUr=s(lI);qvo=r(rUr,"LayoutLMForMaskedLM"),rUr.forEach(t),Gvo=r(d3e," (LayoutLM model)"),d3e.forEach(t),Ovo=i(N),h1=n(N,"LI",{});var c3e=s(h1);Gre=n(c3e,"STRONG",{});var tUr=s(Gre);Xvo=r(tUr,"longformer"),tUr.forEach(t),Vvo=r(c3e," \u2014 "),iI=n(c3e,"A",{href:!0});var aUr=s(iI);zvo=r(aUr,"LongformerForMaskedLM"),aUr.forEach(t),Wvo=r(c3e," (Longformer model)"),c3e.forEach(t),Qvo=i(N),p1=n(N,"LI",{});var f3e=s(p1);Ore=n(f3e,"STRONG",{});var nUr=s(Ore);Hvo=r(nUr,"mbart"),nUr.forEach(t),Uvo=r(f3e," \u2014 "),dI=n(f3e,"A",{href:!0});var sUr=s(dI);Jvo=r(sUr,"MBartForConditionalGeneration"),sUr.forEach(t),Yvo=r(f3e," (mBART model)"),f3e.forEach(t),Kvo=i(N),_1=n(N,"LI",{});var m3e=s(_1);Xre=n(m3e,"STRONG",{});var lUr=s(Xre);Zvo=r(lUr,"megatron-bert"),lUr.forEach(t),e6o=r(m3e," \u2014 "),cI=n(m3e,"A",{href:!0});var iUr=s(cI);o6o=r(iUr,"MegatronBertForMaskedLM"),iUr.forEach(t),r6o=r(m3e," (MegatronBert model)"),m3e.forEach(t),t6o=i(N),u1=n(N,"LI",{});var g3e=s(u1);Vre=n(g3e,"STRONG",{});var dUr=s(Vre);a6o=r(dUr,"mobilebert"),dUr.forEach(t),n6o=r(g3e," \u2014 "),fI=n(g3e,"A",{href:!0});var cUr=s(fI);s6o=r(cUr,"MobileBertForMaskedLM"),cUr.forEach(t),l6o=r(g3e," (MobileBERT model)"),g3e.forEach(t),i6o=i(N),b1=n(N,"LI",{});var h3e=s(b1);zre=n(h3e,"STRONG",{});var fUr=s(zre);d6o=r(fUr,"mpnet"),fUr.forEach(t),c6o=r(h3e," \u2014 "),mI=n(h3e,"A",{href:!0});var mUr=s(mI);f6o=r(mUr,"MPNetForMaskedLM"),mUr.forEach(t),m6o=r(h3e," (MPNet model)"),h3e.forEach(t),g6o=i(N),v1=n(N,"LI",{});var p3e=s(v1);Wre=n(p3e,"STRONG",{});var gUr=s(Wre);h6o=r(gUr,"nystromformer"),gUr.forEach(t),p6o=r(p3e," \u2014 "),gI=n(p3e,"A",{href:!0});var hUr=s(gI);_6o=r(hUr,"NystromformerForMaskedLM"),hUr.forEach(t),u6o=r(p3e," (Nystromformer model)"),p3e.forEach(t),b6o=i(N),T1=n(N,"LI",{});var _3e=s(T1);Qre=n(_3e,"STRONG",{});var pUr=s(Qre);v6o=r(pUr,"perceiver"),pUr.forEach(t),T6o=r(_3e," \u2014 "),hI=n(_3e,"A",{href:!0});var _Ur=s(hI);F6o=r(_Ur,"PerceiverForMaskedLM"),_Ur.forEach(t),C6o=r(_3e," (Perceiver model)"),_3e.forEach(t),M6o=i(N),F1=n(N,"LI",{});var u3e=s(F1);Hre=n(u3e,"STRONG",{});var uUr=s(Hre);E6o=r(uUr,"qdqbert"),uUr.forEach(t),y6o=r(u3e," \u2014 "),pI=n(u3e,"A",{href:!0});var bUr=s(pI);w6o=r(bUr,"QDQBertForMaskedLM"),bUr.forEach(t),A6o=r(u3e," (QDQBert model)"),u3e.forEach(t),L6o=i(N),C1=n(N,"LI",{});var b3e=s(C1);Ure=n(b3e,"STRONG",{});var vUr=s(Ure);B6o=r(vUr,"reformer"),vUr.forEach(t),x6o=r(b3e," \u2014 "),_I=n(b3e,"A",{href:!0});var TUr=s(_I);k6o=r(TUr,"ReformerForMaskedLM"),TUr.forEach(t),R6o=r(b3e," (Reformer model)"),b3e.forEach(t),S6o=i(N),M1=n(N,"LI",{});var v3e=s(M1);Jre=n(v3e,"STRONG",{});var FUr=s(Jre);P6o=r(FUr,"rembert"),FUr.forEach(t),$6o=r(v3e," \u2014 "),uI=n(v3e,"A",{href:!0});var CUr=s(uI);I6o=r(CUr,"RemBertForMaskedLM"),CUr.forEach(t),j6o=r(v3e," (RemBERT model)"),v3e.forEach(t),N6o=i(N),E1=n(N,"LI",{});var T3e=s(E1);Yre=n(T3e,"STRONG",{});var MUr=s(Yre);D6o=r(MUr,"roberta"),MUr.forEach(t),q6o=r(T3e," \u2014 "),bI=n(T3e,"A",{href:!0});var EUr=s(bI);G6o=r(EUr,"RobertaForMaskedLM"),EUr.forEach(t),O6o=r(T3e," (RoBERTa model)"),T3e.forEach(t),X6o=i(N),y1=n(N,"LI",{});var F3e=s(y1);Kre=n(F3e,"STRONG",{});var yUr=s(Kre);V6o=r(yUr,"roformer"),yUr.forEach(t),z6o=r(F3e," \u2014 "),vI=n(F3e,"A",{href:!0});var wUr=s(vI);W6o=r(wUr,"RoFormerForMaskedLM"),wUr.forEach(t),Q6o=r(F3e," (RoFormer model)"),F3e.forEach(t),H6o=i(N),w1=n(N,"LI",{});var C3e=s(w1);Zre=n(C3e,"STRONG",{});var AUr=s(Zre);U6o=r(AUr,"squeezebert"),AUr.forEach(t),J6o=r(C3e," \u2014 "),TI=n(C3e,"A",{href:!0});var LUr=s(TI);Y6o=r(LUr,"SqueezeBertForMaskedLM"),LUr.forEach(t),K6o=r(C3e," (SqueezeBERT model)"),C3e.forEach(t),Z6o=i(N),A1=n(N,"LI",{});var M3e=s(A1);ete=n(M3e,"STRONG",{});var BUr=s(ete);e0o=r(BUr,"tapas"),BUr.forEach(t),o0o=r(M3e," \u2014 "),FI=n(M3e,"A",{href:!0});var xUr=s(FI);r0o=r(xUr,"TapasForMaskedLM"),xUr.forEach(t),t0o=r(M3e," (TAPAS model)"),M3e.forEach(t),a0o=i(N),L1=n(N,"LI",{});var E3e=s(L1);ote=n(E3e,"STRONG",{});var kUr=s(ote);n0o=r(kUr,"wav2vec2"),kUr.forEach(t),s0o=r(E3e," \u2014 "),rte=n(E3e,"CODE",{});var RUr=s(rte);l0o=r(RUr,"Wav2Vec2ForMaskedLM"),RUr.forEach(t),i0o=r(E3e,"(Wav2Vec2 model)"),E3e.forEach(t),d0o=i(N),B1=n(N,"LI",{});var y3e=s(B1);tte=n(y3e,"STRONG",{});var SUr=s(tte);c0o=r(SUr,"xlm"),SUr.forEach(t),f0o=r(y3e," \u2014 "),CI=n(y3e,"A",{href:!0});var PUr=s(CI);m0o=r(PUr,"XLMWithLMHeadModel"),PUr.forEach(t),g0o=r(y3e," (XLM model)"),y3e.forEach(t),h0o=i(N),x1=n(N,"LI",{});var w3e=s(x1);ate=n(w3e,"STRONG",{});var $Ur=s(ate);p0o=r($Ur,"xlm-roberta"),$Ur.forEach(t),_0o=r(w3e," \u2014 "),MI=n(w3e,"A",{href:!0});var IUr=s(MI);u0o=r(IUr,"XLMRobertaForMaskedLM"),IUr.forEach(t),b0o=r(w3e," (XLM-RoBERTa model)"),w3e.forEach(t),v0o=i(N),k1=n(N,"LI",{});var A3e=s(k1);nte=n(A3e,"STRONG",{});var jUr=s(nte);T0o=r(jUr,"xlm-roberta-xl"),jUr.forEach(t),F0o=r(A3e," \u2014 "),EI=n(A3e,"A",{href:!0});var NUr=s(EI);C0o=r(NUr,"XLMRobertaXLForMaskedLM"),NUr.forEach(t),M0o=r(A3e," (XLM-RoBERTa-XL model)"),A3e.forEach(t),E0o=i(N),R1=n(N,"LI",{});var L3e=s(R1);ste=n(L3e,"STRONG",{});var DUr=s(ste);y0o=r(DUr,"yoso"),DUr.forEach(t),w0o=r(L3e," \u2014 "),yI=n(L3e,"A",{href:!0});var qUr=s(yI);A0o=r(qUr,"YosoForMaskedLM"),qUr.forEach(t),L0o=r(L3e," (YOSO model)"),L3e.forEach(t),N.forEach(t),B0o=i(Xt),S1=n(Xt,"P",{});var B3e=s(S1);x0o=r(B3e,"The model is set in evaluation mode by default using "),lte=n(B3e,"CODE",{});var GUr=s(lte);k0o=r(GUr,"model.eval()"),GUr.forEach(t),R0o=r(B3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ite=n(B3e,"CODE",{});var OUr=s(ite);S0o=r(OUr,"model.train()"),OUr.forEach(t),B3e.forEach(t),P0o=i(Xt),dte=n(Xt,"P",{});var XUr=s(dte);$0o=r(XUr,"Examples:"),XUr.forEach(t),I0o=i(Xt),m(_3.$$.fragment,Xt),Xt.forEach(t),Ks.forEach(t),jke=i(c),id=n(c,"H2",{class:!0});var WSe=s(id);P1=n(WSe,"A",{id:!0,class:!0,href:!0});var VUr=s(P1);cte=n(VUr,"SPAN",{});var zUr=s(cte);m(u3.$$.fragment,zUr),zUr.forEach(t),VUr.forEach(t),j0o=i(WSe),fte=n(WSe,"SPAN",{});var WUr=s(fte);N0o=r(WUr,"AutoModelForSeq2SeqLM"),WUr.forEach(t),WSe.forEach(t),Nke=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(b3.$$.fragment,el),D0o=i(el),dd=n(el,"P",{});var fW=s(dd);q0o=r(fW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),mte=n(fW,"CODE",{});var QUr=s(mte);G0o=r(QUr,"from_pretrained()"),QUr.forEach(t),O0o=r(fW,"class method or the "),gte=n(fW,"CODE",{});var HUr=s(gte);X0o=r(HUr,"from_config()"),HUr.forEach(t),V0o=r(fW,`class
method.`),fW.forEach(t),z0o=i(el),v3=n(el,"P",{});var QSe=s(v3);W0o=r(QSe,"This class cannot be instantiated directly using "),hte=n(QSe,"CODE",{});var UUr=s(hte);Q0o=r(UUr,"__init__()"),UUr.forEach(t),H0o=r(QSe," (throws an error)."),QSe.forEach(t),U0o=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(T3.$$.fragment,ol),J0o=i(ol),pte=n(ol,"P",{});var JUr=s(pte);Y0o=r(JUr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),JUr.forEach(t),K0o=i(ol),cd=n(ol,"P",{});var mW=s(cd);Z0o=r(mW,`Note:
Loading a model from its configuration file does `),_te=n(mW,"STRONG",{});var YUr=s(_te);eTo=r(YUr,"not"),YUr.forEach(t),oTo=r(mW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ute=n(mW,"CODE",{});var KUr=s(ute);rTo=r(KUr,"from_pretrained()"),KUr.forEach(t),tTo=r(mW,"to load the model weights."),mW.forEach(t),aTo=i(ol),bte=n(ol,"P",{});var ZUr=s(bte);nTo=r(ZUr,"Examples:"),ZUr.forEach(t),sTo=i(ol),m(F3.$$.fragment,ol),ol.forEach(t),lTo=i(el),Ge=n(el,"DIV",{class:!0});var Vt=s(Ge);m(C3.$$.fragment,Vt),iTo=i(Vt),vte=n(Vt,"P",{});var eJr=s(vte);dTo=r(eJr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),eJr.forEach(t),cTo=i(Vt),Ha=n(Vt,"P",{});var uM=s(Ha);fTo=r(uM,"The model class to instantiate is selected based on the "),Tte=n(uM,"CODE",{});var oJr=s(Tte);mTo=r(oJr,"model_type"),oJr.forEach(t),gTo=r(uM,` property of the config object (either
passed as an argument or loaded from `),Fte=n(uM,"CODE",{});var rJr=s(Fte);hTo=r(rJr,"pretrained_model_name_or_path"),rJr.forEach(t),pTo=r(uM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cte=n(uM,"CODE",{});var tJr=s(Cte);_To=r(tJr,"pretrained_model_name_or_path"),tJr.forEach(t),uTo=r(uM,":"),uM.forEach(t),bTo=i(Vt),se=n(Vt,"UL",{});var ie=s(se);$1=n(ie,"LI",{});var x3e=s($1);Mte=n(x3e,"STRONG",{});var aJr=s(Mte);vTo=r(aJr,"bart"),aJr.forEach(t),TTo=r(x3e," \u2014 "),wI=n(x3e,"A",{href:!0});var nJr=s(wI);FTo=r(nJr,"BartForConditionalGeneration"),nJr.forEach(t),CTo=r(x3e," (BART model)"),x3e.forEach(t),MTo=i(ie),I1=n(ie,"LI",{});var k3e=s(I1);Ete=n(k3e,"STRONG",{});var sJr=s(Ete);ETo=r(sJr,"bigbird_pegasus"),sJr.forEach(t),yTo=r(k3e," \u2014 "),AI=n(k3e,"A",{href:!0});var lJr=s(AI);wTo=r(lJr,"BigBirdPegasusForConditionalGeneration"),lJr.forEach(t),ATo=r(k3e," (BigBirdPegasus model)"),k3e.forEach(t),LTo=i(ie),j1=n(ie,"LI",{});var R3e=s(j1);yte=n(R3e,"STRONG",{});var iJr=s(yte);BTo=r(iJr,"blenderbot"),iJr.forEach(t),xTo=r(R3e," \u2014 "),LI=n(R3e,"A",{href:!0});var dJr=s(LI);kTo=r(dJr,"BlenderbotForConditionalGeneration"),dJr.forEach(t),RTo=r(R3e," (Blenderbot model)"),R3e.forEach(t),STo=i(ie),N1=n(ie,"LI",{});var S3e=s(N1);wte=n(S3e,"STRONG",{});var cJr=s(wte);PTo=r(cJr,"blenderbot-small"),cJr.forEach(t),$To=r(S3e," \u2014 "),BI=n(S3e,"A",{href:!0});var fJr=s(BI);ITo=r(fJr,"BlenderbotSmallForConditionalGeneration"),fJr.forEach(t),jTo=r(S3e," (BlenderbotSmall model)"),S3e.forEach(t),NTo=i(ie),D1=n(ie,"LI",{});var P3e=s(D1);Ate=n(P3e,"STRONG",{});var mJr=s(Ate);DTo=r(mJr,"encoder-decoder"),mJr.forEach(t),qTo=r(P3e," \u2014 "),xI=n(P3e,"A",{href:!0});var gJr=s(xI);GTo=r(gJr,"EncoderDecoderModel"),gJr.forEach(t),OTo=r(P3e," (Encoder decoder model)"),P3e.forEach(t),XTo=i(ie),q1=n(ie,"LI",{});var $3e=s(q1);Lte=n($3e,"STRONG",{});var hJr=s(Lte);VTo=r(hJr,"fsmt"),hJr.forEach(t),zTo=r($3e," \u2014 "),kI=n($3e,"A",{href:!0});var pJr=s(kI);WTo=r(pJr,"FSMTForConditionalGeneration"),pJr.forEach(t),QTo=r($3e," (FairSeq Machine-Translation model)"),$3e.forEach(t),HTo=i(ie),G1=n(ie,"LI",{});var I3e=s(G1);Bte=n(I3e,"STRONG",{});var _Jr=s(Bte);UTo=r(_Jr,"led"),_Jr.forEach(t),JTo=r(I3e," \u2014 "),RI=n(I3e,"A",{href:!0});var uJr=s(RI);YTo=r(uJr,"LEDForConditionalGeneration"),uJr.forEach(t),KTo=r(I3e," (LED model)"),I3e.forEach(t),ZTo=i(ie),O1=n(ie,"LI",{});var j3e=s(O1);xte=n(j3e,"STRONG",{});var bJr=s(xte);eFo=r(bJr,"m2m_100"),bJr.forEach(t),oFo=r(j3e," \u2014 "),SI=n(j3e,"A",{href:!0});var vJr=s(SI);rFo=r(vJr,"M2M100ForConditionalGeneration"),vJr.forEach(t),tFo=r(j3e," (M2M100 model)"),j3e.forEach(t),aFo=i(ie),X1=n(ie,"LI",{});var N3e=s(X1);kte=n(N3e,"STRONG",{});var TJr=s(kte);nFo=r(TJr,"marian"),TJr.forEach(t),sFo=r(N3e," \u2014 "),PI=n(N3e,"A",{href:!0});var FJr=s(PI);lFo=r(FJr,"MarianMTModel"),FJr.forEach(t),iFo=r(N3e," (Marian model)"),N3e.forEach(t),dFo=i(ie),V1=n(ie,"LI",{});var D3e=s(V1);Rte=n(D3e,"STRONG",{});var CJr=s(Rte);cFo=r(CJr,"mbart"),CJr.forEach(t),fFo=r(D3e," \u2014 "),$I=n(D3e,"A",{href:!0});var MJr=s($I);mFo=r(MJr,"MBartForConditionalGeneration"),MJr.forEach(t),gFo=r(D3e," (mBART model)"),D3e.forEach(t),hFo=i(ie),z1=n(ie,"LI",{});var q3e=s(z1);Ste=n(q3e,"STRONG",{});var EJr=s(Ste);pFo=r(EJr,"mt5"),EJr.forEach(t),_Fo=r(q3e," \u2014 "),II=n(q3e,"A",{href:!0});var yJr=s(II);uFo=r(yJr,"MT5ForConditionalGeneration"),yJr.forEach(t),bFo=r(q3e," (mT5 model)"),q3e.forEach(t),vFo=i(ie),W1=n(ie,"LI",{});var G3e=s(W1);Pte=n(G3e,"STRONG",{});var wJr=s(Pte);TFo=r(wJr,"pegasus"),wJr.forEach(t),FFo=r(G3e," \u2014 "),jI=n(G3e,"A",{href:!0});var AJr=s(jI);CFo=r(AJr,"PegasusForConditionalGeneration"),AJr.forEach(t),MFo=r(G3e," (Pegasus model)"),G3e.forEach(t),EFo=i(ie),Q1=n(ie,"LI",{});var O3e=s(Q1);$te=n(O3e,"STRONG",{});var LJr=s($te);yFo=r(LJr,"plbart"),LJr.forEach(t),wFo=r(O3e," \u2014 "),NI=n(O3e,"A",{href:!0});var BJr=s(NI);AFo=r(BJr,"PLBartForConditionalGeneration"),BJr.forEach(t),LFo=r(O3e," (PLBart model)"),O3e.forEach(t),BFo=i(ie),H1=n(ie,"LI",{});var X3e=s(H1);Ite=n(X3e,"STRONG",{});var xJr=s(Ite);xFo=r(xJr,"prophetnet"),xJr.forEach(t),kFo=r(X3e," \u2014 "),DI=n(X3e,"A",{href:!0});var kJr=s(DI);RFo=r(kJr,"ProphetNetForConditionalGeneration"),kJr.forEach(t),SFo=r(X3e," (ProphetNet model)"),X3e.forEach(t),PFo=i(ie),U1=n(ie,"LI",{});var V3e=s(U1);jte=n(V3e,"STRONG",{});var RJr=s(jte);$Fo=r(RJr,"t5"),RJr.forEach(t),IFo=r(V3e," \u2014 "),qI=n(V3e,"A",{href:!0});var SJr=s(qI);jFo=r(SJr,"T5ForConditionalGeneration"),SJr.forEach(t),NFo=r(V3e," (T5 model)"),V3e.forEach(t),DFo=i(ie),J1=n(ie,"LI",{});var z3e=s(J1);Nte=n(z3e,"STRONG",{});var PJr=s(Nte);qFo=r(PJr,"xlm-prophetnet"),PJr.forEach(t),GFo=r(z3e," \u2014 "),GI=n(z3e,"A",{href:!0});var $Jr=s(GI);OFo=r($Jr,"XLMProphetNetForConditionalGeneration"),$Jr.forEach(t),XFo=r(z3e," (XLMProphetNet model)"),z3e.forEach(t),ie.forEach(t),VFo=i(Vt),Y1=n(Vt,"P",{});var W3e=s(Y1);zFo=r(W3e,"The model is set in evaluation mode by default using "),Dte=n(W3e,"CODE",{});var IJr=s(Dte);WFo=r(IJr,"model.eval()"),IJr.forEach(t),QFo=r(W3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qte=n(W3e,"CODE",{});var jJr=s(qte);HFo=r(jJr,"model.train()"),jJr.forEach(t),W3e.forEach(t),UFo=i(Vt),Gte=n(Vt,"P",{});var NJr=s(Gte);JFo=r(NJr,"Examples:"),NJr.forEach(t),YFo=i(Vt),m(M3.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),Dke=i(c),fd=n(c,"H2",{class:!0});var HSe=s(fd);K1=n(HSe,"A",{id:!0,class:!0,href:!0});var DJr=s(K1);Ote=n(DJr,"SPAN",{});var qJr=s(Ote);m(E3.$$.fragment,qJr),qJr.forEach(t),DJr.forEach(t),KFo=i(HSe),Xte=n(HSe,"SPAN",{});var GJr=s(Xte);ZFo=r(GJr,"AutoModelForSequenceClassification"),GJr.forEach(t),HSe.forEach(t),qke=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(y3.$$.fragment,rl),eCo=i(rl),md=n(rl,"P",{});var gW=s(md);oCo=r(gW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Vte=n(gW,"CODE",{});var OJr=s(Vte);rCo=r(OJr,"from_pretrained()"),OJr.forEach(t),tCo=r(gW,"class method or the "),zte=n(gW,"CODE",{});var XJr=s(zte);aCo=r(XJr,"from_config()"),XJr.forEach(t),nCo=r(gW,`class
method.`),gW.forEach(t),sCo=i(rl),w3=n(rl,"P",{});var USe=s(w3);lCo=r(USe,"This class cannot be instantiated directly using "),Wte=n(USe,"CODE",{});var VJr=s(Wte);iCo=r(VJr,"__init__()"),VJr.forEach(t),dCo=r(USe," (throws an error)."),USe.forEach(t),cCo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(A3.$$.fragment,tl),fCo=i(tl),Qte=n(tl,"P",{});var zJr=s(Qte);mCo=r(zJr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),zJr.forEach(t),gCo=i(tl),gd=n(tl,"P",{});var hW=s(gd);hCo=r(hW,`Note:
Loading a model from its configuration file does `),Hte=n(hW,"STRONG",{});var WJr=s(Hte);pCo=r(WJr,"not"),WJr.forEach(t),_Co=r(hW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ute=n(hW,"CODE",{});var QJr=s(Ute);uCo=r(QJr,"from_pretrained()"),QJr.forEach(t),bCo=r(hW,"to load the model weights."),hW.forEach(t),vCo=i(tl),Jte=n(tl,"P",{});var HJr=s(Jte);TCo=r(HJr,"Examples:"),HJr.forEach(t),FCo=i(tl),m(L3.$$.fragment,tl),tl.forEach(t),CCo=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);m(B3.$$.fragment,zt),MCo=i(zt),Yte=n(zt,"P",{});var UJr=s(Yte);ECo=r(UJr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),UJr.forEach(t),yCo=i(zt),Ua=n(zt,"P",{});var bM=s(Ua);wCo=r(bM,"The model class to instantiate is selected based on the "),Kte=n(bM,"CODE",{});var JJr=s(Kte);ACo=r(JJr,"model_type"),JJr.forEach(t),LCo=r(bM,` property of the config object (either
passed as an argument or loaded from `),Zte=n(bM,"CODE",{});var YJr=s(Zte);BCo=r(YJr,"pretrained_model_name_or_path"),YJr.forEach(t),xCo=r(bM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eae=n(bM,"CODE",{});var KJr=s(eae);kCo=r(KJr,"pretrained_model_name_or_path"),KJr.forEach(t),RCo=r(bM,":"),bM.forEach(t),SCo=i(zt),A=n(zt,"UL",{});var L=s(A);Z1=n(L,"LI",{});var Q3e=s(Z1);oae=n(Q3e,"STRONG",{});var ZJr=s(oae);PCo=r(ZJr,"albert"),ZJr.forEach(t),$Co=r(Q3e," \u2014 "),OI=n(Q3e,"A",{href:!0});var eYr=s(OI);ICo=r(eYr,"AlbertForSequenceClassification"),eYr.forEach(t),jCo=r(Q3e," (ALBERT model)"),Q3e.forEach(t),NCo=i(L),e4=n(L,"LI",{});var H3e=s(e4);rae=n(H3e,"STRONG",{});var oYr=s(rae);DCo=r(oYr,"bart"),oYr.forEach(t),qCo=r(H3e," \u2014 "),XI=n(H3e,"A",{href:!0});var rYr=s(XI);GCo=r(rYr,"BartForSequenceClassification"),rYr.forEach(t),OCo=r(H3e," (BART model)"),H3e.forEach(t),XCo=i(L),o4=n(L,"LI",{});var U3e=s(o4);tae=n(U3e,"STRONG",{});var tYr=s(tae);VCo=r(tYr,"bert"),tYr.forEach(t),zCo=r(U3e," \u2014 "),VI=n(U3e,"A",{href:!0});var aYr=s(VI);WCo=r(aYr,"BertForSequenceClassification"),aYr.forEach(t),QCo=r(U3e," (BERT model)"),U3e.forEach(t),HCo=i(L),r4=n(L,"LI",{});var J3e=s(r4);aae=n(J3e,"STRONG",{});var nYr=s(aae);UCo=r(nYr,"big_bird"),nYr.forEach(t),JCo=r(J3e," \u2014 "),zI=n(J3e,"A",{href:!0});var sYr=s(zI);YCo=r(sYr,"BigBirdForSequenceClassification"),sYr.forEach(t),KCo=r(J3e," (BigBird model)"),J3e.forEach(t),ZCo=i(L),t4=n(L,"LI",{});var Y3e=s(t4);nae=n(Y3e,"STRONG",{});var lYr=s(nae);eMo=r(lYr,"bigbird_pegasus"),lYr.forEach(t),oMo=r(Y3e," \u2014 "),WI=n(Y3e,"A",{href:!0});var iYr=s(WI);rMo=r(iYr,"BigBirdPegasusForSequenceClassification"),iYr.forEach(t),tMo=r(Y3e," (BigBirdPegasus model)"),Y3e.forEach(t),aMo=i(L),a4=n(L,"LI",{});var K3e=s(a4);sae=n(K3e,"STRONG",{});var dYr=s(sae);nMo=r(dYr,"camembert"),dYr.forEach(t),sMo=r(K3e," \u2014 "),QI=n(K3e,"A",{href:!0});var cYr=s(QI);lMo=r(cYr,"CamembertForSequenceClassification"),cYr.forEach(t),iMo=r(K3e," (CamemBERT model)"),K3e.forEach(t),dMo=i(L),n4=n(L,"LI",{});var Z3e=s(n4);lae=n(Z3e,"STRONG",{});var fYr=s(lae);cMo=r(fYr,"canine"),fYr.forEach(t),fMo=r(Z3e," \u2014 "),HI=n(Z3e,"A",{href:!0});var mYr=s(HI);mMo=r(mYr,"CanineForSequenceClassification"),mYr.forEach(t),gMo=r(Z3e," (Canine model)"),Z3e.forEach(t),hMo=i(L),s4=n(L,"LI",{});var eye=s(s4);iae=n(eye,"STRONG",{});var gYr=s(iae);pMo=r(gYr,"convbert"),gYr.forEach(t),_Mo=r(eye," \u2014 "),UI=n(eye,"A",{href:!0});var hYr=s(UI);uMo=r(hYr,"ConvBertForSequenceClassification"),hYr.forEach(t),bMo=r(eye," (ConvBERT model)"),eye.forEach(t),vMo=i(L),l4=n(L,"LI",{});var oye=s(l4);dae=n(oye,"STRONG",{});var pYr=s(dae);TMo=r(pYr,"ctrl"),pYr.forEach(t),FMo=r(oye," \u2014 "),JI=n(oye,"A",{href:!0});var _Yr=s(JI);CMo=r(_Yr,"CTRLForSequenceClassification"),_Yr.forEach(t),MMo=r(oye," (CTRL model)"),oye.forEach(t),EMo=i(L),i4=n(L,"LI",{});var rye=s(i4);cae=n(rye,"STRONG",{});var uYr=s(cae);yMo=r(uYr,"data2vec-text"),uYr.forEach(t),wMo=r(rye," \u2014 "),YI=n(rye,"A",{href:!0});var bYr=s(YI);AMo=r(bYr,"Data2VecTextForSequenceClassification"),bYr.forEach(t),LMo=r(rye," (Data2VecText model)"),rye.forEach(t),BMo=i(L),d4=n(L,"LI",{});var tye=s(d4);fae=n(tye,"STRONG",{});var vYr=s(fae);xMo=r(vYr,"deberta"),vYr.forEach(t),kMo=r(tye," \u2014 "),KI=n(tye,"A",{href:!0});var TYr=s(KI);RMo=r(TYr,"DebertaForSequenceClassification"),TYr.forEach(t),SMo=r(tye," (DeBERTa model)"),tye.forEach(t),PMo=i(L),c4=n(L,"LI",{});var aye=s(c4);mae=n(aye,"STRONG",{});var FYr=s(mae);$Mo=r(FYr,"deberta-v2"),FYr.forEach(t),IMo=r(aye," \u2014 "),ZI=n(aye,"A",{href:!0});var CYr=s(ZI);jMo=r(CYr,"DebertaV2ForSequenceClassification"),CYr.forEach(t),NMo=r(aye," (DeBERTa-v2 model)"),aye.forEach(t),DMo=i(L),f4=n(L,"LI",{});var nye=s(f4);gae=n(nye,"STRONG",{});var MYr=s(gae);qMo=r(MYr,"distilbert"),MYr.forEach(t),GMo=r(nye," \u2014 "),ej=n(nye,"A",{href:!0});var EYr=s(ej);OMo=r(EYr,"DistilBertForSequenceClassification"),EYr.forEach(t),XMo=r(nye," (DistilBERT model)"),nye.forEach(t),VMo=i(L),m4=n(L,"LI",{});var sye=s(m4);hae=n(sye,"STRONG",{});var yYr=s(hae);zMo=r(yYr,"electra"),yYr.forEach(t),WMo=r(sye," \u2014 "),oj=n(sye,"A",{href:!0});var wYr=s(oj);QMo=r(wYr,"ElectraForSequenceClassification"),wYr.forEach(t),HMo=r(sye," (ELECTRA model)"),sye.forEach(t),UMo=i(L),g4=n(L,"LI",{});var lye=s(g4);pae=n(lye,"STRONG",{});var AYr=s(pae);JMo=r(AYr,"flaubert"),AYr.forEach(t),YMo=r(lye," \u2014 "),rj=n(lye,"A",{href:!0});var LYr=s(rj);KMo=r(LYr,"FlaubertForSequenceClassification"),LYr.forEach(t),ZMo=r(lye," (FlauBERT model)"),lye.forEach(t),eEo=i(L),h4=n(L,"LI",{});var iye=s(h4);_ae=n(iye,"STRONG",{});var BYr=s(_ae);oEo=r(BYr,"fnet"),BYr.forEach(t),rEo=r(iye," \u2014 "),tj=n(iye,"A",{href:!0});var xYr=s(tj);tEo=r(xYr,"FNetForSequenceClassification"),xYr.forEach(t),aEo=r(iye," (FNet model)"),iye.forEach(t),nEo=i(L),p4=n(L,"LI",{});var dye=s(p4);uae=n(dye,"STRONG",{});var kYr=s(uae);sEo=r(kYr,"funnel"),kYr.forEach(t),lEo=r(dye," \u2014 "),aj=n(dye,"A",{href:!0});var RYr=s(aj);iEo=r(RYr,"FunnelForSequenceClassification"),RYr.forEach(t),dEo=r(dye," (Funnel Transformer model)"),dye.forEach(t),cEo=i(L),_4=n(L,"LI",{});var cye=s(_4);bae=n(cye,"STRONG",{});var SYr=s(bae);fEo=r(SYr,"gpt2"),SYr.forEach(t),mEo=r(cye," \u2014 "),nj=n(cye,"A",{href:!0});var PYr=s(nj);gEo=r(PYr,"GPT2ForSequenceClassification"),PYr.forEach(t),hEo=r(cye," (OpenAI GPT-2 model)"),cye.forEach(t),pEo=i(L),u4=n(L,"LI",{});var fye=s(u4);vae=n(fye,"STRONG",{});var $Yr=s(vae);_Eo=r($Yr,"gpt_neo"),$Yr.forEach(t),uEo=r(fye," \u2014 "),sj=n(fye,"A",{href:!0});var IYr=s(sj);bEo=r(IYr,"GPTNeoForSequenceClassification"),IYr.forEach(t),vEo=r(fye," (GPT Neo model)"),fye.forEach(t),TEo=i(L),b4=n(L,"LI",{});var mye=s(b4);Tae=n(mye,"STRONG",{});var jYr=s(Tae);FEo=r(jYr,"gptj"),jYr.forEach(t),CEo=r(mye," \u2014 "),lj=n(mye,"A",{href:!0});var NYr=s(lj);MEo=r(NYr,"GPTJForSequenceClassification"),NYr.forEach(t),EEo=r(mye," (GPT-J model)"),mye.forEach(t),yEo=i(L),v4=n(L,"LI",{});var gye=s(v4);Fae=n(gye,"STRONG",{});var DYr=s(Fae);wEo=r(DYr,"ibert"),DYr.forEach(t),AEo=r(gye," \u2014 "),ij=n(gye,"A",{href:!0});var qYr=s(ij);LEo=r(qYr,"IBertForSequenceClassification"),qYr.forEach(t),BEo=r(gye," (I-BERT model)"),gye.forEach(t),xEo=i(L),T4=n(L,"LI",{});var hye=s(T4);Cae=n(hye,"STRONG",{});var GYr=s(Cae);kEo=r(GYr,"layoutlm"),GYr.forEach(t),REo=r(hye," \u2014 "),dj=n(hye,"A",{href:!0});var OYr=s(dj);SEo=r(OYr,"LayoutLMForSequenceClassification"),OYr.forEach(t),PEo=r(hye," (LayoutLM model)"),hye.forEach(t),$Eo=i(L),F4=n(L,"LI",{});var pye=s(F4);Mae=n(pye,"STRONG",{});var XYr=s(Mae);IEo=r(XYr,"layoutlmv2"),XYr.forEach(t),jEo=r(pye," \u2014 "),cj=n(pye,"A",{href:!0});var VYr=s(cj);NEo=r(VYr,"LayoutLMv2ForSequenceClassification"),VYr.forEach(t),DEo=r(pye," (LayoutLMv2 model)"),pye.forEach(t),qEo=i(L),C4=n(L,"LI",{});var _ye=s(C4);Eae=n(_ye,"STRONG",{});var zYr=s(Eae);GEo=r(zYr,"led"),zYr.forEach(t),OEo=r(_ye," \u2014 "),fj=n(_ye,"A",{href:!0});var WYr=s(fj);XEo=r(WYr,"LEDForSequenceClassification"),WYr.forEach(t),VEo=r(_ye," (LED model)"),_ye.forEach(t),zEo=i(L),M4=n(L,"LI",{});var uye=s(M4);yae=n(uye,"STRONG",{});var QYr=s(yae);WEo=r(QYr,"longformer"),QYr.forEach(t),QEo=r(uye," \u2014 "),mj=n(uye,"A",{href:!0});var HYr=s(mj);HEo=r(HYr,"LongformerForSequenceClassification"),HYr.forEach(t),UEo=r(uye," (Longformer model)"),uye.forEach(t),JEo=i(L),E4=n(L,"LI",{});var bye=s(E4);wae=n(bye,"STRONG",{});var UYr=s(wae);YEo=r(UYr,"mbart"),UYr.forEach(t),KEo=r(bye," \u2014 "),gj=n(bye,"A",{href:!0});var JYr=s(gj);ZEo=r(JYr,"MBartForSequenceClassification"),JYr.forEach(t),e3o=r(bye," (mBART model)"),bye.forEach(t),o3o=i(L),y4=n(L,"LI",{});var vye=s(y4);Aae=n(vye,"STRONG",{});var YYr=s(Aae);r3o=r(YYr,"megatron-bert"),YYr.forEach(t),t3o=r(vye," \u2014 "),hj=n(vye,"A",{href:!0});var KYr=s(hj);a3o=r(KYr,"MegatronBertForSequenceClassification"),KYr.forEach(t),n3o=r(vye," (MegatronBert model)"),vye.forEach(t),s3o=i(L),w4=n(L,"LI",{});var Tye=s(w4);Lae=n(Tye,"STRONG",{});var ZYr=s(Lae);l3o=r(ZYr,"mobilebert"),ZYr.forEach(t),i3o=r(Tye," \u2014 "),pj=n(Tye,"A",{href:!0});var eKr=s(pj);d3o=r(eKr,"MobileBertForSequenceClassification"),eKr.forEach(t),c3o=r(Tye," (MobileBERT model)"),Tye.forEach(t),f3o=i(L),A4=n(L,"LI",{});var Fye=s(A4);Bae=n(Fye,"STRONG",{});var oKr=s(Bae);m3o=r(oKr,"mpnet"),oKr.forEach(t),g3o=r(Fye," \u2014 "),_j=n(Fye,"A",{href:!0});var rKr=s(_j);h3o=r(rKr,"MPNetForSequenceClassification"),rKr.forEach(t),p3o=r(Fye," (MPNet model)"),Fye.forEach(t),_3o=i(L),L4=n(L,"LI",{});var Cye=s(L4);xae=n(Cye,"STRONG",{});var tKr=s(xae);u3o=r(tKr,"nystromformer"),tKr.forEach(t),b3o=r(Cye," \u2014 "),uj=n(Cye,"A",{href:!0});var aKr=s(uj);v3o=r(aKr,"NystromformerForSequenceClassification"),aKr.forEach(t),T3o=r(Cye," (Nystromformer model)"),Cye.forEach(t),F3o=i(L),B4=n(L,"LI",{});var Mye=s(B4);kae=n(Mye,"STRONG",{});var nKr=s(kae);C3o=r(nKr,"openai-gpt"),nKr.forEach(t),M3o=r(Mye," \u2014 "),bj=n(Mye,"A",{href:!0});var sKr=s(bj);E3o=r(sKr,"OpenAIGPTForSequenceClassification"),sKr.forEach(t),y3o=r(Mye," (OpenAI GPT model)"),Mye.forEach(t),w3o=i(L),x4=n(L,"LI",{});var Eye=s(x4);Rae=n(Eye,"STRONG",{});var lKr=s(Rae);A3o=r(lKr,"perceiver"),lKr.forEach(t),L3o=r(Eye," \u2014 "),vj=n(Eye,"A",{href:!0});var iKr=s(vj);B3o=r(iKr,"PerceiverForSequenceClassification"),iKr.forEach(t),x3o=r(Eye," (Perceiver model)"),Eye.forEach(t),k3o=i(L),k4=n(L,"LI",{});var yye=s(k4);Sae=n(yye,"STRONG",{});var dKr=s(Sae);R3o=r(dKr,"plbart"),dKr.forEach(t),S3o=r(yye," \u2014 "),Tj=n(yye,"A",{href:!0});var cKr=s(Tj);P3o=r(cKr,"PLBartForSequenceClassification"),cKr.forEach(t),$3o=r(yye," (PLBart model)"),yye.forEach(t),I3o=i(L),R4=n(L,"LI",{});var wye=s(R4);Pae=n(wye,"STRONG",{});var fKr=s(Pae);j3o=r(fKr,"qdqbert"),fKr.forEach(t),N3o=r(wye," \u2014 "),Fj=n(wye,"A",{href:!0});var mKr=s(Fj);D3o=r(mKr,"QDQBertForSequenceClassification"),mKr.forEach(t),q3o=r(wye," (QDQBert model)"),wye.forEach(t),G3o=i(L),S4=n(L,"LI",{});var Aye=s(S4);$ae=n(Aye,"STRONG",{});var gKr=s($ae);O3o=r(gKr,"reformer"),gKr.forEach(t),X3o=r(Aye," \u2014 "),Cj=n(Aye,"A",{href:!0});var hKr=s(Cj);V3o=r(hKr,"ReformerForSequenceClassification"),hKr.forEach(t),z3o=r(Aye," (Reformer model)"),Aye.forEach(t),W3o=i(L),P4=n(L,"LI",{});var Lye=s(P4);Iae=n(Lye,"STRONG",{});var pKr=s(Iae);Q3o=r(pKr,"rembert"),pKr.forEach(t),H3o=r(Lye," \u2014 "),Mj=n(Lye,"A",{href:!0});var _Kr=s(Mj);U3o=r(_Kr,"RemBertForSequenceClassification"),_Kr.forEach(t),J3o=r(Lye," (RemBERT model)"),Lye.forEach(t),Y3o=i(L),$4=n(L,"LI",{});var Bye=s($4);jae=n(Bye,"STRONG",{});var uKr=s(jae);K3o=r(uKr,"roberta"),uKr.forEach(t),Z3o=r(Bye," \u2014 "),Ej=n(Bye,"A",{href:!0});var bKr=s(Ej);eyo=r(bKr,"RobertaForSequenceClassification"),bKr.forEach(t),oyo=r(Bye," (RoBERTa model)"),Bye.forEach(t),ryo=i(L),I4=n(L,"LI",{});var xye=s(I4);Nae=n(xye,"STRONG",{});var vKr=s(Nae);tyo=r(vKr,"roformer"),vKr.forEach(t),ayo=r(xye," \u2014 "),yj=n(xye,"A",{href:!0});var TKr=s(yj);nyo=r(TKr,"RoFormerForSequenceClassification"),TKr.forEach(t),syo=r(xye," (RoFormer model)"),xye.forEach(t),lyo=i(L),j4=n(L,"LI",{});var kye=s(j4);Dae=n(kye,"STRONG",{});var FKr=s(Dae);iyo=r(FKr,"squeezebert"),FKr.forEach(t),dyo=r(kye," \u2014 "),wj=n(kye,"A",{href:!0});var CKr=s(wj);cyo=r(CKr,"SqueezeBertForSequenceClassification"),CKr.forEach(t),fyo=r(kye," (SqueezeBERT model)"),kye.forEach(t),myo=i(L),N4=n(L,"LI",{});var Rye=s(N4);qae=n(Rye,"STRONG",{});var MKr=s(qae);gyo=r(MKr,"tapas"),MKr.forEach(t),hyo=r(Rye," \u2014 "),Aj=n(Rye,"A",{href:!0});var EKr=s(Aj);pyo=r(EKr,"TapasForSequenceClassification"),EKr.forEach(t),_yo=r(Rye," (TAPAS model)"),Rye.forEach(t),uyo=i(L),D4=n(L,"LI",{});var Sye=s(D4);Gae=n(Sye,"STRONG",{});var yKr=s(Gae);byo=r(yKr,"transfo-xl"),yKr.forEach(t),vyo=r(Sye," \u2014 "),Lj=n(Sye,"A",{href:!0});var wKr=s(Lj);Tyo=r(wKr,"TransfoXLForSequenceClassification"),wKr.forEach(t),Fyo=r(Sye," (Transformer-XL model)"),Sye.forEach(t),Cyo=i(L),q4=n(L,"LI",{});var Pye=s(q4);Oae=n(Pye,"STRONG",{});var AKr=s(Oae);Myo=r(AKr,"xlm"),AKr.forEach(t),Eyo=r(Pye," \u2014 "),Bj=n(Pye,"A",{href:!0});var LKr=s(Bj);yyo=r(LKr,"XLMForSequenceClassification"),LKr.forEach(t),wyo=r(Pye," (XLM model)"),Pye.forEach(t),Ayo=i(L),G4=n(L,"LI",{});var $ye=s(G4);Xae=n($ye,"STRONG",{});var BKr=s(Xae);Lyo=r(BKr,"xlm-roberta"),BKr.forEach(t),Byo=r($ye," \u2014 "),xj=n($ye,"A",{href:!0});var xKr=s(xj);xyo=r(xKr,"XLMRobertaForSequenceClassification"),xKr.forEach(t),kyo=r($ye," (XLM-RoBERTa model)"),$ye.forEach(t),Ryo=i(L),O4=n(L,"LI",{});var Iye=s(O4);Vae=n(Iye,"STRONG",{});var kKr=s(Vae);Syo=r(kKr,"xlm-roberta-xl"),kKr.forEach(t),Pyo=r(Iye," \u2014 "),kj=n(Iye,"A",{href:!0});var RKr=s(kj);$yo=r(RKr,"XLMRobertaXLForSequenceClassification"),RKr.forEach(t),Iyo=r(Iye," (XLM-RoBERTa-XL model)"),Iye.forEach(t),jyo=i(L),X4=n(L,"LI",{});var jye=s(X4);zae=n(jye,"STRONG",{});var SKr=s(zae);Nyo=r(SKr,"xlnet"),SKr.forEach(t),Dyo=r(jye," \u2014 "),Rj=n(jye,"A",{href:!0});var PKr=s(Rj);qyo=r(PKr,"XLNetForSequenceClassification"),PKr.forEach(t),Gyo=r(jye," (XLNet model)"),jye.forEach(t),Oyo=i(L),V4=n(L,"LI",{});var Nye=s(V4);Wae=n(Nye,"STRONG",{});var $Kr=s(Wae);Xyo=r($Kr,"yoso"),$Kr.forEach(t),Vyo=r(Nye," \u2014 "),Sj=n(Nye,"A",{href:!0});var IKr=s(Sj);zyo=r(IKr,"YosoForSequenceClassification"),IKr.forEach(t),Wyo=r(Nye," (YOSO model)"),Nye.forEach(t),L.forEach(t),Qyo=i(zt),z4=n(zt,"P",{});var Dye=s(z4);Hyo=r(Dye,"The model is set in evaluation mode by default using "),Qae=n(Dye,"CODE",{});var jKr=s(Qae);Uyo=r(jKr,"model.eval()"),jKr.forEach(t),Jyo=r(Dye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hae=n(Dye,"CODE",{});var NKr=s(Hae);Yyo=r(NKr,"model.train()"),NKr.forEach(t),Dye.forEach(t),Kyo=i(zt),Uae=n(zt,"P",{});var DKr=s(Uae);Zyo=r(DKr,"Examples:"),DKr.forEach(t),ewo=i(zt),m(x3.$$.fragment,zt),zt.forEach(t),rl.forEach(t),Gke=i(c),hd=n(c,"H2",{class:!0});var JSe=s(hd);W4=n(JSe,"A",{id:!0,class:!0,href:!0});var qKr=s(W4);Jae=n(qKr,"SPAN",{});var GKr=s(Jae);m(k3.$$.fragment,GKr),GKr.forEach(t),qKr.forEach(t),owo=i(JSe),Yae=n(JSe,"SPAN",{});var OKr=s(Yae);rwo=r(OKr,"AutoModelForMultipleChoice"),OKr.forEach(t),JSe.forEach(t),Oke=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(R3.$$.fragment,al),two=i(al),pd=n(al,"P",{});var pW=s(pd);awo=r(pW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Kae=n(pW,"CODE",{});var XKr=s(Kae);nwo=r(XKr,"from_pretrained()"),XKr.forEach(t),swo=r(pW,"class method or the "),Zae=n(pW,"CODE",{});var VKr=s(Zae);lwo=r(VKr,"from_config()"),VKr.forEach(t),iwo=r(pW,`class
method.`),pW.forEach(t),dwo=i(al),S3=n(al,"P",{});var YSe=s(S3);cwo=r(YSe,"This class cannot be instantiated directly using "),ene=n(YSe,"CODE",{});var zKr=s(ene);fwo=r(zKr,"__init__()"),zKr.forEach(t),mwo=r(YSe," (throws an error)."),YSe.forEach(t),gwo=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(P3.$$.fragment,nl),hwo=i(nl),one=n(nl,"P",{});var WKr=s(one);pwo=r(WKr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),WKr.forEach(t),_wo=i(nl),_d=n(nl,"P",{});var _W=s(_d);uwo=r(_W,`Note:
Loading a model from its configuration file does `),rne=n(_W,"STRONG",{});var QKr=s(rne);bwo=r(QKr,"not"),QKr.forEach(t),vwo=r(_W,` load the model weights. It only affects the
model\u2019s configuration. Use `),tne=n(_W,"CODE",{});var HKr=s(tne);Two=r(HKr,"from_pretrained()"),HKr.forEach(t),Fwo=r(_W,"to load the model weights."),_W.forEach(t),Cwo=i(nl),ane=n(nl,"P",{});var UKr=s(ane);Mwo=r(UKr,"Examples:"),UKr.forEach(t),Ewo=i(nl),m($3.$$.fragment,nl),nl.forEach(t),ywo=i(al),Xe=n(al,"DIV",{class:!0});var Wt=s(Xe);m(I3.$$.fragment,Wt),wwo=i(Wt),nne=n(Wt,"P",{});var JKr=s(nne);Awo=r(JKr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),JKr.forEach(t),Lwo=i(Wt),Ja=n(Wt,"P",{});var vM=s(Ja);Bwo=r(vM,"The model class to instantiate is selected based on the "),sne=n(vM,"CODE",{});var YKr=s(sne);xwo=r(YKr,"model_type"),YKr.forEach(t),kwo=r(vM,` property of the config object (either
passed as an argument or loaded from `),lne=n(vM,"CODE",{});var KKr=s(lne);Rwo=r(KKr,"pretrained_model_name_or_path"),KKr.forEach(t),Swo=r(vM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ine=n(vM,"CODE",{});var ZKr=s(ine);Pwo=r(ZKr,"pretrained_model_name_or_path"),ZKr.forEach(t),$wo=r(vM,":"),vM.forEach(t),Iwo=i(Wt),G=n(Wt,"UL",{});var O=s(G);Q4=n(O,"LI",{});var qye=s(Q4);dne=n(qye,"STRONG",{});var eZr=s(dne);jwo=r(eZr,"albert"),eZr.forEach(t),Nwo=r(qye," \u2014 "),Pj=n(qye,"A",{href:!0});var oZr=s(Pj);Dwo=r(oZr,"AlbertForMultipleChoice"),oZr.forEach(t),qwo=r(qye," (ALBERT model)"),qye.forEach(t),Gwo=i(O),H4=n(O,"LI",{});var Gye=s(H4);cne=n(Gye,"STRONG",{});var rZr=s(cne);Owo=r(rZr,"bert"),rZr.forEach(t),Xwo=r(Gye," \u2014 "),$j=n(Gye,"A",{href:!0});var tZr=s($j);Vwo=r(tZr,"BertForMultipleChoice"),tZr.forEach(t),zwo=r(Gye," (BERT model)"),Gye.forEach(t),Wwo=i(O),U4=n(O,"LI",{});var Oye=s(U4);fne=n(Oye,"STRONG",{});var aZr=s(fne);Qwo=r(aZr,"big_bird"),aZr.forEach(t),Hwo=r(Oye," \u2014 "),Ij=n(Oye,"A",{href:!0});var nZr=s(Ij);Uwo=r(nZr,"BigBirdForMultipleChoice"),nZr.forEach(t),Jwo=r(Oye," (BigBird model)"),Oye.forEach(t),Ywo=i(O),J4=n(O,"LI",{});var Xye=s(J4);mne=n(Xye,"STRONG",{});var sZr=s(mne);Kwo=r(sZr,"camembert"),sZr.forEach(t),Zwo=r(Xye," \u2014 "),jj=n(Xye,"A",{href:!0});var lZr=s(jj);eAo=r(lZr,"CamembertForMultipleChoice"),lZr.forEach(t),oAo=r(Xye," (CamemBERT model)"),Xye.forEach(t),rAo=i(O),Y4=n(O,"LI",{});var Vye=s(Y4);gne=n(Vye,"STRONG",{});var iZr=s(gne);tAo=r(iZr,"canine"),iZr.forEach(t),aAo=r(Vye," \u2014 "),Nj=n(Vye,"A",{href:!0});var dZr=s(Nj);nAo=r(dZr,"CanineForMultipleChoice"),dZr.forEach(t),sAo=r(Vye," (Canine model)"),Vye.forEach(t),lAo=i(O),K4=n(O,"LI",{});var zye=s(K4);hne=n(zye,"STRONG",{});var cZr=s(hne);iAo=r(cZr,"convbert"),cZr.forEach(t),dAo=r(zye," \u2014 "),Dj=n(zye,"A",{href:!0});var fZr=s(Dj);cAo=r(fZr,"ConvBertForMultipleChoice"),fZr.forEach(t),fAo=r(zye," (ConvBERT model)"),zye.forEach(t),mAo=i(O),Z4=n(O,"LI",{});var Wye=s(Z4);pne=n(Wye,"STRONG",{});var mZr=s(pne);gAo=r(mZr,"data2vec-text"),mZr.forEach(t),hAo=r(Wye," \u2014 "),qj=n(Wye,"A",{href:!0});var gZr=s(qj);pAo=r(gZr,"Data2VecTextForMultipleChoice"),gZr.forEach(t),_Ao=r(Wye," (Data2VecText model)"),Wye.forEach(t),uAo=i(O),eb=n(O,"LI",{});var Qye=s(eb);_ne=n(Qye,"STRONG",{});var hZr=s(_ne);bAo=r(hZr,"distilbert"),hZr.forEach(t),vAo=r(Qye," \u2014 "),Gj=n(Qye,"A",{href:!0});var pZr=s(Gj);TAo=r(pZr,"DistilBertForMultipleChoice"),pZr.forEach(t),FAo=r(Qye," (DistilBERT model)"),Qye.forEach(t),CAo=i(O),ob=n(O,"LI",{});var Hye=s(ob);une=n(Hye,"STRONG",{});var _Zr=s(une);MAo=r(_Zr,"electra"),_Zr.forEach(t),EAo=r(Hye," \u2014 "),Oj=n(Hye,"A",{href:!0});var uZr=s(Oj);yAo=r(uZr,"ElectraForMultipleChoice"),uZr.forEach(t),wAo=r(Hye," (ELECTRA model)"),Hye.forEach(t),AAo=i(O),rb=n(O,"LI",{});var Uye=s(rb);bne=n(Uye,"STRONG",{});var bZr=s(bne);LAo=r(bZr,"flaubert"),bZr.forEach(t),BAo=r(Uye," \u2014 "),Xj=n(Uye,"A",{href:!0});var vZr=s(Xj);xAo=r(vZr,"FlaubertForMultipleChoice"),vZr.forEach(t),kAo=r(Uye," (FlauBERT model)"),Uye.forEach(t),RAo=i(O),tb=n(O,"LI",{});var Jye=s(tb);vne=n(Jye,"STRONG",{});var TZr=s(vne);SAo=r(TZr,"fnet"),TZr.forEach(t),PAo=r(Jye," \u2014 "),Vj=n(Jye,"A",{href:!0});var FZr=s(Vj);$Ao=r(FZr,"FNetForMultipleChoice"),FZr.forEach(t),IAo=r(Jye," (FNet model)"),Jye.forEach(t),jAo=i(O),ab=n(O,"LI",{});var Yye=s(ab);Tne=n(Yye,"STRONG",{});var CZr=s(Tne);NAo=r(CZr,"funnel"),CZr.forEach(t),DAo=r(Yye," \u2014 "),zj=n(Yye,"A",{href:!0});var MZr=s(zj);qAo=r(MZr,"FunnelForMultipleChoice"),MZr.forEach(t),GAo=r(Yye," (Funnel Transformer model)"),Yye.forEach(t),OAo=i(O),nb=n(O,"LI",{});var Kye=s(nb);Fne=n(Kye,"STRONG",{});var EZr=s(Fne);XAo=r(EZr,"ibert"),EZr.forEach(t),VAo=r(Kye," \u2014 "),Wj=n(Kye,"A",{href:!0});var yZr=s(Wj);zAo=r(yZr,"IBertForMultipleChoice"),yZr.forEach(t),WAo=r(Kye," (I-BERT model)"),Kye.forEach(t),QAo=i(O),sb=n(O,"LI",{});var Zye=s(sb);Cne=n(Zye,"STRONG",{});var wZr=s(Cne);HAo=r(wZr,"longformer"),wZr.forEach(t),UAo=r(Zye," \u2014 "),Qj=n(Zye,"A",{href:!0});var AZr=s(Qj);JAo=r(AZr,"LongformerForMultipleChoice"),AZr.forEach(t),YAo=r(Zye," (Longformer model)"),Zye.forEach(t),KAo=i(O),lb=n(O,"LI",{});var ewe=s(lb);Mne=n(ewe,"STRONG",{});var LZr=s(Mne);ZAo=r(LZr,"megatron-bert"),LZr.forEach(t),eLo=r(ewe," \u2014 "),Hj=n(ewe,"A",{href:!0});var BZr=s(Hj);oLo=r(BZr,"MegatronBertForMultipleChoice"),BZr.forEach(t),rLo=r(ewe," (MegatronBert model)"),ewe.forEach(t),tLo=i(O),ib=n(O,"LI",{});var owe=s(ib);Ene=n(owe,"STRONG",{});var xZr=s(Ene);aLo=r(xZr,"mobilebert"),xZr.forEach(t),nLo=r(owe," \u2014 "),Uj=n(owe,"A",{href:!0});var kZr=s(Uj);sLo=r(kZr,"MobileBertForMultipleChoice"),kZr.forEach(t),lLo=r(owe," (MobileBERT model)"),owe.forEach(t),iLo=i(O),db=n(O,"LI",{});var rwe=s(db);yne=n(rwe,"STRONG",{});var RZr=s(yne);dLo=r(RZr,"mpnet"),RZr.forEach(t),cLo=r(rwe," \u2014 "),Jj=n(rwe,"A",{href:!0});var SZr=s(Jj);fLo=r(SZr,"MPNetForMultipleChoice"),SZr.forEach(t),mLo=r(rwe," (MPNet model)"),rwe.forEach(t),gLo=i(O),cb=n(O,"LI",{});var twe=s(cb);wne=n(twe,"STRONG",{});var PZr=s(wne);hLo=r(PZr,"nystromformer"),PZr.forEach(t),pLo=r(twe," \u2014 "),Yj=n(twe,"A",{href:!0});var $Zr=s(Yj);_Lo=r($Zr,"NystromformerForMultipleChoice"),$Zr.forEach(t),uLo=r(twe," (Nystromformer model)"),twe.forEach(t),bLo=i(O),fb=n(O,"LI",{});var awe=s(fb);Ane=n(awe,"STRONG",{});var IZr=s(Ane);vLo=r(IZr,"qdqbert"),IZr.forEach(t),TLo=r(awe," \u2014 "),Kj=n(awe,"A",{href:!0});var jZr=s(Kj);FLo=r(jZr,"QDQBertForMultipleChoice"),jZr.forEach(t),CLo=r(awe," (QDQBert model)"),awe.forEach(t),MLo=i(O),mb=n(O,"LI",{});var nwe=s(mb);Lne=n(nwe,"STRONG",{});var NZr=s(Lne);ELo=r(NZr,"rembert"),NZr.forEach(t),yLo=r(nwe," \u2014 "),Zj=n(nwe,"A",{href:!0});var DZr=s(Zj);wLo=r(DZr,"RemBertForMultipleChoice"),DZr.forEach(t),ALo=r(nwe," (RemBERT model)"),nwe.forEach(t),LLo=i(O),gb=n(O,"LI",{});var swe=s(gb);Bne=n(swe,"STRONG",{});var qZr=s(Bne);BLo=r(qZr,"roberta"),qZr.forEach(t),xLo=r(swe," \u2014 "),eN=n(swe,"A",{href:!0});var GZr=s(eN);kLo=r(GZr,"RobertaForMultipleChoice"),GZr.forEach(t),RLo=r(swe," (RoBERTa model)"),swe.forEach(t),SLo=i(O),hb=n(O,"LI",{});var lwe=s(hb);xne=n(lwe,"STRONG",{});var OZr=s(xne);PLo=r(OZr,"roformer"),OZr.forEach(t),$Lo=r(lwe," \u2014 "),oN=n(lwe,"A",{href:!0});var XZr=s(oN);ILo=r(XZr,"RoFormerForMultipleChoice"),XZr.forEach(t),jLo=r(lwe," (RoFormer model)"),lwe.forEach(t),NLo=i(O),pb=n(O,"LI",{});var iwe=s(pb);kne=n(iwe,"STRONG",{});var VZr=s(kne);DLo=r(VZr,"squeezebert"),VZr.forEach(t),qLo=r(iwe," \u2014 "),rN=n(iwe,"A",{href:!0});var zZr=s(rN);GLo=r(zZr,"SqueezeBertForMultipleChoice"),zZr.forEach(t),OLo=r(iwe," (SqueezeBERT model)"),iwe.forEach(t),XLo=i(O),_b=n(O,"LI",{});var dwe=s(_b);Rne=n(dwe,"STRONG",{});var WZr=s(Rne);VLo=r(WZr,"xlm"),WZr.forEach(t),zLo=r(dwe," \u2014 "),tN=n(dwe,"A",{href:!0});var QZr=s(tN);WLo=r(QZr,"XLMForMultipleChoice"),QZr.forEach(t),QLo=r(dwe," (XLM model)"),dwe.forEach(t),HLo=i(O),ub=n(O,"LI",{});var cwe=s(ub);Sne=n(cwe,"STRONG",{});var HZr=s(Sne);ULo=r(HZr,"xlm-roberta"),HZr.forEach(t),JLo=r(cwe," \u2014 "),aN=n(cwe,"A",{href:!0});var UZr=s(aN);YLo=r(UZr,"XLMRobertaForMultipleChoice"),UZr.forEach(t),KLo=r(cwe," (XLM-RoBERTa model)"),cwe.forEach(t),ZLo=i(O),bb=n(O,"LI",{});var fwe=s(bb);Pne=n(fwe,"STRONG",{});var JZr=s(Pne);e7o=r(JZr,"xlm-roberta-xl"),JZr.forEach(t),o7o=r(fwe," \u2014 "),nN=n(fwe,"A",{href:!0});var YZr=s(nN);r7o=r(YZr,"XLMRobertaXLForMultipleChoice"),YZr.forEach(t),t7o=r(fwe," (XLM-RoBERTa-XL model)"),fwe.forEach(t),a7o=i(O),vb=n(O,"LI",{});var mwe=s(vb);$ne=n(mwe,"STRONG",{});var KZr=s($ne);n7o=r(KZr,"xlnet"),KZr.forEach(t),s7o=r(mwe," \u2014 "),sN=n(mwe,"A",{href:!0});var ZZr=s(sN);l7o=r(ZZr,"XLNetForMultipleChoice"),ZZr.forEach(t),i7o=r(mwe," (XLNet model)"),mwe.forEach(t),d7o=i(O),Tb=n(O,"LI",{});var gwe=s(Tb);Ine=n(gwe,"STRONG",{});var eet=s(Ine);c7o=r(eet,"yoso"),eet.forEach(t),f7o=r(gwe," \u2014 "),lN=n(gwe,"A",{href:!0});var oet=s(lN);m7o=r(oet,"YosoForMultipleChoice"),oet.forEach(t),g7o=r(gwe," (YOSO model)"),gwe.forEach(t),O.forEach(t),h7o=i(Wt),Fb=n(Wt,"P",{});var hwe=s(Fb);p7o=r(hwe,"The model is set in evaluation mode by default using "),jne=n(hwe,"CODE",{});var ret=s(jne);_7o=r(ret,"model.eval()"),ret.forEach(t),u7o=r(hwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nne=n(hwe,"CODE",{});var tet=s(Nne);b7o=r(tet,"model.train()"),tet.forEach(t),hwe.forEach(t),v7o=i(Wt),Dne=n(Wt,"P",{});var aet=s(Dne);T7o=r(aet,"Examples:"),aet.forEach(t),F7o=i(Wt),m(j3.$$.fragment,Wt),Wt.forEach(t),al.forEach(t),Xke=i(c),ud=n(c,"H2",{class:!0});var KSe=s(ud);Cb=n(KSe,"A",{id:!0,class:!0,href:!0});var net=s(Cb);qne=n(net,"SPAN",{});var set=s(qne);m(N3.$$.fragment,set),set.forEach(t),net.forEach(t),C7o=i(KSe),Gne=n(KSe,"SPAN",{});var iet=s(Gne);M7o=r(iet,"AutoModelForNextSentencePrediction"),iet.forEach(t),KSe.forEach(t),Vke=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(D3.$$.fragment,sl),E7o=i(sl),bd=n(sl,"P",{});var uW=s(bd);y7o=r(uW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),One=n(uW,"CODE",{});var det=s(One);w7o=r(det,"from_pretrained()"),det.forEach(t),A7o=r(uW,"class method or the "),Xne=n(uW,"CODE",{});var cet=s(Xne);L7o=r(cet,"from_config()"),cet.forEach(t),B7o=r(uW,`class
method.`),uW.forEach(t),x7o=i(sl),q3=n(sl,"P",{});var ZSe=s(q3);k7o=r(ZSe,"This class cannot be instantiated directly using "),Vne=n(ZSe,"CODE",{});var fet=s(Vne);R7o=r(fet,"__init__()"),fet.forEach(t),S7o=r(ZSe," (throws an error)."),ZSe.forEach(t),P7o=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(G3.$$.fragment,ll),$7o=i(ll),zne=n(ll,"P",{});var met=s(zne);I7o=r(met,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),met.forEach(t),j7o=i(ll),vd=n(ll,"P",{});var bW=s(vd);N7o=r(bW,`Note:
Loading a model from its configuration file does `),Wne=n(bW,"STRONG",{});var get=s(Wne);D7o=r(get,"not"),get.forEach(t),q7o=r(bW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qne=n(bW,"CODE",{});var het=s(Qne);G7o=r(het,"from_pretrained()"),het.forEach(t),O7o=r(bW,"to load the model weights."),bW.forEach(t),X7o=i(ll),Hne=n(ll,"P",{});var pet=s(Hne);V7o=r(pet,"Examples:"),pet.forEach(t),z7o=i(ll),m(O3.$$.fragment,ll),ll.forEach(t),W7o=i(sl),Ve=n(sl,"DIV",{class:!0});var Qt=s(Ve);m(X3.$$.fragment,Qt),Q7o=i(Qt),Une=n(Qt,"P",{});var _et=s(Une);H7o=r(_et,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),_et.forEach(t),U7o=i(Qt),Ya=n(Qt,"P",{});var TM=s(Ya);J7o=r(TM,"The model class to instantiate is selected based on the "),Jne=n(TM,"CODE",{});var uet=s(Jne);Y7o=r(uet,"model_type"),uet.forEach(t),K7o=r(TM,` property of the config object (either
passed as an argument or loaded from `),Yne=n(TM,"CODE",{});var bet=s(Yne);Z7o=r(bet,"pretrained_model_name_or_path"),bet.forEach(t),e8o=r(TM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kne=n(TM,"CODE",{});var vet=s(Kne);o8o=r(vet,"pretrained_model_name_or_path"),vet.forEach(t),r8o=r(TM,":"),TM.forEach(t),t8o=i(Qt),da=n(Qt,"UL",{});var il=s(da);Mb=n(il,"LI",{});var pwe=s(Mb);Zne=n(pwe,"STRONG",{});var Tet=s(Zne);a8o=r(Tet,"bert"),Tet.forEach(t),n8o=r(pwe," \u2014 "),iN=n(pwe,"A",{href:!0});var Fet=s(iN);s8o=r(Fet,"BertForNextSentencePrediction"),Fet.forEach(t),l8o=r(pwe," (BERT model)"),pwe.forEach(t),i8o=i(il),Eb=n(il,"LI",{});var _we=s(Eb);ese=n(_we,"STRONG",{});var Cet=s(ese);d8o=r(Cet,"fnet"),Cet.forEach(t),c8o=r(_we," \u2014 "),dN=n(_we,"A",{href:!0});var Met=s(dN);f8o=r(Met,"FNetForNextSentencePrediction"),Met.forEach(t),m8o=r(_we," (FNet model)"),_we.forEach(t),g8o=i(il),yb=n(il,"LI",{});var uwe=s(yb);ose=n(uwe,"STRONG",{});var Eet=s(ose);h8o=r(Eet,"megatron-bert"),Eet.forEach(t),p8o=r(uwe," \u2014 "),cN=n(uwe,"A",{href:!0});var yet=s(cN);_8o=r(yet,"MegatronBertForNextSentencePrediction"),yet.forEach(t),u8o=r(uwe," (MegatronBert model)"),uwe.forEach(t),b8o=i(il),wb=n(il,"LI",{});var bwe=s(wb);rse=n(bwe,"STRONG",{});var wet=s(rse);v8o=r(wet,"mobilebert"),wet.forEach(t),T8o=r(bwe," \u2014 "),fN=n(bwe,"A",{href:!0});var Aet=s(fN);F8o=r(Aet,"MobileBertForNextSentencePrediction"),Aet.forEach(t),C8o=r(bwe," (MobileBERT model)"),bwe.forEach(t),M8o=i(il),Ab=n(il,"LI",{});var vwe=s(Ab);tse=n(vwe,"STRONG",{});var Let=s(tse);E8o=r(Let,"qdqbert"),Let.forEach(t),y8o=r(vwe," \u2014 "),mN=n(vwe,"A",{href:!0});var Bet=s(mN);w8o=r(Bet,"QDQBertForNextSentencePrediction"),Bet.forEach(t),A8o=r(vwe," (QDQBert model)"),vwe.forEach(t),il.forEach(t),L8o=i(Qt),Lb=n(Qt,"P",{});var Twe=s(Lb);B8o=r(Twe,"The model is set in evaluation mode by default using "),ase=n(Twe,"CODE",{});var xet=s(ase);x8o=r(xet,"model.eval()"),xet.forEach(t),k8o=r(Twe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nse=n(Twe,"CODE",{});var ket=s(nse);R8o=r(ket,"model.train()"),ket.forEach(t),Twe.forEach(t),S8o=i(Qt),sse=n(Qt,"P",{});var Ret=s(sse);P8o=r(Ret,"Examples:"),Ret.forEach(t),$8o=i(Qt),m(V3.$$.fragment,Qt),Qt.forEach(t),sl.forEach(t),zke=i(c),Td=n(c,"H2",{class:!0});var ePe=s(Td);Bb=n(ePe,"A",{id:!0,class:!0,href:!0});var Set=s(Bb);lse=n(Set,"SPAN",{});var Pet=s(lse);m(z3.$$.fragment,Pet),Pet.forEach(t),Set.forEach(t),I8o=i(ePe),ise=n(ePe,"SPAN",{});var $et=s(ise);j8o=r($et,"AutoModelForTokenClassification"),$et.forEach(t),ePe.forEach(t),Wke=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(W3.$$.fragment,dl),N8o=i(dl),Fd=n(dl,"P",{});var vW=s(Fd);D8o=r(vW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dse=n(vW,"CODE",{});var Iet=s(dse);q8o=r(Iet,"from_pretrained()"),Iet.forEach(t),G8o=r(vW,"class method or the "),cse=n(vW,"CODE",{});var jet=s(cse);O8o=r(jet,"from_config()"),jet.forEach(t),X8o=r(vW,`class
method.`),vW.forEach(t),V8o=i(dl),Q3=n(dl,"P",{});var oPe=s(Q3);z8o=r(oPe,"This class cannot be instantiated directly using "),fse=n(oPe,"CODE",{});var Net=s(fse);W8o=r(Net,"__init__()"),Net.forEach(t),Q8o=r(oPe," (throws an error)."),oPe.forEach(t),H8o=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(H3.$$.fragment,cl),U8o=i(cl),mse=n(cl,"P",{});var Det=s(mse);J8o=r(Det,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Det.forEach(t),Y8o=i(cl),Cd=n(cl,"P",{});var TW=s(Cd);K8o=r(TW,`Note:
Loading a model from its configuration file does `),gse=n(TW,"STRONG",{});var qet=s(gse);Z8o=r(qet,"not"),qet.forEach(t),e9o=r(TW,` load the model weights. It only affects the
model\u2019s configuration. Use `),hse=n(TW,"CODE",{});var Get=s(hse);o9o=r(Get,"from_pretrained()"),Get.forEach(t),r9o=r(TW,"to load the model weights."),TW.forEach(t),t9o=i(cl),pse=n(cl,"P",{});var Oet=s(pse);a9o=r(Oet,"Examples:"),Oet.forEach(t),n9o=i(cl),m(U3.$$.fragment,cl),cl.forEach(t),s9o=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);m(J3.$$.fragment,Ht),l9o=i(Ht),_se=n(Ht,"P",{});var Xet=s(_se);i9o=r(Xet,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Xet.forEach(t),d9o=i(Ht),Ka=n(Ht,"P",{});var FM=s(Ka);c9o=r(FM,"The model class to instantiate is selected based on the "),use=n(FM,"CODE",{});var Vet=s(use);f9o=r(Vet,"model_type"),Vet.forEach(t),m9o=r(FM,` property of the config object (either
passed as an argument or loaded from `),bse=n(FM,"CODE",{});var zet=s(bse);g9o=r(zet,"pretrained_model_name_or_path"),zet.forEach(t),h9o=r(FM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vse=n(FM,"CODE",{});var Wet=s(vse);p9o=r(Wet,"pretrained_model_name_or_path"),Wet.forEach(t),_9o=r(FM,":"),FM.forEach(t),u9o=i(Ht),D=n(Ht,"UL",{});var q=s(D);xb=n(q,"LI",{});var Fwe=s(xb);Tse=n(Fwe,"STRONG",{});var Qet=s(Tse);b9o=r(Qet,"albert"),Qet.forEach(t),v9o=r(Fwe," \u2014 "),gN=n(Fwe,"A",{href:!0});var Het=s(gN);T9o=r(Het,"AlbertForTokenClassification"),Het.forEach(t),F9o=r(Fwe," (ALBERT model)"),Fwe.forEach(t),C9o=i(q),kb=n(q,"LI",{});var Cwe=s(kb);Fse=n(Cwe,"STRONG",{});var Uet=s(Fse);M9o=r(Uet,"bert"),Uet.forEach(t),E9o=r(Cwe," \u2014 "),hN=n(Cwe,"A",{href:!0});var Jet=s(hN);y9o=r(Jet,"BertForTokenClassification"),Jet.forEach(t),w9o=r(Cwe," (BERT model)"),Cwe.forEach(t),A9o=i(q),Rb=n(q,"LI",{});var Mwe=s(Rb);Cse=n(Mwe,"STRONG",{});var Yet=s(Cse);L9o=r(Yet,"big_bird"),Yet.forEach(t),B9o=r(Mwe," \u2014 "),pN=n(Mwe,"A",{href:!0});var Ket=s(pN);x9o=r(Ket,"BigBirdForTokenClassification"),Ket.forEach(t),k9o=r(Mwe," (BigBird model)"),Mwe.forEach(t),R9o=i(q),Sb=n(q,"LI",{});var Ewe=s(Sb);Mse=n(Ewe,"STRONG",{});var Zet=s(Mse);S9o=r(Zet,"camembert"),Zet.forEach(t),P9o=r(Ewe," \u2014 "),_N=n(Ewe,"A",{href:!0});var eot=s(_N);$9o=r(eot,"CamembertForTokenClassification"),eot.forEach(t),I9o=r(Ewe," (CamemBERT model)"),Ewe.forEach(t),j9o=i(q),Pb=n(q,"LI",{});var ywe=s(Pb);Ese=n(ywe,"STRONG",{});var oot=s(Ese);N9o=r(oot,"canine"),oot.forEach(t),D9o=r(ywe," \u2014 "),uN=n(ywe,"A",{href:!0});var rot=s(uN);q9o=r(rot,"CanineForTokenClassification"),rot.forEach(t),G9o=r(ywe," (Canine model)"),ywe.forEach(t),O9o=i(q),$b=n(q,"LI",{});var wwe=s($b);yse=n(wwe,"STRONG",{});var tot=s(yse);X9o=r(tot,"convbert"),tot.forEach(t),V9o=r(wwe," \u2014 "),bN=n(wwe,"A",{href:!0});var aot=s(bN);z9o=r(aot,"ConvBertForTokenClassification"),aot.forEach(t),W9o=r(wwe," (ConvBERT model)"),wwe.forEach(t),Q9o=i(q),Ib=n(q,"LI",{});var Awe=s(Ib);wse=n(Awe,"STRONG",{});var not=s(wse);H9o=r(not,"data2vec-text"),not.forEach(t),U9o=r(Awe," \u2014 "),vN=n(Awe,"A",{href:!0});var sot=s(vN);J9o=r(sot,"Data2VecTextForTokenClassification"),sot.forEach(t),Y9o=r(Awe," (Data2VecText model)"),Awe.forEach(t),K9o=i(q),jb=n(q,"LI",{});var Lwe=s(jb);Ase=n(Lwe,"STRONG",{});var lot=s(Ase);Z9o=r(lot,"deberta"),lot.forEach(t),eBo=r(Lwe," \u2014 "),TN=n(Lwe,"A",{href:!0});var iot=s(TN);oBo=r(iot,"DebertaForTokenClassification"),iot.forEach(t),rBo=r(Lwe," (DeBERTa model)"),Lwe.forEach(t),tBo=i(q),Nb=n(q,"LI",{});var Bwe=s(Nb);Lse=n(Bwe,"STRONG",{});var dot=s(Lse);aBo=r(dot,"deberta-v2"),dot.forEach(t),nBo=r(Bwe," \u2014 "),FN=n(Bwe,"A",{href:!0});var cot=s(FN);sBo=r(cot,"DebertaV2ForTokenClassification"),cot.forEach(t),lBo=r(Bwe," (DeBERTa-v2 model)"),Bwe.forEach(t),iBo=i(q),Db=n(q,"LI",{});var xwe=s(Db);Bse=n(xwe,"STRONG",{});var fot=s(Bse);dBo=r(fot,"distilbert"),fot.forEach(t),cBo=r(xwe," \u2014 "),CN=n(xwe,"A",{href:!0});var mot=s(CN);fBo=r(mot,"DistilBertForTokenClassification"),mot.forEach(t),mBo=r(xwe," (DistilBERT model)"),xwe.forEach(t),gBo=i(q),qb=n(q,"LI",{});var kwe=s(qb);xse=n(kwe,"STRONG",{});var got=s(xse);hBo=r(got,"electra"),got.forEach(t),pBo=r(kwe," \u2014 "),MN=n(kwe,"A",{href:!0});var hot=s(MN);_Bo=r(hot,"ElectraForTokenClassification"),hot.forEach(t),uBo=r(kwe," (ELECTRA model)"),kwe.forEach(t),bBo=i(q),Gb=n(q,"LI",{});var Rwe=s(Gb);kse=n(Rwe,"STRONG",{});var pot=s(kse);vBo=r(pot,"flaubert"),pot.forEach(t),TBo=r(Rwe," \u2014 "),EN=n(Rwe,"A",{href:!0});var _ot=s(EN);FBo=r(_ot,"FlaubertForTokenClassification"),_ot.forEach(t),CBo=r(Rwe," (FlauBERT model)"),Rwe.forEach(t),MBo=i(q),Ob=n(q,"LI",{});var Swe=s(Ob);Rse=n(Swe,"STRONG",{});var uot=s(Rse);EBo=r(uot,"fnet"),uot.forEach(t),yBo=r(Swe," \u2014 "),yN=n(Swe,"A",{href:!0});var bot=s(yN);wBo=r(bot,"FNetForTokenClassification"),bot.forEach(t),ABo=r(Swe," (FNet model)"),Swe.forEach(t),LBo=i(q),Xb=n(q,"LI",{});var Pwe=s(Xb);Sse=n(Pwe,"STRONG",{});var vot=s(Sse);BBo=r(vot,"funnel"),vot.forEach(t),xBo=r(Pwe," \u2014 "),wN=n(Pwe,"A",{href:!0});var Tot=s(wN);kBo=r(Tot,"FunnelForTokenClassification"),Tot.forEach(t),RBo=r(Pwe," (Funnel Transformer model)"),Pwe.forEach(t),SBo=i(q),Vb=n(q,"LI",{});var $we=s(Vb);Pse=n($we,"STRONG",{});var Fot=s(Pse);PBo=r(Fot,"gpt2"),Fot.forEach(t),$Bo=r($we," \u2014 "),AN=n($we,"A",{href:!0});var Cot=s(AN);IBo=r(Cot,"GPT2ForTokenClassification"),Cot.forEach(t),jBo=r($we," (OpenAI GPT-2 model)"),$we.forEach(t),NBo=i(q),zb=n(q,"LI",{});var Iwe=s(zb);$se=n(Iwe,"STRONG",{});var Mot=s($se);DBo=r(Mot,"ibert"),Mot.forEach(t),qBo=r(Iwe," \u2014 "),LN=n(Iwe,"A",{href:!0});var Eot=s(LN);GBo=r(Eot,"IBertForTokenClassification"),Eot.forEach(t),OBo=r(Iwe," (I-BERT model)"),Iwe.forEach(t),XBo=i(q),Wb=n(q,"LI",{});var jwe=s(Wb);Ise=n(jwe,"STRONG",{});var yot=s(Ise);VBo=r(yot,"layoutlm"),yot.forEach(t),zBo=r(jwe," \u2014 "),BN=n(jwe,"A",{href:!0});var wot=s(BN);WBo=r(wot,"LayoutLMForTokenClassification"),wot.forEach(t),QBo=r(jwe," (LayoutLM model)"),jwe.forEach(t),HBo=i(q),Qb=n(q,"LI",{});var Nwe=s(Qb);jse=n(Nwe,"STRONG",{});var Aot=s(jse);UBo=r(Aot,"layoutlmv2"),Aot.forEach(t),JBo=r(Nwe," \u2014 "),xN=n(Nwe,"A",{href:!0});var Lot=s(xN);YBo=r(Lot,"LayoutLMv2ForTokenClassification"),Lot.forEach(t),KBo=r(Nwe," (LayoutLMv2 model)"),Nwe.forEach(t),ZBo=i(q),Hb=n(q,"LI",{});var Dwe=s(Hb);Nse=n(Dwe,"STRONG",{});var Bot=s(Nse);exo=r(Bot,"longformer"),Bot.forEach(t),oxo=r(Dwe," \u2014 "),kN=n(Dwe,"A",{href:!0});var xot=s(kN);rxo=r(xot,"LongformerForTokenClassification"),xot.forEach(t),txo=r(Dwe," (Longformer model)"),Dwe.forEach(t),axo=i(q),Ub=n(q,"LI",{});var qwe=s(Ub);Dse=n(qwe,"STRONG",{});var kot=s(Dse);nxo=r(kot,"megatron-bert"),kot.forEach(t),sxo=r(qwe," \u2014 "),RN=n(qwe,"A",{href:!0});var Rot=s(RN);lxo=r(Rot,"MegatronBertForTokenClassification"),Rot.forEach(t),ixo=r(qwe," (MegatronBert model)"),qwe.forEach(t),dxo=i(q),Jb=n(q,"LI",{});var Gwe=s(Jb);qse=n(Gwe,"STRONG",{});var Sot=s(qse);cxo=r(Sot,"mobilebert"),Sot.forEach(t),fxo=r(Gwe," \u2014 "),SN=n(Gwe,"A",{href:!0});var Pot=s(SN);mxo=r(Pot,"MobileBertForTokenClassification"),Pot.forEach(t),gxo=r(Gwe," (MobileBERT model)"),Gwe.forEach(t),hxo=i(q),Yb=n(q,"LI",{});var Owe=s(Yb);Gse=n(Owe,"STRONG",{});var $ot=s(Gse);pxo=r($ot,"mpnet"),$ot.forEach(t),_xo=r(Owe," \u2014 "),PN=n(Owe,"A",{href:!0});var Iot=s(PN);uxo=r(Iot,"MPNetForTokenClassification"),Iot.forEach(t),bxo=r(Owe," (MPNet model)"),Owe.forEach(t),vxo=i(q),Kb=n(q,"LI",{});var Xwe=s(Kb);Ose=n(Xwe,"STRONG",{});var jot=s(Ose);Txo=r(jot,"nystromformer"),jot.forEach(t),Fxo=r(Xwe," \u2014 "),$N=n(Xwe,"A",{href:!0});var Not=s($N);Cxo=r(Not,"NystromformerForTokenClassification"),Not.forEach(t),Mxo=r(Xwe," (Nystromformer model)"),Xwe.forEach(t),Exo=i(q),Zb=n(q,"LI",{});var Vwe=s(Zb);Xse=n(Vwe,"STRONG",{});var Dot=s(Xse);yxo=r(Dot,"qdqbert"),Dot.forEach(t),wxo=r(Vwe," \u2014 "),IN=n(Vwe,"A",{href:!0});var qot=s(IN);Axo=r(qot,"QDQBertForTokenClassification"),qot.forEach(t),Lxo=r(Vwe," (QDQBert model)"),Vwe.forEach(t),Bxo=i(q),e5=n(q,"LI",{});var zwe=s(e5);Vse=n(zwe,"STRONG",{});var Got=s(Vse);xxo=r(Got,"rembert"),Got.forEach(t),kxo=r(zwe," \u2014 "),jN=n(zwe,"A",{href:!0});var Oot=s(jN);Rxo=r(Oot,"RemBertForTokenClassification"),Oot.forEach(t),Sxo=r(zwe," (RemBERT model)"),zwe.forEach(t),Pxo=i(q),o5=n(q,"LI",{});var Wwe=s(o5);zse=n(Wwe,"STRONG",{});var Xot=s(zse);$xo=r(Xot,"roberta"),Xot.forEach(t),Ixo=r(Wwe," \u2014 "),NN=n(Wwe,"A",{href:!0});var Vot=s(NN);jxo=r(Vot,"RobertaForTokenClassification"),Vot.forEach(t),Nxo=r(Wwe," (RoBERTa model)"),Wwe.forEach(t),Dxo=i(q),r5=n(q,"LI",{});var Qwe=s(r5);Wse=n(Qwe,"STRONG",{});var zot=s(Wse);qxo=r(zot,"roformer"),zot.forEach(t),Gxo=r(Qwe," \u2014 "),DN=n(Qwe,"A",{href:!0});var Wot=s(DN);Oxo=r(Wot,"RoFormerForTokenClassification"),Wot.forEach(t),Xxo=r(Qwe," (RoFormer model)"),Qwe.forEach(t),Vxo=i(q),t5=n(q,"LI",{});var Hwe=s(t5);Qse=n(Hwe,"STRONG",{});var Qot=s(Qse);zxo=r(Qot,"squeezebert"),Qot.forEach(t),Wxo=r(Hwe," \u2014 "),qN=n(Hwe,"A",{href:!0});var Hot=s(qN);Qxo=r(Hot,"SqueezeBertForTokenClassification"),Hot.forEach(t),Hxo=r(Hwe," (SqueezeBERT model)"),Hwe.forEach(t),Uxo=i(q),a5=n(q,"LI",{});var Uwe=s(a5);Hse=n(Uwe,"STRONG",{});var Uot=s(Hse);Jxo=r(Uot,"xlm"),Uot.forEach(t),Yxo=r(Uwe," \u2014 "),GN=n(Uwe,"A",{href:!0});var Jot=s(GN);Kxo=r(Jot,"XLMForTokenClassification"),Jot.forEach(t),Zxo=r(Uwe," (XLM model)"),Uwe.forEach(t),eko=i(q),n5=n(q,"LI",{});var Jwe=s(n5);Use=n(Jwe,"STRONG",{});var Yot=s(Use);oko=r(Yot,"xlm-roberta"),Yot.forEach(t),rko=r(Jwe," \u2014 "),ON=n(Jwe,"A",{href:!0});var Kot=s(ON);tko=r(Kot,"XLMRobertaForTokenClassification"),Kot.forEach(t),ako=r(Jwe," (XLM-RoBERTa model)"),Jwe.forEach(t),nko=i(q),s5=n(q,"LI",{});var Ywe=s(s5);Jse=n(Ywe,"STRONG",{});var Zot=s(Jse);sko=r(Zot,"xlm-roberta-xl"),Zot.forEach(t),lko=r(Ywe," \u2014 "),XN=n(Ywe,"A",{href:!0});var ert=s(XN);iko=r(ert,"XLMRobertaXLForTokenClassification"),ert.forEach(t),dko=r(Ywe," (XLM-RoBERTa-XL model)"),Ywe.forEach(t),cko=i(q),l5=n(q,"LI",{});var Kwe=s(l5);Yse=n(Kwe,"STRONG",{});var ort=s(Yse);fko=r(ort,"xlnet"),ort.forEach(t),mko=r(Kwe," \u2014 "),VN=n(Kwe,"A",{href:!0});var rrt=s(VN);gko=r(rrt,"XLNetForTokenClassification"),rrt.forEach(t),hko=r(Kwe," (XLNet model)"),Kwe.forEach(t),pko=i(q),i5=n(q,"LI",{});var Zwe=s(i5);Kse=n(Zwe,"STRONG",{});var trt=s(Kse);_ko=r(trt,"yoso"),trt.forEach(t),uko=r(Zwe," \u2014 "),zN=n(Zwe,"A",{href:!0});var art=s(zN);bko=r(art,"YosoForTokenClassification"),art.forEach(t),vko=r(Zwe," (YOSO model)"),Zwe.forEach(t),q.forEach(t),Tko=i(Ht),d5=n(Ht,"P",{});var eAe=s(d5);Fko=r(eAe,"The model is set in evaluation mode by default using "),Zse=n(eAe,"CODE",{});var nrt=s(Zse);Cko=r(nrt,"model.eval()"),nrt.forEach(t),Mko=r(eAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ele=n(eAe,"CODE",{});var srt=s(ele);Eko=r(srt,"model.train()"),srt.forEach(t),eAe.forEach(t),yko=i(Ht),ole=n(Ht,"P",{});var lrt=s(ole);wko=r(lrt,"Examples:"),lrt.forEach(t),Ako=i(Ht),m(Y3.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),Qke=i(c),Md=n(c,"H2",{class:!0});var rPe=s(Md);c5=n(rPe,"A",{id:!0,class:!0,href:!0});var irt=s(c5);rle=n(irt,"SPAN",{});var drt=s(rle);m(K3.$$.fragment,drt),drt.forEach(t),irt.forEach(t),Lko=i(rPe),tle=n(rPe,"SPAN",{});var crt=s(tle);Bko=r(crt,"AutoModelForQuestionAnswering"),crt.forEach(t),rPe.forEach(t),Hke=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(Z3.$$.fragment,fl),xko=i(fl),Ed=n(fl,"P",{});var FW=s(Ed);kko=r(FW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ale=n(FW,"CODE",{});var frt=s(ale);Rko=r(frt,"from_pretrained()"),frt.forEach(t),Sko=r(FW,"class method or the "),nle=n(FW,"CODE",{});var mrt=s(nle);Pko=r(mrt,"from_config()"),mrt.forEach(t),$ko=r(FW,`class
method.`),FW.forEach(t),Iko=i(fl),ey=n(fl,"P",{});var tPe=s(ey);jko=r(tPe,"This class cannot be instantiated directly using "),sle=n(tPe,"CODE",{});var grt=s(sle);Nko=r(grt,"__init__()"),grt.forEach(t),Dko=r(tPe," (throws an error)."),tPe.forEach(t),qko=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(oy.$$.fragment,ml),Gko=i(ml),lle=n(ml,"P",{});var hrt=s(lle);Oko=r(hrt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),hrt.forEach(t),Xko=i(ml),yd=n(ml,"P",{});var CW=s(yd);Vko=r(CW,`Note:
Loading a model from its configuration file does `),ile=n(CW,"STRONG",{});var prt=s(ile);zko=r(prt,"not"),prt.forEach(t),Wko=r(CW,` load the model weights. It only affects the
model\u2019s configuration. Use `),dle=n(CW,"CODE",{});var _rt=s(dle);Qko=r(_rt,"from_pretrained()"),_rt.forEach(t),Hko=r(CW,"to load the model weights."),CW.forEach(t),Uko=i(ml),cle=n(ml,"P",{});var urt=s(cle);Jko=r(urt,"Examples:"),urt.forEach(t),Yko=i(ml),m(ry.$$.fragment,ml),ml.forEach(t),Kko=i(fl),We=n(fl,"DIV",{class:!0});var Ut=s(We);m(ty.$$.fragment,Ut),Zko=i(Ut),fle=n(Ut,"P",{});var brt=s(fle);eRo=r(brt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),brt.forEach(t),oRo=i(Ut),Za=n(Ut,"P",{});var CM=s(Za);rRo=r(CM,"The model class to instantiate is selected based on the "),mle=n(CM,"CODE",{});var vrt=s(mle);tRo=r(vrt,"model_type"),vrt.forEach(t),aRo=r(CM,` property of the config object (either
passed as an argument or loaded from `),gle=n(CM,"CODE",{});var Trt=s(gle);nRo=r(Trt,"pretrained_model_name_or_path"),Trt.forEach(t),sRo=r(CM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hle=n(CM,"CODE",{});var Frt=s(hle);lRo=r(Frt,"pretrained_model_name_or_path"),Frt.forEach(t),iRo=r(CM,":"),CM.forEach(t),dRo=i(Ut),R=n(Ut,"UL",{});var P=s(R);f5=n(P,"LI",{});var oAe=s(f5);ple=n(oAe,"STRONG",{});var Crt=s(ple);cRo=r(Crt,"albert"),Crt.forEach(t),fRo=r(oAe," \u2014 "),WN=n(oAe,"A",{href:!0});var Mrt=s(WN);mRo=r(Mrt,"AlbertForQuestionAnswering"),Mrt.forEach(t),gRo=r(oAe," (ALBERT model)"),oAe.forEach(t),hRo=i(P),m5=n(P,"LI",{});var rAe=s(m5);_le=n(rAe,"STRONG",{});var Ert=s(_le);pRo=r(Ert,"bart"),Ert.forEach(t),_Ro=r(rAe," \u2014 "),QN=n(rAe,"A",{href:!0});var yrt=s(QN);uRo=r(yrt,"BartForQuestionAnswering"),yrt.forEach(t),bRo=r(rAe," (BART model)"),rAe.forEach(t),vRo=i(P),g5=n(P,"LI",{});var tAe=s(g5);ule=n(tAe,"STRONG",{});var wrt=s(ule);TRo=r(wrt,"bert"),wrt.forEach(t),FRo=r(tAe," \u2014 "),HN=n(tAe,"A",{href:!0});var Art=s(HN);CRo=r(Art,"BertForQuestionAnswering"),Art.forEach(t),MRo=r(tAe," (BERT model)"),tAe.forEach(t),ERo=i(P),h5=n(P,"LI",{});var aAe=s(h5);ble=n(aAe,"STRONG",{});var Lrt=s(ble);yRo=r(Lrt,"big_bird"),Lrt.forEach(t),wRo=r(aAe," \u2014 "),UN=n(aAe,"A",{href:!0});var Brt=s(UN);ARo=r(Brt,"BigBirdForQuestionAnswering"),Brt.forEach(t),LRo=r(aAe," (BigBird model)"),aAe.forEach(t),BRo=i(P),p5=n(P,"LI",{});var nAe=s(p5);vle=n(nAe,"STRONG",{});var xrt=s(vle);xRo=r(xrt,"bigbird_pegasus"),xrt.forEach(t),kRo=r(nAe," \u2014 "),JN=n(nAe,"A",{href:!0});var krt=s(JN);RRo=r(krt,"BigBirdPegasusForQuestionAnswering"),krt.forEach(t),SRo=r(nAe," (BigBirdPegasus model)"),nAe.forEach(t),PRo=i(P),_5=n(P,"LI",{});var sAe=s(_5);Tle=n(sAe,"STRONG",{});var Rrt=s(Tle);$Ro=r(Rrt,"camembert"),Rrt.forEach(t),IRo=r(sAe," \u2014 "),YN=n(sAe,"A",{href:!0});var Srt=s(YN);jRo=r(Srt,"CamembertForQuestionAnswering"),Srt.forEach(t),NRo=r(sAe," (CamemBERT model)"),sAe.forEach(t),DRo=i(P),u5=n(P,"LI",{});var lAe=s(u5);Fle=n(lAe,"STRONG",{});var Prt=s(Fle);qRo=r(Prt,"canine"),Prt.forEach(t),GRo=r(lAe," \u2014 "),KN=n(lAe,"A",{href:!0});var $rt=s(KN);ORo=r($rt,"CanineForQuestionAnswering"),$rt.forEach(t),XRo=r(lAe," (Canine model)"),lAe.forEach(t),VRo=i(P),b5=n(P,"LI",{});var iAe=s(b5);Cle=n(iAe,"STRONG",{});var Irt=s(Cle);zRo=r(Irt,"convbert"),Irt.forEach(t),WRo=r(iAe," \u2014 "),ZN=n(iAe,"A",{href:!0});var jrt=s(ZN);QRo=r(jrt,"ConvBertForQuestionAnswering"),jrt.forEach(t),HRo=r(iAe," (ConvBERT model)"),iAe.forEach(t),URo=i(P),v5=n(P,"LI",{});var dAe=s(v5);Mle=n(dAe,"STRONG",{});var Nrt=s(Mle);JRo=r(Nrt,"data2vec-text"),Nrt.forEach(t),YRo=r(dAe," \u2014 "),eD=n(dAe,"A",{href:!0});var Drt=s(eD);KRo=r(Drt,"Data2VecTextForQuestionAnswering"),Drt.forEach(t),ZRo=r(dAe," (Data2VecText model)"),dAe.forEach(t),eSo=i(P),T5=n(P,"LI",{});var cAe=s(T5);Ele=n(cAe,"STRONG",{});var qrt=s(Ele);oSo=r(qrt,"deberta"),qrt.forEach(t),rSo=r(cAe," \u2014 "),oD=n(cAe,"A",{href:!0});var Grt=s(oD);tSo=r(Grt,"DebertaForQuestionAnswering"),Grt.forEach(t),aSo=r(cAe," (DeBERTa model)"),cAe.forEach(t),nSo=i(P),F5=n(P,"LI",{});var fAe=s(F5);yle=n(fAe,"STRONG",{});var Ort=s(yle);sSo=r(Ort,"deberta-v2"),Ort.forEach(t),lSo=r(fAe," \u2014 "),rD=n(fAe,"A",{href:!0});var Xrt=s(rD);iSo=r(Xrt,"DebertaV2ForQuestionAnswering"),Xrt.forEach(t),dSo=r(fAe," (DeBERTa-v2 model)"),fAe.forEach(t),cSo=i(P),C5=n(P,"LI",{});var mAe=s(C5);wle=n(mAe,"STRONG",{});var Vrt=s(wle);fSo=r(Vrt,"distilbert"),Vrt.forEach(t),mSo=r(mAe," \u2014 "),tD=n(mAe,"A",{href:!0});var zrt=s(tD);gSo=r(zrt,"DistilBertForQuestionAnswering"),zrt.forEach(t),hSo=r(mAe," (DistilBERT model)"),mAe.forEach(t),pSo=i(P),M5=n(P,"LI",{});var gAe=s(M5);Ale=n(gAe,"STRONG",{});var Wrt=s(Ale);_So=r(Wrt,"electra"),Wrt.forEach(t),uSo=r(gAe," \u2014 "),aD=n(gAe,"A",{href:!0});var Qrt=s(aD);bSo=r(Qrt,"ElectraForQuestionAnswering"),Qrt.forEach(t),vSo=r(gAe," (ELECTRA model)"),gAe.forEach(t),TSo=i(P),E5=n(P,"LI",{});var hAe=s(E5);Lle=n(hAe,"STRONG",{});var Hrt=s(Lle);FSo=r(Hrt,"flaubert"),Hrt.forEach(t),CSo=r(hAe," \u2014 "),nD=n(hAe,"A",{href:!0});var Urt=s(nD);MSo=r(Urt,"FlaubertForQuestionAnsweringSimple"),Urt.forEach(t),ESo=r(hAe," (FlauBERT model)"),hAe.forEach(t),ySo=i(P),y5=n(P,"LI",{});var pAe=s(y5);Ble=n(pAe,"STRONG",{});var Jrt=s(Ble);wSo=r(Jrt,"fnet"),Jrt.forEach(t),ASo=r(pAe," \u2014 "),sD=n(pAe,"A",{href:!0});var Yrt=s(sD);LSo=r(Yrt,"FNetForQuestionAnswering"),Yrt.forEach(t),BSo=r(pAe," (FNet model)"),pAe.forEach(t),xSo=i(P),w5=n(P,"LI",{});var _Ae=s(w5);xle=n(_Ae,"STRONG",{});var Krt=s(xle);kSo=r(Krt,"funnel"),Krt.forEach(t),RSo=r(_Ae," \u2014 "),lD=n(_Ae,"A",{href:!0});var Zrt=s(lD);SSo=r(Zrt,"FunnelForQuestionAnswering"),Zrt.forEach(t),PSo=r(_Ae," (Funnel Transformer model)"),_Ae.forEach(t),$So=i(P),A5=n(P,"LI",{});var uAe=s(A5);kle=n(uAe,"STRONG",{});var ett=s(kle);ISo=r(ett,"gptj"),ett.forEach(t),jSo=r(uAe," \u2014 "),iD=n(uAe,"A",{href:!0});var ott=s(iD);NSo=r(ott,"GPTJForQuestionAnswering"),ott.forEach(t),DSo=r(uAe," (GPT-J model)"),uAe.forEach(t),qSo=i(P),L5=n(P,"LI",{});var bAe=s(L5);Rle=n(bAe,"STRONG",{});var rtt=s(Rle);GSo=r(rtt,"ibert"),rtt.forEach(t),OSo=r(bAe," \u2014 "),dD=n(bAe,"A",{href:!0});var ttt=s(dD);XSo=r(ttt,"IBertForQuestionAnswering"),ttt.forEach(t),VSo=r(bAe," (I-BERT model)"),bAe.forEach(t),zSo=i(P),B5=n(P,"LI",{});var vAe=s(B5);Sle=n(vAe,"STRONG",{});var att=s(Sle);WSo=r(att,"layoutlmv2"),att.forEach(t),QSo=r(vAe," \u2014 "),cD=n(vAe,"A",{href:!0});var ntt=s(cD);HSo=r(ntt,"LayoutLMv2ForQuestionAnswering"),ntt.forEach(t),USo=r(vAe," (LayoutLMv2 model)"),vAe.forEach(t),JSo=i(P),x5=n(P,"LI",{});var TAe=s(x5);Ple=n(TAe,"STRONG",{});var stt=s(Ple);YSo=r(stt,"led"),stt.forEach(t),KSo=r(TAe," \u2014 "),fD=n(TAe,"A",{href:!0});var ltt=s(fD);ZSo=r(ltt,"LEDForQuestionAnswering"),ltt.forEach(t),ePo=r(TAe," (LED model)"),TAe.forEach(t),oPo=i(P),k5=n(P,"LI",{});var FAe=s(k5);$le=n(FAe,"STRONG",{});var itt=s($le);rPo=r(itt,"longformer"),itt.forEach(t),tPo=r(FAe," \u2014 "),mD=n(FAe,"A",{href:!0});var dtt=s(mD);aPo=r(dtt,"LongformerForQuestionAnswering"),dtt.forEach(t),nPo=r(FAe," (Longformer model)"),FAe.forEach(t),sPo=i(P),R5=n(P,"LI",{});var CAe=s(R5);Ile=n(CAe,"STRONG",{});var ctt=s(Ile);lPo=r(ctt,"lxmert"),ctt.forEach(t),iPo=r(CAe," \u2014 "),gD=n(CAe,"A",{href:!0});var ftt=s(gD);dPo=r(ftt,"LxmertForQuestionAnswering"),ftt.forEach(t),cPo=r(CAe," (LXMERT model)"),CAe.forEach(t),fPo=i(P),S5=n(P,"LI",{});var MAe=s(S5);jle=n(MAe,"STRONG",{});var mtt=s(jle);mPo=r(mtt,"mbart"),mtt.forEach(t),gPo=r(MAe," \u2014 "),hD=n(MAe,"A",{href:!0});var gtt=s(hD);hPo=r(gtt,"MBartForQuestionAnswering"),gtt.forEach(t),pPo=r(MAe," (mBART model)"),MAe.forEach(t),_Po=i(P),P5=n(P,"LI",{});var EAe=s(P5);Nle=n(EAe,"STRONG",{});var htt=s(Nle);uPo=r(htt,"megatron-bert"),htt.forEach(t),bPo=r(EAe," \u2014 "),pD=n(EAe,"A",{href:!0});var ptt=s(pD);vPo=r(ptt,"MegatronBertForQuestionAnswering"),ptt.forEach(t),TPo=r(EAe," (MegatronBert model)"),EAe.forEach(t),FPo=i(P),$5=n(P,"LI",{});var yAe=s($5);Dle=n(yAe,"STRONG",{});var _tt=s(Dle);CPo=r(_tt,"mobilebert"),_tt.forEach(t),MPo=r(yAe," \u2014 "),_D=n(yAe,"A",{href:!0});var utt=s(_D);EPo=r(utt,"MobileBertForQuestionAnswering"),utt.forEach(t),yPo=r(yAe," (MobileBERT model)"),yAe.forEach(t),wPo=i(P),I5=n(P,"LI",{});var wAe=s(I5);qle=n(wAe,"STRONG",{});var btt=s(qle);APo=r(btt,"mpnet"),btt.forEach(t),LPo=r(wAe," \u2014 "),uD=n(wAe,"A",{href:!0});var vtt=s(uD);BPo=r(vtt,"MPNetForQuestionAnswering"),vtt.forEach(t),xPo=r(wAe," (MPNet model)"),wAe.forEach(t),kPo=i(P),j5=n(P,"LI",{});var AAe=s(j5);Gle=n(AAe,"STRONG",{});var Ttt=s(Gle);RPo=r(Ttt,"nystromformer"),Ttt.forEach(t),SPo=r(AAe," \u2014 "),bD=n(AAe,"A",{href:!0});var Ftt=s(bD);PPo=r(Ftt,"NystromformerForQuestionAnswering"),Ftt.forEach(t),$Po=r(AAe," (Nystromformer model)"),AAe.forEach(t),IPo=i(P),N5=n(P,"LI",{});var LAe=s(N5);Ole=n(LAe,"STRONG",{});var Ctt=s(Ole);jPo=r(Ctt,"qdqbert"),Ctt.forEach(t),NPo=r(LAe," \u2014 "),vD=n(LAe,"A",{href:!0});var Mtt=s(vD);DPo=r(Mtt,"QDQBertForQuestionAnswering"),Mtt.forEach(t),qPo=r(LAe," (QDQBert model)"),LAe.forEach(t),GPo=i(P),D5=n(P,"LI",{});var BAe=s(D5);Xle=n(BAe,"STRONG",{});var Ett=s(Xle);OPo=r(Ett,"reformer"),Ett.forEach(t),XPo=r(BAe," \u2014 "),TD=n(BAe,"A",{href:!0});var ytt=s(TD);VPo=r(ytt,"ReformerForQuestionAnswering"),ytt.forEach(t),zPo=r(BAe," (Reformer model)"),BAe.forEach(t),WPo=i(P),q5=n(P,"LI",{});var xAe=s(q5);Vle=n(xAe,"STRONG",{});var wtt=s(Vle);QPo=r(wtt,"rembert"),wtt.forEach(t),HPo=r(xAe," \u2014 "),FD=n(xAe,"A",{href:!0});var Att=s(FD);UPo=r(Att,"RemBertForQuestionAnswering"),Att.forEach(t),JPo=r(xAe," (RemBERT model)"),xAe.forEach(t),YPo=i(P),G5=n(P,"LI",{});var kAe=s(G5);zle=n(kAe,"STRONG",{});var Ltt=s(zle);KPo=r(Ltt,"roberta"),Ltt.forEach(t),ZPo=r(kAe," \u2014 "),CD=n(kAe,"A",{href:!0});var Btt=s(CD);e$o=r(Btt,"RobertaForQuestionAnswering"),Btt.forEach(t),o$o=r(kAe," (RoBERTa model)"),kAe.forEach(t),r$o=i(P),O5=n(P,"LI",{});var RAe=s(O5);Wle=n(RAe,"STRONG",{});var xtt=s(Wle);t$o=r(xtt,"roformer"),xtt.forEach(t),a$o=r(RAe," \u2014 "),MD=n(RAe,"A",{href:!0});var ktt=s(MD);n$o=r(ktt,"RoFormerForQuestionAnswering"),ktt.forEach(t),s$o=r(RAe," (RoFormer model)"),RAe.forEach(t),l$o=i(P),X5=n(P,"LI",{});var SAe=s(X5);Qle=n(SAe,"STRONG",{});var Rtt=s(Qle);i$o=r(Rtt,"splinter"),Rtt.forEach(t),d$o=r(SAe," \u2014 "),ED=n(SAe,"A",{href:!0});var Stt=s(ED);c$o=r(Stt,"SplinterForQuestionAnswering"),Stt.forEach(t),f$o=r(SAe," (Splinter model)"),SAe.forEach(t),m$o=i(P),V5=n(P,"LI",{});var PAe=s(V5);Hle=n(PAe,"STRONG",{});var Ptt=s(Hle);g$o=r(Ptt,"squeezebert"),Ptt.forEach(t),h$o=r(PAe," \u2014 "),yD=n(PAe,"A",{href:!0});var $tt=s(yD);p$o=r($tt,"SqueezeBertForQuestionAnswering"),$tt.forEach(t),_$o=r(PAe," (SqueezeBERT model)"),PAe.forEach(t),u$o=i(P),z5=n(P,"LI",{});var $Ae=s(z5);Ule=n($Ae,"STRONG",{});var Itt=s(Ule);b$o=r(Itt,"xlm"),Itt.forEach(t),v$o=r($Ae," \u2014 "),wD=n($Ae,"A",{href:!0});var jtt=s(wD);T$o=r(jtt,"XLMForQuestionAnsweringSimple"),jtt.forEach(t),F$o=r($Ae," (XLM model)"),$Ae.forEach(t),C$o=i(P),W5=n(P,"LI",{});var IAe=s(W5);Jle=n(IAe,"STRONG",{});var Ntt=s(Jle);M$o=r(Ntt,"xlm-roberta"),Ntt.forEach(t),E$o=r(IAe," \u2014 "),AD=n(IAe,"A",{href:!0});var Dtt=s(AD);y$o=r(Dtt,"XLMRobertaForQuestionAnswering"),Dtt.forEach(t),w$o=r(IAe," (XLM-RoBERTa model)"),IAe.forEach(t),A$o=i(P),Q5=n(P,"LI",{});var jAe=s(Q5);Yle=n(jAe,"STRONG",{});var qtt=s(Yle);L$o=r(qtt,"xlm-roberta-xl"),qtt.forEach(t),B$o=r(jAe," \u2014 "),LD=n(jAe,"A",{href:!0});var Gtt=s(LD);x$o=r(Gtt,"XLMRobertaXLForQuestionAnswering"),Gtt.forEach(t),k$o=r(jAe," (XLM-RoBERTa-XL model)"),jAe.forEach(t),R$o=i(P),H5=n(P,"LI",{});var NAe=s(H5);Kle=n(NAe,"STRONG",{});var Ott=s(Kle);S$o=r(Ott,"xlnet"),Ott.forEach(t),P$o=r(NAe," \u2014 "),BD=n(NAe,"A",{href:!0});var Xtt=s(BD);$$o=r(Xtt,"XLNetForQuestionAnsweringSimple"),Xtt.forEach(t),I$o=r(NAe," (XLNet model)"),NAe.forEach(t),j$o=i(P),U5=n(P,"LI",{});var DAe=s(U5);Zle=n(DAe,"STRONG",{});var Vtt=s(Zle);N$o=r(Vtt,"yoso"),Vtt.forEach(t),D$o=r(DAe," \u2014 "),xD=n(DAe,"A",{href:!0});var ztt=s(xD);q$o=r(ztt,"YosoForQuestionAnswering"),ztt.forEach(t),G$o=r(DAe," (YOSO model)"),DAe.forEach(t),P.forEach(t),O$o=i(Ut),J5=n(Ut,"P",{});var qAe=s(J5);X$o=r(qAe,"The model is set in evaluation mode by default using "),eie=n(qAe,"CODE",{});var Wtt=s(eie);V$o=r(Wtt,"model.eval()"),Wtt.forEach(t),z$o=r(qAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oie=n(qAe,"CODE",{});var Qtt=s(oie);W$o=r(Qtt,"model.train()"),Qtt.forEach(t),qAe.forEach(t),Q$o=i(Ut),rie=n(Ut,"P",{});var Htt=s(rie);H$o=r(Htt,"Examples:"),Htt.forEach(t),U$o=i(Ut),m(ay.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),Uke=i(c),wd=n(c,"H2",{class:!0});var aPe=s(wd);Y5=n(aPe,"A",{id:!0,class:!0,href:!0});var Utt=s(Y5);tie=n(Utt,"SPAN",{});var Jtt=s(tie);m(ny.$$.fragment,Jtt),Jtt.forEach(t),Utt.forEach(t),J$o=i(aPe),aie=n(aPe,"SPAN",{});var Ytt=s(aie);Y$o=r(Ytt,"AutoModelForTableQuestionAnswering"),Ytt.forEach(t),aPe.forEach(t),Jke=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(sy.$$.fragment,gl),K$o=i(gl),Ad=n(gl,"P",{});var MW=s(Ad);Z$o=r(MW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nie=n(MW,"CODE",{});var Ktt=s(nie);eIo=r(Ktt,"from_pretrained()"),Ktt.forEach(t),oIo=r(MW,"class method or the "),sie=n(MW,"CODE",{});var Ztt=s(sie);rIo=r(Ztt,"from_config()"),Ztt.forEach(t),tIo=r(MW,`class
method.`),MW.forEach(t),aIo=i(gl),ly=n(gl,"P",{});var nPe=s(ly);nIo=r(nPe,"This class cannot be instantiated directly using "),lie=n(nPe,"CODE",{});var eat=s(lie);sIo=r(eat,"__init__()"),eat.forEach(t),lIo=r(nPe," (throws an error)."),nPe.forEach(t),iIo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(iy.$$.fragment,hl),dIo=i(hl),iie=n(hl,"P",{});var oat=s(iie);cIo=r(oat,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),oat.forEach(t),fIo=i(hl),Ld=n(hl,"P",{});var EW=s(Ld);mIo=r(EW,`Note:
Loading a model from its configuration file does `),die=n(EW,"STRONG",{});var rat=s(die);gIo=r(rat,"not"),rat.forEach(t),hIo=r(EW,` load the model weights. It only affects the
model\u2019s configuration. Use `),cie=n(EW,"CODE",{});var tat=s(cie);pIo=r(tat,"from_pretrained()"),tat.forEach(t),_Io=r(EW,"to load the model weights."),EW.forEach(t),uIo=i(hl),fie=n(hl,"P",{});var aat=s(fie);bIo=r(aat,"Examples:"),aat.forEach(t),vIo=i(hl),m(dy.$$.fragment,hl),hl.forEach(t),TIo=i(gl),Qe=n(gl,"DIV",{class:!0});var Jt=s(Qe);m(cy.$$.fragment,Jt),FIo=i(Jt),mie=n(Jt,"P",{});var nat=s(mie);CIo=r(nat,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),nat.forEach(t),MIo=i(Jt),en=n(Jt,"P",{});var MM=s(en);EIo=r(MM,"The model class to instantiate is selected based on the "),gie=n(MM,"CODE",{});var sat=s(gie);yIo=r(sat,"model_type"),sat.forEach(t),wIo=r(MM,` property of the config object (either
passed as an argument or loaded from `),hie=n(MM,"CODE",{});var lat=s(hie);AIo=r(lat,"pretrained_model_name_or_path"),lat.forEach(t),LIo=r(MM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pie=n(MM,"CODE",{});var iat=s(pie);BIo=r(iat,"pretrained_model_name_or_path"),iat.forEach(t),xIo=r(MM,":"),MM.forEach(t),kIo=i(Jt),_ie=n(Jt,"UL",{});var dat=s(_ie);K5=n(dat,"LI",{});var GAe=s(K5);uie=n(GAe,"STRONG",{});var cat=s(uie);RIo=r(cat,"tapas"),cat.forEach(t),SIo=r(GAe," \u2014 "),kD=n(GAe,"A",{href:!0});var fat=s(kD);PIo=r(fat,"TapasForQuestionAnswering"),fat.forEach(t),$Io=r(GAe," (TAPAS model)"),GAe.forEach(t),dat.forEach(t),IIo=i(Jt),Z5=n(Jt,"P",{});var OAe=s(Z5);jIo=r(OAe,"The model is set in evaluation mode by default using "),bie=n(OAe,"CODE",{});var mat=s(bie);NIo=r(mat,"model.eval()"),mat.forEach(t),DIo=r(OAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vie=n(OAe,"CODE",{});var gat=s(vie);qIo=r(gat,"model.train()"),gat.forEach(t),OAe.forEach(t),GIo=i(Jt),Tie=n(Jt,"P",{});var hat=s(Tie);OIo=r(hat,"Examples:"),hat.forEach(t),XIo=i(Jt),m(fy.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),Yke=i(c),Bd=n(c,"H2",{class:!0});var sPe=s(Bd);e2=n(sPe,"A",{id:!0,class:!0,href:!0});var pat=s(e2);Fie=n(pat,"SPAN",{});var _at=s(Fie);m(my.$$.fragment,_at),_at.forEach(t),pat.forEach(t),VIo=i(sPe),Cie=n(sPe,"SPAN",{});var uat=s(Cie);zIo=r(uat,"AutoModelForImageClassification"),uat.forEach(t),sPe.forEach(t),Kke=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(gy.$$.fragment,pl),WIo=i(pl),xd=n(pl,"P",{});var yW=s(xd);QIo=r(yW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Mie=n(yW,"CODE",{});var bat=s(Mie);HIo=r(bat,"from_pretrained()"),bat.forEach(t),UIo=r(yW,"class method or the "),Eie=n(yW,"CODE",{});var vat=s(Eie);JIo=r(vat,"from_config()"),vat.forEach(t),YIo=r(yW,`class
method.`),yW.forEach(t),KIo=i(pl),hy=n(pl,"P",{});var lPe=s(hy);ZIo=r(lPe,"This class cannot be instantiated directly using "),yie=n(lPe,"CODE",{});var Tat=s(yie);ejo=r(Tat,"__init__()"),Tat.forEach(t),ojo=r(lPe," (throws an error)."),lPe.forEach(t),rjo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(py.$$.fragment,_l),tjo=i(_l),wie=n(_l,"P",{});var Fat=s(wie);ajo=r(Fat,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Fat.forEach(t),njo=i(_l),kd=n(_l,"P",{});var wW=s(kd);sjo=r(wW,`Note:
Loading a model from its configuration file does `),Aie=n(wW,"STRONG",{});var Cat=s(Aie);ljo=r(Cat,"not"),Cat.forEach(t),ijo=r(wW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lie=n(wW,"CODE",{});var Mat=s(Lie);djo=r(Mat,"from_pretrained()"),Mat.forEach(t),cjo=r(wW,"to load the model weights."),wW.forEach(t),fjo=i(_l),Bie=n(_l,"P",{});var Eat=s(Bie);mjo=r(Eat,"Examples:"),Eat.forEach(t),gjo=i(_l),m(_y.$$.fragment,_l),_l.forEach(t),hjo=i(pl),He=n(pl,"DIV",{class:!0});var Yt=s(He);m(uy.$$.fragment,Yt),pjo=i(Yt),xie=n(Yt,"P",{});var yat=s(xie);_jo=r(yat,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),yat.forEach(t),ujo=i(Yt),on=n(Yt,"P",{});var EM=s(on);bjo=r(EM,"The model class to instantiate is selected based on the "),kie=n(EM,"CODE",{});var wat=s(kie);vjo=r(wat,"model_type"),wat.forEach(t),Tjo=r(EM,` property of the config object (either
passed as an argument or loaded from `),Rie=n(EM,"CODE",{});var Aat=s(Rie);Fjo=r(Aat,"pretrained_model_name_or_path"),Aat.forEach(t),Cjo=r(EM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sie=n(EM,"CODE",{});var Lat=s(Sie);Mjo=r(Lat,"pretrained_model_name_or_path"),Lat.forEach(t),Ejo=r(EM,":"),EM.forEach(t),yjo=i(Yt),ge=n(Yt,"UL",{});var Fe=s(ge);o2=n(Fe,"LI",{});var XAe=s(o2);Pie=n(XAe,"STRONG",{});var Bat=s(Pie);wjo=r(Bat,"beit"),Bat.forEach(t),Ajo=r(XAe," \u2014 "),RD=n(XAe,"A",{href:!0});var xat=s(RD);Ljo=r(xat,"BeitForImageClassification"),xat.forEach(t),Bjo=r(XAe," (BEiT model)"),XAe.forEach(t),xjo=i(Fe),r2=n(Fe,"LI",{});var VAe=s(r2);$ie=n(VAe,"STRONG",{});var kat=s($ie);kjo=r(kat,"convnext"),kat.forEach(t),Rjo=r(VAe," \u2014 "),SD=n(VAe,"A",{href:!0});var Rat=s(SD);Sjo=r(Rat,"ConvNextForImageClassification"),Rat.forEach(t),Pjo=r(VAe," (ConvNext model)"),VAe.forEach(t),$jo=i(Fe),qs=n(Fe,"LI",{});var e9=s(qs);Iie=n(e9,"STRONG",{});var Sat=s(Iie);Ijo=r(Sat,"deit"),Sat.forEach(t),jjo=r(e9," \u2014 "),PD=n(e9,"A",{href:!0});var Pat=s(PD);Njo=r(Pat,"DeiTForImageClassification"),Pat.forEach(t),Djo=r(e9," or "),$D=n(e9,"A",{href:!0});var $at=s($D);qjo=r($at,"DeiTForImageClassificationWithTeacher"),$at.forEach(t),Gjo=r(e9," (DeiT model)"),e9.forEach(t),Ojo=i(Fe),t2=n(Fe,"LI",{});var zAe=s(t2);jie=n(zAe,"STRONG",{});var Iat=s(jie);Xjo=r(Iat,"imagegpt"),Iat.forEach(t),Vjo=r(zAe," \u2014 "),ID=n(zAe,"A",{href:!0});var jat=s(ID);zjo=r(jat,"ImageGPTForImageClassification"),jat.forEach(t),Wjo=r(zAe," (ImageGPT model)"),zAe.forEach(t),Qjo=i(Fe),ma=n(Fe,"LI",{});var Pf=s(ma);Nie=n(Pf,"STRONG",{});var Nat=s(Nie);Hjo=r(Nat,"perceiver"),Nat.forEach(t),Ujo=r(Pf," \u2014 "),jD=n(Pf,"A",{href:!0});var Dat=s(jD);Jjo=r(Dat,"PerceiverForImageClassificationLearned"),Dat.forEach(t),Yjo=r(Pf," or "),ND=n(Pf,"A",{href:!0});var qat=s(ND);Kjo=r(qat,"PerceiverForImageClassificationFourier"),qat.forEach(t),Zjo=r(Pf," or "),DD=n(Pf,"A",{href:!0});var Gat=s(DD);eNo=r(Gat,"PerceiverForImageClassificationConvProcessing"),Gat.forEach(t),oNo=r(Pf," (Perceiver model)"),Pf.forEach(t),rNo=i(Fe),a2=n(Fe,"LI",{});var WAe=s(a2);Die=n(WAe,"STRONG",{});var Oat=s(Die);tNo=r(Oat,"poolformer"),Oat.forEach(t),aNo=r(WAe," \u2014 "),qD=n(WAe,"A",{href:!0});var Xat=s(qD);nNo=r(Xat,"PoolFormerForImageClassification"),Xat.forEach(t),sNo=r(WAe," (PoolFormer model)"),WAe.forEach(t),lNo=i(Fe),n2=n(Fe,"LI",{});var QAe=s(n2);qie=n(QAe,"STRONG",{});var Vat=s(qie);iNo=r(Vat,"resnet"),Vat.forEach(t),dNo=r(QAe," \u2014 "),GD=n(QAe,"A",{href:!0});var zat=s(GD);cNo=r(zat,"ResNetForImageClassification"),zat.forEach(t),fNo=r(QAe," (ResNet model)"),QAe.forEach(t),mNo=i(Fe),s2=n(Fe,"LI",{});var HAe=s(s2);Gie=n(HAe,"STRONG",{});var Wat=s(Gie);gNo=r(Wat,"segformer"),Wat.forEach(t),hNo=r(HAe," \u2014 "),OD=n(HAe,"A",{href:!0});var Qat=s(OD);pNo=r(Qat,"SegformerForImageClassification"),Qat.forEach(t),_No=r(HAe," (SegFormer model)"),HAe.forEach(t),uNo=i(Fe),l2=n(Fe,"LI",{});var UAe=s(l2);Oie=n(UAe,"STRONG",{});var Hat=s(Oie);bNo=r(Hat,"swin"),Hat.forEach(t),vNo=r(UAe," \u2014 "),XD=n(UAe,"A",{href:!0});var Uat=s(XD);TNo=r(Uat,"SwinForImageClassification"),Uat.forEach(t),FNo=r(UAe," (Swin model)"),UAe.forEach(t),CNo=i(Fe),i2=n(Fe,"LI",{});var JAe=s(i2);Xie=n(JAe,"STRONG",{});var Jat=s(Xie);MNo=r(Jat,"van"),Jat.forEach(t),ENo=r(JAe," \u2014 "),VD=n(JAe,"A",{href:!0});var Yat=s(VD);yNo=r(Yat,"VanForImageClassification"),Yat.forEach(t),wNo=r(JAe," (VAN model)"),JAe.forEach(t),ANo=i(Fe),d2=n(Fe,"LI",{});var YAe=s(d2);Vie=n(YAe,"STRONG",{});var Kat=s(Vie);LNo=r(Kat,"vit"),Kat.forEach(t),BNo=r(YAe," \u2014 "),zD=n(YAe,"A",{href:!0});var Zat=s(zD);xNo=r(Zat,"ViTForImageClassification"),Zat.forEach(t),kNo=r(YAe," (ViT model)"),YAe.forEach(t),Fe.forEach(t),RNo=i(Yt),c2=n(Yt,"P",{});var KAe=s(c2);SNo=r(KAe,"The model is set in evaluation mode by default using "),zie=n(KAe,"CODE",{});var ent=s(zie);PNo=r(ent,"model.eval()"),ent.forEach(t),$No=r(KAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wie=n(KAe,"CODE",{});var ont=s(Wie);INo=r(ont,"model.train()"),ont.forEach(t),KAe.forEach(t),jNo=i(Yt),Qie=n(Yt,"P",{});var rnt=s(Qie);NNo=r(rnt,"Examples:"),rnt.forEach(t),DNo=i(Yt),m(by.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),Zke=i(c),Rd=n(c,"H2",{class:!0});var iPe=s(Rd);f2=n(iPe,"A",{id:!0,class:!0,href:!0});var tnt=s(f2);Hie=n(tnt,"SPAN",{});var ant=s(Hie);m(vy.$$.fragment,ant),ant.forEach(t),tnt.forEach(t),qNo=i(iPe),Uie=n(iPe,"SPAN",{});var nnt=s(Uie);GNo=r(nnt,"AutoModelForVision2Seq"),nnt.forEach(t),iPe.forEach(t),eRe=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(Ty.$$.fragment,ul),ONo=i(ul),Sd=n(ul,"P",{});var AW=s(Sd);XNo=r(AW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Jie=n(AW,"CODE",{});var snt=s(Jie);VNo=r(snt,"from_pretrained()"),snt.forEach(t),zNo=r(AW,"class method or the "),Yie=n(AW,"CODE",{});var lnt=s(Yie);WNo=r(lnt,"from_config()"),lnt.forEach(t),QNo=r(AW,`class
method.`),AW.forEach(t),HNo=i(ul),Fy=n(ul,"P",{});var dPe=s(Fy);UNo=r(dPe,"This class cannot be instantiated directly using "),Kie=n(dPe,"CODE",{});var int=s(Kie);JNo=r(int,"__init__()"),int.forEach(t),YNo=r(dPe," (throws an error)."),dPe.forEach(t),KNo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(Cy.$$.fragment,bl),ZNo=i(bl),Zie=n(bl,"P",{});var dnt=s(Zie);eDo=r(dnt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),dnt.forEach(t),oDo=i(bl),Pd=n(bl,"P",{});var LW=s(Pd);rDo=r(LW,`Note:
Loading a model from its configuration file does `),ede=n(LW,"STRONG",{});var cnt=s(ede);tDo=r(cnt,"not"),cnt.forEach(t),aDo=r(LW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ode=n(LW,"CODE",{});var fnt=s(ode);nDo=r(fnt,"from_pretrained()"),fnt.forEach(t),sDo=r(LW,"to load the model weights."),LW.forEach(t),lDo=i(bl),rde=n(bl,"P",{});var mnt=s(rde);iDo=r(mnt,"Examples:"),mnt.forEach(t),dDo=i(bl),m(My.$$.fragment,bl),bl.forEach(t),cDo=i(ul),Ue=n(ul,"DIV",{class:!0});var Kt=s(Ue);m(Ey.$$.fragment,Kt),fDo=i(Kt),tde=n(Kt,"P",{});var gnt=s(tde);mDo=r(gnt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gnt.forEach(t),gDo=i(Kt),rn=n(Kt,"P",{});var yM=s(rn);hDo=r(yM,"The model class to instantiate is selected based on the "),ade=n(yM,"CODE",{});var hnt=s(ade);pDo=r(hnt,"model_type"),hnt.forEach(t),_Do=r(yM,` property of the config object (either
passed as an argument or loaded from `),nde=n(yM,"CODE",{});var pnt=s(nde);uDo=r(pnt,"pretrained_model_name_or_path"),pnt.forEach(t),bDo=r(yM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sde=n(yM,"CODE",{});var _nt=s(sde);vDo=r(_nt,"pretrained_model_name_or_path"),_nt.forEach(t),TDo=r(yM,":"),yM.forEach(t),FDo=i(Kt),lde=n(Kt,"UL",{});var unt=s(lde);m2=n(unt,"LI",{});var ZAe=s(m2);ide=n(ZAe,"STRONG",{});var bnt=s(ide);CDo=r(bnt,"vision-encoder-decoder"),bnt.forEach(t),MDo=r(ZAe," \u2014 "),WD=n(ZAe,"A",{href:!0});var vnt=s(WD);EDo=r(vnt,"VisionEncoderDecoderModel"),vnt.forEach(t),yDo=r(ZAe," (Vision Encoder decoder model)"),ZAe.forEach(t),unt.forEach(t),wDo=i(Kt),g2=n(Kt,"P",{});var eLe=s(g2);ADo=r(eLe,"The model is set in evaluation mode by default using "),dde=n(eLe,"CODE",{});var Tnt=s(dde);LDo=r(Tnt,"model.eval()"),Tnt.forEach(t),BDo=r(eLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cde=n(eLe,"CODE",{});var Fnt=s(cde);xDo=r(Fnt,"model.train()"),Fnt.forEach(t),eLe.forEach(t),kDo=i(Kt),fde=n(Kt,"P",{});var Cnt=s(fde);RDo=r(Cnt,"Examples:"),Cnt.forEach(t),SDo=i(Kt),m(yy.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),oRe=i(c),$d=n(c,"H2",{class:!0});var cPe=s($d);h2=n(cPe,"A",{id:!0,class:!0,href:!0});var Mnt=s(h2);mde=n(Mnt,"SPAN",{});var Ent=s(mde);m(wy.$$.fragment,Ent),Ent.forEach(t),Mnt.forEach(t),PDo=i(cPe),gde=n(cPe,"SPAN",{});var ynt=s(gde);$Do=r(ynt,"AutoModelForAudioClassification"),ynt.forEach(t),cPe.forEach(t),rRe=i(c),dr=n(c,"DIV",{class:!0});var vl=s(dr);m(Ay.$$.fragment,vl),IDo=i(vl),Id=n(vl,"P",{});var BW=s(Id);jDo=r(BW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),hde=n(BW,"CODE",{});var wnt=s(hde);NDo=r(wnt,"from_pretrained()"),wnt.forEach(t),DDo=r(BW,"class method or the "),pde=n(BW,"CODE",{});var Ant=s(pde);qDo=r(Ant,"from_config()"),Ant.forEach(t),GDo=r(BW,`class
method.`),BW.forEach(t),ODo=i(vl),Ly=n(vl,"P",{});var fPe=s(Ly);XDo=r(fPe,"This class cannot be instantiated directly using "),_de=n(fPe,"CODE",{});var Lnt=s(_de);VDo=r(Lnt,"__init__()"),Lnt.forEach(t),zDo=r(fPe," (throws an error)."),fPe.forEach(t),WDo=i(vl),tt=n(vl,"DIV",{class:!0});var Tl=s(tt);m(By.$$.fragment,Tl),QDo=i(Tl),ude=n(Tl,"P",{});var Bnt=s(ude);HDo=r(Bnt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Bnt.forEach(t),UDo=i(Tl),jd=n(Tl,"P",{});var xW=s(jd);JDo=r(xW,`Note:
Loading a model from its configuration file does `),bde=n(xW,"STRONG",{});var xnt=s(bde);YDo=r(xnt,"not"),xnt.forEach(t),KDo=r(xW,` load the model weights. It only affects the
model\u2019s configuration. Use `),vde=n(xW,"CODE",{});var knt=s(vde);ZDo=r(knt,"from_pretrained()"),knt.forEach(t),eqo=r(xW,"to load the model weights."),xW.forEach(t),oqo=i(Tl),Tde=n(Tl,"P",{});var Rnt=s(Tde);rqo=r(Rnt,"Examples:"),Rnt.forEach(t),tqo=i(Tl),m(xy.$$.fragment,Tl),Tl.forEach(t),aqo=i(vl),Je=n(vl,"DIV",{class:!0});var Zt=s(Je);m(ky.$$.fragment,Zt),nqo=i(Zt),Fde=n(Zt,"P",{});var Snt=s(Fde);sqo=r(Snt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Snt.forEach(t),lqo=i(Zt),tn=n(Zt,"P",{});var wM=s(tn);iqo=r(wM,"The model class to instantiate is selected based on the "),Cde=n(wM,"CODE",{});var Pnt=s(Cde);dqo=r(Pnt,"model_type"),Pnt.forEach(t),cqo=r(wM,` property of the config object (either
passed as an argument or loaded from `),Mde=n(wM,"CODE",{});var $nt=s(Mde);fqo=r($nt,"pretrained_model_name_or_path"),$nt.forEach(t),mqo=r(wM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ede=n(wM,"CODE",{});var Int=s(Ede);gqo=r(Int,"pretrained_model_name_or_path"),Int.forEach(t),hqo=r(wM,":"),wM.forEach(t),pqo=i(Zt),ke=n(Zt,"UL",{});var qo=s(ke);p2=n(qo,"LI",{});var oLe=s(p2);yde=n(oLe,"STRONG",{});var jnt=s(yde);_qo=r(jnt,"data2vec-audio"),jnt.forEach(t),uqo=r(oLe," \u2014 "),QD=n(oLe,"A",{href:!0});var Nnt=s(QD);bqo=r(Nnt,"Data2VecAudioForSequenceClassification"),Nnt.forEach(t),vqo=r(oLe," (Data2VecAudio model)"),oLe.forEach(t),Tqo=i(qo),_2=n(qo,"LI",{});var rLe=s(_2);wde=n(rLe,"STRONG",{});var Dnt=s(wde);Fqo=r(Dnt,"hubert"),Dnt.forEach(t),Cqo=r(rLe," \u2014 "),HD=n(rLe,"A",{href:!0});var qnt=s(HD);Mqo=r(qnt,"HubertForSequenceClassification"),qnt.forEach(t),Eqo=r(rLe," (Hubert model)"),rLe.forEach(t),yqo=i(qo),u2=n(qo,"LI",{});var tLe=s(u2);Ade=n(tLe,"STRONG",{});var Gnt=s(Ade);wqo=r(Gnt,"sew"),Gnt.forEach(t),Aqo=r(tLe," \u2014 "),UD=n(tLe,"A",{href:!0});var Ont=s(UD);Lqo=r(Ont,"SEWForSequenceClassification"),Ont.forEach(t),Bqo=r(tLe," (SEW model)"),tLe.forEach(t),xqo=i(qo),b2=n(qo,"LI",{});var aLe=s(b2);Lde=n(aLe,"STRONG",{});var Xnt=s(Lde);kqo=r(Xnt,"sew-d"),Xnt.forEach(t),Rqo=r(aLe," \u2014 "),JD=n(aLe,"A",{href:!0});var Vnt=s(JD);Sqo=r(Vnt,"SEWDForSequenceClassification"),Vnt.forEach(t),Pqo=r(aLe," (SEW-D model)"),aLe.forEach(t),$qo=i(qo),v2=n(qo,"LI",{});var nLe=s(v2);Bde=n(nLe,"STRONG",{});var znt=s(Bde);Iqo=r(znt,"unispeech"),znt.forEach(t),jqo=r(nLe," \u2014 "),YD=n(nLe,"A",{href:!0});var Wnt=s(YD);Nqo=r(Wnt,"UniSpeechForSequenceClassification"),Wnt.forEach(t),Dqo=r(nLe," (UniSpeech model)"),nLe.forEach(t),qqo=i(qo),T2=n(qo,"LI",{});var sLe=s(T2);xde=n(sLe,"STRONG",{});var Qnt=s(xde);Gqo=r(Qnt,"unispeech-sat"),Qnt.forEach(t),Oqo=r(sLe," \u2014 "),KD=n(sLe,"A",{href:!0});var Hnt=s(KD);Xqo=r(Hnt,"UniSpeechSatForSequenceClassification"),Hnt.forEach(t),Vqo=r(sLe," (UniSpeechSat model)"),sLe.forEach(t),zqo=i(qo),F2=n(qo,"LI",{});var lLe=s(F2);kde=n(lLe,"STRONG",{});var Unt=s(kde);Wqo=r(Unt,"wav2vec2"),Unt.forEach(t),Qqo=r(lLe," \u2014 "),ZD=n(lLe,"A",{href:!0});var Jnt=s(ZD);Hqo=r(Jnt,"Wav2Vec2ForSequenceClassification"),Jnt.forEach(t),Uqo=r(lLe," (Wav2Vec2 model)"),lLe.forEach(t),Jqo=i(qo),C2=n(qo,"LI",{});var iLe=s(C2);Rde=n(iLe,"STRONG",{});var Ynt=s(Rde);Yqo=r(Ynt,"wavlm"),Ynt.forEach(t),Kqo=r(iLe," \u2014 "),eq=n(iLe,"A",{href:!0});var Knt=s(eq);Zqo=r(Knt,"WavLMForSequenceClassification"),Knt.forEach(t),eGo=r(iLe," (WavLM model)"),iLe.forEach(t),qo.forEach(t),oGo=i(Zt),M2=n(Zt,"P",{});var dLe=s(M2);rGo=r(dLe,"The model is set in evaluation mode by default using "),Sde=n(dLe,"CODE",{});var Znt=s(Sde);tGo=r(Znt,"model.eval()"),Znt.forEach(t),aGo=r(dLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=n(dLe,"CODE",{});var est=s(Pde);nGo=r(est,"model.train()"),est.forEach(t),dLe.forEach(t),sGo=i(Zt),$de=n(Zt,"P",{});var ost=s($de);lGo=r(ost,"Examples:"),ost.forEach(t),iGo=i(Zt),m(Ry.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),tRe=i(c),Nd=n(c,"H2",{class:!0});var mPe=s(Nd);E2=n(mPe,"A",{id:!0,class:!0,href:!0});var rst=s(E2);Ide=n(rst,"SPAN",{});var tst=s(Ide);m(Sy.$$.fragment,tst),tst.forEach(t),rst.forEach(t),dGo=i(mPe),jde=n(mPe,"SPAN",{});var ast=s(jde);cGo=r(ast,"AutoModelForAudioFrameClassification"),ast.forEach(t),mPe.forEach(t),aRe=i(c),cr=n(c,"DIV",{class:!0});var Fl=s(cr);m(Py.$$.fragment,Fl),fGo=i(Fl),Dd=n(Fl,"P",{});var kW=s(Dd);mGo=r(kW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Nde=n(kW,"CODE",{});var nst=s(Nde);gGo=r(nst,"from_pretrained()"),nst.forEach(t),hGo=r(kW,"class method or the "),Dde=n(kW,"CODE",{});var sst=s(Dde);pGo=r(sst,"from_config()"),sst.forEach(t),_Go=r(kW,`class
method.`),kW.forEach(t),uGo=i(Fl),$y=n(Fl,"P",{});var gPe=s($y);bGo=r(gPe,"This class cannot be instantiated directly using "),qde=n(gPe,"CODE",{});var lst=s(qde);vGo=r(lst,"__init__()"),lst.forEach(t),TGo=r(gPe," (throws an error)."),gPe.forEach(t),FGo=i(Fl),at=n(Fl,"DIV",{class:!0});var Cl=s(at);m(Iy.$$.fragment,Cl),CGo=i(Cl),Gde=n(Cl,"P",{});var ist=s(Gde);MGo=r(ist,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ist.forEach(t),EGo=i(Cl),qd=n(Cl,"P",{});var RW=s(qd);yGo=r(RW,`Note:
Loading a model from its configuration file does `),Ode=n(RW,"STRONG",{});var dst=s(Ode);wGo=r(dst,"not"),dst.forEach(t),AGo=r(RW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xde=n(RW,"CODE",{});var cst=s(Xde);LGo=r(cst,"from_pretrained()"),cst.forEach(t),BGo=r(RW,"to load the model weights."),RW.forEach(t),xGo=i(Cl),Vde=n(Cl,"P",{});var fst=s(Vde);kGo=r(fst,"Examples:"),fst.forEach(t),RGo=i(Cl),m(jy.$$.fragment,Cl),Cl.forEach(t),SGo=i(Fl),Ye=n(Fl,"DIV",{class:!0});var ea=s(Ye);m(Ny.$$.fragment,ea),PGo=i(ea),zde=n(ea,"P",{});var mst=s(zde);$Go=r(mst,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),mst.forEach(t),IGo=i(ea),an=n(ea,"P",{});var AM=s(an);jGo=r(AM,"The model class to instantiate is selected based on the "),Wde=n(AM,"CODE",{});var gst=s(Wde);NGo=r(gst,"model_type"),gst.forEach(t),DGo=r(AM,` property of the config object (either
passed as an argument or loaded from `),Qde=n(AM,"CODE",{});var hst=s(Qde);qGo=r(hst,"pretrained_model_name_or_path"),hst.forEach(t),GGo=r(AM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hde=n(AM,"CODE",{});var pst=s(Hde);OGo=r(pst,"pretrained_model_name_or_path"),pst.forEach(t),XGo=r(AM,":"),AM.forEach(t),VGo=i(ea),nn=n(ea,"UL",{});var LM=s(nn);y2=n(LM,"LI",{});var cLe=s(y2);Ude=n(cLe,"STRONG",{});var _st=s(Ude);zGo=r(_st,"data2vec-audio"),_st.forEach(t),WGo=r(cLe," \u2014 "),oq=n(cLe,"A",{href:!0});var ust=s(oq);QGo=r(ust,"Data2VecAudioForAudioFrameClassification"),ust.forEach(t),HGo=r(cLe," (Data2VecAudio model)"),cLe.forEach(t),UGo=i(LM),w2=n(LM,"LI",{});var fLe=s(w2);Jde=n(fLe,"STRONG",{});var bst=s(Jde);JGo=r(bst,"unispeech-sat"),bst.forEach(t),YGo=r(fLe," \u2014 "),rq=n(fLe,"A",{href:!0});var vst=s(rq);KGo=r(vst,"UniSpeechSatForAudioFrameClassification"),vst.forEach(t),ZGo=r(fLe," (UniSpeechSat model)"),fLe.forEach(t),eOo=i(LM),A2=n(LM,"LI",{});var mLe=s(A2);Yde=n(mLe,"STRONG",{});var Tst=s(Yde);oOo=r(Tst,"wav2vec2"),Tst.forEach(t),rOo=r(mLe," \u2014 "),tq=n(mLe,"A",{href:!0});var Fst=s(tq);tOo=r(Fst,"Wav2Vec2ForAudioFrameClassification"),Fst.forEach(t),aOo=r(mLe," (Wav2Vec2 model)"),mLe.forEach(t),nOo=i(LM),L2=n(LM,"LI",{});var gLe=s(L2);Kde=n(gLe,"STRONG",{});var Cst=s(Kde);sOo=r(Cst,"wavlm"),Cst.forEach(t),lOo=r(gLe," \u2014 "),aq=n(gLe,"A",{href:!0});var Mst=s(aq);iOo=r(Mst,"WavLMForAudioFrameClassification"),Mst.forEach(t),dOo=r(gLe," (WavLM model)"),gLe.forEach(t),LM.forEach(t),cOo=i(ea),B2=n(ea,"P",{});var hLe=s(B2);fOo=r(hLe,"The model is set in evaluation mode by default using "),Zde=n(hLe,"CODE",{});var Est=s(Zde);mOo=r(Est,"model.eval()"),Est.forEach(t),gOo=r(hLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ece=n(hLe,"CODE",{});var yst=s(ece);hOo=r(yst,"model.train()"),yst.forEach(t),hLe.forEach(t),pOo=i(ea),oce=n(ea,"P",{});var wst=s(oce);_Oo=r(wst,"Examples:"),wst.forEach(t),uOo=i(ea),m(Dy.$$.fragment,ea),ea.forEach(t),Fl.forEach(t),nRe=i(c),Gd=n(c,"H2",{class:!0});var hPe=s(Gd);x2=n(hPe,"A",{id:!0,class:!0,href:!0});var Ast=s(x2);rce=n(Ast,"SPAN",{});var Lst=s(rce);m(qy.$$.fragment,Lst),Lst.forEach(t),Ast.forEach(t),bOo=i(hPe),tce=n(hPe,"SPAN",{});var Bst=s(tce);vOo=r(Bst,"AutoModelForCTC"),Bst.forEach(t),hPe.forEach(t),sRe=i(c),fr=n(c,"DIV",{class:!0});var Ml=s(fr);m(Gy.$$.fragment,Ml),TOo=i(Ml),Od=n(Ml,"P",{});var SW=s(Od);FOo=r(SW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),ace=n(SW,"CODE",{});var xst=s(ace);COo=r(xst,"from_pretrained()"),xst.forEach(t),MOo=r(SW,"class method or the "),nce=n(SW,"CODE",{});var kst=s(nce);EOo=r(kst,"from_config()"),kst.forEach(t),yOo=r(SW,`class
method.`),SW.forEach(t),wOo=i(Ml),Oy=n(Ml,"P",{});var pPe=s(Oy);AOo=r(pPe,"This class cannot be instantiated directly using "),sce=n(pPe,"CODE",{});var Rst=s(sce);LOo=r(Rst,"__init__()"),Rst.forEach(t),BOo=r(pPe," (throws an error)."),pPe.forEach(t),xOo=i(Ml),nt=n(Ml,"DIV",{class:!0});var El=s(nt);m(Xy.$$.fragment,El),kOo=i(El),lce=n(El,"P",{});var Sst=s(lce);ROo=r(Sst,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Sst.forEach(t),SOo=i(El),Xd=n(El,"P",{});var PW=s(Xd);POo=r(PW,`Note:
Loading a model from its configuration file does `),ice=n(PW,"STRONG",{});var Pst=s(ice);$Oo=r(Pst,"not"),Pst.forEach(t),IOo=r(PW,` load the model weights. It only affects the
model\u2019s configuration. Use `),dce=n(PW,"CODE",{});var $st=s(dce);jOo=r($st,"from_pretrained()"),$st.forEach(t),NOo=r(PW,"to load the model weights."),PW.forEach(t),DOo=i(El),cce=n(El,"P",{});var Ist=s(cce);qOo=r(Ist,"Examples:"),Ist.forEach(t),GOo=i(El),m(Vy.$$.fragment,El),El.forEach(t),OOo=i(Ml),Ke=n(Ml,"DIV",{class:!0});var oa=s(Ke);m(zy.$$.fragment,oa),XOo=i(oa),fce=n(oa,"P",{});var jst=s(fce);VOo=r(jst,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),jst.forEach(t),zOo=i(oa),sn=n(oa,"P",{});var BM=s(sn);WOo=r(BM,"The model class to instantiate is selected based on the "),mce=n(BM,"CODE",{});var Nst=s(mce);QOo=r(Nst,"model_type"),Nst.forEach(t),HOo=r(BM,` property of the config object (either
passed as an argument or loaded from `),gce=n(BM,"CODE",{});var Dst=s(gce);UOo=r(Dst,"pretrained_model_name_or_path"),Dst.forEach(t),JOo=r(BM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hce=n(BM,"CODE",{});var qst=s(hce);YOo=r(qst,"pretrained_model_name_or_path"),qst.forEach(t),KOo=r(BM,":"),BM.forEach(t),ZOo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);k2=n(Go,"LI",{});var pLe=s(k2);pce=n(pLe,"STRONG",{});var Gst=s(pce);eXo=r(Gst,"data2vec-audio"),Gst.forEach(t),oXo=r(pLe," \u2014 "),nq=n(pLe,"A",{href:!0});var Ost=s(nq);rXo=r(Ost,"Data2VecAudioForCTC"),Ost.forEach(t),tXo=r(pLe," (Data2VecAudio model)"),pLe.forEach(t),aXo=i(Go),R2=n(Go,"LI",{});var _Le=s(R2);_ce=n(_Le,"STRONG",{});var Xst=s(_ce);nXo=r(Xst,"hubert"),Xst.forEach(t),sXo=r(_Le," \u2014 "),sq=n(_Le,"A",{href:!0});var Vst=s(sq);lXo=r(Vst,"HubertForCTC"),Vst.forEach(t),iXo=r(_Le," (Hubert model)"),_Le.forEach(t),dXo=i(Go),S2=n(Go,"LI",{});var uLe=s(S2);uce=n(uLe,"STRONG",{});var zst=s(uce);cXo=r(zst,"sew"),zst.forEach(t),fXo=r(uLe," \u2014 "),lq=n(uLe,"A",{href:!0});var Wst=s(lq);mXo=r(Wst,"SEWForCTC"),Wst.forEach(t),gXo=r(uLe," (SEW model)"),uLe.forEach(t),hXo=i(Go),P2=n(Go,"LI",{});var bLe=s(P2);bce=n(bLe,"STRONG",{});var Qst=s(bce);pXo=r(Qst,"sew-d"),Qst.forEach(t),_Xo=r(bLe," \u2014 "),iq=n(bLe,"A",{href:!0});var Hst=s(iq);uXo=r(Hst,"SEWDForCTC"),Hst.forEach(t),bXo=r(bLe," (SEW-D model)"),bLe.forEach(t),vXo=i(Go),$2=n(Go,"LI",{});var vLe=s($2);vce=n(vLe,"STRONG",{});var Ust=s(vce);TXo=r(Ust,"unispeech"),Ust.forEach(t),FXo=r(vLe," \u2014 "),dq=n(vLe,"A",{href:!0});var Jst=s(dq);CXo=r(Jst,"UniSpeechForCTC"),Jst.forEach(t),MXo=r(vLe," (UniSpeech model)"),vLe.forEach(t),EXo=i(Go),I2=n(Go,"LI",{});var TLe=s(I2);Tce=n(TLe,"STRONG",{});var Yst=s(Tce);yXo=r(Yst,"unispeech-sat"),Yst.forEach(t),wXo=r(TLe," \u2014 "),cq=n(TLe,"A",{href:!0});var Kst=s(cq);AXo=r(Kst,"UniSpeechSatForCTC"),Kst.forEach(t),LXo=r(TLe," (UniSpeechSat model)"),TLe.forEach(t),BXo=i(Go),j2=n(Go,"LI",{});var FLe=s(j2);Fce=n(FLe,"STRONG",{});var Zst=s(Fce);xXo=r(Zst,"wav2vec2"),Zst.forEach(t),kXo=r(FLe," \u2014 "),fq=n(FLe,"A",{href:!0});var elt=s(fq);RXo=r(elt,"Wav2Vec2ForCTC"),elt.forEach(t),SXo=r(FLe," (Wav2Vec2 model)"),FLe.forEach(t),PXo=i(Go),N2=n(Go,"LI",{});var CLe=s(N2);Cce=n(CLe,"STRONG",{});var olt=s(Cce);$Xo=r(olt,"wavlm"),olt.forEach(t),IXo=r(CLe," \u2014 "),mq=n(CLe,"A",{href:!0});var rlt=s(mq);jXo=r(rlt,"WavLMForCTC"),rlt.forEach(t),NXo=r(CLe," (WavLM model)"),CLe.forEach(t),Go.forEach(t),DXo=i(oa),D2=n(oa,"P",{});var MLe=s(D2);qXo=r(MLe,"The model is set in evaluation mode by default using "),Mce=n(MLe,"CODE",{});var tlt=s(Mce);GXo=r(tlt,"model.eval()"),tlt.forEach(t),OXo=r(MLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ece=n(MLe,"CODE",{});var alt=s(Ece);XXo=r(alt,"model.train()"),alt.forEach(t),MLe.forEach(t),VXo=i(oa),yce=n(oa,"P",{});var nlt=s(yce);zXo=r(nlt,"Examples:"),nlt.forEach(t),WXo=i(oa),m(Wy.$$.fragment,oa),oa.forEach(t),Ml.forEach(t),lRe=i(c),Vd=n(c,"H2",{class:!0});var _Pe=s(Vd);q2=n(_Pe,"A",{id:!0,class:!0,href:!0});var slt=s(q2);wce=n(slt,"SPAN",{});var llt=s(wce);m(Qy.$$.fragment,llt),llt.forEach(t),slt.forEach(t),QXo=i(_Pe),Ace=n(_Pe,"SPAN",{});var ilt=s(Ace);HXo=r(ilt,"AutoModelForSpeechSeq2Seq"),ilt.forEach(t),_Pe.forEach(t),iRe=i(c),mr=n(c,"DIV",{class:!0});var yl=s(mr);m(Hy.$$.fragment,yl),UXo=i(yl),zd=n(yl,"P",{});var $W=s(zd);JXo=r($W,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Lce=n($W,"CODE",{});var dlt=s(Lce);YXo=r(dlt,"from_pretrained()"),dlt.forEach(t),KXo=r($W,"class method or the "),Bce=n($W,"CODE",{});var clt=s(Bce);ZXo=r(clt,"from_config()"),clt.forEach(t),eVo=r($W,`class
method.`),$W.forEach(t),oVo=i(yl),Uy=n(yl,"P",{});var uPe=s(Uy);rVo=r(uPe,"This class cannot be instantiated directly using "),xce=n(uPe,"CODE",{});var flt=s(xce);tVo=r(flt,"__init__()"),flt.forEach(t),aVo=r(uPe," (throws an error)."),uPe.forEach(t),nVo=i(yl),st=n(yl,"DIV",{class:!0});var wl=s(st);m(Jy.$$.fragment,wl),sVo=i(wl),kce=n(wl,"P",{});var mlt=s(kce);lVo=r(mlt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),mlt.forEach(t),iVo=i(wl),Wd=n(wl,"P",{});var IW=s(Wd);dVo=r(IW,`Note:
Loading a model from its configuration file does `),Rce=n(IW,"STRONG",{});var glt=s(Rce);cVo=r(glt,"not"),glt.forEach(t),fVo=r(IW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sce=n(IW,"CODE",{});var hlt=s(Sce);mVo=r(hlt,"from_pretrained()"),hlt.forEach(t),gVo=r(IW,"to load the model weights."),IW.forEach(t),hVo=i(wl),Pce=n(wl,"P",{});var plt=s(Pce);pVo=r(plt,"Examples:"),plt.forEach(t),_Vo=i(wl),m(Yy.$$.fragment,wl),wl.forEach(t),uVo=i(yl),Ze=n(yl,"DIV",{class:!0});var ra=s(Ze);m(Ky.$$.fragment,ra),bVo=i(ra),$ce=n(ra,"P",{});var _lt=s($ce);vVo=r(_lt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_lt.forEach(t),TVo=i(ra),ln=n(ra,"P",{});var xM=s(ln);FVo=r(xM,"The model class to instantiate is selected based on the "),Ice=n(xM,"CODE",{});var ult=s(Ice);CVo=r(ult,"model_type"),ult.forEach(t),MVo=r(xM,` property of the config object (either
passed as an argument or loaded from `),jce=n(xM,"CODE",{});var blt=s(jce);EVo=r(blt,"pretrained_model_name_or_path"),blt.forEach(t),yVo=r(xM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nce=n(xM,"CODE",{});var vlt=s(Nce);wVo=r(vlt,"pretrained_model_name_or_path"),vlt.forEach(t),AVo=r(xM,":"),xM.forEach(t),LVo=i(ra),Zy=n(ra,"UL",{});var bPe=s(Zy);G2=n(bPe,"LI",{});var ELe=s(G2);Dce=n(ELe,"STRONG",{});var Tlt=s(Dce);BVo=r(Tlt,"speech-encoder-decoder"),Tlt.forEach(t),xVo=r(ELe," \u2014 "),gq=n(ELe,"A",{href:!0});var Flt=s(gq);kVo=r(Flt,"SpeechEncoderDecoderModel"),Flt.forEach(t),RVo=r(ELe," (Speech Encoder decoder model)"),ELe.forEach(t),SVo=i(bPe),O2=n(bPe,"LI",{});var yLe=s(O2);qce=n(yLe,"STRONG",{});var Clt=s(qce);PVo=r(Clt,"speech_to_text"),Clt.forEach(t),$Vo=r(yLe," \u2014 "),hq=n(yLe,"A",{href:!0});var Mlt=s(hq);IVo=r(Mlt,"Speech2TextForConditionalGeneration"),Mlt.forEach(t),jVo=r(yLe," (Speech2Text model)"),yLe.forEach(t),bPe.forEach(t),NVo=i(ra),X2=n(ra,"P",{});var wLe=s(X2);DVo=r(wLe,"The model is set in evaluation mode by default using "),Gce=n(wLe,"CODE",{});var Elt=s(Gce);qVo=r(Elt,"model.eval()"),Elt.forEach(t),GVo=r(wLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oce=n(wLe,"CODE",{});var ylt=s(Oce);OVo=r(ylt,"model.train()"),ylt.forEach(t),wLe.forEach(t),XVo=i(ra),Xce=n(ra,"P",{});var wlt=s(Xce);VVo=r(wlt,"Examples:"),wlt.forEach(t),zVo=i(ra),m(ew.$$.fragment,ra),ra.forEach(t),yl.forEach(t),dRe=i(c),Qd=n(c,"H2",{class:!0});var vPe=s(Qd);V2=n(vPe,"A",{id:!0,class:!0,href:!0});var Alt=s(V2);Vce=n(Alt,"SPAN",{});var Llt=s(Vce);m(ow.$$.fragment,Llt),Llt.forEach(t),Alt.forEach(t),WVo=i(vPe),zce=n(vPe,"SPAN",{});var Blt=s(zce);QVo=r(Blt,"AutoModelForAudioXVector"),Blt.forEach(t),vPe.forEach(t),cRe=i(c),gr=n(c,"DIV",{class:!0});var Al=s(gr);m(rw.$$.fragment,Al),HVo=i(Al),Hd=n(Al,"P",{});var jW=s(Hd);UVo=r(jW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Wce=n(jW,"CODE",{});var xlt=s(Wce);JVo=r(xlt,"from_pretrained()"),xlt.forEach(t),YVo=r(jW,"class method or the "),Qce=n(jW,"CODE",{});var klt=s(Qce);KVo=r(klt,"from_config()"),klt.forEach(t),ZVo=r(jW,`class
method.`),jW.forEach(t),ezo=i(Al),tw=n(Al,"P",{});var TPe=s(tw);ozo=r(TPe,"This class cannot be instantiated directly using "),Hce=n(TPe,"CODE",{});var Rlt=s(Hce);rzo=r(Rlt,"__init__()"),Rlt.forEach(t),tzo=r(TPe," (throws an error)."),TPe.forEach(t),azo=i(Al),lt=n(Al,"DIV",{class:!0});var Ll=s(lt);m(aw.$$.fragment,Ll),nzo=i(Ll),Uce=n(Ll,"P",{});var Slt=s(Uce);szo=r(Slt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Slt.forEach(t),lzo=i(Ll),Ud=n(Ll,"P",{});var NW=s(Ud);izo=r(NW,`Note:
Loading a model from its configuration file does `),Jce=n(NW,"STRONG",{});var Plt=s(Jce);dzo=r(Plt,"not"),Plt.forEach(t),czo=r(NW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yce=n(NW,"CODE",{});var $lt=s(Yce);fzo=r($lt,"from_pretrained()"),$lt.forEach(t),mzo=r(NW,"to load the model weights."),NW.forEach(t),gzo=i(Ll),Kce=n(Ll,"P",{});var Ilt=s(Kce);hzo=r(Ilt,"Examples:"),Ilt.forEach(t),pzo=i(Ll),m(nw.$$.fragment,Ll),Ll.forEach(t),_zo=i(Al),eo=n(Al,"DIV",{class:!0});var ta=s(eo);m(sw.$$.fragment,ta),uzo=i(ta),Zce=n(ta,"P",{});var jlt=s(Zce);bzo=r(jlt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),jlt.forEach(t),vzo=i(ta),dn=n(ta,"P",{});var kM=s(dn);Tzo=r(kM,"The model class to instantiate is selected based on the "),efe=n(kM,"CODE",{});var Nlt=s(efe);Fzo=r(Nlt,"model_type"),Nlt.forEach(t),Czo=r(kM,` property of the config object (either
passed as an argument or loaded from `),ofe=n(kM,"CODE",{});var Dlt=s(ofe);Mzo=r(Dlt,"pretrained_model_name_or_path"),Dlt.forEach(t),Ezo=r(kM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rfe=n(kM,"CODE",{});var qlt=s(rfe);yzo=r(qlt,"pretrained_model_name_or_path"),qlt.forEach(t),wzo=r(kM,":"),kM.forEach(t),Azo=i(ta),cn=n(ta,"UL",{});var RM=s(cn);z2=n(RM,"LI",{});var ALe=s(z2);tfe=n(ALe,"STRONG",{});var Glt=s(tfe);Lzo=r(Glt,"data2vec-audio"),Glt.forEach(t),Bzo=r(ALe," \u2014 "),pq=n(ALe,"A",{href:!0});var Olt=s(pq);xzo=r(Olt,"Data2VecAudioForXVector"),Olt.forEach(t),kzo=r(ALe," (Data2VecAudio model)"),ALe.forEach(t),Rzo=i(RM),W2=n(RM,"LI",{});var LLe=s(W2);afe=n(LLe,"STRONG",{});var Xlt=s(afe);Szo=r(Xlt,"unispeech-sat"),Xlt.forEach(t),Pzo=r(LLe," \u2014 "),_q=n(LLe,"A",{href:!0});var Vlt=s(_q);$zo=r(Vlt,"UniSpeechSatForXVector"),Vlt.forEach(t),Izo=r(LLe," (UniSpeechSat model)"),LLe.forEach(t),jzo=i(RM),Q2=n(RM,"LI",{});var BLe=s(Q2);nfe=n(BLe,"STRONG",{});var zlt=s(nfe);Nzo=r(zlt,"wav2vec2"),zlt.forEach(t),Dzo=r(BLe," \u2014 "),uq=n(BLe,"A",{href:!0});var Wlt=s(uq);qzo=r(Wlt,"Wav2Vec2ForXVector"),Wlt.forEach(t),Gzo=r(BLe," (Wav2Vec2 model)"),BLe.forEach(t),Ozo=i(RM),H2=n(RM,"LI",{});var xLe=s(H2);sfe=n(xLe,"STRONG",{});var Qlt=s(sfe);Xzo=r(Qlt,"wavlm"),Qlt.forEach(t),Vzo=r(xLe," \u2014 "),bq=n(xLe,"A",{href:!0});var Hlt=s(bq);zzo=r(Hlt,"WavLMForXVector"),Hlt.forEach(t),Wzo=r(xLe," (WavLM model)"),xLe.forEach(t),RM.forEach(t),Qzo=i(ta),U2=n(ta,"P",{});var kLe=s(U2);Hzo=r(kLe,"The model is set in evaluation mode by default using "),lfe=n(kLe,"CODE",{});var Ult=s(lfe);Uzo=r(Ult,"model.eval()"),Ult.forEach(t),Jzo=r(kLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ife=n(kLe,"CODE",{});var Jlt=s(ife);Yzo=r(Jlt,"model.train()"),Jlt.forEach(t),kLe.forEach(t),Kzo=i(ta),dfe=n(ta,"P",{});var Ylt=s(dfe);Zzo=r(Ylt,"Examples:"),Ylt.forEach(t),eWo=i(ta),m(lw.$$.fragment,ta),ta.forEach(t),Al.forEach(t),fRe=i(c),Jd=n(c,"H2",{class:!0});var FPe=s(Jd);J2=n(FPe,"A",{id:!0,class:!0,href:!0});var Klt=s(J2);cfe=n(Klt,"SPAN",{});var Zlt=s(cfe);m(iw.$$.fragment,Zlt),Zlt.forEach(t),Klt.forEach(t),oWo=i(FPe),ffe=n(FPe,"SPAN",{});var eit=s(ffe);rWo=r(eit,"AutoModelForMaskedImageModeling"),eit.forEach(t),FPe.forEach(t),mRe=i(c),hr=n(c,"DIV",{class:!0});var Bl=s(hr);m(dw.$$.fragment,Bl),tWo=i(Bl),Yd=n(Bl,"P",{});var DW=s(Yd);aWo=r(DW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),mfe=n(DW,"CODE",{});var oit=s(mfe);nWo=r(oit,"from_pretrained()"),oit.forEach(t),sWo=r(DW,"class method or the "),gfe=n(DW,"CODE",{});var rit=s(gfe);lWo=r(rit,"from_config()"),rit.forEach(t),iWo=r(DW,`class
method.`),DW.forEach(t),dWo=i(Bl),cw=n(Bl,"P",{});var CPe=s(cw);cWo=r(CPe,"This class cannot be instantiated directly using "),hfe=n(CPe,"CODE",{});var tit=s(hfe);fWo=r(tit,"__init__()"),tit.forEach(t),mWo=r(CPe," (throws an error)."),CPe.forEach(t),gWo=i(Bl),it=n(Bl,"DIV",{class:!0});var xl=s(it);m(fw.$$.fragment,xl),hWo=i(xl),pfe=n(xl,"P",{});var ait=s(pfe);pWo=r(ait,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),ait.forEach(t),_Wo=i(xl),Kd=n(xl,"P",{});var qW=s(Kd);uWo=r(qW,`Note:
Loading a model from its configuration file does `),_fe=n(qW,"STRONG",{});var nit=s(_fe);bWo=r(nit,"not"),nit.forEach(t),vWo=r(qW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ufe=n(qW,"CODE",{});var sit=s(ufe);TWo=r(sit,"from_pretrained()"),sit.forEach(t),FWo=r(qW,"to load the model weights."),qW.forEach(t),CWo=i(xl),bfe=n(xl,"P",{});var lit=s(bfe);MWo=r(lit,"Examples:"),lit.forEach(t),EWo=i(xl),m(mw.$$.fragment,xl),xl.forEach(t),yWo=i(Bl),oo=n(Bl,"DIV",{class:!0});var aa=s(oo);m(gw.$$.fragment,aa),wWo=i(aa),vfe=n(aa,"P",{});var iit=s(vfe);AWo=r(iit,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),iit.forEach(t),LWo=i(aa),fn=n(aa,"P",{});var SM=s(fn);BWo=r(SM,"The model class to instantiate is selected based on the "),Tfe=n(SM,"CODE",{});var dit=s(Tfe);xWo=r(dit,"model_type"),dit.forEach(t),kWo=r(SM,` property of the config object (either
passed as an argument or loaded from `),Ffe=n(SM,"CODE",{});var cit=s(Ffe);RWo=r(cit,"pretrained_model_name_or_path"),cit.forEach(t),SWo=r(SM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cfe=n(SM,"CODE",{});var fit=s(Cfe);PWo=r(fit,"pretrained_model_name_or_path"),fit.forEach(t),$Wo=r(SM,":"),SM.forEach(t),IWo=i(aa),Zd=n(aa,"UL",{});var GW=s(Zd);Y2=n(GW,"LI",{});var RLe=s(Y2);Mfe=n(RLe,"STRONG",{});var mit=s(Mfe);jWo=r(mit,"deit"),mit.forEach(t),NWo=r(RLe," \u2014 "),vq=n(RLe,"A",{href:!0});var git=s(vq);DWo=r(git,"DeiTForMaskedImageModeling"),git.forEach(t),qWo=r(RLe," (DeiT model)"),RLe.forEach(t),GWo=i(GW),K2=n(GW,"LI",{});var SLe=s(K2);Efe=n(SLe,"STRONG",{});var hit=s(Efe);OWo=r(hit,"swin"),hit.forEach(t),XWo=r(SLe," \u2014 "),Tq=n(SLe,"A",{href:!0});var pit=s(Tq);VWo=r(pit,"SwinForMaskedImageModeling"),pit.forEach(t),zWo=r(SLe," (Swin model)"),SLe.forEach(t),WWo=i(GW),Z2=n(GW,"LI",{});var PLe=s(Z2);yfe=n(PLe,"STRONG",{});var _it=s(yfe);QWo=r(_it,"vit"),_it.forEach(t),HWo=r(PLe," \u2014 "),Fq=n(PLe,"A",{href:!0});var uit=s(Fq);UWo=r(uit,"ViTForMaskedImageModeling"),uit.forEach(t),JWo=r(PLe," (ViT model)"),PLe.forEach(t),GW.forEach(t),YWo=i(aa),ev=n(aa,"P",{});var $Le=s(ev);KWo=r($Le,"The model is set in evaluation mode by default using "),wfe=n($Le,"CODE",{});var bit=s(wfe);ZWo=r(bit,"model.eval()"),bit.forEach(t),eQo=r($Le,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Afe=n($Le,"CODE",{});var vit=s(Afe);oQo=r(vit,"model.train()"),vit.forEach(t),$Le.forEach(t),rQo=i(aa),Lfe=n(aa,"P",{});var Tit=s(Lfe);tQo=r(Tit,"Examples:"),Tit.forEach(t),aQo=i(aa),m(hw.$$.fragment,aa),aa.forEach(t),Bl.forEach(t),gRe=i(c),ec=n(c,"H2",{class:!0});var MPe=s(ec);ov=n(MPe,"A",{id:!0,class:!0,href:!0});var Fit=s(ov);Bfe=n(Fit,"SPAN",{});var Cit=s(Bfe);m(pw.$$.fragment,Cit),Cit.forEach(t),Fit.forEach(t),nQo=i(MPe),xfe=n(MPe,"SPAN",{});var Mit=s(xfe);sQo=r(Mit,"AutoModelForObjectDetection"),Mit.forEach(t),MPe.forEach(t),hRe=i(c),pr=n(c,"DIV",{class:!0});var kl=s(pr);m(_w.$$.fragment,kl),lQo=i(kl),oc=n(kl,"P",{});var OW=s(oc);iQo=r(OW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),kfe=n(OW,"CODE",{});var Eit=s(kfe);dQo=r(Eit,"from_pretrained()"),Eit.forEach(t),cQo=r(OW,"class method or the "),Rfe=n(OW,"CODE",{});var yit=s(Rfe);fQo=r(yit,"from_config()"),yit.forEach(t),mQo=r(OW,`class
method.`),OW.forEach(t),gQo=i(kl),uw=n(kl,"P",{});var EPe=s(uw);hQo=r(EPe,"This class cannot be instantiated directly using "),Sfe=n(EPe,"CODE",{});var wit=s(Sfe);pQo=r(wit,"__init__()"),wit.forEach(t),_Qo=r(EPe," (throws an error)."),EPe.forEach(t),uQo=i(kl),dt=n(kl,"DIV",{class:!0});var Rl=s(dt);m(bw.$$.fragment,Rl),bQo=i(Rl),Pfe=n(Rl,"P",{});var Ait=s(Pfe);vQo=r(Ait,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Ait.forEach(t),TQo=i(Rl),rc=n(Rl,"P",{});var XW=s(rc);FQo=r(XW,`Note:
Loading a model from its configuration file does `),$fe=n(XW,"STRONG",{});var Lit=s($fe);CQo=r(Lit,"not"),Lit.forEach(t),MQo=r(XW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ife=n(XW,"CODE",{});var Bit=s(Ife);EQo=r(Bit,"from_pretrained()"),Bit.forEach(t),yQo=r(XW,"to load the model weights."),XW.forEach(t),wQo=i(Rl),jfe=n(Rl,"P",{});var xit=s(jfe);AQo=r(xit,"Examples:"),xit.forEach(t),LQo=i(Rl),m(vw.$$.fragment,Rl),Rl.forEach(t),BQo=i(kl),ro=n(kl,"DIV",{class:!0});var na=s(ro);m(Tw.$$.fragment,na),xQo=i(na),Nfe=n(na,"P",{});var kit=s(Nfe);kQo=r(kit,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),kit.forEach(t),RQo=i(na),mn=n(na,"P",{});var PM=s(mn);SQo=r(PM,"The model class to instantiate is selected based on the "),Dfe=n(PM,"CODE",{});var Rit=s(Dfe);PQo=r(Rit,"model_type"),Rit.forEach(t),$Qo=r(PM,` property of the config object (either
passed as an argument or loaded from `),qfe=n(PM,"CODE",{});var Sit=s(qfe);IQo=r(Sit,"pretrained_model_name_or_path"),Sit.forEach(t),jQo=r(PM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gfe=n(PM,"CODE",{});var Pit=s(Gfe);NQo=r(Pit,"pretrained_model_name_or_path"),Pit.forEach(t),DQo=r(PM,":"),PM.forEach(t),qQo=i(na),Ofe=n(na,"UL",{});var $it=s(Ofe);rv=n($it,"LI",{});var ILe=s(rv);Xfe=n(ILe,"STRONG",{});var Iit=s(Xfe);GQo=r(Iit,"detr"),Iit.forEach(t),OQo=r(ILe," \u2014 "),Cq=n(ILe,"A",{href:!0});var jit=s(Cq);XQo=r(jit,"DetrForObjectDetection"),jit.forEach(t),VQo=r(ILe," (DETR model)"),ILe.forEach(t),$it.forEach(t),zQo=i(na),tv=n(na,"P",{});var jLe=s(tv);WQo=r(jLe,"The model is set in evaluation mode by default using "),Vfe=n(jLe,"CODE",{});var Nit=s(Vfe);QQo=r(Nit,"model.eval()"),Nit.forEach(t),HQo=r(jLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zfe=n(jLe,"CODE",{});var Dit=s(zfe);UQo=r(Dit,"model.train()"),Dit.forEach(t),jLe.forEach(t),JQo=i(na),Wfe=n(na,"P",{});var qit=s(Wfe);YQo=r(qit,"Examples:"),qit.forEach(t),KQo=i(na),m(Fw.$$.fragment,na),na.forEach(t),kl.forEach(t),pRe=i(c),tc=n(c,"H2",{class:!0});var yPe=s(tc);av=n(yPe,"A",{id:!0,class:!0,href:!0});var Git=s(av);Qfe=n(Git,"SPAN",{});var Oit=s(Qfe);m(Cw.$$.fragment,Oit),Oit.forEach(t),Git.forEach(t),ZQo=i(yPe),Hfe=n(yPe,"SPAN",{});var Xit=s(Hfe);eHo=r(Xit,"AutoModelForImageSegmentation"),Xit.forEach(t),yPe.forEach(t),_Re=i(c),_r=n(c,"DIV",{class:!0});var Sl=s(_r);m(Mw.$$.fragment,Sl),oHo=i(Sl),ac=n(Sl,"P",{});var VW=s(ac);rHo=r(VW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Ufe=n(VW,"CODE",{});var Vit=s(Ufe);tHo=r(Vit,"from_pretrained()"),Vit.forEach(t),aHo=r(VW,"class method or the "),Jfe=n(VW,"CODE",{});var zit=s(Jfe);nHo=r(zit,"from_config()"),zit.forEach(t),sHo=r(VW,`class
method.`),VW.forEach(t),lHo=i(Sl),Ew=n(Sl,"P",{});var wPe=s(Ew);iHo=r(wPe,"This class cannot be instantiated directly using "),Yfe=n(wPe,"CODE",{});var Wit=s(Yfe);dHo=r(Wit,"__init__()"),Wit.forEach(t),cHo=r(wPe," (throws an error)."),wPe.forEach(t),fHo=i(Sl),ct=n(Sl,"DIV",{class:!0});var Pl=s(ct);m(yw.$$.fragment,Pl),mHo=i(Pl),Kfe=n(Pl,"P",{});var Qit=s(Kfe);gHo=r(Qit,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Qit.forEach(t),hHo=i(Pl),nc=n(Pl,"P",{});var zW=s(nc);pHo=r(zW,`Note:
Loading a model from its configuration file does `),Zfe=n(zW,"STRONG",{});var Hit=s(Zfe);_Ho=r(Hit,"not"),Hit.forEach(t),uHo=r(zW,` load the model weights. It only affects the
model\u2019s configuration. Use `),eme=n(zW,"CODE",{});var Uit=s(eme);bHo=r(Uit,"from_pretrained()"),Uit.forEach(t),vHo=r(zW,"to load the model weights."),zW.forEach(t),THo=i(Pl),ome=n(Pl,"P",{});var Jit=s(ome);FHo=r(Jit,"Examples:"),Jit.forEach(t),CHo=i(Pl),m(ww.$$.fragment,Pl),Pl.forEach(t),MHo=i(Sl),to=n(Sl,"DIV",{class:!0});var sa=s(to);m(Aw.$$.fragment,sa),EHo=i(sa),rme=n(sa,"P",{});var Yit=s(rme);yHo=r(Yit,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Yit.forEach(t),wHo=i(sa),gn=n(sa,"P",{});var $M=s(gn);AHo=r($M,"The model class to instantiate is selected based on the "),tme=n($M,"CODE",{});var Kit=s(tme);LHo=r(Kit,"model_type"),Kit.forEach(t),BHo=r($M,` property of the config object (either
passed as an argument or loaded from `),ame=n($M,"CODE",{});var Zit=s(ame);xHo=r(Zit,"pretrained_model_name_or_path"),Zit.forEach(t),kHo=r($M,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nme=n($M,"CODE",{});var edt=s(nme);RHo=r(edt,"pretrained_model_name_or_path"),edt.forEach(t),SHo=r($M,":"),$M.forEach(t),PHo=i(sa),sme=n(sa,"UL",{});var odt=s(sme);nv=n(odt,"LI",{});var NLe=s(nv);lme=n(NLe,"STRONG",{});var rdt=s(lme);$Ho=r(rdt,"detr"),rdt.forEach(t),IHo=r(NLe," \u2014 "),Mq=n(NLe,"A",{href:!0});var tdt=s(Mq);jHo=r(tdt,"DetrForSegmentation"),tdt.forEach(t),NHo=r(NLe," (DETR model)"),NLe.forEach(t),odt.forEach(t),DHo=i(sa),sv=n(sa,"P",{});var DLe=s(sv);qHo=r(DLe,"The model is set in evaluation mode by default using "),ime=n(DLe,"CODE",{});var adt=s(ime);GHo=r(adt,"model.eval()"),adt.forEach(t),OHo=r(DLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dme=n(DLe,"CODE",{});var ndt=s(dme);XHo=r(ndt,"model.train()"),ndt.forEach(t),DLe.forEach(t),VHo=i(sa),cme=n(sa,"P",{});var sdt=s(cme);zHo=r(sdt,"Examples:"),sdt.forEach(t),WHo=i(sa),m(Lw.$$.fragment,sa),sa.forEach(t),Sl.forEach(t),uRe=i(c),sc=n(c,"H2",{class:!0});var APe=s(sc);lv=n(APe,"A",{id:!0,class:!0,href:!0});var ldt=s(lv);fme=n(ldt,"SPAN",{});var idt=s(fme);m(Bw.$$.fragment,idt),idt.forEach(t),ldt.forEach(t),QHo=i(APe),mme=n(APe,"SPAN",{});var ddt=s(mme);HHo=r(ddt,"AutoModelForSemanticSegmentation"),ddt.forEach(t),APe.forEach(t),bRe=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(xw.$$.fragment,$l),UHo=i($l),lc=n($l,"P",{});var WW=s(lc);JHo=r(WW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),gme=n(WW,"CODE",{});var cdt=s(gme);YHo=r(cdt,"from_pretrained()"),cdt.forEach(t),KHo=r(WW,"class method or the "),hme=n(WW,"CODE",{});var fdt=s(hme);ZHo=r(fdt,"from_config()"),fdt.forEach(t),eUo=r(WW,`class
method.`),WW.forEach(t),oUo=i($l),kw=n($l,"P",{});var LPe=s(kw);rUo=r(LPe,"This class cannot be instantiated directly using "),pme=n(LPe,"CODE",{});var mdt=s(pme);tUo=r(mdt,"__init__()"),mdt.forEach(t),aUo=r(LPe," (throws an error)."),LPe.forEach(t),nUo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(Rw.$$.fragment,Il),sUo=i(Il),_me=n(Il,"P",{});var gdt=s(_me);lUo=r(gdt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),gdt.forEach(t),iUo=i(Il),ic=n(Il,"P",{});var QW=s(ic);dUo=r(QW,`Note:
Loading a model from its configuration file does `),ume=n(QW,"STRONG",{});var hdt=s(ume);cUo=r(hdt,"not"),hdt.forEach(t),fUo=r(QW,` load the model weights. It only affects the
model\u2019s configuration. Use `),bme=n(QW,"CODE",{});var pdt=s(bme);mUo=r(pdt,"from_pretrained()"),pdt.forEach(t),gUo=r(QW,"to load the model weights."),QW.forEach(t),hUo=i(Il),vme=n(Il,"P",{});var _dt=s(vme);pUo=r(_dt,"Examples:"),_dt.forEach(t),_Uo=i(Il),m(Sw.$$.fragment,Il),Il.forEach(t),uUo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);m(Pw.$$.fragment,la),bUo=i(la),Tme=n(la,"P",{});var udt=s(Tme);vUo=r(udt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),udt.forEach(t),TUo=i(la),hn=n(la,"P",{});var IM=s(hn);FUo=r(IM,"The model class to instantiate is selected based on the "),Fme=n(IM,"CODE",{});var bdt=s(Fme);CUo=r(bdt,"model_type"),bdt.forEach(t),MUo=r(IM,` property of the config object (either
passed as an argument or loaded from `),Cme=n(IM,"CODE",{});var vdt=s(Cme);EUo=r(vdt,"pretrained_model_name_or_path"),vdt.forEach(t),yUo=r(IM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mme=n(IM,"CODE",{});var Tdt=s(Mme);wUo=r(Tdt,"pretrained_model_name_or_path"),Tdt.forEach(t),AUo=r(IM,":"),IM.forEach(t),LUo=i(la),$w=n(la,"UL",{});var BPe=s($w);iv=n(BPe,"LI",{});var qLe=s(iv);Eme=n(qLe,"STRONG",{});var Fdt=s(Eme);BUo=r(Fdt,"beit"),Fdt.forEach(t),xUo=r(qLe," \u2014 "),Eq=n(qLe,"A",{href:!0});var Cdt=s(Eq);kUo=r(Cdt,"BeitForSemanticSegmentation"),Cdt.forEach(t),RUo=r(qLe," (BEiT model)"),qLe.forEach(t),SUo=i(BPe),dv=n(BPe,"LI",{});var GLe=s(dv);yme=n(GLe,"STRONG",{});var Mdt=s(yme);PUo=r(Mdt,"segformer"),Mdt.forEach(t),$Uo=r(GLe," \u2014 "),yq=n(GLe,"A",{href:!0});var Edt=s(yq);IUo=r(Edt,"SegformerForSemanticSegmentation"),Edt.forEach(t),jUo=r(GLe," (SegFormer model)"),GLe.forEach(t),BPe.forEach(t),NUo=i(la),cv=n(la,"P",{});var OLe=s(cv);DUo=r(OLe,"The model is set in evaluation mode by default using "),wme=n(OLe,"CODE",{});var ydt=s(wme);qUo=r(ydt,"model.eval()"),ydt.forEach(t),GUo=r(OLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ame=n(OLe,"CODE",{});var wdt=s(Ame);OUo=r(wdt,"model.train()"),wdt.forEach(t),OLe.forEach(t),XUo=i(la),Lme=n(la,"P",{});var Adt=s(Lme);VUo=r(Adt,"Examples:"),Adt.forEach(t),zUo=i(la),m(Iw.$$.fragment,la),la.forEach(t),$l.forEach(t),vRe=i(c),dc=n(c,"H2",{class:!0});var xPe=s(dc);fv=n(xPe,"A",{id:!0,class:!0,href:!0});var Ldt=s(fv);Bme=n(Ldt,"SPAN",{});var Bdt=s(Bme);m(jw.$$.fragment,Bdt),Bdt.forEach(t),Ldt.forEach(t),WUo=i(xPe),xme=n(xPe,"SPAN",{});var xdt=s(xme);QUo=r(xdt,"AutoModelForInstanceSegmentation"),xdt.forEach(t),xPe.forEach(t),TRe=i(c),br=n(c,"DIV",{class:!0});var jl=s(br);m(Nw.$$.fragment,jl),HUo=i(jl),cc=n(jl,"P",{});var HW=s(cc);UUo=r(HW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),kme=n(HW,"CODE",{});var kdt=s(kme);JUo=r(kdt,"from_pretrained()"),kdt.forEach(t),YUo=r(HW,"class method or the "),Rme=n(HW,"CODE",{});var Rdt=s(Rme);KUo=r(Rdt,"from_config()"),Rdt.forEach(t),ZUo=r(HW,`class
method.`),HW.forEach(t),eJo=i(jl),Dw=n(jl,"P",{});var kPe=s(Dw);oJo=r(kPe,"This class cannot be instantiated directly using "),Sme=n(kPe,"CODE",{});var Sdt=s(Sme);rJo=r(Sdt,"__init__()"),Sdt.forEach(t),tJo=r(kPe," (throws an error)."),kPe.forEach(t),aJo=i(jl),mt=n(jl,"DIV",{class:!0});var Nl=s(mt);m(qw.$$.fragment,Nl),nJo=i(Nl),Pme=n(Nl,"P",{});var Pdt=s(Pme);sJo=r(Pdt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Pdt.forEach(t),lJo=i(Nl),fc=n(Nl,"P",{});var UW=s(fc);iJo=r(UW,`Note:
Loading a model from its configuration file does `),$me=n(UW,"STRONG",{});var $dt=s($me);dJo=r($dt,"not"),$dt.forEach(t),cJo=r(UW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ime=n(UW,"CODE",{});var Idt=s(Ime);fJo=r(Idt,"from_pretrained()"),Idt.forEach(t),mJo=r(UW,"to load the model weights."),UW.forEach(t),gJo=i(Nl),jme=n(Nl,"P",{});var jdt=s(jme);hJo=r(jdt,"Examples:"),jdt.forEach(t),pJo=i(Nl),m(Gw.$$.fragment,Nl),Nl.forEach(t),_Jo=i(jl),no=n(jl,"DIV",{class:!0});var ia=s(no);m(Ow.$$.fragment,ia),uJo=i(ia),Nme=n(ia,"P",{});var Ndt=s(Nme);bJo=r(Ndt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Ndt.forEach(t),vJo=i(ia),pn=n(ia,"P",{});var jM=s(pn);TJo=r(jM,"The model class to instantiate is selected based on the "),Dme=n(jM,"CODE",{});var Ddt=s(Dme);FJo=r(Ddt,"model_type"),Ddt.forEach(t),CJo=r(jM,` property of the config object (either
passed as an argument or loaded from `),qme=n(jM,"CODE",{});var qdt=s(qme);MJo=r(qdt,"pretrained_model_name_or_path"),qdt.forEach(t),EJo=r(jM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gme=n(jM,"CODE",{});var Gdt=s(Gme);yJo=r(Gdt,"pretrained_model_name_or_path"),Gdt.forEach(t),wJo=r(jM,":"),jM.forEach(t),AJo=i(ia),Ome=n(ia,"UL",{});var Odt=s(Ome);mv=n(Odt,"LI",{});var XLe=s(mv);Xme=n(XLe,"STRONG",{});var Xdt=s(Xme);LJo=r(Xdt,"maskformer"),Xdt.forEach(t),BJo=r(XLe," \u2014 "),wq=n(XLe,"A",{href:!0});var Vdt=s(wq);xJo=r(Vdt,"MaskFormerForInstanceSegmentation"),Vdt.forEach(t),kJo=r(XLe," (MaskFormer model)"),XLe.forEach(t),Odt.forEach(t),RJo=i(ia),gv=n(ia,"P",{});var VLe=s(gv);SJo=r(VLe,"The model is set in evaluation mode by default using "),Vme=n(VLe,"CODE",{});var zdt=s(Vme);PJo=r(zdt,"model.eval()"),zdt.forEach(t),$Jo=r(VLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zme=n(VLe,"CODE",{});var Wdt=s(zme);IJo=r(Wdt,"model.train()"),Wdt.forEach(t),VLe.forEach(t),jJo=i(ia),Wme=n(ia,"P",{});var Qdt=s(Wme);NJo=r(Qdt,"Examples:"),Qdt.forEach(t),DJo=i(ia),m(Xw.$$.fragment,ia),ia.forEach(t),jl.forEach(t),FRe=i(c),mc=n(c,"H2",{class:!0});var RPe=s(mc);hv=n(RPe,"A",{id:!0,class:!0,href:!0});var Hdt=s(hv);Qme=n(Hdt,"SPAN",{});var Udt=s(Qme);m(Vw.$$.fragment,Udt),Udt.forEach(t),Hdt.forEach(t),qJo=i(RPe),Hme=n(RPe,"SPAN",{});var Jdt=s(Hme);GJo=r(Jdt,"TFAutoModel"),Jdt.forEach(t),RPe.forEach(t),CRe=i(c),vr=n(c,"DIV",{class:!0});var Dl=s(vr);m(zw.$$.fragment,Dl),OJo=i(Dl),gc=n(Dl,"P",{});var JW=s(gc);XJo=r(JW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Ume=n(JW,"CODE",{});var Ydt=s(Ume);VJo=r(Ydt,"from_pretrained()"),Ydt.forEach(t),zJo=r(JW,"class method or the "),Jme=n(JW,"CODE",{});var Kdt=s(Jme);WJo=r(Kdt,"from_config()"),Kdt.forEach(t),QJo=r(JW,`class
method.`),JW.forEach(t),HJo=i(Dl),Ww=n(Dl,"P",{});var SPe=s(Ww);UJo=r(SPe,"This class cannot be instantiated directly using "),Yme=n(SPe,"CODE",{});var Zdt=s(Yme);JJo=r(Zdt,"__init__()"),Zdt.forEach(t),YJo=r(SPe," (throws an error)."),SPe.forEach(t),KJo=i(Dl),gt=n(Dl,"DIV",{class:!0});var ql=s(gt);m(Qw.$$.fragment,ql),ZJo=i(ql),Kme=n(ql,"P",{});var ect=s(Kme);eYo=r(ect,"Instantiates one of the base model classes of the library from a configuration."),ect.forEach(t),oYo=i(ql),hc=n(ql,"P",{});var YW=s(hc);rYo=r(YW,`Note:
Loading a model from its configuration file does `),Zme=n(YW,"STRONG",{});var oct=s(Zme);tYo=r(oct,"not"),oct.forEach(t),aYo=r(YW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ege=n(YW,"CODE",{});var rct=s(ege);nYo=r(rct,"from_pretrained()"),rct.forEach(t),sYo=r(YW,"to load the model weights."),YW.forEach(t),lYo=i(ql),oge=n(ql,"P",{});var tct=s(oge);iYo=r(tct,"Examples:"),tct.forEach(t),dYo=i(ql),m(Hw.$$.fragment,ql),ql.forEach(t),cYo=i(Dl),ho=n(Dl,"DIV",{class:!0});var pa=s(ho);m(Uw.$$.fragment,pa),fYo=i(pa),rge=n(pa,"P",{});var act=s(rge);mYo=r(act,"Instantiate one of the base model classes of the library from a pretrained model."),act.forEach(t),gYo=i(pa),_n=n(pa,"P",{});var NM=s(_n);hYo=r(NM,"The model class to instantiate is selected based on the "),tge=n(NM,"CODE",{});var nct=s(tge);pYo=r(nct,"model_type"),nct.forEach(t),_Yo=r(NM,` property of the config object (either
passed as an argument or loaded from `),age=n(NM,"CODE",{});var sct=s(age);uYo=r(sct,"pretrained_model_name_or_path"),sct.forEach(t),bYo=r(NM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nge=n(NM,"CODE",{});var lct=s(nge);vYo=r(lct,"pretrained_model_name_or_path"),lct.forEach(t),TYo=r(NM,":"),NM.forEach(t),FYo=i(pa),B=n(pa,"UL",{});var x=s(B);pv=n(x,"LI",{});var zLe=s(pv);sge=n(zLe,"STRONG",{});var ict=s(sge);CYo=r(ict,"albert"),ict.forEach(t),MYo=r(zLe," \u2014 "),Aq=n(zLe,"A",{href:!0});var dct=s(Aq);EYo=r(dct,"TFAlbertModel"),dct.forEach(t),yYo=r(zLe," (ALBERT model)"),zLe.forEach(t),wYo=i(x),_v=n(x,"LI",{});var WLe=s(_v);lge=n(WLe,"STRONG",{});var cct=s(lge);AYo=r(cct,"bart"),cct.forEach(t),LYo=r(WLe," \u2014 "),Lq=n(WLe,"A",{href:!0});var fct=s(Lq);BYo=r(fct,"TFBartModel"),fct.forEach(t),xYo=r(WLe," (BART model)"),WLe.forEach(t),kYo=i(x),uv=n(x,"LI",{});var QLe=s(uv);ige=n(QLe,"STRONG",{});var mct=s(ige);RYo=r(mct,"bert"),mct.forEach(t),SYo=r(QLe," \u2014 "),Bq=n(QLe,"A",{href:!0});var gct=s(Bq);PYo=r(gct,"TFBertModel"),gct.forEach(t),$Yo=r(QLe," (BERT model)"),QLe.forEach(t),IYo=i(x),bv=n(x,"LI",{});var HLe=s(bv);dge=n(HLe,"STRONG",{});var hct=s(dge);jYo=r(hct,"blenderbot"),hct.forEach(t),NYo=r(HLe," \u2014 "),xq=n(HLe,"A",{href:!0});var pct=s(xq);DYo=r(pct,"TFBlenderbotModel"),pct.forEach(t),qYo=r(HLe," (Blenderbot model)"),HLe.forEach(t),GYo=i(x),vv=n(x,"LI",{});var ULe=s(vv);cge=n(ULe,"STRONG",{});var _ct=s(cge);OYo=r(_ct,"blenderbot-small"),_ct.forEach(t),XYo=r(ULe," \u2014 "),kq=n(ULe,"A",{href:!0});var uct=s(kq);VYo=r(uct,"TFBlenderbotSmallModel"),uct.forEach(t),zYo=r(ULe," (BlenderbotSmall model)"),ULe.forEach(t),WYo=i(x),Tv=n(x,"LI",{});var JLe=s(Tv);fge=n(JLe,"STRONG",{});var bct=s(fge);QYo=r(bct,"camembert"),bct.forEach(t),HYo=r(JLe," \u2014 "),Rq=n(JLe,"A",{href:!0});var vct=s(Rq);UYo=r(vct,"TFCamembertModel"),vct.forEach(t),JYo=r(JLe," (CamemBERT model)"),JLe.forEach(t),YYo=i(x),Fv=n(x,"LI",{});var YLe=s(Fv);mge=n(YLe,"STRONG",{});var Tct=s(mge);KYo=r(Tct,"clip"),Tct.forEach(t),ZYo=r(YLe," \u2014 "),Sq=n(YLe,"A",{href:!0});var Fct=s(Sq);eKo=r(Fct,"TFCLIPModel"),Fct.forEach(t),oKo=r(YLe," (CLIP model)"),YLe.forEach(t),rKo=i(x),Cv=n(x,"LI",{});var KLe=s(Cv);gge=n(KLe,"STRONG",{});var Cct=s(gge);tKo=r(Cct,"convbert"),Cct.forEach(t),aKo=r(KLe," \u2014 "),Pq=n(KLe,"A",{href:!0});var Mct=s(Pq);nKo=r(Mct,"TFConvBertModel"),Mct.forEach(t),sKo=r(KLe," (ConvBERT model)"),KLe.forEach(t),lKo=i(x),Mv=n(x,"LI",{});var ZLe=s(Mv);hge=n(ZLe,"STRONG",{});var Ect=s(hge);iKo=r(Ect,"convnext"),Ect.forEach(t),dKo=r(ZLe," \u2014 "),$q=n(ZLe,"A",{href:!0});var yct=s($q);cKo=r(yct,"TFConvNextModel"),yct.forEach(t),fKo=r(ZLe," (ConvNext model)"),ZLe.forEach(t),mKo=i(x),Ev=n(x,"LI",{});var e7e=s(Ev);pge=n(e7e,"STRONG",{});var wct=s(pge);gKo=r(wct,"ctrl"),wct.forEach(t),hKo=r(e7e," \u2014 "),Iq=n(e7e,"A",{href:!0});var Act=s(Iq);pKo=r(Act,"TFCTRLModel"),Act.forEach(t),_Ko=r(e7e," (CTRL model)"),e7e.forEach(t),uKo=i(x),yv=n(x,"LI",{});var o7e=s(yv);_ge=n(o7e,"STRONG",{});var Lct=s(_ge);bKo=r(Lct,"deberta"),Lct.forEach(t),vKo=r(o7e," \u2014 "),jq=n(o7e,"A",{href:!0});var Bct=s(jq);TKo=r(Bct,"TFDebertaModel"),Bct.forEach(t),FKo=r(o7e," (DeBERTa model)"),o7e.forEach(t),CKo=i(x),wv=n(x,"LI",{});var r7e=s(wv);uge=n(r7e,"STRONG",{});var xct=s(uge);MKo=r(xct,"deberta-v2"),xct.forEach(t),EKo=r(r7e," \u2014 "),Nq=n(r7e,"A",{href:!0});var kct=s(Nq);yKo=r(kct,"TFDebertaV2Model"),kct.forEach(t),wKo=r(r7e," (DeBERTa-v2 model)"),r7e.forEach(t),AKo=i(x),Av=n(x,"LI",{});var t7e=s(Av);bge=n(t7e,"STRONG",{});var Rct=s(bge);LKo=r(Rct,"distilbert"),Rct.forEach(t),BKo=r(t7e," \u2014 "),Dq=n(t7e,"A",{href:!0});var Sct=s(Dq);xKo=r(Sct,"TFDistilBertModel"),Sct.forEach(t),kKo=r(t7e," (DistilBERT model)"),t7e.forEach(t),RKo=i(x),Lv=n(x,"LI",{});var a7e=s(Lv);vge=n(a7e,"STRONG",{});var Pct=s(vge);SKo=r(Pct,"dpr"),Pct.forEach(t),PKo=r(a7e," \u2014 "),qq=n(a7e,"A",{href:!0});var $ct=s(qq);$Ko=r($ct,"TFDPRQuestionEncoder"),$ct.forEach(t),IKo=r(a7e," (DPR model)"),a7e.forEach(t),jKo=i(x),Bv=n(x,"LI",{});var n7e=s(Bv);Tge=n(n7e,"STRONG",{});var Ict=s(Tge);NKo=r(Ict,"electra"),Ict.forEach(t),DKo=r(n7e," \u2014 "),Gq=n(n7e,"A",{href:!0});var jct=s(Gq);qKo=r(jct,"TFElectraModel"),jct.forEach(t),GKo=r(n7e," (ELECTRA model)"),n7e.forEach(t),OKo=i(x),xv=n(x,"LI",{});var s7e=s(xv);Fge=n(s7e,"STRONG",{});var Nct=s(Fge);XKo=r(Nct,"flaubert"),Nct.forEach(t),VKo=r(s7e," \u2014 "),Oq=n(s7e,"A",{href:!0});var Dct=s(Oq);zKo=r(Dct,"TFFlaubertModel"),Dct.forEach(t),WKo=r(s7e," (FlauBERT model)"),s7e.forEach(t),QKo=i(x),Gs=n(x,"LI",{});var o9=s(Gs);Cge=n(o9,"STRONG",{});var qct=s(Cge);HKo=r(qct,"funnel"),qct.forEach(t),UKo=r(o9," \u2014 "),Xq=n(o9,"A",{href:!0});var Gct=s(Xq);JKo=r(Gct,"TFFunnelModel"),Gct.forEach(t),YKo=r(o9," or "),Vq=n(o9,"A",{href:!0});var Oct=s(Vq);KKo=r(Oct,"TFFunnelBaseModel"),Oct.forEach(t),ZKo=r(o9," (Funnel Transformer model)"),o9.forEach(t),eZo=i(x),kv=n(x,"LI",{});var l7e=s(kv);Mge=n(l7e,"STRONG",{});var Xct=s(Mge);oZo=r(Xct,"gpt2"),Xct.forEach(t),rZo=r(l7e," \u2014 "),zq=n(l7e,"A",{href:!0});var Vct=s(zq);tZo=r(Vct,"TFGPT2Model"),Vct.forEach(t),aZo=r(l7e," (OpenAI GPT-2 model)"),l7e.forEach(t),nZo=i(x),Rv=n(x,"LI",{});var i7e=s(Rv);Ege=n(i7e,"STRONG",{});var zct=s(Ege);sZo=r(zct,"gptj"),zct.forEach(t),lZo=r(i7e," \u2014 "),Wq=n(i7e,"A",{href:!0});var Wct=s(Wq);iZo=r(Wct,"TFGPTJModel"),Wct.forEach(t),dZo=r(i7e," (GPT-J model)"),i7e.forEach(t),cZo=i(x),Sv=n(x,"LI",{});var d7e=s(Sv);yge=n(d7e,"STRONG",{});var Qct=s(yge);fZo=r(Qct,"hubert"),Qct.forEach(t),mZo=r(d7e," \u2014 "),Qq=n(d7e,"A",{href:!0});var Hct=s(Qq);gZo=r(Hct,"TFHubertModel"),Hct.forEach(t),hZo=r(d7e," (Hubert model)"),d7e.forEach(t),pZo=i(x),Pv=n(x,"LI",{});var c7e=s(Pv);wge=n(c7e,"STRONG",{});var Uct=s(wge);_Zo=r(Uct,"layoutlm"),Uct.forEach(t),uZo=r(c7e," \u2014 "),Hq=n(c7e,"A",{href:!0});var Jct=s(Hq);bZo=r(Jct,"TFLayoutLMModel"),Jct.forEach(t),vZo=r(c7e," (LayoutLM model)"),c7e.forEach(t),TZo=i(x),$v=n(x,"LI",{});var f7e=s($v);Age=n(f7e,"STRONG",{});var Yct=s(Age);FZo=r(Yct,"led"),Yct.forEach(t),CZo=r(f7e," \u2014 "),Uq=n(f7e,"A",{href:!0});var Kct=s(Uq);MZo=r(Kct,"TFLEDModel"),Kct.forEach(t),EZo=r(f7e," (LED model)"),f7e.forEach(t),yZo=i(x),Iv=n(x,"LI",{});var m7e=s(Iv);Lge=n(m7e,"STRONG",{});var Zct=s(Lge);wZo=r(Zct,"longformer"),Zct.forEach(t),AZo=r(m7e," \u2014 "),Jq=n(m7e,"A",{href:!0});var eft=s(Jq);LZo=r(eft,"TFLongformerModel"),eft.forEach(t),BZo=r(m7e," (Longformer model)"),m7e.forEach(t),xZo=i(x),jv=n(x,"LI",{});var g7e=s(jv);Bge=n(g7e,"STRONG",{});var oft=s(Bge);kZo=r(oft,"lxmert"),oft.forEach(t),RZo=r(g7e," \u2014 "),Yq=n(g7e,"A",{href:!0});var rft=s(Yq);SZo=r(rft,"TFLxmertModel"),rft.forEach(t),PZo=r(g7e," (LXMERT model)"),g7e.forEach(t),$Zo=i(x),Nv=n(x,"LI",{});var h7e=s(Nv);xge=n(h7e,"STRONG",{});var tft=s(xge);IZo=r(tft,"marian"),tft.forEach(t),jZo=r(h7e," \u2014 "),Kq=n(h7e,"A",{href:!0});var aft=s(Kq);NZo=r(aft,"TFMarianModel"),aft.forEach(t),DZo=r(h7e," (Marian model)"),h7e.forEach(t),qZo=i(x),Dv=n(x,"LI",{});var p7e=s(Dv);kge=n(p7e,"STRONG",{});var nft=s(kge);GZo=r(nft,"mbart"),nft.forEach(t),OZo=r(p7e," \u2014 "),Zq=n(p7e,"A",{href:!0});var sft=s(Zq);XZo=r(sft,"TFMBartModel"),sft.forEach(t),VZo=r(p7e," (mBART model)"),p7e.forEach(t),zZo=i(x),qv=n(x,"LI",{});var _7e=s(qv);Rge=n(_7e,"STRONG",{});var lft=s(Rge);WZo=r(lft,"mobilebert"),lft.forEach(t),QZo=r(_7e," \u2014 "),eG=n(_7e,"A",{href:!0});var ift=s(eG);HZo=r(ift,"TFMobileBertModel"),ift.forEach(t),UZo=r(_7e," (MobileBERT model)"),_7e.forEach(t),JZo=i(x),Gv=n(x,"LI",{});var u7e=s(Gv);Sge=n(u7e,"STRONG",{});var dft=s(Sge);YZo=r(dft,"mpnet"),dft.forEach(t),KZo=r(u7e," \u2014 "),oG=n(u7e,"A",{href:!0});var cft=s(oG);ZZo=r(cft,"TFMPNetModel"),cft.forEach(t),eer=r(u7e," (MPNet model)"),u7e.forEach(t),oer=i(x),Ov=n(x,"LI",{});var b7e=s(Ov);Pge=n(b7e,"STRONG",{});var fft=s(Pge);rer=r(fft,"mt5"),fft.forEach(t),ter=r(b7e," \u2014 "),rG=n(b7e,"A",{href:!0});var mft=s(rG);aer=r(mft,"TFMT5Model"),mft.forEach(t),ner=r(b7e," (mT5 model)"),b7e.forEach(t),ser=i(x),Xv=n(x,"LI",{});var v7e=s(Xv);$ge=n(v7e,"STRONG",{});var gft=s($ge);ler=r(gft,"openai-gpt"),gft.forEach(t),ier=r(v7e," \u2014 "),tG=n(v7e,"A",{href:!0});var hft=s(tG);der=r(hft,"TFOpenAIGPTModel"),hft.forEach(t),cer=r(v7e," (OpenAI GPT model)"),v7e.forEach(t),fer=i(x),Vv=n(x,"LI",{});var T7e=s(Vv);Ige=n(T7e,"STRONG",{});var pft=s(Ige);mer=r(pft,"pegasus"),pft.forEach(t),ger=r(T7e," \u2014 "),aG=n(T7e,"A",{href:!0});var _ft=s(aG);her=r(_ft,"TFPegasusModel"),_ft.forEach(t),per=r(T7e," (Pegasus model)"),T7e.forEach(t),_er=i(x),zv=n(x,"LI",{});var F7e=s(zv);jge=n(F7e,"STRONG",{});var uft=s(jge);uer=r(uft,"rembert"),uft.forEach(t),ber=r(F7e," \u2014 "),nG=n(F7e,"A",{href:!0});var bft=s(nG);ver=r(bft,"TFRemBertModel"),bft.forEach(t),Ter=r(F7e," (RemBERT model)"),F7e.forEach(t),Fer=i(x),Wv=n(x,"LI",{});var C7e=s(Wv);Nge=n(C7e,"STRONG",{});var vft=s(Nge);Cer=r(vft,"roberta"),vft.forEach(t),Mer=r(C7e," \u2014 "),sG=n(C7e,"A",{href:!0});var Tft=s(sG);Eer=r(Tft,"TFRobertaModel"),Tft.forEach(t),yer=r(C7e," (RoBERTa model)"),C7e.forEach(t),wer=i(x),Qv=n(x,"LI",{});var M7e=s(Qv);Dge=n(M7e,"STRONG",{});var Fft=s(Dge);Aer=r(Fft,"roformer"),Fft.forEach(t),Ler=r(M7e," \u2014 "),lG=n(M7e,"A",{href:!0});var Cft=s(lG);Ber=r(Cft,"TFRoFormerModel"),Cft.forEach(t),xer=r(M7e," (RoFormer model)"),M7e.forEach(t),ker=i(x),Hv=n(x,"LI",{});var E7e=s(Hv);qge=n(E7e,"STRONG",{});var Mft=s(qge);Rer=r(Mft,"speech_to_text"),Mft.forEach(t),Ser=r(E7e," \u2014 "),iG=n(E7e,"A",{href:!0});var Eft=s(iG);Per=r(Eft,"TFSpeech2TextModel"),Eft.forEach(t),$er=r(E7e," (Speech2Text model)"),E7e.forEach(t),Ier=i(x),Uv=n(x,"LI",{});var y7e=s(Uv);Gge=n(y7e,"STRONG",{});var yft=s(Gge);jer=r(yft,"t5"),yft.forEach(t),Ner=r(y7e," \u2014 "),dG=n(y7e,"A",{href:!0});var wft=s(dG);Der=r(wft,"TFT5Model"),wft.forEach(t),qer=r(y7e," (T5 model)"),y7e.forEach(t),Ger=i(x),Jv=n(x,"LI",{});var w7e=s(Jv);Oge=n(w7e,"STRONG",{});var Aft=s(Oge);Oer=r(Aft,"tapas"),Aft.forEach(t),Xer=r(w7e," \u2014 "),cG=n(w7e,"A",{href:!0});var Lft=s(cG);Ver=r(Lft,"TFTapasModel"),Lft.forEach(t),zer=r(w7e," (TAPAS model)"),w7e.forEach(t),Wer=i(x),Yv=n(x,"LI",{});var A7e=s(Yv);Xge=n(A7e,"STRONG",{});var Bft=s(Xge);Qer=r(Bft,"transfo-xl"),Bft.forEach(t),Her=r(A7e," \u2014 "),fG=n(A7e,"A",{href:!0});var xft=s(fG);Uer=r(xft,"TFTransfoXLModel"),xft.forEach(t),Jer=r(A7e," (Transformer-XL model)"),A7e.forEach(t),Yer=i(x),Kv=n(x,"LI",{});var L7e=s(Kv);Vge=n(L7e,"STRONG",{});var kft=s(Vge);Ker=r(kft,"vit"),kft.forEach(t),Zer=r(L7e," \u2014 "),mG=n(L7e,"A",{href:!0});var Rft=s(mG);eor=r(Rft,"TFViTModel"),Rft.forEach(t),oor=r(L7e," (ViT model)"),L7e.forEach(t),ror=i(x),Zv=n(x,"LI",{});var B7e=s(Zv);zge=n(B7e,"STRONG",{});var Sft=s(zge);tor=r(Sft,"wav2vec2"),Sft.forEach(t),aor=r(B7e," \u2014 "),gG=n(B7e,"A",{href:!0});var Pft=s(gG);nor=r(Pft,"TFWav2Vec2Model"),Pft.forEach(t),sor=r(B7e," (Wav2Vec2 model)"),B7e.forEach(t),lor=i(x),e6=n(x,"LI",{});var x7e=s(e6);Wge=n(x7e,"STRONG",{});var $ft=s(Wge);ior=r($ft,"xlm"),$ft.forEach(t),dor=r(x7e," \u2014 "),hG=n(x7e,"A",{href:!0});var Ift=s(hG);cor=r(Ift,"TFXLMModel"),Ift.forEach(t),mor=r(x7e," (XLM model)"),x7e.forEach(t),gor=i(x),o6=n(x,"LI",{});var k7e=s(o6);Qge=n(k7e,"STRONG",{});var jft=s(Qge);hor=r(jft,"xlm-roberta"),jft.forEach(t),por=r(k7e," \u2014 "),pG=n(k7e,"A",{href:!0});var Nft=s(pG);_or=r(Nft,"TFXLMRobertaModel"),Nft.forEach(t),uor=r(k7e," (XLM-RoBERTa model)"),k7e.forEach(t),bor=i(x),r6=n(x,"LI",{});var R7e=s(r6);Hge=n(R7e,"STRONG",{});var Dft=s(Hge);vor=r(Dft,"xlnet"),Dft.forEach(t),Tor=r(R7e," \u2014 "),_G=n(R7e,"A",{href:!0});var qft=s(_G);For=r(qft,"TFXLNetModel"),qft.forEach(t),Cor=r(R7e," (XLNet model)"),R7e.forEach(t),x.forEach(t),Mor=i(pa),Uge=n(pa,"P",{});var Gft=s(Uge);Eor=r(Gft,"Examples:"),Gft.forEach(t),yor=i(pa),m(Jw.$$.fragment,pa),pa.forEach(t),Dl.forEach(t),MRe=i(c),pc=n(c,"H2",{class:!0});var PPe=s(pc);t6=n(PPe,"A",{id:!0,class:!0,href:!0});var Oft=s(t6);Jge=n(Oft,"SPAN",{});var Xft=s(Jge);m(Yw.$$.fragment,Xft),Xft.forEach(t),Oft.forEach(t),wor=i(PPe),Yge=n(PPe,"SPAN",{});var Vft=s(Yge);Aor=r(Vft,"TFAutoModelForPreTraining"),Vft.forEach(t),PPe.forEach(t),ERe=i(c),Tr=n(c,"DIV",{class:!0});var Gl=s(Tr);m(Kw.$$.fragment,Gl),Lor=i(Gl),_c=n(Gl,"P",{});var KW=s(_c);Bor=r(KW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Kge=n(KW,"CODE",{});var zft=s(Kge);xor=r(zft,"from_pretrained()"),zft.forEach(t),kor=r(KW,"class method or the "),Zge=n(KW,"CODE",{});var Wft=s(Zge);Ror=r(Wft,"from_config()"),Wft.forEach(t),Sor=r(KW,`class
method.`),KW.forEach(t),Por=i(Gl),Zw=n(Gl,"P",{});var $Pe=s(Zw);$or=r($Pe,"This class cannot be instantiated directly using "),ehe=n($Pe,"CODE",{});var Qft=s(ehe);Ior=r(Qft,"__init__()"),Qft.forEach(t),jor=r($Pe," (throws an error)."),$Pe.forEach(t),Nor=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);m(eA.$$.fragment,Ol),Dor=i(Ol),ohe=n(Ol,"P",{});var Hft=s(ohe);qor=r(Hft,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Hft.forEach(t),Gor=i(Ol),uc=n(Ol,"P",{});var ZW=s(uc);Oor=r(ZW,`Note:
Loading a model from its configuration file does `),rhe=n(ZW,"STRONG",{});var Uft=s(rhe);Xor=r(Uft,"not"),Uft.forEach(t),Vor=r(ZW,` load the model weights. It only affects the
model\u2019s configuration. Use `),the=n(ZW,"CODE",{});var Jft=s(the);zor=r(Jft,"from_pretrained()"),Jft.forEach(t),Wor=r(ZW,"to load the model weights."),ZW.forEach(t),Qor=i(Ol),ahe=n(Ol,"P",{});var Yft=s(ahe);Hor=r(Yft,"Examples:"),Yft.forEach(t),Uor=i(Ol),m(oA.$$.fragment,Ol),Ol.forEach(t),Jor=i(Gl),po=n(Gl,"DIV",{class:!0});var _a=s(po);m(rA.$$.fragment,_a),Yor=i(_a),nhe=n(_a,"P",{});var Kft=s(nhe);Kor=r(Kft,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Kft.forEach(t),Zor=i(_a),un=n(_a,"P",{});var DM=s(un);err=r(DM,"The model class to instantiate is selected based on the "),she=n(DM,"CODE",{});var Zft=s(she);orr=r(Zft,"model_type"),Zft.forEach(t),rrr=r(DM,` property of the config object (either
passed as an argument or loaded from `),lhe=n(DM,"CODE",{});var emt=s(lhe);trr=r(emt,"pretrained_model_name_or_path"),emt.forEach(t),arr=r(DM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ihe=n(DM,"CODE",{});var omt=s(ihe);nrr=r(omt,"pretrained_model_name_or_path"),omt.forEach(t),srr=r(DM,":"),DM.forEach(t),lrr=i(_a),H=n(_a,"UL",{});var U=s(H);a6=n(U,"LI",{});var S7e=s(a6);dhe=n(S7e,"STRONG",{});var rmt=s(dhe);irr=r(rmt,"albert"),rmt.forEach(t),drr=r(S7e," \u2014 "),uG=n(S7e,"A",{href:!0});var tmt=s(uG);crr=r(tmt,"TFAlbertForPreTraining"),tmt.forEach(t),frr=r(S7e," (ALBERT model)"),S7e.forEach(t),mrr=i(U),n6=n(U,"LI",{});var P7e=s(n6);che=n(P7e,"STRONG",{});var amt=s(che);grr=r(amt,"bart"),amt.forEach(t),hrr=r(P7e," \u2014 "),bG=n(P7e,"A",{href:!0});var nmt=s(bG);prr=r(nmt,"TFBartForConditionalGeneration"),nmt.forEach(t),_rr=r(P7e," (BART model)"),P7e.forEach(t),urr=i(U),s6=n(U,"LI",{});var $7e=s(s6);fhe=n($7e,"STRONG",{});var smt=s(fhe);brr=r(smt,"bert"),smt.forEach(t),vrr=r($7e," \u2014 "),vG=n($7e,"A",{href:!0});var lmt=s(vG);Trr=r(lmt,"TFBertForPreTraining"),lmt.forEach(t),Frr=r($7e," (BERT model)"),$7e.forEach(t),Crr=i(U),l6=n(U,"LI",{});var I7e=s(l6);mhe=n(I7e,"STRONG",{});var imt=s(mhe);Mrr=r(imt,"camembert"),imt.forEach(t),Err=r(I7e," \u2014 "),TG=n(I7e,"A",{href:!0});var dmt=s(TG);yrr=r(dmt,"TFCamembertForMaskedLM"),dmt.forEach(t),wrr=r(I7e," (CamemBERT model)"),I7e.forEach(t),Arr=i(U),i6=n(U,"LI",{});var j7e=s(i6);ghe=n(j7e,"STRONG",{});var cmt=s(ghe);Lrr=r(cmt,"ctrl"),cmt.forEach(t),Brr=r(j7e," \u2014 "),FG=n(j7e,"A",{href:!0});var fmt=s(FG);xrr=r(fmt,"TFCTRLLMHeadModel"),fmt.forEach(t),krr=r(j7e," (CTRL model)"),j7e.forEach(t),Rrr=i(U),d6=n(U,"LI",{});var N7e=s(d6);hhe=n(N7e,"STRONG",{});var mmt=s(hhe);Srr=r(mmt,"distilbert"),mmt.forEach(t),Prr=r(N7e," \u2014 "),CG=n(N7e,"A",{href:!0});var gmt=s(CG);$rr=r(gmt,"TFDistilBertForMaskedLM"),gmt.forEach(t),Irr=r(N7e," (DistilBERT model)"),N7e.forEach(t),jrr=i(U),c6=n(U,"LI",{});var D7e=s(c6);phe=n(D7e,"STRONG",{});var hmt=s(phe);Nrr=r(hmt,"electra"),hmt.forEach(t),Drr=r(D7e," \u2014 "),MG=n(D7e,"A",{href:!0});var pmt=s(MG);qrr=r(pmt,"TFElectraForPreTraining"),pmt.forEach(t),Grr=r(D7e," (ELECTRA model)"),D7e.forEach(t),Orr=i(U),f6=n(U,"LI",{});var q7e=s(f6);_he=n(q7e,"STRONG",{});var _mt=s(_he);Xrr=r(_mt,"flaubert"),_mt.forEach(t),Vrr=r(q7e," \u2014 "),EG=n(q7e,"A",{href:!0});var umt=s(EG);zrr=r(umt,"TFFlaubertWithLMHeadModel"),umt.forEach(t),Wrr=r(q7e," (FlauBERT model)"),q7e.forEach(t),Qrr=i(U),m6=n(U,"LI",{});var G7e=s(m6);uhe=n(G7e,"STRONG",{});var bmt=s(uhe);Hrr=r(bmt,"funnel"),bmt.forEach(t),Urr=r(G7e," \u2014 "),yG=n(G7e,"A",{href:!0});var vmt=s(yG);Jrr=r(vmt,"TFFunnelForPreTraining"),vmt.forEach(t),Yrr=r(G7e," (Funnel Transformer model)"),G7e.forEach(t),Krr=i(U),g6=n(U,"LI",{});var O7e=s(g6);bhe=n(O7e,"STRONG",{});var Tmt=s(bhe);Zrr=r(Tmt,"gpt2"),Tmt.forEach(t),etr=r(O7e," \u2014 "),wG=n(O7e,"A",{href:!0});var Fmt=s(wG);otr=r(Fmt,"TFGPT2LMHeadModel"),Fmt.forEach(t),rtr=r(O7e," (OpenAI GPT-2 model)"),O7e.forEach(t),ttr=i(U),h6=n(U,"LI",{});var X7e=s(h6);vhe=n(X7e,"STRONG",{});var Cmt=s(vhe);atr=r(Cmt,"layoutlm"),Cmt.forEach(t),ntr=r(X7e," \u2014 "),AG=n(X7e,"A",{href:!0});var Mmt=s(AG);str=r(Mmt,"TFLayoutLMForMaskedLM"),Mmt.forEach(t),ltr=r(X7e," (LayoutLM model)"),X7e.forEach(t),itr=i(U),p6=n(U,"LI",{});var V7e=s(p6);The=n(V7e,"STRONG",{});var Emt=s(The);dtr=r(Emt,"lxmert"),Emt.forEach(t),ctr=r(V7e," \u2014 "),LG=n(V7e,"A",{href:!0});var ymt=s(LG);ftr=r(ymt,"TFLxmertForPreTraining"),ymt.forEach(t),mtr=r(V7e," (LXMERT model)"),V7e.forEach(t),gtr=i(U),_6=n(U,"LI",{});var z7e=s(_6);Fhe=n(z7e,"STRONG",{});var wmt=s(Fhe);htr=r(wmt,"mobilebert"),wmt.forEach(t),ptr=r(z7e," \u2014 "),BG=n(z7e,"A",{href:!0});var Amt=s(BG);_tr=r(Amt,"TFMobileBertForPreTraining"),Amt.forEach(t),utr=r(z7e," (MobileBERT model)"),z7e.forEach(t),btr=i(U),u6=n(U,"LI",{});var W7e=s(u6);Che=n(W7e,"STRONG",{});var Lmt=s(Che);vtr=r(Lmt,"mpnet"),Lmt.forEach(t),Ttr=r(W7e," \u2014 "),xG=n(W7e,"A",{href:!0});var Bmt=s(xG);Ftr=r(Bmt,"TFMPNetForMaskedLM"),Bmt.forEach(t),Ctr=r(W7e," (MPNet model)"),W7e.forEach(t),Mtr=i(U),b6=n(U,"LI",{});var Q7e=s(b6);Mhe=n(Q7e,"STRONG",{});var xmt=s(Mhe);Etr=r(xmt,"openai-gpt"),xmt.forEach(t),ytr=r(Q7e," \u2014 "),kG=n(Q7e,"A",{href:!0});var kmt=s(kG);wtr=r(kmt,"TFOpenAIGPTLMHeadModel"),kmt.forEach(t),Atr=r(Q7e," (OpenAI GPT model)"),Q7e.forEach(t),Ltr=i(U),v6=n(U,"LI",{});var H7e=s(v6);Ehe=n(H7e,"STRONG",{});var Rmt=s(Ehe);Btr=r(Rmt,"roberta"),Rmt.forEach(t),xtr=r(H7e," \u2014 "),RG=n(H7e,"A",{href:!0});var Smt=s(RG);ktr=r(Smt,"TFRobertaForMaskedLM"),Smt.forEach(t),Rtr=r(H7e," (RoBERTa model)"),H7e.forEach(t),Str=i(U),T6=n(U,"LI",{});var U7e=s(T6);yhe=n(U7e,"STRONG",{});var Pmt=s(yhe);Ptr=r(Pmt,"t5"),Pmt.forEach(t),$tr=r(U7e," \u2014 "),SG=n(U7e,"A",{href:!0});var $mt=s(SG);Itr=r($mt,"TFT5ForConditionalGeneration"),$mt.forEach(t),jtr=r(U7e," (T5 model)"),U7e.forEach(t),Ntr=i(U),F6=n(U,"LI",{});var J7e=s(F6);whe=n(J7e,"STRONG",{});var Imt=s(whe);Dtr=r(Imt,"tapas"),Imt.forEach(t),qtr=r(J7e," \u2014 "),PG=n(J7e,"A",{href:!0});var jmt=s(PG);Gtr=r(jmt,"TFTapasForMaskedLM"),jmt.forEach(t),Otr=r(J7e," (TAPAS model)"),J7e.forEach(t),Xtr=i(U),C6=n(U,"LI",{});var Y7e=s(C6);Ahe=n(Y7e,"STRONG",{});var Nmt=s(Ahe);Vtr=r(Nmt,"transfo-xl"),Nmt.forEach(t),ztr=r(Y7e," \u2014 "),$G=n(Y7e,"A",{href:!0});var Dmt=s($G);Wtr=r(Dmt,"TFTransfoXLLMHeadModel"),Dmt.forEach(t),Qtr=r(Y7e," (Transformer-XL model)"),Y7e.forEach(t),Htr=i(U),M6=n(U,"LI",{});var K7e=s(M6);Lhe=n(K7e,"STRONG",{});var qmt=s(Lhe);Utr=r(qmt,"xlm"),qmt.forEach(t),Jtr=r(K7e," \u2014 "),IG=n(K7e,"A",{href:!0});var Gmt=s(IG);Ytr=r(Gmt,"TFXLMWithLMHeadModel"),Gmt.forEach(t),Ktr=r(K7e," (XLM model)"),K7e.forEach(t),Ztr=i(U),E6=n(U,"LI",{});var Z7e=s(E6);Bhe=n(Z7e,"STRONG",{});var Omt=s(Bhe);ear=r(Omt,"xlm-roberta"),Omt.forEach(t),oar=r(Z7e," \u2014 "),jG=n(Z7e,"A",{href:!0});var Xmt=s(jG);rar=r(Xmt,"TFXLMRobertaForMaskedLM"),Xmt.forEach(t),tar=r(Z7e," (XLM-RoBERTa model)"),Z7e.forEach(t),aar=i(U),y6=n(U,"LI",{});var e8e=s(y6);xhe=n(e8e,"STRONG",{});var Vmt=s(xhe);nar=r(Vmt,"xlnet"),Vmt.forEach(t),sar=r(e8e," \u2014 "),NG=n(e8e,"A",{href:!0});var zmt=s(NG);lar=r(zmt,"TFXLNetLMHeadModel"),zmt.forEach(t),iar=r(e8e," (XLNet model)"),e8e.forEach(t),U.forEach(t),dar=i(_a),khe=n(_a,"P",{});var Wmt=s(khe);car=r(Wmt,"Examples:"),Wmt.forEach(t),far=i(_a),m(tA.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),yRe=i(c),bc=n(c,"H2",{class:!0});var IPe=s(bc);w6=n(IPe,"A",{id:!0,class:!0,href:!0});var Qmt=s(w6);Rhe=n(Qmt,"SPAN",{});var Hmt=s(Rhe);m(aA.$$.fragment,Hmt),Hmt.forEach(t),Qmt.forEach(t),mar=i(IPe),She=n(IPe,"SPAN",{});var Umt=s(She);gar=r(Umt,"TFAutoModelForCausalLM"),Umt.forEach(t),IPe.forEach(t),wRe=i(c),Fr=n(c,"DIV",{class:!0});var Xl=s(Fr);m(nA.$$.fragment,Xl),har=i(Xl),vc=n(Xl,"P",{});var eQ=s(vc);par=r(eQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Phe=n(eQ,"CODE",{});var Jmt=s(Phe);_ar=r(Jmt,"from_pretrained()"),Jmt.forEach(t),uar=r(eQ,"class method or the "),$he=n(eQ,"CODE",{});var Ymt=s($he);bar=r(Ymt,"from_config()"),Ymt.forEach(t),Tar=r(eQ,`class
method.`),eQ.forEach(t),Far=i(Xl),sA=n(Xl,"P",{});var jPe=s(sA);Car=r(jPe,"This class cannot be instantiated directly using "),Ihe=n(jPe,"CODE",{});var Kmt=s(Ihe);Mar=r(Kmt,"__init__()"),Kmt.forEach(t),Ear=r(jPe," (throws an error)."),jPe.forEach(t),yar=i(Xl),pt=n(Xl,"DIV",{class:!0});var Vl=s(pt);m(lA.$$.fragment,Vl),war=i(Vl),jhe=n(Vl,"P",{});var Zmt=s(jhe);Aar=r(Zmt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Zmt.forEach(t),Lar=i(Vl),Tc=n(Vl,"P",{});var oQ=s(Tc);Bar=r(oQ,`Note:
Loading a model from its configuration file does `),Nhe=n(oQ,"STRONG",{});var egt=s(Nhe);xar=r(egt,"not"),egt.forEach(t),kar=r(oQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dhe=n(oQ,"CODE",{});var ogt=s(Dhe);Rar=r(ogt,"from_pretrained()"),ogt.forEach(t),Sar=r(oQ,"to load the model weights."),oQ.forEach(t),Par=i(Vl),qhe=n(Vl,"P",{});var rgt=s(qhe);$ar=r(rgt,"Examples:"),rgt.forEach(t),Iar=i(Vl),m(iA.$$.fragment,Vl),Vl.forEach(t),jar=i(Xl),_o=n(Xl,"DIV",{class:!0});var ua=s(_o);m(dA.$$.fragment,ua),Nar=i(ua),Ghe=n(ua,"P",{});var tgt=s(Ghe);Dar=r(tgt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),tgt.forEach(t),qar=i(ua),bn=n(ua,"P",{});var qM=s(bn);Gar=r(qM,"The model class to instantiate is selected based on the "),Ohe=n(qM,"CODE",{});var agt=s(Ohe);Oar=r(agt,"model_type"),agt.forEach(t),Xar=r(qM,` property of the config object (either
passed as an argument or loaded from `),Xhe=n(qM,"CODE",{});var ngt=s(Xhe);Var=r(ngt,"pretrained_model_name_or_path"),ngt.forEach(t),zar=r(qM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vhe=n(qM,"CODE",{});var sgt=s(Vhe);War=r(sgt,"pretrained_model_name_or_path"),sgt.forEach(t),Qar=r(qM,":"),qM.forEach(t),Har=i(ua),ce=n(ua,"UL",{});var he=s(ce);A6=n(he,"LI",{});var o8e=s(A6);zhe=n(o8e,"STRONG",{});var lgt=s(zhe);Uar=r(lgt,"bert"),lgt.forEach(t),Jar=r(o8e," \u2014 "),DG=n(o8e,"A",{href:!0});var igt=s(DG);Yar=r(igt,"TFBertLMHeadModel"),igt.forEach(t),Kar=r(o8e," (BERT model)"),o8e.forEach(t),Zar=i(he),L6=n(he,"LI",{});var r8e=s(L6);Whe=n(r8e,"STRONG",{});var dgt=s(Whe);enr=r(dgt,"camembert"),dgt.forEach(t),onr=r(r8e," \u2014 "),qG=n(r8e,"A",{href:!0});var cgt=s(qG);rnr=r(cgt,"TFCamembertForCausalLM"),cgt.forEach(t),tnr=r(r8e," (CamemBERT model)"),r8e.forEach(t),anr=i(he),B6=n(he,"LI",{});var t8e=s(B6);Qhe=n(t8e,"STRONG",{});var fgt=s(Qhe);nnr=r(fgt,"ctrl"),fgt.forEach(t),snr=r(t8e," \u2014 "),GG=n(t8e,"A",{href:!0});var mgt=s(GG);lnr=r(mgt,"TFCTRLLMHeadModel"),mgt.forEach(t),inr=r(t8e," (CTRL model)"),t8e.forEach(t),dnr=i(he),x6=n(he,"LI",{});var a8e=s(x6);Hhe=n(a8e,"STRONG",{});var ggt=s(Hhe);cnr=r(ggt,"gpt2"),ggt.forEach(t),fnr=r(a8e," \u2014 "),OG=n(a8e,"A",{href:!0});var hgt=s(OG);mnr=r(hgt,"TFGPT2LMHeadModel"),hgt.forEach(t),gnr=r(a8e," (OpenAI GPT-2 model)"),a8e.forEach(t),hnr=i(he),k6=n(he,"LI",{});var n8e=s(k6);Uhe=n(n8e,"STRONG",{});var pgt=s(Uhe);pnr=r(pgt,"gptj"),pgt.forEach(t),_nr=r(n8e," \u2014 "),XG=n(n8e,"A",{href:!0});var _gt=s(XG);unr=r(_gt,"TFGPTJForCausalLM"),_gt.forEach(t),bnr=r(n8e," (GPT-J model)"),n8e.forEach(t),vnr=i(he),R6=n(he,"LI",{});var s8e=s(R6);Jhe=n(s8e,"STRONG",{});var ugt=s(Jhe);Tnr=r(ugt,"openai-gpt"),ugt.forEach(t),Fnr=r(s8e," \u2014 "),VG=n(s8e,"A",{href:!0});var bgt=s(VG);Cnr=r(bgt,"TFOpenAIGPTLMHeadModel"),bgt.forEach(t),Mnr=r(s8e," (OpenAI GPT model)"),s8e.forEach(t),Enr=i(he),S6=n(he,"LI",{});var l8e=s(S6);Yhe=n(l8e,"STRONG",{});var vgt=s(Yhe);ynr=r(vgt,"rembert"),vgt.forEach(t),wnr=r(l8e," \u2014 "),zG=n(l8e,"A",{href:!0});var Tgt=s(zG);Anr=r(Tgt,"TFRemBertForCausalLM"),Tgt.forEach(t),Lnr=r(l8e," (RemBERT model)"),l8e.forEach(t),Bnr=i(he),P6=n(he,"LI",{});var i8e=s(P6);Khe=n(i8e,"STRONG",{});var Fgt=s(Khe);xnr=r(Fgt,"roberta"),Fgt.forEach(t),knr=r(i8e," \u2014 "),WG=n(i8e,"A",{href:!0});var Cgt=s(WG);Rnr=r(Cgt,"TFRobertaForCausalLM"),Cgt.forEach(t),Snr=r(i8e," (RoBERTa model)"),i8e.forEach(t),Pnr=i(he),$6=n(he,"LI",{});var d8e=s($6);Zhe=n(d8e,"STRONG",{});var Mgt=s(Zhe);$nr=r(Mgt,"roformer"),Mgt.forEach(t),Inr=r(d8e," \u2014 "),QG=n(d8e,"A",{href:!0});var Egt=s(QG);jnr=r(Egt,"TFRoFormerForCausalLM"),Egt.forEach(t),Nnr=r(d8e," (RoFormer model)"),d8e.forEach(t),Dnr=i(he),I6=n(he,"LI",{});var c8e=s(I6);epe=n(c8e,"STRONG",{});var ygt=s(epe);qnr=r(ygt,"transfo-xl"),ygt.forEach(t),Gnr=r(c8e," \u2014 "),HG=n(c8e,"A",{href:!0});var wgt=s(HG);Onr=r(wgt,"TFTransfoXLLMHeadModel"),wgt.forEach(t),Xnr=r(c8e," (Transformer-XL model)"),c8e.forEach(t),Vnr=i(he),j6=n(he,"LI",{});var f8e=s(j6);ope=n(f8e,"STRONG",{});var Agt=s(ope);znr=r(Agt,"xlm"),Agt.forEach(t),Wnr=r(f8e," \u2014 "),UG=n(f8e,"A",{href:!0});var Lgt=s(UG);Qnr=r(Lgt,"TFXLMWithLMHeadModel"),Lgt.forEach(t),Hnr=r(f8e," (XLM model)"),f8e.forEach(t),Unr=i(he),N6=n(he,"LI",{});var m8e=s(N6);rpe=n(m8e,"STRONG",{});var Bgt=s(rpe);Jnr=r(Bgt,"xlnet"),Bgt.forEach(t),Ynr=r(m8e," \u2014 "),JG=n(m8e,"A",{href:!0});var xgt=s(JG);Knr=r(xgt,"TFXLNetLMHeadModel"),xgt.forEach(t),Znr=r(m8e," (XLNet model)"),m8e.forEach(t),he.forEach(t),esr=i(ua),tpe=n(ua,"P",{});var kgt=s(tpe);osr=r(kgt,"Examples:"),kgt.forEach(t),rsr=i(ua),m(cA.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),ARe=i(c),Fc=n(c,"H2",{class:!0});var NPe=s(Fc);D6=n(NPe,"A",{id:!0,class:!0,href:!0});var Rgt=s(D6);ape=n(Rgt,"SPAN",{});var Sgt=s(ape);m(fA.$$.fragment,Sgt),Sgt.forEach(t),Rgt.forEach(t),tsr=i(NPe),npe=n(NPe,"SPAN",{});var Pgt=s(npe);asr=r(Pgt,"TFAutoModelForImageClassification"),Pgt.forEach(t),NPe.forEach(t),LRe=i(c),Cr=n(c,"DIV",{class:!0});var zl=s(Cr);m(mA.$$.fragment,zl),nsr=i(zl),Cc=n(zl,"P",{});var rQ=s(Cc);ssr=r(rQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),spe=n(rQ,"CODE",{});var $gt=s(spe);lsr=r($gt,"from_pretrained()"),$gt.forEach(t),isr=r(rQ,"class method or the "),lpe=n(rQ,"CODE",{});var Igt=s(lpe);dsr=r(Igt,"from_config()"),Igt.forEach(t),csr=r(rQ,`class
method.`),rQ.forEach(t),fsr=i(zl),gA=n(zl,"P",{});var DPe=s(gA);msr=r(DPe,"This class cannot be instantiated directly using "),ipe=n(DPe,"CODE",{});var jgt=s(ipe);gsr=r(jgt,"__init__()"),jgt.forEach(t),hsr=r(DPe," (throws an error)."),DPe.forEach(t),psr=i(zl),_t=n(zl,"DIV",{class:!0});var Wl=s(_t);m(hA.$$.fragment,Wl),_sr=i(Wl),dpe=n(Wl,"P",{});var Ngt=s(dpe);usr=r(Ngt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ngt.forEach(t),bsr=i(Wl),Mc=n(Wl,"P",{});var tQ=s(Mc);vsr=r(tQ,`Note:
Loading a model from its configuration file does `),cpe=n(tQ,"STRONG",{});var Dgt=s(cpe);Tsr=r(Dgt,"not"),Dgt.forEach(t),Fsr=r(tQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fpe=n(tQ,"CODE",{});var qgt=s(fpe);Csr=r(qgt,"from_pretrained()"),qgt.forEach(t),Msr=r(tQ,"to load the model weights."),tQ.forEach(t),Esr=i(Wl),mpe=n(Wl,"P",{});var Ggt=s(mpe);ysr=r(Ggt,"Examples:"),Ggt.forEach(t),wsr=i(Wl),m(pA.$$.fragment,Wl),Wl.forEach(t),Asr=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(_A.$$.fragment,ba),Lsr=i(ba),gpe=n(ba,"P",{});var Ogt=s(gpe);Bsr=r(Ogt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ogt.forEach(t),xsr=i(ba),vn=n(ba,"P",{});var GM=s(vn);ksr=r(GM,"The model class to instantiate is selected based on the "),hpe=n(GM,"CODE",{});var Xgt=s(hpe);Rsr=r(Xgt,"model_type"),Xgt.forEach(t),Ssr=r(GM,` property of the config object (either
passed as an argument or loaded from `),ppe=n(GM,"CODE",{});var Vgt=s(ppe);Psr=r(Vgt,"pretrained_model_name_or_path"),Vgt.forEach(t),$sr=r(GM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_pe=n(GM,"CODE",{});var zgt=s(_pe);Isr=r(zgt,"pretrained_model_name_or_path"),zgt.forEach(t),jsr=r(GM,":"),GM.forEach(t),Nsr=i(ba),uA=n(ba,"UL",{});var qPe=s(uA);q6=n(qPe,"LI",{});var g8e=s(q6);upe=n(g8e,"STRONG",{});var Wgt=s(upe);Dsr=r(Wgt,"convnext"),Wgt.forEach(t),qsr=r(g8e," \u2014 "),YG=n(g8e,"A",{href:!0});var Qgt=s(YG);Gsr=r(Qgt,"TFConvNextForImageClassification"),Qgt.forEach(t),Osr=r(g8e," (ConvNext model)"),g8e.forEach(t),Xsr=i(qPe),G6=n(qPe,"LI",{});var h8e=s(G6);bpe=n(h8e,"STRONG",{});var Hgt=s(bpe);Vsr=r(Hgt,"vit"),Hgt.forEach(t),zsr=r(h8e," \u2014 "),KG=n(h8e,"A",{href:!0});var Ugt=s(KG);Wsr=r(Ugt,"TFViTForImageClassification"),Ugt.forEach(t),Qsr=r(h8e," (ViT model)"),h8e.forEach(t),qPe.forEach(t),Hsr=i(ba),vpe=n(ba,"P",{});var Jgt=s(vpe);Usr=r(Jgt,"Examples:"),Jgt.forEach(t),Jsr=i(ba),m(bA.$$.fragment,ba),ba.forEach(t),zl.forEach(t),BRe=i(c),Ec=n(c,"H2",{class:!0});var GPe=s(Ec);O6=n(GPe,"A",{id:!0,class:!0,href:!0});var Ygt=s(O6);Tpe=n(Ygt,"SPAN",{});var Kgt=s(Tpe);m(vA.$$.fragment,Kgt),Kgt.forEach(t),Ygt.forEach(t),Ysr=i(GPe),Fpe=n(GPe,"SPAN",{});var Zgt=s(Fpe);Ksr=r(Zgt,"TFAutoModelForMaskedLM"),Zgt.forEach(t),GPe.forEach(t),xRe=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(TA.$$.fragment,Ql),Zsr=i(Ql),yc=n(Ql,"P",{});var aQ=s(yc);elr=r(aQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Cpe=n(aQ,"CODE",{});var eht=s(Cpe);olr=r(eht,"from_pretrained()"),eht.forEach(t),rlr=r(aQ,"class method or the "),Mpe=n(aQ,"CODE",{});var oht=s(Mpe);tlr=r(oht,"from_config()"),oht.forEach(t),alr=r(aQ,`class
method.`),aQ.forEach(t),nlr=i(Ql),FA=n(Ql,"P",{});var OPe=s(FA);slr=r(OPe,"This class cannot be instantiated directly using "),Epe=n(OPe,"CODE",{});var rht=s(Epe);llr=r(rht,"__init__()"),rht.forEach(t),ilr=r(OPe," (throws an error)."),OPe.forEach(t),dlr=i(Ql),ut=n(Ql,"DIV",{class:!0});var Hl=s(ut);m(CA.$$.fragment,Hl),clr=i(Hl),ype=n(Hl,"P",{});var tht=s(ype);flr=r(tht,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),tht.forEach(t),mlr=i(Hl),wc=n(Hl,"P",{});var nQ=s(wc);glr=r(nQ,`Note:
Loading a model from its configuration file does `),wpe=n(nQ,"STRONG",{});var aht=s(wpe);hlr=r(aht,"not"),aht.forEach(t),plr=r(nQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ape=n(nQ,"CODE",{});var nht=s(Ape);_lr=r(nht,"from_pretrained()"),nht.forEach(t),ulr=r(nQ,"to load the model weights."),nQ.forEach(t),blr=i(Hl),Lpe=n(Hl,"P",{});var sht=s(Lpe);vlr=r(sht,"Examples:"),sht.forEach(t),Tlr=i(Hl),m(MA.$$.fragment,Hl),Hl.forEach(t),Flr=i(Ql),bo=n(Ql,"DIV",{class:!0});var va=s(bo);m(EA.$$.fragment,va),Clr=i(va),Bpe=n(va,"P",{});var lht=s(Bpe);Mlr=r(lht,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lht.forEach(t),Elr=i(va),Tn=n(va,"P",{});var OM=s(Tn);ylr=r(OM,"The model class to instantiate is selected based on the "),xpe=n(OM,"CODE",{});var iht=s(xpe);wlr=r(iht,"model_type"),iht.forEach(t),Alr=r(OM,` property of the config object (either
passed as an argument or loaded from `),kpe=n(OM,"CODE",{});var dht=s(kpe);Llr=r(dht,"pretrained_model_name_or_path"),dht.forEach(t),Blr=r(OM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rpe=n(OM,"CODE",{});var cht=s(Rpe);xlr=r(cht,"pretrained_model_name_or_path"),cht.forEach(t),klr=r(OM,":"),OM.forEach(t),Rlr=i(va),J=n(va,"UL",{});var ee=s(J);X6=n(ee,"LI",{});var p8e=s(X6);Spe=n(p8e,"STRONG",{});var fht=s(Spe);Slr=r(fht,"albert"),fht.forEach(t),Plr=r(p8e," \u2014 "),ZG=n(p8e,"A",{href:!0});var mht=s(ZG);$lr=r(mht,"TFAlbertForMaskedLM"),mht.forEach(t),Ilr=r(p8e," (ALBERT model)"),p8e.forEach(t),jlr=i(ee),V6=n(ee,"LI",{});var _8e=s(V6);Ppe=n(_8e,"STRONG",{});var ght=s(Ppe);Nlr=r(ght,"bert"),ght.forEach(t),Dlr=r(_8e," \u2014 "),eO=n(_8e,"A",{href:!0});var hht=s(eO);qlr=r(hht,"TFBertForMaskedLM"),hht.forEach(t),Glr=r(_8e," (BERT model)"),_8e.forEach(t),Olr=i(ee),z6=n(ee,"LI",{});var u8e=s(z6);$pe=n(u8e,"STRONG",{});var pht=s($pe);Xlr=r(pht,"camembert"),pht.forEach(t),Vlr=r(u8e," \u2014 "),oO=n(u8e,"A",{href:!0});var _ht=s(oO);zlr=r(_ht,"TFCamembertForMaskedLM"),_ht.forEach(t),Wlr=r(u8e," (CamemBERT model)"),u8e.forEach(t),Qlr=i(ee),W6=n(ee,"LI",{});var b8e=s(W6);Ipe=n(b8e,"STRONG",{});var uht=s(Ipe);Hlr=r(uht,"convbert"),uht.forEach(t),Ulr=r(b8e," \u2014 "),rO=n(b8e,"A",{href:!0});var bht=s(rO);Jlr=r(bht,"TFConvBertForMaskedLM"),bht.forEach(t),Ylr=r(b8e," (ConvBERT model)"),b8e.forEach(t),Klr=i(ee),Q6=n(ee,"LI",{});var v8e=s(Q6);jpe=n(v8e,"STRONG",{});var vht=s(jpe);Zlr=r(vht,"deberta"),vht.forEach(t),eir=r(v8e," \u2014 "),tO=n(v8e,"A",{href:!0});var Tht=s(tO);oir=r(Tht,"TFDebertaForMaskedLM"),Tht.forEach(t),rir=r(v8e," (DeBERTa model)"),v8e.forEach(t),tir=i(ee),H6=n(ee,"LI",{});var T8e=s(H6);Npe=n(T8e,"STRONG",{});var Fht=s(Npe);air=r(Fht,"deberta-v2"),Fht.forEach(t),nir=r(T8e," \u2014 "),aO=n(T8e,"A",{href:!0});var Cht=s(aO);sir=r(Cht,"TFDebertaV2ForMaskedLM"),Cht.forEach(t),lir=r(T8e," (DeBERTa-v2 model)"),T8e.forEach(t),iir=i(ee),U6=n(ee,"LI",{});var F8e=s(U6);Dpe=n(F8e,"STRONG",{});var Mht=s(Dpe);dir=r(Mht,"distilbert"),Mht.forEach(t),cir=r(F8e," \u2014 "),nO=n(F8e,"A",{href:!0});var Eht=s(nO);fir=r(Eht,"TFDistilBertForMaskedLM"),Eht.forEach(t),mir=r(F8e," (DistilBERT model)"),F8e.forEach(t),gir=i(ee),J6=n(ee,"LI",{});var C8e=s(J6);qpe=n(C8e,"STRONG",{});var yht=s(qpe);hir=r(yht,"electra"),yht.forEach(t),pir=r(C8e," \u2014 "),sO=n(C8e,"A",{href:!0});var wht=s(sO);_ir=r(wht,"TFElectraForMaskedLM"),wht.forEach(t),uir=r(C8e," (ELECTRA model)"),C8e.forEach(t),bir=i(ee),Y6=n(ee,"LI",{});var M8e=s(Y6);Gpe=n(M8e,"STRONG",{});var Aht=s(Gpe);vir=r(Aht,"flaubert"),Aht.forEach(t),Tir=r(M8e," \u2014 "),lO=n(M8e,"A",{href:!0});var Lht=s(lO);Fir=r(Lht,"TFFlaubertWithLMHeadModel"),Lht.forEach(t),Cir=r(M8e," (FlauBERT model)"),M8e.forEach(t),Mir=i(ee),K6=n(ee,"LI",{});var E8e=s(K6);Ope=n(E8e,"STRONG",{});var Bht=s(Ope);Eir=r(Bht,"funnel"),Bht.forEach(t),yir=r(E8e," \u2014 "),iO=n(E8e,"A",{href:!0});var xht=s(iO);wir=r(xht,"TFFunnelForMaskedLM"),xht.forEach(t),Air=r(E8e," (Funnel Transformer model)"),E8e.forEach(t),Lir=i(ee),Z6=n(ee,"LI",{});var y8e=s(Z6);Xpe=n(y8e,"STRONG",{});var kht=s(Xpe);Bir=r(kht,"layoutlm"),kht.forEach(t),xir=r(y8e," \u2014 "),dO=n(y8e,"A",{href:!0});var Rht=s(dO);kir=r(Rht,"TFLayoutLMForMaskedLM"),Rht.forEach(t),Rir=r(y8e," (LayoutLM model)"),y8e.forEach(t),Sir=i(ee),e0=n(ee,"LI",{});var w8e=s(e0);Vpe=n(w8e,"STRONG",{});var Sht=s(Vpe);Pir=r(Sht,"longformer"),Sht.forEach(t),$ir=r(w8e," \u2014 "),cO=n(w8e,"A",{href:!0});var Pht=s(cO);Iir=r(Pht,"TFLongformerForMaskedLM"),Pht.forEach(t),jir=r(w8e," (Longformer model)"),w8e.forEach(t),Nir=i(ee),o0=n(ee,"LI",{});var A8e=s(o0);zpe=n(A8e,"STRONG",{});var $ht=s(zpe);Dir=r($ht,"mobilebert"),$ht.forEach(t),qir=r(A8e," \u2014 "),fO=n(A8e,"A",{href:!0});var Iht=s(fO);Gir=r(Iht,"TFMobileBertForMaskedLM"),Iht.forEach(t),Oir=r(A8e," (MobileBERT model)"),A8e.forEach(t),Xir=i(ee),r0=n(ee,"LI",{});var L8e=s(r0);Wpe=n(L8e,"STRONG",{});var jht=s(Wpe);Vir=r(jht,"mpnet"),jht.forEach(t),zir=r(L8e," \u2014 "),mO=n(L8e,"A",{href:!0});var Nht=s(mO);Wir=r(Nht,"TFMPNetForMaskedLM"),Nht.forEach(t),Qir=r(L8e," (MPNet model)"),L8e.forEach(t),Hir=i(ee),t0=n(ee,"LI",{});var B8e=s(t0);Qpe=n(B8e,"STRONG",{});var Dht=s(Qpe);Uir=r(Dht,"rembert"),Dht.forEach(t),Jir=r(B8e," \u2014 "),gO=n(B8e,"A",{href:!0});var qht=s(gO);Yir=r(qht,"TFRemBertForMaskedLM"),qht.forEach(t),Kir=r(B8e," (RemBERT model)"),B8e.forEach(t),Zir=i(ee),a0=n(ee,"LI",{});var x8e=s(a0);Hpe=n(x8e,"STRONG",{});var Ght=s(Hpe);edr=r(Ght,"roberta"),Ght.forEach(t),odr=r(x8e," \u2014 "),hO=n(x8e,"A",{href:!0});var Oht=s(hO);rdr=r(Oht,"TFRobertaForMaskedLM"),Oht.forEach(t),tdr=r(x8e," (RoBERTa model)"),x8e.forEach(t),adr=i(ee),n0=n(ee,"LI",{});var k8e=s(n0);Upe=n(k8e,"STRONG",{});var Xht=s(Upe);ndr=r(Xht,"roformer"),Xht.forEach(t),sdr=r(k8e," \u2014 "),pO=n(k8e,"A",{href:!0});var Vht=s(pO);ldr=r(Vht,"TFRoFormerForMaskedLM"),Vht.forEach(t),idr=r(k8e," (RoFormer model)"),k8e.forEach(t),ddr=i(ee),s0=n(ee,"LI",{});var R8e=s(s0);Jpe=n(R8e,"STRONG",{});var zht=s(Jpe);cdr=r(zht,"tapas"),zht.forEach(t),fdr=r(R8e," \u2014 "),_O=n(R8e,"A",{href:!0});var Wht=s(_O);mdr=r(Wht,"TFTapasForMaskedLM"),Wht.forEach(t),gdr=r(R8e," (TAPAS model)"),R8e.forEach(t),hdr=i(ee),l0=n(ee,"LI",{});var S8e=s(l0);Ype=n(S8e,"STRONG",{});var Qht=s(Ype);pdr=r(Qht,"xlm"),Qht.forEach(t),_dr=r(S8e," \u2014 "),uO=n(S8e,"A",{href:!0});var Hht=s(uO);udr=r(Hht,"TFXLMWithLMHeadModel"),Hht.forEach(t),bdr=r(S8e," (XLM model)"),S8e.forEach(t),vdr=i(ee),i0=n(ee,"LI",{});var P8e=s(i0);Kpe=n(P8e,"STRONG",{});var Uht=s(Kpe);Tdr=r(Uht,"xlm-roberta"),Uht.forEach(t),Fdr=r(P8e," \u2014 "),bO=n(P8e,"A",{href:!0});var Jht=s(bO);Cdr=r(Jht,"TFXLMRobertaForMaskedLM"),Jht.forEach(t),Mdr=r(P8e," (XLM-RoBERTa model)"),P8e.forEach(t),ee.forEach(t),Edr=i(va),Zpe=n(va,"P",{});var Yht=s(Zpe);ydr=r(Yht,"Examples:"),Yht.forEach(t),wdr=i(va),m(yA.$$.fragment,va),va.forEach(t),Ql.forEach(t),kRe=i(c),Ac=n(c,"H2",{class:!0});var XPe=s(Ac);d0=n(XPe,"A",{id:!0,class:!0,href:!0});var Kht=s(d0);e_e=n(Kht,"SPAN",{});var Zht=s(e_e);m(wA.$$.fragment,Zht),Zht.forEach(t),Kht.forEach(t),Adr=i(XPe),o_e=n(XPe,"SPAN",{});var ept=s(o_e);Ldr=r(ept,"TFAutoModelForSeq2SeqLM"),ept.forEach(t),XPe.forEach(t),RRe=i(c),Er=n(c,"DIV",{class:!0});var Ul=s(Er);m(AA.$$.fragment,Ul),Bdr=i(Ul),Lc=n(Ul,"P",{});var sQ=s(Lc);xdr=r(sQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),r_e=n(sQ,"CODE",{});var opt=s(r_e);kdr=r(opt,"from_pretrained()"),opt.forEach(t),Rdr=r(sQ,"class method or the "),t_e=n(sQ,"CODE",{});var rpt=s(t_e);Sdr=r(rpt,"from_config()"),rpt.forEach(t),Pdr=r(sQ,`class
method.`),sQ.forEach(t),$dr=i(Ul),LA=n(Ul,"P",{});var VPe=s(LA);Idr=r(VPe,"This class cannot be instantiated directly using "),a_e=n(VPe,"CODE",{});var tpt=s(a_e);jdr=r(tpt,"__init__()"),tpt.forEach(t),Ndr=r(VPe," (throws an error)."),VPe.forEach(t),Ddr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(BA.$$.fragment,Jl),qdr=i(Jl),n_e=n(Jl,"P",{});var apt=s(n_e);Gdr=r(apt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),apt.forEach(t),Odr=i(Jl),Bc=n(Jl,"P",{});var lQ=s(Bc);Xdr=r(lQ,`Note:
Loading a model from its configuration file does `),s_e=n(lQ,"STRONG",{});var npt=s(s_e);Vdr=r(npt,"not"),npt.forEach(t),zdr=r(lQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),l_e=n(lQ,"CODE",{});var spt=s(l_e);Wdr=r(spt,"from_pretrained()"),spt.forEach(t),Qdr=r(lQ,"to load the model weights."),lQ.forEach(t),Hdr=i(Jl),i_e=n(Jl,"P",{});var lpt=s(i_e);Udr=r(lpt,"Examples:"),lpt.forEach(t),Jdr=i(Jl),m(xA.$$.fragment,Jl),Jl.forEach(t),Ydr=i(Ul),vo=n(Ul,"DIV",{class:!0});var Ta=s(vo);m(kA.$$.fragment,Ta),Kdr=i(Ta),d_e=n(Ta,"P",{});var ipt=s(d_e);Zdr=r(ipt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ipt.forEach(t),ecr=i(Ta),Fn=n(Ta,"P",{});var XM=s(Fn);ocr=r(XM,"The model class to instantiate is selected based on the "),c_e=n(XM,"CODE",{});var dpt=s(c_e);rcr=r(dpt,"model_type"),dpt.forEach(t),tcr=r(XM,` property of the config object (either
passed as an argument or loaded from `),f_e=n(XM,"CODE",{});var cpt=s(f_e);acr=r(cpt,"pretrained_model_name_or_path"),cpt.forEach(t),ncr=r(XM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m_e=n(XM,"CODE",{});var fpt=s(m_e);scr=r(fpt,"pretrained_model_name_or_path"),fpt.forEach(t),lcr=r(XM,":"),XM.forEach(t),icr=i(Ta),ue=n(Ta,"UL",{});var ye=s(ue);c0=n(ye,"LI",{});var $8e=s(c0);g_e=n($8e,"STRONG",{});var mpt=s(g_e);dcr=r(mpt,"bart"),mpt.forEach(t),ccr=r($8e," \u2014 "),vO=n($8e,"A",{href:!0});var gpt=s(vO);fcr=r(gpt,"TFBartForConditionalGeneration"),gpt.forEach(t),mcr=r($8e," (BART model)"),$8e.forEach(t),gcr=i(ye),f0=n(ye,"LI",{});var I8e=s(f0);h_e=n(I8e,"STRONG",{});var hpt=s(h_e);hcr=r(hpt,"blenderbot"),hpt.forEach(t),pcr=r(I8e," \u2014 "),TO=n(I8e,"A",{href:!0});var ppt=s(TO);_cr=r(ppt,"TFBlenderbotForConditionalGeneration"),ppt.forEach(t),ucr=r(I8e," (Blenderbot model)"),I8e.forEach(t),bcr=i(ye),m0=n(ye,"LI",{});var j8e=s(m0);p_e=n(j8e,"STRONG",{});var _pt=s(p_e);vcr=r(_pt,"blenderbot-small"),_pt.forEach(t),Tcr=r(j8e," \u2014 "),FO=n(j8e,"A",{href:!0});var upt=s(FO);Fcr=r(upt,"TFBlenderbotSmallForConditionalGeneration"),upt.forEach(t),Ccr=r(j8e," (BlenderbotSmall model)"),j8e.forEach(t),Mcr=i(ye),g0=n(ye,"LI",{});var N8e=s(g0);__e=n(N8e,"STRONG",{});var bpt=s(__e);Ecr=r(bpt,"encoder-decoder"),bpt.forEach(t),ycr=r(N8e," \u2014 "),CO=n(N8e,"A",{href:!0});var vpt=s(CO);wcr=r(vpt,"TFEncoderDecoderModel"),vpt.forEach(t),Acr=r(N8e," (Encoder decoder model)"),N8e.forEach(t),Lcr=i(ye),h0=n(ye,"LI",{});var D8e=s(h0);u_e=n(D8e,"STRONG",{});var Tpt=s(u_e);Bcr=r(Tpt,"led"),Tpt.forEach(t),xcr=r(D8e," \u2014 "),MO=n(D8e,"A",{href:!0});var Fpt=s(MO);kcr=r(Fpt,"TFLEDForConditionalGeneration"),Fpt.forEach(t),Rcr=r(D8e," (LED model)"),D8e.forEach(t),Scr=i(ye),p0=n(ye,"LI",{});var q8e=s(p0);b_e=n(q8e,"STRONG",{});var Cpt=s(b_e);Pcr=r(Cpt,"marian"),Cpt.forEach(t),$cr=r(q8e," \u2014 "),EO=n(q8e,"A",{href:!0});var Mpt=s(EO);Icr=r(Mpt,"TFMarianMTModel"),Mpt.forEach(t),jcr=r(q8e," (Marian model)"),q8e.forEach(t),Ncr=i(ye),_0=n(ye,"LI",{});var G8e=s(_0);v_e=n(G8e,"STRONG",{});var Ept=s(v_e);Dcr=r(Ept,"mbart"),Ept.forEach(t),qcr=r(G8e," \u2014 "),yO=n(G8e,"A",{href:!0});var ypt=s(yO);Gcr=r(ypt,"TFMBartForConditionalGeneration"),ypt.forEach(t),Ocr=r(G8e," (mBART model)"),G8e.forEach(t),Xcr=i(ye),u0=n(ye,"LI",{});var O8e=s(u0);T_e=n(O8e,"STRONG",{});var wpt=s(T_e);Vcr=r(wpt,"mt5"),wpt.forEach(t),zcr=r(O8e," \u2014 "),wO=n(O8e,"A",{href:!0});var Apt=s(wO);Wcr=r(Apt,"TFMT5ForConditionalGeneration"),Apt.forEach(t),Qcr=r(O8e," (mT5 model)"),O8e.forEach(t),Hcr=i(ye),b0=n(ye,"LI",{});var X8e=s(b0);F_e=n(X8e,"STRONG",{});var Lpt=s(F_e);Ucr=r(Lpt,"pegasus"),Lpt.forEach(t),Jcr=r(X8e," \u2014 "),AO=n(X8e,"A",{href:!0});var Bpt=s(AO);Ycr=r(Bpt,"TFPegasusForConditionalGeneration"),Bpt.forEach(t),Kcr=r(X8e," (Pegasus model)"),X8e.forEach(t),Zcr=i(ye),v0=n(ye,"LI",{});var V8e=s(v0);C_e=n(V8e,"STRONG",{});var xpt=s(C_e);efr=r(xpt,"t5"),xpt.forEach(t),ofr=r(V8e," \u2014 "),LO=n(V8e,"A",{href:!0});var kpt=s(LO);rfr=r(kpt,"TFT5ForConditionalGeneration"),kpt.forEach(t),tfr=r(V8e," (T5 model)"),V8e.forEach(t),ye.forEach(t),afr=i(Ta),M_e=n(Ta,"P",{});var Rpt=s(M_e);nfr=r(Rpt,"Examples:"),Rpt.forEach(t),sfr=i(Ta),m(RA.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),SRe=i(c),xc=n(c,"H2",{class:!0});var zPe=s(xc);T0=n(zPe,"A",{id:!0,class:!0,href:!0});var Spt=s(T0);E_e=n(Spt,"SPAN",{});var Ppt=s(E_e);m(SA.$$.fragment,Ppt),Ppt.forEach(t),Spt.forEach(t),lfr=i(zPe),y_e=n(zPe,"SPAN",{});var $pt=s(y_e);ifr=r($pt,"TFAutoModelForSequenceClassification"),$pt.forEach(t),zPe.forEach(t),PRe=i(c),yr=n(c,"DIV",{class:!0});var Yl=s(yr);m(PA.$$.fragment,Yl),dfr=i(Yl),kc=n(Yl,"P",{});var iQ=s(kc);cfr=r(iQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),w_e=n(iQ,"CODE",{});var Ipt=s(w_e);ffr=r(Ipt,"from_pretrained()"),Ipt.forEach(t),mfr=r(iQ,"class method or the "),A_e=n(iQ,"CODE",{});var jpt=s(A_e);gfr=r(jpt,"from_config()"),jpt.forEach(t),hfr=r(iQ,`class
method.`),iQ.forEach(t),pfr=i(Yl),$A=n(Yl,"P",{});var WPe=s($A);_fr=r(WPe,"This class cannot be instantiated directly using "),L_e=n(WPe,"CODE",{});var Npt=s(L_e);ufr=r(Npt,"__init__()"),Npt.forEach(t),bfr=r(WPe," (throws an error)."),WPe.forEach(t),vfr=i(Yl),vt=n(Yl,"DIV",{class:!0});var Kl=s(vt);m(IA.$$.fragment,Kl),Tfr=i(Kl),B_e=n(Kl,"P",{});var Dpt=s(B_e);Ffr=r(Dpt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Dpt.forEach(t),Cfr=i(Kl),Rc=n(Kl,"P",{});var dQ=s(Rc);Mfr=r(dQ,`Note:
Loading a model from its configuration file does `),x_e=n(dQ,"STRONG",{});var qpt=s(x_e);Efr=r(qpt,"not"),qpt.forEach(t),yfr=r(dQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),k_e=n(dQ,"CODE",{});var Gpt=s(k_e);wfr=r(Gpt,"from_pretrained()"),Gpt.forEach(t),Afr=r(dQ,"to load the model weights."),dQ.forEach(t),Lfr=i(Kl),R_e=n(Kl,"P",{});var Opt=s(R_e);Bfr=r(Opt,"Examples:"),Opt.forEach(t),xfr=i(Kl),m(jA.$$.fragment,Kl),Kl.forEach(t),kfr=i(Yl),To=n(Yl,"DIV",{class:!0});var Fa=s(To);m(NA.$$.fragment,Fa),Rfr=i(Fa),S_e=n(Fa,"P",{});var Xpt=s(S_e);Sfr=r(Xpt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Xpt.forEach(t),Pfr=i(Fa),Cn=n(Fa,"P",{});var VM=s(Cn);$fr=r(VM,"The model class to instantiate is selected based on the "),P_e=n(VM,"CODE",{});var Vpt=s(P_e);Ifr=r(Vpt,"model_type"),Vpt.forEach(t),jfr=r(VM,` property of the config object (either
passed as an argument or loaded from `),$_e=n(VM,"CODE",{});var zpt=s($_e);Nfr=r(zpt,"pretrained_model_name_or_path"),zpt.forEach(t),Dfr=r(VM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=n(VM,"CODE",{});var Wpt=s(I_e);qfr=r(Wpt,"pretrained_model_name_or_path"),Wpt.forEach(t),Gfr=r(VM,":"),VM.forEach(t),Ofr=i(Fa),X=n(Fa,"UL",{});var W=s(X);F0=n(W,"LI",{});var z8e=s(F0);j_e=n(z8e,"STRONG",{});var Qpt=s(j_e);Xfr=r(Qpt,"albert"),Qpt.forEach(t),Vfr=r(z8e," \u2014 "),BO=n(z8e,"A",{href:!0});var Hpt=s(BO);zfr=r(Hpt,"TFAlbertForSequenceClassification"),Hpt.forEach(t),Wfr=r(z8e," (ALBERT model)"),z8e.forEach(t),Qfr=i(W),C0=n(W,"LI",{});var W8e=s(C0);N_e=n(W8e,"STRONG",{});var Upt=s(N_e);Hfr=r(Upt,"bert"),Upt.forEach(t),Ufr=r(W8e," \u2014 "),xO=n(W8e,"A",{href:!0});var Jpt=s(xO);Jfr=r(Jpt,"TFBertForSequenceClassification"),Jpt.forEach(t),Yfr=r(W8e," (BERT model)"),W8e.forEach(t),Kfr=i(W),M0=n(W,"LI",{});var Q8e=s(M0);D_e=n(Q8e,"STRONG",{});var Ypt=s(D_e);Zfr=r(Ypt,"camembert"),Ypt.forEach(t),emr=r(Q8e," \u2014 "),kO=n(Q8e,"A",{href:!0});var Kpt=s(kO);omr=r(Kpt,"TFCamembertForSequenceClassification"),Kpt.forEach(t),rmr=r(Q8e," (CamemBERT model)"),Q8e.forEach(t),tmr=i(W),E0=n(W,"LI",{});var H8e=s(E0);q_e=n(H8e,"STRONG",{});var Zpt=s(q_e);amr=r(Zpt,"convbert"),Zpt.forEach(t),nmr=r(H8e," \u2014 "),RO=n(H8e,"A",{href:!0});var e_t=s(RO);smr=r(e_t,"TFConvBertForSequenceClassification"),e_t.forEach(t),lmr=r(H8e," (ConvBERT model)"),H8e.forEach(t),imr=i(W),y0=n(W,"LI",{});var U8e=s(y0);G_e=n(U8e,"STRONG",{});var o_t=s(G_e);dmr=r(o_t,"ctrl"),o_t.forEach(t),cmr=r(U8e," \u2014 "),SO=n(U8e,"A",{href:!0});var r_t=s(SO);fmr=r(r_t,"TFCTRLForSequenceClassification"),r_t.forEach(t),mmr=r(U8e," (CTRL model)"),U8e.forEach(t),gmr=i(W),w0=n(W,"LI",{});var J8e=s(w0);O_e=n(J8e,"STRONG",{});var t_t=s(O_e);hmr=r(t_t,"deberta"),t_t.forEach(t),pmr=r(J8e," \u2014 "),PO=n(J8e,"A",{href:!0});var a_t=s(PO);_mr=r(a_t,"TFDebertaForSequenceClassification"),a_t.forEach(t),umr=r(J8e," (DeBERTa model)"),J8e.forEach(t),bmr=i(W),A0=n(W,"LI",{});var Y8e=s(A0);X_e=n(Y8e,"STRONG",{});var n_t=s(X_e);vmr=r(n_t,"deberta-v2"),n_t.forEach(t),Tmr=r(Y8e," \u2014 "),$O=n(Y8e,"A",{href:!0});var s_t=s($O);Fmr=r(s_t,"TFDebertaV2ForSequenceClassification"),s_t.forEach(t),Cmr=r(Y8e," (DeBERTa-v2 model)"),Y8e.forEach(t),Mmr=i(W),L0=n(W,"LI",{});var K8e=s(L0);V_e=n(K8e,"STRONG",{});var l_t=s(V_e);Emr=r(l_t,"distilbert"),l_t.forEach(t),ymr=r(K8e," \u2014 "),IO=n(K8e,"A",{href:!0});var i_t=s(IO);wmr=r(i_t,"TFDistilBertForSequenceClassification"),i_t.forEach(t),Amr=r(K8e," (DistilBERT model)"),K8e.forEach(t),Lmr=i(W),B0=n(W,"LI",{});var Z8e=s(B0);z_e=n(Z8e,"STRONG",{});var d_t=s(z_e);Bmr=r(d_t,"electra"),d_t.forEach(t),xmr=r(Z8e," \u2014 "),jO=n(Z8e,"A",{href:!0});var c_t=s(jO);kmr=r(c_t,"TFElectraForSequenceClassification"),c_t.forEach(t),Rmr=r(Z8e," (ELECTRA model)"),Z8e.forEach(t),Smr=i(W),x0=n(W,"LI",{});var e9e=s(x0);W_e=n(e9e,"STRONG",{});var f_t=s(W_e);Pmr=r(f_t,"flaubert"),f_t.forEach(t),$mr=r(e9e," \u2014 "),NO=n(e9e,"A",{href:!0});var m_t=s(NO);Imr=r(m_t,"TFFlaubertForSequenceClassification"),m_t.forEach(t),jmr=r(e9e," (FlauBERT model)"),e9e.forEach(t),Nmr=i(W),k0=n(W,"LI",{});var o9e=s(k0);Q_e=n(o9e,"STRONG",{});var g_t=s(Q_e);Dmr=r(g_t,"funnel"),g_t.forEach(t),qmr=r(o9e," \u2014 "),DO=n(o9e,"A",{href:!0});var h_t=s(DO);Gmr=r(h_t,"TFFunnelForSequenceClassification"),h_t.forEach(t),Omr=r(o9e," (Funnel Transformer model)"),o9e.forEach(t),Xmr=i(W),R0=n(W,"LI",{});var r9e=s(R0);H_e=n(r9e,"STRONG",{});var p_t=s(H_e);Vmr=r(p_t,"gpt2"),p_t.forEach(t),zmr=r(r9e," \u2014 "),qO=n(r9e,"A",{href:!0});var __t=s(qO);Wmr=r(__t,"TFGPT2ForSequenceClassification"),__t.forEach(t),Qmr=r(r9e," (OpenAI GPT-2 model)"),r9e.forEach(t),Hmr=i(W),S0=n(W,"LI",{});var t9e=s(S0);U_e=n(t9e,"STRONG",{});var u_t=s(U_e);Umr=r(u_t,"gptj"),u_t.forEach(t),Jmr=r(t9e," \u2014 "),GO=n(t9e,"A",{href:!0});var b_t=s(GO);Ymr=r(b_t,"TFGPTJForSequenceClassification"),b_t.forEach(t),Kmr=r(t9e," (GPT-J model)"),t9e.forEach(t),Zmr=i(W),P0=n(W,"LI",{});var a9e=s(P0);J_e=n(a9e,"STRONG",{});var v_t=s(J_e);egr=r(v_t,"layoutlm"),v_t.forEach(t),ogr=r(a9e," \u2014 "),OO=n(a9e,"A",{href:!0});var T_t=s(OO);rgr=r(T_t,"TFLayoutLMForSequenceClassification"),T_t.forEach(t),tgr=r(a9e," (LayoutLM model)"),a9e.forEach(t),agr=i(W),$0=n(W,"LI",{});var n9e=s($0);Y_e=n(n9e,"STRONG",{});var F_t=s(Y_e);ngr=r(F_t,"longformer"),F_t.forEach(t),sgr=r(n9e," \u2014 "),XO=n(n9e,"A",{href:!0});var C_t=s(XO);lgr=r(C_t,"TFLongformerForSequenceClassification"),C_t.forEach(t),igr=r(n9e," (Longformer model)"),n9e.forEach(t),dgr=i(W),I0=n(W,"LI",{});var s9e=s(I0);K_e=n(s9e,"STRONG",{});var M_t=s(K_e);cgr=r(M_t,"mobilebert"),M_t.forEach(t),fgr=r(s9e," \u2014 "),VO=n(s9e,"A",{href:!0});var E_t=s(VO);mgr=r(E_t,"TFMobileBertForSequenceClassification"),E_t.forEach(t),ggr=r(s9e," (MobileBERT model)"),s9e.forEach(t),hgr=i(W),j0=n(W,"LI",{});var l9e=s(j0);Z_e=n(l9e,"STRONG",{});var y_t=s(Z_e);pgr=r(y_t,"mpnet"),y_t.forEach(t),_gr=r(l9e," \u2014 "),zO=n(l9e,"A",{href:!0});var w_t=s(zO);ugr=r(w_t,"TFMPNetForSequenceClassification"),w_t.forEach(t),bgr=r(l9e," (MPNet model)"),l9e.forEach(t),vgr=i(W),N0=n(W,"LI",{});var i9e=s(N0);eue=n(i9e,"STRONG",{});var A_t=s(eue);Tgr=r(A_t,"openai-gpt"),A_t.forEach(t),Fgr=r(i9e," \u2014 "),WO=n(i9e,"A",{href:!0});var L_t=s(WO);Cgr=r(L_t,"TFOpenAIGPTForSequenceClassification"),L_t.forEach(t),Mgr=r(i9e," (OpenAI GPT model)"),i9e.forEach(t),Egr=i(W),D0=n(W,"LI",{});var d9e=s(D0);oue=n(d9e,"STRONG",{});var B_t=s(oue);ygr=r(B_t,"rembert"),B_t.forEach(t),wgr=r(d9e," \u2014 "),QO=n(d9e,"A",{href:!0});var x_t=s(QO);Agr=r(x_t,"TFRemBertForSequenceClassification"),x_t.forEach(t),Lgr=r(d9e," (RemBERT model)"),d9e.forEach(t),Bgr=i(W),q0=n(W,"LI",{});var c9e=s(q0);rue=n(c9e,"STRONG",{});var k_t=s(rue);xgr=r(k_t,"roberta"),k_t.forEach(t),kgr=r(c9e," \u2014 "),HO=n(c9e,"A",{href:!0});var R_t=s(HO);Rgr=r(R_t,"TFRobertaForSequenceClassification"),R_t.forEach(t),Sgr=r(c9e," (RoBERTa model)"),c9e.forEach(t),Pgr=i(W),G0=n(W,"LI",{});var f9e=s(G0);tue=n(f9e,"STRONG",{});var S_t=s(tue);$gr=r(S_t,"roformer"),S_t.forEach(t),Igr=r(f9e," \u2014 "),UO=n(f9e,"A",{href:!0});var P_t=s(UO);jgr=r(P_t,"TFRoFormerForSequenceClassification"),P_t.forEach(t),Ngr=r(f9e," (RoFormer model)"),f9e.forEach(t),Dgr=i(W),O0=n(W,"LI",{});var m9e=s(O0);aue=n(m9e,"STRONG",{});var $_t=s(aue);qgr=r($_t,"tapas"),$_t.forEach(t),Ggr=r(m9e," \u2014 "),JO=n(m9e,"A",{href:!0});var I_t=s(JO);Ogr=r(I_t,"TFTapasForSequenceClassification"),I_t.forEach(t),Xgr=r(m9e," (TAPAS model)"),m9e.forEach(t),Vgr=i(W),X0=n(W,"LI",{});var g9e=s(X0);nue=n(g9e,"STRONG",{});var j_t=s(nue);zgr=r(j_t,"transfo-xl"),j_t.forEach(t),Wgr=r(g9e," \u2014 "),YO=n(g9e,"A",{href:!0});var N_t=s(YO);Qgr=r(N_t,"TFTransfoXLForSequenceClassification"),N_t.forEach(t),Hgr=r(g9e," (Transformer-XL model)"),g9e.forEach(t),Ugr=i(W),V0=n(W,"LI",{});var h9e=s(V0);sue=n(h9e,"STRONG",{});var D_t=s(sue);Jgr=r(D_t,"xlm"),D_t.forEach(t),Ygr=r(h9e," \u2014 "),KO=n(h9e,"A",{href:!0});var q_t=s(KO);Kgr=r(q_t,"TFXLMForSequenceClassification"),q_t.forEach(t),Zgr=r(h9e," (XLM model)"),h9e.forEach(t),ehr=i(W),z0=n(W,"LI",{});var p9e=s(z0);lue=n(p9e,"STRONG",{});var G_t=s(lue);ohr=r(G_t,"xlm-roberta"),G_t.forEach(t),rhr=r(p9e," \u2014 "),ZO=n(p9e,"A",{href:!0});var O_t=s(ZO);thr=r(O_t,"TFXLMRobertaForSequenceClassification"),O_t.forEach(t),ahr=r(p9e," (XLM-RoBERTa model)"),p9e.forEach(t),nhr=i(W),W0=n(W,"LI",{});var _9e=s(W0);iue=n(_9e,"STRONG",{});var X_t=s(iue);shr=r(X_t,"xlnet"),X_t.forEach(t),lhr=r(_9e," \u2014 "),eX=n(_9e,"A",{href:!0});var V_t=s(eX);ihr=r(V_t,"TFXLNetForSequenceClassification"),V_t.forEach(t),dhr=r(_9e," (XLNet model)"),_9e.forEach(t),W.forEach(t),chr=i(Fa),due=n(Fa,"P",{});var z_t=s(due);fhr=r(z_t,"Examples:"),z_t.forEach(t),mhr=i(Fa),m(DA.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),$Re=i(c),Sc=n(c,"H2",{class:!0});var QPe=s(Sc);Q0=n(QPe,"A",{id:!0,class:!0,href:!0});var W_t=s(Q0);cue=n(W_t,"SPAN",{});var Q_t=s(cue);m(qA.$$.fragment,Q_t),Q_t.forEach(t),W_t.forEach(t),ghr=i(QPe),fue=n(QPe,"SPAN",{});var H_t=s(fue);hhr=r(H_t,"TFAutoModelForMultipleChoice"),H_t.forEach(t),QPe.forEach(t),IRe=i(c),wr=n(c,"DIV",{class:!0});var Zl=s(wr);m(GA.$$.fragment,Zl),phr=i(Zl),Pc=n(Zl,"P",{});var cQ=s(Pc);_hr=r(cQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mue=n(cQ,"CODE",{});var U_t=s(mue);uhr=r(U_t,"from_pretrained()"),U_t.forEach(t),bhr=r(cQ,"class method or the "),gue=n(cQ,"CODE",{});var J_t=s(gue);vhr=r(J_t,"from_config()"),J_t.forEach(t),Thr=r(cQ,`class
method.`),cQ.forEach(t),Fhr=i(Zl),OA=n(Zl,"P",{});var HPe=s(OA);Chr=r(HPe,"This class cannot be instantiated directly using "),hue=n(HPe,"CODE",{});var Y_t=s(hue);Mhr=r(Y_t,"__init__()"),Y_t.forEach(t),Ehr=r(HPe," (throws an error)."),HPe.forEach(t),yhr=i(Zl),Tt=n(Zl,"DIV",{class:!0});var ei=s(Tt);m(XA.$$.fragment,ei),whr=i(ei),pue=n(ei,"P",{});var K_t=s(pue);Ahr=r(K_t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),K_t.forEach(t),Lhr=i(ei),$c=n(ei,"P",{});var fQ=s($c);Bhr=r(fQ,`Note:
Loading a model from its configuration file does `),_ue=n(fQ,"STRONG",{});var Z_t=s(_ue);xhr=r(Z_t,"not"),Z_t.forEach(t),khr=r(fQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uue=n(fQ,"CODE",{});var eut=s(uue);Rhr=r(eut,"from_pretrained()"),eut.forEach(t),Shr=r(fQ,"to load the model weights."),fQ.forEach(t),Phr=i(ei),bue=n(ei,"P",{});var out=s(bue);$hr=r(out,"Examples:"),out.forEach(t),Ihr=i(ei),m(VA.$$.fragment,ei),ei.forEach(t),jhr=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Ca=s(Fo);m(zA.$$.fragment,Ca),Nhr=i(Ca),vue=n(Ca,"P",{});var rut=s(vue);Dhr=r(rut,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rut.forEach(t),qhr=i(Ca),Mn=n(Ca,"P",{});var zM=s(Mn);Ghr=r(zM,"The model class to instantiate is selected based on the "),Tue=n(zM,"CODE",{});var tut=s(Tue);Ohr=r(tut,"model_type"),tut.forEach(t),Xhr=r(zM,` property of the config object (either
passed as an argument or loaded from `),Fue=n(zM,"CODE",{});var aut=s(Fue);Vhr=r(aut,"pretrained_model_name_or_path"),aut.forEach(t),zhr=r(zM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=n(zM,"CODE",{});var nut=s(Cue);Whr=r(nut,"pretrained_model_name_or_path"),nut.forEach(t),Qhr=r(zM,":"),zM.forEach(t),Hhr=i(Ca),ae=n(Ca,"UL",{});var le=s(ae);H0=n(le,"LI",{});var u9e=s(H0);Mue=n(u9e,"STRONG",{});var sut=s(Mue);Uhr=r(sut,"albert"),sut.forEach(t),Jhr=r(u9e," \u2014 "),oX=n(u9e,"A",{href:!0});var lut=s(oX);Yhr=r(lut,"TFAlbertForMultipleChoice"),lut.forEach(t),Khr=r(u9e," (ALBERT model)"),u9e.forEach(t),Zhr=i(le),U0=n(le,"LI",{});var b9e=s(U0);Eue=n(b9e,"STRONG",{});var iut=s(Eue);epr=r(iut,"bert"),iut.forEach(t),opr=r(b9e," \u2014 "),rX=n(b9e,"A",{href:!0});var dut=s(rX);rpr=r(dut,"TFBertForMultipleChoice"),dut.forEach(t),tpr=r(b9e," (BERT model)"),b9e.forEach(t),apr=i(le),J0=n(le,"LI",{});var v9e=s(J0);yue=n(v9e,"STRONG",{});var cut=s(yue);npr=r(cut,"camembert"),cut.forEach(t),spr=r(v9e," \u2014 "),tX=n(v9e,"A",{href:!0});var fut=s(tX);lpr=r(fut,"TFCamembertForMultipleChoice"),fut.forEach(t),ipr=r(v9e," (CamemBERT model)"),v9e.forEach(t),dpr=i(le),Y0=n(le,"LI",{});var T9e=s(Y0);wue=n(T9e,"STRONG",{});var mut=s(wue);cpr=r(mut,"convbert"),mut.forEach(t),fpr=r(T9e," \u2014 "),aX=n(T9e,"A",{href:!0});var gut=s(aX);mpr=r(gut,"TFConvBertForMultipleChoice"),gut.forEach(t),gpr=r(T9e," (ConvBERT model)"),T9e.forEach(t),hpr=i(le),K0=n(le,"LI",{});var F9e=s(K0);Aue=n(F9e,"STRONG",{});var hut=s(Aue);ppr=r(hut,"distilbert"),hut.forEach(t),_pr=r(F9e," \u2014 "),nX=n(F9e,"A",{href:!0});var put=s(nX);upr=r(put,"TFDistilBertForMultipleChoice"),put.forEach(t),bpr=r(F9e," (DistilBERT model)"),F9e.forEach(t),vpr=i(le),Z0=n(le,"LI",{});var C9e=s(Z0);Lue=n(C9e,"STRONG",{});var _ut=s(Lue);Tpr=r(_ut,"electra"),_ut.forEach(t),Fpr=r(C9e," \u2014 "),sX=n(C9e,"A",{href:!0});var uut=s(sX);Cpr=r(uut,"TFElectraForMultipleChoice"),uut.forEach(t),Mpr=r(C9e," (ELECTRA model)"),C9e.forEach(t),Epr=i(le),eT=n(le,"LI",{});var M9e=s(eT);Bue=n(M9e,"STRONG",{});var but=s(Bue);ypr=r(but,"flaubert"),but.forEach(t),wpr=r(M9e," \u2014 "),lX=n(M9e,"A",{href:!0});var vut=s(lX);Apr=r(vut,"TFFlaubertForMultipleChoice"),vut.forEach(t),Lpr=r(M9e," (FlauBERT model)"),M9e.forEach(t),Bpr=i(le),oT=n(le,"LI",{});var E9e=s(oT);xue=n(E9e,"STRONG",{});var Tut=s(xue);xpr=r(Tut,"funnel"),Tut.forEach(t),kpr=r(E9e," \u2014 "),iX=n(E9e,"A",{href:!0});var Fut=s(iX);Rpr=r(Fut,"TFFunnelForMultipleChoice"),Fut.forEach(t),Spr=r(E9e," (Funnel Transformer model)"),E9e.forEach(t),Ppr=i(le),rT=n(le,"LI",{});var y9e=s(rT);kue=n(y9e,"STRONG",{});var Cut=s(kue);$pr=r(Cut,"longformer"),Cut.forEach(t),Ipr=r(y9e," \u2014 "),dX=n(y9e,"A",{href:!0});var Mut=s(dX);jpr=r(Mut,"TFLongformerForMultipleChoice"),Mut.forEach(t),Npr=r(y9e," (Longformer model)"),y9e.forEach(t),Dpr=i(le),tT=n(le,"LI",{});var w9e=s(tT);Rue=n(w9e,"STRONG",{});var Eut=s(Rue);qpr=r(Eut,"mobilebert"),Eut.forEach(t),Gpr=r(w9e," \u2014 "),cX=n(w9e,"A",{href:!0});var yut=s(cX);Opr=r(yut,"TFMobileBertForMultipleChoice"),yut.forEach(t),Xpr=r(w9e," (MobileBERT model)"),w9e.forEach(t),Vpr=i(le),aT=n(le,"LI",{});var A9e=s(aT);Sue=n(A9e,"STRONG",{});var wut=s(Sue);zpr=r(wut,"mpnet"),wut.forEach(t),Wpr=r(A9e," \u2014 "),fX=n(A9e,"A",{href:!0});var Aut=s(fX);Qpr=r(Aut,"TFMPNetForMultipleChoice"),Aut.forEach(t),Hpr=r(A9e," (MPNet model)"),A9e.forEach(t),Upr=i(le),nT=n(le,"LI",{});var L9e=s(nT);Pue=n(L9e,"STRONG",{});var Lut=s(Pue);Jpr=r(Lut,"rembert"),Lut.forEach(t),Ypr=r(L9e," \u2014 "),mX=n(L9e,"A",{href:!0});var But=s(mX);Kpr=r(But,"TFRemBertForMultipleChoice"),But.forEach(t),Zpr=r(L9e," (RemBERT model)"),L9e.forEach(t),e_r=i(le),sT=n(le,"LI",{});var B9e=s(sT);$ue=n(B9e,"STRONG",{});var xut=s($ue);o_r=r(xut,"roberta"),xut.forEach(t),r_r=r(B9e," \u2014 "),gX=n(B9e,"A",{href:!0});var kut=s(gX);t_r=r(kut,"TFRobertaForMultipleChoice"),kut.forEach(t),a_r=r(B9e," (RoBERTa model)"),B9e.forEach(t),n_r=i(le),lT=n(le,"LI",{});var x9e=s(lT);Iue=n(x9e,"STRONG",{});var Rut=s(Iue);s_r=r(Rut,"roformer"),Rut.forEach(t),l_r=r(x9e," \u2014 "),hX=n(x9e,"A",{href:!0});var Sut=s(hX);i_r=r(Sut,"TFRoFormerForMultipleChoice"),Sut.forEach(t),d_r=r(x9e," (RoFormer model)"),x9e.forEach(t),c_r=i(le),iT=n(le,"LI",{});var k9e=s(iT);jue=n(k9e,"STRONG",{});var Put=s(jue);f_r=r(Put,"xlm"),Put.forEach(t),m_r=r(k9e," \u2014 "),pX=n(k9e,"A",{href:!0});var $ut=s(pX);g_r=r($ut,"TFXLMForMultipleChoice"),$ut.forEach(t),h_r=r(k9e," (XLM model)"),k9e.forEach(t),p_r=i(le),dT=n(le,"LI",{});var R9e=s(dT);Nue=n(R9e,"STRONG",{});var Iut=s(Nue);__r=r(Iut,"xlm-roberta"),Iut.forEach(t),u_r=r(R9e," \u2014 "),_X=n(R9e,"A",{href:!0});var jut=s(_X);b_r=r(jut,"TFXLMRobertaForMultipleChoice"),jut.forEach(t),v_r=r(R9e," (XLM-RoBERTa model)"),R9e.forEach(t),T_r=i(le),cT=n(le,"LI",{});var S9e=s(cT);Due=n(S9e,"STRONG",{});var Nut=s(Due);F_r=r(Nut,"xlnet"),Nut.forEach(t),C_r=r(S9e," \u2014 "),uX=n(S9e,"A",{href:!0});var Dut=s(uX);M_r=r(Dut,"TFXLNetForMultipleChoice"),Dut.forEach(t),E_r=r(S9e," (XLNet model)"),S9e.forEach(t),le.forEach(t),y_r=i(Ca),que=n(Ca,"P",{});var qut=s(que);w_r=r(qut,"Examples:"),qut.forEach(t),A_r=i(Ca),m(WA.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),jRe=i(c),Ic=n(c,"H2",{class:!0});var UPe=s(Ic);fT=n(UPe,"A",{id:!0,class:!0,href:!0});var Gut=s(fT);Gue=n(Gut,"SPAN",{});var Out=s(Gue);m(QA.$$.fragment,Out),Out.forEach(t),Gut.forEach(t),L_r=i(UPe),Oue=n(UPe,"SPAN",{});var Xut=s(Oue);B_r=r(Xut,"TFAutoModelForTableQuestionAnswering"),Xut.forEach(t),UPe.forEach(t),NRe=i(c),Ar=n(c,"DIV",{class:!0});var oi=s(Ar);m(HA.$$.fragment,oi),x_r=i(oi),jc=n(oi,"P",{});var mQ=s(jc);k_r=r(mQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Xue=n(mQ,"CODE",{});var Vut=s(Xue);R_r=r(Vut,"from_pretrained()"),Vut.forEach(t),S_r=r(mQ,"class method or the "),Vue=n(mQ,"CODE",{});var zut=s(Vue);P_r=r(zut,"from_config()"),zut.forEach(t),$_r=r(mQ,`class
method.`),mQ.forEach(t),I_r=i(oi),UA=n(oi,"P",{});var JPe=s(UA);j_r=r(JPe,"This class cannot be instantiated directly using "),zue=n(JPe,"CODE",{});var Wut=s(zue);N_r=r(Wut,"__init__()"),Wut.forEach(t),D_r=r(JPe," (throws an error)."),JPe.forEach(t),q_r=i(oi),Ft=n(oi,"DIV",{class:!0});var ri=s(Ft);m(JA.$$.fragment,ri),G_r=i(ri),Wue=n(ri,"P",{});var Qut=s(Wue);O_r=r(Qut,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Qut.forEach(t),X_r=i(ri),Nc=n(ri,"P",{});var gQ=s(Nc);V_r=r(gQ,`Note:
Loading a model from its configuration file does `),Que=n(gQ,"STRONG",{});var Hut=s(Que);z_r=r(Hut,"not"),Hut.forEach(t),W_r=r(gQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hue=n(gQ,"CODE",{});var Uut=s(Hue);Q_r=r(Uut,"from_pretrained()"),Uut.forEach(t),H_r=r(gQ,"to load the model weights."),gQ.forEach(t),U_r=i(ri),Uue=n(ri,"P",{});var Jut=s(Uue);J_r=r(Jut,"Examples:"),Jut.forEach(t),Y_r=i(ri),m(YA.$$.fragment,ri),ri.forEach(t),K_r=i(oi),Co=n(oi,"DIV",{class:!0});var Ma=s(Co);m(KA.$$.fragment,Ma),Z_r=i(Ma),Jue=n(Ma,"P",{});var Yut=s(Jue);eur=r(Yut,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Yut.forEach(t),our=i(Ma),En=n(Ma,"P",{});var WM=s(En);rur=r(WM,"The model class to instantiate is selected based on the "),Yue=n(WM,"CODE",{});var Kut=s(Yue);tur=r(Kut,"model_type"),Kut.forEach(t),aur=r(WM,` property of the config object (either
passed as an argument or loaded from `),Kue=n(WM,"CODE",{});var Zut=s(Kue);nur=r(Zut,"pretrained_model_name_or_path"),Zut.forEach(t),sur=r(WM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zue=n(WM,"CODE",{});var e1t=s(Zue);lur=r(e1t,"pretrained_model_name_or_path"),e1t.forEach(t),iur=r(WM,":"),WM.forEach(t),dur=i(Ma),e1e=n(Ma,"UL",{});var o1t=s(e1e);mT=n(o1t,"LI",{});var P9e=s(mT);o1e=n(P9e,"STRONG",{});var r1t=s(o1e);cur=r(r1t,"tapas"),r1t.forEach(t),fur=r(P9e," \u2014 "),bX=n(P9e,"A",{href:!0});var t1t=s(bX);mur=r(t1t,"TFTapasForQuestionAnswering"),t1t.forEach(t),gur=r(P9e," (TAPAS model)"),P9e.forEach(t),o1t.forEach(t),hur=i(Ma),r1e=n(Ma,"P",{});var a1t=s(r1e);pur=r(a1t,"Examples:"),a1t.forEach(t),_ur=i(Ma),m(ZA.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),DRe=i(c),Dc=n(c,"H2",{class:!0});var YPe=s(Dc);gT=n(YPe,"A",{id:!0,class:!0,href:!0});var n1t=s(gT);t1e=n(n1t,"SPAN",{});var s1t=s(t1e);m(eL.$$.fragment,s1t),s1t.forEach(t),n1t.forEach(t),uur=i(YPe),a1e=n(YPe,"SPAN",{});var l1t=s(a1e);bur=r(l1t,"TFAutoModelForTokenClassification"),l1t.forEach(t),YPe.forEach(t),qRe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(oL.$$.fragment,ti),vur=i(ti),qc=n(ti,"P",{});var hQ=s(qc);Tur=r(hQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),n1e=n(hQ,"CODE",{});var i1t=s(n1e);Fur=r(i1t,"from_pretrained()"),i1t.forEach(t),Cur=r(hQ,"class method or the "),s1e=n(hQ,"CODE",{});var d1t=s(s1e);Mur=r(d1t,"from_config()"),d1t.forEach(t),Eur=r(hQ,`class
method.`),hQ.forEach(t),yur=i(ti),rL=n(ti,"P",{});var KPe=s(rL);wur=r(KPe,"This class cannot be instantiated directly using "),l1e=n(KPe,"CODE",{});var c1t=s(l1e);Aur=r(c1t,"__init__()"),c1t.forEach(t),Lur=r(KPe," (throws an error)."),KPe.forEach(t),Bur=i(ti),Ct=n(ti,"DIV",{class:!0});var ai=s(Ct);m(tL.$$.fragment,ai),xur=i(ai),i1e=n(ai,"P",{});var f1t=s(i1e);kur=r(f1t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),f1t.forEach(t),Rur=i(ai),Gc=n(ai,"P",{});var pQ=s(Gc);Sur=r(pQ,`Note:
Loading a model from its configuration file does `),d1e=n(pQ,"STRONG",{});var m1t=s(d1e);Pur=r(m1t,"not"),m1t.forEach(t),$ur=r(pQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),c1e=n(pQ,"CODE",{});var g1t=s(c1e);Iur=r(g1t,"from_pretrained()"),g1t.forEach(t),jur=r(pQ,"to load the model weights."),pQ.forEach(t),Nur=i(ai),f1e=n(ai,"P",{});var h1t=s(f1e);Dur=r(h1t,"Examples:"),h1t.forEach(t),qur=i(ai),m(aL.$$.fragment,ai),ai.forEach(t),Gur=i(ti),Mo=n(ti,"DIV",{class:!0});var Ea=s(Mo);m(nL.$$.fragment,Ea),Our=i(Ea),m1e=n(Ea,"P",{});var p1t=s(m1e);Xur=r(p1t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),p1t.forEach(t),Vur=i(Ea),yn=n(Ea,"P",{});var QM=s(yn);zur=r(QM,"The model class to instantiate is selected based on the "),g1e=n(QM,"CODE",{});var _1t=s(g1e);Wur=r(_1t,"model_type"),_1t.forEach(t),Qur=r(QM,` property of the config object (either
passed as an argument or loaded from `),h1e=n(QM,"CODE",{});var u1t=s(h1e);Hur=r(u1t,"pretrained_model_name_or_path"),u1t.forEach(t),Uur=r(QM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p1e=n(QM,"CODE",{});var b1t=s(p1e);Jur=r(b1t,"pretrained_model_name_or_path"),b1t.forEach(t),Yur=r(QM,":"),QM.forEach(t),Kur=i(Ea),Y=n(Ea,"UL",{});var oe=s(Y);hT=n(oe,"LI",{});var $9e=s(hT);_1e=n($9e,"STRONG",{});var v1t=s(_1e);Zur=r(v1t,"albert"),v1t.forEach(t),e1r=r($9e," \u2014 "),vX=n($9e,"A",{href:!0});var T1t=s(vX);o1r=r(T1t,"TFAlbertForTokenClassification"),T1t.forEach(t),r1r=r($9e," (ALBERT model)"),$9e.forEach(t),t1r=i(oe),pT=n(oe,"LI",{});var I9e=s(pT);u1e=n(I9e,"STRONG",{});var F1t=s(u1e);a1r=r(F1t,"bert"),F1t.forEach(t),n1r=r(I9e," \u2014 "),TX=n(I9e,"A",{href:!0});var C1t=s(TX);s1r=r(C1t,"TFBertForTokenClassification"),C1t.forEach(t),l1r=r(I9e," (BERT model)"),I9e.forEach(t),i1r=i(oe),_T=n(oe,"LI",{});var j9e=s(_T);b1e=n(j9e,"STRONG",{});var M1t=s(b1e);d1r=r(M1t,"camembert"),M1t.forEach(t),c1r=r(j9e," \u2014 "),FX=n(j9e,"A",{href:!0});var E1t=s(FX);f1r=r(E1t,"TFCamembertForTokenClassification"),E1t.forEach(t),m1r=r(j9e," (CamemBERT model)"),j9e.forEach(t),g1r=i(oe),uT=n(oe,"LI",{});var N9e=s(uT);v1e=n(N9e,"STRONG",{});var y1t=s(v1e);h1r=r(y1t,"convbert"),y1t.forEach(t),p1r=r(N9e," \u2014 "),CX=n(N9e,"A",{href:!0});var w1t=s(CX);_1r=r(w1t,"TFConvBertForTokenClassification"),w1t.forEach(t),u1r=r(N9e," (ConvBERT model)"),N9e.forEach(t),b1r=i(oe),bT=n(oe,"LI",{});var D9e=s(bT);T1e=n(D9e,"STRONG",{});var A1t=s(T1e);v1r=r(A1t,"deberta"),A1t.forEach(t),T1r=r(D9e," \u2014 "),MX=n(D9e,"A",{href:!0});var L1t=s(MX);F1r=r(L1t,"TFDebertaForTokenClassification"),L1t.forEach(t),C1r=r(D9e," (DeBERTa model)"),D9e.forEach(t),M1r=i(oe),vT=n(oe,"LI",{});var q9e=s(vT);F1e=n(q9e,"STRONG",{});var B1t=s(F1e);E1r=r(B1t,"deberta-v2"),B1t.forEach(t),y1r=r(q9e," \u2014 "),EX=n(q9e,"A",{href:!0});var x1t=s(EX);w1r=r(x1t,"TFDebertaV2ForTokenClassification"),x1t.forEach(t),A1r=r(q9e," (DeBERTa-v2 model)"),q9e.forEach(t),L1r=i(oe),TT=n(oe,"LI",{});var G9e=s(TT);C1e=n(G9e,"STRONG",{});var k1t=s(C1e);B1r=r(k1t,"distilbert"),k1t.forEach(t),x1r=r(G9e," \u2014 "),yX=n(G9e,"A",{href:!0});var R1t=s(yX);k1r=r(R1t,"TFDistilBertForTokenClassification"),R1t.forEach(t),R1r=r(G9e," (DistilBERT model)"),G9e.forEach(t),S1r=i(oe),FT=n(oe,"LI",{});var O9e=s(FT);M1e=n(O9e,"STRONG",{});var S1t=s(M1e);P1r=r(S1t,"electra"),S1t.forEach(t),$1r=r(O9e," \u2014 "),wX=n(O9e,"A",{href:!0});var P1t=s(wX);I1r=r(P1t,"TFElectraForTokenClassification"),P1t.forEach(t),j1r=r(O9e," (ELECTRA model)"),O9e.forEach(t),N1r=i(oe),CT=n(oe,"LI",{});var X9e=s(CT);E1e=n(X9e,"STRONG",{});var $1t=s(E1e);D1r=r($1t,"flaubert"),$1t.forEach(t),q1r=r(X9e," \u2014 "),AX=n(X9e,"A",{href:!0});var I1t=s(AX);G1r=r(I1t,"TFFlaubertForTokenClassification"),I1t.forEach(t),O1r=r(X9e," (FlauBERT model)"),X9e.forEach(t),X1r=i(oe),MT=n(oe,"LI",{});var V9e=s(MT);y1e=n(V9e,"STRONG",{});var j1t=s(y1e);V1r=r(j1t,"funnel"),j1t.forEach(t),z1r=r(V9e," \u2014 "),LX=n(V9e,"A",{href:!0});var N1t=s(LX);W1r=r(N1t,"TFFunnelForTokenClassification"),N1t.forEach(t),Q1r=r(V9e," (Funnel Transformer model)"),V9e.forEach(t),H1r=i(oe),ET=n(oe,"LI",{});var z9e=s(ET);w1e=n(z9e,"STRONG",{});var D1t=s(w1e);U1r=r(D1t,"layoutlm"),D1t.forEach(t),J1r=r(z9e," \u2014 "),BX=n(z9e,"A",{href:!0});var q1t=s(BX);Y1r=r(q1t,"TFLayoutLMForTokenClassification"),q1t.forEach(t),K1r=r(z9e," (LayoutLM model)"),z9e.forEach(t),Z1r=i(oe),yT=n(oe,"LI",{});var W9e=s(yT);A1e=n(W9e,"STRONG",{});var G1t=s(A1e);e4r=r(G1t,"longformer"),G1t.forEach(t),o4r=r(W9e," \u2014 "),xX=n(W9e,"A",{href:!0});var O1t=s(xX);r4r=r(O1t,"TFLongformerForTokenClassification"),O1t.forEach(t),t4r=r(W9e," (Longformer model)"),W9e.forEach(t),a4r=i(oe),wT=n(oe,"LI",{});var Q9e=s(wT);L1e=n(Q9e,"STRONG",{});var X1t=s(L1e);n4r=r(X1t,"mobilebert"),X1t.forEach(t),s4r=r(Q9e," \u2014 "),kX=n(Q9e,"A",{href:!0});var V1t=s(kX);l4r=r(V1t,"TFMobileBertForTokenClassification"),V1t.forEach(t),i4r=r(Q9e," (MobileBERT model)"),Q9e.forEach(t),d4r=i(oe),AT=n(oe,"LI",{});var H9e=s(AT);B1e=n(H9e,"STRONG",{});var z1t=s(B1e);c4r=r(z1t,"mpnet"),z1t.forEach(t),f4r=r(H9e," \u2014 "),RX=n(H9e,"A",{href:!0});var W1t=s(RX);m4r=r(W1t,"TFMPNetForTokenClassification"),W1t.forEach(t),g4r=r(H9e," (MPNet model)"),H9e.forEach(t),h4r=i(oe),LT=n(oe,"LI",{});var U9e=s(LT);x1e=n(U9e,"STRONG",{});var Q1t=s(x1e);p4r=r(Q1t,"rembert"),Q1t.forEach(t),_4r=r(U9e," \u2014 "),SX=n(U9e,"A",{href:!0});var H1t=s(SX);u4r=r(H1t,"TFRemBertForTokenClassification"),H1t.forEach(t),b4r=r(U9e," (RemBERT model)"),U9e.forEach(t),v4r=i(oe),BT=n(oe,"LI",{});var J9e=s(BT);k1e=n(J9e,"STRONG",{});var U1t=s(k1e);T4r=r(U1t,"roberta"),U1t.forEach(t),F4r=r(J9e," \u2014 "),PX=n(J9e,"A",{href:!0});var J1t=s(PX);C4r=r(J1t,"TFRobertaForTokenClassification"),J1t.forEach(t),M4r=r(J9e," (RoBERTa model)"),J9e.forEach(t),E4r=i(oe),xT=n(oe,"LI",{});var Y9e=s(xT);R1e=n(Y9e,"STRONG",{});var Y1t=s(R1e);y4r=r(Y1t,"roformer"),Y1t.forEach(t),w4r=r(Y9e," \u2014 "),$X=n(Y9e,"A",{href:!0});var K1t=s($X);A4r=r(K1t,"TFRoFormerForTokenClassification"),K1t.forEach(t),L4r=r(Y9e," (RoFormer model)"),Y9e.forEach(t),B4r=i(oe),kT=n(oe,"LI",{});var K9e=s(kT);S1e=n(K9e,"STRONG",{});var Z1t=s(S1e);x4r=r(Z1t,"xlm"),Z1t.forEach(t),k4r=r(K9e," \u2014 "),IX=n(K9e,"A",{href:!0});var e4t=s(IX);R4r=r(e4t,"TFXLMForTokenClassification"),e4t.forEach(t),S4r=r(K9e," (XLM model)"),K9e.forEach(t),P4r=i(oe),RT=n(oe,"LI",{});var Z9e=s(RT);P1e=n(Z9e,"STRONG",{});var o4t=s(P1e);$4r=r(o4t,"xlm-roberta"),o4t.forEach(t),I4r=r(Z9e," \u2014 "),jX=n(Z9e,"A",{href:!0});var r4t=s(jX);j4r=r(r4t,"TFXLMRobertaForTokenClassification"),r4t.forEach(t),N4r=r(Z9e," (XLM-RoBERTa model)"),Z9e.forEach(t),D4r=i(oe),ST=n(oe,"LI",{});var eBe=s(ST);$1e=n(eBe,"STRONG",{});var t4t=s($1e);q4r=r(t4t,"xlnet"),t4t.forEach(t),G4r=r(eBe," \u2014 "),NX=n(eBe,"A",{href:!0});var a4t=s(NX);O4r=r(a4t,"TFXLNetForTokenClassification"),a4t.forEach(t),X4r=r(eBe," (XLNet model)"),eBe.forEach(t),oe.forEach(t),V4r=i(Ea),I1e=n(Ea,"P",{});var n4t=s(I1e);z4r=r(n4t,"Examples:"),n4t.forEach(t),W4r=i(Ea),m(sL.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),GRe=i(c),Oc=n(c,"H2",{class:!0});var ZPe=s(Oc);PT=n(ZPe,"A",{id:!0,class:!0,href:!0});var s4t=s(PT);j1e=n(s4t,"SPAN",{});var l4t=s(j1e);m(lL.$$.fragment,l4t),l4t.forEach(t),s4t.forEach(t),Q4r=i(ZPe),N1e=n(ZPe,"SPAN",{});var i4t=s(N1e);H4r=r(i4t,"TFAutoModelForQuestionAnswering"),i4t.forEach(t),ZPe.forEach(t),ORe=i(c),Br=n(c,"DIV",{class:!0});var ni=s(Br);m(iL.$$.fragment,ni),U4r=i(ni),Xc=n(ni,"P",{});var _Q=s(Xc);J4r=r(_Q,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),D1e=n(_Q,"CODE",{});var d4t=s(D1e);Y4r=r(d4t,"from_pretrained()"),d4t.forEach(t),K4r=r(_Q,"class method or the "),q1e=n(_Q,"CODE",{});var c4t=s(q1e);Z4r=r(c4t,"from_config()"),c4t.forEach(t),ebr=r(_Q,`class
method.`),_Q.forEach(t),obr=i(ni),dL=n(ni,"P",{});var e$e=s(dL);rbr=r(e$e,"This class cannot be instantiated directly using "),G1e=n(e$e,"CODE",{});var f4t=s(G1e);tbr=r(f4t,"__init__()"),f4t.forEach(t),abr=r(e$e," (throws an error)."),e$e.forEach(t),nbr=i(ni),Mt=n(ni,"DIV",{class:!0});var si=s(Mt);m(cL.$$.fragment,si),sbr=i(si),O1e=n(si,"P",{});var m4t=s(O1e);lbr=r(m4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),m4t.forEach(t),ibr=i(si),Vc=n(si,"P",{});var uQ=s(Vc);dbr=r(uQ,`Note:
Loading a model from its configuration file does `),X1e=n(uQ,"STRONG",{});var g4t=s(X1e);cbr=r(g4t,"not"),g4t.forEach(t),fbr=r(uQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),V1e=n(uQ,"CODE",{});var h4t=s(V1e);mbr=r(h4t,"from_pretrained()"),h4t.forEach(t),gbr=r(uQ,"to load the model weights."),uQ.forEach(t),hbr=i(si),z1e=n(si,"P",{});var p4t=s(z1e);pbr=r(p4t,"Examples:"),p4t.forEach(t),_br=i(si),m(fL.$$.fragment,si),si.forEach(t),ubr=i(ni),Eo=n(ni,"DIV",{class:!0});var ya=s(Eo);m(mL.$$.fragment,ya),bbr=i(ya),W1e=n(ya,"P",{});var _4t=s(W1e);vbr=r(_4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_4t.forEach(t),Tbr=i(ya),wn=n(ya,"P",{});var HM=s(wn);Fbr=r(HM,"The model class to instantiate is selected based on the "),Q1e=n(HM,"CODE",{});var u4t=s(Q1e);Cbr=r(u4t,"model_type"),u4t.forEach(t),Mbr=r(HM,` property of the config object (either
passed as an argument or loaded from `),H1e=n(HM,"CODE",{});var b4t=s(H1e);Ebr=r(b4t,"pretrained_model_name_or_path"),b4t.forEach(t),ybr=r(HM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=n(HM,"CODE",{});var v4t=s(U1e);wbr=r(v4t,"pretrained_model_name_or_path"),v4t.forEach(t),Abr=r(HM,":"),HM.forEach(t),Lbr=i(ya),K=n(ya,"UL",{});var re=s(K);$T=n(re,"LI",{});var oBe=s($T);J1e=n(oBe,"STRONG",{});var T4t=s(J1e);Bbr=r(T4t,"albert"),T4t.forEach(t),xbr=r(oBe," \u2014 "),DX=n(oBe,"A",{href:!0});var F4t=s(DX);kbr=r(F4t,"TFAlbertForQuestionAnswering"),F4t.forEach(t),Rbr=r(oBe," (ALBERT model)"),oBe.forEach(t),Sbr=i(re),IT=n(re,"LI",{});var rBe=s(IT);Y1e=n(rBe,"STRONG",{});var C4t=s(Y1e);Pbr=r(C4t,"bert"),C4t.forEach(t),$br=r(rBe," \u2014 "),qX=n(rBe,"A",{href:!0});var M4t=s(qX);Ibr=r(M4t,"TFBertForQuestionAnswering"),M4t.forEach(t),jbr=r(rBe," (BERT model)"),rBe.forEach(t),Nbr=i(re),jT=n(re,"LI",{});var tBe=s(jT);K1e=n(tBe,"STRONG",{});var E4t=s(K1e);Dbr=r(E4t,"camembert"),E4t.forEach(t),qbr=r(tBe," \u2014 "),GX=n(tBe,"A",{href:!0});var y4t=s(GX);Gbr=r(y4t,"TFCamembertForQuestionAnswering"),y4t.forEach(t),Obr=r(tBe," (CamemBERT model)"),tBe.forEach(t),Xbr=i(re),NT=n(re,"LI",{});var aBe=s(NT);Z1e=n(aBe,"STRONG",{});var w4t=s(Z1e);Vbr=r(w4t,"convbert"),w4t.forEach(t),zbr=r(aBe," \u2014 "),OX=n(aBe,"A",{href:!0});var A4t=s(OX);Wbr=r(A4t,"TFConvBertForQuestionAnswering"),A4t.forEach(t),Qbr=r(aBe," (ConvBERT model)"),aBe.forEach(t),Hbr=i(re),DT=n(re,"LI",{});var nBe=s(DT);e4e=n(nBe,"STRONG",{});var L4t=s(e4e);Ubr=r(L4t,"deberta"),L4t.forEach(t),Jbr=r(nBe," \u2014 "),XX=n(nBe,"A",{href:!0});var B4t=s(XX);Ybr=r(B4t,"TFDebertaForQuestionAnswering"),B4t.forEach(t),Kbr=r(nBe," (DeBERTa model)"),nBe.forEach(t),Zbr=i(re),qT=n(re,"LI",{});var sBe=s(qT);o4e=n(sBe,"STRONG",{});var x4t=s(o4e);e5r=r(x4t,"deberta-v2"),x4t.forEach(t),o5r=r(sBe," \u2014 "),VX=n(sBe,"A",{href:!0});var k4t=s(VX);r5r=r(k4t,"TFDebertaV2ForQuestionAnswering"),k4t.forEach(t),t5r=r(sBe," (DeBERTa-v2 model)"),sBe.forEach(t),a5r=i(re),GT=n(re,"LI",{});var lBe=s(GT);r4e=n(lBe,"STRONG",{});var R4t=s(r4e);n5r=r(R4t,"distilbert"),R4t.forEach(t),s5r=r(lBe," \u2014 "),zX=n(lBe,"A",{href:!0});var S4t=s(zX);l5r=r(S4t,"TFDistilBertForQuestionAnswering"),S4t.forEach(t),i5r=r(lBe," (DistilBERT model)"),lBe.forEach(t),d5r=i(re),OT=n(re,"LI",{});var iBe=s(OT);t4e=n(iBe,"STRONG",{});var P4t=s(t4e);c5r=r(P4t,"electra"),P4t.forEach(t),f5r=r(iBe," \u2014 "),WX=n(iBe,"A",{href:!0});var $4t=s(WX);m5r=r($4t,"TFElectraForQuestionAnswering"),$4t.forEach(t),g5r=r(iBe," (ELECTRA model)"),iBe.forEach(t),h5r=i(re),XT=n(re,"LI",{});var dBe=s(XT);a4e=n(dBe,"STRONG",{});var I4t=s(a4e);p5r=r(I4t,"flaubert"),I4t.forEach(t),_5r=r(dBe," \u2014 "),QX=n(dBe,"A",{href:!0});var j4t=s(QX);u5r=r(j4t,"TFFlaubertForQuestionAnsweringSimple"),j4t.forEach(t),b5r=r(dBe," (FlauBERT model)"),dBe.forEach(t),v5r=i(re),VT=n(re,"LI",{});var cBe=s(VT);n4e=n(cBe,"STRONG",{});var N4t=s(n4e);T5r=r(N4t,"funnel"),N4t.forEach(t),F5r=r(cBe," \u2014 "),HX=n(cBe,"A",{href:!0});var D4t=s(HX);C5r=r(D4t,"TFFunnelForQuestionAnswering"),D4t.forEach(t),M5r=r(cBe," (Funnel Transformer model)"),cBe.forEach(t),E5r=i(re),zT=n(re,"LI",{});var fBe=s(zT);s4e=n(fBe,"STRONG",{});var q4t=s(s4e);y5r=r(q4t,"gptj"),q4t.forEach(t),w5r=r(fBe," \u2014 "),UX=n(fBe,"A",{href:!0});var G4t=s(UX);A5r=r(G4t,"TFGPTJForQuestionAnswering"),G4t.forEach(t),L5r=r(fBe," (GPT-J model)"),fBe.forEach(t),B5r=i(re),WT=n(re,"LI",{});var mBe=s(WT);l4e=n(mBe,"STRONG",{});var O4t=s(l4e);x5r=r(O4t,"longformer"),O4t.forEach(t),k5r=r(mBe," \u2014 "),JX=n(mBe,"A",{href:!0});var X4t=s(JX);R5r=r(X4t,"TFLongformerForQuestionAnswering"),X4t.forEach(t),S5r=r(mBe," (Longformer model)"),mBe.forEach(t),P5r=i(re),QT=n(re,"LI",{});var gBe=s(QT);i4e=n(gBe,"STRONG",{});var V4t=s(i4e);$5r=r(V4t,"mobilebert"),V4t.forEach(t),I5r=r(gBe," \u2014 "),YX=n(gBe,"A",{href:!0});var z4t=s(YX);j5r=r(z4t,"TFMobileBertForQuestionAnswering"),z4t.forEach(t),N5r=r(gBe," (MobileBERT model)"),gBe.forEach(t),D5r=i(re),HT=n(re,"LI",{});var hBe=s(HT);d4e=n(hBe,"STRONG",{});var W4t=s(d4e);q5r=r(W4t,"mpnet"),W4t.forEach(t),G5r=r(hBe," \u2014 "),KX=n(hBe,"A",{href:!0});var Q4t=s(KX);O5r=r(Q4t,"TFMPNetForQuestionAnswering"),Q4t.forEach(t),X5r=r(hBe," (MPNet model)"),hBe.forEach(t),V5r=i(re),UT=n(re,"LI",{});var pBe=s(UT);c4e=n(pBe,"STRONG",{});var H4t=s(c4e);z5r=r(H4t,"rembert"),H4t.forEach(t),W5r=r(pBe," \u2014 "),ZX=n(pBe,"A",{href:!0});var U4t=s(ZX);Q5r=r(U4t,"TFRemBertForQuestionAnswering"),U4t.forEach(t),H5r=r(pBe," (RemBERT model)"),pBe.forEach(t),U5r=i(re),JT=n(re,"LI",{});var _Be=s(JT);f4e=n(_Be,"STRONG",{});var J4t=s(f4e);J5r=r(J4t,"roberta"),J4t.forEach(t),Y5r=r(_Be," \u2014 "),eV=n(_Be,"A",{href:!0});var Y4t=s(eV);K5r=r(Y4t,"TFRobertaForQuestionAnswering"),Y4t.forEach(t),Z5r=r(_Be," (RoBERTa model)"),_Be.forEach(t),e2r=i(re),YT=n(re,"LI",{});var uBe=s(YT);m4e=n(uBe,"STRONG",{});var K4t=s(m4e);o2r=r(K4t,"roformer"),K4t.forEach(t),r2r=r(uBe," \u2014 "),oV=n(uBe,"A",{href:!0});var Z4t=s(oV);t2r=r(Z4t,"TFRoFormerForQuestionAnswering"),Z4t.forEach(t),a2r=r(uBe," (RoFormer model)"),uBe.forEach(t),n2r=i(re),KT=n(re,"LI",{});var bBe=s(KT);g4e=n(bBe,"STRONG",{});var ebt=s(g4e);s2r=r(ebt,"xlm"),ebt.forEach(t),l2r=r(bBe," \u2014 "),rV=n(bBe,"A",{href:!0});var obt=s(rV);i2r=r(obt,"TFXLMForQuestionAnsweringSimple"),obt.forEach(t),d2r=r(bBe," (XLM model)"),bBe.forEach(t),c2r=i(re),ZT=n(re,"LI",{});var vBe=s(ZT);h4e=n(vBe,"STRONG",{});var rbt=s(h4e);f2r=r(rbt,"xlm-roberta"),rbt.forEach(t),m2r=r(vBe," \u2014 "),tV=n(vBe,"A",{href:!0});var tbt=s(tV);g2r=r(tbt,"TFXLMRobertaForQuestionAnswering"),tbt.forEach(t),h2r=r(vBe," (XLM-RoBERTa model)"),vBe.forEach(t),p2r=i(re),eF=n(re,"LI",{});var TBe=s(eF);p4e=n(TBe,"STRONG",{});var abt=s(p4e);_2r=r(abt,"xlnet"),abt.forEach(t),u2r=r(TBe," \u2014 "),aV=n(TBe,"A",{href:!0});var nbt=s(aV);b2r=r(nbt,"TFXLNetForQuestionAnsweringSimple"),nbt.forEach(t),v2r=r(TBe," (XLNet model)"),TBe.forEach(t),re.forEach(t),T2r=i(ya),_4e=n(ya,"P",{});var sbt=s(_4e);F2r=r(sbt,"Examples:"),sbt.forEach(t),C2r=i(ya),m(gL.$$.fragment,ya),ya.forEach(t),ni.forEach(t),XRe=i(c),zc=n(c,"H2",{class:!0});var o$e=s(zc);oF=n(o$e,"A",{id:!0,class:!0,href:!0});var lbt=s(oF);u4e=n(lbt,"SPAN",{});var ibt=s(u4e);m(hL.$$.fragment,ibt),ibt.forEach(t),lbt.forEach(t),M2r=i(o$e),b4e=n(o$e,"SPAN",{});var dbt=s(b4e);E2r=r(dbt,"TFAutoModelForVision2Seq"),dbt.forEach(t),o$e.forEach(t),VRe=i(c),xr=n(c,"DIV",{class:!0});var li=s(xr);m(pL.$$.fragment,li),y2r=i(li),Wc=n(li,"P",{});var bQ=s(Wc);w2r=r(bQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),v4e=n(bQ,"CODE",{});var cbt=s(v4e);A2r=r(cbt,"from_pretrained()"),cbt.forEach(t),L2r=r(bQ,"class method or the "),T4e=n(bQ,"CODE",{});var fbt=s(T4e);B2r=r(fbt,"from_config()"),fbt.forEach(t),x2r=r(bQ,`class
method.`),bQ.forEach(t),k2r=i(li),_L=n(li,"P",{});var r$e=s(_L);R2r=r(r$e,"This class cannot be instantiated directly using "),F4e=n(r$e,"CODE",{});var mbt=s(F4e);S2r=r(mbt,"__init__()"),mbt.forEach(t),P2r=r(r$e," (throws an error)."),r$e.forEach(t),$2r=i(li),Et=n(li,"DIV",{class:!0});var ii=s(Et);m(uL.$$.fragment,ii),I2r=i(ii),C4e=n(ii,"P",{});var gbt=s(C4e);j2r=r(gbt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),gbt.forEach(t),N2r=i(ii),Qc=n(ii,"P",{});var vQ=s(Qc);D2r=r(vQ,`Note:
Loading a model from its configuration file does `),M4e=n(vQ,"STRONG",{});var hbt=s(M4e);q2r=r(hbt,"not"),hbt.forEach(t),G2r=r(vQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),E4e=n(vQ,"CODE",{});var pbt=s(E4e);O2r=r(pbt,"from_pretrained()"),pbt.forEach(t),X2r=r(vQ,"to load the model weights."),vQ.forEach(t),V2r=i(ii),y4e=n(ii,"P",{});var _bt=s(y4e);z2r=r(_bt,"Examples:"),_bt.forEach(t),W2r=i(ii),m(bL.$$.fragment,ii),ii.forEach(t),Q2r=i(li),yo=n(li,"DIV",{class:!0});var wa=s(yo);m(vL.$$.fragment,wa),H2r=i(wa),w4e=n(wa,"P",{});var ubt=s(w4e);U2r=r(ubt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ubt.forEach(t),J2r=i(wa),An=n(wa,"P",{});var UM=s(An);Y2r=r(UM,"The model class to instantiate is selected based on the "),A4e=n(UM,"CODE",{});var bbt=s(A4e);K2r=r(bbt,"model_type"),bbt.forEach(t),Z2r=r(UM,` property of the config object (either
passed as an argument or loaded from `),L4e=n(UM,"CODE",{});var vbt=s(L4e);evr=r(vbt,"pretrained_model_name_or_path"),vbt.forEach(t),ovr=r(UM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B4e=n(UM,"CODE",{});var Tbt=s(B4e);rvr=r(Tbt,"pretrained_model_name_or_path"),Tbt.forEach(t),tvr=r(UM,":"),UM.forEach(t),avr=i(wa),x4e=n(wa,"UL",{});var Fbt=s(x4e);rF=n(Fbt,"LI",{});var FBe=s(rF);k4e=n(FBe,"STRONG",{});var Cbt=s(k4e);nvr=r(Cbt,"vision-encoder-decoder"),Cbt.forEach(t),svr=r(FBe," \u2014 "),nV=n(FBe,"A",{href:!0});var Mbt=s(nV);lvr=r(Mbt,"TFVisionEncoderDecoderModel"),Mbt.forEach(t),ivr=r(FBe," (Vision Encoder decoder model)"),FBe.forEach(t),Fbt.forEach(t),dvr=i(wa),R4e=n(wa,"P",{});var Ebt=s(R4e);cvr=r(Ebt,"Examples:"),Ebt.forEach(t),fvr=i(wa),m(TL.$$.fragment,wa),wa.forEach(t),li.forEach(t),zRe=i(c),Hc=n(c,"H2",{class:!0});var t$e=s(Hc);tF=n(t$e,"A",{id:!0,class:!0,href:!0});var ybt=s(tF);S4e=n(ybt,"SPAN",{});var wbt=s(S4e);m(FL.$$.fragment,wbt),wbt.forEach(t),ybt.forEach(t),mvr=i(t$e),P4e=n(t$e,"SPAN",{});var Abt=s(P4e);gvr=r(Abt,"TFAutoModelForSpeechSeq2Seq"),Abt.forEach(t),t$e.forEach(t),WRe=i(c),kr=n(c,"DIV",{class:!0});var di=s(kr);m(CL.$$.fragment,di),hvr=i(di),Uc=n(di,"P",{});var TQ=s(Uc);pvr=r(TQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),$4e=n(TQ,"CODE",{});var Lbt=s($4e);_vr=r(Lbt,"from_pretrained()"),Lbt.forEach(t),uvr=r(TQ,"class method or the "),I4e=n(TQ,"CODE",{});var Bbt=s(I4e);bvr=r(Bbt,"from_config()"),Bbt.forEach(t),vvr=r(TQ,`class
method.`),TQ.forEach(t),Tvr=i(di),ML=n(di,"P",{});var a$e=s(ML);Fvr=r(a$e,"This class cannot be instantiated directly using "),j4e=n(a$e,"CODE",{});var xbt=s(j4e);Cvr=r(xbt,"__init__()"),xbt.forEach(t),Mvr=r(a$e," (throws an error)."),a$e.forEach(t),Evr=i(di),yt=n(di,"DIV",{class:!0});var ci=s(yt);m(EL.$$.fragment,ci),yvr=i(ci),N4e=n(ci,"P",{});var kbt=s(N4e);wvr=r(kbt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),kbt.forEach(t),Avr=i(ci),Jc=n(ci,"P",{});var FQ=s(Jc);Lvr=r(FQ,`Note:
Loading a model from its configuration file does `),D4e=n(FQ,"STRONG",{});var Rbt=s(D4e);Bvr=r(Rbt,"not"),Rbt.forEach(t),xvr=r(FQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),q4e=n(FQ,"CODE",{});var Sbt=s(q4e);kvr=r(Sbt,"from_pretrained()"),Sbt.forEach(t),Rvr=r(FQ,"to load the model weights."),FQ.forEach(t),Svr=i(ci),G4e=n(ci,"P",{});var Pbt=s(G4e);Pvr=r(Pbt,"Examples:"),Pbt.forEach(t),$vr=i(ci),m(yL.$$.fragment,ci),ci.forEach(t),Ivr=i(di),wo=n(di,"DIV",{class:!0});var Aa=s(wo);m(wL.$$.fragment,Aa),jvr=i(Aa),O4e=n(Aa,"P",{});var $bt=s(O4e);Nvr=r($bt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),$bt.forEach(t),Dvr=i(Aa),Ln=n(Aa,"P",{});var JM=s(Ln);qvr=r(JM,"The model class to instantiate is selected based on the "),X4e=n(JM,"CODE",{});var Ibt=s(X4e);Gvr=r(Ibt,"model_type"),Ibt.forEach(t),Ovr=r(JM,` property of the config object (either
passed as an argument or loaded from `),V4e=n(JM,"CODE",{});var jbt=s(V4e);Xvr=r(jbt,"pretrained_model_name_or_path"),jbt.forEach(t),Vvr=r(JM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=n(JM,"CODE",{});var Nbt=s(z4e);zvr=r(Nbt,"pretrained_model_name_or_path"),Nbt.forEach(t),Wvr=r(JM,":"),JM.forEach(t),Qvr=i(Aa),W4e=n(Aa,"UL",{});var Dbt=s(W4e);aF=n(Dbt,"LI",{});var CBe=s(aF);Q4e=n(CBe,"STRONG",{});var qbt=s(Q4e);Hvr=r(qbt,"speech_to_text"),qbt.forEach(t),Uvr=r(CBe," \u2014 "),sV=n(CBe,"A",{href:!0});var Gbt=s(sV);Jvr=r(Gbt,"TFSpeech2TextForConditionalGeneration"),Gbt.forEach(t),Yvr=r(CBe," (Speech2Text model)"),CBe.forEach(t),Dbt.forEach(t),Kvr=i(Aa),H4e=n(Aa,"P",{});var Obt=s(H4e);Zvr=r(Obt,"Examples:"),Obt.forEach(t),e6r=i(Aa),m(AL.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),QRe=i(c),Yc=n(c,"H2",{class:!0});var n$e=s(Yc);nF=n(n$e,"A",{id:!0,class:!0,href:!0});var Xbt=s(nF);U4e=n(Xbt,"SPAN",{});var Vbt=s(U4e);m(LL.$$.fragment,Vbt),Vbt.forEach(t),Xbt.forEach(t),o6r=i(n$e),J4e=n(n$e,"SPAN",{});var zbt=s(J4e);r6r=r(zbt,"FlaxAutoModel"),zbt.forEach(t),n$e.forEach(t),HRe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(BL.$$.fragment,fi),t6r=i(fi),Kc=n(fi,"P",{});var CQ=s(Kc);a6r=r(CQ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Y4e=n(CQ,"CODE",{});var Wbt=s(Y4e);n6r=r(Wbt,"from_pretrained()"),Wbt.forEach(t),s6r=r(CQ,"class method or the "),K4e=n(CQ,"CODE",{});var Qbt=s(K4e);l6r=r(Qbt,"from_config()"),Qbt.forEach(t),i6r=r(CQ,`class
method.`),CQ.forEach(t),d6r=i(fi),xL=n(fi,"P",{});var s$e=s(xL);c6r=r(s$e,"This class cannot be instantiated directly using "),Z4e=n(s$e,"CODE",{});var Hbt=s(Z4e);f6r=r(Hbt,"__init__()"),Hbt.forEach(t),m6r=r(s$e," (throws an error)."),s$e.forEach(t),g6r=i(fi),wt=n(fi,"DIV",{class:!0});var mi=s(wt);m(kL.$$.fragment,mi),h6r=i(mi),ebe=n(mi,"P",{});var Ubt=s(ebe);p6r=r(Ubt,"Instantiates one of the base model classes of the library from a configuration."),Ubt.forEach(t),_6r=i(mi),Zc=n(mi,"P",{});var MQ=s(Zc);u6r=r(MQ,`Note:
Loading a model from its configuration file does `),obe=n(MQ,"STRONG",{});var Jbt=s(obe);b6r=r(Jbt,"not"),Jbt.forEach(t),v6r=r(MQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rbe=n(MQ,"CODE",{});var Ybt=s(rbe);T6r=r(Ybt,"from_pretrained()"),Ybt.forEach(t),F6r=r(MQ,"to load the model weights."),MQ.forEach(t),C6r=i(mi),tbe=n(mi,"P",{});var Kbt=s(tbe);M6r=r(Kbt,"Examples:"),Kbt.forEach(t),E6r=i(mi),m(RL.$$.fragment,mi),mi.forEach(t),y6r=i(fi),Ao=n(fi,"DIV",{class:!0});var La=s(Ao);m(SL.$$.fragment,La),w6r=i(La),abe=n(La,"P",{});var Zbt=s(abe);A6r=r(Zbt,"Instantiate one of the base model classes of the library from a pretrained model."),Zbt.forEach(t),L6r=i(La),Bn=n(La,"P",{});var YM=s(Bn);B6r=r(YM,"The model class to instantiate is selected based on the "),nbe=n(YM,"CODE",{});var e5t=s(nbe);x6r=r(e5t,"model_type"),e5t.forEach(t),k6r=r(YM,` property of the config object (either
passed as an argument or loaded from `),sbe=n(YM,"CODE",{});var o5t=s(sbe);R6r=r(o5t,"pretrained_model_name_or_path"),o5t.forEach(t),S6r=r(YM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=n(YM,"CODE",{});var r5t=s(lbe);P6r=r(r5t,"pretrained_model_name_or_path"),r5t.forEach(t),$6r=r(YM,":"),YM.forEach(t),I6r=i(La),z=n(La,"UL",{});var Q=s(z);sF=n(Q,"LI",{});var MBe=s(sF);ibe=n(MBe,"STRONG",{});var t5t=s(ibe);j6r=r(t5t,"albert"),t5t.forEach(t),N6r=r(MBe," \u2014 "),lV=n(MBe,"A",{href:!0});var a5t=s(lV);D6r=r(a5t,"FlaxAlbertModel"),a5t.forEach(t),q6r=r(MBe," (ALBERT model)"),MBe.forEach(t),G6r=i(Q),lF=n(Q,"LI",{});var EBe=s(lF);dbe=n(EBe,"STRONG",{});var n5t=s(dbe);O6r=r(n5t,"bart"),n5t.forEach(t),X6r=r(EBe," \u2014 "),iV=n(EBe,"A",{href:!0});var s5t=s(iV);V6r=r(s5t,"FlaxBartModel"),s5t.forEach(t),z6r=r(EBe," (BART model)"),EBe.forEach(t),W6r=i(Q),iF=n(Q,"LI",{});var yBe=s(iF);cbe=n(yBe,"STRONG",{});var l5t=s(cbe);Q6r=r(l5t,"beit"),l5t.forEach(t),H6r=r(yBe," \u2014 "),dV=n(yBe,"A",{href:!0});var i5t=s(dV);U6r=r(i5t,"FlaxBeitModel"),i5t.forEach(t),J6r=r(yBe," (BEiT model)"),yBe.forEach(t),Y6r=i(Q),dF=n(Q,"LI",{});var wBe=s(dF);fbe=n(wBe,"STRONG",{});var d5t=s(fbe);K6r=r(d5t,"bert"),d5t.forEach(t),Z6r=r(wBe," \u2014 "),cV=n(wBe,"A",{href:!0});var c5t=s(cV);e0r=r(c5t,"FlaxBertModel"),c5t.forEach(t),o0r=r(wBe," (BERT model)"),wBe.forEach(t),r0r=i(Q),cF=n(Q,"LI",{});var ABe=s(cF);mbe=n(ABe,"STRONG",{});var f5t=s(mbe);t0r=r(f5t,"big_bird"),f5t.forEach(t),a0r=r(ABe," \u2014 "),fV=n(ABe,"A",{href:!0});var m5t=s(fV);n0r=r(m5t,"FlaxBigBirdModel"),m5t.forEach(t),s0r=r(ABe," (BigBird model)"),ABe.forEach(t),l0r=i(Q),fF=n(Q,"LI",{});var LBe=s(fF);gbe=n(LBe,"STRONG",{});var g5t=s(gbe);i0r=r(g5t,"blenderbot"),g5t.forEach(t),d0r=r(LBe," \u2014 "),mV=n(LBe,"A",{href:!0});var h5t=s(mV);c0r=r(h5t,"FlaxBlenderbotModel"),h5t.forEach(t),f0r=r(LBe," (Blenderbot model)"),LBe.forEach(t),m0r=i(Q),mF=n(Q,"LI",{});var BBe=s(mF);hbe=n(BBe,"STRONG",{});var p5t=s(hbe);g0r=r(p5t,"blenderbot-small"),p5t.forEach(t),h0r=r(BBe," \u2014 "),gV=n(BBe,"A",{href:!0});var _5t=s(gV);p0r=r(_5t,"FlaxBlenderbotSmallModel"),_5t.forEach(t),_0r=r(BBe," (BlenderbotSmall model)"),BBe.forEach(t),u0r=i(Q),gF=n(Q,"LI",{});var xBe=s(gF);pbe=n(xBe,"STRONG",{});var u5t=s(pbe);b0r=r(u5t,"clip"),u5t.forEach(t),v0r=r(xBe," \u2014 "),hV=n(xBe,"A",{href:!0});var b5t=s(hV);T0r=r(b5t,"FlaxCLIPModel"),b5t.forEach(t),F0r=r(xBe," (CLIP model)"),xBe.forEach(t),C0r=i(Q),hF=n(Q,"LI",{});var kBe=s(hF);_be=n(kBe,"STRONG",{});var v5t=s(_be);M0r=r(v5t,"distilbert"),v5t.forEach(t),E0r=r(kBe," \u2014 "),pV=n(kBe,"A",{href:!0});var T5t=s(pV);y0r=r(T5t,"FlaxDistilBertModel"),T5t.forEach(t),w0r=r(kBe," (DistilBERT model)"),kBe.forEach(t),A0r=i(Q),pF=n(Q,"LI",{});var RBe=s(pF);ube=n(RBe,"STRONG",{});var F5t=s(ube);L0r=r(F5t,"electra"),F5t.forEach(t),B0r=r(RBe," \u2014 "),_V=n(RBe,"A",{href:!0});var C5t=s(_V);x0r=r(C5t,"FlaxElectraModel"),C5t.forEach(t),k0r=r(RBe," (ELECTRA model)"),RBe.forEach(t),R0r=i(Q),_F=n(Q,"LI",{});var SBe=s(_F);bbe=n(SBe,"STRONG",{});var M5t=s(bbe);S0r=r(M5t,"gpt2"),M5t.forEach(t),P0r=r(SBe," \u2014 "),uV=n(SBe,"A",{href:!0});var E5t=s(uV);$0r=r(E5t,"FlaxGPT2Model"),E5t.forEach(t),I0r=r(SBe," (OpenAI GPT-2 model)"),SBe.forEach(t),j0r=i(Q),uF=n(Q,"LI",{});var PBe=s(uF);vbe=n(PBe,"STRONG",{});var y5t=s(vbe);N0r=r(y5t,"gpt_neo"),y5t.forEach(t),D0r=r(PBe," \u2014 "),bV=n(PBe,"A",{href:!0});var w5t=s(bV);q0r=r(w5t,"FlaxGPTNeoModel"),w5t.forEach(t),G0r=r(PBe," (GPT Neo model)"),PBe.forEach(t),O0r=i(Q),bF=n(Q,"LI",{});var $Be=s(bF);Tbe=n($Be,"STRONG",{});var A5t=s(Tbe);X0r=r(A5t,"gptj"),A5t.forEach(t),V0r=r($Be," \u2014 "),vV=n($Be,"A",{href:!0});var L5t=s(vV);z0r=r(L5t,"FlaxGPTJModel"),L5t.forEach(t),W0r=r($Be," (GPT-J model)"),$Be.forEach(t),Q0r=i(Q),vF=n(Q,"LI",{});var IBe=s(vF);Fbe=n(IBe,"STRONG",{});var B5t=s(Fbe);H0r=r(B5t,"marian"),B5t.forEach(t),U0r=r(IBe," \u2014 "),TV=n(IBe,"A",{href:!0});var x5t=s(TV);J0r=r(x5t,"FlaxMarianModel"),x5t.forEach(t),Y0r=r(IBe," (Marian model)"),IBe.forEach(t),K0r=i(Q),TF=n(Q,"LI",{});var jBe=s(TF);Cbe=n(jBe,"STRONG",{});var k5t=s(Cbe);Z0r=r(k5t,"mbart"),k5t.forEach(t),eTr=r(jBe," \u2014 "),FV=n(jBe,"A",{href:!0});var R5t=s(FV);oTr=r(R5t,"FlaxMBartModel"),R5t.forEach(t),rTr=r(jBe," (mBART model)"),jBe.forEach(t),tTr=i(Q),FF=n(Q,"LI",{});var NBe=s(FF);Mbe=n(NBe,"STRONG",{});var S5t=s(Mbe);aTr=r(S5t,"mt5"),S5t.forEach(t),nTr=r(NBe," \u2014 "),CV=n(NBe,"A",{href:!0});var P5t=s(CV);sTr=r(P5t,"FlaxMT5Model"),P5t.forEach(t),lTr=r(NBe," (mT5 model)"),NBe.forEach(t),iTr=i(Q),CF=n(Q,"LI",{});var DBe=s(CF);Ebe=n(DBe,"STRONG",{});var $5t=s(Ebe);dTr=r($5t,"pegasus"),$5t.forEach(t),cTr=r(DBe," \u2014 "),MV=n(DBe,"A",{href:!0});var I5t=s(MV);fTr=r(I5t,"FlaxPegasusModel"),I5t.forEach(t),mTr=r(DBe," (Pegasus model)"),DBe.forEach(t),gTr=i(Q),MF=n(Q,"LI",{});var qBe=s(MF);ybe=n(qBe,"STRONG",{});var j5t=s(ybe);hTr=r(j5t,"roberta"),j5t.forEach(t),pTr=r(qBe," \u2014 "),EV=n(qBe,"A",{href:!0});var N5t=s(EV);_Tr=r(N5t,"FlaxRobertaModel"),N5t.forEach(t),uTr=r(qBe," (RoBERTa model)"),qBe.forEach(t),bTr=i(Q),EF=n(Q,"LI",{});var GBe=s(EF);wbe=n(GBe,"STRONG",{});var D5t=s(wbe);vTr=r(D5t,"roformer"),D5t.forEach(t),TTr=r(GBe," \u2014 "),yV=n(GBe,"A",{href:!0});var q5t=s(yV);FTr=r(q5t,"FlaxRoFormerModel"),q5t.forEach(t),CTr=r(GBe," (RoFormer model)"),GBe.forEach(t),MTr=i(Q),yF=n(Q,"LI",{});var OBe=s(yF);Abe=n(OBe,"STRONG",{});var G5t=s(Abe);ETr=r(G5t,"t5"),G5t.forEach(t),yTr=r(OBe," \u2014 "),wV=n(OBe,"A",{href:!0});var O5t=s(wV);wTr=r(O5t,"FlaxT5Model"),O5t.forEach(t),ATr=r(OBe," (T5 model)"),OBe.forEach(t),LTr=i(Q),wF=n(Q,"LI",{});var XBe=s(wF);Lbe=n(XBe,"STRONG",{});var X5t=s(Lbe);BTr=r(X5t,"vision-text-dual-encoder"),X5t.forEach(t),xTr=r(XBe," \u2014 "),AV=n(XBe,"A",{href:!0});var V5t=s(AV);kTr=r(V5t,"FlaxVisionTextDualEncoderModel"),V5t.forEach(t),RTr=r(XBe," (VisionTextDualEncoder model)"),XBe.forEach(t),STr=i(Q),AF=n(Q,"LI",{});var VBe=s(AF);Bbe=n(VBe,"STRONG",{});var z5t=s(Bbe);PTr=r(z5t,"vit"),z5t.forEach(t),$Tr=r(VBe," \u2014 "),LV=n(VBe,"A",{href:!0});var W5t=s(LV);ITr=r(W5t,"FlaxViTModel"),W5t.forEach(t),jTr=r(VBe," (ViT model)"),VBe.forEach(t),NTr=i(Q),LF=n(Q,"LI",{});var zBe=s(LF);xbe=n(zBe,"STRONG",{});var Q5t=s(xbe);DTr=r(Q5t,"wav2vec2"),Q5t.forEach(t),qTr=r(zBe," \u2014 "),BV=n(zBe,"A",{href:!0});var H5t=s(BV);GTr=r(H5t,"FlaxWav2Vec2Model"),H5t.forEach(t),OTr=r(zBe," (Wav2Vec2 model)"),zBe.forEach(t),XTr=i(Q),BF=n(Q,"LI",{});var WBe=s(BF);kbe=n(WBe,"STRONG",{});var U5t=s(kbe);VTr=r(U5t,"xglm"),U5t.forEach(t),zTr=r(WBe," \u2014 "),xV=n(WBe,"A",{href:!0});var J5t=s(xV);WTr=r(J5t,"FlaxXGLMModel"),J5t.forEach(t),QTr=r(WBe," (XGLM model)"),WBe.forEach(t),HTr=i(Q),xF=n(Q,"LI",{});var QBe=s(xF);Rbe=n(QBe,"STRONG",{});var Y5t=s(Rbe);UTr=r(Y5t,"xlm-roberta"),Y5t.forEach(t),JTr=r(QBe," \u2014 "),kV=n(QBe,"A",{href:!0});var K5t=s(kV);YTr=r(K5t,"FlaxXLMRobertaModel"),K5t.forEach(t),KTr=r(QBe," (XLM-RoBERTa model)"),QBe.forEach(t),Q.forEach(t),ZTr=i(La),Sbe=n(La,"P",{});var Z5t=s(Sbe);eFr=r(Z5t,"Examples:"),Z5t.forEach(t),oFr=i(La),m(PL.$$.fragment,La),La.forEach(t),fi.forEach(t),URe=i(c),ef=n(c,"H2",{class:!0});var l$e=s(ef);kF=n(l$e,"A",{id:!0,class:!0,href:!0});var e2t=s(kF);Pbe=n(e2t,"SPAN",{});var o2t=s(Pbe);m($L.$$.fragment,o2t),o2t.forEach(t),e2t.forEach(t),rFr=i(l$e),$be=n(l$e,"SPAN",{});var r2t=s($be);tFr=r(r2t,"FlaxAutoModelForCausalLM"),r2t.forEach(t),l$e.forEach(t),JRe=i(c),Sr=n(c,"DIV",{class:!0});var gi=s(Sr);m(IL.$$.fragment,gi),aFr=i(gi),of=n(gi,"P",{});var EQ=s(of);nFr=r(EQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Ibe=n(EQ,"CODE",{});var t2t=s(Ibe);sFr=r(t2t,"from_pretrained()"),t2t.forEach(t),lFr=r(EQ,"class method or the "),jbe=n(EQ,"CODE",{});var a2t=s(jbe);iFr=r(a2t,"from_config()"),a2t.forEach(t),dFr=r(EQ,`class
method.`),EQ.forEach(t),cFr=i(gi),jL=n(gi,"P",{});var i$e=s(jL);fFr=r(i$e,"This class cannot be instantiated directly using "),Nbe=n(i$e,"CODE",{});var n2t=s(Nbe);mFr=r(n2t,"__init__()"),n2t.forEach(t),gFr=r(i$e," (throws an error)."),i$e.forEach(t),hFr=i(gi),At=n(gi,"DIV",{class:!0});var hi=s(At);m(NL.$$.fragment,hi),pFr=i(hi),Dbe=n(hi,"P",{});var s2t=s(Dbe);_Fr=r(s2t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),s2t.forEach(t),uFr=i(hi),rf=n(hi,"P",{});var yQ=s(rf);bFr=r(yQ,`Note:
Loading a model from its configuration file does `),qbe=n(yQ,"STRONG",{});var l2t=s(qbe);vFr=r(l2t,"not"),l2t.forEach(t),TFr=r(yQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gbe=n(yQ,"CODE",{});var i2t=s(Gbe);FFr=r(i2t,"from_pretrained()"),i2t.forEach(t),CFr=r(yQ,"to load the model weights."),yQ.forEach(t),MFr=i(hi),Obe=n(hi,"P",{});var d2t=s(Obe);EFr=r(d2t,"Examples:"),d2t.forEach(t),yFr=i(hi),m(DL.$$.fragment,hi),hi.forEach(t),wFr=i(gi),Lo=n(gi,"DIV",{class:!0});var Ba=s(Lo);m(qL.$$.fragment,Ba),AFr=i(Ba),Xbe=n(Ba,"P",{});var c2t=s(Xbe);LFr=r(c2t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),c2t.forEach(t),BFr=i(Ba),xn=n(Ba,"P",{});var KM=s(xn);xFr=r(KM,"The model class to instantiate is selected based on the "),Vbe=n(KM,"CODE",{});var f2t=s(Vbe);kFr=r(f2t,"model_type"),f2t.forEach(t),RFr=r(KM,` property of the config object (either
passed as an argument or loaded from `),zbe=n(KM,"CODE",{});var m2t=s(zbe);SFr=r(m2t,"pretrained_model_name_or_path"),m2t.forEach(t),PFr=r(KM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=n(KM,"CODE",{});var g2t=s(Wbe);$Fr=r(g2t,"pretrained_model_name_or_path"),g2t.forEach(t),IFr=r(KM,":"),KM.forEach(t),jFr=i(Ba),ca=n(Ba,"UL",{});var pi=s(ca);RF=n(pi,"LI",{});var HBe=s(RF);Qbe=n(HBe,"STRONG",{});var h2t=s(Qbe);NFr=r(h2t,"bart"),h2t.forEach(t),DFr=r(HBe," \u2014 "),RV=n(HBe,"A",{href:!0});var p2t=s(RV);qFr=r(p2t,"FlaxBartForCausalLM"),p2t.forEach(t),GFr=r(HBe," (BART model)"),HBe.forEach(t),OFr=i(pi),SF=n(pi,"LI",{});var UBe=s(SF);Hbe=n(UBe,"STRONG",{});var _2t=s(Hbe);XFr=r(_2t,"gpt2"),_2t.forEach(t),VFr=r(UBe," \u2014 "),SV=n(UBe,"A",{href:!0});var u2t=s(SV);zFr=r(u2t,"FlaxGPT2LMHeadModel"),u2t.forEach(t),WFr=r(UBe," (OpenAI GPT-2 model)"),UBe.forEach(t),QFr=i(pi),PF=n(pi,"LI",{});var JBe=s(PF);Ube=n(JBe,"STRONG",{});var b2t=s(Ube);HFr=r(b2t,"gpt_neo"),b2t.forEach(t),UFr=r(JBe," \u2014 "),PV=n(JBe,"A",{href:!0});var v2t=s(PV);JFr=r(v2t,"FlaxGPTNeoForCausalLM"),v2t.forEach(t),YFr=r(JBe," (GPT Neo model)"),JBe.forEach(t),KFr=i(pi),$F=n(pi,"LI",{});var YBe=s($F);Jbe=n(YBe,"STRONG",{});var T2t=s(Jbe);ZFr=r(T2t,"gptj"),T2t.forEach(t),eCr=r(YBe," \u2014 "),$V=n(YBe,"A",{href:!0});var F2t=s($V);oCr=r(F2t,"FlaxGPTJForCausalLM"),F2t.forEach(t),rCr=r(YBe," (GPT-J model)"),YBe.forEach(t),tCr=i(pi),IF=n(pi,"LI",{});var KBe=s(IF);Ybe=n(KBe,"STRONG",{});var C2t=s(Ybe);aCr=r(C2t,"xglm"),C2t.forEach(t),nCr=r(KBe," \u2014 "),IV=n(KBe,"A",{href:!0});var M2t=s(IV);sCr=r(M2t,"FlaxXGLMForCausalLM"),M2t.forEach(t),lCr=r(KBe," (XGLM model)"),KBe.forEach(t),pi.forEach(t),iCr=i(Ba),Kbe=n(Ba,"P",{});var E2t=s(Kbe);dCr=r(E2t,"Examples:"),E2t.forEach(t),cCr=i(Ba),m(GL.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),YRe=i(c),tf=n(c,"H2",{class:!0});var d$e=s(tf);jF=n(d$e,"A",{id:!0,class:!0,href:!0});var y2t=s(jF);Zbe=n(y2t,"SPAN",{});var w2t=s(Zbe);m(OL.$$.fragment,w2t),w2t.forEach(t),y2t.forEach(t),fCr=i(d$e),e5e=n(d$e,"SPAN",{});var A2t=s(e5e);mCr=r(A2t,"FlaxAutoModelForPreTraining"),A2t.forEach(t),d$e.forEach(t),KRe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(XL.$$.fragment,_i),gCr=i(_i),af=n(_i,"P",{});var wQ=s(af);hCr=r(wQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),o5e=n(wQ,"CODE",{});var L2t=s(o5e);pCr=r(L2t,"from_pretrained()"),L2t.forEach(t),_Cr=r(wQ,"class method or the "),r5e=n(wQ,"CODE",{});var B2t=s(r5e);uCr=r(B2t,"from_config()"),B2t.forEach(t),bCr=r(wQ,`class
method.`),wQ.forEach(t),vCr=i(_i),VL=n(_i,"P",{});var c$e=s(VL);TCr=r(c$e,"This class cannot be instantiated directly using "),t5e=n(c$e,"CODE",{});var x2t=s(t5e);FCr=r(x2t,"__init__()"),x2t.forEach(t),CCr=r(c$e," (throws an error)."),c$e.forEach(t),MCr=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(zL.$$.fragment,ui),ECr=i(ui),a5e=n(ui,"P",{});var k2t=s(a5e);yCr=r(k2t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),k2t.forEach(t),wCr=i(ui),nf=n(ui,"P",{});var AQ=s(nf);ACr=r(AQ,`Note:
Loading a model from its configuration file does `),n5e=n(AQ,"STRONG",{});var R2t=s(n5e);LCr=r(R2t,"not"),R2t.forEach(t),BCr=r(AQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),s5e=n(AQ,"CODE",{});var S2t=s(s5e);xCr=r(S2t,"from_pretrained()"),S2t.forEach(t),kCr=r(AQ,"to load the model weights."),AQ.forEach(t),RCr=i(ui),l5e=n(ui,"P",{});var P2t=s(l5e);SCr=r(P2t,"Examples:"),P2t.forEach(t),PCr=i(ui),m(WL.$$.fragment,ui),ui.forEach(t),$Cr=i(_i),Bo=n(_i,"DIV",{class:!0});var xa=s(Bo);m(QL.$$.fragment,xa),ICr=i(xa),i5e=n(xa,"P",{});var $2t=s(i5e);jCr=r($2t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$2t.forEach(t),NCr=i(xa),kn=n(xa,"P",{});var ZM=s(kn);DCr=r(ZM,"The model class to instantiate is selected based on the "),d5e=n(ZM,"CODE",{});var I2t=s(d5e);qCr=r(I2t,"model_type"),I2t.forEach(t),GCr=r(ZM,` property of the config object (either
passed as an argument or loaded from `),c5e=n(ZM,"CODE",{});var j2t=s(c5e);OCr=r(j2t,"pretrained_model_name_or_path"),j2t.forEach(t),XCr=r(ZM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f5e=n(ZM,"CODE",{});var N2t=s(f5e);VCr=r(N2t,"pretrained_model_name_or_path"),N2t.forEach(t),zCr=r(ZM,":"),ZM.forEach(t),WCr=i(xa),fe=n(xa,"UL",{});var pe=s(fe);NF=n(pe,"LI",{});var ZBe=s(NF);m5e=n(ZBe,"STRONG",{});var D2t=s(m5e);QCr=r(D2t,"albert"),D2t.forEach(t),HCr=r(ZBe," \u2014 "),jV=n(ZBe,"A",{href:!0});var q2t=s(jV);UCr=r(q2t,"FlaxAlbertForPreTraining"),q2t.forEach(t),JCr=r(ZBe," (ALBERT model)"),ZBe.forEach(t),YCr=i(pe),DF=n(pe,"LI",{});var exe=s(DF);g5e=n(exe,"STRONG",{});var G2t=s(g5e);KCr=r(G2t,"bart"),G2t.forEach(t),ZCr=r(exe," \u2014 "),NV=n(exe,"A",{href:!0});var O2t=s(NV);eMr=r(O2t,"FlaxBartForConditionalGeneration"),O2t.forEach(t),oMr=r(exe," (BART model)"),exe.forEach(t),rMr=i(pe),qF=n(pe,"LI",{});var oxe=s(qF);h5e=n(oxe,"STRONG",{});var X2t=s(h5e);tMr=r(X2t,"bert"),X2t.forEach(t),aMr=r(oxe," \u2014 "),DV=n(oxe,"A",{href:!0});var V2t=s(DV);nMr=r(V2t,"FlaxBertForPreTraining"),V2t.forEach(t),sMr=r(oxe," (BERT model)"),oxe.forEach(t),lMr=i(pe),GF=n(pe,"LI",{});var rxe=s(GF);p5e=n(rxe,"STRONG",{});var z2t=s(p5e);iMr=r(z2t,"big_bird"),z2t.forEach(t),dMr=r(rxe," \u2014 "),qV=n(rxe,"A",{href:!0});var W2t=s(qV);cMr=r(W2t,"FlaxBigBirdForPreTraining"),W2t.forEach(t),fMr=r(rxe," (BigBird model)"),rxe.forEach(t),mMr=i(pe),OF=n(pe,"LI",{});var txe=s(OF);_5e=n(txe,"STRONG",{});var Q2t=s(_5e);gMr=r(Q2t,"electra"),Q2t.forEach(t),hMr=r(txe," \u2014 "),GV=n(txe,"A",{href:!0});var H2t=s(GV);pMr=r(H2t,"FlaxElectraForPreTraining"),H2t.forEach(t),_Mr=r(txe," (ELECTRA model)"),txe.forEach(t),uMr=i(pe),XF=n(pe,"LI",{});var axe=s(XF);u5e=n(axe,"STRONG",{});var U2t=s(u5e);bMr=r(U2t,"mbart"),U2t.forEach(t),vMr=r(axe," \u2014 "),OV=n(axe,"A",{href:!0});var J2t=s(OV);TMr=r(J2t,"FlaxMBartForConditionalGeneration"),J2t.forEach(t),FMr=r(axe," (mBART model)"),axe.forEach(t),CMr=i(pe),VF=n(pe,"LI",{});var nxe=s(VF);b5e=n(nxe,"STRONG",{});var Y2t=s(b5e);MMr=r(Y2t,"mt5"),Y2t.forEach(t),EMr=r(nxe," \u2014 "),XV=n(nxe,"A",{href:!0});var K2t=s(XV);yMr=r(K2t,"FlaxMT5ForConditionalGeneration"),K2t.forEach(t),wMr=r(nxe," (mT5 model)"),nxe.forEach(t),AMr=i(pe),zF=n(pe,"LI",{});var sxe=s(zF);v5e=n(sxe,"STRONG",{});var Z2t=s(v5e);LMr=r(Z2t,"roberta"),Z2t.forEach(t),BMr=r(sxe," \u2014 "),VV=n(sxe,"A",{href:!0});var evt=s(VV);xMr=r(evt,"FlaxRobertaForMaskedLM"),evt.forEach(t),kMr=r(sxe," (RoBERTa model)"),sxe.forEach(t),RMr=i(pe),WF=n(pe,"LI",{});var lxe=s(WF);T5e=n(lxe,"STRONG",{});var ovt=s(T5e);SMr=r(ovt,"roformer"),ovt.forEach(t),PMr=r(lxe," \u2014 "),zV=n(lxe,"A",{href:!0});var rvt=s(zV);$Mr=r(rvt,"FlaxRoFormerForMaskedLM"),rvt.forEach(t),IMr=r(lxe," (RoFormer model)"),lxe.forEach(t),jMr=i(pe),QF=n(pe,"LI",{});var ixe=s(QF);F5e=n(ixe,"STRONG",{});var tvt=s(F5e);NMr=r(tvt,"t5"),tvt.forEach(t),DMr=r(ixe," \u2014 "),WV=n(ixe,"A",{href:!0});var avt=s(WV);qMr=r(avt,"FlaxT5ForConditionalGeneration"),avt.forEach(t),GMr=r(ixe," (T5 model)"),ixe.forEach(t),OMr=i(pe),HF=n(pe,"LI",{});var dxe=s(HF);C5e=n(dxe,"STRONG",{});var nvt=s(C5e);XMr=r(nvt,"wav2vec2"),nvt.forEach(t),VMr=r(dxe," \u2014 "),QV=n(dxe,"A",{href:!0});var svt=s(QV);zMr=r(svt,"FlaxWav2Vec2ForPreTraining"),svt.forEach(t),WMr=r(dxe," (Wav2Vec2 model)"),dxe.forEach(t),QMr=i(pe),UF=n(pe,"LI",{});var cxe=s(UF);M5e=n(cxe,"STRONG",{});var lvt=s(M5e);HMr=r(lvt,"xlm-roberta"),lvt.forEach(t),UMr=r(cxe," \u2014 "),HV=n(cxe,"A",{href:!0});var ivt=s(HV);JMr=r(ivt,"FlaxXLMRobertaForMaskedLM"),ivt.forEach(t),YMr=r(cxe," (XLM-RoBERTa model)"),cxe.forEach(t),pe.forEach(t),KMr=i(xa),E5e=n(xa,"P",{});var dvt=s(E5e);ZMr=r(dvt,"Examples:"),dvt.forEach(t),eEr=i(xa),m(HL.$$.fragment,xa),xa.forEach(t),_i.forEach(t),ZRe=i(c),sf=n(c,"H2",{class:!0});var f$e=s(sf);JF=n(f$e,"A",{id:!0,class:!0,href:!0});var cvt=s(JF);y5e=n(cvt,"SPAN",{});var fvt=s(y5e);m(UL.$$.fragment,fvt),fvt.forEach(t),cvt.forEach(t),oEr=i(f$e),w5e=n(f$e,"SPAN",{});var mvt=s(w5e);rEr=r(mvt,"FlaxAutoModelForMaskedLM"),mvt.forEach(t),f$e.forEach(t),eSe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(JL.$$.fragment,bi),tEr=i(bi),lf=n(bi,"P",{});var LQ=s(lf);aEr=r(LQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),A5e=n(LQ,"CODE",{});var gvt=s(A5e);nEr=r(gvt,"from_pretrained()"),gvt.forEach(t),sEr=r(LQ,"class method or the "),L5e=n(LQ,"CODE",{});var hvt=s(L5e);lEr=r(hvt,"from_config()"),hvt.forEach(t),iEr=r(LQ,`class
method.`),LQ.forEach(t),dEr=i(bi),YL=n(bi,"P",{});var m$e=s(YL);cEr=r(m$e,"This class cannot be instantiated directly using "),B5e=n(m$e,"CODE",{});var pvt=s(B5e);fEr=r(pvt,"__init__()"),pvt.forEach(t),mEr=r(m$e," (throws an error)."),m$e.forEach(t),gEr=i(bi),Bt=n(bi,"DIV",{class:!0});var vi=s(Bt);m(KL.$$.fragment,vi),hEr=i(vi),x5e=n(vi,"P",{});var _vt=s(x5e);pEr=r(_vt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_vt.forEach(t),_Er=i(vi),df=n(vi,"P",{});var BQ=s(df);uEr=r(BQ,`Note:
Loading a model from its configuration file does `),k5e=n(BQ,"STRONG",{});var uvt=s(k5e);bEr=r(uvt,"not"),uvt.forEach(t),vEr=r(BQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),R5e=n(BQ,"CODE",{});var bvt=s(R5e);TEr=r(bvt,"from_pretrained()"),bvt.forEach(t),FEr=r(BQ,"to load the model weights."),BQ.forEach(t),CEr=i(vi),S5e=n(vi,"P",{});var vvt=s(S5e);MEr=r(vvt,"Examples:"),vvt.forEach(t),EEr=i(vi),m(ZL.$$.fragment,vi),vi.forEach(t),yEr=i(bi),xo=n(bi,"DIV",{class:!0});var ka=s(xo);m(e7.$$.fragment,ka),wEr=i(ka),P5e=n(ka,"P",{});var Tvt=s(P5e);AEr=r(Tvt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Tvt.forEach(t),LEr=i(ka),Rn=n(ka,"P",{});var eE=s(Rn);BEr=r(eE,"The model class to instantiate is selected based on the "),$5e=n(eE,"CODE",{});var Fvt=s($5e);xEr=r(Fvt,"model_type"),Fvt.forEach(t),kEr=r(eE,` property of the config object (either
passed as an argument or loaded from `),I5e=n(eE,"CODE",{});var Cvt=s(I5e);REr=r(Cvt,"pretrained_model_name_or_path"),Cvt.forEach(t),SEr=r(eE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j5e=n(eE,"CODE",{});var Mvt=s(j5e);PEr=r(Mvt,"pretrained_model_name_or_path"),Mvt.forEach(t),$Er=r(eE,":"),eE.forEach(t),IEr=i(ka),be=n(ka,"UL",{});var we=s(be);YF=n(we,"LI",{});var fxe=s(YF);N5e=n(fxe,"STRONG",{});var Evt=s(N5e);jEr=r(Evt,"albert"),Evt.forEach(t),NEr=r(fxe," \u2014 "),UV=n(fxe,"A",{href:!0});var yvt=s(UV);DEr=r(yvt,"FlaxAlbertForMaskedLM"),yvt.forEach(t),qEr=r(fxe," (ALBERT model)"),fxe.forEach(t),GEr=i(we),KF=n(we,"LI",{});var mxe=s(KF);D5e=n(mxe,"STRONG",{});var wvt=s(D5e);OEr=r(wvt,"bart"),wvt.forEach(t),XEr=r(mxe," \u2014 "),JV=n(mxe,"A",{href:!0});var Avt=s(JV);VEr=r(Avt,"FlaxBartForConditionalGeneration"),Avt.forEach(t),zEr=r(mxe," (BART model)"),mxe.forEach(t),WEr=i(we),ZF=n(we,"LI",{});var gxe=s(ZF);q5e=n(gxe,"STRONG",{});var Lvt=s(q5e);QEr=r(Lvt,"bert"),Lvt.forEach(t),HEr=r(gxe," \u2014 "),YV=n(gxe,"A",{href:!0});var Bvt=s(YV);UEr=r(Bvt,"FlaxBertForMaskedLM"),Bvt.forEach(t),JEr=r(gxe," (BERT model)"),gxe.forEach(t),YEr=i(we),eC=n(we,"LI",{});var hxe=s(eC);G5e=n(hxe,"STRONG",{});var xvt=s(G5e);KEr=r(xvt,"big_bird"),xvt.forEach(t),ZEr=r(hxe," \u2014 "),KV=n(hxe,"A",{href:!0});var kvt=s(KV);e3r=r(kvt,"FlaxBigBirdForMaskedLM"),kvt.forEach(t),o3r=r(hxe," (BigBird model)"),hxe.forEach(t),r3r=i(we),oC=n(we,"LI",{});var pxe=s(oC);O5e=n(pxe,"STRONG",{});var Rvt=s(O5e);t3r=r(Rvt,"distilbert"),Rvt.forEach(t),a3r=r(pxe," \u2014 "),ZV=n(pxe,"A",{href:!0});var Svt=s(ZV);n3r=r(Svt,"FlaxDistilBertForMaskedLM"),Svt.forEach(t),s3r=r(pxe," (DistilBERT model)"),pxe.forEach(t),l3r=i(we),rC=n(we,"LI",{});var _xe=s(rC);X5e=n(_xe,"STRONG",{});var Pvt=s(X5e);i3r=r(Pvt,"electra"),Pvt.forEach(t),d3r=r(_xe," \u2014 "),ez=n(_xe,"A",{href:!0});var $vt=s(ez);c3r=r($vt,"FlaxElectraForMaskedLM"),$vt.forEach(t),f3r=r(_xe," (ELECTRA model)"),_xe.forEach(t),m3r=i(we),tC=n(we,"LI",{});var uxe=s(tC);V5e=n(uxe,"STRONG",{});var Ivt=s(V5e);g3r=r(Ivt,"mbart"),Ivt.forEach(t),h3r=r(uxe," \u2014 "),oz=n(uxe,"A",{href:!0});var jvt=s(oz);p3r=r(jvt,"FlaxMBartForConditionalGeneration"),jvt.forEach(t),_3r=r(uxe," (mBART model)"),uxe.forEach(t),u3r=i(we),aC=n(we,"LI",{});var bxe=s(aC);z5e=n(bxe,"STRONG",{});var Nvt=s(z5e);b3r=r(Nvt,"roberta"),Nvt.forEach(t),v3r=r(bxe," \u2014 "),rz=n(bxe,"A",{href:!0});var Dvt=s(rz);T3r=r(Dvt,"FlaxRobertaForMaskedLM"),Dvt.forEach(t),F3r=r(bxe," (RoBERTa model)"),bxe.forEach(t),C3r=i(we),nC=n(we,"LI",{});var vxe=s(nC);W5e=n(vxe,"STRONG",{});var qvt=s(W5e);M3r=r(qvt,"roformer"),qvt.forEach(t),E3r=r(vxe," \u2014 "),tz=n(vxe,"A",{href:!0});var Gvt=s(tz);y3r=r(Gvt,"FlaxRoFormerForMaskedLM"),Gvt.forEach(t),w3r=r(vxe," (RoFormer model)"),vxe.forEach(t),A3r=i(we),sC=n(we,"LI",{});var Txe=s(sC);Q5e=n(Txe,"STRONG",{});var Ovt=s(Q5e);L3r=r(Ovt,"xlm-roberta"),Ovt.forEach(t),B3r=r(Txe," \u2014 "),az=n(Txe,"A",{href:!0});var Xvt=s(az);x3r=r(Xvt,"FlaxXLMRobertaForMaskedLM"),Xvt.forEach(t),k3r=r(Txe," (XLM-RoBERTa model)"),Txe.forEach(t),we.forEach(t),R3r=i(ka),H5e=n(ka,"P",{});var Vvt=s(H5e);S3r=r(Vvt,"Examples:"),Vvt.forEach(t),P3r=i(ka),m(o7.$$.fragment,ka),ka.forEach(t),bi.forEach(t),oSe=i(c),cf=n(c,"H2",{class:!0});var g$e=s(cf);lC=n(g$e,"A",{id:!0,class:!0,href:!0});var zvt=s(lC);U5e=n(zvt,"SPAN",{});var Wvt=s(U5e);m(r7.$$.fragment,Wvt),Wvt.forEach(t),zvt.forEach(t),$3r=i(g$e),J5e=n(g$e,"SPAN",{});var Qvt=s(J5e);I3r=r(Qvt,"FlaxAutoModelForSeq2SeqLM"),Qvt.forEach(t),g$e.forEach(t),rSe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);m(t7.$$.fragment,Ti),j3r=i(Ti),ff=n(Ti,"P",{});var xQ=s(ff);N3r=r(xQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Y5e=n(xQ,"CODE",{});var Hvt=s(Y5e);D3r=r(Hvt,"from_pretrained()"),Hvt.forEach(t),q3r=r(xQ,"class method or the "),K5e=n(xQ,"CODE",{});var Uvt=s(K5e);G3r=r(Uvt,"from_config()"),Uvt.forEach(t),O3r=r(xQ,`class
method.`),xQ.forEach(t),X3r=i(Ti),a7=n(Ti,"P",{});var h$e=s(a7);V3r=r(h$e,"This class cannot be instantiated directly using "),Z5e=n(h$e,"CODE",{});var Jvt=s(Z5e);z3r=r(Jvt,"__init__()"),Jvt.forEach(t),W3r=r(h$e," (throws an error)."),h$e.forEach(t),Q3r=i(Ti),xt=n(Ti,"DIV",{class:!0});var Fi=s(xt);m(n7.$$.fragment,Fi),H3r=i(Fi),e2e=n(Fi,"P",{});var Yvt=s(e2e);U3r=r(Yvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Yvt.forEach(t),J3r=i(Fi),mf=n(Fi,"P",{});var kQ=s(mf);Y3r=r(kQ,`Note:
Loading a model from its configuration file does `),o2e=n(kQ,"STRONG",{});var Kvt=s(o2e);K3r=r(Kvt,"not"),Kvt.forEach(t),Z3r=r(kQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),r2e=n(kQ,"CODE",{});var Zvt=s(r2e);eyr=r(Zvt,"from_pretrained()"),Zvt.forEach(t),oyr=r(kQ,"to load the model weights."),kQ.forEach(t),ryr=i(Fi),t2e=n(Fi,"P",{});var e6t=s(t2e);tyr=r(e6t,"Examples:"),e6t.forEach(t),ayr=i(Fi),m(s7.$$.fragment,Fi),Fi.forEach(t),nyr=i(Ti),ko=n(Ti,"DIV",{class:!0});var Ra=s(ko);m(l7.$$.fragment,Ra),syr=i(Ra),a2e=n(Ra,"P",{});var o6t=s(a2e);lyr=r(o6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),o6t.forEach(t),iyr=i(Ra),Sn=n(Ra,"P",{});var oE=s(Sn);dyr=r(oE,"The model class to instantiate is selected based on the "),n2e=n(oE,"CODE",{});var r6t=s(n2e);cyr=r(r6t,"model_type"),r6t.forEach(t),fyr=r(oE,` property of the config object (either
passed as an argument or loaded from `),s2e=n(oE,"CODE",{});var t6t=s(s2e);myr=r(t6t,"pretrained_model_name_or_path"),t6t.forEach(t),gyr=r(oE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=n(oE,"CODE",{});var a6t=s(l2e);hyr=r(a6t,"pretrained_model_name_or_path"),a6t.forEach(t),pyr=r(oE,":"),oE.forEach(t),_yr=i(Ra),Me=n(Ra,"UL",{});var so=s(Me);iC=n(so,"LI",{});var Fxe=s(iC);i2e=n(Fxe,"STRONG",{});var n6t=s(i2e);uyr=r(n6t,"bart"),n6t.forEach(t),byr=r(Fxe," \u2014 "),nz=n(Fxe,"A",{href:!0});var s6t=s(nz);vyr=r(s6t,"FlaxBartForConditionalGeneration"),s6t.forEach(t),Tyr=r(Fxe," (BART model)"),Fxe.forEach(t),Fyr=i(so),dC=n(so,"LI",{});var Cxe=s(dC);d2e=n(Cxe,"STRONG",{});var l6t=s(d2e);Cyr=r(l6t,"blenderbot"),l6t.forEach(t),Myr=r(Cxe," \u2014 "),sz=n(Cxe,"A",{href:!0});var i6t=s(sz);Eyr=r(i6t,"FlaxBlenderbotForConditionalGeneration"),i6t.forEach(t),yyr=r(Cxe," (Blenderbot model)"),Cxe.forEach(t),wyr=i(so),cC=n(so,"LI",{});var Mxe=s(cC);c2e=n(Mxe,"STRONG",{});var d6t=s(c2e);Ayr=r(d6t,"blenderbot-small"),d6t.forEach(t),Lyr=r(Mxe," \u2014 "),lz=n(Mxe,"A",{href:!0});var c6t=s(lz);Byr=r(c6t,"FlaxBlenderbotSmallForConditionalGeneration"),c6t.forEach(t),xyr=r(Mxe," (BlenderbotSmall model)"),Mxe.forEach(t),kyr=i(so),fC=n(so,"LI",{});var Exe=s(fC);f2e=n(Exe,"STRONG",{});var f6t=s(f2e);Ryr=r(f6t,"encoder-decoder"),f6t.forEach(t),Syr=r(Exe," \u2014 "),iz=n(Exe,"A",{href:!0});var m6t=s(iz);Pyr=r(m6t,"FlaxEncoderDecoderModel"),m6t.forEach(t),$yr=r(Exe," (Encoder decoder model)"),Exe.forEach(t),Iyr=i(so),mC=n(so,"LI",{});var yxe=s(mC);m2e=n(yxe,"STRONG",{});var g6t=s(m2e);jyr=r(g6t,"marian"),g6t.forEach(t),Nyr=r(yxe," \u2014 "),dz=n(yxe,"A",{href:!0});var h6t=s(dz);Dyr=r(h6t,"FlaxMarianMTModel"),h6t.forEach(t),qyr=r(yxe," (Marian model)"),yxe.forEach(t),Gyr=i(so),gC=n(so,"LI",{});var wxe=s(gC);g2e=n(wxe,"STRONG",{});var p6t=s(g2e);Oyr=r(p6t,"mbart"),p6t.forEach(t),Xyr=r(wxe," \u2014 "),cz=n(wxe,"A",{href:!0});var _6t=s(cz);Vyr=r(_6t,"FlaxMBartForConditionalGeneration"),_6t.forEach(t),zyr=r(wxe," (mBART model)"),wxe.forEach(t),Wyr=i(so),hC=n(so,"LI",{});var Axe=s(hC);h2e=n(Axe,"STRONG",{});var u6t=s(h2e);Qyr=r(u6t,"mt5"),u6t.forEach(t),Hyr=r(Axe," \u2014 "),fz=n(Axe,"A",{href:!0});var b6t=s(fz);Uyr=r(b6t,"FlaxMT5ForConditionalGeneration"),b6t.forEach(t),Jyr=r(Axe," (mT5 model)"),Axe.forEach(t),Yyr=i(so),pC=n(so,"LI",{});var Lxe=s(pC);p2e=n(Lxe,"STRONG",{});var v6t=s(p2e);Kyr=r(v6t,"pegasus"),v6t.forEach(t),Zyr=r(Lxe," \u2014 "),mz=n(Lxe,"A",{href:!0});var T6t=s(mz);ewr=r(T6t,"FlaxPegasusForConditionalGeneration"),T6t.forEach(t),owr=r(Lxe," (Pegasus model)"),Lxe.forEach(t),rwr=i(so),_C=n(so,"LI",{});var Bxe=s(_C);_2e=n(Bxe,"STRONG",{});var F6t=s(_2e);twr=r(F6t,"t5"),F6t.forEach(t),awr=r(Bxe," \u2014 "),gz=n(Bxe,"A",{href:!0});var C6t=s(gz);nwr=r(C6t,"FlaxT5ForConditionalGeneration"),C6t.forEach(t),swr=r(Bxe," (T5 model)"),Bxe.forEach(t),so.forEach(t),lwr=i(Ra),u2e=n(Ra,"P",{});var M6t=s(u2e);iwr=r(M6t,"Examples:"),M6t.forEach(t),dwr=i(Ra),m(i7.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),tSe=i(c),gf=n(c,"H2",{class:!0});var p$e=s(gf);uC=n(p$e,"A",{id:!0,class:!0,href:!0});var E6t=s(uC);b2e=n(E6t,"SPAN",{});var y6t=s(b2e);m(d7.$$.fragment,y6t),y6t.forEach(t),E6t.forEach(t),cwr=i(p$e),v2e=n(p$e,"SPAN",{});var w6t=s(v2e);fwr=r(w6t,"FlaxAutoModelForSequenceClassification"),w6t.forEach(t),p$e.forEach(t),aSe=i(c),jr=n(c,"DIV",{class:!0});var Ci=s(jr);m(c7.$$.fragment,Ci),mwr=i(Ci),hf=n(Ci,"P",{});var RQ=s(hf);gwr=r(RQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),T2e=n(RQ,"CODE",{});var A6t=s(T2e);hwr=r(A6t,"from_pretrained()"),A6t.forEach(t),pwr=r(RQ,"class method or the "),F2e=n(RQ,"CODE",{});var L6t=s(F2e);_wr=r(L6t,"from_config()"),L6t.forEach(t),uwr=r(RQ,`class
method.`),RQ.forEach(t),bwr=i(Ci),f7=n(Ci,"P",{});var _$e=s(f7);vwr=r(_$e,"This class cannot be instantiated directly using "),C2e=n(_$e,"CODE",{});var B6t=s(C2e);Twr=r(B6t,"__init__()"),B6t.forEach(t),Fwr=r(_$e," (throws an error)."),_$e.forEach(t),Cwr=i(Ci),kt=n(Ci,"DIV",{class:!0});var Mi=s(kt);m(m7.$$.fragment,Mi),Mwr=i(Mi),M2e=n(Mi,"P",{});var x6t=s(M2e);Ewr=r(x6t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),x6t.forEach(t),ywr=i(Mi),pf=n(Mi,"P",{});var SQ=s(pf);wwr=r(SQ,`Note:
Loading a model from its configuration file does `),E2e=n(SQ,"STRONG",{});var k6t=s(E2e);Awr=r(k6t,"not"),k6t.forEach(t),Lwr=r(SQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),y2e=n(SQ,"CODE",{});var R6t=s(y2e);Bwr=r(R6t,"from_pretrained()"),R6t.forEach(t),xwr=r(SQ,"to load the model weights."),SQ.forEach(t),kwr=i(Mi),w2e=n(Mi,"P",{});var S6t=s(w2e);Rwr=r(S6t,"Examples:"),S6t.forEach(t),Swr=i(Mi),m(g7.$$.fragment,Mi),Mi.forEach(t),Pwr=i(Ci),Ro=n(Ci,"DIV",{class:!0});var Sa=s(Ro);m(h7.$$.fragment,Sa),$wr=i(Sa),A2e=n(Sa,"P",{});var P6t=s(A2e);Iwr=r(P6t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),P6t.forEach(t),jwr=i(Sa),Pn=n(Sa,"P",{});var rE=s(Pn);Nwr=r(rE,"The model class to instantiate is selected based on the "),L2e=n(rE,"CODE",{});var $6t=s(L2e);Dwr=r($6t,"model_type"),$6t.forEach(t),qwr=r(rE,` property of the config object (either
passed as an argument or loaded from `),B2e=n(rE,"CODE",{});var I6t=s(B2e);Gwr=r(I6t,"pretrained_model_name_or_path"),I6t.forEach(t),Owr=r(rE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x2e=n(rE,"CODE",{});var j6t=s(x2e);Xwr=r(j6t,"pretrained_model_name_or_path"),j6t.forEach(t),Vwr=r(rE,":"),rE.forEach(t),zwr=i(Sa),ve=n(Sa,"UL",{});var Ae=s(ve);bC=n(Ae,"LI",{});var xxe=s(bC);k2e=n(xxe,"STRONG",{});var N6t=s(k2e);Wwr=r(N6t,"albert"),N6t.forEach(t),Qwr=r(xxe," \u2014 "),hz=n(xxe,"A",{href:!0});var D6t=s(hz);Hwr=r(D6t,"FlaxAlbertForSequenceClassification"),D6t.forEach(t),Uwr=r(xxe," (ALBERT model)"),xxe.forEach(t),Jwr=i(Ae),vC=n(Ae,"LI",{});var kxe=s(vC);R2e=n(kxe,"STRONG",{});var q6t=s(R2e);Ywr=r(q6t,"bart"),q6t.forEach(t),Kwr=r(kxe," \u2014 "),pz=n(kxe,"A",{href:!0});var G6t=s(pz);Zwr=r(G6t,"FlaxBartForSequenceClassification"),G6t.forEach(t),eAr=r(kxe," (BART model)"),kxe.forEach(t),oAr=i(Ae),TC=n(Ae,"LI",{});var Rxe=s(TC);S2e=n(Rxe,"STRONG",{});var O6t=s(S2e);rAr=r(O6t,"bert"),O6t.forEach(t),tAr=r(Rxe," \u2014 "),_z=n(Rxe,"A",{href:!0});var X6t=s(_z);aAr=r(X6t,"FlaxBertForSequenceClassification"),X6t.forEach(t),nAr=r(Rxe," (BERT model)"),Rxe.forEach(t),sAr=i(Ae),FC=n(Ae,"LI",{});var Sxe=s(FC);P2e=n(Sxe,"STRONG",{});var V6t=s(P2e);lAr=r(V6t,"big_bird"),V6t.forEach(t),iAr=r(Sxe," \u2014 "),uz=n(Sxe,"A",{href:!0});var z6t=s(uz);dAr=r(z6t,"FlaxBigBirdForSequenceClassification"),z6t.forEach(t),cAr=r(Sxe," (BigBird model)"),Sxe.forEach(t),fAr=i(Ae),CC=n(Ae,"LI",{});var Pxe=s(CC);$2e=n(Pxe,"STRONG",{});var W6t=s($2e);mAr=r(W6t,"distilbert"),W6t.forEach(t),gAr=r(Pxe," \u2014 "),bz=n(Pxe,"A",{href:!0});var Q6t=s(bz);hAr=r(Q6t,"FlaxDistilBertForSequenceClassification"),Q6t.forEach(t),pAr=r(Pxe," (DistilBERT model)"),Pxe.forEach(t),_Ar=i(Ae),MC=n(Ae,"LI",{});var $xe=s(MC);I2e=n($xe,"STRONG",{});var H6t=s(I2e);uAr=r(H6t,"electra"),H6t.forEach(t),bAr=r($xe," \u2014 "),vz=n($xe,"A",{href:!0});var U6t=s(vz);vAr=r(U6t,"FlaxElectraForSequenceClassification"),U6t.forEach(t),TAr=r($xe," (ELECTRA model)"),$xe.forEach(t),FAr=i(Ae),EC=n(Ae,"LI",{});var Ixe=s(EC);j2e=n(Ixe,"STRONG",{});var J6t=s(j2e);CAr=r(J6t,"mbart"),J6t.forEach(t),MAr=r(Ixe," \u2014 "),Tz=n(Ixe,"A",{href:!0});var Y6t=s(Tz);EAr=r(Y6t,"FlaxMBartForSequenceClassification"),Y6t.forEach(t),yAr=r(Ixe," (mBART model)"),Ixe.forEach(t),wAr=i(Ae),yC=n(Ae,"LI",{});var jxe=s(yC);N2e=n(jxe,"STRONG",{});var K6t=s(N2e);AAr=r(K6t,"roberta"),K6t.forEach(t),LAr=r(jxe," \u2014 "),Fz=n(jxe,"A",{href:!0});var Z6t=s(Fz);BAr=r(Z6t,"FlaxRobertaForSequenceClassification"),Z6t.forEach(t),xAr=r(jxe," (RoBERTa model)"),jxe.forEach(t),kAr=i(Ae),wC=n(Ae,"LI",{});var Nxe=s(wC);D2e=n(Nxe,"STRONG",{});var e0t=s(D2e);RAr=r(e0t,"roformer"),e0t.forEach(t),SAr=r(Nxe," \u2014 "),Cz=n(Nxe,"A",{href:!0});var o0t=s(Cz);PAr=r(o0t,"FlaxRoFormerForSequenceClassification"),o0t.forEach(t),$Ar=r(Nxe," (RoFormer model)"),Nxe.forEach(t),IAr=i(Ae),AC=n(Ae,"LI",{});var Dxe=s(AC);q2e=n(Dxe,"STRONG",{});var r0t=s(q2e);jAr=r(r0t,"xlm-roberta"),r0t.forEach(t),NAr=r(Dxe," \u2014 "),Mz=n(Dxe,"A",{href:!0});var t0t=s(Mz);DAr=r(t0t,"FlaxXLMRobertaForSequenceClassification"),t0t.forEach(t),qAr=r(Dxe," (XLM-RoBERTa model)"),Dxe.forEach(t),Ae.forEach(t),GAr=i(Sa),G2e=n(Sa,"P",{});var a0t=s(G2e);OAr=r(a0t,"Examples:"),a0t.forEach(t),XAr=i(Sa),m(p7.$$.fragment,Sa),Sa.forEach(t),Ci.forEach(t),nSe=i(c),_f=n(c,"H2",{class:!0});var u$e=s(_f);LC=n(u$e,"A",{id:!0,class:!0,href:!0});var n0t=s(LC);O2e=n(n0t,"SPAN",{});var s0t=s(O2e);m(_7.$$.fragment,s0t),s0t.forEach(t),n0t.forEach(t),VAr=i(u$e),X2e=n(u$e,"SPAN",{});var l0t=s(X2e);zAr=r(l0t,"FlaxAutoModelForQuestionAnswering"),l0t.forEach(t),u$e.forEach(t),sSe=i(c),Nr=n(c,"DIV",{class:!0});var Ei=s(Nr);m(u7.$$.fragment,Ei),WAr=i(Ei),uf=n(Ei,"P",{});var PQ=s(uf);QAr=r(PQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),V2e=n(PQ,"CODE",{});var i0t=s(V2e);HAr=r(i0t,"from_pretrained()"),i0t.forEach(t),UAr=r(PQ,"class method or the "),z2e=n(PQ,"CODE",{});var d0t=s(z2e);JAr=r(d0t,"from_config()"),d0t.forEach(t),YAr=r(PQ,`class
method.`),PQ.forEach(t),KAr=i(Ei),b7=n(Ei,"P",{});var b$e=s(b7);ZAr=r(b$e,"This class cannot be instantiated directly using "),W2e=n(b$e,"CODE",{});var c0t=s(W2e);eLr=r(c0t,"__init__()"),c0t.forEach(t),oLr=r(b$e," (throws an error)."),b$e.forEach(t),rLr=i(Ei),Rt=n(Ei,"DIV",{class:!0});var yi=s(Rt);m(v7.$$.fragment,yi),tLr=i(yi),Q2e=n(yi,"P",{});var f0t=s(Q2e);aLr=r(f0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),f0t.forEach(t),nLr=i(yi),bf=n(yi,"P",{});var $Q=s(bf);sLr=r($Q,`Note:
Loading a model from its configuration file does `),H2e=n($Q,"STRONG",{});var m0t=s(H2e);lLr=r(m0t,"not"),m0t.forEach(t),iLr=r($Q,` load the model weights. It only affects the
model\u2019s configuration. Use `),U2e=n($Q,"CODE",{});var g0t=s(U2e);dLr=r(g0t,"from_pretrained()"),g0t.forEach(t),cLr=r($Q,"to load the model weights."),$Q.forEach(t),fLr=i(yi),J2e=n(yi,"P",{});var h0t=s(J2e);mLr=r(h0t,"Examples:"),h0t.forEach(t),gLr=i(yi),m(T7.$$.fragment,yi),yi.forEach(t),hLr=i(Ei),So=n(Ei,"DIV",{class:!0});var Pa=s(So);m(F7.$$.fragment,Pa),pLr=i(Pa),Y2e=n(Pa,"P",{});var p0t=s(Y2e);_Lr=r(p0t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),p0t.forEach(t),uLr=i(Pa),$n=n(Pa,"P",{});var tE=s($n);bLr=r(tE,"The model class to instantiate is selected based on the "),K2e=n(tE,"CODE",{});var _0t=s(K2e);vLr=r(_0t,"model_type"),_0t.forEach(t),TLr=r(tE,` property of the config object (either
passed as an argument or loaded from `),Z2e=n(tE,"CODE",{});var u0t=s(Z2e);FLr=r(u0t,"pretrained_model_name_or_path"),u0t.forEach(t),CLr=r(tE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=n(tE,"CODE",{});var b0t=s(eve);MLr=r(b0t,"pretrained_model_name_or_path"),b0t.forEach(t),ELr=r(tE,":"),tE.forEach(t),yLr=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);BC=n(Le,"LI",{});var qxe=s(BC);ove=n(qxe,"STRONG",{});var v0t=s(ove);wLr=r(v0t,"albert"),v0t.forEach(t),ALr=r(qxe," \u2014 "),Ez=n(qxe,"A",{href:!0});var T0t=s(Ez);LLr=r(T0t,"FlaxAlbertForQuestionAnswering"),T0t.forEach(t),BLr=r(qxe," (ALBERT model)"),qxe.forEach(t),xLr=i(Le),xC=n(Le,"LI",{});var Gxe=s(xC);rve=n(Gxe,"STRONG",{});var F0t=s(rve);kLr=r(F0t,"bart"),F0t.forEach(t),RLr=r(Gxe," \u2014 "),yz=n(Gxe,"A",{href:!0});var C0t=s(yz);SLr=r(C0t,"FlaxBartForQuestionAnswering"),C0t.forEach(t),PLr=r(Gxe," (BART model)"),Gxe.forEach(t),$Lr=i(Le),kC=n(Le,"LI",{});var Oxe=s(kC);tve=n(Oxe,"STRONG",{});var M0t=s(tve);ILr=r(M0t,"bert"),M0t.forEach(t),jLr=r(Oxe," \u2014 "),wz=n(Oxe,"A",{href:!0});var E0t=s(wz);NLr=r(E0t,"FlaxBertForQuestionAnswering"),E0t.forEach(t),DLr=r(Oxe," (BERT model)"),Oxe.forEach(t),qLr=i(Le),RC=n(Le,"LI",{});var Xxe=s(RC);ave=n(Xxe,"STRONG",{});var y0t=s(ave);GLr=r(y0t,"big_bird"),y0t.forEach(t),OLr=r(Xxe," \u2014 "),Az=n(Xxe,"A",{href:!0});var w0t=s(Az);XLr=r(w0t,"FlaxBigBirdForQuestionAnswering"),w0t.forEach(t),VLr=r(Xxe," (BigBird model)"),Xxe.forEach(t),zLr=i(Le),SC=n(Le,"LI",{});var Vxe=s(SC);nve=n(Vxe,"STRONG",{});var A0t=s(nve);WLr=r(A0t,"distilbert"),A0t.forEach(t),QLr=r(Vxe," \u2014 "),Lz=n(Vxe,"A",{href:!0});var L0t=s(Lz);HLr=r(L0t,"FlaxDistilBertForQuestionAnswering"),L0t.forEach(t),ULr=r(Vxe," (DistilBERT model)"),Vxe.forEach(t),JLr=i(Le),PC=n(Le,"LI",{});var zxe=s(PC);sve=n(zxe,"STRONG",{});var B0t=s(sve);YLr=r(B0t,"electra"),B0t.forEach(t),KLr=r(zxe," \u2014 "),Bz=n(zxe,"A",{href:!0});var x0t=s(Bz);ZLr=r(x0t,"FlaxElectraForQuestionAnswering"),x0t.forEach(t),e7r=r(zxe," (ELECTRA model)"),zxe.forEach(t),o7r=i(Le),$C=n(Le,"LI",{});var Wxe=s($C);lve=n(Wxe,"STRONG",{});var k0t=s(lve);r7r=r(k0t,"mbart"),k0t.forEach(t),t7r=r(Wxe," \u2014 "),xz=n(Wxe,"A",{href:!0});var R0t=s(xz);a7r=r(R0t,"FlaxMBartForQuestionAnswering"),R0t.forEach(t),n7r=r(Wxe," (mBART model)"),Wxe.forEach(t),s7r=i(Le),IC=n(Le,"LI",{});var Qxe=s(IC);ive=n(Qxe,"STRONG",{});var S0t=s(ive);l7r=r(S0t,"roberta"),S0t.forEach(t),i7r=r(Qxe," \u2014 "),kz=n(Qxe,"A",{href:!0});var P0t=s(kz);d7r=r(P0t,"FlaxRobertaForQuestionAnswering"),P0t.forEach(t),c7r=r(Qxe," (RoBERTa model)"),Qxe.forEach(t),f7r=i(Le),jC=n(Le,"LI",{});var Hxe=s(jC);dve=n(Hxe,"STRONG",{});var $0t=s(dve);m7r=r($0t,"roformer"),$0t.forEach(t),g7r=r(Hxe," \u2014 "),Rz=n(Hxe,"A",{href:!0});var I0t=s(Rz);h7r=r(I0t,"FlaxRoFormerForQuestionAnswering"),I0t.forEach(t),p7r=r(Hxe," (RoFormer model)"),Hxe.forEach(t),_7r=i(Le),NC=n(Le,"LI",{});var Uxe=s(NC);cve=n(Uxe,"STRONG",{});var j0t=s(cve);u7r=r(j0t,"xlm-roberta"),j0t.forEach(t),b7r=r(Uxe," \u2014 "),Sz=n(Uxe,"A",{href:!0});var N0t=s(Sz);v7r=r(N0t,"FlaxXLMRobertaForQuestionAnswering"),N0t.forEach(t),T7r=r(Uxe," (XLM-RoBERTa model)"),Uxe.forEach(t),Le.forEach(t),F7r=i(Pa),fve=n(Pa,"P",{});var D0t=s(fve);C7r=r(D0t,"Examples:"),D0t.forEach(t),M7r=i(Pa),m(C7.$$.fragment,Pa),Pa.forEach(t),Ei.forEach(t),lSe=i(c),vf=n(c,"H2",{class:!0});var v$e=s(vf);DC=n(v$e,"A",{id:!0,class:!0,href:!0});var q0t=s(DC);mve=n(q0t,"SPAN",{});var G0t=s(mve);m(M7.$$.fragment,G0t),G0t.forEach(t),q0t.forEach(t),E7r=i(v$e),gve=n(v$e,"SPAN",{});var O0t=s(gve);y7r=r(O0t,"FlaxAutoModelForTokenClassification"),O0t.forEach(t),v$e.forEach(t),iSe=i(c),Dr=n(c,"DIV",{class:!0});var wi=s(Dr);m(E7.$$.fragment,wi),w7r=i(wi),Tf=n(wi,"P",{});var IQ=s(Tf);A7r=r(IQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),hve=n(IQ,"CODE",{});var X0t=s(hve);L7r=r(X0t,"from_pretrained()"),X0t.forEach(t),B7r=r(IQ,"class method or the "),pve=n(IQ,"CODE",{});var V0t=s(pve);x7r=r(V0t,"from_config()"),V0t.forEach(t),k7r=r(IQ,`class
method.`),IQ.forEach(t),R7r=i(wi),y7=n(wi,"P",{});var T$e=s(y7);S7r=r(T$e,"This class cannot be instantiated directly using "),_ve=n(T$e,"CODE",{});var z0t=s(_ve);P7r=r(z0t,"__init__()"),z0t.forEach(t),$7r=r(T$e," (throws an error)."),T$e.forEach(t),I7r=i(wi),St=n(wi,"DIV",{class:!0});var Ai=s(St);m(w7.$$.fragment,Ai),j7r=i(Ai),uve=n(Ai,"P",{});var W0t=s(uve);N7r=r(W0t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),W0t.forEach(t),D7r=i(Ai),Ff=n(Ai,"P",{});var jQ=s(Ff);q7r=r(jQ,`Note:
Loading a model from its configuration file does `),bve=n(jQ,"STRONG",{});var Q0t=s(bve);G7r=r(Q0t,"not"),Q0t.forEach(t),O7r=r(jQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vve=n(jQ,"CODE",{});var H0t=s(vve);X7r=r(H0t,"from_pretrained()"),H0t.forEach(t),V7r=r(jQ,"to load the model weights."),jQ.forEach(t),z7r=i(Ai),Tve=n(Ai,"P",{});var U0t=s(Tve);W7r=r(U0t,"Examples:"),U0t.forEach(t),Q7r=i(Ai),m(A7.$$.fragment,Ai),Ai.forEach(t),H7r=i(wi),Po=n(wi,"DIV",{class:!0});var $a=s(Po);m(L7.$$.fragment,$a),U7r=i($a),Fve=n($a,"P",{});var J0t=s(Fve);J7r=r(J0t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),J0t.forEach(t),Y7r=i($a),In=n($a,"P",{});var aE=s(In);K7r=r(aE,"The model class to instantiate is selected based on the "),Cve=n(aE,"CODE",{});var Y0t=s(Cve);Z7r=r(Y0t,"model_type"),Y0t.forEach(t),e8r=r(aE,` property of the config object (either
passed as an argument or loaded from `),Mve=n(aE,"CODE",{});var K0t=s(Mve);o8r=r(K0t,"pretrained_model_name_or_path"),K0t.forEach(t),r8r=r(aE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eve=n(aE,"CODE",{});var Z0t=s(Eve);t8r=r(Z0t,"pretrained_model_name_or_path"),Z0t.forEach(t),a8r=r(aE,":"),aE.forEach(t),n8r=i($a),Se=n($a,"UL",{});var Oo=s(Se);qC=n(Oo,"LI",{});var Jxe=s(qC);yve=n(Jxe,"STRONG",{});var eTt=s(yve);s8r=r(eTt,"albert"),eTt.forEach(t),l8r=r(Jxe," \u2014 "),Pz=n(Jxe,"A",{href:!0});var oTt=s(Pz);i8r=r(oTt,"FlaxAlbertForTokenClassification"),oTt.forEach(t),d8r=r(Jxe," (ALBERT model)"),Jxe.forEach(t),c8r=i(Oo),GC=n(Oo,"LI",{});var Yxe=s(GC);wve=n(Yxe,"STRONG",{});var rTt=s(wve);f8r=r(rTt,"bert"),rTt.forEach(t),m8r=r(Yxe," \u2014 "),$z=n(Yxe,"A",{href:!0});var tTt=s($z);g8r=r(tTt,"FlaxBertForTokenClassification"),tTt.forEach(t),h8r=r(Yxe," (BERT model)"),Yxe.forEach(t),p8r=i(Oo),OC=n(Oo,"LI",{});var Kxe=s(OC);Ave=n(Kxe,"STRONG",{});var aTt=s(Ave);_8r=r(aTt,"big_bird"),aTt.forEach(t),u8r=r(Kxe," \u2014 "),Iz=n(Kxe,"A",{href:!0});var nTt=s(Iz);b8r=r(nTt,"FlaxBigBirdForTokenClassification"),nTt.forEach(t),v8r=r(Kxe," (BigBird model)"),Kxe.forEach(t),T8r=i(Oo),XC=n(Oo,"LI",{});var Zxe=s(XC);Lve=n(Zxe,"STRONG",{});var sTt=s(Lve);F8r=r(sTt,"distilbert"),sTt.forEach(t),C8r=r(Zxe," \u2014 "),jz=n(Zxe,"A",{href:!0});var lTt=s(jz);M8r=r(lTt,"FlaxDistilBertForTokenClassification"),lTt.forEach(t),E8r=r(Zxe," (DistilBERT model)"),Zxe.forEach(t),y8r=i(Oo),VC=n(Oo,"LI",{});var eke=s(VC);Bve=n(eke,"STRONG",{});var iTt=s(Bve);w8r=r(iTt,"electra"),iTt.forEach(t),A8r=r(eke," \u2014 "),Nz=n(eke,"A",{href:!0});var dTt=s(Nz);L8r=r(dTt,"FlaxElectraForTokenClassification"),dTt.forEach(t),B8r=r(eke," (ELECTRA model)"),eke.forEach(t),x8r=i(Oo),zC=n(Oo,"LI",{});var oke=s(zC);xve=n(oke,"STRONG",{});var cTt=s(xve);k8r=r(cTt,"roberta"),cTt.forEach(t),R8r=r(oke," \u2014 "),Dz=n(oke,"A",{href:!0});var fTt=s(Dz);S8r=r(fTt,"FlaxRobertaForTokenClassification"),fTt.forEach(t),P8r=r(oke," (RoBERTa model)"),oke.forEach(t),$8r=i(Oo),WC=n(Oo,"LI",{});var rke=s(WC);kve=n(rke,"STRONG",{});var mTt=s(kve);I8r=r(mTt,"roformer"),mTt.forEach(t),j8r=r(rke," \u2014 "),qz=n(rke,"A",{href:!0});var gTt=s(qz);N8r=r(gTt,"FlaxRoFormerForTokenClassification"),gTt.forEach(t),D8r=r(rke," (RoFormer model)"),rke.forEach(t),q8r=i(Oo),QC=n(Oo,"LI",{});var tke=s(QC);Rve=n(tke,"STRONG",{});var hTt=s(Rve);G8r=r(hTt,"xlm-roberta"),hTt.forEach(t),O8r=r(tke," \u2014 "),Gz=n(tke,"A",{href:!0});var pTt=s(Gz);X8r=r(pTt,"FlaxXLMRobertaForTokenClassification"),pTt.forEach(t),V8r=r(tke," (XLM-RoBERTa model)"),tke.forEach(t),Oo.forEach(t),z8r=i($a),Sve=n($a,"P",{});var _Tt=s(Sve);W8r=r(_Tt,"Examples:"),_Tt.forEach(t),Q8r=i($a),m(B7.$$.fragment,$a),$a.forEach(t),wi.forEach(t),dSe=i(c),Cf=n(c,"H2",{class:!0});var F$e=s(Cf);HC=n(F$e,"A",{id:!0,class:!0,href:!0});var uTt=s(HC);Pve=n(uTt,"SPAN",{});var bTt=s(Pve);m(x7.$$.fragment,bTt),bTt.forEach(t),uTt.forEach(t),H8r=i(F$e),$ve=n(F$e,"SPAN",{});var vTt=s($ve);U8r=r(vTt,"FlaxAutoModelForMultipleChoice"),vTt.forEach(t),F$e.forEach(t),cSe=i(c),qr=n(c,"DIV",{class:!0});var Li=s(qr);m(k7.$$.fragment,Li),J8r=i(Li),Mf=n(Li,"P",{});var NQ=s(Mf);Y8r=r(NQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Ive=n(NQ,"CODE",{});var TTt=s(Ive);K8r=r(TTt,"from_pretrained()"),TTt.forEach(t),Z8r=r(NQ,"class method or the "),jve=n(NQ,"CODE",{});var FTt=s(jve);e9r=r(FTt,"from_config()"),FTt.forEach(t),o9r=r(NQ,`class
method.`),NQ.forEach(t),r9r=i(Li),R7=n(Li,"P",{});var C$e=s(R7);t9r=r(C$e,"This class cannot be instantiated directly using "),Nve=n(C$e,"CODE",{});var CTt=s(Nve);a9r=r(CTt,"__init__()"),CTt.forEach(t),n9r=r(C$e," (throws an error)."),C$e.forEach(t),s9r=i(Li),Pt=n(Li,"DIV",{class:!0});var Bi=s(Pt);m(S7.$$.fragment,Bi),l9r=i(Bi),Dve=n(Bi,"P",{});var MTt=s(Dve);i9r=r(MTt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),MTt.forEach(t),d9r=i(Bi),Ef=n(Bi,"P",{});var DQ=s(Ef);c9r=r(DQ,`Note:
Loading a model from its configuration file does `),qve=n(DQ,"STRONG",{});var ETt=s(qve);f9r=r(ETt,"not"),ETt.forEach(t),m9r=r(DQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gve=n(DQ,"CODE",{});var yTt=s(Gve);g9r=r(yTt,"from_pretrained()"),yTt.forEach(t),h9r=r(DQ,"to load the model weights."),DQ.forEach(t),p9r=i(Bi),Ove=n(Bi,"P",{});var wTt=s(Ove);_9r=r(wTt,"Examples:"),wTt.forEach(t),u9r=i(Bi),m(P7.$$.fragment,Bi),Bi.forEach(t),b9r=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m($7.$$.fragment,Ia),v9r=i(Ia),Xve=n(Ia,"P",{});var ATt=s(Xve);T9r=r(ATt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ATt.forEach(t),F9r=i(Ia),jn=n(Ia,"P",{});var nE=s(jn);C9r=r(nE,"The model class to instantiate is selected based on the "),Vve=n(nE,"CODE",{});var LTt=s(Vve);M9r=r(LTt,"model_type"),LTt.forEach(t),E9r=r(nE,` property of the config object (either
passed as an argument or loaded from `),zve=n(nE,"CODE",{});var BTt=s(zve);y9r=r(BTt,"pretrained_model_name_or_path"),BTt.forEach(t),w9r=r(nE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=n(nE,"CODE",{});var xTt=s(Wve);A9r=r(xTt,"pretrained_model_name_or_path"),xTt.forEach(t),L9r=r(nE,":"),nE.forEach(t),B9r=i(Ia),Pe=n(Ia,"UL",{});var Xo=s(Pe);UC=n(Xo,"LI",{});var ake=s(UC);Qve=n(ake,"STRONG",{});var kTt=s(Qve);x9r=r(kTt,"albert"),kTt.forEach(t),k9r=r(ake," \u2014 "),Oz=n(ake,"A",{href:!0});var RTt=s(Oz);R9r=r(RTt,"FlaxAlbertForMultipleChoice"),RTt.forEach(t),S9r=r(ake," (ALBERT model)"),ake.forEach(t),P9r=i(Xo),JC=n(Xo,"LI",{});var nke=s(JC);Hve=n(nke,"STRONG",{});var STt=s(Hve);$9r=r(STt,"bert"),STt.forEach(t),I9r=r(nke," \u2014 "),Xz=n(nke,"A",{href:!0});var PTt=s(Xz);j9r=r(PTt,"FlaxBertForMultipleChoice"),PTt.forEach(t),N9r=r(nke," (BERT model)"),nke.forEach(t),D9r=i(Xo),YC=n(Xo,"LI",{});var ske=s(YC);Uve=n(ske,"STRONG",{});var $Tt=s(Uve);q9r=r($Tt,"big_bird"),$Tt.forEach(t),G9r=r(ske," \u2014 "),Vz=n(ske,"A",{href:!0});var ITt=s(Vz);O9r=r(ITt,"FlaxBigBirdForMultipleChoice"),ITt.forEach(t),X9r=r(ske," (BigBird model)"),ske.forEach(t),V9r=i(Xo),KC=n(Xo,"LI",{});var lke=s(KC);Jve=n(lke,"STRONG",{});var jTt=s(Jve);z9r=r(jTt,"distilbert"),jTt.forEach(t),W9r=r(lke," \u2014 "),zz=n(lke,"A",{href:!0});var NTt=s(zz);Q9r=r(NTt,"FlaxDistilBertForMultipleChoice"),NTt.forEach(t),H9r=r(lke," (DistilBERT model)"),lke.forEach(t),U9r=i(Xo),ZC=n(Xo,"LI",{});var ike=s(ZC);Yve=n(ike,"STRONG",{});var DTt=s(Yve);J9r=r(DTt,"electra"),DTt.forEach(t),Y9r=r(ike," \u2014 "),Wz=n(ike,"A",{href:!0});var qTt=s(Wz);K9r=r(qTt,"FlaxElectraForMultipleChoice"),qTt.forEach(t),Z9r=r(ike," (ELECTRA model)"),ike.forEach(t),eBr=i(Xo),eM=n(Xo,"LI",{});var dke=s(eM);Kve=n(dke,"STRONG",{});var GTt=s(Kve);oBr=r(GTt,"roberta"),GTt.forEach(t),rBr=r(dke," \u2014 "),Qz=n(dke,"A",{href:!0});var OTt=s(Qz);tBr=r(OTt,"FlaxRobertaForMultipleChoice"),OTt.forEach(t),aBr=r(dke," (RoBERTa model)"),dke.forEach(t),nBr=i(Xo),oM=n(Xo,"LI",{});var cke=s(oM);Zve=n(cke,"STRONG",{});var XTt=s(Zve);sBr=r(XTt,"roformer"),XTt.forEach(t),lBr=r(cke," \u2014 "),Hz=n(cke,"A",{href:!0});var VTt=s(Hz);iBr=r(VTt,"FlaxRoFormerForMultipleChoice"),VTt.forEach(t),dBr=r(cke," (RoFormer model)"),cke.forEach(t),cBr=i(Xo),rM=n(Xo,"LI",{});var fke=s(rM);e6e=n(fke,"STRONG",{});var zTt=s(e6e);fBr=r(zTt,"xlm-roberta"),zTt.forEach(t),mBr=r(fke," \u2014 "),Uz=n(fke,"A",{href:!0});var WTt=s(Uz);gBr=r(WTt,"FlaxXLMRobertaForMultipleChoice"),WTt.forEach(t),hBr=r(fke," (XLM-RoBERTa model)"),fke.forEach(t),Xo.forEach(t),pBr=i(Ia),o6e=n(Ia,"P",{});var QTt=s(o6e);_Br=r(QTt,"Examples:"),QTt.forEach(t),uBr=i(Ia),m(I7.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),fSe=i(c),yf=n(c,"H2",{class:!0});var M$e=s(yf);tM=n(M$e,"A",{id:!0,class:!0,href:!0});var HTt=s(tM);r6e=n(HTt,"SPAN",{});var UTt=s(r6e);m(j7.$$.fragment,UTt),UTt.forEach(t),HTt.forEach(t),bBr=i(M$e),t6e=n(M$e,"SPAN",{});var JTt=s(t6e);vBr=r(JTt,"FlaxAutoModelForNextSentencePrediction"),JTt.forEach(t),M$e.forEach(t),mSe=i(c),Gr=n(c,"DIV",{class:!0});var xi=s(Gr);m(N7.$$.fragment,xi),TBr=i(xi),wf=n(xi,"P",{});var qQ=s(wf);FBr=r(qQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),a6e=n(qQ,"CODE",{});var YTt=s(a6e);CBr=r(YTt,"from_pretrained()"),YTt.forEach(t),MBr=r(qQ,"class method or the "),n6e=n(qQ,"CODE",{});var KTt=s(n6e);EBr=r(KTt,"from_config()"),KTt.forEach(t),yBr=r(qQ,`class
method.`),qQ.forEach(t),wBr=i(xi),D7=n(xi,"P",{});var E$e=s(D7);ABr=r(E$e,"This class cannot be instantiated directly using "),s6e=n(E$e,"CODE",{});var ZTt=s(s6e);LBr=r(ZTt,"__init__()"),ZTt.forEach(t),BBr=r(E$e," (throws an error)."),E$e.forEach(t),xBr=i(xi),$t=n(xi,"DIV",{class:!0});var ki=s($t);m(q7.$$.fragment,ki),kBr=i(ki),l6e=n(ki,"P",{});var eFt=s(l6e);RBr=r(eFt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),eFt.forEach(t),SBr=i(ki),Af=n(ki,"P",{});var GQ=s(Af);PBr=r(GQ,`Note:
Loading a model from its configuration file does `),i6e=n(GQ,"STRONG",{});var oFt=s(i6e);$Br=r(oFt,"not"),oFt.forEach(t),IBr=r(GQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),d6e=n(GQ,"CODE",{});var rFt=s(d6e);jBr=r(rFt,"from_pretrained()"),rFt.forEach(t),NBr=r(GQ,"to load the model weights."),GQ.forEach(t),DBr=i(ki),c6e=n(ki,"P",{});var tFt=s(c6e);qBr=r(tFt,"Examples:"),tFt.forEach(t),GBr=i(ki),m(G7.$$.fragment,ki),ki.forEach(t),OBr=i(xi),Io=n(xi,"DIV",{class:!0});var ja=s(Io);m(O7.$$.fragment,ja),XBr=i(ja),f6e=n(ja,"P",{});var aFt=s(f6e);VBr=r(aFt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),aFt.forEach(t),zBr=i(ja),Nn=n(ja,"P",{});var sE=s(Nn);WBr=r(sE,"The model class to instantiate is selected based on the "),m6e=n(sE,"CODE",{});var nFt=s(m6e);QBr=r(nFt,"model_type"),nFt.forEach(t),HBr=r(sE,` property of the config object (either
passed as an argument or loaded from `),g6e=n(sE,"CODE",{});var sFt=s(g6e);UBr=r(sFt,"pretrained_model_name_or_path"),sFt.forEach(t),JBr=r(sE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h6e=n(sE,"CODE",{});var lFt=s(h6e);YBr=r(lFt,"pretrained_model_name_or_path"),lFt.forEach(t),KBr=r(sE,":"),sE.forEach(t),ZBr=i(ja),p6e=n(ja,"UL",{});var iFt=s(p6e);aM=n(iFt,"LI",{});var mke=s(aM);_6e=n(mke,"STRONG",{});var dFt=s(_6e);exr=r(dFt,"bert"),dFt.forEach(t),oxr=r(mke," \u2014 "),Jz=n(mke,"A",{href:!0});var cFt=s(Jz);rxr=r(cFt,"FlaxBertForNextSentencePrediction"),cFt.forEach(t),txr=r(mke," (BERT model)"),mke.forEach(t),iFt.forEach(t),axr=i(ja),u6e=n(ja,"P",{});var fFt=s(u6e);nxr=r(fFt,"Examples:"),fFt.forEach(t),sxr=i(ja),m(X7.$$.fragment,ja),ja.forEach(t),xi.forEach(t),gSe=i(c),Lf=n(c,"H2",{class:!0});var y$e=s(Lf);nM=n(y$e,"A",{id:!0,class:!0,href:!0});var mFt=s(nM);b6e=n(mFt,"SPAN",{});var gFt=s(b6e);m(V7.$$.fragment,gFt),gFt.forEach(t),mFt.forEach(t),lxr=i(y$e),v6e=n(y$e,"SPAN",{});var hFt=s(v6e);ixr=r(hFt,"FlaxAutoModelForImageClassification"),hFt.forEach(t),y$e.forEach(t),hSe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);m(z7.$$.fragment,Ri),dxr=i(Ri),Bf=n(Ri,"P",{});var OQ=s(Bf);cxr=r(OQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),T6e=n(OQ,"CODE",{});var pFt=s(T6e);fxr=r(pFt,"from_pretrained()"),pFt.forEach(t),mxr=r(OQ,"class method or the "),F6e=n(OQ,"CODE",{});var _Ft=s(F6e);gxr=r(_Ft,"from_config()"),_Ft.forEach(t),hxr=r(OQ,`class
method.`),OQ.forEach(t),pxr=i(Ri),W7=n(Ri,"P",{});var w$e=s(W7);_xr=r(w$e,"This class cannot be instantiated directly using "),C6e=n(w$e,"CODE",{});var uFt=s(C6e);uxr=r(uFt,"__init__()"),uFt.forEach(t),bxr=r(w$e," (throws an error)."),w$e.forEach(t),vxr=i(Ri),It=n(Ri,"DIV",{class:!0});var Si=s(It);m(Q7.$$.fragment,Si),Txr=i(Si),M6e=n(Si,"P",{});var bFt=s(M6e);Fxr=r(bFt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bFt.forEach(t),Cxr=i(Si),xf=n(Si,"P",{});var XQ=s(xf);Mxr=r(XQ,`Note:
Loading a model from its configuration file does `),E6e=n(XQ,"STRONG",{});var vFt=s(E6e);Exr=r(vFt,"not"),vFt.forEach(t),yxr=r(XQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),y6e=n(XQ,"CODE",{});var TFt=s(y6e);wxr=r(TFt,"from_pretrained()"),TFt.forEach(t),Axr=r(XQ,"to load the model weights."),XQ.forEach(t),Lxr=i(Si),w6e=n(Si,"P",{});var FFt=s(w6e);Bxr=r(FFt,"Examples:"),FFt.forEach(t),xxr=i(Si),m(H7.$$.fragment,Si),Si.forEach(t),kxr=i(Ri),jo=n(Ri,"DIV",{class:!0});var Na=s(jo);m(U7.$$.fragment,Na),Rxr=i(Na),A6e=n(Na,"P",{});var CFt=s(A6e);Sxr=r(CFt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),CFt.forEach(t),Pxr=i(Na),Dn=n(Na,"P",{});var lE=s(Dn);$xr=r(lE,"The model class to instantiate is selected based on the "),L6e=n(lE,"CODE",{});var MFt=s(L6e);Ixr=r(MFt,"model_type"),MFt.forEach(t),jxr=r(lE,` property of the config object (either
passed as an argument or loaded from `),B6e=n(lE,"CODE",{});var EFt=s(B6e);Nxr=r(EFt,"pretrained_model_name_or_path"),EFt.forEach(t),Dxr=r(lE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x6e=n(lE,"CODE",{});var yFt=s(x6e);qxr=r(yFt,"pretrained_model_name_or_path"),yFt.forEach(t),Gxr=r(lE,":"),lE.forEach(t),Oxr=i(Na),J7=n(Na,"UL",{});var A$e=s(J7);sM=n(A$e,"LI",{});var gke=s(sM);k6e=n(gke,"STRONG",{});var wFt=s(k6e);Xxr=r(wFt,"beit"),wFt.forEach(t),Vxr=r(gke," \u2014 "),Yz=n(gke,"A",{href:!0});var AFt=s(Yz);zxr=r(AFt,"FlaxBeitForImageClassification"),AFt.forEach(t),Wxr=r(gke," (BEiT model)"),gke.forEach(t),Qxr=i(A$e),lM=n(A$e,"LI",{});var hke=s(lM);R6e=n(hke,"STRONG",{});var LFt=s(R6e);Hxr=r(LFt,"vit"),LFt.forEach(t),Uxr=r(hke," \u2014 "),Kz=n(hke,"A",{href:!0});var BFt=s(Kz);Jxr=r(BFt,"FlaxViTForImageClassification"),BFt.forEach(t),Yxr=r(hke," (ViT model)"),hke.forEach(t),A$e.forEach(t),Kxr=i(Na),S6e=n(Na,"P",{});var xFt=s(S6e);Zxr=r(xFt,"Examples:"),xFt.forEach(t),ekr=i(Na),m(Y7.$$.fragment,Na),Na.forEach(t),Ri.forEach(t),pSe=i(c),kf=n(c,"H2",{class:!0});var L$e=s(kf);iM=n(L$e,"A",{id:!0,class:!0,href:!0});var kFt=s(iM);P6e=n(kFt,"SPAN",{});var RFt=s(P6e);m(K7.$$.fragment,RFt),RFt.forEach(t),kFt.forEach(t),okr=i(L$e),$6e=n(L$e,"SPAN",{});var SFt=s($6e);rkr=r(SFt,"FlaxAutoModelForVision2Seq"),SFt.forEach(t),L$e.forEach(t),_Se=i(c),Xr=n(c,"DIV",{class:!0});var Pi=s(Xr);m(Z7.$$.fragment,Pi),tkr=i(Pi),Rf=n(Pi,"P",{});var VQ=s(Rf);akr=r(VQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),I6e=n(VQ,"CODE",{});var PFt=s(I6e);nkr=r(PFt,"from_pretrained()"),PFt.forEach(t),skr=r(VQ,"class method or the "),j6e=n(VQ,"CODE",{});var $Ft=s(j6e);lkr=r($Ft,"from_config()"),$Ft.forEach(t),ikr=r(VQ,`class
method.`),VQ.forEach(t),dkr=i(Pi),e8=n(Pi,"P",{});var B$e=s(e8);ckr=r(B$e,"This class cannot be instantiated directly using "),N6e=n(B$e,"CODE",{});var IFt=s(N6e);fkr=r(IFt,"__init__()"),IFt.forEach(t),mkr=r(B$e," (throws an error)."),B$e.forEach(t),gkr=i(Pi),jt=n(Pi,"DIV",{class:!0});var $i=s(jt);m(o8.$$.fragment,$i),hkr=i($i),D6e=n($i,"P",{});var jFt=s(D6e);pkr=r(jFt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jFt.forEach(t),_kr=i($i),Sf=n($i,"P",{});var zQ=s(Sf);ukr=r(zQ,`Note:
Loading a model from its configuration file does `),q6e=n(zQ,"STRONG",{});var NFt=s(q6e);bkr=r(NFt,"not"),NFt.forEach(t),vkr=r(zQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),G6e=n(zQ,"CODE",{});var DFt=s(G6e);Tkr=r(DFt,"from_pretrained()"),DFt.forEach(t),Fkr=r(zQ,"to load the model weights."),zQ.forEach(t),Ckr=i($i),O6e=n($i,"P",{});var qFt=s(O6e);Mkr=r(qFt,"Examples:"),qFt.forEach(t),Ekr=i($i),m(r8.$$.fragment,$i),$i.forEach(t),ykr=i(Pi),No=n(Pi,"DIV",{class:!0});var Da=s(No);m(t8.$$.fragment,Da),wkr=i(Da),X6e=n(Da,"P",{});var GFt=s(X6e);Akr=r(GFt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),GFt.forEach(t),Lkr=i(Da),qn=n(Da,"P",{});var iE=s(qn);Bkr=r(iE,"The model class to instantiate is selected based on the "),V6e=n(iE,"CODE",{});var OFt=s(V6e);xkr=r(OFt,"model_type"),OFt.forEach(t),kkr=r(iE,` property of the config object (either
passed as an argument or loaded from `),z6e=n(iE,"CODE",{});var XFt=s(z6e);Rkr=r(XFt,"pretrained_model_name_or_path"),XFt.forEach(t),Skr=r(iE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W6e=n(iE,"CODE",{});var VFt=s(W6e);Pkr=r(VFt,"pretrained_model_name_or_path"),VFt.forEach(t),$kr=r(iE,":"),iE.forEach(t),Ikr=i(Da),Q6e=n(Da,"UL",{});var zFt=s(Q6e);dM=n(zFt,"LI",{});var pke=s(dM);H6e=n(pke,"STRONG",{});var WFt=s(H6e);jkr=r(WFt,"vision-encoder-decoder"),WFt.forEach(t),Nkr=r(pke," \u2014 "),Zz=n(pke,"A",{href:!0});var QFt=s(Zz);Dkr=r(QFt,"FlaxVisionEncoderDecoderModel"),QFt.forEach(t),qkr=r(pke," (Vision Encoder decoder model)"),pke.forEach(t),zFt.forEach(t),Gkr=i(Da),U6e=n(Da,"P",{});var HFt=s(U6e);Okr=r(HFt,"Examples:"),HFt.forEach(t),Xkr=i(Da),m(a8.$$.fragment,Da),Da.forEach(t),Pi.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(aCt)),d(Ee,"id","auto-classes"),d(Ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ee,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/pr_16450/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_16450/en/model_doc/auto#transformers.AutoModel"),d(Vn,"href","/docs/transformers/pr_16450/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertModel"),d(qf,"id","extending-the-auto-classes"),d(qf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qf,"href","#extending-the-auto-classes"),d(Xi,"class","relative group"),d(Of,"id","transformers.AutoConfig"),d(Of,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Of,"href","#transformers.AutoConfig"),d(Vi,"class","relative group"),d(i9,"href","/docs/transformers/pr_16450/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(d9,"href","/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertConfig"),d(c9,"href","/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartConfig"),d(f9,"href","/docs/transformers/pr_16450/en/model_doc/beit#transformers.BeitConfig"),d(m9,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertConfig"),d(g9,"href","/docs/transformers/pr_16450/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(h9,"href","/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdConfig"),d(p9,"href","/docs/transformers/pr_16450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(_9,"href","/docs/transformers/pr_16450/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(u9,"href","/docs/transformers/pr_16450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(b9,"href","/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertConfig"),d(v9,"href","/docs/transformers/pr_16450/en/model_doc/canine#transformers.CanineConfig"),d(T9,"href","/docs/transformers/pr_16450/en/model_doc/clip#transformers.CLIPConfig"),d(F9,"href","/docs/transformers/pr_16450/en/model_doc/convbert#transformers.ConvBertConfig"),d(C9,"href","/docs/transformers/pr_16450/en/model_doc/convnext#transformers.ConvNextConfig"),d(M9,"href","/docs/transformers/pr_16450/en/model_doc/ctrl#transformers.CTRLConfig"),d(E9,"href","/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(y9,"href","/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(w9,"href","/docs/transformers/pr_16450/en/model_doc/deberta#transformers.DebertaConfig"),d(A9,"href","/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(L9,"href","/docs/transformers/pr_16450/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(B9,"href","/docs/transformers/pr_16450/en/model_doc/deit#transformers.DeiTConfig"),d(x9,"href","/docs/transformers/pr_16450/en/model_doc/detr#transformers.DetrConfig"),d(k9,"href","/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertConfig"),d(R9,"href","/docs/transformers/pr_16450/en/model_doc/dpr#transformers.DPRConfig"),d(S9,"href","/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraConfig"),d(P9,"href","/docs/transformers/pr_16450/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d($9,"href","/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertConfig"),d(I9,"href","/docs/transformers/pr_16450/en/model_doc/fnet#transformers.FNetConfig"),d(j9,"href","/docs/transformers/pr_16450/en/model_doc/fsmt#transformers.FSMTConfig"),d(N9,"href","/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelConfig"),d(D9,"href","/docs/transformers/pr_16450/en/model_doc/glpn#transformers.GLPNConfig"),d(q9,"href","/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.GPT2Config"),d(G9,"href","/docs/transformers/pr_16450/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(O9,"href","/docs/transformers/pr_16450/en/model_doc/gptj#transformers.GPTJConfig"),d(X9,"href","/docs/transformers/pr_16450/en/model_doc/hubert#transformers.HubertConfig"),d(V9,"href","/docs/transformers/pr_16450/en/model_doc/ibert#transformers.IBertConfig"),d(z9,"href","/docs/transformers/pr_16450/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(W9,"href","/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(Q9,"href","/docs/transformers/pr_16450/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(H9,"href","/docs/transformers/pr_16450/en/model_doc/led#transformers.LEDConfig"),d(U9,"href","/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerConfig"),d(J9,"href","/docs/transformers/pr_16450/en/model_doc/luke#transformers.LukeConfig"),d(Y9,"href","/docs/transformers/pr_16450/en/model_doc/lxmert#transformers.LxmertConfig"),d(K9,"href","/docs/transformers/pr_16450/en/model_doc/m2m_100#transformers.M2M100Config"),d(Z9,"href","/docs/transformers/pr_16450/en/model_doc/marian#transformers.MarianConfig"),d(eB,"href","/docs/transformers/pr_16450/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(oB,"href","/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartConfig"),d(rB,"href","/docs/transformers/pr_16450/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(tB,"href","/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(aB,"href","/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetConfig"),d(nB,"href","/docs/transformers/pr_16450/en/model_doc/mt5#transformers.MT5Config"),d(sB,"href","/docs/transformers/pr_16450/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(lB,"href","/docs/transformers/pr_16450/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(iB,"href","/docs/transformers/pr_16450/en/model_doc/pegasus#transformers.PegasusConfig"),d(dB,"href","/docs/transformers/pr_16450/en/model_doc/perceiver#transformers.PerceiverConfig"),d(cB,"href","/docs/transformers/pr_16450/en/model_doc/plbart#transformers.PLBartConfig"),d(fB,"href","/docs/transformers/pr_16450/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(mB,"href","/docs/transformers/pr_16450/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(gB,"href","/docs/transformers/pr_16450/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(hB,"href","/docs/transformers/pr_16450/en/model_doc/rag#transformers.RagConfig"),d(pB,"href","/docs/transformers/pr_16450/en/model_doc/realm#transformers.RealmConfig"),d(_B,"href","/docs/transformers/pr_16450/en/model_doc/reformer#transformers.ReformerConfig"),d(uB,"href","/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertConfig"),d(bB,"href","/docs/transformers/pr_16450/en/model_doc/resnet#transformers.ResNetConfig"),d(vB,"href","/docs/transformers/pr_16450/en/model_doc/retribert#transformers.RetriBertConfig"),d(TB,"href","/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaConfig"),d(FB,"href","/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerConfig"),d(CB,"href","/docs/transformers/pr_16450/en/model_doc/segformer#transformers.SegformerConfig"),d(MB,"href","/docs/transformers/pr_16450/en/model_doc/sew#transformers.SEWConfig"),d(EB,"href","/docs/transformers/pr_16450/en/model_doc/sew-d#transformers.SEWDConfig"),d(yB,"href","/docs/transformers/pr_16450/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(wB,"href","/docs/transformers/pr_16450/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(AB,"href","/docs/transformers/pr_16450/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(LB,"href","/docs/transformers/pr_16450/en/model_doc/splinter#transformers.SplinterConfig"),d(BB,"href","/docs/transformers/pr_16450/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(xB,"href","/docs/transformers/pr_16450/en/model_doc/swin#transformers.SwinConfig"),d(kB,"href","/docs/transformers/pr_16450/en/model_doc/t5#transformers.T5Config"),d(RB,"href","/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TapasConfig"),d(SB,"href","/docs/transformers/pr_16450/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(PB,"href","/docs/transformers/pr_16450/en/model_doc/trocr#transformers.TrOCRConfig"),d($B,"href","/docs/transformers/pr_16450/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(IB,"href","/docs/transformers/pr_16450/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(jB,"href","/docs/transformers/pr_16450/en/model_doc/van#transformers.VanConfig"),d(NB,"href","/docs/transformers/pr_16450/en/model_doc/vilt#transformers.ViltConfig"),d(DB,"href","/docs/transformers/pr_16450/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(qB,"href","/docs/transformers/pr_16450/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(GB,"href","/docs/transformers/pr_16450/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(OB,"href","/docs/transformers/pr_16450/en/model_doc/vit#transformers.ViTConfig"),d(XB,"href","/docs/transformers/pr_16450/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(VB,"href","/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(zB,"href","/docs/transformers/pr_16450/en/model_doc/wavlm#transformers.WavLMConfig"),d(WB,"href","/docs/transformers/pr_16450/en/model_doc/xglm#transformers.XGLMConfig"),d(QB,"href","/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMConfig"),d(HB,"href","/docs/transformers/pr_16450/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(UB,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(JB,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(YB,"href","/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetConfig"),d(KB,"href","/docs/transformers/pr_16450/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d(Sg,"class","docstring"),d(Wo,"class","docstring"),d(Pg,"id","transformers.AutoTokenizer"),d(Pg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Pg,"href","#transformers.AutoTokenizer"),d(Wi,"class","relative group"),d(ZB,"href","/docs/transformers/pr_16450/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(ex,"href","/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertTokenizer"),d(ox,"href","/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(rx,"href","/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartTokenizer"),d(tx,"href","/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartTokenizerFast"),d(ax,"href","/docs/transformers/pr_16450/en/model_doc/barthez#transformers.BarthezTokenizer"),d(nx,"href","/docs/transformers/pr_16450/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(sx,"href","/docs/transformers/pr_16450/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(lx,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertTokenizer"),d(ix,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertTokenizerFast"),d(dx,"href","/docs/transformers/pr_16450/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(cx,"href","/docs/transformers/pr_16450/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(fx,"href","/docs/transformers/pr_16450/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(mx,"href","/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(gx,"href","/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(hx,"href","/docs/transformers/pr_16450/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(px,"href","/docs/transformers/pr_16450/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(_x,"href","/docs/transformers/pr_16450/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(ux,"href","/docs/transformers/pr_16450/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(bx,"href","/docs/transformers/pr_16450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(vx,"href","/docs/transformers/pr_16450/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Tx,"href","/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertTokenizer"),d(Fx,"href","/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Cx,"href","/docs/transformers/pr_16450/en/model_doc/canine#transformers.CanineTokenizer"),d(Mx,"href","/docs/transformers/pr_16450/en/model_doc/clip#transformers.CLIPTokenizer"),d(Ex,"href","/docs/transformers/pr_16450/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(yx,"href","/docs/transformers/pr_16450/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(wx,"href","/docs/transformers/pr_16450/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Ax,"href","/docs/transformers/pr_16450/en/model_doc/cpm#transformers.CpmTokenizer"),d(Lx,"href","/docs/transformers/pr_16450/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Bx,"href","/docs/transformers/pr_16450/en/model_doc/deberta#transformers.DebertaTokenizer"),d(xx,"href","/docs/transformers/pr_16450/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(kx,"href","/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Rx,"href","/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(Sx,"href","/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(Px,"href","/docs/transformers/pr_16450/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d($x,"href","/docs/transformers/pr_16450/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(Ix,"href","/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraTokenizer"),d(jx,"href","/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(Nx,"href","/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(Dx,"href","/docs/transformers/pr_16450/en/model_doc/fnet#transformers.FNetTokenizer"),d(qx,"href","/docs/transformers/pr_16450/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(Gx,"href","/docs/transformers/pr_16450/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(Ox,"href","/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelTokenizer"),d(Xx,"href","/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(Vx,"href","/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(zx,"href","/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Wx,"href","/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Qx,"href","/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Hx,"href","/docs/transformers/pr_16450/en/model_doc/herbert#transformers.HerbertTokenizer"),d(Ux,"href","/docs/transformers/pr_16450/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(Jx,"href","/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(Yx,"href","/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Kx,"href","/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Zx,"href","/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(ek,"href","/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(ok,"href","/docs/transformers/pr_16450/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(rk,"href","/docs/transformers/pr_16450/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(tk,"href","/docs/transformers/pr_16450/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(ak,"href","/docs/transformers/pr_16450/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(nk,"href","/docs/transformers/pr_16450/en/model_doc/led#transformers.LEDTokenizer"),d(sk,"href","/docs/transformers/pr_16450/en/model_doc/led#transformers.LEDTokenizerFast"),d(lk,"href","/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerTokenizer"),d(ik,"href","/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(dk,"href","/docs/transformers/pr_16450/en/model_doc/luke#transformers.LukeTokenizer"),d(ck,"href","/docs/transformers/pr_16450/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(fk,"href","/docs/transformers/pr_16450/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(mk,"href","/docs/transformers/pr_16450/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(gk,"href","/docs/transformers/pr_16450/en/model_doc/marian#transformers.MarianTokenizer"),d(hk,"href","/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartTokenizer"),d(pk,"href","/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(_k,"href","/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(uk,"href","/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(bk,"href","/docs/transformers/pr_16450/en/model_doc/mluke#transformers.MLukeTokenizer"),d(vk,"href","/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(Tk,"href","/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(Fk,"href","/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(Ck,"href","/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(Mk,"href","/docs/transformers/pr_16450/en/model_doc/mt5#transformers.T5Tokenizer"),d(Ek,"href","/docs/transformers/pr_16450/en/model_doc/mt5#transformers.T5TokenizerFast"),d(yk,"href","/docs/transformers/pr_16450/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(wk,"href","/docs/transformers/pr_16450/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(Ak,"href","/docs/transformers/pr_16450/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Lk,"href","/docs/transformers/pr_16450/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Bk,"href","/docs/transformers/pr_16450/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(xk,"href","/docs/transformers/pr_16450/en/model_doc/phobert#transformers.PhobertTokenizer"),d(kk,"href","/docs/transformers/pr_16450/en/model_doc/plbart#transformers.PLBartTokenizer"),d(Rk,"href","/docs/transformers/pr_16450/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(Sk,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertTokenizer"),d(Pk,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertTokenizerFast"),d($k,"href","/docs/transformers/pr_16450/en/model_doc/rag#transformers.RagTokenizer"),d(Ik,"href","/docs/transformers/pr_16450/en/model_doc/realm#transformers.RealmTokenizer"),d(jk,"href","/docs/transformers/pr_16450/en/model_doc/realm#transformers.RealmTokenizerFast"),d(Nk,"href","/docs/transformers/pr_16450/en/model_doc/reformer#transformers.ReformerTokenizer"),d(Dk,"href","/docs/transformers/pr_16450/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(qk,"href","/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertTokenizer"),d(Gk,"href","/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(Ok,"href","/docs/transformers/pr_16450/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(Xk,"href","/docs/transformers/pr_16450/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(Vk,"href","/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaTokenizer"),d(zk,"href","/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Wk,"href","/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(Qk,"href","/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(Hk,"href","/docs/transformers/pr_16450/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(Uk,"href","/docs/transformers/pr_16450/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(Jk,"href","/docs/transformers/pr_16450/en/model_doc/splinter#transformers.SplinterTokenizer"),d(Yk,"href","/docs/transformers/pr_16450/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(Kk,"href","/docs/transformers/pr_16450/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(Zk,"href","/docs/transformers/pr_16450/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(eR,"href","/docs/transformers/pr_16450/en/model_doc/mt5#transformers.T5Tokenizer"),d(oR,"href","/docs/transformers/pr_16450/en/model_doc/mt5#transformers.T5TokenizerFast"),d(rR,"href","/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TapasTokenizer"),d(tR,"href","/docs/transformers/pr_16450/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(aR,"href","/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(nR,"href","/docs/transformers/pr_16450/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(sR,"href","/docs/transformers/pr_16450/en/model_doc/xglm#transformers.XGLMTokenizer"),d(lR,"href","/docs/transformers/pr_16450/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(iR,"href","/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMTokenizer"),d(dR,"href","/docs/transformers/pr_16450/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(cR,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(fR,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(mR,"href","/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(gR,"href","/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(ch,"class","docstring"),d(Qo,"class","docstring"),d(fh,"id","transformers.AutoFeatureExtractor"),d(fh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fh,"href","#transformers.AutoFeatureExtractor"),d(Qi,"class","relative group"),d(hR,"href","/docs/transformers/pr_16450/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(pR,"href","/docs/transformers/pr_16450/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(_R,"href","/docs/transformers/pr_16450/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(uR,"href","/docs/transformers/pr_16450/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(bR,"href","/docs/transformers/pr_16450/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(vR,"href","/docs/transformers/pr_16450/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(TR,"href","/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(FR,"href","/docs/transformers/pr_16450/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(CR,"href","/docs/transformers/pr_16450/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(MR,"href","/docs/transformers/pr_16450/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(ER,"href","/docs/transformers/pr_16450/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(yR,"href","/docs/transformers/pr_16450/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(wR,"href","/docs/transformers/pr_16450/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(AR,"href","/docs/transformers/pr_16450/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(LR,"href","/docs/transformers/pr_16450/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(BR,"href","/docs/transformers/pr_16450/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(xR,"href","/docs/transformers/pr_16450/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(kR,"href","/docs/transformers/pr_16450/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(RR,"href","/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d(kh,"class","docstring"),d(Ho,"class","docstring"),d(Rh,"id","transformers.AutoProcessor"),d(Rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Rh,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d(SR,"href","/docs/transformers/pr_16450/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(PR,"href","/docs/transformers/pr_16450/en/model_doc/clip#transformers.CLIPProcessor"),d($R,"href","/docs/transformers/pr_16450/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(IR,"href","/docs/transformers/pr_16450/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(jR,"href","/docs/transformers/pr_16450/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(NR,"href","/docs/transformers/pr_16450/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(DR,"href","/docs/transformers/pr_16450/en/model_doc/trocr#transformers.TrOCRProcessor"),d(qR,"href","/docs/transformers/pr_16450/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(GR,"href","/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(Oh,"class","docstring"),d(Uo,"class","docstring"),d(Xh,"id","transformers.AutoModel"),d(Xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(Vr,"class","docstring"),d(OR,"href","/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertModel"),d(XR,"href","/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartModel"),d(VR,"href","/docs/transformers/pr_16450/en/model_doc/beit#transformers.BeitModel"),d(zR,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertModel"),d(WR,"href","/docs/transformers/pr_16450/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(QR,"href","/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdModel"),d(HR,"href","/docs/transformers/pr_16450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(UR,"href","/docs/transformers/pr_16450/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(JR,"href","/docs/transformers/pr_16450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(YR,"href","/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertModel"),d(KR,"href","/docs/transformers/pr_16450/en/model_doc/canine#transformers.CanineModel"),d(ZR,"href","/docs/transformers/pr_16450/en/model_doc/clip#transformers.CLIPModel"),d(eS,"href","/docs/transformers/pr_16450/en/model_doc/convbert#transformers.ConvBertModel"),d(oS,"href","/docs/transformers/pr_16450/en/model_doc/convnext#transformers.ConvNextModel"),d(rS,"href","/docs/transformers/pr_16450/en/model_doc/ctrl#transformers.CTRLModel"),d(tS,"href","/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(aS,"href","/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(nS,"href","/docs/transformers/pr_16450/en/model_doc/deberta#transformers.DebertaModel"),d(sS,"href","/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(lS,"href","/docs/transformers/pr_16450/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(iS,"href","/docs/transformers/pr_16450/en/model_doc/deit#transformers.DeiTModel"),d(dS,"href","/docs/transformers/pr_16450/en/model_doc/detr#transformers.DetrModel"),d(cS,"href","/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertModel"),d(fS,"href","/docs/transformers/pr_16450/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(mS,"href","/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraModel"),d(gS,"href","/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertModel"),d(hS,"href","/docs/transformers/pr_16450/en/model_doc/fnet#transformers.FNetModel"),d(pS,"href","/docs/transformers/pr_16450/en/model_doc/fsmt#transformers.FSMTModel"),d(_S,"href","/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelModel"),d(uS,"href","/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelBaseModel"),d(bS,"href","/docs/transformers/pr_16450/en/model_doc/glpn#transformers.GLPNModel"),d(vS,"href","/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.GPT2Model"),d(TS,"href","/docs/transformers/pr_16450/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(FS,"href","/docs/transformers/pr_16450/en/model_doc/gptj#transformers.GPTJModel"),d(CS,"href","/docs/transformers/pr_16450/en/model_doc/hubert#transformers.HubertModel"),d(MS,"href","/docs/transformers/pr_16450/en/model_doc/ibert#transformers.IBertModel"),d(ES,"href","/docs/transformers/pr_16450/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(yS,"href","/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(wS,"href","/docs/transformers/pr_16450/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(AS,"href","/docs/transformers/pr_16450/en/model_doc/led#transformers.LEDModel"),d(LS,"href","/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerModel"),d(BS,"href","/docs/transformers/pr_16450/en/model_doc/luke#transformers.LukeModel"),d(xS,"href","/docs/transformers/pr_16450/en/model_doc/lxmert#transformers.LxmertModel"),d(kS,"href","/docs/transformers/pr_16450/en/model_doc/m2m_100#transformers.M2M100Model"),d(RS,"href","/docs/transformers/pr_16450/en/model_doc/marian#transformers.MarianModel"),d(SS,"href","/docs/transformers/pr_16450/en/model_doc/maskformer#transformers.MaskFormerModel"),d(PS,"href","/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartModel"),d($S,"href","/docs/transformers/pr_16450/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(IS,"href","/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertModel"),d(jS,"href","/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetModel"),d(NS,"href","/docs/transformers/pr_16450/en/model_doc/mt5#transformers.MT5Model"),d(DS,"href","/docs/transformers/pr_16450/en/model_doc/nystromformer#transformers.NystromformerModel"),d(qS,"href","/docs/transformers/pr_16450/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(GS,"href","/docs/transformers/pr_16450/en/model_doc/pegasus#transformers.PegasusModel"),d(OS,"href","/docs/transformers/pr_16450/en/model_doc/perceiver#transformers.PerceiverModel"),d(XS,"href","/docs/transformers/pr_16450/en/model_doc/plbart#transformers.PLBartModel"),d(VS,"href","/docs/transformers/pr_16450/en/model_doc/poolformer#transformers.PoolFormerModel"),d(zS,"href","/docs/transformers/pr_16450/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(WS,"href","/docs/transformers/pr_16450/en/model_doc/qdqbert#transformers.QDQBertModel"),d(QS,"href","/docs/transformers/pr_16450/en/model_doc/reformer#transformers.ReformerModel"),d(HS,"href","/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertModel"),d(US,"href","/docs/transformers/pr_16450/en/model_doc/resnet#transformers.ResNetModel"),d(JS,"href","/docs/transformers/pr_16450/en/model_doc/retribert#transformers.RetriBertModel"),d(YS,"href","/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaModel"),d(KS,"href","/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerModel"),d(ZS,"href","/docs/transformers/pr_16450/en/model_doc/segformer#transformers.SegformerModel"),d(eP,"href","/docs/transformers/pr_16450/en/model_doc/sew#transformers.SEWModel"),d(oP,"href","/docs/transformers/pr_16450/en/model_doc/sew-d#transformers.SEWDModel"),d(rP,"href","/docs/transformers/pr_16450/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(tP,"href","/docs/transformers/pr_16450/en/model_doc/splinter#transformers.SplinterModel"),d(aP,"href","/docs/transformers/pr_16450/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(nP,"href","/docs/transformers/pr_16450/en/model_doc/swin#transformers.SwinModel"),d(sP,"href","/docs/transformers/pr_16450/en/model_doc/t5#transformers.T5Model"),d(lP,"href","/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TapasModel"),d(iP,"href","/docs/transformers/pr_16450/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(dP,"href","/docs/transformers/pr_16450/en/model_doc/unispeech#transformers.UniSpeechModel"),d(cP,"href","/docs/transformers/pr_16450/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(fP,"href","/docs/transformers/pr_16450/en/model_doc/van#transformers.VanModel"),d(mP,"href","/docs/transformers/pr_16450/en/model_doc/vilt#transformers.ViltModel"),d(gP,"href","/docs/transformers/pr_16450/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(hP,"href","/docs/transformers/pr_16450/en/model_doc/visual_bert#transformers.VisualBertModel"),d(pP,"href","/docs/transformers/pr_16450/en/model_doc/vit#transformers.ViTModel"),d(_P,"href","/docs/transformers/pr_16450/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(uP,"href","/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(bP,"href","/docs/transformers/pr_16450/en/model_doc/wavlm#transformers.WavLMModel"),d(vP,"href","/docs/transformers/pr_16450/en/model_doc/xglm#transformers.XGLMModel"),d(TP,"href","/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMModel"),d(FP,"href","/docs/transformers/pr_16450/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(CP,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(MP,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(EP,"href","/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetModel"),d(yP,"href","/docs/transformers/pr_16450/en/model_doc/yoso#transformers.YosoModel"),d(je,"class","docstring"),d(Jo,"class","docstring"),d(A_,"id","transformers.AutoModelForPreTraining"),d(A_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A_,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(zr,"class","docstring"),d(wP,"href","/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertForPreTraining"),d(AP,"href","/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(LP,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertForPreTraining"),d(BP,"href","/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(xP,"href","/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(kP,"href","/docs/transformers/pr_16450/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(RP,"href","/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(SP,"href","/docs/transformers/pr_16450/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(PP,"href","/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d($P,"href","/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(IP,"href","/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraForPreTraining"),d(jP,"href","/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(NP,"href","/docs/transformers/pr_16450/en/model_doc/fnet#transformers.FNetForPreTraining"),d(DP,"href","/docs/transformers/pr_16450/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(qP,"href","/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(GP,"href","/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(OP,"href","/docs/transformers/pr_16450/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(XP,"href","/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(VP,"href","/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(zP,"href","/docs/transformers/pr_16450/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(WP,"href","/docs/transformers/pr_16450/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(QP,"href","/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(HP,"href","/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(UP,"href","/docs/transformers/pr_16450/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(JP,"href","/docs/transformers/pr_16450/en/model_doc/retribert#transformers.RetriBertModel"),d(YP,"href","/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(KP,"href","/docs/transformers/pr_16450/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(ZP,"href","/docs/transformers/pr_16450/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(e$,"href","/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(o$,"href","/docs/transformers/pr_16450/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(r$,"href","/docs/transformers/pr_16450/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(t$,"href","/docs/transformers/pr_16450/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(a$,"href","/docs/transformers/pr_16450/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(n$,"href","/docs/transformers/pr_16450/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(s$,"href","/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(l$,"href","/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(i$,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(d$,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(c$,"href","/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring"),d(Yo,"class","docstring"),d(hu,"id","transformers.AutoModelForCausalLM"),d(hu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hu,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(Wr,"class","docstring"),d(f$,"href","/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartForCausalLM"),d(m$,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertLMHeadModel"),d(g$,"href","/docs/transformers/pr_16450/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(h$,"href","/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(p$,"href","/docs/transformers/pr_16450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(_$,"href","/docs/transformers/pr_16450/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(u$,"href","/docs/transformers/pr_16450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(b$,"href","/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(v$,"href","/docs/transformers/pr_16450/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(T$,"href","/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(F$,"href","/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraForCausalLM"),d(C$,"href","/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(M$,"href","/docs/transformers/pr_16450/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(E$,"href","/docs/transformers/pr_16450/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(y$,"href","/docs/transformers/pr_16450/en/model_doc/marian#transformers.MarianForCausalLM"),d(w$,"href","/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartForCausalLM"),d(A$,"href","/docs/transformers/pr_16450/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(L$,"href","/docs/transformers/pr_16450/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(B$,"href","/docs/transformers/pr_16450/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(x$,"href","/docs/transformers/pr_16450/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(k$,"href","/docs/transformers/pr_16450/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(R$,"href","/docs/transformers/pr_16450/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(S$,"href","/docs/transformers/pr_16450/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(P$,"href","/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertForCausalLM"),d($$,"href","/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(I$,"href","/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(j$,"href","/docs/transformers/pr_16450/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(N$,"href","/docs/transformers/pr_16450/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(D$,"href","/docs/transformers/pr_16450/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(q$,"href","/docs/transformers/pr_16450/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(G$,"href","/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(O$,"href","/docs/transformers/pr_16450/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(X$,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(V$,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(z$,"href","/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(De,"class","docstring"),d(Ko,"class","docstring"),d(Yu,"id","transformers.AutoModelForMaskedLM"),d(Yu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Yu,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(Qr,"class","docstring"),d(W$,"href","/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(Q$,"href","/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(H$,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertForMaskedLM"),d(U$,"href","/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(J$,"href","/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(Y$,"href","/docs/transformers/pr_16450/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(K$,"href","/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(Z$,"href","/docs/transformers/pr_16450/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(eI,"href","/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(oI,"href","/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(rI,"href","/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(tI,"href","/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(aI,"href","/docs/transformers/pr_16450/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(nI,"href","/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(sI,"href","/docs/transformers/pr_16450/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(lI,"href","/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(iI,"href","/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(dI,"href","/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(cI,"href","/docs/transformers/pr_16450/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(fI,"href","/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(mI,"href","/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(gI,"href","/docs/transformers/pr_16450/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(hI,"href","/docs/transformers/pr_16450/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(pI,"href","/docs/transformers/pr_16450/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(_I,"href","/docs/transformers/pr_16450/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(uI,"href","/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(bI,"href","/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(vI,"href","/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(TI,"href","/docs/transformers/pr_16450/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(FI,"href","/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(CI,"href","/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(MI,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(EI,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(yI,"href","/docs/transformers/pr_16450/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(qe,"class","docstring"),d(Zo,"class","docstring"),d(P1,"id","transformers.AutoModelForSeq2SeqLM"),d(P1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(P1,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(Hr,"class","docstring"),d(wI,"href","/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(AI,"href","/docs/transformers/pr_16450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(LI,"href","/docs/transformers/pr_16450/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(BI,"href","/docs/transformers/pr_16450/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(xI,"href","/docs/transformers/pr_16450/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(kI,"href","/docs/transformers/pr_16450/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(RI,"href","/docs/transformers/pr_16450/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(SI,"href","/docs/transformers/pr_16450/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(PI,"href","/docs/transformers/pr_16450/en/model_doc/marian#transformers.MarianMTModel"),d($I,"href","/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(II,"href","/docs/transformers/pr_16450/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(jI,"href","/docs/transformers/pr_16450/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(NI,"href","/docs/transformers/pr_16450/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(DI,"href","/docs/transformers/pr_16450/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(qI,"href","/docs/transformers/pr_16450/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(GI,"href","/docs/transformers/pr_16450/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(K1,"id","transformers.AutoModelForSequenceClassification"),d(K1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K1,"href","#transformers.AutoModelForSequenceClassification"),d(fd,"class","relative group"),d(Ur,"class","docstring"),d(OI,"href","/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(XI,"href","/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartForSequenceClassification"),d(VI,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertForSequenceClassification"),d(zI,"href","/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(WI,"href","/docs/transformers/pr_16450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(QI,"href","/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(HI,"href","/docs/transformers/pr_16450/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(UI,"href","/docs/transformers/pr_16450/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(JI,"href","/docs/transformers/pr_16450/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(YI,"href","/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(KI,"href","/docs/transformers/pr_16450/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(ZI,"href","/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(ej,"href","/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(oj,"href","/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(rj,"href","/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(tj,"href","/docs/transformers/pr_16450/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(aj,"href","/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(nj,"href","/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(sj,"href","/docs/transformers/pr_16450/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(lj,"href","/docs/transformers/pr_16450/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(ij,"href","/docs/transformers/pr_16450/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(dj,"href","/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(cj,"href","/docs/transformers/pr_16450/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(fj,"href","/docs/transformers/pr_16450/en/model_doc/led#transformers.LEDForSequenceClassification"),d(mj,"href","/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(gj,"href","/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(hj,"href","/docs/transformers/pr_16450/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(pj,"href","/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(_j,"href","/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(uj,"href","/docs/transformers/pr_16450/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(bj,"href","/docs/transformers/pr_16450/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(vj,"href","/docs/transformers/pr_16450/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(Tj,"href","/docs/transformers/pr_16450/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(Fj,"href","/docs/transformers/pr_16450/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(Cj,"href","/docs/transformers/pr_16450/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(Mj,"href","/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(Ej,"href","/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(yj,"href","/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(wj,"href","/docs/transformers/pr_16450/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(Aj,"href","/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(Lj,"href","/docs/transformers/pr_16450/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(Bj,"href","/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(xj,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(kj,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(Rj,"href","/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(Sj,"href","/docs/transformers/pr_16450/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(W4,"id","transformers.AutoModelForMultipleChoice"),d(W4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W4,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(Jr,"class","docstring"),d(Pj,"href","/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d($j,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertForMultipleChoice"),d(Ij,"href","/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(jj,"href","/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(Nj,"href","/docs/transformers/pr_16450/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(Dj,"href","/docs/transformers/pr_16450/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(qj,"href","/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(Gj,"href","/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(Oj,"href","/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(Xj,"href","/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(Vj,"href","/docs/transformers/pr_16450/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(zj,"href","/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(Wj,"href","/docs/transformers/pr_16450/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(Qj,"href","/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(Hj,"href","/docs/transformers/pr_16450/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(Uj,"href","/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(Jj,"href","/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(Yj,"href","/docs/transformers/pr_16450/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(Kj,"href","/docs/transformers/pr_16450/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(Zj,"href","/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(eN,"href","/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(oN,"href","/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(rN,"href","/docs/transformers/pr_16450/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(tN,"href","/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(aN,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(nN,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(sN,"href","/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(lN,"href","/docs/transformers/pr_16450/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Xe,"class","docstring"),d(rr,"class","docstring"),d(Cb,"id","transformers.AutoModelForNextSentencePrediction"),d(Cb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Cb,"href","#transformers.AutoModelForNextSentencePrediction"),d(ud,"class","relative group"),d(Yr,"class","docstring"),d(iN,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(dN,"href","/docs/transformers/pr_16450/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(cN,"href","/docs/transformers/pr_16450/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(fN,"href","/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(mN,"href","/docs/transformers/pr_16450/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Ve,"class","docstring"),d(tr,"class","docstring"),d(Bb,"id","transformers.AutoModelForTokenClassification"),d(Bb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Bb,"href","#transformers.AutoModelForTokenClassification"),d(Td,"class","relative group"),d(Kr,"class","docstring"),d(gN,"href","/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(hN,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertForTokenClassification"),d(pN,"href","/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(_N,"href","/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(uN,"href","/docs/transformers/pr_16450/en/model_doc/canine#transformers.CanineForTokenClassification"),d(bN,"href","/docs/transformers/pr_16450/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(vN,"href","/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(TN,"href","/docs/transformers/pr_16450/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(FN,"href","/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(CN,"href","/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(MN,"href","/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(EN,"href","/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(yN,"href","/docs/transformers/pr_16450/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(wN,"href","/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(AN,"href","/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(LN,"href","/docs/transformers/pr_16450/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(BN,"href","/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(xN,"href","/docs/transformers/pr_16450/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(kN,"href","/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(RN,"href","/docs/transformers/pr_16450/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(SN,"href","/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(PN,"href","/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d($N,"href","/docs/transformers/pr_16450/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(IN,"href","/docs/transformers/pr_16450/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(jN,"href","/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(NN,"href","/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(DN,"href","/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(qN,"href","/docs/transformers/pr_16450/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(GN,"href","/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(ON,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(XN,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(VN,"href","/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(zN,"href","/docs/transformers/pr_16450/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(c5,"id","transformers.AutoModelForQuestionAnswering"),d(c5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c5,"href","#transformers.AutoModelForQuestionAnswering"),d(Md,"class","relative group"),d(Zr,"class","docstring"),d(WN,"href","/docs/transformers/pr_16450/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(QN,"href","/docs/transformers/pr_16450/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(HN,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(UN,"href","/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(JN,"href","/docs/transformers/pr_16450/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(YN,"href","/docs/transformers/pr_16450/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(KN,"href","/docs/transformers/pr_16450/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(ZN,"href","/docs/transformers/pr_16450/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(eD,"href","/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(oD,"href","/docs/transformers/pr_16450/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(rD,"href","/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(tD,"href","/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(aD,"href","/docs/transformers/pr_16450/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(sD,"href","/docs/transformers/pr_16450/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_16450/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_16450/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_16450/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_16450/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_16450/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_16450/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_16450/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_16450/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(pD,"href","/docs/transformers/pr_16450/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(_D,"href","/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(uD,"href","/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(bD,"href","/docs/transformers/pr_16450/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(vD,"href","/docs/transformers/pr_16450/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(TD,"href","/docs/transformers/pr_16450/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(FD,"href","/docs/transformers/pr_16450/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(CD,"href","/docs/transformers/pr_16450/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(MD,"href","/docs/transformers/pr_16450/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(ED,"href","/docs/transformers/pr_16450/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(yD,"href","/docs/transformers/pr_16450/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(wD,"href","/docs/transformers/pr_16450/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(AD,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(LD,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(BD,"href","/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(xD,"href","/docs/transformers/pr_16450/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(We,"class","docstring"),d(nr,"class","docstring"),d(Y5,"id","transformers.AutoModelForTableQuestionAnswering"),d(Y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y5,"href","#transformers.AutoModelForTableQuestionAnswering"),d(wd,"class","relative group"),d(et,"class","docstring"),d(kD,"href","/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(Qe,"class","docstring"),d(sr,"class","docstring"),d(e2,"id","transformers.AutoModelForImageClassification"),d(e2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e2,"href","#transformers.AutoModelForImageClassification"),d(Bd,"class","relative group"),d(ot,"class","docstring"),d(RD,"href","/docs/transformers/pr_16450/en/model_doc/beit#transformers.BeitForImageClassification"),d(SD,"href","/docs/transformers/pr_16450/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(PD,"href","/docs/transformers/pr_16450/en/model_doc/deit#transformers.DeiTForImageClassification"),d($D,"href","/docs/transformers/pr_16450/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(ID,"href","/docs/transformers/pr_16450/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(jD,"href","/docs/transformers/pr_16450/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(ND,"href","/docs/transformers/pr_16450/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(DD,"href","/docs/transformers/pr_16450/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(qD,"href","/docs/transformers/pr_16450/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(GD,"href","/docs/transformers/pr_16450/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(OD,"href","/docs/transformers/pr_16450/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(XD,"href","/docs/transformers/pr_16450/en/model_doc/swin#transformers.SwinForImageClassification"),d(VD,"href","/docs/transformers/pr_16450/en/model_doc/van#transformers.VanForImageClassification"),d(zD,"href","/docs/transformers/pr_16450/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(f2,"id","transformers.AutoModelForVision2Seq"),d(f2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f2,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d(rt,"class","docstring"),d(WD,"href","/docs/transformers/pr_16450/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(h2,"id","transformers.AutoModelForAudioClassification"),d(h2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h2,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(tt,"class","docstring"),d(QD,"href","/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(HD,"href","/docs/transformers/pr_16450/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(UD,"href","/docs/transformers/pr_16450/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(JD,"href","/docs/transformers/pr_16450/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(YD,"href","/docs/transformers/pr_16450/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(KD,"href","/docs/transformers/pr_16450/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(ZD,"href","/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(eq,"href","/docs/transformers/pr_16450/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d(E2,"id","transformers.AutoModelForAudioFrameClassification"),d(E2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E2,"href","#transformers.AutoModelForAudioFrameClassification"),d(Nd,"class","relative group"),d(at,"class","docstring"),d(oq,"href","/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(rq,"href","/docs/transformers/pr_16450/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(tq,"href","/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(aq,"href","/docs/transformers/pr_16450/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(x2,"id","transformers.AutoModelForCTC"),d(x2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x2,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(nt,"class","docstring"),d(nq,"href","/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(sq,"href","/docs/transformers/pr_16450/en/model_doc/hubert#transformers.HubertForCTC"),d(lq,"href","/docs/transformers/pr_16450/en/model_doc/sew#transformers.SEWForCTC"),d(iq,"href","/docs/transformers/pr_16450/en/model_doc/sew-d#transformers.SEWDForCTC"),d(dq,"href","/docs/transformers/pr_16450/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(cq,"href","/docs/transformers/pr_16450/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(fq,"href","/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(mq,"href","/docs/transformers/pr_16450/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(fr,"class","docstring"),d(q2,"id","transformers.AutoModelForSpeechSeq2Seq"),d(q2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(q2,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Vd,"class","relative group"),d(st,"class","docstring"),d(gq,"href","/docs/transformers/pr_16450/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(hq,"href","/docs/transformers/pr_16450/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(mr,"class","docstring"),d(V2,"id","transformers.AutoModelForAudioXVector"),d(V2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V2,"href","#transformers.AutoModelForAudioXVector"),d(Qd,"class","relative group"),d(lt,"class","docstring"),d(pq,"href","/docs/transformers/pr_16450/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(_q,"href","/docs/transformers/pr_16450/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(uq,"href","/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(bq,"href","/docs/transformers/pr_16450/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(J2,"id","transformers.AutoModelForMaskedImageModeling"),d(J2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J2,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(it,"class","docstring"),d(vq,"href","/docs/transformers/pr_16450/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(Tq,"href","/docs/transformers/pr_16450/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(Fq,"href","/docs/transformers/pr_16450/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(ov,"id","transformers.AutoModelForObjectDetection"),d(ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ov,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d(dt,"class","docstring"),d(Cq,"href","/docs/transformers/pr_16450/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(pr,"class","docstring"),d(av,"id","transformers.AutoModelForImageSegmentation"),d(av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(av,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(ct,"class","docstring"),d(Mq,"href","/docs/transformers/pr_16450/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(_r,"class","docstring"),d(lv,"id","transformers.AutoModelForSemanticSegmentation"),d(lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lv,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(ft,"class","docstring"),d(Eq,"href","/docs/transformers/pr_16450/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(yq,"href","/docs/transformers/pr_16450/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(ur,"class","docstring"),d(fv,"id","transformers.AutoModelForInstanceSegmentation"),d(fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fv,"href","#transformers.AutoModelForInstanceSegmentation"),d(dc,"class","relative group"),d(mt,"class","docstring"),d(wq,"href","/docs/transformers/pr_16450/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(hv,"id","transformers.TFAutoModel"),d(hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hv,"href","#transformers.TFAutoModel"),d(mc,"class","relative group"),d(gt,"class","docstring"),d(Aq,"href","/docs/transformers/pr_16450/en/model_doc/albert#transformers.TFAlbertModel"),d(Lq,"href","/docs/transformers/pr_16450/en/model_doc/bart#transformers.TFBartModel"),d(Bq,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.TFBertModel"),d(xq,"href","/docs/transformers/pr_16450/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(kq,"href","/docs/transformers/pr_16450/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(Rq,"href","/docs/transformers/pr_16450/en/model_doc/camembert#transformers.TFCamembertModel"),d(Sq,"href","/docs/transformers/pr_16450/en/model_doc/clip#transformers.TFCLIPModel"),d(Pq,"href","/docs/transformers/pr_16450/en/model_doc/convbert#transformers.TFConvBertModel"),d($q,"href","/docs/transformers/pr_16450/en/model_doc/convnext#transformers.TFConvNextModel"),d(Iq,"href","/docs/transformers/pr_16450/en/model_doc/ctrl#transformers.TFCTRLModel"),d(jq,"href","/docs/transformers/pr_16450/en/model_doc/deberta#transformers.TFDebertaModel"),d(Nq,"href","/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(Dq,"href","/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(qq,"href","/docs/transformers/pr_16450/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(Gq,"href","/docs/transformers/pr_16450/en/model_doc/electra#transformers.TFElectraModel"),d(Oq,"href","/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(Xq,"href","/docs/transformers/pr_16450/en/model_doc/funnel#transformers.TFFunnelModel"),d(Vq,"href","/docs/transformers/pr_16450/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(zq,"href","/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.TFGPT2Model"),d(Wq,"href","/docs/transformers/pr_16450/en/model_doc/gptj#transformers.TFGPTJModel"),d(Qq,"href","/docs/transformers/pr_16450/en/model_doc/hubert#transformers.TFHubertModel"),d(Hq,"href","/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(Uq,"href","/docs/transformers/pr_16450/en/model_doc/led#transformers.TFLEDModel"),d(Jq,"href","/docs/transformers/pr_16450/en/model_doc/longformer#transformers.TFLongformerModel"),d(Yq,"href","/docs/transformers/pr_16450/en/model_doc/lxmert#transformers.TFLxmertModel"),d(Kq,"href","/docs/transformers/pr_16450/en/model_doc/marian#transformers.TFMarianModel"),d(Zq,"href","/docs/transformers/pr_16450/en/model_doc/mbart#transformers.TFMBartModel"),d(eG,"href","/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(oG,"href","/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.TFMPNetModel"),d(rG,"href","/docs/transformers/pr_16450/en/model_doc/mt5#transformers.TFMT5Model"),d(tG,"href","/docs/transformers/pr_16450/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(aG,"href","/docs/transformers/pr_16450/en/model_doc/pegasus#transformers.TFPegasusModel"),d(nG,"href","/docs/transformers/pr_16450/en/model_doc/rembert#transformers.TFRemBertModel"),d(sG,"href","/docs/transformers/pr_16450/en/model_doc/roberta#transformers.TFRobertaModel"),d(lG,"href","/docs/transformers/pr_16450/en/model_doc/roformer#transformers.TFRoFormerModel"),d(iG,"href","/docs/transformers/pr_16450/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(dG,"href","/docs/transformers/pr_16450/en/model_doc/t5#transformers.TFT5Model"),d(cG,"href","/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TFTapasModel"),d(fG,"href","/docs/transformers/pr_16450/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(mG,"href","/docs/transformers/pr_16450/en/model_doc/vit#transformers.TFViTModel"),d(gG,"href","/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(hG,"href","/docs/transformers/pr_16450/en/model_doc/xlm#transformers.TFXLMModel"),d(pG,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(_G,"href","/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(vr,"class","docstring"),d(t6,"id","transformers.TFAutoModelForPreTraining"),d(t6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t6,"href","#transformers.TFAutoModelForPreTraining"),d(pc,"class","relative group"),d(ht,"class","docstring"),d(uG,"href","/docs/transformers/pr_16450/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(bG,"href","/docs/transformers/pr_16450/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(vG,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.TFBertForPreTraining"),d(TG,"href","/docs/transformers/pr_16450/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(FG,"href","/docs/transformers/pr_16450/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(CG,"href","/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(MG,"href","/docs/transformers/pr_16450/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(EG,"href","/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(yG,"href","/docs/transformers/pr_16450/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(wG,"href","/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(AG,"href","/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(LG,"href","/docs/transformers/pr_16450/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(BG,"href","/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(xG,"href","/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(kG,"href","/docs/transformers/pr_16450/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(RG,"href","/docs/transformers/pr_16450/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(SG,"href","/docs/transformers/pr_16450/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(PG,"href","/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d($G,"href","/docs/transformers/pr_16450/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(IG,"href","/docs/transformers/pr_16450/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(jG,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(NG,"href","/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(Tr,"class","docstring"),d(w6,"id","transformers.TFAutoModelForCausalLM"),d(w6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w6,"href","#transformers.TFAutoModelForCausalLM"),d(bc,"class","relative group"),d(pt,"class","docstring"),d(DG,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(qG,"href","/docs/transformers/pr_16450/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(GG,"href","/docs/transformers/pr_16450/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(OG,"href","/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(XG,"href","/docs/transformers/pr_16450/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(VG,"href","/docs/transformers/pr_16450/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(zG,"href","/docs/transformers/pr_16450/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(WG,"href","/docs/transformers/pr_16450/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(QG,"href","/docs/transformers/pr_16450/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(HG,"href","/docs/transformers/pr_16450/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(UG,"href","/docs/transformers/pr_16450/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(JG,"href","/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Fr,"class","docstring"),d(D6,"id","transformers.TFAutoModelForImageClassification"),d(D6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(D6,"href","#transformers.TFAutoModelForImageClassification"),d(Fc,"class","relative group"),d(_t,"class","docstring"),d(YG,"href","/docs/transformers/pr_16450/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(KG,"href","/docs/transformers/pr_16450/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Cr,"class","docstring"),d(O6,"id","transformers.TFAutoModelForMaskedLM"),d(O6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O6,"href","#transformers.TFAutoModelForMaskedLM"),d(Ec,"class","relative group"),d(ut,"class","docstring"),d(ZG,"href","/docs/transformers/pr_16450/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(eO,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(oO,"href","/docs/transformers/pr_16450/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(rO,"href","/docs/transformers/pr_16450/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(tO,"href","/docs/transformers/pr_16450/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(aO,"href","/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(nO,"href","/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(sO,"href","/docs/transformers/pr_16450/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(lO,"href","/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(iO,"href","/docs/transformers/pr_16450/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(dO,"href","/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(cO,"href","/docs/transformers/pr_16450/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(fO,"href","/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(mO,"href","/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(gO,"href","/docs/transformers/pr_16450/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(hO,"href","/docs/transformers/pr_16450/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(pO,"href","/docs/transformers/pr_16450/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(_O,"href","/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(uO,"href","/docs/transformers/pr_16450/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(bO,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Mr,"class","docstring"),d(d0,"id","transformers.TFAutoModelForSeq2SeqLM"),d(d0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d0,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Ac,"class","relative group"),d(bt,"class","docstring"),d(vO,"href","/docs/transformers/pr_16450/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(TO,"href","/docs/transformers/pr_16450/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(FO,"href","/docs/transformers/pr_16450/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(CO,"href","/docs/transformers/pr_16450/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(MO,"href","/docs/transformers/pr_16450/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(EO,"href","/docs/transformers/pr_16450/en/model_doc/marian#transformers.TFMarianMTModel"),d(yO,"href","/docs/transformers/pr_16450/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(wO,"href","/docs/transformers/pr_16450/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(AO,"href","/docs/transformers/pr_16450/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(LO,"href","/docs/transformers/pr_16450/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring"),d(Er,"class","docstring"),d(T0,"id","transformers.TFAutoModelForSequenceClassification"),d(T0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T0,"href","#transformers.TFAutoModelForSequenceClassification"),d(xc,"class","relative group"),d(vt,"class","docstring"),d(BO,"href","/docs/transformers/pr_16450/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(xO,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(kO,"href","/docs/transformers/pr_16450/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(RO,"href","/docs/transformers/pr_16450/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(SO,"href","/docs/transformers/pr_16450/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(PO,"href","/docs/transformers/pr_16450/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d($O,"href","/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(IO,"href","/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(jO,"href","/docs/transformers/pr_16450/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(NO,"href","/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(DO,"href","/docs/transformers/pr_16450/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(qO,"href","/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(GO,"href","/docs/transformers/pr_16450/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(OO,"href","/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(XO,"href","/docs/transformers/pr_16450/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(VO,"href","/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(zO,"href","/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(WO,"href","/docs/transformers/pr_16450/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(QO,"href","/docs/transformers/pr_16450/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(HO,"href","/docs/transformers/pr_16450/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(UO,"href","/docs/transformers/pr_16450/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(JO,"href","/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(YO,"href","/docs/transformers/pr_16450/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(KO,"href","/docs/transformers/pr_16450/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(ZO,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(eX,"href","/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(To,"class","docstring"),d(yr,"class","docstring"),d(Q0,"id","transformers.TFAutoModelForMultipleChoice"),d(Q0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q0,"href","#transformers.TFAutoModelForMultipleChoice"),d(Sc,"class","relative group"),d(Tt,"class","docstring"),d(oX,"href","/docs/transformers/pr_16450/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(rX,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(tX,"href","/docs/transformers/pr_16450/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(aX,"href","/docs/transformers/pr_16450/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(nX,"href","/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(sX,"href","/docs/transformers/pr_16450/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(lX,"href","/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(iX,"href","/docs/transformers/pr_16450/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(dX,"href","/docs/transformers/pr_16450/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(cX,"href","/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(fX,"href","/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(mX,"href","/docs/transformers/pr_16450/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(gX,"href","/docs/transformers/pr_16450/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(hX,"href","/docs/transformers/pr_16450/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(pX,"href","/docs/transformers/pr_16450/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(_X,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(uX,"href","/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Fo,"class","docstring"),d(wr,"class","docstring"),d(fT,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(fT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fT,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Ic,"class","relative group"),d(Ft,"class","docstring"),d(bX,"href","/docs/transformers/pr_16450/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Co,"class","docstring"),d(Ar,"class","docstring"),d(gT,"id","transformers.TFAutoModelForTokenClassification"),d(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gT,"href","#transformers.TFAutoModelForTokenClassification"),d(Dc,"class","relative group"),d(Ct,"class","docstring"),d(vX,"href","/docs/transformers/pr_16450/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(TX,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(FX,"href","/docs/transformers/pr_16450/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(CX,"href","/docs/transformers/pr_16450/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(MX,"href","/docs/transformers/pr_16450/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(EX,"href","/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(yX,"href","/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(wX,"href","/docs/transformers/pr_16450/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(AX,"href","/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(LX,"href","/docs/transformers/pr_16450/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(BX,"href","/docs/transformers/pr_16450/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(xX,"href","/docs/transformers/pr_16450/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(kX,"href","/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(RX,"href","/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(SX,"href","/docs/transformers/pr_16450/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(PX,"href","/docs/transformers/pr_16450/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d($X,"href","/docs/transformers/pr_16450/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(IX,"href","/docs/transformers/pr_16450/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(jX,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(NX,"href","/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Mo,"class","docstring"),d(Lr,"class","docstring"),d(PT,"id","transformers.TFAutoModelForQuestionAnswering"),d(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(PT,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Oc,"class","relative group"),d(Mt,"class","docstring"),d(DX,"href","/docs/transformers/pr_16450/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(qX,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(GX,"href","/docs/transformers/pr_16450/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(OX,"href","/docs/transformers/pr_16450/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(XX,"href","/docs/transformers/pr_16450/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(VX,"href","/docs/transformers/pr_16450/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(zX,"href","/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(WX,"href","/docs/transformers/pr_16450/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(QX,"href","/docs/transformers/pr_16450/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(HX,"href","/docs/transformers/pr_16450/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(UX,"href","/docs/transformers/pr_16450/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(JX,"href","/docs/transformers/pr_16450/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(YX,"href","/docs/transformers/pr_16450/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(KX,"href","/docs/transformers/pr_16450/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(ZX,"href","/docs/transformers/pr_16450/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(eV,"href","/docs/transformers/pr_16450/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(oV,"href","/docs/transformers/pr_16450/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(rV,"href","/docs/transformers/pr_16450/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(tV,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(aV,"href","/docs/transformers/pr_16450/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Eo,"class","docstring"),d(Br,"class","docstring"),d(oF,"id","transformers.TFAutoModelForVision2Seq"),d(oF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oF,"href","#transformers.TFAutoModelForVision2Seq"),d(zc,"class","relative group"),d(Et,"class","docstring"),d(nV,"href","/docs/transformers/pr_16450/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(yo,"class","docstring"),d(xr,"class","docstring"),d(tF,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(tF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tF,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Hc,"class","relative group"),d(yt,"class","docstring"),d(sV,"href","/docs/transformers/pr_16450/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(nF,"id","transformers.FlaxAutoModel"),d(nF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nF,"href","#transformers.FlaxAutoModel"),d(Yc,"class","relative group"),d(wt,"class","docstring"),d(lV,"href","/docs/transformers/pr_16450/en/model_doc/albert#transformers.FlaxAlbertModel"),d(iV,"href","/docs/transformers/pr_16450/en/model_doc/bart#transformers.FlaxBartModel"),d(dV,"href","/docs/transformers/pr_16450/en/model_doc/beit#transformers.FlaxBeitModel"),d(cV,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.FlaxBertModel"),d(fV,"href","/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(mV,"href","/docs/transformers/pr_16450/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(gV,"href","/docs/transformers/pr_16450/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(hV,"href","/docs/transformers/pr_16450/en/model_doc/clip#transformers.FlaxCLIPModel"),d(pV,"href","/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(_V,"href","/docs/transformers/pr_16450/en/model_doc/electra#transformers.FlaxElectraModel"),d(uV,"href","/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(bV,"href","/docs/transformers/pr_16450/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(vV,"href","/docs/transformers/pr_16450/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(TV,"href","/docs/transformers/pr_16450/en/model_doc/marian#transformers.FlaxMarianModel"),d(FV,"href","/docs/transformers/pr_16450/en/model_doc/mbart#transformers.FlaxMBartModel"),d(CV,"href","/docs/transformers/pr_16450/en/model_doc/mt5#transformers.FlaxMT5Model"),d(MV,"href","/docs/transformers/pr_16450/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(EV,"href","/docs/transformers/pr_16450/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(yV,"href","/docs/transformers/pr_16450/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(wV,"href","/docs/transformers/pr_16450/en/model_doc/t5#transformers.FlaxT5Model"),d(AV,"href","/docs/transformers/pr_16450/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(LV,"href","/docs/transformers/pr_16450/en/model_doc/vit#transformers.FlaxViTModel"),d(BV,"href","/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(xV,"href","/docs/transformers/pr_16450/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(kV,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Ao,"class","docstring"),d(Rr,"class","docstring"),d(kF,"id","transformers.FlaxAutoModelForCausalLM"),d(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kF,"href","#transformers.FlaxAutoModelForCausalLM"),d(ef,"class","relative group"),d(At,"class","docstring"),d(RV,"href","/docs/transformers/pr_16450/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(SV,"href","/docs/transformers/pr_16450/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(PV,"href","/docs/transformers/pr_16450/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d($V,"href","/docs/transformers/pr_16450/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(IV,"href","/docs/transformers/pr_16450/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Sr,"class","docstring"),d(jF,"id","transformers.FlaxAutoModelForPreTraining"),d(jF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jF,"href","#transformers.FlaxAutoModelForPreTraining"),d(tf,"class","relative group"),d(Lt,"class","docstring"),d(jV,"href","/docs/transformers/pr_16450/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(NV,"href","/docs/transformers/pr_16450/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(DV,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(qV,"href","/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(GV,"href","/docs/transformers/pr_16450/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(OV,"href","/docs/transformers/pr_16450/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(XV,"href","/docs/transformers/pr_16450/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(VV,"href","/docs/transformers/pr_16450/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(zV,"href","/docs/transformers/pr_16450/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(WV,"href","/docs/transformers/pr_16450/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(QV,"href","/docs/transformers/pr_16450/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(HV,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Bo,"class","docstring"),d(Pr,"class","docstring"),d(JF,"id","transformers.FlaxAutoModelForMaskedLM"),d(JF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(JF,"href","#transformers.FlaxAutoModelForMaskedLM"),d(sf,"class","relative group"),d(Bt,"class","docstring"),d(UV,"href","/docs/transformers/pr_16450/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(JV,"href","/docs/transformers/pr_16450/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(YV,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(KV,"href","/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(ZV,"href","/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(ez,"href","/docs/transformers/pr_16450/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(oz,"href","/docs/transformers/pr_16450/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(rz,"href","/docs/transformers/pr_16450/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(tz,"href","/docs/transformers/pr_16450/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(az,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d($r,"class","docstring"),d(lC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(lC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(cf,"class","relative group"),d(xt,"class","docstring"),d(nz,"href","/docs/transformers/pr_16450/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(sz,"href","/docs/transformers/pr_16450/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(lz,"href","/docs/transformers/pr_16450/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(iz,"href","/docs/transformers/pr_16450/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(dz,"href","/docs/transformers/pr_16450/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(cz,"href","/docs/transformers/pr_16450/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(fz,"href","/docs/transformers/pr_16450/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(mz,"href","/docs/transformers/pr_16450/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(gz,"href","/docs/transformers/pr_16450/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(ko,"class","docstring"),d(Ir,"class","docstring"),d(uC,"id","transformers.FlaxAutoModelForSequenceClassification"),d(uC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uC,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(gf,"class","relative group"),d(kt,"class","docstring"),d(hz,"href","/docs/transformers/pr_16450/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(pz,"href","/docs/transformers/pr_16450/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(_z,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(uz,"href","/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(bz,"href","/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(vz,"href","/docs/transformers/pr_16450/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(Tz,"href","/docs/transformers/pr_16450/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(Fz,"href","/docs/transformers/pr_16450/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(Cz,"href","/docs/transformers/pr_16450/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(Mz,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(jr,"class","docstring"),d(LC,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(LC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(_f,"class","relative group"),d(Rt,"class","docstring"),d(Ez,"href","/docs/transformers/pr_16450/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(yz,"href","/docs/transformers/pr_16450/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(wz,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(Az,"href","/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(Lz,"href","/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(Bz,"href","/docs/transformers/pr_16450/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(xz,"href","/docs/transformers/pr_16450/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(kz,"href","/docs/transformers/pr_16450/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(Rz,"href","/docs/transformers/pr_16450/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(Sz,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(So,"class","docstring"),d(Nr,"class","docstring"),d(DC,"id","transformers.FlaxAutoModelForTokenClassification"),d(DC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(DC,"href","#transformers.FlaxAutoModelForTokenClassification"),d(vf,"class","relative group"),d(St,"class","docstring"),d(Pz,"href","/docs/transformers/pr_16450/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d($z,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(Iz,"href","/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(jz,"href","/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(Nz,"href","/docs/transformers/pr_16450/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(Dz,"href","/docs/transformers/pr_16450/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(qz,"href","/docs/transformers/pr_16450/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(Gz,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(Dr,"class","docstring"),d(HC,"id","transformers.FlaxAutoModelForMultipleChoice"),d(HC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(HC,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Cf,"class","relative group"),d(Pt,"class","docstring"),d(Oz,"href","/docs/transformers/pr_16450/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(Xz,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(Vz,"href","/docs/transformers/pr_16450/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(zz,"href","/docs/transformers/pr_16450/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(Wz,"href","/docs/transformers/pr_16450/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(Qz,"href","/docs/transformers/pr_16450/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(Hz,"href","/docs/transformers/pr_16450/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Uz,"href","/docs/transformers/pr_16450/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(qr,"class","docstring"),d(tM,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(tM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tM,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(yf,"class","relative group"),d($t,"class","docstring"),d(Jz,"href","/docs/transformers/pr_16450/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(nM,"id","transformers.FlaxAutoModelForImageClassification"),d(nM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nM,"href","#transformers.FlaxAutoModelForImageClassification"),d(Lf,"class","relative group"),d(It,"class","docstring"),d(Yz,"href","/docs/transformers/pr_16450/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(Kz,"href","/docs/transformers/pr_16450/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(jo,"class","docstring"),d(Or,"class","docstring"),d(iM,"id","transformers.FlaxAutoModelForVision2Seq"),d(iM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iM,"href","#transformers.FlaxAutoModelForVision2Seq"),d(kf,"class","relative group"),d(jt,"class","docstring"),d(Zz,"href","/docs/transformers/pr_16450/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring"),d(Xr,"class","docstring")},m(c,u){e(document.head,Z),b(c,io,u),b(c,de,u),e(de,Ee),e(Ee,lo),g(me,lo,null),e(de,Ce),e(de,Vo),e(Vo,Ii),b(c,If,u),b(c,fa,u),e(fa,ji),e(fa,Ni),e(Ni,dE),e(fa,jf),b(c,Be,u),b(c,co,u),e(co,Di),e(co,Gn),e(Gn,cE),e(co,On),e(co,Xn),e(Xn,fE),e(co,qi),e(co,Vn),e(Vn,mE),e(co,Gi),b(c,Nf,u),g(qa,c,u),b(c,fo,u),b(c,_e,u),e(_e,r9),e(_e,Oi),e(Oi,t9),e(_e,a9),b(c,zo,u),b(c,Ga,u),e(Ga,n9),e(Ga,Df),e(Df,s9),e(Ga,x$e),b(c,_ke,u),b(c,Xi,u),e(Xi,qf),e(qf,WQ),g(gE,WQ,null),e(Xi,k$e),e(Xi,QQ),e(QQ,R$e),b(c,uke,u),b(c,zn,u),e(zn,S$e),e(zn,HQ),e(HQ,P$e),e(zn,$$e),e(zn,UQ),e(UQ,I$e),e(zn,j$e),b(c,bke,u),g(hE,c,u),b(c,vke,u),b(c,l9,u),e(l9,N$e),b(c,Tke,u),g(Gf,c,u),b(c,Fke,u),b(c,Vi,u),e(Vi,Of),e(Of,JQ),g(pE,JQ,null),e(Vi,D$e),e(Vi,YQ),e(YQ,q$e),b(c,Cke,u),b(c,Wo,u),g(_E,Wo,null),e(Wo,G$e),e(Wo,uE),e(uE,O$e),e(uE,i9),e(i9,X$e),e(uE,V$e),e(Wo,z$e),e(Wo,bE),e(bE,W$e),e(bE,KQ),e(KQ,Q$e),e(bE,H$e),e(Wo,U$e),e(Wo,mo),g(vE,mo,null),e(mo,J$e),e(mo,ZQ),e(ZQ,Y$e),e(mo,K$e),e(mo,zi),e(zi,Z$e),e(zi,eH),e(eH,eIe),e(zi,oIe),e(zi,oH),e(oH,rIe),e(zi,tIe),e(mo,aIe),e(mo,v),e(v,Xf),e(Xf,rH),e(rH,nIe),e(Xf,sIe),e(Xf,d9),e(d9,lIe),e(Xf,iIe),e(v,dIe),e(v,Vf),e(Vf,tH),e(tH,cIe),e(Vf,fIe),e(Vf,c9),e(c9,mIe),e(Vf,gIe),e(v,hIe),e(v,zf),e(zf,aH),e(aH,pIe),e(zf,_Ie),e(zf,f9),e(f9,uIe),e(zf,bIe),e(v,vIe),e(v,Wf),e(Wf,nH),e(nH,TIe),e(Wf,FIe),e(Wf,m9),e(m9,CIe),e(Wf,MIe),e(v,EIe),e(v,Qf),e(Qf,sH),e(sH,yIe),e(Qf,wIe),e(Qf,g9),e(g9,AIe),e(Qf,LIe),e(v,BIe),e(v,Hf),e(Hf,lH),e(lH,xIe),e(Hf,kIe),e(Hf,h9),e(h9,RIe),e(Hf,SIe),e(v,PIe),e(v,Uf),e(Uf,iH),e(iH,$Ie),e(Uf,IIe),e(Uf,p9),e(p9,jIe),e(Uf,NIe),e(v,DIe),e(v,Jf),e(Jf,dH),e(dH,qIe),e(Jf,GIe),e(Jf,_9),e(_9,OIe),e(Jf,XIe),e(v,VIe),e(v,Yf),e(Yf,cH),e(cH,zIe),e(Yf,WIe),e(Yf,u9),e(u9,QIe),e(Yf,HIe),e(v,UIe),e(v,Kf),e(Kf,fH),e(fH,JIe),e(Kf,YIe),e(Kf,b9),e(b9,KIe),e(Kf,ZIe),e(v,eje),e(v,Zf),e(Zf,mH),e(mH,oje),e(Zf,rje),e(Zf,v9),e(v9,tje),e(Zf,aje),e(v,nje),e(v,em),e(em,gH),e(gH,sje),e(em,lje),e(em,T9),e(T9,ije),e(em,dje),e(v,cje),e(v,om),e(om,hH),e(hH,fje),e(om,mje),e(om,F9),e(F9,gje),e(om,hje),e(v,pje),e(v,rm),e(rm,pH),e(pH,_je),e(rm,uje),e(rm,C9),e(C9,bje),e(rm,vje),e(v,Tje),e(v,tm),e(tm,_H),e(_H,Fje),e(tm,Cje),e(tm,M9),e(M9,Mje),e(tm,Eje),e(v,yje),e(v,am),e(am,uH),e(uH,wje),e(am,Aje),e(am,E9),e(E9,Lje),e(am,Bje),e(v,xje),e(v,nm),e(nm,bH),e(bH,kje),e(nm,Rje),e(nm,y9),e(y9,Sje),e(nm,Pje),e(v,$je),e(v,sm),e(sm,vH),e(vH,Ije),e(sm,jje),e(sm,w9),e(w9,Nje),e(sm,Dje),e(v,qje),e(v,lm),e(lm,TH),e(TH,Gje),e(lm,Oje),e(lm,A9),e(A9,Xje),e(lm,Vje),e(v,zje),e(v,im),e(im,FH),e(FH,Wje),e(im,Qje),e(im,L9),e(L9,Hje),e(im,Uje),e(v,Jje),e(v,dm),e(dm,CH),e(CH,Yje),e(dm,Kje),e(dm,B9),e(B9,Zje),e(dm,eNe),e(v,oNe),e(v,cm),e(cm,MH),e(MH,rNe),e(cm,tNe),e(cm,x9),e(x9,aNe),e(cm,nNe),e(v,sNe),e(v,fm),e(fm,EH),e(EH,lNe),e(fm,iNe),e(fm,k9),e(k9,dNe),e(fm,cNe),e(v,fNe),e(v,mm),e(mm,yH),e(yH,mNe),e(mm,gNe),e(mm,R9),e(R9,hNe),e(mm,pNe),e(v,_Ne),e(v,gm),e(gm,wH),e(wH,uNe),e(gm,bNe),e(gm,S9),e(S9,vNe),e(gm,TNe),e(v,FNe),e(v,hm),e(hm,AH),e(AH,CNe),e(hm,MNe),e(hm,P9),e(P9,ENe),e(hm,yNe),e(v,wNe),e(v,pm),e(pm,LH),e(LH,ANe),e(pm,LNe),e(pm,$9),e($9,BNe),e(pm,xNe),e(v,kNe),e(v,_m),e(_m,BH),e(BH,RNe),e(_m,SNe),e(_m,I9),e(I9,PNe),e(_m,$Ne),e(v,INe),e(v,um),e(um,xH),e(xH,jNe),e(um,NNe),e(um,j9),e(j9,DNe),e(um,qNe),e(v,GNe),e(v,bm),e(bm,kH),e(kH,ONe),e(bm,XNe),e(bm,N9),e(N9,VNe),e(bm,zNe),e(v,WNe),e(v,vm),e(vm,RH),e(RH,QNe),e(vm,HNe),e(vm,D9),e(D9,UNe),e(vm,JNe),e(v,YNe),e(v,Tm),e(Tm,SH),e(SH,KNe),e(Tm,ZNe),e(Tm,q9),e(q9,eDe),e(Tm,oDe),e(v,rDe),e(v,Fm),e(Fm,PH),e(PH,tDe),e(Fm,aDe),e(Fm,G9),e(G9,nDe),e(Fm,sDe),e(v,lDe),e(v,Cm),e(Cm,$H),e($H,iDe),e(Cm,dDe),e(Cm,O9),e(O9,cDe),e(Cm,fDe),e(v,mDe),e(v,Mm),e(Mm,IH),e(IH,gDe),e(Mm,hDe),e(Mm,X9),e(X9,pDe),e(Mm,_De),e(v,uDe),e(v,Em),e(Em,jH),e(jH,bDe),e(Em,vDe),e(Em,V9),e(V9,TDe),e(Em,FDe),e(v,CDe),e(v,ym),e(ym,NH),e(NH,MDe),e(ym,EDe),e(ym,z9),e(z9,yDe),e(ym,wDe),e(v,ADe),e(v,wm),e(wm,DH),e(DH,LDe),e(wm,BDe),e(wm,W9),e(W9,xDe),e(wm,kDe),e(v,RDe),e(v,Am),e(Am,qH),e(qH,SDe),e(Am,PDe),e(Am,Q9),e(Q9,$De),e(Am,IDe),e(v,jDe),e(v,Lm),e(Lm,GH),e(GH,NDe),e(Lm,DDe),e(Lm,H9),e(H9,qDe),e(Lm,GDe),e(v,ODe),e(v,Bm),e(Bm,OH),e(OH,XDe),e(Bm,VDe),e(Bm,U9),e(U9,zDe),e(Bm,WDe),e(v,QDe),e(v,xm),e(xm,XH),e(XH,HDe),e(xm,UDe),e(xm,J9),e(J9,JDe),e(xm,YDe),e(v,KDe),e(v,km),e(km,VH),e(VH,ZDe),e(km,eqe),e(km,Y9),e(Y9,oqe),e(km,rqe),e(v,tqe),e(v,Rm),e(Rm,zH),e(zH,aqe),e(Rm,nqe),e(Rm,K9),e(K9,sqe),e(Rm,lqe),e(v,iqe),e(v,Sm),e(Sm,WH),e(WH,dqe),e(Sm,cqe),e(Sm,Z9),e(Z9,fqe),e(Sm,mqe),e(v,gqe),e(v,Pm),e(Pm,QH),e(QH,hqe),e(Pm,pqe),e(Pm,eB),e(eB,_qe),e(Pm,uqe),e(v,bqe),e(v,$m),e($m,HH),e(HH,vqe),e($m,Tqe),e($m,oB),e(oB,Fqe),e($m,Cqe),e(v,Mqe),e(v,Im),e(Im,UH),e(UH,Eqe),e(Im,yqe),e(Im,rB),e(rB,wqe),e(Im,Aqe),e(v,Lqe),e(v,jm),e(jm,JH),e(JH,Bqe),e(jm,xqe),e(jm,tB),e(tB,kqe),e(jm,Rqe),e(v,Sqe),e(v,Nm),e(Nm,YH),e(YH,Pqe),e(Nm,$qe),e(Nm,aB),e(aB,Iqe),e(Nm,jqe),e(v,Nqe),e(v,Dm),e(Dm,KH),e(KH,Dqe),e(Dm,qqe),e(Dm,nB),e(nB,Gqe),e(Dm,Oqe),e(v,Xqe),e(v,qm),e(qm,ZH),e(ZH,Vqe),e(qm,zqe),e(qm,sB),e(sB,Wqe),e(qm,Qqe),e(v,Hqe),e(v,Gm),e(Gm,eU),e(eU,Uqe),e(Gm,Jqe),e(Gm,lB),e(lB,Yqe),e(Gm,Kqe),e(v,Zqe),e(v,Om),e(Om,oU),e(oU,eGe),e(Om,oGe),e(Om,iB),e(iB,rGe),e(Om,tGe),e(v,aGe),e(v,Xm),e(Xm,rU),e(rU,nGe),e(Xm,sGe),e(Xm,dB),e(dB,lGe),e(Xm,iGe),e(v,dGe),e(v,Vm),e(Vm,tU),e(tU,cGe),e(Vm,fGe),e(Vm,cB),e(cB,mGe),e(Vm,gGe),e(v,hGe),e(v,zm),e(zm,aU),e(aU,pGe),e(zm,_Ge),e(zm,fB),e(fB,uGe),e(zm,bGe),e(v,vGe),e(v,Wm),e(Wm,nU),e(nU,TGe),e(Wm,FGe),e(Wm,mB),e(mB,CGe),e(Wm,MGe),e(v,EGe),e(v,Qm),e(Qm,sU),e(sU,yGe),e(Qm,wGe),e(Qm,gB),e(gB,AGe),e(Qm,LGe),e(v,BGe),e(v,Hm),e(Hm,lU),e(lU,xGe),e(Hm,kGe),e(Hm,hB),e(hB,RGe),e(Hm,SGe),e(v,PGe),e(v,Um),e(Um,iU),e(iU,$Ge),e(Um,IGe),e(Um,pB),e(pB,jGe),e(Um,NGe),e(v,DGe),e(v,Jm),e(Jm,dU),e(dU,qGe),e(Jm,GGe),e(Jm,_B),e(_B,OGe),e(Jm,XGe),e(v,VGe),e(v,Ym),e(Ym,cU),e(cU,zGe),e(Ym,WGe),e(Ym,uB),e(uB,QGe),e(Ym,HGe),e(v,UGe),e(v,Km),e(Km,fU),e(fU,JGe),e(Km,YGe),e(Km,bB),e(bB,KGe),e(Km,ZGe),e(v,eOe),e(v,Zm),e(Zm,mU),e(mU,oOe),e(Zm,rOe),e(Zm,vB),e(vB,tOe),e(Zm,aOe),e(v,nOe),e(v,eg),e(eg,gU),e(gU,sOe),e(eg,lOe),e(eg,TB),e(TB,iOe),e(eg,dOe),e(v,cOe),e(v,og),e(og,hU),e(hU,fOe),e(og,mOe),e(og,FB),e(FB,gOe),e(og,hOe),e(v,pOe),e(v,rg),e(rg,pU),e(pU,_Oe),e(rg,uOe),e(rg,CB),e(CB,bOe),e(rg,vOe),e(v,TOe),e(v,tg),e(tg,_U),e(_U,FOe),e(tg,COe),e(tg,MB),e(MB,MOe),e(tg,EOe),e(v,yOe),e(v,ag),e(ag,uU),e(uU,wOe),e(ag,AOe),e(ag,EB),e(EB,LOe),e(ag,BOe),e(v,xOe),e(v,ng),e(ng,bU),e(bU,kOe),e(ng,ROe),e(ng,yB),e(yB,SOe),e(ng,POe),e(v,$Oe),e(v,sg),e(sg,vU),e(vU,IOe),e(sg,jOe),e(sg,wB),e(wB,NOe),e(sg,DOe),e(v,qOe),e(v,lg),e(lg,TU),e(TU,GOe),e(lg,OOe),e(lg,AB),e(AB,XOe),e(lg,VOe),e(v,zOe),e(v,ig),e(ig,FU),e(FU,WOe),e(ig,QOe),e(ig,LB),e(LB,HOe),e(ig,UOe),e(v,JOe),e(v,dg),e(dg,CU),e(CU,YOe),e(dg,KOe),e(dg,BB),e(BB,ZOe),e(dg,eXe),e(v,oXe),e(v,cg),e(cg,MU),e(MU,rXe),e(cg,tXe),e(cg,xB),e(xB,aXe),e(cg,nXe),e(v,sXe),e(v,fg),e(fg,EU),e(EU,lXe),e(fg,iXe),e(fg,kB),e(kB,dXe),e(fg,cXe),e(v,fXe),e(v,mg),e(mg,yU),e(yU,mXe),e(mg,gXe),e(mg,RB),e(RB,hXe),e(mg,pXe),e(v,_Xe),e(v,gg),e(gg,wU),e(wU,uXe),e(gg,bXe),e(gg,SB),e(SB,vXe),e(gg,TXe),e(v,FXe),e(v,hg),e(hg,AU),e(AU,CXe),e(hg,MXe),e(hg,PB),e(PB,EXe),e(hg,yXe),e(v,wXe),e(v,pg),e(pg,LU),e(LU,AXe),e(pg,LXe),e(pg,$B),e($B,BXe),e(pg,xXe),e(v,kXe),e(v,_g),e(_g,BU),e(BU,RXe),e(_g,SXe),e(_g,IB),e(IB,PXe),e(_g,$Xe),e(v,IXe),e(v,ug),e(ug,xU),e(xU,jXe),e(ug,NXe),e(ug,jB),e(jB,DXe),e(ug,qXe),e(v,GXe),e(v,bg),e(bg,kU),e(kU,OXe),e(bg,XXe),e(bg,NB),e(NB,VXe),e(bg,zXe),e(v,WXe),e(v,vg),e(vg,RU),e(RU,QXe),e(vg,HXe),e(vg,DB),e(DB,UXe),e(vg,JXe),e(v,YXe),e(v,Tg),e(Tg,SU),e(SU,KXe),e(Tg,ZXe),e(Tg,qB),e(qB,eVe),e(Tg,oVe),e(v,rVe),e(v,Fg),e(Fg,PU),e(PU,tVe),e(Fg,aVe),e(Fg,GB),e(GB,nVe),e(Fg,sVe),e(v,lVe),e(v,Cg),e(Cg,$U),e($U,iVe),e(Cg,dVe),e(Cg,OB),e(OB,cVe),e(Cg,fVe),e(v,mVe),e(v,Mg),e(Mg,IU),e(IU,gVe),e(Mg,hVe),e(Mg,XB),e(XB,pVe),e(Mg,_Ve),e(v,uVe),e(v,Eg),e(Eg,jU),e(jU,bVe),e(Eg,vVe),e(Eg,VB),e(VB,TVe),e(Eg,FVe),e(v,CVe),e(v,yg),e(yg,NU),e(NU,MVe),e(yg,EVe),e(yg,zB),e(zB,yVe),e(yg,wVe),e(v,AVe),e(v,wg),e(wg,DU),e(DU,LVe),e(wg,BVe),e(wg,WB),e(WB,xVe),e(wg,kVe),e(v,RVe),e(v,Ag),e(Ag,qU),e(qU,SVe),e(Ag,PVe),e(Ag,QB),e(QB,$Ve),e(Ag,IVe),e(v,jVe),e(v,Lg),e(Lg,GU),e(GU,NVe),e(Lg,DVe),e(Lg,HB),e(HB,qVe),e(Lg,GVe),e(v,OVe),e(v,Bg),e(Bg,OU),e(OU,XVe),e(Bg,VVe),e(Bg,UB),e(UB,zVe),e(Bg,WVe),e(v,QVe),e(v,xg),e(xg,XU),e(XU,HVe),e(xg,UVe),e(xg,JB),e(JB,JVe),e(xg,YVe),e(v,KVe),e(v,kg),e(kg,VU),e(VU,ZVe),e(kg,eze),e(kg,YB),e(YB,oze),e(kg,rze),e(v,tze),e(v,Rg),e(Rg,zU),e(zU,aze),e(Rg,nze),e(Rg,KB),e(KB,sze),e(Rg,lze),e(mo,ize),e(mo,WU),e(WU,dze),e(mo,cze),g(TE,mo,null),e(Wo,fze),e(Wo,Sg),g(FE,Sg,null),e(Sg,mze),e(Sg,QU),e(QU,gze),b(c,Mke,u),b(c,Wi,u),e(Wi,Pg),e(Pg,HU),g(CE,HU,null),e(Wi,hze),e(Wi,UU),e(UU,pze),b(c,Eke,u),b(c,Qo,u),g(ME,Qo,null),e(Qo,_ze),e(Qo,EE),e(EE,uze),e(EE,ZB),e(ZB,bze),e(EE,vze),e(Qo,Tze),e(Qo,yE),e(yE,Fze),e(yE,JU),e(JU,Cze),e(yE,Mze),e(Qo,Eze),e(Qo,go),g(wE,go,null),e(go,yze),e(go,YU),e(YU,wze),e(go,Aze),e(go,Oa),e(Oa,Lze),e(Oa,KU),e(KU,Bze),e(Oa,xze),e(Oa,ZU),e(ZU,kze),e(Oa,Rze),e(Oa,eJ),e(eJ,Sze),e(Oa,Pze),e(go,$ze),e(go,E),e(E,Wn),e(Wn,oJ),e(oJ,Ize),e(Wn,jze),e(Wn,ex),e(ex,Nze),e(Wn,Dze),e(Wn,ox),e(ox,qze),e(Wn,Gze),e(E,Oze),e(E,Qn),e(Qn,rJ),e(rJ,Xze),e(Qn,Vze),e(Qn,rx),e(rx,zze),e(Qn,Wze),e(Qn,tx),e(tx,Qze),e(Qn,Hze),e(E,Uze),e(E,Hn),e(Hn,tJ),e(tJ,Jze),e(Hn,Yze),e(Hn,ax),e(ax,Kze),e(Hn,Zze),e(Hn,nx),e(nx,eWe),e(Hn,oWe),e(E,rWe),e(E,$g),e($g,aJ),e(aJ,tWe),e($g,aWe),e($g,sx),e(sx,nWe),e($g,sWe),e(E,lWe),e(E,Un),e(Un,nJ),e(nJ,iWe),e(Un,dWe),e(Un,lx),e(lx,cWe),e(Un,fWe),e(Un,ix),e(ix,mWe),e(Un,gWe),e(E,hWe),e(E,Ig),e(Ig,sJ),e(sJ,pWe),e(Ig,_We),e(Ig,dx),e(dx,uWe),e(Ig,bWe),e(E,vWe),e(E,jg),e(jg,lJ),e(lJ,TWe),e(jg,FWe),e(jg,cx),e(cx,CWe),e(jg,MWe),e(E,EWe),e(E,Ng),e(Ng,iJ),e(iJ,yWe),e(Ng,wWe),e(Ng,fx),e(fx,AWe),e(Ng,LWe),e(E,BWe),e(E,Jn),e(Jn,dJ),e(dJ,xWe),e(Jn,kWe),e(Jn,mx),e(mx,RWe),e(Jn,SWe),e(Jn,gx),e(gx,PWe),e(Jn,$We),e(E,IWe),e(E,Yn),e(Yn,cJ),e(cJ,jWe),e(Yn,NWe),e(Yn,hx),e(hx,DWe),e(Yn,qWe),e(Yn,px),e(px,GWe),e(Yn,OWe),e(E,XWe),e(E,Kn),e(Kn,fJ),e(fJ,VWe),e(Kn,zWe),e(Kn,_x),e(_x,WWe),e(Kn,QWe),e(Kn,ux),e(ux,HWe),e(Kn,UWe),e(E,JWe),e(E,Dg),e(Dg,mJ),e(mJ,YWe),e(Dg,KWe),e(Dg,bx),e(bx,ZWe),e(Dg,eQe),e(E,oQe),e(E,qg),e(qg,gJ),e(gJ,rQe),e(qg,tQe),e(qg,vx),e(vx,aQe),e(qg,nQe),e(E,sQe),e(E,Zn),e(Zn,hJ),e(hJ,lQe),e(Zn,iQe),e(Zn,Tx),e(Tx,dQe),e(Zn,cQe),e(Zn,Fx),e(Fx,fQe),e(Zn,mQe),e(E,gQe),e(E,Gg),e(Gg,pJ),e(pJ,hQe),e(Gg,pQe),e(Gg,Cx),e(Cx,_Qe),e(Gg,uQe),e(E,bQe),e(E,es),e(es,_J),e(_J,vQe),e(es,TQe),e(es,Mx),e(Mx,FQe),e(es,CQe),e(es,Ex),e(Ex,MQe),e(es,EQe),e(E,yQe),e(E,os),e(os,uJ),e(uJ,wQe),e(os,AQe),e(os,yx),e(yx,LQe),e(os,BQe),e(os,wx),e(wx,xQe),e(os,kQe),e(E,RQe),e(E,rs),e(rs,bJ),e(bJ,SQe),e(rs,PQe),e(rs,Ax),e(Ax,$Qe),e(rs,IQe),e(rs,vJ),e(vJ,jQe),e(rs,NQe),e(E,DQe),e(E,Og),e(Og,TJ),e(TJ,qQe),e(Og,GQe),e(Og,Lx),e(Lx,OQe),e(Og,XQe),e(E,VQe),e(E,ts),e(ts,FJ),e(FJ,zQe),e(ts,WQe),e(ts,Bx),e(Bx,QQe),e(ts,HQe),e(ts,xx),e(xx,UQe),e(ts,JQe),e(E,YQe),e(E,Xg),e(Xg,CJ),e(CJ,KQe),e(Xg,ZQe),e(Xg,kx),e(kx,eHe),e(Xg,oHe),e(E,rHe),e(E,as),e(as,MJ),e(MJ,tHe),e(as,aHe),e(as,Rx),e(Rx,nHe),e(as,sHe),e(as,Sx),e(Sx,lHe),e(as,iHe),e(E,dHe),e(E,ns),e(ns,EJ),e(EJ,cHe),e(ns,fHe),e(ns,Px),e(Px,mHe),e(ns,gHe),e(ns,$x),e($x,hHe),e(ns,pHe),e(E,_He),e(E,ss),e(ss,yJ),e(yJ,uHe),e(ss,bHe),e(ss,Ix),e(Ix,vHe),e(ss,THe),e(ss,jx),e(jx,FHe),e(ss,CHe),e(E,MHe),e(E,Vg),e(Vg,wJ),e(wJ,EHe),e(Vg,yHe),e(Vg,Nx),e(Nx,wHe),e(Vg,AHe),e(E,LHe),e(E,ls),e(ls,AJ),e(AJ,BHe),e(ls,xHe),e(ls,Dx),e(Dx,kHe),e(ls,RHe),e(ls,qx),e(qx,SHe),e(ls,PHe),e(E,$He),e(E,zg),e(zg,LJ),e(LJ,IHe),e(zg,jHe),e(zg,Gx),e(Gx,NHe),e(zg,DHe),e(E,qHe),e(E,is),e(is,BJ),e(BJ,GHe),e(is,OHe),e(is,Ox),e(Ox,XHe),e(is,VHe),e(is,Xx),e(Xx,zHe),e(is,WHe),e(E,QHe),e(E,ds),e(ds,xJ),e(xJ,HHe),e(ds,UHe),e(ds,Vx),e(Vx,JHe),e(ds,YHe),e(ds,zx),e(zx,KHe),e(ds,ZHe),e(E,eUe),e(E,cs),e(cs,kJ),e(kJ,oUe),e(cs,rUe),e(cs,Wx),e(Wx,tUe),e(cs,aUe),e(cs,Qx),e(Qx,nUe),e(cs,sUe),e(E,lUe),e(E,fs),e(fs,RJ),e(RJ,iUe),e(fs,dUe),e(fs,Hx),e(Hx,cUe),e(fs,fUe),e(fs,Ux),e(Ux,mUe),e(fs,gUe),e(E,hUe),e(E,Wg),e(Wg,SJ),e(SJ,pUe),e(Wg,_Ue),e(Wg,Jx),e(Jx,uUe),e(Wg,bUe),e(E,vUe),e(E,ms),e(ms,PJ),e(PJ,TUe),e(ms,FUe),e(ms,Yx),e(Yx,CUe),e(ms,MUe),e(ms,Kx),e(Kx,EUe),e(ms,yUe),e(E,wUe),e(E,gs),e(gs,$J),e($J,AUe),e(gs,LUe),e(gs,Zx),e(Zx,BUe),e(gs,xUe),e(gs,ek),e(ek,kUe),e(gs,RUe),e(E,SUe),e(E,hs),e(hs,IJ),e(IJ,PUe),e(hs,$Ue),e(hs,ok),e(ok,IUe),e(hs,jUe),e(hs,rk),e(rk,NUe),e(hs,DUe),e(E,qUe),e(E,ps),e(ps,jJ),e(jJ,GUe),e(ps,OUe),e(ps,tk),e(tk,XUe),e(ps,VUe),e(ps,ak),e(ak,zUe),e(ps,WUe),e(E,QUe),e(E,_s),e(_s,NJ),e(NJ,HUe),e(_s,UUe),e(_s,nk),e(nk,JUe),e(_s,YUe),e(_s,sk),e(sk,KUe),e(_s,ZUe),e(E,eJe),e(E,us),e(us,DJ),e(DJ,oJe),e(us,rJe),e(us,lk),e(lk,tJe),e(us,aJe),e(us,ik),e(ik,nJe),e(us,sJe),e(E,lJe),e(E,Qg),e(Qg,qJ),e(qJ,iJe),e(Qg,dJe),e(Qg,dk),e(dk,cJe),e(Qg,fJe),e(E,mJe),e(E,bs),e(bs,GJ),e(GJ,gJe),e(bs,hJe),e(bs,ck),e(ck,pJe),e(bs,_Je),e(bs,fk),e(fk,uJe),e(bs,bJe),e(E,vJe),e(E,Hg),e(Hg,OJ),e(OJ,TJe),e(Hg,FJe),e(Hg,mk),e(mk,CJe),e(Hg,MJe),e(E,EJe),e(E,Ug),e(Ug,XJ),e(XJ,yJe),e(Ug,wJe),e(Ug,gk),e(gk,AJe),e(Ug,LJe),e(E,BJe),e(E,vs),e(vs,VJ),e(VJ,xJe),e(vs,kJe),e(vs,hk),e(hk,RJe),e(vs,SJe),e(vs,pk),e(pk,PJe),e(vs,$Je),e(E,IJe),e(E,Ts),e(Ts,zJ),e(zJ,jJe),e(Ts,NJe),e(Ts,_k),e(_k,DJe),e(Ts,qJe),e(Ts,uk),e(uk,GJe),e(Ts,OJe),e(E,XJe),e(E,Jg),e(Jg,WJ),e(WJ,VJe),e(Jg,zJe),e(Jg,bk),e(bk,WJe),e(Jg,QJe),e(E,HJe),e(E,Fs),e(Fs,QJ),e(QJ,UJe),e(Fs,JJe),e(Fs,vk),e(vk,YJe),e(Fs,KJe),e(Fs,Tk),e(Tk,ZJe),e(Fs,eYe),e(E,oYe),e(E,Cs),e(Cs,HJ),e(HJ,rYe),e(Cs,tYe),e(Cs,Fk),e(Fk,aYe),e(Cs,nYe),e(Cs,Ck),e(Ck,sYe),e(Cs,lYe),e(E,iYe),e(E,Ms),e(Ms,UJ),e(UJ,dYe),e(Ms,cYe),e(Ms,Mk),e(Mk,fYe),e(Ms,mYe),e(Ms,Ek),e(Ek,gYe),e(Ms,hYe),e(E,pYe),e(E,Es),e(Es,JJ),e(JJ,_Ye),e(Es,uYe),e(Es,yk),e(yk,bYe),e(Es,vYe),e(Es,wk),e(wk,TYe),e(Es,FYe),e(E,CYe),e(E,ys),e(ys,YJ),e(YJ,MYe),e(ys,EYe),e(ys,Ak),e(Ak,yYe),e(ys,wYe),e(ys,Lk),e(Lk,AYe),e(ys,LYe),e(E,BYe),e(E,Yg),e(Yg,KJ),e(KJ,xYe),e(Yg,kYe),e(Yg,Bk),e(Bk,RYe),e(Yg,SYe),e(E,PYe),e(E,Kg),e(Kg,ZJ),e(ZJ,$Ye),e(Kg,IYe),e(Kg,xk),e(xk,jYe),e(Kg,NYe),e(E,DYe),e(E,Zg),e(Zg,eY),e(eY,qYe),e(Zg,GYe),e(Zg,kk),e(kk,OYe),e(Zg,XYe),e(E,VYe),e(E,eh),e(eh,oY),e(oY,zYe),e(eh,WYe),e(eh,Rk),e(Rk,QYe),e(eh,HYe),e(E,UYe),e(E,ws),e(ws,rY),e(rY,JYe),e(ws,YYe),e(ws,Sk),e(Sk,KYe),e(ws,ZYe),e(ws,Pk),e(Pk,eKe),e(ws,oKe),e(E,rKe),e(E,oh),e(oh,tY),e(tY,tKe),e(oh,aKe),e(oh,$k),e($k,nKe),e(oh,sKe),e(E,lKe),e(E,As),e(As,aY),e(aY,iKe),e(As,dKe),e(As,Ik),e(Ik,cKe),e(As,fKe),e(As,jk),e(jk,mKe),e(As,gKe),e(E,hKe),e(E,Ls),e(Ls,nY),e(nY,pKe),e(Ls,_Ke),e(Ls,Nk),e(Nk,uKe),e(Ls,bKe),e(Ls,Dk),e(Dk,vKe),e(Ls,TKe),e(E,FKe),e(E,Bs),e(Bs,sY),e(sY,CKe),e(Bs,MKe),e(Bs,qk),e(qk,EKe),e(Bs,yKe),e(Bs,Gk),e(Gk,wKe),e(Bs,AKe),e(E,LKe),e(E,xs),e(xs,lY),e(lY,BKe),e(xs,xKe),e(xs,Ok),e(Ok,kKe),e(xs,RKe),e(xs,Xk),e(Xk,SKe),e(xs,PKe),e(E,$Ke),e(E,ks),e(ks,iY),e(iY,IKe),e(ks,jKe),e(ks,Vk),e(Vk,NKe),e(ks,DKe),e(ks,zk),e(zk,qKe),e(ks,GKe),e(E,OKe),e(E,Rs),e(Rs,dY),e(dY,XKe),e(Rs,VKe),e(Rs,Wk),e(Wk,zKe),e(Rs,WKe),e(Rs,Qk),e(Qk,QKe),e(Rs,HKe),e(E,UKe),e(E,rh),e(rh,cY),e(cY,JKe),e(rh,YKe),e(rh,Hk),e(Hk,KKe),e(rh,ZKe),e(E,eZe),e(E,th),e(th,fY),e(fY,oZe),e(th,rZe),e(th,Uk),e(Uk,tZe),e(th,aZe),e(E,nZe),e(E,Ss),e(Ss,mY),e(mY,sZe),e(Ss,lZe),e(Ss,Jk),e(Jk,iZe),e(Ss,dZe),e(Ss,Yk),e(Yk,cZe),e(Ss,fZe),e(E,mZe),e(E,Ps),e(Ps,gY),e(gY,gZe),e(Ps,hZe),e(Ps,Kk),e(Kk,pZe),e(Ps,_Ze),e(Ps,Zk),e(Zk,uZe),e(Ps,bZe),e(E,vZe),e(E,$s),e($s,hY),e(hY,TZe),e($s,FZe),e($s,eR),e(eR,CZe),e($s,MZe),e($s,oR),e(oR,EZe),e($s,yZe),e(E,wZe),e(E,ah),e(ah,pY),e(pY,AZe),e(ah,LZe),e(ah,rR),e(rR,BZe),e(ah,xZe),e(E,kZe),e(E,nh),e(nh,_Y),e(_Y,RZe),e(nh,SZe),e(nh,tR),e(tR,PZe),e(nh,$Ze),e(E,IZe),e(E,sh),e(sh,uY),e(uY,jZe),e(sh,NZe),e(sh,aR),e(aR,DZe),e(sh,qZe),e(E,GZe),e(E,lh),e(lh,bY),e(bY,OZe),e(lh,XZe),e(lh,nR),e(nR,VZe),e(lh,zZe),e(E,WZe),e(E,Is),e(Is,vY),e(vY,QZe),e(Is,HZe),e(Is,sR),e(sR,UZe),e(Is,JZe),e(Is,lR),e(lR,YZe),e(Is,KZe),e(E,ZZe),e(E,ih),e(ih,TY),e(TY,eeo),e(ih,oeo),e(ih,iR),e(iR,reo),e(ih,teo),e(E,aeo),e(E,dh),e(dh,FY),e(FY,neo),e(dh,seo),e(dh,dR),e(dR,leo),e(dh,ieo),e(E,deo),e(E,js),e(js,CY),e(CY,ceo),e(js,feo),e(js,cR),e(cR,meo),e(js,geo),e(js,fR),e(fR,heo),e(js,peo),e(E,_eo),e(E,Ns),e(Ns,MY),e(MY,ueo),e(Ns,beo),e(Ns,mR),e(mR,veo),e(Ns,Teo),e(Ns,gR),e(gR,Feo),e(Ns,Ceo),e(go,Meo),e(go,EY),e(EY,Eeo),e(go,yeo),g(AE,go,null),e(Qo,weo),e(Qo,ch),g(LE,ch,null),e(ch,Aeo),e(ch,yY),e(yY,Leo),b(c,yke,u),b(c,Qi,u),e(Qi,fh),e(fh,wY),g(BE,wY,null),e(Qi,Beo),e(Qi,AY),e(AY,xeo),b(c,wke,u),b(c,Ho,u),g(xE,Ho,null),e(Ho,keo),e(Ho,kE),e(kE,Reo),e(kE,hR),e(hR,Seo),e(kE,Peo),e(Ho,$eo),e(Ho,RE),e(RE,Ieo),e(RE,LY),e(LY,jeo),e(RE,Neo),e(Ho,Deo),e(Ho,$e),g(SE,$e,null),e($e,qeo),e($e,BY),e(BY,Geo),e($e,Oeo),e($e,Xa),e(Xa,Xeo),e(Xa,xY),e(xY,Veo),e(Xa,zeo),e(Xa,kY),e(kY,Weo),e(Xa,Qeo),e(Xa,RY),e(RY,Heo),e(Xa,Ueo),e($e,Jeo),e($e,te),e(te,mh),e(mh,SY),e(SY,Yeo),e(mh,Keo),e(mh,pR),e(pR,Zeo),e(mh,eoo),e(te,ooo),e(te,gh),e(gh,PY),e(PY,roo),e(gh,too),e(gh,_R),e(_R,aoo),e(gh,noo),e(te,soo),e(te,hh),e(hh,$Y),e($Y,loo),e(hh,ioo),e(hh,uR),e(uR,doo),e(hh,coo),e(te,foo),e(te,ph),e(ph,IY),e(IY,moo),e(ph,goo),e(ph,bR),e(bR,hoo),e(ph,poo),e(te,_oo),e(te,_h),e(_h,jY),e(jY,uoo),e(_h,boo),e(_h,vR),e(vR,voo),e(_h,Too),e(te,Foo),e(te,uh),e(uh,NY),e(NY,Coo),e(uh,Moo),e(uh,TR),e(TR,Eoo),e(uh,yoo),e(te,woo),e(te,bh),e(bh,DY),e(DY,Aoo),e(bh,Loo),e(bh,FR),e(FR,Boo),e(bh,xoo),e(te,koo),e(te,vh),e(vh,qY),e(qY,Roo),e(vh,Soo),e(vh,CR),e(CR,Poo),e(vh,$oo),e(te,Ioo),e(te,Th),e(Th,GY),e(GY,joo),e(Th,Noo),e(Th,MR),e(MR,Doo),e(Th,qoo),e(te,Goo),e(te,Fh),e(Fh,OY),e(OY,Ooo),e(Fh,Xoo),e(Fh,ER),e(ER,Voo),e(Fh,zoo),e(te,Woo),e(te,Ch),e(Ch,XY),e(XY,Qoo),e(Ch,Hoo),e(Ch,yR),e(yR,Uoo),e(Ch,Joo),e(te,Yoo),e(te,Mh),e(Mh,VY),e(VY,Koo),e(Mh,Zoo),e(Mh,wR),e(wR,ero),e(Mh,oro),e(te,rro),e(te,Eh),e(Eh,zY),e(zY,tro),e(Eh,aro),e(Eh,AR),e(AR,nro),e(Eh,sro),e(te,lro),e(te,yh),e(yh,WY),e(WY,iro),e(yh,dro),e(yh,LR),e(LR,cro),e(yh,fro),e(te,mro),e(te,wh),e(wh,QY),e(QY,gro),e(wh,hro),e(wh,BR),e(BR,pro),e(wh,_ro),e(te,uro),e(te,Ah),e(Ah,HY),e(HY,bro),e(Ah,vro),e(Ah,xR),e(xR,Tro),e(Ah,Fro),e(te,Cro),e(te,Lh),e(Lh,UY),e(UY,Mro),e(Lh,Ero),e(Lh,kR),e(kR,yro),e(Lh,wro),e(te,Aro),e(te,Bh),e(Bh,JY),e(JY,Lro),e(Bh,Bro),e(Bh,RR),e(RR,xro),e(Bh,kro),e($e,Rro),g(xh,$e,null),e($e,Sro),e($e,YY),e(YY,Pro),e($e,$ro),g(PE,$e,null),e(Ho,Iro),e(Ho,kh),g($E,kh,null),e(kh,jro),e(kh,KY),e(KY,Nro),b(c,Ake,u),b(c,Hi,u),e(Hi,Rh),e(Rh,ZY),g(IE,ZY,null),e(Hi,Dro),e(Hi,eK),e(eK,qro),b(c,Lke,u),b(c,Uo,u),g(jE,Uo,null),e(Uo,Gro),e(Uo,NE),e(NE,Oro),e(NE,SR),e(SR,Xro),e(NE,Vro),e(Uo,zro),e(Uo,DE),e(DE,Wro),e(DE,oK),e(oK,Qro),e(DE,Hro),e(Uo,Uro),e(Uo,Ie),g(qE,Ie,null),e(Ie,Jro),e(Ie,rK),e(rK,Yro),e(Ie,Kro),e(Ie,Ui),e(Ui,Zro),e(Ui,tK),e(tK,eto),e(Ui,oto),e(Ui,aK),e(aK,rto),e(Ui,tto),e(Ie,ato),e(Ie,xe),e(xe,Sh),e(Sh,nK),e(nK,nto),e(Sh,sto),e(Sh,PR),e(PR,lto),e(Sh,ito),e(xe,dto),e(xe,Ph),e(Ph,sK),e(sK,cto),e(Ph,fto),e(Ph,$R),e($R,mto),e(Ph,gto),e(xe,hto),e(xe,$h),e($h,lK),e(lK,pto),e($h,_to),e($h,IR),e(IR,uto),e($h,bto),e(xe,vto),e(xe,Ih),e(Ih,iK),e(iK,Tto),e(Ih,Fto),e(Ih,jR),e(jR,Cto),e(Ih,Mto),e(xe,Eto),e(xe,jh),e(jh,dK),e(dK,yto),e(jh,wto),e(jh,NR),e(NR,Ato),e(jh,Lto),e(xe,Bto),e(xe,Nh),e(Nh,cK),e(cK,xto),e(Nh,kto),e(Nh,DR),e(DR,Rto),e(Nh,Sto),e(xe,Pto),e(xe,Dh),e(Dh,fK),e(fK,$to),e(Dh,Ito),e(Dh,qR),e(qR,jto),e(Dh,Nto),e(xe,Dto),e(xe,qh),e(qh,mK),e(mK,qto),e(qh,Gto),e(qh,GR),e(GR,Oto),e(qh,Xto),e(Ie,Vto),g(Gh,Ie,null),e(Ie,zto),e(Ie,gK),e(gK,Wto),e(Ie,Qto),g(GE,Ie,null),e(Uo,Hto),e(Uo,Oh),g(OE,Oh,null),e(Oh,Uto),e(Oh,hK),e(hK,Jto),b(c,Bke,u),b(c,Ji,u),e(Ji,Xh),e(Xh,pK),g(XE,pK,null),e(Ji,Yto),e(Ji,_K),e(_K,Kto),b(c,xke,u),b(c,Jo,u),g(VE,Jo,null),e(Jo,Zto),e(Jo,Yi),e(Yi,eao),e(Yi,uK),e(uK,oao),e(Yi,rao),e(Yi,bK),e(bK,tao),e(Yi,aao),e(Jo,nao),e(Jo,zE),e(zE,sao),e(zE,vK),e(vK,lao),e(zE,iao),e(Jo,dao),e(Jo,Vr),g(WE,Vr,null),e(Vr,cao),e(Vr,TK),e(TK,fao),e(Vr,mao),e(Vr,Ki),e(Ki,gao),e(Ki,FK),e(FK,hao),e(Ki,pao),e(Ki,CK),e(CK,_ao),e(Ki,uao),e(Vr,bao),e(Vr,MK),e(MK,vao),e(Vr,Tao),g(QE,Vr,null),e(Jo,Fao),e(Jo,je),g(HE,je,null),e(je,Cao),e(je,EK),e(EK,Mao),e(je,Eao),e(je,Va),e(Va,yao),e(Va,yK),e(yK,wao),e(Va,Aao),e(Va,wK),e(wK,Lao),e(Va,Bao),e(Va,AK),e(AK,xao),e(Va,kao),e(je,Rao),e(je,F),e(F,Vh),e(Vh,LK),e(LK,Sao),e(Vh,Pao),e(Vh,OR),e(OR,$ao),e(Vh,Iao),e(F,jao),e(F,zh),e(zh,BK),e(BK,Nao),e(zh,Dao),e(zh,XR),e(XR,qao),e(zh,Gao),e(F,Oao),e(F,Wh),e(Wh,xK),e(xK,Xao),e(Wh,Vao),e(Wh,VR),e(VR,zao),e(Wh,Wao),e(F,Qao),e(F,Qh),e(Qh,kK),e(kK,Hao),e(Qh,Uao),e(Qh,zR),e(zR,Jao),e(Qh,Yao),e(F,Kao),e(F,Hh),e(Hh,RK),e(RK,Zao),e(Hh,eno),e(Hh,WR),e(WR,ono),e(Hh,rno),e(F,tno),e(F,Uh),e(Uh,SK),e(SK,ano),e(Uh,nno),e(Uh,QR),e(QR,sno),e(Uh,lno),e(F,ino),e(F,Jh),e(Jh,PK),e(PK,dno),e(Jh,cno),e(Jh,HR),e(HR,fno),e(Jh,mno),e(F,gno),e(F,Yh),e(Yh,$K),e($K,hno),e(Yh,pno),e(Yh,UR),e(UR,_no),e(Yh,uno),e(F,bno),e(F,Kh),e(Kh,IK),e(IK,vno),e(Kh,Tno),e(Kh,JR),e(JR,Fno),e(Kh,Cno),e(F,Mno),e(F,Zh),e(Zh,jK),e(jK,Eno),e(Zh,yno),e(Zh,YR),e(YR,wno),e(Zh,Ano),e(F,Lno),e(F,ep),e(ep,NK),e(NK,Bno),e(ep,xno),e(ep,KR),e(KR,kno),e(ep,Rno),e(F,Sno),e(F,op),e(op,DK),e(DK,Pno),e(op,$no),e(op,ZR),e(ZR,Ino),e(op,jno),e(F,Nno),e(F,rp),e(rp,qK),e(qK,Dno),e(rp,qno),e(rp,eS),e(eS,Gno),e(rp,Ono),e(F,Xno),e(F,tp),e(tp,GK),e(GK,Vno),e(tp,zno),e(tp,oS),e(oS,Wno),e(tp,Qno),e(F,Hno),e(F,ap),e(ap,OK),e(OK,Uno),e(ap,Jno),e(ap,rS),e(rS,Yno),e(ap,Kno),e(F,Zno),e(F,np),e(np,XK),e(XK,eso),e(np,oso),e(np,tS),e(tS,rso),e(np,tso),e(F,aso),e(F,sp),e(sp,VK),e(VK,nso),e(sp,sso),e(sp,aS),e(aS,lso),e(sp,iso),e(F,dso),e(F,lp),e(lp,zK),e(zK,cso),e(lp,fso),e(lp,nS),e(nS,mso),e(lp,gso),e(F,hso),e(F,ip),e(ip,WK),e(WK,pso),e(ip,_so),e(ip,sS),e(sS,uso),e(ip,bso),e(F,vso),e(F,dp),e(dp,QK),e(QK,Tso),e(dp,Fso),e(dp,lS),e(lS,Cso),e(dp,Mso),e(F,Eso),e(F,cp),e(cp,HK),e(HK,yso),e(cp,wso),e(cp,iS),e(iS,Aso),e(cp,Lso),e(F,Bso),e(F,fp),e(fp,UK),e(UK,xso),e(fp,kso),e(fp,dS),e(dS,Rso),e(fp,Sso),e(F,Pso),e(F,mp),e(mp,JK),e(JK,$so),e(mp,Iso),e(mp,cS),e(cS,jso),e(mp,Nso),e(F,Dso),e(F,gp),e(gp,YK),e(YK,qso),e(gp,Gso),e(gp,fS),e(fS,Oso),e(gp,Xso),e(F,Vso),e(F,hp),e(hp,KK),e(KK,zso),e(hp,Wso),e(hp,mS),e(mS,Qso),e(hp,Hso),e(F,Uso),e(F,pp),e(pp,ZK),e(ZK,Jso),e(pp,Yso),e(pp,gS),e(gS,Kso),e(pp,Zso),e(F,elo),e(F,_p),e(_p,eZ),e(eZ,olo),e(_p,rlo),e(_p,hS),e(hS,tlo),e(_p,alo),e(F,nlo),e(F,up),e(up,oZ),e(oZ,slo),e(up,llo),e(up,pS),e(pS,ilo),e(up,dlo),e(F,clo),e(F,Ds),e(Ds,rZ),e(rZ,flo),e(Ds,mlo),e(Ds,_S),e(_S,glo),e(Ds,hlo),e(Ds,uS),e(uS,plo),e(Ds,_lo),e(F,ulo),e(F,bp),e(bp,tZ),e(tZ,blo),e(bp,vlo),e(bp,bS),e(bS,Tlo),e(bp,Flo),e(F,Clo),e(F,vp),e(vp,aZ),e(aZ,Mlo),e(vp,Elo),e(vp,vS),e(vS,ylo),e(vp,wlo),e(F,Alo),e(F,Tp),e(Tp,nZ),e(nZ,Llo),e(Tp,Blo),e(Tp,TS),e(TS,xlo),e(Tp,klo),e(F,Rlo),e(F,Fp),e(Fp,sZ),e(sZ,Slo),e(Fp,Plo),e(Fp,FS),e(FS,$lo),e(Fp,Ilo),e(F,jlo),e(F,Cp),e(Cp,lZ),e(lZ,Nlo),e(Cp,Dlo),e(Cp,CS),e(CS,qlo),e(Cp,Glo),e(F,Olo),e(F,Mp),e(Mp,iZ),e(iZ,Xlo),e(Mp,Vlo),e(Mp,MS),e(MS,zlo),e(Mp,Wlo),e(F,Qlo),e(F,Ep),e(Ep,dZ),e(dZ,Hlo),e(Ep,Ulo),e(Ep,ES),e(ES,Jlo),e(Ep,Ylo),e(F,Klo),e(F,yp),e(yp,cZ),e(cZ,Zlo),e(yp,eio),e(yp,yS),e(yS,oio),e(yp,rio),e(F,tio),e(F,wp),e(wp,fZ),e(fZ,aio),e(wp,nio),e(wp,wS),e(wS,sio),e(wp,lio),e(F,iio),e(F,Ap),e(Ap,mZ),e(mZ,dio),e(Ap,cio),e(Ap,AS),e(AS,fio),e(Ap,mio),e(F,gio),e(F,Lp),e(Lp,gZ),e(gZ,hio),e(Lp,pio),e(Lp,LS),e(LS,_io),e(Lp,uio),e(F,bio),e(F,Bp),e(Bp,hZ),e(hZ,vio),e(Bp,Tio),e(Bp,BS),e(BS,Fio),e(Bp,Cio),e(F,Mio),e(F,xp),e(xp,pZ),e(pZ,Eio),e(xp,yio),e(xp,xS),e(xS,wio),e(xp,Aio),e(F,Lio),e(F,kp),e(kp,_Z),e(_Z,Bio),e(kp,xio),e(kp,kS),e(kS,kio),e(kp,Rio),e(F,Sio),e(F,Rp),e(Rp,uZ),e(uZ,Pio),e(Rp,$io),e(Rp,RS),e(RS,Iio),e(Rp,jio),e(F,Nio),e(F,Sp),e(Sp,bZ),e(bZ,Dio),e(Sp,qio),e(Sp,SS),e(SS,Gio),e(Sp,Oio),e(F,Xio),e(F,Pp),e(Pp,vZ),e(vZ,Vio),e(Pp,zio),e(Pp,PS),e(PS,Wio),e(Pp,Qio),e(F,Hio),e(F,$p),e($p,TZ),e(TZ,Uio),e($p,Jio),e($p,$S),e($S,Yio),e($p,Kio),e(F,Zio),e(F,Ip),e(Ip,FZ),e(FZ,edo),e(Ip,odo),e(Ip,IS),e(IS,rdo),e(Ip,tdo),e(F,ado),e(F,jp),e(jp,CZ),e(CZ,ndo),e(jp,sdo),e(jp,jS),e(jS,ldo),e(jp,ido),e(F,ddo),e(F,Np),e(Np,MZ),e(MZ,cdo),e(Np,fdo),e(Np,NS),e(NS,mdo),e(Np,gdo),e(F,hdo),e(F,Dp),e(Dp,EZ),e(EZ,pdo),e(Dp,_do),e(Dp,DS),e(DS,udo),e(Dp,bdo),e(F,vdo),e(F,qp),e(qp,yZ),e(yZ,Tdo),e(qp,Fdo),e(qp,qS),e(qS,Cdo),e(qp,Mdo),e(F,Edo),e(F,Gp),e(Gp,wZ),e(wZ,ydo),e(Gp,wdo),e(Gp,GS),e(GS,Ado),e(Gp,Ldo),e(F,Bdo),e(F,Op),e(Op,AZ),e(AZ,xdo),e(Op,kdo),e(Op,OS),e(OS,Rdo),e(Op,Sdo),e(F,Pdo),e(F,Xp),e(Xp,LZ),e(LZ,$do),e(Xp,Ido),e(Xp,XS),e(XS,jdo),e(Xp,Ndo),e(F,Ddo),e(F,Vp),e(Vp,BZ),e(BZ,qdo),e(Vp,Gdo),e(Vp,VS),e(VS,Odo),e(Vp,Xdo),e(F,Vdo),e(F,zp),e(zp,xZ),e(xZ,zdo),e(zp,Wdo),e(zp,zS),e(zS,Qdo),e(zp,Hdo),e(F,Udo),e(F,Wp),e(Wp,kZ),e(kZ,Jdo),e(Wp,Ydo),e(Wp,WS),e(WS,Kdo),e(Wp,Zdo),e(F,eco),e(F,Qp),e(Qp,RZ),e(RZ,oco),e(Qp,rco),e(Qp,QS),e(QS,tco),e(Qp,aco),e(F,nco),e(F,Hp),e(Hp,SZ),e(SZ,sco),e(Hp,lco),e(Hp,HS),e(HS,ico),e(Hp,dco),e(F,cco),e(F,Up),e(Up,PZ),e(PZ,fco),e(Up,mco),e(Up,US),e(US,gco),e(Up,hco),e(F,pco),e(F,Jp),e(Jp,$Z),e($Z,_co),e(Jp,uco),e(Jp,JS),e(JS,bco),e(Jp,vco),e(F,Tco),e(F,Yp),e(Yp,IZ),e(IZ,Fco),e(Yp,Cco),e(Yp,YS),e(YS,Mco),e(Yp,Eco),e(F,yco),e(F,Kp),e(Kp,jZ),e(jZ,wco),e(Kp,Aco),e(Kp,KS),e(KS,Lco),e(Kp,Bco),e(F,xco),e(F,Zp),e(Zp,NZ),e(NZ,kco),e(Zp,Rco),e(Zp,ZS),e(ZS,Sco),e(Zp,Pco),e(F,$co),e(F,e_),e(e_,DZ),e(DZ,Ico),e(e_,jco),e(e_,eP),e(eP,Nco),e(e_,Dco),e(F,qco),e(F,o_),e(o_,qZ),e(qZ,Gco),e(o_,Oco),e(o_,oP),e(oP,Xco),e(o_,Vco),e(F,zco),e(F,r_),e(r_,GZ),e(GZ,Wco),e(r_,Qco),e(r_,rP),e(rP,Hco),e(r_,Uco),e(F,Jco),e(F,t_),e(t_,OZ),e(OZ,Yco),e(t_,Kco),e(t_,tP),e(tP,Zco),e(t_,efo),e(F,ofo),e(F,a_),e(a_,XZ),e(XZ,rfo),e(a_,tfo),e(a_,aP),e(aP,afo),e(a_,nfo),e(F,sfo),e(F,n_),e(n_,VZ),e(VZ,lfo),e(n_,ifo),e(n_,nP),e(nP,dfo),e(n_,cfo),e(F,ffo),e(F,s_),e(s_,zZ),e(zZ,mfo),e(s_,gfo),e(s_,sP),e(sP,hfo),e(s_,pfo),e(F,_fo),e(F,l_),e(l_,WZ),e(WZ,ufo),e(l_,bfo),e(l_,lP),e(lP,vfo),e(l_,Tfo),e(F,Ffo),e(F,i_),e(i_,QZ),e(QZ,Cfo),e(i_,Mfo),e(i_,iP),e(iP,Efo),e(i_,yfo),e(F,wfo),e(F,d_),e(d_,HZ),e(HZ,Afo),e(d_,Lfo),e(d_,dP),e(dP,Bfo),e(d_,xfo),e(F,kfo),e(F,c_),e(c_,UZ),e(UZ,Rfo),e(c_,Sfo),e(c_,cP),e(cP,Pfo),e(c_,$fo),e(F,Ifo),e(F,f_),e(f_,JZ),e(JZ,jfo),e(f_,Nfo),e(f_,fP),e(fP,Dfo),e(f_,qfo),e(F,Gfo),e(F,m_),e(m_,YZ),e(YZ,Ofo),e(m_,Xfo),e(m_,mP),e(mP,Vfo),e(m_,zfo),e(F,Wfo),e(F,g_),e(g_,KZ),e(KZ,Qfo),e(g_,Hfo),e(g_,gP),e(gP,Ufo),e(g_,Jfo),e(F,Yfo),e(F,h_),e(h_,ZZ),e(ZZ,Kfo),e(h_,Zfo),e(h_,hP),e(hP,emo),e(h_,omo),e(F,rmo),e(F,p_),e(p_,eee),e(eee,tmo),e(p_,amo),e(p_,pP),e(pP,nmo),e(p_,smo),e(F,lmo),e(F,__),e(__,oee),e(oee,imo),e(__,dmo),e(__,_P),e(_P,cmo),e(__,fmo),e(F,mmo),e(F,u_),e(u_,ree),e(ree,gmo),e(u_,hmo),e(u_,uP),e(uP,pmo),e(u_,_mo),e(F,umo),e(F,b_),e(b_,tee),e(tee,bmo),e(b_,vmo),e(b_,bP),e(bP,Tmo),e(b_,Fmo),e(F,Cmo),e(F,v_),e(v_,aee),e(aee,Mmo),e(v_,Emo),e(v_,vP),e(vP,ymo),e(v_,wmo),e(F,Amo),e(F,T_),e(T_,nee),e(nee,Lmo),e(T_,Bmo),e(T_,TP),e(TP,xmo),e(T_,kmo),e(F,Rmo),e(F,F_),e(F_,see),e(see,Smo),e(F_,Pmo),e(F_,FP),e(FP,$mo),e(F_,Imo),e(F,jmo),e(F,C_),e(C_,lee),e(lee,Nmo),e(C_,Dmo),e(C_,CP),e(CP,qmo),e(C_,Gmo),e(F,Omo),e(F,M_),e(M_,iee),e(iee,Xmo),e(M_,Vmo),e(M_,MP),e(MP,zmo),e(M_,Wmo),e(F,Qmo),e(F,E_),e(E_,dee),e(dee,Hmo),e(E_,Umo),e(E_,EP),e(EP,Jmo),e(E_,Ymo),e(F,Kmo),e(F,y_),e(y_,cee),e(cee,Zmo),e(y_,ego),e(y_,yP),e(yP,ogo),e(y_,rgo),e(je,tgo),e(je,w_),e(w_,ago),e(w_,fee),e(fee,ngo),e(w_,sgo),e(w_,mee),e(mee,lgo),e(je,igo),e(je,gee),e(gee,dgo),e(je,cgo),g(UE,je,null),b(c,kke,u),b(c,Zi,u),e(Zi,A_),e(A_,hee),g(JE,hee,null),e(Zi,fgo),e(Zi,pee),e(pee,mgo),b(c,Rke,u),b(c,Yo,u),g(YE,Yo,null),e(Yo,ggo),e(Yo,ed),e(ed,hgo),e(ed,_ee),e(_ee,pgo),e(ed,_go),e(ed,uee),e(uee,ugo),e(ed,bgo),e(Yo,vgo),e(Yo,KE),e(KE,Tgo),e(KE,bee),e(bee,Fgo),e(KE,Cgo),e(Yo,Mgo),e(Yo,zr),g(ZE,zr,null),e(zr,Ego),e(zr,vee),e(vee,ygo),e(zr,wgo),e(zr,od),e(od,Ago),e(od,Tee),e(Tee,Lgo),e(od,Bgo),e(od,Fee),e(Fee,xgo),e(od,kgo),e(zr,Rgo),e(zr,Cee),e(Cee,Sgo),e(zr,Pgo),g(e3,zr,null),e(Yo,$go),e(Yo,Ne),g(o3,Ne,null),e(Ne,Igo),e(Ne,Mee),e(Mee,jgo),e(Ne,Ngo),e(Ne,za),e(za,Dgo),e(za,Eee),e(Eee,qgo),e(za,Ggo),e(za,yee),e(yee,Ogo),e(za,Xgo),e(za,wee),e(wee,Vgo),e(za,zgo),e(Ne,Wgo),e(Ne,k),e(k,L_),e(L_,Aee),e(Aee,Qgo),e(L_,Hgo),e(L_,wP),e(wP,Ugo),e(L_,Jgo),e(k,Ygo),e(k,B_),e(B_,Lee),e(Lee,Kgo),e(B_,Zgo),e(B_,AP),e(AP,eho),e(B_,oho),e(k,rho),e(k,x_),e(x_,Bee),e(Bee,tho),e(x_,aho),e(x_,LP),e(LP,nho),e(x_,sho),e(k,lho),e(k,k_),e(k_,xee),e(xee,iho),e(k_,dho),e(k_,BP),e(BP,cho),e(k_,fho),e(k,mho),e(k,R_),e(R_,kee),e(kee,gho),e(R_,hho),e(R_,xP),e(xP,pho),e(R_,_ho),e(k,uho),e(k,S_),e(S_,Ree),e(Ree,bho),e(S_,vho),e(S_,kP),e(kP,Tho),e(S_,Fho),e(k,Cho),e(k,P_),e(P_,See),e(See,Mho),e(P_,Eho),e(P_,RP),e(RP,yho),e(P_,who),e(k,Aho),e(k,$_),e($_,Pee),e(Pee,Lho),e($_,Bho),e($_,SP),e(SP,xho),e($_,kho),e(k,Rho),e(k,I_),e(I_,$ee),e($ee,Sho),e(I_,Pho),e(I_,PP),e(PP,$ho),e(I_,Iho),e(k,jho),e(k,j_),e(j_,Iee),e(Iee,Nho),e(j_,Dho),e(j_,$P),e($P,qho),e(j_,Gho),e(k,Oho),e(k,N_),e(N_,jee),e(jee,Xho),e(N_,Vho),e(N_,IP),e(IP,zho),e(N_,Who),e(k,Qho),e(k,D_),e(D_,Nee),e(Nee,Hho),e(D_,Uho),e(D_,jP),e(jP,Jho),e(D_,Yho),e(k,Kho),e(k,q_),e(q_,Dee),e(Dee,Zho),e(q_,epo),e(q_,NP),e(NP,opo),e(q_,rpo),e(k,tpo),e(k,G_),e(G_,qee),e(qee,apo),e(G_,npo),e(G_,DP),e(DP,spo),e(G_,lpo),e(k,ipo),e(k,O_),e(O_,Gee),e(Gee,dpo),e(O_,cpo),e(O_,qP),e(qP,fpo),e(O_,mpo),e(k,gpo),e(k,X_),e(X_,Oee),e(Oee,hpo),e(X_,ppo),e(X_,GP),e(GP,_po),e(X_,upo),e(k,bpo),e(k,V_),e(V_,Xee),e(Xee,vpo),e(V_,Tpo),e(V_,OP),e(OP,Fpo),e(V_,Cpo),e(k,Mpo),e(k,z_),e(z_,Vee),e(Vee,Epo),e(z_,ypo),e(z_,XP),e(XP,wpo),e(z_,Apo),e(k,Lpo),e(k,W_),e(W_,zee),e(zee,Bpo),e(W_,xpo),e(W_,VP),e(VP,kpo),e(W_,Rpo),e(k,Spo),e(k,Q_),e(Q_,Wee),e(Wee,Ppo),e(Q_,$po),e(Q_,zP),e(zP,Ipo),e(Q_,jpo),e(k,Npo),e(k,H_),e(H_,Qee),e(Qee,Dpo),e(H_,qpo),e(H_,WP),e(WP,Gpo),e(H_,Opo),e(k,Xpo),e(k,U_),e(U_,Hee),e(Hee,Vpo),e(U_,zpo),e(U_,QP),e(QP,Wpo),e(U_,Qpo),e(k,Hpo),e(k,J_),e(J_,Uee),e(Uee,Upo),e(J_,Jpo),e(J_,HP),e(HP,Ypo),e(J_,Kpo),e(k,Zpo),e(k,Y_),e(Y_,Jee),e(Jee,e_o),e(Y_,o_o),e(Y_,UP),e(UP,r_o),e(Y_,t_o),e(k,a_o),e(k,K_),e(K_,Yee),e(Yee,n_o),e(K_,s_o),e(K_,JP),e(JP,l_o),e(K_,i_o),e(k,d_o),e(k,Z_),e(Z_,Kee),e(Kee,c_o),e(Z_,f_o),e(Z_,YP),e(YP,m_o),e(Z_,g_o),e(k,h_o),e(k,eu),e(eu,Zee),e(Zee,p_o),e(eu,__o),e(eu,KP),e(KP,u_o),e(eu,b_o),e(k,v_o),e(k,ou),e(ou,eoe),e(eoe,T_o),e(ou,F_o),e(ou,ZP),e(ZP,C_o),e(ou,M_o),e(k,E_o),e(k,ru),e(ru,ooe),e(ooe,y_o),e(ru,w_o),e(ru,e$),e(e$,A_o),e(ru,L_o),e(k,B_o),e(k,tu),e(tu,roe),e(roe,x_o),e(tu,k_o),e(tu,o$),e(o$,R_o),e(tu,S_o),e(k,P_o),e(k,au),e(au,toe),e(toe,$_o),e(au,I_o),e(au,r$),e(r$,j_o),e(au,N_o),e(k,D_o),e(k,nu),e(nu,aoe),e(aoe,q_o),e(nu,G_o),e(nu,t$),e(t$,O_o),e(nu,X_o),e(k,V_o),e(k,su),e(su,noe),e(noe,z_o),e(su,W_o),e(su,a$),e(a$,Q_o),e(su,H_o),e(k,U_o),e(k,lu),e(lu,soe),e(soe,J_o),e(lu,Y_o),e(lu,n$),e(n$,K_o),e(lu,Z_o),e(k,euo),e(k,iu),e(iu,loe),e(loe,ouo),e(iu,ruo),e(iu,s$),e(s$,tuo),e(iu,auo),e(k,nuo),e(k,du),e(du,ioe),e(ioe,suo),e(du,luo),e(du,l$),e(l$,iuo),e(du,duo),e(k,cuo),e(k,cu),e(cu,doe),e(doe,fuo),e(cu,muo),e(cu,i$),e(i$,guo),e(cu,huo),e(k,puo),e(k,fu),e(fu,coe),e(coe,_uo),e(fu,uuo),e(fu,d$),e(d$,buo),e(fu,vuo),e(k,Tuo),e(k,mu),e(mu,foe),e(foe,Fuo),e(mu,Cuo),e(mu,c$),e(c$,Muo),e(mu,Euo),e(Ne,yuo),e(Ne,gu),e(gu,wuo),e(gu,moe),e(moe,Auo),e(gu,Luo),e(gu,goe),e(goe,Buo),e(Ne,xuo),e(Ne,hoe),e(hoe,kuo),e(Ne,Ruo),g(r3,Ne,null),b(c,Ske,u),b(c,rd,u),e(rd,hu),e(hu,poe),g(t3,poe,null),e(rd,Suo),e(rd,_oe),e(_oe,Puo),b(c,Pke,u),b(c,Ko,u),g(a3,Ko,null),e(Ko,$uo),e(Ko,td),e(td,Iuo),e(td,uoe),e(uoe,juo),e(td,Nuo),e(td,boe),e(boe,Duo),e(td,quo),e(Ko,Guo),e(Ko,n3),e(n3,Ouo),e(n3,voe),e(voe,Xuo),e(n3,Vuo),e(Ko,zuo),e(Ko,Wr),g(s3,Wr,null),e(Wr,Wuo),e(Wr,Toe),e(Toe,Quo),e(Wr,Huo),e(Wr,ad),e(ad,Uuo),e(ad,Foe),e(Foe,Juo),e(ad,Yuo),e(ad,Coe),e(Coe,Kuo),e(ad,Zuo),e(Wr,e1o),e(Wr,Moe),e(Moe,o1o),e(Wr,r1o),g(l3,Wr,null),e(Ko,t1o),e(Ko,De),g(i3,De,null),e(De,a1o),e(De,Eoe),e(Eoe,n1o),e(De,s1o),e(De,Wa),e(Wa,l1o),e(Wa,yoe),e(yoe,i1o),e(Wa,d1o),e(Wa,woe),e(woe,c1o),e(Wa,f1o),e(Wa,Aoe),e(Aoe,m1o),e(Wa,g1o),e(De,h1o),e(De,$),e($,pu),e(pu,Loe),e(Loe,p1o),e(pu,_1o),e(pu,f$),e(f$,u1o),e(pu,b1o),e($,v1o),e($,_u),e(_u,Boe),e(Boe,T1o),e(_u,F1o),e(_u,m$),e(m$,C1o),e(_u,M1o),e($,E1o),e($,uu),e(uu,xoe),e(xoe,y1o),e(uu,w1o),e(uu,g$),e(g$,A1o),e(uu,L1o),e($,B1o),e($,bu),e(bu,koe),e(koe,x1o),e(bu,k1o),e(bu,h$),e(h$,R1o),e(bu,S1o),e($,P1o),e($,vu),e(vu,Roe),e(Roe,$1o),e(vu,I1o),e(vu,p$),e(p$,j1o),e(vu,N1o),e($,D1o),e($,Tu),e(Tu,Soe),e(Soe,q1o),e(Tu,G1o),e(Tu,_$),e(_$,O1o),e(Tu,X1o),e($,V1o),e($,Fu),e(Fu,Poe),e(Poe,z1o),e(Fu,W1o),e(Fu,u$),e(u$,Q1o),e(Fu,H1o),e($,U1o),e($,Cu),e(Cu,$oe),e($oe,J1o),e(Cu,Y1o),e(Cu,b$),e(b$,K1o),e(Cu,Z1o),e($,e4o),e($,Mu),e(Mu,Ioe),e(Ioe,o4o),e(Mu,r4o),e(Mu,v$),e(v$,t4o),e(Mu,a4o),e($,n4o),e($,Eu),e(Eu,joe),e(joe,s4o),e(Eu,l4o),e(Eu,T$),e(T$,i4o),e(Eu,d4o),e($,c4o),e($,yu),e(yu,Noe),e(Noe,f4o),e(yu,m4o),e(yu,F$),e(F$,g4o),e(yu,h4o),e($,p4o),e($,wu),e(wu,Doe),e(Doe,_4o),e(wu,u4o),e(wu,C$),e(C$,b4o),e(wu,v4o),e($,T4o),e($,Au),e(Au,qoe),e(qoe,F4o),e(Au,C4o),e(Au,M$),e(M$,M4o),e(Au,E4o),e($,y4o),e($,Lu),e(Lu,Goe),e(Goe,w4o),e(Lu,A4o),e(Lu,E$),e(E$,L4o),e(Lu,B4o),e($,x4o),e($,Bu),e(Bu,Ooe),e(Ooe,k4o),e(Bu,R4o),e(Bu,y$),e(y$,S4o),e(Bu,P4o),e($,$4o),e($,xu),e(xu,Xoe),e(Xoe,I4o),e(xu,j4o),e(xu,w$),e(w$,N4o),e(xu,D4o),e($,q4o),e($,ku),e(ku,Voe),e(Voe,G4o),e(ku,O4o),e(ku,A$),e(A$,X4o),e(ku,V4o),e($,z4o),e($,Ru),e(Ru,zoe),e(zoe,W4o),e(Ru,Q4o),e(Ru,L$),e(L$,H4o),e(Ru,U4o),e($,J4o),e($,Su),e(Su,Woe),e(Woe,Y4o),e(Su,K4o),e(Su,B$),e(B$,Z4o),e(Su,ebo),e($,obo),e($,Pu),e(Pu,Qoe),e(Qoe,rbo),e(Pu,tbo),e(Pu,x$),e(x$,abo),e(Pu,nbo),e($,sbo),e($,$u),e($u,Hoe),e(Hoe,lbo),e($u,ibo),e($u,k$),e(k$,dbo),e($u,cbo),e($,fbo),e($,Iu),e(Iu,Uoe),e(Uoe,mbo),e(Iu,gbo),e(Iu,R$),e(R$,hbo),e(Iu,pbo),e($,_bo),e($,ju),e(ju,Joe),e(Joe,ubo),e(ju,bbo),e(ju,S$),e(S$,vbo),e(ju,Tbo),e($,Fbo),e($,Nu),e(Nu,Yoe),e(Yoe,Cbo),e(Nu,Mbo),e(Nu,P$),e(P$,Ebo),e(Nu,ybo),e($,wbo),e($,Du),e(Du,Koe),e(Koe,Abo),e(Du,Lbo),e(Du,$$),e($$,Bbo),e(Du,xbo),e($,kbo),e($,qu),e(qu,Zoe),e(Zoe,Rbo),e(qu,Sbo),e(qu,I$),e(I$,Pbo),e(qu,$bo),e($,Ibo),e($,Gu),e(Gu,ere),e(ere,jbo),e(Gu,Nbo),e(Gu,j$),e(j$,Dbo),e(Gu,qbo),e($,Gbo),e($,Ou),e(Ou,ore),e(ore,Obo),e(Ou,Xbo),e(Ou,N$),e(N$,Vbo),e(Ou,zbo),e($,Wbo),e($,Xu),e(Xu,rre),e(rre,Qbo),e(Xu,Hbo),e(Xu,D$),e(D$,Ubo),e(Xu,Jbo),e($,Ybo),e($,Vu),e(Vu,tre),e(tre,Kbo),e(Vu,Zbo),e(Vu,q$),e(q$,e5o),e(Vu,o5o),e($,r5o),e($,zu),e(zu,are),e(are,t5o),e(zu,a5o),e(zu,G$),e(G$,n5o),e(zu,s5o),e($,l5o),e($,Wu),e(Wu,nre),e(nre,i5o),e(Wu,d5o),e(Wu,O$),e(O$,c5o),e(Wu,f5o),e($,m5o),e($,Qu),e(Qu,sre),e(sre,g5o),e(Qu,h5o),e(Qu,X$),e(X$,p5o),e(Qu,_5o),e($,u5o),e($,Hu),e(Hu,lre),e(lre,b5o),e(Hu,v5o),e(Hu,V$),e(V$,T5o),e(Hu,F5o),e($,C5o),e($,Uu),e(Uu,ire),e(ire,M5o),e(Uu,E5o),e(Uu,z$),e(z$,y5o),e(Uu,w5o),e(De,A5o),e(De,Ju),e(Ju,L5o),e(Ju,dre),e(dre,B5o),e(Ju,x5o),e(Ju,cre),e(cre,k5o),e(De,R5o),e(De,fre),e(fre,S5o),e(De,P5o),g(d3,De,null),b(c,$ke,u),b(c,nd,u),e(nd,Yu),e(Yu,mre),g(c3,mre,null),e(nd,$5o),e(nd,gre),e(gre,I5o),b(c,Ike,u),b(c,Zo,u),g(f3,Zo,null),e(Zo,j5o),e(Zo,sd),e(sd,N5o),e(sd,hre),e(hre,D5o),e(sd,q5o),e(sd,pre),e(pre,G5o),e(sd,O5o),e(Zo,X5o),e(Zo,m3),e(m3,V5o),e(m3,_re),e(_re,z5o),e(m3,W5o),e(Zo,Q5o),e(Zo,Qr),g(g3,Qr,null),e(Qr,H5o),e(Qr,ure),e(ure,U5o),e(Qr,J5o),e(Qr,ld),e(ld,Y5o),e(ld,bre),e(bre,K5o),e(ld,Z5o),e(ld,vre),e(vre,e2o),e(ld,o2o),e(Qr,r2o),e(Qr,Tre),e(Tre,t2o),e(Qr,a2o),g(h3,Qr,null),e(Zo,n2o),e(Zo,qe),g(p3,qe,null),e(qe,s2o),e(qe,Fre),e(Fre,l2o),e(qe,i2o),e(qe,Qa),e(Qa,d2o),e(Qa,Cre),e(Cre,c2o),e(Qa,f2o),e(Qa,Mre),e(Mre,m2o),e(Qa,g2o),e(Qa,Ere),e(Ere,h2o),e(Qa,p2o),e(qe,_2o),e(qe,I),e(I,Ku),e(Ku,yre),e(yre,u2o),e(Ku,b2o),e(Ku,W$),e(W$,v2o),e(Ku,T2o),e(I,F2o),e(I,Zu),e(Zu,wre),e(wre,C2o),e(Zu,M2o),e(Zu,Q$),e(Q$,E2o),e(Zu,y2o),e(I,w2o),e(I,e1),e(e1,Are),e(Are,A2o),e(e1,L2o),e(e1,H$),e(H$,B2o),e(e1,x2o),e(I,k2o),e(I,o1),e(o1,Lre),e(Lre,R2o),e(o1,S2o),e(o1,U$),e(U$,P2o),e(o1,$2o),e(I,I2o),e(I,r1),e(r1,Bre),e(Bre,j2o),e(r1,N2o),e(r1,J$),e(J$,D2o),e(r1,q2o),e(I,G2o),e(I,t1),e(t1,xre),e(xre,O2o),e(t1,X2o),e(t1,Y$),e(Y$,V2o),e(t1,z2o),e(I,W2o),e(I,a1),e(a1,kre),e(kre,Q2o),e(a1,H2o),e(a1,K$),e(K$,U2o),e(a1,J2o),e(I,Y2o),e(I,n1),e(n1,Rre),e(Rre,K2o),e(n1,Z2o),e(n1,Z$),e(Z$,evo),e(n1,ovo),e(I,rvo),e(I,s1),e(s1,Sre),e(Sre,tvo),e(s1,avo),e(s1,eI),e(eI,nvo),e(s1,svo),e(I,lvo),e(I,l1),e(l1,Pre),e(Pre,ivo),e(l1,dvo),e(l1,oI),e(oI,cvo),e(l1,fvo),e(I,mvo),e(I,i1),e(i1,$re),e($re,gvo),e(i1,hvo),e(i1,rI),e(rI,pvo),e(i1,_vo),e(I,uvo),e(I,d1),e(d1,Ire),e(Ire,bvo),e(d1,vvo),e(d1,tI),e(tI,Tvo),e(d1,Fvo),e(I,Cvo),e(I,c1),e(c1,jre),e(jre,Mvo),e(c1,Evo),e(c1,aI),e(aI,yvo),e(c1,wvo),e(I,Avo),e(I,f1),e(f1,Nre),e(Nre,Lvo),e(f1,Bvo),e(f1,nI),e(nI,xvo),e(f1,kvo),e(I,Rvo),e(I,m1),e(m1,Dre),e(Dre,Svo),e(m1,Pvo),e(m1,sI),e(sI,$vo),e(m1,Ivo),e(I,jvo),e(I,g1),e(g1,qre),e(qre,Nvo),e(g1,Dvo),e(g1,lI),e(lI,qvo),e(g1,Gvo),e(I,Ovo),e(I,h1),e(h1,Gre),e(Gre,Xvo),e(h1,Vvo),e(h1,iI),e(iI,zvo),e(h1,Wvo),e(I,Qvo),e(I,p1),e(p1,Ore),e(Ore,Hvo),e(p1,Uvo),e(p1,dI),e(dI,Jvo),e(p1,Yvo),e(I,Kvo),e(I,_1),e(_1,Xre),e(Xre,Zvo),e(_1,e6o),e(_1,cI),e(cI,o6o),e(_1,r6o),e(I,t6o),e(I,u1),e(u1,Vre),e(Vre,a6o),e(u1,n6o),e(u1,fI),e(fI,s6o),e(u1,l6o),e(I,i6o),e(I,b1),e(b1,zre),e(zre,d6o),e(b1,c6o),e(b1,mI),e(mI,f6o),e(b1,m6o),e(I,g6o),e(I,v1),e(v1,Wre),e(Wre,h6o),e(v1,p6o),e(v1,gI),e(gI,_6o),e(v1,u6o),e(I,b6o),e(I,T1),e(T1,Qre),e(Qre,v6o),e(T1,T6o),e(T1,hI),e(hI,F6o),e(T1,C6o),e(I,M6o),e(I,F1),e(F1,Hre),e(Hre,E6o),e(F1,y6o),e(F1,pI),e(pI,w6o),e(F1,A6o),e(I,L6o),e(I,C1),e(C1,Ure),e(Ure,B6o),e(C1,x6o),e(C1,_I),e(_I,k6o),e(C1,R6o),e(I,S6o),e(I,M1),e(M1,Jre),e(Jre,P6o),e(M1,$6o),e(M1,uI),e(uI,I6o),e(M1,j6o),e(I,N6o),e(I,E1),e(E1,Yre),e(Yre,D6o),e(E1,q6o),e(E1,bI),e(bI,G6o),e(E1,O6o),e(I,X6o),e(I,y1),e(y1,Kre),e(Kre,V6o),e(y1,z6o),e(y1,vI),e(vI,W6o),e(y1,Q6o),e(I,H6o),e(I,w1),e(w1,Zre),e(Zre,U6o),e(w1,J6o),e(w1,TI),e(TI,Y6o),e(w1,K6o),e(I,Z6o),e(I,A1),e(A1,ete),e(ete,e0o),e(A1,o0o),e(A1,FI),e(FI,r0o),e(A1,t0o),e(I,a0o),e(I,L1),e(L1,ote),e(ote,n0o),e(L1,s0o),e(L1,rte),e(rte,l0o),e(L1,i0o),e(I,d0o),e(I,B1),e(B1,tte),e(tte,c0o),e(B1,f0o),e(B1,CI),e(CI,m0o),e(B1,g0o),e(I,h0o),e(I,x1),e(x1,ate),e(ate,p0o),e(x1,_0o),e(x1,MI),e(MI,u0o),e(x1,b0o),e(I,v0o),e(I,k1),e(k1,nte),e(nte,T0o),e(k1,F0o),e(k1,EI),e(EI,C0o),e(k1,M0o),e(I,E0o),e(I,R1),e(R1,ste),e(ste,y0o),e(R1,w0o),e(R1,yI),e(yI,A0o),e(R1,L0o),e(qe,B0o),e(qe,S1),e(S1,x0o),e(S1,lte),e(lte,k0o),e(S1,R0o),e(S1,ite),e(ite,S0o),e(qe,P0o),e(qe,dte),e(dte,$0o),e(qe,I0o),g(_3,qe,null),b(c,jke,u),b(c,id,u),e(id,P1),e(P1,cte),g(u3,cte,null),e(id,j0o),e(id,fte),e(fte,N0o),b(c,Nke,u),b(c,er,u),g(b3,er,null),e(er,D0o),e(er,dd),e(dd,q0o),e(dd,mte),e(mte,G0o),e(dd,O0o),e(dd,gte),e(gte,X0o),e(dd,V0o),e(er,z0o),e(er,v3),e(v3,W0o),e(v3,hte),e(hte,Q0o),e(v3,H0o),e(er,U0o),e(er,Hr),g(T3,Hr,null),e(Hr,J0o),e(Hr,pte),e(pte,Y0o),e(Hr,K0o),e(Hr,cd),e(cd,Z0o),e(cd,_te),e(_te,eTo),e(cd,oTo),e(cd,ute),e(ute,rTo),e(cd,tTo),e(Hr,aTo),e(Hr,bte),e(bte,nTo),e(Hr,sTo),g(F3,Hr,null),e(er,lTo),e(er,Ge),g(C3,Ge,null),e(Ge,iTo),e(Ge,vte),e(vte,dTo),e(Ge,cTo),e(Ge,Ha),e(Ha,fTo),e(Ha,Tte),e(Tte,mTo),e(Ha,gTo),e(Ha,Fte),e(Fte,hTo),e(Ha,pTo),e(Ha,Cte),e(Cte,_To),e(Ha,uTo),e(Ge,bTo),e(Ge,se),e(se,$1),e($1,Mte),e(Mte,vTo),e($1,TTo),e($1,wI),e(wI,FTo),e($1,CTo),e(se,MTo),e(se,I1),e(I1,Ete),e(Ete,ETo),e(I1,yTo),e(I1,AI),e(AI,wTo),e(I1,ATo),e(se,LTo),e(se,j1),e(j1,yte),e(yte,BTo),e(j1,xTo),e(j1,LI),e(LI,kTo),e(j1,RTo),e(se,STo),e(se,N1),e(N1,wte),e(wte,PTo),e(N1,$To),e(N1,BI),e(BI,ITo),e(N1,jTo),e(se,NTo),e(se,D1),e(D1,Ate),e(Ate,DTo),e(D1,qTo),e(D1,xI),e(xI,GTo),e(D1,OTo),e(se,XTo),e(se,q1),e(q1,Lte),e(Lte,VTo),e(q1,zTo),e(q1,kI),e(kI,WTo),e(q1,QTo),e(se,HTo),e(se,G1),e(G1,Bte),e(Bte,UTo),e(G1,JTo),e(G1,RI),e(RI,YTo),e(G1,KTo),e(se,ZTo),e(se,O1),e(O1,xte),e(xte,eFo),e(O1,oFo),e(O1,SI),e(SI,rFo),e(O1,tFo),e(se,aFo),e(se,X1),e(X1,kte),e(kte,nFo),e(X1,sFo),e(X1,PI),e(PI,lFo),e(X1,iFo),e(se,dFo),e(se,V1),e(V1,Rte),e(Rte,cFo),e(V1,fFo),e(V1,$I),e($I,mFo),e(V1,gFo),e(se,hFo),e(se,z1),e(z1,Ste),e(Ste,pFo),e(z1,_Fo),e(z1,II),e(II,uFo),e(z1,bFo),e(se,vFo),e(se,W1),e(W1,Pte),e(Pte,TFo),e(W1,FFo),e(W1,jI),e(jI,CFo),e(W1,MFo),e(se,EFo),e(se,Q1),e(Q1,$te),e($te,yFo),e(Q1,wFo),e(Q1,NI),e(NI,AFo),e(Q1,LFo),e(se,BFo),e(se,H1),e(H1,Ite),e(Ite,xFo),e(H1,kFo),e(H1,DI),e(DI,RFo),e(H1,SFo),e(se,PFo),e(se,U1),e(U1,jte),e(jte,$Fo),e(U1,IFo),e(U1,qI),e(qI,jFo),e(U1,NFo),e(se,DFo),e(se,J1),e(J1,Nte),e(Nte,qFo),e(J1,GFo),e(J1,GI),e(GI,OFo),e(J1,XFo),e(Ge,VFo),e(Ge,Y1),e(Y1,zFo),e(Y1,Dte),e(Dte,WFo),e(Y1,QFo),e(Y1,qte),e(qte,HFo),e(Ge,UFo),e(Ge,Gte),e(Gte,JFo),e(Ge,YFo),g(M3,Ge,null),b(c,Dke,u),b(c,fd,u),e(fd,K1),e(K1,Ote),g(E3,Ote,null),e(fd,KFo),e(fd,Xte),e(Xte,ZFo),b(c,qke,u),b(c,or,u),g(y3,or,null),e(or,eCo),e(or,md),e(md,oCo),e(md,Vte),e(Vte,rCo),e(md,tCo),e(md,zte),e(zte,aCo),e(md,nCo),e(or,sCo),e(or,w3),e(w3,lCo),e(w3,Wte),e(Wte,iCo),e(w3,dCo),e(or,cCo),e(or,Ur),g(A3,Ur,null),e(Ur,fCo),e(Ur,Qte),e(Qte,mCo),e(Ur,gCo),e(Ur,gd),e(gd,hCo),e(gd,Hte),e(Hte,pCo),e(gd,_Co),e(gd,Ute),e(Ute,uCo),e(gd,bCo),e(Ur,vCo),e(Ur,Jte),e(Jte,TCo),e(Ur,FCo),g(L3,Ur,null),e(or,CCo),e(or,Oe),g(B3,Oe,null),e(Oe,MCo),e(Oe,Yte),e(Yte,ECo),e(Oe,yCo),e(Oe,Ua),e(Ua,wCo),e(Ua,Kte),e(Kte,ACo),e(Ua,LCo),e(Ua,Zte),e(Zte,BCo),e(Ua,xCo),e(Ua,eae),e(eae,kCo),e(Ua,RCo),e(Oe,SCo),e(Oe,A),e(A,Z1),e(Z1,oae),e(oae,PCo),e(Z1,$Co),e(Z1,OI),e(OI,ICo),e(Z1,jCo),e(A,NCo),e(A,e4),e(e4,rae),e(rae,DCo),e(e4,qCo),e(e4,XI),e(XI,GCo),e(e4,OCo),e(A,XCo),e(A,o4),e(o4,tae),e(tae,VCo),e(o4,zCo),e(o4,VI),e(VI,WCo),e(o4,QCo),e(A,HCo),e(A,r4),e(r4,aae),e(aae,UCo),e(r4,JCo),e(r4,zI),e(zI,YCo),e(r4,KCo),e(A,ZCo),e(A,t4),e(t4,nae),e(nae,eMo),e(t4,oMo),e(t4,WI),e(WI,rMo),e(t4,tMo),e(A,aMo),e(A,a4),e(a4,sae),e(sae,nMo),e(a4,sMo),e(a4,QI),e(QI,lMo),e(a4,iMo),e(A,dMo),e(A,n4),e(n4,lae),e(lae,cMo),e(n4,fMo),e(n4,HI),e(HI,mMo),e(n4,gMo),e(A,hMo),e(A,s4),e(s4,iae),e(iae,pMo),e(s4,_Mo),e(s4,UI),e(UI,uMo),e(s4,bMo),e(A,vMo),e(A,l4),e(l4,dae),e(dae,TMo),e(l4,FMo),e(l4,JI),e(JI,CMo),e(l4,MMo),e(A,EMo),e(A,i4),e(i4,cae),e(cae,yMo),e(i4,wMo),e(i4,YI),e(YI,AMo),e(i4,LMo),e(A,BMo),e(A,d4),e(d4,fae),e(fae,xMo),e(d4,kMo),e(d4,KI),e(KI,RMo),e(d4,SMo),e(A,PMo),e(A,c4),e(c4,mae),e(mae,$Mo),e(c4,IMo),e(c4,ZI),e(ZI,jMo),e(c4,NMo),e(A,DMo),e(A,f4),e(f4,gae),e(gae,qMo),e(f4,GMo),e(f4,ej),e(ej,OMo),e(f4,XMo),e(A,VMo),e(A,m4),e(m4,hae),e(hae,zMo),e(m4,WMo),e(m4,oj),e(oj,QMo),e(m4,HMo),e(A,UMo),e(A,g4),e(g4,pae),e(pae,JMo),e(g4,YMo),e(g4,rj),e(rj,KMo),e(g4,ZMo),e(A,eEo),e(A,h4),e(h4,_ae),e(_ae,oEo),e(h4,rEo),e(h4,tj),e(tj,tEo),e(h4,aEo),e(A,nEo),e(A,p4),e(p4,uae),e(uae,sEo),e(p4,lEo),e(p4,aj),e(aj,iEo),e(p4,dEo),e(A,cEo),e(A,_4),e(_4,bae),e(bae,fEo),e(_4,mEo),e(_4,nj),e(nj,gEo),e(_4,hEo),e(A,pEo),e(A,u4),e(u4,vae),e(vae,_Eo),e(u4,uEo),e(u4,sj),e(sj,bEo),e(u4,vEo),e(A,TEo),e(A,b4),e(b4,Tae),e(Tae,FEo),e(b4,CEo),e(b4,lj),e(lj,MEo),e(b4,EEo),e(A,yEo),e(A,v4),e(v4,Fae),e(Fae,wEo),e(v4,AEo),e(v4,ij),e(ij,LEo),e(v4,BEo),e(A,xEo),e(A,T4),e(T4,Cae),e(Cae,kEo),e(T4,REo),e(T4,dj),e(dj,SEo),e(T4,PEo),e(A,$Eo),e(A,F4),e(F4,Mae),e(Mae,IEo),e(F4,jEo),e(F4,cj),e(cj,NEo),e(F4,DEo),e(A,qEo),e(A,C4),e(C4,Eae),e(Eae,GEo),e(C4,OEo),e(C4,fj),e(fj,XEo),e(C4,VEo),e(A,zEo),e(A,M4),e(M4,yae),e(yae,WEo),e(M4,QEo),e(M4,mj),e(mj,HEo),e(M4,UEo),e(A,JEo),e(A,E4),e(E4,wae),e(wae,YEo),e(E4,KEo),e(E4,gj),e(gj,ZEo),e(E4,e3o),e(A,o3o),e(A,y4),e(y4,Aae),e(Aae,r3o),e(y4,t3o),e(y4,hj),e(hj,a3o),e(y4,n3o),e(A,s3o),e(A,w4),e(w4,Lae),e(Lae,l3o),e(w4,i3o),e(w4,pj),e(pj,d3o),e(w4,c3o),e(A,f3o),e(A,A4),e(A4,Bae),e(Bae,m3o),e(A4,g3o),e(A4,_j),e(_j,h3o),e(A4,p3o),e(A,_3o),e(A,L4),e(L4,xae),e(xae,u3o),e(L4,b3o),e(L4,uj),e(uj,v3o),e(L4,T3o),e(A,F3o),e(A,B4),e(B4,kae),e(kae,C3o),e(B4,M3o),e(B4,bj),e(bj,E3o),e(B4,y3o),e(A,w3o),e(A,x4),e(x4,Rae),e(Rae,A3o),e(x4,L3o),e(x4,vj),e(vj,B3o),e(x4,x3o),e(A,k3o),e(A,k4),e(k4,Sae),e(Sae,R3o),e(k4,S3o),e(k4,Tj),e(Tj,P3o),e(k4,$3o),e(A,I3o),e(A,R4),e(R4,Pae),e(Pae,j3o),e(R4,N3o),e(R4,Fj),e(Fj,D3o),e(R4,q3o),e(A,G3o),e(A,S4),e(S4,$ae),e($ae,O3o),e(S4,X3o),e(S4,Cj),e(Cj,V3o),e(S4,z3o),e(A,W3o),e(A,P4),e(P4,Iae),e(Iae,Q3o),e(P4,H3o),e(P4,Mj),e(Mj,U3o),e(P4,J3o),e(A,Y3o),e(A,$4),e($4,jae),e(jae,K3o),e($4,Z3o),e($4,Ej),e(Ej,eyo),e($4,oyo),e(A,ryo),e(A,I4),e(I4,Nae),e(Nae,tyo),e(I4,ayo),e(I4,yj),e(yj,nyo),e(I4,syo),e(A,lyo),e(A,j4),e(j4,Dae),e(Dae,iyo),e(j4,dyo),e(j4,wj),e(wj,cyo),e(j4,fyo),e(A,myo),e(A,N4),e(N4,qae),e(qae,gyo),e(N4,hyo),e(N4,Aj),e(Aj,pyo),e(N4,_yo),e(A,uyo),e(A,D4),e(D4,Gae),e(Gae,byo),e(D4,vyo),e(D4,Lj),e(Lj,Tyo),e(D4,Fyo),e(A,Cyo),e(A,q4),e(q4,Oae),e(Oae,Myo),e(q4,Eyo),e(q4,Bj),e(Bj,yyo),e(q4,wyo),e(A,Ayo),e(A,G4),e(G4,Xae),e(Xae,Lyo),e(G4,Byo),e(G4,xj),e(xj,xyo),e(G4,kyo),e(A,Ryo),e(A,O4),e(O4,Vae),e(Vae,Syo),e(O4,Pyo),e(O4,kj),e(kj,$yo),e(O4,Iyo),e(A,jyo),e(A,X4),e(X4,zae),e(zae,Nyo),e(X4,Dyo),e(X4,Rj),e(Rj,qyo),e(X4,Gyo),e(A,Oyo),e(A,V4),e(V4,Wae),e(Wae,Xyo),e(V4,Vyo),e(V4,Sj),e(Sj,zyo),e(V4,Wyo),e(Oe,Qyo),e(Oe,z4),e(z4,Hyo),e(z4,Qae),e(Qae,Uyo),e(z4,Jyo),e(z4,Hae),e(Hae,Yyo),e(Oe,Kyo),e(Oe,Uae),e(Uae,Zyo),e(Oe,ewo),g(x3,Oe,null),b(c,Gke,u),b(c,hd,u),e(hd,W4),e(W4,Jae),g(k3,Jae,null),e(hd,owo),e(hd,Yae),e(Yae,rwo),b(c,Oke,u),b(c,rr,u),g(R3,rr,null),e(rr,two),e(rr,pd),e(pd,awo),e(pd,Kae),e(Kae,nwo),e(pd,swo),e(pd,Zae),e(Zae,lwo),e(pd,iwo),e(rr,dwo),e(rr,S3),e(S3,cwo),e(S3,ene),e(ene,fwo),e(S3,mwo),e(rr,gwo),e(rr,Jr),g(P3,Jr,null),e(Jr,hwo),e(Jr,one),e(one,pwo),e(Jr,_wo),e(Jr,_d),e(_d,uwo),e(_d,rne),e(rne,bwo),e(_d,vwo),e(_d,tne),e(tne,Two),e(_d,Fwo),e(Jr,Cwo),e(Jr,ane),e(ane,Mwo),e(Jr,Ewo),g($3,Jr,null),e(rr,ywo),e(rr,Xe),g(I3,Xe,null),e(Xe,wwo),e(Xe,nne),e(nne,Awo),e(Xe,Lwo),e(Xe,Ja),e(Ja,Bwo),e(Ja,sne),e(sne,xwo),e(Ja,kwo),e(Ja,lne),e(lne,Rwo),e(Ja,Swo),e(Ja,ine),e(ine,Pwo),e(Ja,$wo),e(Xe,Iwo),e(Xe,G),e(G,Q4),e(Q4,dne),e(dne,jwo),e(Q4,Nwo),e(Q4,Pj),e(Pj,Dwo),e(Q4,qwo),e(G,Gwo),e(G,H4),e(H4,cne),e(cne,Owo),e(H4,Xwo),e(H4,$j),e($j,Vwo),e(H4,zwo),e(G,Wwo),e(G,U4),e(U4,fne),e(fne,Qwo),e(U4,Hwo),e(U4,Ij),e(Ij,Uwo),e(U4,Jwo),e(G,Ywo),e(G,J4),e(J4,mne),e(mne,Kwo),e(J4,Zwo),e(J4,jj),e(jj,eAo),e(J4,oAo),e(G,rAo),e(G,Y4),e(Y4,gne),e(gne,tAo),e(Y4,aAo),e(Y4,Nj),e(Nj,nAo),e(Y4,sAo),e(G,lAo),e(G,K4),e(K4,hne),e(hne,iAo),e(K4,dAo),e(K4,Dj),e(Dj,cAo),e(K4,fAo),e(G,mAo),e(G,Z4),e(Z4,pne),e(pne,gAo),e(Z4,hAo),e(Z4,qj),e(qj,pAo),e(Z4,_Ao),e(G,uAo),e(G,eb),e(eb,_ne),e(_ne,bAo),e(eb,vAo),e(eb,Gj),e(Gj,TAo),e(eb,FAo),e(G,CAo),e(G,ob),e(ob,une),e(une,MAo),e(ob,EAo),e(ob,Oj),e(Oj,yAo),e(ob,wAo),e(G,AAo),e(G,rb),e(rb,bne),e(bne,LAo),e(rb,BAo),e(rb,Xj),e(Xj,xAo),e(rb,kAo),e(G,RAo),e(G,tb),e(tb,vne),e(vne,SAo),e(tb,PAo),e(tb,Vj),e(Vj,$Ao),e(tb,IAo),e(G,jAo),e(G,ab),e(ab,Tne),e(Tne,NAo),e(ab,DAo),e(ab,zj),e(zj,qAo),e(ab,GAo),e(G,OAo),e(G,nb),e(nb,Fne),e(Fne,XAo),e(nb,VAo),e(nb,Wj),e(Wj,zAo),e(nb,WAo),e(G,QAo),e(G,sb),e(sb,Cne),e(Cne,HAo),e(sb,UAo),e(sb,Qj),e(Qj,JAo),e(sb,YAo),e(G,KAo),e(G,lb),e(lb,Mne),e(Mne,ZAo),e(lb,eLo),e(lb,Hj),e(Hj,oLo),e(lb,rLo),e(G,tLo),e(G,ib),e(ib,Ene),e(Ene,aLo),e(ib,nLo),e(ib,Uj),e(Uj,sLo),e(ib,lLo),e(G,iLo),e(G,db),e(db,yne),e(yne,dLo),e(db,cLo),e(db,Jj),e(Jj,fLo),e(db,mLo),e(G,gLo),e(G,cb),e(cb,wne),e(wne,hLo),e(cb,pLo),e(cb,Yj),e(Yj,_Lo),e(cb,uLo),e(G,bLo),e(G,fb),e(fb,Ane),e(Ane,vLo),e(fb,TLo),e(fb,Kj),e(Kj,FLo),e(fb,CLo),e(G,MLo),e(G,mb),e(mb,Lne),e(Lne,ELo),e(mb,yLo),e(mb,Zj),e(Zj,wLo),e(mb,ALo),e(G,LLo),e(G,gb),e(gb,Bne),e(Bne,BLo),e(gb,xLo),e(gb,eN),e(eN,kLo),e(gb,RLo),e(G,SLo),e(G,hb),e(hb,xne),e(xne,PLo),e(hb,$Lo),e(hb,oN),e(oN,ILo),e(hb,jLo),e(G,NLo),e(G,pb),e(pb,kne),e(kne,DLo),e(pb,qLo),e(pb,rN),e(rN,GLo),e(pb,OLo),e(G,XLo),e(G,_b),e(_b,Rne),e(Rne,VLo),e(_b,zLo),e(_b,tN),e(tN,WLo),e(_b,QLo),e(G,HLo),e(G,ub),e(ub,Sne),e(Sne,ULo),e(ub,JLo),e(ub,aN),e(aN,YLo),e(ub,KLo),e(G,ZLo),e(G,bb),e(bb,Pne),e(Pne,e7o),e(bb,o7o),e(bb,nN),e(nN,r7o),e(bb,t7o),e(G,a7o),e(G,vb),e(vb,$ne),e($ne,n7o),e(vb,s7o),e(vb,sN),e(sN,l7o),e(vb,i7o),e(G,d7o),e(G,Tb),e(Tb,Ine),e(Ine,c7o),e(Tb,f7o),e(Tb,lN),e(lN,m7o),e(Tb,g7o),e(Xe,h7o),e(Xe,Fb),e(Fb,p7o),e(Fb,jne),e(jne,_7o),e(Fb,u7o),e(Fb,Nne),e(Nne,b7o),e(Xe,v7o),e(Xe,Dne),e(Dne,T7o),e(Xe,F7o),g(j3,Xe,null),b(c,Xke,u),b(c,ud,u),e(ud,Cb),e(Cb,qne),g(N3,qne,null),e(ud,C7o),e(ud,Gne),e(Gne,M7o),b(c,Vke,u),b(c,tr,u),g(D3,tr,null),e(tr,E7o),e(tr,bd),e(bd,y7o),e(bd,One),e(One,w7o),e(bd,A7o),e(bd,Xne),e(Xne,L7o),e(bd,B7o),e(tr,x7o),e(tr,q3),e(q3,k7o),e(q3,Vne),e(Vne,R7o),e(q3,S7o),e(tr,P7o),e(tr,Yr),g(G3,Yr,null),e(Yr,$7o),e(Yr,zne),e(zne,I7o),e(Yr,j7o),e(Yr,vd),e(vd,N7o),e(vd,Wne),e(Wne,D7o),e(vd,q7o),e(vd,Qne),e(Qne,G7o),e(vd,O7o),e(Yr,X7o),e(Yr,Hne),e(Hne,V7o),e(Yr,z7o),g(O3,Yr,null),e(tr,W7o),e(tr,Ve),g(X3,Ve,null),e(Ve,Q7o),e(Ve,Une),e(Une,H7o),e(Ve,U7o),e(Ve,Ya),e(Ya,J7o),e(Ya,Jne),e(Jne,Y7o),e(Ya,K7o),e(Ya,Yne),e(Yne,Z7o),e(Ya,e8o),e(Ya,Kne),e(Kne,o8o),e(Ya,r8o),e(Ve,t8o),e(Ve,da),e(da,Mb),e(Mb,Zne),e(Zne,a8o),e(Mb,n8o),e(Mb,iN),e(iN,s8o),e(Mb,l8o),e(da,i8o),e(da,Eb),e(Eb,ese),e(ese,d8o),e(Eb,c8o),e(Eb,dN),e(dN,f8o),e(Eb,m8o),e(da,g8o),e(da,yb),e(yb,ose),e(ose,h8o),e(yb,p8o),e(yb,cN),e(cN,_8o),e(yb,u8o),e(da,b8o),e(da,wb),e(wb,rse),e(rse,v8o),e(wb,T8o),e(wb,fN),e(fN,F8o),e(wb,C8o),e(da,M8o),e(da,Ab),e(Ab,tse),e(tse,E8o),e(Ab,y8o),e(Ab,mN),e(mN,w8o),e(Ab,A8o),e(Ve,L8o),e(Ve,Lb),e(Lb,B8o),e(Lb,ase),e(ase,x8o),e(Lb,k8o),e(Lb,nse),e(nse,R8o),e(Ve,S8o),e(Ve,sse),e(sse,P8o),e(Ve,$8o),g(V3,Ve,null),b(c,zke,u),b(c,Td,u),e(Td,Bb),e(Bb,lse),g(z3,lse,null),e(Td,I8o),e(Td,ise),e(ise,j8o),b(c,Wke,u),b(c,ar,u),g(W3,ar,null),e(ar,N8o),e(ar,Fd),e(Fd,D8o),e(Fd,dse),e(dse,q8o),e(Fd,G8o),e(Fd,cse),e(cse,O8o),e(Fd,X8o),e(ar,V8o),e(ar,Q3),e(Q3,z8o),e(Q3,fse),e(fse,W8o),e(Q3,Q8o),e(ar,H8o),e(ar,Kr),g(H3,Kr,null),e(Kr,U8o),e(Kr,mse),e(mse,J8o),e(Kr,Y8o),e(Kr,Cd),e(Cd,K8o),e(Cd,gse),e(gse,Z8o),e(Cd,e9o),e(Cd,hse),e(hse,o9o),e(Cd,r9o),e(Kr,t9o),e(Kr,pse),e(pse,a9o),e(Kr,n9o),g(U3,Kr,null),e(ar,s9o),e(ar,ze),g(J3,ze,null),e(ze,l9o),e(ze,_se),e(_se,i9o),e(ze,d9o),e(ze,Ka),e(Ka,c9o),e(Ka,use),e(use,f9o),e(Ka,m9o),e(Ka,bse),e(bse,g9o),e(Ka,h9o),e(Ka,vse),e(vse,p9o),e(Ka,_9o),e(ze,u9o),e(ze,D),e(D,xb),e(xb,Tse),e(Tse,b9o),e(xb,v9o),e(xb,gN),e(gN,T9o),e(xb,F9o),e(D,C9o),e(D,kb),e(kb,Fse),e(Fse,M9o),e(kb,E9o),e(kb,hN),e(hN,y9o),e(kb,w9o),e(D,A9o),e(D,Rb),e(Rb,Cse),e(Cse,L9o),e(Rb,B9o),e(Rb,pN),e(pN,x9o),e(Rb,k9o),e(D,R9o),e(D,Sb),e(Sb,Mse),e(Mse,S9o),e(Sb,P9o),e(Sb,_N),e(_N,$9o),e(Sb,I9o),e(D,j9o),e(D,Pb),e(Pb,Ese),e(Ese,N9o),e(Pb,D9o),e(Pb,uN),e(uN,q9o),e(Pb,G9o),e(D,O9o),e(D,$b),e($b,yse),e(yse,X9o),e($b,V9o),e($b,bN),e(bN,z9o),e($b,W9o),e(D,Q9o),e(D,Ib),e(Ib,wse),e(wse,H9o),e(Ib,U9o),e(Ib,vN),e(vN,J9o),e(Ib,Y9o),e(D,K9o),e(D,jb),e(jb,Ase),e(Ase,Z9o),e(jb,eBo),e(jb,TN),e(TN,oBo),e(jb,rBo),e(D,tBo),e(D,Nb),e(Nb,Lse),e(Lse,aBo),e(Nb,nBo),e(Nb,FN),e(FN,sBo),e(Nb,lBo),e(D,iBo),e(D,Db),e(Db,Bse),e(Bse,dBo),e(Db,cBo),e(Db,CN),e(CN,fBo),e(Db,mBo),e(D,gBo),e(D,qb),e(qb,xse),e(xse,hBo),e(qb,pBo),e(qb,MN),e(MN,_Bo),e(qb,uBo),e(D,bBo),e(D,Gb),e(Gb,kse),e(kse,vBo),e(Gb,TBo),e(Gb,EN),e(EN,FBo),e(Gb,CBo),e(D,MBo),e(D,Ob),e(Ob,Rse),e(Rse,EBo),e(Ob,yBo),e(Ob,yN),e(yN,wBo),e(Ob,ABo),e(D,LBo),e(D,Xb),e(Xb,Sse),e(Sse,BBo),e(Xb,xBo),e(Xb,wN),e(wN,kBo),e(Xb,RBo),e(D,SBo),e(D,Vb),e(Vb,Pse),e(Pse,PBo),e(Vb,$Bo),e(Vb,AN),e(AN,IBo),e(Vb,jBo),e(D,NBo),e(D,zb),e(zb,$se),e($se,DBo),e(zb,qBo),e(zb,LN),e(LN,GBo),e(zb,OBo),e(D,XBo),e(D,Wb),e(Wb,Ise),e(Ise,VBo),e(Wb,zBo),e(Wb,BN),e(BN,WBo),e(Wb,QBo),e(D,HBo),e(D,Qb),e(Qb,jse),e(jse,UBo),e(Qb,JBo),e(Qb,xN),e(xN,YBo),e(Qb,KBo),e(D,ZBo),e(D,Hb),e(Hb,Nse),e(Nse,exo),e(Hb,oxo),e(Hb,kN),e(kN,rxo),e(Hb,txo),e(D,axo),e(D,Ub),e(Ub,Dse),e(Dse,nxo),e(Ub,sxo),e(Ub,RN),e(RN,lxo),e(Ub,ixo),e(D,dxo),e(D,Jb),e(Jb,qse),e(qse,cxo),e(Jb,fxo),e(Jb,SN),e(SN,mxo),e(Jb,gxo),e(D,hxo),e(D,Yb),e(Yb,Gse),e(Gse,pxo),e(Yb,_xo),e(Yb,PN),e(PN,uxo),e(Yb,bxo),e(D,vxo),e(D,Kb),e(Kb,Ose),e(Ose,Txo),e(Kb,Fxo),e(Kb,$N),e($N,Cxo),e(Kb,Mxo),e(D,Exo),e(D,Zb),e(Zb,Xse),e(Xse,yxo),e(Zb,wxo),e(Zb,IN),e(IN,Axo),e(Zb,Lxo),e(D,Bxo),e(D,e5),e(e5,Vse),e(Vse,xxo),e(e5,kxo),e(e5,jN),e(jN,Rxo),e(e5,Sxo),e(D,Pxo),e(D,o5),e(o5,zse),e(zse,$xo),e(o5,Ixo),e(o5,NN),e(NN,jxo),e(o5,Nxo),e(D,Dxo),e(D,r5),e(r5,Wse),e(Wse,qxo),e(r5,Gxo),e(r5,DN),e(DN,Oxo),e(r5,Xxo),e(D,Vxo),e(D,t5),e(t5,Qse),e(Qse,zxo),e(t5,Wxo),e(t5,qN),e(qN,Qxo),e(t5,Hxo),e(D,Uxo),e(D,a5),e(a5,Hse),e(Hse,Jxo),e(a5,Yxo),e(a5,GN),e(GN,Kxo),e(a5,Zxo),e(D,eko),e(D,n5),e(n5,Use),e(Use,oko),e(n5,rko),e(n5,ON),e(ON,tko),e(n5,ako),e(D,nko),e(D,s5),e(s5,Jse),e(Jse,sko),e(s5,lko),e(s5,XN),e(XN,iko),e(s5,dko),e(D,cko),e(D,l5),e(l5,Yse),e(Yse,fko),e(l5,mko),e(l5,VN),e(VN,gko),e(l5,hko),e(D,pko),e(D,i5),e(i5,Kse),e(Kse,_ko),e(i5,uko),e(i5,zN),e(zN,bko),e(i5,vko),e(ze,Tko),e(ze,d5),e(d5,Fko),e(d5,Zse),e(Zse,Cko),e(d5,Mko),e(d5,ele),e(ele,Eko),e(ze,yko),e(ze,ole),e(ole,wko),e(ze,Ako),g(Y3,ze,null),b(c,Qke,u),b(c,Md,u),e(Md,c5),e(c5,rle),g(K3,rle,null),e(Md,Lko),e(Md,tle),e(tle,Bko),b(c,Hke,u),b(c,nr,u),g(Z3,nr,null),e(nr,xko),e(nr,Ed),e(Ed,kko),e(Ed,ale),e(ale,Rko),e(Ed,Sko),e(Ed,nle),e(nle,Pko),e(Ed,$ko),e(nr,Iko),e(nr,ey),e(ey,jko),e(ey,sle),e(sle,Nko),e(ey,Dko),e(nr,qko),e(nr,Zr),g(oy,Zr,null),e(Zr,Gko),e(Zr,lle),e(lle,Oko),e(Zr,Xko),e(Zr,yd),e(yd,Vko),e(yd,ile),e(ile,zko),e(yd,Wko),e(yd,dle),e(dle,Qko),e(yd,Hko),e(Zr,Uko),e(Zr,cle),e(cle,Jko),e(Zr,Yko),g(ry,Zr,null),e(nr,Kko),e(nr,We),g(ty,We,null),e(We,Zko),e(We,fle),e(fle,eRo),e(We,oRo),e(We,Za),e(Za,rRo),e(Za,mle),e(mle,tRo),e(Za,aRo),e(Za,gle),e(gle,nRo),e(Za,sRo),e(Za,hle),e(hle,lRo),e(Za,iRo),e(We,dRo),e(We,R),e(R,f5),e(f5,ple),e(ple,cRo),e(f5,fRo),e(f5,WN),e(WN,mRo),e(f5,gRo),e(R,hRo),e(R,m5),e(m5,_le),e(_le,pRo),e(m5,_Ro),e(m5,QN),e(QN,uRo),e(m5,bRo),e(R,vRo),e(R,g5),e(g5,ule),e(ule,TRo),e(g5,FRo),e(g5,HN),e(HN,CRo),e(g5,MRo),e(R,ERo),e(R,h5),e(h5,ble),e(ble,yRo),e(h5,wRo),e(h5,UN),e(UN,ARo),e(h5,LRo),e(R,BRo),e(R,p5),e(p5,vle),e(vle,xRo),e(p5,kRo),e(p5,JN),e(JN,RRo),e(p5,SRo),e(R,PRo),e(R,_5),e(_5,Tle),e(Tle,$Ro),e(_5,IRo),e(_5,YN),e(YN,jRo),e(_5,NRo),e(R,DRo),e(R,u5),e(u5,Fle),e(Fle,qRo),e(u5,GRo),e(u5,KN),e(KN,ORo),e(u5,XRo),e(R,VRo),e(R,b5),e(b5,Cle),e(Cle,zRo),e(b5,WRo),e(b5,ZN),e(ZN,QRo),e(b5,HRo),e(R,URo),e(R,v5),e(v5,Mle),e(Mle,JRo),e(v5,YRo),e(v5,eD),e(eD,KRo),e(v5,ZRo),e(R,eSo),e(R,T5),e(T5,Ele),e(Ele,oSo),e(T5,rSo),e(T5,oD),e(oD,tSo),e(T5,aSo),e(R,nSo),e(R,F5),e(F5,yle),e(yle,sSo),e(F5,lSo),e(F5,rD),e(rD,iSo),e(F5,dSo),e(R,cSo),e(R,C5),e(C5,wle),e(wle,fSo),e(C5,mSo),e(C5,tD),e(tD,gSo),e(C5,hSo),e(R,pSo),e(R,M5),e(M5,Ale),e(Ale,_So),e(M5,uSo),e(M5,aD),e(aD,bSo),e(M5,vSo),e(R,TSo),e(R,E5),e(E5,Lle),e(Lle,FSo),e(E5,CSo),e(E5,nD),e(nD,MSo),e(E5,ESo),e(R,ySo),e(R,y5),e(y5,Ble),e(Ble,wSo),e(y5,ASo),e(y5,sD),e(sD,LSo),e(y5,BSo),e(R,xSo),e(R,w5),e(w5,xle),e(xle,kSo),e(w5,RSo),e(w5,lD),e(lD,SSo),e(w5,PSo),e(R,$So),e(R,A5),e(A5,kle),e(kle,ISo),e(A5,jSo),e(A5,iD),e(iD,NSo),e(A5,DSo),e(R,qSo),e(R,L5),e(L5,Rle),e(Rle,GSo),e(L5,OSo),e(L5,dD),e(dD,XSo),e(L5,VSo),e(R,zSo),e(R,B5),e(B5,Sle),e(Sle,WSo),e(B5,QSo),e(B5,cD),e(cD,HSo),e(B5,USo),e(R,JSo),e(R,x5),e(x5,Ple),e(Ple,YSo),e(x5,KSo),e(x5,fD),e(fD,ZSo),e(x5,ePo),e(R,oPo),e(R,k5),e(k5,$le),e($le,rPo),e(k5,tPo),e(k5,mD),e(mD,aPo),e(k5,nPo),e(R,sPo),e(R,R5),e(R5,Ile),e(Ile,lPo),e(R5,iPo),e(R5,gD),e(gD,dPo),e(R5,cPo),e(R,fPo),e(R,S5),e(S5,jle),e(jle,mPo),e(S5,gPo),e(S5,hD),e(hD,hPo),e(S5,pPo),e(R,_Po),e(R,P5),e(P5,Nle),e(Nle,uPo),e(P5,bPo),e(P5,pD),e(pD,vPo),e(P5,TPo),e(R,FPo),e(R,$5),e($5,Dle),e(Dle,CPo),e($5,MPo),e($5,_D),e(_D,EPo),e($5,yPo),e(R,wPo),e(R,I5),e(I5,qle),e(qle,APo),e(I5,LPo),e(I5,uD),e(uD,BPo),e(I5,xPo),e(R,kPo),e(R,j5),e(j5,Gle),e(Gle,RPo),e(j5,SPo),e(j5,bD),e(bD,PPo),e(j5,$Po),e(R,IPo),e(R,N5),e(N5,Ole),e(Ole,jPo),e(N5,NPo),e(N5,vD),e(vD,DPo),e(N5,qPo),e(R,GPo),e(R,D5),e(D5,Xle),e(Xle,OPo),e(D5,XPo),e(D5,TD),e(TD,VPo),e(D5,zPo),e(R,WPo),e(R,q5),e(q5,Vle),e(Vle,QPo),e(q5,HPo),e(q5,FD),e(FD,UPo),e(q5,JPo),e(R,YPo),e(R,G5),e(G5,zle),e(zle,KPo),e(G5,ZPo),e(G5,CD),e(CD,e$o),e(G5,o$o),e(R,r$o),e(R,O5),e(O5,Wle),e(Wle,t$o),e(O5,a$o),e(O5,MD),e(MD,n$o),e(O5,s$o),e(R,l$o),e(R,X5),e(X5,Qle),e(Qle,i$o),e(X5,d$o),e(X5,ED),e(ED,c$o),e(X5,f$o),e(R,m$o),e(R,V5),e(V5,Hle),e(Hle,g$o),e(V5,h$o),e(V5,yD),e(yD,p$o),e(V5,_$o),e(R,u$o),e(R,z5),e(z5,Ule),e(Ule,b$o),e(z5,v$o),e(z5,wD),e(wD,T$o),e(z5,F$o),e(R,C$o),e(R,W5),e(W5,Jle),e(Jle,M$o),e(W5,E$o),e(W5,AD),e(AD,y$o),e(W5,w$o),e(R,A$o),e(R,Q5),e(Q5,Yle),e(Yle,L$o),e(Q5,B$o),e(Q5,LD),e(LD,x$o),e(Q5,k$o),e(R,R$o),e(R,H5),e(H5,Kle),e(Kle,S$o),e(H5,P$o),e(H5,BD),e(BD,$$o),e(H5,I$o),e(R,j$o),e(R,U5),e(U5,Zle),e(Zle,N$o),e(U5,D$o),e(U5,xD),e(xD,q$o),e(U5,G$o),e(We,O$o),e(We,J5),e(J5,X$o),e(J5,eie),e(eie,V$o),e(J5,z$o),e(J5,oie),e(oie,W$o),e(We,Q$o),e(We,rie),e(rie,H$o),e(We,U$o),g(ay,We,null),b(c,Uke,u),b(c,wd,u),e(wd,Y5),e(Y5,tie),g(ny,tie,null),e(wd,J$o),e(wd,aie),e(aie,Y$o),b(c,Jke,u),b(c,sr,u),g(sy,sr,null),e(sr,K$o),e(sr,Ad),e(Ad,Z$o),e(Ad,nie),e(nie,eIo),e(Ad,oIo),e(Ad,sie),e(sie,rIo),e(Ad,tIo),e(sr,aIo),e(sr,ly),e(ly,nIo),e(ly,lie),e(lie,sIo),e(ly,lIo),e(sr,iIo),e(sr,et),g(iy,et,null),e(et,dIo),e(et,iie),e(iie,cIo),e(et,fIo),e(et,Ld),e(Ld,mIo),e(Ld,die),e(die,gIo),e(Ld,hIo),e(Ld,cie),e(cie,pIo),e(Ld,_Io),e(et,uIo),e(et,fie),e(fie,bIo),e(et,vIo),g(dy,et,null),e(sr,TIo),e(sr,Qe),g(cy,Qe,null),e(Qe,FIo),e(Qe,mie),e(mie,CIo),e(Qe,MIo),e(Qe,en),e(en,EIo),e(en,gie),e(gie,yIo),e(en,wIo),e(en,hie),e(hie,AIo),e(en,LIo),e(en,pie),e(pie,BIo),e(en,xIo),e(Qe,kIo),e(Qe,_ie),e(_ie,K5),e(K5,uie),e(uie,RIo),e(K5,SIo),e(K5,kD),e(kD,PIo),e(K5,$Io),e(Qe,IIo),e(Qe,Z5),e(Z5,jIo),e(Z5,bie),e(bie,NIo),e(Z5,DIo),e(Z5,vie),e(vie,qIo),e(Qe,GIo),e(Qe,Tie),e(Tie,OIo),e(Qe,XIo),g(fy,Qe,null),b(c,Yke,u),b(c,Bd,u),e(Bd,e2),e(e2,Fie),g(my,Fie,null),e(Bd,VIo),e(Bd,Cie),e(Cie,zIo),b(c,Kke,u),b(c,lr,u),g(gy,lr,null),e(lr,WIo),e(lr,xd),e(xd,QIo),e(xd,Mie),e(Mie,HIo),e(xd,UIo),e(xd,Eie),e(Eie,JIo),e(xd,YIo),e(lr,KIo),e(lr,hy),e(hy,ZIo),e(hy,yie),e(yie,ejo),e(hy,ojo),e(lr,rjo),e(lr,ot),g(py,ot,null),e(ot,tjo),e(ot,wie),e(wie,ajo),e(ot,njo),e(ot,kd),e(kd,sjo),e(kd,Aie),e(Aie,ljo),e(kd,ijo),e(kd,Lie),e(Lie,djo),e(kd,cjo),e(ot,fjo),e(ot,Bie),e(Bie,mjo),e(ot,gjo),g(_y,ot,null),e(lr,hjo),e(lr,He),g(uy,He,null),e(He,pjo),e(He,xie),e(xie,_jo),e(He,ujo),e(He,on),e(on,bjo),e(on,kie),e(kie,vjo),e(on,Tjo),e(on,Rie),e(Rie,Fjo),e(on,Cjo),e(on,Sie),e(Sie,Mjo),e(on,Ejo),e(He,yjo),e(He,ge),e(ge,o2),e(o2,Pie),e(Pie,wjo),e(o2,Ajo),e(o2,RD),e(RD,Ljo),e(o2,Bjo),e(ge,xjo),e(ge,r2),e(r2,$ie),e($ie,kjo),e(r2,Rjo),e(r2,SD),e(SD,Sjo),e(r2,Pjo),e(ge,$jo),e(ge,qs),e(qs,Iie),e(Iie,Ijo),e(qs,jjo),e(qs,PD),e(PD,Njo),e(qs,Djo),e(qs,$D),e($D,qjo),e(qs,Gjo),e(ge,Ojo),e(ge,t2),e(t2,jie),e(jie,Xjo),e(t2,Vjo),e(t2,ID),e(ID,zjo),e(t2,Wjo),e(ge,Qjo),e(ge,ma),e(ma,Nie),e(Nie,Hjo),e(ma,Ujo),e(ma,jD),e(jD,Jjo),e(ma,Yjo),e(ma,ND),e(ND,Kjo),e(ma,Zjo),e(ma,DD),e(DD,eNo),e(ma,oNo),e(ge,rNo),e(ge,a2),e(a2,Die),e(Die,tNo),e(a2,aNo),e(a2,qD),e(qD,nNo),e(a2,sNo),e(ge,lNo),e(ge,n2),e(n2,qie),e(qie,iNo),e(n2,dNo),e(n2,GD),e(GD,cNo),e(n2,fNo),e(ge,mNo),e(ge,s2),e(s2,Gie),e(Gie,gNo),e(s2,hNo),e(s2,OD),e(OD,pNo),e(s2,_No),e(ge,uNo),e(ge,l2),e(l2,Oie),e(Oie,bNo),e(l2,vNo),e(l2,XD),e(XD,TNo),e(l2,FNo),e(ge,CNo),e(ge,i2),e(i2,Xie),e(Xie,MNo),e(i2,ENo),e(i2,VD),e(VD,yNo),e(i2,wNo),e(ge,ANo),e(ge,d2),e(d2,Vie),e(Vie,LNo),e(d2,BNo),e(d2,zD),e(zD,xNo),e(d2,kNo),e(He,RNo),e(He,c2),e(c2,SNo),e(c2,zie),e(zie,PNo),e(c2,$No),e(c2,Wie),e(Wie,INo),e(He,jNo),e(He,Qie),e(Qie,NNo),e(He,DNo),g(by,He,null),b(c,Zke,u),b(c,Rd,u),e(Rd,f2),e(f2,Hie),g(vy,Hie,null),e(Rd,qNo),e(Rd,Uie),e(Uie,GNo),b(c,eRe,u),b(c,ir,u),g(Ty,ir,null),e(ir,ONo),e(ir,Sd),e(Sd,XNo),e(Sd,Jie),e(Jie,VNo),e(Sd,zNo),e(Sd,Yie),e(Yie,WNo),e(Sd,QNo),e(ir,HNo),e(ir,Fy),e(Fy,UNo),e(Fy,Kie),e(Kie,JNo),e(Fy,YNo),e(ir,KNo),e(ir,rt),g(Cy,rt,null),e(rt,ZNo),e(rt,Zie),e(Zie,eDo),e(rt,oDo),e(rt,Pd),e(Pd,rDo),e(Pd,ede),e(ede,tDo),e(Pd,aDo),e(Pd,ode),e(ode,nDo),e(Pd,sDo),e(rt,lDo),e(rt,rde),e(rde,iDo),e(rt,dDo),g(My,rt,null),e(ir,cDo),e(ir,Ue),g(Ey,Ue,null),e(Ue,fDo),e(Ue,tde),e(tde,mDo),e(Ue,gDo),e(Ue,rn),e(rn,hDo),e(rn,ade),e(ade,pDo),e(rn,_Do),e(rn,nde),e(nde,uDo),e(rn,bDo),e(rn,sde),e(sde,vDo),e(rn,TDo),e(Ue,FDo),e(Ue,lde),e(lde,m2),e(m2,ide),e(ide,CDo),e(m2,MDo),e(m2,WD),e(WD,EDo),e(m2,yDo),e(Ue,wDo),e(Ue,g2),e(g2,ADo),e(g2,dde),e(dde,LDo),e(g2,BDo),e(g2,cde),e(cde,xDo),e(Ue,kDo),e(Ue,fde),e(fde,RDo),e(Ue,SDo),g(yy,Ue,null),b(c,oRe,u),b(c,$d,u),e($d,h2),e(h2,mde),g(wy,mde,null),e($d,PDo),e($d,gde),e(gde,$Do),b(c,rRe,u),b(c,dr,u),g(Ay,dr,null),e(dr,IDo),e(dr,Id),e(Id,jDo),e(Id,hde),e(hde,NDo),e(Id,DDo),e(Id,pde),e(pde,qDo),e(Id,GDo),e(dr,ODo),e(dr,Ly),e(Ly,XDo),e(Ly,_de),e(_de,VDo),e(Ly,zDo),e(dr,WDo),e(dr,tt),g(By,tt,null),e(tt,QDo),e(tt,ude),e(ude,HDo),e(tt,UDo),e(tt,jd),e(jd,JDo),e(jd,bde),e(bde,YDo),e(jd,KDo),e(jd,vde),e(vde,ZDo),e(jd,eqo),e(tt,oqo),e(tt,Tde),e(Tde,rqo),e(tt,tqo),g(xy,tt,null),e(dr,aqo),e(dr,Je),g(ky,Je,null),e(Je,nqo),e(Je,Fde),e(Fde,sqo),e(Je,lqo),e(Je,tn),e(tn,iqo),e(tn,Cde),e(Cde,dqo),e(tn,cqo),e(tn,Mde),e(Mde,fqo),e(tn,mqo),e(tn,Ede),e(Ede,gqo),e(tn,hqo),e(Je,pqo),e(Je,ke),e(ke,p2),e(p2,yde),e(yde,_qo),e(p2,uqo),e(p2,QD),e(QD,bqo),e(p2,vqo),e(ke,Tqo),e(ke,_2),e(_2,wde),e(wde,Fqo),e(_2,Cqo),e(_2,HD),e(HD,Mqo),e(_2,Eqo),e(ke,yqo),e(ke,u2),e(u2,Ade),e(Ade,wqo),e(u2,Aqo),e(u2,UD),e(UD,Lqo),e(u2,Bqo),e(ke,xqo),e(ke,b2),e(b2,Lde),e(Lde,kqo),e(b2,Rqo),e(b2,JD),e(JD,Sqo),e(b2,Pqo),e(ke,$qo),e(ke,v2),e(v2,Bde),e(Bde,Iqo),e(v2,jqo),e(v2,YD),e(YD,Nqo),e(v2,Dqo),e(ke,qqo),e(ke,T2),e(T2,xde),e(xde,Gqo),e(T2,Oqo),e(T2,KD),e(KD,Xqo),e(T2,Vqo),e(ke,zqo),e(ke,F2),e(F2,kde),e(kde,Wqo),e(F2,Qqo),e(F2,ZD),e(ZD,Hqo),e(F2,Uqo),e(ke,Jqo),e(ke,C2),e(C2,Rde),e(Rde,Yqo),e(C2,Kqo),e(C2,eq),e(eq,Zqo),e(C2,eGo),e(Je,oGo),e(Je,M2),e(M2,rGo),e(M2,Sde),e(Sde,tGo),e(M2,aGo),e(M2,Pde),e(Pde,nGo),e(Je,sGo),e(Je,$de),e($de,lGo),e(Je,iGo),g(Ry,Je,null),b(c,tRe,u),b(c,Nd,u),e(Nd,E2),e(E2,Ide),g(Sy,Ide,null),e(Nd,dGo),e(Nd,jde),e(jde,cGo),b(c,aRe,u),b(c,cr,u),g(Py,cr,null),e(cr,fGo),e(cr,Dd),e(Dd,mGo),e(Dd,Nde),e(Nde,gGo),e(Dd,hGo),e(Dd,Dde),e(Dde,pGo),e(Dd,_Go),e(cr,uGo),e(cr,$y),e($y,bGo),e($y,qde),e(qde,vGo),e($y,TGo),e(cr,FGo),e(cr,at),g(Iy,at,null),e(at,CGo),e(at,Gde),e(Gde,MGo),e(at,EGo),e(at,qd),e(qd,yGo),e(qd,Ode),e(Ode,wGo),e(qd,AGo),e(qd,Xde),e(Xde,LGo),e(qd,BGo),e(at,xGo),e(at,Vde),e(Vde,kGo),e(at,RGo),g(jy,at,null),e(cr,SGo),e(cr,Ye),g(Ny,Ye,null),e(Ye,PGo),e(Ye,zde),e(zde,$Go),e(Ye,IGo),e(Ye,an),e(an,jGo),e(an,Wde),e(Wde,NGo),e(an,DGo),e(an,Qde),e(Qde,qGo),e(an,GGo),e(an,Hde),e(Hde,OGo),e(an,XGo),e(Ye,VGo),e(Ye,nn),e(nn,y2),e(y2,Ude),e(Ude,zGo),e(y2,WGo),e(y2,oq),e(oq,QGo),e(y2,HGo),e(nn,UGo),e(nn,w2),e(w2,Jde),e(Jde,JGo),e(w2,YGo),e(w2,rq),e(rq,KGo),e(w2,ZGo),e(nn,eOo),e(nn,A2),e(A2,Yde),e(Yde,oOo),e(A2,rOo),e(A2,tq),e(tq,tOo),e(A2,aOo),e(nn,nOo),e(nn,L2),e(L2,Kde),e(Kde,sOo),e(L2,lOo),e(L2,aq),e(aq,iOo),e(L2,dOo),e(Ye,cOo),e(Ye,B2),e(B2,fOo),e(B2,Zde),e(Zde,mOo),e(B2,gOo),e(B2,ece),e(ece,hOo),e(Ye,pOo),e(Ye,oce),e(oce,_Oo),e(Ye,uOo),g(Dy,Ye,null),b(c,nRe,u),b(c,Gd,u),e(Gd,x2),e(x2,rce),g(qy,rce,null),e(Gd,bOo),e(Gd,tce),e(tce,vOo),b(c,sRe,u),b(c,fr,u),g(Gy,fr,null),e(fr,TOo),e(fr,Od),e(Od,FOo),e(Od,ace),e(ace,COo),e(Od,MOo),e(Od,nce),e(nce,EOo),e(Od,yOo),e(fr,wOo),e(fr,Oy),e(Oy,AOo),e(Oy,sce),e(sce,LOo),e(Oy,BOo),e(fr,xOo),e(fr,nt),g(Xy,nt,null),e(nt,kOo),e(nt,lce),e(lce,ROo),e(nt,SOo),e(nt,Xd),e(Xd,POo),e(Xd,ice),e(ice,$Oo),e(Xd,IOo),e(Xd,dce),e(dce,jOo),e(Xd,NOo),e(nt,DOo),e(nt,cce),e(cce,qOo),e(nt,GOo),g(Vy,nt,null),e(fr,OOo),e(fr,Ke),g(zy,Ke,null),e(Ke,XOo),e(Ke,fce),e(fce,VOo),e(Ke,zOo),e(Ke,sn),e(sn,WOo),e(sn,mce),e(mce,QOo),e(sn,HOo),e(sn,gce),e(gce,UOo),e(sn,JOo),e(sn,hce),e(hce,YOo),e(sn,KOo),e(Ke,ZOo),e(Ke,Re),e(Re,k2),e(k2,pce),e(pce,eXo),e(k2,oXo),e(k2,nq),e(nq,rXo),e(k2,tXo),e(Re,aXo),e(Re,R2),e(R2,_ce),e(_ce,nXo),e(R2,sXo),e(R2,sq),e(sq,lXo),e(R2,iXo),e(Re,dXo),e(Re,S2),e(S2,uce),e(uce,cXo),e(S2,fXo),e(S2,lq),e(lq,mXo),e(S2,gXo),e(Re,hXo),e(Re,P2),e(P2,bce),e(bce,pXo),e(P2,_Xo),e(P2,iq),e(iq,uXo),e(P2,bXo),e(Re,vXo),e(Re,$2),e($2,vce),e(vce,TXo),e($2,FXo),e($2,dq),e(dq,CXo),e($2,MXo),e(Re,EXo),e(Re,I2),e(I2,Tce),e(Tce,yXo),e(I2,wXo),e(I2,cq),e(cq,AXo),e(I2,LXo),e(Re,BXo),e(Re,j2),e(j2,Fce),e(Fce,xXo),e(j2,kXo),e(j2,fq),e(fq,RXo),e(j2,SXo),e(Re,PXo),e(Re,N2),e(N2,Cce),e(Cce,$Xo),e(N2,IXo),e(N2,mq),e(mq,jXo),e(N2,NXo),e(Ke,DXo),e(Ke,D2),e(D2,qXo),e(D2,Mce),e(Mce,GXo),e(D2,OXo),e(D2,Ece),e(Ece,XXo),e(Ke,VXo),e(Ke,yce),e(yce,zXo),e(Ke,WXo),g(Wy,Ke,null),b(c,lRe,u),b(c,Vd,u),e(Vd,q2),e(q2,wce),g(Qy,wce,null),e(Vd,QXo),e(Vd,Ace),e(Ace,HXo),b(c,iRe,u),b(c,mr,u),g(Hy,mr,null),e(mr,UXo),e(mr,zd),e(zd,JXo),e(zd,Lce),e(Lce,YXo),e(zd,KXo),e(zd,Bce),e(Bce,ZXo),e(zd,eVo),e(mr,oVo),e(mr,Uy),e(Uy,rVo),e(Uy,xce),e(xce,tVo),e(Uy,aVo),e(mr,nVo),e(mr,st),g(Jy,st,null),e(st,sVo),e(st,kce),e(kce,lVo),e(st,iVo),e(st,Wd),e(Wd,dVo),e(Wd,Rce),e(Rce,cVo),e(Wd,fVo),e(Wd,Sce),e(Sce,mVo),e(Wd,gVo),e(st,hVo),e(st,Pce),e(Pce,pVo),e(st,_Vo),g(Yy,st,null),e(mr,uVo),e(mr,Ze),g(Ky,Ze,null),e(Ze,bVo),e(Ze,$ce),e($ce,vVo),e(Ze,TVo),e(Ze,ln),e(ln,FVo),e(ln,Ice),e(Ice,CVo),e(ln,MVo),e(ln,jce),e(jce,EVo),e(ln,yVo),e(ln,Nce),e(Nce,wVo),e(ln,AVo),e(Ze,LVo),e(Ze,Zy),e(Zy,G2),e(G2,Dce),e(Dce,BVo),e(G2,xVo),e(G2,gq),e(gq,kVo),e(G2,RVo),e(Zy,SVo),e(Zy,O2),e(O2,qce),e(qce,PVo),e(O2,$Vo),e(O2,hq),e(hq,IVo),e(O2,jVo),e(Ze,NVo),e(Ze,X2),e(X2,DVo),e(X2,Gce),e(Gce,qVo),e(X2,GVo),e(X2,Oce),e(Oce,OVo),e(Ze,XVo),e(Ze,Xce),e(Xce,VVo),e(Ze,zVo),g(ew,Ze,null),b(c,dRe,u),b(c,Qd,u),e(Qd,V2),e(V2,Vce),g(ow,Vce,null),e(Qd,WVo),e(Qd,zce),e(zce,QVo),b(c,cRe,u),b(c,gr,u),g(rw,gr,null),e(gr,HVo),e(gr,Hd),e(Hd,UVo),e(Hd,Wce),e(Wce,JVo),e(Hd,YVo),e(Hd,Qce),e(Qce,KVo),e(Hd,ZVo),e(gr,ezo),e(gr,tw),e(tw,ozo),e(tw,Hce),e(Hce,rzo),e(tw,tzo),e(gr,azo),e(gr,lt),g(aw,lt,null),e(lt,nzo),e(lt,Uce),e(Uce,szo),e(lt,lzo),e(lt,Ud),e(Ud,izo),e(Ud,Jce),e(Jce,dzo),e(Ud,czo),e(Ud,Yce),e(Yce,fzo),e(Ud,mzo),e(lt,gzo),e(lt,Kce),e(Kce,hzo),e(lt,pzo),g(nw,lt,null),e(gr,_zo),e(gr,eo),g(sw,eo,null),e(eo,uzo),e(eo,Zce),e(Zce,bzo),e(eo,vzo),e(eo,dn),e(dn,Tzo),e(dn,efe),e(efe,Fzo),e(dn,Czo),e(dn,ofe),e(ofe,Mzo),e(dn,Ezo),e(dn,rfe),e(rfe,yzo),e(dn,wzo),e(eo,Azo),e(eo,cn),e(cn,z2),e(z2,tfe),e(tfe,Lzo),e(z2,Bzo),e(z2,pq),e(pq,xzo),e(z2,kzo),e(cn,Rzo),e(cn,W2),e(W2,afe),e(afe,Szo),e(W2,Pzo),e(W2,_q),e(_q,$zo),e(W2,Izo),e(cn,jzo),e(cn,Q2),e(Q2,nfe),e(nfe,Nzo),e(Q2,Dzo),e(Q2,uq),e(uq,qzo),e(Q2,Gzo),e(cn,Ozo),e(cn,H2),e(H2,sfe),e(sfe,Xzo),e(H2,Vzo),e(H2,bq),e(bq,zzo),e(H2,Wzo),e(eo,Qzo),e(eo,U2),e(U2,Hzo),e(U2,lfe),e(lfe,Uzo),e(U2,Jzo),e(U2,ife),e(ife,Yzo),e(eo,Kzo),e(eo,dfe),e(dfe,Zzo),e(eo,eWo),g(lw,eo,null),b(c,fRe,u),b(c,Jd,u),e(Jd,J2),e(J2,cfe),g(iw,cfe,null),e(Jd,oWo),e(Jd,ffe),e(ffe,rWo),b(c,mRe,u),b(c,hr,u),g(dw,hr,null),e(hr,tWo),e(hr,Yd),e(Yd,aWo),e(Yd,mfe),e(mfe,nWo),e(Yd,sWo),e(Yd,gfe),e(gfe,lWo),e(Yd,iWo),e(hr,dWo),e(hr,cw),e(cw,cWo),e(cw,hfe),e(hfe,fWo),e(cw,mWo),e(hr,gWo),e(hr,it),g(fw,it,null),e(it,hWo),e(it,pfe),e(pfe,pWo),e(it,_Wo),e(it,Kd),e(Kd,uWo),e(Kd,_fe),e(_fe,bWo),e(Kd,vWo),e(Kd,ufe),e(ufe,TWo),e(Kd,FWo),e(it,CWo),e(it,bfe),e(bfe,MWo),e(it,EWo),g(mw,it,null),e(hr,yWo),e(hr,oo),g(gw,oo,null),e(oo,wWo),e(oo,vfe),e(vfe,AWo),e(oo,LWo),e(oo,fn),e(fn,BWo),e(fn,Tfe),e(Tfe,xWo),e(fn,kWo),e(fn,Ffe),e(Ffe,RWo),e(fn,SWo),e(fn,Cfe),e(Cfe,PWo),e(fn,$Wo),e(oo,IWo),e(oo,Zd),e(Zd,Y2),e(Y2,Mfe),e(Mfe,jWo),e(Y2,NWo),e(Y2,vq),e(vq,DWo),e(Y2,qWo),e(Zd,GWo),e(Zd,K2),e(K2,Efe),e(Efe,OWo),e(K2,XWo),e(K2,Tq),e(Tq,VWo),e(K2,zWo),e(Zd,WWo),e(Zd,Z2),e(Z2,yfe),e(yfe,QWo),e(Z2,HWo),e(Z2,Fq),e(Fq,UWo),e(Z2,JWo),e(oo,YWo),e(oo,ev),e(ev,KWo),e(ev,wfe),e(wfe,ZWo),e(ev,eQo),e(ev,Afe),e(Afe,oQo),e(oo,rQo),e(oo,Lfe),e(Lfe,tQo),e(oo,aQo),g(hw,oo,null),b(c,gRe,u),b(c,ec,u),e(ec,ov),e(ov,Bfe),g(pw,Bfe,null),e(ec,nQo),e(ec,xfe),e(xfe,sQo),b(c,hRe,u),b(c,pr,u),g(_w,pr,null),e(pr,lQo),e(pr,oc),e(oc,iQo),e(oc,kfe),e(kfe,dQo),e(oc,cQo),e(oc,Rfe),e(Rfe,fQo),e(oc,mQo),e(pr,gQo),e(pr,uw),e(uw,hQo),e(uw,Sfe),e(Sfe,pQo),e(uw,_Qo),e(pr,uQo),e(pr,dt),g(bw,dt,null),e(dt,bQo),e(dt,Pfe),e(Pfe,vQo),e(dt,TQo),e(dt,rc),e(rc,FQo),e(rc,$fe),e($fe,CQo),e(rc,MQo),e(rc,Ife),e(Ife,EQo),e(rc,yQo),e(dt,wQo),e(dt,jfe),e(jfe,AQo),e(dt,LQo),g(vw,dt,null),e(pr,BQo),e(pr,ro),g(Tw,ro,null),e(ro,xQo),e(ro,Nfe),e(Nfe,kQo),e(ro,RQo),e(ro,mn),e(mn,SQo),e(mn,Dfe),e(Dfe,PQo),e(mn,$Qo),e(mn,qfe),e(qfe,IQo),e(mn,jQo),e(mn,Gfe),e(Gfe,NQo),e(mn,DQo),e(ro,qQo),e(ro,Ofe),e(Ofe,rv),e(rv,Xfe),e(Xfe,GQo),e(rv,OQo),e(rv,Cq),e(Cq,XQo),e(rv,VQo),e(ro,zQo),e(ro,tv),e(tv,WQo),e(tv,Vfe),e(Vfe,QQo),e(tv,HQo),e(tv,zfe),e(zfe,UQo),e(ro,JQo),e(ro,Wfe),e(Wfe,YQo),e(ro,KQo),g(Fw,ro,null),b(c,pRe,u),b(c,tc,u),e(tc,av),e(av,Qfe),g(Cw,Qfe,null),e(tc,ZQo),e(tc,Hfe),e(Hfe,eHo),b(c,_Re,u),b(c,_r,u),g(Mw,_r,null),e(_r,oHo),e(_r,ac),e(ac,rHo),e(ac,Ufe),e(Ufe,tHo),e(ac,aHo),e(ac,Jfe),e(Jfe,nHo),e(ac,sHo),e(_r,lHo),e(_r,Ew),e(Ew,iHo),e(Ew,Yfe),e(Yfe,dHo),e(Ew,cHo),e(_r,fHo),e(_r,ct),g(yw,ct,null),e(ct,mHo),e(ct,Kfe),e(Kfe,gHo),e(ct,hHo),e(ct,nc),e(nc,pHo),e(nc,Zfe),e(Zfe,_Ho),e(nc,uHo),e(nc,eme),e(eme,bHo),e(nc,vHo),e(ct,THo),e(ct,ome),e(ome,FHo),e(ct,CHo),g(ww,ct,null),e(_r,MHo),e(_r,to),g(Aw,to,null),e(to,EHo),e(to,rme),e(rme,yHo),e(to,wHo),e(to,gn),e(gn,AHo),e(gn,tme),e(tme,LHo),e(gn,BHo),e(gn,ame),e(ame,xHo),e(gn,kHo),e(gn,nme),e(nme,RHo),e(gn,SHo),e(to,PHo),e(to,sme),e(sme,nv),e(nv,lme),e(lme,$Ho),e(nv,IHo),e(nv,Mq),e(Mq,jHo),e(nv,NHo),e(to,DHo),e(to,sv),e(sv,qHo),e(sv,ime),e(ime,GHo),e(sv,OHo),e(sv,dme),e(dme,XHo),e(to,VHo),e(to,cme),e(cme,zHo),e(to,WHo),g(Lw,to,null),b(c,uRe,u),b(c,sc,u),e(sc,lv),e(lv,fme),g(Bw,fme,null),e(sc,QHo),e(sc,mme),e(mme,HHo),b(c,bRe,u),b(c,ur,u),g(xw,ur,null),e(ur,UHo),e(ur,lc),e(lc,JHo),e(lc,gme),e(gme,YHo),e(lc,KHo),e(lc,hme),e(hme,ZHo),e(lc,eUo),e(ur,oUo),e(ur,kw),e(kw,rUo),e(kw,pme),e(pme,tUo),e(kw,aUo),e(ur,nUo),e(ur,ft),g(Rw,ft,null),e(ft,sUo),e(ft,_me),e(_me,lUo),e(ft,iUo),e(ft,ic),e(ic,dUo),e(ic,ume),e(ume,cUo),e(ic,fUo),e(ic,bme),e(bme,mUo),e(ic,gUo),e(ft,hUo),e(ft,vme),e(vme,pUo),e(ft,_Uo),g(Sw,ft,null),e(ur,uUo),e(ur,ao),g(Pw,ao,null),e(ao,bUo),e(ao,Tme),e(Tme,vUo),e(ao,TUo),e(ao,hn),e(hn,FUo),e(hn,Fme),e(Fme,CUo),e(hn,MUo),e(hn,Cme),e(Cme,EUo),e(hn,yUo),e(hn,Mme),e(Mme,wUo),e(hn,AUo),e(ao,LUo),e(ao,$w),e($w,iv),e(iv,Eme),e(Eme,BUo),e(iv,xUo),e(iv,Eq),e(Eq,kUo),e(iv,RUo),e($w,SUo),e($w,dv),e(dv,yme),e(yme,PUo),e(dv,$Uo),e(dv,yq),e(yq,IUo),e(dv,jUo),e(ao,NUo),e(ao,cv),e(cv,DUo),e(cv,wme),e(wme,qUo),e(cv,GUo),e(cv,Ame),e(Ame,OUo),e(ao,XUo),e(ao,Lme),e(Lme,VUo),e(ao,zUo),g(Iw,ao,null),b(c,vRe,u),b(c,dc,u),e(dc,fv),e(fv,Bme),g(jw,Bme,null),e(dc,WUo),e(dc,xme),e(xme,QUo),b(c,TRe,u),b(c,br,u),g(Nw,br,null),e(br,HUo),e(br,cc),e(cc,UUo),e(cc,kme),e(kme,JUo),e(cc,YUo),e(cc,Rme),e(Rme,KUo),e(cc,ZUo),e(br,eJo),e(br,Dw),e(Dw,oJo),e(Dw,Sme),e(Sme,rJo),e(Dw,tJo),e(br,aJo),e(br,mt),g(qw,mt,null),e(mt,nJo),e(mt,Pme),e(Pme,sJo),e(mt,lJo),e(mt,fc),e(fc,iJo),e(fc,$me),e($me,dJo),e(fc,cJo),e(fc,Ime),e(Ime,fJo),e(fc,mJo),e(mt,gJo),e(mt,jme),e(jme,hJo),e(mt,pJo),g(Gw,mt,null),e(br,_Jo),e(br,no),g(Ow,no,null),e(no,uJo),e(no,Nme),e(Nme,bJo),e(no,vJo),e(no,pn),e(pn,TJo),e(pn,Dme),e(Dme,FJo),e(pn,CJo),e(pn,qme),e(qme,MJo),e(pn,EJo),e(pn,Gme),e(Gme,yJo),e(pn,wJo),e(no,AJo),e(no,Ome),e(Ome,mv),e(mv,Xme),e(Xme,LJo),e(mv,BJo),e(mv,wq),e(wq,xJo),e(mv,kJo),e(no,RJo),e(no,gv),e(gv,SJo),e(gv,Vme),e(Vme,PJo),e(gv,$Jo),e(gv,zme),e(zme,IJo),e(no,jJo),e(no,Wme),e(Wme,NJo),e(no,DJo),g(Xw,no,null),b(c,FRe,u),b(c,mc,u),e(mc,hv),e(hv,Qme),g(Vw,Qme,null),e(mc,qJo),e(mc,Hme),e(Hme,GJo),b(c,CRe,u),b(c,vr,u),g(zw,vr,null),e(vr,OJo),e(vr,gc),e(gc,XJo),e(gc,Ume),e(Ume,VJo),e(gc,zJo),e(gc,Jme),e(Jme,WJo),e(gc,QJo),e(vr,HJo),e(vr,Ww),e(Ww,UJo),e(Ww,Yme),e(Yme,JJo),e(Ww,YJo),e(vr,KJo),e(vr,gt),g(Qw,gt,null),e(gt,ZJo),e(gt,Kme),e(Kme,eYo),e(gt,oYo),e(gt,hc),e(hc,rYo),e(hc,Zme),e(Zme,tYo),e(hc,aYo),e(hc,ege),e(ege,nYo),e(hc,sYo),e(gt,lYo),e(gt,oge),e(oge,iYo),e(gt,dYo),g(Hw,gt,null),e(vr,cYo),e(vr,ho),g(Uw,ho,null),e(ho,fYo),e(ho,rge),e(rge,mYo),e(ho,gYo),e(ho,_n),e(_n,hYo),e(_n,tge),e(tge,pYo),e(_n,_Yo),e(_n,age),e(age,uYo),e(_n,bYo),e(_n,nge),e(nge,vYo),e(_n,TYo),e(ho,FYo),e(ho,B),e(B,pv),e(pv,sge),e(sge,CYo),e(pv,MYo),e(pv,Aq),e(Aq,EYo),e(pv,yYo),e(B,wYo),e(B,_v),e(_v,lge),e(lge,AYo),e(_v,LYo),e(_v,Lq),e(Lq,BYo),e(_v,xYo),e(B,kYo),e(B,uv),e(uv,ige),e(ige,RYo),e(uv,SYo),e(uv,Bq),e(Bq,PYo),e(uv,$Yo),e(B,IYo),e(B,bv),e(bv,dge),e(dge,jYo),e(bv,NYo),e(bv,xq),e(xq,DYo),e(bv,qYo),e(B,GYo),e(B,vv),e(vv,cge),e(cge,OYo),e(vv,XYo),e(vv,kq),e(kq,VYo),e(vv,zYo),e(B,WYo),e(B,Tv),e(Tv,fge),e(fge,QYo),e(Tv,HYo),e(Tv,Rq),e(Rq,UYo),e(Tv,JYo),e(B,YYo),e(B,Fv),e(Fv,mge),e(mge,KYo),e(Fv,ZYo),e(Fv,Sq),e(Sq,eKo),e(Fv,oKo),e(B,rKo),e(B,Cv),e(Cv,gge),e(gge,tKo),e(Cv,aKo),e(Cv,Pq),e(Pq,nKo),e(Cv,sKo),e(B,lKo),e(B,Mv),e(Mv,hge),e(hge,iKo),e(Mv,dKo),e(Mv,$q),e($q,cKo),e(Mv,fKo),e(B,mKo),e(B,Ev),e(Ev,pge),e(pge,gKo),e(Ev,hKo),e(Ev,Iq),e(Iq,pKo),e(Ev,_Ko),e(B,uKo),e(B,yv),e(yv,_ge),e(_ge,bKo),e(yv,vKo),e(yv,jq),e(jq,TKo),e(yv,FKo),e(B,CKo),e(B,wv),e(wv,uge),e(uge,MKo),e(wv,EKo),e(wv,Nq),e(Nq,yKo),e(wv,wKo),e(B,AKo),e(B,Av),e(Av,bge),e(bge,LKo),e(Av,BKo),e(Av,Dq),e(Dq,xKo),e(Av,kKo),e(B,RKo),e(B,Lv),e(Lv,vge),e(vge,SKo),e(Lv,PKo),e(Lv,qq),e(qq,$Ko),e(Lv,IKo),e(B,jKo),e(B,Bv),e(Bv,Tge),e(Tge,NKo),e(Bv,DKo),e(Bv,Gq),e(Gq,qKo),e(Bv,GKo),e(B,OKo),e(B,xv),e(xv,Fge),e(Fge,XKo),e(xv,VKo),e(xv,Oq),e(Oq,zKo),e(xv,WKo),e(B,QKo),e(B,Gs),e(Gs,Cge),e(Cge,HKo),e(Gs,UKo),e(Gs,Xq),e(Xq,JKo),e(Gs,YKo),e(Gs,Vq),e(Vq,KKo),e(Gs,ZKo),e(B,eZo),e(B,kv),e(kv,Mge),e(Mge,oZo),e(kv,rZo),e(kv,zq),e(zq,tZo),e(kv,aZo),e(B,nZo),e(B,Rv),e(Rv,Ege),e(Ege,sZo),e(Rv,lZo),e(Rv,Wq),e(Wq,iZo),e(Rv,dZo),e(B,cZo),e(B,Sv),e(Sv,yge),e(yge,fZo),e(Sv,mZo),e(Sv,Qq),e(Qq,gZo),e(Sv,hZo),e(B,pZo),e(B,Pv),e(Pv,wge),e(wge,_Zo),e(Pv,uZo),e(Pv,Hq),e(Hq,bZo),e(Pv,vZo),e(B,TZo),e(B,$v),e($v,Age),e(Age,FZo),e($v,CZo),e($v,Uq),e(Uq,MZo),e($v,EZo),e(B,yZo),e(B,Iv),e(Iv,Lge),e(Lge,wZo),e(Iv,AZo),e(Iv,Jq),e(Jq,LZo),e(Iv,BZo),e(B,xZo),e(B,jv),e(jv,Bge),e(Bge,kZo),e(jv,RZo),e(jv,Yq),e(Yq,SZo),e(jv,PZo),e(B,$Zo),e(B,Nv),e(Nv,xge),e(xge,IZo),e(Nv,jZo),e(Nv,Kq),e(Kq,NZo),e(Nv,DZo),e(B,qZo),e(B,Dv),e(Dv,kge),e(kge,GZo),e(Dv,OZo),e(Dv,Zq),e(Zq,XZo),e(Dv,VZo),e(B,zZo),e(B,qv),e(qv,Rge),e(Rge,WZo),e(qv,QZo),e(qv,eG),e(eG,HZo),e(qv,UZo),e(B,JZo),e(B,Gv),e(Gv,Sge),e(Sge,YZo),e(Gv,KZo),e(Gv,oG),e(oG,ZZo),e(Gv,eer),e(B,oer),e(B,Ov),e(Ov,Pge),e(Pge,rer),e(Ov,ter),e(Ov,rG),e(rG,aer),e(Ov,ner),e(B,ser),e(B,Xv),e(Xv,$ge),e($ge,ler),e(Xv,ier),e(Xv,tG),e(tG,der),e(Xv,cer),e(B,fer),e(B,Vv),e(Vv,Ige),e(Ige,mer),e(Vv,ger),e(Vv,aG),e(aG,her),e(Vv,per),e(B,_er),e(B,zv),e(zv,jge),e(jge,uer),e(zv,ber),e(zv,nG),e(nG,ver),e(zv,Ter),e(B,Fer),e(B,Wv),e(Wv,Nge),e(Nge,Cer),e(Wv,Mer),e(Wv,sG),e(sG,Eer),e(Wv,yer),e(B,wer),e(B,Qv),e(Qv,Dge),e(Dge,Aer),e(Qv,Ler),e(Qv,lG),e(lG,Ber),e(Qv,xer),e(B,ker),e(B,Hv),e(Hv,qge),e(qge,Rer),e(Hv,Ser),e(Hv,iG),e(iG,Per),e(Hv,$er),e(B,Ier),e(B,Uv),e(Uv,Gge),e(Gge,jer),e(Uv,Ner),e(Uv,dG),e(dG,Der),e(Uv,qer),e(B,Ger),e(B,Jv),e(Jv,Oge),e(Oge,Oer),e(Jv,Xer),e(Jv,cG),e(cG,Ver),e(Jv,zer),e(B,Wer),e(B,Yv),e(Yv,Xge),e(Xge,Qer),e(Yv,Her),e(Yv,fG),e(fG,Uer),e(Yv,Jer),e(B,Yer),e(B,Kv),e(Kv,Vge),e(Vge,Ker),e(Kv,Zer),e(Kv,mG),e(mG,eor),e(Kv,oor),e(B,ror),e(B,Zv),e(Zv,zge),e(zge,tor),e(Zv,aor),e(Zv,gG),e(gG,nor),e(Zv,sor),e(B,lor),e(B,e6),e(e6,Wge),e(Wge,ior),e(e6,dor),e(e6,hG),e(hG,cor),e(e6,mor),e(B,gor),e(B,o6),e(o6,Qge),e(Qge,hor),e(o6,por),e(o6,pG),e(pG,_or),e(o6,uor),e(B,bor),e(B,r6),e(r6,Hge),e(Hge,vor),e(r6,Tor),e(r6,_G),e(_G,For),e(r6,Cor),e(ho,Mor),e(ho,Uge),e(Uge,Eor),e(ho,yor),g(Jw,ho,null),b(c,MRe,u),b(c,pc,u),e(pc,t6),e(t6,Jge),g(Yw,Jge,null),e(pc,wor),e(pc,Yge),e(Yge,Aor),b(c,ERe,u),b(c,Tr,u),g(Kw,Tr,null),e(Tr,Lor),e(Tr,_c),e(_c,Bor),e(_c,Kge),e(Kge,xor),e(_c,kor),e(_c,Zge),e(Zge,Ror),e(_c,Sor),e(Tr,Por),e(Tr,Zw),e(Zw,$or),e(Zw,ehe),e(ehe,Ior),e(Zw,jor),e(Tr,Nor),e(Tr,ht),g(eA,ht,null),e(ht,Dor),e(ht,ohe),e(ohe,qor),e(ht,Gor),e(ht,uc),e(uc,Oor),e(uc,rhe),e(rhe,Xor),e(uc,Vor),e(uc,the),e(the,zor),e(uc,Wor),e(ht,Qor),e(ht,ahe),e(ahe,Hor),e(ht,Uor),g(oA,ht,null),e(Tr,Jor),e(Tr,po),g(rA,po,null),e(po,Yor),e(po,nhe),e(nhe,Kor),e(po,Zor),e(po,un),e(un,err),e(un,she),e(she,orr),e(un,rrr),e(un,lhe),e(lhe,trr),e(un,arr),e(un,ihe),e(ihe,nrr),e(un,srr),e(po,lrr),e(po,H),e(H,a6),e(a6,dhe),e(dhe,irr),e(a6,drr),e(a6,uG),e(uG,crr),e(a6,frr),e(H,mrr),e(H,n6),e(n6,che),e(che,grr),e(n6,hrr),e(n6,bG),e(bG,prr),e(n6,_rr),e(H,urr),e(H,s6),e(s6,fhe),e(fhe,brr),e(s6,vrr),e(s6,vG),e(vG,Trr),e(s6,Frr),e(H,Crr),e(H,l6),e(l6,mhe),e(mhe,Mrr),e(l6,Err),e(l6,TG),e(TG,yrr),e(l6,wrr),e(H,Arr),e(H,i6),e(i6,ghe),e(ghe,Lrr),e(i6,Brr),e(i6,FG),e(FG,xrr),e(i6,krr),e(H,Rrr),e(H,d6),e(d6,hhe),e(hhe,Srr),e(d6,Prr),e(d6,CG),e(CG,$rr),e(d6,Irr),e(H,jrr),e(H,c6),e(c6,phe),e(phe,Nrr),e(c6,Drr),e(c6,MG),e(MG,qrr),e(c6,Grr),e(H,Orr),e(H,f6),e(f6,_he),e(_he,Xrr),e(f6,Vrr),e(f6,EG),e(EG,zrr),e(f6,Wrr),e(H,Qrr),e(H,m6),e(m6,uhe),e(uhe,Hrr),e(m6,Urr),e(m6,yG),e(yG,Jrr),e(m6,Yrr),e(H,Krr),e(H,g6),e(g6,bhe),e(bhe,Zrr),e(g6,etr),e(g6,wG),e(wG,otr),e(g6,rtr),e(H,ttr),e(H,h6),e(h6,vhe),e(vhe,atr),e(h6,ntr),e(h6,AG),e(AG,str),e(h6,ltr),e(H,itr),e(H,p6),e(p6,The),e(The,dtr),e(p6,ctr),e(p6,LG),e(LG,ftr),e(p6,mtr),e(H,gtr),e(H,_6),e(_6,Fhe),e(Fhe,htr),e(_6,ptr),e(_6,BG),e(BG,_tr),e(_6,utr),e(H,btr),e(H,u6),e(u6,Che),e(Che,vtr),e(u6,Ttr),e(u6,xG),e(xG,Ftr),e(u6,Ctr),e(H,Mtr),e(H,b6),e(b6,Mhe),e(Mhe,Etr),e(b6,ytr),e(b6,kG),e(kG,wtr),e(b6,Atr),e(H,Ltr),e(H,v6),e(v6,Ehe),e(Ehe,Btr),e(v6,xtr),e(v6,RG),e(RG,ktr),e(v6,Rtr),e(H,Str),e(H,T6),e(T6,yhe),e(yhe,Ptr),e(T6,$tr),e(T6,SG),e(SG,Itr),e(T6,jtr),e(H,Ntr),e(H,F6),e(F6,whe),e(whe,Dtr),e(F6,qtr),e(F6,PG),e(PG,Gtr),e(F6,Otr),e(H,Xtr),e(H,C6),e(C6,Ahe),e(Ahe,Vtr),e(C6,ztr),e(C6,$G),e($G,Wtr),e(C6,Qtr),e(H,Htr),e(H,M6),e(M6,Lhe),e(Lhe,Utr),e(M6,Jtr),e(M6,IG),e(IG,Ytr),e(M6,Ktr),e(H,Ztr),e(H,E6),e(E6,Bhe),e(Bhe,ear),e(E6,oar),e(E6,jG),e(jG,rar),e(E6,tar),e(H,aar),e(H,y6),e(y6,xhe),e(xhe,nar),e(y6,sar),e(y6,NG),e(NG,lar),e(y6,iar),e(po,dar),e(po,khe),e(khe,car),e(po,far),g(tA,po,null),b(c,yRe,u),b(c,bc,u),e(bc,w6),e(w6,Rhe),g(aA,Rhe,null),e(bc,mar),e(bc,She),e(She,gar),b(c,wRe,u),b(c,Fr,u),g(nA,Fr,null),e(Fr,har),e(Fr,vc),e(vc,par),e(vc,Phe),e(Phe,_ar),e(vc,uar),e(vc,$he),e($he,bar),e(vc,Tar),e(Fr,Far),e(Fr,sA),e(sA,Car),e(sA,Ihe),e(Ihe,Mar),e(sA,Ear),e(Fr,yar),e(Fr,pt),g(lA,pt,null),e(pt,war),e(pt,jhe),e(jhe,Aar),e(pt,Lar),e(pt,Tc),e(Tc,Bar),e(Tc,Nhe),e(Nhe,xar),e(Tc,kar),e(Tc,Dhe),e(Dhe,Rar),e(Tc,Sar),e(pt,Par),e(pt,qhe),e(qhe,$ar),e(pt,Iar),g(iA,pt,null),e(Fr,jar),e(Fr,_o),g(dA,_o,null),e(_o,Nar),e(_o,Ghe),e(Ghe,Dar),e(_o,qar),e(_o,bn),e(bn,Gar),e(bn,Ohe),e(Ohe,Oar),e(bn,Xar),e(bn,Xhe),e(Xhe,Var),e(bn,zar),e(bn,Vhe),e(Vhe,War),e(bn,Qar),e(_o,Har),e(_o,ce),e(ce,A6),e(A6,zhe),e(zhe,Uar),e(A6,Jar),e(A6,DG),e(DG,Yar),e(A6,Kar),e(ce,Zar),e(ce,L6),e(L6,Whe),e(Whe,enr),e(L6,onr),e(L6,qG),e(qG,rnr),e(L6,tnr),e(ce,anr),e(ce,B6),e(B6,Qhe),e(Qhe,nnr),e(B6,snr),e(B6,GG),e(GG,lnr),e(B6,inr),e(ce,dnr),e(ce,x6),e(x6,Hhe),e(Hhe,cnr),e(x6,fnr),e(x6,OG),e(OG,mnr),e(x6,gnr),e(ce,hnr),e(ce,k6),e(k6,Uhe),e(Uhe,pnr),e(k6,_nr),e(k6,XG),e(XG,unr),e(k6,bnr),e(ce,vnr),e(ce,R6),e(R6,Jhe),e(Jhe,Tnr),e(R6,Fnr),e(R6,VG),e(VG,Cnr),e(R6,Mnr),e(ce,Enr),e(ce,S6),e(S6,Yhe),e(Yhe,ynr),e(S6,wnr),e(S6,zG),e(zG,Anr),e(S6,Lnr),e(ce,Bnr),e(ce,P6),e(P6,Khe),e(Khe,xnr),e(P6,knr),e(P6,WG),e(WG,Rnr),e(P6,Snr),e(ce,Pnr),e(ce,$6),e($6,Zhe),e(Zhe,$nr),e($6,Inr),e($6,QG),e(QG,jnr),e($6,Nnr),e(ce,Dnr),e(ce,I6),e(I6,epe),e(epe,qnr),e(I6,Gnr),e(I6,HG),e(HG,Onr),e(I6,Xnr),e(ce,Vnr),e(ce,j6),e(j6,ope),e(ope,znr),e(j6,Wnr),e(j6,UG),e(UG,Qnr),e(j6,Hnr),e(ce,Unr),e(ce,N6),e(N6,rpe),e(rpe,Jnr),e(N6,Ynr),e(N6,JG),e(JG,Knr),e(N6,Znr),e(_o,esr),e(_o,tpe),e(tpe,osr),e(_o,rsr),g(cA,_o,null),b(c,ARe,u),b(c,Fc,u),e(Fc,D6),e(D6,ape),g(fA,ape,null),e(Fc,tsr),e(Fc,npe),e(npe,asr),b(c,LRe,u),b(c,Cr,u),g(mA,Cr,null),e(Cr,nsr),e(Cr,Cc),e(Cc,ssr),e(Cc,spe),e(spe,lsr),e(Cc,isr),e(Cc,lpe),e(lpe,dsr),e(Cc,csr),e(Cr,fsr),e(Cr,gA),e(gA,msr),e(gA,ipe),e(ipe,gsr),e(gA,hsr),e(Cr,psr),e(Cr,_t),g(hA,_t,null),e(_t,_sr),e(_t,dpe),e(dpe,usr),e(_t,bsr),e(_t,Mc),e(Mc,vsr),e(Mc,cpe),e(cpe,Tsr),e(Mc,Fsr),e(Mc,fpe),e(fpe,Csr),e(Mc,Msr),e(_t,Esr),e(_t,mpe),e(mpe,ysr),e(_t,wsr),g(pA,_t,null),e(Cr,Asr),e(Cr,uo),g(_A,uo,null),e(uo,Lsr),e(uo,gpe),e(gpe,Bsr),e(uo,xsr),e(uo,vn),e(vn,ksr),e(vn,hpe),e(hpe,Rsr),e(vn,Ssr),e(vn,ppe),e(ppe,Psr),e(vn,$sr),e(vn,_pe),e(_pe,Isr),e(vn,jsr),e(uo,Nsr),e(uo,uA),e(uA,q6),e(q6,upe),e(upe,Dsr),e(q6,qsr),e(q6,YG),e(YG,Gsr),e(q6,Osr),e(uA,Xsr),e(uA,G6),e(G6,bpe),e(bpe,Vsr),e(G6,zsr),e(G6,KG),e(KG,Wsr),e(G6,Qsr),e(uo,Hsr),e(uo,vpe),e(vpe,Usr),e(uo,Jsr),g(bA,uo,null),b(c,BRe,u),b(c,Ec,u),e(Ec,O6),e(O6,Tpe),g(vA,Tpe,null),e(Ec,Ysr),e(Ec,Fpe),e(Fpe,Ksr),b(c,xRe,u),b(c,Mr,u),g(TA,Mr,null),e(Mr,Zsr),e(Mr,yc),e(yc,elr),e(yc,Cpe),e(Cpe,olr),e(yc,rlr),e(yc,Mpe),e(Mpe,tlr),e(yc,alr),e(Mr,nlr),e(Mr,FA),e(FA,slr),e(FA,Epe),e(Epe,llr),e(FA,ilr),e(Mr,dlr),e(Mr,ut),g(CA,ut,null),e(ut,clr),e(ut,ype),e(ype,flr),e(ut,mlr),e(ut,wc),e(wc,glr),e(wc,wpe),e(wpe,hlr),e(wc,plr),e(wc,Ape),e(Ape,_lr),e(wc,ulr),e(ut,blr),e(ut,Lpe),e(Lpe,vlr),e(ut,Tlr),g(MA,ut,null),e(Mr,Flr),e(Mr,bo),g(EA,bo,null),e(bo,Clr),e(bo,Bpe),e(Bpe,Mlr),e(bo,Elr),e(bo,Tn),e(Tn,ylr),e(Tn,xpe),e(xpe,wlr),e(Tn,Alr),e(Tn,kpe),e(kpe,Llr),e(Tn,Blr),e(Tn,Rpe),e(Rpe,xlr),e(Tn,klr),e(bo,Rlr),e(bo,J),e(J,X6),e(X6,Spe),e(Spe,Slr),e(X6,Plr),e(X6,ZG),e(ZG,$lr),e(X6,Ilr),e(J,jlr),e(J,V6),e(V6,Ppe),e(Ppe,Nlr),e(V6,Dlr),e(V6,eO),e(eO,qlr),e(V6,Glr),e(J,Olr),e(J,z6),e(z6,$pe),e($pe,Xlr),e(z6,Vlr),e(z6,oO),e(oO,zlr),e(z6,Wlr),e(J,Qlr),e(J,W6),e(W6,Ipe),e(Ipe,Hlr),e(W6,Ulr),e(W6,rO),e(rO,Jlr),e(W6,Ylr),e(J,Klr),e(J,Q6),e(Q6,jpe),e(jpe,Zlr),e(Q6,eir),e(Q6,tO),e(tO,oir),e(Q6,rir),e(J,tir),e(J,H6),e(H6,Npe),e(Npe,air),e(H6,nir),e(H6,aO),e(aO,sir),e(H6,lir),e(J,iir),e(J,U6),e(U6,Dpe),e(Dpe,dir),e(U6,cir),e(U6,nO),e(nO,fir),e(U6,mir),e(J,gir),e(J,J6),e(J6,qpe),e(qpe,hir),e(J6,pir),e(J6,sO),e(sO,_ir),e(J6,uir),e(J,bir),e(J,Y6),e(Y6,Gpe),e(Gpe,vir),e(Y6,Tir),e(Y6,lO),e(lO,Fir),e(Y6,Cir),e(J,Mir),e(J,K6),e(K6,Ope),e(Ope,Eir),e(K6,yir),e(K6,iO),e(iO,wir),e(K6,Air),e(J,Lir),e(J,Z6),e(Z6,Xpe),e(Xpe,Bir),e(Z6,xir),e(Z6,dO),e(dO,kir),e(Z6,Rir),e(J,Sir),e(J,e0),e(e0,Vpe),e(Vpe,Pir),e(e0,$ir),e(e0,cO),e(cO,Iir),e(e0,jir),e(J,Nir),e(J,o0),e(o0,zpe),e(zpe,Dir),e(o0,qir),e(o0,fO),e(fO,Gir),e(o0,Oir),e(J,Xir),e(J,r0),e(r0,Wpe),e(Wpe,Vir),e(r0,zir),e(r0,mO),e(mO,Wir),e(r0,Qir),e(J,Hir),e(J,t0),e(t0,Qpe),e(Qpe,Uir),e(t0,Jir),e(t0,gO),e(gO,Yir),e(t0,Kir),e(J,Zir),e(J,a0),e(a0,Hpe),e(Hpe,edr),e(a0,odr),e(a0,hO),e(hO,rdr),e(a0,tdr),e(J,adr),e(J,n0),e(n0,Upe),e(Upe,ndr),e(n0,sdr),e(n0,pO),e(pO,ldr),e(n0,idr),e(J,ddr),e(J,s0),e(s0,Jpe),e(Jpe,cdr),e(s0,fdr),e(s0,_O),e(_O,mdr),e(s0,gdr),e(J,hdr),e(J,l0),e(l0,Ype),e(Ype,pdr),e(l0,_dr),e(l0,uO),e(uO,udr),e(l0,bdr),e(J,vdr),e(J,i0),e(i0,Kpe),e(Kpe,Tdr),e(i0,Fdr),e(i0,bO),e(bO,Cdr),e(i0,Mdr),e(bo,Edr),e(bo,Zpe),e(Zpe,ydr),e(bo,wdr),g(yA,bo,null),b(c,kRe,u),b(c,Ac,u),e(Ac,d0),e(d0,e_e),g(wA,e_e,null),e(Ac,Adr),e(Ac,o_e),e(o_e,Ldr),b(c,RRe,u),b(c,Er,u),g(AA,Er,null),e(Er,Bdr),e(Er,Lc),e(Lc,xdr),e(Lc,r_e),e(r_e,kdr),e(Lc,Rdr),e(Lc,t_e),e(t_e,Sdr),e(Lc,Pdr),e(Er,$dr),e(Er,LA),e(LA,Idr),e(LA,a_e),e(a_e,jdr),e(LA,Ndr),e(Er,Ddr),e(Er,bt),g(BA,bt,null),e(bt,qdr),e(bt,n_e),e(n_e,Gdr),e(bt,Odr),e(bt,Bc),e(Bc,Xdr),e(Bc,s_e),e(s_e,Vdr),e(Bc,zdr),e(Bc,l_e),e(l_e,Wdr),e(Bc,Qdr),e(bt,Hdr),e(bt,i_e),e(i_e,Udr),e(bt,Jdr),g(xA,bt,null),e(Er,Ydr),e(Er,vo),g(kA,vo,null),e(vo,Kdr),e(vo,d_e),e(d_e,Zdr),e(vo,ecr),e(vo,Fn),e(Fn,ocr),e(Fn,c_e),e(c_e,rcr),e(Fn,tcr),e(Fn,f_e),e(f_e,acr),e(Fn,ncr),e(Fn,m_e),e(m_e,scr),e(Fn,lcr),e(vo,icr),e(vo,ue),e(ue,c0),e(c0,g_e),e(g_e,dcr),e(c0,ccr),e(c0,vO),e(vO,fcr),e(c0,mcr),e(ue,gcr),e(ue,f0),e(f0,h_e),e(h_e,hcr),e(f0,pcr),e(f0,TO),e(TO,_cr),e(f0,ucr),e(ue,bcr),e(ue,m0),e(m0,p_e),e(p_e,vcr),e(m0,Tcr),e(m0,FO),e(FO,Fcr),e(m0,Ccr),e(ue,Mcr),e(ue,g0),e(g0,__e),e(__e,Ecr),e(g0,ycr),e(g0,CO),e(CO,wcr),e(g0,Acr),e(ue,Lcr),e(ue,h0),e(h0,u_e),e(u_e,Bcr),e(h0,xcr),e(h0,MO),e(MO,kcr),e(h0,Rcr),e(ue,Scr),e(ue,p0),e(p0,b_e),e(b_e,Pcr),e(p0,$cr),e(p0,EO),e(EO,Icr),e(p0,jcr),e(ue,Ncr),e(ue,_0),e(_0,v_e),e(v_e,Dcr),e(_0,qcr),e(_0,yO),e(yO,Gcr),e(_0,Ocr),e(ue,Xcr),e(ue,u0),e(u0,T_e),e(T_e,Vcr),e(u0,zcr),e(u0,wO),e(wO,Wcr),e(u0,Qcr),e(ue,Hcr),e(ue,b0),e(b0,F_e),e(F_e,Ucr),e(b0,Jcr),e(b0,AO),e(AO,Ycr),e(b0,Kcr),e(ue,Zcr),e(ue,v0),e(v0,C_e),e(C_e,efr),e(v0,ofr),e(v0,LO),e(LO,rfr),e(v0,tfr),e(vo,afr),e(vo,M_e),e(M_e,nfr),e(vo,sfr),g(RA,vo,null),b(c,SRe,u),b(c,xc,u),e(xc,T0),e(T0,E_e),g(SA,E_e,null),e(xc,lfr),e(xc,y_e),e(y_e,ifr),b(c,PRe,u),b(c,yr,u),g(PA,yr,null),e(yr,dfr),e(yr,kc),e(kc,cfr),e(kc,w_e),e(w_e,ffr),e(kc,mfr),e(kc,A_e),e(A_e,gfr),e(kc,hfr),e(yr,pfr),e(yr,$A),e($A,_fr),e($A,L_e),e(L_e,ufr),e($A,bfr),e(yr,vfr),e(yr,vt),g(IA,vt,null),e(vt,Tfr),e(vt,B_e),e(B_e,Ffr),e(vt,Cfr),e(vt,Rc),e(Rc,Mfr),e(Rc,x_e),e(x_e,Efr),e(Rc,yfr),e(Rc,k_e),e(k_e,wfr),e(Rc,Afr),e(vt,Lfr),e(vt,R_e),e(R_e,Bfr),e(vt,xfr),g(jA,vt,null),e(yr,kfr),e(yr,To),g(NA,To,null),e(To,Rfr),e(To,S_e),e(S_e,Sfr),e(To,Pfr),e(To,Cn),e(Cn,$fr),e(Cn,P_e),e(P_e,Ifr),e(Cn,jfr),e(Cn,$_e),e($_e,Nfr),e(Cn,Dfr),e(Cn,I_e),e(I_e,qfr),e(Cn,Gfr),e(To,Ofr),e(To,X),e(X,F0),e(F0,j_e),e(j_e,Xfr),e(F0,Vfr),e(F0,BO),e(BO,zfr),e(F0,Wfr),e(X,Qfr),e(X,C0),e(C0,N_e),e(N_e,Hfr),e(C0,Ufr),e(C0,xO),e(xO,Jfr),e(C0,Yfr),e(X,Kfr),e(X,M0),e(M0,D_e),e(D_e,Zfr),e(M0,emr),e(M0,kO),e(kO,omr),e(M0,rmr),e(X,tmr),e(X,E0),e(E0,q_e),e(q_e,amr),e(E0,nmr),e(E0,RO),e(RO,smr),e(E0,lmr),e(X,imr),e(X,y0),e(y0,G_e),e(G_e,dmr),e(y0,cmr),e(y0,SO),e(SO,fmr),e(y0,mmr),e(X,gmr),e(X,w0),e(w0,O_e),e(O_e,hmr),e(w0,pmr),e(w0,PO),e(PO,_mr),e(w0,umr),e(X,bmr),e(X,A0),e(A0,X_e),e(X_e,vmr),e(A0,Tmr),e(A0,$O),e($O,Fmr),e(A0,Cmr),e(X,Mmr),e(X,L0),e(L0,V_e),e(V_e,Emr),e(L0,ymr),e(L0,IO),e(IO,wmr),e(L0,Amr),e(X,Lmr),e(X,B0),e(B0,z_e),e(z_e,Bmr),e(B0,xmr),e(B0,jO),e(jO,kmr),e(B0,Rmr),e(X,Smr),e(X,x0),e(x0,W_e),e(W_e,Pmr),e(x0,$mr),e(x0,NO),e(NO,Imr),e(x0,jmr),e(X,Nmr),e(X,k0),e(k0,Q_e),e(Q_e,Dmr),e(k0,qmr),e(k0,DO),e(DO,Gmr),e(k0,Omr),e(X,Xmr),e(X,R0),e(R0,H_e),e(H_e,Vmr),e(R0,zmr),e(R0,qO),e(qO,Wmr),e(R0,Qmr),e(X,Hmr),e(X,S0),e(S0,U_e),e(U_e,Umr),e(S0,Jmr),e(S0,GO),e(GO,Ymr),e(S0,Kmr),e(X,Zmr),e(X,P0),e(P0,J_e),e(J_e,egr),e(P0,ogr),e(P0,OO),e(OO,rgr),e(P0,tgr),e(X,agr),e(X,$0),e($0,Y_e),e(Y_e,ngr),e($0,sgr),e($0,XO),e(XO,lgr),e($0,igr),e(X,dgr),e(X,I0),e(I0,K_e),e(K_e,cgr),e(I0,fgr),e(I0,VO),e(VO,mgr),e(I0,ggr),e(X,hgr),e(X,j0),e(j0,Z_e),e(Z_e,pgr),e(j0,_gr),e(j0,zO),e(zO,ugr),e(j0,bgr),e(X,vgr),e(X,N0),e(N0,eue),e(eue,Tgr),e(N0,Fgr),e(N0,WO),e(WO,Cgr),e(N0,Mgr),e(X,Egr),e(X,D0),e(D0,oue),e(oue,ygr),e(D0,wgr),e(D0,QO),e(QO,Agr),e(D0,Lgr),e(X,Bgr),e(X,q0),e(q0,rue),e(rue,xgr),e(q0,kgr),e(q0,HO),e(HO,Rgr),e(q0,Sgr),e(X,Pgr),e(X,G0),e(G0,tue),e(tue,$gr),e(G0,Igr),e(G0,UO),e(UO,jgr),e(G0,Ngr),e(X,Dgr),e(X,O0),e(O0,aue),e(aue,qgr),e(O0,Ggr),e(O0,JO),e(JO,Ogr),e(O0,Xgr),e(X,Vgr),e(X,X0),e(X0,nue),e(nue,zgr),e(X0,Wgr),e(X0,YO),e(YO,Qgr),e(X0,Hgr),e(X,Ugr),e(X,V0),e(V0,sue),e(sue,Jgr),e(V0,Ygr),e(V0,KO),e(KO,Kgr),e(V0,Zgr),e(X,ehr),e(X,z0),e(z0,lue),e(lue,ohr),e(z0,rhr),e(z0,ZO),e(ZO,thr),e(z0,ahr),e(X,nhr),e(X,W0),e(W0,iue),e(iue,shr),e(W0,lhr),e(W0,eX),e(eX,ihr),e(W0,dhr),e(To,chr),e(To,due),e(due,fhr),e(To,mhr),g(DA,To,null),b(c,$Re,u),b(c,Sc,u),e(Sc,Q0),e(Q0,cue),g(qA,cue,null),e(Sc,ghr),e(Sc,fue),e(fue,hhr),b(c,IRe,u),b(c,wr,u),g(GA,wr,null),e(wr,phr),e(wr,Pc),e(Pc,_hr),e(Pc,mue),e(mue,uhr),e(Pc,bhr),e(Pc,gue),e(gue,vhr),e(Pc,Thr),e(wr,Fhr),e(wr,OA),e(OA,Chr),e(OA,hue),e(hue,Mhr),e(OA,Ehr),e(wr,yhr),e(wr,Tt),g(XA,Tt,null),e(Tt,whr),e(Tt,pue),e(pue,Ahr),e(Tt,Lhr),e(Tt,$c),e($c,Bhr),e($c,_ue),e(_ue,xhr),e($c,khr),e($c,uue),e(uue,Rhr),e($c,Shr),e(Tt,Phr),e(Tt,bue),e(bue,$hr),e(Tt,Ihr),g(VA,Tt,null),e(wr,jhr),e(wr,Fo),g(zA,Fo,null),e(Fo,Nhr),e(Fo,vue),e(vue,Dhr),e(Fo,qhr),e(Fo,Mn),e(Mn,Ghr),e(Mn,Tue),e(Tue,Ohr),e(Mn,Xhr),e(Mn,Fue),e(Fue,Vhr),e(Mn,zhr),e(Mn,Cue),e(Cue,Whr),e(Mn,Qhr),e(Fo,Hhr),e(Fo,ae),e(ae,H0),e(H0,Mue),e(Mue,Uhr),e(H0,Jhr),e(H0,oX),e(oX,Yhr),e(H0,Khr),e(ae,Zhr),e(ae,U0),e(U0,Eue),e(Eue,epr),e(U0,opr),e(U0,rX),e(rX,rpr),e(U0,tpr),e(ae,apr),e(ae,J0),e(J0,yue),e(yue,npr),e(J0,spr),e(J0,tX),e(tX,lpr),e(J0,ipr),e(ae,dpr),e(ae,Y0),e(Y0,wue),e(wue,cpr),e(Y0,fpr),e(Y0,aX),e(aX,mpr),e(Y0,gpr),e(ae,hpr),e(ae,K0),e(K0,Aue),e(Aue,ppr),e(K0,_pr),e(K0,nX),e(nX,upr),e(K0,bpr),e(ae,vpr),e(ae,Z0),e(Z0,Lue),e(Lue,Tpr),e(Z0,Fpr),e(Z0,sX),e(sX,Cpr),e(Z0,Mpr),e(ae,Epr),e(ae,eT),e(eT,Bue),e(Bue,ypr),e(eT,wpr),e(eT,lX),e(lX,Apr),e(eT,Lpr),e(ae,Bpr),e(ae,oT),e(oT,xue),e(xue,xpr),e(oT,kpr),e(oT,iX),e(iX,Rpr),e(oT,Spr),e(ae,Ppr),e(ae,rT),e(rT,kue),e(kue,$pr),e(rT,Ipr),e(rT,dX),e(dX,jpr),e(rT,Npr),e(ae,Dpr),e(ae,tT),e(tT,Rue),e(Rue,qpr),e(tT,Gpr),e(tT,cX),e(cX,Opr),e(tT,Xpr),e(ae,Vpr),e(ae,aT),e(aT,Sue),e(Sue,zpr),e(aT,Wpr),e(aT,fX),e(fX,Qpr),e(aT,Hpr),e(ae,Upr),e(ae,nT),e(nT,Pue),e(Pue,Jpr),e(nT,Ypr),e(nT,mX),e(mX,Kpr),e(nT,Zpr),e(ae,e_r),e(ae,sT),e(sT,$ue),e($ue,o_r),e(sT,r_r),e(sT,gX),e(gX,t_r),e(sT,a_r),e(ae,n_r),e(ae,lT),e(lT,Iue),e(Iue,s_r),e(lT,l_r),e(lT,hX),e(hX,i_r),e(lT,d_r),e(ae,c_r),e(ae,iT),e(iT,jue),e(jue,f_r),e(iT,m_r),e(iT,pX),e(pX,g_r),e(iT,h_r),e(ae,p_r),e(ae,dT),e(dT,Nue),e(Nue,__r),e(dT,u_r),e(dT,_X),e(_X,b_r),e(dT,v_r),e(ae,T_r),e(ae,cT),e(cT,Due),e(Due,F_r),e(cT,C_r),e(cT,uX),e(uX,M_r),e(cT,E_r),e(Fo,y_r),e(Fo,que),e(que,w_r),e(Fo,A_r),g(WA,Fo,null),b(c,jRe,u),b(c,Ic,u),e(Ic,fT),e(fT,Gue),g(QA,Gue,null),e(Ic,L_r),e(Ic,Oue),e(Oue,B_r),b(c,NRe,u),b(c,Ar,u),g(HA,Ar,null),e(Ar,x_r),e(Ar,jc),e(jc,k_r),e(jc,Xue),e(Xue,R_r),e(jc,S_r),e(jc,Vue),e(Vue,P_r),e(jc,$_r),e(Ar,I_r),e(Ar,UA),e(UA,j_r),e(UA,zue),e(zue,N_r),e(UA,D_r),e(Ar,q_r),e(Ar,Ft),g(JA,Ft,null),e(Ft,G_r),e(Ft,Wue),e(Wue,O_r),e(Ft,X_r),e(Ft,Nc),e(Nc,V_r),e(Nc,Que),e(Que,z_r),e(Nc,W_r),e(Nc,Hue),e(Hue,Q_r),e(Nc,H_r),e(Ft,U_r),e(Ft,Uue),e(Uue,J_r),e(Ft,Y_r),g(YA,Ft,null),e(Ar,K_r),e(Ar,Co),g(KA,Co,null),e(Co,Z_r),e(Co,Jue),e(Jue,eur),e(Co,our),e(Co,En),e(En,rur),e(En,Yue),e(Yue,tur),e(En,aur),e(En,Kue),e(Kue,nur),e(En,sur),e(En,Zue),e(Zue,lur),e(En,iur),e(Co,dur),e(Co,e1e),e(e1e,mT),e(mT,o1e),e(o1e,cur),e(mT,fur),e(mT,bX),e(bX,mur),e(mT,gur),e(Co,hur),e(Co,r1e),e(r1e,pur),e(Co,_ur),g(ZA,Co,null),b(c,DRe,u),b(c,Dc,u),e(Dc,gT),e(gT,t1e),g(eL,t1e,null),e(Dc,uur),e(Dc,a1e),e(a1e,bur),b(c,qRe,u),b(c,Lr,u),g(oL,Lr,null),e(Lr,vur),e(Lr,qc),e(qc,Tur),e(qc,n1e),e(n1e,Fur),e(qc,Cur),e(qc,s1e),e(s1e,Mur),e(qc,Eur),e(Lr,yur),e(Lr,rL),e(rL,wur),e(rL,l1e),e(l1e,Aur),e(rL,Lur),e(Lr,Bur),e(Lr,Ct),g(tL,Ct,null),e(Ct,xur),e(Ct,i1e),e(i1e,kur),e(Ct,Rur),e(Ct,Gc),e(Gc,Sur),e(Gc,d1e),e(d1e,Pur),e(Gc,$ur),e(Gc,c1e),e(c1e,Iur),e(Gc,jur),e(Ct,Nur),e(Ct,f1e),e(f1e,Dur),e(Ct,qur),g(aL,Ct,null),e(Lr,Gur),e(Lr,Mo),g(nL,Mo,null),e(Mo,Our),e(Mo,m1e),e(m1e,Xur),e(Mo,Vur),e(Mo,yn),e(yn,zur),e(yn,g1e),e(g1e,Wur),e(yn,Qur),e(yn,h1e),e(h1e,Hur),e(yn,Uur),e(yn,p1e),e(p1e,Jur),e(yn,Yur),e(Mo,Kur),e(Mo,Y),e(Y,hT),e(hT,_1e),e(_1e,Zur),e(hT,e1r),e(hT,vX),e(vX,o1r),e(hT,r1r),e(Y,t1r),e(Y,pT),e(pT,u1e),e(u1e,a1r),e(pT,n1r),e(pT,TX),e(TX,s1r),e(pT,l1r),e(Y,i1r),e(Y,_T),e(_T,b1e),e(b1e,d1r),e(_T,c1r),e(_T,FX),e(FX,f1r),e(_T,m1r),e(Y,g1r),e(Y,uT),e(uT,v1e),e(v1e,h1r),e(uT,p1r),e(uT,CX),e(CX,_1r),e(uT,u1r),e(Y,b1r),e(Y,bT),e(bT,T1e),e(T1e,v1r),e(bT,T1r),e(bT,MX),e(MX,F1r),e(bT,C1r),e(Y,M1r),e(Y,vT),e(vT,F1e),e(F1e,E1r),e(vT,y1r),e(vT,EX),e(EX,w1r),e(vT,A1r),e(Y,L1r),e(Y,TT),e(TT,C1e),e(C1e,B1r),e(TT,x1r),e(TT,yX),e(yX,k1r),e(TT,R1r),e(Y,S1r),e(Y,FT),e(FT,M1e),e(M1e,P1r),e(FT,$1r),e(FT,wX),e(wX,I1r),e(FT,j1r),e(Y,N1r),e(Y,CT),e(CT,E1e),e(E1e,D1r),e(CT,q1r),e(CT,AX),e(AX,G1r),e(CT,O1r),e(Y,X1r),e(Y,MT),e(MT,y1e),e(y1e,V1r),e(MT,z1r),e(MT,LX),e(LX,W1r),e(MT,Q1r),e(Y,H1r),e(Y,ET),e(ET,w1e),e(w1e,U1r),e(ET,J1r),e(ET,BX),e(BX,Y1r),e(ET,K1r),e(Y,Z1r),e(Y,yT),e(yT,A1e),e(A1e,e4r),e(yT,o4r),e(yT,xX),e(xX,r4r),e(yT,t4r),e(Y,a4r),e(Y,wT),e(wT,L1e),e(L1e,n4r),e(wT,s4r),e(wT,kX),e(kX,l4r),e(wT,i4r),e(Y,d4r),e(Y,AT),e(AT,B1e),e(B1e,c4r),e(AT,f4r),e(AT,RX),e(RX,m4r),e(AT,g4r),e(Y,h4r),e(Y,LT),e(LT,x1e),e(x1e,p4r),e(LT,_4r),e(LT,SX),e(SX,u4r),e(LT,b4r),e(Y,v4r),e(Y,BT),e(BT,k1e),e(k1e,T4r),e(BT,F4r),e(BT,PX),e(PX,C4r),e(BT,M4r),e(Y,E4r),e(Y,xT),e(xT,R1e),e(R1e,y4r),e(xT,w4r),e(xT,$X),e($X,A4r),e(xT,L4r),e(Y,B4r),e(Y,kT),e(kT,S1e),e(S1e,x4r),e(kT,k4r),e(kT,IX),e(IX,R4r),e(kT,S4r),e(Y,P4r),e(Y,RT),e(RT,P1e),e(P1e,$4r),e(RT,I4r),e(RT,jX),e(jX,j4r),e(RT,N4r),e(Y,D4r),e(Y,ST),e(ST,$1e),e($1e,q4r),e(ST,G4r),e(ST,NX),e(NX,O4r),e(ST,X4r),e(Mo,V4r),e(Mo,I1e),e(I1e,z4r),e(Mo,W4r),g(sL,Mo,null),b(c,GRe,u),b(c,Oc,u),e(Oc,PT),e(PT,j1e),g(lL,j1e,null),e(Oc,Q4r),e(Oc,N1e),e(N1e,H4r),b(c,ORe,u),b(c,Br,u),g(iL,Br,null),e(Br,U4r),e(Br,Xc),e(Xc,J4r),e(Xc,D1e),e(D1e,Y4r),e(Xc,K4r),e(Xc,q1e),e(q1e,Z4r),e(Xc,ebr),e(Br,obr),e(Br,dL),e(dL,rbr),e(dL,G1e),e(G1e,tbr),e(dL,abr),e(Br,nbr),e(Br,Mt),g(cL,Mt,null),e(Mt,sbr),e(Mt,O1e),e(O1e,lbr),e(Mt,ibr),e(Mt,Vc),e(Vc,dbr),e(Vc,X1e),e(X1e,cbr),e(Vc,fbr),e(Vc,V1e),e(V1e,mbr),e(Vc,gbr),e(Mt,hbr),e(Mt,z1e),e(z1e,pbr),e(Mt,_br),g(fL,Mt,null),e(Br,ubr),e(Br,Eo),g(mL,Eo,null),e(Eo,bbr),e(Eo,W1e),e(W1e,vbr),e(Eo,Tbr),e(Eo,wn),e(wn,Fbr),e(wn,Q1e),e(Q1e,Cbr),e(wn,Mbr),e(wn,H1e),e(H1e,Ebr),e(wn,ybr),e(wn,U1e),e(U1e,wbr),e(wn,Abr),e(Eo,Lbr),e(Eo,K),e(K,$T),e($T,J1e),e(J1e,Bbr),e($T,xbr),e($T,DX),e(DX,kbr),e($T,Rbr),e(K,Sbr),e(K,IT),e(IT,Y1e),e(Y1e,Pbr),e(IT,$br),e(IT,qX),e(qX,Ibr),e(IT,jbr),e(K,Nbr),e(K,jT),e(jT,K1e),e(K1e,Dbr),e(jT,qbr),e(jT,GX),e(GX,Gbr),e(jT,Obr),e(K,Xbr),e(K,NT),e(NT,Z1e),e(Z1e,Vbr),e(NT,zbr),e(NT,OX),e(OX,Wbr),e(NT,Qbr),e(K,Hbr),e(K,DT),e(DT,e4e),e(e4e,Ubr),e(DT,Jbr),e(DT,XX),e(XX,Ybr),e(DT,Kbr),e(K,Zbr),e(K,qT),e(qT,o4e),e(o4e,e5r),e(qT,o5r),e(qT,VX),e(VX,r5r),e(qT,t5r),e(K,a5r),e(K,GT),e(GT,r4e),e(r4e,n5r),e(GT,s5r),e(GT,zX),e(zX,l5r),e(GT,i5r),e(K,d5r),e(K,OT),e(OT,t4e),e(t4e,c5r),e(OT,f5r),e(OT,WX),e(WX,m5r),e(OT,g5r),e(K,h5r),e(K,XT),e(XT,a4e),e(a4e,p5r),e(XT,_5r),e(XT,QX),e(QX,u5r),e(XT,b5r),e(K,v5r),e(K,VT),e(VT,n4e),e(n4e,T5r),e(VT,F5r),e(VT,HX),e(HX,C5r),e(VT,M5r),e(K,E5r),e(K,zT),e(zT,s4e),e(s4e,y5r),e(zT,w5r),e(zT,UX),e(UX,A5r),e(zT,L5r),e(K,B5r),e(K,WT),e(WT,l4e),e(l4e,x5r),e(WT,k5r),e(WT,JX),e(JX,R5r),e(WT,S5r),e(K,P5r),e(K,QT),e(QT,i4e),e(i4e,$5r),e(QT,I5r),e(QT,YX),e(YX,j5r),e(QT,N5r),e(K,D5r),e(K,HT),e(HT,d4e),e(d4e,q5r),e(HT,G5r),e(HT,KX),e(KX,O5r),e(HT,X5r),e(K,V5r),e(K,UT),e(UT,c4e),e(c4e,z5r),e(UT,W5r),e(UT,ZX),e(ZX,Q5r),e(UT,H5r),e(K,U5r),e(K,JT),e(JT,f4e),e(f4e,J5r),e(JT,Y5r),e(JT,eV),e(eV,K5r),e(JT,Z5r),e(K,e2r),e(K,YT),e(YT,m4e),e(m4e,o2r),e(YT,r2r),e(YT,oV),e(oV,t2r),e(YT,a2r),e(K,n2r),e(K,KT),e(KT,g4e),e(g4e,s2r),e(KT,l2r),e(KT,rV),e(rV,i2r),e(KT,d2r),e(K,c2r),e(K,ZT),e(ZT,h4e),e(h4e,f2r),e(ZT,m2r),e(ZT,tV),e(tV,g2r),e(ZT,h2r),e(K,p2r),e(K,eF),e(eF,p4e),e(p4e,_2r),e(eF,u2r),e(eF,aV),e(aV,b2r),e(eF,v2r),e(Eo,T2r),e(Eo,_4e),e(_4e,F2r),e(Eo,C2r),g(gL,Eo,null),b(c,XRe,u),b(c,zc,u),e(zc,oF),e(oF,u4e),g(hL,u4e,null),e(zc,M2r),e(zc,b4e),e(b4e,E2r),b(c,VRe,u),b(c,xr,u),g(pL,xr,null),e(xr,y2r),e(xr,Wc),e(Wc,w2r),e(Wc,v4e),e(v4e,A2r),e(Wc,L2r),e(Wc,T4e),e(T4e,B2r),e(Wc,x2r),e(xr,k2r),e(xr,_L),e(_L,R2r),e(_L,F4e),e(F4e,S2r),e(_L,P2r),e(xr,$2r),e(xr,Et),g(uL,Et,null),e(Et,I2r),e(Et,C4e),e(C4e,j2r),e(Et,N2r),e(Et,Qc),e(Qc,D2r),e(Qc,M4e),e(M4e,q2r),e(Qc,G2r),e(Qc,E4e),e(E4e,O2r),e(Qc,X2r),e(Et,V2r),e(Et,y4e),e(y4e,z2r),e(Et,W2r),g(bL,Et,null),e(xr,Q2r),e(xr,yo),g(vL,yo,null),e(yo,H2r),e(yo,w4e),e(w4e,U2r),e(yo,J2r),e(yo,An),e(An,Y2r),e(An,A4e),e(A4e,K2r),e(An,Z2r),e(An,L4e),e(L4e,evr),e(An,ovr),e(An,B4e),e(B4e,rvr),e(An,tvr),e(yo,avr),e(yo,x4e),e(x4e,rF),e(rF,k4e),e(k4e,nvr),e(rF,svr),e(rF,nV),e(nV,lvr),e(rF,ivr),e(yo,dvr),e(yo,R4e),e(R4e,cvr),e(yo,fvr),g(TL,yo,null),b(c,zRe,u),b(c,Hc,u),e(Hc,tF),e(tF,S4e),g(FL,S4e,null),e(Hc,mvr),e(Hc,P4e),e(P4e,gvr),b(c,WRe,u),b(c,kr,u),g(CL,kr,null),e(kr,hvr),e(kr,Uc),e(Uc,pvr),e(Uc,$4e),e($4e,_vr),e(Uc,uvr),e(Uc,I4e),e(I4e,bvr),e(Uc,vvr),e(kr,Tvr),e(kr,ML),e(ML,Fvr),e(ML,j4e),e(j4e,Cvr),e(ML,Mvr),e(kr,Evr),e(kr,yt),g(EL,yt,null),e(yt,yvr),e(yt,N4e),e(N4e,wvr),e(yt,Avr),e(yt,Jc),e(Jc,Lvr),e(Jc,D4e),e(D4e,Bvr),e(Jc,xvr),e(Jc,q4e),e(q4e,kvr),e(Jc,Rvr),e(yt,Svr),e(yt,G4e),e(G4e,Pvr),e(yt,$vr),g(yL,yt,null),e(kr,Ivr),e(kr,wo),g(wL,wo,null),e(wo,jvr),e(wo,O4e),e(O4e,Nvr),e(wo,Dvr),e(wo,Ln),e(Ln,qvr),e(Ln,X4e),e(X4e,Gvr),e(Ln,Ovr),e(Ln,V4e),e(V4e,Xvr),e(Ln,Vvr),e(Ln,z4e),e(z4e,zvr),e(Ln,Wvr),e(wo,Qvr),e(wo,W4e),e(W4e,aF),e(aF,Q4e),e(Q4e,Hvr),e(aF,Uvr),e(aF,sV),e(sV,Jvr),e(aF,Yvr),e(wo,Kvr),e(wo,H4e),e(H4e,Zvr),e(wo,e6r),g(AL,wo,null),b(c,QRe,u),b(c,Yc,u),e(Yc,nF),e(nF,U4e),g(LL,U4e,null),e(Yc,o6r),e(Yc,J4e),e(J4e,r6r),b(c,HRe,u),b(c,Rr,u),g(BL,Rr,null),e(Rr,t6r),e(Rr,Kc),e(Kc,a6r),e(Kc,Y4e),e(Y4e,n6r),e(Kc,s6r),e(Kc,K4e),e(K4e,l6r),e(Kc,i6r),e(Rr,d6r),e(Rr,xL),e(xL,c6r),e(xL,Z4e),e(Z4e,f6r),e(xL,m6r),e(Rr,g6r),e(Rr,wt),g(kL,wt,null),e(wt,h6r),e(wt,ebe),e(ebe,p6r),e(wt,_6r),e(wt,Zc),e(Zc,u6r),e(Zc,obe),e(obe,b6r),e(Zc,v6r),e(Zc,rbe),e(rbe,T6r),e(Zc,F6r),e(wt,C6r),e(wt,tbe),e(tbe,M6r),e(wt,E6r),g(RL,wt,null),e(Rr,y6r),e(Rr,Ao),g(SL,Ao,null),e(Ao,w6r),e(Ao,abe),e(abe,A6r),e(Ao,L6r),e(Ao,Bn),e(Bn,B6r),e(Bn,nbe),e(nbe,x6r),e(Bn,k6r),e(Bn,sbe),e(sbe,R6r),e(Bn,S6r),e(Bn,lbe),e(lbe,P6r),e(Bn,$6r),e(Ao,I6r),e(Ao,z),e(z,sF),e(sF,ibe),e(ibe,j6r),e(sF,N6r),e(sF,lV),e(lV,D6r),e(sF,q6r),e(z,G6r),e(z,lF),e(lF,dbe),e(dbe,O6r),e(lF,X6r),e(lF,iV),e(iV,V6r),e(lF,z6r),e(z,W6r),e(z,iF),e(iF,cbe),e(cbe,Q6r),e(iF,H6r),e(iF,dV),e(dV,U6r),e(iF,J6r),e(z,Y6r),e(z,dF),e(dF,fbe),e(fbe,K6r),e(dF,Z6r),e(dF,cV),e(cV,e0r),e(dF,o0r),e(z,r0r),e(z,cF),e(cF,mbe),e(mbe,t0r),e(cF,a0r),e(cF,fV),e(fV,n0r),e(cF,s0r),e(z,l0r),e(z,fF),e(fF,gbe),e(gbe,i0r),e(fF,d0r),e(fF,mV),e(mV,c0r),e(fF,f0r),e(z,m0r),e(z,mF),e(mF,hbe),e(hbe,g0r),e(mF,h0r),e(mF,gV),e(gV,p0r),e(mF,_0r),e(z,u0r),e(z,gF),e(gF,pbe),e(pbe,b0r),e(gF,v0r),e(gF,hV),e(hV,T0r),e(gF,F0r),e(z,C0r),e(z,hF),e(hF,_be),e(_be,M0r),e(hF,E0r),e(hF,pV),e(pV,y0r),e(hF,w0r),e(z,A0r),e(z,pF),e(pF,ube),e(ube,L0r),e(pF,B0r),e(pF,_V),e(_V,x0r),e(pF,k0r),e(z,R0r),e(z,_F),e(_F,bbe),e(bbe,S0r),e(_F,P0r),e(_F,uV),e(uV,$0r),e(_F,I0r),e(z,j0r),e(z,uF),e(uF,vbe),e(vbe,N0r),e(uF,D0r),e(uF,bV),e(bV,q0r),e(uF,G0r),e(z,O0r),e(z,bF),e(bF,Tbe),e(Tbe,X0r),e(bF,V0r),e(bF,vV),e(vV,z0r),e(bF,W0r),e(z,Q0r),e(z,vF),e(vF,Fbe),e(Fbe,H0r),e(vF,U0r),e(vF,TV),e(TV,J0r),e(vF,Y0r),e(z,K0r),e(z,TF),e(TF,Cbe),e(Cbe,Z0r),e(TF,eTr),e(TF,FV),e(FV,oTr),e(TF,rTr),e(z,tTr),e(z,FF),e(FF,Mbe),e(Mbe,aTr),e(FF,nTr),e(FF,CV),e(CV,sTr),e(FF,lTr),e(z,iTr),e(z,CF),e(CF,Ebe),e(Ebe,dTr),e(CF,cTr),e(CF,MV),e(MV,fTr),e(CF,mTr),e(z,gTr),e(z,MF),e(MF,ybe),e(ybe,hTr),e(MF,pTr),e(MF,EV),e(EV,_Tr),e(MF,uTr),e(z,bTr),e(z,EF),e(EF,wbe),e(wbe,vTr),e(EF,TTr),e(EF,yV),e(yV,FTr),e(EF,CTr),e(z,MTr),e(z,yF),e(yF,Abe),e(Abe,ETr),e(yF,yTr),e(yF,wV),e(wV,wTr),e(yF,ATr),e(z,LTr),e(z,wF),e(wF,Lbe),e(Lbe,BTr),e(wF,xTr),e(wF,AV),e(AV,kTr),e(wF,RTr),e(z,STr),e(z,AF),e(AF,Bbe),e(Bbe,PTr),e(AF,$Tr),e(AF,LV),e(LV,ITr),e(AF,jTr),e(z,NTr),e(z,LF),e(LF,xbe),e(xbe,DTr),e(LF,qTr),e(LF,BV),e(BV,GTr),e(LF,OTr),e(z,XTr),e(z,BF),e(BF,kbe),e(kbe,VTr),e(BF,zTr),e(BF,xV),e(xV,WTr),e(BF,QTr),e(z,HTr),e(z,xF),e(xF,Rbe),e(Rbe,UTr),e(xF,JTr),e(xF,kV),e(kV,YTr),e(xF,KTr),e(Ao,ZTr),e(Ao,Sbe),e(Sbe,eFr),e(Ao,oFr),g(PL,Ao,null),b(c,URe,u),b(c,ef,u),e(ef,kF),e(kF,Pbe),g($L,Pbe,null),e(ef,rFr),e(ef,$be),e($be,tFr),b(c,JRe,u),b(c,Sr,u),g(IL,Sr,null),e(Sr,aFr),e(Sr,of),e(of,nFr),e(of,Ibe),e(Ibe,sFr),e(of,lFr),e(of,jbe),e(jbe,iFr),e(of,dFr),e(Sr,cFr),e(Sr,jL),e(jL,fFr),e(jL,Nbe),e(Nbe,mFr),e(jL,gFr),e(Sr,hFr),e(Sr,At),g(NL,At,null),e(At,pFr),e(At,Dbe),e(Dbe,_Fr),e(At,uFr),e(At,rf),e(rf,bFr),e(rf,qbe),e(qbe,vFr),e(rf,TFr),e(rf,Gbe),e(Gbe,FFr),e(rf,CFr),e(At,MFr),e(At,Obe),e(Obe,EFr),e(At,yFr),g(DL,At,null),e(Sr,wFr),e(Sr,Lo),g(qL,Lo,null),e(Lo,AFr),e(Lo,Xbe),e(Xbe,LFr),e(Lo,BFr),e(Lo,xn),e(xn,xFr),e(xn,Vbe),e(Vbe,kFr),e(xn,RFr),e(xn,zbe),e(zbe,SFr),e(xn,PFr),e(xn,Wbe),e(Wbe,$Fr),e(xn,IFr),e(Lo,jFr),e(Lo,ca),e(ca,RF),e(RF,Qbe),e(Qbe,NFr),e(RF,DFr),e(RF,RV),e(RV,qFr),e(RF,GFr),e(ca,OFr),e(ca,SF),e(SF,Hbe),e(Hbe,XFr),e(SF,VFr),e(SF,SV),e(SV,zFr),e(SF,WFr),e(ca,QFr),e(ca,PF),e(PF,Ube),e(Ube,HFr),e(PF,UFr),e(PF,PV),e(PV,JFr),e(PF,YFr),e(ca,KFr),e(ca,$F),e($F,Jbe),e(Jbe,ZFr),e($F,eCr),e($F,$V),e($V,oCr),e($F,rCr),e(ca,tCr),e(ca,IF),e(IF,Ybe),e(Ybe,aCr),e(IF,nCr),e(IF,IV),e(IV,sCr),e(IF,lCr),e(Lo,iCr),e(Lo,Kbe),e(Kbe,dCr),e(Lo,cCr),g(GL,Lo,null),b(c,YRe,u),b(c,tf,u),e(tf,jF),e(jF,Zbe),g(OL,Zbe,null),e(tf,fCr),e(tf,e5e),e(e5e,mCr),b(c,KRe,u),b(c,Pr,u),g(XL,Pr,null),e(Pr,gCr),e(Pr,af),e(af,hCr),e(af,o5e),e(o5e,pCr),e(af,_Cr),e(af,r5e),e(r5e,uCr),e(af,bCr),e(Pr,vCr),e(Pr,VL),e(VL,TCr),e(VL,t5e),e(t5e,FCr),e(VL,CCr),e(Pr,MCr),e(Pr,Lt),g(zL,Lt,null),e(Lt,ECr),e(Lt,a5e),e(a5e,yCr),e(Lt,wCr),e(Lt,nf),e(nf,ACr),e(nf,n5e),e(n5e,LCr),e(nf,BCr),e(nf,s5e),e(s5e,xCr),e(nf,kCr),e(Lt,RCr),e(Lt,l5e),e(l5e,SCr),e(Lt,PCr),g(WL,Lt,null),e(Pr,$Cr),e(Pr,Bo),g(QL,Bo,null),e(Bo,ICr),e(Bo,i5e),e(i5e,jCr),e(Bo,NCr),e(Bo,kn),e(kn,DCr),e(kn,d5e),e(d5e,qCr),e(kn,GCr),e(kn,c5e),e(c5e,OCr),e(kn,XCr),e(kn,f5e),e(f5e,VCr),e(kn,zCr),e(Bo,WCr),e(Bo,fe),e(fe,NF),e(NF,m5e),e(m5e,QCr),e(NF,HCr),e(NF,jV),e(jV,UCr),e(NF,JCr),e(fe,YCr),e(fe,DF),e(DF,g5e),e(g5e,KCr),e(DF,ZCr),e(DF,NV),e(NV,eMr),e(DF,oMr),e(fe,rMr),e(fe,qF),e(qF,h5e),e(h5e,tMr),e(qF,aMr),e(qF,DV),e(DV,nMr),e(qF,sMr),e(fe,lMr),e(fe,GF),e(GF,p5e),e(p5e,iMr),e(GF,dMr),e(GF,qV),e(qV,cMr),e(GF,fMr),e(fe,mMr),e(fe,OF),e(OF,_5e),e(_5e,gMr),e(OF,hMr),e(OF,GV),e(GV,pMr),e(OF,_Mr),e(fe,uMr),e(fe,XF),e(XF,u5e),e(u5e,bMr),e(XF,vMr),e(XF,OV),e(OV,TMr),e(XF,FMr),e(fe,CMr),e(fe,VF),e(VF,b5e),e(b5e,MMr),e(VF,EMr),e(VF,XV),e(XV,yMr),e(VF,wMr),e(fe,AMr),e(fe,zF),e(zF,v5e),e(v5e,LMr),e(zF,BMr),e(zF,VV),e(VV,xMr),e(zF,kMr),e(fe,RMr),e(fe,WF),e(WF,T5e),e(T5e,SMr),e(WF,PMr),e(WF,zV),e(zV,$Mr),e(WF,IMr),e(fe,jMr),e(fe,QF),e(QF,F5e),e(F5e,NMr),e(QF,DMr),e(QF,WV),e(WV,qMr),e(QF,GMr),e(fe,OMr),e(fe,HF),e(HF,C5e),e(C5e,XMr),e(HF,VMr),e(HF,QV),e(QV,zMr),e(HF,WMr),e(fe,QMr),e(fe,UF),e(UF,M5e),e(M5e,HMr),e(UF,UMr),e(UF,HV),e(HV,JMr),e(UF,YMr),e(Bo,KMr),e(Bo,E5e),e(E5e,ZMr),e(Bo,eEr),g(HL,Bo,null),b(c,ZRe,u),b(c,sf,u),e(sf,JF),e(JF,y5e),g(UL,y5e,null),e(sf,oEr),e(sf,w5e),e(w5e,rEr),b(c,eSe,u),b(c,$r,u),g(JL,$r,null),e($r,tEr),e($r,lf),e(lf,aEr),e(lf,A5e),e(A5e,nEr),e(lf,sEr),e(lf,L5e),e(L5e,lEr),e(lf,iEr),e($r,dEr),e($r,YL),e(YL,cEr),e(YL,B5e),e(B5e,fEr),e(YL,mEr),e($r,gEr),e($r,Bt),g(KL,Bt,null),e(Bt,hEr),e(Bt,x5e),e(x5e,pEr),e(Bt,_Er),e(Bt,df),e(df,uEr),e(df,k5e),e(k5e,bEr),e(df,vEr),e(df,R5e),e(R5e,TEr),e(df,FEr),e(Bt,CEr),e(Bt,S5e),e(S5e,MEr),e(Bt,EEr),g(ZL,Bt,null),e($r,yEr),e($r,xo),g(e7,xo,null),e(xo,wEr),e(xo,P5e),e(P5e,AEr),e(xo,LEr),e(xo,Rn),e(Rn,BEr),e(Rn,$5e),e($5e,xEr),e(Rn,kEr),e(Rn,I5e),e(I5e,REr),e(Rn,SEr),e(Rn,j5e),e(j5e,PEr),e(Rn,$Er),e(xo,IEr),e(xo,be),e(be,YF),e(YF,N5e),e(N5e,jEr),e(YF,NEr),e(YF,UV),e(UV,DEr),e(YF,qEr),e(be,GEr),e(be,KF),e(KF,D5e),e(D5e,OEr),e(KF,XEr),e(KF,JV),e(JV,VEr),e(KF,zEr),e(be,WEr),e(be,ZF),e(ZF,q5e),e(q5e,QEr),e(ZF,HEr),e(ZF,YV),e(YV,UEr),e(ZF,JEr),e(be,YEr),e(be,eC),e(eC,G5e),e(G5e,KEr),e(eC,ZEr),e(eC,KV),e(KV,e3r),e(eC,o3r),e(be,r3r),e(be,oC),e(oC,O5e),e(O5e,t3r),e(oC,a3r),e(oC,ZV),e(ZV,n3r),e(oC,s3r),e(be,l3r),e(be,rC),e(rC,X5e),e(X5e,i3r),e(rC,d3r),e(rC,ez),e(ez,c3r),e(rC,f3r),e(be,m3r),e(be,tC),e(tC,V5e),e(V5e,g3r),e(tC,h3r),e(tC,oz),e(oz,p3r),e(tC,_3r),e(be,u3r),e(be,aC),e(aC,z5e),e(z5e,b3r),e(aC,v3r),e(aC,rz),e(rz,T3r),e(aC,F3r),e(be,C3r),e(be,nC),e(nC,W5e),e(W5e,M3r),e(nC,E3r),e(nC,tz),e(tz,y3r),e(nC,w3r),e(be,A3r),e(be,sC),e(sC,Q5e),e(Q5e,L3r),e(sC,B3r),e(sC,az),e(az,x3r),e(sC,k3r),e(xo,R3r),e(xo,H5e),e(H5e,S3r),e(xo,P3r),g(o7,xo,null),b(c,oSe,u),b(c,cf,u),e(cf,lC),e(lC,U5e),g(r7,U5e,null),e(cf,$3r),e(cf,J5e),e(J5e,I3r),b(c,rSe,u),b(c,Ir,u),g(t7,Ir,null),e(Ir,j3r),e(Ir,ff),e(ff,N3r),e(ff,Y5e),e(Y5e,D3r),e(ff,q3r),e(ff,K5e),e(K5e,G3r),e(ff,O3r),e(Ir,X3r),e(Ir,a7),e(a7,V3r),e(a7,Z5e),e(Z5e,z3r),e(a7,W3r),e(Ir,Q3r),e(Ir,xt),g(n7,xt,null),e(xt,H3r),e(xt,e2e),e(e2e,U3r),e(xt,J3r),e(xt,mf),e(mf,Y3r),e(mf,o2e),e(o2e,K3r),e(mf,Z3r),e(mf,r2e),e(r2e,eyr),e(mf,oyr),e(xt,ryr),e(xt,t2e),e(t2e,tyr),e(xt,ayr),g(s7,xt,null),e(Ir,nyr),e(Ir,ko),g(l7,ko,null),e(ko,syr),e(ko,a2e),e(a2e,lyr),e(ko,iyr),e(ko,Sn),e(Sn,dyr),e(Sn,n2e),e(n2e,cyr),e(Sn,fyr),e(Sn,s2e),e(s2e,myr),e(Sn,gyr),e(Sn,l2e),e(l2e,hyr),e(Sn,pyr),e(ko,_yr),e(ko,Me),e(Me,iC),e(iC,i2e),e(i2e,uyr),e(iC,byr),e(iC,nz),e(nz,vyr),e(iC,Tyr),e(Me,Fyr),e(Me,dC),e(dC,d2e),e(d2e,Cyr),e(dC,Myr),e(dC,sz),e(sz,Eyr),e(dC,yyr),e(Me,wyr),e(Me,cC),e(cC,c2e),e(c2e,Ayr),e(cC,Lyr),e(cC,lz),e(lz,Byr),e(cC,xyr),e(Me,kyr),e(Me,fC),e(fC,f2e),e(f2e,Ryr),e(fC,Syr),e(fC,iz),e(iz,Pyr),e(fC,$yr),e(Me,Iyr),e(Me,mC),e(mC,m2e),e(m2e,jyr),e(mC,Nyr),e(mC,dz),e(dz,Dyr),e(mC,qyr),e(Me,Gyr),e(Me,gC),e(gC,g2e),e(g2e,Oyr),e(gC,Xyr),e(gC,cz),e(cz,Vyr),e(gC,zyr),e(Me,Wyr),e(Me,hC),e(hC,h2e),e(h2e,Qyr),e(hC,Hyr),e(hC,fz),e(fz,Uyr),e(hC,Jyr),e(Me,Yyr),e(Me,pC),e(pC,p2e),e(p2e,Kyr),e(pC,Zyr),e(pC,mz),e(mz,ewr),e(pC,owr),e(Me,rwr),e(Me,_C),e(_C,_2e),e(_2e,twr),e(_C,awr),e(_C,gz),e(gz,nwr),e(_C,swr),e(ko,lwr),e(ko,u2e),e(u2e,iwr),e(ko,dwr),g(i7,ko,null),b(c,tSe,u),b(c,gf,u),e(gf,uC),e(uC,b2e),g(d7,b2e,null),e(gf,cwr),e(gf,v2e),e(v2e,fwr),b(c,aSe,u),b(c,jr,u),g(c7,jr,null),e(jr,mwr),e(jr,hf),e(hf,gwr),e(hf,T2e),e(T2e,hwr),e(hf,pwr),e(hf,F2e),e(F2e,_wr),e(hf,uwr),e(jr,bwr),e(jr,f7),e(f7,vwr),e(f7,C2e),e(C2e,Twr),e(f7,Fwr),e(jr,Cwr),e(jr,kt),g(m7,kt,null),e(kt,Mwr),e(kt,M2e),e(M2e,Ewr),e(kt,ywr),e(kt,pf),e(pf,wwr),e(pf,E2e),e(E2e,Awr),e(pf,Lwr),e(pf,y2e),e(y2e,Bwr),e(pf,xwr),e(kt,kwr),e(kt,w2e),e(w2e,Rwr),e(kt,Swr),g(g7,kt,null),e(jr,Pwr),e(jr,Ro),g(h7,Ro,null),e(Ro,$wr),e(Ro,A2e),e(A2e,Iwr),e(Ro,jwr),e(Ro,Pn),e(Pn,Nwr),e(Pn,L2e),e(L2e,Dwr),e(Pn,qwr),e(Pn,B2e),e(B2e,Gwr),e(Pn,Owr),e(Pn,x2e),e(x2e,Xwr),e(Pn,Vwr),e(Ro,zwr),e(Ro,ve),e(ve,bC),e(bC,k2e),e(k2e,Wwr),e(bC,Qwr),e(bC,hz),e(hz,Hwr),e(bC,Uwr),e(ve,Jwr),e(ve,vC),e(vC,R2e),e(R2e,Ywr),e(vC,Kwr),e(vC,pz),e(pz,Zwr),e(vC,eAr),e(ve,oAr),e(ve,TC),e(TC,S2e),e(S2e,rAr),e(TC,tAr),e(TC,_z),e(_z,aAr),e(TC,nAr),e(ve,sAr),e(ve,FC),e(FC,P2e),e(P2e,lAr),e(FC,iAr),e(FC,uz),e(uz,dAr),e(FC,cAr),e(ve,fAr),e(ve,CC),e(CC,$2e),e($2e,mAr),e(CC,gAr),e(CC,bz),e(bz,hAr),e(CC,pAr),e(ve,_Ar),e(ve,MC),e(MC,I2e),e(I2e,uAr),e(MC,bAr),e(MC,vz),e(vz,vAr),e(MC,TAr),e(ve,FAr),e(ve,EC),e(EC,j2e),e(j2e,CAr),e(EC,MAr),e(EC,Tz),e(Tz,EAr),e(EC,yAr),e(ve,wAr),e(ve,yC),e(yC,N2e),e(N2e,AAr),e(yC,LAr),e(yC,Fz),e(Fz,BAr),e(yC,xAr),e(ve,kAr),e(ve,wC),e(wC,D2e),e(D2e,RAr),e(wC,SAr),e(wC,Cz),e(Cz,PAr),e(wC,$Ar),e(ve,IAr),e(ve,AC),e(AC,q2e),e(q2e,jAr),e(AC,NAr),e(AC,Mz),e(Mz,DAr),e(AC,qAr),e(Ro,GAr),e(Ro,G2e),e(G2e,OAr),e(Ro,XAr),g(p7,Ro,null),b(c,nSe,u),b(c,_f,u),e(_f,LC),e(LC,O2e),g(_7,O2e,null),e(_f,VAr),e(_f,X2e),e(X2e,zAr),b(c,sSe,u),b(c,Nr,u),g(u7,Nr,null),e(Nr,WAr),e(Nr,uf),e(uf,QAr),e(uf,V2e),e(V2e,HAr),e(uf,UAr),e(uf,z2e),e(z2e,JAr),e(uf,YAr),e(Nr,KAr),e(Nr,b7),e(b7,ZAr),e(b7,W2e),e(W2e,eLr),e(b7,oLr),e(Nr,rLr),e(Nr,Rt),g(v7,Rt,null),e(Rt,tLr),e(Rt,Q2e),e(Q2e,aLr),e(Rt,nLr),e(Rt,bf),e(bf,sLr),e(bf,H2e),e(H2e,lLr),e(bf,iLr),e(bf,U2e),e(U2e,dLr),e(bf,cLr),e(Rt,fLr),e(Rt,J2e),e(J2e,mLr),e(Rt,gLr),g(T7,Rt,null),e(Nr,hLr),e(Nr,So),g(F7,So,null),e(So,pLr),e(So,Y2e),e(Y2e,_Lr),e(So,uLr),e(So,$n),e($n,bLr),e($n,K2e),e(K2e,vLr),e($n,TLr),e($n,Z2e),e(Z2e,FLr),e($n,CLr),e($n,eve),e(eve,MLr),e($n,ELr),e(So,yLr),e(So,Te),e(Te,BC),e(BC,ove),e(ove,wLr),e(BC,ALr),e(BC,Ez),e(Ez,LLr),e(BC,BLr),e(Te,xLr),e(Te,xC),e(xC,rve),e(rve,kLr),e(xC,RLr),e(xC,yz),e(yz,SLr),e(xC,PLr),e(Te,$Lr),e(Te,kC),e(kC,tve),e(tve,ILr),e(kC,jLr),e(kC,wz),e(wz,NLr),e(kC,DLr),e(Te,qLr),e(Te,RC),e(RC,ave),e(ave,GLr),e(RC,OLr),e(RC,Az),e(Az,XLr),e(RC,VLr),e(Te,zLr),e(Te,SC),e(SC,nve),e(nve,WLr),e(SC,QLr),e(SC,Lz),e(Lz,HLr),e(SC,ULr),e(Te,JLr),e(Te,PC),e(PC,sve),e(sve,YLr),e(PC,KLr),e(PC,Bz),e(Bz,ZLr),e(PC,e7r),e(Te,o7r),e(Te,$C),e($C,lve),e(lve,r7r),e($C,t7r),e($C,xz),e(xz,a7r),e($C,n7r),e(Te,s7r),e(Te,IC),e(IC,ive),e(ive,l7r),e(IC,i7r),e(IC,kz),e(kz,d7r),e(IC,c7r),e(Te,f7r),e(Te,jC),e(jC,dve),e(dve,m7r),e(jC,g7r),e(jC,Rz),e(Rz,h7r),e(jC,p7r),e(Te,_7r),e(Te,NC),e(NC,cve),e(cve,u7r),e(NC,b7r),e(NC,Sz),e(Sz,v7r),e(NC,T7r),e(So,F7r),e(So,fve),e(fve,C7r),e(So,M7r),g(C7,So,null),b(c,lSe,u),b(c,vf,u),e(vf,DC),e(DC,mve),g(M7,mve,null),e(vf,E7r),e(vf,gve),e(gve,y7r),b(c,iSe,u),b(c,Dr,u),g(E7,Dr,null),e(Dr,w7r),e(Dr,Tf),e(Tf,A7r),e(Tf,hve),e(hve,L7r),e(Tf,B7r),e(Tf,pve),e(pve,x7r),e(Tf,k7r),e(Dr,R7r),e(Dr,y7),e(y7,S7r),e(y7,_ve),e(_ve,P7r),e(y7,$7r),e(Dr,I7r),e(Dr,St),g(w7,St,null),e(St,j7r),e(St,uve),e(uve,N7r),e(St,D7r),e(St,Ff),e(Ff,q7r),e(Ff,bve),e(bve,G7r),e(Ff,O7r),e(Ff,vve),e(vve,X7r),e(Ff,V7r),e(St,z7r),e(St,Tve),e(Tve,W7r),e(St,Q7r),g(A7,St,null),e(Dr,H7r),e(Dr,Po),g(L7,Po,null),e(Po,U7r),e(Po,Fve),e(Fve,J7r),e(Po,Y7r),e(Po,In),e(In,K7r),e(In,Cve),e(Cve,Z7r),e(In,e8r),e(In,Mve),e(Mve,o8r),e(In,r8r),e(In,Eve),e(Eve,t8r),e(In,a8r),e(Po,n8r),e(Po,Se),e(Se,qC),e(qC,yve),e(yve,s8r),e(qC,l8r),e(qC,Pz),e(Pz,i8r),e(qC,d8r),e(Se,c8r),e(Se,GC),e(GC,wve),e(wve,f8r),e(GC,m8r),e(GC,$z),e($z,g8r),e(GC,h8r),e(Se,p8r),e(Se,OC),e(OC,Ave),e(Ave,_8r),e(OC,u8r),e(OC,Iz),e(Iz,b8r),e(OC,v8r),e(Se,T8r),e(Se,XC),e(XC,Lve),e(Lve,F8r),e(XC,C8r),e(XC,jz),e(jz,M8r),e(XC,E8r),e(Se,y8r),e(Se,VC),e(VC,Bve),e(Bve,w8r),e(VC,A8r),e(VC,Nz),e(Nz,L8r),e(VC,B8r),e(Se,x8r),e(Se,zC),e(zC,xve),e(xve,k8r),e(zC,R8r),e(zC,Dz),e(Dz,S8r),e(zC,P8r),e(Se,$8r),e(Se,WC),e(WC,kve),e(kve,I8r),e(WC,j8r),e(WC,qz),e(qz,N8r),e(WC,D8r),e(Se,q8r),e(Se,QC),e(QC,Rve),e(Rve,G8r),e(QC,O8r),e(QC,Gz),e(Gz,X8r),e(QC,V8r),e(Po,z8r),e(Po,Sve),e(Sve,W8r),e(Po,Q8r),g(B7,Po,null),b(c,dSe,u),b(c,Cf,u),e(Cf,HC),e(HC,Pve),g(x7,Pve,null),e(Cf,H8r),e(Cf,$ve),e($ve,U8r),b(c,cSe,u),b(c,qr,u),g(k7,qr,null),e(qr,J8r),e(qr,Mf),e(Mf,Y8r),e(Mf,Ive),e(Ive,K8r),e(Mf,Z8r),e(Mf,jve),e(jve,e9r),e(Mf,o9r),e(qr,r9r),e(qr,R7),e(R7,t9r),e(R7,Nve),e(Nve,a9r),e(R7,n9r),e(qr,s9r),e(qr,Pt),g(S7,Pt,null),e(Pt,l9r),e(Pt,Dve),e(Dve,i9r),e(Pt,d9r),e(Pt,Ef),e(Ef,c9r),e(Ef,qve),e(qve,f9r),e(Ef,m9r),e(Ef,Gve),e(Gve,g9r),e(Ef,h9r),e(Pt,p9r),e(Pt,Ove),e(Ove,_9r),e(Pt,u9r),g(P7,Pt,null),e(qr,b9r),e(qr,$o),g($7,$o,null),e($o,v9r),e($o,Xve),e(Xve,T9r),e($o,F9r),e($o,jn),e(jn,C9r),e(jn,Vve),e(Vve,M9r),e(jn,E9r),e(jn,zve),e(zve,y9r),e(jn,w9r),e(jn,Wve),e(Wve,A9r),e(jn,L9r),e($o,B9r),e($o,Pe),e(Pe,UC),e(UC,Qve),e(Qve,x9r),e(UC,k9r),e(UC,Oz),e(Oz,R9r),e(UC,S9r),e(Pe,P9r),e(Pe,JC),e(JC,Hve),e(Hve,$9r),e(JC,I9r),e(JC,Xz),e(Xz,j9r),e(JC,N9r),e(Pe,D9r),e(Pe,YC),e(YC,Uve),e(Uve,q9r),e(YC,G9r),e(YC,Vz),e(Vz,O9r),e(YC,X9r),e(Pe,V9r),e(Pe,KC),e(KC,Jve),e(Jve,z9r),e(KC,W9r),e(KC,zz),e(zz,Q9r),e(KC,H9r),e(Pe,U9r),e(Pe,ZC),e(ZC,Yve),e(Yve,J9r),e(ZC,Y9r),e(ZC,Wz),e(Wz,K9r),e(ZC,Z9r),e(Pe,eBr),e(Pe,eM),e(eM,Kve),e(Kve,oBr),e(eM,rBr),e(eM,Qz),e(Qz,tBr),e(eM,aBr),e(Pe,nBr),e(Pe,oM),e(oM,Zve),e(Zve,sBr),e(oM,lBr),e(oM,Hz),e(Hz,iBr),e(oM,dBr),e(Pe,cBr),e(Pe,rM),e(rM,e6e),e(e6e,fBr),e(rM,mBr),e(rM,Uz),e(Uz,gBr),e(rM,hBr),e($o,pBr),e($o,o6e),e(o6e,_Br),e($o,uBr),g(I7,$o,null),b(c,fSe,u),b(c,yf,u),e(yf,tM),e(tM,r6e),g(j7,r6e,null),e(yf,bBr),e(yf,t6e),e(t6e,vBr),b(c,mSe,u),b(c,Gr,u),g(N7,Gr,null),e(Gr,TBr),e(Gr,wf),e(wf,FBr),e(wf,a6e),e(a6e,CBr),e(wf,MBr),e(wf,n6e),e(n6e,EBr),e(wf,yBr),e(Gr,wBr),e(Gr,D7),e(D7,ABr),e(D7,s6e),e(s6e,LBr),e(D7,BBr),e(Gr,xBr),e(Gr,$t),g(q7,$t,null),e($t,kBr),e($t,l6e),e(l6e,RBr),e($t,SBr),e($t,Af),e(Af,PBr),e(Af,i6e),e(i6e,$Br),e(Af,IBr),e(Af,d6e),e(d6e,jBr),e(Af,NBr),e($t,DBr),e($t,c6e),e(c6e,qBr),e($t,GBr),g(G7,$t,null),e(Gr,OBr),e(Gr,Io),g(O7,Io,null),e(Io,XBr),e(Io,f6e),e(f6e,VBr),e(Io,zBr),e(Io,Nn),e(Nn,WBr),e(Nn,m6e),e(m6e,QBr),e(Nn,HBr),e(Nn,g6e),e(g6e,UBr),e(Nn,JBr),e(Nn,h6e),e(h6e,YBr),e(Nn,KBr),e(Io,ZBr),e(Io,p6e),e(p6e,aM),e(aM,_6e),e(_6e,exr),e(aM,oxr),e(aM,Jz),e(Jz,rxr),e(aM,txr),e(Io,axr),e(Io,u6e),e(u6e,nxr),e(Io,sxr),g(X7,Io,null),b(c,gSe,u),b(c,Lf,u),e(Lf,nM),e(nM,b6e),g(V7,b6e,null),e(Lf,lxr),e(Lf,v6e),e(v6e,ixr),b(c,hSe,u),b(c,Or,u),g(z7,Or,null),e(Or,dxr),e(Or,Bf),e(Bf,cxr),e(Bf,T6e),e(T6e,fxr),e(Bf,mxr),e(Bf,F6e),e(F6e,gxr),e(Bf,hxr),e(Or,pxr),e(Or,W7),e(W7,_xr),e(W7,C6e),e(C6e,uxr),e(W7,bxr),e(Or,vxr),e(Or,It),g(Q7,It,null),e(It,Txr),e(It,M6e),e(M6e,Fxr),e(It,Cxr),e(It,xf),e(xf,Mxr),e(xf,E6e),e(E6e,Exr),e(xf,yxr),e(xf,y6e),e(y6e,wxr),e(xf,Axr),e(It,Lxr),e(It,w6e),e(w6e,Bxr),e(It,xxr),g(H7,It,null),e(Or,kxr),e(Or,jo),g(U7,jo,null),e(jo,Rxr),e(jo,A6e),e(A6e,Sxr),e(jo,Pxr),e(jo,Dn),e(Dn,$xr),e(Dn,L6e),e(L6e,Ixr),e(Dn,jxr),e(Dn,B6e),e(B6e,Nxr),e(Dn,Dxr),e(Dn,x6e),e(x6e,qxr),e(Dn,Gxr),e(jo,Oxr),e(jo,J7),e(J7,sM),e(sM,k6e),e(k6e,Xxr),e(sM,Vxr),e(sM,Yz),e(Yz,zxr),e(sM,Wxr),e(J7,Qxr),e(J7,lM),e(lM,R6e),e(R6e,Hxr),e(lM,Uxr),e(lM,Kz),e(Kz,Jxr),e(lM,Yxr),e(jo,Kxr),e(jo,S6e),e(S6e,Zxr),e(jo,ekr),g(Y7,jo,null),b(c,pSe,u),b(c,kf,u),e(kf,iM),e(iM,P6e),g(K7,P6e,null),e(kf,okr),e(kf,$6e),e($6e,rkr),b(c,_Se,u),b(c,Xr,u),g(Z7,Xr,null),e(Xr,tkr),e(Xr,Rf),e(Rf,akr),e(Rf,I6e),e(I6e,nkr),e(Rf,skr),e(Rf,j6e),e(j6e,lkr),e(Rf,ikr),e(Xr,dkr),e(Xr,e8),e(e8,ckr),e(e8,N6e),e(N6e,fkr),e(e8,mkr),e(Xr,gkr),e(Xr,jt),g(o8,jt,null),e(jt,hkr),e(jt,D6e),e(D6e,pkr),e(jt,_kr),e(jt,Sf),e(Sf,ukr),e(Sf,q6e),e(q6e,bkr),e(Sf,vkr),e(Sf,G6e),e(G6e,Tkr),e(Sf,Fkr),e(jt,Ckr),e(jt,O6e),e(O6e,Mkr),e(jt,Ekr),g(r8,jt,null),e(Xr,ykr),e(Xr,No),g(t8,No,null),e(No,wkr),e(No,X6e),e(X6e,Akr),e(No,Lkr),e(No,qn),e(qn,Bkr),e(qn,V6e),e(V6e,xkr),e(qn,kkr),e(qn,z6e),e(z6e,Rkr),e(qn,Skr),e(qn,W6e),e(W6e,Pkr),e(qn,$kr),e(No,Ikr),e(No,Q6e),e(Q6e,dM),e(dM,H6e),e(H6e,jkr),e(dM,Nkr),e(dM,Zz),e(Zz,Dkr),e(dM,qkr),e(No,Gkr),e(No,U6e),e(U6e,Okr),e(No,Xkr),g(a8,No,null),uSe=!0},p(c,[u]){const n8={};u&2&&(n8.$$scope={dirty:u,ctx:c}),Gf.$set(n8);const J6e={};u&2&&(J6e.$$scope={dirty:u,ctx:c}),xh.$set(J6e);const Y6e={};u&2&&(Y6e.$$scope={dirty:u,ctx:c}),Gh.$set(Y6e)},i(c){uSe||(h(me.$$.fragment,c),h(qa.$$.fragment,c),h(gE.$$.fragment,c),h(hE.$$.fragment,c),h(Gf.$$.fragment,c),h(pE.$$.fragment,c),h(_E.$$.fragment,c),h(vE.$$.fragment,c),h(TE.$$.fragment,c),h(FE.$$.fragment,c),h(CE.$$.fragment,c),h(ME.$$.fragment,c),h(wE.$$.fragment,c),h(AE.$$.fragment,c),h(LE.$$.fragment,c),h(BE.$$.fragment,c),h(xE.$$.fragment,c),h(SE.$$.fragment,c),h(xh.$$.fragment,c),h(PE.$$.fragment,c),h($E.$$.fragment,c),h(IE.$$.fragment,c),h(jE.$$.fragment,c),h(qE.$$.fragment,c),h(Gh.$$.fragment,c),h(GE.$$.fragment,c),h(OE.$$.fragment,c),h(XE.$$.fragment,c),h(VE.$$.fragment,c),h(WE.$$.fragment,c),h(QE.$$.fragment,c),h(HE.$$.fragment,c),h(UE.$$.fragment,c),h(JE.$$.fragment,c),h(YE.$$.fragment,c),h(ZE.$$.fragment,c),h(e3.$$.fragment,c),h(o3.$$.fragment,c),h(r3.$$.fragment,c),h(t3.$$.fragment,c),h(a3.$$.fragment,c),h(s3.$$.fragment,c),h(l3.$$.fragment,c),h(i3.$$.fragment,c),h(d3.$$.fragment,c),h(c3.$$.fragment,c),h(f3.$$.fragment,c),h(g3.$$.fragment,c),h(h3.$$.fragment,c),h(p3.$$.fragment,c),h(_3.$$.fragment,c),h(u3.$$.fragment,c),h(b3.$$.fragment,c),h(T3.$$.fragment,c),h(F3.$$.fragment,c),h(C3.$$.fragment,c),h(M3.$$.fragment,c),h(E3.$$.fragment,c),h(y3.$$.fragment,c),h(A3.$$.fragment,c),h(L3.$$.fragment,c),h(B3.$$.fragment,c),h(x3.$$.fragment,c),h(k3.$$.fragment,c),h(R3.$$.fragment,c),h(P3.$$.fragment,c),h($3.$$.fragment,c),h(I3.$$.fragment,c),h(j3.$$.fragment,c),h(N3.$$.fragment,c),h(D3.$$.fragment,c),h(G3.$$.fragment,c),h(O3.$$.fragment,c),h(X3.$$.fragment,c),h(V3.$$.fragment,c),h(z3.$$.fragment,c),h(W3.$$.fragment,c),h(H3.$$.fragment,c),h(U3.$$.fragment,c),h(J3.$$.fragment,c),h(Y3.$$.fragment,c),h(K3.$$.fragment,c),h(Z3.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(Cy.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(yy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(By.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Ry.$$.fragment,c),h(Sy.$$.fragment,c),h(Py.$$.fragment,c),h(Iy.$$.fragment,c),h(jy.$$.fragment,c),h(Ny.$$.fragment,c),h(Dy.$$.fragment,c),h(qy.$$.fragment,c),h(Gy.$$.fragment,c),h(Xy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Wy.$$.fragment,c),h(Qy.$$.fragment,c),h(Hy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Fw.$$.fragment,c),h(Cw.$$.fragment,c),h(Mw.$$.fragment,c),h(yw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(Lw.$$.fragment,c),h(Bw.$$.fragment,c),h(xw.$$.fragment,c),h(Rw.$$.fragment,c),h(Sw.$$.fragment,c),h(Pw.$$.fragment,c),h(Iw.$$.fragment,c),h(jw.$$.fragment,c),h(Nw.$$.fragment,c),h(qw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Xw.$$.fragment,c),h(Vw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(CA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(yA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(BA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(RA.$$.fragment,c),h(SA.$$.fragment,c),h(PA.$$.fragment,c),h(IA.$$.fragment,c),h(jA.$$.fragment,c),h(NA.$$.fragment,c),h(DA.$$.fragment,c),h(qA.$$.fragment,c),h(GA.$$.fragment,c),h(XA.$$.fragment,c),h(VA.$$.fragment,c),h(zA.$$.fragment,c),h(WA.$$.fragment,c),h(QA.$$.fragment,c),h(HA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(FL.$$.fragment,c),h(CL.$$.fragment,c),h(EL.$$.fragment,c),h(yL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(LL.$$.fragment,c),h(BL.$$.fragment,c),h(kL.$$.fragment,c),h(RL.$$.fragment,c),h(SL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(NL.$$.fragment,c),h(DL.$$.fragment,c),h(qL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(XL.$$.fragment,c),h(zL.$$.fragment,c),h(WL.$$.fragment,c),h(QL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(e7.$$.fragment,c),h(o7.$$.fragment,c),h(r7.$$.fragment,c),h(t7.$$.fragment,c),h(n7.$$.fragment,c),h(s7.$$.fragment,c),h(l7.$$.fragment,c),h(i7.$$.fragment,c),h(d7.$$.fragment,c),h(c7.$$.fragment,c),h(m7.$$.fragment,c),h(g7.$$.fragment,c),h(h7.$$.fragment,c),h(p7.$$.fragment,c),h(_7.$$.fragment,c),h(u7.$$.fragment,c),h(v7.$$.fragment,c),h(T7.$$.fragment,c),h(F7.$$.fragment,c),h(C7.$$.fragment,c),h(M7.$$.fragment,c),h(E7.$$.fragment,c),h(w7.$$.fragment,c),h(A7.$$.fragment,c),h(L7.$$.fragment,c),h(B7.$$.fragment,c),h(x7.$$.fragment,c),h(k7.$$.fragment,c),h(S7.$$.fragment,c),h(P7.$$.fragment,c),h($7.$$.fragment,c),h(I7.$$.fragment,c),h(j7.$$.fragment,c),h(N7.$$.fragment,c),h(q7.$$.fragment,c),h(G7.$$.fragment,c),h(O7.$$.fragment,c),h(X7.$$.fragment,c),h(V7.$$.fragment,c),h(z7.$$.fragment,c),h(Q7.$$.fragment,c),h(H7.$$.fragment,c),h(U7.$$.fragment,c),h(Y7.$$.fragment,c),h(K7.$$.fragment,c),h(Z7.$$.fragment,c),h(o8.$$.fragment,c),h(r8.$$.fragment,c),h(t8.$$.fragment,c),h(a8.$$.fragment,c),uSe=!0)},o(c){p(me.$$.fragment,c),p(qa.$$.fragment,c),p(gE.$$.fragment,c),p(hE.$$.fragment,c),p(Gf.$$.fragment,c),p(pE.$$.fragment,c),p(_E.$$.fragment,c),p(vE.$$.fragment,c),p(TE.$$.fragment,c),p(FE.$$.fragment,c),p(CE.$$.fragment,c),p(ME.$$.fragment,c),p(wE.$$.fragment,c),p(AE.$$.fragment,c),p(LE.$$.fragment,c),p(BE.$$.fragment,c),p(xE.$$.fragment,c),p(SE.$$.fragment,c),p(xh.$$.fragment,c),p(PE.$$.fragment,c),p($E.$$.fragment,c),p(IE.$$.fragment,c),p(jE.$$.fragment,c),p(qE.$$.fragment,c),p(Gh.$$.fragment,c),p(GE.$$.fragment,c),p(OE.$$.fragment,c),p(XE.$$.fragment,c),p(VE.$$.fragment,c),p(WE.$$.fragment,c),p(QE.$$.fragment,c),p(HE.$$.fragment,c),p(UE.$$.fragment,c),p(JE.$$.fragment,c),p(YE.$$.fragment,c),p(ZE.$$.fragment,c),p(e3.$$.fragment,c),p(o3.$$.fragment,c),p(r3.$$.fragment,c),p(t3.$$.fragment,c),p(a3.$$.fragment,c),p(s3.$$.fragment,c),p(l3.$$.fragment,c),p(i3.$$.fragment,c),p(d3.$$.fragment,c),p(c3.$$.fragment,c),p(f3.$$.fragment,c),p(g3.$$.fragment,c),p(h3.$$.fragment,c),p(p3.$$.fragment,c),p(_3.$$.fragment,c),p(u3.$$.fragment,c),p(b3.$$.fragment,c),p(T3.$$.fragment,c),p(F3.$$.fragment,c),p(C3.$$.fragment,c),p(M3.$$.fragment,c),p(E3.$$.fragment,c),p(y3.$$.fragment,c),p(A3.$$.fragment,c),p(L3.$$.fragment,c),p(B3.$$.fragment,c),p(x3.$$.fragment,c),p(k3.$$.fragment,c),p(R3.$$.fragment,c),p(P3.$$.fragment,c),p($3.$$.fragment,c),p(I3.$$.fragment,c),p(j3.$$.fragment,c),p(N3.$$.fragment,c),p(D3.$$.fragment,c),p(G3.$$.fragment,c),p(O3.$$.fragment,c),p(X3.$$.fragment,c),p(V3.$$.fragment,c),p(z3.$$.fragment,c),p(W3.$$.fragment,c),p(H3.$$.fragment,c),p(U3.$$.fragment,c),p(J3.$$.fragment,c),p(Y3.$$.fragment,c),p(K3.$$.fragment,c),p(Z3.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(Cy.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(yy.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(By.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Ry.$$.fragment,c),p(Sy.$$.fragment,c),p(Py.$$.fragment,c),p(Iy.$$.fragment,c),p(jy.$$.fragment,c),p(Ny.$$.fragment,c),p(Dy.$$.fragment,c),p(qy.$$.fragment,c),p(Gy.$$.fragment,c),p(Xy.$$.fragment,c),p(Vy.$$.fragment,c),p(zy.$$.fragment,c),p(Wy.$$.fragment,c),p(Qy.$$.fragment,c),p(Hy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Fw.$$.fragment,c),p(Cw.$$.fragment,c),p(Mw.$$.fragment,c),p(yw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(Lw.$$.fragment,c),p(Bw.$$.fragment,c),p(xw.$$.fragment,c),p(Rw.$$.fragment,c),p(Sw.$$.fragment,c),p(Pw.$$.fragment,c),p(Iw.$$.fragment,c),p(jw.$$.fragment,c),p(Nw.$$.fragment,c),p(qw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Xw.$$.fragment,c),p(Vw.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(bA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(CA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(yA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(BA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(RA.$$.fragment,c),p(SA.$$.fragment,c),p(PA.$$.fragment,c),p(IA.$$.fragment,c),p(jA.$$.fragment,c),p(NA.$$.fragment,c),p(DA.$$.fragment,c),p(qA.$$.fragment,c),p(GA.$$.fragment,c),p(XA.$$.fragment,c),p(VA.$$.fragment,c),p(zA.$$.fragment,c),p(WA.$$.fragment,c),p(QA.$$.fragment,c),p(HA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(FL.$$.fragment,c),p(CL.$$.fragment,c),p(EL.$$.fragment,c),p(yL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(LL.$$.fragment,c),p(BL.$$.fragment,c),p(kL.$$.fragment,c),p(RL.$$.fragment,c),p(SL.$$.fragment,c),p(PL.$$.fragment,c),p($L.$$.fragment,c),p(IL.$$.fragment,c),p(NL.$$.fragment,c),p(DL.$$.fragment,c),p(qL.$$.fragment,c),p(GL.$$.fragment,c),p(OL.$$.fragment,c),p(XL.$$.fragment,c),p(zL.$$.fragment,c),p(WL.$$.fragment,c),p(QL.$$.fragment,c),p(HL.$$.fragment,c),p(UL.$$.fragment,c),p(JL.$$.fragment,c),p(KL.$$.fragment,c),p(ZL.$$.fragment,c),p(e7.$$.fragment,c),p(o7.$$.fragment,c),p(r7.$$.fragment,c),p(t7.$$.fragment,c),p(n7.$$.fragment,c),p(s7.$$.fragment,c),p(l7.$$.fragment,c),p(i7.$$.fragment,c),p(d7.$$.fragment,c),p(c7.$$.fragment,c),p(m7.$$.fragment,c),p(g7.$$.fragment,c),p(h7.$$.fragment,c),p(p7.$$.fragment,c),p(_7.$$.fragment,c),p(u7.$$.fragment,c),p(v7.$$.fragment,c),p(T7.$$.fragment,c),p(F7.$$.fragment,c),p(C7.$$.fragment,c),p(M7.$$.fragment,c),p(E7.$$.fragment,c),p(w7.$$.fragment,c),p(A7.$$.fragment,c),p(L7.$$.fragment,c),p(B7.$$.fragment,c),p(x7.$$.fragment,c),p(k7.$$.fragment,c),p(S7.$$.fragment,c),p(P7.$$.fragment,c),p($7.$$.fragment,c),p(I7.$$.fragment,c),p(j7.$$.fragment,c),p(N7.$$.fragment,c),p(q7.$$.fragment,c),p(G7.$$.fragment,c),p(O7.$$.fragment,c),p(X7.$$.fragment,c),p(V7.$$.fragment,c),p(z7.$$.fragment,c),p(Q7.$$.fragment,c),p(H7.$$.fragment,c),p(U7.$$.fragment,c),p(Y7.$$.fragment,c),p(K7.$$.fragment,c),p(Z7.$$.fragment,c),p(o8.$$.fragment,c),p(r8.$$.fragment,c),p(t8.$$.fragment,c),p(a8.$$.fragment,c),uSe=!1},d(c){t(Z),c&&t(io),c&&t(de),_(me),c&&t(If),c&&t(fa),c&&t(Be),c&&t(co),c&&t(Nf),_(qa,c),c&&t(fo),c&&t(_e),c&&t(zo),c&&t(Ga),c&&t(_ke),c&&t(Xi),_(gE),c&&t(uke),c&&t(zn),c&&t(bke),_(hE,c),c&&t(vke),c&&t(l9),c&&t(Tke),_(Gf,c),c&&t(Fke),c&&t(Vi),_(pE),c&&t(Cke),c&&t(Wo),_(_E),_(vE),_(TE),_(FE),c&&t(Mke),c&&t(Wi),_(CE),c&&t(Eke),c&&t(Qo),_(ME),_(wE),_(AE),_(LE),c&&t(yke),c&&t(Qi),_(BE),c&&t(wke),c&&t(Ho),_(xE),_(SE),_(xh),_(PE),_($E),c&&t(Ake),c&&t(Hi),_(IE),c&&t(Lke),c&&t(Uo),_(jE),_(qE),_(Gh),_(GE),_(OE),c&&t(Bke),c&&t(Ji),_(XE),c&&t(xke),c&&t(Jo),_(VE),_(WE),_(QE),_(HE),_(UE),c&&t(kke),c&&t(Zi),_(JE),c&&t(Rke),c&&t(Yo),_(YE),_(ZE),_(e3),_(o3),_(r3),c&&t(Ske),c&&t(rd),_(t3),c&&t(Pke),c&&t(Ko),_(a3),_(s3),_(l3),_(i3),_(d3),c&&t($ke),c&&t(nd),_(c3),c&&t(Ike),c&&t(Zo),_(f3),_(g3),_(h3),_(p3),_(_3),c&&t(jke),c&&t(id),_(u3),c&&t(Nke),c&&t(er),_(b3),_(T3),_(F3),_(C3),_(M3),c&&t(Dke),c&&t(fd),_(E3),c&&t(qke),c&&t(or),_(y3),_(A3),_(L3),_(B3),_(x3),c&&t(Gke),c&&t(hd),_(k3),c&&t(Oke),c&&t(rr),_(R3),_(P3),_($3),_(I3),_(j3),c&&t(Xke),c&&t(ud),_(N3),c&&t(Vke),c&&t(tr),_(D3),_(G3),_(O3),_(X3),_(V3),c&&t(zke),c&&t(Td),_(z3),c&&t(Wke),c&&t(ar),_(W3),_(H3),_(U3),_(J3),_(Y3),c&&t(Qke),c&&t(Md),_(K3),c&&t(Hke),c&&t(nr),_(Z3),_(oy),_(ry),_(ty),_(ay),c&&t(Uke),c&&t(wd),_(ny),c&&t(Jke),c&&t(sr),_(sy),_(iy),_(dy),_(cy),_(fy),c&&t(Yke),c&&t(Bd),_(my),c&&t(Kke),c&&t(lr),_(gy),_(py),_(_y),_(uy),_(by),c&&t(Zke),c&&t(Rd),_(vy),c&&t(eRe),c&&t(ir),_(Ty),_(Cy),_(My),_(Ey),_(yy),c&&t(oRe),c&&t($d),_(wy),c&&t(rRe),c&&t(dr),_(Ay),_(By),_(xy),_(ky),_(Ry),c&&t(tRe),c&&t(Nd),_(Sy),c&&t(aRe),c&&t(cr),_(Py),_(Iy),_(jy),_(Ny),_(Dy),c&&t(nRe),c&&t(Gd),_(qy),c&&t(sRe),c&&t(fr),_(Gy),_(Xy),_(Vy),_(zy),_(Wy),c&&t(lRe),c&&t(Vd),_(Qy),c&&t(iRe),c&&t(mr),_(Hy),_(Jy),_(Yy),_(Ky),_(ew),c&&t(dRe),c&&t(Qd),_(ow),c&&t(cRe),c&&t(gr),_(rw),_(aw),_(nw),_(sw),_(lw),c&&t(fRe),c&&t(Jd),_(iw),c&&t(mRe),c&&t(hr),_(dw),_(fw),_(mw),_(gw),_(hw),c&&t(gRe),c&&t(ec),_(pw),c&&t(hRe),c&&t(pr),_(_w),_(bw),_(vw),_(Tw),_(Fw),c&&t(pRe),c&&t(tc),_(Cw),c&&t(_Re),c&&t(_r),_(Mw),_(yw),_(ww),_(Aw),_(Lw),c&&t(uRe),c&&t(sc),_(Bw),c&&t(bRe),c&&t(ur),_(xw),_(Rw),_(Sw),_(Pw),_(Iw),c&&t(vRe),c&&t(dc),_(jw),c&&t(TRe),c&&t(br),_(Nw),_(qw),_(Gw),_(Ow),_(Xw),c&&t(FRe),c&&t(mc),_(Vw),c&&t(CRe),c&&t(vr),_(zw),_(Qw),_(Hw),_(Uw),_(Jw),c&&t(MRe),c&&t(pc),_(Yw),c&&t(ERe),c&&t(Tr),_(Kw),_(eA),_(oA),_(rA),_(tA),c&&t(yRe),c&&t(bc),_(aA),c&&t(wRe),c&&t(Fr),_(nA),_(lA),_(iA),_(dA),_(cA),c&&t(ARe),c&&t(Fc),_(fA),c&&t(LRe),c&&t(Cr),_(mA),_(hA),_(pA),_(_A),_(bA),c&&t(BRe),c&&t(Ec),_(vA),c&&t(xRe),c&&t(Mr),_(TA),_(CA),_(MA),_(EA),_(yA),c&&t(kRe),c&&t(Ac),_(wA),c&&t(RRe),c&&t(Er),_(AA),_(BA),_(xA),_(kA),_(RA),c&&t(SRe),c&&t(xc),_(SA),c&&t(PRe),c&&t(yr),_(PA),_(IA),_(jA),_(NA),_(DA),c&&t($Re),c&&t(Sc),_(qA),c&&t(IRe),c&&t(wr),_(GA),_(XA),_(VA),_(zA),_(WA),c&&t(jRe),c&&t(Ic),_(QA),c&&t(NRe),c&&t(Ar),_(HA),_(JA),_(YA),_(KA),_(ZA),c&&t(DRe),c&&t(Dc),_(eL),c&&t(qRe),c&&t(Lr),_(oL),_(tL),_(aL),_(nL),_(sL),c&&t(GRe),c&&t(Oc),_(lL),c&&t(ORe),c&&t(Br),_(iL),_(cL),_(fL),_(mL),_(gL),c&&t(XRe),c&&t(zc),_(hL),c&&t(VRe),c&&t(xr),_(pL),_(uL),_(bL),_(vL),_(TL),c&&t(zRe),c&&t(Hc),_(FL),c&&t(WRe),c&&t(kr),_(CL),_(EL),_(yL),_(wL),_(AL),c&&t(QRe),c&&t(Yc),_(LL),c&&t(HRe),c&&t(Rr),_(BL),_(kL),_(RL),_(SL),_(PL),c&&t(URe),c&&t(ef),_($L),c&&t(JRe),c&&t(Sr),_(IL),_(NL),_(DL),_(qL),_(GL),c&&t(YRe),c&&t(tf),_(OL),c&&t(KRe),c&&t(Pr),_(XL),_(zL),_(WL),_(QL),_(HL),c&&t(ZRe),c&&t(sf),_(UL),c&&t(eSe),c&&t($r),_(JL),_(KL),_(ZL),_(e7),_(o7),c&&t(oSe),c&&t(cf),_(r7),c&&t(rSe),c&&t(Ir),_(t7),_(n7),_(s7),_(l7),_(i7),c&&t(tSe),c&&t(gf),_(d7),c&&t(aSe),c&&t(jr),_(c7),_(m7),_(g7),_(h7),_(p7),c&&t(nSe),c&&t(_f),_(_7),c&&t(sSe),c&&t(Nr),_(u7),_(v7),_(T7),_(F7),_(C7),c&&t(lSe),c&&t(vf),_(M7),c&&t(iSe),c&&t(Dr),_(E7),_(w7),_(A7),_(L7),_(B7),c&&t(dSe),c&&t(Cf),_(x7),c&&t(cSe),c&&t(qr),_(k7),_(S7),_(P7),_($7),_(I7),c&&t(fSe),c&&t(yf),_(j7),c&&t(mSe),c&&t(Gr),_(N7),_(q7),_(G7),_(O7),_(X7),c&&t(gSe),c&&t(Lf),_(V7),c&&t(hSe),c&&t(Or),_(z7),_(Q7),_(H7),_(U7),_(Y7),c&&t(pSe),c&&t(kf),_(K7),c&&t(_Se),c&&t(Xr),_(Z7),_(o8),_(r8),_(t8),_(a8)}}}const aCt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function nCt($f){return ZFt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class fCt extends UFt{constructor(Z){super();JFt(this,Z,nCt,tCt,YFt,{})}}export{fCt as default,aCt as metadata};
