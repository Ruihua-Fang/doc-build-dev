import{S as Eyt,i as Cyt,s as wyt,e as a,k as l,w as f,t as o,M as Ayt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as yyt}from"../../chunks/vendor-6b77c823.js";import{T as Jqr}from"../../chunks/Tip-39098574.js";import{D as w}from"../../chunks/Docstring-1088f2fb.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function Lyt(Xf){let oe,co,me,Ae,io,_e,Ce,Xo,zi,zf,fa,Qi,Wi,zC,Qf,Se,fo,Hi,On,QC,Vn,Xn,WC,Ui,zn,HC,Ji,Wf,Da;return{c(){oe=a("p"),co=o("If your "),me=a("code"),Ae=o("NewModelConfig"),io=o(" is a subclass of "),_e=a("code"),Ce=o("PretrainedConfig"),Xo=o(`, make sure its
`),zi=a("code"),zf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Qi=a("code"),Wi=o('"new-model"'),zC=o(")."),Qf=l(),Se=a("p"),fo=o("Likewise, if your "),Hi=a("code"),On=o("NewModel"),QC=o(" is a subclass of "),Vn=a("a"),Xn=o("PreTrainedModel"),WC=o(`, make sure its
`),Ui=a("code"),zn=o("config_class"),HC=o(` attribute is set to the same class you use when registering the model (here
`),Ji=a("code"),Wf=o("NewModelConfig"),Da=o(")."),this.h()},l(mo){oe=n(mo,"P",{});var ve=s(oe);co=r(ve,"If your "),me=n(ve,"CODE",{});var z9=s(me);Ae=r(z9,"NewModelConfig"),z9.forEach(t),io=r(ve," is a subclass of "),_e=n(ve,"CODE",{});var Yi=s(_e);Ce=r(Yi,"PretrainedConfig"),Yi.forEach(t),Xo=r(ve,`, make sure its
`),zi=n(ve,"CODE",{});var Q9=s(zi);zf=r(Q9,"model_type"),Q9.forEach(t),fa=r(ve," attribute is set to the same key you use when registering the config (here "),Qi=n(ve,"CODE",{});var W9=s(Qi);Wi=r(W9,'"new-model"'),W9.forEach(t),zC=r(ve,")."),ve.forEach(t),Qf=i(mo),Se=n(mo,"P",{});var zo=s(Se);fo=r(zo,"Likewise, if your "),Hi=n(zo,"CODE",{});var Ga=s(Hi);On=r(Ga,"NewModel"),Ga.forEach(t),QC=r(zo," is a subclass of "),Vn=n(zo,"A",{href:!0});var H9=s(Vn);Xn=r(H9,"PreTrainedModel"),H9.forEach(t),WC=r(zo,`, make sure its
`),Ui=n(zo,"CODE",{});var Hf=s(Ui);zn=r(Hf,"config_class"),Hf.forEach(t),HC=r(zo,` attribute is set to the same class you use when registering the model (here
`),Ji=n(zo,"CODE",{});var U9=s(Ji);Wf=r(U9,"NewModelConfig"),U9.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(Vn,"href","/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel")},m(mo,ve){b(mo,oe,ve),e(oe,co),e(oe,me),e(me,Ae),e(oe,io),e(oe,_e),e(_e,Ce),e(oe,Xo),e(oe,zi),e(zi,zf),e(oe,fa),e(oe,Qi),e(Qi,Wi),e(oe,zC),b(mo,Qf,ve),b(mo,Se,ve),e(Se,fo),e(Se,Hi),e(Hi,On),e(Se,QC),e(Se,Vn),e(Vn,Xn),e(Se,WC),e(Se,Ui),e(Ui,zn),e(Se,HC),e(Se,Ji),e(Ji,Wf),e(Se,Da)},d(mo){mo&&t(oe),mo&&t(Qf),mo&&t(Se)}}}function xyt(Xf){let oe,co,me,Ae,io;return{c(){oe=a("p"),co=o("Passing "),me=a("code"),Ae=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(_e){oe=n(_e,"P",{});var Ce=s(oe);co=r(Ce,"Passing "),me=n(Ce,"CODE",{});var Xo=s(me);Ae=r(Xo,"use_auth_token=True"),Xo.forEach(t),io=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(_e,Ce){b(_e,oe,Ce),e(oe,co),e(oe,me),e(me,Ae),e(oe,io)},d(_e){_e&&t(oe)}}}function kyt(Xf){let oe,co,me,Ae,io;return{c(){oe=a("p"),co=o("Passing "),me=a("code"),Ae=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(_e){oe=n(_e,"P",{});var Ce=s(oe);co=r(Ce,"Passing "),me=n(Ce,"CODE",{});var Xo=s(me);Ae=r(Xo,"use_auth_token=True"),Xo.forEach(t),io=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(_e,Ce){b(_e,oe,Ce),e(oe,co),e(oe,me),e(me,Ae),e(oe,io)},d(_e){_e&&t(oe)}}}function Syt(Xf){let oe,co,me,Ae,io,_e,Ce,Xo,zi,zf,fa,Qi,Wi,zC,Qf,Se,fo,Hi,On,QC,Vn,Xn,WC,Ui,zn,HC,Ji,Wf,Da,mo,ve,z9,Yi,Q9,W9,zo,Ga,H9,Hf,U9,mNe,ZBe,Ki,Uf,nK,UC,gNe,sK,hNe,ePe,Qn,pNe,lK,_Ne,uNe,iK,bNe,vNe,oPe,JC,rPe,J9,FNe,tPe,Jf,aPe,Zi,Yf,dK,YC,TNe,cK,MNe,nPe,Qo,KC,ENe,ZC,CNe,Y9,wNe,ANe,yNe,e6,LNe,fK,xNe,kNe,SNe,go,o6,RNe,mK,BNe,PNe,ed,$Ne,gK,INe,qNe,hK,NNe,jNe,DNe,v,Kf,pK,GNe,ONe,K9,VNe,XNe,zNe,Zf,_K,QNe,WNe,Z9,HNe,UNe,JNe,em,uK,YNe,KNe,ex,ZNe,eje,oje,om,bK,rje,tje,ox,aje,nje,sje,rm,vK,lje,ije,rx,dje,cje,fje,tm,FK,mje,gje,tx,hje,pje,_je,am,TK,uje,bje,ax,vje,Fje,Tje,nm,MK,Mje,Eje,nx,Cje,wje,Aje,sm,EK,yje,Lje,sx,xje,kje,Sje,lm,CK,Rje,Bje,lx,Pje,$je,Ije,im,wK,qje,Nje,ix,jje,Dje,Gje,dm,AK,Oje,Vje,dx,Xje,zje,Qje,cm,yK,Wje,Hje,cx,Uje,Jje,Yje,fm,LK,Kje,Zje,fx,eDe,oDe,rDe,mm,xK,tDe,aDe,mx,nDe,sDe,lDe,gm,kK,iDe,dDe,gx,cDe,fDe,mDe,hm,SK,gDe,hDe,hx,pDe,_De,uDe,pm,RK,bDe,vDe,px,FDe,TDe,MDe,_m,BK,EDe,CDe,_x,wDe,ADe,yDe,um,PK,LDe,xDe,ux,kDe,SDe,RDe,bm,$K,BDe,PDe,bx,$De,IDe,qDe,vm,IK,NDe,jDe,vx,DDe,GDe,ODe,Fm,qK,VDe,XDe,Fx,zDe,QDe,WDe,Tm,NK,HDe,UDe,Tx,JDe,YDe,KDe,Mm,jK,ZDe,eGe,Mx,oGe,rGe,tGe,Em,DK,aGe,nGe,Ex,sGe,lGe,iGe,Cm,GK,dGe,cGe,Cx,fGe,mGe,gGe,wm,OK,hGe,pGe,wx,_Ge,uGe,bGe,Am,VK,vGe,FGe,Ax,TGe,MGe,EGe,ym,XK,CGe,wGe,yx,AGe,yGe,LGe,Lm,zK,xGe,kGe,Lx,SGe,RGe,BGe,xm,QK,PGe,$Ge,xx,IGe,qGe,NGe,km,WK,jGe,DGe,kx,GGe,OGe,VGe,Sm,HK,XGe,zGe,Sx,QGe,WGe,HGe,Rm,UK,UGe,JGe,Rx,YGe,KGe,ZGe,Bm,JK,eOe,oOe,Bx,rOe,tOe,aOe,Pm,YK,nOe,sOe,Px,lOe,iOe,dOe,$m,KK,cOe,fOe,$x,mOe,gOe,hOe,Im,ZK,pOe,_Oe,Ix,uOe,bOe,vOe,qm,eZ,FOe,TOe,qx,MOe,EOe,COe,Nm,oZ,wOe,AOe,Nx,yOe,LOe,xOe,jm,rZ,kOe,SOe,jx,ROe,BOe,POe,Dm,tZ,$Oe,IOe,Dx,qOe,NOe,jOe,Gm,aZ,DOe,GOe,Gx,OOe,VOe,XOe,Om,nZ,zOe,QOe,Ox,WOe,HOe,UOe,Vm,sZ,JOe,YOe,Vx,KOe,ZOe,eVe,Xm,lZ,oVe,rVe,Xx,tVe,aVe,nVe,zm,iZ,sVe,lVe,zx,iVe,dVe,cVe,Qm,dZ,fVe,mVe,Qx,gVe,hVe,pVe,Wm,cZ,_Ve,uVe,Wx,bVe,vVe,FVe,Hm,fZ,TVe,MVe,Hx,EVe,CVe,wVe,Um,mZ,AVe,yVe,Ux,LVe,xVe,kVe,Jm,gZ,SVe,RVe,Jx,BVe,PVe,$Ve,Ym,hZ,IVe,qVe,Yx,NVe,jVe,DVe,Km,pZ,GVe,OVe,Kx,VVe,XVe,zVe,Zm,_Z,QVe,WVe,Zx,HVe,UVe,JVe,eg,uZ,YVe,KVe,ek,ZVe,eXe,oXe,og,bZ,rXe,tXe,ok,aXe,nXe,sXe,rg,vZ,lXe,iXe,rk,dXe,cXe,fXe,tg,FZ,mXe,gXe,tk,hXe,pXe,_Xe,ag,TZ,uXe,bXe,ak,vXe,FXe,TXe,ng,MZ,MXe,EXe,nk,CXe,wXe,AXe,sg,EZ,yXe,LXe,sk,xXe,kXe,SXe,lg,CZ,RXe,BXe,lk,PXe,$Xe,IXe,ig,wZ,qXe,NXe,ik,jXe,DXe,GXe,dg,AZ,OXe,VXe,dk,XXe,zXe,QXe,cg,yZ,WXe,HXe,ck,UXe,JXe,YXe,fg,LZ,KXe,ZXe,fk,eze,oze,rze,mg,xZ,tze,aze,mk,nze,sze,lze,gg,kZ,ize,dze,gk,cze,fze,mze,hg,SZ,gze,hze,hk,pze,_ze,uze,pg,RZ,bze,vze,pk,Fze,Tze,Mze,_g,BZ,Eze,Cze,_k,wze,Aze,yze,ug,PZ,Lze,xze,uk,kze,Sze,Rze,bg,$Z,Bze,Pze,bk,$ze,Ize,qze,vg,IZ,Nze,jze,vk,Dze,Gze,Oze,Fg,qZ,Vze,Xze,Fk,zze,Qze,Wze,Tg,NZ,Hze,Uze,Tk,Jze,Yze,Kze,Mg,jZ,Zze,eQe,Mk,oQe,rQe,tQe,Eg,DZ,aQe,nQe,Ek,sQe,lQe,iQe,Cg,GZ,dQe,cQe,Ck,fQe,mQe,gQe,wg,OZ,hQe,pQe,wk,_Qe,uQe,bQe,Ag,VZ,vQe,FQe,Ak,TQe,MQe,EQe,yg,XZ,CQe,wQe,yk,AQe,yQe,LQe,Lg,zZ,xQe,kQe,Lk,SQe,RQe,BQe,xg,QZ,PQe,$Qe,xk,IQe,qQe,NQe,kg,WZ,jQe,DQe,kk,GQe,OQe,VQe,Sg,HZ,XQe,zQe,Sk,QQe,WQe,HQe,Rg,UZ,UQe,JQe,Rk,YQe,KQe,ZQe,Bg,JZ,eWe,oWe,Bk,rWe,tWe,aWe,Pg,YZ,nWe,sWe,Pk,lWe,iWe,dWe,$g,KZ,cWe,fWe,$k,mWe,gWe,hWe,Ig,ZZ,pWe,_We,Ik,uWe,bWe,vWe,qg,eee,FWe,TWe,qk,MWe,EWe,CWe,Ng,oee,wWe,AWe,Nk,yWe,LWe,xWe,jg,ree,kWe,SWe,jk,RWe,BWe,PWe,Dg,tee,$We,IWe,Dk,qWe,NWe,jWe,Gg,aee,DWe,GWe,Gk,OWe,VWe,XWe,Og,nee,zWe,QWe,Ok,WWe,HWe,UWe,Vg,see,JWe,YWe,Vk,KWe,ZWe,eHe,Xg,lee,oHe,rHe,Xk,tHe,aHe,nHe,zg,iee,sHe,lHe,zk,iHe,dHe,cHe,dee,fHe,mHe,r6,gHe,Qg,t6,hHe,cee,pHe,sPe,od,Wg,fee,a6,_He,mee,uHe,lPe,Wo,n6,bHe,s6,vHe,Qk,FHe,THe,MHe,l6,EHe,gee,CHe,wHe,AHe,ho,i6,yHe,hee,LHe,xHe,Oa,kHe,pee,SHe,RHe,_ee,BHe,PHe,uee,$He,IHe,qHe,E,Wn,bee,NHe,jHe,Wk,DHe,GHe,Hk,OHe,VHe,XHe,Hn,vee,zHe,QHe,Uk,WHe,HHe,Jk,UHe,JHe,YHe,Un,Fee,KHe,ZHe,Yk,eUe,oUe,Kk,rUe,tUe,aUe,Hg,Tee,nUe,sUe,Zk,lUe,iUe,dUe,Jn,Mee,cUe,fUe,eS,mUe,gUe,oS,hUe,pUe,_Ue,Ug,Eee,uUe,bUe,rS,vUe,FUe,TUe,Jg,Cee,MUe,EUe,tS,CUe,wUe,AUe,Yg,wee,yUe,LUe,aS,xUe,kUe,SUe,Yn,Aee,RUe,BUe,nS,PUe,$Ue,sS,IUe,qUe,NUe,Kn,yee,jUe,DUe,lS,GUe,OUe,iS,VUe,XUe,zUe,Zn,Lee,QUe,WUe,dS,HUe,UUe,cS,JUe,YUe,KUe,Kg,xee,ZUe,eJe,fS,oJe,rJe,tJe,Zg,kee,aJe,nJe,mS,sJe,lJe,iJe,es,See,dJe,cJe,gS,fJe,mJe,hS,gJe,hJe,pJe,eh,Ree,_Je,uJe,pS,bJe,vJe,FJe,os,Bee,TJe,MJe,_S,EJe,CJe,uS,wJe,AJe,yJe,rs,Pee,LJe,xJe,bS,kJe,SJe,vS,RJe,BJe,PJe,ts,$ee,$Je,IJe,FS,qJe,NJe,Iee,jJe,DJe,GJe,oh,qee,OJe,VJe,TS,XJe,zJe,QJe,as,Nee,WJe,HJe,MS,UJe,JJe,ES,YJe,KJe,ZJe,ns,jee,eYe,oYe,CS,rYe,tYe,wS,aYe,nYe,sYe,ss,Dee,lYe,iYe,AS,dYe,cYe,yS,fYe,mYe,gYe,ls,Gee,hYe,pYe,LS,_Ye,uYe,xS,bYe,vYe,FYe,is,Oee,TYe,MYe,kS,EYe,CYe,SS,wYe,AYe,yYe,ds,Vee,LYe,xYe,RS,kYe,SYe,BS,RYe,BYe,PYe,rh,Xee,$Ye,IYe,PS,qYe,NYe,jYe,cs,zee,DYe,GYe,$S,OYe,VYe,IS,XYe,zYe,QYe,th,Qee,WYe,HYe,qS,UYe,JYe,YYe,fs,Wee,KYe,ZYe,NS,eKe,oKe,jS,rKe,tKe,aKe,ms,Hee,nKe,sKe,DS,lKe,iKe,GS,dKe,cKe,fKe,gs,Uee,mKe,gKe,OS,hKe,pKe,VS,_Ke,uKe,bKe,hs,Jee,vKe,FKe,XS,TKe,MKe,zS,EKe,CKe,wKe,ps,Yee,AKe,yKe,QS,LKe,xKe,WS,kKe,SKe,RKe,ah,Kee,BKe,PKe,HS,$Ke,IKe,qKe,_s,Zee,NKe,jKe,US,DKe,GKe,JS,OKe,VKe,XKe,us,eoe,zKe,QKe,YS,WKe,HKe,KS,UKe,JKe,YKe,bs,ooe,KKe,ZKe,ZS,eZe,oZe,eR,rZe,tZe,aZe,vs,roe,nZe,sZe,oR,lZe,iZe,rR,dZe,cZe,fZe,Fs,toe,mZe,gZe,tR,hZe,pZe,aR,_Ze,uZe,bZe,Ts,aoe,vZe,FZe,nR,TZe,MZe,sR,EZe,CZe,wZe,nh,noe,AZe,yZe,lR,LZe,xZe,kZe,Ms,soe,SZe,RZe,iR,BZe,PZe,dR,$Ze,IZe,qZe,sh,loe,NZe,jZe,cR,DZe,GZe,OZe,lh,ioe,VZe,XZe,fR,zZe,QZe,WZe,Es,doe,HZe,UZe,mR,JZe,YZe,gR,KZe,ZZe,eeo,Cs,coe,oeo,reo,hR,teo,aeo,pR,neo,seo,leo,ws,foe,ieo,deo,_R,ceo,feo,uR,meo,geo,heo,ih,moe,peo,_eo,bR,ueo,beo,veo,As,goe,Feo,Teo,vR,Meo,Eeo,FR,Ceo,weo,Aeo,ys,hoe,yeo,Leo,TR,xeo,keo,MR,Seo,Reo,Beo,Ls,poe,Peo,$eo,ER,Ieo,qeo,CR,Neo,jeo,Deo,xs,_oe,Geo,Oeo,wR,Veo,Xeo,AR,zeo,Qeo,Weo,ks,uoe,Heo,Ueo,yR,Jeo,Yeo,LR,Keo,Zeo,eoo,Ss,boe,ooo,roo,xR,too,aoo,kR,noo,soo,loo,dh,voe,ioo,doo,SR,coo,foo,moo,ch,Foe,goo,hoo,RR,poo,_oo,uoo,fh,Toe,boo,voo,BR,Foo,Too,Moo,mh,Moe,Eoo,Coo,PR,woo,Aoo,yoo,Rs,Eoe,Loo,xoo,$R,koo,Soo,IR,Roo,Boo,Poo,gh,Coe,$oo,Ioo,qR,qoo,Noo,joo,Bs,woe,Doo,Goo,NR,Ooo,Voo,jR,Xoo,zoo,Qoo,Ps,Aoe,Woo,Hoo,DR,Uoo,Joo,GR,Yoo,Koo,Zoo,$s,yoe,ero,oro,OR,rro,tro,VR,aro,nro,sro,Is,Loe,lro,iro,XR,dro,cro,zR,fro,mro,gro,qs,xoe,hro,pro,QR,_ro,uro,WR,bro,vro,Fro,Ns,koe,Tro,Mro,HR,Ero,Cro,UR,wro,Aro,yro,hh,Soe,Lro,xro,JR,kro,Sro,Rro,ph,Roe,Bro,Pro,YR,$ro,Iro,qro,js,Boe,Nro,jro,KR,Dro,Gro,ZR,Oro,Vro,Xro,Ds,Poe,zro,Qro,eB,Wro,Hro,oB,Uro,Jro,Yro,Gs,$oe,Kro,Zro,rB,eto,oto,tB,rto,tto,ato,_h,Ioe,nto,sto,aB,lto,ito,dto,uh,qoe,cto,fto,nB,mto,gto,hto,bh,Noe,pto,_to,sB,uto,bto,vto,Os,joe,Fto,Tto,lB,Mto,Eto,iB,Cto,wto,Ato,vh,Doe,yto,Lto,dB,xto,kto,Sto,Fh,Goe,Rto,Bto,cB,Pto,$to,Ito,Vs,Ooe,qto,Nto,fB,jto,Dto,mB,Gto,Oto,Vto,Th,Voe,Xto,zto,gB,Qto,Wto,Hto,Mh,Xoe,Uto,Jto,hB,Yto,Kto,Zto,Xs,zoe,eao,oao,pB,rao,tao,_B,aao,nao,sao,zs,Qoe,lao,iao,uB,dao,cao,bB,fao,mao,gao,Qs,Woe,hao,pao,vB,_ao,uao,FB,bao,vao,Fao,Ws,Hoe,Tao,Mao,TB,Eao,Cao,MB,wao,Aao,yao,Uoe,Lao,xao,d6,kao,Eh,c6,Sao,Joe,Rao,iPe,rd,Ch,Yoe,f6,Bao,Koe,Pao,dPe,Ho,m6,$ao,g6,Iao,EB,qao,Nao,jao,h6,Dao,Zoe,Gao,Oao,Vao,Ie,p6,Xao,ere,zao,Qao,Va,Wao,ore,Hao,Uao,rre,Jao,Yao,tre,Kao,Zao,eno,H,wh,are,ono,rno,CB,tno,ano,nno,Ah,nre,sno,lno,wB,ino,dno,cno,yh,sre,fno,mno,AB,gno,hno,pno,Lh,lre,_no,uno,yB,bno,vno,Fno,xh,ire,Tno,Mno,LB,Eno,Cno,wno,kh,dre,Ano,yno,xB,Lno,xno,kno,Sh,cre,Sno,Rno,kB,Bno,Pno,$no,Rh,fre,Ino,qno,SB,Nno,jno,Dno,Bh,mre,Gno,Ono,RB,Vno,Xno,zno,Ph,gre,Qno,Wno,BB,Hno,Uno,Jno,$h,hre,Yno,Kno,PB,Zno,eso,oso,Ih,pre,rso,tso,$B,aso,nso,sso,qh,_re,lso,iso,IB,dso,cso,fso,Nh,ure,mso,gso,qB,hso,pso,_so,jh,bre,uso,bso,NB,vso,Fso,Tso,Dh,vre,Mso,Eso,jB,Cso,wso,Aso,Gh,Fre,yso,Lso,DB,xso,kso,Sso,Oh,Tre,Rso,Bso,GB,Pso,$so,Iso,Vh,Mre,qso,Nso,OB,jso,Dso,Gso,Xh,Ere,Oso,Vso,VB,Xso,zso,Qso,zh,Cre,Wso,Hso,XB,Uso,Jso,Yso,Qh,wre,Kso,Zso,zB,elo,olo,rlo,Wh,Are,tlo,alo,QB,nlo,slo,llo,Hh,ilo,yre,dlo,clo,_6,flo,Uh,u6,mlo,Lre,glo,cPe,td,Jh,xre,b6,hlo,kre,plo,fPe,Uo,v6,_lo,F6,ulo,WB,blo,vlo,Flo,T6,Tlo,Sre,Mlo,Elo,Clo,qe,M6,wlo,Rre,Alo,ylo,ad,Llo,Bre,xlo,klo,Pre,Slo,Rlo,Blo,de,Yh,$re,Plo,$lo,HB,Ilo,qlo,Nlo,Kh,Ire,jlo,Dlo,UB,Glo,Olo,Vlo,Zh,qre,Xlo,zlo,JB,Qlo,Wlo,Hlo,ep,Nre,Ulo,Jlo,YB,Ylo,Klo,Zlo,op,jre,eio,oio,KB,rio,tio,aio,rp,Dre,nio,sio,ZB,lio,iio,dio,tp,Gre,cio,fio,eP,mio,gio,hio,ap,Ore,pio,_io,oP,uio,bio,vio,np,Vre,Fio,Tio,rP,Mio,Eio,Cio,sp,Xre,wio,Aio,tP,yio,Lio,xio,lp,zre,kio,Sio,aP,Rio,Bio,Pio,ip,Qre,$io,Iio,nP,qio,Nio,jio,dp,Wre,Dio,Gio,sP,Oio,Vio,Xio,cp,Hre,zio,Qio,lP,Wio,Hio,Uio,fp,Jio,Ure,Yio,Kio,E6,Zio,mp,C6,edo,Jre,odo,mPe,nd,gp,Yre,w6,rdo,Kre,tdo,gPe,Jo,A6,ado,sd,ndo,iP,sdo,ldo,dP,ido,ddo,cdo,y6,fdo,Zre,mdo,gdo,hdo,Xr,L6,pdo,ete,_do,udo,ld,bdo,ote,vdo,Fdo,cP,Tdo,Mdo,Edo,rte,Cdo,wdo,x6,Ado,Ne,k6,ydo,tte,Ldo,xdo,Xa,kdo,ate,Sdo,Rdo,nte,Bdo,Pdo,ste,$do,Ido,qdo,T,hp,lte,Ndo,jdo,fP,Ddo,Gdo,Odo,pp,ite,Vdo,Xdo,mP,zdo,Qdo,Wdo,_p,dte,Hdo,Udo,gP,Jdo,Ydo,Kdo,up,cte,Zdo,eco,hP,oco,rco,tco,bp,fte,aco,nco,pP,sco,lco,ico,vp,mte,dco,cco,_P,fco,mco,gco,Fp,gte,hco,pco,uP,_co,uco,bco,Tp,hte,vco,Fco,bP,Tco,Mco,Eco,Mp,pte,Cco,wco,vP,Aco,yco,Lco,Ep,_te,xco,kco,FP,Sco,Rco,Bco,Cp,ute,Pco,$co,TP,Ico,qco,Nco,wp,bte,jco,Dco,MP,Gco,Oco,Vco,Ap,vte,Xco,zco,EP,Qco,Wco,Hco,yp,Fte,Uco,Jco,CP,Yco,Kco,Zco,Lp,Tte,efo,ofo,wP,rfo,tfo,afo,xp,Mte,nfo,sfo,AP,lfo,ifo,dfo,kp,Ete,cfo,ffo,yP,mfo,gfo,hfo,Sp,Cte,pfo,_fo,LP,ufo,bfo,vfo,Rp,wte,Ffo,Tfo,xP,Mfo,Efo,Cfo,Bp,Ate,wfo,Afo,kP,yfo,Lfo,xfo,Pp,yte,kfo,Sfo,SP,Rfo,Bfo,Pfo,$p,Lte,$fo,Ifo,RP,qfo,Nfo,jfo,Ip,xte,Dfo,Gfo,BP,Ofo,Vfo,Xfo,qp,kte,zfo,Qfo,PP,Wfo,Hfo,Ufo,Np,Ste,Jfo,Yfo,$P,Kfo,Zfo,emo,jp,Rte,omo,rmo,IP,tmo,amo,nmo,Dp,Bte,smo,lmo,qP,imo,dmo,cmo,Gp,Pte,fmo,mmo,NP,gmo,hmo,pmo,Op,$te,_mo,umo,jP,bmo,vmo,Fmo,Vp,Ite,Tmo,Mmo,DP,Emo,Cmo,wmo,Hs,qte,Amo,ymo,GP,Lmo,xmo,OP,kmo,Smo,Rmo,Xp,Nte,Bmo,Pmo,VP,$mo,Imo,qmo,zp,jte,Nmo,jmo,XP,Dmo,Gmo,Omo,Qp,Dte,Vmo,Xmo,zP,zmo,Qmo,Wmo,Wp,Gte,Hmo,Umo,QP,Jmo,Ymo,Kmo,Hp,Ote,Zmo,ego,WP,ogo,rgo,tgo,Up,Vte,ago,ngo,HP,sgo,lgo,igo,Jp,Xte,dgo,cgo,UP,fgo,mgo,ggo,Yp,zte,hgo,pgo,JP,_go,ugo,bgo,Kp,Qte,vgo,Fgo,YP,Tgo,Mgo,Ego,Zp,Wte,Cgo,wgo,KP,Ago,ygo,Lgo,e_,Hte,xgo,kgo,ZP,Sgo,Rgo,Bgo,o_,Ute,Pgo,$go,e$,Igo,qgo,Ngo,r_,Jte,jgo,Dgo,o$,Ggo,Ogo,Vgo,t_,Yte,Xgo,zgo,r$,Qgo,Wgo,Hgo,a_,Kte,Ugo,Jgo,t$,Ygo,Kgo,Zgo,n_,Zte,eho,oho,a$,rho,tho,aho,s_,eae,nho,sho,n$,lho,iho,dho,l_,oae,cho,fho,s$,mho,gho,hho,i_,rae,pho,_ho,l$,uho,bho,vho,d_,tae,Fho,Tho,i$,Mho,Eho,Cho,c_,aae,who,Aho,d$,yho,Lho,xho,f_,nae,kho,Sho,c$,Rho,Bho,Pho,m_,sae,$ho,Iho,f$,qho,Nho,jho,g_,lae,Dho,Gho,m$,Oho,Vho,Xho,h_,iae,zho,Qho,g$,Who,Hho,Uho,p_,dae,Jho,Yho,h$,Kho,Zho,epo,__,cae,opo,rpo,p$,tpo,apo,npo,u_,fae,spo,lpo,_$,ipo,dpo,cpo,b_,mae,fpo,mpo,u$,gpo,hpo,ppo,v_,gae,_po,upo,b$,bpo,vpo,Fpo,F_,hae,Tpo,Mpo,v$,Epo,Cpo,wpo,T_,pae,Apo,ypo,F$,Lpo,xpo,kpo,M_,_ae,Spo,Rpo,T$,Bpo,Ppo,$po,E_,uae,Ipo,qpo,M$,Npo,jpo,Dpo,C_,bae,Gpo,Opo,E$,Vpo,Xpo,zpo,w_,vae,Qpo,Wpo,C$,Hpo,Upo,Jpo,A_,Fae,Ypo,Kpo,w$,Zpo,e_o,o_o,y_,Tae,r_o,t_o,A$,a_o,n_o,s_o,L_,Mae,l_o,i_o,y$,d_o,c_o,f_o,x_,Eae,m_o,g_o,L$,h_o,p_o,__o,k_,Cae,u_o,b_o,x$,v_o,F_o,T_o,S_,wae,M_o,E_o,k$,C_o,w_o,A_o,R_,Aae,y_o,L_o,S$,x_o,k_o,S_o,B_,yae,R_o,B_o,R$,P_o,$_o,I_o,P_,Lae,q_o,N_o,B$,j_o,D_o,G_o,$_,xae,O_o,V_o,P$,X_o,z_o,Q_o,I_,kae,W_o,H_o,$$,U_o,J_o,Y_o,q_,Sae,K_o,Z_o,I$,euo,ouo,ruo,N_,Rae,tuo,auo,q$,nuo,suo,luo,j_,Bae,iuo,duo,N$,cuo,fuo,muo,D_,Pae,guo,huo,j$,puo,_uo,uuo,G_,$ae,buo,vuo,D$,Fuo,Tuo,Muo,O_,Iae,Euo,Cuo,G$,wuo,Auo,yuo,V_,qae,Luo,xuo,O$,kuo,Suo,Ruo,X_,Nae,Buo,Puo,V$,$uo,Iuo,quo,z_,jae,Nuo,juo,X$,Duo,Guo,Ouo,Q_,Dae,Vuo,Xuo,z$,zuo,Quo,Wuo,W_,Gae,Huo,Uuo,Q$,Juo,Yuo,Kuo,H_,Oae,Zuo,e5o,W$,o5o,r5o,t5o,U_,Vae,a5o,n5o,H$,s5o,l5o,i5o,J_,Xae,d5o,c5o,U$,f5o,m5o,g5o,Y_,zae,h5o,p5o,J$,_5o,u5o,b5o,K_,Qae,v5o,F5o,Y$,T5o,M5o,E5o,Z_,C5o,Wae,w5o,A5o,Hae,y5o,L5o,Uae,x5o,k5o,S6,hPe,id,eu,Jae,R6,S5o,Yae,R5o,pPe,Yo,B6,B5o,dd,P5o,K$,$5o,I5o,Z$,q5o,N5o,j5o,P6,D5o,Kae,G5o,O5o,V5o,zr,$6,X5o,Zae,z5o,Q5o,cd,W5o,ene,H5o,U5o,eI,J5o,Y5o,K5o,one,Z5o,e1o,I6,o1o,je,q6,r1o,rne,t1o,a1o,za,n1o,tne,s1o,l1o,ane,i1o,d1o,nne,c1o,f1o,m1o,S,ou,sne,g1o,h1o,oI,p1o,_1o,u1o,ru,lne,b1o,v1o,rI,F1o,T1o,M1o,tu,ine,E1o,C1o,tI,w1o,A1o,y1o,au,dne,L1o,x1o,aI,k1o,S1o,R1o,nu,cne,B1o,P1o,nI,$1o,I1o,q1o,su,fne,N1o,j1o,sI,D1o,G1o,O1o,lu,mne,V1o,X1o,lI,z1o,Q1o,W1o,iu,gne,H1o,U1o,iI,J1o,Y1o,K1o,du,hne,Z1o,e4o,dI,o4o,r4o,t4o,cu,pne,a4o,n4o,cI,s4o,l4o,i4o,fu,_ne,d4o,c4o,fI,f4o,m4o,g4o,mu,une,h4o,p4o,mI,_4o,u4o,b4o,gu,bne,v4o,F4o,gI,T4o,M4o,E4o,hu,vne,C4o,w4o,hI,A4o,y4o,L4o,pu,Fne,x4o,k4o,pI,S4o,R4o,B4o,_u,Tne,P4o,$4o,_I,I4o,q4o,N4o,uu,Mne,j4o,D4o,uI,G4o,O4o,V4o,bu,Ene,X4o,z4o,bI,Q4o,W4o,H4o,vu,Cne,U4o,J4o,vI,Y4o,K4o,Z4o,Fu,wne,ebo,obo,FI,rbo,tbo,abo,Tu,Ane,nbo,sbo,TI,lbo,ibo,dbo,Mu,yne,cbo,fbo,MI,mbo,gbo,hbo,Eu,Lne,pbo,_bo,EI,ubo,bbo,vbo,Cu,xne,Fbo,Tbo,CI,Mbo,Ebo,Cbo,wu,kne,wbo,Abo,wI,ybo,Lbo,xbo,Au,Sne,kbo,Sbo,AI,Rbo,Bbo,Pbo,yu,Rne,$bo,Ibo,yI,qbo,Nbo,jbo,Lu,Bne,Dbo,Gbo,LI,Obo,Vbo,Xbo,xu,Pne,zbo,Qbo,xI,Wbo,Hbo,Ubo,ku,$ne,Jbo,Ybo,kI,Kbo,Zbo,e2o,Su,Ine,o2o,r2o,SI,t2o,a2o,n2o,Ru,qne,s2o,l2o,RI,i2o,d2o,c2o,Bu,Nne,f2o,m2o,BI,g2o,h2o,p2o,Pu,jne,_2o,u2o,PI,b2o,v2o,F2o,$u,Dne,T2o,M2o,$I,E2o,C2o,w2o,Iu,Gne,A2o,y2o,II,L2o,x2o,k2o,qu,One,S2o,R2o,qI,B2o,P2o,$2o,Nu,Vne,I2o,q2o,NI,N2o,j2o,D2o,ju,Xne,G2o,O2o,jI,V2o,X2o,z2o,Du,Q2o,zne,W2o,H2o,Qne,U2o,J2o,Wne,Y2o,K2o,N6,_Pe,fd,Gu,Hne,j6,Z2o,Une,evo,uPe,Ko,D6,ovo,md,rvo,DI,tvo,avo,GI,nvo,svo,lvo,G6,ivo,Jne,dvo,cvo,fvo,Qr,O6,mvo,Yne,gvo,hvo,gd,pvo,Kne,_vo,uvo,OI,bvo,vvo,Fvo,Zne,Tvo,Mvo,V6,Evo,De,X6,Cvo,ese,wvo,Avo,Qa,yvo,ose,Lvo,xvo,rse,kvo,Svo,tse,Rvo,Bvo,Pvo,$,Ou,ase,$vo,Ivo,VI,qvo,Nvo,jvo,Vu,nse,Dvo,Gvo,XI,Ovo,Vvo,Xvo,Xu,sse,zvo,Qvo,zI,Wvo,Hvo,Uvo,zu,lse,Jvo,Yvo,QI,Kvo,Zvo,eFo,Qu,ise,oFo,rFo,WI,tFo,aFo,nFo,Wu,dse,sFo,lFo,HI,iFo,dFo,cFo,Hu,cse,fFo,mFo,UI,gFo,hFo,pFo,Uu,fse,_Fo,uFo,JI,bFo,vFo,FFo,Ju,mse,TFo,MFo,YI,EFo,CFo,wFo,Yu,gse,AFo,yFo,KI,LFo,xFo,kFo,Ku,hse,SFo,RFo,ZI,BFo,PFo,$Fo,Zu,pse,IFo,qFo,eq,NFo,jFo,DFo,e5,_se,GFo,OFo,oq,VFo,XFo,zFo,o5,use,QFo,WFo,rq,HFo,UFo,JFo,r5,bse,YFo,KFo,tq,ZFo,eTo,oTo,t5,vse,rTo,tTo,aq,aTo,nTo,sTo,a5,Fse,lTo,iTo,nq,dTo,cTo,fTo,n5,Tse,mTo,gTo,sq,hTo,pTo,_To,s5,Mse,uTo,bTo,lq,vTo,FTo,TTo,l5,Ese,MTo,ETo,iq,CTo,wTo,ATo,i5,Cse,yTo,LTo,dq,xTo,kTo,STo,d5,wse,RTo,BTo,cq,PTo,$To,ITo,c5,Ase,qTo,NTo,fq,jTo,DTo,GTo,f5,yse,OTo,VTo,mq,XTo,zTo,QTo,m5,Lse,WTo,HTo,gq,UTo,JTo,YTo,g5,xse,KTo,ZTo,hq,e7o,o7o,r7o,h5,kse,t7o,a7o,pq,n7o,s7o,l7o,p5,Sse,i7o,d7o,_q,c7o,f7o,m7o,_5,Rse,g7o,h7o,uq,p7o,_7o,u7o,u5,Bse,b7o,v7o,bq,F7o,T7o,M7o,b5,Pse,E7o,C7o,vq,w7o,A7o,y7o,v5,$se,L7o,x7o,Fq,k7o,S7o,R7o,F5,Ise,B7o,P7o,Tq,$7o,I7o,q7o,T5,qse,N7o,j7o,Mq,D7o,G7o,O7o,M5,Nse,V7o,X7o,Eq,z7o,Q7o,W7o,E5,H7o,jse,U7o,J7o,Dse,Y7o,K7o,Gse,Z7o,eMo,z6,bPe,hd,C5,Ose,Q6,oMo,Vse,rMo,vPe,Zo,W6,tMo,pd,aMo,Cq,nMo,sMo,wq,lMo,iMo,dMo,H6,cMo,Xse,fMo,mMo,gMo,Wr,U6,hMo,zse,pMo,_Mo,_d,uMo,Qse,bMo,vMo,Aq,FMo,TMo,MMo,Wse,EMo,CMo,J6,wMo,Ge,Y6,AMo,Hse,yMo,LMo,Wa,xMo,Use,kMo,SMo,Jse,RMo,BMo,Yse,PMo,$Mo,IMo,I,w5,Kse,qMo,NMo,yq,jMo,DMo,GMo,A5,Zse,OMo,VMo,Lq,XMo,zMo,QMo,y5,ele,WMo,HMo,xq,UMo,JMo,YMo,L5,ole,KMo,ZMo,kq,eEo,oEo,rEo,x5,rle,tEo,aEo,Sq,nEo,sEo,lEo,k5,tle,iEo,dEo,Rq,cEo,fEo,mEo,S5,ale,gEo,hEo,Bq,pEo,_Eo,uEo,R5,nle,bEo,vEo,Pq,FEo,TEo,MEo,B5,sle,EEo,CEo,$q,wEo,AEo,yEo,P5,lle,LEo,xEo,Iq,kEo,SEo,REo,$5,ile,BEo,PEo,qq,$Eo,IEo,qEo,I5,dle,NEo,jEo,Nq,DEo,GEo,OEo,q5,cle,VEo,XEo,jq,zEo,QEo,WEo,N5,fle,HEo,UEo,Dq,JEo,YEo,KEo,j5,mle,ZEo,e3o,Gq,o3o,r3o,t3o,D5,gle,a3o,n3o,Oq,s3o,l3o,i3o,G5,hle,d3o,c3o,Vq,f3o,m3o,g3o,O5,ple,h3o,p3o,Xq,_3o,u3o,b3o,V5,_le,v3o,F3o,zq,T3o,M3o,E3o,X5,ule,C3o,w3o,Qq,A3o,y3o,L3o,z5,ble,x3o,k3o,Wq,S3o,R3o,B3o,Q5,vle,P3o,$3o,Hq,I3o,q3o,N3o,W5,Fle,j3o,D3o,Uq,G3o,O3o,V3o,H5,Tle,X3o,z3o,Jq,Q3o,W3o,H3o,U5,Mle,U3o,J3o,Yq,Y3o,K3o,Z3o,J5,Ele,eCo,oCo,Kq,rCo,tCo,aCo,Y5,Cle,nCo,sCo,Zq,lCo,iCo,dCo,K5,wle,cCo,fCo,eN,mCo,gCo,hCo,Z5,Ale,pCo,_Co,oN,uCo,bCo,vCo,e1,yle,FCo,TCo,rN,MCo,ECo,CCo,o1,Lle,wCo,ACo,xle,yCo,LCo,xCo,r1,kle,kCo,SCo,tN,RCo,BCo,PCo,t1,Sle,$Co,ICo,aN,qCo,NCo,jCo,a1,Rle,DCo,GCo,nN,OCo,VCo,XCo,n1,Ble,zCo,QCo,sN,WCo,HCo,UCo,s1,JCo,Ple,YCo,KCo,$le,ZCo,e6o,Ile,o6o,r6o,K6,FPe,ud,l1,qle,Z6,t6o,Nle,a6o,TPe,er,ew,n6o,bd,s6o,lN,l6o,i6o,iN,d6o,c6o,f6o,ow,m6o,jle,g6o,h6o,p6o,Hr,rw,_6o,Dle,u6o,b6o,vd,v6o,Gle,F6o,T6o,dN,M6o,E6o,C6o,Ole,w6o,A6o,tw,y6o,Oe,aw,L6o,Vle,x6o,k6o,Ha,S6o,Xle,R6o,B6o,zle,P6o,$6o,Qle,I6o,q6o,N6o,ne,i1,Wle,j6o,D6o,cN,G6o,O6o,V6o,d1,Hle,X6o,z6o,fN,Q6o,W6o,H6o,c1,Ule,U6o,J6o,mN,Y6o,K6o,Z6o,f1,Jle,ewo,owo,gN,rwo,two,awo,m1,Yle,nwo,swo,hN,lwo,iwo,dwo,g1,Kle,cwo,fwo,pN,mwo,gwo,hwo,h1,Zle,pwo,_wo,_N,uwo,bwo,vwo,p1,eie,Fwo,Two,uN,Mwo,Ewo,Cwo,_1,oie,wwo,Awo,bN,ywo,Lwo,xwo,u1,rie,kwo,Swo,vN,Rwo,Bwo,Pwo,b1,tie,$wo,Iwo,FN,qwo,Nwo,jwo,v1,aie,Dwo,Gwo,TN,Owo,Vwo,Xwo,F1,nie,zwo,Qwo,MN,Wwo,Hwo,Uwo,T1,sie,Jwo,Ywo,EN,Kwo,Zwo,eAo,M1,lie,oAo,rAo,CN,tAo,aAo,nAo,E1,iie,sAo,lAo,wN,iAo,dAo,cAo,C1,die,fAo,mAo,AN,gAo,hAo,pAo,w1,_Ao,cie,uAo,bAo,fie,vAo,FAo,mie,TAo,MAo,nw,MPe,Fd,A1,gie,sw,EAo,hie,CAo,EPe,or,lw,wAo,Td,AAo,yN,yAo,LAo,LN,xAo,kAo,SAo,iw,RAo,pie,BAo,PAo,$Ao,Ur,dw,IAo,_ie,qAo,NAo,Md,jAo,uie,DAo,GAo,xN,OAo,VAo,XAo,bie,zAo,QAo,cw,WAo,Ve,fw,HAo,vie,UAo,JAo,Ua,YAo,Fie,KAo,ZAo,Tie,e0o,o0o,Mie,r0o,t0o,a0o,y,y1,Eie,n0o,s0o,kN,l0o,i0o,d0o,L1,Cie,c0o,f0o,SN,m0o,g0o,h0o,x1,wie,p0o,_0o,RN,u0o,b0o,v0o,k1,Aie,F0o,T0o,BN,M0o,E0o,C0o,S1,yie,w0o,A0o,PN,y0o,L0o,x0o,R1,Lie,k0o,S0o,$N,R0o,B0o,P0o,B1,xie,$0o,I0o,IN,q0o,N0o,j0o,P1,kie,D0o,G0o,qN,O0o,V0o,X0o,$1,Sie,z0o,Q0o,NN,W0o,H0o,U0o,I1,Rie,J0o,Y0o,jN,K0o,Z0o,eyo,q1,Bie,oyo,ryo,DN,tyo,ayo,nyo,N1,Pie,syo,lyo,GN,iyo,dyo,cyo,j1,$ie,fyo,myo,ON,gyo,hyo,pyo,D1,Iie,_yo,uyo,VN,byo,vyo,Fyo,G1,qie,Tyo,Myo,XN,Eyo,Cyo,wyo,O1,Nie,Ayo,yyo,zN,Lyo,xyo,kyo,V1,jie,Syo,Ryo,QN,Byo,Pyo,$yo,X1,Die,Iyo,qyo,WN,Nyo,jyo,Dyo,z1,Gie,Gyo,Oyo,HN,Vyo,Xyo,zyo,Q1,Oie,Qyo,Wyo,UN,Hyo,Uyo,Jyo,W1,Vie,Yyo,Kyo,JN,Zyo,e8o,o8o,H1,Xie,r8o,t8o,YN,a8o,n8o,s8o,U1,zie,l8o,i8o,KN,d8o,c8o,f8o,J1,Qie,m8o,g8o,ZN,h8o,p8o,_8o,Y1,Wie,u8o,b8o,ej,v8o,F8o,T8o,K1,Hie,M8o,E8o,oj,C8o,w8o,A8o,Z1,Uie,y8o,L8o,rj,x8o,k8o,S8o,e4,Jie,R8o,B8o,tj,P8o,$8o,I8o,o4,Yie,q8o,N8o,aj,j8o,D8o,G8o,r4,Kie,O8o,V8o,nj,X8o,z8o,Q8o,t4,Zie,W8o,H8o,sj,U8o,J8o,Y8o,a4,ede,K8o,Z8o,lj,eLo,oLo,rLo,n4,ode,tLo,aLo,ij,nLo,sLo,lLo,s4,rde,iLo,dLo,dj,cLo,fLo,mLo,l4,tde,gLo,hLo,cj,pLo,_Lo,uLo,i4,ade,bLo,vLo,fj,FLo,TLo,MLo,d4,nde,ELo,CLo,mj,wLo,ALo,yLo,c4,sde,LLo,xLo,gj,kLo,SLo,RLo,f4,lde,BLo,PLo,hj,$Lo,ILo,qLo,m4,ide,NLo,jLo,pj,DLo,GLo,OLo,g4,dde,VLo,XLo,_j,zLo,QLo,WLo,h4,cde,HLo,ULo,uj,JLo,YLo,KLo,p4,fde,ZLo,e9o,bj,o9o,r9o,t9o,_4,mde,a9o,n9o,vj,s9o,l9o,i9o,u4,gde,d9o,c9o,Fj,f9o,m9o,g9o,b4,hde,h9o,p9o,Tj,_9o,u9o,b9o,v4,pde,v9o,F9o,Mj,T9o,M9o,E9o,F4,C9o,_de,w9o,A9o,ude,y9o,L9o,bde,x9o,k9o,mw,CPe,Ed,T4,vde,gw,S9o,Fde,R9o,wPe,rr,hw,B9o,Cd,P9o,Ej,$9o,I9o,Cj,q9o,N9o,j9o,pw,D9o,Tde,G9o,O9o,V9o,Jr,_w,X9o,Mde,z9o,Q9o,wd,W9o,Ede,H9o,U9o,wj,J9o,Y9o,K9o,Cde,Z9o,exo,uw,oxo,Xe,bw,rxo,wde,txo,axo,Ja,nxo,Ade,sxo,lxo,yde,ixo,dxo,Lde,cxo,fxo,mxo,G,M4,xde,gxo,hxo,Aj,pxo,_xo,uxo,E4,kde,bxo,vxo,yj,Fxo,Txo,Mxo,C4,Sde,Exo,Cxo,Lj,wxo,Axo,yxo,w4,Rde,Lxo,xxo,xj,kxo,Sxo,Rxo,A4,Bde,Bxo,Pxo,kj,$xo,Ixo,qxo,y4,Pde,Nxo,jxo,Sj,Dxo,Gxo,Oxo,L4,$de,Vxo,Xxo,Rj,zxo,Qxo,Wxo,x4,Ide,Hxo,Uxo,Bj,Jxo,Yxo,Kxo,k4,qde,Zxo,eko,Pj,oko,rko,tko,S4,Nde,ako,nko,$j,sko,lko,iko,R4,jde,dko,cko,Ij,fko,mko,gko,B4,Dde,hko,pko,qj,_ko,uko,bko,P4,Gde,vko,Fko,Nj,Tko,Mko,Eko,$4,Ode,Cko,wko,jj,Ako,yko,Lko,I4,Vde,xko,kko,Dj,Sko,Rko,Bko,q4,Xde,Pko,$ko,Gj,Iko,qko,Nko,N4,zde,jko,Dko,Oj,Gko,Oko,Vko,j4,Qde,Xko,zko,Vj,Qko,Wko,Hko,D4,Wde,Uko,Jko,Xj,Yko,Kko,Zko,G4,Hde,eSo,oSo,zj,rSo,tSo,aSo,O4,Ude,nSo,sSo,Qj,lSo,iSo,dSo,V4,Jde,cSo,fSo,Wj,mSo,gSo,hSo,X4,Yde,pSo,_So,Hj,uSo,bSo,vSo,z4,Kde,FSo,TSo,Uj,MSo,ESo,CSo,Q4,Zde,wSo,ASo,Jj,ySo,LSo,xSo,W4,ece,kSo,SSo,Yj,RSo,BSo,PSo,H4,oce,$So,ISo,Kj,qSo,NSo,jSo,U4,rce,DSo,GSo,Zj,OSo,VSo,XSo,J4,zSo,tce,QSo,WSo,ace,HSo,USo,nce,JSo,YSo,vw,APe,Ad,Y4,sce,Fw,KSo,lce,ZSo,yPe,tr,Tw,eRo,yd,oRo,eD,rRo,tRo,oD,aRo,nRo,sRo,Mw,lRo,ice,iRo,dRo,cRo,Yr,Ew,fRo,dce,mRo,gRo,Ld,hRo,cce,pRo,_Ro,rD,uRo,bRo,vRo,fce,FRo,TRo,Cw,MRo,ze,ww,ERo,mce,CRo,wRo,Ya,ARo,gce,yRo,LRo,hce,xRo,kRo,pce,SRo,RRo,BRo,da,K4,_ce,PRo,$Ro,tD,IRo,qRo,NRo,Z4,uce,jRo,DRo,aD,GRo,ORo,VRo,eb,bce,XRo,zRo,nD,QRo,WRo,HRo,ob,vce,URo,JRo,sD,YRo,KRo,ZRo,rb,Fce,eBo,oBo,lD,rBo,tBo,aBo,tb,nBo,Tce,sBo,lBo,Mce,iBo,dBo,Ece,cBo,fBo,Aw,LPe,xd,ab,Cce,yw,mBo,wce,gBo,xPe,ar,Lw,hBo,kd,pBo,iD,_Bo,uBo,dD,bBo,vBo,FBo,xw,TBo,Ace,MBo,EBo,CBo,Kr,kw,wBo,yce,ABo,yBo,Sd,LBo,Lce,xBo,kBo,cD,SBo,RBo,BBo,xce,PBo,$Bo,Sw,IBo,Qe,Rw,qBo,kce,NBo,jBo,Ka,DBo,Sce,GBo,OBo,Rce,VBo,XBo,Bce,zBo,QBo,WBo,j,nb,Pce,HBo,UBo,fD,JBo,YBo,KBo,sb,$ce,ZBo,ePo,mD,oPo,rPo,tPo,lb,Ice,aPo,nPo,gD,sPo,lPo,iPo,ib,qce,dPo,cPo,hD,fPo,mPo,gPo,db,Nce,hPo,pPo,pD,_Po,uPo,bPo,cb,jce,vPo,FPo,_D,TPo,MPo,EPo,fb,Dce,CPo,wPo,uD,APo,yPo,LPo,mb,Gce,xPo,kPo,bD,SPo,RPo,BPo,gb,Oce,PPo,$Po,vD,IPo,qPo,NPo,hb,Vce,jPo,DPo,FD,GPo,OPo,VPo,pb,Xce,XPo,zPo,TD,QPo,WPo,HPo,_b,zce,UPo,JPo,MD,YPo,KPo,ZPo,ub,Qce,e$o,o$o,ED,r$o,t$o,a$o,bb,Wce,n$o,s$o,CD,l$o,i$o,d$o,vb,Hce,c$o,f$o,wD,m$o,g$o,h$o,Fb,Uce,p$o,_$o,AD,u$o,b$o,v$o,Tb,Jce,F$o,T$o,yD,M$o,E$o,C$o,Mb,Yce,w$o,A$o,LD,y$o,L$o,x$o,Eb,Kce,k$o,S$o,xD,R$o,B$o,P$o,Cb,Zce,$$o,I$o,kD,q$o,N$o,j$o,wb,efe,D$o,G$o,SD,O$o,V$o,X$o,Ab,ofe,z$o,Q$o,RD,W$o,H$o,U$o,yb,rfe,J$o,Y$o,BD,K$o,Z$o,eIo,Lb,tfe,oIo,rIo,PD,tIo,aIo,nIo,xb,afe,sIo,lIo,$D,iIo,dIo,cIo,kb,nfe,fIo,mIo,ID,gIo,hIo,pIo,Sb,sfe,_Io,uIo,qD,bIo,vIo,FIo,Rb,lfe,TIo,MIo,ND,EIo,CIo,wIo,Bb,ife,AIo,yIo,jD,LIo,xIo,kIo,Pb,dfe,SIo,RIo,DD,BIo,PIo,$Io,$b,cfe,IIo,qIo,GD,NIo,jIo,DIo,Ib,ffe,GIo,OIo,OD,VIo,XIo,zIo,qb,mfe,QIo,WIo,VD,HIo,UIo,JIo,Nb,YIo,gfe,KIo,ZIo,hfe,eqo,oqo,pfe,rqo,tqo,Bw,kPe,Rd,jb,_fe,Pw,aqo,ufe,nqo,SPe,nr,$w,sqo,Bd,lqo,XD,iqo,dqo,zD,cqo,fqo,mqo,Iw,gqo,bfe,hqo,pqo,_qo,Zr,qw,uqo,vfe,bqo,vqo,Pd,Fqo,Ffe,Tqo,Mqo,QD,Eqo,Cqo,wqo,Tfe,Aqo,yqo,Nw,Lqo,We,jw,xqo,Mfe,kqo,Sqo,Za,Rqo,Efe,Bqo,Pqo,Cfe,$qo,Iqo,wfe,qqo,Nqo,jqo,R,Db,Afe,Dqo,Gqo,WD,Oqo,Vqo,Xqo,Gb,yfe,zqo,Qqo,HD,Wqo,Hqo,Uqo,Ob,Lfe,Jqo,Yqo,UD,Kqo,Zqo,eNo,Vb,xfe,oNo,rNo,JD,tNo,aNo,nNo,Xb,kfe,sNo,lNo,YD,iNo,dNo,cNo,zb,Sfe,fNo,mNo,KD,gNo,hNo,pNo,Qb,Rfe,_No,uNo,ZD,bNo,vNo,FNo,Wb,Bfe,TNo,MNo,eG,ENo,CNo,wNo,Hb,Pfe,ANo,yNo,oG,LNo,xNo,kNo,Ub,$fe,SNo,RNo,rG,BNo,PNo,$No,Jb,Ife,INo,qNo,tG,NNo,jNo,DNo,Yb,qfe,GNo,ONo,aG,VNo,XNo,zNo,Kb,Nfe,QNo,WNo,nG,HNo,UNo,JNo,Zb,jfe,YNo,KNo,sG,ZNo,ejo,ojo,e2,Dfe,rjo,tjo,lG,ajo,njo,sjo,o2,Gfe,ljo,ijo,iG,djo,cjo,fjo,r2,Ofe,mjo,gjo,dG,hjo,pjo,_jo,t2,Vfe,ujo,bjo,cG,vjo,Fjo,Tjo,a2,Xfe,Mjo,Ejo,fG,Cjo,wjo,Ajo,n2,zfe,yjo,Ljo,mG,xjo,kjo,Sjo,s2,Qfe,Rjo,Bjo,gG,Pjo,$jo,Ijo,l2,Wfe,qjo,Njo,hG,jjo,Djo,Gjo,i2,Hfe,Ojo,Vjo,pG,Xjo,zjo,Qjo,d2,Ufe,Wjo,Hjo,_G,Ujo,Jjo,Yjo,c2,Jfe,Kjo,Zjo,uG,eDo,oDo,rDo,f2,Yfe,tDo,aDo,bG,nDo,sDo,lDo,m2,Kfe,iDo,dDo,vG,cDo,fDo,mDo,g2,Zfe,gDo,hDo,FG,pDo,_Do,uDo,h2,eme,bDo,vDo,TG,FDo,TDo,MDo,p2,ome,EDo,CDo,MG,wDo,ADo,yDo,_2,rme,LDo,xDo,EG,kDo,SDo,RDo,u2,tme,BDo,PDo,CG,$Do,IDo,qDo,b2,ame,NDo,jDo,wG,DDo,GDo,ODo,v2,nme,VDo,XDo,AG,zDo,QDo,WDo,F2,sme,HDo,UDo,yG,JDo,YDo,KDo,T2,lme,ZDo,eGo,LG,oGo,rGo,tGo,M2,ime,aGo,nGo,xG,sGo,lGo,iGo,E2,dme,dGo,cGo,kG,fGo,mGo,gGo,C2,cme,hGo,pGo,SG,_Go,uGo,bGo,w2,vGo,fme,FGo,TGo,mme,MGo,EGo,gme,CGo,wGo,Dw,RPe,$d,A2,hme,Gw,AGo,pme,yGo,BPe,sr,Ow,LGo,Id,xGo,RG,kGo,SGo,BG,RGo,BGo,PGo,Vw,$Go,_me,IGo,qGo,NGo,et,Xw,jGo,ume,DGo,GGo,qd,OGo,bme,VGo,XGo,PG,zGo,QGo,WGo,vme,HGo,UGo,zw,JGo,He,Qw,YGo,Fme,KGo,ZGo,en,eOo,Tme,oOo,rOo,Mme,tOo,aOo,Eme,nOo,sOo,lOo,Cme,y2,wme,iOo,dOo,$G,cOo,fOo,mOo,L2,gOo,Ame,hOo,pOo,yme,_Oo,uOo,Lme,bOo,vOo,Ww,PPe,Nd,x2,xme,Hw,FOo,kme,TOo,$Pe,lr,Uw,MOo,jd,EOo,IG,COo,wOo,qG,AOo,yOo,LOo,Jw,xOo,Sme,kOo,SOo,ROo,ot,Yw,BOo,Rme,POo,$Oo,Dd,IOo,Bme,qOo,NOo,NG,jOo,DOo,GOo,Pme,OOo,VOo,Kw,XOo,Ue,Zw,zOo,$me,QOo,WOo,on,HOo,Ime,UOo,JOo,qme,YOo,KOo,Nme,ZOo,eVo,oVo,ce,k2,jme,rVo,tVo,jG,aVo,nVo,sVo,S2,Dme,lVo,iVo,DG,dVo,cVo,fVo,R2,Gme,mVo,gVo,GG,hVo,pVo,_Vo,Us,Ome,uVo,bVo,OG,vVo,FVo,VG,TVo,MVo,EVo,B2,Vme,CVo,wVo,XG,AVo,yVo,LVo,ma,Xme,xVo,kVo,zG,SVo,RVo,QG,BVo,PVo,WG,$Vo,IVo,qVo,P2,zme,NVo,jVo,HG,DVo,GVo,OVo,$2,Qme,VVo,XVo,UG,zVo,QVo,WVo,I2,Wme,HVo,UVo,JG,JVo,YVo,KVo,q2,Hme,ZVo,eXo,YG,oXo,rXo,tXo,N2,Ume,aXo,nXo,KG,sXo,lXo,iXo,j2,Jme,dXo,cXo,ZG,fXo,mXo,gXo,D2,Yme,hXo,pXo,eO,_Xo,uXo,bXo,G2,vXo,Kme,FXo,TXo,Zme,MXo,EXo,ege,CXo,wXo,eA,IPe,Gd,O2,oge,oA,AXo,rge,yXo,qPe,ir,rA,LXo,Od,xXo,oO,kXo,SXo,rO,RXo,BXo,PXo,tA,$Xo,tge,IXo,qXo,NXo,rt,aA,jXo,age,DXo,GXo,Vd,OXo,nge,VXo,XXo,tO,zXo,QXo,WXo,sge,HXo,UXo,nA,JXo,Je,sA,YXo,lge,KXo,ZXo,rn,ezo,ige,ozo,rzo,dge,tzo,azo,cge,nzo,szo,lzo,fge,V2,mge,izo,dzo,aO,czo,fzo,mzo,X2,gzo,gge,hzo,pzo,hge,_zo,uzo,pge,bzo,vzo,lA,NPe,Xd,z2,_ge,iA,Fzo,uge,Tzo,jPe,dr,dA,Mzo,zd,Ezo,nO,Czo,wzo,sO,Azo,yzo,Lzo,cA,xzo,bge,kzo,Szo,Rzo,tt,fA,Bzo,vge,Pzo,$zo,Qd,Izo,Fge,qzo,Nzo,lO,jzo,Dzo,Gzo,Tge,Ozo,Vzo,mA,Xzo,Ye,gA,zzo,Mge,Qzo,Wzo,tn,Hzo,Ege,Uzo,Jzo,Cge,Yzo,Kzo,wge,Zzo,eQo,oQo,Re,Q2,Age,rQo,tQo,iO,aQo,nQo,sQo,W2,yge,lQo,iQo,dO,dQo,cQo,fQo,H2,Lge,mQo,gQo,cO,hQo,pQo,_Qo,U2,xge,uQo,bQo,fO,vQo,FQo,TQo,J2,kge,MQo,EQo,mO,CQo,wQo,AQo,Y2,Sge,yQo,LQo,gO,xQo,kQo,SQo,K2,Rge,RQo,BQo,hO,PQo,$Qo,IQo,Z2,Bge,qQo,NQo,pO,jQo,DQo,GQo,ev,OQo,Pge,VQo,XQo,$ge,zQo,QQo,Ige,WQo,HQo,hA,DPe,Wd,ov,qge,pA,UQo,Nge,JQo,GPe,cr,_A,YQo,Hd,KQo,_O,ZQo,eWo,uO,oWo,rWo,tWo,uA,aWo,jge,nWo,sWo,lWo,at,bA,iWo,Dge,dWo,cWo,Ud,fWo,Gge,mWo,gWo,bO,hWo,pWo,_Wo,Oge,uWo,bWo,vA,vWo,Ke,FA,FWo,Vge,TWo,MWo,an,EWo,Xge,CWo,wWo,zge,AWo,yWo,Qge,LWo,xWo,kWo,nn,rv,Wge,SWo,RWo,vO,BWo,PWo,$Wo,tv,Hge,IWo,qWo,FO,NWo,jWo,DWo,av,Uge,GWo,OWo,TO,VWo,XWo,zWo,nv,Jge,QWo,WWo,MO,HWo,UWo,JWo,sv,YWo,Yge,KWo,ZWo,Kge,eHo,oHo,Zge,rHo,tHo,TA,OPe,Jd,lv,ehe,MA,aHo,ohe,nHo,VPe,fr,EA,sHo,Yd,lHo,EO,iHo,dHo,CO,cHo,fHo,mHo,CA,gHo,rhe,hHo,pHo,_Ho,nt,wA,uHo,the,bHo,vHo,Kd,FHo,ahe,THo,MHo,wO,EHo,CHo,wHo,nhe,AHo,yHo,AA,LHo,Ze,yA,xHo,she,kHo,SHo,sn,RHo,lhe,BHo,PHo,ihe,$Ho,IHo,dhe,qHo,NHo,jHo,Be,iv,che,DHo,GHo,AO,OHo,VHo,XHo,dv,fhe,zHo,QHo,yO,WHo,HHo,UHo,cv,mhe,JHo,YHo,LO,KHo,ZHo,eUo,fv,ghe,oUo,rUo,xO,tUo,aUo,nUo,mv,hhe,sUo,lUo,kO,iUo,dUo,cUo,gv,phe,fUo,mUo,SO,gUo,hUo,pUo,hv,_he,_Uo,uUo,RO,bUo,vUo,FUo,pv,uhe,TUo,MUo,BO,EUo,CUo,wUo,_v,AUo,bhe,yUo,LUo,vhe,xUo,kUo,Fhe,SUo,RUo,LA,XPe,Zd,uv,The,xA,BUo,Mhe,PUo,zPe,mr,kA,$Uo,ec,IUo,PO,qUo,NUo,$O,jUo,DUo,GUo,SA,OUo,Ehe,VUo,XUo,zUo,st,RA,QUo,Che,WUo,HUo,oc,UUo,whe,JUo,YUo,IO,KUo,ZUo,eJo,Ahe,oJo,rJo,BA,tJo,eo,PA,aJo,yhe,nJo,sJo,ln,lJo,Lhe,iJo,dJo,xhe,cJo,fJo,khe,mJo,gJo,hJo,$A,bv,She,pJo,_Jo,qO,uJo,bJo,vJo,vv,Rhe,FJo,TJo,NO,MJo,EJo,CJo,Fv,wJo,Bhe,AJo,yJo,Phe,LJo,xJo,$he,kJo,SJo,IA,QPe,rc,Tv,Ihe,qA,RJo,qhe,BJo,WPe,gr,NA,PJo,tc,$Jo,jO,IJo,qJo,DO,NJo,jJo,DJo,jA,GJo,Nhe,OJo,VJo,XJo,lt,DA,zJo,jhe,QJo,WJo,ac,HJo,Dhe,UJo,JJo,GO,YJo,KJo,ZJo,Ghe,eYo,oYo,GA,rYo,oo,OA,tYo,Ohe,aYo,nYo,dn,sYo,Vhe,lYo,iYo,Xhe,dYo,cYo,zhe,fYo,mYo,gYo,cn,Mv,Qhe,hYo,pYo,OO,_Yo,uYo,bYo,Ev,Whe,vYo,FYo,VO,TYo,MYo,EYo,Cv,Hhe,CYo,wYo,XO,AYo,yYo,LYo,wv,Uhe,xYo,kYo,zO,SYo,RYo,BYo,Av,PYo,Jhe,$Yo,IYo,Yhe,qYo,NYo,Khe,jYo,DYo,VA,HPe,nc,yv,Zhe,XA,GYo,epe,OYo,UPe,hr,zA,VYo,sc,XYo,QO,zYo,QYo,WO,WYo,HYo,UYo,QA,JYo,ope,YYo,KYo,ZYo,it,WA,eKo,rpe,oKo,rKo,lc,tKo,tpe,aKo,nKo,HO,sKo,lKo,iKo,ape,dKo,cKo,HA,fKo,ro,UA,mKo,npe,gKo,hKo,fn,pKo,spe,_Ko,uKo,lpe,bKo,vKo,ipe,FKo,TKo,MKo,ic,Lv,dpe,EKo,CKo,UO,wKo,AKo,yKo,xv,cpe,LKo,xKo,JO,kKo,SKo,RKo,kv,fpe,BKo,PKo,YO,$Ko,IKo,qKo,Sv,NKo,mpe,jKo,DKo,gpe,GKo,OKo,hpe,VKo,XKo,JA,JPe,dc,Rv,ppe,YA,zKo,_pe,QKo,YPe,pr,KA,WKo,cc,HKo,KO,UKo,JKo,ZO,YKo,KKo,ZKo,ZA,eZo,upe,oZo,rZo,tZo,dt,e0,aZo,bpe,nZo,sZo,fc,lZo,vpe,iZo,dZo,eV,cZo,fZo,mZo,Fpe,gZo,hZo,o0,pZo,to,r0,_Zo,Tpe,uZo,bZo,mn,vZo,Mpe,FZo,TZo,Epe,MZo,EZo,Cpe,CZo,wZo,AZo,wpe,Bv,Ape,yZo,LZo,oV,xZo,kZo,SZo,Pv,RZo,ype,BZo,PZo,Lpe,$Zo,IZo,xpe,qZo,NZo,t0,KPe,mc,$v,kpe,a0,jZo,Spe,DZo,ZPe,_r,n0,GZo,gc,OZo,rV,VZo,XZo,tV,zZo,QZo,WZo,s0,HZo,Rpe,UZo,JZo,YZo,ct,l0,KZo,Bpe,ZZo,eer,hc,oer,Ppe,rer,ter,aV,aer,ner,ser,$pe,ler,ier,i0,der,ao,d0,cer,Ipe,fer,mer,gn,ger,qpe,her,per,Npe,_er,uer,jpe,ber,ver,Fer,Dpe,Iv,Gpe,Ter,Mer,nV,Eer,Cer,wer,qv,Aer,Ope,yer,Ler,Vpe,xer,ker,Xpe,Ser,Rer,c0,e$e,pc,Nv,zpe,f0,Ber,Qpe,Per,o$e,ur,m0,$er,_c,Ier,sV,qer,Ner,lV,jer,Der,Ger,g0,Oer,Wpe,Ver,Xer,zer,ft,h0,Qer,Hpe,Wer,Her,uc,Uer,Upe,Jer,Yer,iV,Ker,Zer,eor,Jpe,oor,ror,p0,tor,no,_0,aor,Ype,nor,sor,hn,lor,Kpe,ior,dor,Zpe,cor,mor,e_e,gor,hor,por,pn,jv,o_e,_or,uor,dV,bor,vor,For,Dv,r_e,Tor,Mor,cV,Eor,Cor,wor,Gv,t_e,Aor,yor,fV,Lor,xor,kor,Ov,a_e,Sor,Ror,mV,Bor,Por,$or,Vv,Ior,n_e,qor,Nor,s_e,jor,Dor,l_e,Gor,Oor,u0,r$e,bc,Xv,i_e,b0,Vor,d_e,Xor,t$e,br,v0,zor,vc,Qor,gV,Wor,Hor,hV,Uor,Jor,Yor,F0,Kor,c_e,Zor,err,orr,mt,T0,rrr,f_e,trr,arr,Fc,nrr,m_e,srr,lrr,pV,irr,drr,crr,g_e,frr,mrr,M0,grr,so,E0,hrr,h_e,prr,_rr,_n,urr,p_e,brr,vrr,__e,Frr,Trr,u_e,Mrr,Err,Crr,b_e,zv,v_e,wrr,Arr,_V,yrr,Lrr,xrr,Qv,krr,F_e,Srr,Rrr,T_e,Brr,Prr,M_e,$rr,Irr,C0,a$e,Tc,Wv,E_e,w0,qrr,C_e,Nrr,n$e,vr,A0,jrr,Mc,Drr,uV,Grr,Orr,bV,Vrr,Xrr,zrr,y0,Qrr,w_e,Wrr,Hrr,Urr,gt,L0,Jrr,A_e,Yrr,Krr,Ec,Zrr,y_e,etr,otr,vV,rtr,ttr,atr,L_e,ntr,str,x0,ltr,po,k0,itr,x_e,dtr,ctr,un,ftr,k_e,mtr,gtr,S_e,htr,ptr,R_e,_tr,utr,btr,x,Hv,B_e,vtr,Ftr,FV,Ttr,Mtr,Etr,Uv,P_e,Ctr,wtr,TV,Atr,ytr,Ltr,Jv,$_e,xtr,ktr,MV,Str,Rtr,Btr,Yv,I_e,Ptr,$tr,EV,Itr,qtr,Ntr,Kv,q_e,jtr,Dtr,CV,Gtr,Otr,Vtr,Zv,N_e,Xtr,ztr,wV,Qtr,Wtr,Htr,eF,j_e,Utr,Jtr,AV,Ytr,Ktr,Ztr,oF,D_e,ear,oar,yV,rar,tar,aar,rF,G_e,nar,sar,LV,lar,iar,dar,tF,O_e,car,far,xV,mar,gar,har,aF,V_e,par,_ar,kV,uar,bar,Far,nF,X_e,Tar,Mar,SV,Ear,Car,war,sF,z_e,Aar,yar,RV,Lar,xar,kar,lF,Q_e,Sar,Rar,BV,Bar,Par,$ar,iF,W_e,Iar,qar,PV,Nar,jar,Dar,dF,H_e,Gar,Oar,$V,Var,Xar,zar,Js,U_e,Qar,War,IV,Har,Uar,qV,Jar,Yar,Kar,cF,J_e,Zar,enr,NV,onr,rnr,tnr,fF,Y_e,anr,nnr,jV,snr,lnr,inr,mF,K_e,dnr,cnr,DV,fnr,mnr,gnr,gF,Z_e,hnr,pnr,GV,_nr,unr,bnr,hF,eue,vnr,Fnr,OV,Tnr,Mnr,Enr,pF,oue,Cnr,wnr,VV,Anr,ynr,Lnr,_F,rue,xnr,knr,XV,Snr,Rnr,Bnr,uF,tue,Pnr,$nr,zV,Inr,qnr,Nnr,bF,aue,jnr,Dnr,QV,Gnr,Onr,Vnr,vF,nue,Xnr,znr,WV,Qnr,Wnr,Hnr,FF,sue,Unr,Jnr,HV,Ynr,Knr,Znr,TF,lue,esr,osr,UV,rsr,tsr,asr,MF,iue,nsr,ssr,JV,lsr,isr,dsr,EF,due,csr,fsr,YV,msr,gsr,hsr,CF,cue,psr,_sr,KV,usr,bsr,vsr,wF,fue,Fsr,Tsr,ZV,Msr,Esr,Csr,AF,mue,wsr,Asr,eX,ysr,Lsr,xsr,yF,gue,ksr,Ssr,oX,Rsr,Bsr,Psr,LF,hue,$sr,Isr,rX,qsr,Nsr,jsr,xF,pue,Dsr,Gsr,tX,Osr,Vsr,Xsr,kF,_ue,zsr,Qsr,aX,Wsr,Hsr,Usr,SF,uue,Jsr,Ysr,nX,Ksr,Zsr,elr,RF,bue,olr,rlr,sX,tlr,alr,nlr,BF,vue,slr,llr,lX,ilr,dlr,clr,PF,Fue,flr,mlr,iX,glr,hlr,plr,$F,Tue,_lr,ulr,dX,blr,vlr,Flr,IF,Mue,Tlr,Mlr,cX,Elr,Clr,wlr,Eue,Alr,ylr,S0,s$e,Cc,qF,Cue,R0,Llr,wue,xlr,l$e,Fr,B0,klr,wc,Slr,fX,Rlr,Blr,mX,Plr,$lr,Ilr,P0,qlr,Aue,Nlr,jlr,Dlr,ht,$0,Glr,yue,Olr,Vlr,Ac,Xlr,Lue,zlr,Qlr,gX,Wlr,Hlr,Ulr,xue,Jlr,Ylr,I0,Klr,_o,q0,Zlr,kue,eir,oir,bn,rir,Sue,tir,air,Rue,nir,sir,Bue,lir,iir,dir,U,NF,Pue,cir,fir,hX,mir,gir,hir,jF,$ue,pir,_ir,pX,uir,bir,vir,DF,Iue,Fir,Tir,_X,Mir,Eir,Cir,GF,que,wir,Air,uX,yir,Lir,xir,OF,Nue,kir,Sir,bX,Rir,Bir,Pir,VF,jue,$ir,Iir,vX,qir,Nir,jir,XF,Due,Dir,Gir,FX,Oir,Vir,Xir,zF,Gue,zir,Qir,TX,Wir,Hir,Uir,QF,Oue,Jir,Yir,MX,Kir,Zir,edr,WF,Vue,odr,rdr,EX,tdr,adr,ndr,HF,Xue,sdr,ldr,CX,idr,ddr,cdr,UF,zue,fdr,mdr,wX,gdr,hdr,pdr,JF,Que,_dr,udr,AX,bdr,vdr,Fdr,YF,Wue,Tdr,Mdr,yX,Edr,Cdr,wdr,KF,Hue,Adr,ydr,LX,Ldr,xdr,kdr,ZF,Uue,Sdr,Rdr,xX,Bdr,Pdr,$dr,eT,Jue,Idr,qdr,kX,Ndr,jdr,Ddr,oT,Yue,Gdr,Odr,SX,Vdr,Xdr,zdr,rT,Kue,Qdr,Wdr,RX,Hdr,Udr,Jdr,tT,Zue,Ydr,Kdr,BX,Zdr,ecr,ocr,aT,e5e,rcr,tcr,PX,acr,ncr,scr,nT,o5e,lcr,icr,$X,dcr,ccr,fcr,sT,r5e,mcr,gcr,IX,hcr,pcr,_cr,t5e,ucr,bcr,N0,i$e,yc,lT,a5e,j0,vcr,n5e,Fcr,d$e,Tr,D0,Tcr,Lc,Mcr,qX,Ecr,Ccr,NX,wcr,Acr,ycr,G0,Lcr,s5e,xcr,kcr,Scr,pt,O0,Rcr,l5e,Bcr,Pcr,xc,$cr,i5e,Icr,qcr,jX,Ncr,jcr,Dcr,d5e,Gcr,Ocr,V0,Vcr,uo,X0,Xcr,c5e,zcr,Qcr,vn,Wcr,f5e,Hcr,Ucr,m5e,Jcr,Ycr,g5e,Kcr,Zcr,efr,ge,iT,h5e,ofr,rfr,DX,tfr,afr,nfr,dT,p5e,sfr,lfr,GX,ifr,dfr,cfr,cT,_5e,ffr,mfr,OX,gfr,hfr,pfr,fT,u5e,_fr,ufr,VX,bfr,vfr,Ffr,mT,b5e,Tfr,Mfr,XX,Efr,Cfr,wfr,gT,v5e,Afr,yfr,zX,Lfr,xfr,kfr,hT,F5e,Sfr,Rfr,QX,Bfr,Pfr,$fr,pT,T5e,Ifr,qfr,WX,Nfr,jfr,Dfr,_T,M5e,Gfr,Ofr,HX,Vfr,Xfr,zfr,uT,E5e,Qfr,Wfr,UX,Hfr,Ufr,Jfr,bT,C5e,Yfr,Kfr,JX,Zfr,emr,omr,vT,w5e,rmr,tmr,YX,amr,nmr,smr,A5e,lmr,imr,z0,c$e,kc,FT,y5e,Q0,dmr,L5e,cmr,f$e,Mr,W0,fmr,Sc,mmr,KX,gmr,hmr,ZX,pmr,_mr,umr,H0,bmr,x5e,vmr,Fmr,Tmr,_t,U0,Mmr,k5e,Emr,Cmr,Rc,wmr,S5e,Amr,ymr,ez,Lmr,xmr,kmr,R5e,Smr,Rmr,J0,Bmr,bo,Y0,Pmr,B5e,$mr,Imr,Fn,qmr,P5e,Nmr,jmr,$5e,Dmr,Gmr,I5e,Omr,Vmr,Xmr,K0,TT,q5e,zmr,Qmr,oz,Wmr,Hmr,Umr,MT,N5e,Jmr,Ymr,rz,Kmr,Zmr,egr,j5e,ogr,rgr,Z0,m$e,Bc,ET,D5e,ey,tgr,G5e,agr,g$e,Er,oy,ngr,Pc,sgr,tz,lgr,igr,az,dgr,cgr,fgr,ry,mgr,O5e,ggr,hgr,pgr,ut,ty,_gr,V5e,ugr,bgr,$c,vgr,X5e,Fgr,Tgr,nz,Mgr,Egr,Cgr,z5e,wgr,Agr,ay,ygr,vo,ny,Lgr,Q5e,xgr,kgr,Tn,Sgr,W5e,Rgr,Bgr,H5e,Pgr,$gr,U5e,Igr,qgr,Ngr,K,CT,J5e,jgr,Dgr,sz,Ggr,Ogr,Vgr,wT,Y5e,Xgr,zgr,lz,Qgr,Wgr,Hgr,AT,K5e,Ugr,Jgr,iz,Ygr,Kgr,Zgr,yT,Z5e,ehr,ohr,dz,rhr,thr,ahr,LT,e1e,nhr,shr,cz,lhr,ihr,dhr,xT,o1e,chr,fhr,fz,mhr,ghr,hhr,kT,r1e,phr,_hr,mz,uhr,bhr,vhr,ST,t1e,Fhr,Thr,gz,Mhr,Ehr,Chr,RT,a1e,whr,Ahr,hz,yhr,Lhr,xhr,BT,n1e,khr,Shr,pz,Rhr,Bhr,Phr,PT,s1e,$hr,Ihr,_z,qhr,Nhr,jhr,$T,l1e,Dhr,Ghr,uz,Ohr,Vhr,Xhr,IT,i1e,zhr,Qhr,bz,Whr,Hhr,Uhr,qT,d1e,Jhr,Yhr,vz,Khr,Zhr,epr,NT,c1e,opr,rpr,Fz,tpr,apr,npr,jT,f1e,spr,lpr,Tz,ipr,dpr,cpr,DT,m1e,fpr,mpr,Mz,gpr,hpr,ppr,GT,g1e,_pr,upr,Ez,bpr,vpr,Fpr,OT,h1e,Tpr,Mpr,Cz,Epr,Cpr,wpr,VT,p1e,Apr,ypr,wz,Lpr,xpr,kpr,_1e,Spr,Rpr,sy,h$e,Ic,XT,u1e,ly,Bpr,b1e,Ppr,p$e,Cr,iy,$pr,qc,Ipr,Az,qpr,Npr,yz,jpr,Dpr,Gpr,dy,Opr,v1e,Vpr,Xpr,zpr,bt,cy,Qpr,F1e,Wpr,Hpr,Nc,Upr,T1e,Jpr,Ypr,Lz,Kpr,Zpr,e_r,M1e,o_r,r_r,fy,t_r,Fo,my,a_r,E1e,n_r,s_r,Mn,l_r,C1e,i_r,d_r,w1e,c_r,f_r,A1e,m_r,g_r,h_r,Fe,zT,y1e,p_r,__r,xz,u_r,b_r,v_r,QT,L1e,F_r,T_r,kz,M_r,E_r,C_r,WT,x1e,w_r,A_r,Sz,y_r,L_r,x_r,HT,k1e,k_r,S_r,Rz,R_r,B_r,P_r,UT,S1e,$_r,I_r,Bz,q_r,N_r,j_r,JT,R1e,D_r,G_r,Pz,O_r,V_r,X_r,YT,B1e,z_r,Q_r,$z,W_r,H_r,U_r,KT,P1e,J_r,Y_r,Iz,K_r,Z_r,eur,ZT,$1e,our,rur,qz,tur,aur,nur,e7,I1e,sur,lur,Nz,iur,dur,cur,q1e,fur,mur,gy,_$e,jc,o7,N1e,hy,gur,j1e,hur,u$e,wr,py,pur,Dc,_ur,jz,uur,bur,Dz,vur,Fur,Tur,_y,Mur,D1e,Eur,Cur,wur,vt,uy,Aur,G1e,yur,Lur,Gc,xur,O1e,kur,Sur,Gz,Rur,Bur,Pur,V1e,$ur,Iur,by,qur,To,vy,Nur,X1e,jur,Dur,En,Gur,z1e,Our,Vur,Q1e,Xur,zur,W1e,Qur,Wur,Hur,V,r7,H1e,Uur,Jur,Oz,Yur,Kur,Zur,t7,U1e,e5r,o5r,Vz,r5r,t5r,a5r,a7,J1e,n5r,s5r,Xz,l5r,i5r,d5r,n7,Y1e,c5r,f5r,zz,m5r,g5r,h5r,s7,K1e,p5r,_5r,Qz,u5r,b5r,v5r,l7,Z1e,F5r,T5r,Wz,M5r,E5r,C5r,i7,e4e,w5r,A5r,Hz,y5r,L5r,x5r,d7,o4e,k5r,S5r,Uz,R5r,B5r,P5r,c7,r4e,$5r,I5r,Jz,q5r,N5r,j5r,f7,t4e,D5r,G5r,Yz,O5r,V5r,X5r,m7,a4e,z5r,Q5r,Kz,W5r,H5r,U5r,g7,n4e,J5r,Y5r,Zz,K5r,Z5r,e1r,h7,s4e,o1r,r1r,eQ,t1r,a1r,n1r,p7,l4e,s1r,l1r,oQ,i1r,d1r,c1r,_7,i4e,f1r,m1r,rQ,g1r,h1r,p1r,u7,d4e,_1r,u1r,tQ,b1r,v1r,F1r,b7,c4e,T1r,M1r,aQ,E1r,C1r,w1r,v7,f4e,A1r,y1r,nQ,L1r,x1r,k1r,F7,m4e,S1r,R1r,sQ,B1r,P1r,$1r,T7,g4e,I1r,q1r,lQ,N1r,j1r,D1r,M7,h4e,G1r,O1r,iQ,V1r,X1r,z1r,E7,p4e,Q1r,W1r,dQ,H1r,U1r,J1r,C7,_4e,Y1r,K1r,cQ,Z1r,e4r,o4r,w7,u4e,r4r,t4r,fQ,a4r,n4r,s4r,A7,b4e,l4r,i4r,mQ,d4r,c4r,f4r,y7,v4e,m4r,g4r,gQ,h4r,p4r,_4r,F4e,u4r,b4r,Fy,b$e,Oc,L7,T4e,Ty,v4r,M4e,F4r,v$e,Ar,My,T4r,Vc,M4r,hQ,E4r,C4r,pQ,w4r,A4r,y4r,Ey,L4r,E4e,x4r,k4r,S4r,Ft,Cy,R4r,C4e,B4r,P4r,Xc,$4r,w4e,I4r,q4r,_Q,N4r,j4r,D4r,A4e,G4r,O4r,wy,V4r,Mo,Ay,X4r,y4e,z4r,Q4r,Cn,W4r,L4e,H4r,U4r,x4e,J4r,Y4r,k4e,K4r,Z4r,ebr,se,x7,S4e,obr,rbr,uQ,tbr,abr,nbr,k7,R4e,sbr,lbr,bQ,ibr,dbr,cbr,S7,B4e,fbr,mbr,vQ,gbr,hbr,pbr,R7,P4e,_br,ubr,FQ,bbr,vbr,Fbr,B7,$4e,Tbr,Mbr,TQ,Ebr,Cbr,wbr,P7,I4e,Abr,ybr,MQ,Lbr,xbr,kbr,$7,q4e,Sbr,Rbr,EQ,Bbr,Pbr,$br,I7,N4e,Ibr,qbr,CQ,Nbr,jbr,Dbr,q7,j4e,Gbr,Obr,wQ,Vbr,Xbr,zbr,N7,D4e,Qbr,Wbr,AQ,Hbr,Ubr,Jbr,j7,G4e,Ybr,Kbr,yQ,Zbr,e2r,o2r,D7,O4e,r2r,t2r,LQ,a2r,n2r,s2r,G7,V4e,l2r,i2r,xQ,d2r,c2r,f2r,O7,X4e,m2r,g2r,kQ,h2r,p2r,_2r,V7,z4e,u2r,b2r,SQ,v2r,F2r,T2r,X7,Q4e,M2r,E2r,RQ,C2r,w2r,A2r,z7,W4e,y2r,L2r,BQ,x2r,k2r,S2r,H4e,R2r,B2r,yy,F$e,zc,Q7,U4e,Ly,P2r,J4e,$2r,T$e,yr,xy,I2r,Qc,q2r,PQ,N2r,j2r,$Q,D2r,G2r,O2r,ky,V2r,Y4e,X2r,z2r,Q2r,Tt,Sy,W2r,K4e,H2r,U2r,Wc,J2r,Z4e,Y2r,K2r,IQ,Z2r,evr,ovr,ebe,rvr,tvr,Ry,avr,Eo,By,nvr,obe,svr,lvr,wn,ivr,rbe,dvr,cvr,tbe,fvr,mvr,abe,gvr,hvr,pvr,nbe,W7,sbe,_vr,uvr,qQ,bvr,vvr,Fvr,lbe,Tvr,Mvr,Py,M$e,Hc,H7,ibe,$y,Evr,dbe,Cvr,E$e,Lr,Iy,wvr,Uc,Avr,NQ,yvr,Lvr,jQ,xvr,kvr,Svr,qy,Rvr,cbe,Bvr,Pvr,$vr,Mt,Ny,Ivr,fbe,qvr,Nvr,Jc,jvr,mbe,Dvr,Gvr,DQ,Ovr,Vvr,Xvr,gbe,zvr,Qvr,jy,Wvr,Co,Dy,Hvr,hbe,Uvr,Jvr,An,Yvr,pbe,Kvr,Zvr,_be,eFr,oFr,ube,rFr,tFr,aFr,Z,U7,bbe,nFr,sFr,GQ,lFr,iFr,dFr,J7,vbe,cFr,fFr,OQ,mFr,gFr,hFr,Y7,Fbe,pFr,_Fr,VQ,uFr,bFr,vFr,K7,Tbe,FFr,TFr,XQ,MFr,EFr,CFr,Z7,Mbe,wFr,AFr,zQ,yFr,LFr,xFr,eM,Ebe,kFr,SFr,QQ,RFr,BFr,PFr,oM,Cbe,$Fr,IFr,WQ,qFr,NFr,jFr,rM,wbe,DFr,GFr,HQ,OFr,VFr,XFr,tM,Abe,zFr,QFr,UQ,WFr,HFr,UFr,aM,ybe,JFr,YFr,JQ,KFr,ZFr,eTr,nM,Lbe,oTr,rTr,YQ,tTr,aTr,nTr,sM,xbe,sTr,lTr,KQ,iTr,dTr,cTr,lM,kbe,fTr,mTr,ZQ,gTr,hTr,pTr,iM,Sbe,_Tr,uTr,eW,bTr,vTr,FTr,dM,Rbe,TTr,MTr,oW,ETr,CTr,wTr,cM,Bbe,ATr,yTr,rW,LTr,xTr,kTr,fM,Pbe,STr,RTr,tW,BTr,PTr,$Tr,mM,$be,ITr,qTr,aW,NTr,jTr,DTr,gM,Ibe,GTr,OTr,nW,VTr,XTr,zTr,hM,qbe,QTr,WTr,sW,HTr,UTr,JTr,Nbe,YTr,KTr,Gy,C$e,Yc,pM,jbe,Oy,ZTr,Dbe,e7r,w$e,xr,Vy,o7r,Kc,r7r,lW,t7r,a7r,iW,n7r,s7r,l7r,Xy,i7r,Gbe,d7r,c7r,f7r,Et,zy,m7r,Obe,g7r,h7r,Zc,p7r,Vbe,_7r,u7r,dW,b7r,v7r,F7r,Xbe,T7r,M7r,Qy,E7r,wo,Wy,C7r,zbe,w7r,A7r,yn,y7r,Qbe,L7r,x7r,Wbe,k7r,S7r,Hbe,R7r,B7r,P7r,ee,_M,Ube,$7r,I7r,cW,q7r,N7r,j7r,uM,Jbe,D7r,G7r,fW,O7r,V7r,X7r,bM,Ybe,z7r,Q7r,mW,W7r,H7r,U7r,vM,Kbe,J7r,Y7r,gW,K7r,Z7r,eMr,FM,Zbe,oMr,rMr,hW,tMr,aMr,nMr,TM,e2e,sMr,lMr,pW,iMr,dMr,cMr,MM,o2e,fMr,mMr,_W,gMr,hMr,pMr,EM,r2e,_Mr,uMr,uW,bMr,vMr,FMr,CM,t2e,TMr,MMr,bW,EMr,CMr,wMr,wM,a2e,AMr,yMr,vW,LMr,xMr,kMr,AM,n2e,SMr,RMr,FW,BMr,PMr,$Mr,yM,s2e,IMr,qMr,TW,NMr,jMr,DMr,LM,l2e,GMr,OMr,MW,VMr,XMr,zMr,xM,i2e,QMr,WMr,EW,HMr,UMr,JMr,kM,d2e,YMr,KMr,CW,ZMr,eEr,oEr,SM,c2e,rEr,tEr,wW,aEr,nEr,sEr,RM,f2e,lEr,iEr,AW,dEr,cEr,fEr,BM,m2e,mEr,gEr,yW,hEr,pEr,_Er,PM,g2e,uEr,bEr,LW,vEr,FEr,TEr,$M,h2e,MEr,EEr,xW,CEr,wEr,AEr,p2e,yEr,LEr,Hy,A$e,ef,IM,_2e,Uy,xEr,u2e,kEr,y$e,kr,Jy,SEr,of,REr,kW,BEr,PEr,SW,$Er,IEr,qEr,Yy,NEr,b2e,jEr,DEr,GEr,Ct,Ky,OEr,v2e,VEr,XEr,rf,zEr,F2e,QEr,WEr,RW,HEr,UEr,JEr,T2e,YEr,KEr,Zy,ZEr,Ao,e8,e3r,M2e,o3r,r3r,Ln,t3r,E2e,a3r,n3r,C2e,s3r,l3r,w2e,i3r,d3r,c3r,A2e,qM,y2e,f3r,m3r,BW,g3r,h3r,p3r,L2e,_3r,u3r,o8,L$e,tf,NM,x2e,r8,b3r,k2e,v3r,x$e,Sr,t8,F3r,af,T3r,PW,M3r,E3r,$W,C3r,w3r,A3r,a8,y3r,S2e,L3r,x3r,k3r,wt,n8,S3r,R2e,R3r,B3r,nf,P3r,B2e,$3r,I3r,IW,q3r,N3r,j3r,P2e,D3r,G3r,s8,O3r,yo,l8,V3r,$2e,X3r,z3r,xn,Q3r,I2e,W3r,H3r,q2e,U3r,J3r,N2e,Y3r,K3r,Z3r,j2e,jM,D2e,eCr,oCr,qW,rCr,tCr,aCr,G2e,nCr,sCr,i8,k$e,sf,DM,O2e,d8,lCr,V2e,iCr,S$e,Rr,c8,dCr,lf,cCr,NW,fCr,mCr,jW,gCr,hCr,pCr,f8,_Cr,X2e,uCr,bCr,vCr,At,m8,FCr,z2e,TCr,MCr,df,ECr,Q2e,CCr,wCr,DW,ACr,yCr,LCr,W2e,xCr,kCr,g8,SCr,Lo,h8,RCr,H2e,BCr,PCr,kn,$Cr,U2e,ICr,qCr,J2e,NCr,jCr,Y2e,DCr,GCr,OCr,z,GM,K2e,VCr,XCr,GW,zCr,QCr,WCr,OM,Z2e,HCr,UCr,OW,JCr,YCr,KCr,VM,eve,ZCr,e6r,VW,o6r,r6r,t6r,XM,ove,a6r,n6r,XW,s6r,l6r,i6r,zM,rve,d6r,c6r,zW,f6r,m6r,g6r,QM,tve,h6r,p6r,QW,_6r,u6r,b6r,WM,ave,v6r,F6r,WW,T6r,M6r,E6r,HM,nve,C6r,w6r,HW,A6r,y6r,L6r,UM,sve,x6r,k6r,UW,S6r,R6r,B6r,JM,lve,P6r,$6r,JW,I6r,q6r,N6r,YM,ive,j6r,D6r,YW,G6r,O6r,V6r,KM,dve,X6r,z6r,KW,Q6r,W6r,H6r,ZM,cve,U6r,J6r,ZW,Y6r,K6r,Z6r,eE,fve,ewr,owr,eH,rwr,twr,awr,oE,mve,nwr,swr,oH,lwr,iwr,dwr,rE,gve,cwr,fwr,rH,mwr,gwr,hwr,tE,hve,pwr,_wr,tH,uwr,bwr,vwr,aE,pve,Fwr,Twr,aH,Mwr,Ewr,Cwr,nE,_ve,wwr,Awr,nH,ywr,Lwr,xwr,sE,uve,kwr,Swr,sH,Rwr,Bwr,Pwr,lE,bve,$wr,Iwr,lH,qwr,Nwr,jwr,iE,vve,Dwr,Gwr,iH,Owr,Vwr,Xwr,dE,Fve,zwr,Qwr,dH,Wwr,Hwr,Uwr,cE,Tve,Jwr,Ywr,cH,Kwr,Zwr,eAr,fE,Mve,oAr,rAr,fH,tAr,aAr,nAr,Eve,sAr,lAr,p8,R$e,cf,mE,Cve,_8,iAr,wve,dAr,B$e,Br,u8,cAr,ff,fAr,mH,mAr,gAr,gH,hAr,pAr,_Ar,b8,uAr,Ave,bAr,vAr,FAr,yt,v8,TAr,yve,MAr,EAr,mf,CAr,Lve,wAr,AAr,hH,yAr,LAr,xAr,xve,kAr,SAr,F8,RAr,xo,T8,BAr,kve,PAr,$Ar,Sn,IAr,Sve,qAr,NAr,Rve,jAr,DAr,Bve,GAr,OAr,VAr,ca,gE,Pve,XAr,zAr,pH,QAr,WAr,HAr,hE,$ve,UAr,JAr,_H,YAr,KAr,ZAr,pE,Ive,e0r,o0r,uH,r0r,t0r,a0r,_E,qve,n0r,s0r,bH,l0r,i0r,d0r,uE,Nve,c0r,f0r,vH,m0r,g0r,h0r,jve,p0r,_0r,M8,P$e,gf,bE,Dve,E8,u0r,Gve,b0r,$$e,Pr,C8,v0r,hf,F0r,FH,T0r,M0r,TH,E0r,C0r,w0r,w8,A0r,Ove,y0r,L0r,x0r,Lt,A8,k0r,Vve,S0r,R0r,pf,B0r,Xve,P0r,$0r,MH,I0r,q0r,N0r,zve,j0r,D0r,y8,G0r,ko,L8,O0r,Qve,V0r,X0r,Rn,z0r,Wve,Q0r,W0r,Hve,H0r,U0r,Uve,J0r,Y0r,K0r,he,vE,Jve,Z0r,eyr,EH,oyr,ryr,tyr,FE,Yve,ayr,nyr,CH,syr,lyr,iyr,TE,Kve,dyr,cyr,wH,fyr,myr,gyr,ME,Zve,hyr,pyr,AH,_yr,uyr,byr,EE,eFe,vyr,Fyr,yH,Tyr,Myr,Eyr,CE,oFe,Cyr,wyr,LH,Ayr,yyr,Lyr,wE,rFe,xyr,kyr,xH,Syr,Ryr,Byr,AE,tFe,Pyr,$yr,kH,Iyr,qyr,Nyr,yE,aFe,jyr,Dyr,SH,Gyr,Oyr,Vyr,LE,nFe,Xyr,zyr,RH,Qyr,Wyr,Hyr,xE,sFe,Uyr,Jyr,BH,Yyr,Kyr,Zyr,kE,lFe,e8r,o8r,PH,r8r,t8r,a8r,iFe,n8r,s8r,x8,I$e,_f,SE,dFe,k8,l8r,cFe,i8r,q$e,$r,S8,d8r,uf,c8r,$H,f8r,m8r,IH,g8r,h8r,p8r,R8,_8r,fFe,u8r,b8r,v8r,xt,B8,F8r,mFe,T8r,M8r,bf,E8r,gFe,C8r,w8r,qH,A8r,y8r,L8r,hFe,x8r,k8r,P8,S8r,So,$8,R8r,pFe,B8r,P8r,Bn,$8r,_Fe,I8r,q8r,uFe,N8r,j8r,bFe,D8r,G8r,O8r,Te,RE,vFe,V8r,X8r,NH,z8r,Q8r,W8r,BE,FFe,H8r,U8r,jH,J8r,Y8r,K8r,PE,TFe,Z8r,eLr,DH,oLr,rLr,tLr,$E,MFe,aLr,nLr,GH,sLr,lLr,iLr,IE,EFe,dLr,cLr,OH,fLr,mLr,gLr,qE,CFe,hLr,pLr,VH,_Lr,uLr,bLr,NE,wFe,vLr,FLr,XH,TLr,MLr,ELr,jE,AFe,CLr,wLr,zH,ALr,yLr,LLr,DE,yFe,xLr,kLr,QH,SLr,RLr,BLr,GE,LFe,PLr,$Lr,WH,ILr,qLr,NLr,xFe,jLr,DLr,I8,N$e,vf,OE,kFe,q8,GLr,SFe,OLr,j$e,Ir,N8,VLr,Ff,XLr,HH,zLr,QLr,UH,WLr,HLr,ULr,j8,JLr,RFe,YLr,KLr,ZLr,kt,D8,e9r,BFe,o9r,r9r,Tf,t9r,PFe,a9r,n9r,JH,s9r,l9r,i9r,$Fe,d9r,c9r,G8,f9r,Ro,O8,m9r,IFe,g9r,h9r,Pn,p9r,qFe,_9r,u9r,NFe,b9r,v9r,jFe,F9r,T9r,M9r,we,VE,DFe,E9r,C9r,YH,w9r,A9r,y9r,XE,GFe,L9r,x9r,KH,k9r,S9r,R9r,zE,OFe,B9r,P9r,ZH,$9r,I9r,q9r,QE,VFe,N9r,j9r,eU,D9r,G9r,O9r,WE,XFe,V9r,X9r,oU,z9r,Q9r,W9r,HE,zFe,H9r,U9r,rU,J9r,Y9r,K9r,UE,QFe,Z9r,exr,tU,oxr,rxr,txr,JE,WFe,axr,nxr,aU,sxr,lxr,ixr,YE,HFe,dxr,cxr,nU,fxr,mxr,gxr,UFe,hxr,pxr,V8,D$e,Mf,KE,JFe,X8,_xr,YFe,uxr,G$e,qr,z8,bxr,Ef,vxr,sU,Fxr,Txr,lU,Mxr,Exr,Cxr,Q8,wxr,KFe,Axr,yxr,Lxr,St,W8,xxr,ZFe,kxr,Sxr,Cf,Rxr,eTe,Bxr,Pxr,iU,$xr,Ixr,qxr,oTe,Nxr,jxr,H8,Dxr,Bo,U8,Gxr,rTe,Oxr,Vxr,$n,Xxr,tTe,zxr,Qxr,aTe,Wxr,Hxr,nTe,Uxr,Jxr,Yxr,Me,ZE,sTe,Kxr,Zxr,dU,ekr,okr,rkr,e3,lTe,tkr,akr,cU,nkr,skr,lkr,o3,iTe,ikr,dkr,fU,ckr,fkr,mkr,r3,dTe,gkr,hkr,mU,pkr,_kr,ukr,t3,cTe,bkr,vkr,gU,Fkr,Tkr,Mkr,a3,fTe,Ekr,Ckr,hU,wkr,Akr,ykr,n3,mTe,Lkr,xkr,pU,kkr,Skr,Rkr,s3,gTe,Bkr,Pkr,_U,$kr,Ikr,qkr,l3,hTe,Nkr,jkr,uU,Dkr,Gkr,Okr,i3,pTe,Vkr,Xkr,bU,zkr,Qkr,Wkr,_Te,Hkr,Ukr,J8,O$e,wf,d3,uTe,Y8,Jkr,bTe,Ykr,V$e,Nr,K8,Kkr,Af,Zkr,vU,eSr,oSr,FU,rSr,tSr,aSr,Z8,nSr,vTe,sSr,lSr,iSr,Rt,eL,dSr,FTe,cSr,fSr,yf,mSr,TTe,gSr,hSr,TU,pSr,_Sr,uSr,MTe,bSr,vSr,oL,FSr,Po,rL,TSr,ETe,MSr,ESr,In,CSr,CTe,wSr,ASr,wTe,ySr,LSr,ATe,xSr,kSr,SSr,Ee,c3,yTe,RSr,BSr,MU,PSr,$Sr,ISr,f3,LTe,qSr,NSr,EU,jSr,DSr,GSr,m3,xTe,OSr,VSr,CU,XSr,zSr,QSr,g3,kTe,WSr,HSr,wU,USr,JSr,YSr,h3,STe,KSr,ZSr,AU,eRr,oRr,rRr,p3,RTe,tRr,aRr,yU,nRr,sRr,lRr,_3,BTe,iRr,dRr,LU,cRr,fRr,mRr,u3,PTe,gRr,hRr,xU,pRr,_Rr,uRr,b3,$Te,bRr,vRr,kU,FRr,TRr,MRr,v3,ITe,ERr,CRr,SU,wRr,ARr,yRr,qTe,LRr,xRr,tL,X$e,Lf,F3,NTe,aL,kRr,jTe,SRr,z$e,jr,nL,RRr,xf,BRr,RU,PRr,$Rr,BU,IRr,qRr,NRr,sL,jRr,DTe,DRr,GRr,ORr,Bt,lL,VRr,GTe,XRr,zRr,kf,QRr,OTe,WRr,HRr,PU,URr,JRr,YRr,VTe,KRr,ZRr,iL,eBr,$o,dL,oBr,XTe,rBr,tBr,qn,aBr,zTe,nBr,sBr,QTe,lBr,iBr,WTe,dBr,cBr,fBr,Pe,T3,HTe,mBr,gBr,$U,hBr,pBr,_Br,M3,UTe,uBr,bBr,IU,vBr,FBr,TBr,E3,JTe,MBr,EBr,qU,CBr,wBr,ABr,C3,YTe,yBr,LBr,NU,xBr,kBr,SBr,w3,KTe,RBr,BBr,jU,PBr,$Br,IBr,A3,ZTe,qBr,NBr,DU,jBr,DBr,GBr,y3,e7e,OBr,VBr,GU,XBr,zBr,QBr,L3,o7e,WBr,HBr,OU,UBr,JBr,YBr,r7e,KBr,ZBr,cL,Q$e,Sf,x3,t7e,fL,ePr,a7e,oPr,W$e,Dr,mL,rPr,Rf,tPr,VU,aPr,nPr,XU,sPr,lPr,iPr,gL,dPr,n7e,cPr,fPr,mPr,Pt,hL,gPr,s7e,hPr,pPr,Bf,_Pr,l7e,uPr,bPr,zU,vPr,FPr,TPr,i7e,MPr,EPr,pL,CPr,Io,_L,wPr,d7e,APr,yPr,Nn,LPr,c7e,xPr,kPr,f7e,SPr,RPr,m7e,BPr,PPr,$Pr,$e,k3,g7e,IPr,qPr,QU,NPr,jPr,DPr,S3,h7e,GPr,OPr,WU,VPr,XPr,zPr,R3,p7e,QPr,WPr,HU,HPr,UPr,JPr,B3,_7e,YPr,KPr,UU,ZPr,e$r,o$r,P3,u7e,r$r,t$r,JU,a$r,n$r,s$r,$3,b7e,l$r,i$r,YU,d$r,c$r,f$r,I3,v7e,m$r,g$r,KU,h$r,p$r,_$r,q3,F7e,u$r,b$r,ZU,v$r,F$r,T$r,T7e,M$r,E$r,uL,H$e,Pf,N3,M7e,bL,C$r,E7e,w$r,U$e,Gr,vL,A$r,$f,y$r,eJ,L$r,x$r,oJ,k$r,S$r,R$r,FL,B$r,C7e,P$r,$$r,I$r,$t,TL,q$r,w7e,N$r,j$r,If,D$r,A7e,G$r,O$r,rJ,V$r,X$r,z$r,y7e,Q$r,W$r,ML,H$r,qo,EL,U$r,L7e,J$r,Y$r,jn,K$r,x7e,Z$r,eIr,k7e,oIr,rIr,S7e,tIr,aIr,nIr,R7e,j3,B7e,sIr,lIr,tJ,iIr,dIr,cIr,P7e,fIr,mIr,CL,J$e,qf,D3,$7e,wL,gIr,I7e,hIr,Y$e,Or,AL,pIr,Nf,_Ir,aJ,uIr,bIr,nJ,vIr,FIr,TIr,yL,MIr,q7e,EIr,CIr,wIr,It,LL,AIr,N7e,yIr,LIr,jf,xIr,j7e,kIr,SIr,sJ,RIr,BIr,PIr,D7e,$Ir,IIr,xL,qIr,No,kL,NIr,G7e,jIr,DIr,Dn,GIr,O7e,OIr,VIr,V7e,XIr,zIr,X7e,QIr,WIr,HIr,SL,G3,z7e,UIr,JIr,lJ,YIr,KIr,ZIr,O3,Q7e,eqr,oqr,iJ,rqr,tqr,aqr,W7e,nqr,sqr,RL,K$e,Df,V3,H7e,BL,lqr,U7e,iqr,Z$e,Vr,PL,dqr,Gf,cqr,dJ,fqr,mqr,cJ,gqr,hqr,pqr,$L,_qr,J7e,uqr,bqr,vqr,qt,IL,Fqr,Y7e,Tqr,Mqr,Of,Eqr,K7e,Cqr,wqr,fJ,Aqr,yqr,Lqr,Z7e,xqr,kqr,qL,Sqr,jo,NL,Rqr,eMe,Bqr,Pqr,Gn,$qr,oMe,Iqr,qqr,rMe,Nqr,jqr,tMe,Dqr,Gqr,Oqr,aMe,X3,nMe,Vqr,Xqr,mJ,zqr,Qqr,Wqr,sMe,Hqr,Uqr,jL,eIe;return _e=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),UC=new X({}),JC=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Jf=new Jqr({props:{warning:!0,$$slots:{default:[Lyt]},$$scope:{ctx:Xf}}}),YC=new X({}),KC=new w({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/configuration_auto.py#L560"}}),o6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/configuration_auto.py#L583"}}),r6=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),t6=new w({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/configuration_auto.py#L705"}}),a6=new X({}),n6=new w({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/tokenization_auto.py#L377"}}),i6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15457/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/tokenization_auto.py#L391"}}),d6=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),c6=new w({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/tokenization_auto.py#L587"}}),f6=new X({}),m6=new w({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/feature_extraction_auto.py#L176"}}),p6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15457/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),Hh=new Jqr({props:{$$slots:{default:[xyt]},$$scope:{ctx:Xf}}}),_6=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),u6=new w({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/feature_extraction_auto.py#L317"}}),b6=new X({}),v6=new w({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/processing_auto.py#L76"}}),M6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/processing_auto.py#L90"}}),fp=new Jqr({props:{$$slots:{default:[kyt]},$$scope:{ctx:Xf}}}),E6=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),C6=new w({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/processing_auto.py#L243"}}),w6=new X({}),A6=new w({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_auto.py#L714"}}),L6=new w({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),x6=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),k6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),S6=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R6=new X({}),B6=new w({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_auto.py#L721"}}),$6=new w({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),I6=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),q6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),N6=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),j6=new X({}),D6=new w({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_auto.py#L736"}}),O6=new w({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),V6=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),X6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),z6=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Q6=new X({}),W6=new w({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_auto.py#L743"}}),U6=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),J6=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),Y6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),K6=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Z6=new X({}),ew=new w({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_auto.py#L750"}}),rw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),tw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),aw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),nw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sw=new X({}),lw=new w({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_auto.py#L759"}}),dw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),cw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),fw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),mw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gw=new X({}),hw=new w({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_auto.py#L793"}}),_w=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),uw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),bw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),vw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Fw=new X({}),Tw=new w({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_auto.py#L800"}}),Ew=new w({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),Cw=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),ww=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),Aw=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yw=new X({}),Lw=new w({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_auto.py#L786"}}),kw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),Sw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),Rw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),Bw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Pw=new X({}),$w=new w({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_auto.py#L768"}}),qw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),Nw=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),jw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),Dw=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gw=new X({}),Ow=new w({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_auto.py#L775"}}),Xw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),zw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),Qw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),Ww=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hw=new X({}),Uw=new w({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_auto.py#L809"}}),Yw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15457/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15457/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15457/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),Kw=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),Zw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),eA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oA=new X({}),rA=new w({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_auto.py#L848"}}),aA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),nA=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),sA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),lA=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iA=new X({}),dA=new w({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_auto.py#L855"}}),fA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),mA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),gA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),hA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pA=new X({}),_A=new w({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_auto.py#L878"}}),bA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),vA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),FA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),TA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),MA=new X({}),EA=new w({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_auto.py#L862"}}),wA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),AA=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),yA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),LA=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xA=new X({}),kA=new w({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_auto.py#L869"}}),RA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),BA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),PA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),IA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qA=new X({}),NA=new w({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_auto.py#L887"}}),DA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),GA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),OA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),VA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),XA=new X({}),zA=new w({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_auto.py#L894"}}),WA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),HA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),UA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),JA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),YA=new X({}),KA=new w({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_auto.py#L841"}}),e0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),o0=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),r0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),t0=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a0=new X({}),n0=new w({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_auto.py#L816"}}),l0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),i0=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),d0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),c0=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f0=new X({}),m0=new w({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_auto.py#L823"}}),h0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),p0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),_0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),u0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),b0=new X({}),v0=new w({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_auto.py#L832"}}),T0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),M0=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),E0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),C0=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),w0=new X({}),A0=new w({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),L0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),x0=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),k0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),S0=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R0=new X({}),B0=new w({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),$0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),I0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),q0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),N0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),j0=new X({}),D0=new w({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),O0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),V0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),X0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),z0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Q0=new X({}),W0=new w({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),U0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),J0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),Y0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),Z0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ey=new X({}),oy=new w({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),ty=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),ay=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),ny=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),sy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ly=new X({}),iy=new w({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),cy=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),fy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),my=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),gy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hy=new X({}),py=new w({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),uy=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),by=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),vy=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),Fy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ty=new X({}),My=new w({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),Cy=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),wy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),Ay=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),yy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ly=new X({}),xy=new w({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),Sy=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),Ry=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),By=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),Py=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$y=new X({}),Iy=new w({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),Ny=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),jy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),Dy=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),Gy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Oy=new X({}),Vy=new w({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),zy=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),Qy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),Wy=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),Hy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Uy=new X({}),Jy=new w({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),Ky=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),Zy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),e8=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),o8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),r8=new X({}),t8=new w({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),n8=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),s8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),l8=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),i8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),d8=new X({}),c8=new w({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),m8=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),g8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),h8=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),p8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_8=new X({}),u8=new w({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),v8=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),F8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),T8=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),M8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E8=new X({}),C8=new w({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),A8=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),y8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),L8=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),x8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k8=new X({}),S8=new w({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),B8=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),P8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),$8=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),I8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q8=new X({}),N8=new w({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),D8=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),G8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),O8=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),V8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X8=new X({}),z8=new w({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),W8=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),H8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),U8=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),J8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y8=new X({}),K8=new w({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),eL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),oL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),rL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),tL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aL=new X({}),nL=new w({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),lL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),iL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),dL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),cL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fL=new X({}),mL=new w({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),hL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),pL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),_L=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),uL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bL=new X({}),vL=new w({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),TL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),ML=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),EL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),CL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wL=new X({}),AL=new w({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),LL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15457/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),xL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),kL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),RL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BL=new X({}),PL=new w({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),IL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15457/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15457/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L389"}}),qL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),NL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15457/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15457/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15457/src/transformers/models/auto/auto_factory.py#L417"}}),jL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){oe=a("meta"),co=l(),me=a("h1"),Ae=a("a"),io=a("span"),f(_e.$$.fragment),Ce=l(),Xo=a("span"),zi=o("Auto Classes"),zf=l(),fa=a("p"),Qi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Wi=a("code"),zC=o("from_pretrained()"),Qf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Se=l(),fo=a("p"),Hi=o("Instantiating one of "),On=a("a"),QC=o("AutoConfig"),Vn=o(", "),Xn=a("a"),WC=o("AutoModel"),Ui=o(`, and
`),zn=a("a"),HC=o("AutoTokenizer"),Ji=o(" will directly create a class of the relevant architecture. For instance"),Wf=l(),f(Da.$$.fragment),mo=l(),ve=a("p"),z9=o("will create a model that is an instance of "),Yi=a("a"),Q9=o("BertModel"),W9=o("."),zo=l(),Ga=a("p"),H9=o("There is one class of "),Hf=a("code"),U9=o("AutoModel"),mNe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),ZBe=l(),Ki=a("h2"),Uf=a("a"),nK=a("span"),f(UC.$$.fragment),gNe=l(),sK=a("span"),hNe=o("Extending the Auto Classes"),ePe=l(),Qn=a("p"),pNe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),lK=a("code"),_Ne=o("NewModel"),uNe=o(", make sure you have a "),iK=a("code"),bNe=o("NewModelConfig"),vNe=o(` then you can add those to the auto
classes like this:`),oPe=l(),f(JC.$$.fragment),rPe=l(),J9=a("p"),FNe=o("You will then be able to use the auto classes like you would usually do!"),tPe=l(),f(Jf.$$.fragment),aPe=l(),Zi=a("h2"),Yf=a("a"),dK=a("span"),f(YC.$$.fragment),TNe=l(),cK=a("span"),MNe=o("AutoConfig"),nPe=l(),Qo=a("div"),f(KC.$$.fragment),ENe=l(),ZC=a("p"),CNe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Y9=a("a"),wNe=o("from_pretrained()"),ANe=o(" class method."),yNe=l(),e6=a("p"),LNe=o("This class cannot be instantiated directly using "),fK=a("code"),xNe=o("__init__()"),kNe=o(" (throws an error)."),SNe=l(),go=a("div"),f(o6.$$.fragment),RNe=l(),mK=a("p"),BNe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),PNe=l(),ed=a("p"),$Ne=o("The configuration class to instantiate is selected based on the "),gK=a("code"),INe=o("model_type"),qNe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),hK=a("code"),NNe=o("pretrained_model_name_or_path"),jNe=o(":"),DNe=l(),v=a("ul"),Kf=a("li"),pK=a("strong"),GNe=o("albert"),ONe=o(" \u2014 "),K9=a("a"),VNe=o("AlbertConfig"),XNe=o(" (ALBERT model)"),zNe=l(),Zf=a("li"),_K=a("strong"),QNe=o("bart"),WNe=o(" \u2014 "),Z9=a("a"),HNe=o("BartConfig"),UNe=o(" (BART model)"),JNe=l(),em=a("li"),uK=a("strong"),YNe=o("beit"),KNe=o(" \u2014 "),ex=a("a"),ZNe=o("BeitConfig"),eje=o(" (BEiT model)"),oje=l(),om=a("li"),bK=a("strong"),rje=o("bert"),tje=o(" \u2014 "),ox=a("a"),aje=o("BertConfig"),nje=o(" (BERT model)"),sje=l(),rm=a("li"),vK=a("strong"),lje=o("bert-generation"),ije=o(" \u2014 "),rx=a("a"),dje=o("BertGenerationConfig"),cje=o(" (Bert Generation model)"),fje=l(),tm=a("li"),FK=a("strong"),mje=o("big_bird"),gje=o(" \u2014 "),tx=a("a"),hje=o("BigBirdConfig"),pje=o(" (BigBird model)"),_je=l(),am=a("li"),TK=a("strong"),uje=o("bigbird_pegasus"),bje=o(" \u2014 "),ax=a("a"),vje=o("BigBirdPegasusConfig"),Fje=o(" (BigBirdPegasus model)"),Tje=l(),nm=a("li"),MK=a("strong"),Mje=o("blenderbot"),Eje=o(" \u2014 "),nx=a("a"),Cje=o("BlenderbotConfig"),wje=o(" (Blenderbot model)"),Aje=l(),sm=a("li"),EK=a("strong"),yje=o("blenderbot-small"),Lje=o(" \u2014 "),sx=a("a"),xje=o("BlenderbotSmallConfig"),kje=o(" (BlenderbotSmall model)"),Sje=l(),lm=a("li"),CK=a("strong"),Rje=o("camembert"),Bje=o(" \u2014 "),lx=a("a"),Pje=o("CamembertConfig"),$je=o(" (CamemBERT model)"),Ije=l(),im=a("li"),wK=a("strong"),qje=o("canine"),Nje=o(" \u2014 "),ix=a("a"),jje=o("CanineConfig"),Dje=o(" (Canine model)"),Gje=l(),dm=a("li"),AK=a("strong"),Oje=o("clip"),Vje=o(" \u2014 "),dx=a("a"),Xje=o("CLIPConfig"),zje=o(" (CLIP model)"),Qje=l(),cm=a("li"),yK=a("strong"),Wje=o("convbert"),Hje=o(" \u2014 "),cx=a("a"),Uje=o("ConvBertConfig"),Jje=o(" (ConvBERT model)"),Yje=l(),fm=a("li"),LK=a("strong"),Kje=o("convnext"),Zje=o(" \u2014 "),fx=a("a"),eDe=o("ConvNextConfig"),oDe=o(" (ConvNext model)"),rDe=l(),mm=a("li"),xK=a("strong"),tDe=o("ctrl"),aDe=o(" \u2014 "),mx=a("a"),nDe=o("CTRLConfig"),sDe=o(" (CTRL model)"),lDe=l(),gm=a("li"),kK=a("strong"),iDe=o("data2vec-audio"),dDe=o(" \u2014 "),gx=a("a"),cDe=o("Data2VecAudioConfig"),fDe=o(" (Data2VecAudio model)"),mDe=l(),hm=a("li"),SK=a("strong"),gDe=o("data2vec-text"),hDe=o(" \u2014 "),hx=a("a"),pDe=o("Data2VecTextConfig"),_De=o(" (Data2VecText model)"),uDe=l(),pm=a("li"),RK=a("strong"),bDe=o("data2vec-vision"),vDe=o(" \u2014 "),px=a("a"),FDe=o("Data2VecVisionConfig"),TDe=o(" (Data2VecVision model)"),MDe=l(),_m=a("li"),BK=a("strong"),EDe=o("deberta"),CDe=o(" \u2014 "),_x=a("a"),wDe=o("DebertaConfig"),ADe=o(" (DeBERTa model)"),yDe=l(),um=a("li"),PK=a("strong"),LDe=o("deberta-v2"),xDe=o(" \u2014 "),ux=a("a"),kDe=o("DebertaV2Config"),SDe=o(" (DeBERTa-v2 model)"),RDe=l(),bm=a("li"),$K=a("strong"),BDe=o("decision_transformer"),PDe=o(" \u2014 "),bx=a("a"),$De=o("DecisionTransformerConfig"),IDe=o(" (Decision Transformer model)"),qDe=l(),vm=a("li"),IK=a("strong"),NDe=o("deit"),jDe=o(" \u2014 "),vx=a("a"),DDe=o("DeiTConfig"),GDe=o(" (DeiT model)"),ODe=l(),Fm=a("li"),qK=a("strong"),VDe=o("detr"),XDe=o(" \u2014 "),Fx=a("a"),zDe=o("DetrConfig"),QDe=o(" (DETR model)"),WDe=l(),Tm=a("li"),NK=a("strong"),HDe=o("distilbert"),UDe=o(" \u2014 "),Tx=a("a"),JDe=o("DistilBertConfig"),YDe=o(" (DistilBERT model)"),KDe=l(),Mm=a("li"),jK=a("strong"),ZDe=o("dpr"),eGe=o(" \u2014 "),Mx=a("a"),oGe=o("DPRConfig"),rGe=o(" (DPR model)"),tGe=l(),Em=a("li"),DK=a("strong"),aGe=o("dpt"),nGe=o(" \u2014 "),Ex=a("a"),sGe=o("DPTConfig"),lGe=o(" (DPT model)"),iGe=l(),Cm=a("li"),GK=a("strong"),dGe=o("electra"),cGe=o(" \u2014 "),Cx=a("a"),fGe=o("ElectraConfig"),mGe=o(" (ELECTRA model)"),gGe=l(),wm=a("li"),OK=a("strong"),hGe=o("encoder-decoder"),pGe=o(" \u2014 "),wx=a("a"),_Ge=o("EncoderDecoderConfig"),uGe=o(" (Encoder decoder model)"),bGe=l(),Am=a("li"),VK=a("strong"),vGe=o("flaubert"),FGe=o(" \u2014 "),Ax=a("a"),TGe=o("FlaubertConfig"),MGe=o(" (FlauBERT model)"),EGe=l(),ym=a("li"),XK=a("strong"),CGe=o("fnet"),wGe=o(" \u2014 "),yx=a("a"),AGe=o("FNetConfig"),yGe=o(" (FNet model)"),LGe=l(),Lm=a("li"),zK=a("strong"),xGe=o("fsmt"),kGe=o(" \u2014 "),Lx=a("a"),SGe=o("FSMTConfig"),RGe=o(" (FairSeq Machine-Translation model)"),BGe=l(),xm=a("li"),QK=a("strong"),PGe=o("funnel"),$Ge=o(" \u2014 "),xx=a("a"),IGe=o("FunnelConfig"),qGe=o(" (Funnel Transformer model)"),NGe=l(),km=a("li"),WK=a("strong"),jGe=o("glpn"),DGe=o(" \u2014 "),kx=a("a"),GGe=o("GLPNConfig"),OGe=o(" (GLPN model)"),VGe=l(),Sm=a("li"),HK=a("strong"),XGe=o("gpt2"),zGe=o(" \u2014 "),Sx=a("a"),QGe=o("GPT2Config"),WGe=o(" (OpenAI GPT-2 model)"),HGe=l(),Rm=a("li"),UK=a("strong"),UGe=o("gpt_neo"),JGe=o(" \u2014 "),Rx=a("a"),YGe=o("GPTNeoConfig"),KGe=o(" (GPT Neo model)"),ZGe=l(),Bm=a("li"),JK=a("strong"),eOe=o("gptj"),oOe=o(" \u2014 "),Bx=a("a"),rOe=o("GPTJConfig"),tOe=o(" (GPT-J model)"),aOe=l(),Pm=a("li"),YK=a("strong"),nOe=o("hubert"),sOe=o(" \u2014 "),Px=a("a"),lOe=o("HubertConfig"),iOe=o(" (Hubert model)"),dOe=l(),$m=a("li"),KK=a("strong"),cOe=o("ibert"),fOe=o(" \u2014 "),$x=a("a"),mOe=o("IBertConfig"),gOe=o(" (I-BERT model)"),hOe=l(),Im=a("li"),ZK=a("strong"),pOe=o("imagegpt"),_Oe=o(" \u2014 "),Ix=a("a"),uOe=o("ImageGPTConfig"),bOe=o(" (ImageGPT model)"),vOe=l(),qm=a("li"),eZ=a("strong"),FOe=o("layoutlm"),TOe=o(" \u2014 "),qx=a("a"),MOe=o("LayoutLMConfig"),EOe=o(" (LayoutLM model)"),COe=l(),Nm=a("li"),oZ=a("strong"),wOe=o("layoutlmv2"),AOe=o(" \u2014 "),Nx=a("a"),yOe=o("LayoutLMv2Config"),LOe=o(" (LayoutLMv2 model)"),xOe=l(),jm=a("li"),rZ=a("strong"),kOe=o("led"),SOe=o(" \u2014 "),jx=a("a"),ROe=o("LEDConfig"),BOe=o(" (LED model)"),POe=l(),Dm=a("li"),tZ=a("strong"),$Oe=o("longformer"),IOe=o(" \u2014 "),Dx=a("a"),qOe=o("LongformerConfig"),NOe=o(" (Longformer model)"),jOe=l(),Gm=a("li"),aZ=a("strong"),DOe=o("luke"),GOe=o(" \u2014 "),Gx=a("a"),OOe=o("LukeConfig"),VOe=o(" (LUKE model)"),XOe=l(),Om=a("li"),nZ=a("strong"),zOe=o("lxmert"),QOe=o(" \u2014 "),Ox=a("a"),WOe=o("LxmertConfig"),HOe=o(" (LXMERT model)"),UOe=l(),Vm=a("li"),sZ=a("strong"),JOe=o("m2m_100"),YOe=o(" \u2014 "),Vx=a("a"),KOe=o("M2M100Config"),ZOe=o(" (M2M100 model)"),eVe=l(),Xm=a("li"),lZ=a("strong"),oVe=o("marian"),rVe=o(" \u2014 "),Xx=a("a"),tVe=o("MarianConfig"),aVe=o(" (Marian model)"),nVe=l(),zm=a("li"),iZ=a("strong"),sVe=o("maskformer"),lVe=o(" \u2014 "),zx=a("a"),iVe=o("MaskFormerConfig"),dVe=o(" (MaskFormer model)"),cVe=l(),Qm=a("li"),dZ=a("strong"),fVe=o("mbart"),mVe=o(" \u2014 "),Qx=a("a"),gVe=o("MBartConfig"),hVe=o(" (mBART model)"),pVe=l(),Wm=a("li"),cZ=a("strong"),_Ve=o("megatron-bert"),uVe=o(" \u2014 "),Wx=a("a"),bVe=o("MegatronBertConfig"),vVe=o(" (MegatronBert model)"),FVe=l(),Hm=a("li"),fZ=a("strong"),TVe=o("mobilebert"),MVe=o(" \u2014 "),Hx=a("a"),EVe=o("MobileBertConfig"),CVe=o(" (MobileBERT model)"),wVe=l(),Um=a("li"),mZ=a("strong"),AVe=o("mpnet"),yVe=o(" \u2014 "),Ux=a("a"),LVe=o("MPNetConfig"),xVe=o(" (MPNet model)"),kVe=l(),Jm=a("li"),gZ=a("strong"),SVe=o("mt5"),RVe=o(" \u2014 "),Jx=a("a"),BVe=o("MT5Config"),PVe=o(" (mT5 model)"),$Ve=l(),Ym=a("li"),hZ=a("strong"),IVe=o("nystromformer"),qVe=o(" \u2014 "),Yx=a("a"),NVe=o("NystromformerConfig"),jVe=o(" (Nystromformer model)"),DVe=l(),Km=a("li"),pZ=a("strong"),GVe=o("openai-gpt"),OVe=o(" \u2014 "),Kx=a("a"),VVe=o("OpenAIGPTConfig"),XVe=o(" (OpenAI GPT model)"),zVe=l(),Zm=a("li"),_Z=a("strong"),QVe=o("pegasus"),WVe=o(" \u2014 "),Zx=a("a"),HVe=o("PegasusConfig"),UVe=o(" (Pegasus model)"),JVe=l(),eg=a("li"),uZ=a("strong"),YVe=o("perceiver"),KVe=o(" \u2014 "),ek=a("a"),ZVe=o("PerceiverConfig"),eXe=o(" (Perceiver model)"),oXe=l(),og=a("li"),bZ=a("strong"),rXe=o("plbart"),tXe=o(" \u2014 "),ok=a("a"),aXe=o("PLBartConfig"),nXe=o(" (PLBart model)"),sXe=l(),rg=a("li"),vZ=a("strong"),lXe=o("poolformer"),iXe=o(" \u2014 "),rk=a("a"),dXe=o("PoolFormerConfig"),cXe=o(" (PoolFormer model)"),fXe=l(),tg=a("li"),FZ=a("strong"),mXe=o("prophetnet"),gXe=o(" \u2014 "),tk=a("a"),hXe=o("ProphetNetConfig"),pXe=o(" (ProphetNet model)"),_Xe=l(),ag=a("li"),TZ=a("strong"),uXe=o("qdqbert"),bXe=o(" \u2014 "),ak=a("a"),vXe=o("QDQBertConfig"),FXe=o(" (QDQBert model)"),TXe=l(),ng=a("li"),MZ=a("strong"),MXe=o("rag"),EXe=o(" \u2014 "),nk=a("a"),CXe=o("RagConfig"),wXe=o(" (RAG model)"),AXe=l(),sg=a("li"),EZ=a("strong"),yXe=o("realm"),LXe=o(" \u2014 "),sk=a("a"),xXe=o("RealmConfig"),kXe=o(" (Realm model)"),SXe=l(),lg=a("li"),CZ=a("strong"),RXe=o("reformer"),BXe=o(" \u2014 "),lk=a("a"),PXe=o("ReformerConfig"),$Xe=o(" (Reformer model)"),IXe=l(),ig=a("li"),wZ=a("strong"),qXe=o("regnet"),NXe=o(" \u2014 "),ik=a("a"),jXe=o("RegNetConfig"),DXe=o(" (RegNet model)"),GXe=l(),dg=a("li"),AZ=a("strong"),OXe=o("rembert"),VXe=o(" \u2014 "),dk=a("a"),XXe=o("RemBertConfig"),zXe=o(" (RemBERT model)"),QXe=l(),cg=a("li"),yZ=a("strong"),WXe=o("resnet"),HXe=o(" \u2014 "),ck=a("a"),UXe=o("ResNetConfig"),JXe=o(" (ResNet model)"),YXe=l(),fg=a("li"),LZ=a("strong"),KXe=o("retribert"),ZXe=o(" \u2014 "),fk=a("a"),eze=o("RetriBertConfig"),oze=o(" (RetriBERT model)"),rze=l(),mg=a("li"),xZ=a("strong"),tze=o("roberta"),aze=o(" \u2014 "),mk=a("a"),nze=o("RobertaConfig"),sze=o(" (RoBERTa model)"),lze=l(),gg=a("li"),kZ=a("strong"),ize=o("roformer"),dze=o(" \u2014 "),gk=a("a"),cze=o("RoFormerConfig"),fze=o(" (RoFormer model)"),mze=l(),hg=a("li"),SZ=a("strong"),gze=o("segformer"),hze=o(" \u2014 "),hk=a("a"),pze=o("SegformerConfig"),_ze=o(" (SegFormer model)"),uze=l(),pg=a("li"),RZ=a("strong"),bze=o("sew"),vze=o(" \u2014 "),pk=a("a"),Fze=o("SEWConfig"),Tze=o(" (SEW model)"),Mze=l(),_g=a("li"),BZ=a("strong"),Eze=o("sew-d"),Cze=o(" \u2014 "),_k=a("a"),wze=o("SEWDConfig"),Aze=o(" (SEW-D model)"),yze=l(),ug=a("li"),PZ=a("strong"),Lze=o("speech-encoder-decoder"),xze=o(" \u2014 "),uk=a("a"),kze=o("SpeechEncoderDecoderConfig"),Sze=o(" (Speech Encoder decoder model)"),Rze=l(),bg=a("li"),$Z=a("strong"),Bze=o("speech_to_text"),Pze=o(" \u2014 "),bk=a("a"),$ze=o("Speech2TextConfig"),Ize=o(" (Speech2Text model)"),qze=l(),vg=a("li"),IZ=a("strong"),Nze=o("speech_to_text_2"),jze=o(" \u2014 "),vk=a("a"),Dze=o("Speech2Text2Config"),Gze=o(" (Speech2Text2 model)"),Oze=l(),Fg=a("li"),qZ=a("strong"),Vze=o("splinter"),Xze=o(" \u2014 "),Fk=a("a"),zze=o("SplinterConfig"),Qze=o(" (Splinter model)"),Wze=l(),Tg=a("li"),NZ=a("strong"),Hze=o("squeezebert"),Uze=o(" \u2014 "),Tk=a("a"),Jze=o("SqueezeBertConfig"),Yze=o(" (SqueezeBERT model)"),Kze=l(),Mg=a("li"),jZ=a("strong"),Zze=o("swin"),eQe=o(" \u2014 "),Mk=a("a"),oQe=o("SwinConfig"),rQe=o(" (Swin model)"),tQe=l(),Eg=a("li"),DZ=a("strong"),aQe=o("t5"),nQe=o(" \u2014 "),Ek=a("a"),sQe=o("T5Config"),lQe=o(" (T5 model)"),iQe=l(),Cg=a("li"),GZ=a("strong"),dQe=o("tapas"),cQe=o(" \u2014 "),Ck=a("a"),fQe=o("TapasConfig"),mQe=o(" (TAPAS model)"),gQe=l(),wg=a("li"),OZ=a("strong"),hQe=o("tapex"),pQe=o(" \u2014 "),wk=a("a"),_Qe=o("BartConfig"),uQe=o(" (TAPEX model)"),bQe=l(),Ag=a("li"),VZ=a("strong"),vQe=o("transfo-xl"),FQe=o(" \u2014 "),Ak=a("a"),TQe=o("TransfoXLConfig"),MQe=o(" (Transformer-XL model)"),EQe=l(),yg=a("li"),XZ=a("strong"),CQe=o("trocr"),wQe=o(" \u2014 "),yk=a("a"),AQe=o("TrOCRConfig"),yQe=o(" (TrOCR model)"),LQe=l(),Lg=a("li"),zZ=a("strong"),xQe=o("unispeech"),kQe=o(" \u2014 "),Lk=a("a"),SQe=o("UniSpeechConfig"),RQe=o(" (UniSpeech model)"),BQe=l(),xg=a("li"),QZ=a("strong"),PQe=o("unispeech-sat"),$Qe=o(" \u2014 "),xk=a("a"),IQe=o("UniSpeechSatConfig"),qQe=o(" (UniSpeechSat model)"),NQe=l(),kg=a("li"),WZ=a("strong"),jQe=o("van"),DQe=o(" \u2014 "),kk=a("a"),GQe=o("VanConfig"),OQe=o(" (VAN model)"),VQe=l(),Sg=a("li"),HZ=a("strong"),XQe=o("vilt"),zQe=o(" \u2014 "),Sk=a("a"),QQe=o("ViltConfig"),WQe=o(" (ViLT model)"),HQe=l(),Rg=a("li"),UZ=a("strong"),UQe=o("vision-encoder-decoder"),JQe=o(" \u2014 "),Rk=a("a"),YQe=o("VisionEncoderDecoderConfig"),KQe=o(" (Vision Encoder decoder model)"),ZQe=l(),Bg=a("li"),JZ=a("strong"),eWe=o("vision-text-dual-encoder"),oWe=o(" \u2014 "),Bk=a("a"),rWe=o("VisionTextDualEncoderConfig"),tWe=o(" (VisionTextDualEncoder model)"),aWe=l(),Pg=a("li"),YZ=a("strong"),nWe=o("visual_bert"),sWe=o(" \u2014 "),Pk=a("a"),lWe=o("VisualBertConfig"),iWe=o(" (VisualBert model)"),dWe=l(),$g=a("li"),KZ=a("strong"),cWe=o("vit"),fWe=o(" \u2014 "),$k=a("a"),mWe=o("ViTConfig"),gWe=o(" (ViT model)"),hWe=l(),Ig=a("li"),ZZ=a("strong"),pWe=o("vit_mae"),_We=o(" \u2014 "),Ik=a("a"),uWe=o("ViTMAEConfig"),bWe=o(" (ViTMAE model)"),vWe=l(),qg=a("li"),eee=a("strong"),FWe=o("wav2vec2"),TWe=o(" \u2014 "),qk=a("a"),MWe=o("Wav2Vec2Config"),EWe=o(" (Wav2Vec2 model)"),CWe=l(),Ng=a("li"),oee=a("strong"),wWe=o("wavlm"),AWe=o(" \u2014 "),Nk=a("a"),yWe=o("WavLMConfig"),LWe=o(" (WavLM model)"),xWe=l(),jg=a("li"),ree=a("strong"),kWe=o("xglm"),SWe=o(" \u2014 "),jk=a("a"),RWe=o("XGLMConfig"),BWe=o(" (XGLM model)"),PWe=l(),Dg=a("li"),tee=a("strong"),$We=o("xlm"),IWe=o(" \u2014 "),Dk=a("a"),qWe=o("XLMConfig"),NWe=o(" (XLM model)"),jWe=l(),Gg=a("li"),aee=a("strong"),DWe=o("xlm-prophetnet"),GWe=o(" \u2014 "),Gk=a("a"),OWe=o("XLMProphetNetConfig"),VWe=o(" (XLMProphetNet model)"),XWe=l(),Og=a("li"),nee=a("strong"),zWe=o("xlm-roberta"),QWe=o(" \u2014 "),Ok=a("a"),WWe=o("XLMRobertaConfig"),HWe=o(" (XLM-RoBERTa model)"),UWe=l(),Vg=a("li"),see=a("strong"),JWe=o("xlm-roberta-xl"),YWe=o(" \u2014 "),Vk=a("a"),KWe=o("XLMRobertaXLConfig"),ZWe=o(" (XLM-RoBERTa-XL model)"),eHe=l(),Xg=a("li"),lee=a("strong"),oHe=o("xlnet"),rHe=o(" \u2014 "),Xk=a("a"),tHe=o("XLNetConfig"),aHe=o(" (XLNet model)"),nHe=l(),zg=a("li"),iee=a("strong"),sHe=o("yoso"),lHe=o(" \u2014 "),zk=a("a"),iHe=o("YosoConfig"),dHe=o(" (YOSO model)"),cHe=l(),dee=a("p"),fHe=o("Examples:"),mHe=l(),f(r6.$$.fragment),gHe=l(),Qg=a("div"),f(t6.$$.fragment),hHe=l(),cee=a("p"),pHe=o("Register a new configuration for this class."),sPe=l(),od=a("h2"),Wg=a("a"),fee=a("span"),f(a6.$$.fragment),_He=l(),mee=a("span"),uHe=o("AutoTokenizer"),lPe=l(),Wo=a("div"),f(n6.$$.fragment),bHe=l(),s6=a("p"),vHe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Qk=a("a"),FHe=o("AutoTokenizer.from_pretrained()"),THe=o(" class method."),MHe=l(),l6=a("p"),EHe=o("This class cannot be instantiated directly using "),gee=a("code"),CHe=o("__init__()"),wHe=o(" (throws an error)."),AHe=l(),ho=a("div"),f(i6.$$.fragment),yHe=l(),hee=a("p"),LHe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),xHe=l(),Oa=a("p"),kHe=o("The tokenizer class to instantiate is selected based on the "),pee=a("code"),SHe=o("model_type"),RHe=o(` property of the config object (either
passed as an argument or loaded from `),_ee=a("code"),BHe=o("pretrained_model_name_or_path"),PHe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uee=a("code"),$He=o("pretrained_model_name_or_path"),IHe=o(":"),qHe=l(),E=a("ul"),Wn=a("li"),bee=a("strong"),NHe=o("albert"),jHe=o(" \u2014 "),Wk=a("a"),DHe=o("AlbertTokenizer"),GHe=o(" or "),Hk=a("a"),OHe=o("AlbertTokenizerFast"),VHe=o(" (ALBERT model)"),XHe=l(),Hn=a("li"),vee=a("strong"),zHe=o("bart"),QHe=o(" \u2014 "),Uk=a("a"),WHe=o("BartTokenizer"),HHe=o(" or "),Jk=a("a"),UHe=o("BartTokenizerFast"),JHe=o(" (BART model)"),YHe=l(),Un=a("li"),Fee=a("strong"),KHe=o("barthez"),ZHe=o(" \u2014 "),Yk=a("a"),eUe=o("BarthezTokenizer"),oUe=o(" or "),Kk=a("a"),rUe=o("BarthezTokenizerFast"),tUe=o(" (BARThez model)"),aUe=l(),Hg=a("li"),Tee=a("strong"),nUe=o("bartpho"),sUe=o(" \u2014 "),Zk=a("a"),lUe=o("BartphoTokenizer"),iUe=o(" (BARTpho model)"),dUe=l(),Jn=a("li"),Mee=a("strong"),cUe=o("bert"),fUe=o(" \u2014 "),eS=a("a"),mUe=o("BertTokenizer"),gUe=o(" or "),oS=a("a"),hUe=o("BertTokenizerFast"),pUe=o(" (BERT model)"),_Ue=l(),Ug=a("li"),Eee=a("strong"),uUe=o("bert-generation"),bUe=o(" \u2014 "),rS=a("a"),vUe=o("BertGenerationTokenizer"),FUe=o(" (Bert Generation model)"),TUe=l(),Jg=a("li"),Cee=a("strong"),MUe=o("bert-japanese"),EUe=o(" \u2014 "),tS=a("a"),CUe=o("BertJapaneseTokenizer"),wUe=o(" (BertJapanese model)"),AUe=l(),Yg=a("li"),wee=a("strong"),yUe=o("bertweet"),LUe=o(" \u2014 "),aS=a("a"),xUe=o("BertweetTokenizer"),kUe=o(" (Bertweet model)"),SUe=l(),Yn=a("li"),Aee=a("strong"),RUe=o("big_bird"),BUe=o(" \u2014 "),nS=a("a"),PUe=o("BigBirdTokenizer"),$Ue=o(" or "),sS=a("a"),IUe=o("BigBirdTokenizerFast"),qUe=o(" (BigBird model)"),NUe=l(),Kn=a("li"),yee=a("strong"),jUe=o("bigbird_pegasus"),DUe=o(" \u2014 "),lS=a("a"),GUe=o("PegasusTokenizer"),OUe=o(" or "),iS=a("a"),VUe=o("PegasusTokenizerFast"),XUe=o(" (BigBirdPegasus model)"),zUe=l(),Zn=a("li"),Lee=a("strong"),QUe=o("blenderbot"),WUe=o(" \u2014 "),dS=a("a"),HUe=o("BlenderbotTokenizer"),UUe=o(" or "),cS=a("a"),JUe=o("BlenderbotTokenizerFast"),YUe=o(" (Blenderbot model)"),KUe=l(),Kg=a("li"),xee=a("strong"),ZUe=o("blenderbot-small"),eJe=o(" \u2014 "),fS=a("a"),oJe=o("BlenderbotSmallTokenizer"),rJe=o(" (BlenderbotSmall model)"),tJe=l(),Zg=a("li"),kee=a("strong"),aJe=o("byt5"),nJe=o(" \u2014 "),mS=a("a"),sJe=o("ByT5Tokenizer"),lJe=o(" (ByT5 model)"),iJe=l(),es=a("li"),See=a("strong"),dJe=o("camembert"),cJe=o(" \u2014 "),gS=a("a"),fJe=o("CamembertTokenizer"),mJe=o(" or "),hS=a("a"),gJe=o("CamembertTokenizerFast"),hJe=o(" (CamemBERT model)"),pJe=l(),eh=a("li"),Ree=a("strong"),_Je=o("canine"),uJe=o(" \u2014 "),pS=a("a"),bJe=o("CanineTokenizer"),vJe=o(" (Canine model)"),FJe=l(),os=a("li"),Bee=a("strong"),TJe=o("clip"),MJe=o(" \u2014 "),_S=a("a"),EJe=o("CLIPTokenizer"),CJe=o(" or "),uS=a("a"),wJe=o("CLIPTokenizerFast"),AJe=o(" (CLIP model)"),yJe=l(),rs=a("li"),Pee=a("strong"),LJe=o("convbert"),xJe=o(" \u2014 "),bS=a("a"),kJe=o("ConvBertTokenizer"),SJe=o(" or "),vS=a("a"),RJe=o("ConvBertTokenizerFast"),BJe=o(" (ConvBERT model)"),PJe=l(),ts=a("li"),$ee=a("strong"),$Je=o("cpm"),IJe=o(" \u2014 "),FS=a("a"),qJe=o("CpmTokenizer"),NJe=o(" or "),Iee=a("code"),jJe=o("CpmTokenizerFast"),DJe=o(" (CPM model)"),GJe=l(),oh=a("li"),qee=a("strong"),OJe=o("ctrl"),VJe=o(" \u2014 "),TS=a("a"),XJe=o("CTRLTokenizer"),zJe=o(" (CTRL model)"),QJe=l(),as=a("li"),Nee=a("strong"),WJe=o("data2vec-text"),HJe=o(" \u2014 "),MS=a("a"),UJe=o("RobertaTokenizer"),JJe=o(" or "),ES=a("a"),YJe=o("RobertaTokenizerFast"),KJe=o(" (Data2VecText model)"),ZJe=l(),ns=a("li"),jee=a("strong"),eYe=o("deberta"),oYe=o(" \u2014 "),CS=a("a"),rYe=o("DebertaTokenizer"),tYe=o(" or "),wS=a("a"),aYe=o("DebertaTokenizerFast"),nYe=o(" (DeBERTa model)"),sYe=l(),ss=a("li"),Dee=a("strong"),lYe=o("deberta-v2"),iYe=o(" \u2014 "),AS=a("a"),dYe=o("DebertaV2Tokenizer"),cYe=o(" or "),yS=a("a"),fYe=o("DebertaV2TokenizerFast"),mYe=o(" (DeBERTa-v2 model)"),gYe=l(),ls=a("li"),Gee=a("strong"),hYe=o("distilbert"),pYe=o(" \u2014 "),LS=a("a"),_Ye=o("DistilBertTokenizer"),uYe=o(" or "),xS=a("a"),bYe=o("DistilBertTokenizerFast"),vYe=o(" (DistilBERT model)"),FYe=l(),is=a("li"),Oee=a("strong"),TYe=o("dpr"),MYe=o(" \u2014 "),kS=a("a"),EYe=o("DPRQuestionEncoderTokenizer"),CYe=o(" or "),SS=a("a"),wYe=o("DPRQuestionEncoderTokenizerFast"),AYe=o(" (DPR model)"),yYe=l(),ds=a("li"),Vee=a("strong"),LYe=o("electra"),xYe=o(" \u2014 "),RS=a("a"),kYe=o("ElectraTokenizer"),SYe=o(" or "),BS=a("a"),RYe=o("ElectraTokenizerFast"),BYe=o(" (ELECTRA model)"),PYe=l(),rh=a("li"),Xee=a("strong"),$Ye=o("flaubert"),IYe=o(" \u2014 "),PS=a("a"),qYe=o("FlaubertTokenizer"),NYe=o(" (FlauBERT model)"),jYe=l(),cs=a("li"),zee=a("strong"),DYe=o("fnet"),GYe=o(" \u2014 "),$S=a("a"),OYe=o("FNetTokenizer"),VYe=o(" or "),IS=a("a"),XYe=o("FNetTokenizerFast"),zYe=o(" (FNet model)"),QYe=l(),th=a("li"),Qee=a("strong"),WYe=o("fsmt"),HYe=o(" \u2014 "),qS=a("a"),UYe=o("FSMTTokenizer"),JYe=o(" (FairSeq Machine-Translation model)"),YYe=l(),fs=a("li"),Wee=a("strong"),KYe=o("funnel"),ZYe=o(" \u2014 "),NS=a("a"),eKe=o("FunnelTokenizer"),oKe=o(" or "),jS=a("a"),rKe=o("FunnelTokenizerFast"),tKe=o(" (Funnel Transformer model)"),aKe=l(),ms=a("li"),Hee=a("strong"),nKe=o("gpt2"),sKe=o(" \u2014 "),DS=a("a"),lKe=o("GPT2Tokenizer"),iKe=o(" or "),GS=a("a"),dKe=o("GPT2TokenizerFast"),cKe=o(" (OpenAI GPT-2 model)"),fKe=l(),gs=a("li"),Uee=a("strong"),mKe=o("gpt_neo"),gKe=o(" \u2014 "),OS=a("a"),hKe=o("GPT2Tokenizer"),pKe=o(" or "),VS=a("a"),_Ke=o("GPT2TokenizerFast"),uKe=o(" (GPT Neo model)"),bKe=l(),hs=a("li"),Jee=a("strong"),vKe=o("gptj"),FKe=o(" \u2014 "),XS=a("a"),TKe=o("GPT2Tokenizer"),MKe=o(" or "),zS=a("a"),EKe=o("GPT2TokenizerFast"),CKe=o(" (GPT-J model)"),wKe=l(),ps=a("li"),Yee=a("strong"),AKe=o("herbert"),yKe=o(" \u2014 "),QS=a("a"),LKe=o("HerbertTokenizer"),xKe=o(" or "),WS=a("a"),kKe=o("HerbertTokenizerFast"),SKe=o(" (HerBERT model)"),RKe=l(),ah=a("li"),Kee=a("strong"),BKe=o("hubert"),PKe=o(" \u2014 "),HS=a("a"),$Ke=o("Wav2Vec2CTCTokenizer"),IKe=o(" (Hubert model)"),qKe=l(),_s=a("li"),Zee=a("strong"),NKe=o("ibert"),jKe=o(" \u2014 "),US=a("a"),DKe=o("RobertaTokenizer"),GKe=o(" or "),JS=a("a"),OKe=o("RobertaTokenizerFast"),VKe=o(" (I-BERT model)"),XKe=l(),us=a("li"),eoe=a("strong"),zKe=o("layoutlm"),QKe=o(" \u2014 "),YS=a("a"),WKe=o("LayoutLMTokenizer"),HKe=o(" or "),KS=a("a"),UKe=o("LayoutLMTokenizerFast"),JKe=o(" (LayoutLM model)"),YKe=l(),bs=a("li"),ooe=a("strong"),KKe=o("layoutlmv2"),ZKe=o(" \u2014 "),ZS=a("a"),eZe=o("LayoutLMv2Tokenizer"),oZe=o(" or "),eR=a("a"),rZe=o("LayoutLMv2TokenizerFast"),tZe=o(" (LayoutLMv2 model)"),aZe=l(),vs=a("li"),roe=a("strong"),nZe=o("layoutxlm"),sZe=o(" \u2014 "),oR=a("a"),lZe=o("LayoutXLMTokenizer"),iZe=o(" or "),rR=a("a"),dZe=o("LayoutXLMTokenizerFast"),cZe=o(" (LayoutXLM model)"),fZe=l(),Fs=a("li"),toe=a("strong"),mZe=o("led"),gZe=o(" \u2014 "),tR=a("a"),hZe=o("LEDTokenizer"),pZe=o(" or "),aR=a("a"),_Ze=o("LEDTokenizerFast"),uZe=o(" (LED model)"),bZe=l(),Ts=a("li"),aoe=a("strong"),vZe=o("longformer"),FZe=o(" \u2014 "),nR=a("a"),TZe=o("LongformerTokenizer"),MZe=o(" or "),sR=a("a"),EZe=o("LongformerTokenizerFast"),CZe=o(" (Longformer model)"),wZe=l(),nh=a("li"),noe=a("strong"),AZe=o("luke"),yZe=o(" \u2014 "),lR=a("a"),LZe=o("LukeTokenizer"),xZe=o(" (LUKE model)"),kZe=l(),Ms=a("li"),soe=a("strong"),SZe=o("lxmert"),RZe=o(" \u2014 "),iR=a("a"),BZe=o("LxmertTokenizer"),PZe=o(" or "),dR=a("a"),$Ze=o("LxmertTokenizerFast"),IZe=o(" (LXMERT model)"),qZe=l(),sh=a("li"),loe=a("strong"),NZe=o("m2m_100"),jZe=o(" \u2014 "),cR=a("a"),DZe=o("M2M100Tokenizer"),GZe=o(" (M2M100 model)"),OZe=l(),lh=a("li"),ioe=a("strong"),VZe=o("marian"),XZe=o(" \u2014 "),fR=a("a"),zZe=o("MarianTokenizer"),QZe=o(" (Marian model)"),WZe=l(),Es=a("li"),doe=a("strong"),HZe=o("mbart"),UZe=o(" \u2014 "),mR=a("a"),JZe=o("MBartTokenizer"),YZe=o(" or "),gR=a("a"),KZe=o("MBartTokenizerFast"),ZZe=o(" (mBART model)"),eeo=l(),Cs=a("li"),coe=a("strong"),oeo=o("mbart50"),reo=o(" \u2014 "),hR=a("a"),teo=o("MBart50Tokenizer"),aeo=o(" or "),pR=a("a"),neo=o("MBart50TokenizerFast"),seo=o(" (mBART-50 model)"),leo=l(),ws=a("li"),foe=a("strong"),ieo=o("megatron-bert"),deo=o(" \u2014 "),_R=a("a"),ceo=o("BertTokenizer"),feo=o(" or "),uR=a("a"),meo=o("BertTokenizerFast"),geo=o(" (MegatronBert model)"),heo=l(),ih=a("li"),moe=a("strong"),peo=o("mluke"),_eo=o(" \u2014 "),bR=a("a"),ueo=o("MLukeTokenizer"),beo=o(" (mLUKE model)"),veo=l(),As=a("li"),goe=a("strong"),Feo=o("mobilebert"),Teo=o(" \u2014 "),vR=a("a"),Meo=o("MobileBertTokenizer"),Eeo=o(" or "),FR=a("a"),Ceo=o("MobileBertTokenizerFast"),weo=o(" (MobileBERT model)"),Aeo=l(),ys=a("li"),hoe=a("strong"),yeo=o("mpnet"),Leo=o(" \u2014 "),TR=a("a"),xeo=o("MPNetTokenizer"),keo=o(" or "),MR=a("a"),Seo=o("MPNetTokenizerFast"),Reo=o(" (MPNet model)"),Beo=l(),Ls=a("li"),poe=a("strong"),Peo=o("mt5"),$eo=o(" \u2014 "),ER=a("a"),Ieo=o("MT5Tokenizer"),qeo=o(" or "),CR=a("a"),Neo=o("MT5TokenizerFast"),jeo=o(" (mT5 model)"),Deo=l(),xs=a("li"),_oe=a("strong"),Geo=o("nystromformer"),Oeo=o(" \u2014 "),wR=a("a"),Veo=o("AlbertTokenizer"),Xeo=o(" or "),AR=a("a"),zeo=o("AlbertTokenizerFast"),Qeo=o(" (Nystromformer model)"),Weo=l(),ks=a("li"),uoe=a("strong"),Heo=o("openai-gpt"),Ueo=o(" \u2014 "),yR=a("a"),Jeo=o("OpenAIGPTTokenizer"),Yeo=o(" or "),LR=a("a"),Keo=o("OpenAIGPTTokenizerFast"),Zeo=o(" (OpenAI GPT model)"),eoo=l(),Ss=a("li"),boe=a("strong"),ooo=o("pegasus"),roo=o(" \u2014 "),xR=a("a"),too=o("PegasusTokenizer"),aoo=o(" or "),kR=a("a"),noo=o("PegasusTokenizerFast"),soo=o(" (Pegasus model)"),loo=l(),dh=a("li"),voe=a("strong"),ioo=o("perceiver"),doo=o(" \u2014 "),SR=a("a"),coo=o("PerceiverTokenizer"),foo=o(" (Perceiver model)"),moo=l(),ch=a("li"),Foe=a("strong"),goo=o("phobert"),hoo=o(" \u2014 "),RR=a("a"),poo=o("PhobertTokenizer"),_oo=o(" (PhoBERT model)"),uoo=l(),fh=a("li"),Toe=a("strong"),boo=o("plbart"),voo=o(" \u2014 "),BR=a("a"),Foo=o("PLBartTokenizer"),Too=o(" (PLBart model)"),Moo=l(),mh=a("li"),Moe=a("strong"),Eoo=o("prophetnet"),Coo=o(" \u2014 "),PR=a("a"),woo=o("ProphetNetTokenizer"),Aoo=o(" (ProphetNet model)"),yoo=l(),Rs=a("li"),Eoe=a("strong"),Loo=o("qdqbert"),xoo=o(" \u2014 "),$R=a("a"),koo=o("BertTokenizer"),Soo=o(" or "),IR=a("a"),Roo=o("BertTokenizerFast"),Boo=o(" (QDQBert model)"),Poo=l(),gh=a("li"),Coe=a("strong"),$oo=o("rag"),Ioo=o(" \u2014 "),qR=a("a"),qoo=o("RagTokenizer"),Noo=o(" (RAG model)"),joo=l(),Bs=a("li"),woe=a("strong"),Doo=o("realm"),Goo=o(" \u2014 "),NR=a("a"),Ooo=o("RealmTokenizer"),Voo=o(" or "),jR=a("a"),Xoo=o("RealmTokenizerFast"),zoo=o(" (Realm model)"),Qoo=l(),Ps=a("li"),Aoe=a("strong"),Woo=o("reformer"),Hoo=o(" \u2014 "),DR=a("a"),Uoo=o("ReformerTokenizer"),Joo=o(" or "),GR=a("a"),Yoo=o("ReformerTokenizerFast"),Koo=o(" (Reformer model)"),Zoo=l(),$s=a("li"),yoe=a("strong"),ero=o("rembert"),oro=o(" \u2014 "),OR=a("a"),rro=o("RemBertTokenizer"),tro=o(" or "),VR=a("a"),aro=o("RemBertTokenizerFast"),nro=o(" (RemBERT model)"),sro=l(),Is=a("li"),Loe=a("strong"),lro=o("retribert"),iro=o(" \u2014 "),XR=a("a"),dro=o("RetriBertTokenizer"),cro=o(" or "),zR=a("a"),fro=o("RetriBertTokenizerFast"),mro=o(" (RetriBERT model)"),gro=l(),qs=a("li"),xoe=a("strong"),hro=o("roberta"),pro=o(" \u2014 "),QR=a("a"),_ro=o("RobertaTokenizer"),uro=o(" or "),WR=a("a"),bro=o("RobertaTokenizerFast"),vro=o(" (RoBERTa model)"),Fro=l(),Ns=a("li"),koe=a("strong"),Tro=o("roformer"),Mro=o(" \u2014 "),HR=a("a"),Ero=o("RoFormerTokenizer"),Cro=o(" or "),UR=a("a"),wro=o("RoFormerTokenizerFast"),Aro=o(" (RoFormer model)"),yro=l(),hh=a("li"),Soe=a("strong"),Lro=o("speech_to_text"),xro=o(" \u2014 "),JR=a("a"),kro=o("Speech2TextTokenizer"),Sro=o(" (Speech2Text model)"),Rro=l(),ph=a("li"),Roe=a("strong"),Bro=o("speech_to_text_2"),Pro=o(" \u2014 "),YR=a("a"),$ro=o("Speech2Text2Tokenizer"),Iro=o(" (Speech2Text2 model)"),qro=l(),js=a("li"),Boe=a("strong"),Nro=o("splinter"),jro=o(" \u2014 "),KR=a("a"),Dro=o("SplinterTokenizer"),Gro=o(" or "),ZR=a("a"),Oro=o("SplinterTokenizerFast"),Vro=o(" (Splinter model)"),Xro=l(),Ds=a("li"),Poe=a("strong"),zro=o("squeezebert"),Qro=o(" \u2014 "),eB=a("a"),Wro=o("SqueezeBertTokenizer"),Hro=o(" or "),oB=a("a"),Uro=o("SqueezeBertTokenizerFast"),Jro=o(" (SqueezeBERT model)"),Yro=l(),Gs=a("li"),$oe=a("strong"),Kro=o("t5"),Zro=o(" \u2014 "),rB=a("a"),eto=o("T5Tokenizer"),oto=o(" or "),tB=a("a"),rto=o("T5TokenizerFast"),tto=o(" (T5 model)"),ato=l(),_h=a("li"),Ioe=a("strong"),nto=o("tapas"),sto=o(" \u2014 "),aB=a("a"),lto=o("TapasTokenizer"),ito=o(" (TAPAS model)"),dto=l(),uh=a("li"),qoe=a("strong"),cto=o("tapex"),fto=o(" \u2014 "),nB=a("a"),mto=o("TapexTokenizer"),gto=o(" (TAPEX model)"),hto=l(),bh=a("li"),Noe=a("strong"),pto=o("transfo-xl"),_to=o(" \u2014 "),sB=a("a"),uto=o("TransfoXLTokenizer"),bto=o(" (Transformer-XL model)"),vto=l(),Os=a("li"),joe=a("strong"),Fto=o("visual_bert"),Tto=o(" \u2014 "),lB=a("a"),Mto=o("BertTokenizer"),Eto=o(" or "),iB=a("a"),Cto=o("BertTokenizerFast"),wto=o(" (VisualBert model)"),Ato=l(),vh=a("li"),Doe=a("strong"),yto=o("wav2vec2"),Lto=o(" \u2014 "),dB=a("a"),xto=o("Wav2Vec2CTCTokenizer"),kto=o(" (Wav2Vec2 model)"),Sto=l(),Fh=a("li"),Goe=a("strong"),Rto=o("wav2vec2_phoneme"),Bto=o(" \u2014 "),cB=a("a"),Pto=o("Wav2Vec2PhonemeCTCTokenizer"),$to=o(" (Wav2Vec2Phoneme model)"),Ito=l(),Vs=a("li"),Ooe=a("strong"),qto=o("xglm"),Nto=o(" \u2014 "),fB=a("a"),jto=o("XGLMTokenizer"),Dto=o(" or "),mB=a("a"),Gto=o("XGLMTokenizerFast"),Oto=o(" (XGLM model)"),Vto=l(),Th=a("li"),Voe=a("strong"),Xto=o("xlm"),zto=o(" \u2014 "),gB=a("a"),Qto=o("XLMTokenizer"),Wto=o(" (XLM model)"),Hto=l(),Mh=a("li"),Xoe=a("strong"),Uto=o("xlm-prophetnet"),Jto=o(" \u2014 "),hB=a("a"),Yto=o("XLMProphetNetTokenizer"),Kto=o(" (XLMProphetNet model)"),Zto=l(),Xs=a("li"),zoe=a("strong"),eao=o("xlm-roberta"),oao=o(" \u2014 "),pB=a("a"),rao=o("XLMRobertaTokenizer"),tao=o(" or "),_B=a("a"),aao=o("XLMRobertaTokenizerFast"),nao=o(" (XLM-RoBERTa model)"),sao=l(),zs=a("li"),Qoe=a("strong"),lao=o("xlm-roberta-xl"),iao=o(" \u2014 "),uB=a("a"),dao=o("RobertaTokenizer"),cao=o(" or "),bB=a("a"),fao=o("RobertaTokenizerFast"),mao=o(" (XLM-RoBERTa-XL model)"),gao=l(),Qs=a("li"),Woe=a("strong"),hao=o("xlnet"),pao=o(" \u2014 "),vB=a("a"),_ao=o("XLNetTokenizer"),uao=o(" or "),FB=a("a"),bao=o("XLNetTokenizerFast"),vao=o(" (XLNet model)"),Fao=l(),Ws=a("li"),Hoe=a("strong"),Tao=o("yoso"),Mao=o(" \u2014 "),TB=a("a"),Eao=o("AlbertTokenizer"),Cao=o(" or "),MB=a("a"),wao=o("AlbertTokenizerFast"),Aao=o(" (YOSO model)"),yao=l(),Uoe=a("p"),Lao=o("Examples:"),xao=l(),f(d6.$$.fragment),kao=l(),Eh=a("div"),f(c6.$$.fragment),Sao=l(),Joe=a("p"),Rao=o("Register a new tokenizer in this mapping."),iPe=l(),rd=a("h2"),Ch=a("a"),Yoe=a("span"),f(f6.$$.fragment),Bao=l(),Koe=a("span"),Pao=o("AutoFeatureExtractor"),dPe=l(),Ho=a("div"),f(m6.$$.fragment),$ao=l(),g6=a("p"),Iao=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),EB=a("a"),qao=o("AutoFeatureExtractor.from_pretrained()"),Nao=o(" class method."),jao=l(),h6=a("p"),Dao=o("This class cannot be instantiated directly using "),Zoe=a("code"),Gao=o("__init__()"),Oao=o(" (throws an error)."),Vao=l(),Ie=a("div"),f(p6.$$.fragment),Xao=l(),ere=a("p"),zao=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Qao=l(),Va=a("p"),Wao=o("The feature extractor class to instantiate is selected based on the "),ore=a("code"),Hao=o("model_type"),Uao=o(` property of the config object
(either passed as an argument or loaded from `),rre=a("code"),Jao=o("pretrained_model_name_or_path"),Yao=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),tre=a("code"),Kao=o("pretrained_model_name_or_path"),Zao=o(":"),eno=l(),H=a("ul"),wh=a("li"),are=a("strong"),ono=o("beit"),rno=o(" \u2014 "),CB=a("a"),tno=o("BeitFeatureExtractor"),ano=o(" (BEiT model)"),nno=l(),Ah=a("li"),nre=a("strong"),sno=o("clip"),lno=o(" \u2014 "),wB=a("a"),ino=o("CLIPFeatureExtractor"),dno=o(" (CLIP model)"),cno=l(),yh=a("li"),sre=a("strong"),fno=o("convnext"),mno=o(" \u2014 "),AB=a("a"),gno=o("ConvNextFeatureExtractor"),hno=o(" (ConvNext model)"),pno=l(),Lh=a("li"),lre=a("strong"),_no=o("data2vec-audio"),uno=o(" \u2014 "),yB=a("a"),bno=o("Wav2Vec2FeatureExtractor"),vno=o(" (Data2VecAudio model)"),Fno=l(),xh=a("li"),ire=a("strong"),Tno=o("data2vec-vision"),Mno=o(" \u2014 "),LB=a("a"),Eno=o("BeitFeatureExtractor"),Cno=o(" (Data2VecVision model)"),wno=l(),kh=a("li"),dre=a("strong"),Ano=o("deit"),yno=o(" \u2014 "),xB=a("a"),Lno=o("DeiTFeatureExtractor"),xno=o(" (DeiT model)"),kno=l(),Sh=a("li"),cre=a("strong"),Sno=o("detr"),Rno=o(" \u2014 "),kB=a("a"),Bno=o("DetrFeatureExtractor"),Pno=o(" (DETR model)"),$no=l(),Rh=a("li"),fre=a("strong"),Ino=o("dpt"),qno=o(" \u2014 "),SB=a("a"),Nno=o("DPTFeatureExtractor"),jno=o(" (DPT model)"),Dno=l(),Bh=a("li"),mre=a("strong"),Gno=o("glpn"),Ono=o(" \u2014 "),RB=a("a"),Vno=o("GLPNFeatureExtractor"),Xno=o(" (GLPN model)"),zno=l(),Ph=a("li"),gre=a("strong"),Qno=o("hubert"),Wno=o(" \u2014 "),BB=a("a"),Hno=o("Wav2Vec2FeatureExtractor"),Uno=o(" (Hubert model)"),Jno=l(),$h=a("li"),hre=a("strong"),Yno=o("layoutlmv2"),Kno=o(" \u2014 "),PB=a("a"),Zno=o("LayoutLMv2FeatureExtractor"),eso=o(" (LayoutLMv2 model)"),oso=l(),Ih=a("li"),pre=a("strong"),rso=o("maskformer"),tso=o(" \u2014 "),$B=a("a"),aso=o("MaskFormerFeatureExtractor"),nso=o(" (MaskFormer model)"),sso=l(),qh=a("li"),_re=a("strong"),lso=o("perceiver"),iso=o(" \u2014 "),IB=a("a"),dso=o("PerceiverFeatureExtractor"),cso=o(" (Perceiver model)"),fso=l(),Nh=a("li"),ure=a("strong"),mso=o("poolformer"),gso=o(" \u2014 "),qB=a("a"),hso=o("PoolFormerFeatureExtractor"),pso=o(" (PoolFormer model)"),_so=l(),jh=a("li"),bre=a("strong"),uso=o("regnet"),bso=o(" \u2014 "),NB=a("a"),vso=o("ConvNextFeatureExtractor"),Fso=o(" (RegNet model)"),Tso=l(),Dh=a("li"),vre=a("strong"),Mso=o("resnet"),Eso=o(" \u2014 "),jB=a("a"),Cso=o("ConvNextFeatureExtractor"),wso=o(" (ResNet model)"),Aso=l(),Gh=a("li"),Fre=a("strong"),yso=o("segformer"),Lso=o(" \u2014 "),DB=a("a"),xso=o("SegformerFeatureExtractor"),kso=o(" (SegFormer model)"),Sso=l(),Oh=a("li"),Tre=a("strong"),Rso=o("speech_to_text"),Bso=o(" \u2014 "),GB=a("a"),Pso=o("Speech2TextFeatureExtractor"),$so=o(" (Speech2Text model)"),Iso=l(),Vh=a("li"),Mre=a("strong"),qso=o("swin"),Nso=o(" \u2014 "),OB=a("a"),jso=o("ViTFeatureExtractor"),Dso=o(" (Swin model)"),Gso=l(),Xh=a("li"),Ere=a("strong"),Oso=o("van"),Vso=o(" \u2014 "),VB=a("a"),Xso=o("ConvNextFeatureExtractor"),zso=o(" (VAN model)"),Qso=l(),zh=a("li"),Cre=a("strong"),Wso=o("vit"),Hso=o(" \u2014 "),XB=a("a"),Uso=o("ViTFeatureExtractor"),Jso=o(" (ViT model)"),Yso=l(),Qh=a("li"),wre=a("strong"),Kso=o("vit_mae"),Zso=o(" \u2014 "),zB=a("a"),elo=o("ViTFeatureExtractor"),olo=o(" (ViTMAE model)"),rlo=l(),Wh=a("li"),Are=a("strong"),tlo=o("wav2vec2"),alo=o(" \u2014 "),QB=a("a"),nlo=o("Wav2Vec2FeatureExtractor"),slo=o(" (Wav2Vec2 model)"),llo=l(),f(Hh.$$.fragment),ilo=l(),yre=a("p"),dlo=o("Examples:"),clo=l(),f(_6.$$.fragment),flo=l(),Uh=a("div"),f(u6.$$.fragment),mlo=l(),Lre=a("p"),glo=o("Register a new feature extractor for this class."),cPe=l(),td=a("h2"),Jh=a("a"),xre=a("span"),f(b6.$$.fragment),hlo=l(),kre=a("span"),plo=o("AutoProcessor"),fPe=l(),Uo=a("div"),f(v6.$$.fragment),_lo=l(),F6=a("p"),ulo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),WB=a("a"),blo=o("AutoProcessor.from_pretrained()"),vlo=o(" class method."),Flo=l(),T6=a("p"),Tlo=o("This class cannot be instantiated directly using "),Sre=a("code"),Mlo=o("__init__()"),Elo=o(" (throws an error)."),Clo=l(),qe=a("div"),f(M6.$$.fragment),wlo=l(),Rre=a("p"),Alo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ylo=l(),ad=a("p"),Llo=o("The processor class to instantiate is selected based on the "),Bre=a("code"),xlo=o("model_type"),klo=o(` property of the config object (either
passed as an argument or loaded from `),Pre=a("code"),Slo=o("pretrained_model_name_or_path"),Rlo=o(" if possible):"),Blo=l(),de=a("ul"),Yh=a("li"),$re=a("strong"),Plo=o("clip"),$lo=o(" \u2014 "),HB=a("a"),Ilo=o("CLIPProcessor"),qlo=o(" (CLIP model)"),Nlo=l(),Kh=a("li"),Ire=a("strong"),jlo=o("layoutlmv2"),Dlo=o(" \u2014 "),UB=a("a"),Glo=o("LayoutLMv2Processor"),Olo=o(" (LayoutLMv2 model)"),Vlo=l(),Zh=a("li"),qre=a("strong"),Xlo=o("layoutxlm"),zlo=o(" \u2014 "),JB=a("a"),Qlo=o("LayoutXLMProcessor"),Wlo=o(" (LayoutXLM model)"),Hlo=l(),ep=a("li"),Nre=a("strong"),Ulo=o("sew"),Jlo=o(" \u2014 "),YB=a("a"),Ylo=o("Wav2Vec2Processor"),Klo=o(" (SEW model)"),Zlo=l(),op=a("li"),jre=a("strong"),eio=o("sew-d"),oio=o(" \u2014 "),KB=a("a"),rio=o("Wav2Vec2Processor"),tio=o(" (SEW-D model)"),aio=l(),rp=a("li"),Dre=a("strong"),nio=o("speech_to_text"),sio=o(" \u2014 "),ZB=a("a"),lio=o("Speech2TextProcessor"),iio=o(" (Speech2Text model)"),dio=l(),tp=a("li"),Gre=a("strong"),cio=o("speech_to_text_2"),fio=o(" \u2014 "),eP=a("a"),mio=o("Speech2Text2Processor"),gio=o(" (Speech2Text2 model)"),hio=l(),ap=a("li"),Ore=a("strong"),pio=o("trocr"),_io=o(" \u2014 "),oP=a("a"),uio=o("TrOCRProcessor"),bio=o(" (TrOCR model)"),vio=l(),np=a("li"),Vre=a("strong"),Fio=o("unispeech"),Tio=o(" \u2014 "),rP=a("a"),Mio=o("Wav2Vec2Processor"),Eio=o(" (UniSpeech model)"),Cio=l(),sp=a("li"),Xre=a("strong"),wio=o("unispeech-sat"),Aio=o(" \u2014 "),tP=a("a"),yio=o("Wav2Vec2Processor"),Lio=o(" (UniSpeechSat model)"),xio=l(),lp=a("li"),zre=a("strong"),kio=o("vilt"),Sio=o(" \u2014 "),aP=a("a"),Rio=o("ViltProcessor"),Bio=o(" (ViLT model)"),Pio=l(),ip=a("li"),Qre=a("strong"),$io=o("vision-text-dual-encoder"),Iio=o(" \u2014 "),nP=a("a"),qio=o("VisionTextDualEncoderProcessor"),Nio=o(" (VisionTextDualEncoder model)"),jio=l(),dp=a("li"),Wre=a("strong"),Dio=o("wav2vec2"),Gio=o(" \u2014 "),sP=a("a"),Oio=o("Wav2Vec2Processor"),Vio=o(" (Wav2Vec2 model)"),Xio=l(),cp=a("li"),Hre=a("strong"),zio=o("wavlm"),Qio=o(" \u2014 "),lP=a("a"),Wio=o("Wav2Vec2Processor"),Hio=o(" (WavLM model)"),Uio=l(),f(fp.$$.fragment),Jio=l(),Ure=a("p"),Yio=o("Examples:"),Kio=l(),f(E6.$$.fragment),Zio=l(),mp=a("div"),f(C6.$$.fragment),edo=l(),Jre=a("p"),odo=o("Register a new processor for this class."),mPe=l(),nd=a("h2"),gp=a("a"),Yre=a("span"),f(w6.$$.fragment),rdo=l(),Kre=a("span"),tdo=o("AutoModel"),gPe=l(),Jo=a("div"),f(A6.$$.fragment),ado=l(),sd=a("p"),ndo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),iP=a("a"),sdo=o("from_pretrained()"),ldo=o(" class method or the "),dP=a("a"),ido=o("from_config()"),ddo=o(` class
method.`),cdo=l(),y6=a("p"),fdo=o("This class cannot be instantiated directly using "),Zre=a("code"),mdo=o("__init__()"),gdo=o(" (throws an error)."),hdo=l(),Xr=a("div"),f(L6.$$.fragment),pdo=l(),ete=a("p"),_do=o("Instantiates one of the base model classes of the library from a configuration."),udo=l(),ld=a("p"),bdo=o(`Note:
Loading a model from its configuration file does `),ote=a("strong"),vdo=o("not"),Fdo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cP=a("a"),Tdo=o("from_pretrained()"),Mdo=o(" to load the model weights."),Edo=l(),rte=a("p"),Cdo=o("Examples:"),wdo=l(),f(x6.$$.fragment),Ado=l(),Ne=a("div"),f(k6.$$.fragment),ydo=l(),tte=a("p"),Ldo=o("Instantiate one of the base model classes of the library from a pretrained model."),xdo=l(),Xa=a("p"),kdo=o("The model class to instantiate is selected based on the "),ate=a("code"),Sdo=o("model_type"),Rdo=o(` property of the config object (either
passed as an argument or loaded from `),nte=a("code"),Bdo=o("pretrained_model_name_or_path"),Pdo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ste=a("code"),$do=o("pretrained_model_name_or_path"),Ido=o(":"),qdo=l(),T=a("ul"),hp=a("li"),lte=a("strong"),Ndo=o("albert"),jdo=o(" \u2014 "),fP=a("a"),Ddo=o("AlbertModel"),Gdo=o(" (ALBERT model)"),Odo=l(),pp=a("li"),ite=a("strong"),Vdo=o("bart"),Xdo=o(" \u2014 "),mP=a("a"),zdo=o("BartModel"),Qdo=o(" (BART model)"),Wdo=l(),_p=a("li"),dte=a("strong"),Hdo=o("beit"),Udo=o(" \u2014 "),gP=a("a"),Jdo=o("BeitModel"),Ydo=o(" (BEiT model)"),Kdo=l(),up=a("li"),cte=a("strong"),Zdo=o("bert"),eco=o(" \u2014 "),hP=a("a"),oco=o("BertModel"),rco=o(" (BERT model)"),tco=l(),bp=a("li"),fte=a("strong"),aco=o("bert-generation"),nco=o(" \u2014 "),pP=a("a"),sco=o("BertGenerationEncoder"),lco=o(" (Bert Generation model)"),ico=l(),vp=a("li"),mte=a("strong"),dco=o("big_bird"),cco=o(" \u2014 "),_P=a("a"),fco=o("BigBirdModel"),mco=o(" (BigBird model)"),gco=l(),Fp=a("li"),gte=a("strong"),hco=o("bigbird_pegasus"),pco=o(" \u2014 "),uP=a("a"),_co=o("BigBirdPegasusModel"),uco=o(" (BigBirdPegasus model)"),bco=l(),Tp=a("li"),hte=a("strong"),vco=o("blenderbot"),Fco=o(" \u2014 "),bP=a("a"),Tco=o("BlenderbotModel"),Mco=o(" (Blenderbot model)"),Eco=l(),Mp=a("li"),pte=a("strong"),Cco=o("blenderbot-small"),wco=o(" \u2014 "),vP=a("a"),Aco=o("BlenderbotSmallModel"),yco=o(" (BlenderbotSmall model)"),Lco=l(),Ep=a("li"),_te=a("strong"),xco=o("camembert"),kco=o(" \u2014 "),FP=a("a"),Sco=o("CamembertModel"),Rco=o(" (CamemBERT model)"),Bco=l(),Cp=a("li"),ute=a("strong"),Pco=o("canine"),$co=o(" \u2014 "),TP=a("a"),Ico=o("CanineModel"),qco=o(" (Canine model)"),Nco=l(),wp=a("li"),bte=a("strong"),jco=o("clip"),Dco=o(" \u2014 "),MP=a("a"),Gco=o("CLIPModel"),Oco=o(" (CLIP model)"),Vco=l(),Ap=a("li"),vte=a("strong"),Xco=o("convbert"),zco=o(" \u2014 "),EP=a("a"),Qco=o("ConvBertModel"),Wco=o(" (ConvBERT model)"),Hco=l(),yp=a("li"),Fte=a("strong"),Uco=o("convnext"),Jco=o(" \u2014 "),CP=a("a"),Yco=o("ConvNextModel"),Kco=o(" (ConvNext model)"),Zco=l(),Lp=a("li"),Tte=a("strong"),efo=o("ctrl"),ofo=o(" \u2014 "),wP=a("a"),rfo=o("CTRLModel"),tfo=o(" (CTRL model)"),afo=l(),xp=a("li"),Mte=a("strong"),nfo=o("data2vec-audio"),sfo=o(" \u2014 "),AP=a("a"),lfo=o("Data2VecAudioModel"),ifo=o(" (Data2VecAudio model)"),dfo=l(),kp=a("li"),Ete=a("strong"),cfo=o("data2vec-text"),ffo=o(" \u2014 "),yP=a("a"),mfo=o("Data2VecTextModel"),gfo=o(" (Data2VecText model)"),hfo=l(),Sp=a("li"),Cte=a("strong"),pfo=o("data2vec-vision"),_fo=o(" \u2014 "),LP=a("a"),ufo=o("Data2VecVisionModel"),bfo=o(" (Data2VecVision model)"),vfo=l(),Rp=a("li"),wte=a("strong"),Ffo=o("deberta"),Tfo=o(" \u2014 "),xP=a("a"),Mfo=o("DebertaModel"),Efo=o(" (DeBERTa model)"),Cfo=l(),Bp=a("li"),Ate=a("strong"),wfo=o("deberta-v2"),Afo=o(" \u2014 "),kP=a("a"),yfo=o("DebertaV2Model"),Lfo=o(" (DeBERTa-v2 model)"),xfo=l(),Pp=a("li"),yte=a("strong"),kfo=o("decision_transformer"),Sfo=o(" \u2014 "),SP=a("a"),Rfo=o("DecisionTransformerModel"),Bfo=o(" (Decision Transformer model)"),Pfo=l(),$p=a("li"),Lte=a("strong"),$fo=o("deit"),Ifo=o(" \u2014 "),RP=a("a"),qfo=o("DeiTModel"),Nfo=o(" (DeiT model)"),jfo=l(),Ip=a("li"),xte=a("strong"),Dfo=o("detr"),Gfo=o(" \u2014 "),BP=a("a"),Ofo=o("DetrModel"),Vfo=o(" (DETR model)"),Xfo=l(),qp=a("li"),kte=a("strong"),zfo=o("distilbert"),Qfo=o(" \u2014 "),PP=a("a"),Wfo=o("DistilBertModel"),Hfo=o(" (DistilBERT model)"),Ufo=l(),Np=a("li"),Ste=a("strong"),Jfo=o("dpr"),Yfo=o(" \u2014 "),$P=a("a"),Kfo=o("DPRQuestionEncoder"),Zfo=o(" (DPR model)"),emo=l(),jp=a("li"),Rte=a("strong"),omo=o("dpt"),rmo=o(" \u2014 "),IP=a("a"),tmo=o("DPTModel"),amo=o(" (DPT model)"),nmo=l(),Dp=a("li"),Bte=a("strong"),smo=o("electra"),lmo=o(" \u2014 "),qP=a("a"),imo=o("ElectraModel"),dmo=o(" (ELECTRA model)"),cmo=l(),Gp=a("li"),Pte=a("strong"),fmo=o("flaubert"),mmo=o(" \u2014 "),NP=a("a"),gmo=o("FlaubertModel"),hmo=o(" (FlauBERT model)"),pmo=l(),Op=a("li"),$te=a("strong"),_mo=o("fnet"),umo=o(" \u2014 "),jP=a("a"),bmo=o("FNetModel"),vmo=o(" (FNet model)"),Fmo=l(),Vp=a("li"),Ite=a("strong"),Tmo=o("fsmt"),Mmo=o(" \u2014 "),DP=a("a"),Emo=o("FSMTModel"),Cmo=o(" (FairSeq Machine-Translation model)"),wmo=l(),Hs=a("li"),qte=a("strong"),Amo=o("funnel"),ymo=o(" \u2014 "),GP=a("a"),Lmo=o("FunnelModel"),xmo=o(" or "),OP=a("a"),kmo=o("FunnelBaseModel"),Smo=o(" (Funnel Transformer model)"),Rmo=l(),Xp=a("li"),Nte=a("strong"),Bmo=o("glpn"),Pmo=o(" \u2014 "),VP=a("a"),$mo=o("GLPNModel"),Imo=o(" (GLPN model)"),qmo=l(),zp=a("li"),jte=a("strong"),Nmo=o("gpt2"),jmo=o(" \u2014 "),XP=a("a"),Dmo=o("GPT2Model"),Gmo=o(" (OpenAI GPT-2 model)"),Omo=l(),Qp=a("li"),Dte=a("strong"),Vmo=o("gpt_neo"),Xmo=o(" \u2014 "),zP=a("a"),zmo=o("GPTNeoModel"),Qmo=o(" (GPT Neo model)"),Wmo=l(),Wp=a("li"),Gte=a("strong"),Hmo=o("gptj"),Umo=o(" \u2014 "),QP=a("a"),Jmo=o("GPTJModel"),Ymo=o(" (GPT-J model)"),Kmo=l(),Hp=a("li"),Ote=a("strong"),Zmo=o("hubert"),ego=o(" \u2014 "),WP=a("a"),ogo=o("HubertModel"),rgo=o(" (Hubert model)"),tgo=l(),Up=a("li"),Vte=a("strong"),ago=o("ibert"),ngo=o(" \u2014 "),HP=a("a"),sgo=o("IBertModel"),lgo=o(" (I-BERT model)"),igo=l(),Jp=a("li"),Xte=a("strong"),dgo=o("imagegpt"),cgo=o(" \u2014 "),UP=a("a"),fgo=o("ImageGPTModel"),mgo=o(" (ImageGPT model)"),ggo=l(),Yp=a("li"),zte=a("strong"),hgo=o("layoutlm"),pgo=o(" \u2014 "),JP=a("a"),_go=o("LayoutLMModel"),ugo=o(" (LayoutLM model)"),bgo=l(),Kp=a("li"),Qte=a("strong"),vgo=o("layoutlmv2"),Fgo=o(" \u2014 "),YP=a("a"),Tgo=o("LayoutLMv2Model"),Mgo=o(" (LayoutLMv2 model)"),Ego=l(),Zp=a("li"),Wte=a("strong"),Cgo=o("led"),wgo=o(" \u2014 "),KP=a("a"),Ago=o("LEDModel"),ygo=o(" (LED model)"),Lgo=l(),e_=a("li"),Hte=a("strong"),xgo=o("longformer"),kgo=o(" \u2014 "),ZP=a("a"),Sgo=o("LongformerModel"),Rgo=o(" (Longformer model)"),Bgo=l(),o_=a("li"),Ute=a("strong"),Pgo=o("luke"),$go=o(" \u2014 "),e$=a("a"),Igo=o("LukeModel"),qgo=o(" (LUKE model)"),Ngo=l(),r_=a("li"),Jte=a("strong"),jgo=o("lxmert"),Dgo=o(" \u2014 "),o$=a("a"),Ggo=o("LxmertModel"),Ogo=o(" (LXMERT model)"),Vgo=l(),t_=a("li"),Yte=a("strong"),Xgo=o("m2m_100"),zgo=o(" \u2014 "),r$=a("a"),Qgo=o("M2M100Model"),Wgo=o(" (M2M100 model)"),Hgo=l(),a_=a("li"),Kte=a("strong"),Ugo=o("marian"),Jgo=o(" \u2014 "),t$=a("a"),Ygo=o("MarianModel"),Kgo=o(" (Marian model)"),Zgo=l(),n_=a("li"),Zte=a("strong"),eho=o("maskformer"),oho=o(" \u2014 "),a$=a("a"),rho=o("MaskFormerModel"),tho=o(" (MaskFormer model)"),aho=l(),s_=a("li"),eae=a("strong"),nho=o("mbart"),sho=o(" \u2014 "),n$=a("a"),lho=o("MBartModel"),iho=o(" (mBART model)"),dho=l(),l_=a("li"),oae=a("strong"),cho=o("megatron-bert"),fho=o(" \u2014 "),s$=a("a"),mho=o("MegatronBertModel"),gho=o(" (MegatronBert model)"),hho=l(),i_=a("li"),rae=a("strong"),pho=o("mobilebert"),_ho=o(" \u2014 "),l$=a("a"),uho=o("MobileBertModel"),bho=o(" (MobileBERT model)"),vho=l(),d_=a("li"),tae=a("strong"),Fho=o("mpnet"),Tho=o(" \u2014 "),i$=a("a"),Mho=o("MPNetModel"),Eho=o(" (MPNet model)"),Cho=l(),c_=a("li"),aae=a("strong"),who=o("mt5"),Aho=o(" \u2014 "),d$=a("a"),yho=o("MT5Model"),Lho=o(" (mT5 model)"),xho=l(),f_=a("li"),nae=a("strong"),kho=o("nystromformer"),Sho=o(" \u2014 "),c$=a("a"),Rho=o("NystromformerModel"),Bho=o(" (Nystromformer model)"),Pho=l(),m_=a("li"),sae=a("strong"),$ho=o("openai-gpt"),Iho=o(" \u2014 "),f$=a("a"),qho=o("OpenAIGPTModel"),Nho=o(" (OpenAI GPT model)"),jho=l(),g_=a("li"),lae=a("strong"),Dho=o("pegasus"),Gho=o(" \u2014 "),m$=a("a"),Oho=o("PegasusModel"),Vho=o(" (Pegasus model)"),Xho=l(),h_=a("li"),iae=a("strong"),zho=o("perceiver"),Qho=o(" \u2014 "),g$=a("a"),Who=o("PerceiverModel"),Hho=o(" (Perceiver model)"),Uho=l(),p_=a("li"),dae=a("strong"),Jho=o("plbart"),Yho=o(" \u2014 "),h$=a("a"),Kho=o("PLBartModel"),Zho=o(" (PLBart model)"),epo=l(),__=a("li"),cae=a("strong"),opo=o("poolformer"),rpo=o(" \u2014 "),p$=a("a"),tpo=o("PoolFormerModel"),apo=o(" (PoolFormer model)"),npo=l(),u_=a("li"),fae=a("strong"),spo=o("prophetnet"),lpo=o(" \u2014 "),_$=a("a"),ipo=o("ProphetNetModel"),dpo=o(" (ProphetNet model)"),cpo=l(),b_=a("li"),mae=a("strong"),fpo=o("qdqbert"),mpo=o(" \u2014 "),u$=a("a"),gpo=o("QDQBertModel"),hpo=o(" (QDQBert model)"),ppo=l(),v_=a("li"),gae=a("strong"),_po=o("reformer"),upo=o(" \u2014 "),b$=a("a"),bpo=o("ReformerModel"),vpo=o(" (Reformer model)"),Fpo=l(),F_=a("li"),hae=a("strong"),Tpo=o("regnet"),Mpo=o(" \u2014 "),v$=a("a"),Epo=o("RegNetModel"),Cpo=o(" (RegNet model)"),wpo=l(),T_=a("li"),pae=a("strong"),Apo=o("rembert"),ypo=o(" \u2014 "),F$=a("a"),Lpo=o("RemBertModel"),xpo=o(" (RemBERT model)"),kpo=l(),M_=a("li"),_ae=a("strong"),Spo=o("resnet"),Rpo=o(" \u2014 "),T$=a("a"),Bpo=o("ResNetModel"),Ppo=o(" (ResNet model)"),$po=l(),E_=a("li"),uae=a("strong"),Ipo=o("retribert"),qpo=o(" \u2014 "),M$=a("a"),Npo=o("RetriBertModel"),jpo=o(" (RetriBERT model)"),Dpo=l(),C_=a("li"),bae=a("strong"),Gpo=o("roberta"),Opo=o(" \u2014 "),E$=a("a"),Vpo=o("RobertaModel"),Xpo=o(" (RoBERTa model)"),zpo=l(),w_=a("li"),vae=a("strong"),Qpo=o("roformer"),Wpo=o(" \u2014 "),C$=a("a"),Hpo=o("RoFormerModel"),Upo=o(" (RoFormer model)"),Jpo=l(),A_=a("li"),Fae=a("strong"),Ypo=o("segformer"),Kpo=o(" \u2014 "),w$=a("a"),Zpo=o("SegformerModel"),e_o=o(" (SegFormer model)"),o_o=l(),y_=a("li"),Tae=a("strong"),r_o=o("sew"),t_o=o(" \u2014 "),A$=a("a"),a_o=o("SEWModel"),n_o=o(" (SEW model)"),s_o=l(),L_=a("li"),Mae=a("strong"),l_o=o("sew-d"),i_o=o(" \u2014 "),y$=a("a"),d_o=o("SEWDModel"),c_o=o(" (SEW-D model)"),f_o=l(),x_=a("li"),Eae=a("strong"),m_o=o("speech_to_text"),g_o=o(" \u2014 "),L$=a("a"),h_o=o("Speech2TextModel"),p_o=o(" (Speech2Text model)"),__o=l(),k_=a("li"),Cae=a("strong"),u_o=o("splinter"),b_o=o(" \u2014 "),x$=a("a"),v_o=o("SplinterModel"),F_o=o(" (Splinter model)"),T_o=l(),S_=a("li"),wae=a("strong"),M_o=o("squeezebert"),E_o=o(" \u2014 "),k$=a("a"),C_o=o("SqueezeBertModel"),w_o=o(" (SqueezeBERT model)"),A_o=l(),R_=a("li"),Aae=a("strong"),y_o=o("swin"),L_o=o(" \u2014 "),S$=a("a"),x_o=o("SwinModel"),k_o=o(" (Swin model)"),S_o=l(),B_=a("li"),yae=a("strong"),R_o=o("t5"),B_o=o(" \u2014 "),R$=a("a"),P_o=o("T5Model"),$_o=o(" (T5 model)"),I_o=l(),P_=a("li"),Lae=a("strong"),q_o=o("tapas"),N_o=o(" \u2014 "),B$=a("a"),j_o=o("TapasModel"),D_o=o(" (TAPAS model)"),G_o=l(),$_=a("li"),xae=a("strong"),O_o=o("transfo-xl"),V_o=o(" \u2014 "),P$=a("a"),X_o=o("TransfoXLModel"),z_o=o(" (Transformer-XL model)"),Q_o=l(),I_=a("li"),kae=a("strong"),W_o=o("unispeech"),H_o=o(" \u2014 "),$$=a("a"),U_o=o("UniSpeechModel"),J_o=o(" (UniSpeech model)"),Y_o=l(),q_=a("li"),Sae=a("strong"),K_o=o("unispeech-sat"),Z_o=o(" \u2014 "),I$=a("a"),euo=o("UniSpeechSatModel"),ouo=o(" (UniSpeechSat model)"),ruo=l(),N_=a("li"),Rae=a("strong"),tuo=o("van"),auo=o(" \u2014 "),q$=a("a"),nuo=o("VanModel"),suo=o(" (VAN model)"),luo=l(),j_=a("li"),Bae=a("strong"),iuo=o("vilt"),duo=o(" \u2014 "),N$=a("a"),cuo=o("ViltModel"),fuo=o(" (ViLT model)"),muo=l(),D_=a("li"),Pae=a("strong"),guo=o("vision-text-dual-encoder"),huo=o(" \u2014 "),j$=a("a"),puo=o("VisionTextDualEncoderModel"),_uo=o(" (VisionTextDualEncoder model)"),uuo=l(),G_=a("li"),$ae=a("strong"),buo=o("visual_bert"),vuo=o(" \u2014 "),D$=a("a"),Fuo=o("VisualBertModel"),Tuo=o(" (VisualBert model)"),Muo=l(),O_=a("li"),Iae=a("strong"),Euo=o("vit"),Cuo=o(" \u2014 "),G$=a("a"),wuo=o("ViTModel"),Auo=o(" (ViT model)"),yuo=l(),V_=a("li"),qae=a("strong"),Luo=o("vit_mae"),xuo=o(" \u2014 "),O$=a("a"),kuo=o("ViTMAEModel"),Suo=o(" (ViTMAE model)"),Ruo=l(),X_=a("li"),Nae=a("strong"),Buo=o("wav2vec2"),Puo=o(" \u2014 "),V$=a("a"),$uo=o("Wav2Vec2Model"),Iuo=o(" (Wav2Vec2 model)"),quo=l(),z_=a("li"),jae=a("strong"),Nuo=o("wavlm"),juo=o(" \u2014 "),X$=a("a"),Duo=o("WavLMModel"),Guo=o(" (WavLM model)"),Ouo=l(),Q_=a("li"),Dae=a("strong"),Vuo=o("xglm"),Xuo=o(" \u2014 "),z$=a("a"),zuo=o("XGLMModel"),Quo=o(" (XGLM model)"),Wuo=l(),W_=a("li"),Gae=a("strong"),Huo=o("xlm"),Uuo=o(" \u2014 "),Q$=a("a"),Juo=o("XLMModel"),Yuo=o(" (XLM model)"),Kuo=l(),H_=a("li"),Oae=a("strong"),Zuo=o("xlm-prophetnet"),e5o=o(" \u2014 "),W$=a("a"),o5o=o("XLMProphetNetModel"),r5o=o(" (XLMProphetNet model)"),t5o=l(),U_=a("li"),Vae=a("strong"),a5o=o("xlm-roberta"),n5o=o(" \u2014 "),H$=a("a"),s5o=o("XLMRobertaModel"),l5o=o(" (XLM-RoBERTa model)"),i5o=l(),J_=a("li"),Xae=a("strong"),d5o=o("xlm-roberta-xl"),c5o=o(" \u2014 "),U$=a("a"),f5o=o("XLMRobertaXLModel"),m5o=o(" (XLM-RoBERTa-XL model)"),g5o=l(),Y_=a("li"),zae=a("strong"),h5o=o("xlnet"),p5o=o(" \u2014 "),J$=a("a"),_5o=o("XLNetModel"),u5o=o(" (XLNet model)"),b5o=l(),K_=a("li"),Qae=a("strong"),v5o=o("yoso"),F5o=o(" \u2014 "),Y$=a("a"),T5o=o("YosoModel"),M5o=o(" (YOSO model)"),E5o=l(),Z_=a("p"),C5o=o("The model is set in evaluation mode by default using "),Wae=a("code"),w5o=o("model.eval()"),A5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hae=a("code"),y5o=o("model.train()"),L5o=l(),Uae=a("p"),x5o=o("Examples:"),k5o=l(),f(S6.$$.fragment),hPe=l(),id=a("h2"),eu=a("a"),Jae=a("span"),f(R6.$$.fragment),S5o=l(),Yae=a("span"),R5o=o("AutoModelForPreTraining"),pPe=l(),Yo=a("div"),f(B6.$$.fragment),B5o=l(),dd=a("p"),P5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),K$=a("a"),$5o=o("from_pretrained()"),I5o=o(" class method or the "),Z$=a("a"),q5o=o("from_config()"),N5o=o(` class
method.`),j5o=l(),P6=a("p"),D5o=o("This class cannot be instantiated directly using "),Kae=a("code"),G5o=o("__init__()"),O5o=o(" (throws an error)."),V5o=l(),zr=a("div"),f($6.$$.fragment),X5o=l(),Zae=a("p"),z5o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Q5o=l(),cd=a("p"),W5o=o(`Note:
Loading a model from its configuration file does `),ene=a("strong"),H5o=o("not"),U5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eI=a("a"),J5o=o("from_pretrained()"),Y5o=o(" to load the model weights."),K5o=l(),one=a("p"),Z5o=o("Examples:"),e1o=l(),f(I6.$$.fragment),o1o=l(),je=a("div"),f(q6.$$.fragment),r1o=l(),rne=a("p"),t1o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),a1o=l(),za=a("p"),n1o=o("The model class to instantiate is selected based on the "),tne=a("code"),s1o=o("model_type"),l1o=o(` property of the config object (either
passed as an argument or loaded from `),ane=a("code"),i1o=o("pretrained_model_name_or_path"),d1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nne=a("code"),c1o=o("pretrained_model_name_or_path"),f1o=o(":"),m1o=l(),S=a("ul"),ou=a("li"),sne=a("strong"),g1o=o("albert"),h1o=o(" \u2014 "),oI=a("a"),p1o=o("AlbertForPreTraining"),_1o=o(" (ALBERT model)"),u1o=l(),ru=a("li"),lne=a("strong"),b1o=o("bart"),v1o=o(" \u2014 "),rI=a("a"),F1o=o("BartForConditionalGeneration"),T1o=o(" (BART model)"),M1o=l(),tu=a("li"),ine=a("strong"),E1o=o("bert"),C1o=o(" \u2014 "),tI=a("a"),w1o=o("BertForPreTraining"),A1o=o(" (BERT model)"),y1o=l(),au=a("li"),dne=a("strong"),L1o=o("big_bird"),x1o=o(" \u2014 "),aI=a("a"),k1o=o("BigBirdForPreTraining"),S1o=o(" (BigBird model)"),R1o=l(),nu=a("li"),cne=a("strong"),B1o=o("camembert"),P1o=o(" \u2014 "),nI=a("a"),$1o=o("CamembertForMaskedLM"),I1o=o(" (CamemBERT model)"),q1o=l(),su=a("li"),fne=a("strong"),N1o=o("ctrl"),j1o=o(" \u2014 "),sI=a("a"),D1o=o("CTRLLMHeadModel"),G1o=o(" (CTRL model)"),O1o=l(),lu=a("li"),mne=a("strong"),V1o=o("data2vec-text"),X1o=o(" \u2014 "),lI=a("a"),z1o=o("Data2VecTextForMaskedLM"),Q1o=o(" (Data2VecText model)"),W1o=l(),iu=a("li"),gne=a("strong"),H1o=o("deberta"),U1o=o(" \u2014 "),iI=a("a"),J1o=o("DebertaForMaskedLM"),Y1o=o(" (DeBERTa model)"),K1o=l(),du=a("li"),hne=a("strong"),Z1o=o("deberta-v2"),e4o=o(" \u2014 "),dI=a("a"),o4o=o("DebertaV2ForMaskedLM"),r4o=o(" (DeBERTa-v2 model)"),t4o=l(),cu=a("li"),pne=a("strong"),a4o=o("distilbert"),n4o=o(" \u2014 "),cI=a("a"),s4o=o("DistilBertForMaskedLM"),l4o=o(" (DistilBERT model)"),i4o=l(),fu=a("li"),_ne=a("strong"),d4o=o("electra"),c4o=o(" \u2014 "),fI=a("a"),f4o=o("ElectraForPreTraining"),m4o=o(" (ELECTRA model)"),g4o=l(),mu=a("li"),une=a("strong"),h4o=o("flaubert"),p4o=o(" \u2014 "),mI=a("a"),_4o=o("FlaubertWithLMHeadModel"),u4o=o(" (FlauBERT model)"),b4o=l(),gu=a("li"),bne=a("strong"),v4o=o("fnet"),F4o=o(" \u2014 "),gI=a("a"),T4o=o("FNetForPreTraining"),M4o=o(" (FNet model)"),E4o=l(),hu=a("li"),vne=a("strong"),C4o=o("fsmt"),w4o=o(" \u2014 "),hI=a("a"),A4o=o("FSMTForConditionalGeneration"),y4o=o(" (FairSeq Machine-Translation model)"),L4o=l(),pu=a("li"),Fne=a("strong"),x4o=o("funnel"),k4o=o(" \u2014 "),pI=a("a"),S4o=o("FunnelForPreTraining"),R4o=o(" (Funnel Transformer model)"),B4o=l(),_u=a("li"),Tne=a("strong"),P4o=o("gpt2"),$4o=o(" \u2014 "),_I=a("a"),I4o=o("GPT2LMHeadModel"),q4o=o(" (OpenAI GPT-2 model)"),N4o=l(),uu=a("li"),Mne=a("strong"),j4o=o("ibert"),D4o=o(" \u2014 "),uI=a("a"),G4o=o("IBertForMaskedLM"),O4o=o(" (I-BERT model)"),V4o=l(),bu=a("li"),Ene=a("strong"),X4o=o("layoutlm"),z4o=o(" \u2014 "),bI=a("a"),Q4o=o("LayoutLMForMaskedLM"),W4o=o(" (LayoutLM model)"),H4o=l(),vu=a("li"),Cne=a("strong"),U4o=o("longformer"),J4o=o(" \u2014 "),vI=a("a"),Y4o=o("LongformerForMaskedLM"),K4o=o(" (Longformer model)"),Z4o=l(),Fu=a("li"),wne=a("strong"),ebo=o("lxmert"),obo=o(" \u2014 "),FI=a("a"),rbo=o("LxmertForPreTraining"),tbo=o(" (LXMERT model)"),abo=l(),Tu=a("li"),Ane=a("strong"),nbo=o("megatron-bert"),sbo=o(" \u2014 "),TI=a("a"),lbo=o("MegatronBertForPreTraining"),ibo=o(" (MegatronBert model)"),dbo=l(),Mu=a("li"),yne=a("strong"),cbo=o("mobilebert"),fbo=o(" \u2014 "),MI=a("a"),mbo=o("MobileBertForPreTraining"),gbo=o(" (MobileBERT model)"),hbo=l(),Eu=a("li"),Lne=a("strong"),pbo=o("mpnet"),_bo=o(" \u2014 "),EI=a("a"),ubo=o("MPNetForMaskedLM"),bbo=o(" (MPNet model)"),vbo=l(),Cu=a("li"),xne=a("strong"),Fbo=o("openai-gpt"),Tbo=o(" \u2014 "),CI=a("a"),Mbo=o("OpenAIGPTLMHeadModel"),Ebo=o(" (OpenAI GPT model)"),Cbo=l(),wu=a("li"),kne=a("strong"),wbo=o("retribert"),Abo=o(" \u2014 "),wI=a("a"),ybo=o("RetriBertModel"),Lbo=o(" (RetriBERT model)"),xbo=l(),Au=a("li"),Sne=a("strong"),kbo=o("roberta"),Sbo=o(" \u2014 "),AI=a("a"),Rbo=o("RobertaForMaskedLM"),Bbo=o(" (RoBERTa model)"),Pbo=l(),yu=a("li"),Rne=a("strong"),$bo=o("squeezebert"),Ibo=o(" \u2014 "),yI=a("a"),qbo=o("SqueezeBertForMaskedLM"),Nbo=o(" (SqueezeBERT model)"),jbo=l(),Lu=a("li"),Bne=a("strong"),Dbo=o("t5"),Gbo=o(" \u2014 "),LI=a("a"),Obo=o("T5ForConditionalGeneration"),Vbo=o(" (T5 model)"),Xbo=l(),xu=a("li"),Pne=a("strong"),zbo=o("tapas"),Qbo=o(" \u2014 "),xI=a("a"),Wbo=o("TapasForMaskedLM"),Hbo=o(" (TAPAS model)"),Ubo=l(),ku=a("li"),$ne=a("strong"),Jbo=o("transfo-xl"),Ybo=o(" \u2014 "),kI=a("a"),Kbo=o("TransfoXLLMHeadModel"),Zbo=o(" (Transformer-XL model)"),e2o=l(),Su=a("li"),Ine=a("strong"),o2o=o("unispeech"),r2o=o(" \u2014 "),SI=a("a"),t2o=o("UniSpeechForPreTraining"),a2o=o(" (UniSpeech model)"),n2o=l(),Ru=a("li"),qne=a("strong"),s2o=o("unispeech-sat"),l2o=o(" \u2014 "),RI=a("a"),i2o=o("UniSpeechSatForPreTraining"),d2o=o(" (UniSpeechSat model)"),c2o=l(),Bu=a("li"),Nne=a("strong"),f2o=o("visual_bert"),m2o=o(" \u2014 "),BI=a("a"),g2o=o("VisualBertForPreTraining"),h2o=o(" (VisualBert model)"),p2o=l(),Pu=a("li"),jne=a("strong"),_2o=o("vit_mae"),u2o=o(" \u2014 "),PI=a("a"),b2o=o("ViTMAEForPreTraining"),v2o=o(" (ViTMAE model)"),F2o=l(),$u=a("li"),Dne=a("strong"),T2o=o("wav2vec2"),M2o=o(" \u2014 "),$I=a("a"),E2o=o("Wav2Vec2ForPreTraining"),C2o=o(" (Wav2Vec2 model)"),w2o=l(),Iu=a("li"),Gne=a("strong"),A2o=o("xlm"),y2o=o(" \u2014 "),II=a("a"),L2o=o("XLMWithLMHeadModel"),x2o=o(" (XLM model)"),k2o=l(),qu=a("li"),One=a("strong"),S2o=o("xlm-roberta"),R2o=o(" \u2014 "),qI=a("a"),B2o=o("XLMRobertaForMaskedLM"),P2o=o(" (XLM-RoBERTa model)"),$2o=l(),Nu=a("li"),Vne=a("strong"),I2o=o("xlm-roberta-xl"),q2o=o(" \u2014 "),NI=a("a"),N2o=o("XLMRobertaXLForMaskedLM"),j2o=o(" (XLM-RoBERTa-XL model)"),D2o=l(),ju=a("li"),Xne=a("strong"),G2o=o("xlnet"),O2o=o(" \u2014 "),jI=a("a"),V2o=o("XLNetLMHeadModel"),X2o=o(" (XLNet model)"),z2o=l(),Du=a("p"),Q2o=o("The model is set in evaluation mode by default using "),zne=a("code"),W2o=o("model.eval()"),H2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qne=a("code"),U2o=o("model.train()"),J2o=l(),Wne=a("p"),Y2o=o("Examples:"),K2o=l(),f(N6.$$.fragment),_Pe=l(),fd=a("h2"),Gu=a("a"),Hne=a("span"),f(j6.$$.fragment),Z2o=l(),Une=a("span"),evo=o("AutoModelForCausalLM"),uPe=l(),Ko=a("div"),f(D6.$$.fragment),ovo=l(),md=a("p"),rvo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),DI=a("a"),tvo=o("from_pretrained()"),avo=o(" class method or the "),GI=a("a"),nvo=o("from_config()"),svo=o(` class
method.`),lvo=l(),G6=a("p"),ivo=o("This class cannot be instantiated directly using "),Jne=a("code"),dvo=o("__init__()"),cvo=o(" (throws an error)."),fvo=l(),Qr=a("div"),f(O6.$$.fragment),mvo=l(),Yne=a("p"),gvo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),hvo=l(),gd=a("p"),pvo=o(`Note:
Loading a model from its configuration file does `),Kne=a("strong"),_vo=o("not"),uvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OI=a("a"),bvo=o("from_pretrained()"),vvo=o(" to load the model weights."),Fvo=l(),Zne=a("p"),Tvo=o("Examples:"),Mvo=l(),f(V6.$$.fragment),Evo=l(),De=a("div"),f(X6.$$.fragment),Cvo=l(),ese=a("p"),wvo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Avo=l(),Qa=a("p"),yvo=o("The model class to instantiate is selected based on the "),ose=a("code"),Lvo=o("model_type"),xvo=o(` property of the config object (either
passed as an argument or loaded from `),rse=a("code"),kvo=o("pretrained_model_name_or_path"),Svo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tse=a("code"),Rvo=o("pretrained_model_name_or_path"),Bvo=o(":"),Pvo=l(),$=a("ul"),Ou=a("li"),ase=a("strong"),$vo=o("bart"),Ivo=o(" \u2014 "),VI=a("a"),qvo=o("BartForCausalLM"),Nvo=o(" (BART model)"),jvo=l(),Vu=a("li"),nse=a("strong"),Dvo=o("bert"),Gvo=o(" \u2014 "),XI=a("a"),Ovo=o("BertLMHeadModel"),Vvo=o(" (BERT model)"),Xvo=l(),Xu=a("li"),sse=a("strong"),zvo=o("bert-generation"),Qvo=o(" \u2014 "),zI=a("a"),Wvo=o("BertGenerationDecoder"),Hvo=o(" (Bert Generation model)"),Uvo=l(),zu=a("li"),lse=a("strong"),Jvo=o("big_bird"),Yvo=o(" \u2014 "),QI=a("a"),Kvo=o("BigBirdForCausalLM"),Zvo=o(" (BigBird model)"),eFo=l(),Qu=a("li"),ise=a("strong"),oFo=o("bigbird_pegasus"),rFo=o(" \u2014 "),WI=a("a"),tFo=o("BigBirdPegasusForCausalLM"),aFo=o(" (BigBirdPegasus model)"),nFo=l(),Wu=a("li"),dse=a("strong"),sFo=o("blenderbot"),lFo=o(" \u2014 "),HI=a("a"),iFo=o("BlenderbotForCausalLM"),dFo=o(" (Blenderbot model)"),cFo=l(),Hu=a("li"),cse=a("strong"),fFo=o("blenderbot-small"),mFo=o(" \u2014 "),UI=a("a"),gFo=o("BlenderbotSmallForCausalLM"),hFo=o(" (BlenderbotSmall model)"),pFo=l(),Uu=a("li"),fse=a("strong"),_Fo=o("camembert"),uFo=o(" \u2014 "),JI=a("a"),bFo=o("CamembertForCausalLM"),vFo=o(" (CamemBERT model)"),FFo=l(),Ju=a("li"),mse=a("strong"),TFo=o("ctrl"),MFo=o(" \u2014 "),YI=a("a"),EFo=o("CTRLLMHeadModel"),CFo=o(" (CTRL model)"),wFo=l(),Yu=a("li"),gse=a("strong"),AFo=o("data2vec-text"),yFo=o(" \u2014 "),KI=a("a"),LFo=o("Data2VecTextForCausalLM"),xFo=o(" (Data2VecText model)"),kFo=l(),Ku=a("li"),hse=a("strong"),SFo=o("electra"),RFo=o(" \u2014 "),ZI=a("a"),BFo=o("ElectraForCausalLM"),PFo=o(" (ELECTRA model)"),$Fo=l(),Zu=a("li"),pse=a("strong"),IFo=o("gpt2"),qFo=o(" \u2014 "),eq=a("a"),NFo=o("GPT2LMHeadModel"),jFo=o(" (OpenAI GPT-2 model)"),DFo=l(),e5=a("li"),_se=a("strong"),GFo=o("gpt_neo"),OFo=o(" \u2014 "),oq=a("a"),VFo=o("GPTNeoForCausalLM"),XFo=o(" (GPT Neo model)"),zFo=l(),o5=a("li"),use=a("strong"),QFo=o("gptj"),WFo=o(" \u2014 "),rq=a("a"),HFo=o("GPTJForCausalLM"),UFo=o(" (GPT-J model)"),JFo=l(),r5=a("li"),bse=a("strong"),YFo=o("marian"),KFo=o(" \u2014 "),tq=a("a"),ZFo=o("MarianForCausalLM"),eTo=o(" (Marian model)"),oTo=l(),t5=a("li"),vse=a("strong"),rTo=o("mbart"),tTo=o(" \u2014 "),aq=a("a"),aTo=o("MBartForCausalLM"),nTo=o(" (mBART model)"),sTo=l(),a5=a("li"),Fse=a("strong"),lTo=o("megatron-bert"),iTo=o(" \u2014 "),nq=a("a"),dTo=o("MegatronBertForCausalLM"),cTo=o(" (MegatronBert model)"),fTo=l(),n5=a("li"),Tse=a("strong"),mTo=o("openai-gpt"),gTo=o(" \u2014 "),sq=a("a"),hTo=o("OpenAIGPTLMHeadModel"),pTo=o(" (OpenAI GPT model)"),_To=l(),s5=a("li"),Mse=a("strong"),uTo=o("pegasus"),bTo=o(" \u2014 "),lq=a("a"),vTo=o("PegasusForCausalLM"),FTo=o(" (Pegasus model)"),TTo=l(),l5=a("li"),Ese=a("strong"),MTo=o("plbart"),ETo=o(" \u2014 "),iq=a("a"),CTo=o("PLBartForCausalLM"),wTo=o(" (PLBart model)"),ATo=l(),i5=a("li"),Cse=a("strong"),yTo=o("prophetnet"),LTo=o(" \u2014 "),dq=a("a"),xTo=o("ProphetNetForCausalLM"),kTo=o(" (ProphetNet model)"),STo=l(),d5=a("li"),wse=a("strong"),RTo=o("qdqbert"),BTo=o(" \u2014 "),cq=a("a"),PTo=o("QDQBertLMHeadModel"),$To=o(" (QDQBert model)"),ITo=l(),c5=a("li"),Ase=a("strong"),qTo=o("reformer"),NTo=o(" \u2014 "),fq=a("a"),jTo=o("ReformerModelWithLMHead"),DTo=o(" (Reformer model)"),GTo=l(),f5=a("li"),yse=a("strong"),OTo=o("rembert"),VTo=o(" \u2014 "),mq=a("a"),XTo=o("RemBertForCausalLM"),zTo=o(" (RemBERT model)"),QTo=l(),m5=a("li"),Lse=a("strong"),WTo=o("roberta"),HTo=o(" \u2014 "),gq=a("a"),UTo=o("RobertaForCausalLM"),JTo=o(" (RoBERTa model)"),YTo=l(),g5=a("li"),xse=a("strong"),KTo=o("roformer"),ZTo=o(" \u2014 "),hq=a("a"),e7o=o("RoFormerForCausalLM"),o7o=o(" (RoFormer model)"),r7o=l(),h5=a("li"),kse=a("strong"),t7o=o("speech_to_text_2"),a7o=o(" \u2014 "),pq=a("a"),n7o=o("Speech2Text2ForCausalLM"),s7o=o(" (Speech2Text2 model)"),l7o=l(),p5=a("li"),Sse=a("strong"),i7o=o("transfo-xl"),d7o=o(" \u2014 "),_q=a("a"),c7o=o("TransfoXLLMHeadModel"),f7o=o(" (Transformer-XL model)"),m7o=l(),_5=a("li"),Rse=a("strong"),g7o=o("trocr"),h7o=o(" \u2014 "),uq=a("a"),p7o=o("TrOCRForCausalLM"),_7o=o(" (TrOCR model)"),u7o=l(),u5=a("li"),Bse=a("strong"),b7o=o("xglm"),v7o=o(" \u2014 "),bq=a("a"),F7o=o("XGLMForCausalLM"),T7o=o(" (XGLM model)"),M7o=l(),b5=a("li"),Pse=a("strong"),E7o=o("xlm"),C7o=o(" \u2014 "),vq=a("a"),w7o=o("XLMWithLMHeadModel"),A7o=o(" (XLM model)"),y7o=l(),v5=a("li"),$se=a("strong"),L7o=o("xlm-prophetnet"),x7o=o(" \u2014 "),Fq=a("a"),k7o=o("XLMProphetNetForCausalLM"),S7o=o(" (XLMProphetNet model)"),R7o=l(),F5=a("li"),Ise=a("strong"),B7o=o("xlm-roberta"),P7o=o(" \u2014 "),Tq=a("a"),$7o=o("XLMRobertaForCausalLM"),I7o=o(" (XLM-RoBERTa model)"),q7o=l(),T5=a("li"),qse=a("strong"),N7o=o("xlm-roberta-xl"),j7o=o(" \u2014 "),Mq=a("a"),D7o=o("XLMRobertaXLForCausalLM"),G7o=o(" (XLM-RoBERTa-XL model)"),O7o=l(),M5=a("li"),Nse=a("strong"),V7o=o("xlnet"),X7o=o(" \u2014 "),Eq=a("a"),z7o=o("XLNetLMHeadModel"),Q7o=o(" (XLNet model)"),W7o=l(),E5=a("p"),H7o=o("The model is set in evaluation mode by default using "),jse=a("code"),U7o=o("model.eval()"),J7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dse=a("code"),Y7o=o("model.train()"),K7o=l(),Gse=a("p"),Z7o=o("Examples:"),eMo=l(),f(z6.$$.fragment),bPe=l(),hd=a("h2"),C5=a("a"),Ose=a("span"),f(Q6.$$.fragment),oMo=l(),Vse=a("span"),rMo=o("AutoModelForMaskedLM"),vPe=l(),Zo=a("div"),f(W6.$$.fragment),tMo=l(),pd=a("p"),aMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Cq=a("a"),nMo=o("from_pretrained()"),sMo=o(" class method or the "),wq=a("a"),lMo=o("from_config()"),iMo=o(` class
method.`),dMo=l(),H6=a("p"),cMo=o("This class cannot be instantiated directly using "),Xse=a("code"),fMo=o("__init__()"),mMo=o(" (throws an error)."),gMo=l(),Wr=a("div"),f(U6.$$.fragment),hMo=l(),zse=a("p"),pMo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Mo=l(),_d=a("p"),uMo=o(`Note:
Loading a model from its configuration file does `),Qse=a("strong"),bMo=o("not"),vMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aq=a("a"),FMo=o("from_pretrained()"),TMo=o(" to load the model weights."),MMo=l(),Wse=a("p"),EMo=o("Examples:"),CMo=l(),f(J6.$$.fragment),wMo=l(),Ge=a("div"),f(Y6.$$.fragment),AMo=l(),Hse=a("p"),yMo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),LMo=l(),Wa=a("p"),xMo=o("The model class to instantiate is selected based on the "),Use=a("code"),kMo=o("model_type"),SMo=o(` property of the config object (either
passed as an argument or loaded from `),Jse=a("code"),RMo=o("pretrained_model_name_or_path"),BMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yse=a("code"),PMo=o("pretrained_model_name_or_path"),$Mo=o(":"),IMo=l(),I=a("ul"),w5=a("li"),Kse=a("strong"),qMo=o("albert"),NMo=o(" \u2014 "),yq=a("a"),jMo=o("AlbertForMaskedLM"),DMo=o(" (ALBERT model)"),GMo=l(),A5=a("li"),Zse=a("strong"),OMo=o("bart"),VMo=o(" \u2014 "),Lq=a("a"),XMo=o("BartForConditionalGeneration"),zMo=o(" (BART model)"),QMo=l(),y5=a("li"),ele=a("strong"),WMo=o("bert"),HMo=o(" \u2014 "),xq=a("a"),UMo=o("BertForMaskedLM"),JMo=o(" (BERT model)"),YMo=l(),L5=a("li"),ole=a("strong"),KMo=o("big_bird"),ZMo=o(" \u2014 "),kq=a("a"),eEo=o("BigBirdForMaskedLM"),oEo=o(" (BigBird model)"),rEo=l(),x5=a("li"),rle=a("strong"),tEo=o("camembert"),aEo=o(" \u2014 "),Sq=a("a"),nEo=o("CamembertForMaskedLM"),sEo=o(" (CamemBERT model)"),lEo=l(),k5=a("li"),tle=a("strong"),iEo=o("convbert"),dEo=o(" \u2014 "),Rq=a("a"),cEo=o("ConvBertForMaskedLM"),fEo=o(" (ConvBERT model)"),mEo=l(),S5=a("li"),ale=a("strong"),gEo=o("data2vec-text"),hEo=o(" \u2014 "),Bq=a("a"),pEo=o("Data2VecTextForMaskedLM"),_Eo=o(" (Data2VecText model)"),uEo=l(),R5=a("li"),nle=a("strong"),bEo=o("deberta"),vEo=o(" \u2014 "),Pq=a("a"),FEo=o("DebertaForMaskedLM"),TEo=o(" (DeBERTa model)"),MEo=l(),B5=a("li"),sle=a("strong"),EEo=o("deberta-v2"),CEo=o(" \u2014 "),$q=a("a"),wEo=o("DebertaV2ForMaskedLM"),AEo=o(" (DeBERTa-v2 model)"),yEo=l(),P5=a("li"),lle=a("strong"),LEo=o("distilbert"),xEo=o(" \u2014 "),Iq=a("a"),kEo=o("DistilBertForMaskedLM"),SEo=o(" (DistilBERT model)"),REo=l(),$5=a("li"),ile=a("strong"),BEo=o("electra"),PEo=o(" \u2014 "),qq=a("a"),$Eo=o("ElectraForMaskedLM"),IEo=o(" (ELECTRA model)"),qEo=l(),I5=a("li"),dle=a("strong"),NEo=o("flaubert"),jEo=o(" \u2014 "),Nq=a("a"),DEo=o("FlaubertWithLMHeadModel"),GEo=o(" (FlauBERT model)"),OEo=l(),q5=a("li"),cle=a("strong"),VEo=o("fnet"),XEo=o(" \u2014 "),jq=a("a"),zEo=o("FNetForMaskedLM"),QEo=o(" (FNet model)"),WEo=l(),N5=a("li"),fle=a("strong"),HEo=o("funnel"),UEo=o(" \u2014 "),Dq=a("a"),JEo=o("FunnelForMaskedLM"),YEo=o(" (Funnel Transformer model)"),KEo=l(),j5=a("li"),mle=a("strong"),ZEo=o("ibert"),e3o=o(" \u2014 "),Gq=a("a"),o3o=o("IBertForMaskedLM"),r3o=o(" (I-BERT model)"),t3o=l(),D5=a("li"),gle=a("strong"),a3o=o("layoutlm"),n3o=o(" \u2014 "),Oq=a("a"),s3o=o("LayoutLMForMaskedLM"),l3o=o(" (LayoutLM model)"),i3o=l(),G5=a("li"),hle=a("strong"),d3o=o("longformer"),c3o=o(" \u2014 "),Vq=a("a"),f3o=o("LongformerForMaskedLM"),m3o=o(" (Longformer model)"),g3o=l(),O5=a("li"),ple=a("strong"),h3o=o("mbart"),p3o=o(" \u2014 "),Xq=a("a"),_3o=o("MBartForConditionalGeneration"),u3o=o(" (mBART model)"),b3o=l(),V5=a("li"),_le=a("strong"),v3o=o("megatron-bert"),F3o=o(" \u2014 "),zq=a("a"),T3o=o("MegatronBertForMaskedLM"),M3o=o(" (MegatronBert model)"),E3o=l(),X5=a("li"),ule=a("strong"),C3o=o("mobilebert"),w3o=o(" \u2014 "),Qq=a("a"),A3o=o("MobileBertForMaskedLM"),y3o=o(" (MobileBERT model)"),L3o=l(),z5=a("li"),ble=a("strong"),x3o=o("mpnet"),k3o=o(" \u2014 "),Wq=a("a"),S3o=o("MPNetForMaskedLM"),R3o=o(" (MPNet model)"),B3o=l(),Q5=a("li"),vle=a("strong"),P3o=o("nystromformer"),$3o=o(" \u2014 "),Hq=a("a"),I3o=o("NystromformerForMaskedLM"),q3o=o(" (Nystromformer model)"),N3o=l(),W5=a("li"),Fle=a("strong"),j3o=o("perceiver"),D3o=o(" \u2014 "),Uq=a("a"),G3o=o("PerceiverForMaskedLM"),O3o=o(" (Perceiver model)"),V3o=l(),H5=a("li"),Tle=a("strong"),X3o=o("qdqbert"),z3o=o(" \u2014 "),Jq=a("a"),Q3o=o("QDQBertForMaskedLM"),W3o=o(" (QDQBert model)"),H3o=l(),U5=a("li"),Mle=a("strong"),U3o=o("reformer"),J3o=o(" \u2014 "),Yq=a("a"),Y3o=o("ReformerForMaskedLM"),K3o=o(" (Reformer model)"),Z3o=l(),J5=a("li"),Ele=a("strong"),eCo=o("rembert"),oCo=o(" \u2014 "),Kq=a("a"),rCo=o("RemBertForMaskedLM"),tCo=o(" (RemBERT model)"),aCo=l(),Y5=a("li"),Cle=a("strong"),nCo=o("roberta"),sCo=o(" \u2014 "),Zq=a("a"),lCo=o("RobertaForMaskedLM"),iCo=o(" (RoBERTa model)"),dCo=l(),K5=a("li"),wle=a("strong"),cCo=o("roformer"),fCo=o(" \u2014 "),eN=a("a"),mCo=o("RoFormerForMaskedLM"),gCo=o(" (RoFormer model)"),hCo=l(),Z5=a("li"),Ale=a("strong"),pCo=o("squeezebert"),_Co=o(" \u2014 "),oN=a("a"),uCo=o("SqueezeBertForMaskedLM"),bCo=o(" (SqueezeBERT model)"),vCo=l(),e1=a("li"),yle=a("strong"),FCo=o("tapas"),TCo=o(" \u2014 "),rN=a("a"),MCo=o("TapasForMaskedLM"),ECo=o(" (TAPAS model)"),CCo=l(),o1=a("li"),Lle=a("strong"),wCo=o("wav2vec2"),ACo=o(" \u2014 "),xle=a("code"),yCo=o("Wav2Vec2ForMaskedLM"),LCo=o(" (Wav2Vec2 model)"),xCo=l(),r1=a("li"),kle=a("strong"),kCo=o("xlm"),SCo=o(" \u2014 "),tN=a("a"),RCo=o("XLMWithLMHeadModel"),BCo=o(" (XLM model)"),PCo=l(),t1=a("li"),Sle=a("strong"),$Co=o("xlm-roberta"),ICo=o(" \u2014 "),aN=a("a"),qCo=o("XLMRobertaForMaskedLM"),NCo=o(" (XLM-RoBERTa model)"),jCo=l(),a1=a("li"),Rle=a("strong"),DCo=o("xlm-roberta-xl"),GCo=o(" \u2014 "),nN=a("a"),OCo=o("XLMRobertaXLForMaskedLM"),VCo=o(" (XLM-RoBERTa-XL model)"),XCo=l(),n1=a("li"),Ble=a("strong"),zCo=o("yoso"),QCo=o(" \u2014 "),sN=a("a"),WCo=o("YosoForMaskedLM"),HCo=o(" (YOSO model)"),UCo=l(),s1=a("p"),JCo=o("The model is set in evaluation mode by default using "),Ple=a("code"),YCo=o("model.eval()"),KCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$le=a("code"),ZCo=o("model.train()"),e6o=l(),Ile=a("p"),o6o=o("Examples:"),r6o=l(),f(K6.$$.fragment),FPe=l(),ud=a("h2"),l1=a("a"),qle=a("span"),f(Z6.$$.fragment),t6o=l(),Nle=a("span"),a6o=o("AutoModelForSeq2SeqLM"),TPe=l(),er=a("div"),f(ew.$$.fragment),n6o=l(),bd=a("p"),s6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lN=a("a"),l6o=o("from_pretrained()"),i6o=o(" class method or the "),iN=a("a"),d6o=o("from_config()"),c6o=o(` class
method.`),f6o=l(),ow=a("p"),m6o=o("This class cannot be instantiated directly using "),jle=a("code"),g6o=o("__init__()"),h6o=o(" (throws an error)."),p6o=l(),Hr=a("div"),f(rw.$$.fragment),_6o=l(),Dle=a("p"),u6o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),b6o=l(),vd=a("p"),v6o=o(`Note:
Loading a model from its configuration file does `),Gle=a("strong"),F6o=o("not"),T6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dN=a("a"),M6o=o("from_pretrained()"),E6o=o(" to load the model weights."),C6o=l(),Ole=a("p"),w6o=o("Examples:"),A6o=l(),f(tw.$$.fragment),y6o=l(),Oe=a("div"),f(aw.$$.fragment),L6o=l(),Vle=a("p"),x6o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),k6o=l(),Ha=a("p"),S6o=o("The model class to instantiate is selected based on the "),Xle=a("code"),R6o=o("model_type"),B6o=o(` property of the config object (either
passed as an argument or loaded from `),zle=a("code"),P6o=o("pretrained_model_name_or_path"),$6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qle=a("code"),I6o=o("pretrained_model_name_or_path"),q6o=o(":"),N6o=l(),ne=a("ul"),i1=a("li"),Wle=a("strong"),j6o=o("bart"),D6o=o(" \u2014 "),cN=a("a"),G6o=o("BartForConditionalGeneration"),O6o=o(" (BART model)"),V6o=l(),d1=a("li"),Hle=a("strong"),X6o=o("bigbird_pegasus"),z6o=o(" \u2014 "),fN=a("a"),Q6o=o("BigBirdPegasusForConditionalGeneration"),W6o=o(" (BigBirdPegasus model)"),H6o=l(),c1=a("li"),Ule=a("strong"),U6o=o("blenderbot"),J6o=o(" \u2014 "),mN=a("a"),Y6o=o("BlenderbotForConditionalGeneration"),K6o=o(" (Blenderbot model)"),Z6o=l(),f1=a("li"),Jle=a("strong"),ewo=o("blenderbot-small"),owo=o(" \u2014 "),gN=a("a"),rwo=o("BlenderbotSmallForConditionalGeneration"),two=o(" (BlenderbotSmall model)"),awo=l(),m1=a("li"),Yle=a("strong"),nwo=o("encoder-decoder"),swo=o(" \u2014 "),hN=a("a"),lwo=o("EncoderDecoderModel"),iwo=o(" (Encoder decoder model)"),dwo=l(),g1=a("li"),Kle=a("strong"),cwo=o("fsmt"),fwo=o(" \u2014 "),pN=a("a"),mwo=o("FSMTForConditionalGeneration"),gwo=o(" (FairSeq Machine-Translation model)"),hwo=l(),h1=a("li"),Zle=a("strong"),pwo=o("led"),_wo=o(" \u2014 "),_N=a("a"),uwo=o("LEDForConditionalGeneration"),bwo=o(" (LED model)"),vwo=l(),p1=a("li"),eie=a("strong"),Fwo=o("m2m_100"),Two=o(" \u2014 "),uN=a("a"),Mwo=o("M2M100ForConditionalGeneration"),Ewo=o(" (M2M100 model)"),Cwo=l(),_1=a("li"),oie=a("strong"),wwo=o("marian"),Awo=o(" \u2014 "),bN=a("a"),ywo=o("MarianMTModel"),Lwo=o(" (Marian model)"),xwo=l(),u1=a("li"),rie=a("strong"),kwo=o("mbart"),Swo=o(" \u2014 "),vN=a("a"),Rwo=o("MBartForConditionalGeneration"),Bwo=o(" (mBART model)"),Pwo=l(),b1=a("li"),tie=a("strong"),$wo=o("mt5"),Iwo=o(" \u2014 "),FN=a("a"),qwo=o("MT5ForConditionalGeneration"),Nwo=o(" (mT5 model)"),jwo=l(),v1=a("li"),aie=a("strong"),Dwo=o("pegasus"),Gwo=o(" \u2014 "),TN=a("a"),Owo=o("PegasusForConditionalGeneration"),Vwo=o(" (Pegasus model)"),Xwo=l(),F1=a("li"),nie=a("strong"),zwo=o("plbart"),Qwo=o(" \u2014 "),MN=a("a"),Wwo=o("PLBartForConditionalGeneration"),Hwo=o(" (PLBart model)"),Uwo=l(),T1=a("li"),sie=a("strong"),Jwo=o("prophetnet"),Ywo=o(" \u2014 "),EN=a("a"),Kwo=o("ProphetNetForConditionalGeneration"),Zwo=o(" (ProphetNet model)"),eAo=l(),M1=a("li"),lie=a("strong"),oAo=o("t5"),rAo=o(" \u2014 "),CN=a("a"),tAo=o("T5ForConditionalGeneration"),aAo=o(" (T5 model)"),nAo=l(),E1=a("li"),iie=a("strong"),sAo=o("tapex"),lAo=o(" \u2014 "),wN=a("a"),iAo=o("BartForConditionalGeneration"),dAo=o(" (TAPEX model)"),cAo=l(),C1=a("li"),die=a("strong"),fAo=o("xlm-prophetnet"),mAo=o(" \u2014 "),AN=a("a"),gAo=o("XLMProphetNetForConditionalGeneration"),hAo=o(" (XLMProphetNet model)"),pAo=l(),w1=a("p"),_Ao=o("The model is set in evaluation mode by default using "),cie=a("code"),uAo=o("model.eval()"),bAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fie=a("code"),vAo=o("model.train()"),FAo=l(),mie=a("p"),TAo=o("Examples:"),MAo=l(),f(nw.$$.fragment),MPe=l(),Fd=a("h2"),A1=a("a"),gie=a("span"),f(sw.$$.fragment),EAo=l(),hie=a("span"),CAo=o("AutoModelForSequenceClassification"),EPe=l(),or=a("div"),f(lw.$$.fragment),wAo=l(),Td=a("p"),AAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yN=a("a"),yAo=o("from_pretrained()"),LAo=o(" class method or the "),LN=a("a"),xAo=o("from_config()"),kAo=o(` class
method.`),SAo=l(),iw=a("p"),RAo=o("This class cannot be instantiated directly using "),pie=a("code"),BAo=o("__init__()"),PAo=o(" (throws an error)."),$Ao=l(),Ur=a("div"),f(dw.$$.fragment),IAo=l(),_ie=a("p"),qAo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),NAo=l(),Md=a("p"),jAo=o(`Note:
Loading a model from its configuration file does `),uie=a("strong"),DAo=o("not"),GAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xN=a("a"),OAo=o("from_pretrained()"),VAo=o(" to load the model weights."),XAo=l(),bie=a("p"),zAo=o("Examples:"),QAo=l(),f(cw.$$.fragment),WAo=l(),Ve=a("div"),f(fw.$$.fragment),HAo=l(),vie=a("p"),UAo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),JAo=l(),Ua=a("p"),YAo=o("The model class to instantiate is selected based on the "),Fie=a("code"),KAo=o("model_type"),ZAo=o(` property of the config object (either
passed as an argument or loaded from `),Tie=a("code"),e0o=o("pretrained_model_name_or_path"),o0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mie=a("code"),r0o=o("pretrained_model_name_or_path"),t0o=o(":"),a0o=l(),y=a("ul"),y1=a("li"),Eie=a("strong"),n0o=o("albert"),s0o=o(" \u2014 "),kN=a("a"),l0o=o("AlbertForSequenceClassification"),i0o=o(" (ALBERT model)"),d0o=l(),L1=a("li"),Cie=a("strong"),c0o=o("bart"),f0o=o(" \u2014 "),SN=a("a"),m0o=o("BartForSequenceClassification"),g0o=o(" (BART model)"),h0o=l(),x1=a("li"),wie=a("strong"),p0o=o("bert"),_0o=o(" \u2014 "),RN=a("a"),u0o=o("BertForSequenceClassification"),b0o=o(" (BERT model)"),v0o=l(),k1=a("li"),Aie=a("strong"),F0o=o("big_bird"),T0o=o(" \u2014 "),BN=a("a"),M0o=o("BigBirdForSequenceClassification"),E0o=o(" (BigBird model)"),C0o=l(),S1=a("li"),yie=a("strong"),w0o=o("bigbird_pegasus"),A0o=o(" \u2014 "),PN=a("a"),y0o=o("BigBirdPegasusForSequenceClassification"),L0o=o(" (BigBirdPegasus model)"),x0o=l(),R1=a("li"),Lie=a("strong"),k0o=o("camembert"),S0o=o(" \u2014 "),$N=a("a"),R0o=o("CamembertForSequenceClassification"),B0o=o(" (CamemBERT model)"),P0o=l(),B1=a("li"),xie=a("strong"),$0o=o("canine"),I0o=o(" \u2014 "),IN=a("a"),q0o=o("CanineForSequenceClassification"),N0o=o(" (Canine model)"),j0o=l(),P1=a("li"),kie=a("strong"),D0o=o("convbert"),G0o=o(" \u2014 "),qN=a("a"),O0o=o("ConvBertForSequenceClassification"),V0o=o(" (ConvBERT model)"),X0o=l(),$1=a("li"),Sie=a("strong"),z0o=o("ctrl"),Q0o=o(" \u2014 "),NN=a("a"),W0o=o("CTRLForSequenceClassification"),H0o=o(" (CTRL model)"),U0o=l(),I1=a("li"),Rie=a("strong"),J0o=o("data2vec-text"),Y0o=o(" \u2014 "),jN=a("a"),K0o=o("Data2VecTextForSequenceClassification"),Z0o=o(" (Data2VecText model)"),eyo=l(),q1=a("li"),Bie=a("strong"),oyo=o("deberta"),ryo=o(" \u2014 "),DN=a("a"),tyo=o("DebertaForSequenceClassification"),ayo=o(" (DeBERTa model)"),nyo=l(),N1=a("li"),Pie=a("strong"),syo=o("deberta-v2"),lyo=o(" \u2014 "),GN=a("a"),iyo=o("DebertaV2ForSequenceClassification"),dyo=o(" (DeBERTa-v2 model)"),cyo=l(),j1=a("li"),$ie=a("strong"),fyo=o("distilbert"),myo=o(" \u2014 "),ON=a("a"),gyo=o("DistilBertForSequenceClassification"),hyo=o(" (DistilBERT model)"),pyo=l(),D1=a("li"),Iie=a("strong"),_yo=o("electra"),uyo=o(" \u2014 "),VN=a("a"),byo=o("ElectraForSequenceClassification"),vyo=o(" (ELECTRA model)"),Fyo=l(),G1=a("li"),qie=a("strong"),Tyo=o("flaubert"),Myo=o(" \u2014 "),XN=a("a"),Eyo=o("FlaubertForSequenceClassification"),Cyo=o(" (FlauBERT model)"),wyo=l(),O1=a("li"),Nie=a("strong"),Ayo=o("fnet"),yyo=o(" \u2014 "),zN=a("a"),Lyo=o("FNetForSequenceClassification"),xyo=o(" (FNet model)"),kyo=l(),V1=a("li"),jie=a("strong"),Syo=o("funnel"),Ryo=o(" \u2014 "),QN=a("a"),Byo=o("FunnelForSequenceClassification"),Pyo=o(" (Funnel Transformer model)"),$yo=l(),X1=a("li"),Die=a("strong"),Iyo=o("gpt2"),qyo=o(" \u2014 "),WN=a("a"),Nyo=o("GPT2ForSequenceClassification"),jyo=o(" (OpenAI GPT-2 model)"),Dyo=l(),z1=a("li"),Gie=a("strong"),Gyo=o("gpt_neo"),Oyo=o(" \u2014 "),HN=a("a"),Vyo=o("GPTNeoForSequenceClassification"),Xyo=o(" (GPT Neo model)"),zyo=l(),Q1=a("li"),Oie=a("strong"),Qyo=o("gptj"),Wyo=o(" \u2014 "),UN=a("a"),Hyo=o("GPTJForSequenceClassification"),Uyo=o(" (GPT-J model)"),Jyo=l(),W1=a("li"),Vie=a("strong"),Yyo=o("ibert"),Kyo=o(" \u2014 "),JN=a("a"),Zyo=o("IBertForSequenceClassification"),e8o=o(" (I-BERT model)"),o8o=l(),H1=a("li"),Xie=a("strong"),r8o=o("layoutlm"),t8o=o(" \u2014 "),YN=a("a"),a8o=o("LayoutLMForSequenceClassification"),n8o=o(" (LayoutLM model)"),s8o=l(),U1=a("li"),zie=a("strong"),l8o=o("layoutlmv2"),i8o=o(" \u2014 "),KN=a("a"),d8o=o("LayoutLMv2ForSequenceClassification"),c8o=o(" (LayoutLMv2 model)"),f8o=l(),J1=a("li"),Qie=a("strong"),m8o=o("led"),g8o=o(" \u2014 "),ZN=a("a"),h8o=o("LEDForSequenceClassification"),p8o=o(" (LED model)"),_8o=l(),Y1=a("li"),Wie=a("strong"),u8o=o("longformer"),b8o=o(" \u2014 "),ej=a("a"),v8o=o("LongformerForSequenceClassification"),F8o=o(" (Longformer model)"),T8o=l(),K1=a("li"),Hie=a("strong"),M8o=o("mbart"),E8o=o(" \u2014 "),oj=a("a"),C8o=o("MBartForSequenceClassification"),w8o=o(" (mBART model)"),A8o=l(),Z1=a("li"),Uie=a("strong"),y8o=o("megatron-bert"),L8o=o(" \u2014 "),rj=a("a"),x8o=o("MegatronBertForSequenceClassification"),k8o=o(" (MegatronBert model)"),S8o=l(),e4=a("li"),Jie=a("strong"),R8o=o("mobilebert"),B8o=o(" \u2014 "),tj=a("a"),P8o=o("MobileBertForSequenceClassification"),$8o=o(" (MobileBERT model)"),I8o=l(),o4=a("li"),Yie=a("strong"),q8o=o("mpnet"),N8o=o(" \u2014 "),aj=a("a"),j8o=o("MPNetForSequenceClassification"),D8o=o(" (MPNet model)"),G8o=l(),r4=a("li"),Kie=a("strong"),O8o=o("nystromformer"),V8o=o(" \u2014 "),nj=a("a"),X8o=o("NystromformerForSequenceClassification"),z8o=o(" (Nystromformer model)"),Q8o=l(),t4=a("li"),Zie=a("strong"),W8o=o("openai-gpt"),H8o=o(" \u2014 "),sj=a("a"),U8o=o("OpenAIGPTForSequenceClassification"),J8o=o(" (OpenAI GPT model)"),Y8o=l(),a4=a("li"),ede=a("strong"),K8o=o("perceiver"),Z8o=o(" \u2014 "),lj=a("a"),eLo=o("PerceiverForSequenceClassification"),oLo=o(" (Perceiver model)"),rLo=l(),n4=a("li"),ode=a("strong"),tLo=o("plbart"),aLo=o(" \u2014 "),ij=a("a"),nLo=o("PLBartForSequenceClassification"),sLo=o(" (PLBart model)"),lLo=l(),s4=a("li"),rde=a("strong"),iLo=o("qdqbert"),dLo=o(" \u2014 "),dj=a("a"),cLo=o("QDQBertForSequenceClassification"),fLo=o(" (QDQBert model)"),mLo=l(),l4=a("li"),tde=a("strong"),gLo=o("reformer"),hLo=o(" \u2014 "),cj=a("a"),pLo=o("ReformerForSequenceClassification"),_Lo=o(" (Reformer model)"),uLo=l(),i4=a("li"),ade=a("strong"),bLo=o("rembert"),vLo=o(" \u2014 "),fj=a("a"),FLo=o("RemBertForSequenceClassification"),TLo=o(" (RemBERT model)"),MLo=l(),d4=a("li"),nde=a("strong"),ELo=o("roberta"),CLo=o(" \u2014 "),mj=a("a"),wLo=o("RobertaForSequenceClassification"),ALo=o(" (RoBERTa model)"),yLo=l(),c4=a("li"),sde=a("strong"),LLo=o("roformer"),xLo=o(" \u2014 "),gj=a("a"),kLo=o("RoFormerForSequenceClassification"),SLo=o(" (RoFormer model)"),RLo=l(),f4=a("li"),lde=a("strong"),BLo=o("squeezebert"),PLo=o(" \u2014 "),hj=a("a"),$Lo=o("SqueezeBertForSequenceClassification"),ILo=o(" (SqueezeBERT model)"),qLo=l(),m4=a("li"),ide=a("strong"),NLo=o("tapas"),jLo=o(" \u2014 "),pj=a("a"),DLo=o("TapasForSequenceClassification"),GLo=o(" (TAPAS model)"),OLo=l(),g4=a("li"),dde=a("strong"),VLo=o("tapex"),XLo=o(" \u2014 "),_j=a("a"),zLo=o("BartForSequenceClassification"),QLo=o(" (TAPEX model)"),WLo=l(),h4=a("li"),cde=a("strong"),HLo=o("transfo-xl"),ULo=o(" \u2014 "),uj=a("a"),JLo=o("TransfoXLForSequenceClassification"),YLo=o(" (Transformer-XL model)"),KLo=l(),p4=a("li"),fde=a("strong"),ZLo=o("xlm"),e9o=o(" \u2014 "),bj=a("a"),o9o=o("XLMForSequenceClassification"),r9o=o(" (XLM model)"),t9o=l(),_4=a("li"),mde=a("strong"),a9o=o("xlm-roberta"),n9o=o(" \u2014 "),vj=a("a"),s9o=o("XLMRobertaForSequenceClassification"),l9o=o(" (XLM-RoBERTa model)"),i9o=l(),u4=a("li"),gde=a("strong"),d9o=o("xlm-roberta-xl"),c9o=o(" \u2014 "),Fj=a("a"),f9o=o("XLMRobertaXLForSequenceClassification"),m9o=o(" (XLM-RoBERTa-XL model)"),g9o=l(),b4=a("li"),hde=a("strong"),h9o=o("xlnet"),p9o=o(" \u2014 "),Tj=a("a"),_9o=o("XLNetForSequenceClassification"),u9o=o(" (XLNet model)"),b9o=l(),v4=a("li"),pde=a("strong"),v9o=o("yoso"),F9o=o(" \u2014 "),Mj=a("a"),T9o=o("YosoForSequenceClassification"),M9o=o(" (YOSO model)"),E9o=l(),F4=a("p"),C9o=o("The model is set in evaluation mode by default using "),_de=a("code"),w9o=o("model.eval()"),A9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ude=a("code"),y9o=o("model.train()"),L9o=l(),bde=a("p"),x9o=o("Examples:"),k9o=l(),f(mw.$$.fragment),CPe=l(),Ed=a("h2"),T4=a("a"),vde=a("span"),f(gw.$$.fragment),S9o=l(),Fde=a("span"),R9o=o("AutoModelForMultipleChoice"),wPe=l(),rr=a("div"),f(hw.$$.fragment),B9o=l(),Cd=a("p"),P9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Ej=a("a"),$9o=o("from_pretrained()"),I9o=o(" class method or the "),Cj=a("a"),q9o=o("from_config()"),N9o=o(` class
method.`),j9o=l(),pw=a("p"),D9o=o("This class cannot be instantiated directly using "),Tde=a("code"),G9o=o("__init__()"),O9o=o(" (throws an error)."),V9o=l(),Jr=a("div"),f(_w.$$.fragment),X9o=l(),Mde=a("p"),z9o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Q9o=l(),wd=a("p"),W9o=o(`Note:
Loading a model from its configuration file does `),Ede=a("strong"),H9o=o("not"),U9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wj=a("a"),J9o=o("from_pretrained()"),Y9o=o(" to load the model weights."),K9o=l(),Cde=a("p"),Z9o=o("Examples:"),exo=l(),f(uw.$$.fragment),oxo=l(),Xe=a("div"),f(bw.$$.fragment),rxo=l(),wde=a("p"),txo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),axo=l(),Ja=a("p"),nxo=o("The model class to instantiate is selected based on the "),Ade=a("code"),sxo=o("model_type"),lxo=o(` property of the config object (either
passed as an argument or loaded from `),yde=a("code"),ixo=o("pretrained_model_name_or_path"),dxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lde=a("code"),cxo=o("pretrained_model_name_or_path"),fxo=o(":"),mxo=l(),G=a("ul"),M4=a("li"),xde=a("strong"),gxo=o("albert"),hxo=o(" \u2014 "),Aj=a("a"),pxo=o("AlbertForMultipleChoice"),_xo=o(" (ALBERT model)"),uxo=l(),E4=a("li"),kde=a("strong"),bxo=o("bert"),vxo=o(" \u2014 "),yj=a("a"),Fxo=o("BertForMultipleChoice"),Txo=o(" (BERT model)"),Mxo=l(),C4=a("li"),Sde=a("strong"),Exo=o("big_bird"),Cxo=o(" \u2014 "),Lj=a("a"),wxo=o("BigBirdForMultipleChoice"),Axo=o(" (BigBird model)"),yxo=l(),w4=a("li"),Rde=a("strong"),Lxo=o("camembert"),xxo=o(" \u2014 "),xj=a("a"),kxo=o("CamembertForMultipleChoice"),Sxo=o(" (CamemBERT model)"),Rxo=l(),A4=a("li"),Bde=a("strong"),Bxo=o("canine"),Pxo=o(" \u2014 "),kj=a("a"),$xo=o("CanineForMultipleChoice"),Ixo=o(" (Canine model)"),qxo=l(),y4=a("li"),Pde=a("strong"),Nxo=o("convbert"),jxo=o(" \u2014 "),Sj=a("a"),Dxo=o("ConvBertForMultipleChoice"),Gxo=o(" (ConvBERT model)"),Oxo=l(),L4=a("li"),$de=a("strong"),Vxo=o("data2vec-text"),Xxo=o(" \u2014 "),Rj=a("a"),zxo=o("Data2VecTextForMultipleChoice"),Qxo=o(" (Data2VecText model)"),Wxo=l(),x4=a("li"),Ide=a("strong"),Hxo=o("distilbert"),Uxo=o(" \u2014 "),Bj=a("a"),Jxo=o("DistilBertForMultipleChoice"),Yxo=o(" (DistilBERT model)"),Kxo=l(),k4=a("li"),qde=a("strong"),Zxo=o("electra"),eko=o(" \u2014 "),Pj=a("a"),oko=o("ElectraForMultipleChoice"),rko=o(" (ELECTRA model)"),tko=l(),S4=a("li"),Nde=a("strong"),ako=o("flaubert"),nko=o(" \u2014 "),$j=a("a"),sko=o("FlaubertForMultipleChoice"),lko=o(" (FlauBERT model)"),iko=l(),R4=a("li"),jde=a("strong"),dko=o("fnet"),cko=o(" \u2014 "),Ij=a("a"),fko=o("FNetForMultipleChoice"),mko=o(" (FNet model)"),gko=l(),B4=a("li"),Dde=a("strong"),hko=o("funnel"),pko=o(" \u2014 "),qj=a("a"),_ko=o("FunnelForMultipleChoice"),uko=o(" (Funnel Transformer model)"),bko=l(),P4=a("li"),Gde=a("strong"),vko=o("ibert"),Fko=o(" \u2014 "),Nj=a("a"),Tko=o("IBertForMultipleChoice"),Mko=o(" (I-BERT model)"),Eko=l(),$4=a("li"),Ode=a("strong"),Cko=o("longformer"),wko=o(" \u2014 "),jj=a("a"),Ako=o("LongformerForMultipleChoice"),yko=o(" (Longformer model)"),Lko=l(),I4=a("li"),Vde=a("strong"),xko=o("megatron-bert"),kko=o(" \u2014 "),Dj=a("a"),Sko=o("MegatronBertForMultipleChoice"),Rko=o(" (MegatronBert model)"),Bko=l(),q4=a("li"),Xde=a("strong"),Pko=o("mobilebert"),$ko=o(" \u2014 "),Gj=a("a"),Iko=o("MobileBertForMultipleChoice"),qko=o(" (MobileBERT model)"),Nko=l(),N4=a("li"),zde=a("strong"),jko=o("mpnet"),Dko=o(" \u2014 "),Oj=a("a"),Gko=o("MPNetForMultipleChoice"),Oko=o(" (MPNet model)"),Vko=l(),j4=a("li"),Qde=a("strong"),Xko=o("nystromformer"),zko=o(" \u2014 "),Vj=a("a"),Qko=o("NystromformerForMultipleChoice"),Wko=o(" (Nystromformer model)"),Hko=l(),D4=a("li"),Wde=a("strong"),Uko=o("qdqbert"),Jko=o(" \u2014 "),Xj=a("a"),Yko=o("QDQBertForMultipleChoice"),Kko=o(" (QDQBert model)"),Zko=l(),G4=a("li"),Hde=a("strong"),eSo=o("rembert"),oSo=o(" \u2014 "),zj=a("a"),rSo=o("RemBertForMultipleChoice"),tSo=o(" (RemBERT model)"),aSo=l(),O4=a("li"),Ude=a("strong"),nSo=o("roberta"),sSo=o(" \u2014 "),Qj=a("a"),lSo=o("RobertaForMultipleChoice"),iSo=o(" (RoBERTa model)"),dSo=l(),V4=a("li"),Jde=a("strong"),cSo=o("roformer"),fSo=o(" \u2014 "),Wj=a("a"),mSo=o("RoFormerForMultipleChoice"),gSo=o(" (RoFormer model)"),hSo=l(),X4=a("li"),Yde=a("strong"),pSo=o("squeezebert"),_So=o(" \u2014 "),Hj=a("a"),uSo=o("SqueezeBertForMultipleChoice"),bSo=o(" (SqueezeBERT model)"),vSo=l(),z4=a("li"),Kde=a("strong"),FSo=o("xlm"),TSo=o(" \u2014 "),Uj=a("a"),MSo=o("XLMForMultipleChoice"),ESo=o(" (XLM model)"),CSo=l(),Q4=a("li"),Zde=a("strong"),wSo=o("xlm-roberta"),ASo=o(" \u2014 "),Jj=a("a"),ySo=o("XLMRobertaForMultipleChoice"),LSo=o(" (XLM-RoBERTa model)"),xSo=l(),W4=a("li"),ece=a("strong"),kSo=o("xlm-roberta-xl"),SSo=o(" \u2014 "),Yj=a("a"),RSo=o("XLMRobertaXLForMultipleChoice"),BSo=o(" (XLM-RoBERTa-XL model)"),PSo=l(),H4=a("li"),oce=a("strong"),$So=o("xlnet"),ISo=o(" \u2014 "),Kj=a("a"),qSo=o("XLNetForMultipleChoice"),NSo=o(" (XLNet model)"),jSo=l(),U4=a("li"),rce=a("strong"),DSo=o("yoso"),GSo=o(" \u2014 "),Zj=a("a"),OSo=o("YosoForMultipleChoice"),VSo=o(" (YOSO model)"),XSo=l(),J4=a("p"),zSo=o("The model is set in evaluation mode by default using "),tce=a("code"),QSo=o("model.eval()"),WSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ace=a("code"),HSo=o("model.train()"),USo=l(),nce=a("p"),JSo=o("Examples:"),YSo=l(),f(vw.$$.fragment),APe=l(),Ad=a("h2"),Y4=a("a"),sce=a("span"),f(Fw.$$.fragment),KSo=l(),lce=a("span"),ZSo=o("AutoModelForNextSentencePrediction"),yPe=l(),tr=a("div"),f(Tw.$$.fragment),eRo=l(),yd=a("p"),oRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eD=a("a"),rRo=o("from_pretrained()"),tRo=o(" class method or the "),oD=a("a"),aRo=o("from_config()"),nRo=o(` class
method.`),sRo=l(),Mw=a("p"),lRo=o("This class cannot be instantiated directly using "),ice=a("code"),iRo=o("__init__()"),dRo=o(" (throws an error)."),cRo=l(),Yr=a("div"),f(Ew.$$.fragment),fRo=l(),dce=a("p"),mRo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),gRo=l(),Ld=a("p"),hRo=o(`Note:
Loading a model from its configuration file does `),cce=a("strong"),pRo=o("not"),_Ro=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rD=a("a"),uRo=o("from_pretrained()"),bRo=o(" to load the model weights."),vRo=l(),fce=a("p"),FRo=o("Examples:"),TRo=l(),f(Cw.$$.fragment),MRo=l(),ze=a("div"),f(ww.$$.fragment),ERo=l(),mce=a("p"),CRo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),wRo=l(),Ya=a("p"),ARo=o("The model class to instantiate is selected based on the "),gce=a("code"),yRo=o("model_type"),LRo=o(` property of the config object (either
passed as an argument or loaded from `),hce=a("code"),xRo=o("pretrained_model_name_or_path"),kRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pce=a("code"),SRo=o("pretrained_model_name_or_path"),RRo=o(":"),BRo=l(),da=a("ul"),K4=a("li"),_ce=a("strong"),PRo=o("bert"),$Ro=o(" \u2014 "),tD=a("a"),IRo=o("BertForNextSentencePrediction"),qRo=o(" (BERT model)"),NRo=l(),Z4=a("li"),uce=a("strong"),jRo=o("fnet"),DRo=o(" \u2014 "),aD=a("a"),GRo=o("FNetForNextSentencePrediction"),ORo=o(" (FNet model)"),VRo=l(),eb=a("li"),bce=a("strong"),XRo=o("megatron-bert"),zRo=o(" \u2014 "),nD=a("a"),QRo=o("MegatronBertForNextSentencePrediction"),WRo=o(" (MegatronBert model)"),HRo=l(),ob=a("li"),vce=a("strong"),URo=o("mobilebert"),JRo=o(" \u2014 "),sD=a("a"),YRo=o("MobileBertForNextSentencePrediction"),KRo=o(" (MobileBERT model)"),ZRo=l(),rb=a("li"),Fce=a("strong"),eBo=o("qdqbert"),oBo=o(" \u2014 "),lD=a("a"),rBo=o("QDQBertForNextSentencePrediction"),tBo=o(" (QDQBert model)"),aBo=l(),tb=a("p"),nBo=o("The model is set in evaluation mode by default using "),Tce=a("code"),sBo=o("model.eval()"),lBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mce=a("code"),iBo=o("model.train()"),dBo=l(),Ece=a("p"),cBo=o("Examples:"),fBo=l(),f(Aw.$$.fragment),LPe=l(),xd=a("h2"),ab=a("a"),Cce=a("span"),f(yw.$$.fragment),mBo=l(),wce=a("span"),gBo=o("AutoModelForTokenClassification"),xPe=l(),ar=a("div"),f(Lw.$$.fragment),hBo=l(),kd=a("p"),pBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),iD=a("a"),_Bo=o("from_pretrained()"),uBo=o(" class method or the "),dD=a("a"),bBo=o("from_config()"),vBo=o(` class
method.`),FBo=l(),xw=a("p"),TBo=o("This class cannot be instantiated directly using "),Ace=a("code"),MBo=o("__init__()"),EBo=o(" (throws an error)."),CBo=l(),Kr=a("div"),f(kw.$$.fragment),wBo=l(),yce=a("p"),ABo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yBo=l(),Sd=a("p"),LBo=o(`Note:
Loading a model from its configuration file does `),Lce=a("strong"),xBo=o("not"),kBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cD=a("a"),SBo=o("from_pretrained()"),RBo=o(" to load the model weights."),BBo=l(),xce=a("p"),PBo=o("Examples:"),$Bo=l(),f(Sw.$$.fragment),IBo=l(),Qe=a("div"),f(Rw.$$.fragment),qBo=l(),kce=a("p"),NBo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jBo=l(),Ka=a("p"),DBo=o("The model class to instantiate is selected based on the "),Sce=a("code"),GBo=o("model_type"),OBo=o(` property of the config object (either
passed as an argument or loaded from `),Rce=a("code"),VBo=o("pretrained_model_name_or_path"),XBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bce=a("code"),zBo=o("pretrained_model_name_or_path"),QBo=o(":"),WBo=l(),j=a("ul"),nb=a("li"),Pce=a("strong"),HBo=o("albert"),UBo=o(" \u2014 "),fD=a("a"),JBo=o("AlbertForTokenClassification"),YBo=o(" (ALBERT model)"),KBo=l(),sb=a("li"),$ce=a("strong"),ZBo=o("bert"),ePo=o(" \u2014 "),mD=a("a"),oPo=o("BertForTokenClassification"),rPo=o(" (BERT model)"),tPo=l(),lb=a("li"),Ice=a("strong"),aPo=o("big_bird"),nPo=o(" \u2014 "),gD=a("a"),sPo=o("BigBirdForTokenClassification"),lPo=o(" (BigBird model)"),iPo=l(),ib=a("li"),qce=a("strong"),dPo=o("camembert"),cPo=o(" \u2014 "),hD=a("a"),fPo=o("CamembertForTokenClassification"),mPo=o(" (CamemBERT model)"),gPo=l(),db=a("li"),Nce=a("strong"),hPo=o("canine"),pPo=o(" \u2014 "),pD=a("a"),_Po=o("CanineForTokenClassification"),uPo=o(" (Canine model)"),bPo=l(),cb=a("li"),jce=a("strong"),vPo=o("convbert"),FPo=o(" \u2014 "),_D=a("a"),TPo=o("ConvBertForTokenClassification"),MPo=o(" (ConvBERT model)"),EPo=l(),fb=a("li"),Dce=a("strong"),CPo=o("data2vec-text"),wPo=o(" \u2014 "),uD=a("a"),APo=o("Data2VecTextForTokenClassification"),yPo=o(" (Data2VecText model)"),LPo=l(),mb=a("li"),Gce=a("strong"),xPo=o("deberta"),kPo=o(" \u2014 "),bD=a("a"),SPo=o("DebertaForTokenClassification"),RPo=o(" (DeBERTa model)"),BPo=l(),gb=a("li"),Oce=a("strong"),PPo=o("deberta-v2"),$Po=o(" \u2014 "),vD=a("a"),IPo=o("DebertaV2ForTokenClassification"),qPo=o(" (DeBERTa-v2 model)"),NPo=l(),hb=a("li"),Vce=a("strong"),jPo=o("distilbert"),DPo=o(" \u2014 "),FD=a("a"),GPo=o("DistilBertForTokenClassification"),OPo=o(" (DistilBERT model)"),VPo=l(),pb=a("li"),Xce=a("strong"),XPo=o("electra"),zPo=o(" \u2014 "),TD=a("a"),QPo=o("ElectraForTokenClassification"),WPo=o(" (ELECTRA model)"),HPo=l(),_b=a("li"),zce=a("strong"),UPo=o("flaubert"),JPo=o(" \u2014 "),MD=a("a"),YPo=o("FlaubertForTokenClassification"),KPo=o(" (FlauBERT model)"),ZPo=l(),ub=a("li"),Qce=a("strong"),e$o=o("fnet"),o$o=o(" \u2014 "),ED=a("a"),r$o=o("FNetForTokenClassification"),t$o=o(" (FNet model)"),a$o=l(),bb=a("li"),Wce=a("strong"),n$o=o("funnel"),s$o=o(" \u2014 "),CD=a("a"),l$o=o("FunnelForTokenClassification"),i$o=o(" (Funnel Transformer model)"),d$o=l(),vb=a("li"),Hce=a("strong"),c$o=o("gpt2"),f$o=o(" \u2014 "),wD=a("a"),m$o=o("GPT2ForTokenClassification"),g$o=o(" (OpenAI GPT-2 model)"),h$o=l(),Fb=a("li"),Uce=a("strong"),p$o=o("ibert"),_$o=o(" \u2014 "),AD=a("a"),u$o=o("IBertForTokenClassification"),b$o=o(" (I-BERT model)"),v$o=l(),Tb=a("li"),Jce=a("strong"),F$o=o("layoutlm"),T$o=o(" \u2014 "),yD=a("a"),M$o=o("LayoutLMForTokenClassification"),E$o=o(" (LayoutLM model)"),C$o=l(),Mb=a("li"),Yce=a("strong"),w$o=o("layoutlmv2"),A$o=o(" \u2014 "),LD=a("a"),y$o=o("LayoutLMv2ForTokenClassification"),L$o=o(" (LayoutLMv2 model)"),x$o=l(),Eb=a("li"),Kce=a("strong"),k$o=o("longformer"),S$o=o(" \u2014 "),xD=a("a"),R$o=o("LongformerForTokenClassification"),B$o=o(" (Longformer model)"),P$o=l(),Cb=a("li"),Zce=a("strong"),$$o=o("megatron-bert"),I$o=o(" \u2014 "),kD=a("a"),q$o=o("MegatronBertForTokenClassification"),N$o=o(" (MegatronBert model)"),j$o=l(),wb=a("li"),efe=a("strong"),D$o=o("mobilebert"),G$o=o(" \u2014 "),SD=a("a"),O$o=o("MobileBertForTokenClassification"),V$o=o(" (MobileBERT model)"),X$o=l(),Ab=a("li"),ofe=a("strong"),z$o=o("mpnet"),Q$o=o(" \u2014 "),RD=a("a"),W$o=o("MPNetForTokenClassification"),H$o=o(" (MPNet model)"),U$o=l(),yb=a("li"),rfe=a("strong"),J$o=o("nystromformer"),Y$o=o(" \u2014 "),BD=a("a"),K$o=o("NystromformerForTokenClassification"),Z$o=o(" (Nystromformer model)"),eIo=l(),Lb=a("li"),tfe=a("strong"),oIo=o("qdqbert"),rIo=o(" \u2014 "),PD=a("a"),tIo=o("QDQBertForTokenClassification"),aIo=o(" (QDQBert model)"),nIo=l(),xb=a("li"),afe=a("strong"),sIo=o("rembert"),lIo=o(" \u2014 "),$D=a("a"),iIo=o("RemBertForTokenClassification"),dIo=o(" (RemBERT model)"),cIo=l(),kb=a("li"),nfe=a("strong"),fIo=o("roberta"),mIo=o(" \u2014 "),ID=a("a"),gIo=o("RobertaForTokenClassification"),hIo=o(" (RoBERTa model)"),pIo=l(),Sb=a("li"),sfe=a("strong"),_Io=o("roformer"),uIo=o(" \u2014 "),qD=a("a"),bIo=o("RoFormerForTokenClassification"),vIo=o(" (RoFormer model)"),FIo=l(),Rb=a("li"),lfe=a("strong"),TIo=o("squeezebert"),MIo=o(" \u2014 "),ND=a("a"),EIo=o("SqueezeBertForTokenClassification"),CIo=o(" (SqueezeBERT model)"),wIo=l(),Bb=a("li"),ife=a("strong"),AIo=o("xlm"),yIo=o(" \u2014 "),jD=a("a"),LIo=o("XLMForTokenClassification"),xIo=o(" (XLM model)"),kIo=l(),Pb=a("li"),dfe=a("strong"),SIo=o("xlm-roberta"),RIo=o(" \u2014 "),DD=a("a"),BIo=o("XLMRobertaForTokenClassification"),PIo=o(" (XLM-RoBERTa model)"),$Io=l(),$b=a("li"),cfe=a("strong"),IIo=o("xlm-roberta-xl"),qIo=o(" \u2014 "),GD=a("a"),NIo=o("XLMRobertaXLForTokenClassification"),jIo=o(" (XLM-RoBERTa-XL model)"),DIo=l(),Ib=a("li"),ffe=a("strong"),GIo=o("xlnet"),OIo=o(" \u2014 "),OD=a("a"),VIo=o("XLNetForTokenClassification"),XIo=o(" (XLNet model)"),zIo=l(),qb=a("li"),mfe=a("strong"),QIo=o("yoso"),WIo=o(" \u2014 "),VD=a("a"),HIo=o("YosoForTokenClassification"),UIo=o(" (YOSO model)"),JIo=l(),Nb=a("p"),YIo=o("The model is set in evaluation mode by default using "),gfe=a("code"),KIo=o("model.eval()"),ZIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hfe=a("code"),eqo=o("model.train()"),oqo=l(),pfe=a("p"),rqo=o("Examples:"),tqo=l(),f(Bw.$$.fragment),kPe=l(),Rd=a("h2"),jb=a("a"),_fe=a("span"),f(Pw.$$.fragment),aqo=l(),ufe=a("span"),nqo=o("AutoModelForQuestionAnswering"),SPe=l(),nr=a("div"),f($w.$$.fragment),sqo=l(),Bd=a("p"),lqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),XD=a("a"),iqo=o("from_pretrained()"),dqo=o(" class method or the "),zD=a("a"),cqo=o("from_config()"),fqo=o(` class
method.`),mqo=l(),Iw=a("p"),gqo=o("This class cannot be instantiated directly using "),bfe=a("code"),hqo=o("__init__()"),pqo=o(" (throws an error)."),_qo=l(),Zr=a("div"),f(qw.$$.fragment),uqo=l(),vfe=a("p"),bqo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vqo=l(),Pd=a("p"),Fqo=o(`Note:
Loading a model from its configuration file does `),Ffe=a("strong"),Tqo=o("not"),Mqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QD=a("a"),Eqo=o("from_pretrained()"),Cqo=o(" to load the model weights."),wqo=l(),Tfe=a("p"),Aqo=o("Examples:"),yqo=l(),f(Nw.$$.fragment),Lqo=l(),We=a("div"),f(jw.$$.fragment),xqo=l(),Mfe=a("p"),kqo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Sqo=l(),Za=a("p"),Rqo=o("The model class to instantiate is selected based on the "),Efe=a("code"),Bqo=o("model_type"),Pqo=o(` property of the config object (either
passed as an argument or loaded from `),Cfe=a("code"),$qo=o("pretrained_model_name_or_path"),Iqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=a("code"),qqo=o("pretrained_model_name_or_path"),Nqo=o(":"),jqo=l(),R=a("ul"),Db=a("li"),Afe=a("strong"),Dqo=o("albert"),Gqo=o(" \u2014 "),WD=a("a"),Oqo=o("AlbertForQuestionAnswering"),Vqo=o(" (ALBERT model)"),Xqo=l(),Gb=a("li"),yfe=a("strong"),zqo=o("bart"),Qqo=o(" \u2014 "),HD=a("a"),Wqo=o("BartForQuestionAnswering"),Hqo=o(" (BART model)"),Uqo=l(),Ob=a("li"),Lfe=a("strong"),Jqo=o("bert"),Yqo=o(" \u2014 "),UD=a("a"),Kqo=o("BertForQuestionAnswering"),Zqo=o(" (BERT model)"),eNo=l(),Vb=a("li"),xfe=a("strong"),oNo=o("big_bird"),rNo=o(" \u2014 "),JD=a("a"),tNo=o("BigBirdForQuestionAnswering"),aNo=o(" (BigBird model)"),nNo=l(),Xb=a("li"),kfe=a("strong"),sNo=o("bigbird_pegasus"),lNo=o(" \u2014 "),YD=a("a"),iNo=o("BigBirdPegasusForQuestionAnswering"),dNo=o(" (BigBirdPegasus model)"),cNo=l(),zb=a("li"),Sfe=a("strong"),fNo=o("camembert"),mNo=o(" \u2014 "),KD=a("a"),gNo=o("CamembertForQuestionAnswering"),hNo=o(" (CamemBERT model)"),pNo=l(),Qb=a("li"),Rfe=a("strong"),_No=o("canine"),uNo=o(" \u2014 "),ZD=a("a"),bNo=o("CanineForQuestionAnswering"),vNo=o(" (Canine model)"),FNo=l(),Wb=a("li"),Bfe=a("strong"),TNo=o("convbert"),MNo=o(" \u2014 "),eG=a("a"),ENo=o("ConvBertForQuestionAnswering"),CNo=o(" (ConvBERT model)"),wNo=l(),Hb=a("li"),Pfe=a("strong"),ANo=o("data2vec-text"),yNo=o(" \u2014 "),oG=a("a"),LNo=o("Data2VecTextForQuestionAnswering"),xNo=o(" (Data2VecText model)"),kNo=l(),Ub=a("li"),$fe=a("strong"),SNo=o("deberta"),RNo=o(" \u2014 "),rG=a("a"),BNo=o("DebertaForQuestionAnswering"),PNo=o(" (DeBERTa model)"),$No=l(),Jb=a("li"),Ife=a("strong"),INo=o("deberta-v2"),qNo=o(" \u2014 "),tG=a("a"),NNo=o("DebertaV2ForQuestionAnswering"),jNo=o(" (DeBERTa-v2 model)"),DNo=l(),Yb=a("li"),qfe=a("strong"),GNo=o("distilbert"),ONo=o(" \u2014 "),aG=a("a"),VNo=o("DistilBertForQuestionAnswering"),XNo=o(" (DistilBERT model)"),zNo=l(),Kb=a("li"),Nfe=a("strong"),QNo=o("electra"),WNo=o(" \u2014 "),nG=a("a"),HNo=o("ElectraForQuestionAnswering"),UNo=o(" (ELECTRA model)"),JNo=l(),Zb=a("li"),jfe=a("strong"),YNo=o("flaubert"),KNo=o(" \u2014 "),sG=a("a"),ZNo=o("FlaubertForQuestionAnsweringSimple"),ejo=o(" (FlauBERT model)"),ojo=l(),e2=a("li"),Dfe=a("strong"),rjo=o("fnet"),tjo=o(" \u2014 "),lG=a("a"),ajo=o("FNetForQuestionAnswering"),njo=o(" (FNet model)"),sjo=l(),o2=a("li"),Gfe=a("strong"),ljo=o("funnel"),ijo=o(" \u2014 "),iG=a("a"),djo=o("FunnelForQuestionAnswering"),cjo=o(" (Funnel Transformer model)"),fjo=l(),r2=a("li"),Ofe=a("strong"),mjo=o("gptj"),gjo=o(" \u2014 "),dG=a("a"),hjo=o("GPTJForQuestionAnswering"),pjo=o(" (GPT-J model)"),_jo=l(),t2=a("li"),Vfe=a("strong"),ujo=o("ibert"),bjo=o(" \u2014 "),cG=a("a"),vjo=o("IBertForQuestionAnswering"),Fjo=o(" (I-BERT model)"),Tjo=l(),a2=a("li"),Xfe=a("strong"),Mjo=o("layoutlmv2"),Ejo=o(" \u2014 "),fG=a("a"),Cjo=o("LayoutLMv2ForQuestionAnswering"),wjo=o(" (LayoutLMv2 model)"),Ajo=l(),n2=a("li"),zfe=a("strong"),yjo=o("led"),Ljo=o(" \u2014 "),mG=a("a"),xjo=o("LEDForQuestionAnswering"),kjo=o(" (LED model)"),Sjo=l(),s2=a("li"),Qfe=a("strong"),Rjo=o("longformer"),Bjo=o(" \u2014 "),gG=a("a"),Pjo=o("LongformerForQuestionAnswering"),$jo=o(" (Longformer model)"),Ijo=l(),l2=a("li"),Wfe=a("strong"),qjo=o("lxmert"),Njo=o(" \u2014 "),hG=a("a"),jjo=o("LxmertForQuestionAnswering"),Djo=o(" (LXMERT model)"),Gjo=l(),i2=a("li"),Hfe=a("strong"),Ojo=o("mbart"),Vjo=o(" \u2014 "),pG=a("a"),Xjo=o("MBartForQuestionAnswering"),zjo=o(" (mBART model)"),Qjo=l(),d2=a("li"),Ufe=a("strong"),Wjo=o("megatron-bert"),Hjo=o(" \u2014 "),_G=a("a"),Ujo=o("MegatronBertForQuestionAnswering"),Jjo=o(" (MegatronBert model)"),Yjo=l(),c2=a("li"),Jfe=a("strong"),Kjo=o("mobilebert"),Zjo=o(" \u2014 "),uG=a("a"),eDo=o("MobileBertForQuestionAnswering"),oDo=o(" (MobileBERT model)"),rDo=l(),f2=a("li"),Yfe=a("strong"),tDo=o("mpnet"),aDo=o(" \u2014 "),bG=a("a"),nDo=o("MPNetForQuestionAnswering"),sDo=o(" (MPNet model)"),lDo=l(),m2=a("li"),Kfe=a("strong"),iDo=o("nystromformer"),dDo=o(" \u2014 "),vG=a("a"),cDo=o("NystromformerForQuestionAnswering"),fDo=o(" (Nystromformer model)"),mDo=l(),g2=a("li"),Zfe=a("strong"),gDo=o("qdqbert"),hDo=o(" \u2014 "),FG=a("a"),pDo=o("QDQBertForQuestionAnswering"),_Do=o(" (QDQBert model)"),uDo=l(),h2=a("li"),eme=a("strong"),bDo=o("reformer"),vDo=o(" \u2014 "),TG=a("a"),FDo=o("ReformerForQuestionAnswering"),TDo=o(" (Reformer model)"),MDo=l(),p2=a("li"),ome=a("strong"),EDo=o("rembert"),CDo=o(" \u2014 "),MG=a("a"),wDo=o("RemBertForQuestionAnswering"),ADo=o(" (RemBERT model)"),yDo=l(),_2=a("li"),rme=a("strong"),LDo=o("roberta"),xDo=o(" \u2014 "),EG=a("a"),kDo=o("RobertaForQuestionAnswering"),SDo=o(" (RoBERTa model)"),RDo=l(),u2=a("li"),tme=a("strong"),BDo=o("roformer"),PDo=o(" \u2014 "),CG=a("a"),$Do=o("RoFormerForQuestionAnswering"),IDo=o(" (RoFormer model)"),qDo=l(),b2=a("li"),ame=a("strong"),NDo=o("splinter"),jDo=o(" \u2014 "),wG=a("a"),DDo=o("SplinterForQuestionAnswering"),GDo=o(" (Splinter model)"),ODo=l(),v2=a("li"),nme=a("strong"),VDo=o("squeezebert"),XDo=o(" \u2014 "),AG=a("a"),zDo=o("SqueezeBertForQuestionAnswering"),QDo=o(" (SqueezeBERT model)"),WDo=l(),F2=a("li"),sme=a("strong"),HDo=o("xlm"),UDo=o(" \u2014 "),yG=a("a"),JDo=o("XLMForQuestionAnsweringSimple"),YDo=o(" (XLM model)"),KDo=l(),T2=a("li"),lme=a("strong"),ZDo=o("xlm-roberta"),eGo=o(" \u2014 "),LG=a("a"),oGo=o("XLMRobertaForQuestionAnswering"),rGo=o(" (XLM-RoBERTa model)"),tGo=l(),M2=a("li"),ime=a("strong"),aGo=o("xlm-roberta-xl"),nGo=o(" \u2014 "),xG=a("a"),sGo=o("XLMRobertaXLForQuestionAnswering"),lGo=o(" (XLM-RoBERTa-XL model)"),iGo=l(),E2=a("li"),dme=a("strong"),dGo=o("xlnet"),cGo=o(" \u2014 "),kG=a("a"),fGo=o("XLNetForQuestionAnsweringSimple"),mGo=o(" (XLNet model)"),gGo=l(),C2=a("li"),cme=a("strong"),hGo=o("yoso"),pGo=o(" \u2014 "),SG=a("a"),_Go=o("YosoForQuestionAnswering"),uGo=o(" (YOSO model)"),bGo=l(),w2=a("p"),vGo=o("The model is set in evaluation mode by default using "),fme=a("code"),FGo=o("model.eval()"),TGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mme=a("code"),MGo=o("model.train()"),EGo=l(),gme=a("p"),CGo=o("Examples:"),wGo=l(),f(Dw.$$.fragment),RPe=l(),$d=a("h2"),A2=a("a"),hme=a("span"),f(Gw.$$.fragment),AGo=l(),pme=a("span"),yGo=o("AutoModelForTableQuestionAnswering"),BPe=l(),sr=a("div"),f(Ow.$$.fragment),LGo=l(),Id=a("p"),xGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),RG=a("a"),kGo=o("from_pretrained()"),SGo=o(" class method or the "),BG=a("a"),RGo=o("from_config()"),BGo=o(` class
method.`),PGo=l(),Vw=a("p"),$Go=o("This class cannot be instantiated directly using "),_me=a("code"),IGo=o("__init__()"),qGo=o(" (throws an error)."),NGo=l(),et=a("div"),f(Xw.$$.fragment),jGo=l(),ume=a("p"),DGo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),GGo=l(),qd=a("p"),OGo=o(`Note:
Loading a model from its configuration file does `),bme=a("strong"),VGo=o("not"),XGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=a("a"),zGo=o("from_pretrained()"),QGo=o(" to load the model weights."),WGo=l(),vme=a("p"),HGo=o("Examples:"),UGo=l(),f(zw.$$.fragment),JGo=l(),He=a("div"),f(Qw.$$.fragment),YGo=l(),Fme=a("p"),KGo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ZGo=l(),en=a("p"),eOo=o("The model class to instantiate is selected based on the "),Tme=a("code"),oOo=o("model_type"),rOo=o(` property of the config object (either
passed as an argument or loaded from `),Mme=a("code"),tOo=o("pretrained_model_name_or_path"),aOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eme=a("code"),nOo=o("pretrained_model_name_or_path"),sOo=o(":"),lOo=l(),Cme=a("ul"),y2=a("li"),wme=a("strong"),iOo=o("tapas"),dOo=o(" \u2014 "),$G=a("a"),cOo=o("TapasForQuestionAnswering"),fOo=o(" (TAPAS model)"),mOo=l(),L2=a("p"),gOo=o("The model is set in evaluation mode by default using "),Ame=a("code"),hOo=o("model.eval()"),pOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yme=a("code"),_Oo=o("model.train()"),uOo=l(),Lme=a("p"),bOo=o("Examples:"),vOo=l(),f(Ww.$$.fragment),PPe=l(),Nd=a("h2"),x2=a("a"),xme=a("span"),f(Hw.$$.fragment),FOo=l(),kme=a("span"),TOo=o("AutoModelForImageClassification"),$Pe=l(),lr=a("div"),f(Uw.$$.fragment),MOo=l(),jd=a("p"),EOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),IG=a("a"),COo=o("from_pretrained()"),wOo=o(" class method or the "),qG=a("a"),AOo=o("from_config()"),yOo=o(` class
method.`),LOo=l(),Jw=a("p"),xOo=o("This class cannot be instantiated directly using "),Sme=a("code"),kOo=o("__init__()"),SOo=o(" (throws an error)."),ROo=l(),ot=a("div"),f(Yw.$$.fragment),BOo=l(),Rme=a("p"),POo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$Oo=l(),Dd=a("p"),IOo=o(`Note:
Loading a model from its configuration file does `),Bme=a("strong"),qOo=o("not"),NOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=a("a"),jOo=o("from_pretrained()"),DOo=o(" to load the model weights."),GOo=l(),Pme=a("p"),OOo=o("Examples:"),VOo=l(),f(Kw.$$.fragment),XOo=l(),Ue=a("div"),f(Zw.$$.fragment),zOo=l(),$me=a("p"),QOo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),WOo=l(),on=a("p"),HOo=o("The model class to instantiate is selected based on the "),Ime=a("code"),UOo=o("model_type"),JOo=o(` property of the config object (either
passed as an argument or loaded from `),qme=a("code"),YOo=o("pretrained_model_name_or_path"),KOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=a("code"),ZOo=o("pretrained_model_name_or_path"),eVo=o(":"),oVo=l(),ce=a("ul"),k2=a("li"),jme=a("strong"),rVo=o("beit"),tVo=o(" \u2014 "),jG=a("a"),aVo=o("BeitForImageClassification"),nVo=o(" (BEiT model)"),sVo=l(),S2=a("li"),Dme=a("strong"),lVo=o("convnext"),iVo=o(" \u2014 "),DG=a("a"),dVo=o("ConvNextForImageClassification"),cVo=o(" (ConvNext model)"),fVo=l(),R2=a("li"),Gme=a("strong"),mVo=o("data2vec-vision"),gVo=o(" \u2014 "),GG=a("a"),hVo=o("Data2VecVisionForImageClassification"),pVo=o(" (Data2VecVision model)"),_Vo=l(),Us=a("li"),Ome=a("strong"),uVo=o("deit"),bVo=o(" \u2014 "),OG=a("a"),vVo=o("DeiTForImageClassification"),FVo=o(" or "),VG=a("a"),TVo=o("DeiTForImageClassificationWithTeacher"),MVo=o(" (DeiT model)"),EVo=l(),B2=a("li"),Vme=a("strong"),CVo=o("imagegpt"),wVo=o(" \u2014 "),XG=a("a"),AVo=o("ImageGPTForImageClassification"),yVo=o(" (ImageGPT model)"),LVo=l(),ma=a("li"),Xme=a("strong"),xVo=o("perceiver"),kVo=o(" \u2014 "),zG=a("a"),SVo=o("PerceiverForImageClassificationLearned"),RVo=o(" or "),QG=a("a"),BVo=o("PerceiverForImageClassificationFourier"),PVo=o(" or "),WG=a("a"),$Vo=o("PerceiverForImageClassificationConvProcessing"),IVo=o(" (Perceiver model)"),qVo=l(),P2=a("li"),zme=a("strong"),NVo=o("poolformer"),jVo=o(" \u2014 "),HG=a("a"),DVo=o("PoolFormerForImageClassification"),GVo=o(" (PoolFormer model)"),OVo=l(),$2=a("li"),Qme=a("strong"),VVo=o("regnet"),XVo=o(" \u2014 "),UG=a("a"),zVo=o("RegNetForImageClassification"),QVo=o(" (RegNet model)"),WVo=l(),I2=a("li"),Wme=a("strong"),HVo=o("resnet"),UVo=o(" \u2014 "),JG=a("a"),JVo=o("ResNetForImageClassification"),YVo=o(" (ResNet model)"),KVo=l(),q2=a("li"),Hme=a("strong"),ZVo=o("segformer"),eXo=o(" \u2014 "),YG=a("a"),oXo=o("SegformerForImageClassification"),rXo=o(" (SegFormer model)"),tXo=l(),N2=a("li"),Ume=a("strong"),aXo=o("swin"),nXo=o(" \u2014 "),KG=a("a"),sXo=o("SwinForImageClassification"),lXo=o(" (Swin model)"),iXo=l(),j2=a("li"),Jme=a("strong"),dXo=o("van"),cXo=o(" \u2014 "),ZG=a("a"),fXo=o("VanForImageClassification"),mXo=o(" (VAN model)"),gXo=l(),D2=a("li"),Yme=a("strong"),hXo=o("vit"),pXo=o(" \u2014 "),eO=a("a"),_Xo=o("ViTForImageClassification"),uXo=o(" (ViT model)"),bXo=l(),G2=a("p"),vXo=o("The model is set in evaluation mode by default using "),Kme=a("code"),FXo=o("model.eval()"),TXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zme=a("code"),MXo=o("model.train()"),EXo=l(),ege=a("p"),CXo=o("Examples:"),wXo=l(),f(eA.$$.fragment),IPe=l(),Gd=a("h2"),O2=a("a"),oge=a("span"),f(oA.$$.fragment),AXo=l(),rge=a("span"),yXo=o("AutoModelForVision2Seq"),qPe=l(),ir=a("div"),f(rA.$$.fragment),LXo=l(),Od=a("p"),xXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oO=a("a"),kXo=o("from_pretrained()"),SXo=o(" class method or the "),rO=a("a"),RXo=o("from_config()"),BXo=o(` class
method.`),PXo=l(),tA=a("p"),$Xo=o("This class cannot be instantiated directly using "),tge=a("code"),IXo=o("__init__()"),qXo=o(" (throws an error)."),NXo=l(),rt=a("div"),f(aA.$$.fragment),jXo=l(),age=a("p"),DXo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),GXo=l(),Vd=a("p"),OXo=o(`Note:
Loading a model from its configuration file does `),nge=a("strong"),VXo=o("not"),XXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tO=a("a"),zXo=o("from_pretrained()"),QXo=o(" to load the model weights."),WXo=l(),sge=a("p"),HXo=o("Examples:"),UXo=l(),f(nA.$$.fragment),JXo=l(),Je=a("div"),f(sA.$$.fragment),YXo=l(),lge=a("p"),KXo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ZXo=l(),rn=a("p"),ezo=o("The model class to instantiate is selected based on the "),ige=a("code"),ozo=o("model_type"),rzo=o(` property of the config object (either
passed as an argument or loaded from `),dge=a("code"),tzo=o("pretrained_model_name_or_path"),azo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=a("code"),nzo=o("pretrained_model_name_or_path"),szo=o(":"),lzo=l(),fge=a("ul"),V2=a("li"),mge=a("strong"),izo=o("vision-encoder-decoder"),dzo=o(" \u2014 "),aO=a("a"),czo=o("VisionEncoderDecoderModel"),fzo=o(" (Vision Encoder decoder model)"),mzo=l(),X2=a("p"),gzo=o("The model is set in evaluation mode by default using "),gge=a("code"),hzo=o("model.eval()"),pzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hge=a("code"),_zo=o("model.train()"),uzo=l(),pge=a("p"),bzo=o("Examples:"),vzo=l(),f(lA.$$.fragment),NPe=l(),Xd=a("h2"),z2=a("a"),_ge=a("span"),f(iA.$$.fragment),Fzo=l(),uge=a("span"),Tzo=o("AutoModelForAudioClassification"),jPe=l(),dr=a("div"),f(dA.$$.fragment),Mzo=l(),zd=a("p"),Ezo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),nO=a("a"),Czo=o("from_pretrained()"),wzo=o(" class method or the "),sO=a("a"),Azo=o("from_config()"),yzo=o(` class
method.`),Lzo=l(),cA=a("p"),xzo=o("This class cannot be instantiated directly using "),bge=a("code"),kzo=o("__init__()"),Szo=o(" (throws an error)."),Rzo=l(),tt=a("div"),f(fA.$$.fragment),Bzo=l(),vge=a("p"),Pzo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),$zo=l(),Qd=a("p"),Izo=o(`Note:
Loading a model from its configuration file does `),Fge=a("strong"),qzo=o("not"),Nzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lO=a("a"),jzo=o("from_pretrained()"),Dzo=o(" to load the model weights."),Gzo=l(),Tge=a("p"),Ozo=o("Examples:"),Vzo=l(),f(mA.$$.fragment),Xzo=l(),Ye=a("div"),f(gA.$$.fragment),zzo=l(),Mge=a("p"),Qzo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Wzo=l(),tn=a("p"),Hzo=o("The model class to instantiate is selected based on the "),Ege=a("code"),Uzo=o("model_type"),Jzo=o(` property of the config object (either
passed as an argument or loaded from `),Cge=a("code"),Yzo=o("pretrained_model_name_or_path"),Kzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wge=a("code"),Zzo=o("pretrained_model_name_or_path"),eQo=o(":"),oQo=l(),Re=a("ul"),Q2=a("li"),Age=a("strong"),rQo=o("data2vec-audio"),tQo=o(" \u2014 "),iO=a("a"),aQo=o("Data2VecAudioForSequenceClassification"),nQo=o(" (Data2VecAudio model)"),sQo=l(),W2=a("li"),yge=a("strong"),lQo=o("hubert"),iQo=o(" \u2014 "),dO=a("a"),dQo=o("HubertForSequenceClassification"),cQo=o(" (Hubert model)"),fQo=l(),H2=a("li"),Lge=a("strong"),mQo=o("sew"),gQo=o(" \u2014 "),cO=a("a"),hQo=o("SEWForSequenceClassification"),pQo=o(" (SEW model)"),_Qo=l(),U2=a("li"),xge=a("strong"),uQo=o("sew-d"),bQo=o(" \u2014 "),fO=a("a"),vQo=o("SEWDForSequenceClassification"),FQo=o(" (SEW-D model)"),TQo=l(),J2=a("li"),kge=a("strong"),MQo=o("unispeech"),EQo=o(" \u2014 "),mO=a("a"),CQo=o("UniSpeechForSequenceClassification"),wQo=o(" (UniSpeech model)"),AQo=l(),Y2=a("li"),Sge=a("strong"),yQo=o("unispeech-sat"),LQo=o(" \u2014 "),gO=a("a"),xQo=o("UniSpeechSatForSequenceClassification"),kQo=o(" (UniSpeechSat model)"),SQo=l(),K2=a("li"),Rge=a("strong"),RQo=o("wav2vec2"),BQo=o(" \u2014 "),hO=a("a"),PQo=o("Wav2Vec2ForSequenceClassification"),$Qo=o(" (Wav2Vec2 model)"),IQo=l(),Z2=a("li"),Bge=a("strong"),qQo=o("wavlm"),NQo=o(" \u2014 "),pO=a("a"),jQo=o("WavLMForSequenceClassification"),DQo=o(" (WavLM model)"),GQo=l(),ev=a("p"),OQo=o("The model is set in evaluation mode by default using "),Pge=a("code"),VQo=o("model.eval()"),XQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ge=a("code"),zQo=o("model.train()"),QQo=l(),Ige=a("p"),WQo=o("Examples:"),HQo=l(),f(hA.$$.fragment),DPe=l(),Wd=a("h2"),ov=a("a"),qge=a("span"),f(pA.$$.fragment),UQo=l(),Nge=a("span"),JQo=o("AutoModelForAudioFrameClassification"),GPe=l(),cr=a("div"),f(_A.$$.fragment),YQo=l(),Hd=a("p"),KQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),_O=a("a"),ZQo=o("from_pretrained()"),eWo=o(" class method or the "),uO=a("a"),oWo=o("from_config()"),rWo=o(` class
method.`),tWo=l(),uA=a("p"),aWo=o("This class cannot be instantiated directly using "),jge=a("code"),nWo=o("__init__()"),sWo=o(" (throws an error)."),lWo=l(),at=a("div"),f(bA.$$.fragment),iWo=l(),Dge=a("p"),dWo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),cWo=l(),Ud=a("p"),fWo=o(`Note:
Loading a model from its configuration file does `),Gge=a("strong"),mWo=o("not"),gWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=a("a"),hWo=o("from_pretrained()"),pWo=o(" to load the model weights."),_Wo=l(),Oge=a("p"),uWo=o("Examples:"),bWo=l(),f(vA.$$.fragment),vWo=l(),Ke=a("div"),f(FA.$$.fragment),FWo=l(),Vge=a("p"),TWo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),MWo=l(),an=a("p"),EWo=o("The model class to instantiate is selected based on the "),Xge=a("code"),CWo=o("model_type"),wWo=o(` property of the config object (either
passed as an argument or loaded from `),zge=a("code"),AWo=o("pretrained_model_name_or_path"),yWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=a("code"),LWo=o("pretrained_model_name_or_path"),xWo=o(":"),kWo=l(),nn=a("ul"),rv=a("li"),Wge=a("strong"),SWo=o("data2vec-audio"),RWo=o(" \u2014 "),vO=a("a"),BWo=o("Data2VecAudioForAudioFrameClassification"),PWo=o(" (Data2VecAudio model)"),$Wo=l(),tv=a("li"),Hge=a("strong"),IWo=o("unispeech-sat"),qWo=o(" \u2014 "),FO=a("a"),NWo=o("UniSpeechSatForAudioFrameClassification"),jWo=o(" (UniSpeechSat model)"),DWo=l(),av=a("li"),Uge=a("strong"),GWo=o("wav2vec2"),OWo=o(" \u2014 "),TO=a("a"),VWo=o("Wav2Vec2ForAudioFrameClassification"),XWo=o(" (Wav2Vec2 model)"),zWo=l(),nv=a("li"),Jge=a("strong"),QWo=o("wavlm"),WWo=o(" \u2014 "),MO=a("a"),HWo=o("WavLMForAudioFrameClassification"),UWo=o(" (WavLM model)"),JWo=l(),sv=a("p"),YWo=o("The model is set in evaluation mode by default using "),Yge=a("code"),KWo=o("model.eval()"),ZWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kge=a("code"),eHo=o("model.train()"),oHo=l(),Zge=a("p"),rHo=o("Examples:"),tHo=l(),f(TA.$$.fragment),OPe=l(),Jd=a("h2"),lv=a("a"),ehe=a("span"),f(MA.$$.fragment),aHo=l(),ohe=a("span"),nHo=o("AutoModelForCTC"),VPe=l(),fr=a("div"),f(EA.$$.fragment),sHo=l(),Yd=a("p"),lHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),EO=a("a"),iHo=o("from_pretrained()"),dHo=o(" class method or the "),CO=a("a"),cHo=o("from_config()"),fHo=o(` class
method.`),mHo=l(),CA=a("p"),gHo=o("This class cannot be instantiated directly using "),rhe=a("code"),hHo=o("__init__()"),pHo=o(" (throws an error)."),_Ho=l(),nt=a("div"),f(wA.$$.fragment),uHo=l(),the=a("p"),bHo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),vHo=l(),Kd=a("p"),FHo=o(`Note:
Loading a model from its configuration file does `),ahe=a("strong"),THo=o("not"),MHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=a("a"),EHo=o("from_pretrained()"),CHo=o(" to load the model weights."),wHo=l(),nhe=a("p"),AHo=o("Examples:"),yHo=l(),f(AA.$$.fragment),LHo=l(),Ze=a("div"),f(yA.$$.fragment),xHo=l(),she=a("p"),kHo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),SHo=l(),sn=a("p"),RHo=o("The model class to instantiate is selected based on the "),lhe=a("code"),BHo=o("model_type"),PHo=o(` property of the config object (either
passed as an argument or loaded from `),ihe=a("code"),$Ho=o("pretrained_model_name_or_path"),IHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dhe=a("code"),qHo=o("pretrained_model_name_or_path"),NHo=o(":"),jHo=l(),Be=a("ul"),iv=a("li"),che=a("strong"),DHo=o("data2vec-audio"),GHo=o(" \u2014 "),AO=a("a"),OHo=o("Data2VecAudioForCTC"),VHo=o(" (Data2VecAudio model)"),XHo=l(),dv=a("li"),fhe=a("strong"),zHo=o("hubert"),QHo=o(" \u2014 "),yO=a("a"),WHo=o("HubertForCTC"),HHo=o(" (Hubert model)"),UHo=l(),cv=a("li"),mhe=a("strong"),JHo=o("sew"),YHo=o(" \u2014 "),LO=a("a"),KHo=o("SEWForCTC"),ZHo=o(" (SEW model)"),eUo=l(),fv=a("li"),ghe=a("strong"),oUo=o("sew-d"),rUo=o(" \u2014 "),xO=a("a"),tUo=o("SEWDForCTC"),aUo=o(" (SEW-D model)"),nUo=l(),mv=a("li"),hhe=a("strong"),sUo=o("unispeech"),lUo=o(" \u2014 "),kO=a("a"),iUo=o("UniSpeechForCTC"),dUo=o(" (UniSpeech model)"),cUo=l(),gv=a("li"),phe=a("strong"),fUo=o("unispeech-sat"),mUo=o(" \u2014 "),SO=a("a"),gUo=o("UniSpeechSatForCTC"),hUo=o(" (UniSpeechSat model)"),pUo=l(),hv=a("li"),_he=a("strong"),_Uo=o("wav2vec2"),uUo=o(" \u2014 "),RO=a("a"),bUo=o("Wav2Vec2ForCTC"),vUo=o(" (Wav2Vec2 model)"),FUo=l(),pv=a("li"),uhe=a("strong"),TUo=o("wavlm"),MUo=o(" \u2014 "),BO=a("a"),EUo=o("WavLMForCTC"),CUo=o(" (WavLM model)"),wUo=l(),_v=a("p"),AUo=o("The model is set in evaluation mode by default using "),bhe=a("code"),yUo=o("model.eval()"),LUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vhe=a("code"),xUo=o("model.train()"),kUo=l(),Fhe=a("p"),SUo=o("Examples:"),RUo=l(),f(LA.$$.fragment),XPe=l(),Zd=a("h2"),uv=a("a"),The=a("span"),f(xA.$$.fragment),BUo=l(),Mhe=a("span"),PUo=o("AutoModelForSpeechSeq2Seq"),zPe=l(),mr=a("div"),f(kA.$$.fragment),$Uo=l(),ec=a("p"),IUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PO=a("a"),qUo=o("from_pretrained()"),NUo=o(" class method or the "),$O=a("a"),jUo=o("from_config()"),DUo=o(` class
method.`),GUo=l(),SA=a("p"),OUo=o("This class cannot be instantiated directly using "),Ehe=a("code"),VUo=o("__init__()"),XUo=o(" (throws an error)."),zUo=l(),st=a("div"),f(RA.$$.fragment),QUo=l(),Che=a("p"),WUo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),HUo=l(),oc=a("p"),UUo=o(`Note:
Loading a model from its configuration file does `),whe=a("strong"),JUo=o("not"),YUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=a("a"),KUo=o("from_pretrained()"),ZUo=o(" to load the model weights."),eJo=l(),Ahe=a("p"),oJo=o("Examples:"),rJo=l(),f(BA.$$.fragment),tJo=l(),eo=a("div"),f(PA.$$.fragment),aJo=l(),yhe=a("p"),nJo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),sJo=l(),ln=a("p"),lJo=o("The model class to instantiate is selected based on the "),Lhe=a("code"),iJo=o("model_type"),dJo=o(` property of the config object (either
passed as an argument or loaded from `),xhe=a("code"),cJo=o("pretrained_model_name_or_path"),fJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),khe=a("code"),mJo=o("pretrained_model_name_or_path"),gJo=o(":"),hJo=l(),$A=a("ul"),bv=a("li"),She=a("strong"),pJo=o("speech-encoder-decoder"),_Jo=o(" \u2014 "),qO=a("a"),uJo=o("SpeechEncoderDecoderModel"),bJo=o(" (Speech Encoder decoder model)"),vJo=l(),vv=a("li"),Rhe=a("strong"),FJo=o("speech_to_text"),TJo=o(" \u2014 "),NO=a("a"),MJo=o("Speech2TextForConditionalGeneration"),EJo=o(" (Speech2Text model)"),CJo=l(),Fv=a("p"),wJo=o("The model is set in evaluation mode by default using "),Bhe=a("code"),AJo=o("model.eval()"),yJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Phe=a("code"),LJo=o("model.train()"),xJo=l(),$he=a("p"),kJo=o("Examples:"),SJo=l(),f(IA.$$.fragment),QPe=l(),rc=a("h2"),Tv=a("a"),Ihe=a("span"),f(qA.$$.fragment),RJo=l(),qhe=a("span"),BJo=o("AutoModelForAudioXVector"),WPe=l(),gr=a("div"),f(NA.$$.fragment),PJo=l(),tc=a("p"),$Jo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jO=a("a"),IJo=o("from_pretrained()"),qJo=o(" class method or the "),DO=a("a"),NJo=o("from_config()"),jJo=o(` class
method.`),DJo=l(),jA=a("p"),GJo=o("This class cannot be instantiated directly using "),Nhe=a("code"),OJo=o("__init__()"),VJo=o(" (throws an error)."),XJo=l(),lt=a("div"),f(DA.$$.fragment),zJo=l(),jhe=a("p"),QJo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),WJo=l(),ac=a("p"),HJo=o(`Note:
Loading a model from its configuration file does `),Dhe=a("strong"),UJo=o("not"),JJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GO=a("a"),YJo=o("from_pretrained()"),KJo=o(" to load the model weights."),ZJo=l(),Ghe=a("p"),eYo=o("Examples:"),oYo=l(),f(GA.$$.fragment),rYo=l(),oo=a("div"),f(OA.$$.fragment),tYo=l(),Ohe=a("p"),aYo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),nYo=l(),dn=a("p"),sYo=o("The model class to instantiate is selected based on the "),Vhe=a("code"),lYo=o("model_type"),iYo=o(` property of the config object (either
passed as an argument or loaded from `),Xhe=a("code"),dYo=o("pretrained_model_name_or_path"),cYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zhe=a("code"),fYo=o("pretrained_model_name_or_path"),mYo=o(":"),gYo=l(),cn=a("ul"),Mv=a("li"),Qhe=a("strong"),hYo=o("data2vec-audio"),pYo=o(" \u2014 "),OO=a("a"),_Yo=o("Data2VecAudioForXVector"),uYo=o(" (Data2VecAudio model)"),bYo=l(),Ev=a("li"),Whe=a("strong"),vYo=o("unispeech-sat"),FYo=o(" \u2014 "),VO=a("a"),TYo=o("UniSpeechSatForXVector"),MYo=o(" (UniSpeechSat model)"),EYo=l(),Cv=a("li"),Hhe=a("strong"),CYo=o("wav2vec2"),wYo=o(" \u2014 "),XO=a("a"),AYo=o("Wav2Vec2ForXVector"),yYo=o(" (Wav2Vec2 model)"),LYo=l(),wv=a("li"),Uhe=a("strong"),xYo=o("wavlm"),kYo=o(" \u2014 "),zO=a("a"),SYo=o("WavLMForXVector"),RYo=o(" (WavLM model)"),BYo=l(),Av=a("p"),PYo=o("The model is set in evaluation mode by default using "),Jhe=a("code"),$Yo=o("model.eval()"),IYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=a("code"),qYo=o("model.train()"),NYo=l(),Khe=a("p"),jYo=o("Examples:"),DYo=l(),f(VA.$$.fragment),HPe=l(),nc=a("h2"),yv=a("a"),Zhe=a("span"),f(XA.$$.fragment),GYo=l(),epe=a("span"),OYo=o("AutoModelForMaskedImageModeling"),UPe=l(),hr=a("div"),f(zA.$$.fragment),VYo=l(),sc=a("p"),XYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),QO=a("a"),zYo=o("from_pretrained()"),QYo=o(" class method or the "),WO=a("a"),WYo=o("from_config()"),HYo=o(` class
method.`),UYo=l(),QA=a("p"),JYo=o("This class cannot be instantiated directly using "),ope=a("code"),YYo=o("__init__()"),KYo=o(" (throws an error)."),ZYo=l(),it=a("div"),f(WA.$$.fragment),eKo=l(),rpe=a("p"),oKo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),rKo=l(),lc=a("p"),tKo=o(`Note:
Loading a model from its configuration file does `),tpe=a("strong"),aKo=o("not"),nKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=a("a"),sKo=o("from_pretrained()"),lKo=o(" to load the model weights."),iKo=l(),ape=a("p"),dKo=o("Examples:"),cKo=l(),f(HA.$$.fragment),fKo=l(),ro=a("div"),f(UA.$$.fragment),mKo=l(),npe=a("p"),gKo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),hKo=l(),fn=a("p"),pKo=o("The model class to instantiate is selected based on the "),spe=a("code"),_Ko=o("model_type"),uKo=o(` property of the config object (either
passed as an argument or loaded from `),lpe=a("code"),bKo=o("pretrained_model_name_or_path"),vKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ipe=a("code"),FKo=o("pretrained_model_name_or_path"),TKo=o(":"),MKo=l(),ic=a("ul"),Lv=a("li"),dpe=a("strong"),EKo=o("deit"),CKo=o(" \u2014 "),UO=a("a"),wKo=o("DeiTForMaskedImageModeling"),AKo=o(" (DeiT model)"),yKo=l(),xv=a("li"),cpe=a("strong"),LKo=o("swin"),xKo=o(" \u2014 "),JO=a("a"),kKo=o("SwinForMaskedImageModeling"),SKo=o(" (Swin model)"),RKo=l(),kv=a("li"),fpe=a("strong"),BKo=o("vit"),PKo=o(" \u2014 "),YO=a("a"),$Ko=o("ViTForMaskedImageModeling"),IKo=o(" (ViT model)"),qKo=l(),Sv=a("p"),NKo=o("The model is set in evaluation mode by default using "),mpe=a("code"),jKo=o("model.eval()"),DKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gpe=a("code"),GKo=o("model.train()"),OKo=l(),hpe=a("p"),VKo=o("Examples:"),XKo=l(),f(JA.$$.fragment),JPe=l(),dc=a("h2"),Rv=a("a"),ppe=a("span"),f(YA.$$.fragment),zKo=l(),_pe=a("span"),QKo=o("AutoModelForObjectDetection"),YPe=l(),pr=a("div"),f(KA.$$.fragment),WKo=l(),cc=a("p"),HKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),KO=a("a"),UKo=o("from_pretrained()"),JKo=o(" class method or the "),ZO=a("a"),YKo=o("from_config()"),KKo=o(` class
method.`),ZKo=l(),ZA=a("p"),eZo=o("This class cannot be instantiated directly using "),upe=a("code"),oZo=o("__init__()"),rZo=o(" (throws an error)."),tZo=l(),dt=a("div"),f(e0.$$.fragment),aZo=l(),bpe=a("p"),nZo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),sZo=l(),fc=a("p"),lZo=o(`Note:
Loading a model from its configuration file does `),vpe=a("strong"),iZo=o("not"),dZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eV=a("a"),cZo=o("from_pretrained()"),fZo=o(" to load the model weights."),mZo=l(),Fpe=a("p"),gZo=o("Examples:"),hZo=l(),f(o0.$$.fragment),pZo=l(),to=a("div"),f(r0.$$.fragment),_Zo=l(),Tpe=a("p"),uZo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),bZo=l(),mn=a("p"),vZo=o("The model class to instantiate is selected based on the "),Mpe=a("code"),FZo=o("model_type"),TZo=o(` property of the config object (either
passed as an argument or loaded from `),Epe=a("code"),MZo=o("pretrained_model_name_or_path"),EZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=a("code"),CZo=o("pretrained_model_name_or_path"),wZo=o(":"),AZo=l(),wpe=a("ul"),Bv=a("li"),Ape=a("strong"),yZo=o("detr"),LZo=o(" \u2014 "),oV=a("a"),xZo=o("DetrForObjectDetection"),kZo=o(" (DETR model)"),SZo=l(),Pv=a("p"),RZo=o("The model is set in evaluation mode by default using "),ype=a("code"),BZo=o("model.eval()"),PZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lpe=a("code"),$Zo=o("model.train()"),IZo=l(),xpe=a("p"),qZo=o("Examples:"),NZo=l(),f(t0.$$.fragment),KPe=l(),mc=a("h2"),$v=a("a"),kpe=a("span"),f(a0.$$.fragment),jZo=l(),Spe=a("span"),DZo=o("AutoModelForImageSegmentation"),ZPe=l(),_r=a("div"),f(n0.$$.fragment),GZo=l(),gc=a("p"),OZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),rV=a("a"),VZo=o("from_pretrained()"),XZo=o(" class method or the "),tV=a("a"),zZo=o("from_config()"),QZo=o(` class
method.`),WZo=l(),s0=a("p"),HZo=o("This class cannot be instantiated directly using "),Rpe=a("code"),UZo=o("__init__()"),JZo=o(" (throws an error)."),YZo=l(),ct=a("div"),f(l0.$$.fragment),KZo=l(),Bpe=a("p"),ZZo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),eer=l(),hc=a("p"),oer=o(`Note:
Loading a model from its configuration file does `),Ppe=a("strong"),rer=o("not"),ter=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=a("a"),aer=o("from_pretrained()"),ner=o(" to load the model weights."),ser=l(),$pe=a("p"),ler=o("Examples:"),ier=l(),f(i0.$$.fragment),der=l(),ao=a("div"),f(d0.$$.fragment),cer=l(),Ipe=a("p"),fer=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),mer=l(),gn=a("p"),ger=o("The model class to instantiate is selected based on the "),qpe=a("code"),her=o("model_type"),per=o(` property of the config object (either
passed as an argument or loaded from `),Npe=a("code"),_er=o("pretrained_model_name_or_path"),uer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=a("code"),ber=o("pretrained_model_name_or_path"),ver=o(":"),Fer=l(),Dpe=a("ul"),Iv=a("li"),Gpe=a("strong"),Ter=o("detr"),Mer=o(" \u2014 "),nV=a("a"),Eer=o("DetrForSegmentation"),Cer=o(" (DETR model)"),wer=l(),qv=a("p"),Aer=o("The model is set in evaluation mode by default using "),Ope=a("code"),yer=o("model.eval()"),Ler=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vpe=a("code"),xer=o("model.train()"),ker=l(),Xpe=a("p"),Ser=o("Examples:"),Rer=l(),f(c0.$$.fragment),e$e=l(),pc=a("h2"),Nv=a("a"),zpe=a("span"),f(f0.$$.fragment),Ber=l(),Qpe=a("span"),Per=o("AutoModelForSemanticSegmentation"),o$e=l(),ur=a("div"),f(m0.$$.fragment),$er=l(),_c=a("p"),Ier=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),sV=a("a"),qer=o("from_pretrained()"),Ner=o(" class method or the "),lV=a("a"),jer=o("from_config()"),Der=o(` class
method.`),Ger=l(),g0=a("p"),Oer=o("This class cannot be instantiated directly using "),Wpe=a("code"),Ver=o("__init__()"),Xer=o(" (throws an error)."),zer=l(),ft=a("div"),f(h0.$$.fragment),Qer=l(),Hpe=a("p"),Wer=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Her=l(),uc=a("p"),Uer=o(`Note:
Loading a model from its configuration file does `),Upe=a("strong"),Jer=o("not"),Yer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iV=a("a"),Ker=o("from_pretrained()"),Zer=o(" to load the model weights."),eor=l(),Jpe=a("p"),oor=o("Examples:"),ror=l(),f(p0.$$.fragment),tor=l(),no=a("div"),f(_0.$$.fragment),aor=l(),Ype=a("p"),nor=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),sor=l(),hn=a("p"),lor=o("The model class to instantiate is selected based on the "),Kpe=a("code"),ior=o("model_type"),dor=o(` property of the config object (either
passed as an argument or loaded from `),Zpe=a("code"),cor=o("pretrained_model_name_or_path"),mor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=a("code"),gor=o("pretrained_model_name_or_path"),hor=o(":"),por=l(),pn=a("ul"),jv=a("li"),o_e=a("strong"),_or=o("beit"),uor=o(" \u2014 "),dV=a("a"),bor=o("BeitForSemanticSegmentation"),vor=o(" (BEiT model)"),For=l(),Dv=a("li"),r_e=a("strong"),Tor=o("data2vec-vision"),Mor=o(" \u2014 "),cV=a("a"),Eor=o("Data2VecVisionForSemanticSegmentation"),Cor=o(" (Data2VecVision model)"),wor=l(),Gv=a("li"),t_e=a("strong"),Aor=o("dpt"),yor=o(" \u2014 "),fV=a("a"),Lor=o("DPTForSemanticSegmentation"),xor=o(" (DPT model)"),kor=l(),Ov=a("li"),a_e=a("strong"),Sor=o("segformer"),Ror=o(" \u2014 "),mV=a("a"),Bor=o("SegformerForSemanticSegmentation"),Por=o(" (SegFormer model)"),$or=l(),Vv=a("p"),Ior=o("The model is set in evaluation mode by default using "),n_e=a("code"),qor=o("model.eval()"),Nor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s_e=a("code"),jor=o("model.train()"),Dor=l(),l_e=a("p"),Gor=o("Examples:"),Oor=l(),f(u0.$$.fragment),r$e=l(),bc=a("h2"),Xv=a("a"),i_e=a("span"),f(b0.$$.fragment),Vor=l(),d_e=a("span"),Xor=o("AutoModelForInstanceSegmentation"),t$e=l(),br=a("div"),f(v0.$$.fragment),zor=l(),vc=a("p"),Qor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),gV=a("a"),Wor=o("from_pretrained()"),Hor=o(" class method or the "),hV=a("a"),Uor=o("from_config()"),Jor=o(` class
method.`),Yor=l(),F0=a("p"),Kor=o("This class cannot be instantiated directly using "),c_e=a("code"),Zor=o("__init__()"),err=o(" (throws an error)."),orr=l(),mt=a("div"),f(T0.$$.fragment),rrr=l(),f_e=a("p"),trr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),arr=l(),Fc=a("p"),nrr=o(`Note:
Loading a model from its configuration file does `),m_e=a("strong"),srr=o("not"),lrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pV=a("a"),irr=o("from_pretrained()"),drr=o(" to load the model weights."),crr=l(),g_e=a("p"),frr=o("Examples:"),mrr=l(),f(M0.$$.fragment),grr=l(),so=a("div"),f(E0.$$.fragment),hrr=l(),h_e=a("p"),prr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),_rr=l(),_n=a("p"),urr=o("The model class to instantiate is selected based on the "),p_e=a("code"),brr=o("model_type"),vrr=o(` property of the config object (either
passed as an argument or loaded from `),__e=a("code"),Frr=o("pretrained_model_name_or_path"),Trr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=a("code"),Mrr=o("pretrained_model_name_or_path"),Err=o(":"),Crr=l(),b_e=a("ul"),zv=a("li"),v_e=a("strong"),wrr=o("maskformer"),Arr=o(" \u2014 "),_V=a("a"),yrr=o("MaskFormerForInstanceSegmentation"),Lrr=o(" (MaskFormer model)"),xrr=l(),Qv=a("p"),krr=o("The model is set in evaluation mode by default using "),F_e=a("code"),Srr=o("model.eval()"),Rrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T_e=a("code"),Brr=o("model.train()"),Prr=l(),M_e=a("p"),$rr=o("Examples:"),Irr=l(),f(C0.$$.fragment),a$e=l(),Tc=a("h2"),Wv=a("a"),E_e=a("span"),f(w0.$$.fragment),qrr=l(),C_e=a("span"),Nrr=o("TFAutoModel"),n$e=l(),vr=a("div"),f(A0.$$.fragment),jrr=l(),Mc=a("p"),Drr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uV=a("a"),Grr=o("from_pretrained()"),Orr=o(" class method or the "),bV=a("a"),Vrr=o("from_config()"),Xrr=o(` class
method.`),zrr=l(),y0=a("p"),Qrr=o("This class cannot be instantiated directly using "),w_e=a("code"),Wrr=o("__init__()"),Hrr=o(" (throws an error)."),Urr=l(),gt=a("div"),f(L0.$$.fragment),Jrr=l(),A_e=a("p"),Yrr=o("Instantiates one of the base model classes of the library from a configuration."),Krr=l(),Ec=a("p"),Zrr=o(`Note:
Loading a model from its configuration file does `),y_e=a("strong"),etr=o("not"),otr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=a("a"),rtr=o("from_pretrained()"),ttr=o(" to load the model weights."),atr=l(),L_e=a("p"),ntr=o("Examples:"),str=l(),f(x0.$$.fragment),ltr=l(),po=a("div"),f(k0.$$.fragment),itr=l(),x_e=a("p"),dtr=o("Instantiate one of the base model classes of the library from a pretrained model."),ctr=l(),un=a("p"),ftr=o("The model class to instantiate is selected based on the "),k_e=a("code"),mtr=o("model_type"),gtr=o(` property of the config object (either
passed as an argument or loaded from `),S_e=a("code"),htr=o("pretrained_model_name_or_path"),ptr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R_e=a("code"),_tr=o("pretrained_model_name_or_path"),utr=o(":"),btr=l(),x=a("ul"),Hv=a("li"),B_e=a("strong"),vtr=o("albert"),Ftr=o(" \u2014 "),FV=a("a"),Ttr=o("TFAlbertModel"),Mtr=o(" (ALBERT model)"),Etr=l(),Uv=a("li"),P_e=a("strong"),Ctr=o("bart"),wtr=o(" \u2014 "),TV=a("a"),Atr=o("TFBartModel"),ytr=o(" (BART model)"),Ltr=l(),Jv=a("li"),$_e=a("strong"),xtr=o("bert"),ktr=o(" \u2014 "),MV=a("a"),Str=o("TFBertModel"),Rtr=o(" (BERT model)"),Btr=l(),Yv=a("li"),I_e=a("strong"),Ptr=o("blenderbot"),$tr=o(" \u2014 "),EV=a("a"),Itr=o("TFBlenderbotModel"),qtr=o(" (Blenderbot model)"),Ntr=l(),Kv=a("li"),q_e=a("strong"),jtr=o("blenderbot-small"),Dtr=o(" \u2014 "),CV=a("a"),Gtr=o("TFBlenderbotSmallModel"),Otr=o(" (BlenderbotSmall model)"),Vtr=l(),Zv=a("li"),N_e=a("strong"),Xtr=o("camembert"),ztr=o(" \u2014 "),wV=a("a"),Qtr=o("TFCamembertModel"),Wtr=o(" (CamemBERT model)"),Htr=l(),eF=a("li"),j_e=a("strong"),Utr=o("clip"),Jtr=o(" \u2014 "),AV=a("a"),Ytr=o("TFCLIPModel"),Ktr=o(" (CLIP model)"),Ztr=l(),oF=a("li"),D_e=a("strong"),ear=o("convbert"),oar=o(" \u2014 "),yV=a("a"),rar=o("TFConvBertModel"),tar=o(" (ConvBERT model)"),aar=l(),rF=a("li"),G_e=a("strong"),nar=o("convnext"),sar=o(" \u2014 "),LV=a("a"),lar=o("TFConvNextModel"),iar=o(" (ConvNext model)"),dar=l(),tF=a("li"),O_e=a("strong"),car=o("ctrl"),far=o(" \u2014 "),xV=a("a"),mar=o("TFCTRLModel"),gar=o(" (CTRL model)"),har=l(),aF=a("li"),V_e=a("strong"),par=o("deberta"),_ar=o(" \u2014 "),kV=a("a"),uar=o("TFDebertaModel"),bar=o(" (DeBERTa model)"),Far=l(),nF=a("li"),X_e=a("strong"),Tar=o("deberta-v2"),Mar=o(" \u2014 "),SV=a("a"),Ear=o("TFDebertaV2Model"),Car=o(" (DeBERTa-v2 model)"),war=l(),sF=a("li"),z_e=a("strong"),Aar=o("distilbert"),yar=o(" \u2014 "),RV=a("a"),Lar=o("TFDistilBertModel"),xar=o(" (DistilBERT model)"),kar=l(),lF=a("li"),Q_e=a("strong"),Sar=o("dpr"),Rar=o(" \u2014 "),BV=a("a"),Bar=o("TFDPRQuestionEncoder"),Par=o(" (DPR model)"),$ar=l(),iF=a("li"),W_e=a("strong"),Iar=o("electra"),qar=o(" \u2014 "),PV=a("a"),Nar=o("TFElectraModel"),jar=o(" (ELECTRA model)"),Dar=l(),dF=a("li"),H_e=a("strong"),Gar=o("flaubert"),Oar=o(" \u2014 "),$V=a("a"),Var=o("TFFlaubertModel"),Xar=o(" (FlauBERT model)"),zar=l(),Js=a("li"),U_e=a("strong"),Qar=o("funnel"),War=o(" \u2014 "),IV=a("a"),Har=o("TFFunnelModel"),Uar=o(" or "),qV=a("a"),Jar=o("TFFunnelBaseModel"),Yar=o(" (Funnel Transformer model)"),Kar=l(),cF=a("li"),J_e=a("strong"),Zar=o("gpt2"),enr=o(" \u2014 "),NV=a("a"),onr=o("TFGPT2Model"),rnr=o(" (OpenAI GPT-2 model)"),tnr=l(),fF=a("li"),Y_e=a("strong"),anr=o("gptj"),nnr=o(" \u2014 "),jV=a("a"),snr=o("TFGPTJModel"),lnr=o(" (GPT-J model)"),inr=l(),mF=a("li"),K_e=a("strong"),dnr=o("hubert"),cnr=o(" \u2014 "),DV=a("a"),fnr=o("TFHubertModel"),mnr=o(" (Hubert model)"),gnr=l(),gF=a("li"),Z_e=a("strong"),hnr=o("layoutlm"),pnr=o(" \u2014 "),GV=a("a"),_nr=o("TFLayoutLMModel"),unr=o(" (LayoutLM model)"),bnr=l(),hF=a("li"),eue=a("strong"),vnr=o("led"),Fnr=o(" \u2014 "),OV=a("a"),Tnr=o("TFLEDModel"),Mnr=o(" (LED model)"),Enr=l(),pF=a("li"),oue=a("strong"),Cnr=o("longformer"),wnr=o(" \u2014 "),VV=a("a"),Anr=o("TFLongformerModel"),ynr=o(" (Longformer model)"),Lnr=l(),_F=a("li"),rue=a("strong"),xnr=o("lxmert"),knr=o(" \u2014 "),XV=a("a"),Snr=o("TFLxmertModel"),Rnr=o(" (LXMERT model)"),Bnr=l(),uF=a("li"),tue=a("strong"),Pnr=o("marian"),$nr=o(" \u2014 "),zV=a("a"),Inr=o("TFMarianModel"),qnr=o(" (Marian model)"),Nnr=l(),bF=a("li"),aue=a("strong"),jnr=o("mbart"),Dnr=o(" \u2014 "),QV=a("a"),Gnr=o("TFMBartModel"),Onr=o(" (mBART model)"),Vnr=l(),vF=a("li"),nue=a("strong"),Xnr=o("mobilebert"),znr=o(" \u2014 "),WV=a("a"),Qnr=o("TFMobileBertModel"),Wnr=o(" (MobileBERT model)"),Hnr=l(),FF=a("li"),sue=a("strong"),Unr=o("mpnet"),Jnr=o(" \u2014 "),HV=a("a"),Ynr=o("TFMPNetModel"),Knr=o(" (MPNet model)"),Znr=l(),TF=a("li"),lue=a("strong"),esr=o("mt5"),osr=o(" \u2014 "),UV=a("a"),rsr=o("TFMT5Model"),tsr=o(" (mT5 model)"),asr=l(),MF=a("li"),iue=a("strong"),nsr=o("openai-gpt"),ssr=o(" \u2014 "),JV=a("a"),lsr=o("TFOpenAIGPTModel"),isr=o(" (OpenAI GPT model)"),dsr=l(),EF=a("li"),due=a("strong"),csr=o("pegasus"),fsr=o(" \u2014 "),YV=a("a"),msr=o("TFPegasusModel"),gsr=o(" (Pegasus model)"),hsr=l(),CF=a("li"),cue=a("strong"),psr=o("rembert"),_sr=o(" \u2014 "),KV=a("a"),usr=o("TFRemBertModel"),bsr=o(" (RemBERT model)"),vsr=l(),wF=a("li"),fue=a("strong"),Fsr=o("roberta"),Tsr=o(" \u2014 "),ZV=a("a"),Msr=o("TFRobertaModel"),Esr=o(" (RoBERTa model)"),Csr=l(),AF=a("li"),mue=a("strong"),wsr=o("roformer"),Asr=o(" \u2014 "),eX=a("a"),ysr=o("TFRoFormerModel"),Lsr=o(" (RoFormer model)"),xsr=l(),yF=a("li"),gue=a("strong"),ksr=o("speech_to_text"),Ssr=o(" \u2014 "),oX=a("a"),Rsr=o("TFSpeech2TextModel"),Bsr=o(" (Speech2Text model)"),Psr=l(),LF=a("li"),hue=a("strong"),$sr=o("t5"),Isr=o(" \u2014 "),rX=a("a"),qsr=o("TFT5Model"),Nsr=o(" (T5 model)"),jsr=l(),xF=a("li"),pue=a("strong"),Dsr=o("tapas"),Gsr=o(" \u2014 "),tX=a("a"),Osr=o("TFTapasModel"),Vsr=o(" (TAPAS model)"),Xsr=l(),kF=a("li"),_ue=a("strong"),zsr=o("transfo-xl"),Qsr=o(" \u2014 "),aX=a("a"),Wsr=o("TFTransfoXLModel"),Hsr=o(" (Transformer-XL model)"),Usr=l(),SF=a("li"),uue=a("strong"),Jsr=o("vit"),Ysr=o(" \u2014 "),nX=a("a"),Ksr=o("TFViTModel"),Zsr=o(" (ViT model)"),elr=l(),RF=a("li"),bue=a("strong"),olr=o("vit_mae"),rlr=o(" \u2014 "),sX=a("a"),tlr=o("TFViTMAEModel"),alr=o(" (ViTMAE model)"),nlr=l(),BF=a("li"),vue=a("strong"),slr=o("wav2vec2"),llr=o(" \u2014 "),lX=a("a"),ilr=o("TFWav2Vec2Model"),dlr=o(" (Wav2Vec2 model)"),clr=l(),PF=a("li"),Fue=a("strong"),flr=o("xlm"),mlr=o(" \u2014 "),iX=a("a"),glr=o("TFXLMModel"),hlr=o(" (XLM model)"),plr=l(),$F=a("li"),Tue=a("strong"),_lr=o("xlm-roberta"),ulr=o(" \u2014 "),dX=a("a"),blr=o("TFXLMRobertaModel"),vlr=o(" (XLM-RoBERTa model)"),Flr=l(),IF=a("li"),Mue=a("strong"),Tlr=o("xlnet"),Mlr=o(" \u2014 "),cX=a("a"),Elr=o("TFXLNetModel"),Clr=o(" (XLNet model)"),wlr=l(),Eue=a("p"),Alr=o("Examples:"),ylr=l(),f(S0.$$.fragment),s$e=l(),Cc=a("h2"),qF=a("a"),Cue=a("span"),f(R0.$$.fragment),Llr=l(),wue=a("span"),xlr=o("TFAutoModelForPreTraining"),l$e=l(),Fr=a("div"),f(B0.$$.fragment),klr=l(),wc=a("p"),Slr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fX=a("a"),Rlr=o("from_pretrained()"),Blr=o(" class method or the "),mX=a("a"),Plr=o("from_config()"),$lr=o(` class
method.`),Ilr=l(),P0=a("p"),qlr=o("This class cannot be instantiated directly using "),Aue=a("code"),Nlr=o("__init__()"),jlr=o(" (throws an error)."),Dlr=l(),ht=a("div"),f($0.$$.fragment),Glr=l(),yue=a("p"),Olr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Vlr=l(),Ac=a("p"),Xlr=o(`Note:
Loading a model from its configuration file does `),Lue=a("strong"),zlr=o("not"),Qlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=a("a"),Wlr=o("from_pretrained()"),Hlr=o(" to load the model weights."),Ulr=l(),xue=a("p"),Jlr=o("Examples:"),Ylr=l(),f(I0.$$.fragment),Klr=l(),_o=a("div"),f(q0.$$.fragment),Zlr=l(),kue=a("p"),eir=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),oir=l(),bn=a("p"),rir=o("The model class to instantiate is selected based on the "),Sue=a("code"),tir=o("model_type"),air=o(` property of the config object (either
passed as an argument or loaded from `),Rue=a("code"),nir=o("pretrained_model_name_or_path"),sir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=a("code"),lir=o("pretrained_model_name_or_path"),iir=o(":"),dir=l(),U=a("ul"),NF=a("li"),Pue=a("strong"),cir=o("albert"),fir=o(" \u2014 "),hX=a("a"),mir=o("TFAlbertForPreTraining"),gir=o(" (ALBERT model)"),hir=l(),jF=a("li"),$ue=a("strong"),pir=o("bart"),_ir=o(" \u2014 "),pX=a("a"),uir=o("TFBartForConditionalGeneration"),bir=o(" (BART model)"),vir=l(),DF=a("li"),Iue=a("strong"),Fir=o("bert"),Tir=o(" \u2014 "),_X=a("a"),Mir=o("TFBertForPreTraining"),Eir=o(" (BERT model)"),Cir=l(),GF=a("li"),que=a("strong"),wir=o("camembert"),Air=o(" \u2014 "),uX=a("a"),yir=o("TFCamembertForMaskedLM"),Lir=o(" (CamemBERT model)"),xir=l(),OF=a("li"),Nue=a("strong"),kir=o("ctrl"),Sir=o(" \u2014 "),bX=a("a"),Rir=o("TFCTRLLMHeadModel"),Bir=o(" (CTRL model)"),Pir=l(),VF=a("li"),jue=a("strong"),$ir=o("distilbert"),Iir=o(" \u2014 "),vX=a("a"),qir=o("TFDistilBertForMaskedLM"),Nir=o(" (DistilBERT model)"),jir=l(),XF=a("li"),Due=a("strong"),Dir=o("electra"),Gir=o(" \u2014 "),FX=a("a"),Oir=o("TFElectraForPreTraining"),Vir=o(" (ELECTRA model)"),Xir=l(),zF=a("li"),Gue=a("strong"),zir=o("flaubert"),Qir=o(" \u2014 "),TX=a("a"),Wir=o("TFFlaubertWithLMHeadModel"),Hir=o(" (FlauBERT model)"),Uir=l(),QF=a("li"),Oue=a("strong"),Jir=o("funnel"),Yir=o(" \u2014 "),MX=a("a"),Kir=o("TFFunnelForPreTraining"),Zir=o(" (Funnel Transformer model)"),edr=l(),WF=a("li"),Vue=a("strong"),odr=o("gpt2"),rdr=o(" \u2014 "),EX=a("a"),tdr=o("TFGPT2LMHeadModel"),adr=o(" (OpenAI GPT-2 model)"),ndr=l(),HF=a("li"),Xue=a("strong"),sdr=o("layoutlm"),ldr=o(" \u2014 "),CX=a("a"),idr=o("TFLayoutLMForMaskedLM"),ddr=o(" (LayoutLM model)"),cdr=l(),UF=a("li"),zue=a("strong"),fdr=o("lxmert"),mdr=o(" \u2014 "),wX=a("a"),gdr=o("TFLxmertForPreTraining"),hdr=o(" (LXMERT model)"),pdr=l(),JF=a("li"),Que=a("strong"),_dr=o("mobilebert"),udr=o(" \u2014 "),AX=a("a"),bdr=o("TFMobileBertForPreTraining"),vdr=o(" (MobileBERT model)"),Fdr=l(),YF=a("li"),Wue=a("strong"),Tdr=o("mpnet"),Mdr=o(" \u2014 "),yX=a("a"),Edr=o("TFMPNetForMaskedLM"),Cdr=o(" (MPNet model)"),wdr=l(),KF=a("li"),Hue=a("strong"),Adr=o("openai-gpt"),ydr=o(" \u2014 "),LX=a("a"),Ldr=o("TFOpenAIGPTLMHeadModel"),xdr=o(" (OpenAI GPT model)"),kdr=l(),ZF=a("li"),Uue=a("strong"),Sdr=o("roberta"),Rdr=o(" \u2014 "),xX=a("a"),Bdr=o("TFRobertaForMaskedLM"),Pdr=o(" (RoBERTa model)"),$dr=l(),eT=a("li"),Jue=a("strong"),Idr=o("t5"),qdr=o(" \u2014 "),kX=a("a"),Ndr=o("TFT5ForConditionalGeneration"),jdr=o(" (T5 model)"),Ddr=l(),oT=a("li"),Yue=a("strong"),Gdr=o("tapas"),Odr=o(" \u2014 "),SX=a("a"),Vdr=o("TFTapasForMaskedLM"),Xdr=o(" (TAPAS model)"),zdr=l(),rT=a("li"),Kue=a("strong"),Qdr=o("transfo-xl"),Wdr=o(" \u2014 "),RX=a("a"),Hdr=o("TFTransfoXLLMHeadModel"),Udr=o(" (Transformer-XL model)"),Jdr=l(),tT=a("li"),Zue=a("strong"),Ydr=o("vit_mae"),Kdr=o(" \u2014 "),BX=a("a"),Zdr=o("TFViTMAEForPreTraining"),ecr=o(" (ViTMAE model)"),ocr=l(),aT=a("li"),e5e=a("strong"),rcr=o("xlm"),tcr=o(" \u2014 "),PX=a("a"),acr=o("TFXLMWithLMHeadModel"),ncr=o(" (XLM model)"),scr=l(),nT=a("li"),o5e=a("strong"),lcr=o("xlm-roberta"),icr=o(" \u2014 "),$X=a("a"),dcr=o("TFXLMRobertaForMaskedLM"),ccr=o(" (XLM-RoBERTa model)"),fcr=l(),sT=a("li"),r5e=a("strong"),mcr=o("xlnet"),gcr=o(" \u2014 "),IX=a("a"),hcr=o("TFXLNetLMHeadModel"),pcr=o(" (XLNet model)"),_cr=l(),t5e=a("p"),ucr=o("Examples:"),bcr=l(),f(N0.$$.fragment),i$e=l(),yc=a("h2"),lT=a("a"),a5e=a("span"),f(j0.$$.fragment),vcr=l(),n5e=a("span"),Fcr=o("TFAutoModelForCausalLM"),d$e=l(),Tr=a("div"),f(D0.$$.fragment),Tcr=l(),Lc=a("p"),Mcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qX=a("a"),Ecr=o("from_pretrained()"),Ccr=o(" class method or the "),NX=a("a"),wcr=o("from_config()"),Acr=o(` class
method.`),ycr=l(),G0=a("p"),Lcr=o("This class cannot be instantiated directly using "),s5e=a("code"),xcr=o("__init__()"),kcr=o(" (throws an error)."),Scr=l(),pt=a("div"),f(O0.$$.fragment),Rcr=l(),l5e=a("p"),Bcr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Pcr=l(),xc=a("p"),$cr=o(`Note:
Loading a model from its configuration file does `),i5e=a("strong"),Icr=o("not"),qcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jX=a("a"),Ncr=o("from_pretrained()"),jcr=o(" to load the model weights."),Dcr=l(),d5e=a("p"),Gcr=o("Examples:"),Ocr=l(),f(V0.$$.fragment),Vcr=l(),uo=a("div"),f(X0.$$.fragment),Xcr=l(),c5e=a("p"),zcr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Qcr=l(),vn=a("p"),Wcr=o("The model class to instantiate is selected based on the "),f5e=a("code"),Hcr=o("model_type"),Ucr=o(` property of the config object (either
passed as an argument or loaded from `),m5e=a("code"),Jcr=o("pretrained_model_name_or_path"),Ycr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g5e=a("code"),Kcr=o("pretrained_model_name_or_path"),Zcr=o(":"),efr=l(),ge=a("ul"),iT=a("li"),h5e=a("strong"),ofr=o("bert"),rfr=o(" \u2014 "),DX=a("a"),tfr=o("TFBertLMHeadModel"),afr=o(" (BERT model)"),nfr=l(),dT=a("li"),p5e=a("strong"),sfr=o("camembert"),lfr=o(" \u2014 "),GX=a("a"),ifr=o("TFCamembertForCausalLM"),dfr=o(" (CamemBERT model)"),cfr=l(),cT=a("li"),_5e=a("strong"),ffr=o("ctrl"),mfr=o(" \u2014 "),OX=a("a"),gfr=o("TFCTRLLMHeadModel"),hfr=o(" (CTRL model)"),pfr=l(),fT=a("li"),u5e=a("strong"),_fr=o("gpt2"),ufr=o(" \u2014 "),VX=a("a"),bfr=o("TFGPT2LMHeadModel"),vfr=o(" (OpenAI GPT-2 model)"),Ffr=l(),mT=a("li"),b5e=a("strong"),Tfr=o("gptj"),Mfr=o(" \u2014 "),XX=a("a"),Efr=o("TFGPTJForCausalLM"),Cfr=o(" (GPT-J model)"),wfr=l(),gT=a("li"),v5e=a("strong"),Afr=o("openai-gpt"),yfr=o(" \u2014 "),zX=a("a"),Lfr=o("TFOpenAIGPTLMHeadModel"),xfr=o(" (OpenAI GPT model)"),kfr=l(),hT=a("li"),F5e=a("strong"),Sfr=o("rembert"),Rfr=o(" \u2014 "),QX=a("a"),Bfr=o("TFRemBertForCausalLM"),Pfr=o(" (RemBERT model)"),$fr=l(),pT=a("li"),T5e=a("strong"),Ifr=o("roberta"),qfr=o(" \u2014 "),WX=a("a"),Nfr=o("TFRobertaForCausalLM"),jfr=o(" (RoBERTa model)"),Dfr=l(),_T=a("li"),M5e=a("strong"),Gfr=o("roformer"),Ofr=o(" \u2014 "),HX=a("a"),Vfr=o("TFRoFormerForCausalLM"),Xfr=o(" (RoFormer model)"),zfr=l(),uT=a("li"),E5e=a("strong"),Qfr=o("transfo-xl"),Wfr=o(" \u2014 "),UX=a("a"),Hfr=o("TFTransfoXLLMHeadModel"),Ufr=o(" (Transformer-XL model)"),Jfr=l(),bT=a("li"),C5e=a("strong"),Yfr=o("xlm"),Kfr=o(" \u2014 "),JX=a("a"),Zfr=o("TFXLMWithLMHeadModel"),emr=o(" (XLM model)"),omr=l(),vT=a("li"),w5e=a("strong"),rmr=o("xlnet"),tmr=o(" \u2014 "),YX=a("a"),amr=o("TFXLNetLMHeadModel"),nmr=o(" (XLNet model)"),smr=l(),A5e=a("p"),lmr=o("Examples:"),imr=l(),f(z0.$$.fragment),c$e=l(),kc=a("h2"),FT=a("a"),y5e=a("span"),f(Q0.$$.fragment),dmr=l(),L5e=a("span"),cmr=o("TFAutoModelForImageClassification"),f$e=l(),Mr=a("div"),f(W0.$$.fragment),fmr=l(),Sc=a("p"),mmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KX=a("a"),gmr=o("from_pretrained()"),hmr=o(" class method or the "),ZX=a("a"),pmr=o("from_config()"),_mr=o(` class
method.`),umr=l(),H0=a("p"),bmr=o("This class cannot be instantiated directly using "),x5e=a("code"),vmr=o("__init__()"),Fmr=o(" (throws an error)."),Tmr=l(),_t=a("div"),f(U0.$$.fragment),Mmr=l(),k5e=a("p"),Emr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Cmr=l(),Rc=a("p"),wmr=o(`Note:
Loading a model from its configuration file does `),S5e=a("strong"),Amr=o("not"),ymr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=a("a"),Lmr=o("from_pretrained()"),xmr=o(" to load the model weights."),kmr=l(),R5e=a("p"),Smr=o("Examples:"),Rmr=l(),f(J0.$$.fragment),Bmr=l(),bo=a("div"),f(Y0.$$.fragment),Pmr=l(),B5e=a("p"),$mr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Imr=l(),Fn=a("p"),qmr=o("The model class to instantiate is selected based on the "),P5e=a("code"),Nmr=o("model_type"),jmr=o(` property of the config object (either
passed as an argument or loaded from `),$5e=a("code"),Dmr=o("pretrained_model_name_or_path"),Gmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I5e=a("code"),Omr=o("pretrained_model_name_or_path"),Vmr=o(":"),Xmr=l(),K0=a("ul"),TT=a("li"),q5e=a("strong"),zmr=o("convnext"),Qmr=o(" \u2014 "),oz=a("a"),Wmr=o("TFConvNextForImageClassification"),Hmr=o(" (ConvNext model)"),Umr=l(),MT=a("li"),N5e=a("strong"),Jmr=o("vit"),Ymr=o(" \u2014 "),rz=a("a"),Kmr=o("TFViTForImageClassification"),Zmr=o(" (ViT model)"),egr=l(),j5e=a("p"),ogr=o("Examples:"),rgr=l(),f(Z0.$$.fragment),m$e=l(),Bc=a("h2"),ET=a("a"),D5e=a("span"),f(ey.$$.fragment),tgr=l(),G5e=a("span"),agr=o("TFAutoModelForMaskedLM"),g$e=l(),Er=a("div"),f(oy.$$.fragment),ngr=l(),Pc=a("p"),sgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),tz=a("a"),lgr=o("from_pretrained()"),igr=o(" class method or the "),az=a("a"),dgr=o("from_config()"),cgr=o(` class
method.`),fgr=l(),ry=a("p"),mgr=o("This class cannot be instantiated directly using "),O5e=a("code"),ggr=o("__init__()"),hgr=o(" (throws an error)."),pgr=l(),ut=a("div"),f(ty.$$.fragment),_gr=l(),V5e=a("p"),ugr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bgr=l(),$c=a("p"),vgr=o(`Note:
Loading a model from its configuration file does `),X5e=a("strong"),Fgr=o("not"),Tgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nz=a("a"),Mgr=o("from_pretrained()"),Egr=o(" to load the model weights."),Cgr=l(),z5e=a("p"),wgr=o("Examples:"),Agr=l(),f(ay.$$.fragment),ygr=l(),vo=a("div"),f(ny.$$.fragment),Lgr=l(),Q5e=a("p"),xgr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kgr=l(),Tn=a("p"),Sgr=o("The model class to instantiate is selected based on the "),W5e=a("code"),Rgr=o("model_type"),Bgr=o(` property of the config object (either
passed as an argument or loaded from `),H5e=a("code"),Pgr=o("pretrained_model_name_or_path"),$gr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U5e=a("code"),Igr=o("pretrained_model_name_or_path"),qgr=o(":"),Ngr=l(),K=a("ul"),CT=a("li"),J5e=a("strong"),jgr=o("albert"),Dgr=o(" \u2014 "),sz=a("a"),Ggr=o("TFAlbertForMaskedLM"),Ogr=o(" (ALBERT model)"),Vgr=l(),wT=a("li"),Y5e=a("strong"),Xgr=o("bert"),zgr=o(" \u2014 "),lz=a("a"),Qgr=o("TFBertForMaskedLM"),Wgr=o(" (BERT model)"),Hgr=l(),AT=a("li"),K5e=a("strong"),Ugr=o("camembert"),Jgr=o(" \u2014 "),iz=a("a"),Ygr=o("TFCamembertForMaskedLM"),Kgr=o(" (CamemBERT model)"),Zgr=l(),yT=a("li"),Z5e=a("strong"),ehr=o("convbert"),ohr=o(" \u2014 "),dz=a("a"),rhr=o("TFConvBertForMaskedLM"),thr=o(" (ConvBERT model)"),ahr=l(),LT=a("li"),e1e=a("strong"),nhr=o("deberta"),shr=o(" \u2014 "),cz=a("a"),lhr=o("TFDebertaForMaskedLM"),ihr=o(" (DeBERTa model)"),dhr=l(),xT=a("li"),o1e=a("strong"),chr=o("deberta-v2"),fhr=o(" \u2014 "),fz=a("a"),mhr=o("TFDebertaV2ForMaskedLM"),ghr=o(" (DeBERTa-v2 model)"),hhr=l(),kT=a("li"),r1e=a("strong"),phr=o("distilbert"),_hr=o(" \u2014 "),mz=a("a"),uhr=o("TFDistilBertForMaskedLM"),bhr=o(" (DistilBERT model)"),vhr=l(),ST=a("li"),t1e=a("strong"),Fhr=o("electra"),Thr=o(" \u2014 "),gz=a("a"),Mhr=o("TFElectraForMaskedLM"),Ehr=o(" (ELECTRA model)"),Chr=l(),RT=a("li"),a1e=a("strong"),whr=o("flaubert"),Ahr=o(" \u2014 "),hz=a("a"),yhr=o("TFFlaubertWithLMHeadModel"),Lhr=o(" (FlauBERT model)"),xhr=l(),BT=a("li"),n1e=a("strong"),khr=o("funnel"),Shr=o(" \u2014 "),pz=a("a"),Rhr=o("TFFunnelForMaskedLM"),Bhr=o(" (Funnel Transformer model)"),Phr=l(),PT=a("li"),s1e=a("strong"),$hr=o("layoutlm"),Ihr=o(" \u2014 "),_z=a("a"),qhr=o("TFLayoutLMForMaskedLM"),Nhr=o(" (LayoutLM model)"),jhr=l(),$T=a("li"),l1e=a("strong"),Dhr=o("longformer"),Ghr=o(" \u2014 "),uz=a("a"),Ohr=o("TFLongformerForMaskedLM"),Vhr=o(" (Longformer model)"),Xhr=l(),IT=a("li"),i1e=a("strong"),zhr=o("mobilebert"),Qhr=o(" \u2014 "),bz=a("a"),Whr=o("TFMobileBertForMaskedLM"),Hhr=o(" (MobileBERT model)"),Uhr=l(),qT=a("li"),d1e=a("strong"),Jhr=o("mpnet"),Yhr=o(" \u2014 "),vz=a("a"),Khr=o("TFMPNetForMaskedLM"),Zhr=o(" (MPNet model)"),epr=l(),NT=a("li"),c1e=a("strong"),opr=o("rembert"),rpr=o(" \u2014 "),Fz=a("a"),tpr=o("TFRemBertForMaskedLM"),apr=o(" (RemBERT model)"),npr=l(),jT=a("li"),f1e=a("strong"),spr=o("roberta"),lpr=o(" \u2014 "),Tz=a("a"),ipr=o("TFRobertaForMaskedLM"),dpr=o(" (RoBERTa model)"),cpr=l(),DT=a("li"),m1e=a("strong"),fpr=o("roformer"),mpr=o(" \u2014 "),Mz=a("a"),gpr=o("TFRoFormerForMaskedLM"),hpr=o(" (RoFormer model)"),ppr=l(),GT=a("li"),g1e=a("strong"),_pr=o("tapas"),upr=o(" \u2014 "),Ez=a("a"),bpr=o("TFTapasForMaskedLM"),vpr=o(" (TAPAS model)"),Fpr=l(),OT=a("li"),h1e=a("strong"),Tpr=o("xlm"),Mpr=o(" \u2014 "),Cz=a("a"),Epr=o("TFXLMWithLMHeadModel"),Cpr=o(" (XLM model)"),wpr=l(),VT=a("li"),p1e=a("strong"),Apr=o("xlm-roberta"),ypr=o(" \u2014 "),wz=a("a"),Lpr=o("TFXLMRobertaForMaskedLM"),xpr=o(" (XLM-RoBERTa model)"),kpr=l(),_1e=a("p"),Spr=o("Examples:"),Rpr=l(),f(sy.$$.fragment),h$e=l(),Ic=a("h2"),XT=a("a"),u1e=a("span"),f(ly.$$.fragment),Bpr=l(),b1e=a("span"),Ppr=o("TFAutoModelForSeq2SeqLM"),p$e=l(),Cr=a("div"),f(iy.$$.fragment),$pr=l(),qc=a("p"),Ipr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Az=a("a"),qpr=o("from_pretrained()"),Npr=o(" class method or the "),yz=a("a"),jpr=o("from_config()"),Dpr=o(` class
method.`),Gpr=l(),dy=a("p"),Opr=o("This class cannot be instantiated directly using "),v1e=a("code"),Vpr=o("__init__()"),Xpr=o(" (throws an error)."),zpr=l(),bt=a("div"),f(cy.$$.fragment),Qpr=l(),F1e=a("p"),Wpr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Hpr=l(),Nc=a("p"),Upr=o(`Note:
Loading a model from its configuration file does `),T1e=a("strong"),Jpr=o("not"),Ypr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=a("a"),Kpr=o("from_pretrained()"),Zpr=o(" to load the model weights."),e_r=l(),M1e=a("p"),o_r=o("Examples:"),r_r=l(),f(fy.$$.fragment),t_r=l(),Fo=a("div"),f(my.$$.fragment),a_r=l(),E1e=a("p"),n_r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),s_r=l(),Mn=a("p"),l_r=o("The model class to instantiate is selected based on the "),C1e=a("code"),i_r=o("model_type"),d_r=o(` property of the config object (either
passed as an argument or loaded from `),w1e=a("code"),c_r=o("pretrained_model_name_or_path"),f_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A1e=a("code"),m_r=o("pretrained_model_name_or_path"),g_r=o(":"),h_r=l(),Fe=a("ul"),zT=a("li"),y1e=a("strong"),p_r=o("bart"),__r=o(" \u2014 "),xz=a("a"),u_r=o("TFBartForConditionalGeneration"),b_r=o(" (BART model)"),v_r=l(),QT=a("li"),L1e=a("strong"),F_r=o("blenderbot"),T_r=o(" \u2014 "),kz=a("a"),M_r=o("TFBlenderbotForConditionalGeneration"),E_r=o(" (Blenderbot model)"),C_r=l(),WT=a("li"),x1e=a("strong"),w_r=o("blenderbot-small"),A_r=o(" \u2014 "),Sz=a("a"),y_r=o("TFBlenderbotSmallForConditionalGeneration"),L_r=o(" (BlenderbotSmall model)"),x_r=l(),HT=a("li"),k1e=a("strong"),k_r=o("encoder-decoder"),S_r=o(" \u2014 "),Rz=a("a"),R_r=o("TFEncoderDecoderModel"),B_r=o(" (Encoder decoder model)"),P_r=l(),UT=a("li"),S1e=a("strong"),$_r=o("led"),I_r=o(" \u2014 "),Bz=a("a"),q_r=o("TFLEDForConditionalGeneration"),N_r=o(" (LED model)"),j_r=l(),JT=a("li"),R1e=a("strong"),D_r=o("marian"),G_r=o(" \u2014 "),Pz=a("a"),O_r=o("TFMarianMTModel"),V_r=o(" (Marian model)"),X_r=l(),YT=a("li"),B1e=a("strong"),z_r=o("mbart"),Q_r=o(" \u2014 "),$z=a("a"),W_r=o("TFMBartForConditionalGeneration"),H_r=o(" (mBART model)"),U_r=l(),KT=a("li"),P1e=a("strong"),J_r=o("mt5"),Y_r=o(" \u2014 "),Iz=a("a"),K_r=o("TFMT5ForConditionalGeneration"),Z_r=o(" (mT5 model)"),eur=l(),ZT=a("li"),$1e=a("strong"),our=o("pegasus"),rur=o(" \u2014 "),qz=a("a"),tur=o("TFPegasusForConditionalGeneration"),aur=o(" (Pegasus model)"),nur=l(),e7=a("li"),I1e=a("strong"),sur=o("t5"),lur=o(" \u2014 "),Nz=a("a"),iur=o("TFT5ForConditionalGeneration"),dur=o(" (T5 model)"),cur=l(),q1e=a("p"),fur=o("Examples:"),mur=l(),f(gy.$$.fragment),_$e=l(),jc=a("h2"),o7=a("a"),N1e=a("span"),f(hy.$$.fragment),gur=l(),j1e=a("span"),hur=o("TFAutoModelForSequenceClassification"),u$e=l(),wr=a("div"),f(py.$$.fragment),pur=l(),Dc=a("p"),_ur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jz=a("a"),uur=o("from_pretrained()"),bur=o(" class method or the "),Dz=a("a"),vur=o("from_config()"),Fur=o(` class
method.`),Tur=l(),_y=a("p"),Mur=o("This class cannot be instantiated directly using "),D1e=a("code"),Eur=o("__init__()"),Cur=o(" (throws an error)."),wur=l(),vt=a("div"),f(uy.$$.fragment),Aur=l(),G1e=a("p"),yur=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Lur=l(),Gc=a("p"),xur=o(`Note:
Loading a model from its configuration file does `),O1e=a("strong"),kur=o("not"),Sur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=a("a"),Rur=o("from_pretrained()"),Bur=o(" to load the model weights."),Pur=l(),V1e=a("p"),$ur=o("Examples:"),Iur=l(),f(by.$$.fragment),qur=l(),To=a("div"),f(vy.$$.fragment),Nur=l(),X1e=a("p"),jur=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Dur=l(),En=a("p"),Gur=o("The model class to instantiate is selected based on the "),z1e=a("code"),Our=o("model_type"),Vur=o(` property of the config object (either
passed as an argument or loaded from `),Q1e=a("code"),Xur=o("pretrained_model_name_or_path"),zur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W1e=a("code"),Qur=o("pretrained_model_name_or_path"),Wur=o(":"),Hur=l(),V=a("ul"),r7=a("li"),H1e=a("strong"),Uur=o("albert"),Jur=o(" \u2014 "),Oz=a("a"),Yur=o("TFAlbertForSequenceClassification"),Kur=o(" (ALBERT model)"),Zur=l(),t7=a("li"),U1e=a("strong"),e5r=o("bert"),o5r=o(" \u2014 "),Vz=a("a"),r5r=o("TFBertForSequenceClassification"),t5r=o(" (BERT model)"),a5r=l(),a7=a("li"),J1e=a("strong"),n5r=o("camembert"),s5r=o(" \u2014 "),Xz=a("a"),l5r=o("TFCamembertForSequenceClassification"),i5r=o(" (CamemBERT model)"),d5r=l(),n7=a("li"),Y1e=a("strong"),c5r=o("convbert"),f5r=o(" \u2014 "),zz=a("a"),m5r=o("TFConvBertForSequenceClassification"),g5r=o(" (ConvBERT model)"),h5r=l(),s7=a("li"),K1e=a("strong"),p5r=o("ctrl"),_5r=o(" \u2014 "),Qz=a("a"),u5r=o("TFCTRLForSequenceClassification"),b5r=o(" (CTRL model)"),v5r=l(),l7=a("li"),Z1e=a("strong"),F5r=o("deberta"),T5r=o(" \u2014 "),Wz=a("a"),M5r=o("TFDebertaForSequenceClassification"),E5r=o(" (DeBERTa model)"),C5r=l(),i7=a("li"),e4e=a("strong"),w5r=o("deberta-v2"),A5r=o(" \u2014 "),Hz=a("a"),y5r=o("TFDebertaV2ForSequenceClassification"),L5r=o(" (DeBERTa-v2 model)"),x5r=l(),d7=a("li"),o4e=a("strong"),k5r=o("distilbert"),S5r=o(" \u2014 "),Uz=a("a"),R5r=o("TFDistilBertForSequenceClassification"),B5r=o(" (DistilBERT model)"),P5r=l(),c7=a("li"),r4e=a("strong"),$5r=o("electra"),I5r=o(" \u2014 "),Jz=a("a"),q5r=o("TFElectraForSequenceClassification"),N5r=o(" (ELECTRA model)"),j5r=l(),f7=a("li"),t4e=a("strong"),D5r=o("flaubert"),G5r=o(" \u2014 "),Yz=a("a"),O5r=o("TFFlaubertForSequenceClassification"),V5r=o(" (FlauBERT model)"),X5r=l(),m7=a("li"),a4e=a("strong"),z5r=o("funnel"),Q5r=o(" \u2014 "),Kz=a("a"),W5r=o("TFFunnelForSequenceClassification"),H5r=o(" (Funnel Transformer model)"),U5r=l(),g7=a("li"),n4e=a("strong"),J5r=o("gpt2"),Y5r=o(" \u2014 "),Zz=a("a"),K5r=o("TFGPT2ForSequenceClassification"),Z5r=o(" (OpenAI GPT-2 model)"),e1r=l(),h7=a("li"),s4e=a("strong"),o1r=o("gptj"),r1r=o(" \u2014 "),eQ=a("a"),t1r=o("TFGPTJForSequenceClassification"),a1r=o(" (GPT-J model)"),n1r=l(),p7=a("li"),l4e=a("strong"),s1r=o("layoutlm"),l1r=o(" \u2014 "),oQ=a("a"),i1r=o("TFLayoutLMForSequenceClassification"),d1r=o(" (LayoutLM model)"),c1r=l(),_7=a("li"),i4e=a("strong"),f1r=o("longformer"),m1r=o(" \u2014 "),rQ=a("a"),g1r=o("TFLongformerForSequenceClassification"),h1r=o(" (Longformer model)"),p1r=l(),u7=a("li"),d4e=a("strong"),_1r=o("mobilebert"),u1r=o(" \u2014 "),tQ=a("a"),b1r=o("TFMobileBertForSequenceClassification"),v1r=o(" (MobileBERT model)"),F1r=l(),b7=a("li"),c4e=a("strong"),T1r=o("mpnet"),M1r=o(" \u2014 "),aQ=a("a"),E1r=o("TFMPNetForSequenceClassification"),C1r=o(" (MPNet model)"),w1r=l(),v7=a("li"),f4e=a("strong"),A1r=o("openai-gpt"),y1r=o(" \u2014 "),nQ=a("a"),L1r=o("TFOpenAIGPTForSequenceClassification"),x1r=o(" (OpenAI GPT model)"),k1r=l(),F7=a("li"),m4e=a("strong"),S1r=o("rembert"),R1r=o(" \u2014 "),sQ=a("a"),B1r=o("TFRemBertForSequenceClassification"),P1r=o(" (RemBERT model)"),$1r=l(),T7=a("li"),g4e=a("strong"),I1r=o("roberta"),q1r=o(" \u2014 "),lQ=a("a"),N1r=o("TFRobertaForSequenceClassification"),j1r=o(" (RoBERTa model)"),D1r=l(),M7=a("li"),h4e=a("strong"),G1r=o("roformer"),O1r=o(" \u2014 "),iQ=a("a"),V1r=o("TFRoFormerForSequenceClassification"),X1r=o(" (RoFormer model)"),z1r=l(),E7=a("li"),p4e=a("strong"),Q1r=o("tapas"),W1r=o(" \u2014 "),dQ=a("a"),H1r=o("TFTapasForSequenceClassification"),U1r=o(" (TAPAS model)"),J1r=l(),C7=a("li"),_4e=a("strong"),Y1r=o("transfo-xl"),K1r=o(" \u2014 "),cQ=a("a"),Z1r=o("TFTransfoXLForSequenceClassification"),e4r=o(" (Transformer-XL model)"),o4r=l(),w7=a("li"),u4e=a("strong"),r4r=o("xlm"),t4r=o(" \u2014 "),fQ=a("a"),a4r=o("TFXLMForSequenceClassification"),n4r=o(" (XLM model)"),s4r=l(),A7=a("li"),b4e=a("strong"),l4r=o("xlm-roberta"),i4r=o(" \u2014 "),mQ=a("a"),d4r=o("TFXLMRobertaForSequenceClassification"),c4r=o(" (XLM-RoBERTa model)"),f4r=l(),y7=a("li"),v4e=a("strong"),m4r=o("xlnet"),g4r=o(" \u2014 "),gQ=a("a"),h4r=o("TFXLNetForSequenceClassification"),p4r=o(" (XLNet model)"),_4r=l(),F4e=a("p"),u4r=o("Examples:"),b4r=l(),f(Fy.$$.fragment),b$e=l(),Oc=a("h2"),L7=a("a"),T4e=a("span"),f(Ty.$$.fragment),v4r=l(),M4e=a("span"),F4r=o("TFAutoModelForMultipleChoice"),v$e=l(),Ar=a("div"),f(My.$$.fragment),T4r=l(),Vc=a("p"),M4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hQ=a("a"),E4r=o("from_pretrained()"),C4r=o(" class method or the "),pQ=a("a"),w4r=o("from_config()"),A4r=o(` class
method.`),y4r=l(),Ey=a("p"),L4r=o("This class cannot be instantiated directly using "),E4e=a("code"),x4r=o("__init__()"),k4r=o(" (throws an error)."),S4r=l(),Ft=a("div"),f(Cy.$$.fragment),R4r=l(),C4e=a("p"),B4r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),P4r=l(),Xc=a("p"),$4r=o(`Note:
Loading a model from its configuration file does `),w4e=a("strong"),I4r=o("not"),q4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=a("a"),N4r=o("from_pretrained()"),j4r=o(" to load the model weights."),D4r=l(),A4e=a("p"),G4r=o("Examples:"),O4r=l(),f(wy.$$.fragment),V4r=l(),Mo=a("div"),f(Ay.$$.fragment),X4r=l(),y4e=a("p"),z4r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Q4r=l(),Cn=a("p"),W4r=o("The model class to instantiate is selected based on the "),L4e=a("code"),H4r=o("model_type"),U4r=o(` property of the config object (either
passed as an argument or loaded from `),x4e=a("code"),J4r=o("pretrained_model_name_or_path"),Y4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=a("code"),K4r=o("pretrained_model_name_or_path"),Z4r=o(":"),ebr=l(),se=a("ul"),x7=a("li"),S4e=a("strong"),obr=o("albert"),rbr=o(" \u2014 "),uQ=a("a"),tbr=o("TFAlbertForMultipleChoice"),abr=o(" (ALBERT model)"),nbr=l(),k7=a("li"),R4e=a("strong"),sbr=o("bert"),lbr=o(" \u2014 "),bQ=a("a"),ibr=o("TFBertForMultipleChoice"),dbr=o(" (BERT model)"),cbr=l(),S7=a("li"),B4e=a("strong"),fbr=o("camembert"),mbr=o(" \u2014 "),vQ=a("a"),gbr=o("TFCamembertForMultipleChoice"),hbr=o(" (CamemBERT model)"),pbr=l(),R7=a("li"),P4e=a("strong"),_br=o("convbert"),ubr=o(" \u2014 "),FQ=a("a"),bbr=o("TFConvBertForMultipleChoice"),vbr=o(" (ConvBERT model)"),Fbr=l(),B7=a("li"),$4e=a("strong"),Tbr=o("distilbert"),Mbr=o(" \u2014 "),TQ=a("a"),Ebr=o("TFDistilBertForMultipleChoice"),Cbr=o(" (DistilBERT model)"),wbr=l(),P7=a("li"),I4e=a("strong"),Abr=o("electra"),ybr=o(" \u2014 "),MQ=a("a"),Lbr=o("TFElectraForMultipleChoice"),xbr=o(" (ELECTRA model)"),kbr=l(),$7=a("li"),q4e=a("strong"),Sbr=o("flaubert"),Rbr=o(" \u2014 "),EQ=a("a"),Bbr=o("TFFlaubertForMultipleChoice"),Pbr=o(" (FlauBERT model)"),$br=l(),I7=a("li"),N4e=a("strong"),Ibr=o("funnel"),qbr=o(" \u2014 "),CQ=a("a"),Nbr=o("TFFunnelForMultipleChoice"),jbr=o(" (Funnel Transformer model)"),Dbr=l(),q7=a("li"),j4e=a("strong"),Gbr=o("longformer"),Obr=o(" \u2014 "),wQ=a("a"),Vbr=o("TFLongformerForMultipleChoice"),Xbr=o(" (Longformer model)"),zbr=l(),N7=a("li"),D4e=a("strong"),Qbr=o("mobilebert"),Wbr=o(" \u2014 "),AQ=a("a"),Hbr=o("TFMobileBertForMultipleChoice"),Ubr=o(" (MobileBERT model)"),Jbr=l(),j7=a("li"),G4e=a("strong"),Ybr=o("mpnet"),Kbr=o(" \u2014 "),yQ=a("a"),Zbr=o("TFMPNetForMultipleChoice"),e2r=o(" (MPNet model)"),o2r=l(),D7=a("li"),O4e=a("strong"),r2r=o("rembert"),t2r=o(" \u2014 "),LQ=a("a"),a2r=o("TFRemBertForMultipleChoice"),n2r=o(" (RemBERT model)"),s2r=l(),G7=a("li"),V4e=a("strong"),l2r=o("roberta"),i2r=o(" \u2014 "),xQ=a("a"),d2r=o("TFRobertaForMultipleChoice"),c2r=o(" (RoBERTa model)"),f2r=l(),O7=a("li"),X4e=a("strong"),m2r=o("roformer"),g2r=o(" \u2014 "),kQ=a("a"),h2r=o("TFRoFormerForMultipleChoice"),p2r=o(" (RoFormer model)"),_2r=l(),V7=a("li"),z4e=a("strong"),u2r=o("xlm"),b2r=o(" \u2014 "),SQ=a("a"),v2r=o("TFXLMForMultipleChoice"),F2r=o(" (XLM model)"),T2r=l(),X7=a("li"),Q4e=a("strong"),M2r=o("xlm-roberta"),E2r=o(" \u2014 "),RQ=a("a"),C2r=o("TFXLMRobertaForMultipleChoice"),w2r=o(" (XLM-RoBERTa model)"),A2r=l(),z7=a("li"),W4e=a("strong"),y2r=o("xlnet"),L2r=o(" \u2014 "),BQ=a("a"),x2r=o("TFXLNetForMultipleChoice"),k2r=o(" (XLNet model)"),S2r=l(),H4e=a("p"),R2r=o("Examples:"),B2r=l(),f(yy.$$.fragment),F$e=l(),zc=a("h2"),Q7=a("a"),U4e=a("span"),f(Ly.$$.fragment),P2r=l(),J4e=a("span"),$2r=o("TFAutoModelForTableQuestionAnswering"),T$e=l(),yr=a("div"),f(xy.$$.fragment),I2r=l(),Qc=a("p"),q2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),PQ=a("a"),N2r=o("from_pretrained()"),j2r=o(" class method or the "),$Q=a("a"),D2r=o("from_config()"),G2r=o(` class
method.`),O2r=l(),ky=a("p"),V2r=o("This class cannot be instantiated directly using "),Y4e=a("code"),X2r=o("__init__()"),z2r=o(" (throws an error)."),Q2r=l(),Tt=a("div"),f(Sy.$$.fragment),W2r=l(),K4e=a("p"),H2r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),U2r=l(),Wc=a("p"),J2r=o(`Note:
Loading a model from its configuration file does `),Z4e=a("strong"),Y2r=o("not"),K2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=a("a"),Z2r=o("from_pretrained()"),evr=o(" to load the model weights."),ovr=l(),ebe=a("p"),rvr=o("Examples:"),tvr=l(),f(Ry.$$.fragment),avr=l(),Eo=a("div"),f(By.$$.fragment),nvr=l(),obe=a("p"),svr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),lvr=l(),wn=a("p"),ivr=o("The model class to instantiate is selected based on the "),rbe=a("code"),dvr=o("model_type"),cvr=o(` property of the config object (either
passed as an argument or loaded from `),tbe=a("code"),fvr=o("pretrained_model_name_or_path"),mvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),abe=a("code"),gvr=o("pretrained_model_name_or_path"),hvr=o(":"),pvr=l(),nbe=a("ul"),W7=a("li"),sbe=a("strong"),_vr=o("tapas"),uvr=o(" \u2014 "),qQ=a("a"),bvr=o("TFTapasForQuestionAnswering"),vvr=o(" (TAPAS model)"),Fvr=l(),lbe=a("p"),Tvr=o("Examples:"),Mvr=l(),f(Py.$$.fragment),M$e=l(),Hc=a("h2"),H7=a("a"),ibe=a("span"),f($y.$$.fragment),Evr=l(),dbe=a("span"),Cvr=o("TFAutoModelForTokenClassification"),E$e=l(),Lr=a("div"),f(Iy.$$.fragment),wvr=l(),Uc=a("p"),Avr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),NQ=a("a"),yvr=o("from_pretrained()"),Lvr=o(" class method or the "),jQ=a("a"),xvr=o("from_config()"),kvr=o(` class
method.`),Svr=l(),qy=a("p"),Rvr=o("This class cannot be instantiated directly using "),cbe=a("code"),Bvr=o("__init__()"),Pvr=o(" (throws an error)."),$vr=l(),Mt=a("div"),f(Ny.$$.fragment),Ivr=l(),fbe=a("p"),qvr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Nvr=l(),Jc=a("p"),jvr=o(`Note:
Loading a model from its configuration file does `),mbe=a("strong"),Dvr=o("not"),Gvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=a("a"),Ovr=o("from_pretrained()"),Vvr=o(" to load the model weights."),Xvr=l(),gbe=a("p"),zvr=o("Examples:"),Qvr=l(),f(jy.$$.fragment),Wvr=l(),Co=a("div"),f(Dy.$$.fragment),Hvr=l(),hbe=a("p"),Uvr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Jvr=l(),An=a("p"),Yvr=o("The model class to instantiate is selected based on the "),pbe=a("code"),Kvr=o("model_type"),Zvr=o(` property of the config object (either
passed as an argument or loaded from `),_be=a("code"),eFr=o("pretrained_model_name_or_path"),oFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=a("code"),rFr=o("pretrained_model_name_or_path"),tFr=o(":"),aFr=l(),Z=a("ul"),U7=a("li"),bbe=a("strong"),nFr=o("albert"),sFr=o(" \u2014 "),GQ=a("a"),lFr=o("TFAlbertForTokenClassification"),iFr=o(" (ALBERT model)"),dFr=l(),J7=a("li"),vbe=a("strong"),cFr=o("bert"),fFr=o(" \u2014 "),OQ=a("a"),mFr=o("TFBertForTokenClassification"),gFr=o(" (BERT model)"),hFr=l(),Y7=a("li"),Fbe=a("strong"),pFr=o("camembert"),_Fr=o(" \u2014 "),VQ=a("a"),uFr=o("TFCamembertForTokenClassification"),bFr=o(" (CamemBERT model)"),vFr=l(),K7=a("li"),Tbe=a("strong"),FFr=o("convbert"),TFr=o(" \u2014 "),XQ=a("a"),MFr=o("TFConvBertForTokenClassification"),EFr=o(" (ConvBERT model)"),CFr=l(),Z7=a("li"),Mbe=a("strong"),wFr=o("deberta"),AFr=o(" \u2014 "),zQ=a("a"),yFr=o("TFDebertaForTokenClassification"),LFr=o(" (DeBERTa model)"),xFr=l(),eM=a("li"),Ebe=a("strong"),kFr=o("deberta-v2"),SFr=o(" \u2014 "),QQ=a("a"),RFr=o("TFDebertaV2ForTokenClassification"),BFr=o(" (DeBERTa-v2 model)"),PFr=l(),oM=a("li"),Cbe=a("strong"),$Fr=o("distilbert"),IFr=o(" \u2014 "),WQ=a("a"),qFr=o("TFDistilBertForTokenClassification"),NFr=o(" (DistilBERT model)"),jFr=l(),rM=a("li"),wbe=a("strong"),DFr=o("electra"),GFr=o(" \u2014 "),HQ=a("a"),OFr=o("TFElectraForTokenClassification"),VFr=o(" (ELECTRA model)"),XFr=l(),tM=a("li"),Abe=a("strong"),zFr=o("flaubert"),QFr=o(" \u2014 "),UQ=a("a"),WFr=o("TFFlaubertForTokenClassification"),HFr=o(" (FlauBERT model)"),UFr=l(),aM=a("li"),ybe=a("strong"),JFr=o("funnel"),YFr=o(" \u2014 "),JQ=a("a"),KFr=o("TFFunnelForTokenClassification"),ZFr=o(" (Funnel Transformer model)"),eTr=l(),nM=a("li"),Lbe=a("strong"),oTr=o("layoutlm"),rTr=o(" \u2014 "),YQ=a("a"),tTr=o("TFLayoutLMForTokenClassification"),aTr=o(" (LayoutLM model)"),nTr=l(),sM=a("li"),xbe=a("strong"),sTr=o("longformer"),lTr=o(" \u2014 "),KQ=a("a"),iTr=o("TFLongformerForTokenClassification"),dTr=o(" (Longformer model)"),cTr=l(),lM=a("li"),kbe=a("strong"),fTr=o("mobilebert"),mTr=o(" \u2014 "),ZQ=a("a"),gTr=o("TFMobileBertForTokenClassification"),hTr=o(" (MobileBERT model)"),pTr=l(),iM=a("li"),Sbe=a("strong"),_Tr=o("mpnet"),uTr=o(" \u2014 "),eW=a("a"),bTr=o("TFMPNetForTokenClassification"),vTr=o(" (MPNet model)"),FTr=l(),dM=a("li"),Rbe=a("strong"),TTr=o("rembert"),MTr=o(" \u2014 "),oW=a("a"),ETr=o("TFRemBertForTokenClassification"),CTr=o(" (RemBERT model)"),wTr=l(),cM=a("li"),Bbe=a("strong"),ATr=o("roberta"),yTr=o(" \u2014 "),rW=a("a"),LTr=o("TFRobertaForTokenClassification"),xTr=o(" (RoBERTa model)"),kTr=l(),fM=a("li"),Pbe=a("strong"),STr=o("roformer"),RTr=o(" \u2014 "),tW=a("a"),BTr=o("TFRoFormerForTokenClassification"),PTr=o(" (RoFormer model)"),$Tr=l(),mM=a("li"),$be=a("strong"),ITr=o("xlm"),qTr=o(" \u2014 "),aW=a("a"),NTr=o("TFXLMForTokenClassification"),jTr=o(" (XLM model)"),DTr=l(),gM=a("li"),Ibe=a("strong"),GTr=o("xlm-roberta"),OTr=o(" \u2014 "),nW=a("a"),VTr=o("TFXLMRobertaForTokenClassification"),XTr=o(" (XLM-RoBERTa model)"),zTr=l(),hM=a("li"),qbe=a("strong"),QTr=o("xlnet"),WTr=o(" \u2014 "),sW=a("a"),HTr=o("TFXLNetForTokenClassification"),UTr=o(" (XLNet model)"),JTr=l(),Nbe=a("p"),YTr=o("Examples:"),KTr=l(),f(Gy.$$.fragment),C$e=l(),Yc=a("h2"),pM=a("a"),jbe=a("span"),f(Oy.$$.fragment),ZTr=l(),Dbe=a("span"),e7r=o("TFAutoModelForQuestionAnswering"),w$e=l(),xr=a("div"),f(Vy.$$.fragment),o7r=l(),Kc=a("p"),r7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),lW=a("a"),t7r=o("from_pretrained()"),a7r=o(" class method or the "),iW=a("a"),n7r=o("from_config()"),s7r=o(` class
method.`),l7r=l(),Xy=a("p"),i7r=o("This class cannot be instantiated directly using "),Gbe=a("code"),d7r=o("__init__()"),c7r=o(" (throws an error)."),f7r=l(),Et=a("div"),f(zy.$$.fragment),m7r=l(),Obe=a("p"),g7r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),h7r=l(),Zc=a("p"),p7r=o(`Note:
Loading a model from its configuration file does `),Vbe=a("strong"),_7r=o("not"),u7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),b7r=o("from_pretrained()"),v7r=o(" to load the model weights."),F7r=l(),Xbe=a("p"),T7r=o("Examples:"),M7r=l(),f(Qy.$$.fragment),E7r=l(),wo=a("div"),f(Wy.$$.fragment),C7r=l(),zbe=a("p"),w7r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),A7r=l(),yn=a("p"),y7r=o("The model class to instantiate is selected based on the "),Qbe=a("code"),L7r=o("model_type"),x7r=o(` property of the config object (either
passed as an argument or loaded from `),Wbe=a("code"),k7r=o("pretrained_model_name_or_path"),S7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=a("code"),R7r=o("pretrained_model_name_or_path"),B7r=o(":"),P7r=l(),ee=a("ul"),_M=a("li"),Ube=a("strong"),$7r=o("albert"),I7r=o(" \u2014 "),cW=a("a"),q7r=o("TFAlbertForQuestionAnswering"),N7r=o(" (ALBERT model)"),j7r=l(),uM=a("li"),Jbe=a("strong"),D7r=o("bert"),G7r=o(" \u2014 "),fW=a("a"),O7r=o("TFBertForQuestionAnswering"),V7r=o(" (BERT model)"),X7r=l(),bM=a("li"),Ybe=a("strong"),z7r=o("camembert"),Q7r=o(" \u2014 "),mW=a("a"),W7r=o("TFCamembertForQuestionAnswering"),H7r=o(" (CamemBERT model)"),U7r=l(),vM=a("li"),Kbe=a("strong"),J7r=o("convbert"),Y7r=o(" \u2014 "),gW=a("a"),K7r=o("TFConvBertForQuestionAnswering"),Z7r=o(" (ConvBERT model)"),eMr=l(),FM=a("li"),Zbe=a("strong"),oMr=o("deberta"),rMr=o(" \u2014 "),hW=a("a"),tMr=o("TFDebertaForQuestionAnswering"),aMr=o(" (DeBERTa model)"),nMr=l(),TM=a("li"),e2e=a("strong"),sMr=o("deberta-v2"),lMr=o(" \u2014 "),pW=a("a"),iMr=o("TFDebertaV2ForQuestionAnswering"),dMr=o(" (DeBERTa-v2 model)"),cMr=l(),MM=a("li"),o2e=a("strong"),fMr=o("distilbert"),mMr=o(" \u2014 "),_W=a("a"),gMr=o("TFDistilBertForQuestionAnswering"),hMr=o(" (DistilBERT model)"),pMr=l(),EM=a("li"),r2e=a("strong"),_Mr=o("electra"),uMr=o(" \u2014 "),uW=a("a"),bMr=o("TFElectraForQuestionAnswering"),vMr=o(" (ELECTRA model)"),FMr=l(),CM=a("li"),t2e=a("strong"),TMr=o("flaubert"),MMr=o(" \u2014 "),bW=a("a"),EMr=o("TFFlaubertForQuestionAnsweringSimple"),CMr=o(" (FlauBERT model)"),wMr=l(),wM=a("li"),a2e=a("strong"),AMr=o("funnel"),yMr=o(" \u2014 "),vW=a("a"),LMr=o("TFFunnelForQuestionAnswering"),xMr=o(" (Funnel Transformer model)"),kMr=l(),AM=a("li"),n2e=a("strong"),SMr=o("gptj"),RMr=o(" \u2014 "),FW=a("a"),BMr=o("TFGPTJForQuestionAnswering"),PMr=o(" (GPT-J model)"),$Mr=l(),yM=a("li"),s2e=a("strong"),IMr=o("longformer"),qMr=o(" \u2014 "),TW=a("a"),NMr=o("TFLongformerForQuestionAnswering"),jMr=o(" (Longformer model)"),DMr=l(),LM=a("li"),l2e=a("strong"),GMr=o("mobilebert"),OMr=o(" \u2014 "),MW=a("a"),VMr=o("TFMobileBertForQuestionAnswering"),XMr=o(" (MobileBERT model)"),zMr=l(),xM=a("li"),i2e=a("strong"),QMr=o("mpnet"),WMr=o(" \u2014 "),EW=a("a"),HMr=o("TFMPNetForQuestionAnswering"),UMr=o(" (MPNet model)"),JMr=l(),kM=a("li"),d2e=a("strong"),YMr=o("rembert"),KMr=o(" \u2014 "),CW=a("a"),ZMr=o("TFRemBertForQuestionAnswering"),eEr=o(" (RemBERT model)"),oEr=l(),SM=a("li"),c2e=a("strong"),rEr=o("roberta"),tEr=o(" \u2014 "),wW=a("a"),aEr=o("TFRobertaForQuestionAnswering"),nEr=o(" (RoBERTa model)"),sEr=l(),RM=a("li"),f2e=a("strong"),lEr=o("roformer"),iEr=o(" \u2014 "),AW=a("a"),dEr=o("TFRoFormerForQuestionAnswering"),cEr=o(" (RoFormer model)"),fEr=l(),BM=a("li"),m2e=a("strong"),mEr=o("xlm"),gEr=o(" \u2014 "),yW=a("a"),hEr=o("TFXLMForQuestionAnsweringSimple"),pEr=o(" (XLM model)"),_Er=l(),PM=a("li"),g2e=a("strong"),uEr=o("xlm-roberta"),bEr=o(" \u2014 "),LW=a("a"),vEr=o("TFXLMRobertaForQuestionAnswering"),FEr=o(" (XLM-RoBERTa model)"),TEr=l(),$M=a("li"),h2e=a("strong"),MEr=o("xlnet"),EEr=o(" \u2014 "),xW=a("a"),CEr=o("TFXLNetForQuestionAnsweringSimple"),wEr=o(" (XLNet model)"),AEr=l(),p2e=a("p"),yEr=o("Examples:"),LEr=l(),f(Hy.$$.fragment),A$e=l(),ef=a("h2"),IM=a("a"),_2e=a("span"),f(Uy.$$.fragment),xEr=l(),u2e=a("span"),kEr=o("TFAutoModelForVision2Seq"),y$e=l(),kr=a("div"),f(Jy.$$.fragment),SEr=l(),of=a("p"),REr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kW=a("a"),BEr=o("from_pretrained()"),PEr=o(" class method or the "),SW=a("a"),$Er=o("from_config()"),IEr=o(` class
method.`),qEr=l(),Yy=a("p"),NEr=o("This class cannot be instantiated directly using "),b2e=a("code"),jEr=o("__init__()"),DEr=o(" (throws an error)."),GEr=l(),Ct=a("div"),f(Ky.$$.fragment),OEr=l(),v2e=a("p"),VEr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),XEr=l(),rf=a("p"),zEr=o(`Note:
Loading a model from its configuration file does `),F2e=a("strong"),QEr=o("not"),WEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=a("a"),HEr=o("from_pretrained()"),UEr=o(" to load the model weights."),JEr=l(),T2e=a("p"),YEr=o("Examples:"),KEr=l(),f(Zy.$$.fragment),ZEr=l(),Ao=a("div"),f(e8.$$.fragment),e3r=l(),M2e=a("p"),o3r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),r3r=l(),Ln=a("p"),t3r=o("The model class to instantiate is selected based on the "),E2e=a("code"),a3r=o("model_type"),n3r=o(` property of the config object (either
passed as an argument or loaded from `),C2e=a("code"),s3r=o("pretrained_model_name_or_path"),l3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w2e=a("code"),i3r=o("pretrained_model_name_or_path"),d3r=o(":"),c3r=l(),A2e=a("ul"),qM=a("li"),y2e=a("strong"),f3r=o("vision-encoder-decoder"),m3r=o(" \u2014 "),BW=a("a"),g3r=o("TFVisionEncoderDecoderModel"),h3r=o(" (Vision Encoder decoder model)"),p3r=l(),L2e=a("p"),_3r=o("Examples:"),u3r=l(),f(o8.$$.fragment),L$e=l(),tf=a("h2"),NM=a("a"),x2e=a("span"),f(r8.$$.fragment),b3r=l(),k2e=a("span"),v3r=o("TFAutoModelForSpeechSeq2Seq"),x$e=l(),Sr=a("div"),f(t8.$$.fragment),F3r=l(),af=a("p"),T3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PW=a("a"),M3r=o("from_pretrained()"),E3r=o(" class method or the "),$W=a("a"),C3r=o("from_config()"),w3r=o(` class
method.`),A3r=l(),a8=a("p"),y3r=o("This class cannot be instantiated directly using "),S2e=a("code"),L3r=o("__init__()"),x3r=o(" (throws an error)."),k3r=l(),wt=a("div"),f(n8.$$.fragment),S3r=l(),R2e=a("p"),R3r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),B3r=l(),nf=a("p"),P3r=o(`Note:
Loading a model from its configuration file does `),B2e=a("strong"),$3r=o("not"),I3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=a("a"),q3r=o("from_pretrained()"),N3r=o(" to load the model weights."),j3r=l(),P2e=a("p"),D3r=o("Examples:"),G3r=l(),f(s8.$$.fragment),O3r=l(),yo=a("div"),f(l8.$$.fragment),V3r=l(),$2e=a("p"),X3r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),z3r=l(),xn=a("p"),Q3r=o("The model class to instantiate is selected based on the "),I2e=a("code"),W3r=o("model_type"),H3r=o(` property of the config object (either
passed as an argument or loaded from `),q2e=a("code"),U3r=o("pretrained_model_name_or_path"),J3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=a("code"),Y3r=o("pretrained_model_name_or_path"),K3r=o(":"),Z3r=l(),j2e=a("ul"),jM=a("li"),D2e=a("strong"),eCr=o("speech_to_text"),oCr=o(" \u2014 "),qW=a("a"),rCr=o("TFSpeech2TextForConditionalGeneration"),tCr=o(" (Speech2Text model)"),aCr=l(),G2e=a("p"),nCr=o("Examples:"),sCr=l(),f(i8.$$.fragment),k$e=l(),sf=a("h2"),DM=a("a"),O2e=a("span"),f(d8.$$.fragment),lCr=l(),V2e=a("span"),iCr=o("FlaxAutoModel"),S$e=l(),Rr=a("div"),f(c8.$$.fragment),dCr=l(),lf=a("p"),cCr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),NW=a("a"),fCr=o("from_pretrained()"),mCr=o(" class method or the "),jW=a("a"),gCr=o("from_config()"),hCr=o(` class
method.`),pCr=l(),f8=a("p"),_Cr=o("This class cannot be instantiated directly using "),X2e=a("code"),uCr=o("__init__()"),bCr=o(" (throws an error)."),vCr=l(),At=a("div"),f(m8.$$.fragment),FCr=l(),z2e=a("p"),TCr=o("Instantiates one of the base model classes of the library from a configuration."),MCr=l(),df=a("p"),ECr=o(`Note:
Loading a model from its configuration file does `),Q2e=a("strong"),CCr=o("not"),wCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=a("a"),ACr=o("from_pretrained()"),yCr=o(" to load the model weights."),LCr=l(),W2e=a("p"),xCr=o("Examples:"),kCr=l(),f(g8.$$.fragment),SCr=l(),Lo=a("div"),f(h8.$$.fragment),RCr=l(),H2e=a("p"),BCr=o("Instantiate one of the base model classes of the library from a pretrained model."),PCr=l(),kn=a("p"),$Cr=o("The model class to instantiate is selected based on the "),U2e=a("code"),ICr=o("model_type"),qCr=o(` property of the config object (either
passed as an argument or loaded from `),J2e=a("code"),NCr=o("pretrained_model_name_or_path"),jCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=a("code"),DCr=o("pretrained_model_name_or_path"),GCr=o(":"),OCr=l(),z=a("ul"),GM=a("li"),K2e=a("strong"),VCr=o("albert"),XCr=o(" \u2014 "),GW=a("a"),zCr=o("FlaxAlbertModel"),QCr=o(" (ALBERT model)"),WCr=l(),OM=a("li"),Z2e=a("strong"),HCr=o("bart"),UCr=o(" \u2014 "),OW=a("a"),JCr=o("FlaxBartModel"),YCr=o(" (BART model)"),KCr=l(),VM=a("li"),eve=a("strong"),ZCr=o("beit"),e6r=o(" \u2014 "),VW=a("a"),o6r=o("FlaxBeitModel"),r6r=o(" (BEiT model)"),t6r=l(),XM=a("li"),ove=a("strong"),a6r=o("bert"),n6r=o(" \u2014 "),XW=a("a"),s6r=o("FlaxBertModel"),l6r=o(" (BERT model)"),i6r=l(),zM=a("li"),rve=a("strong"),d6r=o("big_bird"),c6r=o(" \u2014 "),zW=a("a"),f6r=o("FlaxBigBirdModel"),m6r=o(" (BigBird model)"),g6r=l(),QM=a("li"),tve=a("strong"),h6r=o("blenderbot"),p6r=o(" \u2014 "),QW=a("a"),_6r=o("FlaxBlenderbotModel"),u6r=o(" (Blenderbot model)"),b6r=l(),WM=a("li"),ave=a("strong"),v6r=o("blenderbot-small"),F6r=o(" \u2014 "),WW=a("a"),T6r=o("FlaxBlenderbotSmallModel"),M6r=o(" (BlenderbotSmall model)"),E6r=l(),HM=a("li"),nve=a("strong"),C6r=o("clip"),w6r=o(" \u2014 "),HW=a("a"),A6r=o("FlaxCLIPModel"),y6r=o(" (CLIP model)"),L6r=l(),UM=a("li"),sve=a("strong"),x6r=o("distilbert"),k6r=o(" \u2014 "),UW=a("a"),S6r=o("FlaxDistilBertModel"),R6r=o(" (DistilBERT model)"),B6r=l(),JM=a("li"),lve=a("strong"),P6r=o("electra"),$6r=o(" \u2014 "),JW=a("a"),I6r=o("FlaxElectraModel"),q6r=o(" (ELECTRA model)"),N6r=l(),YM=a("li"),ive=a("strong"),j6r=o("gpt2"),D6r=o(" \u2014 "),YW=a("a"),G6r=o("FlaxGPT2Model"),O6r=o(" (OpenAI GPT-2 model)"),V6r=l(),KM=a("li"),dve=a("strong"),X6r=o("gpt_neo"),z6r=o(" \u2014 "),KW=a("a"),Q6r=o("FlaxGPTNeoModel"),W6r=o(" (GPT Neo model)"),H6r=l(),ZM=a("li"),cve=a("strong"),U6r=o("gptj"),J6r=o(" \u2014 "),ZW=a("a"),Y6r=o("FlaxGPTJModel"),K6r=o(" (GPT-J model)"),Z6r=l(),eE=a("li"),fve=a("strong"),ewr=o("marian"),owr=o(" \u2014 "),eH=a("a"),rwr=o("FlaxMarianModel"),twr=o(" (Marian model)"),awr=l(),oE=a("li"),mve=a("strong"),nwr=o("mbart"),swr=o(" \u2014 "),oH=a("a"),lwr=o("FlaxMBartModel"),iwr=o(" (mBART model)"),dwr=l(),rE=a("li"),gve=a("strong"),cwr=o("mt5"),fwr=o(" \u2014 "),rH=a("a"),mwr=o("FlaxMT5Model"),gwr=o(" (mT5 model)"),hwr=l(),tE=a("li"),hve=a("strong"),pwr=o("pegasus"),_wr=o(" \u2014 "),tH=a("a"),uwr=o("FlaxPegasusModel"),bwr=o(" (Pegasus model)"),vwr=l(),aE=a("li"),pve=a("strong"),Fwr=o("roberta"),Twr=o(" \u2014 "),aH=a("a"),Mwr=o("FlaxRobertaModel"),Ewr=o(" (RoBERTa model)"),Cwr=l(),nE=a("li"),_ve=a("strong"),wwr=o("roformer"),Awr=o(" \u2014 "),nH=a("a"),ywr=o("FlaxRoFormerModel"),Lwr=o(" (RoFormer model)"),xwr=l(),sE=a("li"),uve=a("strong"),kwr=o("t5"),Swr=o(" \u2014 "),sH=a("a"),Rwr=o("FlaxT5Model"),Bwr=o(" (T5 model)"),Pwr=l(),lE=a("li"),bve=a("strong"),$wr=o("vision-text-dual-encoder"),Iwr=o(" \u2014 "),lH=a("a"),qwr=o("FlaxVisionTextDualEncoderModel"),Nwr=o(" (VisionTextDualEncoder model)"),jwr=l(),iE=a("li"),vve=a("strong"),Dwr=o("vit"),Gwr=o(" \u2014 "),iH=a("a"),Owr=o("FlaxViTModel"),Vwr=o(" (ViT model)"),Xwr=l(),dE=a("li"),Fve=a("strong"),zwr=o("wav2vec2"),Qwr=o(" \u2014 "),dH=a("a"),Wwr=o("FlaxWav2Vec2Model"),Hwr=o(" (Wav2Vec2 model)"),Uwr=l(),cE=a("li"),Tve=a("strong"),Jwr=o("xglm"),Ywr=o(" \u2014 "),cH=a("a"),Kwr=o("FlaxXGLMModel"),Zwr=o(" (XGLM model)"),eAr=l(),fE=a("li"),Mve=a("strong"),oAr=o("xlm-roberta"),rAr=o(" \u2014 "),fH=a("a"),tAr=o("FlaxXLMRobertaModel"),aAr=o(" (XLM-RoBERTa model)"),nAr=l(),Eve=a("p"),sAr=o("Examples:"),lAr=l(),f(p8.$$.fragment),R$e=l(),cf=a("h2"),mE=a("a"),Cve=a("span"),f(_8.$$.fragment),iAr=l(),wve=a("span"),dAr=o("FlaxAutoModelForCausalLM"),B$e=l(),Br=a("div"),f(u8.$$.fragment),cAr=l(),ff=a("p"),fAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),mH=a("a"),mAr=o("from_pretrained()"),gAr=o(" class method or the "),gH=a("a"),hAr=o("from_config()"),pAr=o(` class
method.`),_Ar=l(),b8=a("p"),uAr=o("This class cannot be instantiated directly using "),Ave=a("code"),bAr=o("__init__()"),vAr=o(" (throws an error)."),FAr=l(),yt=a("div"),f(v8.$$.fragment),TAr=l(),yve=a("p"),MAr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),EAr=l(),mf=a("p"),CAr=o(`Note:
Loading a model from its configuration file does `),Lve=a("strong"),wAr=o("not"),AAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=a("a"),yAr=o("from_pretrained()"),LAr=o(" to load the model weights."),xAr=l(),xve=a("p"),kAr=o("Examples:"),SAr=l(),f(F8.$$.fragment),RAr=l(),xo=a("div"),f(T8.$$.fragment),BAr=l(),kve=a("p"),PAr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$Ar=l(),Sn=a("p"),IAr=o("The model class to instantiate is selected based on the "),Sve=a("code"),qAr=o("model_type"),NAr=o(` property of the config object (either
passed as an argument or loaded from `),Rve=a("code"),jAr=o("pretrained_model_name_or_path"),DAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=a("code"),GAr=o("pretrained_model_name_or_path"),OAr=o(":"),VAr=l(),ca=a("ul"),gE=a("li"),Pve=a("strong"),XAr=o("bart"),zAr=o(" \u2014 "),pH=a("a"),QAr=o("FlaxBartForCausalLM"),WAr=o(" (BART model)"),HAr=l(),hE=a("li"),$ve=a("strong"),UAr=o("gpt2"),JAr=o(" \u2014 "),_H=a("a"),YAr=o("FlaxGPT2LMHeadModel"),KAr=o(" (OpenAI GPT-2 model)"),ZAr=l(),pE=a("li"),Ive=a("strong"),e0r=o("gpt_neo"),o0r=o(" \u2014 "),uH=a("a"),r0r=o("FlaxGPTNeoForCausalLM"),t0r=o(" (GPT Neo model)"),a0r=l(),_E=a("li"),qve=a("strong"),n0r=o("gptj"),s0r=o(" \u2014 "),bH=a("a"),l0r=o("FlaxGPTJForCausalLM"),i0r=o(" (GPT-J model)"),d0r=l(),uE=a("li"),Nve=a("strong"),c0r=o("xglm"),f0r=o(" \u2014 "),vH=a("a"),m0r=o("FlaxXGLMForCausalLM"),g0r=o(" (XGLM model)"),h0r=l(),jve=a("p"),p0r=o("Examples:"),_0r=l(),f(M8.$$.fragment),P$e=l(),gf=a("h2"),bE=a("a"),Dve=a("span"),f(E8.$$.fragment),u0r=l(),Gve=a("span"),b0r=o("FlaxAutoModelForPreTraining"),$$e=l(),Pr=a("div"),f(C8.$$.fragment),v0r=l(),hf=a("p"),F0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),FH=a("a"),T0r=o("from_pretrained()"),M0r=o(" class method or the "),TH=a("a"),E0r=o("from_config()"),C0r=o(` class
method.`),w0r=l(),w8=a("p"),A0r=o("This class cannot be instantiated directly using "),Ove=a("code"),y0r=o("__init__()"),L0r=o(" (throws an error)."),x0r=l(),Lt=a("div"),f(A8.$$.fragment),k0r=l(),Vve=a("p"),S0r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),R0r=l(),pf=a("p"),B0r=o(`Note:
Loading a model from its configuration file does `),Xve=a("strong"),P0r=o("not"),$0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=a("a"),I0r=o("from_pretrained()"),q0r=o(" to load the model weights."),N0r=l(),zve=a("p"),j0r=o("Examples:"),D0r=l(),f(y8.$$.fragment),G0r=l(),ko=a("div"),f(L8.$$.fragment),O0r=l(),Qve=a("p"),V0r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),X0r=l(),Rn=a("p"),z0r=o("The model class to instantiate is selected based on the "),Wve=a("code"),Q0r=o("model_type"),W0r=o(` property of the config object (either
passed as an argument or loaded from `),Hve=a("code"),H0r=o("pretrained_model_name_or_path"),U0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=a("code"),J0r=o("pretrained_model_name_or_path"),Y0r=o(":"),K0r=l(),he=a("ul"),vE=a("li"),Jve=a("strong"),Z0r=o("albert"),eyr=o(" \u2014 "),EH=a("a"),oyr=o("FlaxAlbertForPreTraining"),ryr=o(" (ALBERT model)"),tyr=l(),FE=a("li"),Yve=a("strong"),ayr=o("bart"),nyr=o(" \u2014 "),CH=a("a"),syr=o("FlaxBartForConditionalGeneration"),lyr=o(" (BART model)"),iyr=l(),TE=a("li"),Kve=a("strong"),dyr=o("bert"),cyr=o(" \u2014 "),wH=a("a"),fyr=o("FlaxBertForPreTraining"),myr=o(" (BERT model)"),gyr=l(),ME=a("li"),Zve=a("strong"),hyr=o("big_bird"),pyr=o(" \u2014 "),AH=a("a"),_yr=o("FlaxBigBirdForPreTraining"),uyr=o(" (BigBird model)"),byr=l(),EE=a("li"),eFe=a("strong"),vyr=o("electra"),Fyr=o(" \u2014 "),yH=a("a"),Tyr=o("FlaxElectraForPreTraining"),Myr=o(" (ELECTRA model)"),Eyr=l(),CE=a("li"),oFe=a("strong"),Cyr=o("mbart"),wyr=o(" \u2014 "),LH=a("a"),Ayr=o("FlaxMBartForConditionalGeneration"),yyr=o(" (mBART model)"),Lyr=l(),wE=a("li"),rFe=a("strong"),xyr=o("mt5"),kyr=o(" \u2014 "),xH=a("a"),Syr=o("FlaxMT5ForConditionalGeneration"),Ryr=o(" (mT5 model)"),Byr=l(),AE=a("li"),tFe=a("strong"),Pyr=o("roberta"),$yr=o(" \u2014 "),kH=a("a"),Iyr=o("FlaxRobertaForMaskedLM"),qyr=o(" (RoBERTa model)"),Nyr=l(),yE=a("li"),aFe=a("strong"),jyr=o("roformer"),Dyr=o(" \u2014 "),SH=a("a"),Gyr=o("FlaxRoFormerForMaskedLM"),Oyr=o(" (RoFormer model)"),Vyr=l(),LE=a("li"),nFe=a("strong"),Xyr=o("t5"),zyr=o(" \u2014 "),RH=a("a"),Qyr=o("FlaxT5ForConditionalGeneration"),Wyr=o(" (T5 model)"),Hyr=l(),xE=a("li"),sFe=a("strong"),Uyr=o("wav2vec2"),Jyr=o(" \u2014 "),BH=a("a"),Yyr=o("FlaxWav2Vec2ForPreTraining"),Kyr=o(" (Wav2Vec2 model)"),Zyr=l(),kE=a("li"),lFe=a("strong"),e8r=o("xlm-roberta"),o8r=o(" \u2014 "),PH=a("a"),r8r=o("FlaxXLMRobertaForMaskedLM"),t8r=o(" (XLM-RoBERTa model)"),a8r=l(),iFe=a("p"),n8r=o("Examples:"),s8r=l(),f(x8.$$.fragment),I$e=l(),_f=a("h2"),SE=a("a"),dFe=a("span"),f(k8.$$.fragment),l8r=l(),cFe=a("span"),i8r=o("FlaxAutoModelForMaskedLM"),q$e=l(),$r=a("div"),f(S8.$$.fragment),d8r=l(),uf=a("p"),c8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$H=a("a"),f8r=o("from_pretrained()"),m8r=o(" class method or the "),IH=a("a"),g8r=o("from_config()"),h8r=o(` class
method.`),p8r=l(),R8=a("p"),_8r=o("This class cannot be instantiated directly using "),fFe=a("code"),u8r=o("__init__()"),b8r=o(" (throws an error)."),v8r=l(),xt=a("div"),f(B8.$$.fragment),F8r=l(),mFe=a("p"),T8r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),M8r=l(),bf=a("p"),E8r=o(`Note:
Loading a model from its configuration file does `),gFe=a("strong"),C8r=o("not"),w8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=a("a"),A8r=o("from_pretrained()"),y8r=o(" to load the model weights."),L8r=l(),hFe=a("p"),x8r=o("Examples:"),k8r=l(),f(P8.$$.fragment),S8r=l(),So=a("div"),f($8.$$.fragment),R8r=l(),pFe=a("p"),B8r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),P8r=l(),Bn=a("p"),$8r=o("The model class to instantiate is selected based on the "),_Fe=a("code"),I8r=o("model_type"),q8r=o(` property of the config object (either
passed as an argument or loaded from `),uFe=a("code"),N8r=o("pretrained_model_name_or_path"),j8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=a("code"),D8r=o("pretrained_model_name_or_path"),G8r=o(":"),O8r=l(),Te=a("ul"),RE=a("li"),vFe=a("strong"),V8r=o("albert"),X8r=o(" \u2014 "),NH=a("a"),z8r=o("FlaxAlbertForMaskedLM"),Q8r=o(" (ALBERT model)"),W8r=l(),BE=a("li"),FFe=a("strong"),H8r=o("bart"),U8r=o(" \u2014 "),jH=a("a"),J8r=o("FlaxBartForConditionalGeneration"),Y8r=o(" (BART model)"),K8r=l(),PE=a("li"),TFe=a("strong"),Z8r=o("bert"),eLr=o(" \u2014 "),DH=a("a"),oLr=o("FlaxBertForMaskedLM"),rLr=o(" (BERT model)"),tLr=l(),$E=a("li"),MFe=a("strong"),aLr=o("big_bird"),nLr=o(" \u2014 "),GH=a("a"),sLr=o("FlaxBigBirdForMaskedLM"),lLr=o(" (BigBird model)"),iLr=l(),IE=a("li"),EFe=a("strong"),dLr=o("distilbert"),cLr=o(" \u2014 "),OH=a("a"),fLr=o("FlaxDistilBertForMaskedLM"),mLr=o(" (DistilBERT model)"),gLr=l(),qE=a("li"),CFe=a("strong"),hLr=o("electra"),pLr=o(" \u2014 "),VH=a("a"),_Lr=o("FlaxElectraForMaskedLM"),uLr=o(" (ELECTRA model)"),bLr=l(),NE=a("li"),wFe=a("strong"),vLr=o("mbart"),FLr=o(" \u2014 "),XH=a("a"),TLr=o("FlaxMBartForConditionalGeneration"),MLr=o(" (mBART model)"),ELr=l(),jE=a("li"),AFe=a("strong"),CLr=o("roberta"),wLr=o(" \u2014 "),zH=a("a"),ALr=o("FlaxRobertaForMaskedLM"),yLr=o(" (RoBERTa model)"),LLr=l(),DE=a("li"),yFe=a("strong"),xLr=o("roformer"),kLr=o(" \u2014 "),QH=a("a"),SLr=o("FlaxRoFormerForMaskedLM"),RLr=o(" (RoFormer model)"),BLr=l(),GE=a("li"),LFe=a("strong"),PLr=o("xlm-roberta"),$Lr=o(" \u2014 "),WH=a("a"),ILr=o("FlaxXLMRobertaForMaskedLM"),qLr=o(" (XLM-RoBERTa model)"),NLr=l(),xFe=a("p"),jLr=o("Examples:"),DLr=l(),f(I8.$$.fragment),N$e=l(),vf=a("h2"),OE=a("a"),kFe=a("span"),f(q8.$$.fragment),GLr=l(),SFe=a("span"),OLr=o("FlaxAutoModelForSeq2SeqLM"),j$e=l(),Ir=a("div"),f(N8.$$.fragment),VLr=l(),Ff=a("p"),XLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HH=a("a"),zLr=o("from_pretrained()"),QLr=o(" class method or the "),UH=a("a"),WLr=o("from_config()"),HLr=o(` class
method.`),ULr=l(),j8=a("p"),JLr=o("This class cannot be instantiated directly using "),RFe=a("code"),YLr=o("__init__()"),KLr=o(" (throws an error)."),ZLr=l(),kt=a("div"),f(D8.$$.fragment),e9r=l(),BFe=a("p"),o9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),r9r=l(),Tf=a("p"),t9r=o(`Note:
Loading a model from its configuration file does `),PFe=a("strong"),a9r=o("not"),n9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=a("a"),s9r=o("from_pretrained()"),l9r=o(" to load the model weights."),i9r=l(),$Fe=a("p"),d9r=o("Examples:"),c9r=l(),f(G8.$$.fragment),f9r=l(),Ro=a("div"),f(O8.$$.fragment),m9r=l(),IFe=a("p"),g9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),h9r=l(),Pn=a("p"),p9r=o("The model class to instantiate is selected based on the "),qFe=a("code"),_9r=o("model_type"),u9r=o(` property of the config object (either
passed as an argument or loaded from `),NFe=a("code"),b9r=o("pretrained_model_name_or_path"),v9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jFe=a("code"),F9r=o("pretrained_model_name_or_path"),T9r=o(":"),M9r=l(),we=a("ul"),VE=a("li"),DFe=a("strong"),E9r=o("bart"),C9r=o(" \u2014 "),YH=a("a"),w9r=o("FlaxBartForConditionalGeneration"),A9r=o(" (BART model)"),y9r=l(),XE=a("li"),GFe=a("strong"),L9r=o("blenderbot"),x9r=o(" \u2014 "),KH=a("a"),k9r=o("FlaxBlenderbotForConditionalGeneration"),S9r=o(" (Blenderbot model)"),R9r=l(),zE=a("li"),OFe=a("strong"),B9r=o("blenderbot-small"),P9r=o(" \u2014 "),ZH=a("a"),$9r=o("FlaxBlenderbotSmallForConditionalGeneration"),I9r=o(" (BlenderbotSmall model)"),q9r=l(),QE=a("li"),VFe=a("strong"),N9r=o("encoder-decoder"),j9r=o(" \u2014 "),eU=a("a"),D9r=o("FlaxEncoderDecoderModel"),G9r=o(" (Encoder decoder model)"),O9r=l(),WE=a("li"),XFe=a("strong"),V9r=o("marian"),X9r=o(" \u2014 "),oU=a("a"),z9r=o("FlaxMarianMTModel"),Q9r=o(" (Marian model)"),W9r=l(),HE=a("li"),zFe=a("strong"),H9r=o("mbart"),U9r=o(" \u2014 "),rU=a("a"),J9r=o("FlaxMBartForConditionalGeneration"),Y9r=o(" (mBART model)"),K9r=l(),UE=a("li"),QFe=a("strong"),Z9r=o("mt5"),exr=o(" \u2014 "),tU=a("a"),oxr=o("FlaxMT5ForConditionalGeneration"),rxr=o(" (mT5 model)"),txr=l(),JE=a("li"),WFe=a("strong"),axr=o("pegasus"),nxr=o(" \u2014 "),aU=a("a"),sxr=o("FlaxPegasusForConditionalGeneration"),lxr=o(" (Pegasus model)"),ixr=l(),YE=a("li"),HFe=a("strong"),dxr=o("t5"),cxr=o(" \u2014 "),nU=a("a"),fxr=o("FlaxT5ForConditionalGeneration"),mxr=o(" (T5 model)"),gxr=l(),UFe=a("p"),hxr=o("Examples:"),pxr=l(),f(V8.$$.fragment),D$e=l(),Mf=a("h2"),KE=a("a"),JFe=a("span"),f(X8.$$.fragment),_xr=l(),YFe=a("span"),uxr=o("FlaxAutoModelForSequenceClassification"),G$e=l(),qr=a("div"),f(z8.$$.fragment),bxr=l(),Ef=a("p"),vxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sU=a("a"),Fxr=o("from_pretrained()"),Txr=o(" class method or the "),lU=a("a"),Mxr=o("from_config()"),Exr=o(` class
method.`),Cxr=l(),Q8=a("p"),wxr=o("This class cannot be instantiated directly using "),KFe=a("code"),Axr=o("__init__()"),yxr=o(" (throws an error)."),Lxr=l(),St=a("div"),f(W8.$$.fragment),xxr=l(),ZFe=a("p"),kxr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Sxr=l(),Cf=a("p"),Rxr=o(`Note:
Loading a model from its configuration file does `),eTe=a("strong"),Bxr=o("not"),Pxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=a("a"),$xr=o("from_pretrained()"),Ixr=o(" to load the model weights."),qxr=l(),oTe=a("p"),Nxr=o("Examples:"),jxr=l(),f(H8.$$.fragment),Dxr=l(),Bo=a("div"),f(U8.$$.fragment),Gxr=l(),rTe=a("p"),Oxr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Vxr=l(),$n=a("p"),Xxr=o("The model class to instantiate is selected based on the "),tTe=a("code"),zxr=o("model_type"),Qxr=o(` property of the config object (either
passed as an argument or loaded from `),aTe=a("code"),Wxr=o("pretrained_model_name_or_path"),Hxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=a("code"),Uxr=o("pretrained_model_name_or_path"),Jxr=o(":"),Yxr=l(),Me=a("ul"),ZE=a("li"),sTe=a("strong"),Kxr=o("albert"),Zxr=o(" \u2014 "),dU=a("a"),ekr=o("FlaxAlbertForSequenceClassification"),okr=o(" (ALBERT model)"),rkr=l(),e3=a("li"),lTe=a("strong"),tkr=o("bart"),akr=o(" \u2014 "),cU=a("a"),nkr=o("FlaxBartForSequenceClassification"),skr=o(" (BART model)"),lkr=l(),o3=a("li"),iTe=a("strong"),ikr=o("bert"),dkr=o(" \u2014 "),fU=a("a"),ckr=o("FlaxBertForSequenceClassification"),fkr=o(" (BERT model)"),mkr=l(),r3=a("li"),dTe=a("strong"),gkr=o("big_bird"),hkr=o(" \u2014 "),mU=a("a"),pkr=o("FlaxBigBirdForSequenceClassification"),_kr=o(" (BigBird model)"),ukr=l(),t3=a("li"),cTe=a("strong"),bkr=o("distilbert"),vkr=o(" \u2014 "),gU=a("a"),Fkr=o("FlaxDistilBertForSequenceClassification"),Tkr=o(" (DistilBERT model)"),Mkr=l(),a3=a("li"),fTe=a("strong"),Ekr=o("electra"),Ckr=o(" \u2014 "),hU=a("a"),wkr=o("FlaxElectraForSequenceClassification"),Akr=o(" (ELECTRA model)"),ykr=l(),n3=a("li"),mTe=a("strong"),Lkr=o("mbart"),xkr=o(" \u2014 "),pU=a("a"),kkr=o("FlaxMBartForSequenceClassification"),Skr=o(" (mBART model)"),Rkr=l(),s3=a("li"),gTe=a("strong"),Bkr=o("roberta"),Pkr=o(" \u2014 "),_U=a("a"),$kr=o("FlaxRobertaForSequenceClassification"),Ikr=o(" (RoBERTa model)"),qkr=l(),l3=a("li"),hTe=a("strong"),Nkr=o("roformer"),jkr=o(" \u2014 "),uU=a("a"),Dkr=o("FlaxRoFormerForSequenceClassification"),Gkr=o(" (RoFormer model)"),Okr=l(),i3=a("li"),pTe=a("strong"),Vkr=o("xlm-roberta"),Xkr=o(" \u2014 "),bU=a("a"),zkr=o("FlaxXLMRobertaForSequenceClassification"),Qkr=o(" (XLM-RoBERTa model)"),Wkr=l(),_Te=a("p"),Hkr=o("Examples:"),Ukr=l(),f(J8.$$.fragment),O$e=l(),wf=a("h2"),d3=a("a"),uTe=a("span"),f(Y8.$$.fragment),Jkr=l(),bTe=a("span"),Ykr=o("FlaxAutoModelForQuestionAnswering"),V$e=l(),Nr=a("div"),f(K8.$$.fragment),Kkr=l(),Af=a("p"),Zkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vU=a("a"),eSr=o("from_pretrained()"),oSr=o(" class method or the "),FU=a("a"),rSr=o("from_config()"),tSr=o(` class
method.`),aSr=l(),Z8=a("p"),nSr=o("This class cannot be instantiated directly using "),vTe=a("code"),sSr=o("__init__()"),lSr=o(" (throws an error)."),iSr=l(),Rt=a("div"),f(eL.$$.fragment),dSr=l(),FTe=a("p"),cSr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),fSr=l(),yf=a("p"),mSr=o(`Note:
Loading a model from its configuration file does `),TTe=a("strong"),gSr=o("not"),hSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=a("a"),pSr=o("from_pretrained()"),_Sr=o(" to load the model weights."),uSr=l(),MTe=a("p"),bSr=o("Examples:"),vSr=l(),f(oL.$$.fragment),FSr=l(),Po=a("div"),f(rL.$$.fragment),TSr=l(),ETe=a("p"),MSr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ESr=l(),In=a("p"),CSr=o("The model class to instantiate is selected based on the "),CTe=a("code"),wSr=o("model_type"),ASr=o(` property of the config object (either
passed as an argument or loaded from `),wTe=a("code"),ySr=o("pretrained_model_name_or_path"),LSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ATe=a("code"),xSr=o("pretrained_model_name_or_path"),kSr=o(":"),SSr=l(),Ee=a("ul"),c3=a("li"),yTe=a("strong"),RSr=o("albert"),BSr=o(" \u2014 "),MU=a("a"),PSr=o("FlaxAlbertForQuestionAnswering"),$Sr=o(" (ALBERT model)"),ISr=l(),f3=a("li"),LTe=a("strong"),qSr=o("bart"),NSr=o(" \u2014 "),EU=a("a"),jSr=o("FlaxBartForQuestionAnswering"),DSr=o(" (BART model)"),GSr=l(),m3=a("li"),xTe=a("strong"),OSr=o("bert"),VSr=o(" \u2014 "),CU=a("a"),XSr=o("FlaxBertForQuestionAnswering"),zSr=o(" (BERT model)"),QSr=l(),g3=a("li"),kTe=a("strong"),WSr=o("big_bird"),HSr=o(" \u2014 "),wU=a("a"),USr=o("FlaxBigBirdForQuestionAnswering"),JSr=o(" (BigBird model)"),YSr=l(),h3=a("li"),STe=a("strong"),KSr=o("distilbert"),ZSr=o(" \u2014 "),AU=a("a"),eRr=o("FlaxDistilBertForQuestionAnswering"),oRr=o(" (DistilBERT model)"),rRr=l(),p3=a("li"),RTe=a("strong"),tRr=o("electra"),aRr=o(" \u2014 "),yU=a("a"),nRr=o("FlaxElectraForQuestionAnswering"),sRr=o(" (ELECTRA model)"),lRr=l(),_3=a("li"),BTe=a("strong"),iRr=o("mbart"),dRr=o(" \u2014 "),LU=a("a"),cRr=o("FlaxMBartForQuestionAnswering"),fRr=o(" (mBART model)"),mRr=l(),u3=a("li"),PTe=a("strong"),gRr=o("roberta"),hRr=o(" \u2014 "),xU=a("a"),pRr=o("FlaxRobertaForQuestionAnswering"),_Rr=o(" (RoBERTa model)"),uRr=l(),b3=a("li"),$Te=a("strong"),bRr=o("roformer"),vRr=o(" \u2014 "),kU=a("a"),FRr=o("FlaxRoFormerForQuestionAnswering"),TRr=o(" (RoFormer model)"),MRr=l(),v3=a("li"),ITe=a("strong"),ERr=o("xlm-roberta"),CRr=o(" \u2014 "),SU=a("a"),wRr=o("FlaxXLMRobertaForQuestionAnswering"),ARr=o(" (XLM-RoBERTa model)"),yRr=l(),qTe=a("p"),LRr=o("Examples:"),xRr=l(),f(tL.$$.fragment),X$e=l(),Lf=a("h2"),F3=a("a"),NTe=a("span"),f(aL.$$.fragment),kRr=l(),jTe=a("span"),SRr=o("FlaxAutoModelForTokenClassification"),z$e=l(),jr=a("div"),f(nL.$$.fragment),RRr=l(),xf=a("p"),BRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),RU=a("a"),PRr=o("from_pretrained()"),$Rr=o(" class method or the "),BU=a("a"),IRr=o("from_config()"),qRr=o(` class
method.`),NRr=l(),sL=a("p"),jRr=o("This class cannot be instantiated directly using "),DTe=a("code"),DRr=o("__init__()"),GRr=o(" (throws an error)."),ORr=l(),Bt=a("div"),f(lL.$$.fragment),VRr=l(),GTe=a("p"),XRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zRr=l(),kf=a("p"),QRr=o(`Note:
Loading a model from its configuration file does `),OTe=a("strong"),WRr=o("not"),HRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=a("a"),URr=o("from_pretrained()"),JRr=o(" to load the model weights."),YRr=l(),VTe=a("p"),KRr=o("Examples:"),ZRr=l(),f(iL.$$.fragment),eBr=l(),$o=a("div"),f(dL.$$.fragment),oBr=l(),XTe=a("p"),rBr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),tBr=l(),qn=a("p"),aBr=o("The model class to instantiate is selected based on the "),zTe=a("code"),nBr=o("model_type"),sBr=o(` property of the config object (either
passed as an argument or loaded from `),QTe=a("code"),lBr=o("pretrained_model_name_or_path"),iBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=a("code"),dBr=o("pretrained_model_name_or_path"),cBr=o(":"),fBr=l(),Pe=a("ul"),T3=a("li"),HTe=a("strong"),mBr=o("albert"),gBr=o(" \u2014 "),$U=a("a"),hBr=o("FlaxAlbertForTokenClassification"),pBr=o(" (ALBERT model)"),_Br=l(),M3=a("li"),UTe=a("strong"),uBr=o("bert"),bBr=o(" \u2014 "),IU=a("a"),vBr=o("FlaxBertForTokenClassification"),FBr=o(" (BERT model)"),TBr=l(),E3=a("li"),JTe=a("strong"),MBr=o("big_bird"),EBr=o(" \u2014 "),qU=a("a"),CBr=o("FlaxBigBirdForTokenClassification"),wBr=o(" (BigBird model)"),ABr=l(),C3=a("li"),YTe=a("strong"),yBr=o("distilbert"),LBr=o(" \u2014 "),NU=a("a"),xBr=o("FlaxDistilBertForTokenClassification"),kBr=o(" (DistilBERT model)"),SBr=l(),w3=a("li"),KTe=a("strong"),RBr=o("electra"),BBr=o(" \u2014 "),jU=a("a"),PBr=o("FlaxElectraForTokenClassification"),$Br=o(" (ELECTRA model)"),IBr=l(),A3=a("li"),ZTe=a("strong"),qBr=o("roberta"),NBr=o(" \u2014 "),DU=a("a"),jBr=o("FlaxRobertaForTokenClassification"),DBr=o(" (RoBERTa model)"),GBr=l(),y3=a("li"),e7e=a("strong"),OBr=o("roformer"),VBr=o(" \u2014 "),GU=a("a"),XBr=o("FlaxRoFormerForTokenClassification"),zBr=o(" (RoFormer model)"),QBr=l(),L3=a("li"),o7e=a("strong"),WBr=o("xlm-roberta"),HBr=o(" \u2014 "),OU=a("a"),UBr=o("FlaxXLMRobertaForTokenClassification"),JBr=o(" (XLM-RoBERTa model)"),YBr=l(),r7e=a("p"),KBr=o("Examples:"),ZBr=l(),f(cL.$$.fragment),Q$e=l(),Sf=a("h2"),x3=a("a"),t7e=a("span"),f(fL.$$.fragment),ePr=l(),a7e=a("span"),oPr=o("FlaxAutoModelForMultipleChoice"),W$e=l(),Dr=a("div"),f(mL.$$.fragment),rPr=l(),Rf=a("p"),tPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),VU=a("a"),aPr=o("from_pretrained()"),nPr=o(" class method or the "),XU=a("a"),sPr=o("from_config()"),lPr=o(` class
method.`),iPr=l(),gL=a("p"),dPr=o("This class cannot be instantiated directly using "),n7e=a("code"),cPr=o("__init__()"),fPr=o(" (throws an error)."),mPr=l(),Pt=a("div"),f(hL.$$.fragment),gPr=l(),s7e=a("p"),hPr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),pPr=l(),Bf=a("p"),_Pr=o(`Note:
Loading a model from its configuration file does `),l7e=a("strong"),uPr=o("not"),bPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=a("a"),vPr=o("from_pretrained()"),FPr=o(" to load the model weights."),TPr=l(),i7e=a("p"),MPr=o("Examples:"),EPr=l(),f(pL.$$.fragment),CPr=l(),Io=a("div"),f(_L.$$.fragment),wPr=l(),d7e=a("p"),APr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yPr=l(),Nn=a("p"),LPr=o("The model class to instantiate is selected based on the "),c7e=a("code"),xPr=o("model_type"),kPr=o(` property of the config object (either
passed as an argument or loaded from `),f7e=a("code"),SPr=o("pretrained_model_name_or_path"),RPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m7e=a("code"),BPr=o("pretrained_model_name_or_path"),PPr=o(":"),$Pr=l(),$e=a("ul"),k3=a("li"),g7e=a("strong"),IPr=o("albert"),qPr=o(" \u2014 "),QU=a("a"),NPr=o("FlaxAlbertForMultipleChoice"),jPr=o(" (ALBERT model)"),DPr=l(),S3=a("li"),h7e=a("strong"),GPr=o("bert"),OPr=o(" \u2014 "),WU=a("a"),VPr=o("FlaxBertForMultipleChoice"),XPr=o(" (BERT model)"),zPr=l(),R3=a("li"),p7e=a("strong"),QPr=o("big_bird"),WPr=o(" \u2014 "),HU=a("a"),HPr=o("FlaxBigBirdForMultipleChoice"),UPr=o(" (BigBird model)"),JPr=l(),B3=a("li"),_7e=a("strong"),YPr=o("distilbert"),KPr=o(" \u2014 "),UU=a("a"),ZPr=o("FlaxDistilBertForMultipleChoice"),e$r=o(" (DistilBERT model)"),o$r=l(),P3=a("li"),u7e=a("strong"),r$r=o("electra"),t$r=o(" \u2014 "),JU=a("a"),a$r=o("FlaxElectraForMultipleChoice"),n$r=o(" (ELECTRA model)"),s$r=l(),$3=a("li"),b7e=a("strong"),l$r=o("roberta"),i$r=o(" \u2014 "),YU=a("a"),d$r=o("FlaxRobertaForMultipleChoice"),c$r=o(" (RoBERTa model)"),f$r=l(),I3=a("li"),v7e=a("strong"),m$r=o("roformer"),g$r=o(" \u2014 "),KU=a("a"),h$r=o("FlaxRoFormerForMultipleChoice"),p$r=o(" (RoFormer model)"),_$r=l(),q3=a("li"),F7e=a("strong"),u$r=o("xlm-roberta"),b$r=o(" \u2014 "),ZU=a("a"),v$r=o("FlaxXLMRobertaForMultipleChoice"),F$r=o(" (XLM-RoBERTa model)"),T$r=l(),T7e=a("p"),M$r=o("Examples:"),E$r=l(),f(uL.$$.fragment),H$e=l(),Pf=a("h2"),N3=a("a"),M7e=a("span"),f(bL.$$.fragment),C$r=l(),E7e=a("span"),w$r=o("FlaxAutoModelForNextSentencePrediction"),U$e=l(),Gr=a("div"),f(vL.$$.fragment),A$r=l(),$f=a("p"),y$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eJ=a("a"),L$r=o("from_pretrained()"),x$r=o(" class method or the "),oJ=a("a"),k$r=o("from_config()"),S$r=o(` class
method.`),R$r=l(),FL=a("p"),B$r=o("This class cannot be instantiated directly using "),C7e=a("code"),P$r=o("__init__()"),$$r=o(" (throws an error)."),I$r=l(),$t=a("div"),f(TL.$$.fragment),q$r=l(),w7e=a("p"),N$r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),j$r=l(),If=a("p"),D$r=o(`Note:
Loading a model from its configuration file does `),A7e=a("strong"),G$r=o("not"),O$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=a("a"),V$r=o("from_pretrained()"),X$r=o(" to load the model weights."),z$r=l(),y7e=a("p"),Q$r=o("Examples:"),W$r=l(),f(ML.$$.fragment),H$r=l(),qo=a("div"),f(EL.$$.fragment),U$r=l(),L7e=a("p"),J$r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Y$r=l(),jn=a("p"),K$r=o("The model class to instantiate is selected based on the "),x7e=a("code"),Z$r=o("model_type"),eIr=o(` property of the config object (either
passed as an argument or loaded from `),k7e=a("code"),oIr=o("pretrained_model_name_or_path"),rIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S7e=a("code"),tIr=o("pretrained_model_name_or_path"),aIr=o(":"),nIr=l(),R7e=a("ul"),j3=a("li"),B7e=a("strong"),sIr=o("bert"),lIr=o(" \u2014 "),tJ=a("a"),iIr=o("FlaxBertForNextSentencePrediction"),dIr=o(" (BERT model)"),cIr=l(),P7e=a("p"),fIr=o("Examples:"),mIr=l(),f(CL.$$.fragment),J$e=l(),qf=a("h2"),D3=a("a"),$7e=a("span"),f(wL.$$.fragment),gIr=l(),I7e=a("span"),hIr=o("FlaxAutoModelForImageClassification"),Y$e=l(),Or=a("div"),f(AL.$$.fragment),pIr=l(),Nf=a("p"),_Ir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),aJ=a("a"),uIr=o("from_pretrained()"),bIr=o(" class method or the "),nJ=a("a"),vIr=o("from_config()"),FIr=o(` class
method.`),TIr=l(),yL=a("p"),MIr=o("This class cannot be instantiated directly using "),q7e=a("code"),EIr=o("__init__()"),CIr=o(" (throws an error)."),wIr=l(),It=a("div"),f(LL.$$.fragment),AIr=l(),N7e=a("p"),yIr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),LIr=l(),jf=a("p"),xIr=o(`Note:
Loading a model from its configuration file does `),j7e=a("strong"),kIr=o("not"),SIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=a("a"),RIr=o("from_pretrained()"),BIr=o(" to load the model weights."),PIr=l(),D7e=a("p"),$Ir=o("Examples:"),IIr=l(),f(xL.$$.fragment),qIr=l(),No=a("div"),f(kL.$$.fragment),NIr=l(),G7e=a("p"),jIr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),DIr=l(),Dn=a("p"),GIr=o("The model class to instantiate is selected based on the "),O7e=a("code"),OIr=o("model_type"),VIr=o(` property of the config object (either
passed as an argument or loaded from `),V7e=a("code"),XIr=o("pretrained_model_name_or_path"),zIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X7e=a("code"),QIr=o("pretrained_model_name_or_path"),WIr=o(":"),HIr=l(),SL=a("ul"),G3=a("li"),z7e=a("strong"),UIr=o("beit"),JIr=o(" \u2014 "),lJ=a("a"),YIr=o("FlaxBeitForImageClassification"),KIr=o(" (BEiT model)"),ZIr=l(),O3=a("li"),Q7e=a("strong"),eqr=o("vit"),oqr=o(" \u2014 "),iJ=a("a"),rqr=o("FlaxViTForImageClassification"),tqr=o(" (ViT model)"),aqr=l(),W7e=a("p"),nqr=o("Examples:"),sqr=l(),f(RL.$$.fragment),K$e=l(),Df=a("h2"),V3=a("a"),H7e=a("span"),f(BL.$$.fragment),lqr=l(),U7e=a("span"),iqr=o("FlaxAutoModelForVision2Seq"),Z$e=l(),Vr=a("div"),f(PL.$$.fragment),dqr=l(),Gf=a("p"),cqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dJ=a("a"),fqr=o("from_pretrained()"),mqr=o(" class method or the "),cJ=a("a"),gqr=o("from_config()"),hqr=o(` class
method.`),pqr=l(),$L=a("p"),_qr=o("This class cannot be instantiated directly using "),J7e=a("code"),uqr=o("__init__()"),bqr=o(" (throws an error)."),vqr=l(),qt=a("div"),f(IL.$$.fragment),Fqr=l(),Y7e=a("p"),Tqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Mqr=l(),Of=a("p"),Eqr=o(`Note:
Loading a model from its configuration file does `),K7e=a("strong"),Cqr=o("not"),wqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=a("a"),Aqr=o("from_pretrained()"),yqr=o(" to load the model weights."),Lqr=l(),Z7e=a("p"),xqr=o("Examples:"),kqr=l(),f(qL.$$.fragment),Sqr=l(),jo=a("div"),f(NL.$$.fragment),Rqr=l(),eMe=a("p"),Bqr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Pqr=l(),Gn=a("p"),$qr=o("The model class to instantiate is selected based on the "),oMe=a("code"),Iqr=o("model_type"),qqr=o(` property of the config object (either
passed as an argument or loaded from `),rMe=a("code"),Nqr=o("pretrained_model_name_or_path"),jqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=a("code"),Dqr=o("pretrained_model_name_or_path"),Gqr=o(":"),Oqr=l(),aMe=a("ul"),X3=a("li"),nMe=a("strong"),Vqr=o("vision-encoder-decoder"),Xqr=o(" \u2014 "),mJ=a("a"),zqr=o("FlaxVisionEncoderDecoderModel"),Qqr=o(" (Vision Encoder decoder model)"),Wqr=l(),sMe=a("p"),Hqr=o("Examples:"),Uqr=l(),f(jL.$$.fragment),this.h()},l(c){const u=Ayt('[data-svelte="svelte-1phssyn"]',document.head);oe=n(u,"META",{name:!0,content:!0}),u.forEach(t),co=i(c),me=n(c,"H1",{class:!0});var DL=s(me);Ae=n(DL,"A",{id:!0,class:!0,href:!0});var lMe=s(Ae);io=n(lMe,"SPAN",{});var iMe=s(io);m(_e.$$.fragment,iMe),iMe.forEach(t),lMe.forEach(t),Ce=i(DL),Xo=n(DL,"SPAN",{});var Yqr=s(Xo);zi=r(Yqr,"Auto Classes"),Yqr.forEach(t),DL.forEach(t),zf=i(c),fa=n(c,"P",{});var oIe=s(fa);Qi=r(oIe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Wi=n(oIe,"CODE",{});var Kqr=s(Wi);zC=r(Kqr,"from_pretrained()"),Kqr.forEach(t),Qf=r(oIe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),oIe.forEach(t),Se=i(c),fo=n(c,"P",{});var z3=s(fo);Hi=r(z3,"Instantiating one of "),On=n(z3,"A",{href:!0});var Zqr=s(On);QC=r(Zqr,"AutoConfig"),Zqr.forEach(t),Vn=r(z3,", "),Xn=n(z3,"A",{href:!0});var eNr=s(Xn);WC=r(eNr,"AutoModel"),eNr.forEach(t),Ui=r(z3,`, and
`),zn=n(z3,"A",{href:!0});var oNr=s(zn);HC=r(oNr,"AutoTokenizer"),oNr.forEach(t),Ji=r(z3," will directly create a class of the relevant architecture. For instance"),z3.forEach(t),Wf=i(c),m(Da.$$.fragment,c),mo=i(c),ve=n(c,"P",{});var rIe=s(ve);z9=r(rIe,"will create a model that is an instance of "),Yi=n(rIe,"A",{href:!0});var rNr=s(Yi);Q9=r(rNr,"BertModel"),rNr.forEach(t),W9=r(rIe,"."),rIe.forEach(t),zo=i(c),Ga=n(c,"P",{});var tIe=s(Ga);H9=r(tIe,"There is one class of "),Hf=n(tIe,"CODE",{});var tNr=s(Hf);U9=r(tNr,"AutoModel"),tNr.forEach(t),mNe=r(tIe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),tIe.forEach(t),ZBe=i(c),Ki=n(c,"H2",{class:!0});var aIe=s(Ki);Uf=n(aIe,"A",{id:!0,class:!0,href:!0});var aNr=s(Uf);nK=n(aNr,"SPAN",{});var nNr=s(nK);m(UC.$$.fragment,nNr),nNr.forEach(t),aNr.forEach(t),gNe=i(aIe),sK=n(aIe,"SPAN",{});var sNr=s(sK);hNe=r(sNr,"Extending the Auto Classes"),sNr.forEach(t),aIe.forEach(t),ePe=i(c),Qn=n(c,"P",{});var gJ=s(Qn);pNe=r(gJ,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),lK=n(gJ,"CODE",{});var lNr=s(lK);_Ne=r(lNr,"NewModel"),lNr.forEach(t),uNe=r(gJ,", make sure you have a "),iK=n(gJ,"CODE",{});var iNr=s(iK);bNe=r(iNr,"NewModelConfig"),iNr.forEach(t),vNe=r(gJ,` then you can add those to the auto
classes like this:`),gJ.forEach(t),oPe=i(c),m(JC.$$.fragment,c),rPe=i(c),J9=n(c,"P",{});var dNr=s(J9);FNe=r(dNr,"You will then be able to use the auto classes like you would usually do!"),dNr.forEach(t),tPe=i(c),m(Jf.$$.fragment,c),aPe=i(c),Zi=n(c,"H2",{class:!0});var nIe=s(Zi);Yf=n(nIe,"A",{id:!0,class:!0,href:!0});var cNr=s(Yf);dK=n(cNr,"SPAN",{});var fNr=s(dK);m(YC.$$.fragment,fNr),fNr.forEach(t),cNr.forEach(t),TNe=i(nIe),cK=n(nIe,"SPAN",{});var mNr=s(cK);MNe=r(mNr,"AutoConfig"),mNr.forEach(t),nIe.forEach(t),nPe=i(c),Qo=n(c,"DIV",{class:!0});var Ys=s(Qo);m(KC.$$.fragment,Ys),ENe=i(Ys),ZC=n(Ys,"P",{});var sIe=s(ZC);CNe=r(sIe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Y9=n(sIe,"A",{href:!0});var gNr=s(Y9);wNe=r(gNr,"from_pretrained()"),gNr.forEach(t),ANe=r(sIe," class method."),sIe.forEach(t),yNe=i(Ys),e6=n(Ys,"P",{});var lIe=s(e6);LNe=r(lIe,"This class cannot be instantiated directly using "),fK=n(lIe,"CODE",{});var hNr=s(fK);xNe=r(hNr,"__init__()"),hNr.forEach(t),kNe=r(lIe," (throws an error)."),lIe.forEach(t),SNe=i(Ys),go=n(Ys,"DIV",{class:!0});var ga=s(go);m(o6.$$.fragment,ga),RNe=i(ga),mK=n(ga,"P",{});var pNr=s(mK);BNe=r(pNr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),pNr.forEach(t),PNe=i(ga),ed=n(ga,"P",{});var hJ=s(ed);$Ne=r(hJ,"The configuration class to instantiate is selected based on the "),gK=n(hJ,"CODE",{});var _Nr=s(gK);INe=r(_Nr,"model_type"),_Nr.forEach(t),qNe=r(hJ,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),hK=n(hJ,"CODE",{});var uNr=s(hK);NNe=r(uNr,"pretrained_model_name_or_path"),uNr.forEach(t),jNe=r(hJ,":"),hJ.forEach(t),DNe=i(ga),v=n(ga,"UL",{});var F=s(v);Kf=n(F,"LI",{});var dMe=s(Kf);pK=n(dMe,"STRONG",{});var bNr=s(pK);GNe=r(bNr,"albert"),bNr.forEach(t),ONe=r(dMe," \u2014 "),K9=n(dMe,"A",{href:!0});var vNr=s(K9);VNe=r(vNr,"AlbertConfig"),vNr.forEach(t),XNe=r(dMe," (ALBERT model)"),dMe.forEach(t),zNe=i(F),Zf=n(F,"LI",{});var cMe=s(Zf);_K=n(cMe,"STRONG",{});var FNr=s(_K);QNe=r(FNr,"bart"),FNr.forEach(t),WNe=r(cMe," \u2014 "),Z9=n(cMe,"A",{href:!0});var TNr=s(Z9);HNe=r(TNr,"BartConfig"),TNr.forEach(t),UNe=r(cMe," (BART model)"),cMe.forEach(t),JNe=i(F),em=n(F,"LI",{});var fMe=s(em);uK=n(fMe,"STRONG",{});var MNr=s(uK);YNe=r(MNr,"beit"),MNr.forEach(t),KNe=r(fMe," \u2014 "),ex=n(fMe,"A",{href:!0});var ENr=s(ex);ZNe=r(ENr,"BeitConfig"),ENr.forEach(t),eje=r(fMe," (BEiT model)"),fMe.forEach(t),oje=i(F),om=n(F,"LI",{});var mMe=s(om);bK=n(mMe,"STRONG",{});var CNr=s(bK);rje=r(CNr,"bert"),CNr.forEach(t),tje=r(mMe," \u2014 "),ox=n(mMe,"A",{href:!0});var wNr=s(ox);aje=r(wNr,"BertConfig"),wNr.forEach(t),nje=r(mMe," (BERT model)"),mMe.forEach(t),sje=i(F),rm=n(F,"LI",{});var gMe=s(rm);vK=n(gMe,"STRONG",{});var ANr=s(vK);lje=r(ANr,"bert-generation"),ANr.forEach(t),ije=r(gMe," \u2014 "),rx=n(gMe,"A",{href:!0});var yNr=s(rx);dje=r(yNr,"BertGenerationConfig"),yNr.forEach(t),cje=r(gMe," (Bert Generation model)"),gMe.forEach(t),fje=i(F),tm=n(F,"LI",{});var hMe=s(tm);FK=n(hMe,"STRONG",{});var LNr=s(FK);mje=r(LNr,"big_bird"),LNr.forEach(t),gje=r(hMe," \u2014 "),tx=n(hMe,"A",{href:!0});var xNr=s(tx);hje=r(xNr,"BigBirdConfig"),xNr.forEach(t),pje=r(hMe," (BigBird model)"),hMe.forEach(t),_je=i(F),am=n(F,"LI",{});var pMe=s(am);TK=n(pMe,"STRONG",{});var kNr=s(TK);uje=r(kNr,"bigbird_pegasus"),kNr.forEach(t),bje=r(pMe," \u2014 "),ax=n(pMe,"A",{href:!0});var SNr=s(ax);vje=r(SNr,"BigBirdPegasusConfig"),SNr.forEach(t),Fje=r(pMe," (BigBirdPegasus model)"),pMe.forEach(t),Tje=i(F),nm=n(F,"LI",{});var _Me=s(nm);MK=n(_Me,"STRONG",{});var RNr=s(MK);Mje=r(RNr,"blenderbot"),RNr.forEach(t),Eje=r(_Me," \u2014 "),nx=n(_Me,"A",{href:!0});var BNr=s(nx);Cje=r(BNr,"BlenderbotConfig"),BNr.forEach(t),wje=r(_Me," (Blenderbot model)"),_Me.forEach(t),Aje=i(F),sm=n(F,"LI",{});var uMe=s(sm);EK=n(uMe,"STRONG",{});var PNr=s(EK);yje=r(PNr,"blenderbot-small"),PNr.forEach(t),Lje=r(uMe," \u2014 "),sx=n(uMe,"A",{href:!0});var $Nr=s(sx);xje=r($Nr,"BlenderbotSmallConfig"),$Nr.forEach(t),kje=r(uMe," (BlenderbotSmall model)"),uMe.forEach(t),Sje=i(F),lm=n(F,"LI",{});var bMe=s(lm);CK=n(bMe,"STRONG",{});var INr=s(CK);Rje=r(INr,"camembert"),INr.forEach(t),Bje=r(bMe," \u2014 "),lx=n(bMe,"A",{href:!0});var qNr=s(lx);Pje=r(qNr,"CamembertConfig"),qNr.forEach(t),$je=r(bMe," (CamemBERT model)"),bMe.forEach(t),Ije=i(F),im=n(F,"LI",{});var vMe=s(im);wK=n(vMe,"STRONG",{});var NNr=s(wK);qje=r(NNr,"canine"),NNr.forEach(t),Nje=r(vMe," \u2014 "),ix=n(vMe,"A",{href:!0});var jNr=s(ix);jje=r(jNr,"CanineConfig"),jNr.forEach(t),Dje=r(vMe," (Canine model)"),vMe.forEach(t),Gje=i(F),dm=n(F,"LI",{});var FMe=s(dm);AK=n(FMe,"STRONG",{});var DNr=s(AK);Oje=r(DNr,"clip"),DNr.forEach(t),Vje=r(FMe," \u2014 "),dx=n(FMe,"A",{href:!0});var GNr=s(dx);Xje=r(GNr,"CLIPConfig"),GNr.forEach(t),zje=r(FMe," (CLIP model)"),FMe.forEach(t),Qje=i(F),cm=n(F,"LI",{});var TMe=s(cm);yK=n(TMe,"STRONG",{});var ONr=s(yK);Wje=r(ONr,"convbert"),ONr.forEach(t),Hje=r(TMe," \u2014 "),cx=n(TMe,"A",{href:!0});var VNr=s(cx);Uje=r(VNr,"ConvBertConfig"),VNr.forEach(t),Jje=r(TMe," (ConvBERT model)"),TMe.forEach(t),Yje=i(F),fm=n(F,"LI",{});var MMe=s(fm);LK=n(MMe,"STRONG",{});var XNr=s(LK);Kje=r(XNr,"convnext"),XNr.forEach(t),Zje=r(MMe," \u2014 "),fx=n(MMe,"A",{href:!0});var zNr=s(fx);eDe=r(zNr,"ConvNextConfig"),zNr.forEach(t),oDe=r(MMe," (ConvNext model)"),MMe.forEach(t),rDe=i(F),mm=n(F,"LI",{});var EMe=s(mm);xK=n(EMe,"STRONG",{});var QNr=s(xK);tDe=r(QNr,"ctrl"),QNr.forEach(t),aDe=r(EMe," \u2014 "),mx=n(EMe,"A",{href:!0});var WNr=s(mx);nDe=r(WNr,"CTRLConfig"),WNr.forEach(t),sDe=r(EMe," (CTRL model)"),EMe.forEach(t),lDe=i(F),gm=n(F,"LI",{});var CMe=s(gm);kK=n(CMe,"STRONG",{});var HNr=s(kK);iDe=r(HNr,"data2vec-audio"),HNr.forEach(t),dDe=r(CMe," \u2014 "),gx=n(CMe,"A",{href:!0});var UNr=s(gx);cDe=r(UNr,"Data2VecAudioConfig"),UNr.forEach(t),fDe=r(CMe," (Data2VecAudio model)"),CMe.forEach(t),mDe=i(F),hm=n(F,"LI",{});var wMe=s(hm);SK=n(wMe,"STRONG",{});var JNr=s(SK);gDe=r(JNr,"data2vec-text"),JNr.forEach(t),hDe=r(wMe," \u2014 "),hx=n(wMe,"A",{href:!0});var YNr=s(hx);pDe=r(YNr,"Data2VecTextConfig"),YNr.forEach(t),_De=r(wMe," (Data2VecText model)"),wMe.forEach(t),uDe=i(F),pm=n(F,"LI",{});var AMe=s(pm);RK=n(AMe,"STRONG",{});var KNr=s(RK);bDe=r(KNr,"data2vec-vision"),KNr.forEach(t),vDe=r(AMe," \u2014 "),px=n(AMe,"A",{href:!0});var ZNr=s(px);FDe=r(ZNr,"Data2VecVisionConfig"),ZNr.forEach(t),TDe=r(AMe," (Data2VecVision model)"),AMe.forEach(t),MDe=i(F),_m=n(F,"LI",{});var yMe=s(_m);BK=n(yMe,"STRONG",{});var ejr=s(BK);EDe=r(ejr,"deberta"),ejr.forEach(t),CDe=r(yMe," \u2014 "),_x=n(yMe,"A",{href:!0});var ojr=s(_x);wDe=r(ojr,"DebertaConfig"),ojr.forEach(t),ADe=r(yMe," (DeBERTa model)"),yMe.forEach(t),yDe=i(F),um=n(F,"LI",{});var LMe=s(um);PK=n(LMe,"STRONG",{});var rjr=s(PK);LDe=r(rjr,"deberta-v2"),rjr.forEach(t),xDe=r(LMe," \u2014 "),ux=n(LMe,"A",{href:!0});var tjr=s(ux);kDe=r(tjr,"DebertaV2Config"),tjr.forEach(t),SDe=r(LMe," (DeBERTa-v2 model)"),LMe.forEach(t),RDe=i(F),bm=n(F,"LI",{});var xMe=s(bm);$K=n(xMe,"STRONG",{});var ajr=s($K);BDe=r(ajr,"decision_transformer"),ajr.forEach(t),PDe=r(xMe," \u2014 "),bx=n(xMe,"A",{href:!0});var njr=s(bx);$De=r(njr,"DecisionTransformerConfig"),njr.forEach(t),IDe=r(xMe," (Decision Transformer model)"),xMe.forEach(t),qDe=i(F),vm=n(F,"LI",{});var kMe=s(vm);IK=n(kMe,"STRONG",{});var sjr=s(IK);NDe=r(sjr,"deit"),sjr.forEach(t),jDe=r(kMe," \u2014 "),vx=n(kMe,"A",{href:!0});var ljr=s(vx);DDe=r(ljr,"DeiTConfig"),ljr.forEach(t),GDe=r(kMe," (DeiT model)"),kMe.forEach(t),ODe=i(F),Fm=n(F,"LI",{});var SMe=s(Fm);qK=n(SMe,"STRONG",{});var ijr=s(qK);VDe=r(ijr,"detr"),ijr.forEach(t),XDe=r(SMe," \u2014 "),Fx=n(SMe,"A",{href:!0});var djr=s(Fx);zDe=r(djr,"DetrConfig"),djr.forEach(t),QDe=r(SMe," (DETR model)"),SMe.forEach(t),WDe=i(F),Tm=n(F,"LI",{});var RMe=s(Tm);NK=n(RMe,"STRONG",{});var cjr=s(NK);HDe=r(cjr,"distilbert"),cjr.forEach(t),UDe=r(RMe," \u2014 "),Tx=n(RMe,"A",{href:!0});var fjr=s(Tx);JDe=r(fjr,"DistilBertConfig"),fjr.forEach(t),YDe=r(RMe," (DistilBERT model)"),RMe.forEach(t),KDe=i(F),Mm=n(F,"LI",{});var BMe=s(Mm);jK=n(BMe,"STRONG",{});var mjr=s(jK);ZDe=r(mjr,"dpr"),mjr.forEach(t),eGe=r(BMe," \u2014 "),Mx=n(BMe,"A",{href:!0});var gjr=s(Mx);oGe=r(gjr,"DPRConfig"),gjr.forEach(t),rGe=r(BMe," (DPR model)"),BMe.forEach(t),tGe=i(F),Em=n(F,"LI",{});var PMe=s(Em);DK=n(PMe,"STRONG",{});var hjr=s(DK);aGe=r(hjr,"dpt"),hjr.forEach(t),nGe=r(PMe," \u2014 "),Ex=n(PMe,"A",{href:!0});var pjr=s(Ex);sGe=r(pjr,"DPTConfig"),pjr.forEach(t),lGe=r(PMe," (DPT model)"),PMe.forEach(t),iGe=i(F),Cm=n(F,"LI",{});var $Me=s(Cm);GK=n($Me,"STRONG",{});var _jr=s(GK);dGe=r(_jr,"electra"),_jr.forEach(t),cGe=r($Me," \u2014 "),Cx=n($Me,"A",{href:!0});var ujr=s(Cx);fGe=r(ujr,"ElectraConfig"),ujr.forEach(t),mGe=r($Me," (ELECTRA model)"),$Me.forEach(t),gGe=i(F),wm=n(F,"LI",{});var IMe=s(wm);OK=n(IMe,"STRONG",{});var bjr=s(OK);hGe=r(bjr,"encoder-decoder"),bjr.forEach(t),pGe=r(IMe," \u2014 "),wx=n(IMe,"A",{href:!0});var vjr=s(wx);_Ge=r(vjr,"EncoderDecoderConfig"),vjr.forEach(t),uGe=r(IMe," (Encoder decoder model)"),IMe.forEach(t),bGe=i(F),Am=n(F,"LI",{});var qMe=s(Am);VK=n(qMe,"STRONG",{});var Fjr=s(VK);vGe=r(Fjr,"flaubert"),Fjr.forEach(t),FGe=r(qMe," \u2014 "),Ax=n(qMe,"A",{href:!0});var Tjr=s(Ax);TGe=r(Tjr,"FlaubertConfig"),Tjr.forEach(t),MGe=r(qMe," (FlauBERT model)"),qMe.forEach(t),EGe=i(F),ym=n(F,"LI",{});var NMe=s(ym);XK=n(NMe,"STRONG",{});var Mjr=s(XK);CGe=r(Mjr,"fnet"),Mjr.forEach(t),wGe=r(NMe," \u2014 "),yx=n(NMe,"A",{href:!0});var Ejr=s(yx);AGe=r(Ejr,"FNetConfig"),Ejr.forEach(t),yGe=r(NMe," (FNet model)"),NMe.forEach(t),LGe=i(F),Lm=n(F,"LI",{});var jMe=s(Lm);zK=n(jMe,"STRONG",{});var Cjr=s(zK);xGe=r(Cjr,"fsmt"),Cjr.forEach(t),kGe=r(jMe," \u2014 "),Lx=n(jMe,"A",{href:!0});var wjr=s(Lx);SGe=r(wjr,"FSMTConfig"),wjr.forEach(t),RGe=r(jMe," (FairSeq Machine-Translation model)"),jMe.forEach(t),BGe=i(F),xm=n(F,"LI",{});var DMe=s(xm);QK=n(DMe,"STRONG",{});var Ajr=s(QK);PGe=r(Ajr,"funnel"),Ajr.forEach(t),$Ge=r(DMe," \u2014 "),xx=n(DMe,"A",{href:!0});var yjr=s(xx);IGe=r(yjr,"FunnelConfig"),yjr.forEach(t),qGe=r(DMe," (Funnel Transformer model)"),DMe.forEach(t),NGe=i(F),km=n(F,"LI",{});var GMe=s(km);WK=n(GMe,"STRONG",{});var Ljr=s(WK);jGe=r(Ljr,"glpn"),Ljr.forEach(t),DGe=r(GMe," \u2014 "),kx=n(GMe,"A",{href:!0});var xjr=s(kx);GGe=r(xjr,"GLPNConfig"),xjr.forEach(t),OGe=r(GMe," (GLPN model)"),GMe.forEach(t),VGe=i(F),Sm=n(F,"LI",{});var OMe=s(Sm);HK=n(OMe,"STRONG",{});var kjr=s(HK);XGe=r(kjr,"gpt2"),kjr.forEach(t),zGe=r(OMe," \u2014 "),Sx=n(OMe,"A",{href:!0});var Sjr=s(Sx);QGe=r(Sjr,"GPT2Config"),Sjr.forEach(t),WGe=r(OMe," (OpenAI GPT-2 model)"),OMe.forEach(t),HGe=i(F),Rm=n(F,"LI",{});var VMe=s(Rm);UK=n(VMe,"STRONG",{});var Rjr=s(UK);UGe=r(Rjr,"gpt_neo"),Rjr.forEach(t),JGe=r(VMe," \u2014 "),Rx=n(VMe,"A",{href:!0});var Bjr=s(Rx);YGe=r(Bjr,"GPTNeoConfig"),Bjr.forEach(t),KGe=r(VMe," (GPT Neo model)"),VMe.forEach(t),ZGe=i(F),Bm=n(F,"LI",{});var XMe=s(Bm);JK=n(XMe,"STRONG",{});var Pjr=s(JK);eOe=r(Pjr,"gptj"),Pjr.forEach(t),oOe=r(XMe," \u2014 "),Bx=n(XMe,"A",{href:!0});var $jr=s(Bx);rOe=r($jr,"GPTJConfig"),$jr.forEach(t),tOe=r(XMe," (GPT-J model)"),XMe.forEach(t),aOe=i(F),Pm=n(F,"LI",{});var zMe=s(Pm);YK=n(zMe,"STRONG",{});var Ijr=s(YK);nOe=r(Ijr,"hubert"),Ijr.forEach(t),sOe=r(zMe," \u2014 "),Px=n(zMe,"A",{href:!0});var qjr=s(Px);lOe=r(qjr,"HubertConfig"),qjr.forEach(t),iOe=r(zMe," (Hubert model)"),zMe.forEach(t),dOe=i(F),$m=n(F,"LI",{});var QMe=s($m);KK=n(QMe,"STRONG",{});var Njr=s(KK);cOe=r(Njr,"ibert"),Njr.forEach(t),fOe=r(QMe," \u2014 "),$x=n(QMe,"A",{href:!0});var jjr=s($x);mOe=r(jjr,"IBertConfig"),jjr.forEach(t),gOe=r(QMe," (I-BERT model)"),QMe.forEach(t),hOe=i(F),Im=n(F,"LI",{});var WMe=s(Im);ZK=n(WMe,"STRONG",{});var Djr=s(ZK);pOe=r(Djr,"imagegpt"),Djr.forEach(t),_Oe=r(WMe," \u2014 "),Ix=n(WMe,"A",{href:!0});var Gjr=s(Ix);uOe=r(Gjr,"ImageGPTConfig"),Gjr.forEach(t),bOe=r(WMe," (ImageGPT model)"),WMe.forEach(t),vOe=i(F),qm=n(F,"LI",{});var HMe=s(qm);eZ=n(HMe,"STRONG",{});var Ojr=s(eZ);FOe=r(Ojr,"layoutlm"),Ojr.forEach(t),TOe=r(HMe," \u2014 "),qx=n(HMe,"A",{href:!0});var Vjr=s(qx);MOe=r(Vjr,"LayoutLMConfig"),Vjr.forEach(t),EOe=r(HMe," (LayoutLM model)"),HMe.forEach(t),COe=i(F),Nm=n(F,"LI",{});var UMe=s(Nm);oZ=n(UMe,"STRONG",{});var Xjr=s(oZ);wOe=r(Xjr,"layoutlmv2"),Xjr.forEach(t),AOe=r(UMe," \u2014 "),Nx=n(UMe,"A",{href:!0});var zjr=s(Nx);yOe=r(zjr,"LayoutLMv2Config"),zjr.forEach(t),LOe=r(UMe," (LayoutLMv2 model)"),UMe.forEach(t),xOe=i(F),jm=n(F,"LI",{});var JMe=s(jm);rZ=n(JMe,"STRONG",{});var Qjr=s(rZ);kOe=r(Qjr,"led"),Qjr.forEach(t),SOe=r(JMe," \u2014 "),jx=n(JMe,"A",{href:!0});var Wjr=s(jx);ROe=r(Wjr,"LEDConfig"),Wjr.forEach(t),BOe=r(JMe," (LED model)"),JMe.forEach(t),POe=i(F),Dm=n(F,"LI",{});var YMe=s(Dm);tZ=n(YMe,"STRONG",{});var Hjr=s(tZ);$Oe=r(Hjr,"longformer"),Hjr.forEach(t),IOe=r(YMe," \u2014 "),Dx=n(YMe,"A",{href:!0});var Ujr=s(Dx);qOe=r(Ujr,"LongformerConfig"),Ujr.forEach(t),NOe=r(YMe," (Longformer model)"),YMe.forEach(t),jOe=i(F),Gm=n(F,"LI",{});var KMe=s(Gm);aZ=n(KMe,"STRONG",{});var Jjr=s(aZ);DOe=r(Jjr,"luke"),Jjr.forEach(t),GOe=r(KMe," \u2014 "),Gx=n(KMe,"A",{href:!0});var Yjr=s(Gx);OOe=r(Yjr,"LukeConfig"),Yjr.forEach(t),VOe=r(KMe," (LUKE model)"),KMe.forEach(t),XOe=i(F),Om=n(F,"LI",{});var ZMe=s(Om);nZ=n(ZMe,"STRONG",{});var Kjr=s(nZ);zOe=r(Kjr,"lxmert"),Kjr.forEach(t),QOe=r(ZMe," \u2014 "),Ox=n(ZMe,"A",{href:!0});var Zjr=s(Ox);WOe=r(Zjr,"LxmertConfig"),Zjr.forEach(t),HOe=r(ZMe," (LXMERT model)"),ZMe.forEach(t),UOe=i(F),Vm=n(F,"LI",{});var eEe=s(Vm);sZ=n(eEe,"STRONG",{});var eDr=s(sZ);JOe=r(eDr,"m2m_100"),eDr.forEach(t),YOe=r(eEe," \u2014 "),Vx=n(eEe,"A",{href:!0});var oDr=s(Vx);KOe=r(oDr,"M2M100Config"),oDr.forEach(t),ZOe=r(eEe," (M2M100 model)"),eEe.forEach(t),eVe=i(F),Xm=n(F,"LI",{});var oEe=s(Xm);lZ=n(oEe,"STRONG",{});var rDr=s(lZ);oVe=r(rDr,"marian"),rDr.forEach(t),rVe=r(oEe," \u2014 "),Xx=n(oEe,"A",{href:!0});var tDr=s(Xx);tVe=r(tDr,"MarianConfig"),tDr.forEach(t),aVe=r(oEe," (Marian model)"),oEe.forEach(t),nVe=i(F),zm=n(F,"LI",{});var rEe=s(zm);iZ=n(rEe,"STRONG",{});var aDr=s(iZ);sVe=r(aDr,"maskformer"),aDr.forEach(t),lVe=r(rEe," \u2014 "),zx=n(rEe,"A",{href:!0});var nDr=s(zx);iVe=r(nDr,"MaskFormerConfig"),nDr.forEach(t),dVe=r(rEe," (MaskFormer model)"),rEe.forEach(t),cVe=i(F),Qm=n(F,"LI",{});var tEe=s(Qm);dZ=n(tEe,"STRONG",{});var sDr=s(dZ);fVe=r(sDr,"mbart"),sDr.forEach(t),mVe=r(tEe," \u2014 "),Qx=n(tEe,"A",{href:!0});var lDr=s(Qx);gVe=r(lDr,"MBartConfig"),lDr.forEach(t),hVe=r(tEe," (mBART model)"),tEe.forEach(t),pVe=i(F),Wm=n(F,"LI",{});var aEe=s(Wm);cZ=n(aEe,"STRONG",{});var iDr=s(cZ);_Ve=r(iDr,"megatron-bert"),iDr.forEach(t),uVe=r(aEe," \u2014 "),Wx=n(aEe,"A",{href:!0});var dDr=s(Wx);bVe=r(dDr,"MegatronBertConfig"),dDr.forEach(t),vVe=r(aEe," (MegatronBert model)"),aEe.forEach(t),FVe=i(F),Hm=n(F,"LI",{});var nEe=s(Hm);fZ=n(nEe,"STRONG",{});var cDr=s(fZ);TVe=r(cDr,"mobilebert"),cDr.forEach(t),MVe=r(nEe," \u2014 "),Hx=n(nEe,"A",{href:!0});var fDr=s(Hx);EVe=r(fDr,"MobileBertConfig"),fDr.forEach(t),CVe=r(nEe," (MobileBERT model)"),nEe.forEach(t),wVe=i(F),Um=n(F,"LI",{});var sEe=s(Um);mZ=n(sEe,"STRONG",{});var mDr=s(mZ);AVe=r(mDr,"mpnet"),mDr.forEach(t),yVe=r(sEe," \u2014 "),Ux=n(sEe,"A",{href:!0});var gDr=s(Ux);LVe=r(gDr,"MPNetConfig"),gDr.forEach(t),xVe=r(sEe," (MPNet model)"),sEe.forEach(t),kVe=i(F),Jm=n(F,"LI",{});var lEe=s(Jm);gZ=n(lEe,"STRONG",{});var hDr=s(gZ);SVe=r(hDr,"mt5"),hDr.forEach(t),RVe=r(lEe," \u2014 "),Jx=n(lEe,"A",{href:!0});var pDr=s(Jx);BVe=r(pDr,"MT5Config"),pDr.forEach(t),PVe=r(lEe," (mT5 model)"),lEe.forEach(t),$Ve=i(F),Ym=n(F,"LI",{});var iEe=s(Ym);hZ=n(iEe,"STRONG",{});var _Dr=s(hZ);IVe=r(_Dr,"nystromformer"),_Dr.forEach(t),qVe=r(iEe," \u2014 "),Yx=n(iEe,"A",{href:!0});var uDr=s(Yx);NVe=r(uDr,"NystromformerConfig"),uDr.forEach(t),jVe=r(iEe," (Nystromformer model)"),iEe.forEach(t),DVe=i(F),Km=n(F,"LI",{});var dEe=s(Km);pZ=n(dEe,"STRONG",{});var bDr=s(pZ);GVe=r(bDr,"openai-gpt"),bDr.forEach(t),OVe=r(dEe," \u2014 "),Kx=n(dEe,"A",{href:!0});var vDr=s(Kx);VVe=r(vDr,"OpenAIGPTConfig"),vDr.forEach(t),XVe=r(dEe," (OpenAI GPT model)"),dEe.forEach(t),zVe=i(F),Zm=n(F,"LI",{});var cEe=s(Zm);_Z=n(cEe,"STRONG",{});var FDr=s(_Z);QVe=r(FDr,"pegasus"),FDr.forEach(t),WVe=r(cEe," \u2014 "),Zx=n(cEe,"A",{href:!0});var TDr=s(Zx);HVe=r(TDr,"PegasusConfig"),TDr.forEach(t),UVe=r(cEe," (Pegasus model)"),cEe.forEach(t),JVe=i(F),eg=n(F,"LI",{});var fEe=s(eg);uZ=n(fEe,"STRONG",{});var MDr=s(uZ);YVe=r(MDr,"perceiver"),MDr.forEach(t),KVe=r(fEe," \u2014 "),ek=n(fEe,"A",{href:!0});var EDr=s(ek);ZVe=r(EDr,"PerceiverConfig"),EDr.forEach(t),eXe=r(fEe," (Perceiver model)"),fEe.forEach(t),oXe=i(F),og=n(F,"LI",{});var mEe=s(og);bZ=n(mEe,"STRONG",{});var CDr=s(bZ);rXe=r(CDr,"plbart"),CDr.forEach(t),tXe=r(mEe," \u2014 "),ok=n(mEe,"A",{href:!0});var wDr=s(ok);aXe=r(wDr,"PLBartConfig"),wDr.forEach(t),nXe=r(mEe," (PLBart model)"),mEe.forEach(t),sXe=i(F),rg=n(F,"LI",{});var gEe=s(rg);vZ=n(gEe,"STRONG",{});var ADr=s(vZ);lXe=r(ADr,"poolformer"),ADr.forEach(t),iXe=r(gEe," \u2014 "),rk=n(gEe,"A",{href:!0});var yDr=s(rk);dXe=r(yDr,"PoolFormerConfig"),yDr.forEach(t),cXe=r(gEe," (PoolFormer model)"),gEe.forEach(t),fXe=i(F),tg=n(F,"LI",{});var hEe=s(tg);FZ=n(hEe,"STRONG",{});var LDr=s(FZ);mXe=r(LDr,"prophetnet"),LDr.forEach(t),gXe=r(hEe," \u2014 "),tk=n(hEe,"A",{href:!0});var xDr=s(tk);hXe=r(xDr,"ProphetNetConfig"),xDr.forEach(t),pXe=r(hEe," (ProphetNet model)"),hEe.forEach(t),_Xe=i(F),ag=n(F,"LI",{});var pEe=s(ag);TZ=n(pEe,"STRONG",{});var kDr=s(TZ);uXe=r(kDr,"qdqbert"),kDr.forEach(t),bXe=r(pEe," \u2014 "),ak=n(pEe,"A",{href:!0});var SDr=s(ak);vXe=r(SDr,"QDQBertConfig"),SDr.forEach(t),FXe=r(pEe," (QDQBert model)"),pEe.forEach(t),TXe=i(F),ng=n(F,"LI",{});var _Ee=s(ng);MZ=n(_Ee,"STRONG",{});var RDr=s(MZ);MXe=r(RDr,"rag"),RDr.forEach(t),EXe=r(_Ee," \u2014 "),nk=n(_Ee,"A",{href:!0});var BDr=s(nk);CXe=r(BDr,"RagConfig"),BDr.forEach(t),wXe=r(_Ee," (RAG model)"),_Ee.forEach(t),AXe=i(F),sg=n(F,"LI",{});var uEe=s(sg);EZ=n(uEe,"STRONG",{});var PDr=s(EZ);yXe=r(PDr,"realm"),PDr.forEach(t),LXe=r(uEe," \u2014 "),sk=n(uEe,"A",{href:!0});var $Dr=s(sk);xXe=r($Dr,"RealmConfig"),$Dr.forEach(t),kXe=r(uEe," (Realm model)"),uEe.forEach(t),SXe=i(F),lg=n(F,"LI",{});var bEe=s(lg);CZ=n(bEe,"STRONG",{});var IDr=s(CZ);RXe=r(IDr,"reformer"),IDr.forEach(t),BXe=r(bEe," \u2014 "),lk=n(bEe,"A",{href:!0});var qDr=s(lk);PXe=r(qDr,"ReformerConfig"),qDr.forEach(t),$Xe=r(bEe," (Reformer model)"),bEe.forEach(t),IXe=i(F),ig=n(F,"LI",{});var vEe=s(ig);wZ=n(vEe,"STRONG",{});var NDr=s(wZ);qXe=r(NDr,"regnet"),NDr.forEach(t),NXe=r(vEe," \u2014 "),ik=n(vEe,"A",{href:!0});var jDr=s(ik);jXe=r(jDr,"RegNetConfig"),jDr.forEach(t),DXe=r(vEe," (RegNet model)"),vEe.forEach(t),GXe=i(F),dg=n(F,"LI",{});var FEe=s(dg);AZ=n(FEe,"STRONG",{});var DDr=s(AZ);OXe=r(DDr,"rembert"),DDr.forEach(t),VXe=r(FEe," \u2014 "),dk=n(FEe,"A",{href:!0});var GDr=s(dk);XXe=r(GDr,"RemBertConfig"),GDr.forEach(t),zXe=r(FEe," (RemBERT model)"),FEe.forEach(t),QXe=i(F),cg=n(F,"LI",{});var TEe=s(cg);yZ=n(TEe,"STRONG",{});var ODr=s(yZ);WXe=r(ODr,"resnet"),ODr.forEach(t),HXe=r(TEe," \u2014 "),ck=n(TEe,"A",{href:!0});var VDr=s(ck);UXe=r(VDr,"ResNetConfig"),VDr.forEach(t),JXe=r(TEe," (ResNet model)"),TEe.forEach(t),YXe=i(F),fg=n(F,"LI",{});var MEe=s(fg);LZ=n(MEe,"STRONG",{});var XDr=s(LZ);KXe=r(XDr,"retribert"),XDr.forEach(t),ZXe=r(MEe," \u2014 "),fk=n(MEe,"A",{href:!0});var zDr=s(fk);eze=r(zDr,"RetriBertConfig"),zDr.forEach(t),oze=r(MEe," (RetriBERT model)"),MEe.forEach(t),rze=i(F),mg=n(F,"LI",{});var EEe=s(mg);xZ=n(EEe,"STRONG",{});var QDr=s(xZ);tze=r(QDr,"roberta"),QDr.forEach(t),aze=r(EEe," \u2014 "),mk=n(EEe,"A",{href:!0});var WDr=s(mk);nze=r(WDr,"RobertaConfig"),WDr.forEach(t),sze=r(EEe," (RoBERTa model)"),EEe.forEach(t),lze=i(F),gg=n(F,"LI",{});var CEe=s(gg);kZ=n(CEe,"STRONG",{});var HDr=s(kZ);ize=r(HDr,"roformer"),HDr.forEach(t),dze=r(CEe," \u2014 "),gk=n(CEe,"A",{href:!0});var UDr=s(gk);cze=r(UDr,"RoFormerConfig"),UDr.forEach(t),fze=r(CEe," (RoFormer model)"),CEe.forEach(t),mze=i(F),hg=n(F,"LI",{});var wEe=s(hg);SZ=n(wEe,"STRONG",{});var JDr=s(SZ);gze=r(JDr,"segformer"),JDr.forEach(t),hze=r(wEe," \u2014 "),hk=n(wEe,"A",{href:!0});var YDr=s(hk);pze=r(YDr,"SegformerConfig"),YDr.forEach(t),_ze=r(wEe," (SegFormer model)"),wEe.forEach(t),uze=i(F),pg=n(F,"LI",{});var AEe=s(pg);RZ=n(AEe,"STRONG",{});var KDr=s(RZ);bze=r(KDr,"sew"),KDr.forEach(t),vze=r(AEe," \u2014 "),pk=n(AEe,"A",{href:!0});var ZDr=s(pk);Fze=r(ZDr,"SEWConfig"),ZDr.forEach(t),Tze=r(AEe," (SEW model)"),AEe.forEach(t),Mze=i(F),_g=n(F,"LI",{});var yEe=s(_g);BZ=n(yEe,"STRONG",{});var eGr=s(BZ);Eze=r(eGr,"sew-d"),eGr.forEach(t),Cze=r(yEe," \u2014 "),_k=n(yEe,"A",{href:!0});var oGr=s(_k);wze=r(oGr,"SEWDConfig"),oGr.forEach(t),Aze=r(yEe," (SEW-D model)"),yEe.forEach(t),yze=i(F),ug=n(F,"LI",{});var LEe=s(ug);PZ=n(LEe,"STRONG",{});var rGr=s(PZ);Lze=r(rGr,"speech-encoder-decoder"),rGr.forEach(t),xze=r(LEe," \u2014 "),uk=n(LEe,"A",{href:!0});var tGr=s(uk);kze=r(tGr,"SpeechEncoderDecoderConfig"),tGr.forEach(t),Sze=r(LEe," (Speech Encoder decoder model)"),LEe.forEach(t),Rze=i(F),bg=n(F,"LI",{});var xEe=s(bg);$Z=n(xEe,"STRONG",{});var aGr=s($Z);Bze=r(aGr,"speech_to_text"),aGr.forEach(t),Pze=r(xEe," \u2014 "),bk=n(xEe,"A",{href:!0});var nGr=s(bk);$ze=r(nGr,"Speech2TextConfig"),nGr.forEach(t),Ize=r(xEe," (Speech2Text model)"),xEe.forEach(t),qze=i(F),vg=n(F,"LI",{});var kEe=s(vg);IZ=n(kEe,"STRONG",{});var sGr=s(IZ);Nze=r(sGr,"speech_to_text_2"),sGr.forEach(t),jze=r(kEe," \u2014 "),vk=n(kEe,"A",{href:!0});var lGr=s(vk);Dze=r(lGr,"Speech2Text2Config"),lGr.forEach(t),Gze=r(kEe," (Speech2Text2 model)"),kEe.forEach(t),Oze=i(F),Fg=n(F,"LI",{});var SEe=s(Fg);qZ=n(SEe,"STRONG",{});var iGr=s(qZ);Vze=r(iGr,"splinter"),iGr.forEach(t),Xze=r(SEe," \u2014 "),Fk=n(SEe,"A",{href:!0});var dGr=s(Fk);zze=r(dGr,"SplinterConfig"),dGr.forEach(t),Qze=r(SEe," (Splinter model)"),SEe.forEach(t),Wze=i(F),Tg=n(F,"LI",{});var REe=s(Tg);NZ=n(REe,"STRONG",{});var cGr=s(NZ);Hze=r(cGr,"squeezebert"),cGr.forEach(t),Uze=r(REe," \u2014 "),Tk=n(REe,"A",{href:!0});var fGr=s(Tk);Jze=r(fGr,"SqueezeBertConfig"),fGr.forEach(t),Yze=r(REe," (SqueezeBERT model)"),REe.forEach(t),Kze=i(F),Mg=n(F,"LI",{});var BEe=s(Mg);jZ=n(BEe,"STRONG",{});var mGr=s(jZ);Zze=r(mGr,"swin"),mGr.forEach(t),eQe=r(BEe," \u2014 "),Mk=n(BEe,"A",{href:!0});var gGr=s(Mk);oQe=r(gGr,"SwinConfig"),gGr.forEach(t),rQe=r(BEe," (Swin model)"),BEe.forEach(t),tQe=i(F),Eg=n(F,"LI",{});var PEe=s(Eg);DZ=n(PEe,"STRONG",{});var hGr=s(DZ);aQe=r(hGr,"t5"),hGr.forEach(t),nQe=r(PEe," \u2014 "),Ek=n(PEe,"A",{href:!0});var pGr=s(Ek);sQe=r(pGr,"T5Config"),pGr.forEach(t),lQe=r(PEe," (T5 model)"),PEe.forEach(t),iQe=i(F),Cg=n(F,"LI",{});var $Ee=s(Cg);GZ=n($Ee,"STRONG",{});var _Gr=s(GZ);dQe=r(_Gr,"tapas"),_Gr.forEach(t),cQe=r($Ee," \u2014 "),Ck=n($Ee,"A",{href:!0});var uGr=s(Ck);fQe=r(uGr,"TapasConfig"),uGr.forEach(t),mQe=r($Ee," (TAPAS model)"),$Ee.forEach(t),gQe=i(F),wg=n(F,"LI",{});var IEe=s(wg);OZ=n(IEe,"STRONG",{});var bGr=s(OZ);hQe=r(bGr,"tapex"),bGr.forEach(t),pQe=r(IEe," \u2014 "),wk=n(IEe,"A",{href:!0});var vGr=s(wk);_Qe=r(vGr,"BartConfig"),vGr.forEach(t),uQe=r(IEe," (TAPEX model)"),IEe.forEach(t),bQe=i(F),Ag=n(F,"LI",{});var qEe=s(Ag);VZ=n(qEe,"STRONG",{});var FGr=s(VZ);vQe=r(FGr,"transfo-xl"),FGr.forEach(t),FQe=r(qEe," \u2014 "),Ak=n(qEe,"A",{href:!0});var TGr=s(Ak);TQe=r(TGr,"TransfoXLConfig"),TGr.forEach(t),MQe=r(qEe," (Transformer-XL model)"),qEe.forEach(t),EQe=i(F),yg=n(F,"LI",{});var NEe=s(yg);XZ=n(NEe,"STRONG",{});var MGr=s(XZ);CQe=r(MGr,"trocr"),MGr.forEach(t),wQe=r(NEe," \u2014 "),yk=n(NEe,"A",{href:!0});var EGr=s(yk);AQe=r(EGr,"TrOCRConfig"),EGr.forEach(t),yQe=r(NEe," (TrOCR model)"),NEe.forEach(t),LQe=i(F),Lg=n(F,"LI",{});var jEe=s(Lg);zZ=n(jEe,"STRONG",{});var CGr=s(zZ);xQe=r(CGr,"unispeech"),CGr.forEach(t),kQe=r(jEe," \u2014 "),Lk=n(jEe,"A",{href:!0});var wGr=s(Lk);SQe=r(wGr,"UniSpeechConfig"),wGr.forEach(t),RQe=r(jEe," (UniSpeech model)"),jEe.forEach(t),BQe=i(F),xg=n(F,"LI",{});var DEe=s(xg);QZ=n(DEe,"STRONG",{});var AGr=s(QZ);PQe=r(AGr,"unispeech-sat"),AGr.forEach(t),$Qe=r(DEe," \u2014 "),xk=n(DEe,"A",{href:!0});var yGr=s(xk);IQe=r(yGr,"UniSpeechSatConfig"),yGr.forEach(t),qQe=r(DEe," (UniSpeechSat model)"),DEe.forEach(t),NQe=i(F),kg=n(F,"LI",{});var GEe=s(kg);WZ=n(GEe,"STRONG",{});var LGr=s(WZ);jQe=r(LGr,"van"),LGr.forEach(t),DQe=r(GEe," \u2014 "),kk=n(GEe,"A",{href:!0});var xGr=s(kk);GQe=r(xGr,"VanConfig"),xGr.forEach(t),OQe=r(GEe," (VAN model)"),GEe.forEach(t),VQe=i(F),Sg=n(F,"LI",{});var OEe=s(Sg);HZ=n(OEe,"STRONG",{});var kGr=s(HZ);XQe=r(kGr,"vilt"),kGr.forEach(t),zQe=r(OEe," \u2014 "),Sk=n(OEe,"A",{href:!0});var SGr=s(Sk);QQe=r(SGr,"ViltConfig"),SGr.forEach(t),WQe=r(OEe," (ViLT model)"),OEe.forEach(t),HQe=i(F),Rg=n(F,"LI",{});var VEe=s(Rg);UZ=n(VEe,"STRONG",{});var RGr=s(UZ);UQe=r(RGr,"vision-encoder-decoder"),RGr.forEach(t),JQe=r(VEe," \u2014 "),Rk=n(VEe,"A",{href:!0});var BGr=s(Rk);YQe=r(BGr,"VisionEncoderDecoderConfig"),BGr.forEach(t),KQe=r(VEe," (Vision Encoder decoder model)"),VEe.forEach(t),ZQe=i(F),Bg=n(F,"LI",{});var XEe=s(Bg);JZ=n(XEe,"STRONG",{});var PGr=s(JZ);eWe=r(PGr,"vision-text-dual-encoder"),PGr.forEach(t),oWe=r(XEe," \u2014 "),Bk=n(XEe,"A",{href:!0});var $Gr=s(Bk);rWe=r($Gr,"VisionTextDualEncoderConfig"),$Gr.forEach(t),tWe=r(XEe," (VisionTextDualEncoder model)"),XEe.forEach(t),aWe=i(F),Pg=n(F,"LI",{});var zEe=s(Pg);YZ=n(zEe,"STRONG",{});var IGr=s(YZ);nWe=r(IGr,"visual_bert"),IGr.forEach(t),sWe=r(zEe," \u2014 "),Pk=n(zEe,"A",{href:!0});var qGr=s(Pk);lWe=r(qGr,"VisualBertConfig"),qGr.forEach(t),iWe=r(zEe," (VisualBert model)"),zEe.forEach(t),dWe=i(F),$g=n(F,"LI",{});var QEe=s($g);KZ=n(QEe,"STRONG",{});var NGr=s(KZ);cWe=r(NGr,"vit"),NGr.forEach(t),fWe=r(QEe," \u2014 "),$k=n(QEe,"A",{href:!0});var jGr=s($k);mWe=r(jGr,"ViTConfig"),jGr.forEach(t),gWe=r(QEe," (ViT model)"),QEe.forEach(t),hWe=i(F),Ig=n(F,"LI",{});var WEe=s(Ig);ZZ=n(WEe,"STRONG",{});var DGr=s(ZZ);pWe=r(DGr,"vit_mae"),DGr.forEach(t),_We=r(WEe," \u2014 "),Ik=n(WEe,"A",{href:!0});var GGr=s(Ik);uWe=r(GGr,"ViTMAEConfig"),GGr.forEach(t),bWe=r(WEe," (ViTMAE model)"),WEe.forEach(t),vWe=i(F),qg=n(F,"LI",{});var HEe=s(qg);eee=n(HEe,"STRONG",{});var OGr=s(eee);FWe=r(OGr,"wav2vec2"),OGr.forEach(t),TWe=r(HEe," \u2014 "),qk=n(HEe,"A",{href:!0});var VGr=s(qk);MWe=r(VGr,"Wav2Vec2Config"),VGr.forEach(t),EWe=r(HEe," (Wav2Vec2 model)"),HEe.forEach(t),CWe=i(F),Ng=n(F,"LI",{});var UEe=s(Ng);oee=n(UEe,"STRONG",{});var XGr=s(oee);wWe=r(XGr,"wavlm"),XGr.forEach(t),AWe=r(UEe," \u2014 "),Nk=n(UEe,"A",{href:!0});var zGr=s(Nk);yWe=r(zGr,"WavLMConfig"),zGr.forEach(t),LWe=r(UEe," (WavLM model)"),UEe.forEach(t),xWe=i(F),jg=n(F,"LI",{});var JEe=s(jg);ree=n(JEe,"STRONG",{});var QGr=s(ree);kWe=r(QGr,"xglm"),QGr.forEach(t),SWe=r(JEe," \u2014 "),jk=n(JEe,"A",{href:!0});var WGr=s(jk);RWe=r(WGr,"XGLMConfig"),WGr.forEach(t),BWe=r(JEe," (XGLM model)"),JEe.forEach(t),PWe=i(F),Dg=n(F,"LI",{});var YEe=s(Dg);tee=n(YEe,"STRONG",{});var HGr=s(tee);$We=r(HGr,"xlm"),HGr.forEach(t),IWe=r(YEe," \u2014 "),Dk=n(YEe,"A",{href:!0});var UGr=s(Dk);qWe=r(UGr,"XLMConfig"),UGr.forEach(t),NWe=r(YEe," (XLM model)"),YEe.forEach(t),jWe=i(F),Gg=n(F,"LI",{});var KEe=s(Gg);aee=n(KEe,"STRONG",{});var JGr=s(aee);DWe=r(JGr,"xlm-prophetnet"),JGr.forEach(t),GWe=r(KEe," \u2014 "),Gk=n(KEe,"A",{href:!0});var YGr=s(Gk);OWe=r(YGr,"XLMProphetNetConfig"),YGr.forEach(t),VWe=r(KEe," (XLMProphetNet model)"),KEe.forEach(t),XWe=i(F),Og=n(F,"LI",{});var ZEe=s(Og);nee=n(ZEe,"STRONG",{});var KGr=s(nee);zWe=r(KGr,"xlm-roberta"),KGr.forEach(t),QWe=r(ZEe," \u2014 "),Ok=n(ZEe,"A",{href:!0});var ZGr=s(Ok);WWe=r(ZGr,"XLMRobertaConfig"),ZGr.forEach(t),HWe=r(ZEe," (XLM-RoBERTa model)"),ZEe.forEach(t),UWe=i(F),Vg=n(F,"LI",{});var e3e=s(Vg);see=n(e3e,"STRONG",{});var eOr=s(see);JWe=r(eOr,"xlm-roberta-xl"),eOr.forEach(t),YWe=r(e3e," \u2014 "),Vk=n(e3e,"A",{href:!0});var oOr=s(Vk);KWe=r(oOr,"XLMRobertaXLConfig"),oOr.forEach(t),ZWe=r(e3e," (XLM-RoBERTa-XL model)"),e3e.forEach(t),eHe=i(F),Xg=n(F,"LI",{});var o3e=s(Xg);lee=n(o3e,"STRONG",{});var rOr=s(lee);oHe=r(rOr,"xlnet"),rOr.forEach(t),rHe=r(o3e," \u2014 "),Xk=n(o3e,"A",{href:!0});var tOr=s(Xk);tHe=r(tOr,"XLNetConfig"),tOr.forEach(t),aHe=r(o3e," (XLNet model)"),o3e.forEach(t),nHe=i(F),zg=n(F,"LI",{});var r3e=s(zg);iee=n(r3e,"STRONG",{});var aOr=s(iee);sHe=r(aOr,"yoso"),aOr.forEach(t),lHe=r(r3e," \u2014 "),zk=n(r3e,"A",{href:!0});var nOr=s(zk);iHe=r(nOr,"YosoConfig"),nOr.forEach(t),dHe=r(r3e," (YOSO model)"),r3e.forEach(t),F.forEach(t),cHe=i(ga),dee=n(ga,"P",{});var sOr=s(dee);fHe=r(sOr,"Examples:"),sOr.forEach(t),mHe=i(ga),m(r6.$$.fragment,ga),ga.forEach(t),gHe=i(Ys),Qg=n(Ys,"DIV",{class:!0});var iIe=s(Qg);m(t6.$$.fragment,iIe),hHe=i(iIe),cee=n(iIe,"P",{});var lOr=s(cee);pHe=r(lOr,"Register a new configuration for this class."),lOr.forEach(t),iIe.forEach(t),Ys.forEach(t),sPe=i(c),od=n(c,"H2",{class:!0});var dIe=s(od);Wg=n(dIe,"A",{id:!0,class:!0,href:!0});var iOr=s(Wg);fee=n(iOr,"SPAN",{});var dOr=s(fee);m(a6.$$.fragment,dOr),dOr.forEach(t),iOr.forEach(t),_He=i(dIe),mee=n(dIe,"SPAN",{});var cOr=s(mee);uHe=r(cOr,"AutoTokenizer"),cOr.forEach(t),dIe.forEach(t),lPe=i(c),Wo=n(c,"DIV",{class:!0});var Ks=s(Wo);m(n6.$$.fragment,Ks),bHe=i(Ks),s6=n(Ks,"P",{});var cIe=s(s6);vHe=r(cIe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Qk=n(cIe,"A",{href:!0});var fOr=s(Qk);FHe=r(fOr,"AutoTokenizer.from_pretrained()"),fOr.forEach(t),THe=r(cIe," class method."),cIe.forEach(t),MHe=i(Ks),l6=n(Ks,"P",{});var fIe=s(l6);EHe=r(fIe,"This class cannot be instantiated directly using "),gee=n(fIe,"CODE",{});var mOr=s(gee);CHe=r(mOr,"__init__()"),mOr.forEach(t),wHe=r(fIe," (throws an error)."),fIe.forEach(t),AHe=i(Ks),ho=n(Ks,"DIV",{class:!0});var ha=s(ho);m(i6.$$.fragment,ha),yHe=i(ha),hee=n(ha,"P",{});var gOr=s(hee);LHe=r(gOr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),gOr.forEach(t),xHe=i(ha),Oa=n(ha,"P",{});var Q3=s(Oa);kHe=r(Q3,"The tokenizer class to instantiate is selected based on the "),pee=n(Q3,"CODE",{});var hOr=s(pee);SHe=r(hOr,"model_type"),hOr.forEach(t),RHe=r(Q3,` property of the config object (either
passed as an argument or loaded from `),_ee=n(Q3,"CODE",{});var pOr=s(_ee);BHe=r(pOr,"pretrained_model_name_or_path"),pOr.forEach(t),PHe=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uee=n(Q3,"CODE",{});var _Or=s(uee);$He=r(_Or,"pretrained_model_name_or_path"),_Or.forEach(t),IHe=r(Q3,":"),Q3.forEach(t),qHe=i(ha),E=n(ha,"UL",{});var C=s(E);Wn=n(C,"LI",{});var GL=s(Wn);bee=n(GL,"STRONG",{});var uOr=s(bee);NHe=r(uOr,"albert"),uOr.forEach(t),jHe=r(GL," \u2014 "),Wk=n(GL,"A",{href:!0});var bOr=s(Wk);DHe=r(bOr,"AlbertTokenizer"),bOr.forEach(t),GHe=r(GL," or "),Hk=n(GL,"A",{href:!0});var vOr=s(Hk);OHe=r(vOr,"AlbertTokenizerFast"),vOr.forEach(t),VHe=r(GL," (ALBERT model)"),GL.forEach(t),XHe=i(C),Hn=n(C,"LI",{});var OL=s(Hn);vee=n(OL,"STRONG",{});var FOr=s(vee);zHe=r(FOr,"bart"),FOr.forEach(t),QHe=r(OL," \u2014 "),Uk=n(OL,"A",{href:!0});var TOr=s(Uk);WHe=r(TOr,"BartTokenizer"),TOr.forEach(t),HHe=r(OL," or "),Jk=n(OL,"A",{href:!0});var MOr=s(Jk);UHe=r(MOr,"BartTokenizerFast"),MOr.forEach(t),JHe=r(OL," (BART model)"),OL.forEach(t),YHe=i(C),Un=n(C,"LI",{});var VL=s(Un);Fee=n(VL,"STRONG",{});var EOr=s(Fee);KHe=r(EOr,"barthez"),EOr.forEach(t),ZHe=r(VL," \u2014 "),Yk=n(VL,"A",{href:!0});var COr=s(Yk);eUe=r(COr,"BarthezTokenizer"),COr.forEach(t),oUe=r(VL," or "),Kk=n(VL,"A",{href:!0});var wOr=s(Kk);rUe=r(wOr,"BarthezTokenizerFast"),wOr.forEach(t),tUe=r(VL," (BARThez model)"),VL.forEach(t),aUe=i(C),Hg=n(C,"LI",{});var t3e=s(Hg);Tee=n(t3e,"STRONG",{});var AOr=s(Tee);nUe=r(AOr,"bartpho"),AOr.forEach(t),sUe=r(t3e," \u2014 "),Zk=n(t3e,"A",{href:!0});var yOr=s(Zk);lUe=r(yOr,"BartphoTokenizer"),yOr.forEach(t),iUe=r(t3e," (BARTpho model)"),t3e.forEach(t),dUe=i(C),Jn=n(C,"LI",{});var XL=s(Jn);Mee=n(XL,"STRONG",{});var LOr=s(Mee);cUe=r(LOr,"bert"),LOr.forEach(t),fUe=r(XL," \u2014 "),eS=n(XL,"A",{href:!0});var xOr=s(eS);mUe=r(xOr,"BertTokenizer"),xOr.forEach(t),gUe=r(XL," or "),oS=n(XL,"A",{href:!0});var kOr=s(oS);hUe=r(kOr,"BertTokenizerFast"),kOr.forEach(t),pUe=r(XL," (BERT model)"),XL.forEach(t),_Ue=i(C),Ug=n(C,"LI",{});var a3e=s(Ug);Eee=n(a3e,"STRONG",{});var SOr=s(Eee);uUe=r(SOr,"bert-generation"),SOr.forEach(t),bUe=r(a3e," \u2014 "),rS=n(a3e,"A",{href:!0});var ROr=s(rS);vUe=r(ROr,"BertGenerationTokenizer"),ROr.forEach(t),FUe=r(a3e," (Bert Generation model)"),a3e.forEach(t),TUe=i(C),Jg=n(C,"LI",{});var n3e=s(Jg);Cee=n(n3e,"STRONG",{});var BOr=s(Cee);MUe=r(BOr,"bert-japanese"),BOr.forEach(t),EUe=r(n3e," \u2014 "),tS=n(n3e,"A",{href:!0});var POr=s(tS);CUe=r(POr,"BertJapaneseTokenizer"),POr.forEach(t),wUe=r(n3e," (BertJapanese model)"),n3e.forEach(t),AUe=i(C),Yg=n(C,"LI",{});var s3e=s(Yg);wee=n(s3e,"STRONG",{});var $Or=s(wee);yUe=r($Or,"bertweet"),$Or.forEach(t),LUe=r(s3e," \u2014 "),aS=n(s3e,"A",{href:!0});var IOr=s(aS);xUe=r(IOr,"BertweetTokenizer"),IOr.forEach(t),kUe=r(s3e," (Bertweet model)"),s3e.forEach(t),SUe=i(C),Yn=n(C,"LI",{});var zL=s(Yn);Aee=n(zL,"STRONG",{});var qOr=s(Aee);RUe=r(qOr,"big_bird"),qOr.forEach(t),BUe=r(zL," \u2014 "),nS=n(zL,"A",{href:!0});var NOr=s(nS);PUe=r(NOr,"BigBirdTokenizer"),NOr.forEach(t),$Ue=r(zL," or "),sS=n(zL,"A",{href:!0});var jOr=s(sS);IUe=r(jOr,"BigBirdTokenizerFast"),jOr.forEach(t),qUe=r(zL," (BigBird model)"),zL.forEach(t),NUe=i(C),Kn=n(C,"LI",{});var QL=s(Kn);yee=n(QL,"STRONG",{});var DOr=s(yee);jUe=r(DOr,"bigbird_pegasus"),DOr.forEach(t),DUe=r(QL," \u2014 "),lS=n(QL,"A",{href:!0});var GOr=s(lS);GUe=r(GOr,"PegasusTokenizer"),GOr.forEach(t),OUe=r(QL," or "),iS=n(QL,"A",{href:!0});var OOr=s(iS);VUe=r(OOr,"PegasusTokenizerFast"),OOr.forEach(t),XUe=r(QL," (BigBirdPegasus model)"),QL.forEach(t),zUe=i(C),Zn=n(C,"LI",{});var WL=s(Zn);Lee=n(WL,"STRONG",{});var VOr=s(Lee);QUe=r(VOr,"blenderbot"),VOr.forEach(t),WUe=r(WL," \u2014 "),dS=n(WL,"A",{href:!0});var XOr=s(dS);HUe=r(XOr,"BlenderbotTokenizer"),XOr.forEach(t),UUe=r(WL," or "),cS=n(WL,"A",{href:!0});var zOr=s(cS);JUe=r(zOr,"BlenderbotTokenizerFast"),zOr.forEach(t),YUe=r(WL," (Blenderbot model)"),WL.forEach(t),KUe=i(C),Kg=n(C,"LI",{});var l3e=s(Kg);xee=n(l3e,"STRONG",{});var QOr=s(xee);ZUe=r(QOr,"blenderbot-small"),QOr.forEach(t),eJe=r(l3e," \u2014 "),fS=n(l3e,"A",{href:!0});var WOr=s(fS);oJe=r(WOr,"BlenderbotSmallTokenizer"),WOr.forEach(t),rJe=r(l3e," (BlenderbotSmall model)"),l3e.forEach(t),tJe=i(C),Zg=n(C,"LI",{});var i3e=s(Zg);kee=n(i3e,"STRONG",{});var HOr=s(kee);aJe=r(HOr,"byt5"),HOr.forEach(t),nJe=r(i3e," \u2014 "),mS=n(i3e,"A",{href:!0});var UOr=s(mS);sJe=r(UOr,"ByT5Tokenizer"),UOr.forEach(t),lJe=r(i3e," (ByT5 model)"),i3e.forEach(t),iJe=i(C),es=n(C,"LI",{});var HL=s(es);See=n(HL,"STRONG",{});var JOr=s(See);dJe=r(JOr,"camembert"),JOr.forEach(t),cJe=r(HL," \u2014 "),gS=n(HL,"A",{href:!0});var YOr=s(gS);fJe=r(YOr,"CamembertTokenizer"),YOr.forEach(t),mJe=r(HL," or "),hS=n(HL,"A",{href:!0});var KOr=s(hS);gJe=r(KOr,"CamembertTokenizerFast"),KOr.forEach(t),hJe=r(HL," (CamemBERT model)"),HL.forEach(t),pJe=i(C),eh=n(C,"LI",{});var d3e=s(eh);Ree=n(d3e,"STRONG",{});var ZOr=s(Ree);_Je=r(ZOr,"canine"),ZOr.forEach(t),uJe=r(d3e," \u2014 "),pS=n(d3e,"A",{href:!0});var eVr=s(pS);bJe=r(eVr,"CanineTokenizer"),eVr.forEach(t),vJe=r(d3e," (Canine model)"),d3e.forEach(t),FJe=i(C),os=n(C,"LI",{});var UL=s(os);Bee=n(UL,"STRONG",{});var oVr=s(Bee);TJe=r(oVr,"clip"),oVr.forEach(t),MJe=r(UL," \u2014 "),_S=n(UL,"A",{href:!0});var rVr=s(_S);EJe=r(rVr,"CLIPTokenizer"),rVr.forEach(t),CJe=r(UL," or "),uS=n(UL,"A",{href:!0});var tVr=s(uS);wJe=r(tVr,"CLIPTokenizerFast"),tVr.forEach(t),AJe=r(UL," (CLIP model)"),UL.forEach(t),yJe=i(C),rs=n(C,"LI",{});var JL=s(rs);Pee=n(JL,"STRONG",{});var aVr=s(Pee);LJe=r(aVr,"convbert"),aVr.forEach(t),xJe=r(JL," \u2014 "),bS=n(JL,"A",{href:!0});var nVr=s(bS);kJe=r(nVr,"ConvBertTokenizer"),nVr.forEach(t),SJe=r(JL," or "),vS=n(JL,"A",{href:!0});var sVr=s(vS);RJe=r(sVr,"ConvBertTokenizerFast"),sVr.forEach(t),BJe=r(JL," (ConvBERT model)"),JL.forEach(t),PJe=i(C),ts=n(C,"LI",{});var YL=s(ts);$ee=n(YL,"STRONG",{});var lVr=s($ee);$Je=r(lVr,"cpm"),lVr.forEach(t),IJe=r(YL," \u2014 "),FS=n(YL,"A",{href:!0});var iVr=s(FS);qJe=r(iVr,"CpmTokenizer"),iVr.forEach(t),NJe=r(YL," or "),Iee=n(YL,"CODE",{});var dVr=s(Iee);jJe=r(dVr,"CpmTokenizerFast"),dVr.forEach(t),DJe=r(YL," (CPM model)"),YL.forEach(t),GJe=i(C),oh=n(C,"LI",{});var c3e=s(oh);qee=n(c3e,"STRONG",{});var cVr=s(qee);OJe=r(cVr,"ctrl"),cVr.forEach(t),VJe=r(c3e," \u2014 "),TS=n(c3e,"A",{href:!0});var fVr=s(TS);XJe=r(fVr,"CTRLTokenizer"),fVr.forEach(t),zJe=r(c3e," (CTRL model)"),c3e.forEach(t),QJe=i(C),as=n(C,"LI",{});var KL=s(as);Nee=n(KL,"STRONG",{});var mVr=s(Nee);WJe=r(mVr,"data2vec-text"),mVr.forEach(t),HJe=r(KL," \u2014 "),MS=n(KL,"A",{href:!0});var gVr=s(MS);UJe=r(gVr,"RobertaTokenizer"),gVr.forEach(t),JJe=r(KL," or "),ES=n(KL,"A",{href:!0});var hVr=s(ES);YJe=r(hVr,"RobertaTokenizerFast"),hVr.forEach(t),KJe=r(KL," (Data2VecText model)"),KL.forEach(t),ZJe=i(C),ns=n(C,"LI",{});var ZL=s(ns);jee=n(ZL,"STRONG",{});var pVr=s(jee);eYe=r(pVr,"deberta"),pVr.forEach(t),oYe=r(ZL," \u2014 "),CS=n(ZL,"A",{href:!0});var _Vr=s(CS);rYe=r(_Vr,"DebertaTokenizer"),_Vr.forEach(t),tYe=r(ZL," or "),wS=n(ZL,"A",{href:!0});var uVr=s(wS);aYe=r(uVr,"DebertaTokenizerFast"),uVr.forEach(t),nYe=r(ZL," (DeBERTa model)"),ZL.forEach(t),sYe=i(C),ss=n(C,"LI",{});var e9=s(ss);Dee=n(e9,"STRONG",{});var bVr=s(Dee);lYe=r(bVr,"deberta-v2"),bVr.forEach(t),iYe=r(e9," \u2014 "),AS=n(e9,"A",{href:!0});var vVr=s(AS);dYe=r(vVr,"DebertaV2Tokenizer"),vVr.forEach(t),cYe=r(e9," or "),yS=n(e9,"A",{href:!0});var FVr=s(yS);fYe=r(FVr,"DebertaV2TokenizerFast"),FVr.forEach(t),mYe=r(e9," (DeBERTa-v2 model)"),e9.forEach(t),gYe=i(C),ls=n(C,"LI",{});var o9=s(ls);Gee=n(o9,"STRONG",{});var TVr=s(Gee);hYe=r(TVr,"distilbert"),TVr.forEach(t),pYe=r(o9," \u2014 "),LS=n(o9,"A",{href:!0});var MVr=s(LS);_Ye=r(MVr,"DistilBertTokenizer"),MVr.forEach(t),uYe=r(o9," or "),xS=n(o9,"A",{href:!0});var EVr=s(xS);bYe=r(EVr,"DistilBertTokenizerFast"),EVr.forEach(t),vYe=r(o9," (DistilBERT model)"),o9.forEach(t),FYe=i(C),is=n(C,"LI",{});var r9=s(is);Oee=n(r9,"STRONG",{});var CVr=s(Oee);TYe=r(CVr,"dpr"),CVr.forEach(t),MYe=r(r9," \u2014 "),kS=n(r9,"A",{href:!0});var wVr=s(kS);EYe=r(wVr,"DPRQuestionEncoderTokenizer"),wVr.forEach(t),CYe=r(r9," or "),SS=n(r9,"A",{href:!0});var AVr=s(SS);wYe=r(AVr,"DPRQuestionEncoderTokenizerFast"),AVr.forEach(t),AYe=r(r9," (DPR model)"),r9.forEach(t),yYe=i(C),ds=n(C,"LI",{});var t9=s(ds);Vee=n(t9,"STRONG",{});var yVr=s(Vee);LYe=r(yVr,"electra"),yVr.forEach(t),xYe=r(t9," \u2014 "),RS=n(t9,"A",{href:!0});var LVr=s(RS);kYe=r(LVr,"ElectraTokenizer"),LVr.forEach(t),SYe=r(t9," or "),BS=n(t9,"A",{href:!0});var xVr=s(BS);RYe=r(xVr,"ElectraTokenizerFast"),xVr.forEach(t),BYe=r(t9," (ELECTRA model)"),t9.forEach(t),PYe=i(C),rh=n(C,"LI",{});var f3e=s(rh);Xee=n(f3e,"STRONG",{});var kVr=s(Xee);$Ye=r(kVr,"flaubert"),kVr.forEach(t),IYe=r(f3e," \u2014 "),PS=n(f3e,"A",{href:!0});var SVr=s(PS);qYe=r(SVr,"FlaubertTokenizer"),SVr.forEach(t),NYe=r(f3e," (FlauBERT model)"),f3e.forEach(t),jYe=i(C),cs=n(C,"LI",{});var a9=s(cs);zee=n(a9,"STRONG",{});var RVr=s(zee);DYe=r(RVr,"fnet"),RVr.forEach(t),GYe=r(a9," \u2014 "),$S=n(a9,"A",{href:!0});var BVr=s($S);OYe=r(BVr,"FNetTokenizer"),BVr.forEach(t),VYe=r(a9," or "),IS=n(a9,"A",{href:!0});var PVr=s(IS);XYe=r(PVr,"FNetTokenizerFast"),PVr.forEach(t),zYe=r(a9," (FNet model)"),a9.forEach(t),QYe=i(C),th=n(C,"LI",{});var m3e=s(th);Qee=n(m3e,"STRONG",{});var $Vr=s(Qee);WYe=r($Vr,"fsmt"),$Vr.forEach(t),HYe=r(m3e," \u2014 "),qS=n(m3e,"A",{href:!0});var IVr=s(qS);UYe=r(IVr,"FSMTTokenizer"),IVr.forEach(t),JYe=r(m3e," (FairSeq Machine-Translation model)"),m3e.forEach(t),YYe=i(C),fs=n(C,"LI",{});var n9=s(fs);Wee=n(n9,"STRONG",{});var qVr=s(Wee);KYe=r(qVr,"funnel"),qVr.forEach(t),ZYe=r(n9," \u2014 "),NS=n(n9,"A",{href:!0});var NVr=s(NS);eKe=r(NVr,"FunnelTokenizer"),NVr.forEach(t),oKe=r(n9," or "),jS=n(n9,"A",{href:!0});var jVr=s(jS);rKe=r(jVr,"FunnelTokenizerFast"),jVr.forEach(t),tKe=r(n9," (Funnel Transformer model)"),n9.forEach(t),aKe=i(C),ms=n(C,"LI",{});var s9=s(ms);Hee=n(s9,"STRONG",{});var DVr=s(Hee);nKe=r(DVr,"gpt2"),DVr.forEach(t),sKe=r(s9," \u2014 "),DS=n(s9,"A",{href:!0});var GVr=s(DS);lKe=r(GVr,"GPT2Tokenizer"),GVr.forEach(t),iKe=r(s9," or "),GS=n(s9,"A",{href:!0});var OVr=s(GS);dKe=r(OVr,"GPT2TokenizerFast"),OVr.forEach(t),cKe=r(s9," (OpenAI GPT-2 model)"),s9.forEach(t),fKe=i(C),gs=n(C,"LI",{});var l9=s(gs);Uee=n(l9,"STRONG",{});var VVr=s(Uee);mKe=r(VVr,"gpt_neo"),VVr.forEach(t),gKe=r(l9," \u2014 "),OS=n(l9,"A",{href:!0});var XVr=s(OS);hKe=r(XVr,"GPT2Tokenizer"),XVr.forEach(t),pKe=r(l9," or "),VS=n(l9,"A",{href:!0});var zVr=s(VS);_Ke=r(zVr,"GPT2TokenizerFast"),zVr.forEach(t),uKe=r(l9," (GPT Neo model)"),l9.forEach(t),bKe=i(C),hs=n(C,"LI",{});var i9=s(hs);Jee=n(i9,"STRONG",{});var QVr=s(Jee);vKe=r(QVr,"gptj"),QVr.forEach(t),FKe=r(i9," \u2014 "),XS=n(i9,"A",{href:!0});var WVr=s(XS);TKe=r(WVr,"GPT2Tokenizer"),WVr.forEach(t),MKe=r(i9," or "),zS=n(i9,"A",{href:!0});var HVr=s(zS);EKe=r(HVr,"GPT2TokenizerFast"),HVr.forEach(t),CKe=r(i9," (GPT-J model)"),i9.forEach(t),wKe=i(C),ps=n(C,"LI",{});var d9=s(ps);Yee=n(d9,"STRONG",{});var UVr=s(Yee);AKe=r(UVr,"herbert"),UVr.forEach(t),yKe=r(d9," \u2014 "),QS=n(d9,"A",{href:!0});var JVr=s(QS);LKe=r(JVr,"HerbertTokenizer"),JVr.forEach(t),xKe=r(d9," or "),WS=n(d9,"A",{href:!0});var YVr=s(WS);kKe=r(YVr,"HerbertTokenizerFast"),YVr.forEach(t),SKe=r(d9," (HerBERT model)"),d9.forEach(t),RKe=i(C),ah=n(C,"LI",{});var g3e=s(ah);Kee=n(g3e,"STRONG",{});var KVr=s(Kee);BKe=r(KVr,"hubert"),KVr.forEach(t),PKe=r(g3e," \u2014 "),HS=n(g3e,"A",{href:!0});var ZVr=s(HS);$Ke=r(ZVr,"Wav2Vec2CTCTokenizer"),ZVr.forEach(t),IKe=r(g3e," (Hubert model)"),g3e.forEach(t),qKe=i(C),_s=n(C,"LI",{});var c9=s(_s);Zee=n(c9,"STRONG",{});var eXr=s(Zee);NKe=r(eXr,"ibert"),eXr.forEach(t),jKe=r(c9," \u2014 "),US=n(c9,"A",{href:!0});var oXr=s(US);DKe=r(oXr,"RobertaTokenizer"),oXr.forEach(t),GKe=r(c9," or "),JS=n(c9,"A",{href:!0});var rXr=s(JS);OKe=r(rXr,"RobertaTokenizerFast"),rXr.forEach(t),VKe=r(c9," (I-BERT model)"),c9.forEach(t),XKe=i(C),us=n(C,"LI",{});var f9=s(us);eoe=n(f9,"STRONG",{});var tXr=s(eoe);zKe=r(tXr,"layoutlm"),tXr.forEach(t),QKe=r(f9," \u2014 "),YS=n(f9,"A",{href:!0});var aXr=s(YS);WKe=r(aXr,"LayoutLMTokenizer"),aXr.forEach(t),HKe=r(f9," or "),KS=n(f9,"A",{href:!0});var nXr=s(KS);UKe=r(nXr,"LayoutLMTokenizerFast"),nXr.forEach(t),JKe=r(f9," (LayoutLM model)"),f9.forEach(t),YKe=i(C),bs=n(C,"LI",{});var m9=s(bs);ooe=n(m9,"STRONG",{});var sXr=s(ooe);KKe=r(sXr,"layoutlmv2"),sXr.forEach(t),ZKe=r(m9," \u2014 "),ZS=n(m9,"A",{href:!0});var lXr=s(ZS);eZe=r(lXr,"LayoutLMv2Tokenizer"),lXr.forEach(t),oZe=r(m9," or "),eR=n(m9,"A",{href:!0});var iXr=s(eR);rZe=r(iXr,"LayoutLMv2TokenizerFast"),iXr.forEach(t),tZe=r(m9," (LayoutLMv2 model)"),m9.forEach(t),aZe=i(C),vs=n(C,"LI",{});var g9=s(vs);roe=n(g9,"STRONG",{});var dXr=s(roe);nZe=r(dXr,"layoutxlm"),dXr.forEach(t),sZe=r(g9," \u2014 "),oR=n(g9,"A",{href:!0});var cXr=s(oR);lZe=r(cXr,"LayoutXLMTokenizer"),cXr.forEach(t),iZe=r(g9," or "),rR=n(g9,"A",{href:!0});var fXr=s(rR);dZe=r(fXr,"LayoutXLMTokenizerFast"),fXr.forEach(t),cZe=r(g9," (LayoutXLM model)"),g9.forEach(t),fZe=i(C),Fs=n(C,"LI",{});var h9=s(Fs);toe=n(h9,"STRONG",{});var mXr=s(toe);mZe=r(mXr,"led"),mXr.forEach(t),gZe=r(h9," \u2014 "),tR=n(h9,"A",{href:!0});var gXr=s(tR);hZe=r(gXr,"LEDTokenizer"),gXr.forEach(t),pZe=r(h9," or "),aR=n(h9,"A",{href:!0});var hXr=s(aR);_Ze=r(hXr,"LEDTokenizerFast"),hXr.forEach(t),uZe=r(h9," (LED model)"),h9.forEach(t),bZe=i(C),Ts=n(C,"LI",{});var p9=s(Ts);aoe=n(p9,"STRONG",{});var pXr=s(aoe);vZe=r(pXr,"longformer"),pXr.forEach(t),FZe=r(p9," \u2014 "),nR=n(p9,"A",{href:!0});var _Xr=s(nR);TZe=r(_Xr,"LongformerTokenizer"),_Xr.forEach(t),MZe=r(p9," or "),sR=n(p9,"A",{href:!0});var uXr=s(sR);EZe=r(uXr,"LongformerTokenizerFast"),uXr.forEach(t),CZe=r(p9," (Longformer model)"),p9.forEach(t),wZe=i(C),nh=n(C,"LI",{});var h3e=s(nh);noe=n(h3e,"STRONG",{});var bXr=s(noe);AZe=r(bXr,"luke"),bXr.forEach(t),yZe=r(h3e," \u2014 "),lR=n(h3e,"A",{href:!0});var vXr=s(lR);LZe=r(vXr,"LukeTokenizer"),vXr.forEach(t),xZe=r(h3e," (LUKE model)"),h3e.forEach(t),kZe=i(C),Ms=n(C,"LI",{});var _9=s(Ms);soe=n(_9,"STRONG",{});var FXr=s(soe);SZe=r(FXr,"lxmert"),FXr.forEach(t),RZe=r(_9," \u2014 "),iR=n(_9,"A",{href:!0});var TXr=s(iR);BZe=r(TXr,"LxmertTokenizer"),TXr.forEach(t),PZe=r(_9," or "),dR=n(_9,"A",{href:!0});var MXr=s(dR);$Ze=r(MXr,"LxmertTokenizerFast"),MXr.forEach(t),IZe=r(_9," (LXMERT model)"),_9.forEach(t),qZe=i(C),sh=n(C,"LI",{});var p3e=s(sh);loe=n(p3e,"STRONG",{});var EXr=s(loe);NZe=r(EXr,"m2m_100"),EXr.forEach(t),jZe=r(p3e," \u2014 "),cR=n(p3e,"A",{href:!0});var CXr=s(cR);DZe=r(CXr,"M2M100Tokenizer"),CXr.forEach(t),GZe=r(p3e," (M2M100 model)"),p3e.forEach(t),OZe=i(C),lh=n(C,"LI",{});var _3e=s(lh);ioe=n(_3e,"STRONG",{});var wXr=s(ioe);VZe=r(wXr,"marian"),wXr.forEach(t),XZe=r(_3e," \u2014 "),fR=n(_3e,"A",{href:!0});var AXr=s(fR);zZe=r(AXr,"MarianTokenizer"),AXr.forEach(t),QZe=r(_3e," (Marian model)"),_3e.forEach(t),WZe=i(C),Es=n(C,"LI",{});var u9=s(Es);doe=n(u9,"STRONG",{});var yXr=s(doe);HZe=r(yXr,"mbart"),yXr.forEach(t),UZe=r(u9," \u2014 "),mR=n(u9,"A",{href:!0});var LXr=s(mR);JZe=r(LXr,"MBartTokenizer"),LXr.forEach(t),YZe=r(u9," or "),gR=n(u9,"A",{href:!0});var xXr=s(gR);KZe=r(xXr,"MBartTokenizerFast"),xXr.forEach(t),ZZe=r(u9," (mBART model)"),u9.forEach(t),eeo=i(C),Cs=n(C,"LI",{});var b9=s(Cs);coe=n(b9,"STRONG",{});var kXr=s(coe);oeo=r(kXr,"mbart50"),kXr.forEach(t),reo=r(b9," \u2014 "),hR=n(b9,"A",{href:!0});var SXr=s(hR);teo=r(SXr,"MBart50Tokenizer"),SXr.forEach(t),aeo=r(b9," or "),pR=n(b9,"A",{href:!0});var RXr=s(pR);neo=r(RXr,"MBart50TokenizerFast"),RXr.forEach(t),seo=r(b9," (mBART-50 model)"),b9.forEach(t),leo=i(C),ws=n(C,"LI",{});var v9=s(ws);foe=n(v9,"STRONG",{});var BXr=s(foe);ieo=r(BXr,"megatron-bert"),BXr.forEach(t),deo=r(v9," \u2014 "),_R=n(v9,"A",{href:!0});var PXr=s(_R);ceo=r(PXr,"BertTokenizer"),PXr.forEach(t),feo=r(v9," or "),uR=n(v9,"A",{href:!0});var $Xr=s(uR);meo=r($Xr,"BertTokenizerFast"),$Xr.forEach(t),geo=r(v9," (MegatronBert model)"),v9.forEach(t),heo=i(C),ih=n(C,"LI",{});var u3e=s(ih);moe=n(u3e,"STRONG",{});var IXr=s(moe);peo=r(IXr,"mluke"),IXr.forEach(t),_eo=r(u3e," \u2014 "),bR=n(u3e,"A",{href:!0});var qXr=s(bR);ueo=r(qXr,"MLukeTokenizer"),qXr.forEach(t),beo=r(u3e," (mLUKE model)"),u3e.forEach(t),veo=i(C),As=n(C,"LI",{});var F9=s(As);goe=n(F9,"STRONG",{});var NXr=s(goe);Feo=r(NXr,"mobilebert"),NXr.forEach(t),Teo=r(F9," \u2014 "),vR=n(F9,"A",{href:!0});var jXr=s(vR);Meo=r(jXr,"MobileBertTokenizer"),jXr.forEach(t),Eeo=r(F9," or "),FR=n(F9,"A",{href:!0});var DXr=s(FR);Ceo=r(DXr,"MobileBertTokenizerFast"),DXr.forEach(t),weo=r(F9," (MobileBERT model)"),F9.forEach(t),Aeo=i(C),ys=n(C,"LI",{});var T9=s(ys);hoe=n(T9,"STRONG",{});var GXr=s(hoe);yeo=r(GXr,"mpnet"),GXr.forEach(t),Leo=r(T9," \u2014 "),TR=n(T9,"A",{href:!0});var OXr=s(TR);xeo=r(OXr,"MPNetTokenizer"),OXr.forEach(t),keo=r(T9," or "),MR=n(T9,"A",{href:!0});var VXr=s(MR);Seo=r(VXr,"MPNetTokenizerFast"),VXr.forEach(t),Reo=r(T9," (MPNet model)"),T9.forEach(t),Beo=i(C),Ls=n(C,"LI",{});var M9=s(Ls);poe=n(M9,"STRONG",{});var XXr=s(poe);Peo=r(XXr,"mt5"),XXr.forEach(t),$eo=r(M9," \u2014 "),ER=n(M9,"A",{href:!0});var zXr=s(ER);Ieo=r(zXr,"MT5Tokenizer"),zXr.forEach(t),qeo=r(M9," or "),CR=n(M9,"A",{href:!0});var QXr=s(CR);Neo=r(QXr,"MT5TokenizerFast"),QXr.forEach(t),jeo=r(M9," (mT5 model)"),M9.forEach(t),Deo=i(C),xs=n(C,"LI",{});var E9=s(xs);_oe=n(E9,"STRONG",{});var WXr=s(_oe);Geo=r(WXr,"nystromformer"),WXr.forEach(t),Oeo=r(E9," \u2014 "),wR=n(E9,"A",{href:!0});var HXr=s(wR);Veo=r(HXr,"AlbertTokenizer"),HXr.forEach(t),Xeo=r(E9," or "),AR=n(E9,"A",{href:!0});var UXr=s(AR);zeo=r(UXr,"AlbertTokenizerFast"),UXr.forEach(t),Qeo=r(E9," (Nystromformer model)"),E9.forEach(t),Weo=i(C),ks=n(C,"LI",{});var C9=s(ks);uoe=n(C9,"STRONG",{});var JXr=s(uoe);Heo=r(JXr,"openai-gpt"),JXr.forEach(t),Ueo=r(C9," \u2014 "),yR=n(C9,"A",{href:!0});var YXr=s(yR);Jeo=r(YXr,"OpenAIGPTTokenizer"),YXr.forEach(t),Yeo=r(C9," or "),LR=n(C9,"A",{href:!0});var KXr=s(LR);Keo=r(KXr,"OpenAIGPTTokenizerFast"),KXr.forEach(t),Zeo=r(C9," (OpenAI GPT model)"),C9.forEach(t),eoo=i(C),Ss=n(C,"LI",{});var w9=s(Ss);boe=n(w9,"STRONG",{});var ZXr=s(boe);ooo=r(ZXr,"pegasus"),ZXr.forEach(t),roo=r(w9," \u2014 "),xR=n(w9,"A",{href:!0});var ezr=s(xR);too=r(ezr,"PegasusTokenizer"),ezr.forEach(t),aoo=r(w9," or "),kR=n(w9,"A",{href:!0});var ozr=s(kR);noo=r(ozr,"PegasusTokenizerFast"),ozr.forEach(t),soo=r(w9," (Pegasus model)"),w9.forEach(t),loo=i(C),dh=n(C,"LI",{});var b3e=s(dh);voe=n(b3e,"STRONG",{});var rzr=s(voe);ioo=r(rzr,"perceiver"),rzr.forEach(t),doo=r(b3e," \u2014 "),SR=n(b3e,"A",{href:!0});var tzr=s(SR);coo=r(tzr,"PerceiverTokenizer"),tzr.forEach(t),foo=r(b3e," (Perceiver model)"),b3e.forEach(t),moo=i(C),ch=n(C,"LI",{});var v3e=s(ch);Foe=n(v3e,"STRONG",{});var azr=s(Foe);goo=r(azr,"phobert"),azr.forEach(t),hoo=r(v3e," \u2014 "),RR=n(v3e,"A",{href:!0});var nzr=s(RR);poo=r(nzr,"PhobertTokenizer"),nzr.forEach(t),_oo=r(v3e," (PhoBERT model)"),v3e.forEach(t),uoo=i(C),fh=n(C,"LI",{});var F3e=s(fh);Toe=n(F3e,"STRONG",{});var szr=s(Toe);boo=r(szr,"plbart"),szr.forEach(t),voo=r(F3e," \u2014 "),BR=n(F3e,"A",{href:!0});var lzr=s(BR);Foo=r(lzr,"PLBartTokenizer"),lzr.forEach(t),Too=r(F3e," (PLBart model)"),F3e.forEach(t),Moo=i(C),mh=n(C,"LI",{});var T3e=s(mh);Moe=n(T3e,"STRONG",{});var izr=s(Moe);Eoo=r(izr,"prophetnet"),izr.forEach(t),Coo=r(T3e," \u2014 "),PR=n(T3e,"A",{href:!0});var dzr=s(PR);woo=r(dzr,"ProphetNetTokenizer"),dzr.forEach(t),Aoo=r(T3e," (ProphetNet model)"),T3e.forEach(t),yoo=i(C),Rs=n(C,"LI",{});var A9=s(Rs);Eoe=n(A9,"STRONG",{});var czr=s(Eoe);Loo=r(czr,"qdqbert"),czr.forEach(t),xoo=r(A9," \u2014 "),$R=n(A9,"A",{href:!0});var fzr=s($R);koo=r(fzr,"BertTokenizer"),fzr.forEach(t),Soo=r(A9," or "),IR=n(A9,"A",{href:!0});var mzr=s(IR);Roo=r(mzr,"BertTokenizerFast"),mzr.forEach(t),Boo=r(A9," (QDQBert model)"),A9.forEach(t),Poo=i(C),gh=n(C,"LI",{});var M3e=s(gh);Coe=n(M3e,"STRONG",{});var gzr=s(Coe);$oo=r(gzr,"rag"),gzr.forEach(t),Ioo=r(M3e," \u2014 "),qR=n(M3e,"A",{href:!0});var hzr=s(qR);qoo=r(hzr,"RagTokenizer"),hzr.forEach(t),Noo=r(M3e," (RAG model)"),M3e.forEach(t),joo=i(C),Bs=n(C,"LI",{});var y9=s(Bs);woe=n(y9,"STRONG",{});var pzr=s(woe);Doo=r(pzr,"realm"),pzr.forEach(t),Goo=r(y9," \u2014 "),NR=n(y9,"A",{href:!0});var _zr=s(NR);Ooo=r(_zr,"RealmTokenizer"),_zr.forEach(t),Voo=r(y9," or "),jR=n(y9,"A",{href:!0});var uzr=s(jR);Xoo=r(uzr,"RealmTokenizerFast"),uzr.forEach(t),zoo=r(y9," (Realm model)"),y9.forEach(t),Qoo=i(C),Ps=n(C,"LI",{});var L9=s(Ps);Aoe=n(L9,"STRONG",{});var bzr=s(Aoe);Woo=r(bzr,"reformer"),bzr.forEach(t),Hoo=r(L9," \u2014 "),DR=n(L9,"A",{href:!0});var vzr=s(DR);Uoo=r(vzr,"ReformerTokenizer"),vzr.forEach(t),Joo=r(L9," or "),GR=n(L9,"A",{href:!0});var Fzr=s(GR);Yoo=r(Fzr,"ReformerTokenizerFast"),Fzr.forEach(t),Koo=r(L9," (Reformer model)"),L9.forEach(t),Zoo=i(C),$s=n(C,"LI",{});var x9=s($s);yoe=n(x9,"STRONG",{});var Tzr=s(yoe);ero=r(Tzr,"rembert"),Tzr.forEach(t),oro=r(x9," \u2014 "),OR=n(x9,"A",{href:!0});var Mzr=s(OR);rro=r(Mzr,"RemBertTokenizer"),Mzr.forEach(t),tro=r(x9," or "),VR=n(x9,"A",{href:!0});var Ezr=s(VR);aro=r(Ezr,"RemBertTokenizerFast"),Ezr.forEach(t),nro=r(x9," (RemBERT model)"),x9.forEach(t),sro=i(C),Is=n(C,"LI",{});var k9=s(Is);Loe=n(k9,"STRONG",{});var Czr=s(Loe);lro=r(Czr,"retribert"),Czr.forEach(t),iro=r(k9," \u2014 "),XR=n(k9,"A",{href:!0});var wzr=s(XR);dro=r(wzr,"RetriBertTokenizer"),wzr.forEach(t),cro=r(k9," or "),zR=n(k9,"A",{href:!0});var Azr=s(zR);fro=r(Azr,"RetriBertTokenizerFast"),Azr.forEach(t),mro=r(k9," (RetriBERT model)"),k9.forEach(t),gro=i(C),qs=n(C,"LI",{});var S9=s(qs);xoe=n(S9,"STRONG",{});var yzr=s(xoe);hro=r(yzr,"roberta"),yzr.forEach(t),pro=r(S9," \u2014 "),QR=n(S9,"A",{href:!0});var Lzr=s(QR);_ro=r(Lzr,"RobertaTokenizer"),Lzr.forEach(t),uro=r(S9," or "),WR=n(S9,"A",{href:!0});var xzr=s(WR);bro=r(xzr,"RobertaTokenizerFast"),xzr.forEach(t),vro=r(S9," (RoBERTa model)"),S9.forEach(t),Fro=i(C),Ns=n(C,"LI",{});var R9=s(Ns);koe=n(R9,"STRONG",{});var kzr=s(koe);Tro=r(kzr,"roformer"),kzr.forEach(t),Mro=r(R9," \u2014 "),HR=n(R9,"A",{href:!0});var Szr=s(HR);Ero=r(Szr,"RoFormerTokenizer"),Szr.forEach(t),Cro=r(R9," or "),UR=n(R9,"A",{href:!0});var Rzr=s(UR);wro=r(Rzr,"RoFormerTokenizerFast"),Rzr.forEach(t),Aro=r(R9," (RoFormer model)"),R9.forEach(t),yro=i(C),hh=n(C,"LI",{});var E3e=s(hh);Soe=n(E3e,"STRONG",{});var Bzr=s(Soe);Lro=r(Bzr,"speech_to_text"),Bzr.forEach(t),xro=r(E3e," \u2014 "),JR=n(E3e,"A",{href:!0});var Pzr=s(JR);kro=r(Pzr,"Speech2TextTokenizer"),Pzr.forEach(t),Sro=r(E3e," (Speech2Text model)"),E3e.forEach(t),Rro=i(C),ph=n(C,"LI",{});var C3e=s(ph);Roe=n(C3e,"STRONG",{});var $zr=s(Roe);Bro=r($zr,"speech_to_text_2"),$zr.forEach(t),Pro=r(C3e," \u2014 "),YR=n(C3e,"A",{href:!0});var Izr=s(YR);$ro=r(Izr,"Speech2Text2Tokenizer"),Izr.forEach(t),Iro=r(C3e," (Speech2Text2 model)"),C3e.forEach(t),qro=i(C),js=n(C,"LI",{});var B9=s(js);Boe=n(B9,"STRONG",{});var qzr=s(Boe);Nro=r(qzr,"splinter"),qzr.forEach(t),jro=r(B9," \u2014 "),KR=n(B9,"A",{href:!0});var Nzr=s(KR);Dro=r(Nzr,"SplinterTokenizer"),Nzr.forEach(t),Gro=r(B9," or "),ZR=n(B9,"A",{href:!0});var jzr=s(ZR);Oro=r(jzr,"SplinterTokenizerFast"),jzr.forEach(t),Vro=r(B9," (Splinter model)"),B9.forEach(t),Xro=i(C),Ds=n(C,"LI",{});var P9=s(Ds);Poe=n(P9,"STRONG",{});var Dzr=s(Poe);zro=r(Dzr,"squeezebert"),Dzr.forEach(t),Qro=r(P9," \u2014 "),eB=n(P9,"A",{href:!0});var Gzr=s(eB);Wro=r(Gzr,"SqueezeBertTokenizer"),Gzr.forEach(t),Hro=r(P9," or "),oB=n(P9,"A",{href:!0});var Ozr=s(oB);Uro=r(Ozr,"SqueezeBertTokenizerFast"),Ozr.forEach(t),Jro=r(P9," (SqueezeBERT model)"),P9.forEach(t),Yro=i(C),Gs=n(C,"LI",{});var $9=s(Gs);$oe=n($9,"STRONG",{});var Vzr=s($oe);Kro=r(Vzr,"t5"),Vzr.forEach(t),Zro=r($9," \u2014 "),rB=n($9,"A",{href:!0});var Xzr=s(rB);eto=r(Xzr,"T5Tokenizer"),Xzr.forEach(t),oto=r($9," or "),tB=n($9,"A",{href:!0});var zzr=s(tB);rto=r(zzr,"T5TokenizerFast"),zzr.forEach(t),tto=r($9," (T5 model)"),$9.forEach(t),ato=i(C),_h=n(C,"LI",{});var w3e=s(_h);Ioe=n(w3e,"STRONG",{});var Qzr=s(Ioe);nto=r(Qzr,"tapas"),Qzr.forEach(t),sto=r(w3e," \u2014 "),aB=n(w3e,"A",{href:!0});var Wzr=s(aB);lto=r(Wzr,"TapasTokenizer"),Wzr.forEach(t),ito=r(w3e," (TAPAS model)"),w3e.forEach(t),dto=i(C),uh=n(C,"LI",{});var A3e=s(uh);qoe=n(A3e,"STRONG",{});var Hzr=s(qoe);cto=r(Hzr,"tapex"),Hzr.forEach(t),fto=r(A3e," \u2014 "),nB=n(A3e,"A",{href:!0});var Uzr=s(nB);mto=r(Uzr,"TapexTokenizer"),Uzr.forEach(t),gto=r(A3e," (TAPEX model)"),A3e.forEach(t),hto=i(C),bh=n(C,"LI",{});var y3e=s(bh);Noe=n(y3e,"STRONG",{});var Jzr=s(Noe);pto=r(Jzr,"transfo-xl"),Jzr.forEach(t),_to=r(y3e," \u2014 "),sB=n(y3e,"A",{href:!0});var Yzr=s(sB);uto=r(Yzr,"TransfoXLTokenizer"),Yzr.forEach(t),bto=r(y3e," (Transformer-XL model)"),y3e.forEach(t),vto=i(C),Os=n(C,"LI",{});var I9=s(Os);joe=n(I9,"STRONG",{});var Kzr=s(joe);Fto=r(Kzr,"visual_bert"),Kzr.forEach(t),Tto=r(I9," \u2014 "),lB=n(I9,"A",{href:!0});var Zzr=s(lB);Mto=r(Zzr,"BertTokenizer"),Zzr.forEach(t),Eto=r(I9," or "),iB=n(I9,"A",{href:!0});var eQr=s(iB);Cto=r(eQr,"BertTokenizerFast"),eQr.forEach(t),wto=r(I9," (VisualBert model)"),I9.forEach(t),Ato=i(C),vh=n(C,"LI",{});var L3e=s(vh);Doe=n(L3e,"STRONG",{});var oQr=s(Doe);yto=r(oQr,"wav2vec2"),oQr.forEach(t),Lto=r(L3e," \u2014 "),dB=n(L3e,"A",{href:!0});var rQr=s(dB);xto=r(rQr,"Wav2Vec2CTCTokenizer"),rQr.forEach(t),kto=r(L3e," (Wav2Vec2 model)"),L3e.forEach(t),Sto=i(C),Fh=n(C,"LI",{});var x3e=s(Fh);Goe=n(x3e,"STRONG",{});var tQr=s(Goe);Rto=r(tQr,"wav2vec2_phoneme"),tQr.forEach(t),Bto=r(x3e," \u2014 "),cB=n(x3e,"A",{href:!0});var aQr=s(cB);Pto=r(aQr,"Wav2Vec2PhonemeCTCTokenizer"),aQr.forEach(t),$to=r(x3e," (Wav2Vec2Phoneme model)"),x3e.forEach(t),Ito=i(C),Vs=n(C,"LI",{});var q9=s(Vs);Ooe=n(q9,"STRONG",{});var nQr=s(Ooe);qto=r(nQr,"xglm"),nQr.forEach(t),Nto=r(q9," \u2014 "),fB=n(q9,"A",{href:!0});var sQr=s(fB);jto=r(sQr,"XGLMTokenizer"),sQr.forEach(t),Dto=r(q9," or "),mB=n(q9,"A",{href:!0});var lQr=s(mB);Gto=r(lQr,"XGLMTokenizerFast"),lQr.forEach(t),Oto=r(q9," (XGLM model)"),q9.forEach(t),Vto=i(C),Th=n(C,"LI",{});var k3e=s(Th);Voe=n(k3e,"STRONG",{});var iQr=s(Voe);Xto=r(iQr,"xlm"),iQr.forEach(t),zto=r(k3e," \u2014 "),gB=n(k3e,"A",{href:!0});var dQr=s(gB);Qto=r(dQr,"XLMTokenizer"),dQr.forEach(t),Wto=r(k3e," (XLM model)"),k3e.forEach(t),Hto=i(C),Mh=n(C,"LI",{});var S3e=s(Mh);Xoe=n(S3e,"STRONG",{});var cQr=s(Xoe);Uto=r(cQr,"xlm-prophetnet"),cQr.forEach(t),Jto=r(S3e," \u2014 "),hB=n(S3e,"A",{href:!0});var fQr=s(hB);Yto=r(fQr,"XLMProphetNetTokenizer"),fQr.forEach(t),Kto=r(S3e," (XLMProphetNet model)"),S3e.forEach(t),Zto=i(C),Xs=n(C,"LI",{});var N9=s(Xs);zoe=n(N9,"STRONG",{});var mQr=s(zoe);eao=r(mQr,"xlm-roberta"),mQr.forEach(t),oao=r(N9," \u2014 "),pB=n(N9,"A",{href:!0});var gQr=s(pB);rao=r(gQr,"XLMRobertaTokenizer"),gQr.forEach(t),tao=r(N9," or "),_B=n(N9,"A",{href:!0});var hQr=s(_B);aao=r(hQr,"XLMRobertaTokenizerFast"),hQr.forEach(t),nao=r(N9," (XLM-RoBERTa model)"),N9.forEach(t),sao=i(C),zs=n(C,"LI",{});var j9=s(zs);Qoe=n(j9,"STRONG",{});var pQr=s(Qoe);lao=r(pQr,"xlm-roberta-xl"),pQr.forEach(t),iao=r(j9," \u2014 "),uB=n(j9,"A",{href:!0});var _Qr=s(uB);dao=r(_Qr,"RobertaTokenizer"),_Qr.forEach(t),cao=r(j9," or "),bB=n(j9,"A",{href:!0});var uQr=s(bB);fao=r(uQr,"RobertaTokenizerFast"),uQr.forEach(t),mao=r(j9," (XLM-RoBERTa-XL model)"),j9.forEach(t),gao=i(C),Qs=n(C,"LI",{});var D9=s(Qs);Woe=n(D9,"STRONG",{});var bQr=s(Woe);hao=r(bQr,"xlnet"),bQr.forEach(t),pao=r(D9," \u2014 "),vB=n(D9,"A",{href:!0});var vQr=s(vB);_ao=r(vQr,"XLNetTokenizer"),vQr.forEach(t),uao=r(D9," or "),FB=n(D9,"A",{href:!0});var FQr=s(FB);bao=r(FQr,"XLNetTokenizerFast"),FQr.forEach(t),vao=r(D9," (XLNet model)"),D9.forEach(t),Fao=i(C),Ws=n(C,"LI",{});var G9=s(Ws);Hoe=n(G9,"STRONG",{});var TQr=s(Hoe);Tao=r(TQr,"yoso"),TQr.forEach(t),Mao=r(G9," \u2014 "),TB=n(G9,"A",{href:!0});var MQr=s(TB);Eao=r(MQr,"AlbertTokenizer"),MQr.forEach(t),Cao=r(G9," or "),MB=n(G9,"A",{href:!0});var EQr=s(MB);wao=r(EQr,"AlbertTokenizerFast"),EQr.forEach(t),Aao=r(G9," (YOSO model)"),G9.forEach(t),C.forEach(t),yao=i(ha),Uoe=n(ha,"P",{});var CQr=s(Uoe);Lao=r(CQr,"Examples:"),CQr.forEach(t),xao=i(ha),m(d6.$$.fragment,ha),ha.forEach(t),kao=i(Ks),Eh=n(Ks,"DIV",{class:!0});var mIe=s(Eh);m(c6.$$.fragment,mIe),Sao=i(mIe),Joe=n(mIe,"P",{});var wQr=s(Joe);Rao=r(wQr,"Register a new tokenizer in this mapping."),wQr.forEach(t),mIe.forEach(t),Ks.forEach(t),iPe=i(c),rd=n(c,"H2",{class:!0});var gIe=s(rd);Ch=n(gIe,"A",{id:!0,class:!0,href:!0});var AQr=s(Ch);Yoe=n(AQr,"SPAN",{});var yQr=s(Yoe);m(f6.$$.fragment,yQr),yQr.forEach(t),AQr.forEach(t),Bao=i(gIe),Koe=n(gIe,"SPAN",{});var LQr=s(Koe);Pao=r(LQr,"AutoFeatureExtractor"),LQr.forEach(t),gIe.forEach(t),dPe=i(c),Ho=n(c,"DIV",{class:!0});var Zs=s(Ho);m(m6.$$.fragment,Zs),$ao=i(Zs),g6=n(Zs,"P",{});var hIe=s(g6);Iao=r(hIe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),EB=n(hIe,"A",{href:!0});var xQr=s(EB);qao=r(xQr,"AutoFeatureExtractor.from_pretrained()"),xQr.forEach(t),Nao=r(hIe," class method."),hIe.forEach(t),jao=i(Zs),h6=n(Zs,"P",{});var pIe=s(h6);Dao=r(pIe,"This class cannot be instantiated directly using "),Zoe=n(pIe,"CODE",{});var kQr=s(Zoe);Gao=r(kQr,"__init__()"),kQr.forEach(t),Oao=r(pIe," (throws an error)."),pIe.forEach(t),Vao=i(Zs),Ie=n(Zs,"DIV",{class:!0});var Nt=s(Ie);m(p6.$$.fragment,Nt),Xao=i(Nt),ere=n(Nt,"P",{});var SQr=s(ere);zao=r(SQr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),SQr.forEach(t),Qao=i(Nt),Va=n(Nt,"P",{});var W3=s(Va);Wao=r(W3,"The feature extractor class to instantiate is selected based on the "),ore=n(W3,"CODE",{});var RQr=s(ore);Hao=r(RQr,"model_type"),RQr.forEach(t),Uao=r(W3,` property of the config object
(either passed as an argument or loaded from `),rre=n(W3,"CODE",{});var BQr=s(rre);Jao=r(BQr,"pretrained_model_name_or_path"),BQr.forEach(t),Yao=r(W3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),tre=n(W3,"CODE",{});var PQr=s(tre);Kao=r(PQr,"pretrained_model_name_or_path"),PQr.forEach(t),Zao=r(W3,":"),W3.forEach(t),eno=i(Nt),H=n(Nt,"UL",{});var J=s(H);wh=n(J,"LI",{});var R3e=s(wh);are=n(R3e,"STRONG",{});var $Qr=s(are);ono=r($Qr,"beit"),$Qr.forEach(t),rno=r(R3e," \u2014 "),CB=n(R3e,"A",{href:!0});var IQr=s(CB);tno=r(IQr,"BeitFeatureExtractor"),IQr.forEach(t),ano=r(R3e," (BEiT model)"),R3e.forEach(t),nno=i(J),Ah=n(J,"LI",{});var B3e=s(Ah);nre=n(B3e,"STRONG",{});var qQr=s(nre);sno=r(qQr,"clip"),qQr.forEach(t),lno=r(B3e," \u2014 "),wB=n(B3e,"A",{href:!0});var NQr=s(wB);ino=r(NQr,"CLIPFeatureExtractor"),NQr.forEach(t),dno=r(B3e," (CLIP model)"),B3e.forEach(t),cno=i(J),yh=n(J,"LI",{});var P3e=s(yh);sre=n(P3e,"STRONG",{});var jQr=s(sre);fno=r(jQr,"convnext"),jQr.forEach(t),mno=r(P3e," \u2014 "),AB=n(P3e,"A",{href:!0});var DQr=s(AB);gno=r(DQr,"ConvNextFeatureExtractor"),DQr.forEach(t),hno=r(P3e," (ConvNext model)"),P3e.forEach(t),pno=i(J),Lh=n(J,"LI",{});var $3e=s(Lh);lre=n($3e,"STRONG",{});var GQr=s(lre);_no=r(GQr,"data2vec-audio"),GQr.forEach(t),uno=r($3e," \u2014 "),yB=n($3e,"A",{href:!0});var OQr=s(yB);bno=r(OQr,"Wav2Vec2FeatureExtractor"),OQr.forEach(t),vno=r($3e," (Data2VecAudio model)"),$3e.forEach(t),Fno=i(J),xh=n(J,"LI",{});var I3e=s(xh);ire=n(I3e,"STRONG",{});var VQr=s(ire);Tno=r(VQr,"data2vec-vision"),VQr.forEach(t),Mno=r(I3e," \u2014 "),LB=n(I3e,"A",{href:!0});var XQr=s(LB);Eno=r(XQr,"BeitFeatureExtractor"),XQr.forEach(t),Cno=r(I3e," (Data2VecVision model)"),I3e.forEach(t),wno=i(J),kh=n(J,"LI",{});var q3e=s(kh);dre=n(q3e,"STRONG",{});var zQr=s(dre);Ano=r(zQr,"deit"),zQr.forEach(t),yno=r(q3e," \u2014 "),xB=n(q3e,"A",{href:!0});var QQr=s(xB);Lno=r(QQr,"DeiTFeatureExtractor"),QQr.forEach(t),xno=r(q3e," (DeiT model)"),q3e.forEach(t),kno=i(J),Sh=n(J,"LI",{});var N3e=s(Sh);cre=n(N3e,"STRONG",{});var WQr=s(cre);Sno=r(WQr,"detr"),WQr.forEach(t),Rno=r(N3e," \u2014 "),kB=n(N3e,"A",{href:!0});var HQr=s(kB);Bno=r(HQr,"DetrFeatureExtractor"),HQr.forEach(t),Pno=r(N3e," (DETR model)"),N3e.forEach(t),$no=i(J),Rh=n(J,"LI",{});var j3e=s(Rh);fre=n(j3e,"STRONG",{});var UQr=s(fre);Ino=r(UQr,"dpt"),UQr.forEach(t),qno=r(j3e," \u2014 "),SB=n(j3e,"A",{href:!0});var JQr=s(SB);Nno=r(JQr,"DPTFeatureExtractor"),JQr.forEach(t),jno=r(j3e," (DPT model)"),j3e.forEach(t),Dno=i(J),Bh=n(J,"LI",{});var D3e=s(Bh);mre=n(D3e,"STRONG",{});var YQr=s(mre);Gno=r(YQr,"glpn"),YQr.forEach(t),Ono=r(D3e," \u2014 "),RB=n(D3e,"A",{href:!0});var KQr=s(RB);Vno=r(KQr,"GLPNFeatureExtractor"),KQr.forEach(t),Xno=r(D3e," (GLPN model)"),D3e.forEach(t),zno=i(J),Ph=n(J,"LI",{});var G3e=s(Ph);gre=n(G3e,"STRONG",{});var ZQr=s(gre);Qno=r(ZQr,"hubert"),ZQr.forEach(t),Wno=r(G3e," \u2014 "),BB=n(G3e,"A",{href:!0});var eWr=s(BB);Hno=r(eWr,"Wav2Vec2FeatureExtractor"),eWr.forEach(t),Uno=r(G3e," (Hubert model)"),G3e.forEach(t),Jno=i(J),$h=n(J,"LI",{});var O3e=s($h);hre=n(O3e,"STRONG",{});var oWr=s(hre);Yno=r(oWr,"layoutlmv2"),oWr.forEach(t),Kno=r(O3e," \u2014 "),PB=n(O3e,"A",{href:!0});var rWr=s(PB);Zno=r(rWr,"LayoutLMv2FeatureExtractor"),rWr.forEach(t),eso=r(O3e," (LayoutLMv2 model)"),O3e.forEach(t),oso=i(J),Ih=n(J,"LI",{});var V3e=s(Ih);pre=n(V3e,"STRONG",{});var tWr=s(pre);rso=r(tWr,"maskformer"),tWr.forEach(t),tso=r(V3e," \u2014 "),$B=n(V3e,"A",{href:!0});var aWr=s($B);aso=r(aWr,"MaskFormerFeatureExtractor"),aWr.forEach(t),nso=r(V3e," (MaskFormer model)"),V3e.forEach(t),sso=i(J),qh=n(J,"LI",{});var X3e=s(qh);_re=n(X3e,"STRONG",{});var nWr=s(_re);lso=r(nWr,"perceiver"),nWr.forEach(t),iso=r(X3e," \u2014 "),IB=n(X3e,"A",{href:!0});var sWr=s(IB);dso=r(sWr,"PerceiverFeatureExtractor"),sWr.forEach(t),cso=r(X3e," (Perceiver model)"),X3e.forEach(t),fso=i(J),Nh=n(J,"LI",{});var z3e=s(Nh);ure=n(z3e,"STRONG",{});var lWr=s(ure);mso=r(lWr,"poolformer"),lWr.forEach(t),gso=r(z3e," \u2014 "),qB=n(z3e,"A",{href:!0});var iWr=s(qB);hso=r(iWr,"PoolFormerFeatureExtractor"),iWr.forEach(t),pso=r(z3e," (PoolFormer model)"),z3e.forEach(t),_so=i(J),jh=n(J,"LI",{});var Q3e=s(jh);bre=n(Q3e,"STRONG",{});var dWr=s(bre);uso=r(dWr,"regnet"),dWr.forEach(t),bso=r(Q3e," \u2014 "),NB=n(Q3e,"A",{href:!0});var cWr=s(NB);vso=r(cWr,"ConvNextFeatureExtractor"),cWr.forEach(t),Fso=r(Q3e," (RegNet model)"),Q3e.forEach(t),Tso=i(J),Dh=n(J,"LI",{});var W3e=s(Dh);vre=n(W3e,"STRONG",{});var fWr=s(vre);Mso=r(fWr,"resnet"),fWr.forEach(t),Eso=r(W3e," \u2014 "),jB=n(W3e,"A",{href:!0});var mWr=s(jB);Cso=r(mWr,"ConvNextFeatureExtractor"),mWr.forEach(t),wso=r(W3e," (ResNet model)"),W3e.forEach(t),Aso=i(J),Gh=n(J,"LI",{});var H3e=s(Gh);Fre=n(H3e,"STRONG",{});var gWr=s(Fre);yso=r(gWr,"segformer"),gWr.forEach(t),Lso=r(H3e," \u2014 "),DB=n(H3e,"A",{href:!0});var hWr=s(DB);xso=r(hWr,"SegformerFeatureExtractor"),hWr.forEach(t),kso=r(H3e," (SegFormer model)"),H3e.forEach(t),Sso=i(J),Oh=n(J,"LI",{});var U3e=s(Oh);Tre=n(U3e,"STRONG",{});var pWr=s(Tre);Rso=r(pWr,"speech_to_text"),pWr.forEach(t),Bso=r(U3e," \u2014 "),GB=n(U3e,"A",{href:!0});var _Wr=s(GB);Pso=r(_Wr,"Speech2TextFeatureExtractor"),_Wr.forEach(t),$so=r(U3e," (Speech2Text model)"),U3e.forEach(t),Iso=i(J),Vh=n(J,"LI",{});var J3e=s(Vh);Mre=n(J3e,"STRONG",{});var uWr=s(Mre);qso=r(uWr,"swin"),uWr.forEach(t),Nso=r(J3e," \u2014 "),OB=n(J3e,"A",{href:!0});var bWr=s(OB);jso=r(bWr,"ViTFeatureExtractor"),bWr.forEach(t),Dso=r(J3e," (Swin model)"),J3e.forEach(t),Gso=i(J),Xh=n(J,"LI",{});var Y3e=s(Xh);Ere=n(Y3e,"STRONG",{});var vWr=s(Ere);Oso=r(vWr,"van"),vWr.forEach(t),Vso=r(Y3e," \u2014 "),VB=n(Y3e,"A",{href:!0});var FWr=s(VB);Xso=r(FWr,"ConvNextFeatureExtractor"),FWr.forEach(t),zso=r(Y3e," (VAN model)"),Y3e.forEach(t),Qso=i(J),zh=n(J,"LI",{});var K3e=s(zh);Cre=n(K3e,"STRONG",{});var TWr=s(Cre);Wso=r(TWr,"vit"),TWr.forEach(t),Hso=r(K3e," \u2014 "),XB=n(K3e,"A",{href:!0});var MWr=s(XB);Uso=r(MWr,"ViTFeatureExtractor"),MWr.forEach(t),Jso=r(K3e," (ViT model)"),K3e.forEach(t),Yso=i(J),Qh=n(J,"LI",{});var Z3e=s(Qh);wre=n(Z3e,"STRONG",{});var EWr=s(wre);Kso=r(EWr,"vit_mae"),EWr.forEach(t),Zso=r(Z3e," \u2014 "),zB=n(Z3e,"A",{href:!0});var CWr=s(zB);elo=r(CWr,"ViTFeatureExtractor"),CWr.forEach(t),olo=r(Z3e," (ViTMAE model)"),Z3e.forEach(t),rlo=i(J),Wh=n(J,"LI",{});var eCe=s(Wh);Are=n(eCe,"STRONG",{});var wWr=s(Are);tlo=r(wWr,"wav2vec2"),wWr.forEach(t),alo=r(eCe," \u2014 "),QB=n(eCe,"A",{href:!0});var AWr=s(QB);nlo=r(AWr,"Wav2Vec2FeatureExtractor"),AWr.forEach(t),slo=r(eCe," (Wav2Vec2 model)"),eCe.forEach(t),J.forEach(t),llo=i(Nt),m(Hh.$$.fragment,Nt),ilo=i(Nt),yre=n(Nt,"P",{});var yWr=s(yre);dlo=r(yWr,"Examples:"),yWr.forEach(t),clo=i(Nt),m(_6.$$.fragment,Nt),Nt.forEach(t),flo=i(Zs),Uh=n(Zs,"DIV",{class:!0});var _Ie=s(Uh);m(u6.$$.fragment,_Ie),mlo=i(_Ie),Lre=n(_Ie,"P",{});var LWr=s(Lre);glo=r(LWr,"Register a new feature extractor for this class."),LWr.forEach(t),_Ie.forEach(t),Zs.forEach(t),cPe=i(c),td=n(c,"H2",{class:!0});var uIe=s(td);Jh=n(uIe,"A",{id:!0,class:!0,href:!0});var xWr=s(Jh);xre=n(xWr,"SPAN",{});var kWr=s(xre);m(b6.$$.fragment,kWr),kWr.forEach(t),xWr.forEach(t),hlo=i(uIe),kre=n(uIe,"SPAN",{});var SWr=s(kre);plo=r(SWr,"AutoProcessor"),SWr.forEach(t),uIe.forEach(t),fPe=i(c),Uo=n(c,"DIV",{class:!0});var el=s(Uo);m(v6.$$.fragment,el),_lo=i(el),F6=n(el,"P",{});var bIe=s(F6);ulo=r(bIe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),WB=n(bIe,"A",{href:!0});var RWr=s(WB);blo=r(RWr,"AutoProcessor.from_pretrained()"),RWr.forEach(t),vlo=r(bIe," class method."),bIe.forEach(t),Flo=i(el),T6=n(el,"P",{});var vIe=s(T6);Tlo=r(vIe,"This class cannot be instantiated directly using "),Sre=n(vIe,"CODE",{});var BWr=s(Sre);Mlo=r(BWr,"__init__()"),BWr.forEach(t),Elo=r(vIe," (throws an error)."),vIe.forEach(t),Clo=i(el),qe=n(el,"DIV",{class:!0});var jt=s(qe);m(M6.$$.fragment,jt),wlo=i(jt),Rre=n(jt,"P",{});var PWr=s(Rre);Alo=r(PWr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),PWr.forEach(t),ylo=i(jt),ad=n(jt,"P",{});var pJ=s(ad);Llo=r(pJ,"The processor class to instantiate is selected based on the "),Bre=n(pJ,"CODE",{});var $Wr=s(Bre);xlo=r($Wr,"model_type"),$Wr.forEach(t),klo=r(pJ,` property of the config object (either
passed as an argument or loaded from `),Pre=n(pJ,"CODE",{});var IWr=s(Pre);Slo=r(IWr,"pretrained_model_name_or_path"),IWr.forEach(t),Rlo=r(pJ," if possible):"),pJ.forEach(t),Blo=i(jt),de=n(jt,"UL",{});var fe=s(de);Yh=n(fe,"LI",{});var oCe=s(Yh);$re=n(oCe,"STRONG",{});var qWr=s($re);Plo=r(qWr,"clip"),qWr.forEach(t),$lo=r(oCe," \u2014 "),HB=n(oCe,"A",{href:!0});var NWr=s(HB);Ilo=r(NWr,"CLIPProcessor"),NWr.forEach(t),qlo=r(oCe," (CLIP model)"),oCe.forEach(t),Nlo=i(fe),Kh=n(fe,"LI",{});var rCe=s(Kh);Ire=n(rCe,"STRONG",{});var jWr=s(Ire);jlo=r(jWr,"layoutlmv2"),jWr.forEach(t),Dlo=r(rCe," \u2014 "),UB=n(rCe,"A",{href:!0});var DWr=s(UB);Glo=r(DWr,"LayoutLMv2Processor"),DWr.forEach(t),Olo=r(rCe," (LayoutLMv2 model)"),rCe.forEach(t),Vlo=i(fe),Zh=n(fe,"LI",{});var tCe=s(Zh);qre=n(tCe,"STRONG",{});var GWr=s(qre);Xlo=r(GWr,"layoutxlm"),GWr.forEach(t),zlo=r(tCe," \u2014 "),JB=n(tCe,"A",{href:!0});var OWr=s(JB);Qlo=r(OWr,"LayoutXLMProcessor"),OWr.forEach(t),Wlo=r(tCe," (LayoutXLM model)"),tCe.forEach(t),Hlo=i(fe),ep=n(fe,"LI",{});var aCe=s(ep);Nre=n(aCe,"STRONG",{});var VWr=s(Nre);Ulo=r(VWr,"sew"),VWr.forEach(t),Jlo=r(aCe," \u2014 "),YB=n(aCe,"A",{href:!0});var XWr=s(YB);Ylo=r(XWr,"Wav2Vec2Processor"),XWr.forEach(t),Klo=r(aCe," (SEW model)"),aCe.forEach(t),Zlo=i(fe),op=n(fe,"LI",{});var nCe=s(op);jre=n(nCe,"STRONG",{});var zWr=s(jre);eio=r(zWr,"sew-d"),zWr.forEach(t),oio=r(nCe," \u2014 "),KB=n(nCe,"A",{href:!0});var QWr=s(KB);rio=r(QWr,"Wav2Vec2Processor"),QWr.forEach(t),tio=r(nCe," (SEW-D model)"),nCe.forEach(t),aio=i(fe),rp=n(fe,"LI",{});var sCe=s(rp);Dre=n(sCe,"STRONG",{});var WWr=s(Dre);nio=r(WWr,"speech_to_text"),WWr.forEach(t),sio=r(sCe," \u2014 "),ZB=n(sCe,"A",{href:!0});var HWr=s(ZB);lio=r(HWr,"Speech2TextProcessor"),HWr.forEach(t),iio=r(sCe," (Speech2Text model)"),sCe.forEach(t),dio=i(fe),tp=n(fe,"LI",{});var lCe=s(tp);Gre=n(lCe,"STRONG",{});var UWr=s(Gre);cio=r(UWr,"speech_to_text_2"),UWr.forEach(t),fio=r(lCe," \u2014 "),eP=n(lCe,"A",{href:!0});var JWr=s(eP);mio=r(JWr,"Speech2Text2Processor"),JWr.forEach(t),gio=r(lCe," (Speech2Text2 model)"),lCe.forEach(t),hio=i(fe),ap=n(fe,"LI",{});var iCe=s(ap);Ore=n(iCe,"STRONG",{});var YWr=s(Ore);pio=r(YWr,"trocr"),YWr.forEach(t),_io=r(iCe," \u2014 "),oP=n(iCe,"A",{href:!0});var KWr=s(oP);uio=r(KWr,"TrOCRProcessor"),KWr.forEach(t),bio=r(iCe," (TrOCR model)"),iCe.forEach(t),vio=i(fe),np=n(fe,"LI",{});var dCe=s(np);Vre=n(dCe,"STRONG",{});var ZWr=s(Vre);Fio=r(ZWr,"unispeech"),ZWr.forEach(t),Tio=r(dCe," \u2014 "),rP=n(dCe,"A",{href:!0});var eHr=s(rP);Mio=r(eHr,"Wav2Vec2Processor"),eHr.forEach(t),Eio=r(dCe," (UniSpeech model)"),dCe.forEach(t),Cio=i(fe),sp=n(fe,"LI",{});var cCe=s(sp);Xre=n(cCe,"STRONG",{});var oHr=s(Xre);wio=r(oHr,"unispeech-sat"),oHr.forEach(t),Aio=r(cCe," \u2014 "),tP=n(cCe,"A",{href:!0});var rHr=s(tP);yio=r(rHr,"Wav2Vec2Processor"),rHr.forEach(t),Lio=r(cCe," (UniSpeechSat model)"),cCe.forEach(t),xio=i(fe),lp=n(fe,"LI",{});var fCe=s(lp);zre=n(fCe,"STRONG",{});var tHr=s(zre);kio=r(tHr,"vilt"),tHr.forEach(t),Sio=r(fCe," \u2014 "),aP=n(fCe,"A",{href:!0});var aHr=s(aP);Rio=r(aHr,"ViltProcessor"),aHr.forEach(t),Bio=r(fCe," (ViLT model)"),fCe.forEach(t),Pio=i(fe),ip=n(fe,"LI",{});var mCe=s(ip);Qre=n(mCe,"STRONG",{});var nHr=s(Qre);$io=r(nHr,"vision-text-dual-encoder"),nHr.forEach(t),Iio=r(mCe," \u2014 "),nP=n(mCe,"A",{href:!0});var sHr=s(nP);qio=r(sHr,"VisionTextDualEncoderProcessor"),sHr.forEach(t),Nio=r(mCe," (VisionTextDualEncoder model)"),mCe.forEach(t),jio=i(fe),dp=n(fe,"LI",{});var gCe=s(dp);Wre=n(gCe,"STRONG",{});var lHr=s(Wre);Dio=r(lHr,"wav2vec2"),lHr.forEach(t),Gio=r(gCe," \u2014 "),sP=n(gCe,"A",{href:!0});var iHr=s(sP);Oio=r(iHr,"Wav2Vec2Processor"),iHr.forEach(t),Vio=r(gCe," (Wav2Vec2 model)"),gCe.forEach(t),Xio=i(fe),cp=n(fe,"LI",{});var hCe=s(cp);Hre=n(hCe,"STRONG",{});var dHr=s(Hre);zio=r(dHr,"wavlm"),dHr.forEach(t),Qio=r(hCe," \u2014 "),lP=n(hCe,"A",{href:!0});var cHr=s(lP);Wio=r(cHr,"Wav2Vec2Processor"),cHr.forEach(t),Hio=r(hCe," (WavLM model)"),hCe.forEach(t),fe.forEach(t),Uio=i(jt),m(fp.$$.fragment,jt),Jio=i(jt),Ure=n(jt,"P",{});var fHr=s(Ure);Yio=r(fHr,"Examples:"),fHr.forEach(t),Kio=i(jt),m(E6.$$.fragment,jt),jt.forEach(t),Zio=i(el),mp=n(el,"DIV",{class:!0});var FIe=s(mp);m(C6.$$.fragment,FIe),edo=i(FIe),Jre=n(FIe,"P",{});var mHr=s(Jre);odo=r(mHr,"Register a new processor for this class."),mHr.forEach(t),FIe.forEach(t),el.forEach(t),mPe=i(c),nd=n(c,"H2",{class:!0});var TIe=s(nd);gp=n(TIe,"A",{id:!0,class:!0,href:!0});var gHr=s(gp);Yre=n(gHr,"SPAN",{});var hHr=s(Yre);m(w6.$$.fragment,hHr),hHr.forEach(t),gHr.forEach(t),rdo=i(TIe),Kre=n(TIe,"SPAN",{});var pHr=s(Kre);tdo=r(pHr,"AutoModel"),pHr.forEach(t),TIe.forEach(t),gPe=i(c),Jo=n(c,"DIV",{class:!0});var ol=s(Jo);m(A6.$$.fragment,ol),ado=i(ol),sd=n(ol,"P",{});var _J=s(sd);ndo=r(_J,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),iP=n(_J,"A",{href:!0});var _Hr=s(iP);sdo=r(_Hr,"from_pretrained()"),_Hr.forEach(t),ldo=r(_J," class method or the "),dP=n(_J,"A",{href:!0});var uHr=s(dP);ido=r(uHr,"from_config()"),uHr.forEach(t),ddo=r(_J,` class
method.`),_J.forEach(t),cdo=i(ol),y6=n(ol,"P",{});var MIe=s(y6);fdo=r(MIe,"This class cannot be instantiated directly using "),Zre=n(MIe,"CODE",{});var bHr=s(Zre);mdo=r(bHr,"__init__()"),bHr.forEach(t),gdo=r(MIe," (throws an error)."),MIe.forEach(t),hdo=i(ol),Xr=n(ol,"DIV",{class:!0});var rl=s(Xr);m(L6.$$.fragment,rl),pdo=i(rl),ete=n(rl,"P",{});var vHr=s(ete);_do=r(vHr,"Instantiates one of the base model classes of the library from a configuration."),vHr.forEach(t),udo=i(rl),ld=n(rl,"P",{});var uJ=s(ld);bdo=r(uJ,`Note:
Loading a model from its configuration file does `),ote=n(uJ,"STRONG",{});var FHr=s(ote);vdo=r(FHr,"not"),FHr.forEach(t),Fdo=r(uJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cP=n(uJ,"A",{href:!0});var THr=s(cP);Tdo=r(THr,"from_pretrained()"),THr.forEach(t),Mdo=r(uJ," to load the model weights."),uJ.forEach(t),Edo=i(rl),rte=n(rl,"P",{});var MHr=s(rte);Cdo=r(MHr,"Examples:"),MHr.forEach(t),wdo=i(rl),m(x6.$$.fragment,rl),rl.forEach(t),Ado=i(ol),Ne=n(ol,"DIV",{class:!0});var Dt=s(Ne);m(k6.$$.fragment,Dt),ydo=i(Dt),tte=n(Dt,"P",{});var EHr=s(tte);Ldo=r(EHr,"Instantiate one of the base model classes of the library from a pretrained model."),EHr.forEach(t),xdo=i(Dt),Xa=n(Dt,"P",{});var H3=s(Xa);kdo=r(H3,"The model class to instantiate is selected based on the "),ate=n(H3,"CODE",{});var CHr=s(ate);Sdo=r(CHr,"model_type"),CHr.forEach(t),Rdo=r(H3,` property of the config object (either
passed as an argument or loaded from `),nte=n(H3,"CODE",{});var wHr=s(nte);Bdo=r(wHr,"pretrained_model_name_or_path"),wHr.forEach(t),Pdo=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ste=n(H3,"CODE",{});var AHr=s(ste);$do=r(AHr,"pretrained_model_name_or_path"),AHr.forEach(t),Ido=r(H3,":"),H3.forEach(t),qdo=i(Dt),T=n(Dt,"UL",{});var M=s(T);hp=n(M,"LI",{});var pCe=s(hp);lte=n(pCe,"STRONG",{});var yHr=s(lte);Ndo=r(yHr,"albert"),yHr.forEach(t),jdo=r(pCe," \u2014 "),fP=n(pCe,"A",{href:!0});var LHr=s(fP);Ddo=r(LHr,"AlbertModel"),LHr.forEach(t),Gdo=r(pCe," (ALBERT model)"),pCe.forEach(t),Odo=i(M),pp=n(M,"LI",{});var _Ce=s(pp);ite=n(_Ce,"STRONG",{});var xHr=s(ite);Vdo=r(xHr,"bart"),xHr.forEach(t),Xdo=r(_Ce," \u2014 "),mP=n(_Ce,"A",{href:!0});var kHr=s(mP);zdo=r(kHr,"BartModel"),kHr.forEach(t),Qdo=r(_Ce," (BART model)"),_Ce.forEach(t),Wdo=i(M),_p=n(M,"LI",{});var uCe=s(_p);dte=n(uCe,"STRONG",{});var SHr=s(dte);Hdo=r(SHr,"beit"),SHr.forEach(t),Udo=r(uCe," \u2014 "),gP=n(uCe,"A",{href:!0});var RHr=s(gP);Jdo=r(RHr,"BeitModel"),RHr.forEach(t),Ydo=r(uCe," (BEiT model)"),uCe.forEach(t),Kdo=i(M),up=n(M,"LI",{});var bCe=s(up);cte=n(bCe,"STRONG",{});var BHr=s(cte);Zdo=r(BHr,"bert"),BHr.forEach(t),eco=r(bCe," \u2014 "),hP=n(bCe,"A",{href:!0});var PHr=s(hP);oco=r(PHr,"BertModel"),PHr.forEach(t),rco=r(bCe," (BERT model)"),bCe.forEach(t),tco=i(M),bp=n(M,"LI",{});var vCe=s(bp);fte=n(vCe,"STRONG",{});var $Hr=s(fte);aco=r($Hr,"bert-generation"),$Hr.forEach(t),nco=r(vCe," \u2014 "),pP=n(vCe,"A",{href:!0});var IHr=s(pP);sco=r(IHr,"BertGenerationEncoder"),IHr.forEach(t),lco=r(vCe," (Bert Generation model)"),vCe.forEach(t),ico=i(M),vp=n(M,"LI",{});var FCe=s(vp);mte=n(FCe,"STRONG",{});var qHr=s(mte);dco=r(qHr,"big_bird"),qHr.forEach(t),cco=r(FCe," \u2014 "),_P=n(FCe,"A",{href:!0});var NHr=s(_P);fco=r(NHr,"BigBirdModel"),NHr.forEach(t),mco=r(FCe," (BigBird model)"),FCe.forEach(t),gco=i(M),Fp=n(M,"LI",{});var TCe=s(Fp);gte=n(TCe,"STRONG",{});var jHr=s(gte);hco=r(jHr,"bigbird_pegasus"),jHr.forEach(t),pco=r(TCe," \u2014 "),uP=n(TCe,"A",{href:!0});var DHr=s(uP);_co=r(DHr,"BigBirdPegasusModel"),DHr.forEach(t),uco=r(TCe," (BigBirdPegasus model)"),TCe.forEach(t),bco=i(M),Tp=n(M,"LI",{});var MCe=s(Tp);hte=n(MCe,"STRONG",{});var GHr=s(hte);vco=r(GHr,"blenderbot"),GHr.forEach(t),Fco=r(MCe," \u2014 "),bP=n(MCe,"A",{href:!0});var OHr=s(bP);Tco=r(OHr,"BlenderbotModel"),OHr.forEach(t),Mco=r(MCe," (Blenderbot model)"),MCe.forEach(t),Eco=i(M),Mp=n(M,"LI",{});var ECe=s(Mp);pte=n(ECe,"STRONG",{});var VHr=s(pte);Cco=r(VHr,"blenderbot-small"),VHr.forEach(t),wco=r(ECe," \u2014 "),vP=n(ECe,"A",{href:!0});var XHr=s(vP);Aco=r(XHr,"BlenderbotSmallModel"),XHr.forEach(t),yco=r(ECe," (BlenderbotSmall model)"),ECe.forEach(t),Lco=i(M),Ep=n(M,"LI",{});var CCe=s(Ep);_te=n(CCe,"STRONG",{});var zHr=s(_te);xco=r(zHr,"camembert"),zHr.forEach(t),kco=r(CCe," \u2014 "),FP=n(CCe,"A",{href:!0});var QHr=s(FP);Sco=r(QHr,"CamembertModel"),QHr.forEach(t),Rco=r(CCe," (CamemBERT model)"),CCe.forEach(t),Bco=i(M),Cp=n(M,"LI",{});var wCe=s(Cp);ute=n(wCe,"STRONG",{});var WHr=s(ute);Pco=r(WHr,"canine"),WHr.forEach(t),$co=r(wCe," \u2014 "),TP=n(wCe,"A",{href:!0});var HHr=s(TP);Ico=r(HHr,"CanineModel"),HHr.forEach(t),qco=r(wCe," (Canine model)"),wCe.forEach(t),Nco=i(M),wp=n(M,"LI",{});var ACe=s(wp);bte=n(ACe,"STRONG",{});var UHr=s(bte);jco=r(UHr,"clip"),UHr.forEach(t),Dco=r(ACe," \u2014 "),MP=n(ACe,"A",{href:!0});var JHr=s(MP);Gco=r(JHr,"CLIPModel"),JHr.forEach(t),Oco=r(ACe," (CLIP model)"),ACe.forEach(t),Vco=i(M),Ap=n(M,"LI",{});var yCe=s(Ap);vte=n(yCe,"STRONG",{});var YHr=s(vte);Xco=r(YHr,"convbert"),YHr.forEach(t),zco=r(yCe," \u2014 "),EP=n(yCe,"A",{href:!0});var KHr=s(EP);Qco=r(KHr,"ConvBertModel"),KHr.forEach(t),Wco=r(yCe," (ConvBERT model)"),yCe.forEach(t),Hco=i(M),yp=n(M,"LI",{});var LCe=s(yp);Fte=n(LCe,"STRONG",{});var ZHr=s(Fte);Uco=r(ZHr,"convnext"),ZHr.forEach(t),Jco=r(LCe," \u2014 "),CP=n(LCe,"A",{href:!0});var eUr=s(CP);Yco=r(eUr,"ConvNextModel"),eUr.forEach(t),Kco=r(LCe," (ConvNext model)"),LCe.forEach(t),Zco=i(M),Lp=n(M,"LI",{});var xCe=s(Lp);Tte=n(xCe,"STRONG",{});var oUr=s(Tte);efo=r(oUr,"ctrl"),oUr.forEach(t),ofo=r(xCe," \u2014 "),wP=n(xCe,"A",{href:!0});var rUr=s(wP);rfo=r(rUr,"CTRLModel"),rUr.forEach(t),tfo=r(xCe," (CTRL model)"),xCe.forEach(t),afo=i(M),xp=n(M,"LI",{});var kCe=s(xp);Mte=n(kCe,"STRONG",{});var tUr=s(Mte);nfo=r(tUr,"data2vec-audio"),tUr.forEach(t),sfo=r(kCe," \u2014 "),AP=n(kCe,"A",{href:!0});var aUr=s(AP);lfo=r(aUr,"Data2VecAudioModel"),aUr.forEach(t),ifo=r(kCe," (Data2VecAudio model)"),kCe.forEach(t),dfo=i(M),kp=n(M,"LI",{});var SCe=s(kp);Ete=n(SCe,"STRONG",{});var nUr=s(Ete);cfo=r(nUr,"data2vec-text"),nUr.forEach(t),ffo=r(SCe," \u2014 "),yP=n(SCe,"A",{href:!0});var sUr=s(yP);mfo=r(sUr,"Data2VecTextModel"),sUr.forEach(t),gfo=r(SCe," (Data2VecText model)"),SCe.forEach(t),hfo=i(M),Sp=n(M,"LI",{});var RCe=s(Sp);Cte=n(RCe,"STRONG",{});var lUr=s(Cte);pfo=r(lUr,"data2vec-vision"),lUr.forEach(t),_fo=r(RCe," \u2014 "),LP=n(RCe,"A",{href:!0});var iUr=s(LP);ufo=r(iUr,"Data2VecVisionModel"),iUr.forEach(t),bfo=r(RCe," (Data2VecVision model)"),RCe.forEach(t),vfo=i(M),Rp=n(M,"LI",{});var BCe=s(Rp);wte=n(BCe,"STRONG",{});var dUr=s(wte);Ffo=r(dUr,"deberta"),dUr.forEach(t),Tfo=r(BCe," \u2014 "),xP=n(BCe,"A",{href:!0});var cUr=s(xP);Mfo=r(cUr,"DebertaModel"),cUr.forEach(t),Efo=r(BCe," (DeBERTa model)"),BCe.forEach(t),Cfo=i(M),Bp=n(M,"LI",{});var PCe=s(Bp);Ate=n(PCe,"STRONG",{});var fUr=s(Ate);wfo=r(fUr,"deberta-v2"),fUr.forEach(t),Afo=r(PCe," \u2014 "),kP=n(PCe,"A",{href:!0});var mUr=s(kP);yfo=r(mUr,"DebertaV2Model"),mUr.forEach(t),Lfo=r(PCe," (DeBERTa-v2 model)"),PCe.forEach(t),xfo=i(M),Pp=n(M,"LI",{});var $Ce=s(Pp);yte=n($Ce,"STRONG",{});var gUr=s(yte);kfo=r(gUr,"decision_transformer"),gUr.forEach(t),Sfo=r($Ce," \u2014 "),SP=n($Ce,"A",{href:!0});var hUr=s(SP);Rfo=r(hUr,"DecisionTransformerModel"),hUr.forEach(t),Bfo=r($Ce," (Decision Transformer model)"),$Ce.forEach(t),Pfo=i(M),$p=n(M,"LI",{});var ICe=s($p);Lte=n(ICe,"STRONG",{});var pUr=s(Lte);$fo=r(pUr,"deit"),pUr.forEach(t),Ifo=r(ICe," \u2014 "),RP=n(ICe,"A",{href:!0});var _Ur=s(RP);qfo=r(_Ur,"DeiTModel"),_Ur.forEach(t),Nfo=r(ICe," (DeiT model)"),ICe.forEach(t),jfo=i(M),Ip=n(M,"LI",{});var qCe=s(Ip);xte=n(qCe,"STRONG",{});var uUr=s(xte);Dfo=r(uUr,"detr"),uUr.forEach(t),Gfo=r(qCe," \u2014 "),BP=n(qCe,"A",{href:!0});var bUr=s(BP);Ofo=r(bUr,"DetrModel"),bUr.forEach(t),Vfo=r(qCe," (DETR model)"),qCe.forEach(t),Xfo=i(M),qp=n(M,"LI",{});var NCe=s(qp);kte=n(NCe,"STRONG",{});var vUr=s(kte);zfo=r(vUr,"distilbert"),vUr.forEach(t),Qfo=r(NCe," \u2014 "),PP=n(NCe,"A",{href:!0});var FUr=s(PP);Wfo=r(FUr,"DistilBertModel"),FUr.forEach(t),Hfo=r(NCe," (DistilBERT model)"),NCe.forEach(t),Ufo=i(M),Np=n(M,"LI",{});var jCe=s(Np);Ste=n(jCe,"STRONG",{});var TUr=s(Ste);Jfo=r(TUr,"dpr"),TUr.forEach(t),Yfo=r(jCe," \u2014 "),$P=n(jCe,"A",{href:!0});var MUr=s($P);Kfo=r(MUr,"DPRQuestionEncoder"),MUr.forEach(t),Zfo=r(jCe," (DPR model)"),jCe.forEach(t),emo=i(M),jp=n(M,"LI",{});var DCe=s(jp);Rte=n(DCe,"STRONG",{});var EUr=s(Rte);omo=r(EUr,"dpt"),EUr.forEach(t),rmo=r(DCe," \u2014 "),IP=n(DCe,"A",{href:!0});var CUr=s(IP);tmo=r(CUr,"DPTModel"),CUr.forEach(t),amo=r(DCe," (DPT model)"),DCe.forEach(t),nmo=i(M),Dp=n(M,"LI",{});var GCe=s(Dp);Bte=n(GCe,"STRONG",{});var wUr=s(Bte);smo=r(wUr,"electra"),wUr.forEach(t),lmo=r(GCe," \u2014 "),qP=n(GCe,"A",{href:!0});var AUr=s(qP);imo=r(AUr,"ElectraModel"),AUr.forEach(t),dmo=r(GCe," (ELECTRA model)"),GCe.forEach(t),cmo=i(M),Gp=n(M,"LI",{});var OCe=s(Gp);Pte=n(OCe,"STRONG",{});var yUr=s(Pte);fmo=r(yUr,"flaubert"),yUr.forEach(t),mmo=r(OCe," \u2014 "),NP=n(OCe,"A",{href:!0});var LUr=s(NP);gmo=r(LUr,"FlaubertModel"),LUr.forEach(t),hmo=r(OCe," (FlauBERT model)"),OCe.forEach(t),pmo=i(M),Op=n(M,"LI",{});var VCe=s(Op);$te=n(VCe,"STRONG",{});var xUr=s($te);_mo=r(xUr,"fnet"),xUr.forEach(t),umo=r(VCe," \u2014 "),jP=n(VCe,"A",{href:!0});var kUr=s(jP);bmo=r(kUr,"FNetModel"),kUr.forEach(t),vmo=r(VCe," (FNet model)"),VCe.forEach(t),Fmo=i(M),Vp=n(M,"LI",{});var XCe=s(Vp);Ite=n(XCe,"STRONG",{});var SUr=s(Ite);Tmo=r(SUr,"fsmt"),SUr.forEach(t),Mmo=r(XCe," \u2014 "),DP=n(XCe,"A",{href:!0});var RUr=s(DP);Emo=r(RUr,"FSMTModel"),RUr.forEach(t),Cmo=r(XCe," (FairSeq Machine-Translation model)"),XCe.forEach(t),wmo=i(M),Hs=n(M,"LI",{});var O9=s(Hs);qte=n(O9,"STRONG",{});var BUr=s(qte);Amo=r(BUr,"funnel"),BUr.forEach(t),ymo=r(O9," \u2014 "),GP=n(O9,"A",{href:!0});var PUr=s(GP);Lmo=r(PUr,"FunnelModel"),PUr.forEach(t),xmo=r(O9," or "),OP=n(O9,"A",{href:!0});var $Ur=s(OP);kmo=r($Ur,"FunnelBaseModel"),$Ur.forEach(t),Smo=r(O9," (Funnel Transformer model)"),O9.forEach(t),Rmo=i(M),Xp=n(M,"LI",{});var zCe=s(Xp);Nte=n(zCe,"STRONG",{});var IUr=s(Nte);Bmo=r(IUr,"glpn"),IUr.forEach(t),Pmo=r(zCe," \u2014 "),VP=n(zCe,"A",{href:!0});var qUr=s(VP);$mo=r(qUr,"GLPNModel"),qUr.forEach(t),Imo=r(zCe," (GLPN model)"),zCe.forEach(t),qmo=i(M),zp=n(M,"LI",{});var QCe=s(zp);jte=n(QCe,"STRONG",{});var NUr=s(jte);Nmo=r(NUr,"gpt2"),NUr.forEach(t),jmo=r(QCe," \u2014 "),XP=n(QCe,"A",{href:!0});var jUr=s(XP);Dmo=r(jUr,"GPT2Model"),jUr.forEach(t),Gmo=r(QCe," (OpenAI GPT-2 model)"),QCe.forEach(t),Omo=i(M),Qp=n(M,"LI",{});var WCe=s(Qp);Dte=n(WCe,"STRONG",{});var DUr=s(Dte);Vmo=r(DUr,"gpt_neo"),DUr.forEach(t),Xmo=r(WCe," \u2014 "),zP=n(WCe,"A",{href:!0});var GUr=s(zP);zmo=r(GUr,"GPTNeoModel"),GUr.forEach(t),Qmo=r(WCe," (GPT Neo model)"),WCe.forEach(t),Wmo=i(M),Wp=n(M,"LI",{});var HCe=s(Wp);Gte=n(HCe,"STRONG",{});var OUr=s(Gte);Hmo=r(OUr,"gptj"),OUr.forEach(t),Umo=r(HCe," \u2014 "),QP=n(HCe,"A",{href:!0});var VUr=s(QP);Jmo=r(VUr,"GPTJModel"),VUr.forEach(t),Ymo=r(HCe," (GPT-J model)"),HCe.forEach(t),Kmo=i(M),Hp=n(M,"LI",{});var UCe=s(Hp);Ote=n(UCe,"STRONG",{});var XUr=s(Ote);Zmo=r(XUr,"hubert"),XUr.forEach(t),ego=r(UCe," \u2014 "),WP=n(UCe,"A",{href:!0});var zUr=s(WP);ogo=r(zUr,"HubertModel"),zUr.forEach(t),rgo=r(UCe," (Hubert model)"),UCe.forEach(t),tgo=i(M),Up=n(M,"LI",{});var JCe=s(Up);Vte=n(JCe,"STRONG",{});var QUr=s(Vte);ago=r(QUr,"ibert"),QUr.forEach(t),ngo=r(JCe," \u2014 "),HP=n(JCe,"A",{href:!0});var WUr=s(HP);sgo=r(WUr,"IBertModel"),WUr.forEach(t),lgo=r(JCe," (I-BERT model)"),JCe.forEach(t),igo=i(M),Jp=n(M,"LI",{});var YCe=s(Jp);Xte=n(YCe,"STRONG",{});var HUr=s(Xte);dgo=r(HUr,"imagegpt"),HUr.forEach(t),cgo=r(YCe," \u2014 "),UP=n(YCe,"A",{href:!0});var UUr=s(UP);fgo=r(UUr,"ImageGPTModel"),UUr.forEach(t),mgo=r(YCe," (ImageGPT model)"),YCe.forEach(t),ggo=i(M),Yp=n(M,"LI",{});var KCe=s(Yp);zte=n(KCe,"STRONG",{});var JUr=s(zte);hgo=r(JUr,"layoutlm"),JUr.forEach(t),pgo=r(KCe," \u2014 "),JP=n(KCe,"A",{href:!0});var YUr=s(JP);_go=r(YUr,"LayoutLMModel"),YUr.forEach(t),ugo=r(KCe," (LayoutLM model)"),KCe.forEach(t),bgo=i(M),Kp=n(M,"LI",{});var ZCe=s(Kp);Qte=n(ZCe,"STRONG",{});var KUr=s(Qte);vgo=r(KUr,"layoutlmv2"),KUr.forEach(t),Fgo=r(ZCe," \u2014 "),YP=n(ZCe,"A",{href:!0});var ZUr=s(YP);Tgo=r(ZUr,"LayoutLMv2Model"),ZUr.forEach(t),Mgo=r(ZCe," (LayoutLMv2 model)"),ZCe.forEach(t),Ego=i(M),Zp=n(M,"LI",{});var e6e=s(Zp);Wte=n(e6e,"STRONG",{});var eJr=s(Wte);Cgo=r(eJr,"led"),eJr.forEach(t),wgo=r(e6e," \u2014 "),KP=n(e6e,"A",{href:!0});var oJr=s(KP);Ago=r(oJr,"LEDModel"),oJr.forEach(t),ygo=r(e6e," (LED model)"),e6e.forEach(t),Lgo=i(M),e_=n(M,"LI",{});var o6e=s(e_);Hte=n(o6e,"STRONG",{});var rJr=s(Hte);xgo=r(rJr,"longformer"),rJr.forEach(t),kgo=r(o6e," \u2014 "),ZP=n(o6e,"A",{href:!0});var tJr=s(ZP);Sgo=r(tJr,"LongformerModel"),tJr.forEach(t),Rgo=r(o6e," (Longformer model)"),o6e.forEach(t),Bgo=i(M),o_=n(M,"LI",{});var r6e=s(o_);Ute=n(r6e,"STRONG",{});var aJr=s(Ute);Pgo=r(aJr,"luke"),aJr.forEach(t),$go=r(r6e," \u2014 "),e$=n(r6e,"A",{href:!0});var nJr=s(e$);Igo=r(nJr,"LukeModel"),nJr.forEach(t),qgo=r(r6e," (LUKE model)"),r6e.forEach(t),Ngo=i(M),r_=n(M,"LI",{});var t6e=s(r_);Jte=n(t6e,"STRONG",{});var sJr=s(Jte);jgo=r(sJr,"lxmert"),sJr.forEach(t),Dgo=r(t6e," \u2014 "),o$=n(t6e,"A",{href:!0});var lJr=s(o$);Ggo=r(lJr,"LxmertModel"),lJr.forEach(t),Ogo=r(t6e," (LXMERT model)"),t6e.forEach(t),Vgo=i(M),t_=n(M,"LI",{});var a6e=s(t_);Yte=n(a6e,"STRONG",{});var iJr=s(Yte);Xgo=r(iJr,"m2m_100"),iJr.forEach(t),zgo=r(a6e," \u2014 "),r$=n(a6e,"A",{href:!0});var dJr=s(r$);Qgo=r(dJr,"M2M100Model"),dJr.forEach(t),Wgo=r(a6e," (M2M100 model)"),a6e.forEach(t),Hgo=i(M),a_=n(M,"LI",{});var n6e=s(a_);Kte=n(n6e,"STRONG",{});var cJr=s(Kte);Ugo=r(cJr,"marian"),cJr.forEach(t),Jgo=r(n6e," \u2014 "),t$=n(n6e,"A",{href:!0});var fJr=s(t$);Ygo=r(fJr,"MarianModel"),fJr.forEach(t),Kgo=r(n6e," (Marian model)"),n6e.forEach(t),Zgo=i(M),n_=n(M,"LI",{});var s6e=s(n_);Zte=n(s6e,"STRONG",{});var mJr=s(Zte);eho=r(mJr,"maskformer"),mJr.forEach(t),oho=r(s6e," \u2014 "),a$=n(s6e,"A",{href:!0});var gJr=s(a$);rho=r(gJr,"MaskFormerModel"),gJr.forEach(t),tho=r(s6e," (MaskFormer model)"),s6e.forEach(t),aho=i(M),s_=n(M,"LI",{});var l6e=s(s_);eae=n(l6e,"STRONG",{});var hJr=s(eae);nho=r(hJr,"mbart"),hJr.forEach(t),sho=r(l6e," \u2014 "),n$=n(l6e,"A",{href:!0});var pJr=s(n$);lho=r(pJr,"MBartModel"),pJr.forEach(t),iho=r(l6e," (mBART model)"),l6e.forEach(t),dho=i(M),l_=n(M,"LI",{});var i6e=s(l_);oae=n(i6e,"STRONG",{});var _Jr=s(oae);cho=r(_Jr,"megatron-bert"),_Jr.forEach(t),fho=r(i6e," \u2014 "),s$=n(i6e,"A",{href:!0});var uJr=s(s$);mho=r(uJr,"MegatronBertModel"),uJr.forEach(t),gho=r(i6e," (MegatronBert model)"),i6e.forEach(t),hho=i(M),i_=n(M,"LI",{});var d6e=s(i_);rae=n(d6e,"STRONG",{});var bJr=s(rae);pho=r(bJr,"mobilebert"),bJr.forEach(t),_ho=r(d6e," \u2014 "),l$=n(d6e,"A",{href:!0});var vJr=s(l$);uho=r(vJr,"MobileBertModel"),vJr.forEach(t),bho=r(d6e," (MobileBERT model)"),d6e.forEach(t),vho=i(M),d_=n(M,"LI",{});var c6e=s(d_);tae=n(c6e,"STRONG",{});var FJr=s(tae);Fho=r(FJr,"mpnet"),FJr.forEach(t),Tho=r(c6e," \u2014 "),i$=n(c6e,"A",{href:!0});var TJr=s(i$);Mho=r(TJr,"MPNetModel"),TJr.forEach(t),Eho=r(c6e," (MPNet model)"),c6e.forEach(t),Cho=i(M),c_=n(M,"LI",{});var f6e=s(c_);aae=n(f6e,"STRONG",{});var MJr=s(aae);who=r(MJr,"mt5"),MJr.forEach(t),Aho=r(f6e," \u2014 "),d$=n(f6e,"A",{href:!0});var EJr=s(d$);yho=r(EJr,"MT5Model"),EJr.forEach(t),Lho=r(f6e," (mT5 model)"),f6e.forEach(t),xho=i(M),f_=n(M,"LI",{});var m6e=s(f_);nae=n(m6e,"STRONG",{});var CJr=s(nae);kho=r(CJr,"nystromformer"),CJr.forEach(t),Sho=r(m6e," \u2014 "),c$=n(m6e,"A",{href:!0});var wJr=s(c$);Rho=r(wJr,"NystromformerModel"),wJr.forEach(t),Bho=r(m6e," (Nystromformer model)"),m6e.forEach(t),Pho=i(M),m_=n(M,"LI",{});var g6e=s(m_);sae=n(g6e,"STRONG",{});var AJr=s(sae);$ho=r(AJr,"openai-gpt"),AJr.forEach(t),Iho=r(g6e," \u2014 "),f$=n(g6e,"A",{href:!0});var yJr=s(f$);qho=r(yJr,"OpenAIGPTModel"),yJr.forEach(t),Nho=r(g6e," (OpenAI GPT model)"),g6e.forEach(t),jho=i(M),g_=n(M,"LI",{});var h6e=s(g_);lae=n(h6e,"STRONG",{});var LJr=s(lae);Dho=r(LJr,"pegasus"),LJr.forEach(t),Gho=r(h6e," \u2014 "),m$=n(h6e,"A",{href:!0});var xJr=s(m$);Oho=r(xJr,"PegasusModel"),xJr.forEach(t),Vho=r(h6e," (Pegasus model)"),h6e.forEach(t),Xho=i(M),h_=n(M,"LI",{});var p6e=s(h_);iae=n(p6e,"STRONG",{});var kJr=s(iae);zho=r(kJr,"perceiver"),kJr.forEach(t),Qho=r(p6e," \u2014 "),g$=n(p6e,"A",{href:!0});var SJr=s(g$);Who=r(SJr,"PerceiverModel"),SJr.forEach(t),Hho=r(p6e," (Perceiver model)"),p6e.forEach(t),Uho=i(M),p_=n(M,"LI",{});var _6e=s(p_);dae=n(_6e,"STRONG",{});var RJr=s(dae);Jho=r(RJr,"plbart"),RJr.forEach(t),Yho=r(_6e," \u2014 "),h$=n(_6e,"A",{href:!0});var BJr=s(h$);Kho=r(BJr,"PLBartModel"),BJr.forEach(t),Zho=r(_6e," (PLBart model)"),_6e.forEach(t),epo=i(M),__=n(M,"LI",{});var u6e=s(__);cae=n(u6e,"STRONG",{});var PJr=s(cae);opo=r(PJr,"poolformer"),PJr.forEach(t),rpo=r(u6e," \u2014 "),p$=n(u6e,"A",{href:!0});var $Jr=s(p$);tpo=r($Jr,"PoolFormerModel"),$Jr.forEach(t),apo=r(u6e," (PoolFormer model)"),u6e.forEach(t),npo=i(M),u_=n(M,"LI",{});var b6e=s(u_);fae=n(b6e,"STRONG",{});var IJr=s(fae);spo=r(IJr,"prophetnet"),IJr.forEach(t),lpo=r(b6e," \u2014 "),_$=n(b6e,"A",{href:!0});var qJr=s(_$);ipo=r(qJr,"ProphetNetModel"),qJr.forEach(t),dpo=r(b6e," (ProphetNet model)"),b6e.forEach(t),cpo=i(M),b_=n(M,"LI",{});var v6e=s(b_);mae=n(v6e,"STRONG",{});var NJr=s(mae);fpo=r(NJr,"qdqbert"),NJr.forEach(t),mpo=r(v6e," \u2014 "),u$=n(v6e,"A",{href:!0});var jJr=s(u$);gpo=r(jJr,"QDQBertModel"),jJr.forEach(t),hpo=r(v6e," (QDQBert model)"),v6e.forEach(t),ppo=i(M),v_=n(M,"LI",{});var F6e=s(v_);gae=n(F6e,"STRONG",{});var DJr=s(gae);_po=r(DJr,"reformer"),DJr.forEach(t),upo=r(F6e," \u2014 "),b$=n(F6e,"A",{href:!0});var GJr=s(b$);bpo=r(GJr,"ReformerModel"),GJr.forEach(t),vpo=r(F6e," (Reformer model)"),F6e.forEach(t),Fpo=i(M),F_=n(M,"LI",{});var T6e=s(F_);hae=n(T6e,"STRONG",{});var OJr=s(hae);Tpo=r(OJr,"regnet"),OJr.forEach(t),Mpo=r(T6e," \u2014 "),v$=n(T6e,"A",{href:!0});var VJr=s(v$);Epo=r(VJr,"RegNetModel"),VJr.forEach(t),Cpo=r(T6e," (RegNet model)"),T6e.forEach(t),wpo=i(M),T_=n(M,"LI",{});var M6e=s(T_);pae=n(M6e,"STRONG",{});var XJr=s(pae);Apo=r(XJr,"rembert"),XJr.forEach(t),ypo=r(M6e," \u2014 "),F$=n(M6e,"A",{href:!0});var zJr=s(F$);Lpo=r(zJr,"RemBertModel"),zJr.forEach(t),xpo=r(M6e," (RemBERT model)"),M6e.forEach(t),kpo=i(M),M_=n(M,"LI",{});var E6e=s(M_);_ae=n(E6e,"STRONG",{});var QJr=s(_ae);Spo=r(QJr,"resnet"),QJr.forEach(t),Rpo=r(E6e," \u2014 "),T$=n(E6e,"A",{href:!0});var WJr=s(T$);Bpo=r(WJr,"ResNetModel"),WJr.forEach(t),Ppo=r(E6e," (ResNet model)"),E6e.forEach(t),$po=i(M),E_=n(M,"LI",{});var C6e=s(E_);uae=n(C6e,"STRONG",{});var HJr=s(uae);Ipo=r(HJr,"retribert"),HJr.forEach(t),qpo=r(C6e," \u2014 "),M$=n(C6e,"A",{href:!0});var UJr=s(M$);Npo=r(UJr,"RetriBertModel"),UJr.forEach(t),jpo=r(C6e," (RetriBERT model)"),C6e.forEach(t),Dpo=i(M),C_=n(M,"LI",{});var w6e=s(C_);bae=n(w6e,"STRONG",{});var JJr=s(bae);Gpo=r(JJr,"roberta"),JJr.forEach(t),Opo=r(w6e," \u2014 "),E$=n(w6e,"A",{href:!0});var YJr=s(E$);Vpo=r(YJr,"RobertaModel"),YJr.forEach(t),Xpo=r(w6e," (RoBERTa model)"),w6e.forEach(t),zpo=i(M),w_=n(M,"LI",{});var A6e=s(w_);vae=n(A6e,"STRONG",{});var KJr=s(vae);Qpo=r(KJr,"roformer"),KJr.forEach(t),Wpo=r(A6e," \u2014 "),C$=n(A6e,"A",{href:!0});var ZJr=s(C$);Hpo=r(ZJr,"RoFormerModel"),ZJr.forEach(t),Upo=r(A6e," (RoFormer model)"),A6e.forEach(t),Jpo=i(M),A_=n(M,"LI",{});var y6e=s(A_);Fae=n(y6e,"STRONG",{});var eYr=s(Fae);Ypo=r(eYr,"segformer"),eYr.forEach(t),Kpo=r(y6e," \u2014 "),w$=n(y6e,"A",{href:!0});var oYr=s(w$);Zpo=r(oYr,"SegformerModel"),oYr.forEach(t),e_o=r(y6e," (SegFormer model)"),y6e.forEach(t),o_o=i(M),y_=n(M,"LI",{});var L6e=s(y_);Tae=n(L6e,"STRONG",{});var rYr=s(Tae);r_o=r(rYr,"sew"),rYr.forEach(t),t_o=r(L6e," \u2014 "),A$=n(L6e,"A",{href:!0});var tYr=s(A$);a_o=r(tYr,"SEWModel"),tYr.forEach(t),n_o=r(L6e," (SEW model)"),L6e.forEach(t),s_o=i(M),L_=n(M,"LI",{});var x6e=s(L_);Mae=n(x6e,"STRONG",{});var aYr=s(Mae);l_o=r(aYr,"sew-d"),aYr.forEach(t),i_o=r(x6e," \u2014 "),y$=n(x6e,"A",{href:!0});var nYr=s(y$);d_o=r(nYr,"SEWDModel"),nYr.forEach(t),c_o=r(x6e," (SEW-D model)"),x6e.forEach(t),f_o=i(M),x_=n(M,"LI",{});var k6e=s(x_);Eae=n(k6e,"STRONG",{});var sYr=s(Eae);m_o=r(sYr,"speech_to_text"),sYr.forEach(t),g_o=r(k6e," \u2014 "),L$=n(k6e,"A",{href:!0});var lYr=s(L$);h_o=r(lYr,"Speech2TextModel"),lYr.forEach(t),p_o=r(k6e," (Speech2Text model)"),k6e.forEach(t),__o=i(M),k_=n(M,"LI",{});var S6e=s(k_);Cae=n(S6e,"STRONG",{});var iYr=s(Cae);u_o=r(iYr,"splinter"),iYr.forEach(t),b_o=r(S6e," \u2014 "),x$=n(S6e,"A",{href:!0});var dYr=s(x$);v_o=r(dYr,"SplinterModel"),dYr.forEach(t),F_o=r(S6e," (Splinter model)"),S6e.forEach(t),T_o=i(M),S_=n(M,"LI",{});var R6e=s(S_);wae=n(R6e,"STRONG",{});var cYr=s(wae);M_o=r(cYr,"squeezebert"),cYr.forEach(t),E_o=r(R6e," \u2014 "),k$=n(R6e,"A",{href:!0});var fYr=s(k$);C_o=r(fYr,"SqueezeBertModel"),fYr.forEach(t),w_o=r(R6e," (SqueezeBERT model)"),R6e.forEach(t),A_o=i(M),R_=n(M,"LI",{});var B6e=s(R_);Aae=n(B6e,"STRONG",{});var mYr=s(Aae);y_o=r(mYr,"swin"),mYr.forEach(t),L_o=r(B6e," \u2014 "),S$=n(B6e,"A",{href:!0});var gYr=s(S$);x_o=r(gYr,"SwinModel"),gYr.forEach(t),k_o=r(B6e," (Swin model)"),B6e.forEach(t),S_o=i(M),B_=n(M,"LI",{});var P6e=s(B_);yae=n(P6e,"STRONG",{});var hYr=s(yae);R_o=r(hYr,"t5"),hYr.forEach(t),B_o=r(P6e," \u2014 "),R$=n(P6e,"A",{href:!0});var pYr=s(R$);P_o=r(pYr,"T5Model"),pYr.forEach(t),$_o=r(P6e," (T5 model)"),P6e.forEach(t),I_o=i(M),P_=n(M,"LI",{});var $6e=s(P_);Lae=n($6e,"STRONG",{});var _Yr=s(Lae);q_o=r(_Yr,"tapas"),_Yr.forEach(t),N_o=r($6e," \u2014 "),B$=n($6e,"A",{href:!0});var uYr=s(B$);j_o=r(uYr,"TapasModel"),uYr.forEach(t),D_o=r($6e," (TAPAS model)"),$6e.forEach(t),G_o=i(M),$_=n(M,"LI",{});var I6e=s($_);xae=n(I6e,"STRONG",{});var bYr=s(xae);O_o=r(bYr,"transfo-xl"),bYr.forEach(t),V_o=r(I6e," \u2014 "),P$=n(I6e,"A",{href:!0});var vYr=s(P$);X_o=r(vYr,"TransfoXLModel"),vYr.forEach(t),z_o=r(I6e," (Transformer-XL model)"),I6e.forEach(t),Q_o=i(M),I_=n(M,"LI",{});var q6e=s(I_);kae=n(q6e,"STRONG",{});var FYr=s(kae);W_o=r(FYr,"unispeech"),FYr.forEach(t),H_o=r(q6e," \u2014 "),$$=n(q6e,"A",{href:!0});var TYr=s($$);U_o=r(TYr,"UniSpeechModel"),TYr.forEach(t),J_o=r(q6e," (UniSpeech model)"),q6e.forEach(t),Y_o=i(M),q_=n(M,"LI",{});var N6e=s(q_);Sae=n(N6e,"STRONG",{});var MYr=s(Sae);K_o=r(MYr,"unispeech-sat"),MYr.forEach(t),Z_o=r(N6e," \u2014 "),I$=n(N6e,"A",{href:!0});var EYr=s(I$);euo=r(EYr,"UniSpeechSatModel"),EYr.forEach(t),ouo=r(N6e," (UniSpeechSat model)"),N6e.forEach(t),ruo=i(M),N_=n(M,"LI",{});var j6e=s(N_);Rae=n(j6e,"STRONG",{});var CYr=s(Rae);tuo=r(CYr,"van"),CYr.forEach(t),auo=r(j6e," \u2014 "),q$=n(j6e,"A",{href:!0});var wYr=s(q$);nuo=r(wYr,"VanModel"),wYr.forEach(t),suo=r(j6e," (VAN model)"),j6e.forEach(t),luo=i(M),j_=n(M,"LI",{});var D6e=s(j_);Bae=n(D6e,"STRONG",{});var AYr=s(Bae);iuo=r(AYr,"vilt"),AYr.forEach(t),duo=r(D6e," \u2014 "),N$=n(D6e,"A",{href:!0});var yYr=s(N$);cuo=r(yYr,"ViltModel"),yYr.forEach(t),fuo=r(D6e," (ViLT model)"),D6e.forEach(t),muo=i(M),D_=n(M,"LI",{});var G6e=s(D_);Pae=n(G6e,"STRONG",{});var LYr=s(Pae);guo=r(LYr,"vision-text-dual-encoder"),LYr.forEach(t),huo=r(G6e," \u2014 "),j$=n(G6e,"A",{href:!0});var xYr=s(j$);puo=r(xYr,"VisionTextDualEncoderModel"),xYr.forEach(t),_uo=r(G6e," (VisionTextDualEncoder model)"),G6e.forEach(t),uuo=i(M),G_=n(M,"LI",{});var O6e=s(G_);$ae=n(O6e,"STRONG",{});var kYr=s($ae);buo=r(kYr,"visual_bert"),kYr.forEach(t),vuo=r(O6e," \u2014 "),D$=n(O6e,"A",{href:!0});var SYr=s(D$);Fuo=r(SYr,"VisualBertModel"),SYr.forEach(t),Tuo=r(O6e," (VisualBert model)"),O6e.forEach(t),Muo=i(M),O_=n(M,"LI",{});var V6e=s(O_);Iae=n(V6e,"STRONG",{});var RYr=s(Iae);Euo=r(RYr,"vit"),RYr.forEach(t),Cuo=r(V6e," \u2014 "),G$=n(V6e,"A",{href:!0});var BYr=s(G$);wuo=r(BYr,"ViTModel"),BYr.forEach(t),Auo=r(V6e," (ViT model)"),V6e.forEach(t),yuo=i(M),V_=n(M,"LI",{});var X6e=s(V_);qae=n(X6e,"STRONG",{});var PYr=s(qae);Luo=r(PYr,"vit_mae"),PYr.forEach(t),xuo=r(X6e," \u2014 "),O$=n(X6e,"A",{href:!0});var $Yr=s(O$);kuo=r($Yr,"ViTMAEModel"),$Yr.forEach(t),Suo=r(X6e," (ViTMAE model)"),X6e.forEach(t),Ruo=i(M),X_=n(M,"LI",{});var z6e=s(X_);Nae=n(z6e,"STRONG",{});var IYr=s(Nae);Buo=r(IYr,"wav2vec2"),IYr.forEach(t),Puo=r(z6e," \u2014 "),V$=n(z6e,"A",{href:!0});var qYr=s(V$);$uo=r(qYr,"Wav2Vec2Model"),qYr.forEach(t),Iuo=r(z6e," (Wav2Vec2 model)"),z6e.forEach(t),quo=i(M),z_=n(M,"LI",{});var Q6e=s(z_);jae=n(Q6e,"STRONG",{});var NYr=s(jae);Nuo=r(NYr,"wavlm"),NYr.forEach(t),juo=r(Q6e," \u2014 "),X$=n(Q6e,"A",{href:!0});var jYr=s(X$);Duo=r(jYr,"WavLMModel"),jYr.forEach(t),Guo=r(Q6e," (WavLM model)"),Q6e.forEach(t),Ouo=i(M),Q_=n(M,"LI",{});var W6e=s(Q_);Dae=n(W6e,"STRONG",{});var DYr=s(Dae);Vuo=r(DYr,"xglm"),DYr.forEach(t),Xuo=r(W6e," \u2014 "),z$=n(W6e,"A",{href:!0});var GYr=s(z$);zuo=r(GYr,"XGLMModel"),GYr.forEach(t),Quo=r(W6e," (XGLM model)"),W6e.forEach(t),Wuo=i(M),W_=n(M,"LI",{});var H6e=s(W_);Gae=n(H6e,"STRONG",{});var OYr=s(Gae);Huo=r(OYr,"xlm"),OYr.forEach(t),Uuo=r(H6e," \u2014 "),Q$=n(H6e,"A",{href:!0});var VYr=s(Q$);Juo=r(VYr,"XLMModel"),VYr.forEach(t),Yuo=r(H6e," (XLM model)"),H6e.forEach(t),Kuo=i(M),H_=n(M,"LI",{});var U6e=s(H_);Oae=n(U6e,"STRONG",{});var XYr=s(Oae);Zuo=r(XYr,"xlm-prophetnet"),XYr.forEach(t),e5o=r(U6e," \u2014 "),W$=n(U6e,"A",{href:!0});var zYr=s(W$);o5o=r(zYr,"XLMProphetNetModel"),zYr.forEach(t),r5o=r(U6e," (XLMProphetNet model)"),U6e.forEach(t),t5o=i(M),U_=n(M,"LI",{});var J6e=s(U_);Vae=n(J6e,"STRONG",{});var QYr=s(Vae);a5o=r(QYr,"xlm-roberta"),QYr.forEach(t),n5o=r(J6e," \u2014 "),H$=n(J6e,"A",{href:!0});var WYr=s(H$);s5o=r(WYr,"XLMRobertaModel"),WYr.forEach(t),l5o=r(J6e," (XLM-RoBERTa model)"),J6e.forEach(t),i5o=i(M),J_=n(M,"LI",{});var Y6e=s(J_);Xae=n(Y6e,"STRONG",{});var HYr=s(Xae);d5o=r(HYr,"xlm-roberta-xl"),HYr.forEach(t),c5o=r(Y6e," \u2014 "),U$=n(Y6e,"A",{href:!0});var UYr=s(U$);f5o=r(UYr,"XLMRobertaXLModel"),UYr.forEach(t),m5o=r(Y6e," (XLM-RoBERTa-XL model)"),Y6e.forEach(t),g5o=i(M),Y_=n(M,"LI",{});var K6e=s(Y_);zae=n(K6e,"STRONG",{});var JYr=s(zae);h5o=r(JYr,"xlnet"),JYr.forEach(t),p5o=r(K6e," \u2014 "),J$=n(K6e,"A",{href:!0});var YYr=s(J$);_5o=r(YYr,"XLNetModel"),YYr.forEach(t),u5o=r(K6e," (XLNet model)"),K6e.forEach(t),b5o=i(M),K_=n(M,"LI",{});var Z6e=s(K_);Qae=n(Z6e,"STRONG",{});var KYr=s(Qae);v5o=r(KYr,"yoso"),KYr.forEach(t),F5o=r(Z6e," \u2014 "),Y$=n(Z6e,"A",{href:!0});var ZYr=s(Y$);T5o=r(ZYr,"YosoModel"),ZYr.forEach(t),M5o=r(Z6e," (YOSO model)"),Z6e.forEach(t),M.forEach(t),E5o=i(Dt),Z_=n(Dt,"P",{});var ewe=s(Z_);C5o=r(ewe,"The model is set in evaluation mode by default using "),Wae=n(ewe,"CODE",{});var eKr=s(Wae);w5o=r(eKr,"model.eval()"),eKr.forEach(t),A5o=r(ewe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hae=n(ewe,"CODE",{});var oKr=s(Hae);y5o=r(oKr,"model.train()"),oKr.forEach(t),ewe.forEach(t),L5o=i(Dt),Uae=n(Dt,"P",{});var rKr=s(Uae);x5o=r(rKr,"Examples:"),rKr.forEach(t),k5o=i(Dt),m(S6.$$.fragment,Dt),Dt.forEach(t),ol.forEach(t),hPe=i(c),id=n(c,"H2",{class:!0});var EIe=s(id);eu=n(EIe,"A",{id:!0,class:!0,href:!0});var tKr=s(eu);Jae=n(tKr,"SPAN",{});var aKr=s(Jae);m(R6.$$.fragment,aKr),aKr.forEach(t),tKr.forEach(t),S5o=i(EIe),Yae=n(EIe,"SPAN",{});var nKr=s(Yae);R5o=r(nKr,"AutoModelForPreTraining"),nKr.forEach(t),EIe.forEach(t),pPe=i(c),Yo=n(c,"DIV",{class:!0});var tl=s(Yo);m(B6.$$.fragment,tl),B5o=i(tl),dd=n(tl,"P",{});var bJ=s(dd);P5o=r(bJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),K$=n(bJ,"A",{href:!0});var sKr=s(K$);$5o=r(sKr,"from_pretrained()"),sKr.forEach(t),I5o=r(bJ," class method or the "),Z$=n(bJ,"A",{href:!0});var lKr=s(Z$);q5o=r(lKr,"from_config()"),lKr.forEach(t),N5o=r(bJ,` class
method.`),bJ.forEach(t),j5o=i(tl),P6=n(tl,"P",{});var CIe=s(P6);D5o=r(CIe,"This class cannot be instantiated directly using "),Kae=n(CIe,"CODE",{});var iKr=s(Kae);G5o=r(iKr,"__init__()"),iKr.forEach(t),O5o=r(CIe," (throws an error)."),CIe.forEach(t),V5o=i(tl),zr=n(tl,"DIV",{class:!0});var al=s(zr);m($6.$$.fragment,al),X5o=i(al),Zae=n(al,"P",{});var dKr=s(Zae);z5o=r(dKr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),dKr.forEach(t),Q5o=i(al),cd=n(al,"P",{});var vJ=s(cd);W5o=r(vJ,`Note:
Loading a model from its configuration file does `),ene=n(vJ,"STRONG",{});var cKr=s(ene);H5o=r(cKr,"not"),cKr.forEach(t),U5o=r(vJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eI=n(vJ,"A",{href:!0});var fKr=s(eI);J5o=r(fKr,"from_pretrained()"),fKr.forEach(t),Y5o=r(vJ," to load the model weights."),vJ.forEach(t),K5o=i(al),one=n(al,"P",{});var mKr=s(one);Z5o=r(mKr,"Examples:"),mKr.forEach(t),e1o=i(al),m(I6.$$.fragment,al),al.forEach(t),o1o=i(tl),je=n(tl,"DIV",{class:!0});var Gt=s(je);m(q6.$$.fragment,Gt),r1o=i(Gt),rne=n(Gt,"P",{});var gKr=s(rne);t1o=r(gKr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),gKr.forEach(t),a1o=i(Gt),za=n(Gt,"P",{});var U3=s(za);n1o=r(U3,"The model class to instantiate is selected based on the "),tne=n(U3,"CODE",{});var hKr=s(tne);s1o=r(hKr,"model_type"),hKr.forEach(t),l1o=r(U3,` property of the config object (either
passed as an argument or loaded from `),ane=n(U3,"CODE",{});var pKr=s(ane);i1o=r(pKr,"pretrained_model_name_or_path"),pKr.forEach(t),d1o=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nne=n(U3,"CODE",{});var _Kr=s(nne);c1o=r(_Kr,"pretrained_model_name_or_path"),_Kr.forEach(t),f1o=r(U3,":"),U3.forEach(t),m1o=i(Gt),S=n(Gt,"UL",{});var B=s(S);ou=n(B,"LI",{});var owe=s(ou);sne=n(owe,"STRONG",{});var uKr=s(sne);g1o=r(uKr,"albert"),uKr.forEach(t),h1o=r(owe," \u2014 "),oI=n(owe,"A",{href:!0});var bKr=s(oI);p1o=r(bKr,"AlbertForPreTraining"),bKr.forEach(t),_1o=r(owe," (ALBERT model)"),owe.forEach(t),u1o=i(B),ru=n(B,"LI",{});var rwe=s(ru);lne=n(rwe,"STRONG",{});var vKr=s(lne);b1o=r(vKr,"bart"),vKr.forEach(t),v1o=r(rwe," \u2014 "),rI=n(rwe,"A",{href:!0});var FKr=s(rI);F1o=r(FKr,"BartForConditionalGeneration"),FKr.forEach(t),T1o=r(rwe," (BART model)"),rwe.forEach(t),M1o=i(B),tu=n(B,"LI",{});var twe=s(tu);ine=n(twe,"STRONG",{});var TKr=s(ine);E1o=r(TKr,"bert"),TKr.forEach(t),C1o=r(twe," \u2014 "),tI=n(twe,"A",{href:!0});var MKr=s(tI);w1o=r(MKr,"BertForPreTraining"),MKr.forEach(t),A1o=r(twe," (BERT model)"),twe.forEach(t),y1o=i(B),au=n(B,"LI",{});var awe=s(au);dne=n(awe,"STRONG",{});var EKr=s(dne);L1o=r(EKr,"big_bird"),EKr.forEach(t),x1o=r(awe," \u2014 "),aI=n(awe,"A",{href:!0});var CKr=s(aI);k1o=r(CKr,"BigBirdForPreTraining"),CKr.forEach(t),S1o=r(awe," (BigBird model)"),awe.forEach(t),R1o=i(B),nu=n(B,"LI",{});var nwe=s(nu);cne=n(nwe,"STRONG",{});var wKr=s(cne);B1o=r(wKr,"camembert"),wKr.forEach(t),P1o=r(nwe," \u2014 "),nI=n(nwe,"A",{href:!0});var AKr=s(nI);$1o=r(AKr,"CamembertForMaskedLM"),AKr.forEach(t),I1o=r(nwe," (CamemBERT model)"),nwe.forEach(t),q1o=i(B),su=n(B,"LI",{});var swe=s(su);fne=n(swe,"STRONG",{});var yKr=s(fne);N1o=r(yKr,"ctrl"),yKr.forEach(t),j1o=r(swe," \u2014 "),sI=n(swe,"A",{href:!0});var LKr=s(sI);D1o=r(LKr,"CTRLLMHeadModel"),LKr.forEach(t),G1o=r(swe," (CTRL model)"),swe.forEach(t),O1o=i(B),lu=n(B,"LI",{});var lwe=s(lu);mne=n(lwe,"STRONG",{});var xKr=s(mne);V1o=r(xKr,"data2vec-text"),xKr.forEach(t),X1o=r(lwe," \u2014 "),lI=n(lwe,"A",{href:!0});var kKr=s(lI);z1o=r(kKr,"Data2VecTextForMaskedLM"),kKr.forEach(t),Q1o=r(lwe," (Data2VecText model)"),lwe.forEach(t),W1o=i(B),iu=n(B,"LI",{});var iwe=s(iu);gne=n(iwe,"STRONG",{});var SKr=s(gne);H1o=r(SKr,"deberta"),SKr.forEach(t),U1o=r(iwe," \u2014 "),iI=n(iwe,"A",{href:!0});var RKr=s(iI);J1o=r(RKr,"DebertaForMaskedLM"),RKr.forEach(t),Y1o=r(iwe," (DeBERTa model)"),iwe.forEach(t),K1o=i(B),du=n(B,"LI",{});var dwe=s(du);hne=n(dwe,"STRONG",{});var BKr=s(hne);Z1o=r(BKr,"deberta-v2"),BKr.forEach(t),e4o=r(dwe," \u2014 "),dI=n(dwe,"A",{href:!0});var PKr=s(dI);o4o=r(PKr,"DebertaV2ForMaskedLM"),PKr.forEach(t),r4o=r(dwe," (DeBERTa-v2 model)"),dwe.forEach(t),t4o=i(B),cu=n(B,"LI",{});var cwe=s(cu);pne=n(cwe,"STRONG",{});var $Kr=s(pne);a4o=r($Kr,"distilbert"),$Kr.forEach(t),n4o=r(cwe," \u2014 "),cI=n(cwe,"A",{href:!0});var IKr=s(cI);s4o=r(IKr,"DistilBertForMaskedLM"),IKr.forEach(t),l4o=r(cwe," (DistilBERT model)"),cwe.forEach(t),i4o=i(B),fu=n(B,"LI",{});var fwe=s(fu);_ne=n(fwe,"STRONG",{});var qKr=s(_ne);d4o=r(qKr,"electra"),qKr.forEach(t),c4o=r(fwe," \u2014 "),fI=n(fwe,"A",{href:!0});var NKr=s(fI);f4o=r(NKr,"ElectraForPreTraining"),NKr.forEach(t),m4o=r(fwe," (ELECTRA model)"),fwe.forEach(t),g4o=i(B),mu=n(B,"LI",{});var mwe=s(mu);une=n(mwe,"STRONG",{});var jKr=s(une);h4o=r(jKr,"flaubert"),jKr.forEach(t),p4o=r(mwe," \u2014 "),mI=n(mwe,"A",{href:!0});var DKr=s(mI);_4o=r(DKr,"FlaubertWithLMHeadModel"),DKr.forEach(t),u4o=r(mwe," (FlauBERT model)"),mwe.forEach(t),b4o=i(B),gu=n(B,"LI",{});var gwe=s(gu);bne=n(gwe,"STRONG",{});var GKr=s(bne);v4o=r(GKr,"fnet"),GKr.forEach(t),F4o=r(gwe," \u2014 "),gI=n(gwe,"A",{href:!0});var OKr=s(gI);T4o=r(OKr,"FNetForPreTraining"),OKr.forEach(t),M4o=r(gwe," (FNet model)"),gwe.forEach(t),E4o=i(B),hu=n(B,"LI",{});var hwe=s(hu);vne=n(hwe,"STRONG",{});var VKr=s(vne);C4o=r(VKr,"fsmt"),VKr.forEach(t),w4o=r(hwe," \u2014 "),hI=n(hwe,"A",{href:!0});var XKr=s(hI);A4o=r(XKr,"FSMTForConditionalGeneration"),XKr.forEach(t),y4o=r(hwe," (FairSeq Machine-Translation model)"),hwe.forEach(t),L4o=i(B),pu=n(B,"LI",{});var pwe=s(pu);Fne=n(pwe,"STRONG",{});var zKr=s(Fne);x4o=r(zKr,"funnel"),zKr.forEach(t),k4o=r(pwe," \u2014 "),pI=n(pwe,"A",{href:!0});var QKr=s(pI);S4o=r(QKr,"FunnelForPreTraining"),QKr.forEach(t),R4o=r(pwe," (Funnel Transformer model)"),pwe.forEach(t),B4o=i(B),_u=n(B,"LI",{});var _we=s(_u);Tne=n(_we,"STRONG",{});var WKr=s(Tne);P4o=r(WKr,"gpt2"),WKr.forEach(t),$4o=r(_we," \u2014 "),_I=n(_we,"A",{href:!0});var HKr=s(_I);I4o=r(HKr,"GPT2LMHeadModel"),HKr.forEach(t),q4o=r(_we," (OpenAI GPT-2 model)"),_we.forEach(t),N4o=i(B),uu=n(B,"LI",{});var uwe=s(uu);Mne=n(uwe,"STRONG",{});var UKr=s(Mne);j4o=r(UKr,"ibert"),UKr.forEach(t),D4o=r(uwe," \u2014 "),uI=n(uwe,"A",{href:!0});var JKr=s(uI);G4o=r(JKr,"IBertForMaskedLM"),JKr.forEach(t),O4o=r(uwe," (I-BERT model)"),uwe.forEach(t),V4o=i(B),bu=n(B,"LI",{});var bwe=s(bu);Ene=n(bwe,"STRONG",{});var YKr=s(Ene);X4o=r(YKr,"layoutlm"),YKr.forEach(t),z4o=r(bwe," \u2014 "),bI=n(bwe,"A",{href:!0});var KKr=s(bI);Q4o=r(KKr,"LayoutLMForMaskedLM"),KKr.forEach(t),W4o=r(bwe," (LayoutLM model)"),bwe.forEach(t),H4o=i(B),vu=n(B,"LI",{});var vwe=s(vu);Cne=n(vwe,"STRONG",{});var ZKr=s(Cne);U4o=r(ZKr,"longformer"),ZKr.forEach(t),J4o=r(vwe," \u2014 "),vI=n(vwe,"A",{href:!0});var eZr=s(vI);Y4o=r(eZr,"LongformerForMaskedLM"),eZr.forEach(t),K4o=r(vwe," (Longformer model)"),vwe.forEach(t),Z4o=i(B),Fu=n(B,"LI",{});var Fwe=s(Fu);wne=n(Fwe,"STRONG",{});var oZr=s(wne);ebo=r(oZr,"lxmert"),oZr.forEach(t),obo=r(Fwe," \u2014 "),FI=n(Fwe,"A",{href:!0});var rZr=s(FI);rbo=r(rZr,"LxmertForPreTraining"),rZr.forEach(t),tbo=r(Fwe," (LXMERT model)"),Fwe.forEach(t),abo=i(B),Tu=n(B,"LI",{});var Twe=s(Tu);Ane=n(Twe,"STRONG",{});var tZr=s(Ane);nbo=r(tZr,"megatron-bert"),tZr.forEach(t),sbo=r(Twe," \u2014 "),TI=n(Twe,"A",{href:!0});var aZr=s(TI);lbo=r(aZr,"MegatronBertForPreTraining"),aZr.forEach(t),ibo=r(Twe," (MegatronBert model)"),Twe.forEach(t),dbo=i(B),Mu=n(B,"LI",{});var Mwe=s(Mu);yne=n(Mwe,"STRONG",{});var nZr=s(yne);cbo=r(nZr,"mobilebert"),nZr.forEach(t),fbo=r(Mwe," \u2014 "),MI=n(Mwe,"A",{href:!0});var sZr=s(MI);mbo=r(sZr,"MobileBertForPreTraining"),sZr.forEach(t),gbo=r(Mwe," (MobileBERT model)"),Mwe.forEach(t),hbo=i(B),Eu=n(B,"LI",{});var Ewe=s(Eu);Lne=n(Ewe,"STRONG",{});var lZr=s(Lne);pbo=r(lZr,"mpnet"),lZr.forEach(t),_bo=r(Ewe," \u2014 "),EI=n(Ewe,"A",{href:!0});var iZr=s(EI);ubo=r(iZr,"MPNetForMaskedLM"),iZr.forEach(t),bbo=r(Ewe," (MPNet model)"),Ewe.forEach(t),vbo=i(B),Cu=n(B,"LI",{});var Cwe=s(Cu);xne=n(Cwe,"STRONG",{});var dZr=s(xne);Fbo=r(dZr,"openai-gpt"),dZr.forEach(t),Tbo=r(Cwe," \u2014 "),CI=n(Cwe,"A",{href:!0});var cZr=s(CI);Mbo=r(cZr,"OpenAIGPTLMHeadModel"),cZr.forEach(t),Ebo=r(Cwe," (OpenAI GPT model)"),Cwe.forEach(t),Cbo=i(B),wu=n(B,"LI",{});var wwe=s(wu);kne=n(wwe,"STRONG",{});var fZr=s(kne);wbo=r(fZr,"retribert"),fZr.forEach(t),Abo=r(wwe," \u2014 "),wI=n(wwe,"A",{href:!0});var mZr=s(wI);ybo=r(mZr,"RetriBertModel"),mZr.forEach(t),Lbo=r(wwe," (RetriBERT model)"),wwe.forEach(t),xbo=i(B),Au=n(B,"LI",{});var Awe=s(Au);Sne=n(Awe,"STRONG",{});var gZr=s(Sne);kbo=r(gZr,"roberta"),gZr.forEach(t),Sbo=r(Awe," \u2014 "),AI=n(Awe,"A",{href:!0});var hZr=s(AI);Rbo=r(hZr,"RobertaForMaskedLM"),hZr.forEach(t),Bbo=r(Awe," (RoBERTa model)"),Awe.forEach(t),Pbo=i(B),yu=n(B,"LI",{});var ywe=s(yu);Rne=n(ywe,"STRONG",{});var pZr=s(Rne);$bo=r(pZr,"squeezebert"),pZr.forEach(t),Ibo=r(ywe," \u2014 "),yI=n(ywe,"A",{href:!0});var _Zr=s(yI);qbo=r(_Zr,"SqueezeBertForMaskedLM"),_Zr.forEach(t),Nbo=r(ywe," (SqueezeBERT model)"),ywe.forEach(t),jbo=i(B),Lu=n(B,"LI",{});var Lwe=s(Lu);Bne=n(Lwe,"STRONG",{});var uZr=s(Bne);Dbo=r(uZr,"t5"),uZr.forEach(t),Gbo=r(Lwe," \u2014 "),LI=n(Lwe,"A",{href:!0});var bZr=s(LI);Obo=r(bZr,"T5ForConditionalGeneration"),bZr.forEach(t),Vbo=r(Lwe," (T5 model)"),Lwe.forEach(t),Xbo=i(B),xu=n(B,"LI",{});var xwe=s(xu);Pne=n(xwe,"STRONG",{});var vZr=s(Pne);zbo=r(vZr,"tapas"),vZr.forEach(t),Qbo=r(xwe," \u2014 "),xI=n(xwe,"A",{href:!0});var FZr=s(xI);Wbo=r(FZr,"TapasForMaskedLM"),FZr.forEach(t),Hbo=r(xwe," (TAPAS model)"),xwe.forEach(t),Ubo=i(B),ku=n(B,"LI",{});var kwe=s(ku);$ne=n(kwe,"STRONG",{});var TZr=s($ne);Jbo=r(TZr,"transfo-xl"),TZr.forEach(t),Ybo=r(kwe," \u2014 "),kI=n(kwe,"A",{href:!0});var MZr=s(kI);Kbo=r(MZr,"TransfoXLLMHeadModel"),MZr.forEach(t),Zbo=r(kwe," (Transformer-XL model)"),kwe.forEach(t),e2o=i(B),Su=n(B,"LI",{});var Swe=s(Su);Ine=n(Swe,"STRONG",{});var EZr=s(Ine);o2o=r(EZr,"unispeech"),EZr.forEach(t),r2o=r(Swe," \u2014 "),SI=n(Swe,"A",{href:!0});var CZr=s(SI);t2o=r(CZr,"UniSpeechForPreTraining"),CZr.forEach(t),a2o=r(Swe," (UniSpeech model)"),Swe.forEach(t),n2o=i(B),Ru=n(B,"LI",{});var Rwe=s(Ru);qne=n(Rwe,"STRONG",{});var wZr=s(qne);s2o=r(wZr,"unispeech-sat"),wZr.forEach(t),l2o=r(Rwe," \u2014 "),RI=n(Rwe,"A",{href:!0});var AZr=s(RI);i2o=r(AZr,"UniSpeechSatForPreTraining"),AZr.forEach(t),d2o=r(Rwe," (UniSpeechSat model)"),Rwe.forEach(t),c2o=i(B),Bu=n(B,"LI",{});var Bwe=s(Bu);Nne=n(Bwe,"STRONG",{});var yZr=s(Nne);f2o=r(yZr,"visual_bert"),yZr.forEach(t),m2o=r(Bwe," \u2014 "),BI=n(Bwe,"A",{href:!0});var LZr=s(BI);g2o=r(LZr,"VisualBertForPreTraining"),LZr.forEach(t),h2o=r(Bwe," (VisualBert model)"),Bwe.forEach(t),p2o=i(B),Pu=n(B,"LI",{});var Pwe=s(Pu);jne=n(Pwe,"STRONG",{});var xZr=s(jne);_2o=r(xZr,"vit_mae"),xZr.forEach(t),u2o=r(Pwe," \u2014 "),PI=n(Pwe,"A",{href:!0});var kZr=s(PI);b2o=r(kZr,"ViTMAEForPreTraining"),kZr.forEach(t),v2o=r(Pwe," (ViTMAE model)"),Pwe.forEach(t),F2o=i(B),$u=n(B,"LI",{});var $we=s($u);Dne=n($we,"STRONG",{});var SZr=s(Dne);T2o=r(SZr,"wav2vec2"),SZr.forEach(t),M2o=r($we," \u2014 "),$I=n($we,"A",{href:!0});var RZr=s($I);E2o=r(RZr,"Wav2Vec2ForPreTraining"),RZr.forEach(t),C2o=r($we," (Wav2Vec2 model)"),$we.forEach(t),w2o=i(B),Iu=n(B,"LI",{});var Iwe=s(Iu);Gne=n(Iwe,"STRONG",{});var BZr=s(Gne);A2o=r(BZr,"xlm"),BZr.forEach(t),y2o=r(Iwe," \u2014 "),II=n(Iwe,"A",{href:!0});var PZr=s(II);L2o=r(PZr,"XLMWithLMHeadModel"),PZr.forEach(t),x2o=r(Iwe," (XLM model)"),Iwe.forEach(t),k2o=i(B),qu=n(B,"LI",{});var qwe=s(qu);One=n(qwe,"STRONG",{});var $Zr=s(One);S2o=r($Zr,"xlm-roberta"),$Zr.forEach(t),R2o=r(qwe," \u2014 "),qI=n(qwe,"A",{href:!0});var IZr=s(qI);B2o=r(IZr,"XLMRobertaForMaskedLM"),IZr.forEach(t),P2o=r(qwe," (XLM-RoBERTa model)"),qwe.forEach(t),$2o=i(B),Nu=n(B,"LI",{});var Nwe=s(Nu);Vne=n(Nwe,"STRONG",{});var qZr=s(Vne);I2o=r(qZr,"xlm-roberta-xl"),qZr.forEach(t),q2o=r(Nwe," \u2014 "),NI=n(Nwe,"A",{href:!0});var NZr=s(NI);N2o=r(NZr,"XLMRobertaXLForMaskedLM"),NZr.forEach(t),j2o=r(Nwe," (XLM-RoBERTa-XL model)"),Nwe.forEach(t),D2o=i(B),ju=n(B,"LI",{});var jwe=s(ju);Xne=n(jwe,"STRONG",{});var jZr=s(Xne);G2o=r(jZr,"xlnet"),jZr.forEach(t),O2o=r(jwe," \u2014 "),jI=n(jwe,"A",{href:!0});var DZr=s(jI);V2o=r(DZr,"XLNetLMHeadModel"),DZr.forEach(t),X2o=r(jwe," (XLNet model)"),jwe.forEach(t),B.forEach(t),z2o=i(Gt),Du=n(Gt,"P",{});var Dwe=s(Du);Q2o=r(Dwe,"The model is set in evaluation mode by default using "),zne=n(Dwe,"CODE",{});var GZr=s(zne);W2o=r(GZr,"model.eval()"),GZr.forEach(t),H2o=r(Dwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qne=n(Dwe,"CODE",{});var OZr=s(Qne);U2o=r(OZr,"model.train()"),OZr.forEach(t),Dwe.forEach(t),J2o=i(Gt),Wne=n(Gt,"P",{});var VZr=s(Wne);Y2o=r(VZr,"Examples:"),VZr.forEach(t),K2o=i(Gt),m(N6.$$.fragment,Gt),Gt.forEach(t),tl.forEach(t),_Pe=i(c),fd=n(c,"H2",{class:!0});var wIe=s(fd);Gu=n(wIe,"A",{id:!0,class:!0,href:!0});var XZr=s(Gu);Hne=n(XZr,"SPAN",{});var zZr=s(Hne);m(j6.$$.fragment,zZr),zZr.forEach(t),XZr.forEach(t),Z2o=i(wIe),Une=n(wIe,"SPAN",{});var QZr=s(Une);evo=r(QZr,"AutoModelForCausalLM"),QZr.forEach(t),wIe.forEach(t),uPe=i(c),Ko=n(c,"DIV",{class:!0});var nl=s(Ko);m(D6.$$.fragment,nl),ovo=i(nl),md=n(nl,"P",{});var FJ=s(md);rvo=r(FJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),DI=n(FJ,"A",{href:!0});var WZr=s(DI);tvo=r(WZr,"from_pretrained()"),WZr.forEach(t),avo=r(FJ," class method or the "),GI=n(FJ,"A",{href:!0});var HZr=s(GI);nvo=r(HZr,"from_config()"),HZr.forEach(t),svo=r(FJ,` class
method.`),FJ.forEach(t),lvo=i(nl),G6=n(nl,"P",{});var AIe=s(G6);ivo=r(AIe,"This class cannot be instantiated directly using "),Jne=n(AIe,"CODE",{});var UZr=s(Jne);dvo=r(UZr,"__init__()"),UZr.forEach(t),cvo=r(AIe," (throws an error)."),AIe.forEach(t),fvo=i(nl),Qr=n(nl,"DIV",{class:!0});var sl=s(Qr);m(O6.$$.fragment,sl),mvo=i(sl),Yne=n(sl,"P",{});var JZr=s(Yne);gvo=r(JZr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),JZr.forEach(t),hvo=i(sl),gd=n(sl,"P",{});var TJ=s(gd);pvo=r(TJ,`Note:
Loading a model from its configuration file does `),Kne=n(TJ,"STRONG",{});var YZr=s(Kne);_vo=r(YZr,"not"),YZr.forEach(t),uvo=r(TJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OI=n(TJ,"A",{href:!0});var KZr=s(OI);bvo=r(KZr,"from_pretrained()"),KZr.forEach(t),vvo=r(TJ," to load the model weights."),TJ.forEach(t),Fvo=i(sl),Zne=n(sl,"P",{});var ZZr=s(Zne);Tvo=r(ZZr,"Examples:"),ZZr.forEach(t),Mvo=i(sl),m(V6.$$.fragment,sl),sl.forEach(t),Evo=i(nl),De=n(nl,"DIV",{class:!0});var Ot=s(De);m(X6.$$.fragment,Ot),Cvo=i(Ot),ese=n(Ot,"P",{});var eet=s(ese);wvo=r(eet,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),eet.forEach(t),Avo=i(Ot),Qa=n(Ot,"P",{});var J3=s(Qa);yvo=r(J3,"The model class to instantiate is selected based on the "),ose=n(J3,"CODE",{});var oet=s(ose);Lvo=r(oet,"model_type"),oet.forEach(t),xvo=r(J3,` property of the config object (either
passed as an argument or loaded from `),rse=n(J3,"CODE",{});var ret=s(rse);kvo=r(ret,"pretrained_model_name_or_path"),ret.forEach(t),Svo=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tse=n(J3,"CODE",{});var tet=s(tse);Rvo=r(tet,"pretrained_model_name_or_path"),tet.forEach(t),Bvo=r(J3,":"),J3.forEach(t),Pvo=i(Ot),$=n(Ot,"UL",{});var q=s($);Ou=n(q,"LI",{});var Gwe=s(Ou);ase=n(Gwe,"STRONG",{});var aet=s(ase);$vo=r(aet,"bart"),aet.forEach(t),Ivo=r(Gwe," \u2014 "),VI=n(Gwe,"A",{href:!0});var net=s(VI);qvo=r(net,"BartForCausalLM"),net.forEach(t),Nvo=r(Gwe," (BART model)"),Gwe.forEach(t),jvo=i(q),Vu=n(q,"LI",{});var Owe=s(Vu);nse=n(Owe,"STRONG",{});var set=s(nse);Dvo=r(set,"bert"),set.forEach(t),Gvo=r(Owe," \u2014 "),XI=n(Owe,"A",{href:!0});var iet=s(XI);Ovo=r(iet,"BertLMHeadModel"),iet.forEach(t),Vvo=r(Owe," (BERT model)"),Owe.forEach(t),Xvo=i(q),Xu=n(q,"LI",{});var Vwe=s(Xu);sse=n(Vwe,"STRONG",{});var det=s(sse);zvo=r(det,"bert-generation"),det.forEach(t),Qvo=r(Vwe," \u2014 "),zI=n(Vwe,"A",{href:!0});var cet=s(zI);Wvo=r(cet,"BertGenerationDecoder"),cet.forEach(t),Hvo=r(Vwe," (Bert Generation model)"),Vwe.forEach(t),Uvo=i(q),zu=n(q,"LI",{});var Xwe=s(zu);lse=n(Xwe,"STRONG",{});var fet=s(lse);Jvo=r(fet,"big_bird"),fet.forEach(t),Yvo=r(Xwe," \u2014 "),QI=n(Xwe,"A",{href:!0});var met=s(QI);Kvo=r(met,"BigBirdForCausalLM"),met.forEach(t),Zvo=r(Xwe," (BigBird model)"),Xwe.forEach(t),eFo=i(q),Qu=n(q,"LI",{});var zwe=s(Qu);ise=n(zwe,"STRONG",{});var get=s(ise);oFo=r(get,"bigbird_pegasus"),get.forEach(t),rFo=r(zwe," \u2014 "),WI=n(zwe,"A",{href:!0});var het=s(WI);tFo=r(het,"BigBirdPegasusForCausalLM"),het.forEach(t),aFo=r(zwe," (BigBirdPegasus model)"),zwe.forEach(t),nFo=i(q),Wu=n(q,"LI",{});var Qwe=s(Wu);dse=n(Qwe,"STRONG",{});var pet=s(dse);sFo=r(pet,"blenderbot"),pet.forEach(t),lFo=r(Qwe," \u2014 "),HI=n(Qwe,"A",{href:!0});var _et=s(HI);iFo=r(_et,"BlenderbotForCausalLM"),_et.forEach(t),dFo=r(Qwe," (Blenderbot model)"),Qwe.forEach(t),cFo=i(q),Hu=n(q,"LI",{});var Wwe=s(Hu);cse=n(Wwe,"STRONG",{});var uet=s(cse);fFo=r(uet,"blenderbot-small"),uet.forEach(t),mFo=r(Wwe," \u2014 "),UI=n(Wwe,"A",{href:!0});var bet=s(UI);gFo=r(bet,"BlenderbotSmallForCausalLM"),bet.forEach(t),hFo=r(Wwe," (BlenderbotSmall model)"),Wwe.forEach(t),pFo=i(q),Uu=n(q,"LI",{});var Hwe=s(Uu);fse=n(Hwe,"STRONG",{});var vet=s(fse);_Fo=r(vet,"camembert"),vet.forEach(t),uFo=r(Hwe," \u2014 "),JI=n(Hwe,"A",{href:!0});var Fet=s(JI);bFo=r(Fet,"CamembertForCausalLM"),Fet.forEach(t),vFo=r(Hwe," (CamemBERT model)"),Hwe.forEach(t),FFo=i(q),Ju=n(q,"LI",{});var Uwe=s(Ju);mse=n(Uwe,"STRONG",{});var Tet=s(mse);TFo=r(Tet,"ctrl"),Tet.forEach(t),MFo=r(Uwe," \u2014 "),YI=n(Uwe,"A",{href:!0});var Met=s(YI);EFo=r(Met,"CTRLLMHeadModel"),Met.forEach(t),CFo=r(Uwe," (CTRL model)"),Uwe.forEach(t),wFo=i(q),Yu=n(q,"LI",{});var Jwe=s(Yu);gse=n(Jwe,"STRONG",{});var Eet=s(gse);AFo=r(Eet,"data2vec-text"),Eet.forEach(t),yFo=r(Jwe," \u2014 "),KI=n(Jwe,"A",{href:!0});var Cet=s(KI);LFo=r(Cet,"Data2VecTextForCausalLM"),Cet.forEach(t),xFo=r(Jwe," (Data2VecText model)"),Jwe.forEach(t),kFo=i(q),Ku=n(q,"LI",{});var Ywe=s(Ku);hse=n(Ywe,"STRONG",{});var wet=s(hse);SFo=r(wet,"electra"),wet.forEach(t),RFo=r(Ywe," \u2014 "),ZI=n(Ywe,"A",{href:!0});var Aet=s(ZI);BFo=r(Aet,"ElectraForCausalLM"),Aet.forEach(t),PFo=r(Ywe," (ELECTRA model)"),Ywe.forEach(t),$Fo=i(q),Zu=n(q,"LI",{});var Kwe=s(Zu);pse=n(Kwe,"STRONG",{});var yet=s(pse);IFo=r(yet,"gpt2"),yet.forEach(t),qFo=r(Kwe," \u2014 "),eq=n(Kwe,"A",{href:!0});var Let=s(eq);NFo=r(Let,"GPT2LMHeadModel"),Let.forEach(t),jFo=r(Kwe," (OpenAI GPT-2 model)"),Kwe.forEach(t),DFo=i(q),e5=n(q,"LI",{});var Zwe=s(e5);_se=n(Zwe,"STRONG",{});var xet=s(_se);GFo=r(xet,"gpt_neo"),xet.forEach(t),OFo=r(Zwe," \u2014 "),oq=n(Zwe,"A",{href:!0});var ket=s(oq);VFo=r(ket,"GPTNeoForCausalLM"),ket.forEach(t),XFo=r(Zwe," (GPT Neo model)"),Zwe.forEach(t),zFo=i(q),o5=n(q,"LI",{});var eAe=s(o5);use=n(eAe,"STRONG",{});var Set=s(use);QFo=r(Set,"gptj"),Set.forEach(t),WFo=r(eAe," \u2014 "),rq=n(eAe,"A",{href:!0});var Ret=s(rq);HFo=r(Ret,"GPTJForCausalLM"),Ret.forEach(t),UFo=r(eAe," (GPT-J model)"),eAe.forEach(t),JFo=i(q),r5=n(q,"LI",{});var oAe=s(r5);bse=n(oAe,"STRONG",{});var Bet=s(bse);YFo=r(Bet,"marian"),Bet.forEach(t),KFo=r(oAe," \u2014 "),tq=n(oAe,"A",{href:!0});var Pet=s(tq);ZFo=r(Pet,"MarianForCausalLM"),Pet.forEach(t),eTo=r(oAe," (Marian model)"),oAe.forEach(t),oTo=i(q),t5=n(q,"LI",{});var rAe=s(t5);vse=n(rAe,"STRONG",{});var $et=s(vse);rTo=r($et,"mbart"),$et.forEach(t),tTo=r(rAe," \u2014 "),aq=n(rAe,"A",{href:!0});var Iet=s(aq);aTo=r(Iet,"MBartForCausalLM"),Iet.forEach(t),nTo=r(rAe," (mBART model)"),rAe.forEach(t),sTo=i(q),a5=n(q,"LI",{});var tAe=s(a5);Fse=n(tAe,"STRONG",{});var qet=s(Fse);lTo=r(qet,"megatron-bert"),qet.forEach(t),iTo=r(tAe," \u2014 "),nq=n(tAe,"A",{href:!0});var Net=s(nq);dTo=r(Net,"MegatronBertForCausalLM"),Net.forEach(t),cTo=r(tAe," (MegatronBert model)"),tAe.forEach(t),fTo=i(q),n5=n(q,"LI",{});var aAe=s(n5);Tse=n(aAe,"STRONG",{});var jet=s(Tse);mTo=r(jet,"openai-gpt"),jet.forEach(t),gTo=r(aAe," \u2014 "),sq=n(aAe,"A",{href:!0});var Det=s(sq);hTo=r(Det,"OpenAIGPTLMHeadModel"),Det.forEach(t),pTo=r(aAe," (OpenAI GPT model)"),aAe.forEach(t),_To=i(q),s5=n(q,"LI",{});var nAe=s(s5);Mse=n(nAe,"STRONG",{});var Get=s(Mse);uTo=r(Get,"pegasus"),Get.forEach(t),bTo=r(nAe," \u2014 "),lq=n(nAe,"A",{href:!0});var Oet=s(lq);vTo=r(Oet,"PegasusForCausalLM"),Oet.forEach(t),FTo=r(nAe," (Pegasus model)"),nAe.forEach(t),TTo=i(q),l5=n(q,"LI",{});var sAe=s(l5);Ese=n(sAe,"STRONG",{});var Vet=s(Ese);MTo=r(Vet,"plbart"),Vet.forEach(t),ETo=r(sAe," \u2014 "),iq=n(sAe,"A",{href:!0});var Xet=s(iq);CTo=r(Xet,"PLBartForCausalLM"),Xet.forEach(t),wTo=r(sAe," (PLBart model)"),sAe.forEach(t),ATo=i(q),i5=n(q,"LI",{});var lAe=s(i5);Cse=n(lAe,"STRONG",{});var zet=s(Cse);yTo=r(zet,"prophetnet"),zet.forEach(t),LTo=r(lAe," \u2014 "),dq=n(lAe,"A",{href:!0});var Qet=s(dq);xTo=r(Qet,"ProphetNetForCausalLM"),Qet.forEach(t),kTo=r(lAe," (ProphetNet model)"),lAe.forEach(t),STo=i(q),d5=n(q,"LI",{});var iAe=s(d5);wse=n(iAe,"STRONG",{});var Wet=s(wse);RTo=r(Wet,"qdqbert"),Wet.forEach(t),BTo=r(iAe," \u2014 "),cq=n(iAe,"A",{href:!0});var Het=s(cq);PTo=r(Het,"QDQBertLMHeadModel"),Het.forEach(t),$To=r(iAe," (QDQBert model)"),iAe.forEach(t),ITo=i(q),c5=n(q,"LI",{});var dAe=s(c5);Ase=n(dAe,"STRONG",{});var Uet=s(Ase);qTo=r(Uet,"reformer"),Uet.forEach(t),NTo=r(dAe," \u2014 "),fq=n(dAe,"A",{href:!0});var Jet=s(fq);jTo=r(Jet,"ReformerModelWithLMHead"),Jet.forEach(t),DTo=r(dAe," (Reformer model)"),dAe.forEach(t),GTo=i(q),f5=n(q,"LI",{});var cAe=s(f5);yse=n(cAe,"STRONG",{});var Yet=s(yse);OTo=r(Yet,"rembert"),Yet.forEach(t),VTo=r(cAe," \u2014 "),mq=n(cAe,"A",{href:!0});var Ket=s(mq);XTo=r(Ket,"RemBertForCausalLM"),Ket.forEach(t),zTo=r(cAe," (RemBERT model)"),cAe.forEach(t),QTo=i(q),m5=n(q,"LI",{});var fAe=s(m5);Lse=n(fAe,"STRONG",{});var Zet=s(Lse);WTo=r(Zet,"roberta"),Zet.forEach(t),HTo=r(fAe," \u2014 "),gq=n(fAe,"A",{href:!0});var eot=s(gq);UTo=r(eot,"RobertaForCausalLM"),eot.forEach(t),JTo=r(fAe," (RoBERTa model)"),fAe.forEach(t),YTo=i(q),g5=n(q,"LI",{});var mAe=s(g5);xse=n(mAe,"STRONG",{});var oot=s(xse);KTo=r(oot,"roformer"),oot.forEach(t),ZTo=r(mAe," \u2014 "),hq=n(mAe,"A",{href:!0});var rot=s(hq);e7o=r(rot,"RoFormerForCausalLM"),rot.forEach(t),o7o=r(mAe," (RoFormer model)"),mAe.forEach(t),r7o=i(q),h5=n(q,"LI",{});var gAe=s(h5);kse=n(gAe,"STRONG",{});var tot=s(kse);t7o=r(tot,"speech_to_text_2"),tot.forEach(t),a7o=r(gAe," \u2014 "),pq=n(gAe,"A",{href:!0});var aot=s(pq);n7o=r(aot,"Speech2Text2ForCausalLM"),aot.forEach(t),s7o=r(gAe," (Speech2Text2 model)"),gAe.forEach(t),l7o=i(q),p5=n(q,"LI",{});var hAe=s(p5);Sse=n(hAe,"STRONG",{});var not=s(Sse);i7o=r(not,"transfo-xl"),not.forEach(t),d7o=r(hAe," \u2014 "),_q=n(hAe,"A",{href:!0});var sot=s(_q);c7o=r(sot,"TransfoXLLMHeadModel"),sot.forEach(t),f7o=r(hAe," (Transformer-XL model)"),hAe.forEach(t),m7o=i(q),_5=n(q,"LI",{});var pAe=s(_5);Rse=n(pAe,"STRONG",{});var lot=s(Rse);g7o=r(lot,"trocr"),lot.forEach(t),h7o=r(pAe," \u2014 "),uq=n(pAe,"A",{href:!0});var iot=s(uq);p7o=r(iot,"TrOCRForCausalLM"),iot.forEach(t),_7o=r(pAe," (TrOCR model)"),pAe.forEach(t),u7o=i(q),u5=n(q,"LI",{});var _Ae=s(u5);Bse=n(_Ae,"STRONG",{});var dot=s(Bse);b7o=r(dot,"xglm"),dot.forEach(t),v7o=r(_Ae," \u2014 "),bq=n(_Ae,"A",{href:!0});var cot=s(bq);F7o=r(cot,"XGLMForCausalLM"),cot.forEach(t),T7o=r(_Ae," (XGLM model)"),_Ae.forEach(t),M7o=i(q),b5=n(q,"LI",{});var uAe=s(b5);Pse=n(uAe,"STRONG",{});var fot=s(Pse);E7o=r(fot,"xlm"),fot.forEach(t),C7o=r(uAe," \u2014 "),vq=n(uAe,"A",{href:!0});var mot=s(vq);w7o=r(mot,"XLMWithLMHeadModel"),mot.forEach(t),A7o=r(uAe," (XLM model)"),uAe.forEach(t),y7o=i(q),v5=n(q,"LI",{});var bAe=s(v5);$se=n(bAe,"STRONG",{});var got=s($se);L7o=r(got,"xlm-prophetnet"),got.forEach(t),x7o=r(bAe," \u2014 "),Fq=n(bAe,"A",{href:!0});var hot=s(Fq);k7o=r(hot,"XLMProphetNetForCausalLM"),hot.forEach(t),S7o=r(bAe," (XLMProphetNet model)"),bAe.forEach(t),R7o=i(q),F5=n(q,"LI",{});var vAe=s(F5);Ise=n(vAe,"STRONG",{});var pot=s(Ise);B7o=r(pot,"xlm-roberta"),pot.forEach(t),P7o=r(vAe," \u2014 "),Tq=n(vAe,"A",{href:!0});var _ot=s(Tq);$7o=r(_ot,"XLMRobertaForCausalLM"),_ot.forEach(t),I7o=r(vAe," (XLM-RoBERTa model)"),vAe.forEach(t),q7o=i(q),T5=n(q,"LI",{});var FAe=s(T5);qse=n(FAe,"STRONG",{});var uot=s(qse);N7o=r(uot,"xlm-roberta-xl"),uot.forEach(t),j7o=r(FAe," \u2014 "),Mq=n(FAe,"A",{href:!0});var bot=s(Mq);D7o=r(bot,"XLMRobertaXLForCausalLM"),bot.forEach(t),G7o=r(FAe," (XLM-RoBERTa-XL model)"),FAe.forEach(t),O7o=i(q),M5=n(q,"LI",{});var TAe=s(M5);Nse=n(TAe,"STRONG",{});var vot=s(Nse);V7o=r(vot,"xlnet"),vot.forEach(t),X7o=r(TAe," \u2014 "),Eq=n(TAe,"A",{href:!0});var Fot=s(Eq);z7o=r(Fot,"XLNetLMHeadModel"),Fot.forEach(t),Q7o=r(TAe," (XLNet model)"),TAe.forEach(t),q.forEach(t),W7o=i(Ot),E5=n(Ot,"P",{});var MAe=s(E5);H7o=r(MAe,"The model is set in evaluation mode by default using "),jse=n(MAe,"CODE",{});var Tot=s(jse);U7o=r(Tot,"model.eval()"),Tot.forEach(t),J7o=r(MAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dse=n(MAe,"CODE",{});var Mot=s(Dse);Y7o=r(Mot,"model.train()"),Mot.forEach(t),MAe.forEach(t),K7o=i(Ot),Gse=n(Ot,"P",{});var Eot=s(Gse);Z7o=r(Eot,"Examples:"),Eot.forEach(t),eMo=i(Ot),m(z6.$$.fragment,Ot),Ot.forEach(t),nl.forEach(t),bPe=i(c),hd=n(c,"H2",{class:!0});var yIe=s(hd);C5=n(yIe,"A",{id:!0,class:!0,href:!0});var Cot=s(C5);Ose=n(Cot,"SPAN",{});var wot=s(Ose);m(Q6.$$.fragment,wot),wot.forEach(t),Cot.forEach(t),oMo=i(yIe),Vse=n(yIe,"SPAN",{});var Aot=s(Vse);rMo=r(Aot,"AutoModelForMaskedLM"),Aot.forEach(t),yIe.forEach(t),vPe=i(c),Zo=n(c,"DIV",{class:!0});var ll=s(Zo);m(W6.$$.fragment,ll),tMo=i(ll),pd=n(ll,"P",{});var MJ=s(pd);aMo=r(MJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Cq=n(MJ,"A",{href:!0});var yot=s(Cq);nMo=r(yot,"from_pretrained()"),yot.forEach(t),sMo=r(MJ," class method or the "),wq=n(MJ,"A",{href:!0});var Lot=s(wq);lMo=r(Lot,"from_config()"),Lot.forEach(t),iMo=r(MJ,` class
method.`),MJ.forEach(t),dMo=i(ll),H6=n(ll,"P",{});var LIe=s(H6);cMo=r(LIe,"This class cannot be instantiated directly using "),Xse=n(LIe,"CODE",{});var xot=s(Xse);fMo=r(xot,"__init__()"),xot.forEach(t),mMo=r(LIe," (throws an error)."),LIe.forEach(t),gMo=i(ll),Wr=n(ll,"DIV",{class:!0});var il=s(Wr);m(U6.$$.fragment,il),hMo=i(il),zse=n(il,"P",{});var kot=s(zse);pMo=r(kot,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kot.forEach(t),_Mo=i(il),_d=n(il,"P",{});var EJ=s(_d);uMo=r(EJ,`Note:
Loading a model from its configuration file does `),Qse=n(EJ,"STRONG",{});var Sot=s(Qse);bMo=r(Sot,"not"),Sot.forEach(t),vMo=r(EJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aq=n(EJ,"A",{href:!0});var Rot=s(Aq);FMo=r(Rot,"from_pretrained()"),Rot.forEach(t),TMo=r(EJ," to load the model weights."),EJ.forEach(t),MMo=i(il),Wse=n(il,"P",{});var Bot=s(Wse);EMo=r(Bot,"Examples:"),Bot.forEach(t),CMo=i(il),m(J6.$$.fragment,il),il.forEach(t),wMo=i(ll),Ge=n(ll,"DIV",{class:!0});var Vt=s(Ge);m(Y6.$$.fragment,Vt),AMo=i(Vt),Hse=n(Vt,"P",{});var Pot=s(Hse);yMo=r(Pot,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Pot.forEach(t),LMo=i(Vt),Wa=n(Vt,"P",{});var Y3=s(Wa);xMo=r(Y3,"The model class to instantiate is selected based on the "),Use=n(Y3,"CODE",{});var $ot=s(Use);kMo=r($ot,"model_type"),$ot.forEach(t),SMo=r(Y3,` property of the config object (either
passed as an argument or loaded from `),Jse=n(Y3,"CODE",{});var Iot=s(Jse);RMo=r(Iot,"pretrained_model_name_or_path"),Iot.forEach(t),BMo=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yse=n(Y3,"CODE",{});var qot=s(Yse);PMo=r(qot,"pretrained_model_name_or_path"),qot.forEach(t),$Mo=r(Y3,":"),Y3.forEach(t),IMo=i(Vt),I=n(Vt,"UL",{});var N=s(I);w5=n(N,"LI",{});var EAe=s(w5);Kse=n(EAe,"STRONG",{});var Not=s(Kse);qMo=r(Not,"albert"),Not.forEach(t),NMo=r(EAe," \u2014 "),yq=n(EAe,"A",{href:!0});var jot=s(yq);jMo=r(jot,"AlbertForMaskedLM"),jot.forEach(t),DMo=r(EAe," (ALBERT model)"),EAe.forEach(t),GMo=i(N),A5=n(N,"LI",{});var CAe=s(A5);Zse=n(CAe,"STRONG",{});var Dot=s(Zse);OMo=r(Dot,"bart"),Dot.forEach(t),VMo=r(CAe," \u2014 "),Lq=n(CAe,"A",{href:!0});var Got=s(Lq);XMo=r(Got,"BartForConditionalGeneration"),Got.forEach(t),zMo=r(CAe," (BART model)"),CAe.forEach(t),QMo=i(N),y5=n(N,"LI",{});var wAe=s(y5);ele=n(wAe,"STRONG",{});var Oot=s(ele);WMo=r(Oot,"bert"),Oot.forEach(t),HMo=r(wAe," \u2014 "),xq=n(wAe,"A",{href:!0});var Vot=s(xq);UMo=r(Vot,"BertForMaskedLM"),Vot.forEach(t),JMo=r(wAe," (BERT model)"),wAe.forEach(t),YMo=i(N),L5=n(N,"LI",{});var AAe=s(L5);ole=n(AAe,"STRONG",{});var Xot=s(ole);KMo=r(Xot,"big_bird"),Xot.forEach(t),ZMo=r(AAe," \u2014 "),kq=n(AAe,"A",{href:!0});var zot=s(kq);eEo=r(zot,"BigBirdForMaskedLM"),zot.forEach(t),oEo=r(AAe," (BigBird model)"),AAe.forEach(t),rEo=i(N),x5=n(N,"LI",{});var yAe=s(x5);rle=n(yAe,"STRONG",{});var Qot=s(rle);tEo=r(Qot,"camembert"),Qot.forEach(t),aEo=r(yAe," \u2014 "),Sq=n(yAe,"A",{href:!0});var Wot=s(Sq);nEo=r(Wot,"CamembertForMaskedLM"),Wot.forEach(t),sEo=r(yAe," (CamemBERT model)"),yAe.forEach(t),lEo=i(N),k5=n(N,"LI",{});var LAe=s(k5);tle=n(LAe,"STRONG",{});var Hot=s(tle);iEo=r(Hot,"convbert"),Hot.forEach(t),dEo=r(LAe," \u2014 "),Rq=n(LAe,"A",{href:!0});var Uot=s(Rq);cEo=r(Uot,"ConvBertForMaskedLM"),Uot.forEach(t),fEo=r(LAe," (ConvBERT model)"),LAe.forEach(t),mEo=i(N),S5=n(N,"LI",{});var xAe=s(S5);ale=n(xAe,"STRONG",{});var Jot=s(ale);gEo=r(Jot,"data2vec-text"),Jot.forEach(t),hEo=r(xAe," \u2014 "),Bq=n(xAe,"A",{href:!0});var Yot=s(Bq);pEo=r(Yot,"Data2VecTextForMaskedLM"),Yot.forEach(t),_Eo=r(xAe," (Data2VecText model)"),xAe.forEach(t),uEo=i(N),R5=n(N,"LI",{});var kAe=s(R5);nle=n(kAe,"STRONG",{});var Kot=s(nle);bEo=r(Kot,"deberta"),Kot.forEach(t),vEo=r(kAe," \u2014 "),Pq=n(kAe,"A",{href:!0});var Zot=s(Pq);FEo=r(Zot,"DebertaForMaskedLM"),Zot.forEach(t),TEo=r(kAe," (DeBERTa model)"),kAe.forEach(t),MEo=i(N),B5=n(N,"LI",{});var SAe=s(B5);sle=n(SAe,"STRONG",{});var ert=s(sle);EEo=r(ert,"deberta-v2"),ert.forEach(t),CEo=r(SAe," \u2014 "),$q=n(SAe,"A",{href:!0});var ort=s($q);wEo=r(ort,"DebertaV2ForMaskedLM"),ort.forEach(t),AEo=r(SAe," (DeBERTa-v2 model)"),SAe.forEach(t),yEo=i(N),P5=n(N,"LI",{});var RAe=s(P5);lle=n(RAe,"STRONG",{});var rrt=s(lle);LEo=r(rrt,"distilbert"),rrt.forEach(t),xEo=r(RAe," \u2014 "),Iq=n(RAe,"A",{href:!0});var trt=s(Iq);kEo=r(trt,"DistilBertForMaskedLM"),trt.forEach(t),SEo=r(RAe," (DistilBERT model)"),RAe.forEach(t),REo=i(N),$5=n(N,"LI",{});var BAe=s($5);ile=n(BAe,"STRONG",{});var art=s(ile);BEo=r(art,"electra"),art.forEach(t),PEo=r(BAe," \u2014 "),qq=n(BAe,"A",{href:!0});var nrt=s(qq);$Eo=r(nrt,"ElectraForMaskedLM"),nrt.forEach(t),IEo=r(BAe," (ELECTRA model)"),BAe.forEach(t),qEo=i(N),I5=n(N,"LI",{});var PAe=s(I5);dle=n(PAe,"STRONG",{});var srt=s(dle);NEo=r(srt,"flaubert"),srt.forEach(t),jEo=r(PAe," \u2014 "),Nq=n(PAe,"A",{href:!0});var lrt=s(Nq);DEo=r(lrt,"FlaubertWithLMHeadModel"),lrt.forEach(t),GEo=r(PAe," (FlauBERT model)"),PAe.forEach(t),OEo=i(N),q5=n(N,"LI",{});var $Ae=s(q5);cle=n($Ae,"STRONG",{});var irt=s(cle);VEo=r(irt,"fnet"),irt.forEach(t),XEo=r($Ae," \u2014 "),jq=n($Ae,"A",{href:!0});var drt=s(jq);zEo=r(drt,"FNetForMaskedLM"),drt.forEach(t),QEo=r($Ae," (FNet model)"),$Ae.forEach(t),WEo=i(N),N5=n(N,"LI",{});var IAe=s(N5);fle=n(IAe,"STRONG",{});var crt=s(fle);HEo=r(crt,"funnel"),crt.forEach(t),UEo=r(IAe," \u2014 "),Dq=n(IAe,"A",{href:!0});var frt=s(Dq);JEo=r(frt,"FunnelForMaskedLM"),frt.forEach(t),YEo=r(IAe," (Funnel Transformer model)"),IAe.forEach(t),KEo=i(N),j5=n(N,"LI",{});var qAe=s(j5);mle=n(qAe,"STRONG",{});var mrt=s(mle);ZEo=r(mrt,"ibert"),mrt.forEach(t),e3o=r(qAe," \u2014 "),Gq=n(qAe,"A",{href:!0});var grt=s(Gq);o3o=r(grt,"IBertForMaskedLM"),grt.forEach(t),r3o=r(qAe," (I-BERT model)"),qAe.forEach(t),t3o=i(N),D5=n(N,"LI",{});var NAe=s(D5);gle=n(NAe,"STRONG",{});var hrt=s(gle);a3o=r(hrt,"layoutlm"),hrt.forEach(t),n3o=r(NAe," \u2014 "),Oq=n(NAe,"A",{href:!0});var prt=s(Oq);s3o=r(prt,"LayoutLMForMaskedLM"),prt.forEach(t),l3o=r(NAe," (LayoutLM model)"),NAe.forEach(t),i3o=i(N),G5=n(N,"LI",{});var jAe=s(G5);hle=n(jAe,"STRONG",{});var _rt=s(hle);d3o=r(_rt,"longformer"),_rt.forEach(t),c3o=r(jAe," \u2014 "),Vq=n(jAe,"A",{href:!0});var urt=s(Vq);f3o=r(urt,"LongformerForMaskedLM"),urt.forEach(t),m3o=r(jAe," (Longformer model)"),jAe.forEach(t),g3o=i(N),O5=n(N,"LI",{});var DAe=s(O5);ple=n(DAe,"STRONG",{});var brt=s(ple);h3o=r(brt,"mbart"),brt.forEach(t),p3o=r(DAe," \u2014 "),Xq=n(DAe,"A",{href:!0});var vrt=s(Xq);_3o=r(vrt,"MBartForConditionalGeneration"),vrt.forEach(t),u3o=r(DAe," (mBART model)"),DAe.forEach(t),b3o=i(N),V5=n(N,"LI",{});var GAe=s(V5);_le=n(GAe,"STRONG",{});var Frt=s(_le);v3o=r(Frt,"megatron-bert"),Frt.forEach(t),F3o=r(GAe," \u2014 "),zq=n(GAe,"A",{href:!0});var Trt=s(zq);T3o=r(Trt,"MegatronBertForMaskedLM"),Trt.forEach(t),M3o=r(GAe," (MegatronBert model)"),GAe.forEach(t),E3o=i(N),X5=n(N,"LI",{});var OAe=s(X5);ule=n(OAe,"STRONG",{});var Mrt=s(ule);C3o=r(Mrt,"mobilebert"),Mrt.forEach(t),w3o=r(OAe," \u2014 "),Qq=n(OAe,"A",{href:!0});var Ert=s(Qq);A3o=r(Ert,"MobileBertForMaskedLM"),Ert.forEach(t),y3o=r(OAe," (MobileBERT model)"),OAe.forEach(t),L3o=i(N),z5=n(N,"LI",{});var VAe=s(z5);ble=n(VAe,"STRONG",{});var Crt=s(ble);x3o=r(Crt,"mpnet"),Crt.forEach(t),k3o=r(VAe," \u2014 "),Wq=n(VAe,"A",{href:!0});var wrt=s(Wq);S3o=r(wrt,"MPNetForMaskedLM"),wrt.forEach(t),R3o=r(VAe," (MPNet model)"),VAe.forEach(t),B3o=i(N),Q5=n(N,"LI",{});var XAe=s(Q5);vle=n(XAe,"STRONG",{});var Art=s(vle);P3o=r(Art,"nystromformer"),Art.forEach(t),$3o=r(XAe," \u2014 "),Hq=n(XAe,"A",{href:!0});var yrt=s(Hq);I3o=r(yrt,"NystromformerForMaskedLM"),yrt.forEach(t),q3o=r(XAe," (Nystromformer model)"),XAe.forEach(t),N3o=i(N),W5=n(N,"LI",{});var zAe=s(W5);Fle=n(zAe,"STRONG",{});var Lrt=s(Fle);j3o=r(Lrt,"perceiver"),Lrt.forEach(t),D3o=r(zAe," \u2014 "),Uq=n(zAe,"A",{href:!0});var xrt=s(Uq);G3o=r(xrt,"PerceiverForMaskedLM"),xrt.forEach(t),O3o=r(zAe," (Perceiver model)"),zAe.forEach(t),V3o=i(N),H5=n(N,"LI",{});var QAe=s(H5);Tle=n(QAe,"STRONG",{});var krt=s(Tle);X3o=r(krt,"qdqbert"),krt.forEach(t),z3o=r(QAe," \u2014 "),Jq=n(QAe,"A",{href:!0});var Srt=s(Jq);Q3o=r(Srt,"QDQBertForMaskedLM"),Srt.forEach(t),W3o=r(QAe," (QDQBert model)"),QAe.forEach(t),H3o=i(N),U5=n(N,"LI",{});var WAe=s(U5);Mle=n(WAe,"STRONG",{});var Rrt=s(Mle);U3o=r(Rrt,"reformer"),Rrt.forEach(t),J3o=r(WAe," \u2014 "),Yq=n(WAe,"A",{href:!0});var Brt=s(Yq);Y3o=r(Brt,"ReformerForMaskedLM"),Brt.forEach(t),K3o=r(WAe," (Reformer model)"),WAe.forEach(t),Z3o=i(N),J5=n(N,"LI",{});var HAe=s(J5);Ele=n(HAe,"STRONG",{});var Prt=s(Ele);eCo=r(Prt,"rembert"),Prt.forEach(t),oCo=r(HAe," \u2014 "),Kq=n(HAe,"A",{href:!0});var $rt=s(Kq);rCo=r($rt,"RemBertForMaskedLM"),$rt.forEach(t),tCo=r(HAe," (RemBERT model)"),HAe.forEach(t),aCo=i(N),Y5=n(N,"LI",{});var UAe=s(Y5);Cle=n(UAe,"STRONG",{});var Irt=s(Cle);nCo=r(Irt,"roberta"),Irt.forEach(t),sCo=r(UAe," \u2014 "),Zq=n(UAe,"A",{href:!0});var qrt=s(Zq);lCo=r(qrt,"RobertaForMaskedLM"),qrt.forEach(t),iCo=r(UAe," (RoBERTa model)"),UAe.forEach(t),dCo=i(N),K5=n(N,"LI",{});var JAe=s(K5);wle=n(JAe,"STRONG",{});var Nrt=s(wle);cCo=r(Nrt,"roformer"),Nrt.forEach(t),fCo=r(JAe," \u2014 "),eN=n(JAe,"A",{href:!0});var jrt=s(eN);mCo=r(jrt,"RoFormerForMaskedLM"),jrt.forEach(t),gCo=r(JAe," (RoFormer model)"),JAe.forEach(t),hCo=i(N),Z5=n(N,"LI",{});var YAe=s(Z5);Ale=n(YAe,"STRONG",{});var Drt=s(Ale);pCo=r(Drt,"squeezebert"),Drt.forEach(t),_Co=r(YAe," \u2014 "),oN=n(YAe,"A",{href:!0});var Grt=s(oN);uCo=r(Grt,"SqueezeBertForMaskedLM"),Grt.forEach(t),bCo=r(YAe," (SqueezeBERT model)"),YAe.forEach(t),vCo=i(N),e1=n(N,"LI",{});var KAe=s(e1);yle=n(KAe,"STRONG",{});var Ort=s(yle);FCo=r(Ort,"tapas"),Ort.forEach(t),TCo=r(KAe," \u2014 "),rN=n(KAe,"A",{href:!0});var Vrt=s(rN);MCo=r(Vrt,"TapasForMaskedLM"),Vrt.forEach(t),ECo=r(KAe," (TAPAS model)"),KAe.forEach(t),CCo=i(N),o1=n(N,"LI",{});var ZAe=s(o1);Lle=n(ZAe,"STRONG",{});var Xrt=s(Lle);wCo=r(Xrt,"wav2vec2"),Xrt.forEach(t),ACo=r(ZAe," \u2014 "),xle=n(ZAe,"CODE",{});var zrt=s(xle);yCo=r(zrt,"Wav2Vec2ForMaskedLM"),zrt.forEach(t),LCo=r(ZAe," (Wav2Vec2 model)"),ZAe.forEach(t),xCo=i(N),r1=n(N,"LI",{});var e0e=s(r1);kle=n(e0e,"STRONG",{});var Qrt=s(kle);kCo=r(Qrt,"xlm"),Qrt.forEach(t),SCo=r(e0e," \u2014 "),tN=n(e0e,"A",{href:!0});var Wrt=s(tN);RCo=r(Wrt,"XLMWithLMHeadModel"),Wrt.forEach(t),BCo=r(e0e," (XLM model)"),e0e.forEach(t),PCo=i(N),t1=n(N,"LI",{});var o0e=s(t1);Sle=n(o0e,"STRONG",{});var Hrt=s(Sle);$Co=r(Hrt,"xlm-roberta"),Hrt.forEach(t),ICo=r(o0e," \u2014 "),aN=n(o0e,"A",{href:!0});var Urt=s(aN);qCo=r(Urt,"XLMRobertaForMaskedLM"),Urt.forEach(t),NCo=r(o0e," (XLM-RoBERTa model)"),o0e.forEach(t),jCo=i(N),a1=n(N,"LI",{});var r0e=s(a1);Rle=n(r0e,"STRONG",{});var Jrt=s(Rle);DCo=r(Jrt,"xlm-roberta-xl"),Jrt.forEach(t),GCo=r(r0e," \u2014 "),nN=n(r0e,"A",{href:!0});var Yrt=s(nN);OCo=r(Yrt,"XLMRobertaXLForMaskedLM"),Yrt.forEach(t),VCo=r(r0e," (XLM-RoBERTa-XL model)"),r0e.forEach(t),XCo=i(N),n1=n(N,"LI",{});var t0e=s(n1);Ble=n(t0e,"STRONG",{});var Krt=s(Ble);zCo=r(Krt,"yoso"),Krt.forEach(t),QCo=r(t0e," \u2014 "),sN=n(t0e,"A",{href:!0});var Zrt=s(sN);WCo=r(Zrt,"YosoForMaskedLM"),Zrt.forEach(t),HCo=r(t0e," (YOSO model)"),t0e.forEach(t),N.forEach(t),UCo=i(Vt),s1=n(Vt,"P",{});var a0e=s(s1);JCo=r(a0e,"The model is set in evaluation mode by default using "),Ple=n(a0e,"CODE",{});var ett=s(Ple);YCo=r(ett,"model.eval()"),ett.forEach(t),KCo=r(a0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$le=n(a0e,"CODE",{});var ott=s($le);ZCo=r(ott,"model.train()"),ott.forEach(t),a0e.forEach(t),e6o=i(Vt),Ile=n(Vt,"P",{});var rtt=s(Ile);o6o=r(rtt,"Examples:"),rtt.forEach(t),r6o=i(Vt),m(K6.$$.fragment,Vt),Vt.forEach(t),ll.forEach(t),FPe=i(c),ud=n(c,"H2",{class:!0});var xIe=s(ud);l1=n(xIe,"A",{id:!0,class:!0,href:!0});var ttt=s(l1);qle=n(ttt,"SPAN",{});var att=s(qle);m(Z6.$$.fragment,att),att.forEach(t),ttt.forEach(t),t6o=i(xIe),Nle=n(xIe,"SPAN",{});var ntt=s(Nle);a6o=r(ntt,"AutoModelForSeq2SeqLM"),ntt.forEach(t),xIe.forEach(t),TPe=i(c),er=n(c,"DIV",{class:!0});var dl=s(er);m(ew.$$.fragment,dl),n6o=i(dl),bd=n(dl,"P",{});var CJ=s(bd);s6o=r(CJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lN=n(CJ,"A",{href:!0});var stt=s(lN);l6o=r(stt,"from_pretrained()"),stt.forEach(t),i6o=r(CJ," class method or the "),iN=n(CJ,"A",{href:!0});var ltt=s(iN);d6o=r(ltt,"from_config()"),ltt.forEach(t),c6o=r(CJ,` class
method.`),CJ.forEach(t),f6o=i(dl),ow=n(dl,"P",{});var kIe=s(ow);m6o=r(kIe,"This class cannot be instantiated directly using "),jle=n(kIe,"CODE",{});var itt=s(jle);g6o=r(itt,"__init__()"),itt.forEach(t),h6o=r(kIe," (throws an error)."),kIe.forEach(t),p6o=i(dl),Hr=n(dl,"DIV",{class:!0});var cl=s(Hr);m(rw.$$.fragment,cl),_6o=i(cl),Dle=n(cl,"P",{});var dtt=s(Dle);u6o=r(dtt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),dtt.forEach(t),b6o=i(cl),vd=n(cl,"P",{});var wJ=s(vd);v6o=r(wJ,`Note:
Loading a model from its configuration file does `),Gle=n(wJ,"STRONG",{});var ctt=s(Gle);F6o=r(ctt,"not"),ctt.forEach(t),T6o=r(wJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dN=n(wJ,"A",{href:!0});var ftt=s(dN);M6o=r(ftt,"from_pretrained()"),ftt.forEach(t),E6o=r(wJ," to load the model weights."),wJ.forEach(t),C6o=i(cl),Ole=n(cl,"P",{});var mtt=s(Ole);w6o=r(mtt,"Examples:"),mtt.forEach(t),A6o=i(cl),m(tw.$$.fragment,cl),cl.forEach(t),y6o=i(dl),Oe=n(dl,"DIV",{class:!0});var Xt=s(Oe);m(aw.$$.fragment,Xt),L6o=i(Xt),Vle=n(Xt,"P",{});var gtt=s(Vle);x6o=r(gtt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),gtt.forEach(t),k6o=i(Xt),Ha=n(Xt,"P",{});var K3=s(Ha);S6o=r(K3,"The model class to instantiate is selected based on the "),Xle=n(K3,"CODE",{});var htt=s(Xle);R6o=r(htt,"model_type"),htt.forEach(t),B6o=r(K3,` property of the config object (either
passed as an argument or loaded from `),zle=n(K3,"CODE",{});var ptt=s(zle);P6o=r(ptt,"pretrained_model_name_or_path"),ptt.forEach(t),$6o=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qle=n(K3,"CODE",{});var _tt=s(Qle);I6o=r(_tt,"pretrained_model_name_or_path"),_tt.forEach(t),q6o=r(K3,":"),K3.forEach(t),N6o=i(Xt),ne=n(Xt,"UL",{});var le=s(ne);i1=n(le,"LI",{});var n0e=s(i1);Wle=n(n0e,"STRONG",{});var utt=s(Wle);j6o=r(utt,"bart"),utt.forEach(t),D6o=r(n0e," \u2014 "),cN=n(n0e,"A",{href:!0});var btt=s(cN);G6o=r(btt,"BartForConditionalGeneration"),btt.forEach(t),O6o=r(n0e," (BART model)"),n0e.forEach(t),V6o=i(le),d1=n(le,"LI",{});var s0e=s(d1);Hle=n(s0e,"STRONG",{});var vtt=s(Hle);X6o=r(vtt,"bigbird_pegasus"),vtt.forEach(t),z6o=r(s0e," \u2014 "),fN=n(s0e,"A",{href:!0});var Ftt=s(fN);Q6o=r(Ftt,"BigBirdPegasusForConditionalGeneration"),Ftt.forEach(t),W6o=r(s0e," (BigBirdPegasus model)"),s0e.forEach(t),H6o=i(le),c1=n(le,"LI",{});var l0e=s(c1);Ule=n(l0e,"STRONG",{});var Ttt=s(Ule);U6o=r(Ttt,"blenderbot"),Ttt.forEach(t),J6o=r(l0e," \u2014 "),mN=n(l0e,"A",{href:!0});var Mtt=s(mN);Y6o=r(Mtt,"BlenderbotForConditionalGeneration"),Mtt.forEach(t),K6o=r(l0e," (Blenderbot model)"),l0e.forEach(t),Z6o=i(le),f1=n(le,"LI",{});var i0e=s(f1);Jle=n(i0e,"STRONG",{});var Ett=s(Jle);ewo=r(Ett,"blenderbot-small"),Ett.forEach(t),owo=r(i0e," \u2014 "),gN=n(i0e,"A",{href:!0});var Ctt=s(gN);rwo=r(Ctt,"BlenderbotSmallForConditionalGeneration"),Ctt.forEach(t),two=r(i0e," (BlenderbotSmall model)"),i0e.forEach(t),awo=i(le),m1=n(le,"LI",{});var d0e=s(m1);Yle=n(d0e,"STRONG",{});var wtt=s(Yle);nwo=r(wtt,"encoder-decoder"),wtt.forEach(t),swo=r(d0e," \u2014 "),hN=n(d0e,"A",{href:!0});var Att=s(hN);lwo=r(Att,"EncoderDecoderModel"),Att.forEach(t),iwo=r(d0e," (Encoder decoder model)"),d0e.forEach(t),dwo=i(le),g1=n(le,"LI",{});var c0e=s(g1);Kle=n(c0e,"STRONG",{});var ytt=s(Kle);cwo=r(ytt,"fsmt"),ytt.forEach(t),fwo=r(c0e," \u2014 "),pN=n(c0e,"A",{href:!0});var Ltt=s(pN);mwo=r(Ltt,"FSMTForConditionalGeneration"),Ltt.forEach(t),gwo=r(c0e," (FairSeq Machine-Translation model)"),c0e.forEach(t),hwo=i(le),h1=n(le,"LI",{});var f0e=s(h1);Zle=n(f0e,"STRONG",{});var xtt=s(Zle);pwo=r(xtt,"led"),xtt.forEach(t),_wo=r(f0e," \u2014 "),_N=n(f0e,"A",{href:!0});var ktt=s(_N);uwo=r(ktt,"LEDForConditionalGeneration"),ktt.forEach(t),bwo=r(f0e," (LED model)"),f0e.forEach(t),vwo=i(le),p1=n(le,"LI",{});var m0e=s(p1);eie=n(m0e,"STRONG",{});var Stt=s(eie);Fwo=r(Stt,"m2m_100"),Stt.forEach(t),Two=r(m0e," \u2014 "),uN=n(m0e,"A",{href:!0});var Rtt=s(uN);Mwo=r(Rtt,"M2M100ForConditionalGeneration"),Rtt.forEach(t),Ewo=r(m0e," (M2M100 model)"),m0e.forEach(t),Cwo=i(le),_1=n(le,"LI",{});var g0e=s(_1);oie=n(g0e,"STRONG",{});var Btt=s(oie);wwo=r(Btt,"marian"),Btt.forEach(t),Awo=r(g0e," \u2014 "),bN=n(g0e,"A",{href:!0});var Ptt=s(bN);ywo=r(Ptt,"MarianMTModel"),Ptt.forEach(t),Lwo=r(g0e," (Marian model)"),g0e.forEach(t),xwo=i(le),u1=n(le,"LI",{});var h0e=s(u1);rie=n(h0e,"STRONG",{});var $tt=s(rie);kwo=r($tt,"mbart"),$tt.forEach(t),Swo=r(h0e," \u2014 "),vN=n(h0e,"A",{href:!0});var Itt=s(vN);Rwo=r(Itt,"MBartForConditionalGeneration"),Itt.forEach(t),Bwo=r(h0e," (mBART model)"),h0e.forEach(t),Pwo=i(le),b1=n(le,"LI",{});var p0e=s(b1);tie=n(p0e,"STRONG",{});var qtt=s(tie);$wo=r(qtt,"mt5"),qtt.forEach(t),Iwo=r(p0e," \u2014 "),FN=n(p0e,"A",{href:!0});var Ntt=s(FN);qwo=r(Ntt,"MT5ForConditionalGeneration"),Ntt.forEach(t),Nwo=r(p0e," (mT5 model)"),p0e.forEach(t),jwo=i(le),v1=n(le,"LI",{});var _0e=s(v1);aie=n(_0e,"STRONG",{});var jtt=s(aie);Dwo=r(jtt,"pegasus"),jtt.forEach(t),Gwo=r(_0e," \u2014 "),TN=n(_0e,"A",{href:!0});var Dtt=s(TN);Owo=r(Dtt,"PegasusForConditionalGeneration"),Dtt.forEach(t),Vwo=r(_0e," (Pegasus model)"),_0e.forEach(t),Xwo=i(le),F1=n(le,"LI",{});var u0e=s(F1);nie=n(u0e,"STRONG",{});var Gtt=s(nie);zwo=r(Gtt,"plbart"),Gtt.forEach(t),Qwo=r(u0e," \u2014 "),MN=n(u0e,"A",{href:!0});var Ott=s(MN);Wwo=r(Ott,"PLBartForConditionalGeneration"),Ott.forEach(t),Hwo=r(u0e," (PLBart model)"),u0e.forEach(t),Uwo=i(le),T1=n(le,"LI",{});var b0e=s(T1);sie=n(b0e,"STRONG",{});var Vtt=s(sie);Jwo=r(Vtt,"prophetnet"),Vtt.forEach(t),Ywo=r(b0e," \u2014 "),EN=n(b0e,"A",{href:!0});var Xtt=s(EN);Kwo=r(Xtt,"ProphetNetForConditionalGeneration"),Xtt.forEach(t),Zwo=r(b0e," (ProphetNet model)"),b0e.forEach(t),eAo=i(le),M1=n(le,"LI",{});var v0e=s(M1);lie=n(v0e,"STRONG",{});var ztt=s(lie);oAo=r(ztt,"t5"),ztt.forEach(t),rAo=r(v0e," \u2014 "),CN=n(v0e,"A",{href:!0});var Qtt=s(CN);tAo=r(Qtt,"T5ForConditionalGeneration"),Qtt.forEach(t),aAo=r(v0e," (T5 model)"),v0e.forEach(t),nAo=i(le),E1=n(le,"LI",{});var F0e=s(E1);iie=n(F0e,"STRONG",{});var Wtt=s(iie);sAo=r(Wtt,"tapex"),Wtt.forEach(t),lAo=r(F0e," \u2014 "),wN=n(F0e,"A",{href:!0});var Htt=s(wN);iAo=r(Htt,"BartForConditionalGeneration"),Htt.forEach(t),dAo=r(F0e," (TAPEX model)"),F0e.forEach(t),cAo=i(le),C1=n(le,"LI",{});var T0e=s(C1);die=n(T0e,"STRONG",{});var Utt=s(die);fAo=r(Utt,"xlm-prophetnet"),Utt.forEach(t),mAo=r(T0e," \u2014 "),AN=n(T0e,"A",{href:!0});var Jtt=s(AN);gAo=r(Jtt,"XLMProphetNetForConditionalGeneration"),Jtt.forEach(t),hAo=r(T0e," (XLMProphetNet model)"),T0e.forEach(t),le.forEach(t),pAo=i(Xt),w1=n(Xt,"P",{});var M0e=s(w1);_Ao=r(M0e,"The model is set in evaluation mode by default using "),cie=n(M0e,"CODE",{});var Ytt=s(cie);uAo=r(Ytt,"model.eval()"),Ytt.forEach(t),bAo=r(M0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fie=n(M0e,"CODE",{});var Ktt=s(fie);vAo=r(Ktt,"model.train()"),Ktt.forEach(t),M0e.forEach(t),FAo=i(Xt),mie=n(Xt,"P",{});var Ztt=s(mie);TAo=r(Ztt,"Examples:"),Ztt.forEach(t),MAo=i(Xt),m(nw.$$.fragment,Xt),Xt.forEach(t),dl.forEach(t),MPe=i(c),Fd=n(c,"H2",{class:!0});var SIe=s(Fd);A1=n(SIe,"A",{id:!0,class:!0,href:!0});var eat=s(A1);gie=n(eat,"SPAN",{});var oat=s(gie);m(sw.$$.fragment,oat),oat.forEach(t),eat.forEach(t),EAo=i(SIe),hie=n(SIe,"SPAN",{});var rat=s(hie);CAo=r(rat,"AutoModelForSequenceClassification"),rat.forEach(t),SIe.forEach(t),EPe=i(c),or=n(c,"DIV",{class:!0});var fl=s(or);m(lw.$$.fragment,fl),wAo=i(fl),Td=n(fl,"P",{});var AJ=s(Td);AAo=r(AJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yN=n(AJ,"A",{href:!0});var tat=s(yN);yAo=r(tat,"from_pretrained()"),tat.forEach(t),LAo=r(AJ," class method or the "),LN=n(AJ,"A",{href:!0});var aat=s(LN);xAo=r(aat,"from_config()"),aat.forEach(t),kAo=r(AJ,` class
method.`),AJ.forEach(t),SAo=i(fl),iw=n(fl,"P",{});var RIe=s(iw);RAo=r(RIe,"This class cannot be instantiated directly using "),pie=n(RIe,"CODE",{});var nat=s(pie);BAo=r(nat,"__init__()"),nat.forEach(t),PAo=r(RIe," (throws an error)."),RIe.forEach(t),$Ao=i(fl),Ur=n(fl,"DIV",{class:!0});var ml=s(Ur);m(dw.$$.fragment,ml),IAo=i(ml),_ie=n(ml,"P",{});var sat=s(_ie);qAo=r(sat,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),sat.forEach(t),NAo=i(ml),Md=n(ml,"P",{});var yJ=s(Md);jAo=r(yJ,`Note:
Loading a model from its configuration file does `),uie=n(yJ,"STRONG",{});var lat=s(uie);DAo=r(lat,"not"),lat.forEach(t),GAo=r(yJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xN=n(yJ,"A",{href:!0});var iat=s(xN);OAo=r(iat,"from_pretrained()"),iat.forEach(t),VAo=r(yJ," to load the model weights."),yJ.forEach(t),XAo=i(ml),bie=n(ml,"P",{});var dat=s(bie);zAo=r(dat,"Examples:"),dat.forEach(t),QAo=i(ml),m(cw.$$.fragment,ml),ml.forEach(t),WAo=i(fl),Ve=n(fl,"DIV",{class:!0});var zt=s(Ve);m(fw.$$.fragment,zt),HAo=i(zt),vie=n(zt,"P",{});var cat=s(vie);UAo=r(cat,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cat.forEach(t),JAo=i(zt),Ua=n(zt,"P",{});var Z3=s(Ua);YAo=r(Z3,"The model class to instantiate is selected based on the "),Fie=n(Z3,"CODE",{});var fat=s(Fie);KAo=r(fat,"model_type"),fat.forEach(t),ZAo=r(Z3,` property of the config object (either
passed as an argument or loaded from `),Tie=n(Z3,"CODE",{});var mat=s(Tie);e0o=r(mat,"pretrained_model_name_or_path"),mat.forEach(t),o0o=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mie=n(Z3,"CODE",{});var gat=s(Mie);r0o=r(gat,"pretrained_model_name_or_path"),gat.forEach(t),t0o=r(Z3,":"),Z3.forEach(t),a0o=i(zt),y=n(zt,"UL",{});var L=s(y);y1=n(L,"LI",{});var E0e=s(y1);Eie=n(E0e,"STRONG",{});var hat=s(Eie);n0o=r(hat,"albert"),hat.forEach(t),s0o=r(E0e," \u2014 "),kN=n(E0e,"A",{href:!0});var pat=s(kN);l0o=r(pat,"AlbertForSequenceClassification"),pat.forEach(t),i0o=r(E0e," (ALBERT model)"),E0e.forEach(t),d0o=i(L),L1=n(L,"LI",{});var C0e=s(L1);Cie=n(C0e,"STRONG",{});var _at=s(Cie);c0o=r(_at,"bart"),_at.forEach(t),f0o=r(C0e," \u2014 "),SN=n(C0e,"A",{href:!0});var uat=s(SN);m0o=r(uat,"BartForSequenceClassification"),uat.forEach(t),g0o=r(C0e," (BART model)"),C0e.forEach(t),h0o=i(L),x1=n(L,"LI",{});var w0e=s(x1);wie=n(w0e,"STRONG",{});var bat=s(wie);p0o=r(bat,"bert"),bat.forEach(t),_0o=r(w0e," \u2014 "),RN=n(w0e,"A",{href:!0});var vat=s(RN);u0o=r(vat,"BertForSequenceClassification"),vat.forEach(t),b0o=r(w0e," (BERT model)"),w0e.forEach(t),v0o=i(L),k1=n(L,"LI",{});var A0e=s(k1);Aie=n(A0e,"STRONG",{});var Fat=s(Aie);F0o=r(Fat,"big_bird"),Fat.forEach(t),T0o=r(A0e," \u2014 "),BN=n(A0e,"A",{href:!0});var Tat=s(BN);M0o=r(Tat,"BigBirdForSequenceClassification"),Tat.forEach(t),E0o=r(A0e," (BigBird model)"),A0e.forEach(t),C0o=i(L),S1=n(L,"LI",{});var y0e=s(S1);yie=n(y0e,"STRONG",{});var Mat=s(yie);w0o=r(Mat,"bigbird_pegasus"),Mat.forEach(t),A0o=r(y0e," \u2014 "),PN=n(y0e,"A",{href:!0});var Eat=s(PN);y0o=r(Eat,"BigBirdPegasusForSequenceClassification"),Eat.forEach(t),L0o=r(y0e," (BigBirdPegasus model)"),y0e.forEach(t),x0o=i(L),R1=n(L,"LI",{});var L0e=s(R1);Lie=n(L0e,"STRONG",{});var Cat=s(Lie);k0o=r(Cat,"camembert"),Cat.forEach(t),S0o=r(L0e," \u2014 "),$N=n(L0e,"A",{href:!0});var wat=s($N);R0o=r(wat,"CamembertForSequenceClassification"),wat.forEach(t),B0o=r(L0e," (CamemBERT model)"),L0e.forEach(t),P0o=i(L),B1=n(L,"LI",{});var x0e=s(B1);xie=n(x0e,"STRONG",{});var Aat=s(xie);$0o=r(Aat,"canine"),Aat.forEach(t),I0o=r(x0e," \u2014 "),IN=n(x0e,"A",{href:!0});var yat=s(IN);q0o=r(yat,"CanineForSequenceClassification"),yat.forEach(t),N0o=r(x0e," (Canine model)"),x0e.forEach(t),j0o=i(L),P1=n(L,"LI",{});var k0e=s(P1);kie=n(k0e,"STRONG",{});var Lat=s(kie);D0o=r(Lat,"convbert"),Lat.forEach(t),G0o=r(k0e," \u2014 "),qN=n(k0e,"A",{href:!0});var xat=s(qN);O0o=r(xat,"ConvBertForSequenceClassification"),xat.forEach(t),V0o=r(k0e," (ConvBERT model)"),k0e.forEach(t),X0o=i(L),$1=n(L,"LI",{});var S0e=s($1);Sie=n(S0e,"STRONG",{});var kat=s(Sie);z0o=r(kat,"ctrl"),kat.forEach(t),Q0o=r(S0e," \u2014 "),NN=n(S0e,"A",{href:!0});var Sat=s(NN);W0o=r(Sat,"CTRLForSequenceClassification"),Sat.forEach(t),H0o=r(S0e," (CTRL model)"),S0e.forEach(t),U0o=i(L),I1=n(L,"LI",{});var R0e=s(I1);Rie=n(R0e,"STRONG",{});var Rat=s(Rie);J0o=r(Rat,"data2vec-text"),Rat.forEach(t),Y0o=r(R0e," \u2014 "),jN=n(R0e,"A",{href:!0});var Bat=s(jN);K0o=r(Bat,"Data2VecTextForSequenceClassification"),Bat.forEach(t),Z0o=r(R0e," (Data2VecText model)"),R0e.forEach(t),eyo=i(L),q1=n(L,"LI",{});var B0e=s(q1);Bie=n(B0e,"STRONG",{});var Pat=s(Bie);oyo=r(Pat,"deberta"),Pat.forEach(t),ryo=r(B0e," \u2014 "),DN=n(B0e,"A",{href:!0});var $at=s(DN);tyo=r($at,"DebertaForSequenceClassification"),$at.forEach(t),ayo=r(B0e," (DeBERTa model)"),B0e.forEach(t),nyo=i(L),N1=n(L,"LI",{});var P0e=s(N1);Pie=n(P0e,"STRONG",{});var Iat=s(Pie);syo=r(Iat,"deberta-v2"),Iat.forEach(t),lyo=r(P0e," \u2014 "),GN=n(P0e,"A",{href:!0});var qat=s(GN);iyo=r(qat,"DebertaV2ForSequenceClassification"),qat.forEach(t),dyo=r(P0e," (DeBERTa-v2 model)"),P0e.forEach(t),cyo=i(L),j1=n(L,"LI",{});var $0e=s(j1);$ie=n($0e,"STRONG",{});var Nat=s($ie);fyo=r(Nat,"distilbert"),Nat.forEach(t),myo=r($0e," \u2014 "),ON=n($0e,"A",{href:!0});var jat=s(ON);gyo=r(jat,"DistilBertForSequenceClassification"),jat.forEach(t),hyo=r($0e," (DistilBERT model)"),$0e.forEach(t),pyo=i(L),D1=n(L,"LI",{});var I0e=s(D1);Iie=n(I0e,"STRONG",{});var Dat=s(Iie);_yo=r(Dat,"electra"),Dat.forEach(t),uyo=r(I0e," \u2014 "),VN=n(I0e,"A",{href:!0});var Gat=s(VN);byo=r(Gat,"ElectraForSequenceClassification"),Gat.forEach(t),vyo=r(I0e," (ELECTRA model)"),I0e.forEach(t),Fyo=i(L),G1=n(L,"LI",{});var q0e=s(G1);qie=n(q0e,"STRONG",{});var Oat=s(qie);Tyo=r(Oat,"flaubert"),Oat.forEach(t),Myo=r(q0e," \u2014 "),XN=n(q0e,"A",{href:!0});var Vat=s(XN);Eyo=r(Vat,"FlaubertForSequenceClassification"),Vat.forEach(t),Cyo=r(q0e," (FlauBERT model)"),q0e.forEach(t),wyo=i(L),O1=n(L,"LI",{});var N0e=s(O1);Nie=n(N0e,"STRONG",{});var Xat=s(Nie);Ayo=r(Xat,"fnet"),Xat.forEach(t),yyo=r(N0e," \u2014 "),zN=n(N0e,"A",{href:!0});var zat=s(zN);Lyo=r(zat,"FNetForSequenceClassification"),zat.forEach(t),xyo=r(N0e," (FNet model)"),N0e.forEach(t),kyo=i(L),V1=n(L,"LI",{});var j0e=s(V1);jie=n(j0e,"STRONG",{});var Qat=s(jie);Syo=r(Qat,"funnel"),Qat.forEach(t),Ryo=r(j0e," \u2014 "),QN=n(j0e,"A",{href:!0});var Wat=s(QN);Byo=r(Wat,"FunnelForSequenceClassification"),Wat.forEach(t),Pyo=r(j0e," (Funnel Transformer model)"),j0e.forEach(t),$yo=i(L),X1=n(L,"LI",{});var D0e=s(X1);Die=n(D0e,"STRONG",{});var Hat=s(Die);Iyo=r(Hat,"gpt2"),Hat.forEach(t),qyo=r(D0e," \u2014 "),WN=n(D0e,"A",{href:!0});var Uat=s(WN);Nyo=r(Uat,"GPT2ForSequenceClassification"),Uat.forEach(t),jyo=r(D0e," (OpenAI GPT-2 model)"),D0e.forEach(t),Dyo=i(L),z1=n(L,"LI",{});var G0e=s(z1);Gie=n(G0e,"STRONG",{});var Jat=s(Gie);Gyo=r(Jat,"gpt_neo"),Jat.forEach(t),Oyo=r(G0e," \u2014 "),HN=n(G0e,"A",{href:!0});var Yat=s(HN);Vyo=r(Yat,"GPTNeoForSequenceClassification"),Yat.forEach(t),Xyo=r(G0e," (GPT Neo model)"),G0e.forEach(t),zyo=i(L),Q1=n(L,"LI",{});var O0e=s(Q1);Oie=n(O0e,"STRONG",{});var Kat=s(Oie);Qyo=r(Kat,"gptj"),Kat.forEach(t),Wyo=r(O0e," \u2014 "),UN=n(O0e,"A",{href:!0});var Zat=s(UN);Hyo=r(Zat,"GPTJForSequenceClassification"),Zat.forEach(t),Uyo=r(O0e," (GPT-J model)"),O0e.forEach(t),Jyo=i(L),W1=n(L,"LI",{});var V0e=s(W1);Vie=n(V0e,"STRONG",{});var ent=s(Vie);Yyo=r(ent,"ibert"),ent.forEach(t),Kyo=r(V0e," \u2014 "),JN=n(V0e,"A",{href:!0});var ont=s(JN);Zyo=r(ont,"IBertForSequenceClassification"),ont.forEach(t),e8o=r(V0e," (I-BERT model)"),V0e.forEach(t),o8o=i(L),H1=n(L,"LI",{});var X0e=s(H1);Xie=n(X0e,"STRONG",{});var rnt=s(Xie);r8o=r(rnt,"layoutlm"),rnt.forEach(t),t8o=r(X0e," \u2014 "),YN=n(X0e,"A",{href:!0});var tnt=s(YN);a8o=r(tnt,"LayoutLMForSequenceClassification"),tnt.forEach(t),n8o=r(X0e," (LayoutLM model)"),X0e.forEach(t),s8o=i(L),U1=n(L,"LI",{});var z0e=s(U1);zie=n(z0e,"STRONG",{});var ant=s(zie);l8o=r(ant,"layoutlmv2"),ant.forEach(t),i8o=r(z0e," \u2014 "),KN=n(z0e,"A",{href:!0});var nnt=s(KN);d8o=r(nnt,"LayoutLMv2ForSequenceClassification"),nnt.forEach(t),c8o=r(z0e," (LayoutLMv2 model)"),z0e.forEach(t),f8o=i(L),J1=n(L,"LI",{});var Q0e=s(J1);Qie=n(Q0e,"STRONG",{});var snt=s(Qie);m8o=r(snt,"led"),snt.forEach(t),g8o=r(Q0e," \u2014 "),ZN=n(Q0e,"A",{href:!0});var lnt=s(ZN);h8o=r(lnt,"LEDForSequenceClassification"),lnt.forEach(t),p8o=r(Q0e," (LED model)"),Q0e.forEach(t),_8o=i(L),Y1=n(L,"LI",{});var W0e=s(Y1);Wie=n(W0e,"STRONG",{});var int=s(Wie);u8o=r(int,"longformer"),int.forEach(t),b8o=r(W0e," \u2014 "),ej=n(W0e,"A",{href:!0});var dnt=s(ej);v8o=r(dnt,"LongformerForSequenceClassification"),dnt.forEach(t),F8o=r(W0e," (Longformer model)"),W0e.forEach(t),T8o=i(L),K1=n(L,"LI",{});var H0e=s(K1);Hie=n(H0e,"STRONG",{});var cnt=s(Hie);M8o=r(cnt,"mbart"),cnt.forEach(t),E8o=r(H0e," \u2014 "),oj=n(H0e,"A",{href:!0});var fnt=s(oj);C8o=r(fnt,"MBartForSequenceClassification"),fnt.forEach(t),w8o=r(H0e," (mBART model)"),H0e.forEach(t),A8o=i(L),Z1=n(L,"LI",{});var U0e=s(Z1);Uie=n(U0e,"STRONG",{});var mnt=s(Uie);y8o=r(mnt,"megatron-bert"),mnt.forEach(t),L8o=r(U0e," \u2014 "),rj=n(U0e,"A",{href:!0});var gnt=s(rj);x8o=r(gnt,"MegatronBertForSequenceClassification"),gnt.forEach(t),k8o=r(U0e," (MegatronBert model)"),U0e.forEach(t),S8o=i(L),e4=n(L,"LI",{});var J0e=s(e4);Jie=n(J0e,"STRONG",{});var hnt=s(Jie);R8o=r(hnt,"mobilebert"),hnt.forEach(t),B8o=r(J0e," \u2014 "),tj=n(J0e,"A",{href:!0});var pnt=s(tj);P8o=r(pnt,"MobileBertForSequenceClassification"),pnt.forEach(t),$8o=r(J0e," (MobileBERT model)"),J0e.forEach(t),I8o=i(L),o4=n(L,"LI",{});var Y0e=s(o4);Yie=n(Y0e,"STRONG",{});var _nt=s(Yie);q8o=r(_nt,"mpnet"),_nt.forEach(t),N8o=r(Y0e," \u2014 "),aj=n(Y0e,"A",{href:!0});var unt=s(aj);j8o=r(unt,"MPNetForSequenceClassification"),unt.forEach(t),D8o=r(Y0e," (MPNet model)"),Y0e.forEach(t),G8o=i(L),r4=n(L,"LI",{});var K0e=s(r4);Kie=n(K0e,"STRONG",{});var bnt=s(Kie);O8o=r(bnt,"nystromformer"),bnt.forEach(t),V8o=r(K0e," \u2014 "),nj=n(K0e,"A",{href:!0});var vnt=s(nj);X8o=r(vnt,"NystromformerForSequenceClassification"),vnt.forEach(t),z8o=r(K0e," (Nystromformer model)"),K0e.forEach(t),Q8o=i(L),t4=n(L,"LI",{});var Z0e=s(t4);Zie=n(Z0e,"STRONG",{});var Fnt=s(Zie);W8o=r(Fnt,"openai-gpt"),Fnt.forEach(t),H8o=r(Z0e," \u2014 "),sj=n(Z0e,"A",{href:!0});var Tnt=s(sj);U8o=r(Tnt,"OpenAIGPTForSequenceClassification"),Tnt.forEach(t),J8o=r(Z0e," (OpenAI GPT model)"),Z0e.forEach(t),Y8o=i(L),a4=n(L,"LI",{});var eye=s(a4);ede=n(eye,"STRONG",{});var Mnt=s(ede);K8o=r(Mnt,"perceiver"),Mnt.forEach(t),Z8o=r(eye," \u2014 "),lj=n(eye,"A",{href:!0});var Ent=s(lj);eLo=r(Ent,"PerceiverForSequenceClassification"),Ent.forEach(t),oLo=r(eye," (Perceiver model)"),eye.forEach(t),rLo=i(L),n4=n(L,"LI",{});var oye=s(n4);ode=n(oye,"STRONG",{});var Cnt=s(ode);tLo=r(Cnt,"plbart"),Cnt.forEach(t),aLo=r(oye," \u2014 "),ij=n(oye,"A",{href:!0});var wnt=s(ij);nLo=r(wnt,"PLBartForSequenceClassification"),wnt.forEach(t),sLo=r(oye," (PLBart model)"),oye.forEach(t),lLo=i(L),s4=n(L,"LI",{});var rye=s(s4);rde=n(rye,"STRONG",{});var Ant=s(rde);iLo=r(Ant,"qdqbert"),Ant.forEach(t),dLo=r(rye," \u2014 "),dj=n(rye,"A",{href:!0});var ynt=s(dj);cLo=r(ynt,"QDQBertForSequenceClassification"),ynt.forEach(t),fLo=r(rye," (QDQBert model)"),rye.forEach(t),mLo=i(L),l4=n(L,"LI",{});var tye=s(l4);tde=n(tye,"STRONG",{});var Lnt=s(tde);gLo=r(Lnt,"reformer"),Lnt.forEach(t),hLo=r(tye," \u2014 "),cj=n(tye,"A",{href:!0});var xnt=s(cj);pLo=r(xnt,"ReformerForSequenceClassification"),xnt.forEach(t),_Lo=r(tye," (Reformer model)"),tye.forEach(t),uLo=i(L),i4=n(L,"LI",{});var aye=s(i4);ade=n(aye,"STRONG",{});var knt=s(ade);bLo=r(knt,"rembert"),knt.forEach(t),vLo=r(aye," \u2014 "),fj=n(aye,"A",{href:!0});var Snt=s(fj);FLo=r(Snt,"RemBertForSequenceClassification"),Snt.forEach(t),TLo=r(aye," (RemBERT model)"),aye.forEach(t),MLo=i(L),d4=n(L,"LI",{});var nye=s(d4);nde=n(nye,"STRONG",{});var Rnt=s(nde);ELo=r(Rnt,"roberta"),Rnt.forEach(t),CLo=r(nye," \u2014 "),mj=n(nye,"A",{href:!0});var Bnt=s(mj);wLo=r(Bnt,"RobertaForSequenceClassification"),Bnt.forEach(t),ALo=r(nye," (RoBERTa model)"),nye.forEach(t),yLo=i(L),c4=n(L,"LI",{});var sye=s(c4);sde=n(sye,"STRONG",{});var Pnt=s(sde);LLo=r(Pnt,"roformer"),Pnt.forEach(t),xLo=r(sye," \u2014 "),gj=n(sye,"A",{href:!0});var $nt=s(gj);kLo=r($nt,"RoFormerForSequenceClassification"),$nt.forEach(t),SLo=r(sye," (RoFormer model)"),sye.forEach(t),RLo=i(L),f4=n(L,"LI",{});var lye=s(f4);lde=n(lye,"STRONG",{});var Int=s(lde);BLo=r(Int,"squeezebert"),Int.forEach(t),PLo=r(lye," \u2014 "),hj=n(lye,"A",{href:!0});var qnt=s(hj);$Lo=r(qnt,"SqueezeBertForSequenceClassification"),qnt.forEach(t),ILo=r(lye," (SqueezeBERT model)"),lye.forEach(t),qLo=i(L),m4=n(L,"LI",{});var iye=s(m4);ide=n(iye,"STRONG",{});var Nnt=s(ide);NLo=r(Nnt,"tapas"),Nnt.forEach(t),jLo=r(iye," \u2014 "),pj=n(iye,"A",{href:!0});var jnt=s(pj);DLo=r(jnt,"TapasForSequenceClassification"),jnt.forEach(t),GLo=r(iye," (TAPAS model)"),iye.forEach(t),OLo=i(L),g4=n(L,"LI",{});var dye=s(g4);dde=n(dye,"STRONG",{});var Dnt=s(dde);VLo=r(Dnt,"tapex"),Dnt.forEach(t),XLo=r(dye," \u2014 "),_j=n(dye,"A",{href:!0});var Gnt=s(_j);zLo=r(Gnt,"BartForSequenceClassification"),Gnt.forEach(t),QLo=r(dye," (TAPEX model)"),dye.forEach(t),WLo=i(L),h4=n(L,"LI",{});var cye=s(h4);cde=n(cye,"STRONG",{});var Ont=s(cde);HLo=r(Ont,"transfo-xl"),Ont.forEach(t),ULo=r(cye," \u2014 "),uj=n(cye,"A",{href:!0});var Vnt=s(uj);JLo=r(Vnt,"TransfoXLForSequenceClassification"),Vnt.forEach(t),YLo=r(cye," (Transformer-XL model)"),cye.forEach(t),KLo=i(L),p4=n(L,"LI",{});var fye=s(p4);fde=n(fye,"STRONG",{});var Xnt=s(fde);ZLo=r(Xnt,"xlm"),Xnt.forEach(t),e9o=r(fye," \u2014 "),bj=n(fye,"A",{href:!0});var znt=s(bj);o9o=r(znt,"XLMForSequenceClassification"),znt.forEach(t),r9o=r(fye," (XLM model)"),fye.forEach(t),t9o=i(L),_4=n(L,"LI",{});var mye=s(_4);mde=n(mye,"STRONG",{});var Qnt=s(mde);a9o=r(Qnt,"xlm-roberta"),Qnt.forEach(t),n9o=r(mye," \u2014 "),vj=n(mye,"A",{href:!0});var Wnt=s(vj);s9o=r(Wnt,"XLMRobertaForSequenceClassification"),Wnt.forEach(t),l9o=r(mye," (XLM-RoBERTa model)"),mye.forEach(t),i9o=i(L),u4=n(L,"LI",{});var gye=s(u4);gde=n(gye,"STRONG",{});var Hnt=s(gde);d9o=r(Hnt,"xlm-roberta-xl"),Hnt.forEach(t),c9o=r(gye," \u2014 "),Fj=n(gye,"A",{href:!0});var Unt=s(Fj);f9o=r(Unt,"XLMRobertaXLForSequenceClassification"),Unt.forEach(t),m9o=r(gye," (XLM-RoBERTa-XL model)"),gye.forEach(t),g9o=i(L),b4=n(L,"LI",{});var hye=s(b4);hde=n(hye,"STRONG",{});var Jnt=s(hde);h9o=r(Jnt,"xlnet"),Jnt.forEach(t),p9o=r(hye," \u2014 "),Tj=n(hye,"A",{href:!0});var Ynt=s(Tj);_9o=r(Ynt,"XLNetForSequenceClassification"),Ynt.forEach(t),u9o=r(hye," (XLNet model)"),hye.forEach(t),b9o=i(L),v4=n(L,"LI",{});var pye=s(v4);pde=n(pye,"STRONG",{});var Knt=s(pde);v9o=r(Knt,"yoso"),Knt.forEach(t),F9o=r(pye," \u2014 "),Mj=n(pye,"A",{href:!0});var Znt=s(Mj);T9o=r(Znt,"YosoForSequenceClassification"),Znt.forEach(t),M9o=r(pye," (YOSO model)"),pye.forEach(t),L.forEach(t),E9o=i(zt),F4=n(zt,"P",{});var _ye=s(F4);C9o=r(_ye,"The model is set in evaluation mode by default using "),_de=n(_ye,"CODE",{});var est=s(_de);w9o=r(est,"model.eval()"),est.forEach(t),A9o=r(_ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ude=n(_ye,"CODE",{});var ost=s(ude);y9o=r(ost,"model.train()"),ost.forEach(t),_ye.forEach(t),L9o=i(zt),bde=n(zt,"P",{});var rst=s(bde);x9o=r(rst,"Examples:"),rst.forEach(t),k9o=i(zt),m(mw.$$.fragment,zt),zt.forEach(t),fl.forEach(t),CPe=i(c),Ed=n(c,"H2",{class:!0});var BIe=s(Ed);T4=n(BIe,"A",{id:!0,class:!0,href:!0});var tst=s(T4);vde=n(tst,"SPAN",{});var ast=s(vde);m(gw.$$.fragment,ast),ast.forEach(t),tst.forEach(t),S9o=i(BIe),Fde=n(BIe,"SPAN",{});var nst=s(Fde);R9o=r(nst,"AutoModelForMultipleChoice"),nst.forEach(t),BIe.forEach(t),wPe=i(c),rr=n(c,"DIV",{class:!0});var gl=s(rr);m(hw.$$.fragment,gl),B9o=i(gl),Cd=n(gl,"P",{});var LJ=s(Cd);P9o=r(LJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Ej=n(LJ,"A",{href:!0});var sst=s(Ej);$9o=r(sst,"from_pretrained()"),sst.forEach(t),I9o=r(LJ," class method or the "),Cj=n(LJ,"A",{href:!0});var lst=s(Cj);q9o=r(lst,"from_config()"),lst.forEach(t),N9o=r(LJ,` class
method.`),LJ.forEach(t),j9o=i(gl),pw=n(gl,"P",{});var PIe=s(pw);D9o=r(PIe,"This class cannot be instantiated directly using "),Tde=n(PIe,"CODE",{});var ist=s(Tde);G9o=r(ist,"__init__()"),ist.forEach(t),O9o=r(PIe," (throws an error)."),PIe.forEach(t),V9o=i(gl),Jr=n(gl,"DIV",{class:!0});var hl=s(Jr);m(_w.$$.fragment,hl),X9o=i(hl),Mde=n(hl,"P",{});var dst=s(Mde);z9o=r(dst,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dst.forEach(t),Q9o=i(hl),wd=n(hl,"P",{});var xJ=s(wd);W9o=r(xJ,`Note:
Loading a model from its configuration file does `),Ede=n(xJ,"STRONG",{});var cst=s(Ede);H9o=r(cst,"not"),cst.forEach(t),U9o=r(xJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wj=n(xJ,"A",{href:!0});var fst=s(wj);J9o=r(fst,"from_pretrained()"),fst.forEach(t),Y9o=r(xJ," to load the model weights."),xJ.forEach(t),K9o=i(hl),Cde=n(hl,"P",{});var mst=s(Cde);Z9o=r(mst,"Examples:"),mst.forEach(t),exo=i(hl),m(uw.$$.fragment,hl),hl.forEach(t),oxo=i(gl),Xe=n(gl,"DIV",{class:!0});var Qt=s(Xe);m(bw.$$.fragment,Qt),rxo=i(Qt),wde=n(Qt,"P",{});var gst=s(wde);txo=r(gst,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gst.forEach(t),axo=i(Qt),Ja=n(Qt,"P",{});var eC=s(Ja);nxo=r(eC,"The model class to instantiate is selected based on the "),Ade=n(eC,"CODE",{});var hst=s(Ade);sxo=r(hst,"model_type"),hst.forEach(t),lxo=r(eC,` property of the config object (either
passed as an argument or loaded from `),yde=n(eC,"CODE",{});var pst=s(yde);ixo=r(pst,"pretrained_model_name_or_path"),pst.forEach(t),dxo=r(eC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lde=n(eC,"CODE",{});var _st=s(Lde);cxo=r(_st,"pretrained_model_name_or_path"),_st.forEach(t),fxo=r(eC,":"),eC.forEach(t),mxo=i(Qt),G=n(Qt,"UL",{});var O=s(G);M4=n(O,"LI",{});var uye=s(M4);xde=n(uye,"STRONG",{});var ust=s(xde);gxo=r(ust,"albert"),ust.forEach(t),hxo=r(uye," \u2014 "),Aj=n(uye,"A",{href:!0});var bst=s(Aj);pxo=r(bst,"AlbertForMultipleChoice"),bst.forEach(t),_xo=r(uye," (ALBERT model)"),uye.forEach(t),uxo=i(O),E4=n(O,"LI",{});var bye=s(E4);kde=n(bye,"STRONG",{});var vst=s(kde);bxo=r(vst,"bert"),vst.forEach(t),vxo=r(bye," \u2014 "),yj=n(bye,"A",{href:!0});var Fst=s(yj);Fxo=r(Fst,"BertForMultipleChoice"),Fst.forEach(t),Txo=r(bye," (BERT model)"),bye.forEach(t),Mxo=i(O),C4=n(O,"LI",{});var vye=s(C4);Sde=n(vye,"STRONG",{});var Tst=s(Sde);Exo=r(Tst,"big_bird"),Tst.forEach(t),Cxo=r(vye," \u2014 "),Lj=n(vye,"A",{href:!0});var Mst=s(Lj);wxo=r(Mst,"BigBirdForMultipleChoice"),Mst.forEach(t),Axo=r(vye," (BigBird model)"),vye.forEach(t),yxo=i(O),w4=n(O,"LI",{});var Fye=s(w4);Rde=n(Fye,"STRONG",{});var Est=s(Rde);Lxo=r(Est,"camembert"),Est.forEach(t),xxo=r(Fye," \u2014 "),xj=n(Fye,"A",{href:!0});var Cst=s(xj);kxo=r(Cst,"CamembertForMultipleChoice"),Cst.forEach(t),Sxo=r(Fye," (CamemBERT model)"),Fye.forEach(t),Rxo=i(O),A4=n(O,"LI",{});var Tye=s(A4);Bde=n(Tye,"STRONG",{});var wst=s(Bde);Bxo=r(wst,"canine"),wst.forEach(t),Pxo=r(Tye," \u2014 "),kj=n(Tye,"A",{href:!0});var Ast=s(kj);$xo=r(Ast,"CanineForMultipleChoice"),Ast.forEach(t),Ixo=r(Tye," (Canine model)"),Tye.forEach(t),qxo=i(O),y4=n(O,"LI",{});var Mye=s(y4);Pde=n(Mye,"STRONG",{});var yst=s(Pde);Nxo=r(yst,"convbert"),yst.forEach(t),jxo=r(Mye," \u2014 "),Sj=n(Mye,"A",{href:!0});var Lst=s(Sj);Dxo=r(Lst,"ConvBertForMultipleChoice"),Lst.forEach(t),Gxo=r(Mye," (ConvBERT model)"),Mye.forEach(t),Oxo=i(O),L4=n(O,"LI",{});var Eye=s(L4);$de=n(Eye,"STRONG",{});var xst=s($de);Vxo=r(xst,"data2vec-text"),xst.forEach(t),Xxo=r(Eye," \u2014 "),Rj=n(Eye,"A",{href:!0});var kst=s(Rj);zxo=r(kst,"Data2VecTextForMultipleChoice"),kst.forEach(t),Qxo=r(Eye," (Data2VecText model)"),Eye.forEach(t),Wxo=i(O),x4=n(O,"LI",{});var Cye=s(x4);Ide=n(Cye,"STRONG",{});var Sst=s(Ide);Hxo=r(Sst,"distilbert"),Sst.forEach(t),Uxo=r(Cye," \u2014 "),Bj=n(Cye,"A",{href:!0});var Rst=s(Bj);Jxo=r(Rst,"DistilBertForMultipleChoice"),Rst.forEach(t),Yxo=r(Cye," (DistilBERT model)"),Cye.forEach(t),Kxo=i(O),k4=n(O,"LI",{});var wye=s(k4);qde=n(wye,"STRONG",{});var Bst=s(qde);Zxo=r(Bst,"electra"),Bst.forEach(t),eko=r(wye," \u2014 "),Pj=n(wye,"A",{href:!0});var Pst=s(Pj);oko=r(Pst,"ElectraForMultipleChoice"),Pst.forEach(t),rko=r(wye," (ELECTRA model)"),wye.forEach(t),tko=i(O),S4=n(O,"LI",{});var Aye=s(S4);Nde=n(Aye,"STRONG",{});var $st=s(Nde);ako=r($st,"flaubert"),$st.forEach(t),nko=r(Aye," \u2014 "),$j=n(Aye,"A",{href:!0});var Ist=s($j);sko=r(Ist,"FlaubertForMultipleChoice"),Ist.forEach(t),lko=r(Aye," (FlauBERT model)"),Aye.forEach(t),iko=i(O),R4=n(O,"LI",{});var yye=s(R4);jde=n(yye,"STRONG",{});var qst=s(jde);dko=r(qst,"fnet"),qst.forEach(t),cko=r(yye," \u2014 "),Ij=n(yye,"A",{href:!0});var Nst=s(Ij);fko=r(Nst,"FNetForMultipleChoice"),Nst.forEach(t),mko=r(yye," (FNet model)"),yye.forEach(t),gko=i(O),B4=n(O,"LI",{});var Lye=s(B4);Dde=n(Lye,"STRONG",{});var jst=s(Dde);hko=r(jst,"funnel"),jst.forEach(t),pko=r(Lye," \u2014 "),qj=n(Lye,"A",{href:!0});var Dst=s(qj);_ko=r(Dst,"FunnelForMultipleChoice"),Dst.forEach(t),uko=r(Lye," (Funnel Transformer model)"),Lye.forEach(t),bko=i(O),P4=n(O,"LI",{});var xye=s(P4);Gde=n(xye,"STRONG",{});var Gst=s(Gde);vko=r(Gst,"ibert"),Gst.forEach(t),Fko=r(xye," \u2014 "),Nj=n(xye,"A",{href:!0});var Ost=s(Nj);Tko=r(Ost,"IBertForMultipleChoice"),Ost.forEach(t),Mko=r(xye," (I-BERT model)"),xye.forEach(t),Eko=i(O),$4=n(O,"LI",{});var kye=s($4);Ode=n(kye,"STRONG",{});var Vst=s(Ode);Cko=r(Vst,"longformer"),Vst.forEach(t),wko=r(kye," \u2014 "),jj=n(kye,"A",{href:!0});var Xst=s(jj);Ako=r(Xst,"LongformerForMultipleChoice"),Xst.forEach(t),yko=r(kye," (Longformer model)"),kye.forEach(t),Lko=i(O),I4=n(O,"LI",{});var Sye=s(I4);Vde=n(Sye,"STRONG",{});var zst=s(Vde);xko=r(zst,"megatron-bert"),zst.forEach(t),kko=r(Sye," \u2014 "),Dj=n(Sye,"A",{href:!0});var Qst=s(Dj);Sko=r(Qst,"MegatronBertForMultipleChoice"),Qst.forEach(t),Rko=r(Sye," (MegatronBert model)"),Sye.forEach(t),Bko=i(O),q4=n(O,"LI",{});var Rye=s(q4);Xde=n(Rye,"STRONG",{});var Wst=s(Xde);Pko=r(Wst,"mobilebert"),Wst.forEach(t),$ko=r(Rye," \u2014 "),Gj=n(Rye,"A",{href:!0});var Hst=s(Gj);Iko=r(Hst,"MobileBertForMultipleChoice"),Hst.forEach(t),qko=r(Rye," (MobileBERT model)"),Rye.forEach(t),Nko=i(O),N4=n(O,"LI",{});var Bye=s(N4);zde=n(Bye,"STRONG",{});var Ust=s(zde);jko=r(Ust,"mpnet"),Ust.forEach(t),Dko=r(Bye," \u2014 "),Oj=n(Bye,"A",{href:!0});var Jst=s(Oj);Gko=r(Jst,"MPNetForMultipleChoice"),Jst.forEach(t),Oko=r(Bye," (MPNet model)"),Bye.forEach(t),Vko=i(O),j4=n(O,"LI",{});var Pye=s(j4);Qde=n(Pye,"STRONG",{});var Yst=s(Qde);Xko=r(Yst,"nystromformer"),Yst.forEach(t),zko=r(Pye," \u2014 "),Vj=n(Pye,"A",{href:!0});var Kst=s(Vj);Qko=r(Kst,"NystromformerForMultipleChoice"),Kst.forEach(t),Wko=r(Pye," (Nystromformer model)"),Pye.forEach(t),Hko=i(O),D4=n(O,"LI",{});var $ye=s(D4);Wde=n($ye,"STRONG",{});var Zst=s(Wde);Uko=r(Zst,"qdqbert"),Zst.forEach(t),Jko=r($ye," \u2014 "),Xj=n($ye,"A",{href:!0});var elt=s(Xj);Yko=r(elt,"QDQBertForMultipleChoice"),elt.forEach(t),Kko=r($ye," (QDQBert model)"),$ye.forEach(t),Zko=i(O),G4=n(O,"LI",{});var Iye=s(G4);Hde=n(Iye,"STRONG",{});var olt=s(Hde);eSo=r(olt,"rembert"),olt.forEach(t),oSo=r(Iye," \u2014 "),zj=n(Iye,"A",{href:!0});var rlt=s(zj);rSo=r(rlt,"RemBertForMultipleChoice"),rlt.forEach(t),tSo=r(Iye," (RemBERT model)"),Iye.forEach(t),aSo=i(O),O4=n(O,"LI",{});var qye=s(O4);Ude=n(qye,"STRONG",{});var tlt=s(Ude);nSo=r(tlt,"roberta"),tlt.forEach(t),sSo=r(qye," \u2014 "),Qj=n(qye,"A",{href:!0});var alt=s(Qj);lSo=r(alt,"RobertaForMultipleChoice"),alt.forEach(t),iSo=r(qye," (RoBERTa model)"),qye.forEach(t),dSo=i(O),V4=n(O,"LI",{});var Nye=s(V4);Jde=n(Nye,"STRONG",{});var nlt=s(Jde);cSo=r(nlt,"roformer"),nlt.forEach(t),fSo=r(Nye," \u2014 "),Wj=n(Nye,"A",{href:!0});var slt=s(Wj);mSo=r(slt,"RoFormerForMultipleChoice"),slt.forEach(t),gSo=r(Nye," (RoFormer model)"),Nye.forEach(t),hSo=i(O),X4=n(O,"LI",{});var jye=s(X4);Yde=n(jye,"STRONG",{});var llt=s(Yde);pSo=r(llt,"squeezebert"),llt.forEach(t),_So=r(jye," \u2014 "),Hj=n(jye,"A",{href:!0});var ilt=s(Hj);uSo=r(ilt,"SqueezeBertForMultipleChoice"),ilt.forEach(t),bSo=r(jye," (SqueezeBERT model)"),jye.forEach(t),vSo=i(O),z4=n(O,"LI",{});var Dye=s(z4);Kde=n(Dye,"STRONG",{});var dlt=s(Kde);FSo=r(dlt,"xlm"),dlt.forEach(t),TSo=r(Dye," \u2014 "),Uj=n(Dye,"A",{href:!0});var clt=s(Uj);MSo=r(clt,"XLMForMultipleChoice"),clt.forEach(t),ESo=r(Dye," (XLM model)"),Dye.forEach(t),CSo=i(O),Q4=n(O,"LI",{});var Gye=s(Q4);Zde=n(Gye,"STRONG",{});var flt=s(Zde);wSo=r(flt,"xlm-roberta"),flt.forEach(t),ASo=r(Gye," \u2014 "),Jj=n(Gye,"A",{href:!0});var mlt=s(Jj);ySo=r(mlt,"XLMRobertaForMultipleChoice"),mlt.forEach(t),LSo=r(Gye," (XLM-RoBERTa model)"),Gye.forEach(t),xSo=i(O),W4=n(O,"LI",{});var Oye=s(W4);ece=n(Oye,"STRONG",{});var glt=s(ece);kSo=r(glt,"xlm-roberta-xl"),glt.forEach(t),SSo=r(Oye," \u2014 "),Yj=n(Oye,"A",{href:!0});var hlt=s(Yj);RSo=r(hlt,"XLMRobertaXLForMultipleChoice"),hlt.forEach(t),BSo=r(Oye," (XLM-RoBERTa-XL model)"),Oye.forEach(t),PSo=i(O),H4=n(O,"LI",{});var Vye=s(H4);oce=n(Vye,"STRONG",{});var plt=s(oce);$So=r(plt,"xlnet"),plt.forEach(t),ISo=r(Vye," \u2014 "),Kj=n(Vye,"A",{href:!0});var _lt=s(Kj);qSo=r(_lt,"XLNetForMultipleChoice"),_lt.forEach(t),NSo=r(Vye," (XLNet model)"),Vye.forEach(t),jSo=i(O),U4=n(O,"LI",{});var Xye=s(U4);rce=n(Xye,"STRONG",{});var ult=s(rce);DSo=r(ult,"yoso"),ult.forEach(t),GSo=r(Xye," \u2014 "),Zj=n(Xye,"A",{href:!0});var blt=s(Zj);OSo=r(blt,"YosoForMultipleChoice"),blt.forEach(t),VSo=r(Xye," (YOSO model)"),Xye.forEach(t),O.forEach(t),XSo=i(Qt),J4=n(Qt,"P",{});var zye=s(J4);zSo=r(zye,"The model is set in evaluation mode by default using "),tce=n(zye,"CODE",{});var vlt=s(tce);QSo=r(vlt,"model.eval()"),vlt.forEach(t),WSo=r(zye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ace=n(zye,"CODE",{});var Flt=s(ace);HSo=r(Flt,"model.train()"),Flt.forEach(t),zye.forEach(t),USo=i(Qt),nce=n(Qt,"P",{});var Tlt=s(nce);JSo=r(Tlt,"Examples:"),Tlt.forEach(t),YSo=i(Qt),m(vw.$$.fragment,Qt),Qt.forEach(t),gl.forEach(t),APe=i(c),Ad=n(c,"H2",{class:!0});var $Ie=s(Ad);Y4=n($Ie,"A",{id:!0,class:!0,href:!0});var Mlt=s(Y4);sce=n(Mlt,"SPAN",{});var Elt=s(sce);m(Fw.$$.fragment,Elt),Elt.forEach(t),Mlt.forEach(t),KSo=i($Ie),lce=n($Ie,"SPAN",{});var Clt=s(lce);ZSo=r(Clt,"AutoModelForNextSentencePrediction"),Clt.forEach(t),$Ie.forEach(t),yPe=i(c),tr=n(c,"DIV",{class:!0});var pl=s(tr);m(Tw.$$.fragment,pl),eRo=i(pl),yd=n(pl,"P",{});var kJ=s(yd);oRo=r(kJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eD=n(kJ,"A",{href:!0});var wlt=s(eD);rRo=r(wlt,"from_pretrained()"),wlt.forEach(t),tRo=r(kJ," class method or the "),oD=n(kJ,"A",{href:!0});var Alt=s(oD);aRo=r(Alt,"from_config()"),Alt.forEach(t),nRo=r(kJ,` class
method.`),kJ.forEach(t),sRo=i(pl),Mw=n(pl,"P",{});var IIe=s(Mw);lRo=r(IIe,"This class cannot be instantiated directly using "),ice=n(IIe,"CODE",{});var ylt=s(ice);iRo=r(ylt,"__init__()"),ylt.forEach(t),dRo=r(IIe," (throws an error)."),IIe.forEach(t),cRo=i(pl),Yr=n(pl,"DIV",{class:!0});var _l=s(Yr);m(Ew.$$.fragment,_l),fRo=i(_l),dce=n(_l,"P",{});var Llt=s(dce);mRo=r(Llt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Llt.forEach(t),gRo=i(_l),Ld=n(_l,"P",{});var SJ=s(Ld);hRo=r(SJ,`Note:
Loading a model from its configuration file does `),cce=n(SJ,"STRONG",{});var xlt=s(cce);pRo=r(xlt,"not"),xlt.forEach(t),_Ro=r(SJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rD=n(SJ,"A",{href:!0});var klt=s(rD);uRo=r(klt,"from_pretrained()"),klt.forEach(t),bRo=r(SJ," to load the model weights."),SJ.forEach(t),vRo=i(_l),fce=n(_l,"P",{});var Slt=s(fce);FRo=r(Slt,"Examples:"),Slt.forEach(t),TRo=i(_l),m(Cw.$$.fragment,_l),_l.forEach(t),MRo=i(pl),ze=n(pl,"DIV",{class:!0});var Wt=s(ze);m(ww.$$.fragment,Wt),ERo=i(Wt),mce=n(Wt,"P",{});var Rlt=s(mce);CRo=r(Rlt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Rlt.forEach(t),wRo=i(Wt),Ya=n(Wt,"P",{});var oC=s(Ya);ARo=r(oC,"The model class to instantiate is selected based on the "),gce=n(oC,"CODE",{});var Blt=s(gce);yRo=r(Blt,"model_type"),Blt.forEach(t),LRo=r(oC,` property of the config object (either
passed as an argument or loaded from `),hce=n(oC,"CODE",{});var Plt=s(hce);xRo=r(Plt,"pretrained_model_name_or_path"),Plt.forEach(t),kRo=r(oC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pce=n(oC,"CODE",{});var $lt=s(pce);SRo=r($lt,"pretrained_model_name_or_path"),$lt.forEach(t),RRo=r(oC,":"),oC.forEach(t),BRo=i(Wt),da=n(Wt,"UL",{});var ul=s(da);K4=n(ul,"LI",{});var Qye=s(K4);_ce=n(Qye,"STRONG",{});var Ilt=s(_ce);PRo=r(Ilt,"bert"),Ilt.forEach(t),$Ro=r(Qye," \u2014 "),tD=n(Qye,"A",{href:!0});var qlt=s(tD);IRo=r(qlt,"BertForNextSentencePrediction"),qlt.forEach(t),qRo=r(Qye," (BERT model)"),Qye.forEach(t),NRo=i(ul),Z4=n(ul,"LI",{});var Wye=s(Z4);uce=n(Wye,"STRONG",{});var Nlt=s(uce);jRo=r(Nlt,"fnet"),Nlt.forEach(t),DRo=r(Wye," \u2014 "),aD=n(Wye,"A",{href:!0});var jlt=s(aD);GRo=r(jlt,"FNetForNextSentencePrediction"),jlt.forEach(t),ORo=r(Wye," (FNet model)"),Wye.forEach(t),VRo=i(ul),eb=n(ul,"LI",{});var Hye=s(eb);bce=n(Hye,"STRONG",{});var Dlt=s(bce);XRo=r(Dlt,"megatron-bert"),Dlt.forEach(t),zRo=r(Hye," \u2014 "),nD=n(Hye,"A",{href:!0});var Glt=s(nD);QRo=r(Glt,"MegatronBertForNextSentencePrediction"),Glt.forEach(t),WRo=r(Hye," (MegatronBert model)"),Hye.forEach(t),HRo=i(ul),ob=n(ul,"LI",{});var Uye=s(ob);vce=n(Uye,"STRONG",{});var Olt=s(vce);URo=r(Olt,"mobilebert"),Olt.forEach(t),JRo=r(Uye," \u2014 "),sD=n(Uye,"A",{href:!0});var Vlt=s(sD);YRo=r(Vlt,"MobileBertForNextSentencePrediction"),Vlt.forEach(t),KRo=r(Uye," (MobileBERT model)"),Uye.forEach(t),ZRo=i(ul),rb=n(ul,"LI",{});var Jye=s(rb);Fce=n(Jye,"STRONG",{});var Xlt=s(Fce);eBo=r(Xlt,"qdqbert"),Xlt.forEach(t),oBo=r(Jye," \u2014 "),lD=n(Jye,"A",{href:!0});var zlt=s(lD);rBo=r(zlt,"QDQBertForNextSentencePrediction"),zlt.forEach(t),tBo=r(Jye," (QDQBert model)"),Jye.forEach(t),ul.forEach(t),aBo=i(Wt),tb=n(Wt,"P",{});var Yye=s(tb);nBo=r(Yye,"The model is set in evaluation mode by default using "),Tce=n(Yye,"CODE",{});var Qlt=s(Tce);sBo=r(Qlt,"model.eval()"),Qlt.forEach(t),lBo=r(Yye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mce=n(Yye,"CODE",{});var Wlt=s(Mce);iBo=r(Wlt,"model.train()"),Wlt.forEach(t),Yye.forEach(t),dBo=i(Wt),Ece=n(Wt,"P",{});var Hlt=s(Ece);cBo=r(Hlt,"Examples:"),Hlt.forEach(t),fBo=i(Wt),m(Aw.$$.fragment,Wt),Wt.forEach(t),pl.forEach(t),LPe=i(c),xd=n(c,"H2",{class:!0});var qIe=s(xd);ab=n(qIe,"A",{id:!0,class:!0,href:!0});var Ult=s(ab);Cce=n(Ult,"SPAN",{});var Jlt=s(Cce);m(yw.$$.fragment,Jlt),Jlt.forEach(t),Ult.forEach(t),mBo=i(qIe),wce=n(qIe,"SPAN",{});var Ylt=s(wce);gBo=r(Ylt,"AutoModelForTokenClassification"),Ylt.forEach(t),qIe.forEach(t),xPe=i(c),ar=n(c,"DIV",{class:!0});var bl=s(ar);m(Lw.$$.fragment,bl),hBo=i(bl),kd=n(bl,"P",{});var RJ=s(kd);pBo=r(RJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),iD=n(RJ,"A",{href:!0});var Klt=s(iD);_Bo=r(Klt,"from_pretrained()"),Klt.forEach(t),uBo=r(RJ," class method or the "),dD=n(RJ,"A",{href:!0});var Zlt=s(dD);bBo=r(Zlt,"from_config()"),Zlt.forEach(t),vBo=r(RJ,` class
method.`),RJ.forEach(t),FBo=i(bl),xw=n(bl,"P",{});var NIe=s(xw);TBo=r(NIe,"This class cannot be instantiated directly using "),Ace=n(NIe,"CODE",{});var eit=s(Ace);MBo=r(eit,"__init__()"),eit.forEach(t),EBo=r(NIe," (throws an error)."),NIe.forEach(t),CBo=i(bl),Kr=n(bl,"DIV",{class:!0});var vl=s(Kr);m(kw.$$.fragment,vl),wBo=i(vl),yce=n(vl,"P",{});var oit=s(yce);ABo=r(oit,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),oit.forEach(t),yBo=i(vl),Sd=n(vl,"P",{});var BJ=s(Sd);LBo=r(BJ,`Note:
Loading a model from its configuration file does `),Lce=n(BJ,"STRONG",{});var rit=s(Lce);xBo=r(rit,"not"),rit.forEach(t),kBo=r(BJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cD=n(BJ,"A",{href:!0});var tit=s(cD);SBo=r(tit,"from_pretrained()"),tit.forEach(t),RBo=r(BJ," to load the model weights."),BJ.forEach(t),BBo=i(vl),xce=n(vl,"P",{});var ait=s(xce);PBo=r(ait,"Examples:"),ait.forEach(t),$Bo=i(vl),m(Sw.$$.fragment,vl),vl.forEach(t),IBo=i(bl),Qe=n(bl,"DIV",{class:!0});var Ht=s(Qe);m(Rw.$$.fragment,Ht),qBo=i(Ht),kce=n(Ht,"P",{});var nit=s(kce);NBo=r(nit,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),nit.forEach(t),jBo=i(Ht),Ka=n(Ht,"P",{});var rC=s(Ka);DBo=r(rC,"The model class to instantiate is selected based on the "),Sce=n(rC,"CODE",{});var sit=s(Sce);GBo=r(sit,"model_type"),sit.forEach(t),OBo=r(rC,` property of the config object (either
passed as an argument or loaded from `),Rce=n(rC,"CODE",{});var lit=s(Rce);VBo=r(lit,"pretrained_model_name_or_path"),lit.forEach(t),XBo=r(rC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bce=n(rC,"CODE",{});var iit=s(Bce);zBo=r(iit,"pretrained_model_name_or_path"),iit.forEach(t),QBo=r(rC,":"),rC.forEach(t),WBo=i(Ht),j=n(Ht,"UL",{});var D=s(j);nb=n(D,"LI",{});var Kye=s(nb);Pce=n(Kye,"STRONG",{});var dit=s(Pce);HBo=r(dit,"albert"),dit.forEach(t),UBo=r(Kye," \u2014 "),fD=n(Kye,"A",{href:!0});var cit=s(fD);JBo=r(cit,"AlbertForTokenClassification"),cit.forEach(t),YBo=r(Kye," (ALBERT model)"),Kye.forEach(t),KBo=i(D),sb=n(D,"LI",{});var Zye=s(sb);$ce=n(Zye,"STRONG",{});var fit=s($ce);ZBo=r(fit,"bert"),fit.forEach(t),ePo=r(Zye," \u2014 "),mD=n(Zye,"A",{href:!0});var mit=s(mD);oPo=r(mit,"BertForTokenClassification"),mit.forEach(t),rPo=r(Zye," (BERT model)"),Zye.forEach(t),tPo=i(D),lb=n(D,"LI",{});var e8e=s(lb);Ice=n(e8e,"STRONG",{});var git=s(Ice);aPo=r(git,"big_bird"),git.forEach(t),nPo=r(e8e," \u2014 "),gD=n(e8e,"A",{href:!0});var hit=s(gD);sPo=r(hit,"BigBirdForTokenClassification"),hit.forEach(t),lPo=r(e8e," (BigBird model)"),e8e.forEach(t),iPo=i(D),ib=n(D,"LI",{});var o8e=s(ib);qce=n(o8e,"STRONG",{});var pit=s(qce);dPo=r(pit,"camembert"),pit.forEach(t),cPo=r(o8e," \u2014 "),hD=n(o8e,"A",{href:!0});var _it=s(hD);fPo=r(_it,"CamembertForTokenClassification"),_it.forEach(t),mPo=r(o8e," (CamemBERT model)"),o8e.forEach(t),gPo=i(D),db=n(D,"LI",{});var r8e=s(db);Nce=n(r8e,"STRONG",{});var uit=s(Nce);hPo=r(uit,"canine"),uit.forEach(t),pPo=r(r8e," \u2014 "),pD=n(r8e,"A",{href:!0});var bit=s(pD);_Po=r(bit,"CanineForTokenClassification"),bit.forEach(t),uPo=r(r8e," (Canine model)"),r8e.forEach(t),bPo=i(D),cb=n(D,"LI",{});var t8e=s(cb);jce=n(t8e,"STRONG",{});var vit=s(jce);vPo=r(vit,"convbert"),vit.forEach(t),FPo=r(t8e," \u2014 "),_D=n(t8e,"A",{href:!0});var Fit=s(_D);TPo=r(Fit,"ConvBertForTokenClassification"),Fit.forEach(t),MPo=r(t8e," (ConvBERT model)"),t8e.forEach(t),EPo=i(D),fb=n(D,"LI",{});var a8e=s(fb);Dce=n(a8e,"STRONG",{});var Tit=s(Dce);CPo=r(Tit,"data2vec-text"),Tit.forEach(t),wPo=r(a8e," \u2014 "),uD=n(a8e,"A",{href:!0});var Mit=s(uD);APo=r(Mit,"Data2VecTextForTokenClassification"),Mit.forEach(t),yPo=r(a8e," (Data2VecText model)"),a8e.forEach(t),LPo=i(D),mb=n(D,"LI",{});var n8e=s(mb);Gce=n(n8e,"STRONG",{});var Eit=s(Gce);xPo=r(Eit,"deberta"),Eit.forEach(t),kPo=r(n8e," \u2014 "),bD=n(n8e,"A",{href:!0});var Cit=s(bD);SPo=r(Cit,"DebertaForTokenClassification"),Cit.forEach(t),RPo=r(n8e," (DeBERTa model)"),n8e.forEach(t),BPo=i(D),gb=n(D,"LI",{});var s8e=s(gb);Oce=n(s8e,"STRONG",{});var wit=s(Oce);PPo=r(wit,"deberta-v2"),wit.forEach(t),$Po=r(s8e," \u2014 "),vD=n(s8e,"A",{href:!0});var Ait=s(vD);IPo=r(Ait,"DebertaV2ForTokenClassification"),Ait.forEach(t),qPo=r(s8e," (DeBERTa-v2 model)"),s8e.forEach(t),NPo=i(D),hb=n(D,"LI",{});var l8e=s(hb);Vce=n(l8e,"STRONG",{});var yit=s(Vce);jPo=r(yit,"distilbert"),yit.forEach(t),DPo=r(l8e," \u2014 "),FD=n(l8e,"A",{href:!0});var Lit=s(FD);GPo=r(Lit,"DistilBertForTokenClassification"),Lit.forEach(t),OPo=r(l8e," (DistilBERT model)"),l8e.forEach(t),VPo=i(D),pb=n(D,"LI",{});var i8e=s(pb);Xce=n(i8e,"STRONG",{});var xit=s(Xce);XPo=r(xit,"electra"),xit.forEach(t),zPo=r(i8e," \u2014 "),TD=n(i8e,"A",{href:!0});var kit=s(TD);QPo=r(kit,"ElectraForTokenClassification"),kit.forEach(t),WPo=r(i8e," (ELECTRA model)"),i8e.forEach(t),HPo=i(D),_b=n(D,"LI",{});var d8e=s(_b);zce=n(d8e,"STRONG",{});var Sit=s(zce);UPo=r(Sit,"flaubert"),Sit.forEach(t),JPo=r(d8e," \u2014 "),MD=n(d8e,"A",{href:!0});var Rit=s(MD);YPo=r(Rit,"FlaubertForTokenClassification"),Rit.forEach(t),KPo=r(d8e," (FlauBERT model)"),d8e.forEach(t),ZPo=i(D),ub=n(D,"LI",{});var c8e=s(ub);Qce=n(c8e,"STRONG",{});var Bit=s(Qce);e$o=r(Bit,"fnet"),Bit.forEach(t),o$o=r(c8e," \u2014 "),ED=n(c8e,"A",{href:!0});var Pit=s(ED);r$o=r(Pit,"FNetForTokenClassification"),Pit.forEach(t),t$o=r(c8e," (FNet model)"),c8e.forEach(t),a$o=i(D),bb=n(D,"LI",{});var f8e=s(bb);Wce=n(f8e,"STRONG",{});var $it=s(Wce);n$o=r($it,"funnel"),$it.forEach(t),s$o=r(f8e," \u2014 "),CD=n(f8e,"A",{href:!0});var Iit=s(CD);l$o=r(Iit,"FunnelForTokenClassification"),Iit.forEach(t),i$o=r(f8e," (Funnel Transformer model)"),f8e.forEach(t),d$o=i(D),vb=n(D,"LI",{});var m8e=s(vb);Hce=n(m8e,"STRONG",{});var qit=s(Hce);c$o=r(qit,"gpt2"),qit.forEach(t),f$o=r(m8e," \u2014 "),wD=n(m8e,"A",{href:!0});var Nit=s(wD);m$o=r(Nit,"GPT2ForTokenClassification"),Nit.forEach(t),g$o=r(m8e," (OpenAI GPT-2 model)"),m8e.forEach(t),h$o=i(D),Fb=n(D,"LI",{});var g8e=s(Fb);Uce=n(g8e,"STRONG",{});var jit=s(Uce);p$o=r(jit,"ibert"),jit.forEach(t),_$o=r(g8e," \u2014 "),AD=n(g8e,"A",{href:!0});var Dit=s(AD);u$o=r(Dit,"IBertForTokenClassification"),Dit.forEach(t),b$o=r(g8e," (I-BERT model)"),g8e.forEach(t),v$o=i(D),Tb=n(D,"LI",{});var h8e=s(Tb);Jce=n(h8e,"STRONG",{});var Git=s(Jce);F$o=r(Git,"layoutlm"),Git.forEach(t),T$o=r(h8e," \u2014 "),yD=n(h8e,"A",{href:!0});var Oit=s(yD);M$o=r(Oit,"LayoutLMForTokenClassification"),Oit.forEach(t),E$o=r(h8e," (LayoutLM model)"),h8e.forEach(t),C$o=i(D),Mb=n(D,"LI",{});var p8e=s(Mb);Yce=n(p8e,"STRONG",{});var Vit=s(Yce);w$o=r(Vit,"layoutlmv2"),Vit.forEach(t),A$o=r(p8e," \u2014 "),LD=n(p8e,"A",{href:!0});var Xit=s(LD);y$o=r(Xit,"LayoutLMv2ForTokenClassification"),Xit.forEach(t),L$o=r(p8e," (LayoutLMv2 model)"),p8e.forEach(t),x$o=i(D),Eb=n(D,"LI",{});var _8e=s(Eb);Kce=n(_8e,"STRONG",{});var zit=s(Kce);k$o=r(zit,"longformer"),zit.forEach(t),S$o=r(_8e," \u2014 "),xD=n(_8e,"A",{href:!0});var Qit=s(xD);R$o=r(Qit,"LongformerForTokenClassification"),Qit.forEach(t),B$o=r(_8e," (Longformer model)"),_8e.forEach(t),P$o=i(D),Cb=n(D,"LI",{});var u8e=s(Cb);Zce=n(u8e,"STRONG",{});var Wit=s(Zce);$$o=r(Wit,"megatron-bert"),Wit.forEach(t),I$o=r(u8e," \u2014 "),kD=n(u8e,"A",{href:!0});var Hit=s(kD);q$o=r(Hit,"MegatronBertForTokenClassification"),Hit.forEach(t),N$o=r(u8e," (MegatronBert model)"),u8e.forEach(t),j$o=i(D),wb=n(D,"LI",{});var b8e=s(wb);efe=n(b8e,"STRONG",{});var Uit=s(efe);D$o=r(Uit,"mobilebert"),Uit.forEach(t),G$o=r(b8e," \u2014 "),SD=n(b8e,"A",{href:!0});var Jit=s(SD);O$o=r(Jit,"MobileBertForTokenClassification"),Jit.forEach(t),V$o=r(b8e," (MobileBERT model)"),b8e.forEach(t),X$o=i(D),Ab=n(D,"LI",{});var v8e=s(Ab);ofe=n(v8e,"STRONG",{});var Yit=s(ofe);z$o=r(Yit,"mpnet"),Yit.forEach(t),Q$o=r(v8e," \u2014 "),RD=n(v8e,"A",{href:!0});var Kit=s(RD);W$o=r(Kit,"MPNetForTokenClassification"),Kit.forEach(t),H$o=r(v8e," (MPNet model)"),v8e.forEach(t),U$o=i(D),yb=n(D,"LI",{});var F8e=s(yb);rfe=n(F8e,"STRONG",{});var Zit=s(rfe);J$o=r(Zit,"nystromformer"),Zit.forEach(t),Y$o=r(F8e," \u2014 "),BD=n(F8e,"A",{href:!0});var edt=s(BD);K$o=r(edt,"NystromformerForTokenClassification"),edt.forEach(t),Z$o=r(F8e," (Nystromformer model)"),F8e.forEach(t),eIo=i(D),Lb=n(D,"LI",{});var T8e=s(Lb);tfe=n(T8e,"STRONG",{});var odt=s(tfe);oIo=r(odt,"qdqbert"),odt.forEach(t),rIo=r(T8e," \u2014 "),PD=n(T8e,"A",{href:!0});var rdt=s(PD);tIo=r(rdt,"QDQBertForTokenClassification"),rdt.forEach(t),aIo=r(T8e," (QDQBert model)"),T8e.forEach(t),nIo=i(D),xb=n(D,"LI",{});var M8e=s(xb);afe=n(M8e,"STRONG",{});var tdt=s(afe);sIo=r(tdt,"rembert"),tdt.forEach(t),lIo=r(M8e," \u2014 "),$D=n(M8e,"A",{href:!0});var adt=s($D);iIo=r(adt,"RemBertForTokenClassification"),adt.forEach(t),dIo=r(M8e," (RemBERT model)"),M8e.forEach(t),cIo=i(D),kb=n(D,"LI",{});var E8e=s(kb);nfe=n(E8e,"STRONG",{});var ndt=s(nfe);fIo=r(ndt,"roberta"),ndt.forEach(t),mIo=r(E8e," \u2014 "),ID=n(E8e,"A",{href:!0});var sdt=s(ID);gIo=r(sdt,"RobertaForTokenClassification"),sdt.forEach(t),hIo=r(E8e," (RoBERTa model)"),E8e.forEach(t),pIo=i(D),Sb=n(D,"LI",{});var C8e=s(Sb);sfe=n(C8e,"STRONG",{});var ldt=s(sfe);_Io=r(ldt,"roformer"),ldt.forEach(t),uIo=r(C8e," \u2014 "),qD=n(C8e,"A",{href:!0});var idt=s(qD);bIo=r(idt,"RoFormerForTokenClassification"),idt.forEach(t),vIo=r(C8e," (RoFormer model)"),C8e.forEach(t),FIo=i(D),Rb=n(D,"LI",{});var w8e=s(Rb);lfe=n(w8e,"STRONG",{});var ddt=s(lfe);TIo=r(ddt,"squeezebert"),ddt.forEach(t),MIo=r(w8e," \u2014 "),ND=n(w8e,"A",{href:!0});var cdt=s(ND);EIo=r(cdt,"SqueezeBertForTokenClassification"),cdt.forEach(t),CIo=r(w8e," (SqueezeBERT model)"),w8e.forEach(t),wIo=i(D),Bb=n(D,"LI",{});var A8e=s(Bb);ife=n(A8e,"STRONG",{});var fdt=s(ife);AIo=r(fdt,"xlm"),fdt.forEach(t),yIo=r(A8e," \u2014 "),jD=n(A8e,"A",{href:!0});var mdt=s(jD);LIo=r(mdt,"XLMForTokenClassification"),mdt.forEach(t),xIo=r(A8e," (XLM model)"),A8e.forEach(t),kIo=i(D),Pb=n(D,"LI",{});var y8e=s(Pb);dfe=n(y8e,"STRONG",{});var gdt=s(dfe);SIo=r(gdt,"xlm-roberta"),gdt.forEach(t),RIo=r(y8e," \u2014 "),DD=n(y8e,"A",{href:!0});var hdt=s(DD);BIo=r(hdt,"XLMRobertaForTokenClassification"),hdt.forEach(t),PIo=r(y8e," (XLM-RoBERTa model)"),y8e.forEach(t),$Io=i(D),$b=n(D,"LI",{});var L8e=s($b);cfe=n(L8e,"STRONG",{});var pdt=s(cfe);IIo=r(pdt,"xlm-roberta-xl"),pdt.forEach(t),qIo=r(L8e," \u2014 "),GD=n(L8e,"A",{href:!0});var _dt=s(GD);NIo=r(_dt,"XLMRobertaXLForTokenClassification"),_dt.forEach(t),jIo=r(L8e," (XLM-RoBERTa-XL model)"),L8e.forEach(t),DIo=i(D),Ib=n(D,"LI",{});var x8e=s(Ib);ffe=n(x8e,"STRONG",{});var udt=s(ffe);GIo=r(udt,"xlnet"),udt.forEach(t),OIo=r(x8e," \u2014 "),OD=n(x8e,"A",{href:!0});var bdt=s(OD);VIo=r(bdt,"XLNetForTokenClassification"),bdt.forEach(t),XIo=r(x8e," (XLNet model)"),x8e.forEach(t),zIo=i(D),qb=n(D,"LI",{});var k8e=s(qb);mfe=n(k8e,"STRONG",{});var vdt=s(mfe);QIo=r(vdt,"yoso"),vdt.forEach(t),WIo=r(k8e," \u2014 "),VD=n(k8e,"A",{href:!0});var Fdt=s(VD);HIo=r(Fdt,"YosoForTokenClassification"),Fdt.forEach(t),UIo=r(k8e," (YOSO model)"),k8e.forEach(t),D.forEach(t),JIo=i(Ht),Nb=n(Ht,"P",{});var S8e=s(Nb);YIo=r(S8e,"The model is set in evaluation mode by default using "),gfe=n(S8e,"CODE",{});var Tdt=s(gfe);KIo=r(Tdt,"model.eval()"),Tdt.forEach(t),ZIo=r(S8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hfe=n(S8e,"CODE",{});var Mdt=s(hfe);eqo=r(Mdt,"model.train()"),Mdt.forEach(t),S8e.forEach(t),oqo=i(Ht),pfe=n(Ht,"P",{});var Edt=s(pfe);rqo=r(Edt,"Examples:"),Edt.forEach(t),tqo=i(Ht),m(Bw.$$.fragment,Ht),Ht.forEach(t),bl.forEach(t),kPe=i(c),Rd=n(c,"H2",{class:!0});var jIe=s(Rd);jb=n(jIe,"A",{id:!0,class:!0,href:!0});var Cdt=s(jb);_fe=n(Cdt,"SPAN",{});var wdt=s(_fe);m(Pw.$$.fragment,wdt),wdt.forEach(t),Cdt.forEach(t),aqo=i(jIe),ufe=n(jIe,"SPAN",{});var Adt=s(ufe);nqo=r(Adt,"AutoModelForQuestionAnswering"),Adt.forEach(t),jIe.forEach(t),SPe=i(c),nr=n(c,"DIV",{class:!0});var Fl=s(nr);m($w.$$.fragment,Fl),sqo=i(Fl),Bd=n(Fl,"P",{});var PJ=s(Bd);lqo=r(PJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),XD=n(PJ,"A",{href:!0});var ydt=s(XD);iqo=r(ydt,"from_pretrained()"),ydt.forEach(t),dqo=r(PJ," class method or the "),zD=n(PJ,"A",{href:!0});var Ldt=s(zD);cqo=r(Ldt,"from_config()"),Ldt.forEach(t),fqo=r(PJ,` class
method.`),PJ.forEach(t),mqo=i(Fl),Iw=n(Fl,"P",{});var DIe=s(Iw);gqo=r(DIe,"This class cannot be instantiated directly using "),bfe=n(DIe,"CODE",{});var xdt=s(bfe);hqo=r(xdt,"__init__()"),xdt.forEach(t),pqo=r(DIe," (throws an error)."),DIe.forEach(t),_qo=i(Fl),Zr=n(Fl,"DIV",{class:!0});var Tl=s(Zr);m(qw.$$.fragment,Tl),uqo=i(Tl),vfe=n(Tl,"P",{});var kdt=s(vfe);bqo=r(kdt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kdt.forEach(t),vqo=i(Tl),Pd=n(Tl,"P",{});var $J=s(Pd);Fqo=r($J,`Note:
Loading a model from its configuration file does `),Ffe=n($J,"STRONG",{});var Sdt=s(Ffe);Tqo=r(Sdt,"not"),Sdt.forEach(t),Mqo=r($J,` load the model weights. It only affects the
model\u2019s configuration. Use `),QD=n($J,"A",{href:!0});var Rdt=s(QD);Eqo=r(Rdt,"from_pretrained()"),Rdt.forEach(t),Cqo=r($J," to load the model weights."),$J.forEach(t),wqo=i(Tl),Tfe=n(Tl,"P",{});var Bdt=s(Tfe);Aqo=r(Bdt,"Examples:"),Bdt.forEach(t),yqo=i(Tl),m(Nw.$$.fragment,Tl),Tl.forEach(t),Lqo=i(Fl),We=n(Fl,"DIV",{class:!0});var Ut=s(We);m(jw.$$.fragment,Ut),xqo=i(Ut),Mfe=n(Ut,"P",{});var Pdt=s(Mfe);kqo=r(Pdt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Pdt.forEach(t),Sqo=i(Ut),Za=n(Ut,"P",{});var tC=s(Za);Rqo=r(tC,"The model class to instantiate is selected based on the "),Efe=n(tC,"CODE",{});var $dt=s(Efe);Bqo=r($dt,"model_type"),$dt.forEach(t),Pqo=r(tC,` property of the config object (either
passed as an argument or loaded from `),Cfe=n(tC,"CODE",{});var Idt=s(Cfe);$qo=r(Idt,"pretrained_model_name_or_path"),Idt.forEach(t),Iqo=r(tC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=n(tC,"CODE",{});var qdt=s(wfe);qqo=r(qdt,"pretrained_model_name_or_path"),qdt.forEach(t),Nqo=r(tC,":"),tC.forEach(t),jqo=i(Ut),R=n(Ut,"UL",{});var P=s(R);Db=n(P,"LI",{});var R8e=s(Db);Afe=n(R8e,"STRONG",{});var Ndt=s(Afe);Dqo=r(Ndt,"albert"),Ndt.forEach(t),Gqo=r(R8e," \u2014 "),WD=n(R8e,"A",{href:!0});var jdt=s(WD);Oqo=r(jdt,"AlbertForQuestionAnswering"),jdt.forEach(t),Vqo=r(R8e," (ALBERT model)"),R8e.forEach(t),Xqo=i(P),Gb=n(P,"LI",{});var B8e=s(Gb);yfe=n(B8e,"STRONG",{});var Ddt=s(yfe);zqo=r(Ddt,"bart"),Ddt.forEach(t),Qqo=r(B8e," \u2014 "),HD=n(B8e,"A",{href:!0});var Gdt=s(HD);Wqo=r(Gdt,"BartForQuestionAnswering"),Gdt.forEach(t),Hqo=r(B8e," (BART model)"),B8e.forEach(t),Uqo=i(P),Ob=n(P,"LI",{});var P8e=s(Ob);Lfe=n(P8e,"STRONG",{});var Odt=s(Lfe);Jqo=r(Odt,"bert"),Odt.forEach(t),Yqo=r(P8e," \u2014 "),UD=n(P8e,"A",{href:!0});var Vdt=s(UD);Kqo=r(Vdt,"BertForQuestionAnswering"),Vdt.forEach(t),Zqo=r(P8e," (BERT model)"),P8e.forEach(t),eNo=i(P),Vb=n(P,"LI",{});var $8e=s(Vb);xfe=n($8e,"STRONG",{});var Xdt=s(xfe);oNo=r(Xdt,"big_bird"),Xdt.forEach(t),rNo=r($8e," \u2014 "),JD=n($8e,"A",{href:!0});var zdt=s(JD);tNo=r(zdt,"BigBirdForQuestionAnswering"),zdt.forEach(t),aNo=r($8e," (BigBird model)"),$8e.forEach(t),nNo=i(P),Xb=n(P,"LI",{});var I8e=s(Xb);kfe=n(I8e,"STRONG",{});var Qdt=s(kfe);sNo=r(Qdt,"bigbird_pegasus"),Qdt.forEach(t),lNo=r(I8e," \u2014 "),YD=n(I8e,"A",{href:!0});var Wdt=s(YD);iNo=r(Wdt,"BigBirdPegasusForQuestionAnswering"),Wdt.forEach(t),dNo=r(I8e," (BigBirdPegasus model)"),I8e.forEach(t),cNo=i(P),zb=n(P,"LI",{});var q8e=s(zb);Sfe=n(q8e,"STRONG",{});var Hdt=s(Sfe);fNo=r(Hdt,"camembert"),Hdt.forEach(t),mNo=r(q8e," \u2014 "),KD=n(q8e,"A",{href:!0});var Udt=s(KD);gNo=r(Udt,"CamembertForQuestionAnswering"),Udt.forEach(t),hNo=r(q8e," (CamemBERT model)"),q8e.forEach(t),pNo=i(P),Qb=n(P,"LI",{});var N8e=s(Qb);Rfe=n(N8e,"STRONG",{});var Jdt=s(Rfe);_No=r(Jdt,"canine"),Jdt.forEach(t),uNo=r(N8e," \u2014 "),ZD=n(N8e,"A",{href:!0});var Ydt=s(ZD);bNo=r(Ydt,"CanineForQuestionAnswering"),Ydt.forEach(t),vNo=r(N8e," (Canine model)"),N8e.forEach(t),FNo=i(P),Wb=n(P,"LI",{});var j8e=s(Wb);Bfe=n(j8e,"STRONG",{});var Kdt=s(Bfe);TNo=r(Kdt,"convbert"),Kdt.forEach(t),MNo=r(j8e," \u2014 "),eG=n(j8e,"A",{href:!0});var Zdt=s(eG);ENo=r(Zdt,"ConvBertForQuestionAnswering"),Zdt.forEach(t),CNo=r(j8e," (ConvBERT model)"),j8e.forEach(t),wNo=i(P),Hb=n(P,"LI",{});var D8e=s(Hb);Pfe=n(D8e,"STRONG",{});var ect=s(Pfe);ANo=r(ect,"data2vec-text"),ect.forEach(t),yNo=r(D8e," \u2014 "),oG=n(D8e,"A",{href:!0});var oct=s(oG);LNo=r(oct,"Data2VecTextForQuestionAnswering"),oct.forEach(t),xNo=r(D8e," (Data2VecText model)"),D8e.forEach(t),kNo=i(P),Ub=n(P,"LI",{});var G8e=s(Ub);$fe=n(G8e,"STRONG",{});var rct=s($fe);SNo=r(rct,"deberta"),rct.forEach(t),RNo=r(G8e," \u2014 "),rG=n(G8e,"A",{href:!0});var tct=s(rG);BNo=r(tct,"DebertaForQuestionAnswering"),tct.forEach(t),PNo=r(G8e," (DeBERTa model)"),G8e.forEach(t),$No=i(P),Jb=n(P,"LI",{});var O8e=s(Jb);Ife=n(O8e,"STRONG",{});var act=s(Ife);INo=r(act,"deberta-v2"),act.forEach(t),qNo=r(O8e," \u2014 "),tG=n(O8e,"A",{href:!0});var nct=s(tG);NNo=r(nct,"DebertaV2ForQuestionAnswering"),nct.forEach(t),jNo=r(O8e," (DeBERTa-v2 model)"),O8e.forEach(t),DNo=i(P),Yb=n(P,"LI",{});var V8e=s(Yb);qfe=n(V8e,"STRONG",{});var sct=s(qfe);GNo=r(sct,"distilbert"),sct.forEach(t),ONo=r(V8e," \u2014 "),aG=n(V8e,"A",{href:!0});var lct=s(aG);VNo=r(lct,"DistilBertForQuestionAnswering"),lct.forEach(t),XNo=r(V8e," (DistilBERT model)"),V8e.forEach(t),zNo=i(P),Kb=n(P,"LI",{});var X8e=s(Kb);Nfe=n(X8e,"STRONG",{});var ict=s(Nfe);QNo=r(ict,"electra"),ict.forEach(t),WNo=r(X8e," \u2014 "),nG=n(X8e,"A",{href:!0});var dct=s(nG);HNo=r(dct,"ElectraForQuestionAnswering"),dct.forEach(t),UNo=r(X8e," (ELECTRA model)"),X8e.forEach(t),JNo=i(P),Zb=n(P,"LI",{});var z8e=s(Zb);jfe=n(z8e,"STRONG",{});var cct=s(jfe);YNo=r(cct,"flaubert"),cct.forEach(t),KNo=r(z8e," \u2014 "),sG=n(z8e,"A",{href:!0});var fct=s(sG);ZNo=r(fct,"FlaubertForQuestionAnsweringSimple"),fct.forEach(t),ejo=r(z8e," (FlauBERT model)"),z8e.forEach(t),ojo=i(P),e2=n(P,"LI",{});var Q8e=s(e2);Dfe=n(Q8e,"STRONG",{});var mct=s(Dfe);rjo=r(mct,"fnet"),mct.forEach(t),tjo=r(Q8e," \u2014 "),lG=n(Q8e,"A",{href:!0});var gct=s(lG);ajo=r(gct,"FNetForQuestionAnswering"),gct.forEach(t),njo=r(Q8e," (FNet model)"),Q8e.forEach(t),sjo=i(P),o2=n(P,"LI",{});var W8e=s(o2);Gfe=n(W8e,"STRONG",{});var hct=s(Gfe);ljo=r(hct,"funnel"),hct.forEach(t),ijo=r(W8e," \u2014 "),iG=n(W8e,"A",{href:!0});var pct=s(iG);djo=r(pct,"FunnelForQuestionAnswering"),pct.forEach(t),cjo=r(W8e," (Funnel Transformer model)"),W8e.forEach(t),fjo=i(P),r2=n(P,"LI",{});var H8e=s(r2);Ofe=n(H8e,"STRONG",{});var _ct=s(Ofe);mjo=r(_ct,"gptj"),_ct.forEach(t),gjo=r(H8e," \u2014 "),dG=n(H8e,"A",{href:!0});var uct=s(dG);hjo=r(uct,"GPTJForQuestionAnswering"),uct.forEach(t),pjo=r(H8e," (GPT-J model)"),H8e.forEach(t),_jo=i(P),t2=n(P,"LI",{});var U8e=s(t2);Vfe=n(U8e,"STRONG",{});var bct=s(Vfe);ujo=r(bct,"ibert"),bct.forEach(t),bjo=r(U8e," \u2014 "),cG=n(U8e,"A",{href:!0});var vct=s(cG);vjo=r(vct,"IBertForQuestionAnswering"),vct.forEach(t),Fjo=r(U8e," (I-BERT model)"),U8e.forEach(t),Tjo=i(P),a2=n(P,"LI",{});var J8e=s(a2);Xfe=n(J8e,"STRONG",{});var Fct=s(Xfe);Mjo=r(Fct,"layoutlmv2"),Fct.forEach(t),Ejo=r(J8e," \u2014 "),fG=n(J8e,"A",{href:!0});var Tct=s(fG);Cjo=r(Tct,"LayoutLMv2ForQuestionAnswering"),Tct.forEach(t),wjo=r(J8e," (LayoutLMv2 model)"),J8e.forEach(t),Ajo=i(P),n2=n(P,"LI",{});var Y8e=s(n2);zfe=n(Y8e,"STRONG",{});var Mct=s(zfe);yjo=r(Mct,"led"),Mct.forEach(t),Ljo=r(Y8e," \u2014 "),mG=n(Y8e,"A",{href:!0});var Ect=s(mG);xjo=r(Ect,"LEDForQuestionAnswering"),Ect.forEach(t),kjo=r(Y8e," (LED model)"),Y8e.forEach(t),Sjo=i(P),s2=n(P,"LI",{});var K8e=s(s2);Qfe=n(K8e,"STRONG",{});var Cct=s(Qfe);Rjo=r(Cct,"longformer"),Cct.forEach(t),Bjo=r(K8e," \u2014 "),gG=n(K8e,"A",{href:!0});var wct=s(gG);Pjo=r(wct,"LongformerForQuestionAnswering"),wct.forEach(t),$jo=r(K8e," (Longformer model)"),K8e.forEach(t),Ijo=i(P),l2=n(P,"LI",{});var Z8e=s(l2);Wfe=n(Z8e,"STRONG",{});var Act=s(Wfe);qjo=r(Act,"lxmert"),Act.forEach(t),Njo=r(Z8e," \u2014 "),hG=n(Z8e,"A",{href:!0});var yct=s(hG);jjo=r(yct,"LxmertForQuestionAnswering"),yct.forEach(t),Djo=r(Z8e," (LXMERT model)"),Z8e.forEach(t),Gjo=i(P),i2=n(P,"LI",{});var eLe=s(i2);Hfe=n(eLe,"STRONG",{});var Lct=s(Hfe);Ojo=r(Lct,"mbart"),Lct.forEach(t),Vjo=r(eLe," \u2014 "),pG=n(eLe,"A",{href:!0});var xct=s(pG);Xjo=r(xct,"MBartForQuestionAnswering"),xct.forEach(t),zjo=r(eLe," (mBART model)"),eLe.forEach(t),Qjo=i(P),d2=n(P,"LI",{});var oLe=s(d2);Ufe=n(oLe,"STRONG",{});var kct=s(Ufe);Wjo=r(kct,"megatron-bert"),kct.forEach(t),Hjo=r(oLe," \u2014 "),_G=n(oLe,"A",{href:!0});var Sct=s(_G);Ujo=r(Sct,"MegatronBertForQuestionAnswering"),Sct.forEach(t),Jjo=r(oLe," (MegatronBert model)"),oLe.forEach(t),Yjo=i(P),c2=n(P,"LI",{});var rLe=s(c2);Jfe=n(rLe,"STRONG",{});var Rct=s(Jfe);Kjo=r(Rct,"mobilebert"),Rct.forEach(t),Zjo=r(rLe," \u2014 "),uG=n(rLe,"A",{href:!0});var Bct=s(uG);eDo=r(Bct,"MobileBertForQuestionAnswering"),Bct.forEach(t),oDo=r(rLe," (MobileBERT model)"),rLe.forEach(t),rDo=i(P),f2=n(P,"LI",{});var tLe=s(f2);Yfe=n(tLe,"STRONG",{});var Pct=s(Yfe);tDo=r(Pct,"mpnet"),Pct.forEach(t),aDo=r(tLe," \u2014 "),bG=n(tLe,"A",{href:!0});var $ct=s(bG);nDo=r($ct,"MPNetForQuestionAnswering"),$ct.forEach(t),sDo=r(tLe," (MPNet model)"),tLe.forEach(t),lDo=i(P),m2=n(P,"LI",{});var aLe=s(m2);Kfe=n(aLe,"STRONG",{});var Ict=s(Kfe);iDo=r(Ict,"nystromformer"),Ict.forEach(t),dDo=r(aLe," \u2014 "),vG=n(aLe,"A",{href:!0});var qct=s(vG);cDo=r(qct,"NystromformerForQuestionAnswering"),qct.forEach(t),fDo=r(aLe," (Nystromformer model)"),aLe.forEach(t),mDo=i(P),g2=n(P,"LI",{});var nLe=s(g2);Zfe=n(nLe,"STRONG",{});var Nct=s(Zfe);gDo=r(Nct,"qdqbert"),Nct.forEach(t),hDo=r(nLe," \u2014 "),FG=n(nLe,"A",{href:!0});var jct=s(FG);pDo=r(jct,"QDQBertForQuestionAnswering"),jct.forEach(t),_Do=r(nLe," (QDQBert model)"),nLe.forEach(t),uDo=i(P),h2=n(P,"LI",{});var sLe=s(h2);eme=n(sLe,"STRONG",{});var Dct=s(eme);bDo=r(Dct,"reformer"),Dct.forEach(t),vDo=r(sLe," \u2014 "),TG=n(sLe,"A",{href:!0});var Gct=s(TG);FDo=r(Gct,"ReformerForQuestionAnswering"),Gct.forEach(t),TDo=r(sLe," (Reformer model)"),sLe.forEach(t),MDo=i(P),p2=n(P,"LI",{});var lLe=s(p2);ome=n(lLe,"STRONG",{});var Oct=s(ome);EDo=r(Oct,"rembert"),Oct.forEach(t),CDo=r(lLe," \u2014 "),MG=n(lLe,"A",{href:!0});var Vct=s(MG);wDo=r(Vct,"RemBertForQuestionAnswering"),Vct.forEach(t),ADo=r(lLe," (RemBERT model)"),lLe.forEach(t),yDo=i(P),_2=n(P,"LI",{});var iLe=s(_2);rme=n(iLe,"STRONG",{});var Xct=s(rme);LDo=r(Xct,"roberta"),Xct.forEach(t),xDo=r(iLe," \u2014 "),EG=n(iLe,"A",{href:!0});var zct=s(EG);kDo=r(zct,"RobertaForQuestionAnswering"),zct.forEach(t),SDo=r(iLe," (RoBERTa model)"),iLe.forEach(t),RDo=i(P),u2=n(P,"LI",{});var dLe=s(u2);tme=n(dLe,"STRONG",{});var Qct=s(tme);BDo=r(Qct,"roformer"),Qct.forEach(t),PDo=r(dLe," \u2014 "),CG=n(dLe,"A",{href:!0});var Wct=s(CG);$Do=r(Wct,"RoFormerForQuestionAnswering"),Wct.forEach(t),IDo=r(dLe," (RoFormer model)"),dLe.forEach(t),qDo=i(P),b2=n(P,"LI",{});var cLe=s(b2);ame=n(cLe,"STRONG",{});var Hct=s(ame);NDo=r(Hct,"splinter"),Hct.forEach(t),jDo=r(cLe," \u2014 "),wG=n(cLe,"A",{href:!0});var Uct=s(wG);DDo=r(Uct,"SplinterForQuestionAnswering"),Uct.forEach(t),GDo=r(cLe," (Splinter model)"),cLe.forEach(t),ODo=i(P),v2=n(P,"LI",{});var fLe=s(v2);nme=n(fLe,"STRONG",{});var Jct=s(nme);VDo=r(Jct,"squeezebert"),Jct.forEach(t),XDo=r(fLe," \u2014 "),AG=n(fLe,"A",{href:!0});var Yct=s(AG);zDo=r(Yct,"SqueezeBertForQuestionAnswering"),Yct.forEach(t),QDo=r(fLe," (SqueezeBERT model)"),fLe.forEach(t),WDo=i(P),F2=n(P,"LI",{});var mLe=s(F2);sme=n(mLe,"STRONG",{});var Kct=s(sme);HDo=r(Kct,"xlm"),Kct.forEach(t),UDo=r(mLe," \u2014 "),yG=n(mLe,"A",{href:!0});var Zct=s(yG);JDo=r(Zct,"XLMForQuestionAnsweringSimple"),Zct.forEach(t),YDo=r(mLe," (XLM model)"),mLe.forEach(t),KDo=i(P),T2=n(P,"LI",{});var gLe=s(T2);lme=n(gLe,"STRONG",{});var eft=s(lme);ZDo=r(eft,"xlm-roberta"),eft.forEach(t),eGo=r(gLe," \u2014 "),LG=n(gLe,"A",{href:!0});var oft=s(LG);oGo=r(oft,"XLMRobertaForQuestionAnswering"),oft.forEach(t),rGo=r(gLe," (XLM-RoBERTa model)"),gLe.forEach(t),tGo=i(P),M2=n(P,"LI",{});var hLe=s(M2);ime=n(hLe,"STRONG",{});var rft=s(ime);aGo=r(rft,"xlm-roberta-xl"),rft.forEach(t),nGo=r(hLe," \u2014 "),xG=n(hLe,"A",{href:!0});var tft=s(xG);sGo=r(tft,"XLMRobertaXLForQuestionAnswering"),tft.forEach(t),lGo=r(hLe," (XLM-RoBERTa-XL model)"),hLe.forEach(t),iGo=i(P),E2=n(P,"LI",{});var pLe=s(E2);dme=n(pLe,"STRONG",{});var aft=s(dme);dGo=r(aft,"xlnet"),aft.forEach(t),cGo=r(pLe," \u2014 "),kG=n(pLe,"A",{href:!0});var nft=s(kG);fGo=r(nft,"XLNetForQuestionAnsweringSimple"),nft.forEach(t),mGo=r(pLe," (XLNet model)"),pLe.forEach(t),gGo=i(P),C2=n(P,"LI",{});var _Le=s(C2);cme=n(_Le,"STRONG",{});var sft=s(cme);hGo=r(sft,"yoso"),sft.forEach(t),pGo=r(_Le," \u2014 "),SG=n(_Le,"A",{href:!0});var lft=s(SG);_Go=r(lft,"YosoForQuestionAnswering"),lft.forEach(t),uGo=r(_Le," (YOSO model)"),_Le.forEach(t),P.forEach(t),bGo=i(Ut),w2=n(Ut,"P",{});var uLe=s(w2);vGo=r(uLe,"The model is set in evaluation mode by default using "),fme=n(uLe,"CODE",{});var ift=s(fme);FGo=r(ift,"model.eval()"),ift.forEach(t),TGo=r(uLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mme=n(uLe,"CODE",{});var dft=s(mme);MGo=r(dft,"model.train()"),dft.forEach(t),uLe.forEach(t),EGo=i(Ut),gme=n(Ut,"P",{});var cft=s(gme);CGo=r(cft,"Examples:"),cft.forEach(t),wGo=i(Ut),m(Dw.$$.fragment,Ut),Ut.forEach(t),Fl.forEach(t),RPe=i(c),$d=n(c,"H2",{class:!0});var GIe=s($d);A2=n(GIe,"A",{id:!0,class:!0,href:!0});var fft=s(A2);hme=n(fft,"SPAN",{});var mft=s(hme);m(Gw.$$.fragment,mft),mft.forEach(t),fft.forEach(t),AGo=i(GIe),pme=n(GIe,"SPAN",{});var gft=s(pme);yGo=r(gft,"AutoModelForTableQuestionAnswering"),gft.forEach(t),GIe.forEach(t),BPe=i(c),sr=n(c,"DIV",{class:!0});var Ml=s(sr);m(Ow.$$.fragment,Ml),LGo=i(Ml),Id=n(Ml,"P",{});var IJ=s(Id);xGo=r(IJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),RG=n(IJ,"A",{href:!0});var hft=s(RG);kGo=r(hft,"from_pretrained()"),hft.forEach(t),SGo=r(IJ," class method or the "),BG=n(IJ,"A",{href:!0});var pft=s(BG);RGo=r(pft,"from_config()"),pft.forEach(t),BGo=r(IJ,` class
method.`),IJ.forEach(t),PGo=i(Ml),Vw=n(Ml,"P",{});var OIe=s(Vw);$Go=r(OIe,"This class cannot be instantiated directly using "),_me=n(OIe,"CODE",{});var _ft=s(_me);IGo=r(_ft,"__init__()"),_ft.forEach(t),qGo=r(OIe," (throws an error)."),OIe.forEach(t),NGo=i(Ml),et=n(Ml,"DIV",{class:!0});var El=s(et);m(Xw.$$.fragment,El),jGo=i(El),ume=n(El,"P",{});var uft=s(ume);DGo=r(uft,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),uft.forEach(t),GGo=i(El),qd=n(El,"P",{});var qJ=s(qd);OGo=r(qJ,`Note:
Loading a model from its configuration file does `),bme=n(qJ,"STRONG",{});var bft=s(bme);VGo=r(bft,"not"),bft.forEach(t),XGo=r(qJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=n(qJ,"A",{href:!0});var vft=s(PG);zGo=r(vft,"from_pretrained()"),vft.forEach(t),QGo=r(qJ," to load the model weights."),qJ.forEach(t),WGo=i(El),vme=n(El,"P",{});var Fft=s(vme);HGo=r(Fft,"Examples:"),Fft.forEach(t),UGo=i(El),m(zw.$$.fragment,El),El.forEach(t),JGo=i(Ml),He=n(Ml,"DIV",{class:!0});var Jt=s(He);m(Qw.$$.fragment,Jt),YGo=i(Jt),Fme=n(Jt,"P",{});var Tft=s(Fme);KGo=r(Tft,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Tft.forEach(t),ZGo=i(Jt),en=n(Jt,"P",{});var aC=s(en);eOo=r(aC,"The model class to instantiate is selected based on the "),Tme=n(aC,"CODE",{});var Mft=s(Tme);oOo=r(Mft,"model_type"),Mft.forEach(t),rOo=r(aC,` property of the config object (either
passed as an argument or loaded from `),Mme=n(aC,"CODE",{});var Eft=s(Mme);tOo=r(Eft,"pretrained_model_name_or_path"),Eft.forEach(t),aOo=r(aC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eme=n(aC,"CODE",{});var Cft=s(Eme);nOo=r(Cft,"pretrained_model_name_or_path"),Cft.forEach(t),sOo=r(aC,":"),aC.forEach(t),lOo=i(Jt),Cme=n(Jt,"UL",{});var wft=s(Cme);y2=n(wft,"LI",{});var bLe=s(y2);wme=n(bLe,"STRONG",{});var Aft=s(wme);iOo=r(Aft,"tapas"),Aft.forEach(t),dOo=r(bLe," \u2014 "),$G=n(bLe,"A",{href:!0});var yft=s($G);cOo=r(yft,"TapasForQuestionAnswering"),yft.forEach(t),fOo=r(bLe," (TAPAS model)"),bLe.forEach(t),wft.forEach(t),mOo=i(Jt),L2=n(Jt,"P",{});var vLe=s(L2);gOo=r(vLe,"The model is set in evaluation mode by default using "),Ame=n(vLe,"CODE",{});var Lft=s(Ame);hOo=r(Lft,"model.eval()"),Lft.forEach(t),pOo=r(vLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yme=n(vLe,"CODE",{});var xft=s(yme);_Oo=r(xft,"model.train()"),xft.forEach(t),vLe.forEach(t),uOo=i(Jt),Lme=n(Jt,"P",{});var kft=s(Lme);bOo=r(kft,"Examples:"),kft.forEach(t),vOo=i(Jt),m(Ww.$$.fragment,Jt),Jt.forEach(t),Ml.forEach(t),PPe=i(c),Nd=n(c,"H2",{class:!0});var VIe=s(Nd);x2=n(VIe,"A",{id:!0,class:!0,href:!0});var Sft=s(x2);xme=n(Sft,"SPAN",{});var Rft=s(xme);m(Hw.$$.fragment,Rft),Rft.forEach(t),Sft.forEach(t),FOo=i(VIe),kme=n(VIe,"SPAN",{});var Bft=s(kme);TOo=r(Bft,"AutoModelForImageClassification"),Bft.forEach(t),VIe.forEach(t),$Pe=i(c),lr=n(c,"DIV",{class:!0});var Cl=s(lr);m(Uw.$$.fragment,Cl),MOo=i(Cl),jd=n(Cl,"P",{});var NJ=s(jd);EOo=r(NJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),IG=n(NJ,"A",{href:!0});var Pft=s(IG);COo=r(Pft,"from_pretrained()"),Pft.forEach(t),wOo=r(NJ," class method or the "),qG=n(NJ,"A",{href:!0});var $ft=s(qG);AOo=r($ft,"from_config()"),$ft.forEach(t),yOo=r(NJ,` class
method.`),NJ.forEach(t),LOo=i(Cl),Jw=n(Cl,"P",{});var XIe=s(Jw);xOo=r(XIe,"This class cannot be instantiated directly using "),Sme=n(XIe,"CODE",{});var Ift=s(Sme);kOo=r(Ift,"__init__()"),Ift.forEach(t),SOo=r(XIe," (throws an error)."),XIe.forEach(t),ROo=i(Cl),ot=n(Cl,"DIV",{class:!0});var wl=s(ot);m(Yw.$$.fragment,wl),BOo=i(wl),Rme=n(wl,"P",{});var qft=s(Rme);POo=r(qft,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qft.forEach(t),$Oo=i(wl),Dd=n(wl,"P",{});var jJ=s(Dd);IOo=r(jJ,`Note:
Loading a model from its configuration file does `),Bme=n(jJ,"STRONG",{});var Nft=s(Bme);qOo=r(Nft,"not"),Nft.forEach(t),NOo=r(jJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=n(jJ,"A",{href:!0});var jft=s(NG);jOo=r(jft,"from_pretrained()"),jft.forEach(t),DOo=r(jJ," to load the model weights."),jJ.forEach(t),GOo=i(wl),Pme=n(wl,"P",{});var Dft=s(Pme);OOo=r(Dft,"Examples:"),Dft.forEach(t),VOo=i(wl),m(Kw.$$.fragment,wl),wl.forEach(t),XOo=i(Cl),Ue=n(Cl,"DIV",{class:!0});var Yt=s(Ue);m(Zw.$$.fragment,Yt),zOo=i(Yt),$me=n(Yt,"P",{});var Gft=s($me);QOo=r(Gft,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Gft.forEach(t),WOo=i(Yt),on=n(Yt,"P",{});var nC=s(on);HOo=r(nC,"The model class to instantiate is selected based on the "),Ime=n(nC,"CODE",{});var Oft=s(Ime);UOo=r(Oft,"model_type"),Oft.forEach(t),JOo=r(nC,` property of the config object (either
passed as an argument or loaded from `),qme=n(nC,"CODE",{});var Vft=s(qme);YOo=r(Vft,"pretrained_model_name_or_path"),Vft.forEach(t),KOo=r(nC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=n(nC,"CODE",{});var Xft=s(Nme);ZOo=r(Xft,"pretrained_model_name_or_path"),Xft.forEach(t),eVo=r(nC,":"),nC.forEach(t),oVo=i(Yt),ce=n(Yt,"UL",{});var pe=s(ce);k2=n(pe,"LI",{});var FLe=s(k2);jme=n(FLe,"STRONG",{});var zft=s(jme);rVo=r(zft,"beit"),zft.forEach(t),tVo=r(FLe," \u2014 "),jG=n(FLe,"A",{href:!0});var Qft=s(jG);aVo=r(Qft,"BeitForImageClassification"),Qft.forEach(t),nVo=r(FLe," (BEiT model)"),FLe.forEach(t),sVo=i(pe),S2=n(pe,"LI",{});var TLe=s(S2);Dme=n(TLe,"STRONG",{});var Wft=s(Dme);lVo=r(Wft,"convnext"),Wft.forEach(t),iVo=r(TLe," \u2014 "),DG=n(TLe,"A",{href:!0});var Hft=s(DG);dVo=r(Hft,"ConvNextForImageClassification"),Hft.forEach(t),cVo=r(TLe," (ConvNext model)"),TLe.forEach(t),fVo=i(pe),R2=n(pe,"LI",{});var MLe=s(R2);Gme=n(MLe,"STRONG",{});var Uft=s(Gme);mVo=r(Uft,"data2vec-vision"),Uft.forEach(t),gVo=r(MLe," \u2014 "),GG=n(MLe,"A",{href:!0});var Jft=s(GG);hVo=r(Jft,"Data2VecVisionForImageClassification"),Jft.forEach(t),pVo=r(MLe," (Data2VecVision model)"),MLe.forEach(t),_Vo=i(pe),Us=n(pe,"LI",{});var V9=s(Us);Ome=n(V9,"STRONG",{});var Yft=s(Ome);uVo=r(Yft,"deit"),Yft.forEach(t),bVo=r(V9," \u2014 "),OG=n(V9,"A",{href:!0});var Kft=s(OG);vVo=r(Kft,"DeiTForImageClassification"),Kft.forEach(t),FVo=r(V9," or "),VG=n(V9,"A",{href:!0});var Zft=s(VG);TVo=r(Zft,"DeiTForImageClassificationWithTeacher"),Zft.forEach(t),MVo=r(V9," (DeiT model)"),V9.forEach(t),EVo=i(pe),B2=n(pe,"LI",{});var ELe=s(B2);Vme=n(ELe,"STRONG",{});var emt=s(Vme);CVo=r(emt,"imagegpt"),emt.forEach(t),wVo=r(ELe," \u2014 "),XG=n(ELe,"A",{href:!0});var omt=s(XG);AVo=r(omt,"ImageGPTForImageClassification"),omt.forEach(t),yVo=r(ELe," (ImageGPT model)"),ELe.forEach(t),LVo=i(pe),ma=n(pe,"LI",{});var Vf=s(ma);Xme=n(Vf,"STRONG",{});var rmt=s(Xme);xVo=r(rmt,"perceiver"),rmt.forEach(t),kVo=r(Vf," \u2014 "),zG=n(Vf,"A",{href:!0});var tmt=s(zG);SVo=r(tmt,"PerceiverForImageClassificationLearned"),tmt.forEach(t),RVo=r(Vf," or "),QG=n(Vf,"A",{href:!0});var amt=s(QG);BVo=r(amt,"PerceiverForImageClassificationFourier"),amt.forEach(t),PVo=r(Vf," or "),WG=n(Vf,"A",{href:!0});var nmt=s(WG);$Vo=r(nmt,"PerceiverForImageClassificationConvProcessing"),nmt.forEach(t),IVo=r(Vf," (Perceiver model)"),Vf.forEach(t),qVo=i(pe),P2=n(pe,"LI",{});var CLe=s(P2);zme=n(CLe,"STRONG",{});var smt=s(zme);NVo=r(smt,"poolformer"),smt.forEach(t),jVo=r(CLe," \u2014 "),HG=n(CLe,"A",{href:!0});var lmt=s(HG);DVo=r(lmt,"PoolFormerForImageClassification"),lmt.forEach(t),GVo=r(CLe," (PoolFormer model)"),CLe.forEach(t),OVo=i(pe),$2=n(pe,"LI",{});var wLe=s($2);Qme=n(wLe,"STRONG",{});var imt=s(Qme);VVo=r(imt,"regnet"),imt.forEach(t),XVo=r(wLe," \u2014 "),UG=n(wLe,"A",{href:!0});var dmt=s(UG);zVo=r(dmt,"RegNetForImageClassification"),dmt.forEach(t),QVo=r(wLe," (RegNet model)"),wLe.forEach(t),WVo=i(pe),I2=n(pe,"LI",{});var ALe=s(I2);Wme=n(ALe,"STRONG",{});var cmt=s(Wme);HVo=r(cmt,"resnet"),cmt.forEach(t),UVo=r(ALe," \u2014 "),JG=n(ALe,"A",{href:!0});var fmt=s(JG);JVo=r(fmt,"ResNetForImageClassification"),fmt.forEach(t),YVo=r(ALe," (ResNet model)"),ALe.forEach(t),KVo=i(pe),q2=n(pe,"LI",{});var yLe=s(q2);Hme=n(yLe,"STRONG",{});var mmt=s(Hme);ZVo=r(mmt,"segformer"),mmt.forEach(t),eXo=r(yLe," \u2014 "),YG=n(yLe,"A",{href:!0});var gmt=s(YG);oXo=r(gmt,"SegformerForImageClassification"),gmt.forEach(t),rXo=r(yLe," (SegFormer model)"),yLe.forEach(t),tXo=i(pe),N2=n(pe,"LI",{});var LLe=s(N2);Ume=n(LLe,"STRONG",{});var hmt=s(Ume);aXo=r(hmt,"swin"),hmt.forEach(t),nXo=r(LLe," \u2014 "),KG=n(LLe,"A",{href:!0});var pmt=s(KG);sXo=r(pmt,"SwinForImageClassification"),pmt.forEach(t),lXo=r(LLe," (Swin model)"),LLe.forEach(t),iXo=i(pe),j2=n(pe,"LI",{});var xLe=s(j2);Jme=n(xLe,"STRONG",{});var _mt=s(Jme);dXo=r(_mt,"van"),_mt.forEach(t),cXo=r(xLe," \u2014 "),ZG=n(xLe,"A",{href:!0});var umt=s(ZG);fXo=r(umt,"VanForImageClassification"),umt.forEach(t),mXo=r(xLe," (VAN model)"),xLe.forEach(t),gXo=i(pe),D2=n(pe,"LI",{});var kLe=s(D2);Yme=n(kLe,"STRONG",{});var bmt=s(Yme);hXo=r(bmt,"vit"),bmt.forEach(t),pXo=r(kLe," \u2014 "),eO=n(kLe,"A",{href:!0});var vmt=s(eO);_Xo=r(vmt,"ViTForImageClassification"),vmt.forEach(t),uXo=r(kLe," (ViT model)"),kLe.forEach(t),pe.forEach(t),bXo=i(Yt),G2=n(Yt,"P",{});var SLe=s(G2);vXo=r(SLe,"The model is set in evaluation mode by default using "),Kme=n(SLe,"CODE",{});var Fmt=s(Kme);FXo=r(Fmt,"model.eval()"),Fmt.forEach(t),TXo=r(SLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zme=n(SLe,"CODE",{});var Tmt=s(Zme);MXo=r(Tmt,"model.train()"),Tmt.forEach(t),SLe.forEach(t),EXo=i(Yt),ege=n(Yt,"P",{});var Mmt=s(ege);CXo=r(Mmt,"Examples:"),Mmt.forEach(t),wXo=i(Yt),m(eA.$$.fragment,Yt),Yt.forEach(t),Cl.forEach(t),IPe=i(c),Gd=n(c,"H2",{class:!0});var zIe=s(Gd);O2=n(zIe,"A",{id:!0,class:!0,href:!0});var Emt=s(O2);oge=n(Emt,"SPAN",{});var Cmt=s(oge);m(oA.$$.fragment,Cmt),Cmt.forEach(t),Emt.forEach(t),AXo=i(zIe),rge=n(zIe,"SPAN",{});var wmt=s(rge);yXo=r(wmt,"AutoModelForVision2Seq"),wmt.forEach(t),zIe.forEach(t),qPe=i(c),ir=n(c,"DIV",{class:!0});var Al=s(ir);m(rA.$$.fragment,Al),LXo=i(Al),Od=n(Al,"P",{});var DJ=s(Od);xXo=r(DJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oO=n(DJ,"A",{href:!0});var Amt=s(oO);kXo=r(Amt,"from_pretrained()"),Amt.forEach(t),SXo=r(DJ," class method or the "),rO=n(DJ,"A",{href:!0});var ymt=s(rO);RXo=r(ymt,"from_config()"),ymt.forEach(t),BXo=r(DJ,` class
method.`),DJ.forEach(t),PXo=i(Al),tA=n(Al,"P",{});var QIe=s(tA);$Xo=r(QIe,"This class cannot be instantiated directly using "),tge=n(QIe,"CODE",{});var Lmt=s(tge);IXo=r(Lmt,"__init__()"),Lmt.forEach(t),qXo=r(QIe," (throws an error)."),QIe.forEach(t),NXo=i(Al),rt=n(Al,"DIV",{class:!0});var yl=s(rt);m(aA.$$.fragment,yl),jXo=i(yl),age=n(yl,"P",{});var xmt=s(age);DXo=r(xmt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xmt.forEach(t),GXo=i(yl),Vd=n(yl,"P",{});var GJ=s(Vd);OXo=r(GJ,`Note:
Loading a model from its configuration file does `),nge=n(GJ,"STRONG",{});var kmt=s(nge);VXo=r(kmt,"not"),kmt.forEach(t),XXo=r(GJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tO=n(GJ,"A",{href:!0});var Smt=s(tO);zXo=r(Smt,"from_pretrained()"),Smt.forEach(t),QXo=r(GJ," to load the model weights."),GJ.forEach(t),WXo=i(yl),sge=n(yl,"P",{});var Rmt=s(sge);HXo=r(Rmt,"Examples:"),Rmt.forEach(t),UXo=i(yl),m(nA.$$.fragment,yl),yl.forEach(t),JXo=i(Al),Je=n(Al,"DIV",{class:!0});var Kt=s(Je);m(sA.$$.fragment,Kt),YXo=i(Kt),lge=n(Kt,"P",{});var Bmt=s(lge);KXo=r(Bmt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Bmt.forEach(t),ZXo=i(Kt),rn=n(Kt,"P",{});var sC=s(rn);ezo=r(sC,"The model class to instantiate is selected based on the "),ige=n(sC,"CODE",{});var Pmt=s(ige);ozo=r(Pmt,"model_type"),Pmt.forEach(t),rzo=r(sC,` property of the config object (either
passed as an argument or loaded from `),dge=n(sC,"CODE",{});var $mt=s(dge);tzo=r($mt,"pretrained_model_name_or_path"),$mt.forEach(t),azo=r(sC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=n(sC,"CODE",{});var Imt=s(cge);nzo=r(Imt,"pretrained_model_name_or_path"),Imt.forEach(t),szo=r(sC,":"),sC.forEach(t),lzo=i(Kt),fge=n(Kt,"UL",{});var qmt=s(fge);V2=n(qmt,"LI",{});var RLe=s(V2);mge=n(RLe,"STRONG",{});var Nmt=s(mge);izo=r(Nmt,"vision-encoder-decoder"),Nmt.forEach(t),dzo=r(RLe," \u2014 "),aO=n(RLe,"A",{href:!0});var jmt=s(aO);czo=r(jmt,"VisionEncoderDecoderModel"),jmt.forEach(t),fzo=r(RLe," (Vision Encoder decoder model)"),RLe.forEach(t),qmt.forEach(t),mzo=i(Kt),X2=n(Kt,"P",{});var BLe=s(X2);gzo=r(BLe,"The model is set in evaluation mode by default using "),gge=n(BLe,"CODE",{});var Dmt=s(gge);hzo=r(Dmt,"model.eval()"),Dmt.forEach(t),pzo=r(BLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hge=n(BLe,"CODE",{});var Gmt=s(hge);_zo=r(Gmt,"model.train()"),Gmt.forEach(t),BLe.forEach(t),uzo=i(Kt),pge=n(Kt,"P",{});var Omt=s(pge);bzo=r(Omt,"Examples:"),Omt.forEach(t),vzo=i(Kt),m(lA.$$.fragment,Kt),Kt.forEach(t),Al.forEach(t),NPe=i(c),Xd=n(c,"H2",{class:!0});var WIe=s(Xd);z2=n(WIe,"A",{id:!0,class:!0,href:!0});var Vmt=s(z2);_ge=n(Vmt,"SPAN",{});var Xmt=s(_ge);m(iA.$$.fragment,Xmt),Xmt.forEach(t),Vmt.forEach(t),Fzo=i(WIe),uge=n(WIe,"SPAN",{});var zmt=s(uge);Tzo=r(zmt,"AutoModelForAudioClassification"),zmt.forEach(t),WIe.forEach(t),jPe=i(c),dr=n(c,"DIV",{class:!0});var Ll=s(dr);m(dA.$$.fragment,Ll),Mzo=i(Ll),zd=n(Ll,"P",{});var OJ=s(zd);Ezo=r(OJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),nO=n(OJ,"A",{href:!0});var Qmt=s(nO);Czo=r(Qmt,"from_pretrained()"),Qmt.forEach(t),wzo=r(OJ," class method or the "),sO=n(OJ,"A",{href:!0});var Wmt=s(sO);Azo=r(Wmt,"from_config()"),Wmt.forEach(t),yzo=r(OJ,` class
method.`),OJ.forEach(t),Lzo=i(Ll),cA=n(Ll,"P",{});var HIe=s(cA);xzo=r(HIe,"This class cannot be instantiated directly using "),bge=n(HIe,"CODE",{});var Hmt=s(bge);kzo=r(Hmt,"__init__()"),Hmt.forEach(t),Szo=r(HIe," (throws an error)."),HIe.forEach(t),Rzo=i(Ll),tt=n(Ll,"DIV",{class:!0});var xl=s(tt);m(fA.$$.fragment,xl),Bzo=i(xl),vge=n(xl,"P",{});var Umt=s(vge);Pzo=r(Umt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Umt.forEach(t),$zo=i(xl),Qd=n(xl,"P",{});var VJ=s(Qd);Izo=r(VJ,`Note:
Loading a model from its configuration file does `),Fge=n(VJ,"STRONG",{});var Jmt=s(Fge);qzo=r(Jmt,"not"),Jmt.forEach(t),Nzo=r(VJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lO=n(VJ,"A",{href:!0});var Ymt=s(lO);jzo=r(Ymt,"from_pretrained()"),Ymt.forEach(t),Dzo=r(VJ," to load the model weights."),VJ.forEach(t),Gzo=i(xl),Tge=n(xl,"P",{});var Kmt=s(Tge);Ozo=r(Kmt,"Examples:"),Kmt.forEach(t),Vzo=i(xl),m(mA.$$.fragment,xl),xl.forEach(t),Xzo=i(Ll),Ye=n(Ll,"DIV",{class:!0});var Zt=s(Ye);m(gA.$$.fragment,Zt),zzo=i(Zt),Mge=n(Zt,"P",{});var Zmt=s(Mge);Qzo=r(Zmt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Zmt.forEach(t),Wzo=i(Zt),tn=n(Zt,"P",{});var lC=s(tn);Hzo=r(lC,"The model class to instantiate is selected based on the "),Ege=n(lC,"CODE",{});var egt=s(Ege);Uzo=r(egt,"model_type"),egt.forEach(t),Jzo=r(lC,` property of the config object (either
passed as an argument or loaded from `),Cge=n(lC,"CODE",{});var ogt=s(Cge);Yzo=r(ogt,"pretrained_model_name_or_path"),ogt.forEach(t),Kzo=r(lC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wge=n(lC,"CODE",{});var rgt=s(wge);Zzo=r(rgt,"pretrained_model_name_or_path"),rgt.forEach(t),eQo=r(lC,":"),lC.forEach(t),oQo=i(Zt),Re=n(Zt,"UL",{});var Do=s(Re);Q2=n(Do,"LI",{});var PLe=s(Q2);Age=n(PLe,"STRONG",{});var tgt=s(Age);rQo=r(tgt,"data2vec-audio"),tgt.forEach(t),tQo=r(PLe," \u2014 "),iO=n(PLe,"A",{href:!0});var agt=s(iO);aQo=r(agt,"Data2VecAudioForSequenceClassification"),agt.forEach(t),nQo=r(PLe," (Data2VecAudio model)"),PLe.forEach(t),sQo=i(Do),W2=n(Do,"LI",{});var $Le=s(W2);yge=n($Le,"STRONG",{});var ngt=s(yge);lQo=r(ngt,"hubert"),ngt.forEach(t),iQo=r($Le," \u2014 "),dO=n($Le,"A",{href:!0});var sgt=s(dO);dQo=r(sgt,"HubertForSequenceClassification"),sgt.forEach(t),cQo=r($Le," (Hubert model)"),$Le.forEach(t),fQo=i(Do),H2=n(Do,"LI",{});var ILe=s(H2);Lge=n(ILe,"STRONG",{});var lgt=s(Lge);mQo=r(lgt,"sew"),lgt.forEach(t),gQo=r(ILe," \u2014 "),cO=n(ILe,"A",{href:!0});var igt=s(cO);hQo=r(igt,"SEWForSequenceClassification"),igt.forEach(t),pQo=r(ILe," (SEW model)"),ILe.forEach(t),_Qo=i(Do),U2=n(Do,"LI",{});var qLe=s(U2);xge=n(qLe,"STRONG",{});var dgt=s(xge);uQo=r(dgt,"sew-d"),dgt.forEach(t),bQo=r(qLe," \u2014 "),fO=n(qLe,"A",{href:!0});var cgt=s(fO);vQo=r(cgt,"SEWDForSequenceClassification"),cgt.forEach(t),FQo=r(qLe," (SEW-D model)"),qLe.forEach(t),TQo=i(Do),J2=n(Do,"LI",{});var NLe=s(J2);kge=n(NLe,"STRONG",{});var fgt=s(kge);MQo=r(fgt,"unispeech"),fgt.forEach(t),EQo=r(NLe," \u2014 "),mO=n(NLe,"A",{href:!0});var mgt=s(mO);CQo=r(mgt,"UniSpeechForSequenceClassification"),mgt.forEach(t),wQo=r(NLe," (UniSpeech model)"),NLe.forEach(t),AQo=i(Do),Y2=n(Do,"LI",{});var jLe=s(Y2);Sge=n(jLe,"STRONG",{});var ggt=s(Sge);yQo=r(ggt,"unispeech-sat"),ggt.forEach(t),LQo=r(jLe," \u2014 "),gO=n(jLe,"A",{href:!0});var hgt=s(gO);xQo=r(hgt,"UniSpeechSatForSequenceClassification"),hgt.forEach(t),kQo=r(jLe," (UniSpeechSat model)"),jLe.forEach(t),SQo=i(Do),K2=n(Do,"LI",{});var DLe=s(K2);Rge=n(DLe,"STRONG",{});var pgt=s(Rge);RQo=r(pgt,"wav2vec2"),pgt.forEach(t),BQo=r(DLe," \u2014 "),hO=n(DLe,"A",{href:!0});var _gt=s(hO);PQo=r(_gt,"Wav2Vec2ForSequenceClassification"),_gt.forEach(t),$Qo=r(DLe," (Wav2Vec2 model)"),DLe.forEach(t),IQo=i(Do),Z2=n(Do,"LI",{});var GLe=s(Z2);Bge=n(GLe,"STRONG",{});var ugt=s(Bge);qQo=r(ugt,"wavlm"),ugt.forEach(t),NQo=r(GLe," \u2014 "),pO=n(GLe,"A",{href:!0});var bgt=s(pO);jQo=r(bgt,"WavLMForSequenceClassification"),bgt.forEach(t),DQo=r(GLe," (WavLM model)"),GLe.forEach(t),Do.forEach(t),GQo=i(Zt),ev=n(Zt,"P",{});var OLe=s(ev);OQo=r(OLe,"The model is set in evaluation mode by default using "),Pge=n(OLe,"CODE",{});var vgt=s(Pge);VQo=r(vgt,"model.eval()"),vgt.forEach(t),XQo=r(OLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ge=n(OLe,"CODE",{});var Fgt=s($ge);zQo=r(Fgt,"model.train()"),Fgt.forEach(t),OLe.forEach(t),QQo=i(Zt),Ige=n(Zt,"P",{});var Tgt=s(Ige);WQo=r(Tgt,"Examples:"),Tgt.forEach(t),HQo=i(Zt),m(hA.$$.fragment,Zt),Zt.forEach(t),Ll.forEach(t),DPe=i(c),Wd=n(c,"H2",{class:!0});var UIe=s(Wd);ov=n(UIe,"A",{id:!0,class:!0,href:!0});var Mgt=s(ov);qge=n(Mgt,"SPAN",{});var Egt=s(qge);m(pA.$$.fragment,Egt),Egt.forEach(t),Mgt.forEach(t),UQo=i(UIe),Nge=n(UIe,"SPAN",{});var Cgt=s(Nge);JQo=r(Cgt,"AutoModelForAudioFrameClassification"),Cgt.forEach(t),UIe.forEach(t),GPe=i(c),cr=n(c,"DIV",{class:!0});var kl=s(cr);m(_A.$$.fragment,kl),YQo=i(kl),Hd=n(kl,"P",{});var XJ=s(Hd);KQo=r(XJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),_O=n(XJ,"A",{href:!0});var wgt=s(_O);ZQo=r(wgt,"from_pretrained()"),wgt.forEach(t),eWo=r(XJ," class method or the "),uO=n(XJ,"A",{href:!0});var Agt=s(uO);oWo=r(Agt,"from_config()"),Agt.forEach(t),rWo=r(XJ,` class
method.`),XJ.forEach(t),tWo=i(kl),uA=n(kl,"P",{});var JIe=s(uA);aWo=r(JIe,"This class cannot be instantiated directly using "),jge=n(JIe,"CODE",{});var ygt=s(jge);nWo=r(ygt,"__init__()"),ygt.forEach(t),sWo=r(JIe," (throws an error)."),JIe.forEach(t),lWo=i(kl),at=n(kl,"DIV",{class:!0});var Sl=s(at);m(bA.$$.fragment,Sl),iWo=i(Sl),Dge=n(Sl,"P",{});var Lgt=s(Dge);dWo=r(Lgt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Lgt.forEach(t),cWo=i(Sl),Ud=n(Sl,"P",{});var zJ=s(Ud);fWo=r(zJ,`Note:
Loading a model from its configuration file does `),Gge=n(zJ,"STRONG",{});var xgt=s(Gge);mWo=r(xgt,"not"),xgt.forEach(t),gWo=r(zJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=n(zJ,"A",{href:!0});var kgt=s(bO);hWo=r(kgt,"from_pretrained()"),kgt.forEach(t),pWo=r(zJ," to load the model weights."),zJ.forEach(t),_Wo=i(Sl),Oge=n(Sl,"P",{});var Sgt=s(Oge);uWo=r(Sgt,"Examples:"),Sgt.forEach(t),bWo=i(Sl),m(vA.$$.fragment,Sl),Sl.forEach(t),vWo=i(kl),Ke=n(kl,"DIV",{class:!0});var ea=s(Ke);m(FA.$$.fragment,ea),FWo=i(ea),Vge=n(ea,"P",{});var Rgt=s(Vge);TWo=r(Rgt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Rgt.forEach(t),MWo=i(ea),an=n(ea,"P",{});var iC=s(an);EWo=r(iC,"The model class to instantiate is selected based on the "),Xge=n(iC,"CODE",{});var Bgt=s(Xge);CWo=r(Bgt,"model_type"),Bgt.forEach(t),wWo=r(iC,` property of the config object (either
passed as an argument or loaded from `),zge=n(iC,"CODE",{});var Pgt=s(zge);AWo=r(Pgt,"pretrained_model_name_or_path"),Pgt.forEach(t),yWo=r(iC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=n(iC,"CODE",{});var $gt=s(Qge);LWo=r($gt,"pretrained_model_name_or_path"),$gt.forEach(t),xWo=r(iC,":"),iC.forEach(t),kWo=i(ea),nn=n(ea,"UL",{});var dC=s(nn);rv=n(dC,"LI",{});var VLe=s(rv);Wge=n(VLe,"STRONG",{});var Igt=s(Wge);SWo=r(Igt,"data2vec-audio"),Igt.forEach(t),RWo=r(VLe," \u2014 "),vO=n(VLe,"A",{href:!0});var qgt=s(vO);BWo=r(qgt,"Data2VecAudioForAudioFrameClassification"),qgt.forEach(t),PWo=r(VLe," (Data2VecAudio model)"),VLe.forEach(t),$Wo=i(dC),tv=n(dC,"LI",{});var XLe=s(tv);Hge=n(XLe,"STRONG",{});var Ngt=s(Hge);IWo=r(Ngt,"unispeech-sat"),Ngt.forEach(t),qWo=r(XLe," \u2014 "),FO=n(XLe,"A",{href:!0});var jgt=s(FO);NWo=r(jgt,"UniSpeechSatForAudioFrameClassification"),jgt.forEach(t),jWo=r(XLe," (UniSpeechSat model)"),XLe.forEach(t),DWo=i(dC),av=n(dC,"LI",{});var zLe=s(av);Uge=n(zLe,"STRONG",{});var Dgt=s(Uge);GWo=r(Dgt,"wav2vec2"),Dgt.forEach(t),OWo=r(zLe," \u2014 "),TO=n(zLe,"A",{href:!0});var Ggt=s(TO);VWo=r(Ggt,"Wav2Vec2ForAudioFrameClassification"),Ggt.forEach(t),XWo=r(zLe," (Wav2Vec2 model)"),zLe.forEach(t),zWo=i(dC),nv=n(dC,"LI",{});var QLe=s(nv);Jge=n(QLe,"STRONG",{});var Ogt=s(Jge);QWo=r(Ogt,"wavlm"),Ogt.forEach(t),WWo=r(QLe," \u2014 "),MO=n(QLe,"A",{href:!0});var Vgt=s(MO);HWo=r(Vgt,"WavLMForAudioFrameClassification"),Vgt.forEach(t),UWo=r(QLe," (WavLM model)"),QLe.forEach(t),dC.forEach(t),JWo=i(ea),sv=n(ea,"P",{});var WLe=s(sv);YWo=r(WLe,"The model is set in evaluation mode by default using "),Yge=n(WLe,"CODE",{});var Xgt=s(Yge);KWo=r(Xgt,"model.eval()"),Xgt.forEach(t),ZWo=r(WLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kge=n(WLe,"CODE",{});var zgt=s(Kge);eHo=r(zgt,"model.train()"),zgt.forEach(t),WLe.forEach(t),oHo=i(ea),Zge=n(ea,"P",{});var Qgt=s(Zge);rHo=r(Qgt,"Examples:"),Qgt.forEach(t),tHo=i(ea),m(TA.$$.fragment,ea),ea.forEach(t),kl.forEach(t),OPe=i(c),Jd=n(c,"H2",{class:!0});var YIe=s(Jd);lv=n(YIe,"A",{id:!0,class:!0,href:!0});var Wgt=s(lv);ehe=n(Wgt,"SPAN",{});var Hgt=s(ehe);m(MA.$$.fragment,Hgt),Hgt.forEach(t),Wgt.forEach(t),aHo=i(YIe),ohe=n(YIe,"SPAN",{});var Ugt=s(ohe);nHo=r(Ugt,"AutoModelForCTC"),Ugt.forEach(t),YIe.forEach(t),VPe=i(c),fr=n(c,"DIV",{class:!0});var Rl=s(fr);m(EA.$$.fragment,Rl),sHo=i(Rl),Yd=n(Rl,"P",{});var QJ=s(Yd);lHo=r(QJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),EO=n(QJ,"A",{href:!0});var Jgt=s(EO);iHo=r(Jgt,"from_pretrained()"),Jgt.forEach(t),dHo=r(QJ," class method or the "),CO=n(QJ,"A",{href:!0});var Ygt=s(CO);cHo=r(Ygt,"from_config()"),Ygt.forEach(t),fHo=r(QJ,` class
method.`),QJ.forEach(t),mHo=i(Rl),CA=n(Rl,"P",{});var KIe=s(CA);gHo=r(KIe,"This class cannot be instantiated directly using "),rhe=n(KIe,"CODE",{});var Kgt=s(rhe);hHo=r(Kgt,"__init__()"),Kgt.forEach(t),pHo=r(KIe," (throws an error)."),KIe.forEach(t),_Ho=i(Rl),nt=n(Rl,"DIV",{class:!0});var Bl=s(nt);m(wA.$$.fragment,Bl),uHo=i(Bl),the=n(Bl,"P",{});var Zgt=s(the);bHo=r(Zgt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Zgt.forEach(t),vHo=i(Bl),Kd=n(Bl,"P",{});var WJ=s(Kd);FHo=r(WJ,`Note:
Loading a model from its configuration file does `),ahe=n(WJ,"STRONG",{});var eht=s(ahe);THo=r(eht,"not"),eht.forEach(t),MHo=r(WJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=n(WJ,"A",{href:!0});var oht=s(wO);EHo=r(oht,"from_pretrained()"),oht.forEach(t),CHo=r(WJ," to load the model weights."),WJ.forEach(t),wHo=i(Bl),nhe=n(Bl,"P",{});var rht=s(nhe);AHo=r(rht,"Examples:"),rht.forEach(t),yHo=i(Bl),m(AA.$$.fragment,Bl),Bl.forEach(t),LHo=i(Rl),Ze=n(Rl,"DIV",{class:!0});var oa=s(Ze);m(yA.$$.fragment,oa),xHo=i(oa),she=n(oa,"P",{});var tht=s(she);kHo=r(tht,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),tht.forEach(t),SHo=i(oa),sn=n(oa,"P",{});var cC=s(sn);RHo=r(cC,"The model class to instantiate is selected based on the "),lhe=n(cC,"CODE",{});var aht=s(lhe);BHo=r(aht,"model_type"),aht.forEach(t),PHo=r(cC,` property of the config object (either
passed as an argument or loaded from `),ihe=n(cC,"CODE",{});var nht=s(ihe);$Ho=r(nht,"pretrained_model_name_or_path"),nht.forEach(t),IHo=r(cC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dhe=n(cC,"CODE",{});var sht=s(dhe);qHo=r(sht,"pretrained_model_name_or_path"),sht.forEach(t),NHo=r(cC,":"),cC.forEach(t),jHo=i(oa),Be=n(oa,"UL",{});var Go=s(Be);iv=n(Go,"LI",{});var HLe=s(iv);che=n(HLe,"STRONG",{});var lht=s(che);DHo=r(lht,"data2vec-audio"),lht.forEach(t),GHo=r(HLe," \u2014 "),AO=n(HLe,"A",{href:!0});var iht=s(AO);OHo=r(iht,"Data2VecAudioForCTC"),iht.forEach(t),VHo=r(HLe," (Data2VecAudio model)"),HLe.forEach(t),XHo=i(Go),dv=n(Go,"LI",{});var ULe=s(dv);fhe=n(ULe,"STRONG",{});var dht=s(fhe);zHo=r(dht,"hubert"),dht.forEach(t),QHo=r(ULe," \u2014 "),yO=n(ULe,"A",{href:!0});var cht=s(yO);WHo=r(cht,"HubertForCTC"),cht.forEach(t),HHo=r(ULe," (Hubert model)"),ULe.forEach(t),UHo=i(Go),cv=n(Go,"LI",{});var JLe=s(cv);mhe=n(JLe,"STRONG",{});var fht=s(mhe);JHo=r(fht,"sew"),fht.forEach(t),YHo=r(JLe," \u2014 "),LO=n(JLe,"A",{href:!0});var mht=s(LO);KHo=r(mht,"SEWForCTC"),mht.forEach(t),ZHo=r(JLe," (SEW model)"),JLe.forEach(t),eUo=i(Go),fv=n(Go,"LI",{});var YLe=s(fv);ghe=n(YLe,"STRONG",{});var ght=s(ghe);oUo=r(ght,"sew-d"),ght.forEach(t),rUo=r(YLe," \u2014 "),xO=n(YLe,"A",{href:!0});var hht=s(xO);tUo=r(hht,"SEWDForCTC"),hht.forEach(t),aUo=r(YLe," (SEW-D model)"),YLe.forEach(t),nUo=i(Go),mv=n(Go,"LI",{});var KLe=s(mv);hhe=n(KLe,"STRONG",{});var pht=s(hhe);sUo=r(pht,"unispeech"),pht.forEach(t),lUo=r(KLe," \u2014 "),kO=n(KLe,"A",{href:!0});var _ht=s(kO);iUo=r(_ht,"UniSpeechForCTC"),_ht.forEach(t),dUo=r(KLe," (UniSpeech model)"),KLe.forEach(t),cUo=i(Go),gv=n(Go,"LI",{});var ZLe=s(gv);phe=n(ZLe,"STRONG",{});var uht=s(phe);fUo=r(uht,"unispeech-sat"),uht.forEach(t),mUo=r(ZLe," \u2014 "),SO=n(ZLe,"A",{href:!0});var bht=s(SO);gUo=r(bht,"UniSpeechSatForCTC"),bht.forEach(t),hUo=r(ZLe," (UniSpeechSat model)"),ZLe.forEach(t),pUo=i(Go),hv=n(Go,"LI",{});var e9e=s(hv);_he=n(e9e,"STRONG",{});var vht=s(_he);_Uo=r(vht,"wav2vec2"),vht.forEach(t),uUo=r(e9e," \u2014 "),RO=n(e9e,"A",{href:!0});var Fht=s(RO);bUo=r(Fht,"Wav2Vec2ForCTC"),Fht.forEach(t),vUo=r(e9e," (Wav2Vec2 model)"),e9e.forEach(t),FUo=i(Go),pv=n(Go,"LI",{});var o9e=s(pv);uhe=n(o9e,"STRONG",{});var Tht=s(uhe);TUo=r(Tht,"wavlm"),Tht.forEach(t),MUo=r(o9e," \u2014 "),BO=n(o9e,"A",{href:!0});var Mht=s(BO);EUo=r(Mht,"WavLMForCTC"),Mht.forEach(t),CUo=r(o9e," (WavLM model)"),o9e.forEach(t),Go.forEach(t),wUo=i(oa),_v=n(oa,"P",{});var r9e=s(_v);AUo=r(r9e,"The model is set in evaluation mode by default using "),bhe=n(r9e,"CODE",{});var Eht=s(bhe);yUo=r(Eht,"model.eval()"),Eht.forEach(t),LUo=r(r9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vhe=n(r9e,"CODE",{});var Cht=s(vhe);xUo=r(Cht,"model.train()"),Cht.forEach(t),r9e.forEach(t),kUo=i(oa),Fhe=n(oa,"P",{});var wht=s(Fhe);SUo=r(wht,"Examples:"),wht.forEach(t),RUo=i(oa),m(LA.$$.fragment,oa),oa.forEach(t),Rl.forEach(t),XPe=i(c),Zd=n(c,"H2",{class:!0});var ZIe=s(Zd);uv=n(ZIe,"A",{id:!0,class:!0,href:!0});var Aht=s(uv);The=n(Aht,"SPAN",{});var yht=s(The);m(xA.$$.fragment,yht),yht.forEach(t),Aht.forEach(t),BUo=i(ZIe),Mhe=n(ZIe,"SPAN",{});var Lht=s(Mhe);PUo=r(Lht,"AutoModelForSpeechSeq2Seq"),Lht.forEach(t),ZIe.forEach(t),zPe=i(c),mr=n(c,"DIV",{class:!0});var Pl=s(mr);m(kA.$$.fragment,Pl),$Uo=i(Pl),ec=n(Pl,"P",{});var HJ=s(ec);IUo=r(HJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PO=n(HJ,"A",{href:!0});var xht=s(PO);qUo=r(xht,"from_pretrained()"),xht.forEach(t),NUo=r(HJ," class method or the "),$O=n(HJ,"A",{href:!0});var kht=s($O);jUo=r(kht,"from_config()"),kht.forEach(t),DUo=r(HJ,` class
method.`),HJ.forEach(t),GUo=i(Pl),SA=n(Pl,"P",{});var eqe=s(SA);OUo=r(eqe,"This class cannot be instantiated directly using "),Ehe=n(eqe,"CODE",{});var Sht=s(Ehe);VUo=r(Sht,"__init__()"),Sht.forEach(t),XUo=r(eqe," (throws an error)."),eqe.forEach(t),zUo=i(Pl),st=n(Pl,"DIV",{class:!0});var $l=s(st);m(RA.$$.fragment,$l),QUo=i($l),Che=n($l,"P",{});var Rht=s(Che);WUo=r(Rht,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Rht.forEach(t),HUo=i($l),oc=n($l,"P",{});var UJ=s(oc);UUo=r(UJ,`Note:
Loading a model from its configuration file does `),whe=n(UJ,"STRONG",{});var Bht=s(whe);JUo=r(Bht,"not"),Bht.forEach(t),YUo=r(UJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=n(UJ,"A",{href:!0});var Pht=s(IO);KUo=r(Pht,"from_pretrained()"),Pht.forEach(t),ZUo=r(UJ," to load the model weights."),UJ.forEach(t),eJo=i($l),Ahe=n($l,"P",{});var $ht=s(Ahe);oJo=r($ht,"Examples:"),$ht.forEach(t),rJo=i($l),m(BA.$$.fragment,$l),$l.forEach(t),tJo=i(Pl),eo=n(Pl,"DIV",{class:!0});var ra=s(eo);m(PA.$$.fragment,ra),aJo=i(ra),yhe=n(ra,"P",{});var Iht=s(yhe);nJo=r(Iht,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Iht.forEach(t),sJo=i(ra),ln=n(ra,"P",{});var fC=s(ln);lJo=r(fC,"The model class to instantiate is selected based on the "),Lhe=n(fC,"CODE",{});var qht=s(Lhe);iJo=r(qht,"model_type"),qht.forEach(t),dJo=r(fC,` property of the config object (either
passed as an argument or loaded from `),xhe=n(fC,"CODE",{});var Nht=s(xhe);cJo=r(Nht,"pretrained_model_name_or_path"),Nht.forEach(t),fJo=r(fC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),khe=n(fC,"CODE",{});var jht=s(khe);mJo=r(jht,"pretrained_model_name_or_path"),jht.forEach(t),gJo=r(fC,":"),fC.forEach(t),hJo=i(ra),$A=n(ra,"UL",{});var oqe=s($A);bv=n(oqe,"LI",{});var t9e=s(bv);She=n(t9e,"STRONG",{});var Dht=s(She);pJo=r(Dht,"speech-encoder-decoder"),Dht.forEach(t),_Jo=r(t9e," \u2014 "),qO=n(t9e,"A",{href:!0});var Ght=s(qO);uJo=r(Ght,"SpeechEncoderDecoderModel"),Ght.forEach(t),bJo=r(t9e," (Speech Encoder decoder model)"),t9e.forEach(t),vJo=i(oqe),vv=n(oqe,"LI",{});var a9e=s(vv);Rhe=n(a9e,"STRONG",{});var Oht=s(Rhe);FJo=r(Oht,"speech_to_text"),Oht.forEach(t),TJo=r(a9e," \u2014 "),NO=n(a9e,"A",{href:!0});var Vht=s(NO);MJo=r(Vht,"Speech2TextForConditionalGeneration"),Vht.forEach(t),EJo=r(a9e," (Speech2Text model)"),a9e.forEach(t),oqe.forEach(t),CJo=i(ra),Fv=n(ra,"P",{});var n9e=s(Fv);wJo=r(n9e,"The model is set in evaluation mode by default using "),Bhe=n(n9e,"CODE",{});var Xht=s(Bhe);AJo=r(Xht,"model.eval()"),Xht.forEach(t),yJo=r(n9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Phe=n(n9e,"CODE",{});var zht=s(Phe);LJo=r(zht,"model.train()"),zht.forEach(t),n9e.forEach(t),xJo=i(ra),$he=n(ra,"P",{});var Qht=s($he);kJo=r(Qht,"Examples:"),Qht.forEach(t),SJo=i(ra),m(IA.$$.fragment,ra),ra.forEach(t),Pl.forEach(t),QPe=i(c),rc=n(c,"H2",{class:!0});var rqe=s(rc);Tv=n(rqe,"A",{id:!0,class:!0,href:!0});var Wht=s(Tv);Ihe=n(Wht,"SPAN",{});var Hht=s(Ihe);m(qA.$$.fragment,Hht),Hht.forEach(t),Wht.forEach(t),RJo=i(rqe),qhe=n(rqe,"SPAN",{});var Uht=s(qhe);BJo=r(Uht,"AutoModelForAudioXVector"),Uht.forEach(t),rqe.forEach(t),WPe=i(c),gr=n(c,"DIV",{class:!0});var Il=s(gr);m(NA.$$.fragment,Il),PJo=i(Il),tc=n(Il,"P",{});var JJ=s(tc);$Jo=r(JJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jO=n(JJ,"A",{href:!0});var Jht=s(jO);IJo=r(Jht,"from_pretrained()"),Jht.forEach(t),qJo=r(JJ," class method or the "),DO=n(JJ,"A",{href:!0});var Yht=s(DO);NJo=r(Yht,"from_config()"),Yht.forEach(t),jJo=r(JJ,` class
method.`),JJ.forEach(t),DJo=i(Il),jA=n(Il,"P",{});var tqe=s(jA);GJo=r(tqe,"This class cannot be instantiated directly using "),Nhe=n(tqe,"CODE",{});var Kht=s(Nhe);OJo=r(Kht,"__init__()"),Kht.forEach(t),VJo=r(tqe," (throws an error)."),tqe.forEach(t),XJo=i(Il),lt=n(Il,"DIV",{class:!0});var ql=s(lt);m(DA.$$.fragment,ql),zJo=i(ql),jhe=n(ql,"P",{});var Zht=s(jhe);QJo=r(Zht,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Zht.forEach(t),WJo=i(ql),ac=n(ql,"P",{});var YJ=s(ac);HJo=r(YJ,`Note:
Loading a model from its configuration file does `),Dhe=n(YJ,"STRONG",{});var ept=s(Dhe);UJo=r(ept,"not"),ept.forEach(t),JJo=r(YJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GO=n(YJ,"A",{href:!0});var opt=s(GO);YJo=r(opt,"from_pretrained()"),opt.forEach(t),KJo=r(YJ," to load the model weights."),YJ.forEach(t),ZJo=i(ql),Ghe=n(ql,"P",{});var rpt=s(Ghe);eYo=r(rpt,"Examples:"),rpt.forEach(t),oYo=i(ql),m(GA.$$.fragment,ql),ql.forEach(t),rYo=i(Il),oo=n(Il,"DIV",{class:!0});var ta=s(oo);m(OA.$$.fragment,ta),tYo=i(ta),Ohe=n(ta,"P",{});var tpt=s(Ohe);aYo=r(tpt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),tpt.forEach(t),nYo=i(ta),dn=n(ta,"P",{});var mC=s(dn);sYo=r(mC,"The model class to instantiate is selected based on the "),Vhe=n(mC,"CODE",{});var apt=s(Vhe);lYo=r(apt,"model_type"),apt.forEach(t),iYo=r(mC,` property of the config object (either
passed as an argument or loaded from `),Xhe=n(mC,"CODE",{});var npt=s(Xhe);dYo=r(npt,"pretrained_model_name_or_path"),npt.forEach(t),cYo=r(mC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zhe=n(mC,"CODE",{});var spt=s(zhe);fYo=r(spt,"pretrained_model_name_or_path"),spt.forEach(t),mYo=r(mC,":"),mC.forEach(t),gYo=i(ta),cn=n(ta,"UL",{});var gC=s(cn);Mv=n(gC,"LI",{});var s9e=s(Mv);Qhe=n(s9e,"STRONG",{});var lpt=s(Qhe);hYo=r(lpt,"data2vec-audio"),lpt.forEach(t),pYo=r(s9e," \u2014 "),OO=n(s9e,"A",{href:!0});var ipt=s(OO);_Yo=r(ipt,"Data2VecAudioForXVector"),ipt.forEach(t),uYo=r(s9e," (Data2VecAudio model)"),s9e.forEach(t),bYo=i(gC),Ev=n(gC,"LI",{});var l9e=s(Ev);Whe=n(l9e,"STRONG",{});var dpt=s(Whe);vYo=r(dpt,"unispeech-sat"),dpt.forEach(t),FYo=r(l9e," \u2014 "),VO=n(l9e,"A",{href:!0});var cpt=s(VO);TYo=r(cpt,"UniSpeechSatForXVector"),cpt.forEach(t),MYo=r(l9e," (UniSpeechSat model)"),l9e.forEach(t),EYo=i(gC),Cv=n(gC,"LI",{});var i9e=s(Cv);Hhe=n(i9e,"STRONG",{});var fpt=s(Hhe);CYo=r(fpt,"wav2vec2"),fpt.forEach(t),wYo=r(i9e," \u2014 "),XO=n(i9e,"A",{href:!0});var mpt=s(XO);AYo=r(mpt,"Wav2Vec2ForXVector"),mpt.forEach(t),yYo=r(i9e," (Wav2Vec2 model)"),i9e.forEach(t),LYo=i(gC),wv=n(gC,"LI",{});var d9e=s(wv);Uhe=n(d9e,"STRONG",{});var gpt=s(Uhe);xYo=r(gpt,"wavlm"),gpt.forEach(t),kYo=r(d9e," \u2014 "),zO=n(d9e,"A",{href:!0});var hpt=s(zO);SYo=r(hpt,"WavLMForXVector"),hpt.forEach(t),RYo=r(d9e," (WavLM model)"),d9e.forEach(t),gC.forEach(t),BYo=i(ta),Av=n(ta,"P",{});var c9e=s(Av);PYo=r(c9e,"The model is set in evaluation mode by default using "),Jhe=n(c9e,"CODE",{});var ppt=s(Jhe);$Yo=r(ppt,"model.eval()"),ppt.forEach(t),IYo=r(c9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=n(c9e,"CODE",{});var _pt=s(Yhe);qYo=r(_pt,"model.train()"),_pt.forEach(t),c9e.forEach(t),NYo=i(ta),Khe=n(ta,"P",{});var upt=s(Khe);jYo=r(upt,"Examples:"),upt.forEach(t),DYo=i(ta),m(VA.$$.fragment,ta),ta.forEach(t),Il.forEach(t),HPe=i(c),nc=n(c,"H2",{class:!0});var aqe=s(nc);yv=n(aqe,"A",{id:!0,class:!0,href:!0});var bpt=s(yv);Zhe=n(bpt,"SPAN",{});var vpt=s(Zhe);m(XA.$$.fragment,vpt),vpt.forEach(t),bpt.forEach(t),GYo=i(aqe),epe=n(aqe,"SPAN",{});var Fpt=s(epe);OYo=r(Fpt,"AutoModelForMaskedImageModeling"),Fpt.forEach(t),aqe.forEach(t),UPe=i(c),hr=n(c,"DIV",{class:!0});var Nl=s(hr);m(zA.$$.fragment,Nl),VYo=i(Nl),sc=n(Nl,"P",{});var KJ=s(sc);XYo=r(KJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),QO=n(KJ,"A",{href:!0});var Tpt=s(QO);zYo=r(Tpt,"from_pretrained()"),Tpt.forEach(t),QYo=r(KJ," class method or the "),WO=n(KJ,"A",{href:!0});var Mpt=s(WO);WYo=r(Mpt,"from_config()"),Mpt.forEach(t),HYo=r(KJ,` class
method.`),KJ.forEach(t),UYo=i(Nl),QA=n(Nl,"P",{});var nqe=s(QA);JYo=r(nqe,"This class cannot be instantiated directly using "),ope=n(nqe,"CODE",{});var Ept=s(ope);YYo=r(Ept,"__init__()"),Ept.forEach(t),KYo=r(nqe," (throws an error)."),nqe.forEach(t),ZYo=i(Nl),it=n(Nl,"DIV",{class:!0});var jl=s(it);m(WA.$$.fragment,jl),eKo=i(jl),rpe=n(jl,"P",{});var Cpt=s(rpe);oKo=r(Cpt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Cpt.forEach(t),rKo=i(jl),lc=n(jl,"P",{});var ZJ=s(lc);tKo=r(ZJ,`Note:
Loading a model from its configuration file does `),tpe=n(ZJ,"STRONG",{});var wpt=s(tpe);aKo=r(wpt,"not"),wpt.forEach(t),nKo=r(ZJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=n(ZJ,"A",{href:!0});var Apt=s(HO);sKo=r(Apt,"from_pretrained()"),Apt.forEach(t),lKo=r(ZJ," to load the model weights."),ZJ.forEach(t),iKo=i(jl),ape=n(jl,"P",{});var ypt=s(ape);dKo=r(ypt,"Examples:"),ypt.forEach(t),cKo=i(jl),m(HA.$$.fragment,jl),jl.forEach(t),fKo=i(Nl),ro=n(Nl,"DIV",{class:!0});var aa=s(ro);m(UA.$$.fragment,aa),mKo=i(aa),npe=n(aa,"P",{});var Lpt=s(npe);gKo=r(Lpt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Lpt.forEach(t),hKo=i(aa),fn=n(aa,"P",{});var hC=s(fn);pKo=r(hC,"The model class to instantiate is selected based on the "),spe=n(hC,"CODE",{});var xpt=s(spe);_Ko=r(xpt,"model_type"),xpt.forEach(t),uKo=r(hC,` property of the config object (either
passed as an argument or loaded from `),lpe=n(hC,"CODE",{});var kpt=s(lpe);bKo=r(kpt,"pretrained_model_name_or_path"),kpt.forEach(t),vKo=r(hC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ipe=n(hC,"CODE",{});var Spt=s(ipe);FKo=r(Spt,"pretrained_model_name_or_path"),Spt.forEach(t),TKo=r(hC,":"),hC.forEach(t),MKo=i(aa),ic=n(aa,"UL",{});var eY=s(ic);Lv=n(eY,"LI",{});var f9e=s(Lv);dpe=n(f9e,"STRONG",{});var Rpt=s(dpe);EKo=r(Rpt,"deit"),Rpt.forEach(t),CKo=r(f9e," \u2014 "),UO=n(f9e,"A",{href:!0});var Bpt=s(UO);wKo=r(Bpt,"DeiTForMaskedImageModeling"),Bpt.forEach(t),AKo=r(f9e," (DeiT model)"),f9e.forEach(t),yKo=i(eY),xv=n(eY,"LI",{});var m9e=s(xv);cpe=n(m9e,"STRONG",{});var Ppt=s(cpe);LKo=r(Ppt,"swin"),Ppt.forEach(t),xKo=r(m9e," \u2014 "),JO=n(m9e,"A",{href:!0});var $pt=s(JO);kKo=r($pt,"SwinForMaskedImageModeling"),$pt.forEach(t),SKo=r(m9e," (Swin model)"),m9e.forEach(t),RKo=i(eY),kv=n(eY,"LI",{});var g9e=s(kv);fpe=n(g9e,"STRONG",{});var Ipt=s(fpe);BKo=r(Ipt,"vit"),Ipt.forEach(t),PKo=r(g9e," \u2014 "),YO=n(g9e,"A",{href:!0});var qpt=s(YO);$Ko=r(qpt,"ViTForMaskedImageModeling"),qpt.forEach(t),IKo=r(g9e," (ViT model)"),g9e.forEach(t),eY.forEach(t),qKo=i(aa),Sv=n(aa,"P",{});var h9e=s(Sv);NKo=r(h9e,"The model is set in evaluation mode by default using "),mpe=n(h9e,"CODE",{});var Npt=s(mpe);jKo=r(Npt,"model.eval()"),Npt.forEach(t),DKo=r(h9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gpe=n(h9e,"CODE",{});var jpt=s(gpe);GKo=r(jpt,"model.train()"),jpt.forEach(t),h9e.forEach(t),OKo=i(aa),hpe=n(aa,"P",{});var Dpt=s(hpe);VKo=r(Dpt,"Examples:"),Dpt.forEach(t),XKo=i(aa),m(JA.$$.fragment,aa),aa.forEach(t),Nl.forEach(t),JPe=i(c),dc=n(c,"H2",{class:!0});var sqe=s(dc);Rv=n(sqe,"A",{id:!0,class:!0,href:!0});var Gpt=s(Rv);ppe=n(Gpt,"SPAN",{});var Opt=s(ppe);m(YA.$$.fragment,Opt),Opt.forEach(t),Gpt.forEach(t),zKo=i(sqe),_pe=n(sqe,"SPAN",{});var Vpt=s(_pe);QKo=r(Vpt,"AutoModelForObjectDetection"),Vpt.forEach(t),sqe.forEach(t),YPe=i(c),pr=n(c,"DIV",{class:!0});var Dl=s(pr);m(KA.$$.fragment,Dl),WKo=i(Dl),cc=n(Dl,"P",{});var oY=s(cc);HKo=r(oY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),KO=n(oY,"A",{href:!0});var Xpt=s(KO);UKo=r(Xpt,"from_pretrained()"),Xpt.forEach(t),JKo=r(oY," class method or the "),ZO=n(oY,"A",{href:!0});var zpt=s(ZO);YKo=r(zpt,"from_config()"),zpt.forEach(t),KKo=r(oY,` class
method.`),oY.forEach(t),ZKo=i(Dl),ZA=n(Dl,"P",{});var lqe=s(ZA);eZo=r(lqe,"This class cannot be instantiated directly using "),upe=n(lqe,"CODE",{});var Qpt=s(upe);oZo=r(Qpt,"__init__()"),Qpt.forEach(t),rZo=r(lqe," (throws an error)."),lqe.forEach(t),tZo=i(Dl),dt=n(Dl,"DIV",{class:!0});var Gl=s(dt);m(e0.$$.fragment,Gl),aZo=i(Gl),bpe=n(Gl,"P",{});var Wpt=s(bpe);nZo=r(Wpt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Wpt.forEach(t),sZo=i(Gl),fc=n(Gl,"P",{});var rY=s(fc);lZo=r(rY,`Note:
Loading a model from its configuration file does `),vpe=n(rY,"STRONG",{});var Hpt=s(vpe);iZo=r(Hpt,"not"),Hpt.forEach(t),dZo=r(rY,` load the model weights. It only affects the
model\u2019s configuration. Use `),eV=n(rY,"A",{href:!0});var Upt=s(eV);cZo=r(Upt,"from_pretrained()"),Upt.forEach(t),fZo=r(rY," to load the model weights."),rY.forEach(t),mZo=i(Gl),Fpe=n(Gl,"P",{});var Jpt=s(Fpe);gZo=r(Jpt,"Examples:"),Jpt.forEach(t),hZo=i(Gl),m(o0.$$.fragment,Gl),Gl.forEach(t),pZo=i(Dl),to=n(Dl,"DIV",{class:!0});var na=s(to);m(r0.$$.fragment,na),_Zo=i(na),Tpe=n(na,"P",{});var Ypt=s(Tpe);uZo=r(Ypt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Ypt.forEach(t),bZo=i(na),mn=n(na,"P",{});var pC=s(mn);vZo=r(pC,"The model class to instantiate is selected based on the "),Mpe=n(pC,"CODE",{});var Kpt=s(Mpe);FZo=r(Kpt,"model_type"),Kpt.forEach(t),TZo=r(pC,` property of the config object (either
passed as an argument or loaded from `),Epe=n(pC,"CODE",{});var Zpt=s(Epe);MZo=r(Zpt,"pretrained_model_name_or_path"),Zpt.forEach(t),EZo=r(pC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=n(pC,"CODE",{});var e_t=s(Cpe);CZo=r(e_t,"pretrained_model_name_or_path"),e_t.forEach(t),wZo=r(pC,":"),pC.forEach(t),AZo=i(na),wpe=n(na,"UL",{});var o_t=s(wpe);Bv=n(o_t,"LI",{});var p9e=s(Bv);Ape=n(p9e,"STRONG",{});var r_t=s(Ape);yZo=r(r_t,"detr"),r_t.forEach(t),LZo=r(p9e," \u2014 "),oV=n(p9e,"A",{href:!0});var t_t=s(oV);xZo=r(t_t,"DetrForObjectDetection"),t_t.forEach(t),kZo=r(p9e," (DETR model)"),p9e.forEach(t),o_t.forEach(t),SZo=i(na),Pv=n(na,"P",{});var _9e=s(Pv);RZo=r(_9e,"The model is set in evaluation mode by default using "),ype=n(_9e,"CODE",{});var a_t=s(ype);BZo=r(a_t,"model.eval()"),a_t.forEach(t),PZo=r(_9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lpe=n(_9e,"CODE",{});var n_t=s(Lpe);$Zo=r(n_t,"model.train()"),n_t.forEach(t),_9e.forEach(t),IZo=i(na),xpe=n(na,"P",{});var s_t=s(xpe);qZo=r(s_t,"Examples:"),s_t.forEach(t),NZo=i(na),m(t0.$$.fragment,na),na.forEach(t),Dl.forEach(t),KPe=i(c),mc=n(c,"H2",{class:!0});var iqe=s(mc);$v=n(iqe,"A",{id:!0,class:!0,href:!0});var l_t=s($v);kpe=n(l_t,"SPAN",{});var i_t=s(kpe);m(a0.$$.fragment,i_t),i_t.forEach(t),l_t.forEach(t),jZo=i(iqe),Spe=n(iqe,"SPAN",{});var d_t=s(Spe);DZo=r(d_t,"AutoModelForImageSegmentation"),d_t.forEach(t),iqe.forEach(t),ZPe=i(c),_r=n(c,"DIV",{class:!0});var Ol=s(_r);m(n0.$$.fragment,Ol),GZo=i(Ol),gc=n(Ol,"P",{});var tY=s(gc);OZo=r(tY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),rV=n(tY,"A",{href:!0});var c_t=s(rV);VZo=r(c_t,"from_pretrained()"),c_t.forEach(t),XZo=r(tY," class method or the "),tV=n(tY,"A",{href:!0});var f_t=s(tV);zZo=r(f_t,"from_config()"),f_t.forEach(t),QZo=r(tY,` class
method.`),tY.forEach(t),WZo=i(Ol),s0=n(Ol,"P",{});var dqe=s(s0);HZo=r(dqe,"This class cannot be instantiated directly using "),Rpe=n(dqe,"CODE",{});var m_t=s(Rpe);UZo=r(m_t,"__init__()"),m_t.forEach(t),JZo=r(dqe," (throws an error)."),dqe.forEach(t),YZo=i(Ol),ct=n(Ol,"DIV",{class:!0});var Vl=s(ct);m(l0.$$.fragment,Vl),KZo=i(Vl),Bpe=n(Vl,"P",{});var g_t=s(Bpe);ZZo=r(g_t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),g_t.forEach(t),eer=i(Vl),hc=n(Vl,"P",{});var aY=s(hc);oer=r(aY,`Note:
Loading a model from its configuration file does `),Ppe=n(aY,"STRONG",{});var h_t=s(Ppe);rer=r(h_t,"not"),h_t.forEach(t),ter=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=n(aY,"A",{href:!0});var p_t=s(aV);aer=r(p_t,"from_pretrained()"),p_t.forEach(t),ner=r(aY," to load the model weights."),aY.forEach(t),ser=i(Vl),$pe=n(Vl,"P",{});var __t=s($pe);ler=r(__t,"Examples:"),__t.forEach(t),ier=i(Vl),m(i0.$$.fragment,Vl),Vl.forEach(t),der=i(Ol),ao=n(Ol,"DIV",{class:!0});var sa=s(ao);m(d0.$$.fragment,sa),cer=i(sa),Ipe=n(sa,"P",{});var u_t=s(Ipe);fer=r(u_t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),u_t.forEach(t),mer=i(sa),gn=n(sa,"P",{});var _C=s(gn);ger=r(_C,"The model class to instantiate is selected based on the "),qpe=n(_C,"CODE",{});var b_t=s(qpe);her=r(b_t,"model_type"),b_t.forEach(t),per=r(_C,` property of the config object (either
passed as an argument or loaded from `),Npe=n(_C,"CODE",{});var v_t=s(Npe);_er=r(v_t,"pretrained_model_name_or_path"),v_t.forEach(t),uer=r(_C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=n(_C,"CODE",{});var F_t=s(jpe);ber=r(F_t,"pretrained_model_name_or_path"),F_t.forEach(t),ver=r(_C,":"),_C.forEach(t),Fer=i(sa),Dpe=n(sa,"UL",{});var T_t=s(Dpe);Iv=n(T_t,"LI",{});var u9e=s(Iv);Gpe=n(u9e,"STRONG",{});var M_t=s(Gpe);Ter=r(M_t,"detr"),M_t.forEach(t),Mer=r(u9e," \u2014 "),nV=n(u9e,"A",{href:!0});var E_t=s(nV);Eer=r(E_t,"DetrForSegmentation"),E_t.forEach(t),Cer=r(u9e," (DETR model)"),u9e.forEach(t),T_t.forEach(t),wer=i(sa),qv=n(sa,"P",{});var b9e=s(qv);Aer=r(b9e,"The model is set in evaluation mode by default using "),Ope=n(b9e,"CODE",{});var C_t=s(Ope);yer=r(C_t,"model.eval()"),C_t.forEach(t),Ler=r(b9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vpe=n(b9e,"CODE",{});var w_t=s(Vpe);xer=r(w_t,"model.train()"),w_t.forEach(t),b9e.forEach(t),ker=i(sa),Xpe=n(sa,"P",{});var A_t=s(Xpe);Ser=r(A_t,"Examples:"),A_t.forEach(t),Rer=i(sa),m(c0.$$.fragment,sa),sa.forEach(t),Ol.forEach(t),e$e=i(c),pc=n(c,"H2",{class:!0});var cqe=s(pc);Nv=n(cqe,"A",{id:!0,class:!0,href:!0});var y_t=s(Nv);zpe=n(y_t,"SPAN",{});var L_t=s(zpe);m(f0.$$.fragment,L_t),L_t.forEach(t),y_t.forEach(t),Ber=i(cqe),Qpe=n(cqe,"SPAN",{});var x_t=s(Qpe);Per=r(x_t,"AutoModelForSemanticSegmentation"),x_t.forEach(t),cqe.forEach(t),o$e=i(c),ur=n(c,"DIV",{class:!0});var Xl=s(ur);m(m0.$$.fragment,Xl),$er=i(Xl),_c=n(Xl,"P",{});var nY=s(_c);Ier=r(nY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),sV=n(nY,"A",{href:!0});var k_t=s(sV);qer=r(k_t,"from_pretrained()"),k_t.forEach(t),Ner=r(nY," class method or the "),lV=n(nY,"A",{href:!0});var S_t=s(lV);jer=r(S_t,"from_config()"),S_t.forEach(t),Der=r(nY,` class
method.`),nY.forEach(t),Ger=i(Xl),g0=n(Xl,"P",{});var fqe=s(g0);Oer=r(fqe,"This class cannot be instantiated directly using "),Wpe=n(fqe,"CODE",{});var R_t=s(Wpe);Ver=r(R_t,"__init__()"),R_t.forEach(t),Xer=r(fqe," (throws an error)."),fqe.forEach(t),zer=i(Xl),ft=n(Xl,"DIV",{class:!0});var zl=s(ft);m(h0.$$.fragment,zl),Qer=i(zl),Hpe=n(zl,"P",{});var B_t=s(Hpe);Wer=r(B_t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),B_t.forEach(t),Her=i(zl),uc=n(zl,"P",{});var sY=s(uc);Uer=r(sY,`Note:
Loading a model from its configuration file does `),Upe=n(sY,"STRONG",{});var P_t=s(Upe);Jer=r(P_t,"not"),P_t.forEach(t),Yer=r(sY,` load the model weights. It only affects the
model\u2019s configuration. Use `),iV=n(sY,"A",{href:!0});var $_t=s(iV);Ker=r($_t,"from_pretrained()"),$_t.forEach(t),Zer=r(sY," to load the model weights."),sY.forEach(t),eor=i(zl),Jpe=n(zl,"P",{});var I_t=s(Jpe);oor=r(I_t,"Examples:"),I_t.forEach(t),ror=i(zl),m(p0.$$.fragment,zl),zl.forEach(t),tor=i(Xl),no=n(Xl,"DIV",{class:!0});var la=s(no);m(_0.$$.fragment,la),aor=i(la),Ype=n(la,"P",{});var q_t=s(Ype);nor=r(q_t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),q_t.forEach(t),sor=i(la),hn=n(la,"P",{});var uC=s(hn);lor=r(uC,"The model class to instantiate is selected based on the "),Kpe=n(uC,"CODE",{});var N_t=s(Kpe);ior=r(N_t,"model_type"),N_t.forEach(t),dor=r(uC,` property of the config object (either
passed as an argument or loaded from `),Zpe=n(uC,"CODE",{});var j_t=s(Zpe);cor=r(j_t,"pretrained_model_name_or_path"),j_t.forEach(t),mor=r(uC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=n(uC,"CODE",{});var D_t=s(e_e);gor=r(D_t,"pretrained_model_name_or_path"),D_t.forEach(t),hor=r(uC,":"),uC.forEach(t),por=i(la),pn=n(la,"UL",{});var bC=s(pn);jv=n(bC,"LI",{});var v9e=s(jv);o_e=n(v9e,"STRONG",{});var G_t=s(o_e);_or=r(G_t,"beit"),G_t.forEach(t),uor=r(v9e," \u2014 "),dV=n(v9e,"A",{href:!0});var O_t=s(dV);bor=r(O_t,"BeitForSemanticSegmentation"),O_t.forEach(t),vor=r(v9e," (BEiT model)"),v9e.forEach(t),For=i(bC),Dv=n(bC,"LI",{});var F9e=s(Dv);r_e=n(F9e,"STRONG",{});var V_t=s(r_e);Tor=r(V_t,"data2vec-vision"),V_t.forEach(t),Mor=r(F9e," \u2014 "),cV=n(F9e,"A",{href:!0});var X_t=s(cV);Eor=r(X_t,"Data2VecVisionForSemanticSegmentation"),X_t.forEach(t),Cor=r(F9e," (Data2VecVision model)"),F9e.forEach(t),wor=i(bC),Gv=n(bC,"LI",{});var T9e=s(Gv);t_e=n(T9e,"STRONG",{});var z_t=s(t_e);Aor=r(z_t,"dpt"),z_t.forEach(t),yor=r(T9e," \u2014 "),fV=n(T9e,"A",{href:!0});var Q_t=s(fV);Lor=r(Q_t,"DPTForSemanticSegmentation"),Q_t.forEach(t),xor=r(T9e," (DPT model)"),T9e.forEach(t),kor=i(bC),Ov=n(bC,"LI",{});var M9e=s(Ov);a_e=n(M9e,"STRONG",{});var W_t=s(a_e);Sor=r(W_t,"segformer"),W_t.forEach(t),Ror=r(M9e," \u2014 "),mV=n(M9e,"A",{href:!0});var H_t=s(mV);Bor=r(H_t,"SegformerForSemanticSegmentation"),H_t.forEach(t),Por=r(M9e," (SegFormer model)"),M9e.forEach(t),bC.forEach(t),$or=i(la),Vv=n(la,"P",{});var E9e=s(Vv);Ior=r(E9e,"The model is set in evaluation mode by default using "),n_e=n(E9e,"CODE",{});var U_t=s(n_e);qor=r(U_t,"model.eval()"),U_t.forEach(t),Nor=r(E9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s_e=n(E9e,"CODE",{});var J_t=s(s_e);jor=r(J_t,"model.train()"),J_t.forEach(t),E9e.forEach(t),Dor=i(la),l_e=n(la,"P",{});var Y_t=s(l_e);Gor=r(Y_t,"Examples:"),Y_t.forEach(t),Oor=i(la),m(u0.$$.fragment,la),la.forEach(t),Xl.forEach(t),r$e=i(c),bc=n(c,"H2",{class:!0});var mqe=s(bc);Xv=n(mqe,"A",{id:!0,class:!0,href:!0});var K_t=s(Xv);i_e=n(K_t,"SPAN",{});var Z_t=s(i_e);m(b0.$$.fragment,Z_t),Z_t.forEach(t),K_t.forEach(t),Vor=i(mqe),d_e=n(mqe,"SPAN",{});var eut=s(d_e);Xor=r(eut,"AutoModelForInstanceSegmentation"),eut.forEach(t),mqe.forEach(t),t$e=i(c),br=n(c,"DIV",{class:!0});var Ql=s(br);m(v0.$$.fragment,Ql),zor=i(Ql),vc=n(Ql,"P",{});var lY=s(vc);Qor=r(lY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),gV=n(lY,"A",{href:!0});var out=s(gV);Wor=r(out,"from_pretrained()"),out.forEach(t),Hor=r(lY," class method or the "),hV=n(lY,"A",{href:!0});var rut=s(hV);Uor=r(rut,"from_config()"),rut.forEach(t),Jor=r(lY,` class
method.`),lY.forEach(t),Yor=i(Ql),F0=n(Ql,"P",{});var gqe=s(F0);Kor=r(gqe,"This class cannot be instantiated directly using "),c_e=n(gqe,"CODE",{});var tut=s(c_e);Zor=r(tut,"__init__()"),tut.forEach(t),err=r(gqe," (throws an error)."),gqe.forEach(t),orr=i(Ql),mt=n(Ql,"DIV",{class:!0});var Wl=s(mt);m(T0.$$.fragment,Wl),rrr=i(Wl),f_e=n(Wl,"P",{});var aut=s(f_e);trr=r(aut,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),aut.forEach(t),arr=i(Wl),Fc=n(Wl,"P",{});var iY=s(Fc);nrr=r(iY,`Note:
Loading a model from its configuration file does `),m_e=n(iY,"STRONG",{});var nut=s(m_e);srr=r(nut,"not"),nut.forEach(t),lrr=r(iY,` load the model weights. It only affects the
model\u2019s configuration. Use `),pV=n(iY,"A",{href:!0});var sut=s(pV);irr=r(sut,"from_pretrained()"),sut.forEach(t),drr=r(iY," to load the model weights."),iY.forEach(t),crr=i(Wl),g_e=n(Wl,"P",{});var lut=s(g_e);frr=r(lut,"Examples:"),lut.forEach(t),mrr=i(Wl),m(M0.$$.fragment,Wl),Wl.forEach(t),grr=i(Ql),so=n(Ql,"DIV",{class:!0});var ia=s(so);m(E0.$$.fragment,ia),hrr=i(ia),h_e=n(ia,"P",{});var iut=s(h_e);prr=r(iut,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),iut.forEach(t),_rr=i(ia),_n=n(ia,"P",{});var vC=s(_n);urr=r(vC,"The model class to instantiate is selected based on the "),p_e=n(vC,"CODE",{});var dut=s(p_e);brr=r(dut,"model_type"),dut.forEach(t),vrr=r(vC,` property of the config object (either
passed as an argument or loaded from `),__e=n(vC,"CODE",{});var cut=s(__e);Frr=r(cut,"pretrained_model_name_or_path"),cut.forEach(t),Trr=r(vC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=n(vC,"CODE",{});var fut=s(u_e);Mrr=r(fut,"pretrained_model_name_or_path"),fut.forEach(t),Err=r(vC,":"),vC.forEach(t),Crr=i(ia),b_e=n(ia,"UL",{});var mut=s(b_e);zv=n(mut,"LI",{});var C9e=s(zv);v_e=n(C9e,"STRONG",{});var gut=s(v_e);wrr=r(gut,"maskformer"),gut.forEach(t),Arr=r(C9e," \u2014 "),_V=n(C9e,"A",{href:!0});var hut=s(_V);yrr=r(hut,"MaskFormerForInstanceSegmentation"),hut.forEach(t),Lrr=r(C9e," (MaskFormer model)"),C9e.forEach(t),mut.forEach(t),xrr=i(ia),Qv=n(ia,"P",{});var w9e=s(Qv);krr=r(w9e,"The model is set in evaluation mode by default using "),F_e=n(w9e,"CODE",{});var put=s(F_e);Srr=r(put,"model.eval()"),put.forEach(t),Rrr=r(w9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T_e=n(w9e,"CODE",{});var _ut=s(T_e);Brr=r(_ut,"model.train()"),_ut.forEach(t),w9e.forEach(t),Prr=i(ia),M_e=n(ia,"P",{});var uut=s(M_e);$rr=r(uut,"Examples:"),uut.forEach(t),Irr=i(ia),m(C0.$$.fragment,ia),ia.forEach(t),Ql.forEach(t),a$e=i(c),Tc=n(c,"H2",{class:!0});var hqe=s(Tc);Wv=n(hqe,"A",{id:!0,class:!0,href:!0});var but=s(Wv);E_e=n(but,"SPAN",{});var vut=s(E_e);m(w0.$$.fragment,vut),vut.forEach(t),but.forEach(t),qrr=i(hqe),C_e=n(hqe,"SPAN",{});var Fut=s(C_e);Nrr=r(Fut,"TFAutoModel"),Fut.forEach(t),hqe.forEach(t),n$e=i(c),vr=n(c,"DIV",{class:!0});var Hl=s(vr);m(A0.$$.fragment,Hl),jrr=i(Hl),Mc=n(Hl,"P",{});var dY=s(Mc);Drr=r(dY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uV=n(dY,"A",{href:!0});var Tut=s(uV);Grr=r(Tut,"from_pretrained()"),Tut.forEach(t),Orr=r(dY," class method or the "),bV=n(dY,"A",{href:!0});var Mut=s(bV);Vrr=r(Mut,"from_config()"),Mut.forEach(t),Xrr=r(dY,` class
method.`),dY.forEach(t),zrr=i(Hl),y0=n(Hl,"P",{});var pqe=s(y0);Qrr=r(pqe,"This class cannot be instantiated directly using "),w_e=n(pqe,"CODE",{});var Eut=s(w_e);Wrr=r(Eut,"__init__()"),Eut.forEach(t),Hrr=r(pqe," (throws an error)."),pqe.forEach(t),Urr=i(Hl),gt=n(Hl,"DIV",{class:!0});var Ul=s(gt);m(L0.$$.fragment,Ul),Jrr=i(Ul),A_e=n(Ul,"P",{});var Cut=s(A_e);Yrr=r(Cut,"Instantiates one of the base model classes of the library from a configuration."),Cut.forEach(t),Krr=i(Ul),Ec=n(Ul,"P",{});var cY=s(Ec);Zrr=r(cY,`Note:
Loading a model from its configuration file does `),y_e=n(cY,"STRONG",{});var wut=s(y_e);etr=r(wut,"not"),wut.forEach(t),otr=r(cY,` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=n(cY,"A",{href:!0});var Aut=s(vV);rtr=r(Aut,"from_pretrained()"),Aut.forEach(t),ttr=r(cY," to load the model weights."),cY.forEach(t),atr=i(Ul),L_e=n(Ul,"P",{});var yut=s(L_e);ntr=r(yut,"Examples:"),yut.forEach(t),str=i(Ul),m(x0.$$.fragment,Ul),Ul.forEach(t),ltr=i(Hl),po=n(Hl,"DIV",{class:!0});var pa=s(po);m(k0.$$.fragment,pa),itr=i(pa),x_e=n(pa,"P",{});var Lut=s(x_e);dtr=r(Lut,"Instantiate one of the base model classes of the library from a pretrained model."),Lut.forEach(t),ctr=i(pa),un=n(pa,"P",{});var FC=s(un);ftr=r(FC,"The model class to instantiate is selected based on the "),k_e=n(FC,"CODE",{});var xut=s(k_e);mtr=r(xut,"model_type"),xut.forEach(t),gtr=r(FC,` property of the config object (either
passed as an argument or loaded from `),S_e=n(FC,"CODE",{});var kut=s(S_e);htr=r(kut,"pretrained_model_name_or_path"),kut.forEach(t),ptr=r(FC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R_e=n(FC,"CODE",{});var Sut=s(R_e);_tr=r(Sut,"pretrained_model_name_or_path"),Sut.forEach(t),utr=r(FC,":"),FC.forEach(t),btr=i(pa),x=n(pa,"UL",{});var k=s(x);Hv=n(k,"LI",{});var A9e=s(Hv);B_e=n(A9e,"STRONG",{});var Rut=s(B_e);vtr=r(Rut,"albert"),Rut.forEach(t),Ftr=r(A9e," \u2014 "),FV=n(A9e,"A",{href:!0});var But=s(FV);Ttr=r(But,"TFAlbertModel"),But.forEach(t),Mtr=r(A9e," (ALBERT model)"),A9e.forEach(t),Etr=i(k),Uv=n(k,"LI",{});var y9e=s(Uv);P_e=n(y9e,"STRONG",{});var Put=s(P_e);Ctr=r(Put,"bart"),Put.forEach(t),wtr=r(y9e," \u2014 "),TV=n(y9e,"A",{href:!0});var $ut=s(TV);Atr=r($ut,"TFBartModel"),$ut.forEach(t),ytr=r(y9e," (BART model)"),y9e.forEach(t),Ltr=i(k),Jv=n(k,"LI",{});var L9e=s(Jv);$_e=n(L9e,"STRONG",{});var Iut=s($_e);xtr=r(Iut,"bert"),Iut.forEach(t),ktr=r(L9e," \u2014 "),MV=n(L9e,"A",{href:!0});var qut=s(MV);Str=r(qut,"TFBertModel"),qut.forEach(t),Rtr=r(L9e," (BERT model)"),L9e.forEach(t),Btr=i(k),Yv=n(k,"LI",{});var x9e=s(Yv);I_e=n(x9e,"STRONG",{});var Nut=s(I_e);Ptr=r(Nut,"blenderbot"),Nut.forEach(t),$tr=r(x9e," \u2014 "),EV=n(x9e,"A",{href:!0});var jut=s(EV);Itr=r(jut,"TFBlenderbotModel"),jut.forEach(t),qtr=r(x9e," (Blenderbot model)"),x9e.forEach(t),Ntr=i(k),Kv=n(k,"LI",{});var k9e=s(Kv);q_e=n(k9e,"STRONG",{});var Dut=s(q_e);jtr=r(Dut,"blenderbot-small"),Dut.forEach(t),Dtr=r(k9e," \u2014 "),CV=n(k9e,"A",{href:!0});var Gut=s(CV);Gtr=r(Gut,"TFBlenderbotSmallModel"),Gut.forEach(t),Otr=r(k9e," (BlenderbotSmall model)"),k9e.forEach(t),Vtr=i(k),Zv=n(k,"LI",{});var S9e=s(Zv);N_e=n(S9e,"STRONG",{});var Out=s(N_e);Xtr=r(Out,"camembert"),Out.forEach(t),ztr=r(S9e," \u2014 "),wV=n(S9e,"A",{href:!0});var Vut=s(wV);Qtr=r(Vut,"TFCamembertModel"),Vut.forEach(t),Wtr=r(S9e," (CamemBERT model)"),S9e.forEach(t),Htr=i(k),eF=n(k,"LI",{});var R9e=s(eF);j_e=n(R9e,"STRONG",{});var Xut=s(j_e);Utr=r(Xut,"clip"),Xut.forEach(t),Jtr=r(R9e," \u2014 "),AV=n(R9e,"A",{href:!0});var zut=s(AV);Ytr=r(zut,"TFCLIPModel"),zut.forEach(t),Ktr=r(R9e," (CLIP model)"),R9e.forEach(t),Ztr=i(k),oF=n(k,"LI",{});var B9e=s(oF);D_e=n(B9e,"STRONG",{});var Qut=s(D_e);ear=r(Qut,"convbert"),Qut.forEach(t),oar=r(B9e," \u2014 "),yV=n(B9e,"A",{href:!0});var Wut=s(yV);rar=r(Wut,"TFConvBertModel"),Wut.forEach(t),tar=r(B9e," (ConvBERT model)"),B9e.forEach(t),aar=i(k),rF=n(k,"LI",{});var P9e=s(rF);G_e=n(P9e,"STRONG",{});var Hut=s(G_e);nar=r(Hut,"convnext"),Hut.forEach(t),sar=r(P9e," \u2014 "),LV=n(P9e,"A",{href:!0});var Uut=s(LV);lar=r(Uut,"TFConvNextModel"),Uut.forEach(t),iar=r(P9e," (ConvNext model)"),P9e.forEach(t),dar=i(k),tF=n(k,"LI",{});var $9e=s(tF);O_e=n($9e,"STRONG",{});var Jut=s(O_e);car=r(Jut,"ctrl"),Jut.forEach(t),far=r($9e," \u2014 "),xV=n($9e,"A",{href:!0});var Yut=s(xV);mar=r(Yut,"TFCTRLModel"),Yut.forEach(t),gar=r($9e," (CTRL model)"),$9e.forEach(t),har=i(k),aF=n(k,"LI",{});var I9e=s(aF);V_e=n(I9e,"STRONG",{});var Kut=s(V_e);par=r(Kut,"deberta"),Kut.forEach(t),_ar=r(I9e," \u2014 "),kV=n(I9e,"A",{href:!0});var Zut=s(kV);uar=r(Zut,"TFDebertaModel"),Zut.forEach(t),bar=r(I9e," (DeBERTa model)"),I9e.forEach(t),Far=i(k),nF=n(k,"LI",{});var q9e=s(nF);X_e=n(q9e,"STRONG",{});var e5t=s(X_e);Tar=r(e5t,"deberta-v2"),e5t.forEach(t),Mar=r(q9e," \u2014 "),SV=n(q9e,"A",{href:!0});var o5t=s(SV);Ear=r(o5t,"TFDebertaV2Model"),o5t.forEach(t),Car=r(q9e," (DeBERTa-v2 model)"),q9e.forEach(t),war=i(k),sF=n(k,"LI",{});var N9e=s(sF);z_e=n(N9e,"STRONG",{});var r5t=s(z_e);Aar=r(r5t,"distilbert"),r5t.forEach(t),yar=r(N9e," \u2014 "),RV=n(N9e,"A",{href:!0});var t5t=s(RV);Lar=r(t5t,"TFDistilBertModel"),t5t.forEach(t),xar=r(N9e," (DistilBERT model)"),N9e.forEach(t),kar=i(k),lF=n(k,"LI",{});var j9e=s(lF);Q_e=n(j9e,"STRONG",{});var a5t=s(Q_e);Sar=r(a5t,"dpr"),a5t.forEach(t),Rar=r(j9e," \u2014 "),BV=n(j9e,"A",{href:!0});var n5t=s(BV);Bar=r(n5t,"TFDPRQuestionEncoder"),n5t.forEach(t),Par=r(j9e," (DPR model)"),j9e.forEach(t),$ar=i(k),iF=n(k,"LI",{});var D9e=s(iF);W_e=n(D9e,"STRONG",{});var s5t=s(W_e);Iar=r(s5t,"electra"),s5t.forEach(t),qar=r(D9e," \u2014 "),PV=n(D9e,"A",{href:!0});var l5t=s(PV);Nar=r(l5t,"TFElectraModel"),l5t.forEach(t),jar=r(D9e," (ELECTRA model)"),D9e.forEach(t),Dar=i(k),dF=n(k,"LI",{});var G9e=s(dF);H_e=n(G9e,"STRONG",{});var i5t=s(H_e);Gar=r(i5t,"flaubert"),i5t.forEach(t),Oar=r(G9e," \u2014 "),$V=n(G9e,"A",{href:!0});var d5t=s($V);Var=r(d5t,"TFFlaubertModel"),d5t.forEach(t),Xar=r(G9e," (FlauBERT model)"),G9e.forEach(t),zar=i(k),Js=n(k,"LI",{});var X9=s(Js);U_e=n(X9,"STRONG",{});var c5t=s(U_e);Qar=r(c5t,"funnel"),c5t.forEach(t),War=r(X9," \u2014 "),IV=n(X9,"A",{href:!0});var f5t=s(IV);Har=r(f5t,"TFFunnelModel"),f5t.forEach(t),Uar=r(X9," or "),qV=n(X9,"A",{href:!0});var m5t=s(qV);Jar=r(m5t,"TFFunnelBaseModel"),m5t.forEach(t),Yar=r(X9," (Funnel Transformer model)"),X9.forEach(t),Kar=i(k),cF=n(k,"LI",{});var O9e=s(cF);J_e=n(O9e,"STRONG",{});var g5t=s(J_e);Zar=r(g5t,"gpt2"),g5t.forEach(t),enr=r(O9e," \u2014 "),NV=n(O9e,"A",{href:!0});var h5t=s(NV);onr=r(h5t,"TFGPT2Model"),h5t.forEach(t),rnr=r(O9e," (OpenAI GPT-2 model)"),O9e.forEach(t),tnr=i(k),fF=n(k,"LI",{});var V9e=s(fF);Y_e=n(V9e,"STRONG",{});var p5t=s(Y_e);anr=r(p5t,"gptj"),p5t.forEach(t),nnr=r(V9e," \u2014 "),jV=n(V9e,"A",{href:!0});var _5t=s(jV);snr=r(_5t,"TFGPTJModel"),_5t.forEach(t),lnr=r(V9e," (GPT-J model)"),V9e.forEach(t),inr=i(k),mF=n(k,"LI",{});var X9e=s(mF);K_e=n(X9e,"STRONG",{});var u5t=s(K_e);dnr=r(u5t,"hubert"),u5t.forEach(t),cnr=r(X9e," \u2014 "),DV=n(X9e,"A",{href:!0});var b5t=s(DV);fnr=r(b5t,"TFHubertModel"),b5t.forEach(t),mnr=r(X9e," (Hubert model)"),X9e.forEach(t),gnr=i(k),gF=n(k,"LI",{});var z9e=s(gF);Z_e=n(z9e,"STRONG",{});var v5t=s(Z_e);hnr=r(v5t,"layoutlm"),v5t.forEach(t),pnr=r(z9e," \u2014 "),GV=n(z9e,"A",{href:!0});var F5t=s(GV);_nr=r(F5t,"TFLayoutLMModel"),F5t.forEach(t),unr=r(z9e," (LayoutLM model)"),z9e.forEach(t),bnr=i(k),hF=n(k,"LI",{});var Q9e=s(hF);eue=n(Q9e,"STRONG",{});var T5t=s(eue);vnr=r(T5t,"led"),T5t.forEach(t),Fnr=r(Q9e," \u2014 "),OV=n(Q9e,"A",{href:!0});var M5t=s(OV);Tnr=r(M5t,"TFLEDModel"),M5t.forEach(t),Mnr=r(Q9e," (LED model)"),Q9e.forEach(t),Enr=i(k),pF=n(k,"LI",{});var W9e=s(pF);oue=n(W9e,"STRONG",{});var E5t=s(oue);Cnr=r(E5t,"longformer"),E5t.forEach(t),wnr=r(W9e," \u2014 "),VV=n(W9e,"A",{href:!0});var C5t=s(VV);Anr=r(C5t,"TFLongformerModel"),C5t.forEach(t),ynr=r(W9e," (Longformer model)"),W9e.forEach(t),Lnr=i(k),_F=n(k,"LI",{});var H9e=s(_F);rue=n(H9e,"STRONG",{});var w5t=s(rue);xnr=r(w5t,"lxmert"),w5t.forEach(t),knr=r(H9e," \u2014 "),XV=n(H9e,"A",{href:!0});var A5t=s(XV);Snr=r(A5t,"TFLxmertModel"),A5t.forEach(t),Rnr=r(H9e," (LXMERT model)"),H9e.forEach(t),Bnr=i(k),uF=n(k,"LI",{});var U9e=s(uF);tue=n(U9e,"STRONG",{});var y5t=s(tue);Pnr=r(y5t,"marian"),y5t.forEach(t),$nr=r(U9e," \u2014 "),zV=n(U9e,"A",{href:!0});var L5t=s(zV);Inr=r(L5t,"TFMarianModel"),L5t.forEach(t),qnr=r(U9e," (Marian model)"),U9e.forEach(t),Nnr=i(k),bF=n(k,"LI",{});var J9e=s(bF);aue=n(J9e,"STRONG",{});var x5t=s(aue);jnr=r(x5t,"mbart"),x5t.forEach(t),Dnr=r(J9e," \u2014 "),QV=n(J9e,"A",{href:!0});var k5t=s(QV);Gnr=r(k5t,"TFMBartModel"),k5t.forEach(t),Onr=r(J9e," (mBART model)"),J9e.forEach(t),Vnr=i(k),vF=n(k,"LI",{});var Y9e=s(vF);nue=n(Y9e,"STRONG",{});var S5t=s(nue);Xnr=r(S5t,"mobilebert"),S5t.forEach(t),znr=r(Y9e," \u2014 "),WV=n(Y9e,"A",{href:!0});var R5t=s(WV);Qnr=r(R5t,"TFMobileBertModel"),R5t.forEach(t),Wnr=r(Y9e," (MobileBERT model)"),Y9e.forEach(t),Hnr=i(k),FF=n(k,"LI",{});var K9e=s(FF);sue=n(K9e,"STRONG",{});var B5t=s(sue);Unr=r(B5t,"mpnet"),B5t.forEach(t),Jnr=r(K9e," \u2014 "),HV=n(K9e,"A",{href:!0});var P5t=s(HV);Ynr=r(P5t,"TFMPNetModel"),P5t.forEach(t),Knr=r(K9e," (MPNet model)"),K9e.forEach(t),Znr=i(k),TF=n(k,"LI",{});var Z9e=s(TF);lue=n(Z9e,"STRONG",{});var $5t=s(lue);esr=r($5t,"mt5"),$5t.forEach(t),osr=r(Z9e," \u2014 "),UV=n(Z9e,"A",{href:!0});var I5t=s(UV);rsr=r(I5t,"TFMT5Model"),I5t.forEach(t),tsr=r(Z9e," (mT5 model)"),Z9e.forEach(t),asr=i(k),MF=n(k,"LI",{});var exe=s(MF);iue=n(exe,"STRONG",{});var q5t=s(iue);nsr=r(q5t,"openai-gpt"),q5t.forEach(t),ssr=r(exe," \u2014 "),JV=n(exe,"A",{href:!0});var N5t=s(JV);lsr=r(N5t,"TFOpenAIGPTModel"),N5t.forEach(t),isr=r(exe," (OpenAI GPT model)"),exe.forEach(t),dsr=i(k),EF=n(k,"LI",{});var oxe=s(EF);due=n(oxe,"STRONG",{});var j5t=s(due);csr=r(j5t,"pegasus"),j5t.forEach(t),fsr=r(oxe," \u2014 "),YV=n(oxe,"A",{href:!0});var D5t=s(YV);msr=r(D5t,"TFPegasusModel"),D5t.forEach(t),gsr=r(oxe," (Pegasus model)"),oxe.forEach(t),hsr=i(k),CF=n(k,"LI",{});var rxe=s(CF);cue=n(rxe,"STRONG",{});var G5t=s(cue);psr=r(G5t,"rembert"),G5t.forEach(t),_sr=r(rxe," \u2014 "),KV=n(rxe,"A",{href:!0});var O5t=s(KV);usr=r(O5t,"TFRemBertModel"),O5t.forEach(t),bsr=r(rxe," (RemBERT model)"),rxe.forEach(t),vsr=i(k),wF=n(k,"LI",{});var txe=s(wF);fue=n(txe,"STRONG",{});var V5t=s(fue);Fsr=r(V5t,"roberta"),V5t.forEach(t),Tsr=r(txe," \u2014 "),ZV=n(txe,"A",{href:!0});var X5t=s(ZV);Msr=r(X5t,"TFRobertaModel"),X5t.forEach(t),Esr=r(txe," (RoBERTa model)"),txe.forEach(t),Csr=i(k),AF=n(k,"LI",{});var axe=s(AF);mue=n(axe,"STRONG",{});var z5t=s(mue);wsr=r(z5t,"roformer"),z5t.forEach(t),Asr=r(axe," \u2014 "),eX=n(axe,"A",{href:!0});var Q5t=s(eX);ysr=r(Q5t,"TFRoFormerModel"),Q5t.forEach(t),Lsr=r(axe," (RoFormer model)"),axe.forEach(t),xsr=i(k),yF=n(k,"LI",{});var nxe=s(yF);gue=n(nxe,"STRONG",{});var W5t=s(gue);ksr=r(W5t,"speech_to_text"),W5t.forEach(t),Ssr=r(nxe," \u2014 "),oX=n(nxe,"A",{href:!0});var H5t=s(oX);Rsr=r(H5t,"TFSpeech2TextModel"),H5t.forEach(t),Bsr=r(nxe," (Speech2Text model)"),nxe.forEach(t),Psr=i(k),LF=n(k,"LI",{});var sxe=s(LF);hue=n(sxe,"STRONG",{});var U5t=s(hue);$sr=r(U5t,"t5"),U5t.forEach(t),Isr=r(sxe," \u2014 "),rX=n(sxe,"A",{href:!0});var J5t=s(rX);qsr=r(J5t,"TFT5Model"),J5t.forEach(t),Nsr=r(sxe," (T5 model)"),sxe.forEach(t),jsr=i(k),xF=n(k,"LI",{});var lxe=s(xF);pue=n(lxe,"STRONG",{});var Y5t=s(pue);Dsr=r(Y5t,"tapas"),Y5t.forEach(t),Gsr=r(lxe," \u2014 "),tX=n(lxe,"A",{href:!0});var K5t=s(tX);Osr=r(K5t,"TFTapasModel"),K5t.forEach(t),Vsr=r(lxe," (TAPAS model)"),lxe.forEach(t),Xsr=i(k),kF=n(k,"LI",{});var ixe=s(kF);_ue=n(ixe,"STRONG",{});var Z5t=s(_ue);zsr=r(Z5t,"transfo-xl"),Z5t.forEach(t),Qsr=r(ixe," \u2014 "),aX=n(ixe,"A",{href:!0});var e1t=s(aX);Wsr=r(e1t,"TFTransfoXLModel"),e1t.forEach(t),Hsr=r(ixe," (Transformer-XL model)"),ixe.forEach(t),Usr=i(k),SF=n(k,"LI",{});var dxe=s(SF);uue=n(dxe,"STRONG",{});var o1t=s(uue);Jsr=r(o1t,"vit"),o1t.forEach(t),Ysr=r(dxe," \u2014 "),nX=n(dxe,"A",{href:!0});var r1t=s(nX);Ksr=r(r1t,"TFViTModel"),r1t.forEach(t),Zsr=r(dxe," (ViT model)"),dxe.forEach(t),elr=i(k),RF=n(k,"LI",{});var cxe=s(RF);bue=n(cxe,"STRONG",{});var t1t=s(bue);olr=r(t1t,"vit_mae"),t1t.forEach(t),rlr=r(cxe," \u2014 "),sX=n(cxe,"A",{href:!0});var a1t=s(sX);tlr=r(a1t,"TFViTMAEModel"),a1t.forEach(t),alr=r(cxe," (ViTMAE model)"),cxe.forEach(t),nlr=i(k),BF=n(k,"LI",{});var fxe=s(BF);vue=n(fxe,"STRONG",{});var n1t=s(vue);slr=r(n1t,"wav2vec2"),n1t.forEach(t),llr=r(fxe," \u2014 "),lX=n(fxe,"A",{href:!0});var s1t=s(lX);ilr=r(s1t,"TFWav2Vec2Model"),s1t.forEach(t),dlr=r(fxe," (Wav2Vec2 model)"),fxe.forEach(t),clr=i(k),PF=n(k,"LI",{});var mxe=s(PF);Fue=n(mxe,"STRONG",{});var l1t=s(Fue);flr=r(l1t,"xlm"),l1t.forEach(t),mlr=r(mxe," \u2014 "),iX=n(mxe,"A",{href:!0});var i1t=s(iX);glr=r(i1t,"TFXLMModel"),i1t.forEach(t),hlr=r(mxe," (XLM model)"),mxe.forEach(t),plr=i(k),$F=n(k,"LI",{});var gxe=s($F);Tue=n(gxe,"STRONG",{});var d1t=s(Tue);_lr=r(d1t,"xlm-roberta"),d1t.forEach(t),ulr=r(gxe," \u2014 "),dX=n(gxe,"A",{href:!0});var c1t=s(dX);blr=r(c1t,"TFXLMRobertaModel"),c1t.forEach(t),vlr=r(gxe," (XLM-RoBERTa model)"),gxe.forEach(t),Flr=i(k),IF=n(k,"LI",{});var hxe=s(IF);Mue=n(hxe,"STRONG",{});var f1t=s(Mue);Tlr=r(f1t,"xlnet"),f1t.forEach(t),Mlr=r(hxe," \u2014 "),cX=n(hxe,"A",{href:!0});var m1t=s(cX);Elr=r(m1t,"TFXLNetModel"),m1t.forEach(t),Clr=r(hxe," (XLNet model)"),hxe.forEach(t),k.forEach(t),wlr=i(pa),Eue=n(pa,"P",{});var g1t=s(Eue);Alr=r(g1t,"Examples:"),g1t.forEach(t),ylr=i(pa),m(S0.$$.fragment,pa),pa.forEach(t),Hl.forEach(t),s$e=i(c),Cc=n(c,"H2",{class:!0});var _qe=s(Cc);qF=n(_qe,"A",{id:!0,class:!0,href:!0});var h1t=s(qF);Cue=n(h1t,"SPAN",{});var p1t=s(Cue);m(R0.$$.fragment,p1t),p1t.forEach(t),h1t.forEach(t),Llr=i(_qe),wue=n(_qe,"SPAN",{});var _1t=s(wue);xlr=r(_1t,"TFAutoModelForPreTraining"),_1t.forEach(t),_qe.forEach(t),l$e=i(c),Fr=n(c,"DIV",{class:!0});var Jl=s(Fr);m(B0.$$.fragment,Jl),klr=i(Jl),wc=n(Jl,"P",{});var fY=s(wc);Slr=r(fY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fX=n(fY,"A",{href:!0});var u1t=s(fX);Rlr=r(u1t,"from_pretrained()"),u1t.forEach(t),Blr=r(fY," class method or the "),mX=n(fY,"A",{href:!0});var b1t=s(mX);Plr=r(b1t,"from_config()"),b1t.forEach(t),$lr=r(fY,` class
method.`),fY.forEach(t),Ilr=i(Jl),P0=n(Jl,"P",{});var uqe=s(P0);qlr=r(uqe,"This class cannot be instantiated directly using "),Aue=n(uqe,"CODE",{});var v1t=s(Aue);Nlr=r(v1t,"__init__()"),v1t.forEach(t),jlr=r(uqe," (throws an error)."),uqe.forEach(t),Dlr=i(Jl),ht=n(Jl,"DIV",{class:!0});var Yl=s(ht);m($0.$$.fragment,Yl),Glr=i(Yl),yue=n(Yl,"P",{});var F1t=s(yue);Olr=r(F1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),F1t.forEach(t),Vlr=i(Yl),Ac=n(Yl,"P",{});var mY=s(Ac);Xlr=r(mY,`Note:
Loading a model from its configuration file does `),Lue=n(mY,"STRONG",{});var T1t=s(Lue);zlr=r(T1t,"not"),T1t.forEach(t),Qlr=r(mY,` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=n(mY,"A",{href:!0});var M1t=s(gX);Wlr=r(M1t,"from_pretrained()"),M1t.forEach(t),Hlr=r(mY," to load the model weights."),mY.forEach(t),Ulr=i(Yl),xue=n(Yl,"P",{});var E1t=s(xue);Jlr=r(E1t,"Examples:"),E1t.forEach(t),Ylr=i(Yl),m(I0.$$.fragment,Yl),Yl.forEach(t),Klr=i(Jl),_o=n(Jl,"DIV",{class:!0});var _a=s(_o);m(q0.$$.fragment,_a),Zlr=i(_a),kue=n(_a,"P",{});var C1t=s(kue);eir=r(C1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),C1t.forEach(t),oir=i(_a),bn=n(_a,"P",{});var TC=s(bn);rir=r(TC,"The model class to instantiate is selected based on the "),Sue=n(TC,"CODE",{});var w1t=s(Sue);tir=r(w1t,"model_type"),w1t.forEach(t),air=r(TC,` property of the config object (either
passed as an argument or loaded from `),Rue=n(TC,"CODE",{});var A1t=s(Rue);nir=r(A1t,"pretrained_model_name_or_path"),A1t.forEach(t),sir=r(TC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=n(TC,"CODE",{});var y1t=s(Bue);lir=r(y1t,"pretrained_model_name_or_path"),y1t.forEach(t),iir=r(TC,":"),TC.forEach(t),dir=i(_a),U=n(_a,"UL",{});var Y=s(U);NF=n(Y,"LI",{});var pxe=s(NF);Pue=n(pxe,"STRONG",{});var L1t=s(Pue);cir=r(L1t,"albert"),L1t.forEach(t),fir=r(pxe," \u2014 "),hX=n(pxe,"A",{href:!0});var x1t=s(hX);mir=r(x1t,"TFAlbertForPreTraining"),x1t.forEach(t),gir=r(pxe," (ALBERT model)"),pxe.forEach(t),hir=i(Y),jF=n(Y,"LI",{});var _xe=s(jF);$ue=n(_xe,"STRONG",{});var k1t=s($ue);pir=r(k1t,"bart"),k1t.forEach(t),_ir=r(_xe," \u2014 "),pX=n(_xe,"A",{href:!0});var S1t=s(pX);uir=r(S1t,"TFBartForConditionalGeneration"),S1t.forEach(t),bir=r(_xe," (BART model)"),_xe.forEach(t),vir=i(Y),DF=n(Y,"LI",{});var uxe=s(DF);Iue=n(uxe,"STRONG",{});var R1t=s(Iue);Fir=r(R1t,"bert"),R1t.forEach(t),Tir=r(uxe," \u2014 "),_X=n(uxe,"A",{href:!0});var B1t=s(_X);Mir=r(B1t,"TFBertForPreTraining"),B1t.forEach(t),Eir=r(uxe," (BERT model)"),uxe.forEach(t),Cir=i(Y),GF=n(Y,"LI",{});var bxe=s(GF);que=n(bxe,"STRONG",{});var P1t=s(que);wir=r(P1t,"camembert"),P1t.forEach(t),Air=r(bxe," \u2014 "),uX=n(bxe,"A",{href:!0});var $1t=s(uX);yir=r($1t,"TFCamembertForMaskedLM"),$1t.forEach(t),Lir=r(bxe," (CamemBERT model)"),bxe.forEach(t),xir=i(Y),OF=n(Y,"LI",{});var vxe=s(OF);Nue=n(vxe,"STRONG",{});var I1t=s(Nue);kir=r(I1t,"ctrl"),I1t.forEach(t),Sir=r(vxe," \u2014 "),bX=n(vxe,"A",{href:!0});var q1t=s(bX);Rir=r(q1t,"TFCTRLLMHeadModel"),q1t.forEach(t),Bir=r(vxe," (CTRL model)"),vxe.forEach(t),Pir=i(Y),VF=n(Y,"LI",{});var Fxe=s(VF);jue=n(Fxe,"STRONG",{});var N1t=s(jue);$ir=r(N1t,"distilbert"),N1t.forEach(t),Iir=r(Fxe," \u2014 "),vX=n(Fxe,"A",{href:!0});var j1t=s(vX);qir=r(j1t,"TFDistilBertForMaskedLM"),j1t.forEach(t),Nir=r(Fxe," (DistilBERT model)"),Fxe.forEach(t),jir=i(Y),XF=n(Y,"LI",{});var Txe=s(XF);Due=n(Txe,"STRONG",{});var D1t=s(Due);Dir=r(D1t,"electra"),D1t.forEach(t),Gir=r(Txe," \u2014 "),FX=n(Txe,"A",{href:!0});var G1t=s(FX);Oir=r(G1t,"TFElectraForPreTraining"),G1t.forEach(t),Vir=r(Txe," (ELECTRA model)"),Txe.forEach(t),Xir=i(Y),zF=n(Y,"LI",{});var Mxe=s(zF);Gue=n(Mxe,"STRONG",{});var O1t=s(Gue);zir=r(O1t,"flaubert"),O1t.forEach(t),Qir=r(Mxe," \u2014 "),TX=n(Mxe,"A",{href:!0});var V1t=s(TX);Wir=r(V1t,"TFFlaubertWithLMHeadModel"),V1t.forEach(t),Hir=r(Mxe," (FlauBERT model)"),Mxe.forEach(t),Uir=i(Y),QF=n(Y,"LI",{});var Exe=s(QF);Oue=n(Exe,"STRONG",{});var X1t=s(Oue);Jir=r(X1t,"funnel"),X1t.forEach(t),Yir=r(Exe," \u2014 "),MX=n(Exe,"A",{href:!0});var z1t=s(MX);Kir=r(z1t,"TFFunnelForPreTraining"),z1t.forEach(t),Zir=r(Exe," (Funnel Transformer model)"),Exe.forEach(t),edr=i(Y),WF=n(Y,"LI",{});var Cxe=s(WF);Vue=n(Cxe,"STRONG",{});var Q1t=s(Vue);odr=r(Q1t,"gpt2"),Q1t.forEach(t),rdr=r(Cxe," \u2014 "),EX=n(Cxe,"A",{href:!0});var W1t=s(EX);tdr=r(W1t,"TFGPT2LMHeadModel"),W1t.forEach(t),adr=r(Cxe," (OpenAI GPT-2 model)"),Cxe.forEach(t),ndr=i(Y),HF=n(Y,"LI",{});var wxe=s(HF);Xue=n(wxe,"STRONG",{});var H1t=s(Xue);sdr=r(H1t,"layoutlm"),H1t.forEach(t),ldr=r(wxe," \u2014 "),CX=n(wxe,"A",{href:!0});var U1t=s(CX);idr=r(U1t,"TFLayoutLMForMaskedLM"),U1t.forEach(t),ddr=r(wxe," (LayoutLM model)"),wxe.forEach(t),cdr=i(Y),UF=n(Y,"LI",{});var Axe=s(UF);zue=n(Axe,"STRONG",{});var J1t=s(zue);fdr=r(J1t,"lxmert"),J1t.forEach(t),mdr=r(Axe," \u2014 "),wX=n(Axe,"A",{href:!0});var Y1t=s(wX);gdr=r(Y1t,"TFLxmertForPreTraining"),Y1t.forEach(t),hdr=r(Axe," (LXMERT model)"),Axe.forEach(t),pdr=i(Y),JF=n(Y,"LI",{});var yxe=s(JF);Que=n(yxe,"STRONG",{});var K1t=s(Que);_dr=r(K1t,"mobilebert"),K1t.forEach(t),udr=r(yxe," \u2014 "),AX=n(yxe,"A",{href:!0});var Z1t=s(AX);bdr=r(Z1t,"TFMobileBertForPreTraining"),Z1t.forEach(t),vdr=r(yxe," (MobileBERT model)"),yxe.forEach(t),Fdr=i(Y),YF=n(Y,"LI",{});var Lxe=s(YF);Wue=n(Lxe,"STRONG",{});var e4t=s(Wue);Tdr=r(e4t,"mpnet"),e4t.forEach(t),Mdr=r(Lxe," \u2014 "),yX=n(Lxe,"A",{href:!0});var o4t=s(yX);Edr=r(o4t,"TFMPNetForMaskedLM"),o4t.forEach(t),Cdr=r(Lxe," (MPNet model)"),Lxe.forEach(t),wdr=i(Y),KF=n(Y,"LI",{});var xxe=s(KF);Hue=n(xxe,"STRONG",{});var r4t=s(Hue);Adr=r(r4t,"openai-gpt"),r4t.forEach(t),ydr=r(xxe," \u2014 "),LX=n(xxe,"A",{href:!0});var t4t=s(LX);Ldr=r(t4t,"TFOpenAIGPTLMHeadModel"),t4t.forEach(t),xdr=r(xxe," (OpenAI GPT model)"),xxe.forEach(t),kdr=i(Y),ZF=n(Y,"LI",{});var kxe=s(ZF);Uue=n(kxe,"STRONG",{});var a4t=s(Uue);Sdr=r(a4t,"roberta"),a4t.forEach(t),Rdr=r(kxe," \u2014 "),xX=n(kxe,"A",{href:!0});var n4t=s(xX);Bdr=r(n4t,"TFRobertaForMaskedLM"),n4t.forEach(t),Pdr=r(kxe," (RoBERTa model)"),kxe.forEach(t),$dr=i(Y),eT=n(Y,"LI",{});var Sxe=s(eT);Jue=n(Sxe,"STRONG",{});var s4t=s(Jue);Idr=r(s4t,"t5"),s4t.forEach(t),qdr=r(Sxe," \u2014 "),kX=n(Sxe,"A",{href:!0});var l4t=s(kX);Ndr=r(l4t,"TFT5ForConditionalGeneration"),l4t.forEach(t),jdr=r(Sxe," (T5 model)"),Sxe.forEach(t),Ddr=i(Y),oT=n(Y,"LI",{});var Rxe=s(oT);Yue=n(Rxe,"STRONG",{});var i4t=s(Yue);Gdr=r(i4t,"tapas"),i4t.forEach(t),Odr=r(Rxe," \u2014 "),SX=n(Rxe,"A",{href:!0});var d4t=s(SX);Vdr=r(d4t,"TFTapasForMaskedLM"),d4t.forEach(t),Xdr=r(Rxe," (TAPAS model)"),Rxe.forEach(t),zdr=i(Y),rT=n(Y,"LI",{});var Bxe=s(rT);Kue=n(Bxe,"STRONG",{});var c4t=s(Kue);Qdr=r(c4t,"transfo-xl"),c4t.forEach(t),Wdr=r(Bxe," \u2014 "),RX=n(Bxe,"A",{href:!0});var f4t=s(RX);Hdr=r(f4t,"TFTransfoXLLMHeadModel"),f4t.forEach(t),Udr=r(Bxe," (Transformer-XL model)"),Bxe.forEach(t),Jdr=i(Y),tT=n(Y,"LI",{});var Pxe=s(tT);Zue=n(Pxe,"STRONG",{});var m4t=s(Zue);Ydr=r(m4t,"vit_mae"),m4t.forEach(t),Kdr=r(Pxe," \u2014 "),BX=n(Pxe,"A",{href:!0});var g4t=s(BX);Zdr=r(g4t,"TFViTMAEForPreTraining"),g4t.forEach(t),ecr=r(Pxe," (ViTMAE model)"),Pxe.forEach(t),ocr=i(Y),aT=n(Y,"LI",{});var $xe=s(aT);e5e=n($xe,"STRONG",{});var h4t=s(e5e);rcr=r(h4t,"xlm"),h4t.forEach(t),tcr=r($xe," \u2014 "),PX=n($xe,"A",{href:!0});var p4t=s(PX);acr=r(p4t,"TFXLMWithLMHeadModel"),p4t.forEach(t),ncr=r($xe," (XLM model)"),$xe.forEach(t),scr=i(Y),nT=n(Y,"LI",{});var Ixe=s(nT);o5e=n(Ixe,"STRONG",{});var _4t=s(o5e);lcr=r(_4t,"xlm-roberta"),_4t.forEach(t),icr=r(Ixe," \u2014 "),$X=n(Ixe,"A",{href:!0});var u4t=s($X);dcr=r(u4t,"TFXLMRobertaForMaskedLM"),u4t.forEach(t),ccr=r(Ixe," (XLM-RoBERTa model)"),Ixe.forEach(t),fcr=i(Y),sT=n(Y,"LI",{});var qxe=s(sT);r5e=n(qxe,"STRONG",{});var b4t=s(r5e);mcr=r(b4t,"xlnet"),b4t.forEach(t),gcr=r(qxe," \u2014 "),IX=n(qxe,"A",{href:!0});var v4t=s(IX);hcr=r(v4t,"TFXLNetLMHeadModel"),v4t.forEach(t),pcr=r(qxe," (XLNet model)"),qxe.forEach(t),Y.forEach(t),_cr=i(_a),t5e=n(_a,"P",{});var F4t=s(t5e);ucr=r(F4t,"Examples:"),F4t.forEach(t),bcr=i(_a),m(N0.$$.fragment,_a),_a.forEach(t),Jl.forEach(t),i$e=i(c),yc=n(c,"H2",{class:!0});var bqe=s(yc);lT=n(bqe,"A",{id:!0,class:!0,href:!0});var T4t=s(lT);a5e=n(T4t,"SPAN",{});var M4t=s(a5e);m(j0.$$.fragment,M4t),M4t.forEach(t),T4t.forEach(t),vcr=i(bqe),n5e=n(bqe,"SPAN",{});var E4t=s(n5e);Fcr=r(E4t,"TFAutoModelForCausalLM"),E4t.forEach(t),bqe.forEach(t),d$e=i(c),Tr=n(c,"DIV",{class:!0});var Kl=s(Tr);m(D0.$$.fragment,Kl),Tcr=i(Kl),Lc=n(Kl,"P",{});var gY=s(Lc);Mcr=r(gY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qX=n(gY,"A",{href:!0});var C4t=s(qX);Ecr=r(C4t,"from_pretrained()"),C4t.forEach(t),Ccr=r(gY," class method or the "),NX=n(gY,"A",{href:!0});var w4t=s(NX);wcr=r(w4t,"from_config()"),w4t.forEach(t),Acr=r(gY,` class
method.`),gY.forEach(t),ycr=i(Kl),G0=n(Kl,"P",{});var vqe=s(G0);Lcr=r(vqe,"This class cannot be instantiated directly using "),s5e=n(vqe,"CODE",{});var A4t=s(s5e);xcr=r(A4t,"__init__()"),A4t.forEach(t),kcr=r(vqe," (throws an error)."),vqe.forEach(t),Scr=i(Kl),pt=n(Kl,"DIV",{class:!0});var Zl=s(pt);m(O0.$$.fragment,Zl),Rcr=i(Zl),l5e=n(Zl,"P",{});var y4t=s(l5e);Bcr=r(y4t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),y4t.forEach(t),Pcr=i(Zl),xc=n(Zl,"P",{});var hY=s(xc);$cr=r(hY,`Note:
Loading a model from its configuration file does `),i5e=n(hY,"STRONG",{});var L4t=s(i5e);Icr=r(L4t,"not"),L4t.forEach(t),qcr=r(hY,` load the model weights. It only affects the
model\u2019s configuration. Use `),jX=n(hY,"A",{href:!0});var x4t=s(jX);Ncr=r(x4t,"from_pretrained()"),x4t.forEach(t),jcr=r(hY," to load the model weights."),hY.forEach(t),Dcr=i(Zl),d5e=n(Zl,"P",{});var k4t=s(d5e);Gcr=r(k4t,"Examples:"),k4t.forEach(t),Ocr=i(Zl),m(V0.$$.fragment,Zl),Zl.forEach(t),Vcr=i(Kl),uo=n(Kl,"DIV",{class:!0});var ua=s(uo);m(X0.$$.fragment,ua),Xcr=i(ua),c5e=n(ua,"P",{});var S4t=s(c5e);zcr=r(S4t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),S4t.forEach(t),Qcr=i(ua),vn=n(ua,"P",{});var MC=s(vn);Wcr=r(MC,"The model class to instantiate is selected based on the "),f5e=n(MC,"CODE",{});var R4t=s(f5e);Hcr=r(R4t,"model_type"),R4t.forEach(t),Ucr=r(MC,` property of the config object (either
passed as an argument or loaded from `),m5e=n(MC,"CODE",{});var B4t=s(m5e);Jcr=r(B4t,"pretrained_model_name_or_path"),B4t.forEach(t),Ycr=r(MC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g5e=n(MC,"CODE",{});var P4t=s(g5e);Kcr=r(P4t,"pretrained_model_name_or_path"),P4t.forEach(t),Zcr=r(MC,":"),MC.forEach(t),efr=i(ua),ge=n(ua,"UL",{});var ue=s(ge);iT=n(ue,"LI",{});var Nxe=s(iT);h5e=n(Nxe,"STRONG",{});var $4t=s(h5e);ofr=r($4t,"bert"),$4t.forEach(t),rfr=r(Nxe," \u2014 "),DX=n(Nxe,"A",{href:!0});var I4t=s(DX);tfr=r(I4t,"TFBertLMHeadModel"),I4t.forEach(t),afr=r(Nxe," (BERT model)"),Nxe.forEach(t),nfr=i(ue),dT=n(ue,"LI",{});var jxe=s(dT);p5e=n(jxe,"STRONG",{});var q4t=s(p5e);sfr=r(q4t,"camembert"),q4t.forEach(t),lfr=r(jxe," \u2014 "),GX=n(jxe,"A",{href:!0});var N4t=s(GX);ifr=r(N4t,"TFCamembertForCausalLM"),N4t.forEach(t),dfr=r(jxe," (CamemBERT model)"),jxe.forEach(t),cfr=i(ue),cT=n(ue,"LI",{});var Dxe=s(cT);_5e=n(Dxe,"STRONG",{});var j4t=s(_5e);ffr=r(j4t,"ctrl"),j4t.forEach(t),mfr=r(Dxe," \u2014 "),OX=n(Dxe,"A",{href:!0});var D4t=s(OX);gfr=r(D4t,"TFCTRLLMHeadModel"),D4t.forEach(t),hfr=r(Dxe," (CTRL model)"),Dxe.forEach(t),pfr=i(ue),fT=n(ue,"LI",{});var Gxe=s(fT);u5e=n(Gxe,"STRONG",{});var G4t=s(u5e);_fr=r(G4t,"gpt2"),G4t.forEach(t),ufr=r(Gxe," \u2014 "),VX=n(Gxe,"A",{href:!0});var O4t=s(VX);bfr=r(O4t,"TFGPT2LMHeadModel"),O4t.forEach(t),vfr=r(Gxe," (OpenAI GPT-2 model)"),Gxe.forEach(t),Ffr=i(ue),mT=n(ue,"LI",{});var Oxe=s(mT);b5e=n(Oxe,"STRONG",{});var V4t=s(b5e);Tfr=r(V4t,"gptj"),V4t.forEach(t),Mfr=r(Oxe," \u2014 "),XX=n(Oxe,"A",{href:!0});var X4t=s(XX);Efr=r(X4t,"TFGPTJForCausalLM"),X4t.forEach(t),Cfr=r(Oxe," (GPT-J model)"),Oxe.forEach(t),wfr=i(ue),gT=n(ue,"LI",{});var Vxe=s(gT);v5e=n(Vxe,"STRONG",{});var z4t=s(v5e);Afr=r(z4t,"openai-gpt"),z4t.forEach(t),yfr=r(Vxe," \u2014 "),zX=n(Vxe,"A",{href:!0});var Q4t=s(zX);Lfr=r(Q4t,"TFOpenAIGPTLMHeadModel"),Q4t.forEach(t),xfr=r(Vxe," (OpenAI GPT model)"),Vxe.forEach(t),kfr=i(ue),hT=n(ue,"LI",{});var Xxe=s(hT);F5e=n(Xxe,"STRONG",{});var W4t=s(F5e);Sfr=r(W4t,"rembert"),W4t.forEach(t),Rfr=r(Xxe," \u2014 "),QX=n(Xxe,"A",{href:!0});var H4t=s(QX);Bfr=r(H4t,"TFRemBertForCausalLM"),H4t.forEach(t),Pfr=r(Xxe," (RemBERT model)"),Xxe.forEach(t),$fr=i(ue),pT=n(ue,"LI",{});var zxe=s(pT);T5e=n(zxe,"STRONG",{});var U4t=s(T5e);Ifr=r(U4t,"roberta"),U4t.forEach(t),qfr=r(zxe," \u2014 "),WX=n(zxe,"A",{href:!0});var J4t=s(WX);Nfr=r(J4t,"TFRobertaForCausalLM"),J4t.forEach(t),jfr=r(zxe," (RoBERTa model)"),zxe.forEach(t),Dfr=i(ue),_T=n(ue,"LI",{});var Qxe=s(_T);M5e=n(Qxe,"STRONG",{});var Y4t=s(M5e);Gfr=r(Y4t,"roformer"),Y4t.forEach(t),Ofr=r(Qxe," \u2014 "),HX=n(Qxe,"A",{href:!0});var K4t=s(HX);Vfr=r(K4t,"TFRoFormerForCausalLM"),K4t.forEach(t),Xfr=r(Qxe," (RoFormer model)"),Qxe.forEach(t),zfr=i(ue),uT=n(ue,"LI",{});var Wxe=s(uT);E5e=n(Wxe,"STRONG",{});var Z4t=s(E5e);Qfr=r(Z4t,"transfo-xl"),Z4t.forEach(t),Wfr=r(Wxe," \u2014 "),UX=n(Wxe,"A",{href:!0});var ebt=s(UX);Hfr=r(ebt,"TFTransfoXLLMHeadModel"),ebt.forEach(t),Ufr=r(Wxe," (Transformer-XL model)"),Wxe.forEach(t),Jfr=i(ue),bT=n(ue,"LI",{});var Hxe=s(bT);C5e=n(Hxe,"STRONG",{});var obt=s(C5e);Yfr=r(obt,"xlm"),obt.forEach(t),Kfr=r(Hxe," \u2014 "),JX=n(Hxe,"A",{href:!0});var rbt=s(JX);Zfr=r(rbt,"TFXLMWithLMHeadModel"),rbt.forEach(t),emr=r(Hxe," (XLM model)"),Hxe.forEach(t),omr=i(ue),vT=n(ue,"LI",{});var Uxe=s(vT);w5e=n(Uxe,"STRONG",{});var tbt=s(w5e);rmr=r(tbt,"xlnet"),tbt.forEach(t),tmr=r(Uxe," \u2014 "),YX=n(Uxe,"A",{href:!0});var abt=s(YX);amr=r(abt,"TFXLNetLMHeadModel"),abt.forEach(t),nmr=r(Uxe," (XLNet model)"),Uxe.forEach(t),ue.forEach(t),smr=i(ua),A5e=n(ua,"P",{});var nbt=s(A5e);lmr=r(nbt,"Examples:"),nbt.forEach(t),imr=i(ua),m(z0.$$.fragment,ua),ua.forEach(t),Kl.forEach(t),c$e=i(c),kc=n(c,"H2",{class:!0});var Fqe=s(kc);FT=n(Fqe,"A",{id:!0,class:!0,href:!0});var sbt=s(FT);y5e=n(sbt,"SPAN",{});var lbt=s(y5e);m(Q0.$$.fragment,lbt),lbt.forEach(t),sbt.forEach(t),dmr=i(Fqe),L5e=n(Fqe,"SPAN",{});var ibt=s(L5e);cmr=r(ibt,"TFAutoModelForImageClassification"),ibt.forEach(t),Fqe.forEach(t),f$e=i(c),Mr=n(c,"DIV",{class:!0});var ei=s(Mr);m(W0.$$.fragment,ei),fmr=i(ei),Sc=n(ei,"P",{});var pY=s(Sc);mmr=r(pY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KX=n(pY,"A",{href:!0});var dbt=s(KX);gmr=r(dbt,"from_pretrained()"),dbt.forEach(t),hmr=r(pY," class method or the "),ZX=n(pY,"A",{href:!0});var cbt=s(ZX);pmr=r(cbt,"from_config()"),cbt.forEach(t),_mr=r(pY,` class
method.`),pY.forEach(t),umr=i(ei),H0=n(ei,"P",{});var Tqe=s(H0);bmr=r(Tqe,"This class cannot be instantiated directly using "),x5e=n(Tqe,"CODE",{});var fbt=s(x5e);vmr=r(fbt,"__init__()"),fbt.forEach(t),Fmr=r(Tqe," (throws an error)."),Tqe.forEach(t),Tmr=i(ei),_t=n(ei,"DIV",{class:!0});var oi=s(_t);m(U0.$$.fragment,oi),Mmr=i(oi),k5e=n(oi,"P",{});var mbt=s(k5e);Emr=r(mbt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mbt.forEach(t),Cmr=i(oi),Rc=n(oi,"P",{});var _Y=s(Rc);wmr=r(_Y,`Note:
Loading a model from its configuration file does `),S5e=n(_Y,"STRONG",{});var gbt=s(S5e);Amr=r(gbt,"not"),gbt.forEach(t),ymr=r(_Y,` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=n(_Y,"A",{href:!0});var hbt=s(ez);Lmr=r(hbt,"from_pretrained()"),hbt.forEach(t),xmr=r(_Y," to load the model weights."),_Y.forEach(t),kmr=i(oi),R5e=n(oi,"P",{});var pbt=s(R5e);Smr=r(pbt,"Examples:"),pbt.forEach(t),Rmr=i(oi),m(J0.$$.fragment,oi),oi.forEach(t),Bmr=i(ei),bo=n(ei,"DIV",{class:!0});var ba=s(bo);m(Y0.$$.fragment,ba),Pmr=i(ba),B5e=n(ba,"P",{});var _bt=s(B5e);$mr=r(_bt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_bt.forEach(t),Imr=i(ba),Fn=n(ba,"P",{});var EC=s(Fn);qmr=r(EC,"The model class to instantiate is selected based on the "),P5e=n(EC,"CODE",{});var ubt=s(P5e);Nmr=r(ubt,"model_type"),ubt.forEach(t),jmr=r(EC,` property of the config object (either
passed as an argument or loaded from `),$5e=n(EC,"CODE",{});var bbt=s($5e);Dmr=r(bbt,"pretrained_model_name_or_path"),bbt.forEach(t),Gmr=r(EC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I5e=n(EC,"CODE",{});var vbt=s(I5e);Omr=r(vbt,"pretrained_model_name_or_path"),vbt.forEach(t),Vmr=r(EC,":"),EC.forEach(t),Xmr=i(ba),K0=n(ba,"UL",{});var Mqe=s(K0);TT=n(Mqe,"LI",{});var Jxe=s(TT);q5e=n(Jxe,"STRONG",{});var Fbt=s(q5e);zmr=r(Fbt,"convnext"),Fbt.forEach(t),Qmr=r(Jxe," \u2014 "),oz=n(Jxe,"A",{href:!0});var Tbt=s(oz);Wmr=r(Tbt,"TFConvNextForImageClassification"),Tbt.forEach(t),Hmr=r(Jxe," (ConvNext model)"),Jxe.forEach(t),Umr=i(Mqe),MT=n(Mqe,"LI",{});var Yxe=s(MT);N5e=n(Yxe,"STRONG",{});var Mbt=s(N5e);Jmr=r(Mbt,"vit"),Mbt.forEach(t),Ymr=r(Yxe," \u2014 "),rz=n(Yxe,"A",{href:!0});var Ebt=s(rz);Kmr=r(Ebt,"TFViTForImageClassification"),Ebt.forEach(t),Zmr=r(Yxe," (ViT model)"),Yxe.forEach(t),Mqe.forEach(t),egr=i(ba),j5e=n(ba,"P",{});var Cbt=s(j5e);ogr=r(Cbt,"Examples:"),Cbt.forEach(t),rgr=i(ba),m(Z0.$$.fragment,ba),ba.forEach(t),ei.forEach(t),m$e=i(c),Bc=n(c,"H2",{class:!0});var Eqe=s(Bc);ET=n(Eqe,"A",{id:!0,class:!0,href:!0});var wbt=s(ET);D5e=n(wbt,"SPAN",{});var Abt=s(D5e);m(ey.$$.fragment,Abt),Abt.forEach(t),wbt.forEach(t),tgr=i(Eqe),G5e=n(Eqe,"SPAN",{});var ybt=s(G5e);agr=r(ybt,"TFAutoModelForMaskedLM"),ybt.forEach(t),Eqe.forEach(t),g$e=i(c),Er=n(c,"DIV",{class:!0});var ri=s(Er);m(oy.$$.fragment,ri),ngr=i(ri),Pc=n(ri,"P",{});var uY=s(Pc);sgr=r(uY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),tz=n(uY,"A",{href:!0});var Lbt=s(tz);lgr=r(Lbt,"from_pretrained()"),Lbt.forEach(t),igr=r(uY," class method or the "),az=n(uY,"A",{href:!0});var xbt=s(az);dgr=r(xbt,"from_config()"),xbt.forEach(t),cgr=r(uY,` class
method.`),uY.forEach(t),fgr=i(ri),ry=n(ri,"P",{});var Cqe=s(ry);mgr=r(Cqe,"This class cannot be instantiated directly using "),O5e=n(Cqe,"CODE",{});var kbt=s(O5e);ggr=r(kbt,"__init__()"),kbt.forEach(t),hgr=r(Cqe," (throws an error)."),Cqe.forEach(t),pgr=i(ri),ut=n(ri,"DIV",{class:!0});var ti=s(ut);m(ty.$$.fragment,ti),_gr=i(ti),V5e=n(ti,"P",{});var Sbt=s(V5e);ugr=r(Sbt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Sbt.forEach(t),bgr=i(ti),$c=n(ti,"P",{});var bY=s($c);vgr=r(bY,`Note:
Loading a model from its configuration file does `),X5e=n(bY,"STRONG",{});var Rbt=s(X5e);Fgr=r(Rbt,"not"),Rbt.forEach(t),Tgr=r(bY,` load the model weights. It only affects the
model\u2019s configuration. Use `),nz=n(bY,"A",{href:!0});var Bbt=s(nz);Mgr=r(Bbt,"from_pretrained()"),Bbt.forEach(t),Egr=r(bY," to load the model weights."),bY.forEach(t),Cgr=i(ti),z5e=n(ti,"P",{});var Pbt=s(z5e);wgr=r(Pbt,"Examples:"),Pbt.forEach(t),Agr=i(ti),m(ay.$$.fragment,ti),ti.forEach(t),ygr=i(ri),vo=n(ri,"DIV",{class:!0});var va=s(vo);m(ny.$$.fragment,va),Lgr=i(va),Q5e=n(va,"P",{});var $bt=s(Q5e);xgr=r($bt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$bt.forEach(t),kgr=i(va),Tn=n(va,"P",{});var CC=s(Tn);Sgr=r(CC,"The model class to instantiate is selected based on the "),W5e=n(CC,"CODE",{});var Ibt=s(W5e);Rgr=r(Ibt,"model_type"),Ibt.forEach(t),Bgr=r(CC,` property of the config object (either
passed as an argument or loaded from `),H5e=n(CC,"CODE",{});var qbt=s(H5e);Pgr=r(qbt,"pretrained_model_name_or_path"),qbt.forEach(t),$gr=r(CC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U5e=n(CC,"CODE",{});var Nbt=s(U5e);Igr=r(Nbt,"pretrained_model_name_or_path"),Nbt.forEach(t),qgr=r(CC,":"),CC.forEach(t),Ngr=i(va),K=n(va,"UL",{});var re=s(K);CT=n(re,"LI",{});var Kxe=s(CT);J5e=n(Kxe,"STRONG",{});var jbt=s(J5e);jgr=r(jbt,"albert"),jbt.forEach(t),Dgr=r(Kxe," \u2014 "),sz=n(Kxe,"A",{href:!0});var Dbt=s(sz);Ggr=r(Dbt,"TFAlbertForMaskedLM"),Dbt.forEach(t),Ogr=r(Kxe," (ALBERT model)"),Kxe.forEach(t),Vgr=i(re),wT=n(re,"LI",{});var Zxe=s(wT);Y5e=n(Zxe,"STRONG",{});var Gbt=s(Y5e);Xgr=r(Gbt,"bert"),Gbt.forEach(t),zgr=r(Zxe," \u2014 "),lz=n(Zxe,"A",{href:!0});var Obt=s(lz);Qgr=r(Obt,"TFBertForMaskedLM"),Obt.forEach(t),Wgr=r(Zxe," (BERT model)"),Zxe.forEach(t),Hgr=i(re),AT=n(re,"LI",{});var eke=s(AT);K5e=n(eke,"STRONG",{});var Vbt=s(K5e);Ugr=r(Vbt,"camembert"),Vbt.forEach(t),Jgr=r(eke," \u2014 "),iz=n(eke,"A",{href:!0});var Xbt=s(iz);Ygr=r(Xbt,"TFCamembertForMaskedLM"),Xbt.forEach(t),Kgr=r(eke," (CamemBERT model)"),eke.forEach(t),Zgr=i(re),yT=n(re,"LI",{});var oke=s(yT);Z5e=n(oke,"STRONG",{});var zbt=s(Z5e);ehr=r(zbt,"convbert"),zbt.forEach(t),ohr=r(oke," \u2014 "),dz=n(oke,"A",{href:!0});var Qbt=s(dz);rhr=r(Qbt,"TFConvBertForMaskedLM"),Qbt.forEach(t),thr=r(oke," (ConvBERT model)"),oke.forEach(t),ahr=i(re),LT=n(re,"LI",{});var rke=s(LT);e1e=n(rke,"STRONG",{});var Wbt=s(e1e);nhr=r(Wbt,"deberta"),Wbt.forEach(t),shr=r(rke," \u2014 "),cz=n(rke,"A",{href:!0});var Hbt=s(cz);lhr=r(Hbt,"TFDebertaForMaskedLM"),Hbt.forEach(t),ihr=r(rke," (DeBERTa model)"),rke.forEach(t),dhr=i(re),xT=n(re,"LI",{});var tke=s(xT);o1e=n(tke,"STRONG",{});var Ubt=s(o1e);chr=r(Ubt,"deberta-v2"),Ubt.forEach(t),fhr=r(tke," \u2014 "),fz=n(tke,"A",{href:!0});var Jbt=s(fz);mhr=r(Jbt,"TFDebertaV2ForMaskedLM"),Jbt.forEach(t),ghr=r(tke," (DeBERTa-v2 model)"),tke.forEach(t),hhr=i(re),kT=n(re,"LI",{});var ake=s(kT);r1e=n(ake,"STRONG",{});var Ybt=s(r1e);phr=r(Ybt,"distilbert"),Ybt.forEach(t),_hr=r(ake," \u2014 "),mz=n(ake,"A",{href:!0});var Kbt=s(mz);uhr=r(Kbt,"TFDistilBertForMaskedLM"),Kbt.forEach(t),bhr=r(ake," (DistilBERT model)"),ake.forEach(t),vhr=i(re),ST=n(re,"LI",{});var nke=s(ST);t1e=n(nke,"STRONG",{});var Zbt=s(t1e);Fhr=r(Zbt,"electra"),Zbt.forEach(t),Thr=r(nke," \u2014 "),gz=n(nke,"A",{href:!0});var e2t=s(gz);Mhr=r(e2t,"TFElectraForMaskedLM"),e2t.forEach(t),Ehr=r(nke," (ELECTRA model)"),nke.forEach(t),Chr=i(re),RT=n(re,"LI",{});var ske=s(RT);a1e=n(ske,"STRONG",{});var o2t=s(a1e);whr=r(o2t,"flaubert"),o2t.forEach(t),Ahr=r(ske," \u2014 "),hz=n(ske,"A",{href:!0});var r2t=s(hz);yhr=r(r2t,"TFFlaubertWithLMHeadModel"),r2t.forEach(t),Lhr=r(ske," (FlauBERT model)"),ske.forEach(t),xhr=i(re),BT=n(re,"LI",{});var lke=s(BT);n1e=n(lke,"STRONG",{});var t2t=s(n1e);khr=r(t2t,"funnel"),t2t.forEach(t),Shr=r(lke," \u2014 "),pz=n(lke,"A",{href:!0});var a2t=s(pz);Rhr=r(a2t,"TFFunnelForMaskedLM"),a2t.forEach(t),Bhr=r(lke," (Funnel Transformer model)"),lke.forEach(t),Phr=i(re),PT=n(re,"LI",{});var ike=s(PT);s1e=n(ike,"STRONG",{});var n2t=s(s1e);$hr=r(n2t,"layoutlm"),n2t.forEach(t),Ihr=r(ike," \u2014 "),_z=n(ike,"A",{href:!0});var s2t=s(_z);qhr=r(s2t,"TFLayoutLMForMaskedLM"),s2t.forEach(t),Nhr=r(ike," (LayoutLM model)"),ike.forEach(t),jhr=i(re),$T=n(re,"LI",{});var dke=s($T);l1e=n(dke,"STRONG",{});var l2t=s(l1e);Dhr=r(l2t,"longformer"),l2t.forEach(t),Ghr=r(dke," \u2014 "),uz=n(dke,"A",{href:!0});var i2t=s(uz);Ohr=r(i2t,"TFLongformerForMaskedLM"),i2t.forEach(t),Vhr=r(dke," (Longformer model)"),dke.forEach(t),Xhr=i(re),IT=n(re,"LI",{});var cke=s(IT);i1e=n(cke,"STRONG",{});var d2t=s(i1e);zhr=r(d2t,"mobilebert"),d2t.forEach(t),Qhr=r(cke," \u2014 "),bz=n(cke,"A",{href:!0});var c2t=s(bz);Whr=r(c2t,"TFMobileBertForMaskedLM"),c2t.forEach(t),Hhr=r(cke," (MobileBERT model)"),cke.forEach(t),Uhr=i(re),qT=n(re,"LI",{});var fke=s(qT);d1e=n(fke,"STRONG",{});var f2t=s(d1e);Jhr=r(f2t,"mpnet"),f2t.forEach(t),Yhr=r(fke," \u2014 "),vz=n(fke,"A",{href:!0});var m2t=s(vz);Khr=r(m2t,"TFMPNetForMaskedLM"),m2t.forEach(t),Zhr=r(fke," (MPNet model)"),fke.forEach(t),epr=i(re),NT=n(re,"LI",{});var mke=s(NT);c1e=n(mke,"STRONG",{});var g2t=s(c1e);opr=r(g2t,"rembert"),g2t.forEach(t),rpr=r(mke," \u2014 "),Fz=n(mke,"A",{href:!0});var h2t=s(Fz);tpr=r(h2t,"TFRemBertForMaskedLM"),h2t.forEach(t),apr=r(mke," (RemBERT model)"),mke.forEach(t),npr=i(re),jT=n(re,"LI",{});var gke=s(jT);f1e=n(gke,"STRONG",{});var p2t=s(f1e);spr=r(p2t,"roberta"),p2t.forEach(t),lpr=r(gke," \u2014 "),Tz=n(gke,"A",{href:!0});var _2t=s(Tz);ipr=r(_2t,"TFRobertaForMaskedLM"),_2t.forEach(t),dpr=r(gke," (RoBERTa model)"),gke.forEach(t),cpr=i(re),DT=n(re,"LI",{});var hke=s(DT);m1e=n(hke,"STRONG",{});var u2t=s(m1e);fpr=r(u2t,"roformer"),u2t.forEach(t),mpr=r(hke," \u2014 "),Mz=n(hke,"A",{href:!0});var b2t=s(Mz);gpr=r(b2t,"TFRoFormerForMaskedLM"),b2t.forEach(t),hpr=r(hke," (RoFormer model)"),hke.forEach(t),ppr=i(re),GT=n(re,"LI",{});var pke=s(GT);g1e=n(pke,"STRONG",{});var v2t=s(g1e);_pr=r(v2t,"tapas"),v2t.forEach(t),upr=r(pke," \u2014 "),Ez=n(pke,"A",{href:!0});var F2t=s(Ez);bpr=r(F2t,"TFTapasForMaskedLM"),F2t.forEach(t),vpr=r(pke," (TAPAS model)"),pke.forEach(t),Fpr=i(re),OT=n(re,"LI",{});var _ke=s(OT);h1e=n(_ke,"STRONG",{});var T2t=s(h1e);Tpr=r(T2t,"xlm"),T2t.forEach(t),Mpr=r(_ke," \u2014 "),Cz=n(_ke,"A",{href:!0});var M2t=s(Cz);Epr=r(M2t,"TFXLMWithLMHeadModel"),M2t.forEach(t),Cpr=r(_ke," (XLM model)"),_ke.forEach(t),wpr=i(re),VT=n(re,"LI",{});var uke=s(VT);p1e=n(uke,"STRONG",{});var E2t=s(p1e);Apr=r(E2t,"xlm-roberta"),E2t.forEach(t),ypr=r(uke," \u2014 "),wz=n(uke,"A",{href:!0});var C2t=s(wz);Lpr=r(C2t,"TFXLMRobertaForMaskedLM"),C2t.forEach(t),xpr=r(uke," (XLM-RoBERTa model)"),uke.forEach(t),re.forEach(t),kpr=i(va),_1e=n(va,"P",{});var w2t=s(_1e);Spr=r(w2t,"Examples:"),w2t.forEach(t),Rpr=i(va),m(sy.$$.fragment,va),va.forEach(t),ri.forEach(t),h$e=i(c),Ic=n(c,"H2",{class:!0});var wqe=s(Ic);XT=n(wqe,"A",{id:!0,class:!0,href:!0});var A2t=s(XT);u1e=n(A2t,"SPAN",{});var y2t=s(u1e);m(ly.$$.fragment,y2t),y2t.forEach(t),A2t.forEach(t),Bpr=i(wqe),b1e=n(wqe,"SPAN",{});var L2t=s(b1e);Ppr=r(L2t,"TFAutoModelForSeq2SeqLM"),L2t.forEach(t),wqe.forEach(t),p$e=i(c),Cr=n(c,"DIV",{class:!0});var ai=s(Cr);m(iy.$$.fragment,ai),$pr=i(ai),qc=n(ai,"P",{});var vY=s(qc);Ipr=r(vY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Az=n(vY,"A",{href:!0});var x2t=s(Az);qpr=r(x2t,"from_pretrained()"),x2t.forEach(t),Npr=r(vY," class method or the "),yz=n(vY,"A",{href:!0});var k2t=s(yz);jpr=r(k2t,"from_config()"),k2t.forEach(t),Dpr=r(vY,` class
method.`),vY.forEach(t),Gpr=i(ai),dy=n(ai,"P",{});var Aqe=s(dy);Opr=r(Aqe,"This class cannot be instantiated directly using "),v1e=n(Aqe,"CODE",{});var S2t=s(v1e);Vpr=r(S2t,"__init__()"),S2t.forEach(t),Xpr=r(Aqe," (throws an error)."),Aqe.forEach(t),zpr=i(ai),bt=n(ai,"DIV",{class:!0});var ni=s(bt);m(cy.$$.fragment,ni),Qpr=i(ni),F1e=n(ni,"P",{});var R2t=s(F1e);Wpr=r(R2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),R2t.forEach(t),Hpr=i(ni),Nc=n(ni,"P",{});var FY=s(Nc);Upr=r(FY,`Note:
Loading a model from its configuration file does `),T1e=n(FY,"STRONG",{});var B2t=s(T1e);Jpr=r(B2t,"not"),B2t.forEach(t),Ypr=r(FY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=n(FY,"A",{href:!0});var P2t=s(Lz);Kpr=r(P2t,"from_pretrained()"),P2t.forEach(t),Zpr=r(FY," to load the model weights."),FY.forEach(t),e_r=i(ni),M1e=n(ni,"P",{});var $2t=s(M1e);o_r=r($2t,"Examples:"),$2t.forEach(t),r_r=i(ni),m(fy.$$.fragment,ni),ni.forEach(t),t_r=i(ai),Fo=n(ai,"DIV",{class:!0});var Fa=s(Fo);m(my.$$.fragment,Fa),a_r=i(Fa),E1e=n(Fa,"P",{});var I2t=s(E1e);n_r=r(I2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),I2t.forEach(t),s_r=i(Fa),Mn=n(Fa,"P",{});var wC=s(Mn);l_r=r(wC,"The model class to instantiate is selected based on the "),C1e=n(wC,"CODE",{});var q2t=s(C1e);i_r=r(q2t,"model_type"),q2t.forEach(t),d_r=r(wC,` property of the config object (either
passed as an argument or loaded from `),w1e=n(wC,"CODE",{});var N2t=s(w1e);c_r=r(N2t,"pretrained_model_name_or_path"),N2t.forEach(t),f_r=r(wC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A1e=n(wC,"CODE",{});var j2t=s(A1e);m_r=r(j2t,"pretrained_model_name_or_path"),j2t.forEach(t),g_r=r(wC,":"),wC.forEach(t),h_r=i(Fa),Fe=n(Fa,"UL",{});var ye=s(Fe);zT=n(ye,"LI",{});var bke=s(zT);y1e=n(bke,"STRONG",{});var D2t=s(y1e);p_r=r(D2t,"bart"),D2t.forEach(t),__r=r(bke," \u2014 "),xz=n(bke,"A",{href:!0});var G2t=s(xz);u_r=r(G2t,"TFBartForConditionalGeneration"),G2t.forEach(t),b_r=r(bke," (BART model)"),bke.forEach(t),v_r=i(ye),QT=n(ye,"LI",{});var vke=s(QT);L1e=n(vke,"STRONG",{});var O2t=s(L1e);F_r=r(O2t,"blenderbot"),O2t.forEach(t),T_r=r(vke," \u2014 "),kz=n(vke,"A",{href:!0});var V2t=s(kz);M_r=r(V2t,"TFBlenderbotForConditionalGeneration"),V2t.forEach(t),E_r=r(vke," (Blenderbot model)"),vke.forEach(t),C_r=i(ye),WT=n(ye,"LI",{});var Fke=s(WT);x1e=n(Fke,"STRONG",{});var X2t=s(x1e);w_r=r(X2t,"blenderbot-small"),X2t.forEach(t),A_r=r(Fke," \u2014 "),Sz=n(Fke,"A",{href:!0});var z2t=s(Sz);y_r=r(z2t,"TFBlenderbotSmallForConditionalGeneration"),z2t.forEach(t),L_r=r(Fke," (BlenderbotSmall model)"),Fke.forEach(t),x_r=i(ye),HT=n(ye,"LI",{});var Tke=s(HT);k1e=n(Tke,"STRONG",{});var Q2t=s(k1e);k_r=r(Q2t,"encoder-decoder"),Q2t.forEach(t),S_r=r(Tke," \u2014 "),Rz=n(Tke,"A",{href:!0});var W2t=s(Rz);R_r=r(W2t,"TFEncoderDecoderModel"),W2t.forEach(t),B_r=r(Tke," (Encoder decoder model)"),Tke.forEach(t),P_r=i(ye),UT=n(ye,"LI",{});var Mke=s(UT);S1e=n(Mke,"STRONG",{});var H2t=s(S1e);$_r=r(H2t,"led"),H2t.forEach(t),I_r=r(Mke," \u2014 "),Bz=n(Mke,"A",{href:!0});var U2t=s(Bz);q_r=r(U2t,"TFLEDForConditionalGeneration"),U2t.forEach(t),N_r=r(Mke," (LED model)"),Mke.forEach(t),j_r=i(ye),JT=n(ye,"LI",{});var Eke=s(JT);R1e=n(Eke,"STRONG",{});var J2t=s(R1e);D_r=r(J2t,"marian"),J2t.forEach(t),G_r=r(Eke," \u2014 "),Pz=n(Eke,"A",{href:!0});var Y2t=s(Pz);O_r=r(Y2t,"TFMarianMTModel"),Y2t.forEach(t),V_r=r(Eke," (Marian model)"),Eke.forEach(t),X_r=i(ye),YT=n(ye,"LI",{});var Cke=s(YT);B1e=n(Cke,"STRONG",{});var K2t=s(B1e);z_r=r(K2t,"mbart"),K2t.forEach(t),Q_r=r(Cke," \u2014 "),$z=n(Cke,"A",{href:!0});var Z2t=s($z);W_r=r(Z2t,"TFMBartForConditionalGeneration"),Z2t.forEach(t),H_r=r(Cke," (mBART model)"),Cke.forEach(t),U_r=i(ye),KT=n(ye,"LI",{});var wke=s(KT);P1e=n(wke,"STRONG",{});var evt=s(P1e);J_r=r(evt,"mt5"),evt.forEach(t),Y_r=r(wke," \u2014 "),Iz=n(wke,"A",{href:!0});var ovt=s(Iz);K_r=r(ovt,"TFMT5ForConditionalGeneration"),ovt.forEach(t),Z_r=r(wke," (mT5 model)"),wke.forEach(t),eur=i(ye),ZT=n(ye,"LI",{});var Ake=s(ZT);$1e=n(Ake,"STRONG",{});var rvt=s($1e);our=r(rvt,"pegasus"),rvt.forEach(t),rur=r(Ake," \u2014 "),qz=n(Ake,"A",{href:!0});var tvt=s(qz);tur=r(tvt,"TFPegasusForConditionalGeneration"),tvt.forEach(t),aur=r(Ake," (Pegasus model)"),Ake.forEach(t),nur=i(ye),e7=n(ye,"LI",{});var yke=s(e7);I1e=n(yke,"STRONG",{});var avt=s(I1e);sur=r(avt,"t5"),avt.forEach(t),lur=r(yke," \u2014 "),Nz=n(yke,"A",{href:!0});var nvt=s(Nz);iur=r(nvt,"TFT5ForConditionalGeneration"),nvt.forEach(t),dur=r(yke," (T5 model)"),yke.forEach(t),ye.forEach(t),cur=i(Fa),q1e=n(Fa,"P",{});var svt=s(q1e);fur=r(svt,"Examples:"),svt.forEach(t),mur=i(Fa),m(gy.$$.fragment,Fa),Fa.forEach(t),ai.forEach(t),_$e=i(c),jc=n(c,"H2",{class:!0});var yqe=s(jc);o7=n(yqe,"A",{id:!0,class:!0,href:!0});var lvt=s(o7);N1e=n(lvt,"SPAN",{});var ivt=s(N1e);m(hy.$$.fragment,ivt),ivt.forEach(t),lvt.forEach(t),gur=i(yqe),j1e=n(yqe,"SPAN",{});var dvt=s(j1e);hur=r(dvt,"TFAutoModelForSequenceClassification"),dvt.forEach(t),yqe.forEach(t),u$e=i(c),wr=n(c,"DIV",{class:!0});var si=s(wr);m(py.$$.fragment,si),pur=i(si),Dc=n(si,"P",{});var TY=s(Dc);_ur=r(TY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jz=n(TY,"A",{href:!0});var cvt=s(jz);uur=r(cvt,"from_pretrained()"),cvt.forEach(t),bur=r(TY," class method or the "),Dz=n(TY,"A",{href:!0});var fvt=s(Dz);vur=r(fvt,"from_config()"),fvt.forEach(t),Fur=r(TY,` class
method.`),TY.forEach(t),Tur=i(si),_y=n(si,"P",{});var Lqe=s(_y);Mur=r(Lqe,"This class cannot be instantiated directly using "),D1e=n(Lqe,"CODE",{});var mvt=s(D1e);Eur=r(mvt,"__init__()"),mvt.forEach(t),Cur=r(Lqe," (throws an error)."),Lqe.forEach(t),wur=i(si),vt=n(si,"DIV",{class:!0});var li=s(vt);m(uy.$$.fragment,li),Aur=i(li),G1e=n(li,"P",{});var gvt=s(G1e);yur=r(gvt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gvt.forEach(t),Lur=i(li),Gc=n(li,"P",{});var MY=s(Gc);xur=r(MY,`Note:
Loading a model from its configuration file does `),O1e=n(MY,"STRONG",{});var hvt=s(O1e);kur=r(hvt,"not"),hvt.forEach(t),Sur=r(MY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=n(MY,"A",{href:!0});var pvt=s(Gz);Rur=r(pvt,"from_pretrained()"),pvt.forEach(t),Bur=r(MY," to load the model weights."),MY.forEach(t),Pur=i(li),V1e=n(li,"P",{});var _vt=s(V1e);$ur=r(_vt,"Examples:"),_vt.forEach(t),Iur=i(li),m(by.$$.fragment,li),li.forEach(t),qur=i(si),To=n(si,"DIV",{class:!0});var Ta=s(To);m(vy.$$.fragment,Ta),Nur=i(Ta),X1e=n(Ta,"P",{});var uvt=s(X1e);jur=r(uvt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),uvt.forEach(t),Dur=i(Ta),En=n(Ta,"P",{});var AC=s(En);Gur=r(AC,"The model class to instantiate is selected based on the "),z1e=n(AC,"CODE",{});var bvt=s(z1e);Our=r(bvt,"model_type"),bvt.forEach(t),Vur=r(AC,` property of the config object (either
passed as an argument or loaded from `),Q1e=n(AC,"CODE",{});var vvt=s(Q1e);Xur=r(vvt,"pretrained_model_name_or_path"),vvt.forEach(t),zur=r(AC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W1e=n(AC,"CODE",{});var Fvt=s(W1e);Qur=r(Fvt,"pretrained_model_name_or_path"),Fvt.forEach(t),Wur=r(AC,":"),AC.forEach(t),Hur=i(Ta),V=n(Ta,"UL",{});var Q=s(V);r7=n(Q,"LI",{});var Lke=s(r7);H1e=n(Lke,"STRONG",{});var Tvt=s(H1e);Uur=r(Tvt,"albert"),Tvt.forEach(t),Jur=r(Lke," \u2014 "),Oz=n(Lke,"A",{href:!0});var Mvt=s(Oz);Yur=r(Mvt,"TFAlbertForSequenceClassification"),Mvt.forEach(t),Kur=r(Lke," (ALBERT model)"),Lke.forEach(t),Zur=i(Q),t7=n(Q,"LI",{});var xke=s(t7);U1e=n(xke,"STRONG",{});var Evt=s(U1e);e5r=r(Evt,"bert"),Evt.forEach(t),o5r=r(xke," \u2014 "),Vz=n(xke,"A",{href:!0});var Cvt=s(Vz);r5r=r(Cvt,"TFBertForSequenceClassification"),Cvt.forEach(t),t5r=r(xke," (BERT model)"),xke.forEach(t),a5r=i(Q),a7=n(Q,"LI",{});var kke=s(a7);J1e=n(kke,"STRONG",{});var wvt=s(J1e);n5r=r(wvt,"camembert"),wvt.forEach(t),s5r=r(kke," \u2014 "),Xz=n(kke,"A",{href:!0});var Avt=s(Xz);l5r=r(Avt,"TFCamembertForSequenceClassification"),Avt.forEach(t),i5r=r(kke," (CamemBERT model)"),kke.forEach(t),d5r=i(Q),n7=n(Q,"LI",{});var Ske=s(n7);Y1e=n(Ske,"STRONG",{});var yvt=s(Y1e);c5r=r(yvt,"convbert"),yvt.forEach(t),f5r=r(Ske," \u2014 "),zz=n(Ske,"A",{href:!0});var Lvt=s(zz);m5r=r(Lvt,"TFConvBertForSequenceClassification"),Lvt.forEach(t),g5r=r(Ske," (ConvBERT model)"),Ske.forEach(t),h5r=i(Q),s7=n(Q,"LI",{});var Rke=s(s7);K1e=n(Rke,"STRONG",{});var xvt=s(K1e);p5r=r(xvt,"ctrl"),xvt.forEach(t),_5r=r(Rke," \u2014 "),Qz=n(Rke,"A",{href:!0});var kvt=s(Qz);u5r=r(kvt,"TFCTRLForSequenceClassification"),kvt.forEach(t),b5r=r(Rke," (CTRL model)"),Rke.forEach(t),v5r=i(Q),l7=n(Q,"LI",{});var Bke=s(l7);Z1e=n(Bke,"STRONG",{});var Svt=s(Z1e);F5r=r(Svt,"deberta"),Svt.forEach(t),T5r=r(Bke," \u2014 "),Wz=n(Bke,"A",{href:!0});var Rvt=s(Wz);M5r=r(Rvt,"TFDebertaForSequenceClassification"),Rvt.forEach(t),E5r=r(Bke," (DeBERTa model)"),Bke.forEach(t),C5r=i(Q),i7=n(Q,"LI",{});var Pke=s(i7);e4e=n(Pke,"STRONG",{});var Bvt=s(e4e);w5r=r(Bvt,"deberta-v2"),Bvt.forEach(t),A5r=r(Pke," \u2014 "),Hz=n(Pke,"A",{href:!0});var Pvt=s(Hz);y5r=r(Pvt,"TFDebertaV2ForSequenceClassification"),Pvt.forEach(t),L5r=r(Pke," (DeBERTa-v2 model)"),Pke.forEach(t),x5r=i(Q),d7=n(Q,"LI",{});var $ke=s(d7);o4e=n($ke,"STRONG",{});var $vt=s(o4e);k5r=r($vt,"distilbert"),$vt.forEach(t),S5r=r($ke," \u2014 "),Uz=n($ke,"A",{href:!0});var Ivt=s(Uz);R5r=r(Ivt,"TFDistilBertForSequenceClassification"),Ivt.forEach(t),B5r=r($ke," (DistilBERT model)"),$ke.forEach(t),P5r=i(Q),c7=n(Q,"LI",{});var Ike=s(c7);r4e=n(Ike,"STRONG",{});var qvt=s(r4e);$5r=r(qvt,"electra"),qvt.forEach(t),I5r=r(Ike," \u2014 "),Jz=n(Ike,"A",{href:!0});var Nvt=s(Jz);q5r=r(Nvt,"TFElectraForSequenceClassification"),Nvt.forEach(t),N5r=r(Ike," (ELECTRA model)"),Ike.forEach(t),j5r=i(Q),f7=n(Q,"LI",{});var qke=s(f7);t4e=n(qke,"STRONG",{});var jvt=s(t4e);D5r=r(jvt,"flaubert"),jvt.forEach(t),G5r=r(qke," \u2014 "),Yz=n(qke,"A",{href:!0});var Dvt=s(Yz);O5r=r(Dvt,"TFFlaubertForSequenceClassification"),Dvt.forEach(t),V5r=r(qke," (FlauBERT model)"),qke.forEach(t),X5r=i(Q),m7=n(Q,"LI",{});var Nke=s(m7);a4e=n(Nke,"STRONG",{});var Gvt=s(a4e);z5r=r(Gvt,"funnel"),Gvt.forEach(t),Q5r=r(Nke," \u2014 "),Kz=n(Nke,"A",{href:!0});var Ovt=s(Kz);W5r=r(Ovt,"TFFunnelForSequenceClassification"),Ovt.forEach(t),H5r=r(Nke," (Funnel Transformer model)"),Nke.forEach(t),U5r=i(Q),g7=n(Q,"LI",{});var jke=s(g7);n4e=n(jke,"STRONG",{});var Vvt=s(n4e);J5r=r(Vvt,"gpt2"),Vvt.forEach(t),Y5r=r(jke," \u2014 "),Zz=n(jke,"A",{href:!0});var Xvt=s(Zz);K5r=r(Xvt,"TFGPT2ForSequenceClassification"),Xvt.forEach(t),Z5r=r(jke," (OpenAI GPT-2 model)"),jke.forEach(t),e1r=i(Q),h7=n(Q,"LI",{});var Dke=s(h7);s4e=n(Dke,"STRONG",{});var zvt=s(s4e);o1r=r(zvt,"gptj"),zvt.forEach(t),r1r=r(Dke," \u2014 "),eQ=n(Dke,"A",{href:!0});var Qvt=s(eQ);t1r=r(Qvt,"TFGPTJForSequenceClassification"),Qvt.forEach(t),a1r=r(Dke," (GPT-J model)"),Dke.forEach(t),n1r=i(Q),p7=n(Q,"LI",{});var Gke=s(p7);l4e=n(Gke,"STRONG",{});var Wvt=s(l4e);s1r=r(Wvt,"layoutlm"),Wvt.forEach(t),l1r=r(Gke," \u2014 "),oQ=n(Gke,"A",{href:!0});var Hvt=s(oQ);i1r=r(Hvt,"TFLayoutLMForSequenceClassification"),Hvt.forEach(t),d1r=r(Gke," (LayoutLM model)"),Gke.forEach(t),c1r=i(Q),_7=n(Q,"LI",{});var Oke=s(_7);i4e=n(Oke,"STRONG",{});var Uvt=s(i4e);f1r=r(Uvt,"longformer"),Uvt.forEach(t),m1r=r(Oke," \u2014 "),rQ=n(Oke,"A",{href:!0});var Jvt=s(rQ);g1r=r(Jvt,"TFLongformerForSequenceClassification"),Jvt.forEach(t),h1r=r(Oke," (Longformer model)"),Oke.forEach(t),p1r=i(Q),u7=n(Q,"LI",{});var Vke=s(u7);d4e=n(Vke,"STRONG",{});var Yvt=s(d4e);_1r=r(Yvt,"mobilebert"),Yvt.forEach(t),u1r=r(Vke," \u2014 "),tQ=n(Vke,"A",{href:!0});var Kvt=s(tQ);b1r=r(Kvt,"TFMobileBertForSequenceClassification"),Kvt.forEach(t),v1r=r(Vke," (MobileBERT model)"),Vke.forEach(t),F1r=i(Q),b7=n(Q,"LI",{});var Xke=s(b7);c4e=n(Xke,"STRONG",{});var Zvt=s(c4e);T1r=r(Zvt,"mpnet"),Zvt.forEach(t),M1r=r(Xke," \u2014 "),aQ=n(Xke,"A",{href:!0});var eFt=s(aQ);E1r=r(eFt,"TFMPNetForSequenceClassification"),eFt.forEach(t),C1r=r(Xke," (MPNet model)"),Xke.forEach(t),w1r=i(Q),v7=n(Q,"LI",{});var zke=s(v7);f4e=n(zke,"STRONG",{});var oFt=s(f4e);A1r=r(oFt,"openai-gpt"),oFt.forEach(t),y1r=r(zke," \u2014 "),nQ=n(zke,"A",{href:!0});var rFt=s(nQ);L1r=r(rFt,"TFOpenAIGPTForSequenceClassification"),rFt.forEach(t),x1r=r(zke," (OpenAI GPT model)"),zke.forEach(t),k1r=i(Q),F7=n(Q,"LI",{});var Qke=s(F7);m4e=n(Qke,"STRONG",{});var tFt=s(m4e);S1r=r(tFt,"rembert"),tFt.forEach(t),R1r=r(Qke," \u2014 "),sQ=n(Qke,"A",{href:!0});var aFt=s(sQ);B1r=r(aFt,"TFRemBertForSequenceClassification"),aFt.forEach(t),P1r=r(Qke," (RemBERT model)"),Qke.forEach(t),$1r=i(Q),T7=n(Q,"LI",{});var Wke=s(T7);g4e=n(Wke,"STRONG",{});var nFt=s(g4e);I1r=r(nFt,"roberta"),nFt.forEach(t),q1r=r(Wke," \u2014 "),lQ=n(Wke,"A",{href:!0});var sFt=s(lQ);N1r=r(sFt,"TFRobertaForSequenceClassification"),sFt.forEach(t),j1r=r(Wke," (RoBERTa model)"),Wke.forEach(t),D1r=i(Q),M7=n(Q,"LI",{});var Hke=s(M7);h4e=n(Hke,"STRONG",{});var lFt=s(h4e);G1r=r(lFt,"roformer"),lFt.forEach(t),O1r=r(Hke," \u2014 "),iQ=n(Hke,"A",{href:!0});var iFt=s(iQ);V1r=r(iFt,"TFRoFormerForSequenceClassification"),iFt.forEach(t),X1r=r(Hke," (RoFormer model)"),Hke.forEach(t),z1r=i(Q),E7=n(Q,"LI",{});var Uke=s(E7);p4e=n(Uke,"STRONG",{});var dFt=s(p4e);Q1r=r(dFt,"tapas"),dFt.forEach(t),W1r=r(Uke," \u2014 "),dQ=n(Uke,"A",{href:!0});var cFt=s(dQ);H1r=r(cFt,"TFTapasForSequenceClassification"),cFt.forEach(t),U1r=r(Uke," (TAPAS model)"),Uke.forEach(t),J1r=i(Q),C7=n(Q,"LI",{});var Jke=s(C7);_4e=n(Jke,"STRONG",{});var fFt=s(_4e);Y1r=r(fFt,"transfo-xl"),fFt.forEach(t),K1r=r(Jke," \u2014 "),cQ=n(Jke,"A",{href:!0});var mFt=s(cQ);Z1r=r(mFt,"TFTransfoXLForSequenceClassification"),mFt.forEach(t),e4r=r(Jke," (Transformer-XL model)"),Jke.forEach(t),o4r=i(Q),w7=n(Q,"LI",{});var Yke=s(w7);u4e=n(Yke,"STRONG",{});var gFt=s(u4e);r4r=r(gFt,"xlm"),gFt.forEach(t),t4r=r(Yke," \u2014 "),fQ=n(Yke,"A",{href:!0});var hFt=s(fQ);a4r=r(hFt,"TFXLMForSequenceClassification"),hFt.forEach(t),n4r=r(Yke," (XLM model)"),Yke.forEach(t),s4r=i(Q),A7=n(Q,"LI",{});var Kke=s(A7);b4e=n(Kke,"STRONG",{});var pFt=s(b4e);l4r=r(pFt,"xlm-roberta"),pFt.forEach(t),i4r=r(Kke," \u2014 "),mQ=n(Kke,"A",{href:!0});var _Ft=s(mQ);d4r=r(_Ft,"TFXLMRobertaForSequenceClassification"),_Ft.forEach(t),c4r=r(Kke," (XLM-RoBERTa model)"),Kke.forEach(t),f4r=i(Q),y7=n(Q,"LI",{});var Zke=s(y7);v4e=n(Zke,"STRONG",{});var uFt=s(v4e);m4r=r(uFt,"xlnet"),uFt.forEach(t),g4r=r(Zke," \u2014 "),gQ=n(Zke,"A",{href:!0});var bFt=s(gQ);h4r=r(bFt,"TFXLNetForSequenceClassification"),bFt.forEach(t),p4r=r(Zke," (XLNet model)"),Zke.forEach(t),Q.forEach(t),_4r=i(Ta),F4e=n(Ta,"P",{});var vFt=s(F4e);u4r=r(vFt,"Examples:"),vFt.forEach(t),b4r=i(Ta),m(Fy.$$.fragment,Ta),Ta.forEach(t),si.forEach(t),b$e=i(c),Oc=n(c,"H2",{class:!0});var xqe=s(Oc);L7=n(xqe,"A",{id:!0,class:!0,href:!0});var FFt=s(L7);T4e=n(FFt,"SPAN",{});var TFt=s(T4e);m(Ty.$$.fragment,TFt),TFt.forEach(t),FFt.forEach(t),v4r=i(xqe),M4e=n(xqe,"SPAN",{});var MFt=s(M4e);F4r=r(MFt,"TFAutoModelForMultipleChoice"),MFt.forEach(t),xqe.forEach(t),v$e=i(c),Ar=n(c,"DIV",{class:!0});var ii=s(Ar);m(My.$$.fragment,ii),T4r=i(ii),Vc=n(ii,"P",{});var EY=s(Vc);M4r=r(EY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hQ=n(EY,"A",{href:!0});var EFt=s(hQ);E4r=r(EFt,"from_pretrained()"),EFt.forEach(t),C4r=r(EY," class method or the "),pQ=n(EY,"A",{href:!0});var CFt=s(pQ);w4r=r(CFt,"from_config()"),CFt.forEach(t),A4r=r(EY,` class
method.`),EY.forEach(t),y4r=i(ii),Ey=n(ii,"P",{});var kqe=s(Ey);L4r=r(kqe,"This class cannot be instantiated directly using "),E4e=n(kqe,"CODE",{});var wFt=s(E4e);x4r=r(wFt,"__init__()"),wFt.forEach(t),k4r=r(kqe," (throws an error)."),kqe.forEach(t),S4r=i(ii),Ft=n(ii,"DIV",{class:!0});var di=s(Ft);m(Cy.$$.fragment,di),R4r=i(di),C4e=n(di,"P",{});var AFt=s(C4e);B4r=r(AFt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),AFt.forEach(t),P4r=i(di),Xc=n(di,"P",{});var CY=s(Xc);$4r=r(CY,`Note:
Loading a model from its configuration file does `),w4e=n(CY,"STRONG",{});var yFt=s(w4e);I4r=r(yFt,"not"),yFt.forEach(t),q4r=r(CY,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=n(CY,"A",{href:!0});var LFt=s(_Q);N4r=r(LFt,"from_pretrained()"),LFt.forEach(t),j4r=r(CY," to load the model weights."),CY.forEach(t),D4r=i(di),A4e=n(di,"P",{});var xFt=s(A4e);G4r=r(xFt,"Examples:"),xFt.forEach(t),O4r=i(di),m(wy.$$.fragment,di),di.forEach(t),V4r=i(ii),Mo=n(ii,"DIV",{class:!0});var Ma=s(Mo);m(Ay.$$.fragment,Ma),X4r=i(Ma),y4e=n(Ma,"P",{});var kFt=s(y4e);z4r=r(kFt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kFt.forEach(t),Q4r=i(Ma),Cn=n(Ma,"P",{});var yC=s(Cn);W4r=r(yC,"The model class to instantiate is selected based on the "),L4e=n(yC,"CODE",{});var SFt=s(L4e);H4r=r(SFt,"model_type"),SFt.forEach(t),U4r=r(yC,` property of the config object (either
passed as an argument or loaded from `),x4e=n(yC,"CODE",{});var RFt=s(x4e);J4r=r(RFt,"pretrained_model_name_or_path"),RFt.forEach(t),Y4r=r(yC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=n(yC,"CODE",{});var BFt=s(k4e);K4r=r(BFt,"pretrained_model_name_or_path"),BFt.forEach(t),Z4r=r(yC,":"),yC.forEach(t),ebr=i(Ma),se=n(Ma,"UL",{});var ie=s(se);x7=n(ie,"LI",{});var eSe=s(x7);S4e=n(eSe,"STRONG",{});var PFt=s(S4e);obr=r(PFt,"albert"),PFt.forEach(t),rbr=r(eSe," \u2014 "),uQ=n(eSe,"A",{href:!0});var $Ft=s(uQ);tbr=r($Ft,"TFAlbertForMultipleChoice"),$Ft.forEach(t),abr=r(eSe," (ALBERT model)"),eSe.forEach(t),nbr=i(ie),k7=n(ie,"LI",{});var oSe=s(k7);R4e=n(oSe,"STRONG",{});var IFt=s(R4e);sbr=r(IFt,"bert"),IFt.forEach(t),lbr=r(oSe," \u2014 "),bQ=n(oSe,"A",{href:!0});var qFt=s(bQ);ibr=r(qFt,"TFBertForMultipleChoice"),qFt.forEach(t),dbr=r(oSe," (BERT model)"),oSe.forEach(t),cbr=i(ie),S7=n(ie,"LI",{});var rSe=s(S7);B4e=n(rSe,"STRONG",{});var NFt=s(B4e);fbr=r(NFt,"camembert"),NFt.forEach(t),mbr=r(rSe," \u2014 "),vQ=n(rSe,"A",{href:!0});var jFt=s(vQ);gbr=r(jFt,"TFCamembertForMultipleChoice"),jFt.forEach(t),hbr=r(rSe," (CamemBERT model)"),rSe.forEach(t),pbr=i(ie),R7=n(ie,"LI",{});var tSe=s(R7);P4e=n(tSe,"STRONG",{});var DFt=s(P4e);_br=r(DFt,"convbert"),DFt.forEach(t),ubr=r(tSe," \u2014 "),FQ=n(tSe,"A",{href:!0});var GFt=s(FQ);bbr=r(GFt,"TFConvBertForMultipleChoice"),GFt.forEach(t),vbr=r(tSe," (ConvBERT model)"),tSe.forEach(t),Fbr=i(ie),B7=n(ie,"LI",{});var aSe=s(B7);$4e=n(aSe,"STRONG",{});var OFt=s($4e);Tbr=r(OFt,"distilbert"),OFt.forEach(t),Mbr=r(aSe," \u2014 "),TQ=n(aSe,"A",{href:!0});var VFt=s(TQ);Ebr=r(VFt,"TFDistilBertForMultipleChoice"),VFt.forEach(t),Cbr=r(aSe," (DistilBERT model)"),aSe.forEach(t),wbr=i(ie),P7=n(ie,"LI",{});var nSe=s(P7);I4e=n(nSe,"STRONG",{});var XFt=s(I4e);Abr=r(XFt,"electra"),XFt.forEach(t),ybr=r(nSe," \u2014 "),MQ=n(nSe,"A",{href:!0});var zFt=s(MQ);Lbr=r(zFt,"TFElectraForMultipleChoice"),zFt.forEach(t),xbr=r(nSe," (ELECTRA model)"),nSe.forEach(t),kbr=i(ie),$7=n(ie,"LI",{});var sSe=s($7);q4e=n(sSe,"STRONG",{});var QFt=s(q4e);Sbr=r(QFt,"flaubert"),QFt.forEach(t),Rbr=r(sSe," \u2014 "),EQ=n(sSe,"A",{href:!0});var WFt=s(EQ);Bbr=r(WFt,"TFFlaubertForMultipleChoice"),WFt.forEach(t),Pbr=r(sSe," (FlauBERT model)"),sSe.forEach(t),$br=i(ie),I7=n(ie,"LI",{});var lSe=s(I7);N4e=n(lSe,"STRONG",{});var HFt=s(N4e);Ibr=r(HFt,"funnel"),HFt.forEach(t),qbr=r(lSe," \u2014 "),CQ=n(lSe,"A",{href:!0});var UFt=s(CQ);Nbr=r(UFt,"TFFunnelForMultipleChoice"),UFt.forEach(t),jbr=r(lSe," (Funnel Transformer model)"),lSe.forEach(t),Dbr=i(ie),q7=n(ie,"LI",{});var iSe=s(q7);j4e=n(iSe,"STRONG",{});var JFt=s(j4e);Gbr=r(JFt,"longformer"),JFt.forEach(t),Obr=r(iSe," \u2014 "),wQ=n(iSe,"A",{href:!0});var YFt=s(wQ);Vbr=r(YFt,"TFLongformerForMultipleChoice"),YFt.forEach(t),Xbr=r(iSe," (Longformer model)"),iSe.forEach(t),zbr=i(ie),N7=n(ie,"LI",{});var dSe=s(N7);D4e=n(dSe,"STRONG",{});var KFt=s(D4e);Qbr=r(KFt,"mobilebert"),KFt.forEach(t),Wbr=r(dSe," \u2014 "),AQ=n(dSe,"A",{href:!0});var ZFt=s(AQ);Hbr=r(ZFt,"TFMobileBertForMultipleChoice"),ZFt.forEach(t),Ubr=r(dSe," (MobileBERT model)"),dSe.forEach(t),Jbr=i(ie),j7=n(ie,"LI",{});var cSe=s(j7);G4e=n(cSe,"STRONG",{});var eTt=s(G4e);Ybr=r(eTt,"mpnet"),eTt.forEach(t),Kbr=r(cSe," \u2014 "),yQ=n(cSe,"A",{href:!0});var oTt=s(yQ);Zbr=r(oTt,"TFMPNetForMultipleChoice"),oTt.forEach(t),e2r=r(cSe," (MPNet model)"),cSe.forEach(t),o2r=i(ie),D7=n(ie,"LI",{});var fSe=s(D7);O4e=n(fSe,"STRONG",{});var rTt=s(O4e);r2r=r(rTt,"rembert"),rTt.forEach(t),t2r=r(fSe," \u2014 "),LQ=n(fSe,"A",{href:!0});var tTt=s(LQ);a2r=r(tTt,"TFRemBertForMultipleChoice"),tTt.forEach(t),n2r=r(fSe," (RemBERT model)"),fSe.forEach(t),s2r=i(ie),G7=n(ie,"LI",{});var mSe=s(G7);V4e=n(mSe,"STRONG",{});var aTt=s(V4e);l2r=r(aTt,"roberta"),aTt.forEach(t),i2r=r(mSe," \u2014 "),xQ=n(mSe,"A",{href:!0});var nTt=s(xQ);d2r=r(nTt,"TFRobertaForMultipleChoice"),nTt.forEach(t),c2r=r(mSe," (RoBERTa model)"),mSe.forEach(t),f2r=i(ie),O7=n(ie,"LI",{});var gSe=s(O7);X4e=n(gSe,"STRONG",{});var sTt=s(X4e);m2r=r(sTt,"roformer"),sTt.forEach(t),g2r=r(gSe," \u2014 "),kQ=n(gSe,"A",{href:!0});var lTt=s(kQ);h2r=r(lTt,"TFRoFormerForMultipleChoice"),lTt.forEach(t),p2r=r(gSe," (RoFormer model)"),gSe.forEach(t),_2r=i(ie),V7=n(ie,"LI",{});var hSe=s(V7);z4e=n(hSe,"STRONG",{});var iTt=s(z4e);u2r=r(iTt,"xlm"),iTt.forEach(t),b2r=r(hSe," \u2014 "),SQ=n(hSe,"A",{href:!0});var dTt=s(SQ);v2r=r(dTt,"TFXLMForMultipleChoice"),dTt.forEach(t),F2r=r(hSe," (XLM model)"),hSe.forEach(t),T2r=i(ie),X7=n(ie,"LI",{});var pSe=s(X7);Q4e=n(pSe,"STRONG",{});var cTt=s(Q4e);M2r=r(cTt,"xlm-roberta"),cTt.forEach(t),E2r=r(pSe," \u2014 "),RQ=n(pSe,"A",{href:!0});var fTt=s(RQ);C2r=r(fTt,"TFXLMRobertaForMultipleChoice"),fTt.forEach(t),w2r=r(pSe," (XLM-RoBERTa model)"),pSe.forEach(t),A2r=i(ie),z7=n(ie,"LI",{});var _Se=s(z7);W4e=n(_Se,"STRONG",{});var mTt=s(W4e);y2r=r(mTt,"xlnet"),mTt.forEach(t),L2r=r(_Se," \u2014 "),BQ=n(_Se,"A",{href:!0});var gTt=s(BQ);x2r=r(gTt,"TFXLNetForMultipleChoice"),gTt.forEach(t),k2r=r(_Se," (XLNet model)"),_Se.forEach(t),ie.forEach(t),S2r=i(Ma),H4e=n(Ma,"P",{});var hTt=s(H4e);R2r=r(hTt,"Examples:"),hTt.forEach(t),B2r=i(Ma),m(yy.$$.fragment,Ma),Ma.forEach(t),ii.forEach(t),F$e=i(c),zc=n(c,"H2",{class:!0});var Sqe=s(zc);Q7=n(Sqe,"A",{id:!0,class:!0,href:!0});var pTt=s(Q7);U4e=n(pTt,"SPAN",{});var _Tt=s(U4e);m(Ly.$$.fragment,_Tt),_Tt.forEach(t),pTt.forEach(t),P2r=i(Sqe),J4e=n(Sqe,"SPAN",{});var uTt=s(J4e);$2r=r(uTt,"TFAutoModelForTableQuestionAnswering"),uTt.forEach(t),Sqe.forEach(t),T$e=i(c),yr=n(c,"DIV",{class:!0});var ci=s(yr);m(xy.$$.fragment,ci),I2r=i(ci),Qc=n(ci,"P",{});var wY=s(Qc);q2r=r(wY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),PQ=n(wY,"A",{href:!0});var bTt=s(PQ);N2r=r(bTt,"from_pretrained()"),bTt.forEach(t),j2r=r(wY," class method or the "),$Q=n(wY,"A",{href:!0});var vTt=s($Q);D2r=r(vTt,"from_config()"),vTt.forEach(t),G2r=r(wY,` class
method.`),wY.forEach(t),O2r=i(ci),ky=n(ci,"P",{});var Rqe=s(ky);V2r=r(Rqe,"This class cannot be instantiated directly using "),Y4e=n(Rqe,"CODE",{});var FTt=s(Y4e);X2r=r(FTt,"__init__()"),FTt.forEach(t),z2r=r(Rqe," (throws an error)."),Rqe.forEach(t),Q2r=i(ci),Tt=n(ci,"DIV",{class:!0});var fi=s(Tt);m(Sy.$$.fragment,fi),W2r=i(fi),K4e=n(fi,"P",{});var TTt=s(K4e);H2r=r(TTt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),TTt.forEach(t),U2r=i(fi),Wc=n(fi,"P",{});var AY=s(Wc);J2r=r(AY,`Note:
Loading a model from its configuration file does `),Z4e=n(AY,"STRONG",{});var MTt=s(Z4e);Y2r=r(MTt,"not"),MTt.forEach(t),K2r=r(AY,` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=n(AY,"A",{href:!0});var ETt=s(IQ);Z2r=r(ETt,"from_pretrained()"),ETt.forEach(t),evr=r(AY," to load the model weights."),AY.forEach(t),ovr=i(fi),ebe=n(fi,"P",{});var CTt=s(ebe);rvr=r(CTt,"Examples:"),CTt.forEach(t),tvr=i(fi),m(Ry.$$.fragment,fi),fi.forEach(t),avr=i(ci),Eo=n(ci,"DIV",{class:!0});var Ea=s(Eo);m(By.$$.fragment,Ea),nvr=i(Ea),obe=n(Ea,"P",{});var wTt=s(obe);svr=r(wTt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),wTt.forEach(t),lvr=i(Ea),wn=n(Ea,"P",{});var LC=s(wn);ivr=r(LC,"The model class to instantiate is selected based on the "),rbe=n(LC,"CODE",{});var ATt=s(rbe);dvr=r(ATt,"model_type"),ATt.forEach(t),cvr=r(LC,` property of the config object (either
passed as an argument or loaded from `),tbe=n(LC,"CODE",{});var yTt=s(tbe);fvr=r(yTt,"pretrained_model_name_or_path"),yTt.forEach(t),mvr=r(LC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),abe=n(LC,"CODE",{});var LTt=s(abe);gvr=r(LTt,"pretrained_model_name_or_path"),LTt.forEach(t),hvr=r(LC,":"),LC.forEach(t),pvr=i(Ea),nbe=n(Ea,"UL",{});var xTt=s(nbe);W7=n(xTt,"LI",{});var uSe=s(W7);sbe=n(uSe,"STRONG",{});var kTt=s(sbe);_vr=r(kTt,"tapas"),kTt.forEach(t),uvr=r(uSe," \u2014 "),qQ=n(uSe,"A",{href:!0});var STt=s(qQ);bvr=r(STt,"TFTapasForQuestionAnswering"),STt.forEach(t),vvr=r(uSe," (TAPAS model)"),uSe.forEach(t),xTt.forEach(t),Fvr=i(Ea),lbe=n(Ea,"P",{});var RTt=s(lbe);Tvr=r(RTt,"Examples:"),RTt.forEach(t),Mvr=i(Ea),m(Py.$$.fragment,Ea),Ea.forEach(t),ci.forEach(t),M$e=i(c),Hc=n(c,"H2",{class:!0});var Bqe=s(Hc);H7=n(Bqe,"A",{id:!0,class:!0,href:!0});var BTt=s(H7);ibe=n(BTt,"SPAN",{});var PTt=s(ibe);m($y.$$.fragment,PTt),PTt.forEach(t),BTt.forEach(t),Evr=i(Bqe),dbe=n(Bqe,"SPAN",{});var $Tt=s(dbe);Cvr=r($Tt,"TFAutoModelForTokenClassification"),$Tt.forEach(t),Bqe.forEach(t),E$e=i(c),Lr=n(c,"DIV",{class:!0});var mi=s(Lr);m(Iy.$$.fragment,mi),wvr=i(mi),Uc=n(mi,"P",{});var yY=s(Uc);Avr=r(yY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),NQ=n(yY,"A",{href:!0});var ITt=s(NQ);yvr=r(ITt,"from_pretrained()"),ITt.forEach(t),Lvr=r(yY," class method or the "),jQ=n(yY,"A",{href:!0});var qTt=s(jQ);xvr=r(qTt,"from_config()"),qTt.forEach(t),kvr=r(yY,` class
method.`),yY.forEach(t),Svr=i(mi),qy=n(mi,"P",{});var Pqe=s(qy);Rvr=r(Pqe,"This class cannot be instantiated directly using "),cbe=n(Pqe,"CODE",{});var NTt=s(cbe);Bvr=r(NTt,"__init__()"),NTt.forEach(t),Pvr=r(Pqe," (throws an error)."),Pqe.forEach(t),$vr=i(mi),Mt=n(mi,"DIV",{class:!0});var gi=s(Mt);m(Ny.$$.fragment,gi),Ivr=i(gi),fbe=n(gi,"P",{});var jTt=s(fbe);qvr=r(jTt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),jTt.forEach(t),Nvr=i(gi),Jc=n(gi,"P",{});var LY=s(Jc);jvr=r(LY,`Note:
Loading a model from its configuration file does `),mbe=n(LY,"STRONG",{});var DTt=s(mbe);Dvr=r(DTt,"not"),DTt.forEach(t),Gvr=r(LY,` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=n(LY,"A",{href:!0});var GTt=s(DQ);Ovr=r(GTt,"from_pretrained()"),GTt.forEach(t),Vvr=r(LY," to load the model weights."),LY.forEach(t),Xvr=i(gi),gbe=n(gi,"P",{});var OTt=s(gbe);zvr=r(OTt,"Examples:"),OTt.forEach(t),Qvr=i(gi),m(jy.$$.fragment,gi),gi.forEach(t),Wvr=i(mi),Co=n(mi,"DIV",{class:!0});var Ca=s(Co);m(Dy.$$.fragment,Ca),Hvr=i(Ca),hbe=n(Ca,"P",{});var VTt=s(hbe);Uvr=r(VTt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),VTt.forEach(t),Jvr=i(Ca),An=n(Ca,"P",{});var xC=s(An);Yvr=r(xC,"The model class to instantiate is selected based on the "),pbe=n(xC,"CODE",{});var XTt=s(pbe);Kvr=r(XTt,"model_type"),XTt.forEach(t),Zvr=r(xC,` property of the config object (either
passed as an argument or loaded from `),_be=n(xC,"CODE",{});var zTt=s(_be);eFr=r(zTt,"pretrained_model_name_or_path"),zTt.forEach(t),oFr=r(xC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=n(xC,"CODE",{});var QTt=s(ube);rFr=r(QTt,"pretrained_model_name_or_path"),QTt.forEach(t),tFr=r(xC,":"),xC.forEach(t),aFr=i(Ca),Z=n(Ca,"UL",{});var te=s(Z);U7=n(te,"LI",{});var bSe=s(U7);bbe=n(bSe,"STRONG",{});var WTt=s(bbe);nFr=r(WTt,"albert"),WTt.forEach(t),sFr=r(bSe," \u2014 "),GQ=n(bSe,"A",{href:!0});var HTt=s(GQ);lFr=r(HTt,"TFAlbertForTokenClassification"),HTt.forEach(t),iFr=r(bSe," (ALBERT model)"),bSe.forEach(t),dFr=i(te),J7=n(te,"LI",{});var vSe=s(J7);vbe=n(vSe,"STRONG",{});var UTt=s(vbe);cFr=r(UTt,"bert"),UTt.forEach(t),fFr=r(vSe," \u2014 "),OQ=n(vSe,"A",{href:!0});var JTt=s(OQ);mFr=r(JTt,"TFBertForTokenClassification"),JTt.forEach(t),gFr=r(vSe," (BERT model)"),vSe.forEach(t),hFr=i(te),Y7=n(te,"LI",{});var FSe=s(Y7);Fbe=n(FSe,"STRONG",{});var YTt=s(Fbe);pFr=r(YTt,"camembert"),YTt.forEach(t),_Fr=r(FSe," \u2014 "),VQ=n(FSe,"A",{href:!0});var KTt=s(VQ);uFr=r(KTt,"TFCamembertForTokenClassification"),KTt.forEach(t),bFr=r(FSe," (CamemBERT model)"),FSe.forEach(t),vFr=i(te),K7=n(te,"LI",{});var TSe=s(K7);Tbe=n(TSe,"STRONG",{});var ZTt=s(Tbe);FFr=r(ZTt,"convbert"),ZTt.forEach(t),TFr=r(TSe," \u2014 "),XQ=n(TSe,"A",{href:!0});var e7t=s(XQ);MFr=r(e7t,"TFConvBertForTokenClassification"),e7t.forEach(t),EFr=r(TSe," (ConvBERT model)"),TSe.forEach(t),CFr=i(te),Z7=n(te,"LI",{});var MSe=s(Z7);Mbe=n(MSe,"STRONG",{});var o7t=s(Mbe);wFr=r(o7t,"deberta"),o7t.forEach(t),AFr=r(MSe," \u2014 "),zQ=n(MSe,"A",{href:!0});var r7t=s(zQ);yFr=r(r7t,"TFDebertaForTokenClassification"),r7t.forEach(t),LFr=r(MSe," (DeBERTa model)"),MSe.forEach(t),xFr=i(te),eM=n(te,"LI",{});var ESe=s(eM);Ebe=n(ESe,"STRONG",{});var t7t=s(Ebe);kFr=r(t7t,"deberta-v2"),t7t.forEach(t),SFr=r(ESe," \u2014 "),QQ=n(ESe,"A",{href:!0});var a7t=s(QQ);RFr=r(a7t,"TFDebertaV2ForTokenClassification"),a7t.forEach(t),BFr=r(ESe," (DeBERTa-v2 model)"),ESe.forEach(t),PFr=i(te),oM=n(te,"LI",{});var CSe=s(oM);Cbe=n(CSe,"STRONG",{});var n7t=s(Cbe);$Fr=r(n7t,"distilbert"),n7t.forEach(t),IFr=r(CSe," \u2014 "),WQ=n(CSe,"A",{href:!0});var s7t=s(WQ);qFr=r(s7t,"TFDistilBertForTokenClassification"),s7t.forEach(t),NFr=r(CSe," (DistilBERT model)"),CSe.forEach(t),jFr=i(te),rM=n(te,"LI",{});var wSe=s(rM);wbe=n(wSe,"STRONG",{});var l7t=s(wbe);DFr=r(l7t,"electra"),l7t.forEach(t),GFr=r(wSe," \u2014 "),HQ=n(wSe,"A",{href:!0});var i7t=s(HQ);OFr=r(i7t,"TFElectraForTokenClassification"),i7t.forEach(t),VFr=r(wSe," (ELECTRA model)"),wSe.forEach(t),XFr=i(te),tM=n(te,"LI",{});var ASe=s(tM);Abe=n(ASe,"STRONG",{});var d7t=s(Abe);zFr=r(d7t,"flaubert"),d7t.forEach(t),QFr=r(ASe," \u2014 "),UQ=n(ASe,"A",{href:!0});var c7t=s(UQ);WFr=r(c7t,"TFFlaubertForTokenClassification"),c7t.forEach(t),HFr=r(ASe," (FlauBERT model)"),ASe.forEach(t),UFr=i(te),aM=n(te,"LI",{});var ySe=s(aM);ybe=n(ySe,"STRONG",{});var f7t=s(ybe);JFr=r(f7t,"funnel"),f7t.forEach(t),YFr=r(ySe," \u2014 "),JQ=n(ySe,"A",{href:!0});var m7t=s(JQ);KFr=r(m7t,"TFFunnelForTokenClassification"),m7t.forEach(t),ZFr=r(ySe," (Funnel Transformer model)"),ySe.forEach(t),eTr=i(te),nM=n(te,"LI",{});var LSe=s(nM);Lbe=n(LSe,"STRONG",{});var g7t=s(Lbe);oTr=r(g7t,"layoutlm"),g7t.forEach(t),rTr=r(LSe," \u2014 "),YQ=n(LSe,"A",{href:!0});var h7t=s(YQ);tTr=r(h7t,"TFLayoutLMForTokenClassification"),h7t.forEach(t),aTr=r(LSe," (LayoutLM model)"),LSe.forEach(t),nTr=i(te),sM=n(te,"LI",{});var xSe=s(sM);xbe=n(xSe,"STRONG",{});var p7t=s(xbe);sTr=r(p7t,"longformer"),p7t.forEach(t),lTr=r(xSe," \u2014 "),KQ=n(xSe,"A",{href:!0});var _7t=s(KQ);iTr=r(_7t,"TFLongformerForTokenClassification"),_7t.forEach(t),dTr=r(xSe," (Longformer model)"),xSe.forEach(t),cTr=i(te),lM=n(te,"LI",{});var kSe=s(lM);kbe=n(kSe,"STRONG",{});var u7t=s(kbe);fTr=r(u7t,"mobilebert"),u7t.forEach(t),mTr=r(kSe," \u2014 "),ZQ=n(kSe,"A",{href:!0});var b7t=s(ZQ);gTr=r(b7t,"TFMobileBertForTokenClassification"),b7t.forEach(t),hTr=r(kSe," (MobileBERT model)"),kSe.forEach(t),pTr=i(te),iM=n(te,"LI",{});var SSe=s(iM);Sbe=n(SSe,"STRONG",{});var v7t=s(Sbe);_Tr=r(v7t,"mpnet"),v7t.forEach(t),uTr=r(SSe," \u2014 "),eW=n(SSe,"A",{href:!0});var F7t=s(eW);bTr=r(F7t,"TFMPNetForTokenClassification"),F7t.forEach(t),vTr=r(SSe," (MPNet model)"),SSe.forEach(t),FTr=i(te),dM=n(te,"LI",{});var RSe=s(dM);Rbe=n(RSe,"STRONG",{});var T7t=s(Rbe);TTr=r(T7t,"rembert"),T7t.forEach(t),MTr=r(RSe," \u2014 "),oW=n(RSe,"A",{href:!0});var M7t=s(oW);ETr=r(M7t,"TFRemBertForTokenClassification"),M7t.forEach(t),CTr=r(RSe," (RemBERT model)"),RSe.forEach(t),wTr=i(te),cM=n(te,"LI",{});var BSe=s(cM);Bbe=n(BSe,"STRONG",{});var E7t=s(Bbe);ATr=r(E7t,"roberta"),E7t.forEach(t),yTr=r(BSe," \u2014 "),rW=n(BSe,"A",{href:!0});var C7t=s(rW);LTr=r(C7t,"TFRobertaForTokenClassification"),C7t.forEach(t),xTr=r(BSe," (RoBERTa model)"),BSe.forEach(t),kTr=i(te),fM=n(te,"LI",{});var PSe=s(fM);Pbe=n(PSe,"STRONG",{});var w7t=s(Pbe);STr=r(w7t,"roformer"),w7t.forEach(t),RTr=r(PSe," \u2014 "),tW=n(PSe,"A",{href:!0});var A7t=s(tW);BTr=r(A7t,"TFRoFormerForTokenClassification"),A7t.forEach(t),PTr=r(PSe," (RoFormer model)"),PSe.forEach(t),$Tr=i(te),mM=n(te,"LI",{});var $Se=s(mM);$be=n($Se,"STRONG",{});var y7t=s($be);ITr=r(y7t,"xlm"),y7t.forEach(t),qTr=r($Se," \u2014 "),aW=n($Se,"A",{href:!0});var L7t=s(aW);NTr=r(L7t,"TFXLMForTokenClassification"),L7t.forEach(t),jTr=r($Se," (XLM model)"),$Se.forEach(t),DTr=i(te),gM=n(te,"LI",{});var ISe=s(gM);Ibe=n(ISe,"STRONG",{});var x7t=s(Ibe);GTr=r(x7t,"xlm-roberta"),x7t.forEach(t),OTr=r(ISe," \u2014 "),nW=n(ISe,"A",{href:!0});var k7t=s(nW);VTr=r(k7t,"TFXLMRobertaForTokenClassification"),k7t.forEach(t),XTr=r(ISe," (XLM-RoBERTa model)"),ISe.forEach(t),zTr=i(te),hM=n(te,"LI",{});var qSe=s(hM);qbe=n(qSe,"STRONG",{});var S7t=s(qbe);QTr=r(S7t,"xlnet"),S7t.forEach(t),WTr=r(qSe," \u2014 "),sW=n(qSe,"A",{href:!0});var R7t=s(sW);HTr=r(R7t,"TFXLNetForTokenClassification"),R7t.forEach(t),UTr=r(qSe," (XLNet model)"),qSe.forEach(t),te.forEach(t),JTr=i(Ca),Nbe=n(Ca,"P",{});var B7t=s(Nbe);YTr=r(B7t,"Examples:"),B7t.forEach(t),KTr=i(Ca),m(Gy.$$.fragment,Ca),Ca.forEach(t),mi.forEach(t),C$e=i(c),Yc=n(c,"H2",{class:!0});var $qe=s(Yc);pM=n($qe,"A",{id:!0,class:!0,href:!0});var P7t=s(pM);jbe=n(P7t,"SPAN",{});var $7t=s(jbe);m(Oy.$$.fragment,$7t),$7t.forEach(t),P7t.forEach(t),ZTr=i($qe),Dbe=n($qe,"SPAN",{});var I7t=s(Dbe);e7r=r(I7t,"TFAutoModelForQuestionAnswering"),I7t.forEach(t),$qe.forEach(t),w$e=i(c),xr=n(c,"DIV",{class:!0});var hi=s(xr);m(Vy.$$.fragment,hi),o7r=i(hi),Kc=n(hi,"P",{});var xY=s(Kc);r7r=r(xY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),lW=n(xY,"A",{href:!0});var q7t=s(lW);t7r=r(q7t,"from_pretrained()"),q7t.forEach(t),a7r=r(xY," class method or the "),iW=n(xY,"A",{href:!0});var N7t=s(iW);n7r=r(N7t,"from_config()"),N7t.forEach(t),s7r=r(xY,` class
method.`),xY.forEach(t),l7r=i(hi),Xy=n(hi,"P",{});var Iqe=s(Xy);i7r=r(Iqe,"This class cannot be instantiated directly using "),Gbe=n(Iqe,"CODE",{});var j7t=s(Gbe);d7r=r(j7t,"__init__()"),j7t.forEach(t),c7r=r(Iqe," (throws an error)."),Iqe.forEach(t),f7r=i(hi),Et=n(hi,"DIV",{class:!0});var pi=s(Et);m(zy.$$.fragment,pi),m7r=i(pi),Obe=n(pi,"P",{});var D7t=s(Obe);g7r=r(D7t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),D7t.forEach(t),h7r=i(pi),Zc=n(pi,"P",{});var kY=s(Zc);p7r=r(kY,`Note:
Loading a model from its configuration file does `),Vbe=n(kY,"STRONG",{});var G7t=s(Vbe);_7r=r(G7t,"not"),G7t.forEach(t),u7r=r(kY,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n(kY,"A",{href:!0});var O7t=s(dW);b7r=r(O7t,"from_pretrained()"),O7t.forEach(t),v7r=r(kY," to load the model weights."),kY.forEach(t),F7r=i(pi),Xbe=n(pi,"P",{});var V7t=s(Xbe);T7r=r(V7t,"Examples:"),V7t.forEach(t),M7r=i(pi),m(Qy.$$.fragment,pi),pi.forEach(t),E7r=i(hi),wo=n(hi,"DIV",{class:!0});var wa=s(wo);m(Wy.$$.fragment,wa),C7r=i(wa),zbe=n(wa,"P",{});var X7t=s(zbe);w7r=r(X7t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),X7t.forEach(t),A7r=i(wa),yn=n(wa,"P",{});var kC=s(yn);y7r=r(kC,"The model class to instantiate is selected based on the "),Qbe=n(kC,"CODE",{});var z7t=s(Qbe);L7r=r(z7t,"model_type"),z7t.forEach(t),x7r=r(kC,` property of the config object (either
passed as an argument or loaded from `),Wbe=n(kC,"CODE",{});var Q7t=s(Wbe);k7r=r(Q7t,"pretrained_model_name_or_path"),Q7t.forEach(t),S7r=r(kC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=n(kC,"CODE",{});var W7t=s(Hbe);R7r=r(W7t,"pretrained_model_name_or_path"),W7t.forEach(t),B7r=r(kC,":"),kC.forEach(t),P7r=i(wa),ee=n(wa,"UL",{});var ae=s(ee);_M=n(ae,"LI",{});var NSe=s(_M);Ube=n(NSe,"STRONG",{});var H7t=s(Ube);$7r=r(H7t,"albert"),H7t.forEach(t),I7r=r(NSe," \u2014 "),cW=n(NSe,"A",{href:!0});var U7t=s(cW);q7r=r(U7t,"TFAlbertForQuestionAnswering"),U7t.forEach(t),N7r=r(NSe," (ALBERT model)"),NSe.forEach(t),j7r=i(ae),uM=n(ae,"LI",{});var jSe=s(uM);Jbe=n(jSe,"STRONG",{});var J7t=s(Jbe);D7r=r(J7t,"bert"),J7t.forEach(t),G7r=r(jSe," \u2014 "),fW=n(jSe,"A",{href:!0});var Y7t=s(fW);O7r=r(Y7t,"TFBertForQuestionAnswering"),Y7t.forEach(t),V7r=r(jSe," (BERT model)"),jSe.forEach(t),X7r=i(ae),bM=n(ae,"LI",{});var DSe=s(bM);Ybe=n(DSe,"STRONG",{});var K7t=s(Ybe);z7r=r(K7t,"camembert"),K7t.forEach(t),Q7r=r(DSe," \u2014 "),mW=n(DSe,"A",{href:!0});var Z7t=s(mW);W7r=r(Z7t,"TFCamembertForQuestionAnswering"),Z7t.forEach(t),H7r=r(DSe," (CamemBERT model)"),DSe.forEach(t),U7r=i(ae),vM=n(ae,"LI",{});var GSe=s(vM);Kbe=n(GSe,"STRONG",{});var eMt=s(Kbe);J7r=r(eMt,"convbert"),eMt.forEach(t),Y7r=r(GSe," \u2014 "),gW=n(GSe,"A",{href:!0});var oMt=s(gW);K7r=r(oMt,"TFConvBertForQuestionAnswering"),oMt.forEach(t),Z7r=r(GSe," (ConvBERT model)"),GSe.forEach(t),eMr=i(ae),FM=n(ae,"LI",{});var OSe=s(FM);Zbe=n(OSe,"STRONG",{});var rMt=s(Zbe);oMr=r(rMt,"deberta"),rMt.forEach(t),rMr=r(OSe," \u2014 "),hW=n(OSe,"A",{href:!0});var tMt=s(hW);tMr=r(tMt,"TFDebertaForQuestionAnswering"),tMt.forEach(t),aMr=r(OSe," (DeBERTa model)"),OSe.forEach(t),nMr=i(ae),TM=n(ae,"LI",{});var VSe=s(TM);e2e=n(VSe,"STRONG",{});var aMt=s(e2e);sMr=r(aMt,"deberta-v2"),aMt.forEach(t),lMr=r(VSe," \u2014 "),pW=n(VSe,"A",{href:!0});var nMt=s(pW);iMr=r(nMt,"TFDebertaV2ForQuestionAnswering"),nMt.forEach(t),dMr=r(VSe," (DeBERTa-v2 model)"),VSe.forEach(t),cMr=i(ae),MM=n(ae,"LI",{});var XSe=s(MM);o2e=n(XSe,"STRONG",{});var sMt=s(o2e);fMr=r(sMt,"distilbert"),sMt.forEach(t),mMr=r(XSe," \u2014 "),_W=n(XSe,"A",{href:!0});var lMt=s(_W);gMr=r(lMt,"TFDistilBertForQuestionAnswering"),lMt.forEach(t),hMr=r(XSe," (DistilBERT model)"),XSe.forEach(t),pMr=i(ae),EM=n(ae,"LI",{});var zSe=s(EM);r2e=n(zSe,"STRONG",{});var iMt=s(r2e);_Mr=r(iMt,"electra"),iMt.forEach(t),uMr=r(zSe," \u2014 "),uW=n(zSe,"A",{href:!0});var dMt=s(uW);bMr=r(dMt,"TFElectraForQuestionAnswering"),dMt.forEach(t),vMr=r(zSe," (ELECTRA model)"),zSe.forEach(t),FMr=i(ae),CM=n(ae,"LI",{});var QSe=s(CM);t2e=n(QSe,"STRONG",{});var cMt=s(t2e);TMr=r(cMt,"flaubert"),cMt.forEach(t),MMr=r(QSe," \u2014 "),bW=n(QSe,"A",{href:!0});var fMt=s(bW);EMr=r(fMt,"TFFlaubertForQuestionAnsweringSimple"),fMt.forEach(t),CMr=r(QSe," (FlauBERT model)"),QSe.forEach(t),wMr=i(ae),wM=n(ae,"LI",{});var WSe=s(wM);a2e=n(WSe,"STRONG",{});var mMt=s(a2e);AMr=r(mMt,"funnel"),mMt.forEach(t),yMr=r(WSe," \u2014 "),vW=n(WSe,"A",{href:!0});var gMt=s(vW);LMr=r(gMt,"TFFunnelForQuestionAnswering"),gMt.forEach(t),xMr=r(WSe," (Funnel Transformer model)"),WSe.forEach(t),kMr=i(ae),AM=n(ae,"LI",{});var HSe=s(AM);n2e=n(HSe,"STRONG",{});var hMt=s(n2e);SMr=r(hMt,"gptj"),hMt.forEach(t),RMr=r(HSe," \u2014 "),FW=n(HSe,"A",{href:!0});var pMt=s(FW);BMr=r(pMt,"TFGPTJForQuestionAnswering"),pMt.forEach(t),PMr=r(HSe," (GPT-J model)"),HSe.forEach(t),$Mr=i(ae),yM=n(ae,"LI",{});var USe=s(yM);s2e=n(USe,"STRONG",{});var _Mt=s(s2e);IMr=r(_Mt,"longformer"),_Mt.forEach(t),qMr=r(USe," \u2014 "),TW=n(USe,"A",{href:!0});var uMt=s(TW);NMr=r(uMt,"TFLongformerForQuestionAnswering"),uMt.forEach(t),jMr=r(USe," (Longformer model)"),USe.forEach(t),DMr=i(ae),LM=n(ae,"LI",{});var JSe=s(LM);l2e=n(JSe,"STRONG",{});var bMt=s(l2e);GMr=r(bMt,"mobilebert"),bMt.forEach(t),OMr=r(JSe," \u2014 "),MW=n(JSe,"A",{href:!0});var vMt=s(MW);VMr=r(vMt,"TFMobileBertForQuestionAnswering"),vMt.forEach(t),XMr=r(JSe," (MobileBERT model)"),JSe.forEach(t),zMr=i(ae),xM=n(ae,"LI",{});var YSe=s(xM);i2e=n(YSe,"STRONG",{});var FMt=s(i2e);QMr=r(FMt,"mpnet"),FMt.forEach(t),WMr=r(YSe," \u2014 "),EW=n(YSe,"A",{href:!0});var TMt=s(EW);HMr=r(TMt,"TFMPNetForQuestionAnswering"),TMt.forEach(t),UMr=r(YSe," (MPNet model)"),YSe.forEach(t),JMr=i(ae),kM=n(ae,"LI",{});var KSe=s(kM);d2e=n(KSe,"STRONG",{});var MMt=s(d2e);YMr=r(MMt,"rembert"),MMt.forEach(t),KMr=r(KSe," \u2014 "),CW=n(KSe,"A",{href:!0});var EMt=s(CW);ZMr=r(EMt,"TFRemBertForQuestionAnswering"),EMt.forEach(t),eEr=r(KSe," (RemBERT model)"),KSe.forEach(t),oEr=i(ae),SM=n(ae,"LI",{});var ZSe=s(SM);c2e=n(ZSe,"STRONG",{});var CMt=s(c2e);rEr=r(CMt,"roberta"),CMt.forEach(t),tEr=r(ZSe," \u2014 "),wW=n(ZSe,"A",{href:!0});var wMt=s(wW);aEr=r(wMt,"TFRobertaForQuestionAnswering"),wMt.forEach(t),nEr=r(ZSe," (RoBERTa model)"),ZSe.forEach(t),sEr=i(ae),RM=n(ae,"LI",{});var eRe=s(RM);f2e=n(eRe,"STRONG",{});var AMt=s(f2e);lEr=r(AMt,"roformer"),AMt.forEach(t),iEr=r(eRe," \u2014 "),AW=n(eRe,"A",{href:!0});var yMt=s(AW);dEr=r(yMt,"TFRoFormerForQuestionAnswering"),yMt.forEach(t),cEr=r(eRe," (RoFormer model)"),eRe.forEach(t),fEr=i(ae),BM=n(ae,"LI",{});var oRe=s(BM);m2e=n(oRe,"STRONG",{});var LMt=s(m2e);mEr=r(LMt,"xlm"),LMt.forEach(t),gEr=r(oRe," \u2014 "),yW=n(oRe,"A",{href:!0});var xMt=s(yW);hEr=r(xMt,"TFXLMForQuestionAnsweringSimple"),xMt.forEach(t),pEr=r(oRe," (XLM model)"),oRe.forEach(t),_Er=i(ae),PM=n(ae,"LI",{});var rRe=s(PM);g2e=n(rRe,"STRONG",{});var kMt=s(g2e);uEr=r(kMt,"xlm-roberta"),kMt.forEach(t),bEr=r(rRe," \u2014 "),LW=n(rRe,"A",{href:!0});var SMt=s(LW);vEr=r(SMt,"TFXLMRobertaForQuestionAnswering"),SMt.forEach(t),FEr=r(rRe," (XLM-RoBERTa model)"),rRe.forEach(t),TEr=i(ae),$M=n(ae,"LI",{});var tRe=s($M);h2e=n(tRe,"STRONG",{});var RMt=s(h2e);MEr=r(RMt,"xlnet"),RMt.forEach(t),EEr=r(tRe," \u2014 "),xW=n(tRe,"A",{href:!0});var BMt=s(xW);CEr=r(BMt,"TFXLNetForQuestionAnsweringSimple"),BMt.forEach(t),wEr=r(tRe," (XLNet model)"),tRe.forEach(t),ae.forEach(t),AEr=i(wa),p2e=n(wa,"P",{});var PMt=s(p2e);yEr=r(PMt,"Examples:"),PMt.forEach(t),LEr=i(wa),m(Hy.$$.fragment,wa),wa.forEach(t),hi.forEach(t),A$e=i(c),ef=n(c,"H2",{class:!0});var qqe=s(ef);IM=n(qqe,"A",{id:!0,class:!0,href:!0});var $Mt=s(IM);_2e=n($Mt,"SPAN",{});var IMt=s(_2e);m(Uy.$$.fragment,IMt),IMt.forEach(t),$Mt.forEach(t),xEr=i(qqe),u2e=n(qqe,"SPAN",{});var qMt=s(u2e);kEr=r(qMt,"TFAutoModelForVision2Seq"),qMt.forEach(t),qqe.forEach(t),y$e=i(c),kr=n(c,"DIV",{class:!0});var _i=s(kr);m(Jy.$$.fragment,_i),SEr=i(_i),of=n(_i,"P",{});var SY=s(of);REr=r(SY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kW=n(SY,"A",{href:!0});var NMt=s(kW);BEr=r(NMt,"from_pretrained()"),NMt.forEach(t),PEr=r(SY," class method or the "),SW=n(SY,"A",{href:!0});var jMt=s(SW);$Er=r(jMt,"from_config()"),jMt.forEach(t),IEr=r(SY,` class
method.`),SY.forEach(t),qEr=i(_i),Yy=n(_i,"P",{});var Nqe=s(Yy);NEr=r(Nqe,"This class cannot be instantiated directly using "),b2e=n(Nqe,"CODE",{});var DMt=s(b2e);jEr=r(DMt,"__init__()"),DMt.forEach(t),DEr=r(Nqe," (throws an error)."),Nqe.forEach(t),GEr=i(_i),Ct=n(_i,"DIV",{class:!0});var ui=s(Ct);m(Ky.$$.fragment,ui),OEr=i(ui),v2e=n(ui,"P",{});var GMt=s(v2e);VEr=r(GMt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),GMt.forEach(t),XEr=i(ui),rf=n(ui,"P",{});var RY=s(rf);zEr=r(RY,`Note:
Loading a model from its configuration file does `),F2e=n(RY,"STRONG",{});var OMt=s(F2e);QEr=r(OMt,"not"),OMt.forEach(t),WEr=r(RY,` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=n(RY,"A",{href:!0});var VMt=s(RW);HEr=r(VMt,"from_pretrained()"),VMt.forEach(t),UEr=r(RY," to load the model weights."),RY.forEach(t),JEr=i(ui),T2e=n(ui,"P",{});var XMt=s(T2e);YEr=r(XMt,"Examples:"),XMt.forEach(t),KEr=i(ui),m(Zy.$$.fragment,ui),ui.forEach(t),ZEr=i(_i),Ao=n(_i,"DIV",{class:!0});var Aa=s(Ao);m(e8.$$.fragment,Aa),e3r=i(Aa),M2e=n(Aa,"P",{});var zMt=s(M2e);o3r=r(zMt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),zMt.forEach(t),r3r=i(Aa),Ln=n(Aa,"P",{});var SC=s(Ln);t3r=r(SC,"The model class to instantiate is selected based on the "),E2e=n(SC,"CODE",{});var QMt=s(E2e);a3r=r(QMt,"model_type"),QMt.forEach(t),n3r=r(SC,` property of the config object (either
passed as an argument or loaded from `),C2e=n(SC,"CODE",{});var WMt=s(C2e);s3r=r(WMt,"pretrained_model_name_or_path"),WMt.forEach(t),l3r=r(SC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w2e=n(SC,"CODE",{});var HMt=s(w2e);i3r=r(HMt,"pretrained_model_name_or_path"),HMt.forEach(t),d3r=r(SC,":"),SC.forEach(t),c3r=i(Aa),A2e=n(Aa,"UL",{});var UMt=s(A2e);qM=n(UMt,"LI",{});var aRe=s(qM);y2e=n(aRe,"STRONG",{});var JMt=s(y2e);f3r=r(JMt,"vision-encoder-decoder"),JMt.forEach(t),m3r=r(aRe," \u2014 "),BW=n(aRe,"A",{href:!0});var YMt=s(BW);g3r=r(YMt,"TFVisionEncoderDecoderModel"),YMt.forEach(t),h3r=r(aRe," (Vision Encoder decoder model)"),aRe.forEach(t),UMt.forEach(t),p3r=i(Aa),L2e=n(Aa,"P",{});var KMt=s(L2e);_3r=r(KMt,"Examples:"),KMt.forEach(t),u3r=i(Aa),m(o8.$$.fragment,Aa),Aa.forEach(t),_i.forEach(t),L$e=i(c),tf=n(c,"H2",{class:!0});var jqe=s(tf);NM=n(jqe,"A",{id:!0,class:!0,href:!0});var ZMt=s(NM);x2e=n(ZMt,"SPAN",{});var eEt=s(x2e);m(r8.$$.fragment,eEt),eEt.forEach(t),ZMt.forEach(t),b3r=i(jqe),k2e=n(jqe,"SPAN",{});var oEt=s(k2e);v3r=r(oEt,"TFAutoModelForSpeechSeq2Seq"),oEt.forEach(t),jqe.forEach(t),x$e=i(c),Sr=n(c,"DIV",{class:!0});var bi=s(Sr);m(t8.$$.fragment,bi),F3r=i(bi),af=n(bi,"P",{});var BY=s(af);T3r=r(BY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PW=n(BY,"A",{href:!0});var rEt=s(PW);M3r=r(rEt,"from_pretrained()"),rEt.forEach(t),E3r=r(BY," class method or the "),$W=n(BY,"A",{href:!0});var tEt=s($W);C3r=r(tEt,"from_config()"),tEt.forEach(t),w3r=r(BY,` class
method.`),BY.forEach(t),A3r=i(bi),a8=n(bi,"P",{});var Dqe=s(a8);y3r=r(Dqe,"This class cannot be instantiated directly using "),S2e=n(Dqe,"CODE",{});var aEt=s(S2e);L3r=r(aEt,"__init__()"),aEt.forEach(t),x3r=r(Dqe," (throws an error)."),Dqe.forEach(t),k3r=i(bi),wt=n(bi,"DIV",{class:!0});var vi=s(wt);m(n8.$$.fragment,vi),S3r=i(vi),R2e=n(vi,"P",{});var nEt=s(R2e);R3r=r(nEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),nEt.forEach(t),B3r=i(vi),nf=n(vi,"P",{});var PY=s(nf);P3r=r(PY,`Note:
Loading a model from its configuration file does `),B2e=n(PY,"STRONG",{});var sEt=s(B2e);$3r=r(sEt,"not"),sEt.forEach(t),I3r=r(PY,` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=n(PY,"A",{href:!0});var lEt=s(IW);q3r=r(lEt,"from_pretrained()"),lEt.forEach(t),N3r=r(PY," to load the model weights."),PY.forEach(t),j3r=i(vi),P2e=n(vi,"P",{});var iEt=s(P2e);D3r=r(iEt,"Examples:"),iEt.forEach(t),G3r=i(vi),m(s8.$$.fragment,vi),vi.forEach(t),O3r=i(bi),yo=n(bi,"DIV",{class:!0});var ya=s(yo);m(l8.$$.fragment,ya),V3r=i(ya),$2e=n(ya,"P",{});var dEt=s($2e);X3r=r(dEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),dEt.forEach(t),z3r=i(ya),xn=n(ya,"P",{});var RC=s(xn);Q3r=r(RC,"The model class to instantiate is selected based on the "),I2e=n(RC,"CODE",{});var cEt=s(I2e);W3r=r(cEt,"model_type"),cEt.forEach(t),H3r=r(RC,` property of the config object (either
passed as an argument or loaded from `),q2e=n(RC,"CODE",{});var fEt=s(q2e);U3r=r(fEt,"pretrained_model_name_or_path"),fEt.forEach(t),J3r=r(RC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=n(RC,"CODE",{});var mEt=s(N2e);Y3r=r(mEt,"pretrained_model_name_or_path"),mEt.forEach(t),K3r=r(RC,":"),RC.forEach(t),Z3r=i(ya),j2e=n(ya,"UL",{});var gEt=s(j2e);jM=n(gEt,"LI",{});var nRe=s(jM);D2e=n(nRe,"STRONG",{});var hEt=s(D2e);eCr=r(hEt,"speech_to_text"),hEt.forEach(t),oCr=r(nRe," \u2014 "),qW=n(nRe,"A",{href:!0});var pEt=s(qW);rCr=r(pEt,"TFSpeech2TextForConditionalGeneration"),pEt.forEach(t),tCr=r(nRe," (Speech2Text model)"),nRe.forEach(t),gEt.forEach(t),aCr=i(ya),G2e=n(ya,"P",{});var _Et=s(G2e);nCr=r(_Et,"Examples:"),_Et.forEach(t),sCr=i(ya),m(i8.$$.fragment,ya),ya.forEach(t),bi.forEach(t),k$e=i(c),sf=n(c,"H2",{class:!0});var Gqe=s(sf);DM=n(Gqe,"A",{id:!0,class:!0,href:!0});var uEt=s(DM);O2e=n(uEt,"SPAN",{});var bEt=s(O2e);m(d8.$$.fragment,bEt),bEt.forEach(t),uEt.forEach(t),lCr=i(Gqe),V2e=n(Gqe,"SPAN",{});var vEt=s(V2e);iCr=r(vEt,"FlaxAutoModel"),vEt.forEach(t),Gqe.forEach(t),S$e=i(c),Rr=n(c,"DIV",{class:!0});var Fi=s(Rr);m(c8.$$.fragment,Fi),dCr=i(Fi),lf=n(Fi,"P",{});var $Y=s(lf);cCr=r($Y,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),NW=n($Y,"A",{href:!0});var FEt=s(NW);fCr=r(FEt,"from_pretrained()"),FEt.forEach(t),mCr=r($Y," class method or the "),jW=n($Y,"A",{href:!0});var TEt=s(jW);gCr=r(TEt,"from_config()"),TEt.forEach(t),hCr=r($Y,` class
method.`),$Y.forEach(t),pCr=i(Fi),f8=n(Fi,"P",{});var Oqe=s(f8);_Cr=r(Oqe,"This class cannot be instantiated directly using "),X2e=n(Oqe,"CODE",{});var MEt=s(X2e);uCr=r(MEt,"__init__()"),MEt.forEach(t),bCr=r(Oqe," (throws an error)."),Oqe.forEach(t),vCr=i(Fi),At=n(Fi,"DIV",{class:!0});var Ti=s(At);m(m8.$$.fragment,Ti),FCr=i(Ti),z2e=n(Ti,"P",{});var EEt=s(z2e);TCr=r(EEt,"Instantiates one of the base model classes of the library from a configuration."),EEt.forEach(t),MCr=i(Ti),df=n(Ti,"P",{});var IY=s(df);ECr=r(IY,`Note:
Loading a model from its configuration file does `),Q2e=n(IY,"STRONG",{});var CEt=s(Q2e);CCr=r(CEt,"not"),CEt.forEach(t),wCr=r(IY,` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=n(IY,"A",{href:!0});var wEt=s(DW);ACr=r(wEt,"from_pretrained()"),wEt.forEach(t),yCr=r(IY," to load the model weights."),IY.forEach(t),LCr=i(Ti),W2e=n(Ti,"P",{});var AEt=s(W2e);xCr=r(AEt,"Examples:"),AEt.forEach(t),kCr=i(Ti),m(g8.$$.fragment,Ti),Ti.forEach(t),SCr=i(Fi),Lo=n(Fi,"DIV",{class:!0});var La=s(Lo);m(h8.$$.fragment,La),RCr=i(La),H2e=n(La,"P",{});var yEt=s(H2e);BCr=r(yEt,"Instantiate one of the base model classes of the library from a pretrained model."),yEt.forEach(t),PCr=i(La),kn=n(La,"P",{});var BC=s(kn);$Cr=r(BC,"The model class to instantiate is selected based on the "),U2e=n(BC,"CODE",{});var LEt=s(U2e);ICr=r(LEt,"model_type"),LEt.forEach(t),qCr=r(BC,` property of the config object (either
passed as an argument or loaded from `),J2e=n(BC,"CODE",{});var xEt=s(J2e);NCr=r(xEt,"pretrained_model_name_or_path"),xEt.forEach(t),jCr=r(BC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=n(BC,"CODE",{});var kEt=s(Y2e);DCr=r(kEt,"pretrained_model_name_or_path"),kEt.forEach(t),GCr=r(BC,":"),BC.forEach(t),OCr=i(La),z=n(La,"UL",{});var W=s(z);GM=n(W,"LI",{});var sRe=s(GM);K2e=n(sRe,"STRONG",{});var SEt=s(K2e);VCr=r(SEt,"albert"),SEt.forEach(t),XCr=r(sRe," \u2014 "),GW=n(sRe,"A",{href:!0});var REt=s(GW);zCr=r(REt,"FlaxAlbertModel"),REt.forEach(t),QCr=r(sRe," (ALBERT model)"),sRe.forEach(t),WCr=i(W),OM=n(W,"LI",{});var lRe=s(OM);Z2e=n(lRe,"STRONG",{});var BEt=s(Z2e);HCr=r(BEt,"bart"),BEt.forEach(t),UCr=r(lRe," \u2014 "),OW=n(lRe,"A",{href:!0});var PEt=s(OW);JCr=r(PEt,"FlaxBartModel"),PEt.forEach(t),YCr=r(lRe," (BART model)"),lRe.forEach(t),KCr=i(W),VM=n(W,"LI",{});var iRe=s(VM);eve=n(iRe,"STRONG",{});var $Et=s(eve);ZCr=r($Et,"beit"),$Et.forEach(t),e6r=r(iRe," \u2014 "),VW=n(iRe,"A",{href:!0});var IEt=s(VW);o6r=r(IEt,"FlaxBeitModel"),IEt.forEach(t),r6r=r(iRe," (BEiT model)"),iRe.forEach(t),t6r=i(W),XM=n(W,"LI",{});var dRe=s(XM);ove=n(dRe,"STRONG",{});var qEt=s(ove);a6r=r(qEt,"bert"),qEt.forEach(t),n6r=r(dRe," \u2014 "),XW=n(dRe,"A",{href:!0});var NEt=s(XW);s6r=r(NEt,"FlaxBertModel"),NEt.forEach(t),l6r=r(dRe," (BERT model)"),dRe.forEach(t),i6r=i(W),zM=n(W,"LI",{});var cRe=s(zM);rve=n(cRe,"STRONG",{});var jEt=s(rve);d6r=r(jEt,"big_bird"),jEt.forEach(t),c6r=r(cRe," \u2014 "),zW=n(cRe,"A",{href:!0});var DEt=s(zW);f6r=r(DEt,"FlaxBigBirdModel"),DEt.forEach(t),m6r=r(cRe," (BigBird model)"),cRe.forEach(t),g6r=i(W),QM=n(W,"LI",{});var fRe=s(QM);tve=n(fRe,"STRONG",{});var GEt=s(tve);h6r=r(GEt,"blenderbot"),GEt.forEach(t),p6r=r(fRe," \u2014 "),QW=n(fRe,"A",{href:!0});var OEt=s(QW);_6r=r(OEt,"FlaxBlenderbotModel"),OEt.forEach(t),u6r=r(fRe," (Blenderbot model)"),fRe.forEach(t),b6r=i(W),WM=n(W,"LI",{});var mRe=s(WM);ave=n(mRe,"STRONG",{});var VEt=s(ave);v6r=r(VEt,"blenderbot-small"),VEt.forEach(t),F6r=r(mRe," \u2014 "),WW=n(mRe,"A",{href:!0});var XEt=s(WW);T6r=r(XEt,"FlaxBlenderbotSmallModel"),XEt.forEach(t),M6r=r(mRe," (BlenderbotSmall model)"),mRe.forEach(t),E6r=i(W),HM=n(W,"LI",{});var gRe=s(HM);nve=n(gRe,"STRONG",{});var zEt=s(nve);C6r=r(zEt,"clip"),zEt.forEach(t),w6r=r(gRe," \u2014 "),HW=n(gRe,"A",{href:!0});var QEt=s(HW);A6r=r(QEt,"FlaxCLIPModel"),QEt.forEach(t),y6r=r(gRe," (CLIP model)"),gRe.forEach(t),L6r=i(W),UM=n(W,"LI",{});var hRe=s(UM);sve=n(hRe,"STRONG",{});var WEt=s(sve);x6r=r(WEt,"distilbert"),WEt.forEach(t),k6r=r(hRe," \u2014 "),UW=n(hRe,"A",{href:!0});var HEt=s(UW);S6r=r(HEt,"FlaxDistilBertModel"),HEt.forEach(t),R6r=r(hRe," (DistilBERT model)"),hRe.forEach(t),B6r=i(W),JM=n(W,"LI",{});var pRe=s(JM);lve=n(pRe,"STRONG",{});var UEt=s(lve);P6r=r(UEt,"electra"),UEt.forEach(t),$6r=r(pRe," \u2014 "),JW=n(pRe,"A",{href:!0});var JEt=s(JW);I6r=r(JEt,"FlaxElectraModel"),JEt.forEach(t),q6r=r(pRe," (ELECTRA model)"),pRe.forEach(t),N6r=i(W),YM=n(W,"LI",{});var _Re=s(YM);ive=n(_Re,"STRONG",{});var YEt=s(ive);j6r=r(YEt,"gpt2"),YEt.forEach(t),D6r=r(_Re," \u2014 "),YW=n(_Re,"A",{href:!0});var KEt=s(YW);G6r=r(KEt,"FlaxGPT2Model"),KEt.forEach(t),O6r=r(_Re," (OpenAI GPT-2 model)"),_Re.forEach(t),V6r=i(W),KM=n(W,"LI",{});var uRe=s(KM);dve=n(uRe,"STRONG",{});var ZEt=s(dve);X6r=r(ZEt,"gpt_neo"),ZEt.forEach(t),z6r=r(uRe," \u2014 "),KW=n(uRe,"A",{href:!0});var e3t=s(KW);Q6r=r(e3t,"FlaxGPTNeoModel"),e3t.forEach(t),W6r=r(uRe," (GPT Neo model)"),uRe.forEach(t),H6r=i(W),ZM=n(W,"LI",{});var bRe=s(ZM);cve=n(bRe,"STRONG",{});var o3t=s(cve);U6r=r(o3t,"gptj"),o3t.forEach(t),J6r=r(bRe," \u2014 "),ZW=n(bRe,"A",{href:!0});var r3t=s(ZW);Y6r=r(r3t,"FlaxGPTJModel"),r3t.forEach(t),K6r=r(bRe," (GPT-J model)"),bRe.forEach(t),Z6r=i(W),eE=n(W,"LI",{});var vRe=s(eE);fve=n(vRe,"STRONG",{});var t3t=s(fve);ewr=r(t3t,"marian"),t3t.forEach(t),owr=r(vRe," \u2014 "),eH=n(vRe,"A",{href:!0});var a3t=s(eH);rwr=r(a3t,"FlaxMarianModel"),a3t.forEach(t),twr=r(vRe," (Marian model)"),vRe.forEach(t),awr=i(W),oE=n(W,"LI",{});var FRe=s(oE);mve=n(FRe,"STRONG",{});var n3t=s(mve);nwr=r(n3t,"mbart"),n3t.forEach(t),swr=r(FRe," \u2014 "),oH=n(FRe,"A",{href:!0});var s3t=s(oH);lwr=r(s3t,"FlaxMBartModel"),s3t.forEach(t),iwr=r(FRe," (mBART model)"),FRe.forEach(t),dwr=i(W),rE=n(W,"LI",{});var TRe=s(rE);gve=n(TRe,"STRONG",{});var l3t=s(gve);cwr=r(l3t,"mt5"),l3t.forEach(t),fwr=r(TRe," \u2014 "),rH=n(TRe,"A",{href:!0});var i3t=s(rH);mwr=r(i3t,"FlaxMT5Model"),i3t.forEach(t),gwr=r(TRe," (mT5 model)"),TRe.forEach(t),hwr=i(W),tE=n(W,"LI",{});var MRe=s(tE);hve=n(MRe,"STRONG",{});var d3t=s(hve);pwr=r(d3t,"pegasus"),d3t.forEach(t),_wr=r(MRe," \u2014 "),tH=n(MRe,"A",{href:!0});var c3t=s(tH);uwr=r(c3t,"FlaxPegasusModel"),c3t.forEach(t),bwr=r(MRe," (Pegasus model)"),MRe.forEach(t),vwr=i(W),aE=n(W,"LI",{});var ERe=s(aE);pve=n(ERe,"STRONG",{});var f3t=s(pve);Fwr=r(f3t,"roberta"),f3t.forEach(t),Twr=r(ERe," \u2014 "),aH=n(ERe,"A",{href:!0});var m3t=s(aH);Mwr=r(m3t,"FlaxRobertaModel"),m3t.forEach(t),Ewr=r(ERe," (RoBERTa model)"),ERe.forEach(t),Cwr=i(W),nE=n(W,"LI",{});var CRe=s(nE);_ve=n(CRe,"STRONG",{});var g3t=s(_ve);wwr=r(g3t,"roformer"),g3t.forEach(t),Awr=r(CRe," \u2014 "),nH=n(CRe,"A",{href:!0});var h3t=s(nH);ywr=r(h3t,"FlaxRoFormerModel"),h3t.forEach(t),Lwr=r(CRe," (RoFormer model)"),CRe.forEach(t),xwr=i(W),sE=n(W,"LI",{});var wRe=s(sE);uve=n(wRe,"STRONG",{});var p3t=s(uve);kwr=r(p3t,"t5"),p3t.forEach(t),Swr=r(wRe," \u2014 "),sH=n(wRe,"A",{href:!0});var _3t=s(sH);Rwr=r(_3t,"FlaxT5Model"),_3t.forEach(t),Bwr=r(wRe," (T5 model)"),wRe.forEach(t),Pwr=i(W),lE=n(W,"LI",{});var ARe=s(lE);bve=n(ARe,"STRONG",{});var u3t=s(bve);$wr=r(u3t,"vision-text-dual-encoder"),u3t.forEach(t),Iwr=r(ARe," \u2014 "),lH=n(ARe,"A",{href:!0});var b3t=s(lH);qwr=r(b3t,"FlaxVisionTextDualEncoderModel"),b3t.forEach(t),Nwr=r(ARe," (VisionTextDualEncoder model)"),ARe.forEach(t),jwr=i(W),iE=n(W,"LI",{});var yRe=s(iE);vve=n(yRe,"STRONG",{});var v3t=s(vve);Dwr=r(v3t,"vit"),v3t.forEach(t),Gwr=r(yRe," \u2014 "),iH=n(yRe,"A",{href:!0});var F3t=s(iH);Owr=r(F3t,"FlaxViTModel"),F3t.forEach(t),Vwr=r(yRe," (ViT model)"),yRe.forEach(t),Xwr=i(W),dE=n(W,"LI",{});var LRe=s(dE);Fve=n(LRe,"STRONG",{});var T3t=s(Fve);zwr=r(T3t,"wav2vec2"),T3t.forEach(t),Qwr=r(LRe," \u2014 "),dH=n(LRe,"A",{href:!0});var M3t=s(dH);Wwr=r(M3t,"FlaxWav2Vec2Model"),M3t.forEach(t),Hwr=r(LRe," (Wav2Vec2 model)"),LRe.forEach(t),Uwr=i(W),cE=n(W,"LI",{});var xRe=s(cE);Tve=n(xRe,"STRONG",{});var E3t=s(Tve);Jwr=r(E3t,"xglm"),E3t.forEach(t),Ywr=r(xRe," \u2014 "),cH=n(xRe,"A",{href:!0});var C3t=s(cH);Kwr=r(C3t,"FlaxXGLMModel"),C3t.forEach(t),Zwr=r(xRe," (XGLM model)"),xRe.forEach(t),eAr=i(W),fE=n(W,"LI",{});var kRe=s(fE);Mve=n(kRe,"STRONG",{});var w3t=s(Mve);oAr=r(w3t,"xlm-roberta"),w3t.forEach(t),rAr=r(kRe," \u2014 "),fH=n(kRe,"A",{href:!0});var A3t=s(fH);tAr=r(A3t,"FlaxXLMRobertaModel"),A3t.forEach(t),aAr=r(kRe," (XLM-RoBERTa model)"),kRe.forEach(t),W.forEach(t),nAr=i(La),Eve=n(La,"P",{});var y3t=s(Eve);sAr=r(y3t,"Examples:"),y3t.forEach(t),lAr=i(La),m(p8.$$.fragment,La),La.forEach(t),Fi.forEach(t),R$e=i(c),cf=n(c,"H2",{class:!0});var Vqe=s(cf);mE=n(Vqe,"A",{id:!0,class:!0,href:!0});var L3t=s(mE);Cve=n(L3t,"SPAN",{});var x3t=s(Cve);m(_8.$$.fragment,x3t),x3t.forEach(t),L3t.forEach(t),iAr=i(Vqe),wve=n(Vqe,"SPAN",{});var k3t=s(wve);dAr=r(k3t,"FlaxAutoModelForCausalLM"),k3t.forEach(t),Vqe.forEach(t),B$e=i(c),Br=n(c,"DIV",{class:!0});var Mi=s(Br);m(u8.$$.fragment,Mi),cAr=i(Mi),ff=n(Mi,"P",{});var qY=s(ff);fAr=r(qY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),mH=n(qY,"A",{href:!0});var S3t=s(mH);mAr=r(S3t,"from_pretrained()"),S3t.forEach(t),gAr=r(qY," class method or the "),gH=n(qY,"A",{href:!0});var R3t=s(gH);hAr=r(R3t,"from_config()"),R3t.forEach(t),pAr=r(qY,` class
method.`),qY.forEach(t),_Ar=i(Mi),b8=n(Mi,"P",{});var Xqe=s(b8);uAr=r(Xqe,"This class cannot be instantiated directly using "),Ave=n(Xqe,"CODE",{});var B3t=s(Ave);bAr=r(B3t,"__init__()"),B3t.forEach(t),vAr=r(Xqe," (throws an error)."),Xqe.forEach(t),FAr=i(Mi),yt=n(Mi,"DIV",{class:!0});var Ei=s(yt);m(v8.$$.fragment,Ei),TAr=i(Ei),yve=n(Ei,"P",{});var P3t=s(yve);MAr=r(P3t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),P3t.forEach(t),EAr=i(Ei),mf=n(Ei,"P",{});var NY=s(mf);CAr=r(NY,`Note:
Loading a model from its configuration file does `),Lve=n(NY,"STRONG",{});var $3t=s(Lve);wAr=r($3t,"not"),$3t.forEach(t),AAr=r(NY,` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=n(NY,"A",{href:!0});var I3t=s(hH);yAr=r(I3t,"from_pretrained()"),I3t.forEach(t),LAr=r(NY," to load the model weights."),NY.forEach(t),xAr=i(Ei),xve=n(Ei,"P",{});var q3t=s(xve);kAr=r(q3t,"Examples:"),q3t.forEach(t),SAr=i(Ei),m(F8.$$.fragment,Ei),Ei.forEach(t),RAr=i(Mi),xo=n(Mi,"DIV",{class:!0});var xa=s(xo);m(T8.$$.fragment,xa),BAr=i(xa),kve=n(xa,"P",{});var N3t=s(kve);PAr=r(N3t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),N3t.forEach(t),$Ar=i(xa),Sn=n(xa,"P",{});var PC=s(Sn);IAr=r(PC,"The model class to instantiate is selected based on the "),Sve=n(PC,"CODE",{});var j3t=s(Sve);qAr=r(j3t,"model_type"),j3t.forEach(t),NAr=r(PC,` property of the config object (either
passed as an argument or loaded from `),Rve=n(PC,"CODE",{});var D3t=s(Rve);jAr=r(D3t,"pretrained_model_name_or_path"),D3t.forEach(t),DAr=r(PC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=n(PC,"CODE",{});var G3t=s(Bve);GAr=r(G3t,"pretrained_model_name_or_path"),G3t.forEach(t),OAr=r(PC,":"),PC.forEach(t),VAr=i(xa),ca=n(xa,"UL",{});var Ci=s(ca);gE=n(Ci,"LI",{});var SRe=s(gE);Pve=n(SRe,"STRONG",{});var O3t=s(Pve);XAr=r(O3t,"bart"),O3t.forEach(t),zAr=r(SRe," \u2014 "),pH=n(SRe,"A",{href:!0});var V3t=s(pH);QAr=r(V3t,"FlaxBartForCausalLM"),V3t.forEach(t),WAr=r(SRe," (BART model)"),SRe.forEach(t),HAr=i(Ci),hE=n(Ci,"LI",{});var RRe=s(hE);$ve=n(RRe,"STRONG",{});var X3t=s($ve);UAr=r(X3t,"gpt2"),X3t.forEach(t),JAr=r(RRe," \u2014 "),_H=n(RRe,"A",{href:!0});var z3t=s(_H);YAr=r(z3t,"FlaxGPT2LMHeadModel"),z3t.forEach(t),KAr=r(RRe," (OpenAI GPT-2 model)"),RRe.forEach(t),ZAr=i(Ci),pE=n(Ci,"LI",{});var BRe=s(pE);Ive=n(BRe,"STRONG",{});var Q3t=s(Ive);e0r=r(Q3t,"gpt_neo"),Q3t.forEach(t),o0r=r(BRe," \u2014 "),uH=n(BRe,"A",{href:!0});var W3t=s(uH);r0r=r(W3t,"FlaxGPTNeoForCausalLM"),W3t.forEach(t),t0r=r(BRe," (GPT Neo model)"),BRe.forEach(t),a0r=i(Ci),_E=n(Ci,"LI",{});var PRe=s(_E);qve=n(PRe,"STRONG",{});var H3t=s(qve);n0r=r(H3t,"gptj"),H3t.forEach(t),s0r=r(PRe," \u2014 "),bH=n(PRe,"A",{href:!0});var U3t=s(bH);l0r=r(U3t,"FlaxGPTJForCausalLM"),U3t.forEach(t),i0r=r(PRe," (GPT-J model)"),PRe.forEach(t),d0r=i(Ci),uE=n(Ci,"LI",{});var $Re=s(uE);Nve=n($Re,"STRONG",{});var J3t=s(Nve);c0r=r(J3t,"xglm"),J3t.forEach(t),f0r=r($Re," \u2014 "),vH=n($Re,"A",{href:!0});var Y3t=s(vH);m0r=r(Y3t,"FlaxXGLMForCausalLM"),Y3t.forEach(t),g0r=r($Re," (XGLM model)"),$Re.forEach(t),Ci.forEach(t),h0r=i(xa),jve=n(xa,"P",{});var K3t=s(jve);p0r=r(K3t,"Examples:"),K3t.forEach(t),_0r=i(xa),m(M8.$$.fragment,xa),xa.forEach(t),Mi.forEach(t),P$e=i(c),gf=n(c,"H2",{class:!0});var zqe=s(gf);bE=n(zqe,"A",{id:!0,class:!0,href:!0});var Z3t=s(bE);Dve=n(Z3t,"SPAN",{});var eCt=s(Dve);m(E8.$$.fragment,eCt),eCt.forEach(t),Z3t.forEach(t),u0r=i(zqe),Gve=n(zqe,"SPAN",{});var oCt=s(Gve);b0r=r(oCt,"FlaxAutoModelForPreTraining"),oCt.forEach(t),zqe.forEach(t),$$e=i(c),Pr=n(c,"DIV",{class:!0});var wi=s(Pr);m(C8.$$.fragment,wi),v0r=i(wi),hf=n(wi,"P",{});var jY=s(hf);F0r=r(jY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),FH=n(jY,"A",{href:!0});var rCt=s(FH);T0r=r(rCt,"from_pretrained()"),rCt.forEach(t),M0r=r(jY," class method or the "),TH=n(jY,"A",{href:!0});var tCt=s(TH);E0r=r(tCt,"from_config()"),tCt.forEach(t),C0r=r(jY,` class
method.`),jY.forEach(t),w0r=i(wi),w8=n(wi,"P",{});var Qqe=s(w8);A0r=r(Qqe,"This class cannot be instantiated directly using "),Ove=n(Qqe,"CODE",{});var aCt=s(Ove);y0r=r(aCt,"__init__()"),aCt.forEach(t),L0r=r(Qqe," (throws an error)."),Qqe.forEach(t),x0r=i(wi),Lt=n(wi,"DIV",{class:!0});var Ai=s(Lt);m(A8.$$.fragment,Ai),k0r=i(Ai),Vve=n(Ai,"P",{});var nCt=s(Vve);S0r=r(nCt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),nCt.forEach(t),R0r=i(Ai),pf=n(Ai,"P",{});var DY=s(pf);B0r=r(DY,`Note:
Loading a model from its configuration file does `),Xve=n(DY,"STRONG",{});var sCt=s(Xve);P0r=r(sCt,"not"),sCt.forEach(t),$0r=r(DY,` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=n(DY,"A",{href:!0});var lCt=s(MH);I0r=r(lCt,"from_pretrained()"),lCt.forEach(t),q0r=r(DY," to load the model weights."),DY.forEach(t),N0r=i(Ai),zve=n(Ai,"P",{});var iCt=s(zve);j0r=r(iCt,"Examples:"),iCt.forEach(t),D0r=i(Ai),m(y8.$$.fragment,Ai),Ai.forEach(t),G0r=i(wi),ko=n(wi,"DIV",{class:!0});var ka=s(ko);m(L8.$$.fragment,ka),O0r=i(ka),Qve=n(ka,"P",{});var dCt=s(Qve);V0r=r(dCt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),dCt.forEach(t),X0r=i(ka),Rn=n(ka,"P",{});var $C=s(Rn);z0r=r($C,"The model class to instantiate is selected based on the "),Wve=n($C,"CODE",{});var cCt=s(Wve);Q0r=r(cCt,"model_type"),cCt.forEach(t),W0r=r($C,` property of the config object (either
passed as an argument or loaded from `),Hve=n($C,"CODE",{});var fCt=s(Hve);H0r=r(fCt,"pretrained_model_name_or_path"),fCt.forEach(t),U0r=r($C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=n($C,"CODE",{});var mCt=s(Uve);J0r=r(mCt,"pretrained_model_name_or_path"),mCt.forEach(t),Y0r=r($C,":"),$C.forEach(t),K0r=i(ka),he=n(ka,"UL",{});var be=s(he);vE=n(be,"LI",{});var IRe=s(vE);Jve=n(IRe,"STRONG",{});var gCt=s(Jve);Z0r=r(gCt,"albert"),gCt.forEach(t),eyr=r(IRe," \u2014 "),EH=n(IRe,"A",{href:!0});var hCt=s(EH);oyr=r(hCt,"FlaxAlbertForPreTraining"),hCt.forEach(t),ryr=r(IRe," (ALBERT model)"),IRe.forEach(t),tyr=i(be),FE=n(be,"LI",{});var qRe=s(FE);Yve=n(qRe,"STRONG",{});var pCt=s(Yve);ayr=r(pCt,"bart"),pCt.forEach(t),nyr=r(qRe," \u2014 "),CH=n(qRe,"A",{href:!0});var _Ct=s(CH);syr=r(_Ct,"FlaxBartForConditionalGeneration"),_Ct.forEach(t),lyr=r(qRe," (BART model)"),qRe.forEach(t),iyr=i(be),TE=n(be,"LI",{});var NRe=s(TE);Kve=n(NRe,"STRONG",{});var uCt=s(Kve);dyr=r(uCt,"bert"),uCt.forEach(t),cyr=r(NRe," \u2014 "),wH=n(NRe,"A",{href:!0});var bCt=s(wH);fyr=r(bCt,"FlaxBertForPreTraining"),bCt.forEach(t),myr=r(NRe," (BERT model)"),NRe.forEach(t),gyr=i(be),ME=n(be,"LI",{});var jRe=s(ME);Zve=n(jRe,"STRONG",{});var vCt=s(Zve);hyr=r(vCt,"big_bird"),vCt.forEach(t),pyr=r(jRe," \u2014 "),AH=n(jRe,"A",{href:!0});var FCt=s(AH);_yr=r(FCt,"FlaxBigBirdForPreTraining"),FCt.forEach(t),uyr=r(jRe," (BigBird model)"),jRe.forEach(t),byr=i(be),EE=n(be,"LI",{});var DRe=s(EE);eFe=n(DRe,"STRONG",{});var TCt=s(eFe);vyr=r(TCt,"electra"),TCt.forEach(t),Fyr=r(DRe," \u2014 "),yH=n(DRe,"A",{href:!0});var MCt=s(yH);Tyr=r(MCt,"FlaxElectraForPreTraining"),MCt.forEach(t),Myr=r(DRe," (ELECTRA model)"),DRe.forEach(t),Eyr=i(be),CE=n(be,"LI",{});var GRe=s(CE);oFe=n(GRe,"STRONG",{});var ECt=s(oFe);Cyr=r(ECt,"mbart"),ECt.forEach(t),wyr=r(GRe," \u2014 "),LH=n(GRe,"A",{href:!0});var CCt=s(LH);Ayr=r(CCt,"FlaxMBartForConditionalGeneration"),CCt.forEach(t),yyr=r(GRe," (mBART model)"),GRe.forEach(t),Lyr=i(be),wE=n(be,"LI",{});var ORe=s(wE);rFe=n(ORe,"STRONG",{});var wCt=s(rFe);xyr=r(wCt,"mt5"),wCt.forEach(t),kyr=r(ORe," \u2014 "),xH=n(ORe,"A",{href:!0});var ACt=s(xH);Syr=r(ACt,"FlaxMT5ForConditionalGeneration"),ACt.forEach(t),Ryr=r(ORe," (mT5 model)"),ORe.forEach(t),Byr=i(be),AE=n(be,"LI",{});var VRe=s(AE);tFe=n(VRe,"STRONG",{});var yCt=s(tFe);Pyr=r(yCt,"roberta"),yCt.forEach(t),$yr=r(VRe," \u2014 "),kH=n(VRe,"A",{href:!0});var LCt=s(kH);Iyr=r(LCt,"FlaxRobertaForMaskedLM"),LCt.forEach(t),qyr=r(VRe," (RoBERTa model)"),VRe.forEach(t),Nyr=i(be),yE=n(be,"LI",{});var XRe=s(yE);aFe=n(XRe,"STRONG",{});var xCt=s(aFe);jyr=r(xCt,"roformer"),xCt.forEach(t),Dyr=r(XRe," \u2014 "),SH=n(XRe,"A",{href:!0});var kCt=s(SH);Gyr=r(kCt,"FlaxRoFormerForMaskedLM"),kCt.forEach(t),Oyr=r(XRe," (RoFormer model)"),XRe.forEach(t),Vyr=i(be),LE=n(be,"LI",{});var zRe=s(LE);nFe=n(zRe,"STRONG",{});var SCt=s(nFe);Xyr=r(SCt,"t5"),SCt.forEach(t),zyr=r(zRe," \u2014 "),RH=n(zRe,"A",{href:!0});var RCt=s(RH);Qyr=r(RCt,"FlaxT5ForConditionalGeneration"),RCt.forEach(t),Wyr=r(zRe," (T5 model)"),zRe.forEach(t),Hyr=i(be),xE=n(be,"LI",{});var QRe=s(xE);sFe=n(QRe,"STRONG",{});var BCt=s(sFe);Uyr=r(BCt,"wav2vec2"),BCt.forEach(t),Jyr=r(QRe," \u2014 "),BH=n(QRe,"A",{href:!0});var PCt=s(BH);Yyr=r(PCt,"FlaxWav2Vec2ForPreTraining"),PCt.forEach(t),Kyr=r(QRe," (Wav2Vec2 model)"),QRe.forEach(t),Zyr=i(be),kE=n(be,"LI",{});var WRe=s(kE);lFe=n(WRe,"STRONG",{});var $Ct=s(lFe);e8r=r($Ct,"xlm-roberta"),$Ct.forEach(t),o8r=r(WRe," \u2014 "),PH=n(WRe,"A",{href:!0});var ICt=s(PH);r8r=r(ICt,"FlaxXLMRobertaForMaskedLM"),ICt.forEach(t),t8r=r(WRe," (XLM-RoBERTa model)"),WRe.forEach(t),be.forEach(t),a8r=i(ka),iFe=n(ka,"P",{});var qCt=s(iFe);n8r=r(qCt,"Examples:"),qCt.forEach(t),s8r=i(ka),m(x8.$$.fragment,ka),ka.forEach(t),wi.forEach(t),I$e=i(c),_f=n(c,"H2",{class:!0});var Wqe=s(_f);SE=n(Wqe,"A",{id:!0,class:!0,href:!0});var NCt=s(SE);dFe=n(NCt,"SPAN",{});var jCt=s(dFe);m(k8.$$.fragment,jCt),jCt.forEach(t),NCt.forEach(t),l8r=i(Wqe),cFe=n(Wqe,"SPAN",{});var DCt=s(cFe);i8r=r(DCt,"FlaxAutoModelForMaskedLM"),DCt.forEach(t),Wqe.forEach(t),q$e=i(c),$r=n(c,"DIV",{class:!0});var yi=s($r);m(S8.$$.fragment,yi),d8r=i(yi),uf=n(yi,"P",{});var GY=s(uf);c8r=r(GY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$H=n(GY,"A",{href:!0});var GCt=s($H);f8r=r(GCt,"from_pretrained()"),GCt.forEach(t),m8r=r(GY," class method or the "),IH=n(GY,"A",{href:!0});var OCt=s(IH);g8r=r(OCt,"from_config()"),OCt.forEach(t),h8r=r(GY,` class
method.`),GY.forEach(t),p8r=i(yi),R8=n(yi,"P",{});var Hqe=s(R8);_8r=r(Hqe,"This class cannot be instantiated directly using "),fFe=n(Hqe,"CODE",{});var VCt=s(fFe);u8r=r(VCt,"__init__()"),VCt.forEach(t),b8r=r(Hqe," (throws an error)."),Hqe.forEach(t),v8r=i(yi),xt=n(yi,"DIV",{class:!0});var Li=s(xt);m(B8.$$.fragment,Li),F8r=i(Li),mFe=n(Li,"P",{});var XCt=s(mFe);T8r=r(XCt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),XCt.forEach(t),M8r=i(Li),bf=n(Li,"P",{});var OY=s(bf);E8r=r(OY,`Note:
Loading a model from its configuration file does `),gFe=n(OY,"STRONG",{});var zCt=s(gFe);C8r=r(zCt,"not"),zCt.forEach(t),w8r=r(OY,` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=n(OY,"A",{href:!0});var QCt=s(qH);A8r=r(QCt,"from_pretrained()"),QCt.forEach(t),y8r=r(OY," to load the model weights."),OY.forEach(t),L8r=i(Li),hFe=n(Li,"P",{});var WCt=s(hFe);x8r=r(WCt,"Examples:"),WCt.forEach(t),k8r=i(Li),m(P8.$$.fragment,Li),Li.forEach(t),S8r=i(yi),So=n(yi,"DIV",{class:!0});var Sa=s(So);m($8.$$.fragment,Sa),R8r=i(Sa),pFe=n(Sa,"P",{});var HCt=s(pFe);B8r=r(HCt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),HCt.forEach(t),P8r=i(Sa),Bn=n(Sa,"P",{});var IC=s(Bn);$8r=r(IC,"The model class to instantiate is selected based on the "),_Fe=n(IC,"CODE",{});var UCt=s(_Fe);I8r=r(UCt,"model_type"),UCt.forEach(t),q8r=r(IC,` property of the config object (either
passed as an argument or loaded from `),uFe=n(IC,"CODE",{});var JCt=s(uFe);N8r=r(JCt,"pretrained_model_name_or_path"),JCt.forEach(t),j8r=r(IC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=n(IC,"CODE",{});var YCt=s(bFe);D8r=r(YCt,"pretrained_model_name_or_path"),YCt.forEach(t),G8r=r(IC,":"),IC.forEach(t),O8r=i(Sa),Te=n(Sa,"UL",{});var Le=s(Te);RE=n(Le,"LI",{});var HRe=s(RE);vFe=n(HRe,"STRONG",{});var KCt=s(vFe);V8r=r(KCt,"albert"),KCt.forEach(t),X8r=r(HRe," \u2014 "),NH=n(HRe,"A",{href:!0});var ZCt=s(NH);z8r=r(ZCt,"FlaxAlbertForMaskedLM"),ZCt.forEach(t),Q8r=r(HRe," (ALBERT model)"),HRe.forEach(t),W8r=i(Le),BE=n(Le,"LI",{});var URe=s(BE);FFe=n(URe,"STRONG",{});var e6t=s(FFe);H8r=r(e6t,"bart"),e6t.forEach(t),U8r=r(URe," \u2014 "),jH=n(URe,"A",{href:!0});var o6t=s(jH);J8r=r(o6t,"FlaxBartForConditionalGeneration"),o6t.forEach(t),Y8r=r(URe," (BART model)"),URe.forEach(t),K8r=i(Le),PE=n(Le,"LI",{});var JRe=s(PE);TFe=n(JRe,"STRONG",{});var r6t=s(TFe);Z8r=r(r6t,"bert"),r6t.forEach(t),eLr=r(JRe," \u2014 "),DH=n(JRe,"A",{href:!0});var t6t=s(DH);oLr=r(t6t,"FlaxBertForMaskedLM"),t6t.forEach(t),rLr=r(JRe," (BERT model)"),JRe.forEach(t),tLr=i(Le),$E=n(Le,"LI",{});var YRe=s($E);MFe=n(YRe,"STRONG",{});var a6t=s(MFe);aLr=r(a6t,"big_bird"),a6t.forEach(t),nLr=r(YRe," \u2014 "),GH=n(YRe,"A",{href:!0});var n6t=s(GH);sLr=r(n6t,"FlaxBigBirdForMaskedLM"),n6t.forEach(t),lLr=r(YRe," (BigBird model)"),YRe.forEach(t),iLr=i(Le),IE=n(Le,"LI",{});var KRe=s(IE);EFe=n(KRe,"STRONG",{});var s6t=s(EFe);dLr=r(s6t,"distilbert"),s6t.forEach(t),cLr=r(KRe," \u2014 "),OH=n(KRe,"A",{href:!0});var l6t=s(OH);fLr=r(l6t,"FlaxDistilBertForMaskedLM"),l6t.forEach(t),mLr=r(KRe," (DistilBERT model)"),KRe.forEach(t),gLr=i(Le),qE=n(Le,"LI",{});var ZRe=s(qE);CFe=n(ZRe,"STRONG",{});var i6t=s(CFe);hLr=r(i6t,"electra"),i6t.forEach(t),pLr=r(ZRe," \u2014 "),VH=n(ZRe,"A",{href:!0});var d6t=s(VH);_Lr=r(d6t,"FlaxElectraForMaskedLM"),d6t.forEach(t),uLr=r(ZRe," (ELECTRA model)"),ZRe.forEach(t),bLr=i(Le),NE=n(Le,"LI",{});var eBe=s(NE);wFe=n(eBe,"STRONG",{});var c6t=s(wFe);vLr=r(c6t,"mbart"),c6t.forEach(t),FLr=r(eBe," \u2014 "),XH=n(eBe,"A",{href:!0});var f6t=s(XH);TLr=r(f6t,"FlaxMBartForConditionalGeneration"),f6t.forEach(t),MLr=r(eBe," (mBART model)"),eBe.forEach(t),ELr=i(Le),jE=n(Le,"LI",{});var oBe=s(jE);AFe=n(oBe,"STRONG",{});var m6t=s(AFe);CLr=r(m6t,"roberta"),m6t.forEach(t),wLr=r(oBe," \u2014 "),zH=n(oBe,"A",{href:!0});var g6t=s(zH);ALr=r(g6t,"FlaxRobertaForMaskedLM"),g6t.forEach(t),yLr=r(oBe," (RoBERTa model)"),oBe.forEach(t),LLr=i(Le),DE=n(Le,"LI",{});var rBe=s(DE);yFe=n(rBe,"STRONG",{});var h6t=s(yFe);xLr=r(h6t,"roformer"),h6t.forEach(t),kLr=r(rBe," \u2014 "),QH=n(rBe,"A",{href:!0});var p6t=s(QH);SLr=r(p6t,"FlaxRoFormerForMaskedLM"),p6t.forEach(t),RLr=r(rBe," (RoFormer model)"),rBe.forEach(t),BLr=i(Le),GE=n(Le,"LI",{});var tBe=s(GE);LFe=n(tBe,"STRONG",{});var _6t=s(LFe);PLr=r(_6t,"xlm-roberta"),_6t.forEach(t),$Lr=r(tBe," \u2014 "),WH=n(tBe,"A",{href:!0});var u6t=s(WH);ILr=r(u6t,"FlaxXLMRobertaForMaskedLM"),u6t.forEach(t),qLr=r(tBe," (XLM-RoBERTa model)"),tBe.forEach(t),Le.forEach(t),NLr=i(Sa),xFe=n(Sa,"P",{});var b6t=s(xFe);jLr=r(b6t,"Examples:"),b6t.forEach(t),DLr=i(Sa),m(I8.$$.fragment,Sa),Sa.forEach(t),yi.forEach(t),N$e=i(c),vf=n(c,"H2",{class:!0});var Uqe=s(vf);OE=n(Uqe,"A",{id:!0,class:!0,href:!0});var v6t=s(OE);kFe=n(v6t,"SPAN",{});var F6t=s(kFe);m(q8.$$.fragment,F6t),F6t.forEach(t),v6t.forEach(t),GLr=i(Uqe),SFe=n(Uqe,"SPAN",{});var T6t=s(SFe);OLr=r(T6t,"FlaxAutoModelForSeq2SeqLM"),T6t.forEach(t),Uqe.forEach(t),j$e=i(c),Ir=n(c,"DIV",{class:!0});var xi=s(Ir);m(N8.$$.fragment,xi),VLr=i(xi),Ff=n(xi,"P",{});var VY=s(Ff);XLr=r(VY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HH=n(VY,"A",{href:!0});var M6t=s(HH);zLr=r(M6t,"from_pretrained()"),M6t.forEach(t),QLr=r(VY," class method or the "),UH=n(VY,"A",{href:!0});var E6t=s(UH);WLr=r(E6t,"from_config()"),E6t.forEach(t),HLr=r(VY,` class
method.`),VY.forEach(t),ULr=i(xi),j8=n(xi,"P",{});var Jqe=s(j8);JLr=r(Jqe,"This class cannot be instantiated directly using "),RFe=n(Jqe,"CODE",{});var C6t=s(RFe);YLr=r(C6t,"__init__()"),C6t.forEach(t),KLr=r(Jqe," (throws an error)."),Jqe.forEach(t),ZLr=i(xi),kt=n(xi,"DIV",{class:!0});var ki=s(kt);m(D8.$$.fragment,ki),e9r=i(ki),BFe=n(ki,"P",{});var w6t=s(BFe);o9r=r(w6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),w6t.forEach(t),r9r=i(ki),Tf=n(ki,"P",{});var XY=s(Tf);t9r=r(XY,`Note:
Loading a model from its configuration file does `),PFe=n(XY,"STRONG",{});var A6t=s(PFe);a9r=r(A6t,"not"),A6t.forEach(t),n9r=r(XY,` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=n(XY,"A",{href:!0});var y6t=s(JH);s9r=r(y6t,"from_pretrained()"),y6t.forEach(t),l9r=r(XY," to load the model weights."),XY.forEach(t),i9r=i(ki),$Fe=n(ki,"P",{});var L6t=s($Fe);d9r=r(L6t,"Examples:"),L6t.forEach(t),c9r=i(ki),m(G8.$$.fragment,ki),ki.forEach(t),f9r=i(xi),Ro=n(xi,"DIV",{class:!0});var Ra=s(Ro);m(O8.$$.fragment,Ra),m9r=i(Ra),IFe=n(Ra,"P",{});var x6t=s(IFe);g9r=r(x6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),x6t.forEach(t),h9r=i(Ra),Pn=n(Ra,"P",{});var qC=s(Pn);p9r=r(qC,"The model class to instantiate is selected based on the "),qFe=n(qC,"CODE",{});var k6t=s(qFe);_9r=r(k6t,"model_type"),k6t.forEach(t),u9r=r(qC,` property of the config object (either
passed as an argument or loaded from `),NFe=n(qC,"CODE",{});var S6t=s(NFe);b9r=r(S6t,"pretrained_model_name_or_path"),S6t.forEach(t),v9r=r(qC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jFe=n(qC,"CODE",{});var R6t=s(jFe);F9r=r(R6t,"pretrained_model_name_or_path"),R6t.forEach(t),T9r=r(qC,":"),qC.forEach(t),M9r=i(Ra),we=n(Ra,"UL",{});var lo=s(we);VE=n(lo,"LI",{});var aBe=s(VE);DFe=n(aBe,"STRONG",{});var B6t=s(DFe);E9r=r(B6t,"bart"),B6t.forEach(t),C9r=r(aBe," \u2014 "),YH=n(aBe,"A",{href:!0});var P6t=s(YH);w9r=r(P6t,"FlaxBartForConditionalGeneration"),P6t.forEach(t),A9r=r(aBe," (BART model)"),aBe.forEach(t),y9r=i(lo),XE=n(lo,"LI",{});var nBe=s(XE);GFe=n(nBe,"STRONG",{});var $6t=s(GFe);L9r=r($6t,"blenderbot"),$6t.forEach(t),x9r=r(nBe," \u2014 "),KH=n(nBe,"A",{href:!0});var I6t=s(KH);k9r=r(I6t,"FlaxBlenderbotForConditionalGeneration"),I6t.forEach(t),S9r=r(nBe," (Blenderbot model)"),nBe.forEach(t),R9r=i(lo),zE=n(lo,"LI",{});var sBe=s(zE);OFe=n(sBe,"STRONG",{});var q6t=s(OFe);B9r=r(q6t,"blenderbot-small"),q6t.forEach(t),P9r=r(sBe," \u2014 "),ZH=n(sBe,"A",{href:!0});var N6t=s(ZH);$9r=r(N6t,"FlaxBlenderbotSmallForConditionalGeneration"),N6t.forEach(t),I9r=r(sBe," (BlenderbotSmall model)"),sBe.forEach(t),q9r=i(lo),QE=n(lo,"LI",{});var lBe=s(QE);VFe=n(lBe,"STRONG",{});var j6t=s(VFe);N9r=r(j6t,"encoder-decoder"),j6t.forEach(t),j9r=r(lBe," \u2014 "),eU=n(lBe,"A",{href:!0});var D6t=s(eU);D9r=r(D6t,"FlaxEncoderDecoderModel"),D6t.forEach(t),G9r=r(lBe," (Encoder decoder model)"),lBe.forEach(t),O9r=i(lo),WE=n(lo,"LI",{});var iBe=s(WE);XFe=n(iBe,"STRONG",{});var G6t=s(XFe);V9r=r(G6t,"marian"),G6t.forEach(t),X9r=r(iBe," \u2014 "),oU=n(iBe,"A",{href:!0});var O6t=s(oU);z9r=r(O6t,"FlaxMarianMTModel"),O6t.forEach(t),Q9r=r(iBe," (Marian model)"),iBe.forEach(t),W9r=i(lo),HE=n(lo,"LI",{});var dBe=s(HE);zFe=n(dBe,"STRONG",{});var V6t=s(zFe);H9r=r(V6t,"mbart"),V6t.forEach(t),U9r=r(dBe," \u2014 "),rU=n(dBe,"A",{href:!0});var X6t=s(rU);J9r=r(X6t,"FlaxMBartForConditionalGeneration"),X6t.forEach(t),Y9r=r(dBe," (mBART model)"),dBe.forEach(t),K9r=i(lo),UE=n(lo,"LI",{});var cBe=s(UE);QFe=n(cBe,"STRONG",{});var z6t=s(QFe);Z9r=r(z6t,"mt5"),z6t.forEach(t),exr=r(cBe," \u2014 "),tU=n(cBe,"A",{href:!0});var Q6t=s(tU);oxr=r(Q6t,"FlaxMT5ForConditionalGeneration"),Q6t.forEach(t),rxr=r(cBe," (mT5 model)"),cBe.forEach(t),txr=i(lo),JE=n(lo,"LI",{});var fBe=s(JE);WFe=n(fBe,"STRONG",{});var W6t=s(WFe);axr=r(W6t,"pegasus"),W6t.forEach(t),nxr=r(fBe," \u2014 "),aU=n(fBe,"A",{href:!0});var H6t=s(aU);sxr=r(H6t,"FlaxPegasusForConditionalGeneration"),H6t.forEach(t),lxr=r(fBe," (Pegasus model)"),fBe.forEach(t),ixr=i(lo),YE=n(lo,"LI",{});var mBe=s(YE);HFe=n(mBe,"STRONG",{});var U6t=s(HFe);dxr=r(U6t,"t5"),U6t.forEach(t),cxr=r(mBe," \u2014 "),nU=n(mBe,"A",{href:!0});var J6t=s(nU);fxr=r(J6t,"FlaxT5ForConditionalGeneration"),J6t.forEach(t),mxr=r(mBe," (T5 model)"),mBe.forEach(t),lo.forEach(t),gxr=i(Ra),UFe=n(Ra,"P",{});var Y6t=s(UFe);hxr=r(Y6t,"Examples:"),Y6t.forEach(t),pxr=i(Ra),m(V8.$$.fragment,Ra),Ra.forEach(t),xi.forEach(t),D$e=i(c),Mf=n(c,"H2",{class:!0});var Yqe=s(Mf);KE=n(Yqe,"A",{id:!0,class:!0,href:!0});var K6t=s(KE);JFe=n(K6t,"SPAN",{});var Z6t=s(JFe);m(X8.$$.fragment,Z6t),Z6t.forEach(t),K6t.forEach(t),_xr=i(Yqe),YFe=n(Yqe,"SPAN",{});var ewt=s(YFe);uxr=r(ewt,"FlaxAutoModelForSequenceClassification"),ewt.forEach(t),Yqe.forEach(t),G$e=i(c),qr=n(c,"DIV",{class:!0});var Si=s(qr);m(z8.$$.fragment,Si),bxr=i(Si),Ef=n(Si,"P",{});var zY=s(Ef);vxr=r(zY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sU=n(zY,"A",{href:!0});var owt=s(sU);Fxr=r(owt,"from_pretrained()"),owt.forEach(t),Txr=r(zY," class method or the "),lU=n(zY,"A",{href:!0});var rwt=s(lU);Mxr=r(rwt,"from_config()"),rwt.forEach(t),Exr=r(zY,` class
method.`),zY.forEach(t),Cxr=i(Si),Q8=n(Si,"P",{});var Kqe=s(Q8);wxr=r(Kqe,"This class cannot be instantiated directly using "),KFe=n(Kqe,"CODE",{});var twt=s(KFe);Axr=r(twt,"__init__()"),twt.forEach(t),yxr=r(Kqe," (throws an error)."),Kqe.forEach(t),Lxr=i(Si),St=n(Si,"DIV",{class:!0});var Ri=s(St);m(W8.$$.fragment,Ri),xxr=i(Ri),ZFe=n(Ri,"P",{});var awt=s(ZFe);kxr=r(awt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),awt.forEach(t),Sxr=i(Ri),Cf=n(Ri,"P",{});var QY=s(Cf);Rxr=r(QY,`Note:
Loading a model from its configuration file does `),eTe=n(QY,"STRONG",{});var nwt=s(eTe);Bxr=r(nwt,"not"),nwt.forEach(t),Pxr=r(QY,` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=n(QY,"A",{href:!0});var swt=s(iU);$xr=r(swt,"from_pretrained()"),swt.forEach(t),Ixr=r(QY," to load the model weights."),QY.forEach(t),qxr=i(Ri),oTe=n(Ri,"P",{});var lwt=s(oTe);Nxr=r(lwt,"Examples:"),lwt.forEach(t),jxr=i(Ri),m(H8.$$.fragment,Ri),Ri.forEach(t),Dxr=i(Si),Bo=n(Si,"DIV",{class:!0});var Ba=s(Bo);m(U8.$$.fragment,Ba),Gxr=i(Ba),rTe=n(Ba,"P",{});var iwt=s(rTe);Oxr=r(iwt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),iwt.forEach(t),Vxr=i(Ba),$n=n(Ba,"P",{});var NC=s($n);Xxr=r(NC,"The model class to instantiate is selected based on the "),tTe=n(NC,"CODE",{});var dwt=s(tTe);zxr=r(dwt,"model_type"),dwt.forEach(t),Qxr=r(NC,` property of the config object (either
passed as an argument or loaded from `),aTe=n(NC,"CODE",{});var cwt=s(aTe);Wxr=r(cwt,"pretrained_model_name_or_path"),cwt.forEach(t),Hxr=r(NC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=n(NC,"CODE",{});var fwt=s(nTe);Uxr=r(fwt,"pretrained_model_name_or_path"),fwt.forEach(t),Jxr=r(NC,":"),NC.forEach(t),Yxr=i(Ba),Me=n(Ba,"UL",{});var xe=s(Me);ZE=n(xe,"LI",{});var gBe=s(ZE);sTe=n(gBe,"STRONG",{});var mwt=s(sTe);Kxr=r(mwt,"albert"),mwt.forEach(t),Zxr=r(gBe," \u2014 "),dU=n(gBe,"A",{href:!0});var gwt=s(dU);ekr=r(gwt,"FlaxAlbertForSequenceClassification"),gwt.forEach(t),okr=r(gBe," (ALBERT model)"),gBe.forEach(t),rkr=i(xe),e3=n(xe,"LI",{});var hBe=s(e3);lTe=n(hBe,"STRONG",{});var hwt=s(lTe);tkr=r(hwt,"bart"),hwt.forEach(t),akr=r(hBe," \u2014 "),cU=n(hBe,"A",{href:!0});var pwt=s(cU);nkr=r(pwt,"FlaxBartForSequenceClassification"),pwt.forEach(t),skr=r(hBe," (BART model)"),hBe.forEach(t),lkr=i(xe),o3=n(xe,"LI",{});var pBe=s(o3);iTe=n(pBe,"STRONG",{});var _wt=s(iTe);ikr=r(_wt,"bert"),_wt.forEach(t),dkr=r(pBe," \u2014 "),fU=n(pBe,"A",{href:!0});var uwt=s(fU);ckr=r(uwt,"FlaxBertForSequenceClassification"),uwt.forEach(t),fkr=r(pBe," (BERT model)"),pBe.forEach(t),mkr=i(xe),r3=n(xe,"LI",{});var _Be=s(r3);dTe=n(_Be,"STRONG",{});var bwt=s(dTe);gkr=r(bwt,"big_bird"),bwt.forEach(t),hkr=r(_Be," \u2014 "),mU=n(_Be,"A",{href:!0});var vwt=s(mU);pkr=r(vwt,"FlaxBigBirdForSequenceClassification"),vwt.forEach(t),_kr=r(_Be," (BigBird model)"),_Be.forEach(t),ukr=i(xe),t3=n(xe,"LI",{});var uBe=s(t3);cTe=n(uBe,"STRONG",{});var Fwt=s(cTe);bkr=r(Fwt,"distilbert"),Fwt.forEach(t),vkr=r(uBe," \u2014 "),gU=n(uBe,"A",{href:!0});var Twt=s(gU);Fkr=r(Twt,"FlaxDistilBertForSequenceClassification"),Twt.forEach(t),Tkr=r(uBe," (DistilBERT model)"),uBe.forEach(t),Mkr=i(xe),a3=n(xe,"LI",{});var bBe=s(a3);fTe=n(bBe,"STRONG",{});var Mwt=s(fTe);Ekr=r(Mwt,"electra"),Mwt.forEach(t),Ckr=r(bBe," \u2014 "),hU=n(bBe,"A",{href:!0});var Ewt=s(hU);wkr=r(Ewt,"FlaxElectraForSequenceClassification"),Ewt.forEach(t),Akr=r(bBe," (ELECTRA model)"),bBe.forEach(t),ykr=i(xe),n3=n(xe,"LI",{});var vBe=s(n3);mTe=n(vBe,"STRONG",{});var Cwt=s(mTe);Lkr=r(Cwt,"mbart"),Cwt.forEach(t),xkr=r(vBe," \u2014 "),pU=n(vBe,"A",{href:!0});var wwt=s(pU);kkr=r(wwt,"FlaxMBartForSequenceClassification"),wwt.forEach(t),Skr=r(vBe," (mBART model)"),vBe.forEach(t),Rkr=i(xe),s3=n(xe,"LI",{});var FBe=s(s3);gTe=n(FBe,"STRONG",{});var Awt=s(gTe);Bkr=r(Awt,"roberta"),Awt.forEach(t),Pkr=r(FBe," \u2014 "),_U=n(FBe,"A",{href:!0});var ywt=s(_U);$kr=r(ywt,"FlaxRobertaForSequenceClassification"),ywt.forEach(t),Ikr=r(FBe," (RoBERTa model)"),FBe.forEach(t),qkr=i(xe),l3=n(xe,"LI",{});var TBe=s(l3);hTe=n(TBe,"STRONG",{});var Lwt=s(hTe);Nkr=r(Lwt,"roformer"),Lwt.forEach(t),jkr=r(TBe," \u2014 "),uU=n(TBe,"A",{href:!0});var xwt=s(uU);Dkr=r(xwt,"FlaxRoFormerForSequenceClassification"),xwt.forEach(t),Gkr=r(TBe," (RoFormer model)"),TBe.forEach(t),Okr=i(xe),i3=n(xe,"LI",{});var MBe=s(i3);pTe=n(MBe,"STRONG",{});var kwt=s(pTe);Vkr=r(kwt,"xlm-roberta"),kwt.forEach(t),Xkr=r(MBe," \u2014 "),bU=n(MBe,"A",{href:!0});var Swt=s(bU);zkr=r(Swt,"FlaxXLMRobertaForSequenceClassification"),Swt.forEach(t),Qkr=r(MBe," (XLM-RoBERTa model)"),MBe.forEach(t),xe.forEach(t),Wkr=i(Ba),_Te=n(Ba,"P",{});var Rwt=s(_Te);Hkr=r(Rwt,"Examples:"),Rwt.forEach(t),Ukr=i(Ba),m(J8.$$.fragment,Ba),Ba.forEach(t),Si.forEach(t),O$e=i(c),wf=n(c,"H2",{class:!0});var Zqe=s(wf);d3=n(Zqe,"A",{id:!0,class:!0,href:!0});var Bwt=s(d3);uTe=n(Bwt,"SPAN",{});var Pwt=s(uTe);m(Y8.$$.fragment,Pwt),Pwt.forEach(t),Bwt.forEach(t),Jkr=i(Zqe),bTe=n(Zqe,"SPAN",{});var $wt=s(bTe);Ykr=r($wt,"FlaxAutoModelForQuestionAnswering"),$wt.forEach(t),Zqe.forEach(t),V$e=i(c),Nr=n(c,"DIV",{class:!0});var Bi=s(Nr);m(K8.$$.fragment,Bi),Kkr=i(Bi),Af=n(Bi,"P",{});var WY=s(Af);Zkr=r(WY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vU=n(WY,"A",{href:!0});var Iwt=s(vU);eSr=r(Iwt,"from_pretrained()"),Iwt.forEach(t),oSr=r(WY," class method or the "),FU=n(WY,"A",{href:!0});var qwt=s(FU);rSr=r(qwt,"from_config()"),qwt.forEach(t),tSr=r(WY,` class
method.`),WY.forEach(t),aSr=i(Bi),Z8=n(Bi,"P",{});var eNe=s(Z8);nSr=r(eNe,"This class cannot be instantiated directly using "),vTe=n(eNe,"CODE",{});var Nwt=s(vTe);sSr=r(Nwt,"__init__()"),Nwt.forEach(t),lSr=r(eNe," (throws an error)."),eNe.forEach(t),iSr=i(Bi),Rt=n(Bi,"DIV",{class:!0});var Pi=s(Rt);m(eL.$$.fragment,Pi),dSr=i(Pi),FTe=n(Pi,"P",{});var jwt=s(FTe);cSr=r(jwt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jwt.forEach(t),fSr=i(Pi),yf=n(Pi,"P",{});var HY=s(yf);mSr=r(HY,`Note:
Loading a model from its configuration file does `),TTe=n(HY,"STRONG",{});var Dwt=s(TTe);gSr=r(Dwt,"not"),Dwt.forEach(t),hSr=r(HY,` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=n(HY,"A",{href:!0});var Gwt=s(TU);pSr=r(Gwt,"from_pretrained()"),Gwt.forEach(t),_Sr=r(HY," to load the model weights."),HY.forEach(t),uSr=i(Pi),MTe=n(Pi,"P",{});var Owt=s(MTe);bSr=r(Owt,"Examples:"),Owt.forEach(t),vSr=i(Pi),m(oL.$$.fragment,Pi),Pi.forEach(t),FSr=i(Bi),Po=n(Bi,"DIV",{class:!0});var Pa=s(Po);m(rL.$$.fragment,Pa),TSr=i(Pa),ETe=n(Pa,"P",{});var Vwt=s(ETe);MSr=r(Vwt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Vwt.forEach(t),ESr=i(Pa),In=n(Pa,"P",{});var jC=s(In);CSr=r(jC,"The model class to instantiate is selected based on the "),CTe=n(jC,"CODE",{});var Xwt=s(CTe);wSr=r(Xwt,"model_type"),Xwt.forEach(t),ASr=r(jC,` property of the config object (either
passed as an argument or loaded from `),wTe=n(jC,"CODE",{});var zwt=s(wTe);ySr=r(zwt,"pretrained_model_name_or_path"),zwt.forEach(t),LSr=r(jC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ATe=n(jC,"CODE",{});var Qwt=s(ATe);xSr=r(Qwt,"pretrained_model_name_or_path"),Qwt.forEach(t),kSr=r(jC,":"),jC.forEach(t),SSr=i(Pa),Ee=n(Pa,"UL",{});var ke=s(Ee);c3=n(ke,"LI",{});var EBe=s(c3);yTe=n(EBe,"STRONG",{});var Wwt=s(yTe);RSr=r(Wwt,"albert"),Wwt.forEach(t),BSr=r(EBe," \u2014 "),MU=n(EBe,"A",{href:!0});var Hwt=s(MU);PSr=r(Hwt,"FlaxAlbertForQuestionAnswering"),Hwt.forEach(t),$Sr=r(EBe," (ALBERT model)"),EBe.forEach(t),ISr=i(ke),f3=n(ke,"LI",{});var CBe=s(f3);LTe=n(CBe,"STRONG",{});var Uwt=s(LTe);qSr=r(Uwt,"bart"),Uwt.forEach(t),NSr=r(CBe," \u2014 "),EU=n(CBe,"A",{href:!0});var Jwt=s(EU);jSr=r(Jwt,"FlaxBartForQuestionAnswering"),Jwt.forEach(t),DSr=r(CBe," (BART model)"),CBe.forEach(t),GSr=i(ke),m3=n(ke,"LI",{});var wBe=s(m3);xTe=n(wBe,"STRONG",{});var Ywt=s(xTe);OSr=r(Ywt,"bert"),Ywt.forEach(t),VSr=r(wBe," \u2014 "),CU=n(wBe,"A",{href:!0});var Kwt=s(CU);XSr=r(Kwt,"FlaxBertForQuestionAnswering"),Kwt.forEach(t),zSr=r(wBe," (BERT model)"),wBe.forEach(t),QSr=i(ke),g3=n(ke,"LI",{});var ABe=s(g3);kTe=n(ABe,"STRONG",{});var Zwt=s(kTe);WSr=r(Zwt,"big_bird"),Zwt.forEach(t),HSr=r(ABe," \u2014 "),wU=n(ABe,"A",{href:!0});var eAt=s(wU);USr=r(eAt,"FlaxBigBirdForQuestionAnswering"),eAt.forEach(t),JSr=r(ABe," (BigBird model)"),ABe.forEach(t),YSr=i(ke),h3=n(ke,"LI",{});var yBe=s(h3);STe=n(yBe,"STRONG",{});var oAt=s(STe);KSr=r(oAt,"distilbert"),oAt.forEach(t),ZSr=r(yBe," \u2014 "),AU=n(yBe,"A",{href:!0});var rAt=s(AU);eRr=r(rAt,"FlaxDistilBertForQuestionAnswering"),rAt.forEach(t),oRr=r(yBe," (DistilBERT model)"),yBe.forEach(t),rRr=i(ke),p3=n(ke,"LI",{});var LBe=s(p3);RTe=n(LBe,"STRONG",{});var tAt=s(RTe);tRr=r(tAt,"electra"),tAt.forEach(t),aRr=r(LBe," \u2014 "),yU=n(LBe,"A",{href:!0});var aAt=s(yU);nRr=r(aAt,"FlaxElectraForQuestionAnswering"),aAt.forEach(t),sRr=r(LBe," (ELECTRA model)"),LBe.forEach(t),lRr=i(ke),_3=n(ke,"LI",{});var xBe=s(_3);BTe=n(xBe,"STRONG",{});var nAt=s(BTe);iRr=r(nAt,"mbart"),nAt.forEach(t),dRr=r(xBe," \u2014 "),LU=n(xBe,"A",{href:!0});var sAt=s(LU);cRr=r(sAt,"FlaxMBartForQuestionAnswering"),sAt.forEach(t),fRr=r(xBe," (mBART model)"),xBe.forEach(t),mRr=i(ke),u3=n(ke,"LI",{});var kBe=s(u3);PTe=n(kBe,"STRONG",{});var lAt=s(PTe);gRr=r(lAt,"roberta"),lAt.forEach(t),hRr=r(kBe," \u2014 "),xU=n(kBe,"A",{href:!0});var iAt=s(xU);pRr=r(iAt,"FlaxRobertaForQuestionAnswering"),iAt.forEach(t),_Rr=r(kBe," (RoBERTa model)"),kBe.forEach(t),uRr=i(ke),b3=n(ke,"LI",{});var SBe=s(b3);$Te=n(SBe,"STRONG",{});var dAt=s($Te);bRr=r(dAt,"roformer"),dAt.forEach(t),vRr=r(SBe," \u2014 "),kU=n(SBe,"A",{href:!0});var cAt=s(kU);FRr=r(cAt,"FlaxRoFormerForQuestionAnswering"),cAt.forEach(t),TRr=r(SBe," (RoFormer model)"),SBe.forEach(t),MRr=i(ke),v3=n(ke,"LI",{});var RBe=s(v3);ITe=n(RBe,"STRONG",{});var fAt=s(ITe);ERr=r(fAt,"xlm-roberta"),fAt.forEach(t),CRr=r(RBe," \u2014 "),SU=n(RBe,"A",{href:!0});var mAt=s(SU);wRr=r(mAt,"FlaxXLMRobertaForQuestionAnswering"),mAt.forEach(t),ARr=r(RBe," (XLM-RoBERTa model)"),RBe.forEach(t),ke.forEach(t),yRr=i(Pa),qTe=n(Pa,"P",{});var gAt=s(qTe);LRr=r(gAt,"Examples:"),gAt.forEach(t),xRr=i(Pa),m(tL.$$.fragment,Pa),Pa.forEach(t),Bi.forEach(t),X$e=i(c),Lf=n(c,"H2",{class:!0});var oNe=s(Lf);F3=n(oNe,"A",{id:!0,class:!0,href:!0});var hAt=s(F3);NTe=n(hAt,"SPAN",{});var pAt=s(NTe);m(aL.$$.fragment,pAt),pAt.forEach(t),hAt.forEach(t),kRr=i(oNe),jTe=n(oNe,"SPAN",{});var _At=s(jTe);SRr=r(_At,"FlaxAutoModelForTokenClassification"),_At.forEach(t),oNe.forEach(t),z$e=i(c),jr=n(c,"DIV",{class:!0});var $i=s(jr);m(nL.$$.fragment,$i),RRr=i($i),xf=n($i,"P",{});var UY=s(xf);BRr=r(UY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),RU=n(UY,"A",{href:!0});var uAt=s(RU);PRr=r(uAt,"from_pretrained()"),uAt.forEach(t),$Rr=r(UY," class method or the "),BU=n(UY,"A",{href:!0});var bAt=s(BU);IRr=r(bAt,"from_config()"),bAt.forEach(t),qRr=r(UY,` class
method.`),UY.forEach(t),NRr=i($i),sL=n($i,"P",{});var rNe=s(sL);jRr=r(rNe,"This class cannot be instantiated directly using "),DTe=n(rNe,"CODE",{});var vAt=s(DTe);DRr=r(vAt,"__init__()"),vAt.forEach(t),GRr=r(rNe," (throws an error)."),rNe.forEach(t),ORr=i($i),Bt=n($i,"DIV",{class:!0});var Ii=s(Bt);m(lL.$$.fragment,Ii),VRr=i(Ii),GTe=n(Ii,"P",{});var FAt=s(GTe);XRr=r(FAt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),FAt.forEach(t),zRr=i(Ii),kf=n(Ii,"P",{});var JY=s(kf);QRr=r(JY,`Note:
Loading a model from its configuration file does `),OTe=n(JY,"STRONG",{});var TAt=s(OTe);WRr=r(TAt,"not"),TAt.forEach(t),HRr=r(JY,` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=n(JY,"A",{href:!0});var MAt=s(PU);URr=r(MAt,"from_pretrained()"),MAt.forEach(t),JRr=r(JY," to load the model weights."),JY.forEach(t),YRr=i(Ii),VTe=n(Ii,"P",{});var EAt=s(VTe);KRr=r(EAt,"Examples:"),EAt.forEach(t),ZRr=i(Ii),m(iL.$$.fragment,Ii),Ii.forEach(t),eBr=i($i),$o=n($i,"DIV",{class:!0});var $a=s($o);m(dL.$$.fragment,$a),oBr=i($a),XTe=n($a,"P",{});var CAt=s(XTe);rBr=r(CAt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),CAt.forEach(t),tBr=i($a),qn=n($a,"P",{});var DC=s(qn);aBr=r(DC,"The model class to instantiate is selected based on the "),zTe=n(DC,"CODE",{});var wAt=s(zTe);nBr=r(wAt,"model_type"),wAt.forEach(t),sBr=r(DC,` property of the config object (either
passed as an argument or loaded from `),QTe=n(DC,"CODE",{});var AAt=s(QTe);lBr=r(AAt,"pretrained_model_name_or_path"),AAt.forEach(t),iBr=r(DC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=n(DC,"CODE",{});var yAt=s(WTe);dBr=r(yAt,"pretrained_model_name_or_path"),yAt.forEach(t),cBr=r(DC,":"),DC.forEach(t),fBr=i($a),Pe=n($a,"UL",{});var Oo=s(Pe);T3=n(Oo,"LI",{});var BBe=s(T3);HTe=n(BBe,"STRONG",{});var LAt=s(HTe);mBr=r(LAt,"albert"),LAt.forEach(t),gBr=r(BBe," \u2014 "),$U=n(BBe,"A",{href:!0});var xAt=s($U);hBr=r(xAt,"FlaxAlbertForTokenClassification"),xAt.forEach(t),pBr=r(BBe," (ALBERT model)"),BBe.forEach(t),_Br=i(Oo),M3=n(Oo,"LI",{});var PBe=s(M3);UTe=n(PBe,"STRONG",{});var kAt=s(UTe);uBr=r(kAt,"bert"),kAt.forEach(t),bBr=r(PBe," \u2014 "),IU=n(PBe,"A",{href:!0});var SAt=s(IU);vBr=r(SAt,"FlaxBertForTokenClassification"),SAt.forEach(t),FBr=r(PBe," (BERT model)"),PBe.forEach(t),TBr=i(Oo),E3=n(Oo,"LI",{});var $Be=s(E3);JTe=n($Be,"STRONG",{});var RAt=s(JTe);MBr=r(RAt,"big_bird"),RAt.forEach(t),EBr=r($Be," \u2014 "),qU=n($Be,"A",{href:!0});var BAt=s(qU);CBr=r(BAt,"FlaxBigBirdForTokenClassification"),BAt.forEach(t),wBr=r($Be," (BigBird model)"),$Be.forEach(t),ABr=i(Oo),C3=n(Oo,"LI",{});var IBe=s(C3);YTe=n(IBe,"STRONG",{});var PAt=s(YTe);yBr=r(PAt,"distilbert"),PAt.forEach(t),LBr=r(IBe," \u2014 "),NU=n(IBe,"A",{href:!0});var $At=s(NU);xBr=r($At,"FlaxDistilBertForTokenClassification"),$At.forEach(t),kBr=r(IBe," (DistilBERT model)"),IBe.forEach(t),SBr=i(Oo),w3=n(Oo,"LI",{});var qBe=s(w3);KTe=n(qBe,"STRONG",{});var IAt=s(KTe);RBr=r(IAt,"electra"),IAt.forEach(t),BBr=r(qBe," \u2014 "),jU=n(qBe,"A",{href:!0});var qAt=s(jU);PBr=r(qAt,"FlaxElectraForTokenClassification"),qAt.forEach(t),$Br=r(qBe," (ELECTRA model)"),qBe.forEach(t),IBr=i(Oo),A3=n(Oo,"LI",{});var NBe=s(A3);ZTe=n(NBe,"STRONG",{});var NAt=s(ZTe);qBr=r(NAt,"roberta"),NAt.forEach(t),NBr=r(NBe," \u2014 "),DU=n(NBe,"A",{href:!0});var jAt=s(DU);jBr=r(jAt,"FlaxRobertaForTokenClassification"),jAt.forEach(t),DBr=r(NBe," (RoBERTa model)"),NBe.forEach(t),GBr=i(Oo),y3=n(Oo,"LI",{});var jBe=s(y3);e7e=n(jBe,"STRONG",{});var DAt=s(e7e);OBr=r(DAt,"roformer"),DAt.forEach(t),VBr=r(jBe," \u2014 "),GU=n(jBe,"A",{href:!0});var GAt=s(GU);XBr=r(GAt,"FlaxRoFormerForTokenClassification"),GAt.forEach(t),zBr=r(jBe," (RoFormer model)"),jBe.forEach(t),QBr=i(Oo),L3=n(Oo,"LI",{});var DBe=s(L3);o7e=n(DBe,"STRONG",{});var OAt=s(o7e);WBr=r(OAt,"xlm-roberta"),OAt.forEach(t),HBr=r(DBe," \u2014 "),OU=n(DBe,"A",{href:!0});var VAt=s(OU);UBr=r(VAt,"FlaxXLMRobertaForTokenClassification"),VAt.forEach(t),JBr=r(DBe," (XLM-RoBERTa model)"),DBe.forEach(t),Oo.forEach(t),YBr=i($a),r7e=n($a,"P",{});var XAt=s(r7e);KBr=r(XAt,"Examples:"),XAt.forEach(t),ZBr=i($a),m(cL.$$.fragment,$a),$a.forEach(t),$i.forEach(t),Q$e=i(c),Sf=n(c,"H2",{class:!0});var tNe=s(Sf);x3=n(tNe,"A",{id:!0,class:!0,href:!0});var zAt=s(x3);t7e=n(zAt,"SPAN",{});var QAt=s(t7e);m(fL.$$.fragment,QAt),QAt.forEach(t),zAt.forEach(t),ePr=i(tNe),a7e=n(tNe,"SPAN",{});var WAt=s(a7e);oPr=r(WAt,"FlaxAutoModelForMultipleChoice"),WAt.forEach(t),tNe.forEach(t),W$e=i(c),Dr=n(c,"DIV",{class:!0});var qi=s(Dr);m(mL.$$.fragment,qi),rPr=i(qi),Rf=n(qi,"P",{});var YY=s(Rf);tPr=r(YY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),VU=n(YY,"A",{href:!0});var HAt=s(VU);aPr=r(HAt,"from_pretrained()"),HAt.forEach(t),nPr=r(YY," class method or the "),XU=n(YY,"A",{href:!0});var UAt=s(XU);sPr=r(UAt,"from_config()"),UAt.forEach(t),lPr=r(YY,` class
method.`),YY.forEach(t),iPr=i(qi),gL=n(qi,"P",{});var aNe=s(gL);dPr=r(aNe,"This class cannot be instantiated directly using "),n7e=n(aNe,"CODE",{});var JAt=s(n7e);cPr=r(JAt,"__init__()"),JAt.forEach(t),fPr=r(aNe," (throws an error)."),aNe.forEach(t),mPr=i(qi),Pt=n(qi,"DIV",{class:!0});var Ni=s(Pt);m(hL.$$.fragment,Ni),gPr=i(Ni),s7e=n(Ni,"P",{});var YAt=s(s7e);hPr=r(YAt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),YAt.forEach(t),pPr=i(Ni),Bf=n(Ni,"P",{});var KY=s(Bf);_Pr=r(KY,`Note:
Loading a model from its configuration file does `),l7e=n(KY,"STRONG",{});var KAt=s(l7e);uPr=r(KAt,"not"),KAt.forEach(t),bPr=r(KY,` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=n(KY,"A",{href:!0});var ZAt=s(zU);vPr=r(ZAt,"from_pretrained()"),ZAt.forEach(t),FPr=r(KY," to load the model weights."),KY.forEach(t),TPr=i(Ni),i7e=n(Ni,"P",{});var e0t=s(i7e);MPr=r(e0t,"Examples:"),e0t.forEach(t),EPr=i(Ni),m(pL.$$.fragment,Ni),Ni.forEach(t),CPr=i(qi),Io=n(qi,"DIV",{class:!0});var Ia=s(Io);m(_L.$$.fragment,Ia),wPr=i(Ia),d7e=n(Ia,"P",{});var o0t=s(d7e);APr=r(o0t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),o0t.forEach(t),yPr=i(Ia),Nn=n(Ia,"P",{});var GC=s(Nn);LPr=r(GC,"The model class to instantiate is selected based on the "),c7e=n(GC,"CODE",{});var r0t=s(c7e);xPr=r(r0t,"model_type"),r0t.forEach(t),kPr=r(GC,` property of the config object (either
passed as an argument or loaded from `),f7e=n(GC,"CODE",{});var t0t=s(f7e);SPr=r(t0t,"pretrained_model_name_or_path"),t0t.forEach(t),RPr=r(GC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m7e=n(GC,"CODE",{});var a0t=s(m7e);BPr=r(a0t,"pretrained_model_name_or_path"),a0t.forEach(t),PPr=r(GC,":"),GC.forEach(t),$Pr=i(Ia),$e=n(Ia,"UL",{});var Vo=s($e);k3=n(Vo,"LI",{});var GBe=s(k3);g7e=n(GBe,"STRONG",{});var n0t=s(g7e);IPr=r(n0t,"albert"),n0t.forEach(t),qPr=r(GBe," \u2014 "),QU=n(GBe,"A",{href:!0});var s0t=s(QU);NPr=r(s0t,"FlaxAlbertForMultipleChoice"),s0t.forEach(t),jPr=r(GBe," (ALBERT model)"),GBe.forEach(t),DPr=i(Vo),S3=n(Vo,"LI",{});var OBe=s(S3);h7e=n(OBe,"STRONG",{});var l0t=s(h7e);GPr=r(l0t,"bert"),l0t.forEach(t),OPr=r(OBe," \u2014 "),WU=n(OBe,"A",{href:!0});var i0t=s(WU);VPr=r(i0t,"FlaxBertForMultipleChoice"),i0t.forEach(t),XPr=r(OBe," (BERT model)"),OBe.forEach(t),zPr=i(Vo),R3=n(Vo,"LI",{});var VBe=s(R3);p7e=n(VBe,"STRONG",{});var d0t=s(p7e);QPr=r(d0t,"big_bird"),d0t.forEach(t),WPr=r(VBe," \u2014 "),HU=n(VBe,"A",{href:!0});var c0t=s(HU);HPr=r(c0t,"FlaxBigBirdForMultipleChoice"),c0t.forEach(t),UPr=r(VBe," (BigBird model)"),VBe.forEach(t),JPr=i(Vo),B3=n(Vo,"LI",{});var XBe=s(B3);_7e=n(XBe,"STRONG",{});var f0t=s(_7e);YPr=r(f0t,"distilbert"),f0t.forEach(t),KPr=r(XBe," \u2014 "),UU=n(XBe,"A",{href:!0});var m0t=s(UU);ZPr=r(m0t,"FlaxDistilBertForMultipleChoice"),m0t.forEach(t),e$r=r(XBe," (DistilBERT model)"),XBe.forEach(t),o$r=i(Vo),P3=n(Vo,"LI",{});var zBe=s(P3);u7e=n(zBe,"STRONG",{});var g0t=s(u7e);r$r=r(g0t,"electra"),g0t.forEach(t),t$r=r(zBe," \u2014 "),JU=n(zBe,"A",{href:!0});var h0t=s(JU);a$r=r(h0t,"FlaxElectraForMultipleChoice"),h0t.forEach(t),n$r=r(zBe," (ELECTRA model)"),zBe.forEach(t),s$r=i(Vo),$3=n(Vo,"LI",{});var QBe=s($3);b7e=n(QBe,"STRONG",{});var p0t=s(b7e);l$r=r(p0t,"roberta"),p0t.forEach(t),i$r=r(QBe," \u2014 "),YU=n(QBe,"A",{href:!0});var _0t=s(YU);d$r=r(_0t,"FlaxRobertaForMultipleChoice"),_0t.forEach(t),c$r=r(QBe," (RoBERTa model)"),QBe.forEach(t),f$r=i(Vo),I3=n(Vo,"LI",{});var WBe=s(I3);v7e=n(WBe,"STRONG",{});var u0t=s(v7e);m$r=r(u0t,"roformer"),u0t.forEach(t),g$r=r(WBe," \u2014 "),KU=n(WBe,"A",{href:!0});var b0t=s(KU);h$r=r(b0t,"FlaxRoFormerForMultipleChoice"),b0t.forEach(t),p$r=r(WBe," (RoFormer model)"),WBe.forEach(t),_$r=i(Vo),q3=n(Vo,"LI",{});var HBe=s(q3);F7e=n(HBe,"STRONG",{});var v0t=s(F7e);u$r=r(v0t,"xlm-roberta"),v0t.forEach(t),b$r=r(HBe," \u2014 "),ZU=n(HBe,"A",{href:!0});var F0t=s(ZU);v$r=r(F0t,"FlaxXLMRobertaForMultipleChoice"),F0t.forEach(t),F$r=r(HBe," (XLM-RoBERTa model)"),HBe.forEach(t),Vo.forEach(t),T$r=i(Ia),T7e=n(Ia,"P",{});var T0t=s(T7e);M$r=r(T0t,"Examples:"),T0t.forEach(t),E$r=i(Ia),m(uL.$$.fragment,Ia),Ia.forEach(t),qi.forEach(t),H$e=i(c),Pf=n(c,"H2",{class:!0});var nNe=s(Pf);N3=n(nNe,"A",{id:!0,class:!0,href:!0});var M0t=s(N3);M7e=n(M0t,"SPAN",{});var E0t=s(M7e);m(bL.$$.fragment,E0t),E0t.forEach(t),M0t.forEach(t),C$r=i(nNe),E7e=n(nNe,"SPAN",{});var C0t=s(E7e);w$r=r(C0t,"FlaxAutoModelForNextSentencePrediction"),C0t.forEach(t),nNe.forEach(t),U$e=i(c),Gr=n(c,"DIV",{class:!0});var ji=s(Gr);m(vL.$$.fragment,ji),A$r=i(ji),$f=n(ji,"P",{});var ZY=s($f);y$r=r(ZY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eJ=n(ZY,"A",{href:!0});var w0t=s(eJ);L$r=r(w0t,"from_pretrained()"),w0t.forEach(t),x$r=r(ZY," class method or the "),oJ=n(ZY,"A",{href:!0});var A0t=s(oJ);k$r=r(A0t,"from_config()"),A0t.forEach(t),S$r=r(ZY,` class
method.`),ZY.forEach(t),R$r=i(ji),FL=n(ji,"P",{});var sNe=s(FL);B$r=r(sNe,"This class cannot be instantiated directly using "),C7e=n(sNe,"CODE",{});var y0t=s(C7e);P$r=r(y0t,"__init__()"),y0t.forEach(t),$$r=r(sNe," (throws an error)."),sNe.forEach(t),I$r=i(ji),$t=n(ji,"DIV",{class:!0});var Di=s($t);m(TL.$$.fragment,Di),q$r=i(Di),w7e=n(Di,"P",{});var L0t=s(w7e);N$r=r(L0t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),L0t.forEach(t),j$r=i(Di),If=n(Di,"P",{});var eK=s(If);D$r=r(eK,`Note:
Loading a model from its configuration file does `),A7e=n(eK,"STRONG",{});var x0t=s(A7e);G$r=r(x0t,"not"),x0t.forEach(t),O$r=r(eK,` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=n(eK,"A",{href:!0});var k0t=s(rJ);V$r=r(k0t,"from_pretrained()"),k0t.forEach(t),X$r=r(eK," to load the model weights."),eK.forEach(t),z$r=i(Di),y7e=n(Di,"P",{});var S0t=s(y7e);Q$r=r(S0t,"Examples:"),S0t.forEach(t),W$r=i(Di),m(ML.$$.fragment,Di),Di.forEach(t),H$r=i(ji),qo=n(ji,"DIV",{class:!0});var qa=s(qo);m(EL.$$.fragment,qa),U$r=i(qa),L7e=n(qa,"P",{});var R0t=s(L7e);J$r=r(R0t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),R0t.forEach(t),Y$r=i(qa),jn=n(qa,"P",{});var OC=s(jn);K$r=r(OC,"The model class to instantiate is selected based on the "),x7e=n(OC,"CODE",{});var B0t=s(x7e);Z$r=r(B0t,"model_type"),B0t.forEach(t),eIr=r(OC,` property of the config object (either
passed as an argument or loaded from `),k7e=n(OC,"CODE",{});var P0t=s(k7e);oIr=r(P0t,"pretrained_model_name_or_path"),P0t.forEach(t),rIr=r(OC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S7e=n(OC,"CODE",{});var $0t=s(S7e);tIr=r($0t,"pretrained_model_name_or_path"),$0t.forEach(t),aIr=r(OC,":"),OC.forEach(t),nIr=i(qa),R7e=n(qa,"UL",{});var I0t=s(R7e);j3=n(I0t,"LI",{});var UBe=s(j3);B7e=n(UBe,"STRONG",{});var q0t=s(B7e);sIr=r(q0t,"bert"),q0t.forEach(t),lIr=r(UBe," \u2014 "),tJ=n(UBe,"A",{href:!0});var N0t=s(tJ);iIr=r(N0t,"FlaxBertForNextSentencePrediction"),N0t.forEach(t),dIr=r(UBe," (BERT model)"),UBe.forEach(t),I0t.forEach(t),cIr=i(qa),P7e=n(qa,"P",{});var j0t=s(P7e);fIr=r(j0t,"Examples:"),j0t.forEach(t),mIr=i(qa),m(CL.$$.fragment,qa),qa.forEach(t),ji.forEach(t),J$e=i(c),qf=n(c,"H2",{class:!0});var lNe=s(qf);D3=n(lNe,"A",{id:!0,class:!0,href:!0});var D0t=s(D3);$7e=n(D0t,"SPAN",{});var G0t=s($7e);m(wL.$$.fragment,G0t),G0t.forEach(t),D0t.forEach(t),gIr=i(lNe),I7e=n(lNe,"SPAN",{});var O0t=s(I7e);hIr=r(O0t,"FlaxAutoModelForImageClassification"),O0t.forEach(t),lNe.forEach(t),Y$e=i(c),Or=n(c,"DIV",{class:!0});var Gi=s(Or);m(AL.$$.fragment,Gi),pIr=i(Gi),Nf=n(Gi,"P",{});var oK=s(Nf);_Ir=r(oK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),aJ=n(oK,"A",{href:!0});var V0t=s(aJ);uIr=r(V0t,"from_pretrained()"),V0t.forEach(t),bIr=r(oK," class method or the "),nJ=n(oK,"A",{href:!0});var X0t=s(nJ);vIr=r(X0t,"from_config()"),X0t.forEach(t),FIr=r(oK,` class
method.`),oK.forEach(t),TIr=i(Gi),yL=n(Gi,"P",{});var iNe=s(yL);MIr=r(iNe,"This class cannot be instantiated directly using "),q7e=n(iNe,"CODE",{});var z0t=s(q7e);EIr=r(z0t,"__init__()"),z0t.forEach(t),CIr=r(iNe," (throws an error)."),iNe.forEach(t),wIr=i(Gi),It=n(Gi,"DIV",{class:!0});var Oi=s(It);m(LL.$$.fragment,Oi),AIr=i(Oi),N7e=n(Oi,"P",{});var Q0t=s(N7e);yIr=r(Q0t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Q0t.forEach(t),LIr=i(Oi),jf=n(Oi,"P",{});var rK=s(jf);xIr=r(rK,`Note:
Loading a model from its configuration file does `),j7e=n(rK,"STRONG",{});var W0t=s(j7e);kIr=r(W0t,"not"),W0t.forEach(t),SIr=r(rK,` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=n(rK,"A",{href:!0});var H0t=s(sJ);RIr=r(H0t,"from_pretrained()"),H0t.forEach(t),BIr=r(rK," to load the model weights."),rK.forEach(t),PIr=i(Oi),D7e=n(Oi,"P",{});var U0t=s(D7e);$Ir=r(U0t,"Examples:"),U0t.forEach(t),IIr=i(Oi),m(xL.$$.fragment,Oi),Oi.forEach(t),qIr=i(Gi),No=n(Gi,"DIV",{class:!0});var Na=s(No);m(kL.$$.fragment,Na),NIr=i(Na),G7e=n(Na,"P",{});var J0t=s(G7e);jIr=r(J0t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),J0t.forEach(t),DIr=i(Na),Dn=n(Na,"P",{});var VC=s(Dn);GIr=r(VC,"The model class to instantiate is selected based on the "),O7e=n(VC,"CODE",{});var Y0t=s(O7e);OIr=r(Y0t,"model_type"),Y0t.forEach(t),VIr=r(VC,` property of the config object (either
passed as an argument or loaded from `),V7e=n(VC,"CODE",{});var K0t=s(V7e);XIr=r(K0t,"pretrained_model_name_or_path"),K0t.forEach(t),zIr=r(VC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X7e=n(VC,"CODE",{});var Z0t=s(X7e);QIr=r(Z0t,"pretrained_model_name_or_path"),Z0t.forEach(t),WIr=r(VC,":"),VC.forEach(t),HIr=i(Na),SL=n(Na,"UL",{});var dNe=s(SL);G3=n(dNe,"LI",{});var JBe=s(G3);z7e=n(JBe,"STRONG",{});var eyt=s(z7e);UIr=r(eyt,"beit"),eyt.forEach(t),JIr=r(JBe," \u2014 "),lJ=n(JBe,"A",{href:!0});var oyt=s(lJ);YIr=r(oyt,"FlaxBeitForImageClassification"),oyt.forEach(t),KIr=r(JBe," (BEiT model)"),JBe.forEach(t),ZIr=i(dNe),O3=n(dNe,"LI",{});var YBe=s(O3);Q7e=n(YBe,"STRONG",{});var ryt=s(Q7e);eqr=r(ryt,"vit"),ryt.forEach(t),oqr=r(YBe," \u2014 "),iJ=n(YBe,"A",{href:!0});var tyt=s(iJ);rqr=r(tyt,"FlaxViTForImageClassification"),tyt.forEach(t),tqr=r(YBe," (ViT model)"),YBe.forEach(t),dNe.forEach(t),aqr=i(Na),W7e=n(Na,"P",{});var ayt=s(W7e);nqr=r(ayt,"Examples:"),ayt.forEach(t),sqr=i(Na),m(RL.$$.fragment,Na),Na.forEach(t),Gi.forEach(t),K$e=i(c),Df=n(c,"H2",{class:!0});var cNe=s(Df);V3=n(cNe,"A",{id:!0,class:!0,href:!0});var nyt=s(V3);H7e=n(nyt,"SPAN",{});var syt=s(H7e);m(BL.$$.fragment,syt),syt.forEach(t),nyt.forEach(t),lqr=i(cNe),U7e=n(cNe,"SPAN",{});var lyt=s(U7e);iqr=r(lyt,"FlaxAutoModelForVision2Seq"),lyt.forEach(t),cNe.forEach(t),Z$e=i(c),Vr=n(c,"DIV",{class:!0});var Vi=s(Vr);m(PL.$$.fragment,Vi),dqr=i(Vi),Gf=n(Vi,"P",{});var tK=s(Gf);cqr=r(tK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dJ=n(tK,"A",{href:!0});var iyt=s(dJ);fqr=r(iyt,"from_pretrained()"),iyt.forEach(t),mqr=r(tK," class method or the "),cJ=n(tK,"A",{href:!0});var dyt=s(cJ);gqr=r(dyt,"from_config()"),dyt.forEach(t),hqr=r(tK,` class
method.`),tK.forEach(t),pqr=i(Vi),$L=n(Vi,"P",{});var fNe=s($L);_qr=r(fNe,"This class cannot be instantiated directly using "),J7e=n(fNe,"CODE",{});var cyt=s(J7e);uqr=r(cyt,"__init__()"),cyt.forEach(t),bqr=r(fNe," (throws an error)."),fNe.forEach(t),vqr=i(Vi),qt=n(Vi,"DIV",{class:!0});var Xi=s(qt);m(IL.$$.fragment,Xi),Fqr=i(Xi),Y7e=n(Xi,"P",{});var fyt=s(Y7e);Tqr=r(fyt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fyt.forEach(t),Mqr=i(Xi),Of=n(Xi,"P",{});var aK=s(Of);Eqr=r(aK,`Note:
Loading a model from its configuration file does `),K7e=n(aK,"STRONG",{});var myt=s(K7e);Cqr=r(myt,"not"),myt.forEach(t),wqr=r(aK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=n(aK,"A",{href:!0});var gyt=s(fJ);Aqr=r(gyt,"from_pretrained()"),gyt.forEach(t),yqr=r(aK," to load the model weights."),aK.forEach(t),Lqr=i(Xi),Z7e=n(Xi,"P",{});var hyt=s(Z7e);xqr=r(hyt,"Examples:"),hyt.forEach(t),kqr=i(Xi),m(qL.$$.fragment,Xi),Xi.forEach(t),Sqr=i(Vi),jo=n(Vi,"DIV",{class:!0});var ja=s(jo);m(NL.$$.fragment,ja),Rqr=i(ja),eMe=n(ja,"P",{});var pyt=s(eMe);Bqr=r(pyt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),pyt.forEach(t),Pqr=i(ja),Gn=n(ja,"P",{});var XC=s(Gn);$qr=r(XC,"The model class to instantiate is selected based on the "),oMe=n(XC,"CODE",{});var _yt=s(oMe);Iqr=r(_yt,"model_type"),_yt.forEach(t),qqr=r(XC,` property of the config object (either
passed as an argument or loaded from `),rMe=n(XC,"CODE",{});var uyt=s(rMe);Nqr=r(uyt,"pretrained_model_name_or_path"),uyt.forEach(t),jqr=r(XC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=n(XC,"CODE",{});var byt=s(tMe);Dqr=r(byt,"pretrained_model_name_or_path"),byt.forEach(t),Gqr=r(XC,":"),XC.forEach(t),Oqr=i(ja),aMe=n(ja,"UL",{});var vyt=s(aMe);X3=n(vyt,"LI",{});var KBe=s(X3);nMe=n(KBe,"STRONG",{});var Fyt=s(nMe);Vqr=r(Fyt,"vision-encoder-decoder"),Fyt.forEach(t),Xqr=r(KBe," \u2014 "),mJ=n(KBe,"A",{href:!0});var Tyt=s(mJ);zqr=r(Tyt,"FlaxVisionEncoderDecoderModel"),Tyt.forEach(t),Qqr=r(KBe," (Vision Encoder decoder model)"),KBe.forEach(t),vyt.forEach(t),Wqr=i(ja),sMe=n(ja,"P",{});var Myt=s(sMe);Hqr=r(Myt,"Examples:"),Myt.forEach(t),Uqr=i(ja),m(jL.$$.fragment,ja),ja.forEach(t),Vi.forEach(t),this.h()},h(){d(oe,"name","hf:doc:metadata"),d(oe,"content",JSON.stringify(Ryt)),d(Ae,"id","auto-classes"),d(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ae,"href","#auto-classes"),d(me,"class","relative group"),d(On,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.AutoModel"),d(zn,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.AutoTokenizer"),d(Yi,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertModel"),d(Uf,"id","extending-the-auto-classes"),d(Uf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Uf,"href","#extending-the-auto-classes"),d(Ki,"class","relative group"),d(Yf,"id","transformers.AutoConfig"),d(Yf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Yf,"href","#transformers.AutoConfig"),d(Zi,"class","relative group"),d(Y9,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(K9,"href","/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertConfig"),d(Z9,"href","/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartConfig"),d(ex,"href","/docs/transformers/pr_15457/en/model_doc/beit#transformers.BeitConfig"),d(ox,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertConfig"),d(rx,"href","/docs/transformers/pr_15457/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(tx,"href","/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdConfig"),d(ax,"href","/docs/transformers/pr_15457/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(nx,"href","/docs/transformers/pr_15457/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(sx,"href","/docs/transformers/pr_15457/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(lx,"href","/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertConfig"),d(ix,"href","/docs/transformers/pr_15457/en/model_doc/canine#transformers.CanineConfig"),d(dx,"href","/docs/transformers/pr_15457/en/model_doc/clip#transformers.CLIPConfig"),d(cx,"href","/docs/transformers/pr_15457/en/model_doc/convbert#transformers.ConvBertConfig"),d(fx,"href","/docs/transformers/pr_15457/en/model_doc/convnext#transformers.ConvNextConfig"),d(mx,"href","/docs/transformers/pr_15457/en/model_doc/ctrl#transformers.CTRLConfig"),d(gx,"href","/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(hx,"href","/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(px,"href","/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(_x,"href","/docs/transformers/pr_15457/en/model_doc/deberta#transformers.DebertaConfig"),d(ux,"href","/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(bx,"href","/docs/transformers/pr_15457/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(vx,"href","/docs/transformers/pr_15457/en/model_doc/deit#transformers.DeiTConfig"),d(Fx,"href","/docs/transformers/pr_15457/en/model_doc/detr#transformers.DetrConfig"),d(Tx,"href","/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertConfig"),d(Mx,"href","/docs/transformers/pr_15457/en/model_doc/dpr#transformers.DPRConfig"),d(Ex,"href","/docs/transformers/pr_15457/en/model_doc/dpt#transformers.DPTConfig"),d(Cx,"href","/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraConfig"),d(wx,"href","/docs/transformers/pr_15457/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(Ax,"href","/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertConfig"),d(yx,"href","/docs/transformers/pr_15457/en/model_doc/fnet#transformers.FNetConfig"),d(Lx,"href","/docs/transformers/pr_15457/en/model_doc/fsmt#transformers.FSMTConfig"),d(xx,"href","/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelConfig"),d(kx,"href","/docs/transformers/pr_15457/en/model_doc/glpn#transformers.GLPNConfig"),d(Sx,"href","/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.GPT2Config"),d(Rx,"href","/docs/transformers/pr_15457/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(Bx,"href","/docs/transformers/pr_15457/en/model_doc/gptj#transformers.GPTJConfig"),d(Px,"href","/docs/transformers/pr_15457/en/model_doc/hubert#transformers.HubertConfig"),d($x,"href","/docs/transformers/pr_15457/en/model_doc/ibert#transformers.IBertConfig"),d(Ix,"href","/docs/transformers/pr_15457/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(qx,"href","/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(Nx,"href","/docs/transformers/pr_15457/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(jx,"href","/docs/transformers/pr_15457/en/model_doc/led#transformers.LEDConfig"),d(Dx,"href","/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerConfig"),d(Gx,"href","/docs/transformers/pr_15457/en/model_doc/luke#transformers.LukeConfig"),d(Ox,"href","/docs/transformers/pr_15457/en/model_doc/lxmert#transformers.LxmertConfig"),d(Vx,"href","/docs/transformers/pr_15457/en/model_doc/m2m_100#transformers.M2M100Config"),d(Xx,"href","/docs/transformers/pr_15457/en/model_doc/marian#transformers.MarianConfig"),d(zx,"href","/docs/transformers/pr_15457/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(Qx,"href","/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartConfig"),d(Wx,"href","/docs/transformers/pr_15457/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(Hx,"href","/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(Ux,"href","/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetConfig"),d(Jx,"href","/docs/transformers/pr_15457/en/model_doc/mt5#transformers.MT5Config"),d(Yx,"href","/docs/transformers/pr_15457/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(Kx,"href","/docs/transformers/pr_15457/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(Zx,"href","/docs/transformers/pr_15457/en/model_doc/pegasus#transformers.PegasusConfig"),d(ek,"href","/docs/transformers/pr_15457/en/model_doc/perceiver#transformers.PerceiverConfig"),d(ok,"href","/docs/transformers/pr_15457/en/model_doc/plbart#transformers.PLBartConfig"),d(rk,"href","/docs/transformers/pr_15457/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(tk,"href","/docs/transformers/pr_15457/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(ak,"href","/docs/transformers/pr_15457/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(nk,"href","/docs/transformers/pr_15457/en/model_doc/rag#transformers.RagConfig"),d(sk,"href","/docs/transformers/pr_15457/en/model_doc/realm#transformers.RealmConfig"),d(lk,"href","/docs/transformers/pr_15457/en/model_doc/reformer#transformers.ReformerConfig"),d(ik,"href","/docs/transformers/pr_15457/en/model_doc/regnet#transformers.RegNetConfig"),d(dk,"href","/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertConfig"),d(ck,"href","/docs/transformers/pr_15457/en/model_doc/resnet#transformers.ResNetConfig"),d(fk,"href","/docs/transformers/pr_15457/en/model_doc/retribert#transformers.RetriBertConfig"),d(mk,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaConfig"),d(gk,"href","/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerConfig"),d(hk,"href","/docs/transformers/pr_15457/en/model_doc/segformer#transformers.SegformerConfig"),d(pk,"href","/docs/transformers/pr_15457/en/model_doc/sew#transformers.SEWConfig"),d(_k,"href","/docs/transformers/pr_15457/en/model_doc/sew-d#transformers.SEWDConfig"),d(uk,"href","/docs/transformers/pr_15457/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(bk,"href","/docs/transformers/pr_15457/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(vk,"href","/docs/transformers/pr_15457/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(Fk,"href","/docs/transformers/pr_15457/en/model_doc/splinter#transformers.SplinterConfig"),d(Tk,"href","/docs/transformers/pr_15457/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(Mk,"href","/docs/transformers/pr_15457/en/model_doc/swin#transformers.SwinConfig"),d(Ek,"href","/docs/transformers/pr_15457/en/model_doc/t5#transformers.T5Config"),d(Ck,"href","/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TapasConfig"),d(wk,"href","/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartConfig"),d(Ak,"href","/docs/transformers/pr_15457/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(yk,"href","/docs/transformers/pr_15457/en/model_doc/trocr#transformers.TrOCRConfig"),d(Lk,"href","/docs/transformers/pr_15457/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(xk,"href","/docs/transformers/pr_15457/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(kk,"href","/docs/transformers/pr_15457/en/model_doc/van#transformers.VanConfig"),d(Sk,"href","/docs/transformers/pr_15457/en/model_doc/vilt#transformers.ViltConfig"),d(Rk,"href","/docs/transformers/pr_15457/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(Bk,"href","/docs/transformers/pr_15457/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(Pk,"href","/docs/transformers/pr_15457/en/model_doc/visual_bert#transformers.VisualBertConfig"),d($k,"href","/docs/transformers/pr_15457/en/model_doc/vit#transformers.ViTConfig"),d(Ik,"href","/docs/transformers/pr_15457/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(qk,"href","/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(Nk,"href","/docs/transformers/pr_15457/en/model_doc/wavlm#transformers.WavLMConfig"),d(jk,"href","/docs/transformers/pr_15457/en/model_doc/xglm#transformers.XGLMConfig"),d(Dk,"href","/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMConfig"),d(Gk,"href","/docs/transformers/pr_15457/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(Ok,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(Vk,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(Xk,"href","/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetConfig"),d(zk,"href","/docs/transformers/pr_15457/en/model_doc/yoso#transformers.YosoConfig"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wg,"id","transformers.AutoTokenizer"),d(Wg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Wg,"href","#transformers.AutoTokenizer"),d(od,"class","relative group"),d(Qk,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(Wk,"href","/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertTokenizer"),d(Hk,"href","/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(Uk,"href","/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartTokenizer"),d(Jk,"href","/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartTokenizerFast"),d(Yk,"href","/docs/transformers/pr_15457/en/model_doc/barthez#transformers.BarthezTokenizer"),d(Kk,"href","/docs/transformers/pr_15457/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(Zk,"href","/docs/transformers/pr_15457/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(eS,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertTokenizer"),d(oS,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertTokenizerFast"),d(rS,"href","/docs/transformers/pr_15457/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(tS,"href","/docs/transformers/pr_15457/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(aS,"href","/docs/transformers/pr_15457/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(nS,"href","/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(sS,"href","/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(lS,"href","/docs/transformers/pr_15457/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(iS,"href","/docs/transformers/pr_15457/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(dS,"href","/docs/transformers/pr_15457/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(cS,"href","/docs/transformers/pr_15457/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(fS,"href","/docs/transformers/pr_15457/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(mS,"href","/docs/transformers/pr_15457/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(gS,"href","/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertTokenizer"),d(hS,"href","/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(pS,"href","/docs/transformers/pr_15457/en/model_doc/canine#transformers.CanineTokenizer"),d(_S,"href","/docs/transformers/pr_15457/en/model_doc/clip#transformers.CLIPTokenizer"),d(uS,"href","/docs/transformers/pr_15457/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(bS,"href","/docs/transformers/pr_15457/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(vS,"href","/docs/transformers/pr_15457/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(FS,"href","/docs/transformers/pr_15457/en/model_doc/cpm#transformers.CpmTokenizer"),d(TS,"href","/docs/transformers/pr_15457/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(MS,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaTokenizer"),d(ES,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(CS,"href","/docs/transformers/pr_15457/en/model_doc/deberta#transformers.DebertaTokenizer"),d(wS,"href","/docs/transformers/pr_15457/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(AS,"href","/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(yS,"href","/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),d(LS,"href","/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(xS,"href","/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(kS,"href","/docs/transformers/pr_15457/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(SS,"href","/docs/transformers/pr_15457/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(RS,"href","/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraTokenizer"),d(BS,"href","/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(PS,"href","/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d($S,"href","/docs/transformers/pr_15457/en/model_doc/fnet#transformers.FNetTokenizer"),d(IS,"href","/docs/transformers/pr_15457/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(qS,"href","/docs/transformers/pr_15457/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(NS,"href","/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelTokenizer"),d(jS,"href","/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(DS,"href","/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(GS,"href","/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(OS,"href","/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(VS,"href","/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(XS,"href","/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(zS,"href","/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(QS,"href","/docs/transformers/pr_15457/en/model_doc/herbert#transformers.HerbertTokenizer"),d(WS,"href","/docs/transformers/pr_15457/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(HS,"href","/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(US,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaTokenizer"),d(JS,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(YS,"href","/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(KS,"href","/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(ZS,"href","/docs/transformers/pr_15457/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(eR,"href","/docs/transformers/pr_15457/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(oR,"href","/docs/transformers/pr_15457/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(rR,"href","/docs/transformers/pr_15457/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(tR,"href","/docs/transformers/pr_15457/en/model_doc/led#transformers.LEDTokenizer"),d(aR,"href","/docs/transformers/pr_15457/en/model_doc/led#transformers.LEDTokenizerFast"),d(nR,"href","/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerTokenizer"),d(sR,"href","/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(lR,"href","/docs/transformers/pr_15457/en/model_doc/luke#transformers.LukeTokenizer"),d(iR,"href","/docs/transformers/pr_15457/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(dR,"href","/docs/transformers/pr_15457/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(cR,"href","/docs/transformers/pr_15457/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(fR,"href","/docs/transformers/pr_15457/en/model_doc/marian#transformers.MarianTokenizer"),d(mR,"href","/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartTokenizer"),d(gR,"href","/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(hR,"href","/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(pR,"href","/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(_R,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertTokenizer"),d(uR,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertTokenizerFast"),d(bR,"href","/docs/transformers/pr_15457/en/model_doc/mluke#transformers.MLukeTokenizer"),d(vR,"href","/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(FR,"href","/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(TR,"href","/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(MR,"href","/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(ER,"href","/docs/transformers/pr_15457/en/model_doc/mt5#transformers.T5Tokenizer"),d(CR,"href","/docs/transformers/pr_15457/en/model_doc/mt5#transformers.T5TokenizerFast"),d(wR,"href","/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertTokenizer"),d(AR,"href","/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(yR,"href","/docs/transformers/pr_15457/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(LR,"href","/docs/transformers/pr_15457/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(xR,"href","/docs/transformers/pr_15457/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(kR,"href","/docs/transformers/pr_15457/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(SR,"href","/docs/transformers/pr_15457/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(RR,"href","/docs/transformers/pr_15457/en/model_doc/phobert#transformers.PhobertTokenizer"),d(BR,"href","/docs/transformers/pr_15457/en/model_doc/plbart#transformers.PLBartTokenizer"),d(PR,"href","/docs/transformers/pr_15457/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d($R,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertTokenizer"),d(IR,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertTokenizerFast"),d(qR,"href","/docs/transformers/pr_15457/en/model_doc/rag#transformers.RagTokenizer"),d(NR,"href","/docs/transformers/pr_15457/en/model_doc/realm#transformers.RealmTokenizer"),d(jR,"href","/docs/transformers/pr_15457/en/model_doc/realm#transformers.RealmTokenizerFast"),d(DR,"href","/docs/transformers/pr_15457/en/model_doc/reformer#transformers.ReformerTokenizer"),d(GR,"href","/docs/transformers/pr_15457/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(OR,"href","/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertTokenizer"),d(VR,"href","/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(XR,"href","/docs/transformers/pr_15457/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(zR,"href","/docs/transformers/pr_15457/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(QR,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaTokenizer"),d(WR,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(HR,"href","/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(UR,"href","/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(JR,"href","/docs/transformers/pr_15457/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(YR,"href","/docs/transformers/pr_15457/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(KR,"href","/docs/transformers/pr_15457/en/model_doc/splinter#transformers.SplinterTokenizer"),d(ZR,"href","/docs/transformers/pr_15457/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(eB,"href","/docs/transformers/pr_15457/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(oB,"href","/docs/transformers/pr_15457/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(rB,"href","/docs/transformers/pr_15457/en/model_doc/mt5#transformers.T5Tokenizer"),d(tB,"href","/docs/transformers/pr_15457/en/model_doc/mt5#transformers.T5TokenizerFast"),d(aB,"href","/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TapasTokenizer"),d(nB,"href","/docs/transformers/pr_15457/en/model_doc/tapex#transformers.TapexTokenizer"),d(sB,"href","/docs/transformers/pr_15457/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(lB,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertTokenizer"),d(iB,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertTokenizerFast"),d(dB,"href","/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(cB,"href","/docs/transformers/pr_15457/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(fB,"href","/docs/transformers/pr_15457/en/model_doc/xglm#transformers.XGLMTokenizer"),d(mB,"href","/docs/transformers/pr_15457/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(gB,"href","/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMTokenizer"),d(hB,"href","/docs/transformers/pr_15457/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(pB,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(_B,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(uB,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaTokenizer"),d(bB,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(vB,"href","/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(FB,"href","/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(TB,"href","/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertTokenizer"),d(MB,"href","/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Eh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ch,"id","transformers.AutoFeatureExtractor"),d(Ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ch,"href","#transformers.AutoFeatureExtractor"),d(rd,"class","relative group"),d(EB,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(CB,"href","/docs/transformers/pr_15457/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(wB,"href","/docs/transformers/pr_15457/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(AB,"href","/docs/transformers/pr_15457/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(yB,"href","/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(LB,"href","/docs/transformers/pr_15457/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(xB,"href","/docs/transformers/pr_15457/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(kB,"href","/docs/transformers/pr_15457/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(SB,"href","/docs/transformers/pr_15457/en/model_doc/dpt#transformers.DPTFeatureExtractor"),d(RB,"href","/docs/transformers/pr_15457/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),d(BB,"href","/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(PB,"href","/docs/transformers/pr_15457/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d($B,"href","/docs/transformers/pr_15457/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(IB,"href","/docs/transformers/pr_15457/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(qB,"href","/docs/transformers/pr_15457/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(NB,"href","/docs/transformers/pr_15457/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(jB,"href","/docs/transformers/pr_15457/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(DB,"href","/docs/transformers/pr_15457/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(GB,"href","/docs/transformers/pr_15457/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(OB,"href","/docs/transformers/pr_15457/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(VB,"href","/docs/transformers/pr_15457/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(XB,"href","/docs/transformers/pr_15457/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(zB,"href","/docs/transformers/pr_15457/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(QB,"href","/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jh,"id","transformers.AutoProcessor"),d(Jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Jh,"href","#transformers.AutoProcessor"),d(td,"class","relative group"),d(WB,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(HB,"href","/docs/transformers/pr_15457/en/model_doc/clip#transformers.CLIPProcessor"),d(UB,"href","/docs/transformers/pr_15457/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(JB,"href","/docs/transformers/pr_15457/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(YB,"href","/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(KB,"href","/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(ZB,"href","/docs/transformers/pr_15457/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(eP,"href","/docs/transformers/pr_15457/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(oP,"href","/docs/transformers/pr_15457/en/model_doc/trocr#transformers.TrOCRProcessor"),d(rP,"href","/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(tP,"href","/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(aP,"href","/docs/transformers/pr_15457/en/model_doc/vilt#transformers.ViltProcessor"),d(nP,"href","/docs/transformers/pr_15457/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(sP,"href","/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(lP,"href","/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gp,"id","transformers.AutoModel"),d(gp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gp,"href","#transformers.AutoModel"),d(nd,"class","relative group"),d(iP,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dP,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cP,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fP,"href","/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertModel"),d(mP,"href","/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartModel"),d(gP,"href","/docs/transformers/pr_15457/en/model_doc/beit#transformers.BeitModel"),d(hP,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertModel"),d(pP,"href","/docs/transformers/pr_15457/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(_P,"href","/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdModel"),d(uP,"href","/docs/transformers/pr_15457/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(bP,"href","/docs/transformers/pr_15457/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(vP,"href","/docs/transformers/pr_15457/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(FP,"href","/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertModel"),d(TP,"href","/docs/transformers/pr_15457/en/model_doc/canine#transformers.CanineModel"),d(MP,"href","/docs/transformers/pr_15457/en/model_doc/clip#transformers.CLIPModel"),d(EP,"href","/docs/transformers/pr_15457/en/model_doc/convbert#transformers.ConvBertModel"),d(CP,"href","/docs/transformers/pr_15457/en/model_doc/convnext#transformers.ConvNextModel"),d(wP,"href","/docs/transformers/pr_15457/en/model_doc/ctrl#transformers.CTRLModel"),d(AP,"href","/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(yP,"href","/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(LP,"href","/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d(xP,"href","/docs/transformers/pr_15457/en/model_doc/deberta#transformers.DebertaModel"),d(kP,"href","/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(SP,"href","/docs/transformers/pr_15457/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(RP,"href","/docs/transformers/pr_15457/en/model_doc/deit#transformers.DeiTModel"),d(BP,"href","/docs/transformers/pr_15457/en/model_doc/detr#transformers.DetrModel"),d(PP,"href","/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertModel"),d($P,"href","/docs/transformers/pr_15457/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(IP,"href","/docs/transformers/pr_15457/en/model_doc/dpt#transformers.DPTModel"),d(qP,"href","/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraModel"),d(NP,"href","/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertModel"),d(jP,"href","/docs/transformers/pr_15457/en/model_doc/fnet#transformers.FNetModel"),d(DP,"href","/docs/transformers/pr_15457/en/model_doc/fsmt#transformers.FSMTModel"),d(GP,"href","/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelModel"),d(OP,"href","/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelBaseModel"),d(VP,"href","/docs/transformers/pr_15457/en/model_doc/glpn#transformers.GLPNModel"),d(XP,"href","/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.GPT2Model"),d(zP,"href","/docs/transformers/pr_15457/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(QP,"href","/docs/transformers/pr_15457/en/model_doc/gptj#transformers.GPTJModel"),d(WP,"href","/docs/transformers/pr_15457/en/model_doc/hubert#transformers.HubertModel"),d(HP,"href","/docs/transformers/pr_15457/en/model_doc/ibert#transformers.IBertModel"),d(UP,"href","/docs/transformers/pr_15457/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(JP,"href","/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(YP,"href","/docs/transformers/pr_15457/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(KP,"href","/docs/transformers/pr_15457/en/model_doc/led#transformers.LEDModel"),d(ZP,"href","/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerModel"),d(e$,"href","/docs/transformers/pr_15457/en/model_doc/luke#transformers.LukeModel"),d(o$,"href","/docs/transformers/pr_15457/en/model_doc/lxmert#transformers.LxmertModel"),d(r$,"href","/docs/transformers/pr_15457/en/model_doc/m2m_100#transformers.M2M100Model"),d(t$,"href","/docs/transformers/pr_15457/en/model_doc/marian#transformers.MarianModel"),d(a$,"href","/docs/transformers/pr_15457/en/model_doc/maskformer#transformers.MaskFormerModel"),d(n$,"href","/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartModel"),d(s$,"href","/docs/transformers/pr_15457/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(l$,"href","/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertModel"),d(i$,"href","/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetModel"),d(d$,"href","/docs/transformers/pr_15457/en/model_doc/mt5#transformers.MT5Model"),d(c$,"href","/docs/transformers/pr_15457/en/model_doc/nystromformer#transformers.NystromformerModel"),d(f$,"href","/docs/transformers/pr_15457/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(m$,"href","/docs/transformers/pr_15457/en/model_doc/pegasus#transformers.PegasusModel"),d(g$,"href","/docs/transformers/pr_15457/en/model_doc/perceiver#transformers.PerceiverModel"),d(h$,"href","/docs/transformers/pr_15457/en/model_doc/plbart#transformers.PLBartModel"),d(p$,"href","/docs/transformers/pr_15457/en/model_doc/poolformer#transformers.PoolFormerModel"),d(_$,"href","/docs/transformers/pr_15457/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(u$,"href","/docs/transformers/pr_15457/en/model_doc/qdqbert#transformers.QDQBertModel"),d(b$,"href","/docs/transformers/pr_15457/en/model_doc/reformer#transformers.ReformerModel"),d(v$,"href","/docs/transformers/pr_15457/en/model_doc/regnet#transformers.RegNetModel"),d(F$,"href","/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertModel"),d(T$,"href","/docs/transformers/pr_15457/en/model_doc/resnet#transformers.ResNetModel"),d(M$,"href","/docs/transformers/pr_15457/en/model_doc/retribert#transformers.RetriBertModel"),d(E$,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaModel"),d(C$,"href","/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerModel"),d(w$,"href","/docs/transformers/pr_15457/en/model_doc/segformer#transformers.SegformerModel"),d(A$,"href","/docs/transformers/pr_15457/en/model_doc/sew#transformers.SEWModel"),d(y$,"href","/docs/transformers/pr_15457/en/model_doc/sew-d#transformers.SEWDModel"),d(L$,"href","/docs/transformers/pr_15457/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(x$,"href","/docs/transformers/pr_15457/en/model_doc/splinter#transformers.SplinterModel"),d(k$,"href","/docs/transformers/pr_15457/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(S$,"href","/docs/transformers/pr_15457/en/model_doc/swin#transformers.SwinModel"),d(R$,"href","/docs/transformers/pr_15457/en/model_doc/t5#transformers.T5Model"),d(B$,"href","/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TapasModel"),d(P$,"href","/docs/transformers/pr_15457/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d($$,"href","/docs/transformers/pr_15457/en/model_doc/unispeech#transformers.UniSpeechModel"),d(I$,"href","/docs/transformers/pr_15457/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(q$,"href","/docs/transformers/pr_15457/en/model_doc/van#transformers.VanModel"),d(N$,"href","/docs/transformers/pr_15457/en/model_doc/vilt#transformers.ViltModel"),d(j$,"href","/docs/transformers/pr_15457/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(D$,"href","/docs/transformers/pr_15457/en/model_doc/visual_bert#transformers.VisualBertModel"),d(G$,"href","/docs/transformers/pr_15457/en/model_doc/vit#transformers.ViTModel"),d(O$,"href","/docs/transformers/pr_15457/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(V$,"href","/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(X$,"href","/docs/transformers/pr_15457/en/model_doc/wavlm#transformers.WavLMModel"),d(z$,"href","/docs/transformers/pr_15457/en/model_doc/xglm#transformers.XGLMModel"),d(Q$,"href","/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMModel"),d(W$,"href","/docs/transformers/pr_15457/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(H$,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(U$,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(J$,"href","/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetModel"),d(Y$,"href","/docs/transformers/pr_15457/en/model_doc/yoso#transformers.YosoModel"),d(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eu,"id","transformers.AutoModelForPreTraining"),d(eu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eu,"href","#transformers.AutoModelForPreTraining"),d(id,"class","relative group"),d(K$,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Z$,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eI,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oI,"href","/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertForPreTraining"),d(rI,"href","/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(tI,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertForPreTraining"),d(aI,"href","/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(nI,"href","/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(sI,"href","/docs/transformers/pr_15457/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(lI,"href","/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(iI,"href","/docs/transformers/pr_15457/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(dI,"href","/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(cI,"href","/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(fI,"href","/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraForPreTraining"),d(mI,"href","/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(gI,"href","/docs/transformers/pr_15457/en/model_doc/fnet#transformers.FNetForPreTraining"),d(hI,"href","/docs/transformers/pr_15457/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(pI,"href","/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(_I,"href","/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(uI,"href","/docs/transformers/pr_15457/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(bI,"href","/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(vI,"href","/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(FI,"href","/docs/transformers/pr_15457/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(TI,"href","/docs/transformers/pr_15457/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(MI,"href","/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(EI,"href","/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(CI,"href","/docs/transformers/pr_15457/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(wI,"href","/docs/transformers/pr_15457/en/model_doc/retribert#transformers.RetriBertModel"),d(AI,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(yI,"href","/docs/transformers/pr_15457/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(LI,"href","/docs/transformers/pr_15457/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(xI,"href","/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(kI,"href","/docs/transformers/pr_15457/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(SI,"href","/docs/transformers/pr_15457/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(RI,"href","/docs/transformers/pr_15457/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(BI,"href","/docs/transformers/pr_15457/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(PI,"href","/docs/transformers/pr_15457/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d($I,"href","/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(II,"href","/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(qI,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(NI,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(jI,"href","/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gu,"id","transformers.AutoModelForCausalLM"),d(Gu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gu,"href","#transformers.AutoModelForCausalLM"),d(fd,"class","relative group"),d(DI,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GI,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OI,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VI,"href","/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartForCausalLM"),d(XI,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertLMHeadModel"),d(zI,"href","/docs/transformers/pr_15457/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(QI,"href","/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(WI,"href","/docs/transformers/pr_15457/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(HI,"href","/docs/transformers/pr_15457/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(UI,"href","/docs/transformers/pr_15457/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(JI,"href","/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(YI,"href","/docs/transformers/pr_15457/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(KI,"href","/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(ZI,"href","/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraForCausalLM"),d(eq,"href","/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(oq,"href","/docs/transformers/pr_15457/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(rq,"href","/docs/transformers/pr_15457/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(tq,"href","/docs/transformers/pr_15457/en/model_doc/marian#transformers.MarianForCausalLM"),d(aq,"href","/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartForCausalLM"),d(nq,"href","/docs/transformers/pr_15457/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(sq,"href","/docs/transformers/pr_15457/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(lq,"href","/docs/transformers/pr_15457/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(iq,"href","/docs/transformers/pr_15457/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(dq,"href","/docs/transformers/pr_15457/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(cq,"href","/docs/transformers/pr_15457/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(fq,"href","/docs/transformers/pr_15457/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(mq,"href","/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(gq,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(hq,"href","/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(pq,"href","/docs/transformers/pr_15457/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(_q,"href","/docs/transformers/pr_15457/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(uq,"href","/docs/transformers/pr_15457/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(bq,"href","/docs/transformers/pr_15457/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(vq,"href","/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(Fq,"href","/docs/transformers/pr_15457/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(Tq,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(Mq,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(Eq,"href","/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(C5,"id","transformers.AutoModelForMaskedLM"),d(C5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(C5,"href","#transformers.AutoModelForMaskedLM"),d(hd,"class","relative group"),d(Cq,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wq,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Aq,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yq,"href","/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(Lq,"href","/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(xq,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertForMaskedLM"),d(kq,"href","/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(Sq,"href","/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(Rq,"href","/docs/transformers/pr_15457/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(Bq,"href","/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(Pq,"href","/docs/transformers/pr_15457/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d($q,"href","/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(Iq,"href","/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(qq,"href","/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(Nq,"href","/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(jq,"href","/docs/transformers/pr_15457/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(Dq,"href","/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(Gq,"href","/docs/transformers/pr_15457/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(Oq,"href","/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(Vq,"href","/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(Xq,"href","/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(zq,"href","/docs/transformers/pr_15457/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(Qq,"href","/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(Wq,"href","/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(Hq,"href","/docs/transformers/pr_15457/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(Uq,"href","/docs/transformers/pr_15457/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(Jq,"href","/docs/transformers/pr_15457/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(Yq,"href","/docs/transformers/pr_15457/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(Kq,"href","/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(Zq,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(eN,"href","/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(oN,"href","/docs/transformers/pr_15457/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(rN,"href","/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(tN,"href","/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(aN,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(nN,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(sN,"href","/docs/transformers/pr_15457/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(l1,"id","transformers.AutoModelForSeq2SeqLM"),d(l1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l1,"href","#transformers.AutoModelForSeq2SeqLM"),d(ud,"class","relative group"),d(lN,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iN,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dN,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cN,"href","/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(fN,"href","/docs/transformers/pr_15457/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(mN,"href","/docs/transformers/pr_15457/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(gN,"href","/docs/transformers/pr_15457/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(hN,"href","/docs/transformers/pr_15457/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(pN,"href","/docs/transformers/pr_15457/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(_N,"href","/docs/transformers/pr_15457/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(uN,"href","/docs/transformers/pr_15457/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(bN,"href","/docs/transformers/pr_15457/en/model_doc/marian#transformers.MarianMTModel"),d(vN,"href","/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(FN,"href","/docs/transformers/pr_15457/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(TN,"href","/docs/transformers/pr_15457/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(MN,"href","/docs/transformers/pr_15457/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(EN,"href","/docs/transformers/pr_15457/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(CN,"href","/docs/transformers/pr_15457/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(wN,"href","/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(AN,"href","/docs/transformers/pr_15457/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(A1,"id","transformers.AutoModelForSequenceClassification"),d(A1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A1,"href","#transformers.AutoModelForSequenceClassification"),d(Fd,"class","relative group"),d(yN,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LN,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xN,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kN,"href","/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(SN,"href","/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartForSequenceClassification"),d(RN,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertForSequenceClassification"),d(BN,"href","/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(PN,"href","/docs/transformers/pr_15457/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d($N,"href","/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(IN,"href","/docs/transformers/pr_15457/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(qN,"href","/docs/transformers/pr_15457/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(NN,"href","/docs/transformers/pr_15457/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(jN,"href","/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(DN,"href","/docs/transformers/pr_15457/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(GN,"href","/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(ON,"href","/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(VN,"href","/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(XN,"href","/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(zN,"href","/docs/transformers/pr_15457/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(QN,"href","/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(WN,"href","/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(HN,"href","/docs/transformers/pr_15457/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(UN,"href","/docs/transformers/pr_15457/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(JN,"href","/docs/transformers/pr_15457/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(YN,"href","/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(KN,"href","/docs/transformers/pr_15457/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(ZN,"href","/docs/transformers/pr_15457/en/model_doc/led#transformers.LEDForSequenceClassification"),d(ej,"href","/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(oj,"href","/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(rj,"href","/docs/transformers/pr_15457/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(tj,"href","/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(aj,"href","/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(nj,"href","/docs/transformers/pr_15457/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(sj,"href","/docs/transformers/pr_15457/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(lj,"href","/docs/transformers/pr_15457/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(ij,"href","/docs/transformers/pr_15457/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(dj,"href","/docs/transformers/pr_15457/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(cj,"href","/docs/transformers/pr_15457/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(fj,"href","/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(mj,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(gj,"href","/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(hj,"href","/docs/transformers/pr_15457/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(pj,"href","/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(_j,"href","/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartForSequenceClassification"),d(uj,"href","/docs/transformers/pr_15457/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(bj,"href","/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(vj,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(Fj,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(Tj,"href","/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(Mj,"href","/docs/transformers/pr_15457/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(T4,"id","transformers.AutoModelForMultipleChoice"),d(T4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T4,"href","#transformers.AutoModelForMultipleChoice"),d(Ed,"class","relative group"),d(Ej,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Cj,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wj,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Aj,"href","/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(yj,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertForMultipleChoice"),d(Lj,"href","/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(xj,"href","/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(kj,"href","/docs/transformers/pr_15457/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(Sj,"href","/docs/transformers/pr_15457/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(Rj,"href","/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(Bj,"href","/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(Pj,"href","/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d($j,"href","/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(Ij,"href","/docs/transformers/pr_15457/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(qj,"href","/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(Nj,"href","/docs/transformers/pr_15457/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(jj,"href","/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(Dj,"href","/docs/transformers/pr_15457/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(Gj,"href","/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(Oj,"href","/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(Vj,"href","/docs/transformers/pr_15457/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(Xj,"href","/docs/transformers/pr_15457/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(zj,"href","/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(Qj,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(Wj,"href","/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(Hj,"href","/docs/transformers/pr_15457/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(Uj,"href","/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(Jj,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(Yj,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(Kj,"href","/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(Zj,"href","/docs/transformers/pr_15457/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Y4,"id","transformers.AutoModelForNextSentencePrediction"),d(Y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y4,"href","#transformers.AutoModelForNextSentencePrediction"),d(Ad,"class","relative group"),d(eD,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oD,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rD,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tD,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(aD,"href","/docs/transformers/pr_15457/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(nD,"href","/docs/transformers/pr_15457/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(sD,"href","/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(lD,"href","/docs/transformers/pr_15457/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ab,"id","transformers.AutoModelForTokenClassification"),d(ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ab,"href","#transformers.AutoModelForTokenClassification"),d(xd,"class","relative group"),d(iD,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dD,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cD,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fD,"href","/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(mD,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertForTokenClassification"),d(gD,"href","/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(hD,"href","/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(pD,"href","/docs/transformers/pr_15457/en/model_doc/canine#transformers.CanineForTokenClassification"),d(_D,"href","/docs/transformers/pr_15457/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(uD,"href","/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(bD,"href","/docs/transformers/pr_15457/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(vD,"href","/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(FD,"href","/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(TD,"href","/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(MD,"href","/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(ED,"href","/docs/transformers/pr_15457/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(CD,"href","/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(wD,"href","/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(AD,"href","/docs/transformers/pr_15457/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(yD,"href","/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(LD,"href","/docs/transformers/pr_15457/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(xD,"href","/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(kD,"href","/docs/transformers/pr_15457/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(SD,"href","/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(RD,"href","/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(BD,"href","/docs/transformers/pr_15457/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(PD,"href","/docs/transformers/pr_15457/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d($D,"href","/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(ID,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(qD,"href","/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(ND,"href","/docs/transformers/pr_15457/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(jD,"href","/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(DD,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(GD,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(OD,"href","/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(VD,"href","/docs/transformers/pr_15457/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jb,"id","transformers.AutoModelForQuestionAnswering"),d(jb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jb,"href","#transformers.AutoModelForQuestionAnswering"),d(Rd,"class","relative group"),d(XD,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zD,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QD,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WD,"href","/docs/transformers/pr_15457/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(HD,"href","/docs/transformers/pr_15457/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(UD,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(JD,"href","/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(YD,"href","/docs/transformers/pr_15457/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(KD,"href","/docs/transformers/pr_15457/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(ZD,"href","/docs/transformers/pr_15457/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(eG,"href","/docs/transformers/pr_15457/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(oG,"href","/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(rG,"href","/docs/transformers/pr_15457/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(tG,"href","/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(aG,"href","/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(nG,"href","/docs/transformers/pr_15457/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(sG,"href","/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(lG,"href","/docs/transformers/pr_15457/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(iG,"href","/docs/transformers/pr_15457/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(dG,"href","/docs/transformers/pr_15457/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(cG,"href","/docs/transformers/pr_15457/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(fG,"href","/docs/transformers/pr_15457/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(mG,"href","/docs/transformers/pr_15457/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(gG,"href","/docs/transformers/pr_15457/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(hG,"href","/docs/transformers/pr_15457/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(pG,"href","/docs/transformers/pr_15457/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(_G,"href","/docs/transformers/pr_15457/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(uG,"href","/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(bG,"href","/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(vG,"href","/docs/transformers/pr_15457/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(FG,"href","/docs/transformers/pr_15457/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(TG,"href","/docs/transformers/pr_15457/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(MG,"href","/docs/transformers/pr_15457/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(EG,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(CG,"href","/docs/transformers/pr_15457/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(wG,"href","/docs/transformers/pr_15457/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(AG,"href","/docs/transformers/pr_15457/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(yG,"href","/docs/transformers/pr_15457/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(LG,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(xG,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(kG,"href","/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(SG,"href","/docs/transformers/pr_15457/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(A2,"id","transformers.AutoModelForTableQuestionAnswering"),d(A2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A2,"href","#transformers.AutoModelForTableQuestionAnswering"),d($d,"class","relative group"),d(RG,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BG,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PG,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($G,"href","/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(x2,"id","transformers.AutoModelForImageClassification"),d(x2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x2,"href","#transformers.AutoModelForImageClassification"),d(Nd,"class","relative group"),d(IG,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qG,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NG,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jG,"href","/docs/transformers/pr_15457/en/model_doc/beit#transformers.BeitForImageClassification"),d(DG,"href","/docs/transformers/pr_15457/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(GG,"href","/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(OG,"href","/docs/transformers/pr_15457/en/model_doc/deit#transformers.DeiTForImageClassification"),d(VG,"href","/docs/transformers/pr_15457/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(XG,"href","/docs/transformers/pr_15457/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(zG,"href","/docs/transformers/pr_15457/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(QG,"href","/docs/transformers/pr_15457/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(WG,"href","/docs/transformers/pr_15457/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(HG,"href","/docs/transformers/pr_15457/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(UG,"href","/docs/transformers/pr_15457/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(JG,"href","/docs/transformers/pr_15457/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(YG,"href","/docs/transformers/pr_15457/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(KG,"href","/docs/transformers/pr_15457/en/model_doc/swin#transformers.SwinForImageClassification"),d(ZG,"href","/docs/transformers/pr_15457/en/model_doc/van#transformers.VanForImageClassification"),d(eO,"href","/docs/transformers/pr_15457/en/model_doc/vit#transformers.ViTForImageClassification"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(O2,"id","transformers.AutoModelForVision2Seq"),d(O2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O2,"href","#transformers.AutoModelForVision2Seq"),d(Gd,"class","relative group"),d(oO,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rO,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tO,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aO,"href","/docs/transformers/pr_15457/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(z2,"id","transformers.AutoModelForAudioClassification"),d(z2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z2,"href","#transformers.AutoModelForAudioClassification"),d(Xd,"class","relative group"),d(nO,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sO,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lO,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iO,"href","/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(dO,"href","/docs/transformers/pr_15457/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(cO,"href","/docs/transformers/pr_15457/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(fO,"href","/docs/transformers/pr_15457/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(mO,"href","/docs/transformers/pr_15457/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(gO,"href","/docs/transformers/pr_15457/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(hO,"href","/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(pO,"href","/docs/transformers/pr_15457/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ov,"id","transformers.AutoModelForAudioFrameClassification"),d(ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ov,"href","#transformers.AutoModelForAudioFrameClassification"),d(Wd,"class","relative group"),d(_O,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uO,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bO,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vO,"href","/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(FO,"href","/docs/transformers/pr_15457/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(TO,"href","/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(MO,"href","/docs/transformers/pr_15457/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lv,"id","transformers.AutoModelForCTC"),d(lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lv,"href","#transformers.AutoModelForCTC"),d(Jd,"class","relative group"),d(EO,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CO,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wO,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AO,"href","/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(yO,"href","/docs/transformers/pr_15457/en/model_doc/hubert#transformers.HubertForCTC"),d(LO,"href","/docs/transformers/pr_15457/en/model_doc/sew#transformers.SEWForCTC"),d(xO,"href","/docs/transformers/pr_15457/en/model_doc/sew-d#transformers.SEWDForCTC"),d(kO,"href","/docs/transformers/pr_15457/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(SO,"href","/docs/transformers/pr_15457/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(RO,"href","/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(BO,"href","/docs/transformers/pr_15457/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uv,"id","transformers.AutoModelForSpeechSeq2Seq"),d(uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uv,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Zd,"class","relative group"),d(PO,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($O,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IO,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qO,"href","/docs/transformers/pr_15457/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(NO,"href","/docs/transformers/pr_15457/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tv,"id","transformers.AutoModelForAudioXVector"),d(Tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Tv,"href","#transformers.AutoModelForAudioXVector"),d(rc,"class","relative group"),d(jO,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DO,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GO,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(OO,"href","/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(VO,"href","/docs/transformers/pr_15457/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(XO,"href","/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(zO,"href","/docs/transformers/pr_15457/en/model_doc/wavlm#transformers.WavLMForXVector"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yv,"id","transformers.AutoModelForMaskedImageModeling"),d(yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yv,"href","#transformers.AutoModelForMaskedImageModeling"),d(nc,"class","relative group"),d(QO,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WO,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HO,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UO,"href","/docs/transformers/pr_15457/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(JO,"href","/docs/transformers/pr_15457/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(YO,"href","/docs/transformers/pr_15457/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rv,"id","transformers.AutoModelForObjectDetection"),d(Rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Rv,"href","#transformers.AutoModelForObjectDetection"),d(dc,"class","relative group"),d(KO,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZO,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eV,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oV,"href","/docs/transformers/pr_15457/en/model_doc/detr#transformers.DetrForObjectDetection"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($v,"id","transformers.AutoModelForImageSegmentation"),d($v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($v,"href","#transformers.AutoModelForImageSegmentation"),d(mc,"class","relative group"),d(rV,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tV,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aV,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nV,"href","/docs/transformers/pr_15457/en/model_doc/detr#transformers.DetrForSegmentation"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nv,"id","transformers.AutoModelForSemanticSegmentation"),d(Nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Nv,"href","#transformers.AutoModelForSemanticSegmentation"),d(pc,"class","relative group"),d(sV,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lV,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iV,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dV,"href","/docs/transformers/pr_15457/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(cV,"href","/docs/transformers/pr_15457/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(fV,"href","/docs/transformers/pr_15457/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(mV,"href","/docs/transformers/pr_15457/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xv,"id","transformers.AutoModelForInstanceSegmentation"),d(Xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xv,"href","#transformers.AutoModelForInstanceSegmentation"),d(bc,"class","relative group"),d(gV,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hV,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pV,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_V,"href","/docs/transformers/pr_15457/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wv,"id","transformers.TFAutoModel"),d(Wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Wv,"href","#transformers.TFAutoModel"),d(Tc,"class","relative group"),d(uV,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bV,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vV,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FV,"href","/docs/transformers/pr_15457/en/model_doc/albert#transformers.TFAlbertModel"),d(TV,"href","/docs/transformers/pr_15457/en/model_doc/bart#transformers.TFBartModel"),d(MV,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.TFBertModel"),d(EV,"href","/docs/transformers/pr_15457/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(CV,"href","/docs/transformers/pr_15457/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(wV,"href","/docs/transformers/pr_15457/en/model_doc/camembert#transformers.TFCamembertModel"),d(AV,"href","/docs/transformers/pr_15457/en/model_doc/clip#transformers.TFCLIPModel"),d(yV,"href","/docs/transformers/pr_15457/en/model_doc/convbert#transformers.TFConvBertModel"),d(LV,"href","/docs/transformers/pr_15457/en/model_doc/convnext#transformers.TFConvNextModel"),d(xV,"href","/docs/transformers/pr_15457/en/model_doc/ctrl#transformers.TFCTRLModel"),d(kV,"href","/docs/transformers/pr_15457/en/model_doc/deberta#transformers.TFDebertaModel"),d(SV,"href","/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(RV,"href","/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(BV,"href","/docs/transformers/pr_15457/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(PV,"href","/docs/transformers/pr_15457/en/model_doc/electra#transformers.TFElectraModel"),d($V,"href","/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(IV,"href","/docs/transformers/pr_15457/en/model_doc/funnel#transformers.TFFunnelModel"),d(qV,"href","/docs/transformers/pr_15457/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(NV,"href","/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.TFGPT2Model"),d(jV,"href","/docs/transformers/pr_15457/en/model_doc/gptj#transformers.TFGPTJModel"),d(DV,"href","/docs/transformers/pr_15457/en/model_doc/hubert#transformers.TFHubertModel"),d(GV,"href","/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(OV,"href","/docs/transformers/pr_15457/en/model_doc/led#transformers.TFLEDModel"),d(VV,"href","/docs/transformers/pr_15457/en/model_doc/longformer#transformers.TFLongformerModel"),d(XV,"href","/docs/transformers/pr_15457/en/model_doc/lxmert#transformers.TFLxmertModel"),d(zV,"href","/docs/transformers/pr_15457/en/model_doc/marian#transformers.TFMarianModel"),d(QV,"href","/docs/transformers/pr_15457/en/model_doc/mbart#transformers.TFMBartModel"),d(WV,"href","/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(HV,"href","/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.TFMPNetModel"),d(UV,"href","/docs/transformers/pr_15457/en/model_doc/mt5#transformers.TFMT5Model"),d(JV,"href","/docs/transformers/pr_15457/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(YV,"href","/docs/transformers/pr_15457/en/model_doc/pegasus#transformers.TFPegasusModel"),d(KV,"href","/docs/transformers/pr_15457/en/model_doc/rembert#transformers.TFRemBertModel"),d(ZV,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.TFRobertaModel"),d(eX,"href","/docs/transformers/pr_15457/en/model_doc/roformer#transformers.TFRoFormerModel"),d(oX,"href","/docs/transformers/pr_15457/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(rX,"href","/docs/transformers/pr_15457/en/model_doc/t5#transformers.TFT5Model"),d(tX,"href","/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TFTapasModel"),d(aX,"href","/docs/transformers/pr_15457/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(nX,"href","/docs/transformers/pr_15457/en/model_doc/vit#transformers.TFViTModel"),d(sX,"href","/docs/transformers/pr_15457/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(lX,"href","/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(iX,"href","/docs/transformers/pr_15457/en/model_doc/xlm#transformers.TFXLMModel"),d(dX,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(cX,"href","/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.TFXLNetModel"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qF,"id","transformers.TFAutoModelForPreTraining"),d(qF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qF,"href","#transformers.TFAutoModelForPreTraining"),d(Cc,"class","relative group"),d(fX,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mX,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gX,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hX,"href","/docs/transformers/pr_15457/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(pX,"href","/docs/transformers/pr_15457/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(_X,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.TFBertForPreTraining"),d(uX,"href","/docs/transformers/pr_15457/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(bX,"href","/docs/transformers/pr_15457/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(vX,"href","/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(FX,"href","/docs/transformers/pr_15457/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(TX,"href","/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(MX,"href","/docs/transformers/pr_15457/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(EX,"href","/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(CX,"href","/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(wX,"href","/docs/transformers/pr_15457/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(AX,"href","/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(yX,"href","/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(LX,"href","/docs/transformers/pr_15457/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(xX,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(kX,"href","/docs/transformers/pr_15457/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(SX,"href","/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(RX,"href","/docs/transformers/pr_15457/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(BX,"href","/docs/transformers/pr_15457/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(PX,"href","/docs/transformers/pr_15457/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d($X,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(IX,"href","/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lT,"id","transformers.TFAutoModelForCausalLM"),d(lT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lT,"href","#transformers.TFAutoModelForCausalLM"),d(yc,"class","relative group"),d(qX,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NX,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jX,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DX,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(GX,"href","/docs/transformers/pr_15457/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(OX,"href","/docs/transformers/pr_15457/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(VX,"href","/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(XX,"href","/docs/transformers/pr_15457/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(zX,"href","/docs/transformers/pr_15457/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(QX,"href","/docs/transformers/pr_15457/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(WX,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(HX,"href","/docs/transformers/pr_15457/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(UX,"href","/docs/transformers/pr_15457/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(JX,"href","/docs/transformers/pr_15457/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(YX,"href","/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FT,"id","transformers.TFAutoModelForImageClassification"),d(FT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(FT,"href","#transformers.TFAutoModelForImageClassification"),d(kc,"class","relative group"),d(KX,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZX,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ez,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oz,"href","/docs/transformers/pr_15457/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(rz,"href","/docs/transformers/pr_15457/en/model_doc/vit#transformers.TFViTForImageClassification"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ET,"id","transformers.TFAutoModelForMaskedLM"),d(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ET,"href","#transformers.TFAutoModelForMaskedLM"),d(Bc,"class","relative group"),d(tz,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(az,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nz,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sz,"href","/docs/transformers/pr_15457/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(lz,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(iz,"href","/docs/transformers/pr_15457/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(dz,"href","/docs/transformers/pr_15457/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(cz,"href","/docs/transformers/pr_15457/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(fz,"href","/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(mz,"href","/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(gz,"href","/docs/transformers/pr_15457/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(hz,"href","/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(pz,"href","/docs/transformers/pr_15457/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(_z,"href","/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(uz,"href","/docs/transformers/pr_15457/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(bz,"href","/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(vz,"href","/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(Fz,"href","/docs/transformers/pr_15457/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(Tz,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(Mz,"href","/docs/transformers/pr_15457/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(Ez,"href","/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(Cz,"href","/docs/transformers/pr_15457/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(wz,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XT,"id","transformers.TFAutoModelForSeq2SeqLM"),d(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(XT,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Ic,"class","relative group"),d(Az,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yz,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Lz,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xz,"href","/docs/transformers/pr_15457/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(kz,"href","/docs/transformers/pr_15457/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(Sz,"href","/docs/transformers/pr_15457/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(Rz,"href","/docs/transformers/pr_15457/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(Bz,"href","/docs/transformers/pr_15457/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(Pz,"href","/docs/transformers/pr_15457/en/model_doc/marian#transformers.TFMarianMTModel"),d($z,"href","/docs/transformers/pr_15457/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(Iz,"href","/docs/transformers/pr_15457/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(qz,"href","/docs/transformers/pr_15457/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(Nz,"href","/docs/transformers/pr_15457/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(o7,"id","transformers.TFAutoModelForSequenceClassification"),d(o7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o7,"href","#transformers.TFAutoModelForSequenceClassification"),d(jc,"class","relative group"),d(jz,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Dz,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Gz,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Oz,"href","/docs/transformers/pr_15457/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(Vz,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(Xz,"href","/docs/transformers/pr_15457/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(zz,"href","/docs/transformers/pr_15457/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(Qz,"href","/docs/transformers/pr_15457/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(Wz,"href","/docs/transformers/pr_15457/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(Hz,"href","/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(Uz,"href","/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(Jz,"href","/docs/transformers/pr_15457/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(Yz,"href","/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(Kz,"href","/docs/transformers/pr_15457/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(Zz,"href","/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(eQ,"href","/docs/transformers/pr_15457/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(oQ,"href","/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(rQ,"href","/docs/transformers/pr_15457/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(tQ,"href","/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(aQ,"href","/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(nQ,"href","/docs/transformers/pr_15457/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(sQ,"href","/docs/transformers/pr_15457/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(lQ,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(iQ,"href","/docs/transformers/pr_15457/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(dQ,"href","/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(cQ,"href","/docs/transformers/pr_15457/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(fQ,"href","/docs/transformers/pr_15457/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(mQ,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(gQ,"href","/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(L7,"id","transformers.TFAutoModelForMultipleChoice"),d(L7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L7,"href","#transformers.TFAutoModelForMultipleChoice"),d(Oc,"class","relative group"),d(hQ,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pQ,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_Q,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uQ,"href","/docs/transformers/pr_15457/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(bQ,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(vQ,"href","/docs/transformers/pr_15457/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(FQ,"href","/docs/transformers/pr_15457/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(TQ,"href","/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(MQ,"href","/docs/transformers/pr_15457/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(EQ,"href","/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(CQ,"href","/docs/transformers/pr_15457/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(wQ,"href","/docs/transformers/pr_15457/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(AQ,"href","/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(yQ,"href","/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(LQ,"href","/docs/transformers/pr_15457/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(xQ,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(kQ,"href","/docs/transformers/pr_15457/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(SQ,"href","/docs/transformers/pr_15457/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(RQ,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(BQ,"href","/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Q7,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(Q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q7,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(zc,"class","relative group"),d(PQ,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($Q,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IQ,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qQ,"href","/docs/transformers/pr_15457/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(H7,"id","transformers.TFAutoModelForTokenClassification"),d(H7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H7,"href","#transformers.TFAutoModelForTokenClassification"),d(Hc,"class","relative group"),d(NQ,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jQ,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DQ,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GQ,"href","/docs/transformers/pr_15457/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(OQ,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(VQ,"href","/docs/transformers/pr_15457/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(XQ,"href","/docs/transformers/pr_15457/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(zQ,"href","/docs/transformers/pr_15457/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(QQ,"href","/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(WQ,"href","/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(HQ,"href","/docs/transformers/pr_15457/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(UQ,"href","/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(JQ,"href","/docs/transformers/pr_15457/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(YQ,"href","/docs/transformers/pr_15457/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(KQ,"href","/docs/transformers/pr_15457/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(ZQ,"href","/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(eW,"href","/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(oW,"href","/docs/transformers/pr_15457/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(rW,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(tW,"href","/docs/transformers/pr_15457/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(aW,"href","/docs/transformers/pr_15457/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(nW,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(sW,"href","/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pM,"id","transformers.TFAutoModelForQuestionAnswering"),d(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pM,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Yc,"class","relative group"),d(lW,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iW,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dW,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cW,"href","/docs/transformers/pr_15457/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(fW,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(mW,"href","/docs/transformers/pr_15457/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(gW,"href","/docs/transformers/pr_15457/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(hW,"href","/docs/transformers/pr_15457/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(pW,"href","/docs/transformers/pr_15457/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(_W,"href","/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(uW,"href","/docs/transformers/pr_15457/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(bW,"href","/docs/transformers/pr_15457/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(vW,"href","/docs/transformers/pr_15457/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(FW,"href","/docs/transformers/pr_15457/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(TW,"href","/docs/transformers/pr_15457/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(MW,"href","/docs/transformers/pr_15457/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(EW,"href","/docs/transformers/pr_15457/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(CW,"href","/docs/transformers/pr_15457/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(wW,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(AW,"href","/docs/transformers/pr_15457/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(yW,"href","/docs/transformers/pr_15457/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(LW,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(xW,"href","/docs/transformers/pr_15457/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IM,"id","transformers.TFAutoModelForVision2Seq"),d(IM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(IM,"href","#transformers.TFAutoModelForVision2Seq"),d(ef,"class","relative group"),d(kW,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SW,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RW,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BW,"href","/docs/transformers/pr_15457/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(NM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(NM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(NM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(tf,"class","relative group"),d(PW,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($W,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IW,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qW,"href","/docs/transformers/pr_15457/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DM,"id","transformers.FlaxAutoModel"),d(DM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(DM,"href","#transformers.FlaxAutoModel"),d(sf,"class","relative group"),d(NW,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jW,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DW,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GW,"href","/docs/transformers/pr_15457/en/model_doc/albert#transformers.FlaxAlbertModel"),d(OW,"href","/docs/transformers/pr_15457/en/model_doc/bart#transformers.FlaxBartModel"),d(VW,"href","/docs/transformers/pr_15457/en/model_doc/beit#transformers.FlaxBeitModel"),d(XW,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.FlaxBertModel"),d(zW,"href","/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(QW,"href","/docs/transformers/pr_15457/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(WW,"href","/docs/transformers/pr_15457/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(HW,"href","/docs/transformers/pr_15457/en/model_doc/clip#transformers.FlaxCLIPModel"),d(UW,"href","/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(JW,"href","/docs/transformers/pr_15457/en/model_doc/electra#transformers.FlaxElectraModel"),d(YW,"href","/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(KW,"href","/docs/transformers/pr_15457/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(ZW,"href","/docs/transformers/pr_15457/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(eH,"href","/docs/transformers/pr_15457/en/model_doc/marian#transformers.FlaxMarianModel"),d(oH,"href","/docs/transformers/pr_15457/en/model_doc/mbart#transformers.FlaxMBartModel"),d(rH,"href","/docs/transformers/pr_15457/en/model_doc/mt5#transformers.FlaxMT5Model"),d(tH,"href","/docs/transformers/pr_15457/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(aH,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(nH,"href","/docs/transformers/pr_15457/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(sH,"href","/docs/transformers/pr_15457/en/model_doc/t5#transformers.FlaxT5Model"),d(lH,"href","/docs/transformers/pr_15457/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(iH,"href","/docs/transformers/pr_15457/en/model_doc/vit#transformers.FlaxViTModel"),d(dH,"href","/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(cH,"href","/docs/transformers/pr_15457/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(fH,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mE,"id","transformers.FlaxAutoModelForCausalLM"),d(mE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mE,"href","#transformers.FlaxAutoModelForCausalLM"),d(cf,"class","relative group"),d(mH,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gH,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hH,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pH,"href","/docs/transformers/pr_15457/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(_H,"href","/docs/transformers/pr_15457/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(uH,"href","/docs/transformers/pr_15457/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(bH,"href","/docs/transformers/pr_15457/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(vH,"href","/docs/transformers/pr_15457/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bE,"id","transformers.FlaxAutoModelForPreTraining"),d(bE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bE,"href","#transformers.FlaxAutoModelForPreTraining"),d(gf,"class","relative group"),d(FH,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TH,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MH,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EH,"href","/docs/transformers/pr_15457/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(CH,"href","/docs/transformers/pr_15457/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(wH,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(AH,"href","/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(yH,"href","/docs/transformers/pr_15457/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(LH,"href","/docs/transformers/pr_15457/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(xH,"href","/docs/transformers/pr_15457/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(kH,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(SH,"href","/docs/transformers/pr_15457/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(RH,"href","/docs/transformers/pr_15457/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(BH,"href","/docs/transformers/pr_15457/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(PH,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SE,"id","transformers.FlaxAutoModelForMaskedLM"),d(SE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(SE,"href","#transformers.FlaxAutoModelForMaskedLM"),d(_f,"class","relative group"),d($H,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(IH,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qH,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(NH,"href","/docs/transformers/pr_15457/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(jH,"href","/docs/transformers/pr_15457/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(DH,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(GH,"href","/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(OH,"href","/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(VH,"href","/docs/transformers/pr_15457/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(XH,"href","/docs/transformers/pr_15457/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(zH,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(QH,"href","/docs/transformers/pr_15457/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(WH,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(OE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(OE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(OE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(vf,"class","relative group"),d(HH,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UH,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JH,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(YH,"href","/docs/transformers/pr_15457/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(KH,"href","/docs/transformers/pr_15457/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(ZH,"href","/docs/transformers/pr_15457/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(eU,"href","/docs/transformers/pr_15457/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(oU,"href","/docs/transformers/pr_15457/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(rU,"href","/docs/transformers/pr_15457/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(tU,"href","/docs/transformers/pr_15457/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(aU,"href","/docs/transformers/pr_15457/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(nU,"href","/docs/transformers/pr_15457/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(KE,"id","transformers.FlaxAutoModelForSequenceClassification"),d(KE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(KE,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(Mf,"class","relative group"),d(sU,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lU,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iU,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dU,"href","/docs/transformers/pr_15457/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(cU,"href","/docs/transformers/pr_15457/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(fU,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(mU,"href","/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(gU,"href","/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(hU,"href","/docs/transformers/pr_15457/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(pU,"href","/docs/transformers/pr_15457/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(_U,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(uU,"href","/docs/transformers/pr_15457/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(bU,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(d3,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(d3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(wf,"class","relative group"),d(vU,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FU,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TU,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MU,"href","/docs/transformers/pr_15457/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(EU,"href","/docs/transformers/pr_15457/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(CU,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(wU,"href","/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(AU,"href","/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(yU,"href","/docs/transformers/pr_15457/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(LU,"href","/docs/transformers/pr_15457/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(xU,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(kU,"href","/docs/transformers/pr_15457/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(SU,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(F3,"id","transformers.FlaxAutoModelForTokenClassification"),d(F3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(F3,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Lf,"class","relative group"),d(RU,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BU,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PU,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($U,"href","/docs/transformers/pr_15457/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(IU,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(qU,"href","/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(NU,"href","/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(jU,"href","/docs/transformers/pr_15457/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(DU,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(GU,"href","/docs/transformers/pr_15457/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(OU,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(x3,"id","transformers.FlaxAutoModelForMultipleChoice"),d(x3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x3,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Sf,"class","relative group"),d(VU,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XU,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zU,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(QU,"href","/docs/transformers/pr_15457/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(WU,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(HU,"href","/docs/transformers/pr_15457/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(UU,"href","/docs/transformers/pr_15457/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(JU,"href","/docs/transformers/pr_15457/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(YU,"href","/docs/transformers/pr_15457/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(KU,"href","/docs/transformers/pr_15457/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(ZU,"href","/docs/transformers/pr_15457/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(N3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Pf,"class","relative group"),d(eJ,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oJ,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rJ,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tJ,"href","/docs/transformers/pr_15457/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(D3,"id","transformers.FlaxAutoModelForImageClassification"),d(D3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(D3,"href","#transformers.FlaxAutoModelForImageClassification"),d(qf,"class","relative group"),d(aJ,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nJ,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sJ,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lJ,"href","/docs/transformers/pr_15457/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(iJ,"href","/docs/transformers/pr_15457/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(V3,"id","transformers.FlaxAutoModelForVision2Seq"),d(V3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V3,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Df,"class","relative group"),d(dJ,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cJ,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fJ,"href","/docs/transformers/pr_15457/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mJ,"href","/docs/transformers/pr_15457/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(c,u){e(document.head,oe),b(c,co,u),b(c,me,u),e(me,Ae),e(Ae,io),g(_e,io,null),e(me,Ce),e(me,Xo),e(Xo,zi),b(c,zf,u),b(c,fa,u),e(fa,Qi),e(fa,Wi),e(Wi,zC),e(fa,Qf),b(c,Se,u),b(c,fo,u),e(fo,Hi),e(fo,On),e(On,QC),e(fo,Vn),e(fo,Xn),e(Xn,WC),e(fo,Ui),e(fo,zn),e(zn,HC),e(fo,Ji),b(c,Wf,u),g(Da,c,u),b(c,mo,u),b(c,ve,u),e(ve,z9),e(ve,Yi),e(Yi,Q9),e(ve,W9),b(c,zo,u),b(c,Ga,u),e(Ga,H9),e(Ga,Hf),e(Hf,U9),e(Ga,mNe),b(c,ZBe,u),b(c,Ki,u),e(Ki,Uf),e(Uf,nK),g(UC,nK,null),e(Ki,gNe),e(Ki,sK),e(sK,hNe),b(c,ePe,u),b(c,Qn,u),e(Qn,pNe),e(Qn,lK),e(lK,_Ne),e(Qn,uNe),e(Qn,iK),e(iK,bNe),e(Qn,vNe),b(c,oPe,u),g(JC,c,u),b(c,rPe,u),b(c,J9,u),e(J9,FNe),b(c,tPe,u),g(Jf,c,u),b(c,aPe,u),b(c,Zi,u),e(Zi,Yf),e(Yf,dK),g(YC,dK,null),e(Zi,TNe),e(Zi,cK),e(cK,MNe),b(c,nPe,u),b(c,Qo,u),g(KC,Qo,null),e(Qo,ENe),e(Qo,ZC),e(ZC,CNe),e(ZC,Y9),e(Y9,wNe),e(ZC,ANe),e(Qo,yNe),e(Qo,e6),e(e6,LNe),e(e6,fK),e(fK,xNe),e(e6,kNe),e(Qo,SNe),e(Qo,go),g(o6,go,null),e(go,RNe),e(go,mK),e(mK,BNe),e(go,PNe),e(go,ed),e(ed,$Ne),e(ed,gK),e(gK,INe),e(ed,qNe),e(ed,hK),e(hK,NNe),e(ed,jNe),e(go,DNe),e(go,v),e(v,Kf),e(Kf,pK),e(pK,GNe),e(Kf,ONe),e(Kf,K9),e(K9,VNe),e(Kf,XNe),e(v,zNe),e(v,Zf),e(Zf,_K),e(_K,QNe),e(Zf,WNe),e(Zf,Z9),e(Z9,HNe),e(Zf,UNe),e(v,JNe),e(v,em),e(em,uK),e(uK,YNe),e(em,KNe),e(em,ex),e(ex,ZNe),e(em,eje),e(v,oje),e(v,om),e(om,bK),e(bK,rje),e(om,tje),e(om,ox),e(ox,aje),e(om,nje),e(v,sje),e(v,rm),e(rm,vK),e(vK,lje),e(rm,ije),e(rm,rx),e(rx,dje),e(rm,cje),e(v,fje),e(v,tm),e(tm,FK),e(FK,mje),e(tm,gje),e(tm,tx),e(tx,hje),e(tm,pje),e(v,_je),e(v,am),e(am,TK),e(TK,uje),e(am,bje),e(am,ax),e(ax,vje),e(am,Fje),e(v,Tje),e(v,nm),e(nm,MK),e(MK,Mje),e(nm,Eje),e(nm,nx),e(nx,Cje),e(nm,wje),e(v,Aje),e(v,sm),e(sm,EK),e(EK,yje),e(sm,Lje),e(sm,sx),e(sx,xje),e(sm,kje),e(v,Sje),e(v,lm),e(lm,CK),e(CK,Rje),e(lm,Bje),e(lm,lx),e(lx,Pje),e(lm,$je),e(v,Ije),e(v,im),e(im,wK),e(wK,qje),e(im,Nje),e(im,ix),e(ix,jje),e(im,Dje),e(v,Gje),e(v,dm),e(dm,AK),e(AK,Oje),e(dm,Vje),e(dm,dx),e(dx,Xje),e(dm,zje),e(v,Qje),e(v,cm),e(cm,yK),e(yK,Wje),e(cm,Hje),e(cm,cx),e(cx,Uje),e(cm,Jje),e(v,Yje),e(v,fm),e(fm,LK),e(LK,Kje),e(fm,Zje),e(fm,fx),e(fx,eDe),e(fm,oDe),e(v,rDe),e(v,mm),e(mm,xK),e(xK,tDe),e(mm,aDe),e(mm,mx),e(mx,nDe),e(mm,sDe),e(v,lDe),e(v,gm),e(gm,kK),e(kK,iDe),e(gm,dDe),e(gm,gx),e(gx,cDe),e(gm,fDe),e(v,mDe),e(v,hm),e(hm,SK),e(SK,gDe),e(hm,hDe),e(hm,hx),e(hx,pDe),e(hm,_De),e(v,uDe),e(v,pm),e(pm,RK),e(RK,bDe),e(pm,vDe),e(pm,px),e(px,FDe),e(pm,TDe),e(v,MDe),e(v,_m),e(_m,BK),e(BK,EDe),e(_m,CDe),e(_m,_x),e(_x,wDe),e(_m,ADe),e(v,yDe),e(v,um),e(um,PK),e(PK,LDe),e(um,xDe),e(um,ux),e(ux,kDe),e(um,SDe),e(v,RDe),e(v,bm),e(bm,$K),e($K,BDe),e(bm,PDe),e(bm,bx),e(bx,$De),e(bm,IDe),e(v,qDe),e(v,vm),e(vm,IK),e(IK,NDe),e(vm,jDe),e(vm,vx),e(vx,DDe),e(vm,GDe),e(v,ODe),e(v,Fm),e(Fm,qK),e(qK,VDe),e(Fm,XDe),e(Fm,Fx),e(Fx,zDe),e(Fm,QDe),e(v,WDe),e(v,Tm),e(Tm,NK),e(NK,HDe),e(Tm,UDe),e(Tm,Tx),e(Tx,JDe),e(Tm,YDe),e(v,KDe),e(v,Mm),e(Mm,jK),e(jK,ZDe),e(Mm,eGe),e(Mm,Mx),e(Mx,oGe),e(Mm,rGe),e(v,tGe),e(v,Em),e(Em,DK),e(DK,aGe),e(Em,nGe),e(Em,Ex),e(Ex,sGe),e(Em,lGe),e(v,iGe),e(v,Cm),e(Cm,GK),e(GK,dGe),e(Cm,cGe),e(Cm,Cx),e(Cx,fGe),e(Cm,mGe),e(v,gGe),e(v,wm),e(wm,OK),e(OK,hGe),e(wm,pGe),e(wm,wx),e(wx,_Ge),e(wm,uGe),e(v,bGe),e(v,Am),e(Am,VK),e(VK,vGe),e(Am,FGe),e(Am,Ax),e(Ax,TGe),e(Am,MGe),e(v,EGe),e(v,ym),e(ym,XK),e(XK,CGe),e(ym,wGe),e(ym,yx),e(yx,AGe),e(ym,yGe),e(v,LGe),e(v,Lm),e(Lm,zK),e(zK,xGe),e(Lm,kGe),e(Lm,Lx),e(Lx,SGe),e(Lm,RGe),e(v,BGe),e(v,xm),e(xm,QK),e(QK,PGe),e(xm,$Ge),e(xm,xx),e(xx,IGe),e(xm,qGe),e(v,NGe),e(v,km),e(km,WK),e(WK,jGe),e(km,DGe),e(km,kx),e(kx,GGe),e(km,OGe),e(v,VGe),e(v,Sm),e(Sm,HK),e(HK,XGe),e(Sm,zGe),e(Sm,Sx),e(Sx,QGe),e(Sm,WGe),e(v,HGe),e(v,Rm),e(Rm,UK),e(UK,UGe),e(Rm,JGe),e(Rm,Rx),e(Rx,YGe),e(Rm,KGe),e(v,ZGe),e(v,Bm),e(Bm,JK),e(JK,eOe),e(Bm,oOe),e(Bm,Bx),e(Bx,rOe),e(Bm,tOe),e(v,aOe),e(v,Pm),e(Pm,YK),e(YK,nOe),e(Pm,sOe),e(Pm,Px),e(Px,lOe),e(Pm,iOe),e(v,dOe),e(v,$m),e($m,KK),e(KK,cOe),e($m,fOe),e($m,$x),e($x,mOe),e($m,gOe),e(v,hOe),e(v,Im),e(Im,ZK),e(ZK,pOe),e(Im,_Oe),e(Im,Ix),e(Ix,uOe),e(Im,bOe),e(v,vOe),e(v,qm),e(qm,eZ),e(eZ,FOe),e(qm,TOe),e(qm,qx),e(qx,MOe),e(qm,EOe),e(v,COe),e(v,Nm),e(Nm,oZ),e(oZ,wOe),e(Nm,AOe),e(Nm,Nx),e(Nx,yOe),e(Nm,LOe),e(v,xOe),e(v,jm),e(jm,rZ),e(rZ,kOe),e(jm,SOe),e(jm,jx),e(jx,ROe),e(jm,BOe),e(v,POe),e(v,Dm),e(Dm,tZ),e(tZ,$Oe),e(Dm,IOe),e(Dm,Dx),e(Dx,qOe),e(Dm,NOe),e(v,jOe),e(v,Gm),e(Gm,aZ),e(aZ,DOe),e(Gm,GOe),e(Gm,Gx),e(Gx,OOe),e(Gm,VOe),e(v,XOe),e(v,Om),e(Om,nZ),e(nZ,zOe),e(Om,QOe),e(Om,Ox),e(Ox,WOe),e(Om,HOe),e(v,UOe),e(v,Vm),e(Vm,sZ),e(sZ,JOe),e(Vm,YOe),e(Vm,Vx),e(Vx,KOe),e(Vm,ZOe),e(v,eVe),e(v,Xm),e(Xm,lZ),e(lZ,oVe),e(Xm,rVe),e(Xm,Xx),e(Xx,tVe),e(Xm,aVe),e(v,nVe),e(v,zm),e(zm,iZ),e(iZ,sVe),e(zm,lVe),e(zm,zx),e(zx,iVe),e(zm,dVe),e(v,cVe),e(v,Qm),e(Qm,dZ),e(dZ,fVe),e(Qm,mVe),e(Qm,Qx),e(Qx,gVe),e(Qm,hVe),e(v,pVe),e(v,Wm),e(Wm,cZ),e(cZ,_Ve),e(Wm,uVe),e(Wm,Wx),e(Wx,bVe),e(Wm,vVe),e(v,FVe),e(v,Hm),e(Hm,fZ),e(fZ,TVe),e(Hm,MVe),e(Hm,Hx),e(Hx,EVe),e(Hm,CVe),e(v,wVe),e(v,Um),e(Um,mZ),e(mZ,AVe),e(Um,yVe),e(Um,Ux),e(Ux,LVe),e(Um,xVe),e(v,kVe),e(v,Jm),e(Jm,gZ),e(gZ,SVe),e(Jm,RVe),e(Jm,Jx),e(Jx,BVe),e(Jm,PVe),e(v,$Ve),e(v,Ym),e(Ym,hZ),e(hZ,IVe),e(Ym,qVe),e(Ym,Yx),e(Yx,NVe),e(Ym,jVe),e(v,DVe),e(v,Km),e(Km,pZ),e(pZ,GVe),e(Km,OVe),e(Km,Kx),e(Kx,VVe),e(Km,XVe),e(v,zVe),e(v,Zm),e(Zm,_Z),e(_Z,QVe),e(Zm,WVe),e(Zm,Zx),e(Zx,HVe),e(Zm,UVe),e(v,JVe),e(v,eg),e(eg,uZ),e(uZ,YVe),e(eg,KVe),e(eg,ek),e(ek,ZVe),e(eg,eXe),e(v,oXe),e(v,og),e(og,bZ),e(bZ,rXe),e(og,tXe),e(og,ok),e(ok,aXe),e(og,nXe),e(v,sXe),e(v,rg),e(rg,vZ),e(vZ,lXe),e(rg,iXe),e(rg,rk),e(rk,dXe),e(rg,cXe),e(v,fXe),e(v,tg),e(tg,FZ),e(FZ,mXe),e(tg,gXe),e(tg,tk),e(tk,hXe),e(tg,pXe),e(v,_Xe),e(v,ag),e(ag,TZ),e(TZ,uXe),e(ag,bXe),e(ag,ak),e(ak,vXe),e(ag,FXe),e(v,TXe),e(v,ng),e(ng,MZ),e(MZ,MXe),e(ng,EXe),e(ng,nk),e(nk,CXe),e(ng,wXe),e(v,AXe),e(v,sg),e(sg,EZ),e(EZ,yXe),e(sg,LXe),e(sg,sk),e(sk,xXe),e(sg,kXe),e(v,SXe),e(v,lg),e(lg,CZ),e(CZ,RXe),e(lg,BXe),e(lg,lk),e(lk,PXe),e(lg,$Xe),e(v,IXe),e(v,ig),e(ig,wZ),e(wZ,qXe),e(ig,NXe),e(ig,ik),e(ik,jXe),e(ig,DXe),e(v,GXe),e(v,dg),e(dg,AZ),e(AZ,OXe),e(dg,VXe),e(dg,dk),e(dk,XXe),e(dg,zXe),e(v,QXe),e(v,cg),e(cg,yZ),e(yZ,WXe),e(cg,HXe),e(cg,ck),e(ck,UXe),e(cg,JXe),e(v,YXe),e(v,fg),e(fg,LZ),e(LZ,KXe),e(fg,ZXe),e(fg,fk),e(fk,eze),e(fg,oze),e(v,rze),e(v,mg),e(mg,xZ),e(xZ,tze),e(mg,aze),e(mg,mk),e(mk,nze),e(mg,sze),e(v,lze),e(v,gg),e(gg,kZ),e(kZ,ize),e(gg,dze),e(gg,gk),e(gk,cze),e(gg,fze),e(v,mze),e(v,hg),e(hg,SZ),e(SZ,gze),e(hg,hze),e(hg,hk),e(hk,pze),e(hg,_ze),e(v,uze),e(v,pg),e(pg,RZ),e(RZ,bze),e(pg,vze),e(pg,pk),e(pk,Fze),e(pg,Tze),e(v,Mze),e(v,_g),e(_g,BZ),e(BZ,Eze),e(_g,Cze),e(_g,_k),e(_k,wze),e(_g,Aze),e(v,yze),e(v,ug),e(ug,PZ),e(PZ,Lze),e(ug,xze),e(ug,uk),e(uk,kze),e(ug,Sze),e(v,Rze),e(v,bg),e(bg,$Z),e($Z,Bze),e(bg,Pze),e(bg,bk),e(bk,$ze),e(bg,Ize),e(v,qze),e(v,vg),e(vg,IZ),e(IZ,Nze),e(vg,jze),e(vg,vk),e(vk,Dze),e(vg,Gze),e(v,Oze),e(v,Fg),e(Fg,qZ),e(qZ,Vze),e(Fg,Xze),e(Fg,Fk),e(Fk,zze),e(Fg,Qze),e(v,Wze),e(v,Tg),e(Tg,NZ),e(NZ,Hze),e(Tg,Uze),e(Tg,Tk),e(Tk,Jze),e(Tg,Yze),e(v,Kze),e(v,Mg),e(Mg,jZ),e(jZ,Zze),e(Mg,eQe),e(Mg,Mk),e(Mk,oQe),e(Mg,rQe),e(v,tQe),e(v,Eg),e(Eg,DZ),e(DZ,aQe),e(Eg,nQe),e(Eg,Ek),e(Ek,sQe),e(Eg,lQe),e(v,iQe),e(v,Cg),e(Cg,GZ),e(GZ,dQe),e(Cg,cQe),e(Cg,Ck),e(Ck,fQe),e(Cg,mQe),e(v,gQe),e(v,wg),e(wg,OZ),e(OZ,hQe),e(wg,pQe),e(wg,wk),e(wk,_Qe),e(wg,uQe),e(v,bQe),e(v,Ag),e(Ag,VZ),e(VZ,vQe),e(Ag,FQe),e(Ag,Ak),e(Ak,TQe),e(Ag,MQe),e(v,EQe),e(v,yg),e(yg,XZ),e(XZ,CQe),e(yg,wQe),e(yg,yk),e(yk,AQe),e(yg,yQe),e(v,LQe),e(v,Lg),e(Lg,zZ),e(zZ,xQe),e(Lg,kQe),e(Lg,Lk),e(Lk,SQe),e(Lg,RQe),e(v,BQe),e(v,xg),e(xg,QZ),e(QZ,PQe),e(xg,$Qe),e(xg,xk),e(xk,IQe),e(xg,qQe),e(v,NQe),e(v,kg),e(kg,WZ),e(WZ,jQe),e(kg,DQe),e(kg,kk),e(kk,GQe),e(kg,OQe),e(v,VQe),e(v,Sg),e(Sg,HZ),e(HZ,XQe),e(Sg,zQe),e(Sg,Sk),e(Sk,QQe),e(Sg,WQe),e(v,HQe),e(v,Rg),e(Rg,UZ),e(UZ,UQe),e(Rg,JQe),e(Rg,Rk),e(Rk,YQe),e(Rg,KQe),e(v,ZQe),e(v,Bg),e(Bg,JZ),e(JZ,eWe),e(Bg,oWe),e(Bg,Bk),e(Bk,rWe),e(Bg,tWe),e(v,aWe),e(v,Pg),e(Pg,YZ),e(YZ,nWe),e(Pg,sWe),e(Pg,Pk),e(Pk,lWe),e(Pg,iWe),e(v,dWe),e(v,$g),e($g,KZ),e(KZ,cWe),e($g,fWe),e($g,$k),e($k,mWe),e($g,gWe),e(v,hWe),e(v,Ig),e(Ig,ZZ),e(ZZ,pWe),e(Ig,_We),e(Ig,Ik),e(Ik,uWe),e(Ig,bWe),e(v,vWe),e(v,qg),e(qg,eee),e(eee,FWe),e(qg,TWe),e(qg,qk),e(qk,MWe),e(qg,EWe),e(v,CWe),e(v,Ng),e(Ng,oee),e(oee,wWe),e(Ng,AWe),e(Ng,Nk),e(Nk,yWe),e(Ng,LWe),e(v,xWe),e(v,jg),e(jg,ree),e(ree,kWe),e(jg,SWe),e(jg,jk),e(jk,RWe),e(jg,BWe),e(v,PWe),e(v,Dg),e(Dg,tee),e(tee,$We),e(Dg,IWe),e(Dg,Dk),e(Dk,qWe),e(Dg,NWe),e(v,jWe),e(v,Gg),e(Gg,aee),e(aee,DWe),e(Gg,GWe),e(Gg,Gk),e(Gk,OWe),e(Gg,VWe),e(v,XWe),e(v,Og),e(Og,nee),e(nee,zWe),e(Og,QWe),e(Og,Ok),e(Ok,WWe),e(Og,HWe),e(v,UWe),e(v,Vg),e(Vg,see),e(see,JWe),e(Vg,YWe),e(Vg,Vk),e(Vk,KWe),e(Vg,ZWe),e(v,eHe),e(v,Xg),e(Xg,lee),e(lee,oHe),e(Xg,rHe),e(Xg,Xk),e(Xk,tHe),e(Xg,aHe),e(v,nHe),e(v,zg),e(zg,iee),e(iee,sHe),e(zg,lHe),e(zg,zk),e(zk,iHe),e(zg,dHe),e(go,cHe),e(go,dee),e(dee,fHe),e(go,mHe),g(r6,go,null),e(Qo,gHe),e(Qo,Qg),g(t6,Qg,null),e(Qg,hHe),e(Qg,cee),e(cee,pHe),b(c,sPe,u),b(c,od,u),e(od,Wg),e(Wg,fee),g(a6,fee,null),e(od,_He),e(od,mee),e(mee,uHe),b(c,lPe,u),b(c,Wo,u),g(n6,Wo,null),e(Wo,bHe),e(Wo,s6),e(s6,vHe),e(s6,Qk),e(Qk,FHe),e(s6,THe),e(Wo,MHe),e(Wo,l6),e(l6,EHe),e(l6,gee),e(gee,CHe),e(l6,wHe),e(Wo,AHe),e(Wo,ho),g(i6,ho,null),e(ho,yHe),e(ho,hee),e(hee,LHe),e(ho,xHe),e(ho,Oa),e(Oa,kHe),e(Oa,pee),e(pee,SHe),e(Oa,RHe),e(Oa,_ee),e(_ee,BHe),e(Oa,PHe),e(Oa,uee),e(uee,$He),e(Oa,IHe),e(ho,qHe),e(ho,E),e(E,Wn),e(Wn,bee),e(bee,NHe),e(Wn,jHe),e(Wn,Wk),e(Wk,DHe),e(Wn,GHe),e(Wn,Hk),e(Hk,OHe),e(Wn,VHe),e(E,XHe),e(E,Hn),e(Hn,vee),e(vee,zHe),e(Hn,QHe),e(Hn,Uk),e(Uk,WHe),e(Hn,HHe),e(Hn,Jk),e(Jk,UHe),e(Hn,JHe),e(E,YHe),e(E,Un),e(Un,Fee),e(Fee,KHe),e(Un,ZHe),e(Un,Yk),e(Yk,eUe),e(Un,oUe),e(Un,Kk),e(Kk,rUe),e(Un,tUe),e(E,aUe),e(E,Hg),e(Hg,Tee),e(Tee,nUe),e(Hg,sUe),e(Hg,Zk),e(Zk,lUe),e(Hg,iUe),e(E,dUe),e(E,Jn),e(Jn,Mee),e(Mee,cUe),e(Jn,fUe),e(Jn,eS),e(eS,mUe),e(Jn,gUe),e(Jn,oS),e(oS,hUe),e(Jn,pUe),e(E,_Ue),e(E,Ug),e(Ug,Eee),e(Eee,uUe),e(Ug,bUe),e(Ug,rS),e(rS,vUe),e(Ug,FUe),e(E,TUe),e(E,Jg),e(Jg,Cee),e(Cee,MUe),e(Jg,EUe),e(Jg,tS),e(tS,CUe),e(Jg,wUe),e(E,AUe),e(E,Yg),e(Yg,wee),e(wee,yUe),e(Yg,LUe),e(Yg,aS),e(aS,xUe),e(Yg,kUe),e(E,SUe),e(E,Yn),e(Yn,Aee),e(Aee,RUe),e(Yn,BUe),e(Yn,nS),e(nS,PUe),e(Yn,$Ue),e(Yn,sS),e(sS,IUe),e(Yn,qUe),e(E,NUe),e(E,Kn),e(Kn,yee),e(yee,jUe),e(Kn,DUe),e(Kn,lS),e(lS,GUe),e(Kn,OUe),e(Kn,iS),e(iS,VUe),e(Kn,XUe),e(E,zUe),e(E,Zn),e(Zn,Lee),e(Lee,QUe),e(Zn,WUe),e(Zn,dS),e(dS,HUe),e(Zn,UUe),e(Zn,cS),e(cS,JUe),e(Zn,YUe),e(E,KUe),e(E,Kg),e(Kg,xee),e(xee,ZUe),e(Kg,eJe),e(Kg,fS),e(fS,oJe),e(Kg,rJe),e(E,tJe),e(E,Zg),e(Zg,kee),e(kee,aJe),e(Zg,nJe),e(Zg,mS),e(mS,sJe),e(Zg,lJe),e(E,iJe),e(E,es),e(es,See),e(See,dJe),e(es,cJe),e(es,gS),e(gS,fJe),e(es,mJe),e(es,hS),e(hS,gJe),e(es,hJe),e(E,pJe),e(E,eh),e(eh,Ree),e(Ree,_Je),e(eh,uJe),e(eh,pS),e(pS,bJe),e(eh,vJe),e(E,FJe),e(E,os),e(os,Bee),e(Bee,TJe),e(os,MJe),e(os,_S),e(_S,EJe),e(os,CJe),e(os,uS),e(uS,wJe),e(os,AJe),e(E,yJe),e(E,rs),e(rs,Pee),e(Pee,LJe),e(rs,xJe),e(rs,bS),e(bS,kJe),e(rs,SJe),e(rs,vS),e(vS,RJe),e(rs,BJe),e(E,PJe),e(E,ts),e(ts,$ee),e($ee,$Je),e(ts,IJe),e(ts,FS),e(FS,qJe),e(ts,NJe),e(ts,Iee),e(Iee,jJe),e(ts,DJe),e(E,GJe),e(E,oh),e(oh,qee),e(qee,OJe),e(oh,VJe),e(oh,TS),e(TS,XJe),e(oh,zJe),e(E,QJe),e(E,as),e(as,Nee),e(Nee,WJe),e(as,HJe),e(as,MS),e(MS,UJe),e(as,JJe),e(as,ES),e(ES,YJe),e(as,KJe),e(E,ZJe),e(E,ns),e(ns,jee),e(jee,eYe),e(ns,oYe),e(ns,CS),e(CS,rYe),e(ns,tYe),e(ns,wS),e(wS,aYe),e(ns,nYe),e(E,sYe),e(E,ss),e(ss,Dee),e(Dee,lYe),e(ss,iYe),e(ss,AS),e(AS,dYe),e(ss,cYe),e(ss,yS),e(yS,fYe),e(ss,mYe),e(E,gYe),e(E,ls),e(ls,Gee),e(Gee,hYe),e(ls,pYe),e(ls,LS),e(LS,_Ye),e(ls,uYe),e(ls,xS),e(xS,bYe),e(ls,vYe),e(E,FYe),e(E,is),e(is,Oee),e(Oee,TYe),e(is,MYe),e(is,kS),e(kS,EYe),e(is,CYe),e(is,SS),e(SS,wYe),e(is,AYe),e(E,yYe),e(E,ds),e(ds,Vee),e(Vee,LYe),e(ds,xYe),e(ds,RS),e(RS,kYe),e(ds,SYe),e(ds,BS),e(BS,RYe),e(ds,BYe),e(E,PYe),e(E,rh),e(rh,Xee),e(Xee,$Ye),e(rh,IYe),e(rh,PS),e(PS,qYe),e(rh,NYe),e(E,jYe),e(E,cs),e(cs,zee),e(zee,DYe),e(cs,GYe),e(cs,$S),e($S,OYe),e(cs,VYe),e(cs,IS),e(IS,XYe),e(cs,zYe),e(E,QYe),e(E,th),e(th,Qee),e(Qee,WYe),e(th,HYe),e(th,qS),e(qS,UYe),e(th,JYe),e(E,YYe),e(E,fs),e(fs,Wee),e(Wee,KYe),e(fs,ZYe),e(fs,NS),e(NS,eKe),e(fs,oKe),e(fs,jS),e(jS,rKe),e(fs,tKe),e(E,aKe),e(E,ms),e(ms,Hee),e(Hee,nKe),e(ms,sKe),e(ms,DS),e(DS,lKe),e(ms,iKe),e(ms,GS),e(GS,dKe),e(ms,cKe),e(E,fKe),e(E,gs),e(gs,Uee),e(Uee,mKe),e(gs,gKe),e(gs,OS),e(OS,hKe),e(gs,pKe),e(gs,VS),e(VS,_Ke),e(gs,uKe),e(E,bKe),e(E,hs),e(hs,Jee),e(Jee,vKe),e(hs,FKe),e(hs,XS),e(XS,TKe),e(hs,MKe),e(hs,zS),e(zS,EKe),e(hs,CKe),e(E,wKe),e(E,ps),e(ps,Yee),e(Yee,AKe),e(ps,yKe),e(ps,QS),e(QS,LKe),e(ps,xKe),e(ps,WS),e(WS,kKe),e(ps,SKe),e(E,RKe),e(E,ah),e(ah,Kee),e(Kee,BKe),e(ah,PKe),e(ah,HS),e(HS,$Ke),e(ah,IKe),e(E,qKe),e(E,_s),e(_s,Zee),e(Zee,NKe),e(_s,jKe),e(_s,US),e(US,DKe),e(_s,GKe),e(_s,JS),e(JS,OKe),e(_s,VKe),e(E,XKe),e(E,us),e(us,eoe),e(eoe,zKe),e(us,QKe),e(us,YS),e(YS,WKe),e(us,HKe),e(us,KS),e(KS,UKe),e(us,JKe),e(E,YKe),e(E,bs),e(bs,ooe),e(ooe,KKe),e(bs,ZKe),e(bs,ZS),e(ZS,eZe),e(bs,oZe),e(bs,eR),e(eR,rZe),e(bs,tZe),e(E,aZe),e(E,vs),e(vs,roe),e(roe,nZe),e(vs,sZe),e(vs,oR),e(oR,lZe),e(vs,iZe),e(vs,rR),e(rR,dZe),e(vs,cZe),e(E,fZe),e(E,Fs),e(Fs,toe),e(toe,mZe),e(Fs,gZe),e(Fs,tR),e(tR,hZe),e(Fs,pZe),e(Fs,aR),e(aR,_Ze),e(Fs,uZe),e(E,bZe),e(E,Ts),e(Ts,aoe),e(aoe,vZe),e(Ts,FZe),e(Ts,nR),e(nR,TZe),e(Ts,MZe),e(Ts,sR),e(sR,EZe),e(Ts,CZe),e(E,wZe),e(E,nh),e(nh,noe),e(noe,AZe),e(nh,yZe),e(nh,lR),e(lR,LZe),e(nh,xZe),e(E,kZe),e(E,Ms),e(Ms,soe),e(soe,SZe),e(Ms,RZe),e(Ms,iR),e(iR,BZe),e(Ms,PZe),e(Ms,dR),e(dR,$Ze),e(Ms,IZe),e(E,qZe),e(E,sh),e(sh,loe),e(loe,NZe),e(sh,jZe),e(sh,cR),e(cR,DZe),e(sh,GZe),e(E,OZe),e(E,lh),e(lh,ioe),e(ioe,VZe),e(lh,XZe),e(lh,fR),e(fR,zZe),e(lh,QZe),e(E,WZe),e(E,Es),e(Es,doe),e(doe,HZe),e(Es,UZe),e(Es,mR),e(mR,JZe),e(Es,YZe),e(Es,gR),e(gR,KZe),e(Es,ZZe),e(E,eeo),e(E,Cs),e(Cs,coe),e(coe,oeo),e(Cs,reo),e(Cs,hR),e(hR,teo),e(Cs,aeo),e(Cs,pR),e(pR,neo),e(Cs,seo),e(E,leo),e(E,ws),e(ws,foe),e(foe,ieo),e(ws,deo),e(ws,_R),e(_R,ceo),e(ws,feo),e(ws,uR),e(uR,meo),e(ws,geo),e(E,heo),e(E,ih),e(ih,moe),e(moe,peo),e(ih,_eo),e(ih,bR),e(bR,ueo),e(ih,beo),e(E,veo),e(E,As),e(As,goe),e(goe,Feo),e(As,Teo),e(As,vR),e(vR,Meo),e(As,Eeo),e(As,FR),e(FR,Ceo),e(As,weo),e(E,Aeo),e(E,ys),e(ys,hoe),e(hoe,yeo),e(ys,Leo),e(ys,TR),e(TR,xeo),e(ys,keo),e(ys,MR),e(MR,Seo),e(ys,Reo),e(E,Beo),e(E,Ls),e(Ls,poe),e(poe,Peo),e(Ls,$eo),e(Ls,ER),e(ER,Ieo),e(Ls,qeo),e(Ls,CR),e(CR,Neo),e(Ls,jeo),e(E,Deo),e(E,xs),e(xs,_oe),e(_oe,Geo),e(xs,Oeo),e(xs,wR),e(wR,Veo),e(xs,Xeo),e(xs,AR),e(AR,zeo),e(xs,Qeo),e(E,Weo),e(E,ks),e(ks,uoe),e(uoe,Heo),e(ks,Ueo),e(ks,yR),e(yR,Jeo),e(ks,Yeo),e(ks,LR),e(LR,Keo),e(ks,Zeo),e(E,eoo),e(E,Ss),e(Ss,boe),e(boe,ooo),e(Ss,roo),e(Ss,xR),e(xR,too),e(Ss,aoo),e(Ss,kR),e(kR,noo),e(Ss,soo),e(E,loo),e(E,dh),e(dh,voe),e(voe,ioo),e(dh,doo),e(dh,SR),e(SR,coo),e(dh,foo),e(E,moo),e(E,ch),e(ch,Foe),e(Foe,goo),e(ch,hoo),e(ch,RR),e(RR,poo),e(ch,_oo),e(E,uoo),e(E,fh),e(fh,Toe),e(Toe,boo),e(fh,voo),e(fh,BR),e(BR,Foo),e(fh,Too),e(E,Moo),e(E,mh),e(mh,Moe),e(Moe,Eoo),e(mh,Coo),e(mh,PR),e(PR,woo),e(mh,Aoo),e(E,yoo),e(E,Rs),e(Rs,Eoe),e(Eoe,Loo),e(Rs,xoo),e(Rs,$R),e($R,koo),e(Rs,Soo),e(Rs,IR),e(IR,Roo),e(Rs,Boo),e(E,Poo),e(E,gh),e(gh,Coe),e(Coe,$oo),e(gh,Ioo),e(gh,qR),e(qR,qoo),e(gh,Noo),e(E,joo),e(E,Bs),e(Bs,woe),e(woe,Doo),e(Bs,Goo),e(Bs,NR),e(NR,Ooo),e(Bs,Voo),e(Bs,jR),e(jR,Xoo),e(Bs,zoo),e(E,Qoo),e(E,Ps),e(Ps,Aoe),e(Aoe,Woo),e(Ps,Hoo),e(Ps,DR),e(DR,Uoo),e(Ps,Joo),e(Ps,GR),e(GR,Yoo),e(Ps,Koo),e(E,Zoo),e(E,$s),e($s,yoe),e(yoe,ero),e($s,oro),e($s,OR),e(OR,rro),e($s,tro),e($s,VR),e(VR,aro),e($s,nro),e(E,sro),e(E,Is),e(Is,Loe),e(Loe,lro),e(Is,iro),e(Is,XR),e(XR,dro),e(Is,cro),e(Is,zR),e(zR,fro),e(Is,mro),e(E,gro),e(E,qs),e(qs,xoe),e(xoe,hro),e(qs,pro),e(qs,QR),e(QR,_ro),e(qs,uro),e(qs,WR),e(WR,bro),e(qs,vro),e(E,Fro),e(E,Ns),e(Ns,koe),e(koe,Tro),e(Ns,Mro),e(Ns,HR),e(HR,Ero),e(Ns,Cro),e(Ns,UR),e(UR,wro),e(Ns,Aro),e(E,yro),e(E,hh),e(hh,Soe),e(Soe,Lro),e(hh,xro),e(hh,JR),e(JR,kro),e(hh,Sro),e(E,Rro),e(E,ph),e(ph,Roe),e(Roe,Bro),e(ph,Pro),e(ph,YR),e(YR,$ro),e(ph,Iro),e(E,qro),e(E,js),e(js,Boe),e(Boe,Nro),e(js,jro),e(js,KR),e(KR,Dro),e(js,Gro),e(js,ZR),e(ZR,Oro),e(js,Vro),e(E,Xro),e(E,Ds),e(Ds,Poe),e(Poe,zro),e(Ds,Qro),e(Ds,eB),e(eB,Wro),e(Ds,Hro),e(Ds,oB),e(oB,Uro),e(Ds,Jro),e(E,Yro),e(E,Gs),e(Gs,$oe),e($oe,Kro),e(Gs,Zro),e(Gs,rB),e(rB,eto),e(Gs,oto),e(Gs,tB),e(tB,rto),e(Gs,tto),e(E,ato),e(E,_h),e(_h,Ioe),e(Ioe,nto),e(_h,sto),e(_h,aB),e(aB,lto),e(_h,ito),e(E,dto),e(E,uh),e(uh,qoe),e(qoe,cto),e(uh,fto),e(uh,nB),e(nB,mto),e(uh,gto),e(E,hto),e(E,bh),e(bh,Noe),e(Noe,pto),e(bh,_to),e(bh,sB),e(sB,uto),e(bh,bto),e(E,vto),e(E,Os),e(Os,joe),e(joe,Fto),e(Os,Tto),e(Os,lB),e(lB,Mto),e(Os,Eto),e(Os,iB),e(iB,Cto),e(Os,wto),e(E,Ato),e(E,vh),e(vh,Doe),e(Doe,yto),e(vh,Lto),e(vh,dB),e(dB,xto),e(vh,kto),e(E,Sto),e(E,Fh),e(Fh,Goe),e(Goe,Rto),e(Fh,Bto),e(Fh,cB),e(cB,Pto),e(Fh,$to),e(E,Ito),e(E,Vs),e(Vs,Ooe),e(Ooe,qto),e(Vs,Nto),e(Vs,fB),e(fB,jto),e(Vs,Dto),e(Vs,mB),e(mB,Gto),e(Vs,Oto),e(E,Vto),e(E,Th),e(Th,Voe),e(Voe,Xto),e(Th,zto),e(Th,gB),e(gB,Qto),e(Th,Wto),e(E,Hto),e(E,Mh),e(Mh,Xoe),e(Xoe,Uto),e(Mh,Jto),e(Mh,hB),e(hB,Yto),e(Mh,Kto),e(E,Zto),e(E,Xs),e(Xs,zoe),e(zoe,eao),e(Xs,oao),e(Xs,pB),e(pB,rao),e(Xs,tao),e(Xs,_B),e(_B,aao),e(Xs,nao),e(E,sao),e(E,zs),e(zs,Qoe),e(Qoe,lao),e(zs,iao),e(zs,uB),e(uB,dao),e(zs,cao),e(zs,bB),e(bB,fao),e(zs,mao),e(E,gao),e(E,Qs),e(Qs,Woe),e(Woe,hao),e(Qs,pao),e(Qs,vB),e(vB,_ao),e(Qs,uao),e(Qs,FB),e(FB,bao),e(Qs,vao),e(E,Fao),e(E,Ws),e(Ws,Hoe),e(Hoe,Tao),e(Ws,Mao),e(Ws,TB),e(TB,Eao),e(Ws,Cao),e(Ws,MB),e(MB,wao),e(Ws,Aao),e(ho,yao),e(ho,Uoe),e(Uoe,Lao),e(ho,xao),g(d6,ho,null),e(Wo,kao),e(Wo,Eh),g(c6,Eh,null),e(Eh,Sao),e(Eh,Joe),e(Joe,Rao),b(c,iPe,u),b(c,rd,u),e(rd,Ch),e(Ch,Yoe),g(f6,Yoe,null),e(rd,Bao),e(rd,Koe),e(Koe,Pao),b(c,dPe,u),b(c,Ho,u),g(m6,Ho,null),e(Ho,$ao),e(Ho,g6),e(g6,Iao),e(g6,EB),e(EB,qao),e(g6,Nao),e(Ho,jao),e(Ho,h6),e(h6,Dao),e(h6,Zoe),e(Zoe,Gao),e(h6,Oao),e(Ho,Vao),e(Ho,Ie),g(p6,Ie,null),e(Ie,Xao),e(Ie,ere),e(ere,zao),e(Ie,Qao),e(Ie,Va),e(Va,Wao),e(Va,ore),e(ore,Hao),e(Va,Uao),e(Va,rre),e(rre,Jao),e(Va,Yao),e(Va,tre),e(tre,Kao),e(Va,Zao),e(Ie,eno),e(Ie,H),e(H,wh),e(wh,are),e(are,ono),e(wh,rno),e(wh,CB),e(CB,tno),e(wh,ano),e(H,nno),e(H,Ah),e(Ah,nre),e(nre,sno),e(Ah,lno),e(Ah,wB),e(wB,ino),e(Ah,dno),e(H,cno),e(H,yh),e(yh,sre),e(sre,fno),e(yh,mno),e(yh,AB),e(AB,gno),e(yh,hno),e(H,pno),e(H,Lh),e(Lh,lre),e(lre,_no),e(Lh,uno),e(Lh,yB),e(yB,bno),e(Lh,vno),e(H,Fno),e(H,xh),e(xh,ire),e(ire,Tno),e(xh,Mno),e(xh,LB),e(LB,Eno),e(xh,Cno),e(H,wno),e(H,kh),e(kh,dre),e(dre,Ano),e(kh,yno),e(kh,xB),e(xB,Lno),e(kh,xno),e(H,kno),e(H,Sh),e(Sh,cre),e(cre,Sno),e(Sh,Rno),e(Sh,kB),e(kB,Bno),e(Sh,Pno),e(H,$no),e(H,Rh),e(Rh,fre),e(fre,Ino),e(Rh,qno),e(Rh,SB),e(SB,Nno),e(Rh,jno),e(H,Dno),e(H,Bh),e(Bh,mre),e(mre,Gno),e(Bh,Ono),e(Bh,RB),e(RB,Vno),e(Bh,Xno),e(H,zno),e(H,Ph),e(Ph,gre),e(gre,Qno),e(Ph,Wno),e(Ph,BB),e(BB,Hno),e(Ph,Uno),e(H,Jno),e(H,$h),e($h,hre),e(hre,Yno),e($h,Kno),e($h,PB),e(PB,Zno),e($h,eso),e(H,oso),e(H,Ih),e(Ih,pre),e(pre,rso),e(Ih,tso),e(Ih,$B),e($B,aso),e(Ih,nso),e(H,sso),e(H,qh),e(qh,_re),e(_re,lso),e(qh,iso),e(qh,IB),e(IB,dso),e(qh,cso),e(H,fso),e(H,Nh),e(Nh,ure),e(ure,mso),e(Nh,gso),e(Nh,qB),e(qB,hso),e(Nh,pso),e(H,_so),e(H,jh),e(jh,bre),e(bre,uso),e(jh,bso),e(jh,NB),e(NB,vso),e(jh,Fso),e(H,Tso),e(H,Dh),e(Dh,vre),e(vre,Mso),e(Dh,Eso),e(Dh,jB),e(jB,Cso),e(Dh,wso),e(H,Aso),e(H,Gh),e(Gh,Fre),e(Fre,yso),e(Gh,Lso),e(Gh,DB),e(DB,xso),e(Gh,kso),e(H,Sso),e(H,Oh),e(Oh,Tre),e(Tre,Rso),e(Oh,Bso),e(Oh,GB),e(GB,Pso),e(Oh,$so),e(H,Iso),e(H,Vh),e(Vh,Mre),e(Mre,qso),e(Vh,Nso),e(Vh,OB),e(OB,jso),e(Vh,Dso),e(H,Gso),e(H,Xh),e(Xh,Ere),e(Ere,Oso),e(Xh,Vso),e(Xh,VB),e(VB,Xso),e(Xh,zso),e(H,Qso),e(H,zh),e(zh,Cre),e(Cre,Wso),e(zh,Hso),e(zh,XB),e(XB,Uso),e(zh,Jso),e(H,Yso),e(H,Qh),e(Qh,wre),e(wre,Kso),e(Qh,Zso),e(Qh,zB),e(zB,elo),e(Qh,olo),e(H,rlo),e(H,Wh),e(Wh,Are),e(Are,tlo),e(Wh,alo),e(Wh,QB),e(QB,nlo),e(Wh,slo),e(Ie,llo),g(Hh,Ie,null),e(Ie,ilo),e(Ie,yre),e(yre,dlo),e(Ie,clo),g(_6,Ie,null),e(Ho,flo),e(Ho,Uh),g(u6,Uh,null),e(Uh,mlo),e(Uh,Lre),e(Lre,glo),b(c,cPe,u),b(c,td,u),e(td,Jh),e(Jh,xre),g(b6,xre,null),e(td,hlo),e(td,kre),e(kre,plo),b(c,fPe,u),b(c,Uo,u),g(v6,Uo,null),e(Uo,_lo),e(Uo,F6),e(F6,ulo),e(F6,WB),e(WB,blo),e(F6,vlo),e(Uo,Flo),e(Uo,T6),e(T6,Tlo),e(T6,Sre),e(Sre,Mlo),e(T6,Elo),e(Uo,Clo),e(Uo,qe),g(M6,qe,null),e(qe,wlo),e(qe,Rre),e(Rre,Alo),e(qe,ylo),e(qe,ad),e(ad,Llo),e(ad,Bre),e(Bre,xlo),e(ad,klo),e(ad,Pre),e(Pre,Slo),e(ad,Rlo),e(qe,Blo),e(qe,de),e(de,Yh),e(Yh,$re),e($re,Plo),e(Yh,$lo),e(Yh,HB),e(HB,Ilo),e(Yh,qlo),e(de,Nlo),e(de,Kh),e(Kh,Ire),e(Ire,jlo),e(Kh,Dlo),e(Kh,UB),e(UB,Glo),e(Kh,Olo),e(de,Vlo),e(de,Zh),e(Zh,qre),e(qre,Xlo),e(Zh,zlo),e(Zh,JB),e(JB,Qlo),e(Zh,Wlo),e(de,Hlo),e(de,ep),e(ep,Nre),e(Nre,Ulo),e(ep,Jlo),e(ep,YB),e(YB,Ylo),e(ep,Klo),e(de,Zlo),e(de,op),e(op,jre),e(jre,eio),e(op,oio),e(op,KB),e(KB,rio),e(op,tio),e(de,aio),e(de,rp),e(rp,Dre),e(Dre,nio),e(rp,sio),e(rp,ZB),e(ZB,lio),e(rp,iio),e(de,dio),e(de,tp),e(tp,Gre),e(Gre,cio),e(tp,fio),e(tp,eP),e(eP,mio),e(tp,gio),e(de,hio),e(de,ap),e(ap,Ore),e(Ore,pio),e(ap,_io),e(ap,oP),e(oP,uio),e(ap,bio),e(de,vio),e(de,np),e(np,Vre),e(Vre,Fio),e(np,Tio),e(np,rP),e(rP,Mio),e(np,Eio),e(de,Cio),e(de,sp),e(sp,Xre),e(Xre,wio),e(sp,Aio),e(sp,tP),e(tP,yio),e(sp,Lio),e(de,xio),e(de,lp),e(lp,zre),e(zre,kio),e(lp,Sio),e(lp,aP),e(aP,Rio),e(lp,Bio),e(de,Pio),e(de,ip),e(ip,Qre),e(Qre,$io),e(ip,Iio),e(ip,nP),e(nP,qio),e(ip,Nio),e(de,jio),e(de,dp),e(dp,Wre),e(Wre,Dio),e(dp,Gio),e(dp,sP),e(sP,Oio),e(dp,Vio),e(de,Xio),e(de,cp),e(cp,Hre),e(Hre,zio),e(cp,Qio),e(cp,lP),e(lP,Wio),e(cp,Hio),e(qe,Uio),g(fp,qe,null),e(qe,Jio),e(qe,Ure),e(Ure,Yio),e(qe,Kio),g(E6,qe,null),e(Uo,Zio),e(Uo,mp),g(C6,mp,null),e(mp,edo),e(mp,Jre),e(Jre,odo),b(c,mPe,u),b(c,nd,u),e(nd,gp),e(gp,Yre),g(w6,Yre,null),e(nd,rdo),e(nd,Kre),e(Kre,tdo),b(c,gPe,u),b(c,Jo,u),g(A6,Jo,null),e(Jo,ado),e(Jo,sd),e(sd,ndo),e(sd,iP),e(iP,sdo),e(sd,ldo),e(sd,dP),e(dP,ido),e(sd,ddo),e(Jo,cdo),e(Jo,y6),e(y6,fdo),e(y6,Zre),e(Zre,mdo),e(y6,gdo),e(Jo,hdo),e(Jo,Xr),g(L6,Xr,null),e(Xr,pdo),e(Xr,ete),e(ete,_do),e(Xr,udo),e(Xr,ld),e(ld,bdo),e(ld,ote),e(ote,vdo),e(ld,Fdo),e(ld,cP),e(cP,Tdo),e(ld,Mdo),e(Xr,Edo),e(Xr,rte),e(rte,Cdo),e(Xr,wdo),g(x6,Xr,null),e(Jo,Ado),e(Jo,Ne),g(k6,Ne,null),e(Ne,ydo),e(Ne,tte),e(tte,Ldo),e(Ne,xdo),e(Ne,Xa),e(Xa,kdo),e(Xa,ate),e(ate,Sdo),e(Xa,Rdo),e(Xa,nte),e(nte,Bdo),e(Xa,Pdo),e(Xa,ste),e(ste,$do),e(Xa,Ido),e(Ne,qdo),e(Ne,T),e(T,hp),e(hp,lte),e(lte,Ndo),e(hp,jdo),e(hp,fP),e(fP,Ddo),e(hp,Gdo),e(T,Odo),e(T,pp),e(pp,ite),e(ite,Vdo),e(pp,Xdo),e(pp,mP),e(mP,zdo),e(pp,Qdo),e(T,Wdo),e(T,_p),e(_p,dte),e(dte,Hdo),e(_p,Udo),e(_p,gP),e(gP,Jdo),e(_p,Ydo),e(T,Kdo),e(T,up),e(up,cte),e(cte,Zdo),e(up,eco),e(up,hP),e(hP,oco),e(up,rco),e(T,tco),e(T,bp),e(bp,fte),e(fte,aco),e(bp,nco),e(bp,pP),e(pP,sco),e(bp,lco),e(T,ico),e(T,vp),e(vp,mte),e(mte,dco),e(vp,cco),e(vp,_P),e(_P,fco),e(vp,mco),e(T,gco),e(T,Fp),e(Fp,gte),e(gte,hco),e(Fp,pco),e(Fp,uP),e(uP,_co),e(Fp,uco),e(T,bco),e(T,Tp),e(Tp,hte),e(hte,vco),e(Tp,Fco),e(Tp,bP),e(bP,Tco),e(Tp,Mco),e(T,Eco),e(T,Mp),e(Mp,pte),e(pte,Cco),e(Mp,wco),e(Mp,vP),e(vP,Aco),e(Mp,yco),e(T,Lco),e(T,Ep),e(Ep,_te),e(_te,xco),e(Ep,kco),e(Ep,FP),e(FP,Sco),e(Ep,Rco),e(T,Bco),e(T,Cp),e(Cp,ute),e(ute,Pco),e(Cp,$co),e(Cp,TP),e(TP,Ico),e(Cp,qco),e(T,Nco),e(T,wp),e(wp,bte),e(bte,jco),e(wp,Dco),e(wp,MP),e(MP,Gco),e(wp,Oco),e(T,Vco),e(T,Ap),e(Ap,vte),e(vte,Xco),e(Ap,zco),e(Ap,EP),e(EP,Qco),e(Ap,Wco),e(T,Hco),e(T,yp),e(yp,Fte),e(Fte,Uco),e(yp,Jco),e(yp,CP),e(CP,Yco),e(yp,Kco),e(T,Zco),e(T,Lp),e(Lp,Tte),e(Tte,efo),e(Lp,ofo),e(Lp,wP),e(wP,rfo),e(Lp,tfo),e(T,afo),e(T,xp),e(xp,Mte),e(Mte,nfo),e(xp,sfo),e(xp,AP),e(AP,lfo),e(xp,ifo),e(T,dfo),e(T,kp),e(kp,Ete),e(Ete,cfo),e(kp,ffo),e(kp,yP),e(yP,mfo),e(kp,gfo),e(T,hfo),e(T,Sp),e(Sp,Cte),e(Cte,pfo),e(Sp,_fo),e(Sp,LP),e(LP,ufo),e(Sp,bfo),e(T,vfo),e(T,Rp),e(Rp,wte),e(wte,Ffo),e(Rp,Tfo),e(Rp,xP),e(xP,Mfo),e(Rp,Efo),e(T,Cfo),e(T,Bp),e(Bp,Ate),e(Ate,wfo),e(Bp,Afo),e(Bp,kP),e(kP,yfo),e(Bp,Lfo),e(T,xfo),e(T,Pp),e(Pp,yte),e(yte,kfo),e(Pp,Sfo),e(Pp,SP),e(SP,Rfo),e(Pp,Bfo),e(T,Pfo),e(T,$p),e($p,Lte),e(Lte,$fo),e($p,Ifo),e($p,RP),e(RP,qfo),e($p,Nfo),e(T,jfo),e(T,Ip),e(Ip,xte),e(xte,Dfo),e(Ip,Gfo),e(Ip,BP),e(BP,Ofo),e(Ip,Vfo),e(T,Xfo),e(T,qp),e(qp,kte),e(kte,zfo),e(qp,Qfo),e(qp,PP),e(PP,Wfo),e(qp,Hfo),e(T,Ufo),e(T,Np),e(Np,Ste),e(Ste,Jfo),e(Np,Yfo),e(Np,$P),e($P,Kfo),e(Np,Zfo),e(T,emo),e(T,jp),e(jp,Rte),e(Rte,omo),e(jp,rmo),e(jp,IP),e(IP,tmo),e(jp,amo),e(T,nmo),e(T,Dp),e(Dp,Bte),e(Bte,smo),e(Dp,lmo),e(Dp,qP),e(qP,imo),e(Dp,dmo),e(T,cmo),e(T,Gp),e(Gp,Pte),e(Pte,fmo),e(Gp,mmo),e(Gp,NP),e(NP,gmo),e(Gp,hmo),e(T,pmo),e(T,Op),e(Op,$te),e($te,_mo),e(Op,umo),e(Op,jP),e(jP,bmo),e(Op,vmo),e(T,Fmo),e(T,Vp),e(Vp,Ite),e(Ite,Tmo),e(Vp,Mmo),e(Vp,DP),e(DP,Emo),e(Vp,Cmo),e(T,wmo),e(T,Hs),e(Hs,qte),e(qte,Amo),e(Hs,ymo),e(Hs,GP),e(GP,Lmo),e(Hs,xmo),e(Hs,OP),e(OP,kmo),e(Hs,Smo),e(T,Rmo),e(T,Xp),e(Xp,Nte),e(Nte,Bmo),e(Xp,Pmo),e(Xp,VP),e(VP,$mo),e(Xp,Imo),e(T,qmo),e(T,zp),e(zp,jte),e(jte,Nmo),e(zp,jmo),e(zp,XP),e(XP,Dmo),e(zp,Gmo),e(T,Omo),e(T,Qp),e(Qp,Dte),e(Dte,Vmo),e(Qp,Xmo),e(Qp,zP),e(zP,zmo),e(Qp,Qmo),e(T,Wmo),e(T,Wp),e(Wp,Gte),e(Gte,Hmo),e(Wp,Umo),e(Wp,QP),e(QP,Jmo),e(Wp,Ymo),e(T,Kmo),e(T,Hp),e(Hp,Ote),e(Ote,Zmo),e(Hp,ego),e(Hp,WP),e(WP,ogo),e(Hp,rgo),e(T,tgo),e(T,Up),e(Up,Vte),e(Vte,ago),e(Up,ngo),e(Up,HP),e(HP,sgo),e(Up,lgo),e(T,igo),e(T,Jp),e(Jp,Xte),e(Xte,dgo),e(Jp,cgo),e(Jp,UP),e(UP,fgo),e(Jp,mgo),e(T,ggo),e(T,Yp),e(Yp,zte),e(zte,hgo),e(Yp,pgo),e(Yp,JP),e(JP,_go),e(Yp,ugo),e(T,bgo),e(T,Kp),e(Kp,Qte),e(Qte,vgo),e(Kp,Fgo),e(Kp,YP),e(YP,Tgo),e(Kp,Mgo),e(T,Ego),e(T,Zp),e(Zp,Wte),e(Wte,Cgo),e(Zp,wgo),e(Zp,KP),e(KP,Ago),e(Zp,ygo),e(T,Lgo),e(T,e_),e(e_,Hte),e(Hte,xgo),e(e_,kgo),e(e_,ZP),e(ZP,Sgo),e(e_,Rgo),e(T,Bgo),e(T,o_),e(o_,Ute),e(Ute,Pgo),e(o_,$go),e(o_,e$),e(e$,Igo),e(o_,qgo),e(T,Ngo),e(T,r_),e(r_,Jte),e(Jte,jgo),e(r_,Dgo),e(r_,o$),e(o$,Ggo),e(r_,Ogo),e(T,Vgo),e(T,t_),e(t_,Yte),e(Yte,Xgo),e(t_,zgo),e(t_,r$),e(r$,Qgo),e(t_,Wgo),e(T,Hgo),e(T,a_),e(a_,Kte),e(Kte,Ugo),e(a_,Jgo),e(a_,t$),e(t$,Ygo),e(a_,Kgo),e(T,Zgo),e(T,n_),e(n_,Zte),e(Zte,eho),e(n_,oho),e(n_,a$),e(a$,rho),e(n_,tho),e(T,aho),e(T,s_),e(s_,eae),e(eae,nho),e(s_,sho),e(s_,n$),e(n$,lho),e(s_,iho),e(T,dho),e(T,l_),e(l_,oae),e(oae,cho),e(l_,fho),e(l_,s$),e(s$,mho),e(l_,gho),e(T,hho),e(T,i_),e(i_,rae),e(rae,pho),e(i_,_ho),e(i_,l$),e(l$,uho),e(i_,bho),e(T,vho),e(T,d_),e(d_,tae),e(tae,Fho),e(d_,Tho),e(d_,i$),e(i$,Mho),e(d_,Eho),e(T,Cho),e(T,c_),e(c_,aae),e(aae,who),e(c_,Aho),e(c_,d$),e(d$,yho),e(c_,Lho),e(T,xho),e(T,f_),e(f_,nae),e(nae,kho),e(f_,Sho),e(f_,c$),e(c$,Rho),e(f_,Bho),e(T,Pho),e(T,m_),e(m_,sae),e(sae,$ho),e(m_,Iho),e(m_,f$),e(f$,qho),e(m_,Nho),e(T,jho),e(T,g_),e(g_,lae),e(lae,Dho),e(g_,Gho),e(g_,m$),e(m$,Oho),e(g_,Vho),e(T,Xho),e(T,h_),e(h_,iae),e(iae,zho),e(h_,Qho),e(h_,g$),e(g$,Who),e(h_,Hho),e(T,Uho),e(T,p_),e(p_,dae),e(dae,Jho),e(p_,Yho),e(p_,h$),e(h$,Kho),e(p_,Zho),e(T,epo),e(T,__),e(__,cae),e(cae,opo),e(__,rpo),e(__,p$),e(p$,tpo),e(__,apo),e(T,npo),e(T,u_),e(u_,fae),e(fae,spo),e(u_,lpo),e(u_,_$),e(_$,ipo),e(u_,dpo),e(T,cpo),e(T,b_),e(b_,mae),e(mae,fpo),e(b_,mpo),e(b_,u$),e(u$,gpo),e(b_,hpo),e(T,ppo),e(T,v_),e(v_,gae),e(gae,_po),e(v_,upo),e(v_,b$),e(b$,bpo),e(v_,vpo),e(T,Fpo),e(T,F_),e(F_,hae),e(hae,Tpo),e(F_,Mpo),e(F_,v$),e(v$,Epo),e(F_,Cpo),e(T,wpo),e(T,T_),e(T_,pae),e(pae,Apo),e(T_,ypo),e(T_,F$),e(F$,Lpo),e(T_,xpo),e(T,kpo),e(T,M_),e(M_,_ae),e(_ae,Spo),e(M_,Rpo),e(M_,T$),e(T$,Bpo),e(M_,Ppo),e(T,$po),e(T,E_),e(E_,uae),e(uae,Ipo),e(E_,qpo),e(E_,M$),e(M$,Npo),e(E_,jpo),e(T,Dpo),e(T,C_),e(C_,bae),e(bae,Gpo),e(C_,Opo),e(C_,E$),e(E$,Vpo),e(C_,Xpo),e(T,zpo),e(T,w_),e(w_,vae),e(vae,Qpo),e(w_,Wpo),e(w_,C$),e(C$,Hpo),e(w_,Upo),e(T,Jpo),e(T,A_),e(A_,Fae),e(Fae,Ypo),e(A_,Kpo),e(A_,w$),e(w$,Zpo),e(A_,e_o),e(T,o_o),e(T,y_),e(y_,Tae),e(Tae,r_o),e(y_,t_o),e(y_,A$),e(A$,a_o),e(y_,n_o),e(T,s_o),e(T,L_),e(L_,Mae),e(Mae,l_o),e(L_,i_o),e(L_,y$),e(y$,d_o),e(L_,c_o),e(T,f_o),e(T,x_),e(x_,Eae),e(Eae,m_o),e(x_,g_o),e(x_,L$),e(L$,h_o),e(x_,p_o),e(T,__o),e(T,k_),e(k_,Cae),e(Cae,u_o),e(k_,b_o),e(k_,x$),e(x$,v_o),e(k_,F_o),e(T,T_o),e(T,S_),e(S_,wae),e(wae,M_o),e(S_,E_o),e(S_,k$),e(k$,C_o),e(S_,w_o),e(T,A_o),e(T,R_),e(R_,Aae),e(Aae,y_o),e(R_,L_o),e(R_,S$),e(S$,x_o),e(R_,k_o),e(T,S_o),e(T,B_),e(B_,yae),e(yae,R_o),e(B_,B_o),e(B_,R$),e(R$,P_o),e(B_,$_o),e(T,I_o),e(T,P_),e(P_,Lae),e(Lae,q_o),e(P_,N_o),e(P_,B$),e(B$,j_o),e(P_,D_o),e(T,G_o),e(T,$_),e($_,xae),e(xae,O_o),e($_,V_o),e($_,P$),e(P$,X_o),e($_,z_o),e(T,Q_o),e(T,I_),e(I_,kae),e(kae,W_o),e(I_,H_o),e(I_,$$),e($$,U_o),e(I_,J_o),e(T,Y_o),e(T,q_),e(q_,Sae),e(Sae,K_o),e(q_,Z_o),e(q_,I$),e(I$,euo),e(q_,ouo),e(T,ruo),e(T,N_),e(N_,Rae),e(Rae,tuo),e(N_,auo),e(N_,q$),e(q$,nuo),e(N_,suo),e(T,luo),e(T,j_),e(j_,Bae),e(Bae,iuo),e(j_,duo),e(j_,N$),e(N$,cuo),e(j_,fuo),e(T,muo),e(T,D_),e(D_,Pae),e(Pae,guo),e(D_,huo),e(D_,j$),e(j$,puo),e(D_,_uo),e(T,uuo),e(T,G_),e(G_,$ae),e($ae,buo),e(G_,vuo),e(G_,D$),e(D$,Fuo),e(G_,Tuo),e(T,Muo),e(T,O_),e(O_,Iae),e(Iae,Euo),e(O_,Cuo),e(O_,G$),e(G$,wuo),e(O_,Auo),e(T,yuo),e(T,V_),e(V_,qae),e(qae,Luo),e(V_,xuo),e(V_,O$),e(O$,kuo),e(V_,Suo),e(T,Ruo),e(T,X_),e(X_,Nae),e(Nae,Buo),e(X_,Puo),e(X_,V$),e(V$,$uo),e(X_,Iuo),e(T,quo),e(T,z_),e(z_,jae),e(jae,Nuo),e(z_,juo),e(z_,X$),e(X$,Duo),e(z_,Guo),e(T,Ouo),e(T,Q_),e(Q_,Dae),e(Dae,Vuo),e(Q_,Xuo),e(Q_,z$),e(z$,zuo),e(Q_,Quo),e(T,Wuo),e(T,W_),e(W_,Gae),e(Gae,Huo),e(W_,Uuo),e(W_,Q$),e(Q$,Juo),e(W_,Yuo),e(T,Kuo),e(T,H_),e(H_,Oae),e(Oae,Zuo),e(H_,e5o),e(H_,W$),e(W$,o5o),e(H_,r5o),e(T,t5o),e(T,U_),e(U_,Vae),e(Vae,a5o),e(U_,n5o),e(U_,H$),e(H$,s5o),e(U_,l5o),e(T,i5o),e(T,J_),e(J_,Xae),e(Xae,d5o),e(J_,c5o),e(J_,U$),e(U$,f5o),e(J_,m5o),e(T,g5o),e(T,Y_),e(Y_,zae),e(zae,h5o),e(Y_,p5o),e(Y_,J$),e(J$,_5o),e(Y_,u5o),e(T,b5o),e(T,K_),e(K_,Qae),e(Qae,v5o),e(K_,F5o),e(K_,Y$),e(Y$,T5o),e(K_,M5o),e(Ne,E5o),e(Ne,Z_),e(Z_,C5o),e(Z_,Wae),e(Wae,w5o),e(Z_,A5o),e(Z_,Hae),e(Hae,y5o),e(Ne,L5o),e(Ne,Uae),e(Uae,x5o),e(Ne,k5o),g(S6,Ne,null),b(c,hPe,u),b(c,id,u),e(id,eu),e(eu,Jae),g(R6,Jae,null),e(id,S5o),e(id,Yae),e(Yae,R5o),b(c,pPe,u),b(c,Yo,u),g(B6,Yo,null),e(Yo,B5o),e(Yo,dd),e(dd,P5o),e(dd,K$),e(K$,$5o),e(dd,I5o),e(dd,Z$),e(Z$,q5o),e(dd,N5o),e(Yo,j5o),e(Yo,P6),e(P6,D5o),e(P6,Kae),e(Kae,G5o),e(P6,O5o),e(Yo,V5o),e(Yo,zr),g($6,zr,null),e(zr,X5o),e(zr,Zae),e(Zae,z5o),e(zr,Q5o),e(zr,cd),e(cd,W5o),e(cd,ene),e(ene,H5o),e(cd,U5o),e(cd,eI),e(eI,J5o),e(cd,Y5o),e(zr,K5o),e(zr,one),e(one,Z5o),e(zr,e1o),g(I6,zr,null),e(Yo,o1o),e(Yo,je),g(q6,je,null),e(je,r1o),e(je,rne),e(rne,t1o),e(je,a1o),e(je,za),e(za,n1o),e(za,tne),e(tne,s1o),e(za,l1o),e(za,ane),e(ane,i1o),e(za,d1o),e(za,nne),e(nne,c1o),e(za,f1o),e(je,m1o),e(je,S),e(S,ou),e(ou,sne),e(sne,g1o),e(ou,h1o),e(ou,oI),e(oI,p1o),e(ou,_1o),e(S,u1o),e(S,ru),e(ru,lne),e(lne,b1o),e(ru,v1o),e(ru,rI),e(rI,F1o),e(ru,T1o),e(S,M1o),e(S,tu),e(tu,ine),e(ine,E1o),e(tu,C1o),e(tu,tI),e(tI,w1o),e(tu,A1o),e(S,y1o),e(S,au),e(au,dne),e(dne,L1o),e(au,x1o),e(au,aI),e(aI,k1o),e(au,S1o),e(S,R1o),e(S,nu),e(nu,cne),e(cne,B1o),e(nu,P1o),e(nu,nI),e(nI,$1o),e(nu,I1o),e(S,q1o),e(S,su),e(su,fne),e(fne,N1o),e(su,j1o),e(su,sI),e(sI,D1o),e(su,G1o),e(S,O1o),e(S,lu),e(lu,mne),e(mne,V1o),e(lu,X1o),e(lu,lI),e(lI,z1o),e(lu,Q1o),e(S,W1o),e(S,iu),e(iu,gne),e(gne,H1o),e(iu,U1o),e(iu,iI),e(iI,J1o),e(iu,Y1o),e(S,K1o),e(S,du),e(du,hne),e(hne,Z1o),e(du,e4o),e(du,dI),e(dI,o4o),e(du,r4o),e(S,t4o),e(S,cu),e(cu,pne),e(pne,a4o),e(cu,n4o),e(cu,cI),e(cI,s4o),e(cu,l4o),e(S,i4o),e(S,fu),e(fu,_ne),e(_ne,d4o),e(fu,c4o),e(fu,fI),e(fI,f4o),e(fu,m4o),e(S,g4o),e(S,mu),e(mu,une),e(une,h4o),e(mu,p4o),e(mu,mI),e(mI,_4o),e(mu,u4o),e(S,b4o),e(S,gu),e(gu,bne),e(bne,v4o),e(gu,F4o),e(gu,gI),e(gI,T4o),e(gu,M4o),e(S,E4o),e(S,hu),e(hu,vne),e(vne,C4o),e(hu,w4o),e(hu,hI),e(hI,A4o),e(hu,y4o),e(S,L4o),e(S,pu),e(pu,Fne),e(Fne,x4o),e(pu,k4o),e(pu,pI),e(pI,S4o),e(pu,R4o),e(S,B4o),e(S,_u),e(_u,Tne),e(Tne,P4o),e(_u,$4o),e(_u,_I),e(_I,I4o),e(_u,q4o),e(S,N4o),e(S,uu),e(uu,Mne),e(Mne,j4o),e(uu,D4o),e(uu,uI),e(uI,G4o),e(uu,O4o),e(S,V4o),e(S,bu),e(bu,Ene),e(Ene,X4o),e(bu,z4o),e(bu,bI),e(bI,Q4o),e(bu,W4o),e(S,H4o),e(S,vu),e(vu,Cne),e(Cne,U4o),e(vu,J4o),e(vu,vI),e(vI,Y4o),e(vu,K4o),e(S,Z4o),e(S,Fu),e(Fu,wne),e(wne,ebo),e(Fu,obo),e(Fu,FI),e(FI,rbo),e(Fu,tbo),e(S,abo),e(S,Tu),e(Tu,Ane),e(Ane,nbo),e(Tu,sbo),e(Tu,TI),e(TI,lbo),e(Tu,ibo),e(S,dbo),e(S,Mu),e(Mu,yne),e(yne,cbo),e(Mu,fbo),e(Mu,MI),e(MI,mbo),e(Mu,gbo),e(S,hbo),e(S,Eu),e(Eu,Lne),e(Lne,pbo),e(Eu,_bo),e(Eu,EI),e(EI,ubo),e(Eu,bbo),e(S,vbo),e(S,Cu),e(Cu,xne),e(xne,Fbo),e(Cu,Tbo),e(Cu,CI),e(CI,Mbo),e(Cu,Ebo),e(S,Cbo),e(S,wu),e(wu,kne),e(kne,wbo),e(wu,Abo),e(wu,wI),e(wI,ybo),e(wu,Lbo),e(S,xbo),e(S,Au),e(Au,Sne),e(Sne,kbo),e(Au,Sbo),e(Au,AI),e(AI,Rbo),e(Au,Bbo),e(S,Pbo),e(S,yu),e(yu,Rne),e(Rne,$bo),e(yu,Ibo),e(yu,yI),e(yI,qbo),e(yu,Nbo),e(S,jbo),e(S,Lu),e(Lu,Bne),e(Bne,Dbo),e(Lu,Gbo),e(Lu,LI),e(LI,Obo),e(Lu,Vbo),e(S,Xbo),e(S,xu),e(xu,Pne),e(Pne,zbo),e(xu,Qbo),e(xu,xI),e(xI,Wbo),e(xu,Hbo),e(S,Ubo),e(S,ku),e(ku,$ne),e($ne,Jbo),e(ku,Ybo),e(ku,kI),e(kI,Kbo),e(ku,Zbo),e(S,e2o),e(S,Su),e(Su,Ine),e(Ine,o2o),e(Su,r2o),e(Su,SI),e(SI,t2o),e(Su,a2o),e(S,n2o),e(S,Ru),e(Ru,qne),e(qne,s2o),e(Ru,l2o),e(Ru,RI),e(RI,i2o),e(Ru,d2o),e(S,c2o),e(S,Bu),e(Bu,Nne),e(Nne,f2o),e(Bu,m2o),e(Bu,BI),e(BI,g2o),e(Bu,h2o),e(S,p2o),e(S,Pu),e(Pu,jne),e(jne,_2o),e(Pu,u2o),e(Pu,PI),e(PI,b2o),e(Pu,v2o),e(S,F2o),e(S,$u),e($u,Dne),e(Dne,T2o),e($u,M2o),e($u,$I),e($I,E2o),e($u,C2o),e(S,w2o),e(S,Iu),e(Iu,Gne),e(Gne,A2o),e(Iu,y2o),e(Iu,II),e(II,L2o),e(Iu,x2o),e(S,k2o),e(S,qu),e(qu,One),e(One,S2o),e(qu,R2o),e(qu,qI),e(qI,B2o),e(qu,P2o),e(S,$2o),e(S,Nu),e(Nu,Vne),e(Vne,I2o),e(Nu,q2o),e(Nu,NI),e(NI,N2o),e(Nu,j2o),e(S,D2o),e(S,ju),e(ju,Xne),e(Xne,G2o),e(ju,O2o),e(ju,jI),e(jI,V2o),e(ju,X2o),e(je,z2o),e(je,Du),e(Du,Q2o),e(Du,zne),e(zne,W2o),e(Du,H2o),e(Du,Qne),e(Qne,U2o),e(je,J2o),e(je,Wne),e(Wne,Y2o),e(je,K2o),g(N6,je,null),b(c,_Pe,u),b(c,fd,u),e(fd,Gu),e(Gu,Hne),g(j6,Hne,null),e(fd,Z2o),e(fd,Une),e(Une,evo),b(c,uPe,u),b(c,Ko,u),g(D6,Ko,null),e(Ko,ovo),e(Ko,md),e(md,rvo),e(md,DI),e(DI,tvo),e(md,avo),e(md,GI),e(GI,nvo),e(md,svo),e(Ko,lvo),e(Ko,G6),e(G6,ivo),e(G6,Jne),e(Jne,dvo),e(G6,cvo),e(Ko,fvo),e(Ko,Qr),g(O6,Qr,null),e(Qr,mvo),e(Qr,Yne),e(Yne,gvo),e(Qr,hvo),e(Qr,gd),e(gd,pvo),e(gd,Kne),e(Kne,_vo),e(gd,uvo),e(gd,OI),e(OI,bvo),e(gd,vvo),e(Qr,Fvo),e(Qr,Zne),e(Zne,Tvo),e(Qr,Mvo),g(V6,Qr,null),e(Ko,Evo),e(Ko,De),g(X6,De,null),e(De,Cvo),e(De,ese),e(ese,wvo),e(De,Avo),e(De,Qa),e(Qa,yvo),e(Qa,ose),e(ose,Lvo),e(Qa,xvo),e(Qa,rse),e(rse,kvo),e(Qa,Svo),e(Qa,tse),e(tse,Rvo),e(Qa,Bvo),e(De,Pvo),e(De,$),e($,Ou),e(Ou,ase),e(ase,$vo),e(Ou,Ivo),e(Ou,VI),e(VI,qvo),e(Ou,Nvo),e($,jvo),e($,Vu),e(Vu,nse),e(nse,Dvo),e(Vu,Gvo),e(Vu,XI),e(XI,Ovo),e(Vu,Vvo),e($,Xvo),e($,Xu),e(Xu,sse),e(sse,zvo),e(Xu,Qvo),e(Xu,zI),e(zI,Wvo),e(Xu,Hvo),e($,Uvo),e($,zu),e(zu,lse),e(lse,Jvo),e(zu,Yvo),e(zu,QI),e(QI,Kvo),e(zu,Zvo),e($,eFo),e($,Qu),e(Qu,ise),e(ise,oFo),e(Qu,rFo),e(Qu,WI),e(WI,tFo),e(Qu,aFo),e($,nFo),e($,Wu),e(Wu,dse),e(dse,sFo),e(Wu,lFo),e(Wu,HI),e(HI,iFo),e(Wu,dFo),e($,cFo),e($,Hu),e(Hu,cse),e(cse,fFo),e(Hu,mFo),e(Hu,UI),e(UI,gFo),e(Hu,hFo),e($,pFo),e($,Uu),e(Uu,fse),e(fse,_Fo),e(Uu,uFo),e(Uu,JI),e(JI,bFo),e(Uu,vFo),e($,FFo),e($,Ju),e(Ju,mse),e(mse,TFo),e(Ju,MFo),e(Ju,YI),e(YI,EFo),e(Ju,CFo),e($,wFo),e($,Yu),e(Yu,gse),e(gse,AFo),e(Yu,yFo),e(Yu,KI),e(KI,LFo),e(Yu,xFo),e($,kFo),e($,Ku),e(Ku,hse),e(hse,SFo),e(Ku,RFo),e(Ku,ZI),e(ZI,BFo),e(Ku,PFo),e($,$Fo),e($,Zu),e(Zu,pse),e(pse,IFo),e(Zu,qFo),e(Zu,eq),e(eq,NFo),e(Zu,jFo),e($,DFo),e($,e5),e(e5,_se),e(_se,GFo),e(e5,OFo),e(e5,oq),e(oq,VFo),e(e5,XFo),e($,zFo),e($,o5),e(o5,use),e(use,QFo),e(o5,WFo),e(o5,rq),e(rq,HFo),e(o5,UFo),e($,JFo),e($,r5),e(r5,bse),e(bse,YFo),e(r5,KFo),e(r5,tq),e(tq,ZFo),e(r5,eTo),e($,oTo),e($,t5),e(t5,vse),e(vse,rTo),e(t5,tTo),e(t5,aq),e(aq,aTo),e(t5,nTo),e($,sTo),e($,a5),e(a5,Fse),e(Fse,lTo),e(a5,iTo),e(a5,nq),e(nq,dTo),e(a5,cTo),e($,fTo),e($,n5),e(n5,Tse),e(Tse,mTo),e(n5,gTo),e(n5,sq),e(sq,hTo),e(n5,pTo),e($,_To),e($,s5),e(s5,Mse),e(Mse,uTo),e(s5,bTo),e(s5,lq),e(lq,vTo),e(s5,FTo),e($,TTo),e($,l5),e(l5,Ese),e(Ese,MTo),e(l5,ETo),e(l5,iq),e(iq,CTo),e(l5,wTo),e($,ATo),e($,i5),e(i5,Cse),e(Cse,yTo),e(i5,LTo),e(i5,dq),e(dq,xTo),e(i5,kTo),e($,STo),e($,d5),e(d5,wse),e(wse,RTo),e(d5,BTo),e(d5,cq),e(cq,PTo),e(d5,$To),e($,ITo),e($,c5),e(c5,Ase),e(Ase,qTo),e(c5,NTo),e(c5,fq),e(fq,jTo),e(c5,DTo),e($,GTo),e($,f5),e(f5,yse),e(yse,OTo),e(f5,VTo),e(f5,mq),e(mq,XTo),e(f5,zTo),e($,QTo),e($,m5),e(m5,Lse),e(Lse,WTo),e(m5,HTo),e(m5,gq),e(gq,UTo),e(m5,JTo),e($,YTo),e($,g5),e(g5,xse),e(xse,KTo),e(g5,ZTo),e(g5,hq),e(hq,e7o),e(g5,o7o),e($,r7o),e($,h5),e(h5,kse),e(kse,t7o),e(h5,a7o),e(h5,pq),e(pq,n7o),e(h5,s7o),e($,l7o),e($,p5),e(p5,Sse),e(Sse,i7o),e(p5,d7o),e(p5,_q),e(_q,c7o),e(p5,f7o),e($,m7o),e($,_5),e(_5,Rse),e(Rse,g7o),e(_5,h7o),e(_5,uq),e(uq,p7o),e(_5,_7o),e($,u7o),e($,u5),e(u5,Bse),e(Bse,b7o),e(u5,v7o),e(u5,bq),e(bq,F7o),e(u5,T7o),e($,M7o),e($,b5),e(b5,Pse),e(Pse,E7o),e(b5,C7o),e(b5,vq),e(vq,w7o),e(b5,A7o),e($,y7o),e($,v5),e(v5,$se),e($se,L7o),e(v5,x7o),e(v5,Fq),e(Fq,k7o),e(v5,S7o),e($,R7o),e($,F5),e(F5,Ise),e(Ise,B7o),e(F5,P7o),e(F5,Tq),e(Tq,$7o),e(F5,I7o),e($,q7o),e($,T5),e(T5,qse),e(qse,N7o),e(T5,j7o),e(T5,Mq),e(Mq,D7o),e(T5,G7o),e($,O7o),e($,M5),e(M5,Nse),e(Nse,V7o),e(M5,X7o),e(M5,Eq),e(Eq,z7o),e(M5,Q7o),e(De,W7o),e(De,E5),e(E5,H7o),e(E5,jse),e(jse,U7o),e(E5,J7o),e(E5,Dse),e(Dse,Y7o),e(De,K7o),e(De,Gse),e(Gse,Z7o),e(De,eMo),g(z6,De,null),b(c,bPe,u),b(c,hd,u),e(hd,C5),e(C5,Ose),g(Q6,Ose,null),e(hd,oMo),e(hd,Vse),e(Vse,rMo),b(c,vPe,u),b(c,Zo,u),g(W6,Zo,null),e(Zo,tMo),e(Zo,pd),e(pd,aMo),e(pd,Cq),e(Cq,nMo),e(pd,sMo),e(pd,wq),e(wq,lMo),e(pd,iMo),e(Zo,dMo),e(Zo,H6),e(H6,cMo),e(H6,Xse),e(Xse,fMo),e(H6,mMo),e(Zo,gMo),e(Zo,Wr),g(U6,Wr,null),e(Wr,hMo),e(Wr,zse),e(zse,pMo),e(Wr,_Mo),e(Wr,_d),e(_d,uMo),e(_d,Qse),e(Qse,bMo),e(_d,vMo),e(_d,Aq),e(Aq,FMo),e(_d,TMo),e(Wr,MMo),e(Wr,Wse),e(Wse,EMo),e(Wr,CMo),g(J6,Wr,null),e(Zo,wMo),e(Zo,Ge),g(Y6,Ge,null),e(Ge,AMo),e(Ge,Hse),e(Hse,yMo),e(Ge,LMo),e(Ge,Wa),e(Wa,xMo),e(Wa,Use),e(Use,kMo),e(Wa,SMo),e(Wa,Jse),e(Jse,RMo),e(Wa,BMo),e(Wa,Yse),e(Yse,PMo),e(Wa,$Mo),e(Ge,IMo),e(Ge,I),e(I,w5),e(w5,Kse),e(Kse,qMo),e(w5,NMo),e(w5,yq),e(yq,jMo),e(w5,DMo),e(I,GMo),e(I,A5),e(A5,Zse),e(Zse,OMo),e(A5,VMo),e(A5,Lq),e(Lq,XMo),e(A5,zMo),e(I,QMo),e(I,y5),e(y5,ele),e(ele,WMo),e(y5,HMo),e(y5,xq),e(xq,UMo),e(y5,JMo),e(I,YMo),e(I,L5),e(L5,ole),e(ole,KMo),e(L5,ZMo),e(L5,kq),e(kq,eEo),e(L5,oEo),e(I,rEo),e(I,x5),e(x5,rle),e(rle,tEo),e(x5,aEo),e(x5,Sq),e(Sq,nEo),e(x5,sEo),e(I,lEo),e(I,k5),e(k5,tle),e(tle,iEo),e(k5,dEo),e(k5,Rq),e(Rq,cEo),e(k5,fEo),e(I,mEo),e(I,S5),e(S5,ale),e(ale,gEo),e(S5,hEo),e(S5,Bq),e(Bq,pEo),e(S5,_Eo),e(I,uEo),e(I,R5),e(R5,nle),e(nle,bEo),e(R5,vEo),e(R5,Pq),e(Pq,FEo),e(R5,TEo),e(I,MEo),e(I,B5),e(B5,sle),e(sle,EEo),e(B5,CEo),e(B5,$q),e($q,wEo),e(B5,AEo),e(I,yEo),e(I,P5),e(P5,lle),e(lle,LEo),e(P5,xEo),e(P5,Iq),e(Iq,kEo),e(P5,SEo),e(I,REo),e(I,$5),e($5,ile),e(ile,BEo),e($5,PEo),e($5,qq),e(qq,$Eo),e($5,IEo),e(I,qEo),e(I,I5),e(I5,dle),e(dle,NEo),e(I5,jEo),e(I5,Nq),e(Nq,DEo),e(I5,GEo),e(I,OEo),e(I,q5),e(q5,cle),e(cle,VEo),e(q5,XEo),e(q5,jq),e(jq,zEo),e(q5,QEo),e(I,WEo),e(I,N5),e(N5,fle),e(fle,HEo),e(N5,UEo),e(N5,Dq),e(Dq,JEo),e(N5,YEo),e(I,KEo),e(I,j5),e(j5,mle),e(mle,ZEo),e(j5,e3o),e(j5,Gq),e(Gq,o3o),e(j5,r3o),e(I,t3o),e(I,D5),e(D5,gle),e(gle,a3o),e(D5,n3o),e(D5,Oq),e(Oq,s3o),e(D5,l3o),e(I,i3o),e(I,G5),e(G5,hle),e(hle,d3o),e(G5,c3o),e(G5,Vq),e(Vq,f3o),e(G5,m3o),e(I,g3o),e(I,O5),e(O5,ple),e(ple,h3o),e(O5,p3o),e(O5,Xq),e(Xq,_3o),e(O5,u3o),e(I,b3o),e(I,V5),e(V5,_le),e(_le,v3o),e(V5,F3o),e(V5,zq),e(zq,T3o),e(V5,M3o),e(I,E3o),e(I,X5),e(X5,ule),e(ule,C3o),e(X5,w3o),e(X5,Qq),e(Qq,A3o),e(X5,y3o),e(I,L3o),e(I,z5),e(z5,ble),e(ble,x3o),e(z5,k3o),e(z5,Wq),e(Wq,S3o),e(z5,R3o),e(I,B3o),e(I,Q5),e(Q5,vle),e(vle,P3o),e(Q5,$3o),e(Q5,Hq),e(Hq,I3o),e(Q5,q3o),e(I,N3o),e(I,W5),e(W5,Fle),e(Fle,j3o),e(W5,D3o),e(W5,Uq),e(Uq,G3o),e(W5,O3o),e(I,V3o),e(I,H5),e(H5,Tle),e(Tle,X3o),e(H5,z3o),e(H5,Jq),e(Jq,Q3o),e(H5,W3o),e(I,H3o),e(I,U5),e(U5,Mle),e(Mle,U3o),e(U5,J3o),e(U5,Yq),e(Yq,Y3o),e(U5,K3o),e(I,Z3o),e(I,J5),e(J5,Ele),e(Ele,eCo),e(J5,oCo),e(J5,Kq),e(Kq,rCo),e(J5,tCo),e(I,aCo),e(I,Y5),e(Y5,Cle),e(Cle,nCo),e(Y5,sCo),e(Y5,Zq),e(Zq,lCo),e(Y5,iCo),e(I,dCo),e(I,K5),e(K5,wle),e(wle,cCo),e(K5,fCo),e(K5,eN),e(eN,mCo),e(K5,gCo),e(I,hCo),e(I,Z5),e(Z5,Ale),e(Ale,pCo),e(Z5,_Co),e(Z5,oN),e(oN,uCo),e(Z5,bCo),e(I,vCo),e(I,e1),e(e1,yle),e(yle,FCo),e(e1,TCo),e(e1,rN),e(rN,MCo),e(e1,ECo),e(I,CCo),e(I,o1),e(o1,Lle),e(Lle,wCo),e(o1,ACo),e(o1,xle),e(xle,yCo),e(o1,LCo),e(I,xCo),e(I,r1),e(r1,kle),e(kle,kCo),e(r1,SCo),e(r1,tN),e(tN,RCo),e(r1,BCo),e(I,PCo),e(I,t1),e(t1,Sle),e(Sle,$Co),e(t1,ICo),e(t1,aN),e(aN,qCo),e(t1,NCo),e(I,jCo),e(I,a1),e(a1,Rle),e(Rle,DCo),e(a1,GCo),e(a1,nN),e(nN,OCo),e(a1,VCo),e(I,XCo),e(I,n1),e(n1,Ble),e(Ble,zCo),e(n1,QCo),e(n1,sN),e(sN,WCo),e(n1,HCo),e(Ge,UCo),e(Ge,s1),e(s1,JCo),e(s1,Ple),e(Ple,YCo),e(s1,KCo),e(s1,$le),e($le,ZCo),e(Ge,e6o),e(Ge,Ile),e(Ile,o6o),e(Ge,r6o),g(K6,Ge,null),b(c,FPe,u),b(c,ud,u),e(ud,l1),e(l1,qle),g(Z6,qle,null),e(ud,t6o),e(ud,Nle),e(Nle,a6o),b(c,TPe,u),b(c,er,u),g(ew,er,null),e(er,n6o),e(er,bd),e(bd,s6o),e(bd,lN),e(lN,l6o),e(bd,i6o),e(bd,iN),e(iN,d6o),e(bd,c6o),e(er,f6o),e(er,ow),e(ow,m6o),e(ow,jle),e(jle,g6o),e(ow,h6o),e(er,p6o),e(er,Hr),g(rw,Hr,null),e(Hr,_6o),e(Hr,Dle),e(Dle,u6o),e(Hr,b6o),e(Hr,vd),e(vd,v6o),e(vd,Gle),e(Gle,F6o),e(vd,T6o),e(vd,dN),e(dN,M6o),e(vd,E6o),e(Hr,C6o),e(Hr,Ole),e(Ole,w6o),e(Hr,A6o),g(tw,Hr,null),e(er,y6o),e(er,Oe),g(aw,Oe,null),e(Oe,L6o),e(Oe,Vle),e(Vle,x6o),e(Oe,k6o),e(Oe,Ha),e(Ha,S6o),e(Ha,Xle),e(Xle,R6o),e(Ha,B6o),e(Ha,zle),e(zle,P6o),e(Ha,$6o),e(Ha,Qle),e(Qle,I6o),e(Ha,q6o),e(Oe,N6o),e(Oe,ne),e(ne,i1),e(i1,Wle),e(Wle,j6o),e(i1,D6o),e(i1,cN),e(cN,G6o),e(i1,O6o),e(ne,V6o),e(ne,d1),e(d1,Hle),e(Hle,X6o),e(d1,z6o),e(d1,fN),e(fN,Q6o),e(d1,W6o),e(ne,H6o),e(ne,c1),e(c1,Ule),e(Ule,U6o),e(c1,J6o),e(c1,mN),e(mN,Y6o),e(c1,K6o),e(ne,Z6o),e(ne,f1),e(f1,Jle),e(Jle,ewo),e(f1,owo),e(f1,gN),e(gN,rwo),e(f1,two),e(ne,awo),e(ne,m1),e(m1,Yle),e(Yle,nwo),e(m1,swo),e(m1,hN),e(hN,lwo),e(m1,iwo),e(ne,dwo),e(ne,g1),e(g1,Kle),e(Kle,cwo),e(g1,fwo),e(g1,pN),e(pN,mwo),e(g1,gwo),e(ne,hwo),e(ne,h1),e(h1,Zle),e(Zle,pwo),e(h1,_wo),e(h1,_N),e(_N,uwo),e(h1,bwo),e(ne,vwo),e(ne,p1),e(p1,eie),e(eie,Fwo),e(p1,Two),e(p1,uN),e(uN,Mwo),e(p1,Ewo),e(ne,Cwo),e(ne,_1),e(_1,oie),e(oie,wwo),e(_1,Awo),e(_1,bN),e(bN,ywo),e(_1,Lwo),e(ne,xwo),e(ne,u1),e(u1,rie),e(rie,kwo),e(u1,Swo),e(u1,vN),e(vN,Rwo),e(u1,Bwo),e(ne,Pwo),e(ne,b1),e(b1,tie),e(tie,$wo),e(b1,Iwo),e(b1,FN),e(FN,qwo),e(b1,Nwo),e(ne,jwo),e(ne,v1),e(v1,aie),e(aie,Dwo),e(v1,Gwo),e(v1,TN),e(TN,Owo),e(v1,Vwo),e(ne,Xwo),e(ne,F1),e(F1,nie),e(nie,zwo),e(F1,Qwo),e(F1,MN),e(MN,Wwo),e(F1,Hwo),e(ne,Uwo),e(ne,T1),e(T1,sie),e(sie,Jwo),e(T1,Ywo),e(T1,EN),e(EN,Kwo),e(T1,Zwo),e(ne,eAo),e(ne,M1),e(M1,lie),e(lie,oAo),e(M1,rAo),e(M1,CN),e(CN,tAo),e(M1,aAo),e(ne,nAo),e(ne,E1),e(E1,iie),e(iie,sAo),e(E1,lAo),e(E1,wN),e(wN,iAo),e(E1,dAo),e(ne,cAo),e(ne,C1),e(C1,die),e(die,fAo),e(C1,mAo),e(C1,AN),e(AN,gAo),e(C1,hAo),e(Oe,pAo),e(Oe,w1),e(w1,_Ao),e(w1,cie),e(cie,uAo),e(w1,bAo),e(w1,fie),e(fie,vAo),e(Oe,FAo),e(Oe,mie),e(mie,TAo),e(Oe,MAo),g(nw,Oe,null),b(c,MPe,u),b(c,Fd,u),e(Fd,A1),e(A1,gie),g(sw,gie,null),e(Fd,EAo),e(Fd,hie),e(hie,CAo),b(c,EPe,u),b(c,or,u),g(lw,or,null),e(or,wAo),e(or,Td),e(Td,AAo),e(Td,yN),e(yN,yAo),e(Td,LAo),e(Td,LN),e(LN,xAo),e(Td,kAo),e(or,SAo),e(or,iw),e(iw,RAo),e(iw,pie),e(pie,BAo),e(iw,PAo),e(or,$Ao),e(or,Ur),g(dw,Ur,null),e(Ur,IAo),e(Ur,_ie),e(_ie,qAo),e(Ur,NAo),e(Ur,Md),e(Md,jAo),e(Md,uie),e(uie,DAo),e(Md,GAo),e(Md,xN),e(xN,OAo),e(Md,VAo),e(Ur,XAo),e(Ur,bie),e(bie,zAo),e(Ur,QAo),g(cw,Ur,null),e(or,WAo),e(or,Ve),g(fw,Ve,null),e(Ve,HAo),e(Ve,vie),e(vie,UAo),e(Ve,JAo),e(Ve,Ua),e(Ua,YAo),e(Ua,Fie),e(Fie,KAo),e(Ua,ZAo),e(Ua,Tie),e(Tie,e0o),e(Ua,o0o),e(Ua,Mie),e(Mie,r0o),e(Ua,t0o),e(Ve,a0o),e(Ve,y),e(y,y1),e(y1,Eie),e(Eie,n0o),e(y1,s0o),e(y1,kN),e(kN,l0o),e(y1,i0o),e(y,d0o),e(y,L1),e(L1,Cie),e(Cie,c0o),e(L1,f0o),e(L1,SN),e(SN,m0o),e(L1,g0o),e(y,h0o),e(y,x1),e(x1,wie),e(wie,p0o),e(x1,_0o),e(x1,RN),e(RN,u0o),e(x1,b0o),e(y,v0o),e(y,k1),e(k1,Aie),e(Aie,F0o),e(k1,T0o),e(k1,BN),e(BN,M0o),e(k1,E0o),e(y,C0o),e(y,S1),e(S1,yie),e(yie,w0o),e(S1,A0o),e(S1,PN),e(PN,y0o),e(S1,L0o),e(y,x0o),e(y,R1),e(R1,Lie),e(Lie,k0o),e(R1,S0o),e(R1,$N),e($N,R0o),e(R1,B0o),e(y,P0o),e(y,B1),e(B1,xie),e(xie,$0o),e(B1,I0o),e(B1,IN),e(IN,q0o),e(B1,N0o),e(y,j0o),e(y,P1),e(P1,kie),e(kie,D0o),e(P1,G0o),e(P1,qN),e(qN,O0o),e(P1,V0o),e(y,X0o),e(y,$1),e($1,Sie),e(Sie,z0o),e($1,Q0o),e($1,NN),e(NN,W0o),e($1,H0o),e(y,U0o),e(y,I1),e(I1,Rie),e(Rie,J0o),e(I1,Y0o),e(I1,jN),e(jN,K0o),e(I1,Z0o),e(y,eyo),e(y,q1),e(q1,Bie),e(Bie,oyo),e(q1,ryo),e(q1,DN),e(DN,tyo),e(q1,ayo),e(y,nyo),e(y,N1),e(N1,Pie),e(Pie,syo),e(N1,lyo),e(N1,GN),e(GN,iyo),e(N1,dyo),e(y,cyo),e(y,j1),e(j1,$ie),e($ie,fyo),e(j1,myo),e(j1,ON),e(ON,gyo),e(j1,hyo),e(y,pyo),e(y,D1),e(D1,Iie),e(Iie,_yo),e(D1,uyo),e(D1,VN),e(VN,byo),e(D1,vyo),e(y,Fyo),e(y,G1),e(G1,qie),e(qie,Tyo),e(G1,Myo),e(G1,XN),e(XN,Eyo),e(G1,Cyo),e(y,wyo),e(y,O1),e(O1,Nie),e(Nie,Ayo),e(O1,yyo),e(O1,zN),e(zN,Lyo),e(O1,xyo),e(y,kyo),e(y,V1),e(V1,jie),e(jie,Syo),e(V1,Ryo),e(V1,QN),e(QN,Byo),e(V1,Pyo),e(y,$yo),e(y,X1),e(X1,Die),e(Die,Iyo),e(X1,qyo),e(X1,WN),e(WN,Nyo),e(X1,jyo),e(y,Dyo),e(y,z1),e(z1,Gie),e(Gie,Gyo),e(z1,Oyo),e(z1,HN),e(HN,Vyo),e(z1,Xyo),e(y,zyo),e(y,Q1),e(Q1,Oie),e(Oie,Qyo),e(Q1,Wyo),e(Q1,UN),e(UN,Hyo),e(Q1,Uyo),e(y,Jyo),e(y,W1),e(W1,Vie),e(Vie,Yyo),e(W1,Kyo),e(W1,JN),e(JN,Zyo),e(W1,e8o),e(y,o8o),e(y,H1),e(H1,Xie),e(Xie,r8o),e(H1,t8o),e(H1,YN),e(YN,a8o),e(H1,n8o),e(y,s8o),e(y,U1),e(U1,zie),e(zie,l8o),e(U1,i8o),e(U1,KN),e(KN,d8o),e(U1,c8o),e(y,f8o),e(y,J1),e(J1,Qie),e(Qie,m8o),e(J1,g8o),e(J1,ZN),e(ZN,h8o),e(J1,p8o),e(y,_8o),e(y,Y1),e(Y1,Wie),e(Wie,u8o),e(Y1,b8o),e(Y1,ej),e(ej,v8o),e(Y1,F8o),e(y,T8o),e(y,K1),e(K1,Hie),e(Hie,M8o),e(K1,E8o),e(K1,oj),e(oj,C8o),e(K1,w8o),e(y,A8o),e(y,Z1),e(Z1,Uie),e(Uie,y8o),e(Z1,L8o),e(Z1,rj),e(rj,x8o),e(Z1,k8o),e(y,S8o),e(y,e4),e(e4,Jie),e(Jie,R8o),e(e4,B8o),e(e4,tj),e(tj,P8o),e(e4,$8o),e(y,I8o),e(y,o4),e(o4,Yie),e(Yie,q8o),e(o4,N8o),e(o4,aj),e(aj,j8o),e(o4,D8o),e(y,G8o),e(y,r4),e(r4,Kie),e(Kie,O8o),e(r4,V8o),e(r4,nj),e(nj,X8o),e(r4,z8o),e(y,Q8o),e(y,t4),e(t4,Zie),e(Zie,W8o),e(t4,H8o),e(t4,sj),e(sj,U8o),e(t4,J8o),e(y,Y8o),e(y,a4),e(a4,ede),e(ede,K8o),e(a4,Z8o),e(a4,lj),e(lj,eLo),e(a4,oLo),e(y,rLo),e(y,n4),e(n4,ode),e(ode,tLo),e(n4,aLo),e(n4,ij),e(ij,nLo),e(n4,sLo),e(y,lLo),e(y,s4),e(s4,rde),e(rde,iLo),e(s4,dLo),e(s4,dj),e(dj,cLo),e(s4,fLo),e(y,mLo),e(y,l4),e(l4,tde),e(tde,gLo),e(l4,hLo),e(l4,cj),e(cj,pLo),e(l4,_Lo),e(y,uLo),e(y,i4),e(i4,ade),e(ade,bLo),e(i4,vLo),e(i4,fj),e(fj,FLo),e(i4,TLo),e(y,MLo),e(y,d4),e(d4,nde),e(nde,ELo),e(d4,CLo),e(d4,mj),e(mj,wLo),e(d4,ALo),e(y,yLo),e(y,c4),e(c4,sde),e(sde,LLo),e(c4,xLo),e(c4,gj),e(gj,kLo),e(c4,SLo),e(y,RLo),e(y,f4),e(f4,lde),e(lde,BLo),e(f4,PLo),e(f4,hj),e(hj,$Lo),e(f4,ILo),e(y,qLo),e(y,m4),e(m4,ide),e(ide,NLo),e(m4,jLo),e(m4,pj),e(pj,DLo),e(m4,GLo),e(y,OLo),e(y,g4),e(g4,dde),e(dde,VLo),e(g4,XLo),e(g4,_j),e(_j,zLo),e(g4,QLo),e(y,WLo),e(y,h4),e(h4,cde),e(cde,HLo),e(h4,ULo),e(h4,uj),e(uj,JLo),e(h4,YLo),e(y,KLo),e(y,p4),e(p4,fde),e(fde,ZLo),e(p4,e9o),e(p4,bj),e(bj,o9o),e(p4,r9o),e(y,t9o),e(y,_4),e(_4,mde),e(mde,a9o),e(_4,n9o),e(_4,vj),e(vj,s9o),e(_4,l9o),e(y,i9o),e(y,u4),e(u4,gde),e(gde,d9o),e(u4,c9o),e(u4,Fj),e(Fj,f9o),e(u4,m9o),e(y,g9o),e(y,b4),e(b4,hde),e(hde,h9o),e(b4,p9o),e(b4,Tj),e(Tj,_9o),e(b4,u9o),e(y,b9o),e(y,v4),e(v4,pde),e(pde,v9o),e(v4,F9o),e(v4,Mj),e(Mj,T9o),e(v4,M9o),e(Ve,E9o),e(Ve,F4),e(F4,C9o),e(F4,_de),e(_de,w9o),e(F4,A9o),e(F4,ude),e(ude,y9o),e(Ve,L9o),e(Ve,bde),e(bde,x9o),e(Ve,k9o),g(mw,Ve,null),b(c,CPe,u),b(c,Ed,u),e(Ed,T4),e(T4,vde),g(gw,vde,null),e(Ed,S9o),e(Ed,Fde),e(Fde,R9o),b(c,wPe,u),b(c,rr,u),g(hw,rr,null),e(rr,B9o),e(rr,Cd),e(Cd,P9o),e(Cd,Ej),e(Ej,$9o),e(Cd,I9o),e(Cd,Cj),e(Cj,q9o),e(Cd,N9o),e(rr,j9o),e(rr,pw),e(pw,D9o),e(pw,Tde),e(Tde,G9o),e(pw,O9o),e(rr,V9o),e(rr,Jr),g(_w,Jr,null),e(Jr,X9o),e(Jr,Mde),e(Mde,z9o),e(Jr,Q9o),e(Jr,wd),e(wd,W9o),e(wd,Ede),e(Ede,H9o),e(wd,U9o),e(wd,wj),e(wj,J9o),e(wd,Y9o),e(Jr,K9o),e(Jr,Cde),e(Cde,Z9o),e(Jr,exo),g(uw,Jr,null),e(rr,oxo),e(rr,Xe),g(bw,Xe,null),e(Xe,rxo),e(Xe,wde),e(wde,txo),e(Xe,axo),e(Xe,Ja),e(Ja,nxo),e(Ja,Ade),e(Ade,sxo),e(Ja,lxo),e(Ja,yde),e(yde,ixo),e(Ja,dxo),e(Ja,Lde),e(Lde,cxo),e(Ja,fxo),e(Xe,mxo),e(Xe,G),e(G,M4),e(M4,xde),e(xde,gxo),e(M4,hxo),e(M4,Aj),e(Aj,pxo),e(M4,_xo),e(G,uxo),e(G,E4),e(E4,kde),e(kde,bxo),e(E4,vxo),e(E4,yj),e(yj,Fxo),e(E4,Txo),e(G,Mxo),e(G,C4),e(C4,Sde),e(Sde,Exo),e(C4,Cxo),e(C4,Lj),e(Lj,wxo),e(C4,Axo),e(G,yxo),e(G,w4),e(w4,Rde),e(Rde,Lxo),e(w4,xxo),e(w4,xj),e(xj,kxo),e(w4,Sxo),e(G,Rxo),e(G,A4),e(A4,Bde),e(Bde,Bxo),e(A4,Pxo),e(A4,kj),e(kj,$xo),e(A4,Ixo),e(G,qxo),e(G,y4),e(y4,Pde),e(Pde,Nxo),e(y4,jxo),e(y4,Sj),e(Sj,Dxo),e(y4,Gxo),e(G,Oxo),e(G,L4),e(L4,$de),e($de,Vxo),e(L4,Xxo),e(L4,Rj),e(Rj,zxo),e(L4,Qxo),e(G,Wxo),e(G,x4),e(x4,Ide),e(Ide,Hxo),e(x4,Uxo),e(x4,Bj),e(Bj,Jxo),e(x4,Yxo),e(G,Kxo),e(G,k4),e(k4,qde),e(qde,Zxo),e(k4,eko),e(k4,Pj),e(Pj,oko),e(k4,rko),e(G,tko),e(G,S4),e(S4,Nde),e(Nde,ako),e(S4,nko),e(S4,$j),e($j,sko),e(S4,lko),e(G,iko),e(G,R4),e(R4,jde),e(jde,dko),e(R4,cko),e(R4,Ij),e(Ij,fko),e(R4,mko),e(G,gko),e(G,B4),e(B4,Dde),e(Dde,hko),e(B4,pko),e(B4,qj),e(qj,_ko),e(B4,uko),e(G,bko),e(G,P4),e(P4,Gde),e(Gde,vko),e(P4,Fko),e(P4,Nj),e(Nj,Tko),e(P4,Mko),e(G,Eko),e(G,$4),e($4,Ode),e(Ode,Cko),e($4,wko),e($4,jj),e(jj,Ako),e($4,yko),e(G,Lko),e(G,I4),e(I4,Vde),e(Vde,xko),e(I4,kko),e(I4,Dj),e(Dj,Sko),e(I4,Rko),e(G,Bko),e(G,q4),e(q4,Xde),e(Xde,Pko),e(q4,$ko),e(q4,Gj),e(Gj,Iko),e(q4,qko),e(G,Nko),e(G,N4),e(N4,zde),e(zde,jko),e(N4,Dko),e(N4,Oj),e(Oj,Gko),e(N4,Oko),e(G,Vko),e(G,j4),e(j4,Qde),e(Qde,Xko),e(j4,zko),e(j4,Vj),e(Vj,Qko),e(j4,Wko),e(G,Hko),e(G,D4),e(D4,Wde),e(Wde,Uko),e(D4,Jko),e(D4,Xj),e(Xj,Yko),e(D4,Kko),e(G,Zko),e(G,G4),e(G4,Hde),e(Hde,eSo),e(G4,oSo),e(G4,zj),e(zj,rSo),e(G4,tSo),e(G,aSo),e(G,O4),e(O4,Ude),e(Ude,nSo),e(O4,sSo),e(O4,Qj),e(Qj,lSo),e(O4,iSo),e(G,dSo),e(G,V4),e(V4,Jde),e(Jde,cSo),e(V4,fSo),e(V4,Wj),e(Wj,mSo),e(V4,gSo),e(G,hSo),e(G,X4),e(X4,Yde),e(Yde,pSo),e(X4,_So),e(X4,Hj),e(Hj,uSo),e(X4,bSo),e(G,vSo),e(G,z4),e(z4,Kde),e(Kde,FSo),e(z4,TSo),e(z4,Uj),e(Uj,MSo),e(z4,ESo),e(G,CSo),e(G,Q4),e(Q4,Zde),e(Zde,wSo),e(Q4,ASo),e(Q4,Jj),e(Jj,ySo),e(Q4,LSo),e(G,xSo),e(G,W4),e(W4,ece),e(ece,kSo),e(W4,SSo),e(W4,Yj),e(Yj,RSo),e(W4,BSo),e(G,PSo),e(G,H4),e(H4,oce),e(oce,$So),e(H4,ISo),e(H4,Kj),e(Kj,qSo),e(H4,NSo),e(G,jSo),e(G,U4),e(U4,rce),e(rce,DSo),e(U4,GSo),e(U4,Zj),e(Zj,OSo),e(U4,VSo),e(Xe,XSo),e(Xe,J4),e(J4,zSo),e(J4,tce),e(tce,QSo),e(J4,WSo),e(J4,ace),e(ace,HSo),e(Xe,USo),e(Xe,nce),e(nce,JSo),e(Xe,YSo),g(vw,Xe,null),b(c,APe,u),b(c,Ad,u),e(Ad,Y4),e(Y4,sce),g(Fw,sce,null),e(Ad,KSo),e(Ad,lce),e(lce,ZSo),b(c,yPe,u),b(c,tr,u),g(Tw,tr,null),e(tr,eRo),e(tr,yd),e(yd,oRo),e(yd,eD),e(eD,rRo),e(yd,tRo),e(yd,oD),e(oD,aRo),e(yd,nRo),e(tr,sRo),e(tr,Mw),e(Mw,lRo),e(Mw,ice),e(ice,iRo),e(Mw,dRo),e(tr,cRo),e(tr,Yr),g(Ew,Yr,null),e(Yr,fRo),e(Yr,dce),e(dce,mRo),e(Yr,gRo),e(Yr,Ld),e(Ld,hRo),e(Ld,cce),e(cce,pRo),e(Ld,_Ro),e(Ld,rD),e(rD,uRo),e(Ld,bRo),e(Yr,vRo),e(Yr,fce),e(fce,FRo),e(Yr,TRo),g(Cw,Yr,null),e(tr,MRo),e(tr,ze),g(ww,ze,null),e(ze,ERo),e(ze,mce),e(mce,CRo),e(ze,wRo),e(ze,Ya),e(Ya,ARo),e(Ya,gce),e(gce,yRo),e(Ya,LRo),e(Ya,hce),e(hce,xRo),e(Ya,kRo),e(Ya,pce),e(pce,SRo),e(Ya,RRo),e(ze,BRo),e(ze,da),e(da,K4),e(K4,_ce),e(_ce,PRo),e(K4,$Ro),e(K4,tD),e(tD,IRo),e(K4,qRo),e(da,NRo),e(da,Z4),e(Z4,uce),e(uce,jRo),e(Z4,DRo),e(Z4,aD),e(aD,GRo),e(Z4,ORo),e(da,VRo),e(da,eb),e(eb,bce),e(bce,XRo),e(eb,zRo),e(eb,nD),e(nD,QRo),e(eb,WRo),e(da,HRo),e(da,ob),e(ob,vce),e(vce,URo),e(ob,JRo),e(ob,sD),e(sD,YRo),e(ob,KRo),e(da,ZRo),e(da,rb),e(rb,Fce),e(Fce,eBo),e(rb,oBo),e(rb,lD),e(lD,rBo),e(rb,tBo),e(ze,aBo),e(ze,tb),e(tb,nBo),e(tb,Tce),e(Tce,sBo),e(tb,lBo),e(tb,Mce),e(Mce,iBo),e(ze,dBo),e(ze,Ece),e(Ece,cBo),e(ze,fBo),g(Aw,ze,null),b(c,LPe,u),b(c,xd,u),e(xd,ab),e(ab,Cce),g(yw,Cce,null),e(xd,mBo),e(xd,wce),e(wce,gBo),b(c,xPe,u),b(c,ar,u),g(Lw,ar,null),e(ar,hBo),e(ar,kd),e(kd,pBo),e(kd,iD),e(iD,_Bo),e(kd,uBo),e(kd,dD),e(dD,bBo),e(kd,vBo),e(ar,FBo),e(ar,xw),e(xw,TBo),e(xw,Ace),e(Ace,MBo),e(xw,EBo),e(ar,CBo),e(ar,Kr),g(kw,Kr,null),e(Kr,wBo),e(Kr,yce),e(yce,ABo),e(Kr,yBo),e(Kr,Sd),e(Sd,LBo),e(Sd,Lce),e(Lce,xBo),e(Sd,kBo),e(Sd,cD),e(cD,SBo),e(Sd,RBo),e(Kr,BBo),e(Kr,xce),e(xce,PBo),e(Kr,$Bo),g(Sw,Kr,null),e(ar,IBo),e(ar,Qe),g(Rw,Qe,null),e(Qe,qBo),e(Qe,kce),e(kce,NBo),e(Qe,jBo),e(Qe,Ka),e(Ka,DBo),e(Ka,Sce),e(Sce,GBo),e(Ka,OBo),e(Ka,Rce),e(Rce,VBo),e(Ka,XBo),e(Ka,Bce),e(Bce,zBo),e(Ka,QBo),e(Qe,WBo),e(Qe,j),e(j,nb),e(nb,Pce),e(Pce,HBo),e(nb,UBo),e(nb,fD),e(fD,JBo),e(nb,YBo),e(j,KBo),e(j,sb),e(sb,$ce),e($ce,ZBo),e(sb,ePo),e(sb,mD),e(mD,oPo),e(sb,rPo),e(j,tPo),e(j,lb),e(lb,Ice),e(Ice,aPo),e(lb,nPo),e(lb,gD),e(gD,sPo),e(lb,lPo),e(j,iPo),e(j,ib),e(ib,qce),e(qce,dPo),e(ib,cPo),e(ib,hD),e(hD,fPo),e(ib,mPo),e(j,gPo),e(j,db),e(db,Nce),e(Nce,hPo),e(db,pPo),e(db,pD),e(pD,_Po),e(db,uPo),e(j,bPo),e(j,cb),e(cb,jce),e(jce,vPo),e(cb,FPo),e(cb,_D),e(_D,TPo),e(cb,MPo),e(j,EPo),e(j,fb),e(fb,Dce),e(Dce,CPo),e(fb,wPo),e(fb,uD),e(uD,APo),e(fb,yPo),e(j,LPo),e(j,mb),e(mb,Gce),e(Gce,xPo),e(mb,kPo),e(mb,bD),e(bD,SPo),e(mb,RPo),e(j,BPo),e(j,gb),e(gb,Oce),e(Oce,PPo),e(gb,$Po),e(gb,vD),e(vD,IPo),e(gb,qPo),e(j,NPo),e(j,hb),e(hb,Vce),e(Vce,jPo),e(hb,DPo),e(hb,FD),e(FD,GPo),e(hb,OPo),e(j,VPo),e(j,pb),e(pb,Xce),e(Xce,XPo),e(pb,zPo),e(pb,TD),e(TD,QPo),e(pb,WPo),e(j,HPo),e(j,_b),e(_b,zce),e(zce,UPo),e(_b,JPo),e(_b,MD),e(MD,YPo),e(_b,KPo),e(j,ZPo),e(j,ub),e(ub,Qce),e(Qce,e$o),e(ub,o$o),e(ub,ED),e(ED,r$o),e(ub,t$o),e(j,a$o),e(j,bb),e(bb,Wce),e(Wce,n$o),e(bb,s$o),e(bb,CD),e(CD,l$o),e(bb,i$o),e(j,d$o),e(j,vb),e(vb,Hce),e(Hce,c$o),e(vb,f$o),e(vb,wD),e(wD,m$o),e(vb,g$o),e(j,h$o),e(j,Fb),e(Fb,Uce),e(Uce,p$o),e(Fb,_$o),e(Fb,AD),e(AD,u$o),e(Fb,b$o),e(j,v$o),e(j,Tb),e(Tb,Jce),e(Jce,F$o),e(Tb,T$o),e(Tb,yD),e(yD,M$o),e(Tb,E$o),e(j,C$o),e(j,Mb),e(Mb,Yce),e(Yce,w$o),e(Mb,A$o),e(Mb,LD),e(LD,y$o),e(Mb,L$o),e(j,x$o),e(j,Eb),e(Eb,Kce),e(Kce,k$o),e(Eb,S$o),e(Eb,xD),e(xD,R$o),e(Eb,B$o),e(j,P$o),e(j,Cb),e(Cb,Zce),e(Zce,$$o),e(Cb,I$o),e(Cb,kD),e(kD,q$o),e(Cb,N$o),e(j,j$o),e(j,wb),e(wb,efe),e(efe,D$o),e(wb,G$o),e(wb,SD),e(SD,O$o),e(wb,V$o),e(j,X$o),e(j,Ab),e(Ab,ofe),e(ofe,z$o),e(Ab,Q$o),e(Ab,RD),e(RD,W$o),e(Ab,H$o),e(j,U$o),e(j,yb),e(yb,rfe),e(rfe,J$o),e(yb,Y$o),e(yb,BD),e(BD,K$o),e(yb,Z$o),e(j,eIo),e(j,Lb),e(Lb,tfe),e(tfe,oIo),e(Lb,rIo),e(Lb,PD),e(PD,tIo),e(Lb,aIo),e(j,nIo),e(j,xb),e(xb,afe),e(afe,sIo),e(xb,lIo),e(xb,$D),e($D,iIo),e(xb,dIo),e(j,cIo),e(j,kb),e(kb,nfe),e(nfe,fIo),e(kb,mIo),e(kb,ID),e(ID,gIo),e(kb,hIo),e(j,pIo),e(j,Sb),e(Sb,sfe),e(sfe,_Io),e(Sb,uIo),e(Sb,qD),e(qD,bIo),e(Sb,vIo),e(j,FIo),e(j,Rb),e(Rb,lfe),e(lfe,TIo),e(Rb,MIo),e(Rb,ND),e(ND,EIo),e(Rb,CIo),e(j,wIo),e(j,Bb),e(Bb,ife),e(ife,AIo),e(Bb,yIo),e(Bb,jD),e(jD,LIo),e(Bb,xIo),e(j,kIo),e(j,Pb),e(Pb,dfe),e(dfe,SIo),e(Pb,RIo),e(Pb,DD),e(DD,BIo),e(Pb,PIo),e(j,$Io),e(j,$b),e($b,cfe),e(cfe,IIo),e($b,qIo),e($b,GD),e(GD,NIo),e($b,jIo),e(j,DIo),e(j,Ib),e(Ib,ffe),e(ffe,GIo),e(Ib,OIo),e(Ib,OD),e(OD,VIo),e(Ib,XIo),e(j,zIo),e(j,qb),e(qb,mfe),e(mfe,QIo),e(qb,WIo),e(qb,VD),e(VD,HIo),e(qb,UIo),e(Qe,JIo),e(Qe,Nb),e(Nb,YIo),e(Nb,gfe),e(gfe,KIo),e(Nb,ZIo),e(Nb,hfe),e(hfe,eqo),e(Qe,oqo),e(Qe,pfe),e(pfe,rqo),e(Qe,tqo),g(Bw,Qe,null),b(c,kPe,u),b(c,Rd,u),e(Rd,jb),e(jb,_fe),g(Pw,_fe,null),e(Rd,aqo),e(Rd,ufe),e(ufe,nqo),b(c,SPe,u),b(c,nr,u),g($w,nr,null),e(nr,sqo),e(nr,Bd),e(Bd,lqo),e(Bd,XD),e(XD,iqo),e(Bd,dqo),e(Bd,zD),e(zD,cqo),e(Bd,fqo),e(nr,mqo),e(nr,Iw),e(Iw,gqo),e(Iw,bfe),e(bfe,hqo),e(Iw,pqo),e(nr,_qo),e(nr,Zr),g(qw,Zr,null),e(Zr,uqo),e(Zr,vfe),e(vfe,bqo),e(Zr,vqo),e(Zr,Pd),e(Pd,Fqo),e(Pd,Ffe),e(Ffe,Tqo),e(Pd,Mqo),e(Pd,QD),e(QD,Eqo),e(Pd,Cqo),e(Zr,wqo),e(Zr,Tfe),e(Tfe,Aqo),e(Zr,yqo),g(Nw,Zr,null),e(nr,Lqo),e(nr,We),g(jw,We,null),e(We,xqo),e(We,Mfe),e(Mfe,kqo),e(We,Sqo),e(We,Za),e(Za,Rqo),e(Za,Efe),e(Efe,Bqo),e(Za,Pqo),e(Za,Cfe),e(Cfe,$qo),e(Za,Iqo),e(Za,wfe),e(wfe,qqo),e(Za,Nqo),e(We,jqo),e(We,R),e(R,Db),e(Db,Afe),e(Afe,Dqo),e(Db,Gqo),e(Db,WD),e(WD,Oqo),e(Db,Vqo),e(R,Xqo),e(R,Gb),e(Gb,yfe),e(yfe,zqo),e(Gb,Qqo),e(Gb,HD),e(HD,Wqo),e(Gb,Hqo),e(R,Uqo),e(R,Ob),e(Ob,Lfe),e(Lfe,Jqo),e(Ob,Yqo),e(Ob,UD),e(UD,Kqo),e(Ob,Zqo),e(R,eNo),e(R,Vb),e(Vb,xfe),e(xfe,oNo),e(Vb,rNo),e(Vb,JD),e(JD,tNo),e(Vb,aNo),e(R,nNo),e(R,Xb),e(Xb,kfe),e(kfe,sNo),e(Xb,lNo),e(Xb,YD),e(YD,iNo),e(Xb,dNo),e(R,cNo),e(R,zb),e(zb,Sfe),e(Sfe,fNo),e(zb,mNo),e(zb,KD),e(KD,gNo),e(zb,hNo),e(R,pNo),e(R,Qb),e(Qb,Rfe),e(Rfe,_No),e(Qb,uNo),e(Qb,ZD),e(ZD,bNo),e(Qb,vNo),e(R,FNo),e(R,Wb),e(Wb,Bfe),e(Bfe,TNo),e(Wb,MNo),e(Wb,eG),e(eG,ENo),e(Wb,CNo),e(R,wNo),e(R,Hb),e(Hb,Pfe),e(Pfe,ANo),e(Hb,yNo),e(Hb,oG),e(oG,LNo),e(Hb,xNo),e(R,kNo),e(R,Ub),e(Ub,$fe),e($fe,SNo),e(Ub,RNo),e(Ub,rG),e(rG,BNo),e(Ub,PNo),e(R,$No),e(R,Jb),e(Jb,Ife),e(Ife,INo),e(Jb,qNo),e(Jb,tG),e(tG,NNo),e(Jb,jNo),e(R,DNo),e(R,Yb),e(Yb,qfe),e(qfe,GNo),e(Yb,ONo),e(Yb,aG),e(aG,VNo),e(Yb,XNo),e(R,zNo),e(R,Kb),e(Kb,Nfe),e(Nfe,QNo),e(Kb,WNo),e(Kb,nG),e(nG,HNo),e(Kb,UNo),e(R,JNo),e(R,Zb),e(Zb,jfe),e(jfe,YNo),e(Zb,KNo),e(Zb,sG),e(sG,ZNo),e(Zb,ejo),e(R,ojo),e(R,e2),e(e2,Dfe),e(Dfe,rjo),e(e2,tjo),e(e2,lG),e(lG,ajo),e(e2,njo),e(R,sjo),e(R,o2),e(o2,Gfe),e(Gfe,ljo),e(o2,ijo),e(o2,iG),e(iG,djo),e(o2,cjo),e(R,fjo),e(R,r2),e(r2,Ofe),e(Ofe,mjo),e(r2,gjo),e(r2,dG),e(dG,hjo),e(r2,pjo),e(R,_jo),e(R,t2),e(t2,Vfe),e(Vfe,ujo),e(t2,bjo),e(t2,cG),e(cG,vjo),e(t2,Fjo),e(R,Tjo),e(R,a2),e(a2,Xfe),e(Xfe,Mjo),e(a2,Ejo),e(a2,fG),e(fG,Cjo),e(a2,wjo),e(R,Ajo),e(R,n2),e(n2,zfe),e(zfe,yjo),e(n2,Ljo),e(n2,mG),e(mG,xjo),e(n2,kjo),e(R,Sjo),e(R,s2),e(s2,Qfe),e(Qfe,Rjo),e(s2,Bjo),e(s2,gG),e(gG,Pjo),e(s2,$jo),e(R,Ijo),e(R,l2),e(l2,Wfe),e(Wfe,qjo),e(l2,Njo),e(l2,hG),e(hG,jjo),e(l2,Djo),e(R,Gjo),e(R,i2),e(i2,Hfe),e(Hfe,Ojo),e(i2,Vjo),e(i2,pG),e(pG,Xjo),e(i2,zjo),e(R,Qjo),e(R,d2),e(d2,Ufe),e(Ufe,Wjo),e(d2,Hjo),e(d2,_G),e(_G,Ujo),e(d2,Jjo),e(R,Yjo),e(R,c2),e(c2,Jfe),e(Jfe,Kjo),e(c2,Zjo),e(c2,uG),e(uG,eDo),e(c2,oDo),e(R,rDo),e(R,f2),e(f2,Yfe),e(Yfe,tDo),e(f2,aDo),e(f2,bG),e(bG,nDo),e(f2,sDo),e(R,lDo),e(R,m2),e(m2,Kfe),e(Kfe,iDo),e(m2,dDo),e(m2,vG),e(vG,cDo),e(m2,fDo),e(R,mDo),e(R,g2),e(g2,Zfe),e(Zfe,gDo),e(g2,hDo),e(g2,FG),e(FG,pDo),e(g2,_Do),e(R,uDo),e(R,h2),e(h2,eme),e(eme,bDo),e(h2,vDo),e(h2,TG),e(TG,FDo),e(h2,TDo),e(R,MDo),e(R,p2),e(p2,ome),e(ome,EDo),e(p2,CDo),e(p2,MG),e(MG,wDo),e(p2,ADo),e(R,yDo),e(R,_2),e(_2,rme),e(rme,LDo),e(_2,xDo),e(_2,EG),e(EG,kDo),e(_2,SDo),e(R,RDo),e(R,u2),e(u2,tme),e(tme,BDo),e(u2,PDo),e(u2,CG),e(CG,$Do),e(u2,IDo),e(R,qDo),e(R,b2),e(b2,ame),e(ame,NDo),e(b2,jDo),e(b2,wG),e(wG,DDo),e(b2,GDo),e(R,ODo),e(R,v2),e(v2,nme),e(nme,VDo),e(v2,XDo),e(v2,AG),e(AG,zDo),e(v2,QDo),e(R,WDo),e(R,F2),e(F2,sme),e(sme,HDo),e(F2,UDo),e(F2,yG),e(yG,JDo),e(F2,YDo),e(R,KDo),e(R,T2),e(T2,lme),e(lme,ZDo),e(T2,eGo),e(T2,LG),e(LG,oGo),e(T2,rGo),e(R,tGo),e(R,M2),e(M2,ime),e(ime,aGo),e(M2,nGo),e(M2,xG),e(xG,sGo),e(M2,lGo),e(R,iGo),e(R,E2),e(E2,dme),e(dme,dGo),e(E2,cGo),e(E2,kG),e(kG,fGo),e(E2,mGo),e(R,gGo),e(R,C2),e(C2,cme),e(cme,hGo),e(C2,pGo),e(C2,SG),e(SG,_Go),e(C2,uGo),e(We,bGo),e(We,w2),e(w2,vGo),e(w2,fme),e(fme,FGo),e(w2,TGo),e(w2,mme),e(mme,MGo),e(We,EGo),e(We,gme),e(gme,CGo),e(We,wGo),g(Dw,We,null),b(c,RPe,u),b(c,$d,u),e($d,A2),e(A2,hme),g(Gw,hme,null),e($d,AGo),e($d,pme),e(pme,yGo),b(c,BPe,u),b(c,sr,u),g(Ow,sr,null),e(sr,LGo),e(sr,Id),e(Id,xGo),e(Id,RG),e(RG,kGo),e(Id,SGo),e(Id,BG),e(BG,RGo),e(Id,BGo),e(sr,PGo),e(sr,Vw),e(Vw,$Go),e(Vw,_me),e(_me,IGo),e(Vw,qGo),e(sr,NGo),e(sr,et),g(Xw,et,null),e(et,jGo),e(et,ume),e(ume,DGo),e(et,GGo),e(et,qd),e(qd,OGo),e(qd,bme),e(bme,VGo),e(qd,XGo),e(qd,PG),e(PG,zGo),e(qd,QGo),e(et,WGo),e(et,vme),e(vme,HGo),e(et,UGo),g(zw,et,null),e(sr,JGo),e(sr,He),g(Qw,He,null),e(He,YGo),e(He,Fme),e(Fme,KGo),e(He,ZGo),e(He,en),e(en,eOo),e(en,Tme),e(Tme,oOo),e(en,rOo),e(en,Mme),e(Mme,tOo),e(en,aOo),e(en,Eme),e(Eme,nOo),e(en,sOo),e(He,lOo),e(He,Cme),e(Cme,y2),e(y2,wme),e(wme,iOo),e(y2,dOo),e(y2,$G),e($G,cOo),e(y2,fOo),e(He,mOo),e(He,L2),e(L2,gOo),e(L2,Ame),e(Ame,hOo),e(L2,pOo),e(L2,yme),e(yme,_Oo),e(He,uOo),e(He,Lme),e(Lme,bOo),e(He,vOo),g(Ww,He,null),b(c,PPe,u),b(c,Nd,u),e(Nd,x2),e(x2,xme),g(Hw,xme,null),e(Nd,FOo),e(Nd,kme),e(kme,TOo),b(c,$Pe,u),b(c,lr,u),g(Uw,lr,null),e(lr,MOo),e(lr,jd),e(jd,EOo),e(jd,IG),e(IG,COo),e(jd,wOo),e(jd,qG),e(qG,AOo),e(jd,yOo),e(lr,LOo),e(lr,Jw),e(Jw,xOo),e(Jw,Sme),e(Sme,kOo),e(Jw,SOo),e(lr,ROo),e(lr,ot),g(Yw,ot,null),e(ot,BOo),e(ot,Rme),e(Rme,POo),e(ot,$Oo),e(ot,Dd),e(Dd,IOo),e(Dd,Bme),e(Bme,qOo),e(Dd,NOo),e(Dd,NG),e(NG,jOo),e(Dd,DOo),e(ot,GOo),e(ot,Pme),e(Pme,OOo),e(ot,VOo),g(Kw,ot,null),e(lr,XOo),e(lr,Ue),g(Zw,Ue,null),e(Ue,zOo),e(Ue,$me),e($me,QOo),e(Ue,WOo),e(Ue,on),e(on,HOo),e(on,Ime),e(Ime,UOo),e(on,JOo),e(on,qme),e(qme,YOo),e(on,KOo),e(on,Nme),e(Nme,ZOo),e(on,eVo),e(Ue,oVo),e(Ue,ce),e(ce,k2),e(k2,jme),e(jme,rVo),e(k2,tVo),e(k2,jG),e(jG,aVo),e(k2,nVo),e(ce,sVo),e(ce,S2),e(S2,Dme),e(Dme,lVo),e(S2,iVo),e(S2,DG),e(DG,dVo),e(S2,cVo),e(ce,fVo),e(ce,R2),e(R2,Gme),e(Gme,mVo),e(R2,gVo),e(R2,GG),e(GG,hVo),e(R2,pVo),e(ce,_Vo),e(ce,Us),e(Us,Ome),e(Ome,uVo),e(Us,bVo),e(Us,OG),e(OG,vVo),e(Us,FVo),e(Us,VG),e(VG,TVo),e(Us,MVo),e(ce,EVo),e(ce,B2),e(B2,Vme),e(Vme,CVo),e(B2,wVo),e(B2,XG),e(XG,AVo),e(B2,yVo),e(ce,LVo),e(ce,ma),e(ma,Xme),e(Xme,xVo),e(ma,kVo),e(ma,zG),e(zG,SVo),e(ma,RVo),e(ma,QG),e(QG,BVo),e(ma,PVo),e(ma,WG),e(WG,$Vo),e(ma,IVo),e(ce,qVo),e(ce,P2),e(P2,zme),e(zme,NVo),e(P2,jVo),e(P2,HG),e(HG,DVo),e(P2,GVo),e(ce,OVo),e(ce,$2),e($2,Qme),e(Qme,VVo),e($2,XVo),e($2,UG),e(UG,zVo),e($2,QVo),e(ce,WVo),e(ce,I2),e(I2,Wme),e(Wme,HVo),e(I2,UVo),e(I2,JG),e(JG,JVo),e(I2,YVo),e(ce,KVo),e(ce,q2),e(q2,Hme),e(Hme,ZVo),e(q2,eXo),e(q2,YG),e(YG,oXo),e(q2,rXo),e(ce,tXo),e(ce,N2),e(N2,Ume),e(Ume,aXo),e(N2,nXo),e(N2,KG),e(KG,sXo),e(N2,lXo),e(ce,iXo),e(ce,j2),e(j2,Jme),e(Jme,dXo),e(j2,cXo),e(j2,ZG),e(ZG,fXo),e(j2,mXo),e(ce,gXo),e(ce,D2),e(D2,Yme),e(Yme,hXo),e(D2,pXo),e(D2,eO),e(eO,_Xo),e(D2,uXo),e(Ue,bXo),e(Ue,G2),e(G2,vXo),e(G2,Kme),e(Kme,FXo),e(G2,TXo),e(G2,Zme),e(Zme,MXo),e(Ue,EXo),e(Ue,ege),e(ege,CXo),e(Ue,wXo),g(eA,Ue,null),b(c,IPe,u),b(c,Gd,u),e(Gd,O2),e(O2,oge),g(oA,oge,null),e(Gd,AXo),e(Gd,rge),e(rge,yXo),b(c,qPe,u),b(c,ir,u),g(rA,ir,null),e(ir,LXo),e(ir,Od),e(Od,xXo),e(Od,oO),e(oO,kXo),e(Od,SXo),e(Od,rO),e(rO,RXo),e(Od,BXo),e(ir,PXo),e(ir,tA),e(tA,$Xo),e(tA,tge),e(tge,IXo),e(tA,qXo),e(ir,NXo),e(ir,rt),g(aA,rt,null),e(rt,jXo),e(rt,age),e(age,DXo),e(rt,GXo),e(rt,Vd),e(Vd,OXo),e(Vd,nge),e(nge,VXo),e(Vd,XXo),e(Vd,tO),e(tO,zXo),e(Vd,QXo),e(rt,WXo),e(rt,sge),e(sge,HXo),e(rt,UXo),g(nA,rt,null),e(ir,JXo),e(ir,Je),g(sA,Je,null),e(Je,YXo),e(Je,lge),e(lge,KXo),e(Je,ZXo),e(Je,rn),e(rn,ezo),e(rn,ige),e(ige,ozo),e(rn,rzo),e(rn,dge),e(dge,tzo),e(rn,azo),e(rn,cge),e(cge,nzo),e(rn,szo),e(Je,lzo),e(Je,fge),e(fge,V2),e(V2,mge),e(mge,izo),e(V2,dzo),e(V2,aO),e(aO,czo),e(V2,fzo),e(Je,mzo),e(Je,X2),e(X2,gzo),e(X2,gge),e(gge,hzo),e(X2,pzo),e(X2,hge),e(hge,_zo),e(Je,uzo),e(Je,pge),e(pge,bzo),e(Je,vzo),g(lA,Je,null),b(c,NPe,u),b(c,Xd,u),e(Xd,z2),e(z2,_ge),g(iA,_ge,null),e(Xd,Fzo),e(Xd,uge),e(uge,Tzo),b(c,jPe,u),b(c,dr,u),g(dA,dr,null),e(dr,Mzo),e(dr,zd),e(zd,Ezo),e(zd,nO),e(nO,Czo),e(zd,wzo),e(zd,sO),e(sO,Azo),e(zd,yzo),e(dr,Lzo),e(dr,cA),e(cA,xzo),e(cA,bge),e(bge,kzo),e(cA,Szo),e(dr,Rzo),e(dr,tt),g(fA,tt,null),e(tt,Bzo),e(tt,vge),e(vge,Pzo),e(tt,$zo),e(tt,Qd),e(Qd,Izo),e(Qd,Fge),e(Fge,qzo),e(Qd,Nzo),e(Qd,lO),e(lO,jzo),e(Qd,Dzo),e(tt,Gzo),e(tt,Tge),e(Tge,Ozo),e(tt,Vzo),g(mA,tt,null),e(dr,Xzo),e(dr,Ye),g(gA,Ye,null),e(Ye,zzo),e(Ye,Mge),e(Mge,Qzo),e(Ye,Wzo),e(Ye,tn),e(tn,Hzo),e(tn,Ege),e(Ege,Uzo),e(tn,Jzo),e(tn,Cge),e(Cge,Yzo),e(tn,Kzo),e(tn,wge),e(wge,Zzo),e(tn,eQo),e(Ye,oQo),e(Ye,Re),e(Re,Q2),e(Q2,Age),e(Age,rQo),e(Q2,tQo),e(Q2,iO),e(iO,aQo),e(Q2,nQo),e(Re,sQo),e(Re,W2),e(W2,yge),e(yge,lQo),e(W2,iQo),e(W2,dO),e(dO,dQo),e(W2,cQo),e(Re,fQo),e(Re,H2),e(H2,Lge),e(Lge,mQo),e(H2,gQo),e(H2,cO),e(cO,hQo),e(H2,pQo),e(Re,_Qo),e(Re,U2),e(U2,xge),e(xge,uQo),e(U2,bQo),e(U2,fO),e(fO,vQo),e(U2,FQo),e(Re,TQo),e(Re,J2),e(J2,kge),e(kge,MQo),e(J2,EQo),e(J2,mO),e(mO,CQo),e(J2,wQo),e(Re,AQo),e(Re,Y2),e(Y2,Sge),e(Sge,yQo),e(Y2,LQo),e(Y2,gO),e(gO,xQo),e(Y2,kQo),e(Re,SQo),e(Re,K2),e(K2,Rge),e(Rge,RQo),e(K2,BQo),e(K2,hO),e(hO,PQo),e(K2,$Qo),e(Re,IQo),e(Re,Z2),e(Z2,Bge),e(Bge,qQo),e(Z2,NQo),e(Z2,pO),e(pO,jQo),e(Z2,DQo),e(Ye,GQo),e(Ye,ev),e(ev,OQo),e(ev,Pge),e(Pge,VQo),e(ev,XQo),e(ev,$ge),e($ge,zQo),e(Ye,QQo),e(Ye,Ige),e(Ige,WQo),e(Ye,HQo),g(hA,Ye,null),b(c,DPe,u),b(c,Wd,u),e(Wd,ov),e(ov,qge),g(pA,qge,null),e(Wd,UQo),e(Wd,Nge),e(Nge,JQo),b(c,GPe,u),b(c,cr,u),g(_A,cr,null),e(cr,YQo),e(cr,Hd),e(Hd,KQo),e(Hd,_O),e(_O,ZQo),e(Hd,eWo),e(Hd,uO),e(uO,oWo),e(Hd,rWo),e(cr,tWo),e(cr,uA),e(uA,aWo),e(uA,jge),e(jge,nWo),e(uA,sWo),e(cr,lWo),e(cr,at),g(bA,at,null),e(at,iWo),e(at,Dge),e(Dge,dWo),e(at,cWo),e(at,Ud),e(Ud,fWo),e(Ud,Gge),e(Gge,mWo),e(Ud,gWo),e(Ud,bO),e(bO,hWo),e(Ud,pWo),e(at,_Wo),e(at,Oge),e(Oge,uWo),e(at,bWo),g(vA,at,null),e(cr,vWo),e(cr,Ke),g(FA,Ke,null),e(Ke,FWo),e(Ke,Vge),e(Vge,TWo),e(Ke,MWo),e(Ke,an),e(an,EWo),e(an,Xge),e(Xge,CWo),e(an,wWo),e(an,zge),e(zge,AWo),e(an,yWo),e(an,Qge),e(Qge,LWo),e(an,xWo),e(Ke,kWo),e(Ke,nn),e(nn,rv),e(rv,Wge),e(Wge,SWo),e(rv,RWo),e(rv,vO),e(vO,BWo),e(rv,PWo),e(nn,$Wo),e(nn,tv),e(tv,Hge),e(Hge,IWo),e(tv,qWo),e(tv,FO),e(FO,NWo),e(tv,jWo),e(nn,DWo),e(nn,av),e(av,Uge),e(Uge,GWo),e(av,OWo),e(av,TO),e(TO,VWo),e(av,XWo),e(nn,zWo),e(nn,nv),e(nv,Jge),e(Jge,QWo),e(nv,WWo),e(nv,MO),e(MO,HWo),e(nv,UWo),e(Ke,JWo),e(Ke,sv),e(sv,YWo),e(sv,Yge),e(Yge,KWo),e(sv,ZWo),e(sv,Kge),e(Kge,eHo),e(Ke,oHo),e(Ke,Zge),e(Zge,rHo),e(Ke,tHo),g(TA,Ke,null),b(c,OPe,u),b(c,Jd,u),e(Jd,lv),e(lv,ehe),g(MA,ehe,null),e(Jd,aHo),e(Jd,ohe),e(ohe,nHo),b(c,VPe,u),b(c,fr,u),g(EA,fr,null),e(fr,sHo),e(fr,Yd),e(Yd,lHo),e(Yd,EO),e(EO,iHo),e(Yd,dHo),e(Yd,CO),e(CO,cHo),e(Yd,fHo),e(fr,mHo),e(fr,CA),e(CA,gHo),e(CA,rhe),e(rhe,hHo),e(CA,pHo),e(fr,_Ho),e(fr,nt),g(wA,nt,null),e(nt,uHo),e(nt,the),e(the,bHo),e(nt,vHo),e(nt,Kd),e(Kd,FHo),e(Kd,ahe),e(ahe,THo),e(Kd,MHo),e(Kd,wO),e(wO,EHo),e(Kd,CHo),e(nt,wHo),e(nt,nhe),e(nhe,AHo),e(nt,yHo),g(AA,nt,null),e(fr,LHo),e(fr,Ze),g(yA,Ze,null),e(Ze,xHo),e(Ze,she),e(she,kHo),e(Ze,SHo),e(Ze,sn),e(sn,RHo),e(sn,lhe),e(lhe,BHo),e(sn,PHo),e(sn,ihe),e(ihe,$Ho),e(sn,IHo),e(sn,dhe),e(dhe,qHo),e(sn,NHo),e(Ze,jHo),e(Ze,Be),e(Be,iv),e(iv,che),e(che,DHo),e(iv,GHo),e(iv,AO),e(AO,OHo),e(iv,VHo),e(Be,XHo),e(Be,dv),e(dv,fhe),e(fhe,zHo),e(dv,QHo),e(dv,yO),e(yO,WHo),e(dv,HHo),e(Be,UHo),e(Be,cv),e(cv,mhe),e(mhe,JHo),e(cv,YHo),e(cv,LO),e(LO,KHo),e(cv,ZHo),e(Be,eUo),e(Be,fv),e(fv,ghe),e(ghe,oUo),e(fv,rUo),e(fv,xO),e(xO,tUo),e(fv,aUo),e(Be,nUo),e(Be,mv),e(mv,hhe),e(hhe,sUo),e(mv,lUo),e(mv,kO),e(kO,iUo),e(mv,dUo),e(Be,cUo),e(Be,gv),e(gv,phe),e(phe,fUo),e(gv,mUo),e(gv,SO),e(SO,gUo),e(gv,hUo),e(Be,pUo),e(Be,hv),e(hv,_he),e(_he,_Uo),e(hv,uUo),e(hv,RO),e(RO,bUo),e(hv,vUo),e(Be,FUo),e(Be,pv),e(pv,uhe),e(uhe,TUo),e(pv,MUo),e(pv,BO),e(BO,EUo),e(pv,CUo),e(Ze,wUo),e(Ze,_v),e(_v,AUo),e(_v,bhe),e(bhe,yUo),e(_v,LUo),e(_v,vhe),e(vhe,xUo),e(Ze,kUo),e(Ze,Fhe),e(Fhe,SUo),e(Ze,RUo),g(LA,Ze,null),b(c,XPe,u),b(c,Zd,u),e(Zd,uv),e(uv,The),g(xA,The,null),e(Zd,BUo),e(Zd,Mhe),e(Mhe,PUo),b(c,zPe,u),b(c,mr,u),g(kA,mr,null),e(mr,$Uo),e(mr,ec),e(ec,IUo),e(ec,PO),e(PO,qUo),e(ec,NUo),e(ec,$O),e($O,jUo),e(ec,DUo),e(mr,GUo),e(mr,SA),e(SA,OUo),e(SA,Ehe),e(Ehe,VUo),e(SA,XUo),e(mr,zUo),e(mr,st),g(RA,st,null),e(st,QUo),e(st,Che),e(Che,WUo),e(st,HUo),e(st,oc),e(oc,UUo),e(oc,whe),e(whe,JUo),e(oc,YUo),e(oc,IO),e(IO,KUo),e(oc,ZUo),e(st,eJo),e(st,Ahe),e(Ahe,oJo),e(st,rJo),g(BA,st,null),e(mr,tJo),e(mr,eo),g(PA,eo,null),e(eo,aJo),e(eo,yhe),e(yhe,nJo),e(eo,sJo),e(eo,ln),e(ln,lJo),e(ln,Lhe),e(Lhe,iJo),e(ln,dJo),e(ln,xhe),e(xhe,cJo),e(ln,fJo),e(ln,khe),e(khe,mJo),e(ln,gJo),e(eo,hJo),e(eo,$A),e($A,bv),e(bv,She),e(She,pJo),e(bv,_Jo),e(bv,qO),e(qO,uJo),e(bv,bJo),e($A,vJo),e($A,vv),e(vv,Rhe),e(Rhe,FJo),e(vv,TJo),e(vv,NO),e(NO,MJo),e(vv,EJo),e(eo,CJo),e(eo,Fv),e(Fv,wJo),e(Fv,Bhe),e(Bhe,AJo),e(Fv,yJo),e(Fv,Phe),e(Phe,LJo),e(eo,xJo),e(eo,$he),e($he,kJo),e(eo,SJo),g(IA,eo,null),b(c,QPe,u),b(c,rc,u),e(rc,Tv),e(Tv,Ihe),g(qA,Ihe,null),e(rc,RJo),e(rc,qhe),e(qhe,BJo),b(c,WPe,u),b(c,gr,u),g(NA,gr,null),e(gr,PJo),e(gr,tc),e(tc,$Jo),e(tc,jO),e(jO,IJo),e(tc,qJo),e(tc,DO),e(DO,NJo),e(tc,jJo),e(gr,DJo),e(gr,jA),e(jA,GJo),e(jA,Nhe),e(Nhe,OJo),e(jA,VJo),e(gr,XJo),e(gr,lt),g(DA,lt,null),e(lt,zJo),e(lt,jhe),e(jhe,QJo),e(lt,WJo),e(lt,ac),e(ac,HJo),e(ac,Dhe),e(Dhe,UJo),e(ac,JJo),e(ac,GO),e(GO,YJo),e(ac,KJo),e(lt,ZJo),e(lt,Ghe),e(Ghe,eYo),e(lt,oYo),g(GA,lt,null),e(gr,rYo),e(gr,oo),g(OA,oo,null),e(oo,tYo),e(oo,Ohe),e(Ohe,aYo),e(oo,nYo),e(oo,dn),e(dn,sYo),e(dn,Vhe),e(Vhe,lYo),e(dn,iYo),e(dn,Xhe),e(Xhe,dYo),e(dn,cYo),e(dn,zhe),e(zhe,fYo),e(dn,mYo),e(oo,gYo),e(oo,cn),e(cn,Mv),e(Mv,Qhe),e(Qhe,hYo),e(Mv,pYo),e(Mv,OO),e(OO,_Yo),e(Mv,uYo),e(cn,bYo),e(cn,Ev),e(Ev,Whe),e(Whe,vYo),e(Ev,FYo),e(Ev,VO),e(VO,TYo),e(Ev,MYo),e(cn,EYo),e(cn,Cv),e(Cv,Hhe),e(Hhe,CYo),e(Cv,wYo),e(Cv,XO),e(XO,AYo),e(Cv,yYo),e(cn,LYo),e(cn,wv),e(wv,Uhe),e(Uhe,xYo),e(wv,kYo),e(wv,zO),e(zO,SYo),e(wv,RYo),e(oo,BYo),e(oo,Av),e(Av,PYo),e(Av,Jhe),e(Jhe,$Yo),e(Av,IYo),e(Av,Yhe),e(Yhe,qYo),e(oo,NYo),e(oo,Khe),e(Khe,jYo),e(oo,DYo),g(VA,oo,null),b(c,HPe,u),b(c,nc,u),e(nc,yv),e(yv,Zhe),g(XA,Zhe,null),e(nc,GYo),e(nc,epe),e(epe,OYo),b(c,UPe,u),b(c,hr,u),g(zA,hr,null),e(hr,VYo),e(hr,sc),e(sc,XYo),e(sc,QO),e(QO,zYo),e(sc,QYo),e(sc,WO),e(WO,WYo),e(sc,HYo),e(hr,UYo),e(hr,QA),e(QA,JYo),e(QA,ope),e(ope,YYo),e(QA,KYo),e(hr,ZYo),e(hr,it),g(WA,it,null),e(it,eKo),e(it,rpe),e(rpe,oKo),e(it,rKo),e(it,lc),e(lc,tKo),e(lc,tpe),e(tpe,aKo),e(lc,nKo),e(lc,HO),e(HO,sKo),e(lc,lKo),e(it,iKo),e(it,ape),e(ape,dKo),e(it,cKo),g(HA,it,null),e(hr,fKo),e(hr,ro),g(UA,ro,null),e(ro,mKo),e(ro,npe),e(npe,gKo),e(ro,hKo),e(ro,fn),e(fn,pKo),e(fn,spe),e(spe,_Ko),e(fn,uKo),e(fn,lpe),e(lpe,bKo),e(fn,vKo),e(fn,ipe),e(ipe,FKo),e(fn,TKo),e(ro,MKo),e(ro,ic),e(ic,Lv),e(Lv,dpe),e(dpe,EKo),e(Lv,CKo),e(Lv,UO),e(UO,wKo),e(Lv,AKo),e(ic,yKo),e(ic,xv),e(xv,cpe),e(cpe,LKo),e(xv,xKo),e(xv,JO),e(JO,kKo),e(xv,SKo),e(ic,RKo),e(ic,kv),e(kv,fpe),e(fpe,BKo),e(kv,PKo),e(kv,YO),e(YO,$Ko),e(kv,IKo),e(ro,qKo),e(ro,Sv),e(Sv,NKo),e(Sv,mpe),e(mpe,jKo),e(Sv,DKo),e(Sv,gpe),e(gpe,GKo),e(ro,OKo),e(ro,hpe),e(hpe,VKo),e(ro,XKo),g(JA,ro,null),b(c,JPe,u),b(c,dc,u),e(dc,Rv),e(Rv,ppe),g(YA,ppe,null),e(dc,zKo),e(dc,_pe),e(_pe,QKo),b(c,YPe,u),b(c,pr,u),g(KA,pr,null),e(pr,WKo),e(pr,cc),e(cc,HKo),e(cc,KO),e(KO,UKo),e(cc,JKo),e(cc,ZO),e(ZO,YKo),e(cc,KKo),e(pr,ZKo),e(pr,ZA),e(ZA,eZo),e(ZA,upe),e(upe,oZo),e(ZA,rZo),e(pr,tZo),e(pr,dt),g(e0,dt,null),e(dt,aZo),e(dt,bpe),e(bpe,nZo),e(dt,sZo),e(dt,fc),e(fc,lZo),e(fc,vpe),e(vpe,iZo),e(fc,dZo),e(fc,eV),e(eV,cZo),e(fc,fZo),e(dt,mZo),e(dt,Fpe),e(Fpe,gZo),e(dt,hZo),g(o0,dt,null),e(pr,pZo),e(pr,to),g(r0,to,null),e(to,_Zo),e(to,Tpe),e(Tpe,uZo),e(to,bZo),e(to,mn),e(mn,vZo),e(mn,Mpe),e(Mpe,FZo),e(mn,TZo),e(mn,Epe),e(Epe,MZo),e(mn,EZo),e(mn,Cpe),e(Cpe,CZo),e(mn,wZo),e(to,AZo),e(to,wpe),e(wpe,Bv),e(Bv,Ape),e(Ape,yZo),e(Bv,LZo),e(Bv,oV),e(oV,xZo),e(Bv,kZo),e(to,SZo),e(to,Pv),e(Pv,RZo),e(Pv,ype),e(ype,BZo),e(Pv,PZo),e(Pv,Lpe),e(Lpe,$Zo),e(to,IZo),e(to,xpe),e(xpe,qZo),e(to,NZo),g(t0,to,null),b(c,KPe,u),b(c,mc,u),e(mc,$v),e($v,kpe),g(a0,kpe,null),e(mc,jZo),e(mc,Spe),e(Spe,DZo),b(c,ZPe,u),b(c,_r,u),g(n0,_r,null),e(_r,GZo),e(_r,gc),e(gc,OZo),e(gc,rV),e(rV,VZo),e(gc,XZo),e(gc,tV),e(tV,zZo),e(gc,QZo),e(_r,WZo),e(_r,s0),e(s0,HZo),e(s0,Rpe),e(Rpe,UZo),e(s0,JZo),e(_r,YZo),e(_r,ct),g(l0,ct,null),e(ct,KZo),e(ct,Bpe),e(Bpe,ZZo),e(ct,eer),e(ct,hc),e(hc,oer),e(hc,Ppe),e(Ppe,rer),e(hc,ter),e(hc,aV),e(aV,aer),e(hc,ner),e(ct,ser),e(ct,$pe),e($pe,ler),e(ct,ier),g(i0,ct,null),e(_r,der),e(_r,ao),g(d0,ao,null),e(ao,cer),e(ao,Ipe),e(Ipe,fer),e(ao,mer),e(ao,gn),e(gn,ger),e(gn,qpe),e(qpe,her),e(gn,per),e(gn,Npe),e(Npe,_er),e(gn,uer),e(gn,jpe),e(jpe,ber),e(gn,ver),e(ao,Fer),e(ao,Dpe),e(Dpe,Iv),e(Iv,Gpe),e(Gpe,Ter),e(Iv,Mer),e(Iv,nV),e(nV,Eer),e(Iv,Cer),e(ao,wer),e(ao,qv),e(qv,Aer),e(qv,Ope),e(Ope,yer),e(qv,Ler),e(qv,Vpe),e(Vpe,xer),e(ao,ker),e(ao,Xpe),e(Xpe,Ser),e(ao,Rer),g(c0,ao,null),b(c,e$e,u),b(c,pc,u),e(pc,Nv),e(Nv,zpe),g(f0,zpe,null),e(pc,Ber),e(pc,Qpe),e(Qpe,Per),b(c,o$e,u),b(c,ur,u),g(m0,ur,null),e(ur,$er),e(ur,_c),e(_c,Ier),e(_c,sV),e(sV,qer),e(_c,Ner),e(_c,lV),e(lV,jer),e(_c,Der),e(ur,Ger),e(ur,g0),e(g0,Oer),e(g0,Wpe),e(Wpe,Ver),e(g0,Xer),e(ur,zer),e(ur,ft),g(h0,ft,null),e(ft,Qer),e(ft,Hpe),e(Hpe,Wer),e(ft,Her),e(ft,uc),e(uc,Uer),e(uc,Upe),e(Upe,Jer),e(uc,Yer),e(uc,iV),e(iV,Ker),e(uc,Zer),e(ft,eor),e(ft,Jpe),e(Jpe,oor),e(ft,ror),g(p0,ft,null),e(ur,tor),e(ur,no),g(_0,no,null),e(no,aor),e(no,Ype),e(Ype,nor),e(no,sor),e(no,hn),e(hn,lor),e(hn,Kpe),e(Kpe,ior),e(hn,dor),e(hn,Zpe),e(Zpe,cor),e(hn,mor),e(hn,e_e),e(e_e,gor),e(hn,hor),e(no,por),e(no,pn),e(pn,jv),e(jv,o_e),e(o_e,_or),e(jv,uor),e(jv,dV),e(dV,bor),e(jv,vor),e(pn,For),e(pn,Dv),e(Dv,r_e),e(r_e,Tor),e(Dv,Mor),e(Dv,cV),e(cV,Eor),e(Dv,Cor),e(pn,wor),e(pn,Gv),e(Gv,t_e),e(t_e,Aor),e(Gv,yor),e(Gv,fV),e(fV,Lor),e(Gv,xor),e(pn,kor),e(pn,Ov),e(Ov,a_e),e(a_e,Sor),e(Ov,Ror),e(Ov,mV),e(mV,Bor),e(Ov,Por),e(no,$or),e(no,Vv),e(Vv,Ior),e(Vv,n_e),e(n_e,qor),e(Vv,Nor),e(Vv,s_e),e(s_e,jor),e(no,Dor),e(no,l_e),e(l_e,Gor),e(no,Oor),g(u0,no,null),b(c,r$e,u),b(c,bc,u),e(bc,Xv),e(Xv,i_e),g(b0,i_e,null),e(bc,Vor),e(bc,d_e),e(d_e,Xor),b(c,t$e,u),b(c,br,u),g(v0,br,null),e(br,zor),e(br,vc),e(vc,Qor),e(vc,gV),e(gV,Wor),e(vc,Hor),e(vc,hV),e(hV,Uor),e(vc,Jor),e(br,Yor),e(br,F0),e(F0,Kor),e(F0,c_e),e(c_e,Zor),e(F0,err),e(br,orr),e(br,mt),g(T0,mt,null),e(mt,rrr),e(mt,f_e),e(f_e,trr),e(mt,arr),e(mt,Fc),e(Fc,nrr),e(Fc,m_e),e(m_e,srr),e(Fc,lrr),e(Fc,pV),e(pV,irr),e(Fc,drr),e(mt,crr),e(mt,g_e),e(g_e,frr),e(mt,mrr),g(M0,mt,null),e(br,grr),e(br,so),g(E0,so,null),e(so,hrr),e(so,h_e),e(h_e,prr),e(so,_rr),e(so,_n),e(_n,urr),e(_n,p_e),e(p_e,brr),e(_n,vrr),e(_n,__e),e(__e,Frr),e(_n,Trr),e(_n,u_e),e(u_e,Mrr),e(_n,Err),e(so,Crr),e(so,b_e),e(b_e,zv),e(zv,v_e),e(v_e,wrr),e(zv,Arr),e(zv,_V),e(_V,yrr),e(zv,Lrr),e(so,xrr),e(so,Qv),e(Qv,krr),e(Qv,F_e),e(F_e,Srr),e(Qv,Rrr),e(Qv,T_e),e(T_e,Brr),e(so,Prr),e(so,M_e),e(M_e,$rr),e(so,Irr),g(C0,so,null),b(c,a$e,u),b(c,Tc,u),e(Tc,Wv),e(Wv,E_e),g(w0,E_e,null),e(Tc,qrr),e(Tc,C_e),e(C_e,Nrr),b(c,n$e,u),b(c,vr,u),g(A0,vr,null),e(vr,jrr),e(vr,Mc),e(Mc,Drr),e(Mc,uV),e(uV,Grr),e(Mc,Orr),e(Mc,bV),e(bV,Vrr),e(Mc,Xrr),e(vr,zrr),e(vr,y0),e(y0,Qrr),e(y0,w_e),e(w_e,Wrr),e(y0,Hrr),e(vr,Urr),e(vr,gt),g(L0,gt,null),e(gt,Jrr),e(gt,A_e),e(A_e,Yrr),e(gt,Krr),e(gt,Ec),e(Ec,Zrr),e(Ec,y_e),e(y_e,etr),e(Ec,otr),e(Ec,vV),e(vV,rtr),e(Ec,ttr),e(gt,atr),e(gt,L_e),e(L_e,ntr),e(gt,str),g(x0,gt,null),e(vr,ltr),e(vr,po),g(k0,po,null),e(po,itr),e(po,x_e),e(x_e,dtr),e(po,ctr),e(po,un),e(un,ftr),e(un,k_e),e(k_e,mtr),e(un,gtr),e(un,S_e),e(S_e,htr),e(un,ptr),e(un,R_e),e(R_e,_tr),e(un,utr),e(po,btr),e(po,x),e(x,Hv),e(Hv,B_e),e(B_e,vtr),e(Hv,Ftr),e(Hv,FV),e(FV,Ttr),e(Hv,Mtr),e(x,Etr),e(x,Uv),e(Uv,P_e),e(P_e,Ctr),e(Uv,wtr),e(Uv,TV),e(TV,Atr),e(Uv,ytr),e(x,Ltr),e(x,Jv),e(Jv,$_e),e($_e,xtr),e(Jv,ktr),e(Jv,MV),e(MV,Str),e(Jv,Rtr),e(x,Btr),e(x,Yv),e(Yv,I_e),e(I_e,Ptr),e(Yv,$tr),e(Yv,EV),e(EV,Itr),e(Yv,qtr),e(x,Ntr),e(x,Kv),e(Kv,q_e),e(q_e,jtr),e(Kv,Dtr),e(Kv,CV),e(CV,Gtr),e(Kv,Otr),e(x,Vtr),e(x,Zv),e(Zv,N_e),e(N_e,Xtr),e(Zv,ztr),e(Zv,wV),e(wV,Qtr),e(Zv,Wtr),e(x,Htr),e(x,eF),e(eF,j_e),e(j_e,Utr),e(eF,Jtr),e(eF,AV),e(AV,Ytr),e(eF,Ktr),e(x,Ztr),e(x,oF),e(oF,D_e),e(D_e,ear),e(oF,oar),e(oF,yV),e(yV,rar),e(oF,tar),e(x,aar),e(x,rF),e(rF,G_e),e(G_e,nar),e(rF,sar),e(rF,LV),e(LV,lar),e(rF,iar),e(x,dar),e(x,tF),e(tF,O_e),e(O_e,car),e(tF,far),e(tF,xV),e(xV,mar),e(tF,gar),e(x,har),e(x,aF),e(aF,V_e),e(V_e,par),e(aF,_ar),e(aF,kV),e(kV,uar),e(aF,bar),e(x,Far),e(x,nF),e(nF,X_e),e(X_e,Tar),e(nF,Mar),e(nF,SV),e(SV,Ear),e(nF,Car),e(x,war),e(x,sF),e(sF,z_e),e(z_e,Aar),e(sF,yar),e(sF,RV),e(RV,Lar),e(sF,xar),e(x,kar),e(x,lF),e(lF,Q_e),e(Q_e,Sar),e(lF,Rar),e(lF,BV),e(BV,Bar),e(lF,Par),e(x,$ar),e(x,iF),e(iF,W_e),e(W_e,Iar),e(iF,qar),e(iF,PV),e(PV,Nar),e(iF,jar),e(x,Dar),e(x,dF),e(dF,H_e),e(H_e,Gar),e(dF,Oar),e(dF,$V),e($V,Var),e(dF,Xar),e(x,zar),e(x,Js),e(Js,U_e),e(U_e,Qar),e(Js,War),e(Js,IV),e(IV,Har),e(Js,Uar),e(Js,qV),e(qV,Jar),e(Js,Yar),e(x,Kar),e(x,cF),e(cF,J_e),e(J_e,Zar),e(cF,enr),e(cF,NV),e(NV,onr),e(cF,rnr),e(x,tnr),e(x,fF),e(fF,Y_e),e(Y_e,anr),e(fF,nnr),e(fF,jV),e(jV,snr),e(fF,lnr),e(x,inr),e(x,mF),e(mF,K_e),e(K_e,dnr),e(mF,cnr),e(mF,DV),e(DV,fnr),e(mF,mnr),e(x,gnr),e(x,gF),e(gF,Z_e),e(Z_e,hnr),e(gF,pnr),e(gF,GV),e(GV,_nr),e(gF,unr),e(x,bnr),e(x,hF),e(hF,eue),e(eue,vnr),e(hF,Fnr),e(hF,OV),e(OV,Tnr),e(hF,Mnr),e(x,Enr),e(x,pF),e(pF,oue),e(oue,Cnr),e(pF,wnr),e(pF,VV),e(VV,Anr),e(pF,ynr),e(x,Lnr),e(x,_F),e(_F,rue),e(rue,xnr),e(_F,knr),e(_F,XV),e(XV,Snr),e(_F,Rnr),e(x,Bnr),e(x,uF),e(uF,tue),e(tue,Pnr),e(uF,$nr),e(uF,zV),e(zV,Inr),e(uF,qnr),e(x,Nnr),e(x,bF),e(bF,aue),e(aue,jnr),e(bF,Dnr),e(bF,QV),e(QV,Gnr),e(bF,Onr),e(x,Vnr),e(x,vF),e(vF,nue),e(nue,Xnr),e(vF,znr),e(vF,WV),e(WV,Qnr),e(vF,Wnr),e(x,Hnr),e(x,FF),e(FF,sue),e(sue,Unr),e(FF,Jnr),e(FF,HV),e(HV,Ynr),e(FF,Knr),e(x,Znr),e(x,TF),e(TF,lue),e(lue,esr),e(TF,osr),e(TF,UV),e(UV,rsr),e(TF,tsr),e(x,asr),e(x,MF),e(MF,iue),e(iue,nsr),e(MF,ssr),e(MF,JV),e(JV,lsr),e(MF,isr),e(x,dsr),e(x,EF),e(EF,due),e(due,csr),e(EF,fsr),e(EF,YV),e(YV,msr),e(EF,gsr),e(x,hsr),e(x,CF),e(CF,cue),e(cue,psr),e(CF,_sr),e(CF,KV),e(KV,usr),e(CF,bsr),e(x,vsr),e(x,wF),e(wF,fue),e(fue,Fsr),e(wF,Tsr),e(wF,ZV),e(ZV,Msr),e(wF,Esr),e(x,Csr),e(x,AF),e(AF,mue),e(mue,wsr),e(AF,Asr),e(AF,eX),e(eX,ysr),e(AF,Lsr),e(x,xsr),e(x,yF),e(yF,gue),e(gue,ksr),e(yF,Ssr),e(yF,oX),e(oX,Rsr),e(yF,Bsr),e(x,Psr),e(x,LF),e(LF,hue),e(hue,$sr),e(LF,Isr),e(LF,rX),e(rX,qsr),e(LF,Nsr),e(x,jsr),e(x,xF),e(xF,pue),e(pue,Dsr),e(xF,Gsr),e(xF,tX),e(tX,Osr),e(xF,Vsr),e(x,Xsr),e(x,kF),e(kF,_ue),e(_ue,zsr),e(kF,Qsr),e(kF,aX),e(aX,Wsr),e(kF,Hsr),e(x,Usr),e(x,SF),e(SF,uue),e(uue,Jsr),e(SF,Ysr),e(SF,nX),e(nX,Ksr),e(SF,Zsr),e(x,elr),e(x,RF),e(RF,bue),e(bue,olr),e(RF,rlr),e(RF,sX),e(sX,tlr),e(RF,alr),e(x,nlr),e(x,BF),e(BF,vue),e(vue,slr),e(BF,llr),e(BF,lX),e(lX,ilr),e(BF,dlr),e(x,clr),e(x,PF),e(PF,Fue),e(Fue,flr),e(PF,mlr),e(PF,iX),e(iX,glr),e(PF,hlr),e(x,plr),e(x,$F),e($F,Tue),e(Tue,_lr),e($F,ulr),e($F,dX),e(dX,blr),e($F,vlr),e(x,Flr),e(x,IF),e(IF,Mue),e(Mue,Tlr),e(IF,Mlr),e(IF,cX),e(cX,Elr),e(IF,Clr),e(po,wlr),e(po,Eue),e(Eue,Alr),e(po,ylr),g(S0,po,null),b(c,s$e,u),b(c,Cc,u),e(Cc,qF),e(qF,Cue),g(R0,Cue,null),e(Cc,Llr),e(Cc,wue),e(wue,xlr),b(c,l$e,u),b(c,Fr,u),g(B0,Fr,null),e(Fr,klr),e(Fr,wc),e(wc,Slr),e(wc,fX),e(fX,Rlr),e(wc,Blr),e(wc,mX),e(mX,Plr),e(wc,$lr),e(Fr,Ilr),e(Fr,P0),e(P0,qlr),e(P0,Aue),e(Aue,Nlr),e(P0,jlr),e(Fr,Dlr),e(Fr,ht),g($0,ht,null),e(ht,Glr),e(ht,yue),e(yue,Olr),e(ht,Vlr),e(ht,Ac),e(Ac,Xlr),e(Ac,Lue),e(Lue,zlr),e(Ac,Qlr),e(Ac,gX),e(gX,Wlr),e(Ac,Hlr),e(ht,Ulr),e(ht,xue),e(xue,Jlr),e(ht,Ylr),g(I0,ht,null),e(Fr,Klr),e(Fr,_o),g(q0,_o,null),e(_o,Zlr),e(_o,kue),e(kue,eir),e(_o,oir),e(_o,bn),e(bn,rir),e(bn,Sue),e(Sue,tir),e(bn,air),e(bn,Rue),e(Rue,nir),e(bn,sir),e(bn,Bue),e(Bue,lir),e(bn,iir),e(_o,dir),e(_o,U),e(U,NF),e(NF,Pue),e(Pue,cir),e(NF,fir),e(NF,hX),e(hX,mir),e(NF,gir),e(U,hir),e(U,jF),e(jF,$ue),e($ue,pir),e(jF,_ir),e(jF,pX),e(pX,uir),e(jF,bir),e(U,vir),e(U,DF),e(DF,Iue),e(Iue,Fir),e(DF,Tir),e(DF,_X),e(_X,Mir),e(DF,Eir),e(U,Cir),e(U,GF),e(GF,que),e(que,wir),e(GF,Air),e(GF,uX),e(uX,yir),e(GF,Lir),e(U,xir),e(U,OF),e(OF,Nue),e(Nue,kir),e(OF,Sir),e(OF,bX),e(bX,Rir),e(OF,Bir),e(U,Pir),e(U,VF),e(VF,jue),e(jue,$ir),e(VF,Iir),e(VF,vX),e(vX,qir),e(VF,Nir),e(U,jir),e(U,XF),e(XF,Due),e(Due,Dir),e(XF,Gir),e(XF,FX),e(FX,Oir),e(XF,Vir),e(U,Xir),e(U,zF),e(zF,Gue),e(Gue,zir),e(zF,Qir),e(zF,TX),e(TX,Wir),e(zF,Hir),e(U,Uir),e(U,QF),e(QF,Oue),e(Oue,Jir),e(QF,Yir),e(QF,MX),e(MX,Kir),e(QF,Zir),e(U,edr),e(U,WF),e(WF,Vue),e(Vue,odr),e(WF,rdr),e(WF,EX),e(EX,tdr),e(WF,adr),e(U,ndr),e(U,HF),e(HF,Xue),e(Xue,sdr),e(HF,ldr),e(HF,CX),e(CX,idr),e(HF,ddr),e(U,cdr),e(U,UF),e(UF,zue),e(zue,fdr),e(UF,mdr),e(UF,wX),e(wX,gdr),e(UF,hdr),e(U,pdr),e(U,JF),e(JF,Que),e(Que,_dr),e(JF,udr),e(JF,AX),e(AX,bdr),e(JF,vdr),e(U,Fdr),e(U,YF),e(YF,Wue),e(Wue,Tdr),e(YF,Mdr),e(YF,yX),e(yX,Edr),e(YF,Cdr),e(U,wdr),e(U,KF),e(KF,Hue),e(Hue,Adr),e(KF,ydr),e(KF,LX),e(LX,Ldr),e(KF,xdr),e(U,kdr),e(U,ZF),e(ZF,Uue),e(Uue,Sdr),e(ZF,Rdr),e(ZF,xX),e(xX,Bdr),e(ZF,Pdr),e(U,$dr),e(U,eT),e(eT,Jue),e(Jue,Idr),e(eT,qdr),e(eT,kX),e(kX,Ndr),e(eT,jdr),e(U,Ddr),e(U,oT),e(oT,Yue),e(Yue,Gdr),e(oT,Odr),e(oT,SX),e(SX,Vdr),e(oT,Xdr),e(U,zdr),e(U,rT),e(rT,Kue),e(Kue,Qdr),e(rT,Wdr),e(rT,RX),e(RX,Hdr),e(rT,Udr),e(U,Jdr),e(U,tT),e(tT,Zue),e(Zue,Ydr),e(tT,Kdr),e(tT,BX),e(BX,Zdr),e(tT,ecr),e(U,ocr),e(U,aT),e(aT,e5e),e(e5e,rcr),e(aT,tcr),e(aT,PX),e(PX,acr),e(aT,ncr),e(U,scr),e(U,nT),e(nT,o5e),e(o5e,lcr),e(nT,icr),e(nT,$X),e($X,dcr),e(nT,ccr),e(U,fcr),e(U,sT),e(sT,r5e),e(r5e,mcr),e(sT,gcr),e(sT,IX),e(IX,hcr),e(sT,pcr),e(_o,_cr),e(_o,t5e),e(t5e,ucr),e(_o,bcr),g(N0,_o,null),b(c,i$e,u),b(c,yc,u),e(yc,lT),e(lT,a5e),g(j0,a5e,null),e(yc,vcr),e(yc,n5e),e(n5e,Fcr),b(c,d$e,u),b(c,Tr,u),g(D0,Tr,null),e(Tr,Tcr),e(Tr,Lc),e(Lc,Mcr),e(Lc,qX),e(qX,Ecr),e(Lc,Ccr),e(Lc,NX),e(NX,wcr),e(Lc,Acr),e(Tr,ycr),e(Tr,G0),e(G0,Lcr),e(G0,s5e),e(s5e,xcr),e(G0,kcr),e(Tr,Scr),e(Tr,pt),g(O0,pt,null),e(pt,Rcr),e(pt,l5e),e(l5e,Bcr),e(pt,Pcr),e(pt,xc),e(xc,$cr),e(xc,i5e),e(i5e,Icr),e(xc,qcr),e(xc,jX),e(jX,Ncr),e(xc,jcr),e(pt,Dcr),e(pt,d5e),e(d5e,Gcr),e(pt,Ocr),g(V0,pt,null),e(Tr,Vcr),e(Tr,uo),g(X0,uo,null),e(uo,Xcr),e(uo,c5e),e(c5e,zcr),e(uo,Qcr),e(uo,vn),e(vn,Wcr),e(vn,f5e),e(f5e,Hcr),e(vn,Ucr),e(vn,m5e),e(m5e,Jcr),e(vn,Ycr),e(vn,g5e),e(g5e,Kcr),e(vn,Zcr),e(uo,efr),e(uo,ge),e(ge,iT),e(iT,h5e),e(h5e,ofr),e(iT,rfr),e(iT,DX),e(DX,tfr),e(iT,afr),e(ge,nfr),e(ge,dT),e(dT,p5e),e(p5e,sfr),e(dT,lfr),e(dT,GX),e(GX,ifr),e(dT,dfr),e(ge,cfr),e(ge,cT),e(cT,_5e),e(_5e,ffr),e(cT,mfr),e(cT,OX),e(OX,gfr),e(cT,hfr),e(ge,pfr),e(ge,fT),e(fT,u5e),e(u5e,_fr),e(fT,ufr),e(fT,VX),e(VX,bfr),e(fT,vfr),e(ge,Ffr),e(ge,mT),e(mT,b5e),e(b5e,Tfr),e(mT,Mfr),e(mT,XX),e(XX,Efr),e(mT,Cfr),e(ge,wfr),e(ge,gT),e(gT,v5e),e(v5e,Afr),e(gT,yfr),e(gT,zX),e(zX,Lfr),e(gT,xfr),e(ge,kfr),e(ge,hT),e(hT,F5e),e(F5e,Sfr),e(hT,Rfr),e(hT,QX),e(QX,Bfr),e(hT,Pfr),e(ge,$fr),e(ge,pT),e(pT,T5e),e(T5e,Ifr),e(pT,qfr),e(pT,WX),e(WX,Nfr),e(pT,jfr),e(ge,Dfr),e(ge,_T),e(_T,M5e),e(M5e,Gfr),e(_T,Ofr),e(_T,HX),e(HX,Vfr),e(_T,Xfr),e(ge,zfr),e(ge,uT),e(uT,E5e),e(E5e,Qfr),e(uT,Wfr),e(uT,UX),e(UX,Hfr),e(uT,Ufr),e(ge,Jfr),e(ge,bT),e(bT,C5e),e(C5e,Yfr),e(bT,Kfr),e(bT,JX),e(JX,Zfr),e(bT,emr),e(ge,omr),e(ge,vT),e(vT,w5e),e(w5e,rmr),e(vT,tmr),e(vT,YX),e(YX,amr),e(vT,nmr),e(uo,smr),e(uo,A5e),e(A5e,lmr),e(uo,imr),g(z0,uo,null),b(c,c$e,u),b(c,kc,u),e(kc,FT),e(FT,y5e),g(Q0,y5e,null),e(kc,dmr),e(kc,L5e),e(L5e,cmr),b(c,f$e,u),b(c,Mr,u),g(W0,Mr,null),e(Mr,fmr),e(Mr,Sc),e(Sc,mmr),e(Sc,KX),e(KX,gmr),e(Sc,hmr),e(Sc,ZX),e(ZX,pmr),e(Sc,_mr),e(Mr,umr),e(Mr,H0),e(H0,bmr),e(H0,x5e),e(x5e,vmr),e(H0,Fmr),e(Mr,Tmr),e(Mr,_t),g(U0,_t,null),e(_t,Mmr),e(_t,k5e),e(k5e,Emr),e(_t,Cmr),e(_t,Rc),e(Rc,wmr),e(Rc,S5e),e(S5e,Amr),e(Rc,ymr),e(Rc,ez),e(ez,Lmr),e(Rc,xmr),e(_t,kmr),e(_t,R5e),e(R5e,Smr),e(_t,Rmr),g(J0,_t,null),e(Mr,Bmr),e(Mr,bo),g(Y0,bo,null),e(bo,Pmr),e(bo,B5e),e(B5e,$mr),e(bo,Imr),e(bo,Fn),e(Fn,qmr),e(Fn,P5e),e(P5e,Nmr),e(Fn,jmr),e(Fn,$5e),e($5e,Dmr),e(Fn,Gmr),e(Fn,I5e),e(I5e,Omr),e(Fn,Vmr),e(bo,Xmr),e(bo,K0),e(K0,TT),e(TT,q5e),e(q5e,zmr),e(TT,Qmr),e(TT,oz),e(oz,Wmr),e(TT,Hmr),e(K0,Umr),e(K0,MT),e(MT,N5e),e(N5e,Jmr),e(MT,Ymr),e(MT,rz),e(rz,Kmr),e(MT,Zmr),e(bo,egr),e(bo,j5e),e(j5e,ogr),e(bo,rgr),g(Z0,bo,null),b(c,m$e,u),b(c,Bc,u),e(Bc,ET),e(ET,D5e),g(ey,D5e,null),e(Bc,tgr),e(Bc,G5e),e(G5e,agr),b(c,g$e,u),b(c,Er,u),g(oy,Er,null),e(Er,ngr),e(Er,Pc),e(Pc,sgr),e(Pc,tz),e(tz,lgr),e(Pc,igr),e(Pc,az),e(az,dgr),e(Pc,cgr),e(Er,fgr),e(Er,ry),e(ry,mgr),e(ry,O5e),e(O5e,ggr),e(ry,hgr),e(Er,pgr),e(Er,ut),g(ty,ut,null),e(ut,_gr),e(ut,V5e),e(V5e,ugr),e(ut,bgr),e(ut,$c),e($c,vgr),e($c,X5e),e(X5e,Fgr),e($c,Tgr),e($c,nz),e(nz,Mgr),e($c,Egr),e(ut,Cgr),e(ut,z5e),e(z5e,wgr),e(ut,Agr),g(ay,ut,null),e(Er,ygr),e(Er,vo),g(ny,vo,null),e(vo,Lgr),e(vo,Q5e),e(Q5e,xgr),e(vo,kgr),e(vo,Tn),e(Tn,Sgr),e(Tn,W5e),e(W5e,Rgr),e(Tn,Bgr),e(Tn,H5e),e(H5e,Pgr),e(Tn,$gr),e(Tn,U5e),e(U5e,Igr),e(Tn,qgr),e(vo,Ngr),e(vo,K),e(K,CT),e(CT,J5e),e(J5e,jgr),e(CT,Dgr),e(CT,sz),e(sz,Ggr),e(CT,Ogr),e(K,Vgr),e(K,wT),e(wT,Y5e),e(Y5e,Xgr),e(wT,zgr),e(wT,lz),e(lz,Qgr),e(wT,Wgr),e(K,Hgr),e(K,AT),e(AT,K5e),e(K5e,Ugr),e(AT,Jgr),e(AT,iz),e(iz,Ygr),e(AT,Kgr),e(K,Zgr),e(K,yT),e(yT,Z5e),e(Z5e,ehr),e(yT,ohr),e(yT,dz),e(dz,rhr),e(yT,thr),e(K,ahr),e(K,LT),e(LT,e1e),e(e1e,nhr),e(LT,shr),e(LT,cz),e(cz,lhr),e(LT,ihr),e(K,dhr),e(K,xT),e(xT,o1e),e(o1e,chr),e(xT,fhr),e(xT,fz),e(fz,mhr),e(xT,ghr),e(K,hhr),e(K,kT),e(kT,r1e),e(r1e,phr),e(kT,_hr),e(kT,mz),e(mz,uhr),e(kT,bhr),e(K,vhr),e(K,ST),e(ST,t1e),e(t1e,Fhr),e(ST,Thr),e(ST,gz),e(gz,Mhr),e(ST,Ehr),e(K,Chr),e(K,RT),e(RT,a1e),e(a1e,whr),e(RT,Ahr),e(RT,hz),e(hz,yhr),e(RT,Lhr),e(K,xhr),e(K,BT),e(BT,n1e),e(n1e,khr),e(BT,Shr),e(BT,pz),e(pz,Rhr),e(BT,Bhr),e(K,Phr),e(K,PT),e(PT,s1e),e(s1e,$hr),e(PT,Ihr),e(PT,_z),e(_z,qhr),e(PT,Nhr),e(K,jhr),e(K,$T),e($T,l1e),e(l1e,Dhr),e($T,Ghr),e($T,uz),e(uz,Ohr),e($T,Vhr),e(K,Xhr),e(K,IT),e(IT,i1e),e(i1e,zhr),e(IT,Qhr),e(IT,bz),e(bz,Whr),e(IT,Hhr),e(K,Uhr),e(K,qT),e(qT,d1e),e(d1e,Jhr),e(qT,Yhr),e(qT,vz),e(vz,Khr),e(qT,Zhr),e(K,epr),e(K,NT),e(NT,c1e),e(c1e,opr),e(NT,rpr),e(NT,Fz),e(Fz,tpr),e(NT,apr),e(K,npr),e(K,jT),e(jT,f1e),e(f1e,spr),e(jT,lpr),e(jT,Tz),e(Tz,ipr),e(jT,dpr),e(K,cpr),e(K,DT),e(DT,m1e),e(m1e,fpr),e(DT,mpr),e(DT,Mz),e(Mz,gpr),e(DT,hpr),e(K,ppr),e(K,GT),e(GT,g1e),e(g1e,_pr),e(GT,upr),e(GT,Ez),e(Ez,bpr),e(GT,vpr),e(K,Fpr),e(K,OT),e(OT,h1e),e(h1e,Tpr),e(OT,Mpr),e(OT,Cz),e(Cz,Epr),e(OT,Cpr),e(K,wpr),e(K,VT),e(VT,p1e),e(p1e,Apr),e(VT,ypr),e(VT,wz),e(wz,Lpr),e(VT,xpr),e(vo,kpr),e(vo,_1e),e(_1e,Spr),e(vo,Rpr),g(sy,vo,null),b(c,h$e,u),b(c,Ic,u),e(Ic,XT),e(XT,u1e),g(ly,u1e,null),e(Ic,Bpr),e(Ic,b1e),e(b1e,Ppr),b(c,p$e,u),b(c,Cr,u),g(iy,Cr,null),e(Cr,$pr),e(Cr,qc),e(qc,Ipr),e(qc,Az),e(Az,qpr),e(qc,Npr),e(qc,yz),e(yz,jpr),e(qc,Dpr),e(Cr,Gpr),e(Cr,dy),e(dy,Opr),e(dy,v1e),e(v1e,Vpr),e(dy,Xpr),e(Cr,zpr),e(Cr,bt),g(cy,bt,null),e(bt,Qpr),e(bt,F1e),e(F1e,Wpr),e(bt,Hpr),e(bt,Nc),e(Nc,Upr),e(Nc,T1e),e(T1e,Jpr),e(Nc,Ypr),e(Nc,Lz),e(Lz,Kpr),e(Nc,Zpr),e(bt,e_r),e(bt,M1e),e(M1e,o_r),e(bt,r_r),g(fy,bt,null),e(Cr,t_r),e(Cr,Fo),g(my,Fo,null),e(Fo,a_r),e(Fo,E1e),e(E1e,n_r),e(Fo,s_r),e(Fo,Mn),e(Mn,l_r),e(Mn,C1e),e(C1e,i_r),e(Mn,d_r),e(Mn,w1e),e(w1e,c_r),e(Mn,f_r),e(Mn,A1e),e(A1e,m_r),e(Mn,g_r),e(Fo,h_r),e(Fo,Fe),e(Fe,zT),e(zT,y1e),e(y1e,p_r),e(zT,__r),e(zT,xz),e(xz,u_r),e(zT,b_r),e(Fe,v_r),e(Fe,QT),e(QT,L1e),e(L1e,F_r),e(QT,T_r),e(QT,kz),e(kz,M_r),e(QT,E_r),e(Fe,C_r),e(Fe,WT),e(WT,x1e),e(x1e,w_r),e(WT,A_r),e(WT,Sz),e(Sz,y_r),e(WT,L_r),e(Fe,x_r),e(Fe,HT),e(HT,k1e),e(k1e,k_r),e(HT,S_r),e(HT,Rz),e(Rz,R_r),e(HT,B_r),e(Fe,P_r),e(Fe,UT),e(UT,S1e),e(S1e,$_r),e(UT,I_r),e(UT,Bz),e(Bz,q_r),e(UT,N_r),e(Fe,j_r),e(Fe,JT),e(JT,R1e),e(R1e,D_r),e(JT,G_r),e(JT,Pz),e(Pz,O_r),e(JT,V_r),e(Fe,X_r),e(Fe,YT),e(YT,B1e),e(B1e,z_r),e(YT,Q_r),e(YT,$z),e($z,W_r),e(YT,H_r),e(Fe,U_r),e(Fe,KT),e(KT,P1e),e(P1e,J_r),e(KT,Y_r),e(KT,Iz),e(Iz,K_r),e(KT,Z_r),e(Fe,eur),e(Fe,ZT),e(ZT,$1e),e($1e,our),e(ZT,rur),e(ZT,qz),e(qz,tur),e(ZT,aur),e(Fe,nur),e(Fe,e7),e(e7,I1e),e(I1e,sur),e(e7,lur),e(e7,Nz),e(Nz,iur),e(e7,dur),e(Fo,cur),e(Fo,q1e),e(q1e,fur),e(Fo,mur),g(gy,Fo,null),b(c,_$e,u),b(c,jc,u),e(jc,o7),e(o7,N1e),g(hy,N1e,null),e(jc,gur),e(jc,j1e),e(j1e,hur),b(c,u$e,u),b(c,wr,u),g(py,wr,null),e(wr,pur),e(wr,Dc),e(Dc,_ur),e(Dc,jz),e(jz,uur),e(Dc,bur),e(Dc,Dz),e(Dz,vur),e(Dc,Fur),e(wr,Tur),e(wr,_y),e(_y,Mur),e(_y,D1e),e(D1e,Eur),e(_y,Cur),e(wr,wur),e(wr,vt),g(uy,vt,null),e(vt,Aur),e(vt,G1e),e(G1e,yur),e(vt,Lur),e(vt,Gc),e(Gc,xur),e(Gc,O1e),e(O1e,kur),e(Gc,Sur),e(Gc,Gz),e(Gz,Rur),e(Gc,Bur),e(vt,Pur),e(vt,V1e),e(V1e,$ur),e(vt,Iur),g(by,vt,null),e(wr,qur),e(wr,To),g(vy,To,null),e(To,Nur),e(To,X1e),e(X1e,jur),e(To,Dur),e(To,En),e(En,Gur),e(En,z1e),e(z1e,Our),e(En,Vur),e(En,Q1e),e(Q1e,Xur),e(En,zur),e(En,W1e),e(W1e,Qur),e(En,Wur),e(To,Hur),e(To,V),e(V,r7),e(r7,H1e),e(H1e,Uur),e(r7,Jur),e(r7,Oz),e(Oz,Yur),e(r7,Kur),e(V,Zur),e(V,t7),e(t7,U1e),e(U1e,e5r),e(t7,o5r),e(t7,Vz),e(Vz,r5r),e(t7,t5r),e(V,a5r),e(V,a7),e(a7,J1e),e(J1e,n5r),e(a7,s5r),e(a7,Xz),e(Xz,l5r),e(a7,i5r),e(V,d5r),e(V,n7),e(n7,Y1e),e(Y1e,c5r),e(n7,f5r),e(n7,zz),e(zz,m5r),e(n7,g5r),e(V,h5r),e(V,s7),e(s7,K1e),e(K1e,p5r),e(s7,_5r),e(s7,Qz),e(Qz,u5r),e(s7,b5r),e(V,v5r),e(V,l7),e(l7,Z1e),e(Z1e,F5r),e(l7,T5r),e(l7,Wz),e(Wz,M5r),e(l7,E5r),e(V,C5r),e(V,i7),e(i7,e4e),e(e4e,w5r),e(i7,A5r),e(i7,Hz),e(Hz,y5r),e(i7,L5r),e(V,x5r),e(V,d7),e(d7,o4e),e(o4e,k5r),e(d7,S5r),e(d7,Uz),e(Uz,R5r),e(d7,B5r),e(V,P5r),e(V,c7),e(c7,r4e),e(r4e,$5r),e(c7,I5r),e(c7,Jz),e(Jz,q5r),e(c7,N5r),e(V,j5r),e(V,f7),e(f7,t4e),e(t4e,D5r),e(f7,G5r),e(f7,Yz),e(Yz,O5r),e(f7,V5r),e(V,X5r),e(V,m7),e(m7,a4e),e(a4e,z5r),e(m7,Q5r),e(m7,Kz),e(Kz,W5r),e(m7,H5r),e(V,U5r),e(V,g7),e(g7,n4e),e(n4e,J5r),e(g7,Y5r),e(g7,Zz),e(Zz,K5r),e(g7,Z5r),e(V,e1r),e(V,h7),e(h7,s4e),e(s4e,o1r),e(h7,r1r),e(h7,eQ),e(eQ,t1r),e(h7,a1r),e(V,n1r),e(V,p7),e(p7,l4e),e(l4e,s1r),e(p7,l1r),e(p7,oQ),e(oQ,i1r),e(p7,d1r),e(V,c1r),e(V,_7),e(_7,i4e),e(i4e,f1r),e(_7,m1r),e(_7,rQ),e(rQ,g1r),e(_7,h1r),e(V,p1r),e(V,u7),e(u7,d4e),e(d4e,_1r),e(u7,u1r),e(u7,tQ),e(tQ,b1r),e(u7,v1r),e(V,F1r),e(V,b7),e(b7,c4e),e(c4e,T1r),e(b7,M1r),e(b7,aQ),e(aQ,E1r),e(b7,C1r),e(V,w1r),e(V,v7),e(v7,f4e),e(f4e,A1r),e(v7,y1r),e(v7,nQ),e(nQ,L1r),e(v7,x1r),e(V,k1r),e(V,F7),e(F7,m4e),e(m4e,S1r),e(F7,R1r),e(F7,sQ),e(sQ,B1r),e(F7,P1r),e(V,$1r),e(V,T7),e(T7,g4e),e(g4e,I1r),e(T7,q1r),e(T7,lQ),e(lQ,N1r),e(T7,j1r),e(V,D1r),e(V,M7),e(M7,h4e),e(h4e,G1r),e(M7,O1r),e(M7,iQ),e(iQ,V1r),e(M7,X1r),e(V,z1r),e(V,E7),e(E7,p4e),e(p4e,Q1r),e(E7,W1r),e(E7,dQ),e(dQ,H1r),e(E7,U1r),e(V,J1r),e(V,C7),e(C7,_4e),e(_4e,Y1r),e(C7,K1r),e(C7,cQ),e(cQ,Z1r),e(C7,e4r),e(V,o4r),e(V,w7),e(w7,u4e),e(u4e,r4r),e(w7,t4r),e(w7,fQ),e(fQ,a4r),e(w7,n4r),e(V,s4r),e(V,A7),e(A7,b4e),e(b4e,l4r),e(A7,i4r),e(A7,mQ),e(mQ,d4r),e(A7,c4r),e(V,f4r),e(V,y7),e(y7,v4e),e(v4e,m4r),e(y7,g4r),e(y7,gQ),e(gQ,h4r),e(y7,p4r),e(To,_4r),e(To,F4e),e(F4e,u4r),e(To,b4r),g(Fy,To,null),b(c,b$e,u),b(c,Oc,u),e(Oc,L7),e(L7,T4e),g(Ty,T4e,null),e(Oc,v4r),e(Oc,M4e),e(M4e,F4r),b(c,v$e,u),b(c,Ar,u),g(My,Ar,null),e(Ar,T4r),e(Ar,Vc),e(Vc,M4r),e(Vc,hQ),e(hQ,E4r),e(Vc,C4r),e(Vc,pQ),e(pQ,w4r),e(Vc,A4r),e(Ar,y4r),e(Ar,Ey),e(Ey,L4r),e(Ey,E4e),e(E4e,x4r),e(Ey,k4r),e(Ar,S4r),e(Ar,Ft),g(Cy,Ft,null),e(Ft,R4r),e(Ft,C4e),e(C4e,B4r),e(Ft,P4r),e(Ft,Xc),e(Xc,$4r),e(Xc,w4e),e(w4e,I4r),e(Xc,q4r),e(Xc,_Q),e(_Q,N4r),e(Xc,j4r),e(Ft,D4r),e(Ft,A4e),e(A4e,G4r),e(Ft,O4r),g(wy,Ft,null),e(Ar,V4r),e(Ar,Mo),g(Ay,Mo,null),e(Mo,X4r),e(Mo,y4e),e(y4e,z4r),e(Mo,Q4r),e(Mo,Cn),e(Cn,W4r),e(Cn,L4e),e(L4e,H4r),e(Cn,U4r),e(Cn,x4e),e(x4e,J4r),e(Cn,Y4r),e(Cn,k4e),e(k4e,K4r),e(Cn,Z4r),e(Mo,ebr),e(Mo,se),e(se,x7),e(x7,S4e),e(S4e,obr),e(x7,rbr),e(x7,uQ),e(uQ,tbr),e(x7,abr),e(se,nbr),e(se,k7),e(k7,R4e),e(R4e,sbr),e(k7,lbr),e(k7,bQ),e(bQ,ibr),e(k7,dbr),e(se,cbr),e(se,S7),e(S7,B4e),e(B4e,fbr),e(S7,mbr),e(S7,vQ),e(vQ,gbr),e(S7,hbr),e(se,pbr),e(se,R7),e(R7,P4e),e(P4e,_br),e(R7,ubr),e(R7,FQ),e(FQ,bbr),e(R7,vbr),e(se,Fbr),e(se,B7),e(B7,$4e),e($4e,Tbr),e(B7,Mbr),e(B7,TQ),e(TQ,Ebr),e(B7,Cbr),e(se,wbr),e(se,P7),e(P7,I4e),e(I4e,Abr),e(P7,ybr),e(P7,MQ),e(MQ,Lbr),e(P7,xbr),e(se,kbr),e(se,$7),e($7,q4e),e(q4e,Sbr),e($7,Rbr),e($7,EQ),e(EQ,Bbr),e($7,Pbr),e(se,$br),e(se,I7),e(I7,N4e),e(N4e,Ibr),e(I7,qbr),e(I7,CQ),e(CQ,Nbr),e(I7,jbr),e(se,Dbr),e(se,q7),e(q7,j4e),e(j4e,Gbr),e(q7,Obr),e(q7,wQ),e(wQ,Vbr),e(q7,Xbr),e(se,zbr),e(se,N7),e(N7,D4e),e(D4e,Qbr),e(N7,Wbr),e(N7,AQ),e(AQ,Hbr),e(N7,Ubr),e(se,Jbr),e(se,j7),e(j7,G4e),e(G4e,Ybr),e(j7,Kbr),e(j7,yQ),e(yQ,Zbr),e(j7,e2r),e(se,o2r),e(se,D7),e(D7,O4e),e(O4e,r2r),e(D7,t2r),e(D7,LQ),e(LQ,a2r),e(D7,n2r),e(se,s2r),e(se,G7),e(G7,V4e),e(V4e,l2r),e(G7,i2r),e(G7,xQ),e(xQ,d2r),e(G7,c2r),e(se,f2r),e(se,O7),e(O7,X4e),e(X4e,m2r),e(O7,g2r),e(O7,kQ),e(kQ,h2r),e(O7,p2r),e(se,_2r),e(se,V7),e(V7,z4e),e(z4e,u2r),e(V7,b2r),e(V7,SQ),e(SQ,v2r),e(V7,F2r),e(se,T2r),e(se,X7),e(X7,Q4e),e(Q4e,M2r),e(X7,E2r),e(X7,RQ),e(RQ,C2r),e(X7,w2r),e(se,A2r),e(se,z7),e(z7,W4e),e(W4e,y2r),e(z7,L2r),e(z7,BQ),e(BQ,x2r),e(z7,k2r),e(Mo,S2r),e(Mo,H4e),e(H4e,R2r),e(Mo,B2r),g(yy,Mo,null),b(c,F$e,u),b(c,zc,u),e(zc,Q7),e(Q7,U4e),g(Ly,U4e,null),e(zc,P2r),e(zc,J4e),e(J4e,$2r),b(c,T$e,u),b(c,yr,u),g(xy,yr,null),e(yr,I2r),e(yr,Qc),e(Qc,q2r),e(Qc,PQ),e(PQ,N2r),e(Qc,j2r),e(Qc,$Q),e($Q,D2r),e(Qc,G2r),e(yr,O2r),e(yr,ky),e(ky,V2r),e(ky,Y4e),e(Y4e,X2r),e(ky,z2r),e(yr,Q2r),e(yr,Tt),g(Sy,Tt,null),e(Tt,W2r),e(Tt,K4e),e(K4e,H2r),e(Tt,U2r),e(Tt,Wc),e(Wc,J2r),e(Wc,Z4e),e(Z4e,Y2r),e(Wc,K2r),e(Wc,IQ),e(IQ,Z2r),e(Wc,evr),e(Tt,ovr),e(Tt,ebe),e(ebe,rvr),e(Tt,tvr),g(Ry,Tt,null),e(yr,avr),e(yr,Eo),g(By,Eo,null),e(Eo,nvr),e(Eo,obe),e(obe,svr),e(Eo,lvr),e(Eo,wn),e(wn,ivr),e(wn,rbe),e(rbe,dvr),e(wn,cvr),e(wn,tbe),e(tbe,fvr),e(wn,mvr),e(wn,abe),e(abe,gvr),e(wn,hvr),e(Eo,pvr),e(Eo,nbe),e(nbe,W7),e(W7,sbe),e(sbe,_vr),e(W7,uvr),e(W7,qQ),e(qQ,bvr),e(W7,vvr),e(Eo,Fvr),e(Eo,lbe),e(lbe,Tvr),e(Eo,Mvr),g(Py,Eo,null),b(c,M$e,u),b(c,Hc,u),e(Hc,H7),e(H7,ibe),g($y,ibe,null),e(Hc,Evr),e(Hc,dbe),e(dbe,Cvr),b(c,E$e,u),b(c,Lr,u),g(Iy,Lr,null),e(Lr,wvr),e(Lr,Uc),e(Uc,Avr),e(Uc,NQ),e(NQ,yvr),e(Uc,Lvr),e(Uc,jQ),e(jQ,xvr),e(Uc,kvr),e(Lr,Svr),e(Lr,qy),e(qy,Rvr),e(qy,cbe),e(cbe,Bvr),e(qy,Pvr),e(Lr,$vr),e(Lr,Mt),g(Ny,Mt,null),e(Mt,Ivr),e(Mt,fbe),e(fbe,qvr),e(Mt,Nvr),e(Mt,Jc),e(Jc,jvr),e(Jc,mbe),e(mbe,Dvr),e(Jc,Gvr),e(Jc,DQ),e(DQ,Ovr),e(Jc,Vvr),e(Mt,Xvr),e(Mt,gbe),e(gbe,zvr),e(Mt,Qvr),g(jy,Mt,null),e(Lr,Wvr),e(Lr,Co),g(Dy,Co,null),e(Co,Hvr),e(Co,hbe),e(hbe,Uvr),e(Co,Jvr),e(Co,An),e(An,Yvr),e(An,pbe),e(pbe,Kvr),e(An,Zvr),e(An,_be),e(_be,eFr),e(An,oFr),e(An,ube),e(ube,rFr),e(An,tFr),e(Co,aFr),e(Co,Z),e(Z,U7),e(U7,bbe),e(bbe,nFr),e(U7,sFr),e(U7,GQ),e(GQ,lFr),e(U7,iFr),e(Z,dFr),e(Z,J7),e(J7,vbe),e(vbe,cFr),e(J7,fFr),e(J7,OQ),e(OQ,mFr),e(J7,gFr),e(Z,hFr),e(Z,Y7),e(Y7,Fbe),e(Fbe,pFr),e(Y7,_Fr),e(Y7,VQ),e(VQ,uFr),e(Y7,bFr),e(Z,vFr),e(Z,K7),e(K7,Tbe),e(Tbe,FFr),e(K7,TFr),e(K7,XQ),e(XQ,MFr),e(K7,EFr),e(Z,CFr),e(Z,Z7),e(Z7,Mbe),e(Mbe,wFr),e(Z7,AFr),e(Z7,zQ),e(zQ,yFr),e(Z7,LFr),e(Z,xFr),e(Z,eM),e(eM,Ebe),e(Ebe,kFr),e(eM,SFr),e(eM,QQ),e(QQ,RFr),e(eM,BFr),e(Z,PFr),e(Z,oM),e(oM,Cbe),e(Cbe,$Fr),e(oM,IFr),e(oM,WQ),e(WQ,qFr),e(oM,NFr),e(Z,jFr),e(Z,rM),e(rM,wbe),e(wbe,DFr),e(rM,GFr),e(rM,HQ),e(HQ,OFr),e(rM,VFr),e(Z,XFr),e(Z,tM),e(tM,Abe),e(Abe,zFr),e(tM,QFr),e(tM,UQ),e(UQ,WFr),e(tM,HFr),e(Z,UFr),e(Z,aM),e(aM,ybe),e(ybe,JFr),e(aM,YFr),e(aM,JQ),e(JQ,KFr),e(aM,ZFr),e(Z,eTr),e(Z,nM),e(nM,Lbe),e(Lbe,oTr),e(nM,rTr),e(nM,YQ),e(YQ,tTr),e(nM,aTr),e(Z,nTr),e(Z,sM),e(sM,xbe),e(xbe,sTr),e(sM,lTr),e(sM,KQ),e(KQ,iTr),e(sM,dTr),e(Z,cTr),e(Z,lM),e(lM,kbe),e(kbe,fTr),e(lM,mTr),e(lM,ZQ),e(ZQ,gTr),e(lM,hTr),e(Z,pTr),e(Z,iM),e(iM,Sbe),e(Sbe,_Tr),e(iM,uTr),e(iM,eW),e(eW,bTr),e(iM,vTr),e(Z,FTr),e(Z,dM),e(dM,Rbe),e(Rbe,TTr),e(dM,MTr),e(dM,oW),e(oW,ETr),e(dM,CTr),e(Z,wTr),e(Z,cM),e(cM,Bbe),e(Bbe,ATr),e(cM,yTr),e(cM,rW),e(rW,LTr),e(cM,xTr),e(Z,kTr),e(Z,fM),e(fM,Pbe),e(Pbe,STr),e(fM,RTr),e(fM,tW),e(tW,BTr),e(fM,PTr),e(Z,$Tr),e(Z,mM),e(mM,$be),e($be,ITr),e(mM,qTr),e(mM,aW),e(aW,NTr),e(mM,jTr),e(Z,DTr),e(Z,gM),e(gM,Ibe),e(Ibe,GTr),e(gM,OTr),e(gM,nW),e(nW,VTr),e(gM,XTr),e(Z,zTr),e(Z,hM),e(hM,qbe),e(qbe,QTr),e(hM,WTr),e(hM,sW),e(sW,HTr),e(hM,UTr),e(Co,JTr),e(Co,Nbe),e(Nbe,YTr),e(Co,KTr),g(Gy,Co,null),b(c,C$e,u),b(c,Yc,u),e(Yc,pM),e(pM,jbe),g(Oy,jbe,null),e(Yc,ZTr),e(Yc,Dbe),e(Dbe,e7r),b(c,w$e,u),b(c,xr,u),g(Vy,xr,null),e(xr,o7r),e(xr,Kc),e(Kc,r7r),e(Kc,lW),e(lW,t7r),e(Kc,a7r),e(Kc,iW),e(iW,n7r),e(Kc,s7r),e(xr,l7r),e(xr,Xy),e(Xy,i7r),e(Xy,Gbe),e(Gbe,d7r),e(Xy,c7r),e(xr,f7r),e(xr,Et),g(zy,Et,null),e(Et,m7r),e(Et,Obe),e(Obe,g7r),e(Et,h7r),e(Et,Zc),e(Zc,p7r),e(Zc,Vbe),e(Vbe,_7r),e(Zc,u7r),e(Zc,dW),e(dW,b7r),e(Zc,v7r),e(Et,F7r),e(Et,Xbe),e(Xbe,T7r),e(Et,M7r),g(Qy,Et,null),e(xr,E7r),e(xr,wo),g(Wy,wo,null),e(wo,C7r),e(wo,zbe),e(zbe,w7r),e(wo,A7r),e(wo,yn),e(yn,y7r),e(yn,Qbe),e(Qbe,L7r),e(yn,x7r),e(yn,Wbe),e(Wbe,k7r),e(yn,S7r),e(yn,Hbe),e(Hbe,R7r),e(yn,B7r),e(wo,P7r),e(wo,ee),e(ee,_M),e(_M,Ube),e(Ube,$7r),e(_M,I7r),e(_M,cW),e(cW,q7r),e(_M,N7r),e(ee,j7r),e(ee,uM),e(uM,Jbe),e(Jbe,D7r),e(uM,G7r),e(uM,fW),e(fW,O7r),e(uM,V7r),e(ee,X7r),e(ee,bM),e(bM,Ybe),e(Ybe,z7r),e(bM,Q7r),e(bM,mW),e(mW,W7r),e(bM,H7r),e(ee,U7r),e(ee,vM),e(vM,Kbe),e(Kbe,J7r),e(vM,Y7r),e(vM,gW),e(gW,K7r),e(vM,Z7r),e(ee,eMr),e(ee,FM),e(FM,Zbe),e(Zbe,oMr),e(FM,rMr),e(FM,hW),e(hW,tMr),e(FM,aMr),e(ee,nMr),e(ee,TM),e(TM,e2e),e(e2e,sMr),e(TM,lMr),e(TM,pW),e(pW,iMr),e(TM,dMr),e(ee,cMr),e(ee,MM),e(MM,o2e),e(o2e,fMr),e(MM,mMr),e(MM,_W),e(_W,gMr),e(MM,hMr),e(ee,pMr),e(ee,EM),e(EM,r2e),e(r2e,_Mr),e(EM,uMr),e(EM,uW),e(uW,bMr),e(EM,vMr),e(ee,FMr),e(ee,CM),e(CM,t2e),e(t2e,TMr),e(CM,MMr),e(CM,bW),e(bW,EMr),e(CM,CMr),e(ee,wMr),e(ee,wM),e(wM,a2e),e(a2e,AMr),e(wM,yMr),e(wM,vW),e(vW,LMr),e(wM,xMr),e(ee,kMr),e(ee,AM),e(AM,n2e),e(n2e,SMr),e(AM,RMr),e(AM,FW),e(FW,BMr),e(AM,PMr),e(ee,$Mr),e(ee,yM),e(yM,s2e),e(s2e,IMr),e(yM,qMr),e(yM,TW),e(TW,NMr),e(yM,jMr),e(ee,DMr),e(ee,LM),e(LM,l2e),e(l2e,GMr),e(LM,OMr),e(LM,MW),e(MW,VMr),e(LM,XMr),e(ee,zMr),e(ee,xM),e(xM,i2e),e(i2e,QMr),e(xM,WMr),e(xM,EW),e(EW,HMr),e(xM,UMr),e(ee,JMr),e(ee,kM),e(kM,d2e),e(d2e,YMr),e(kM,KMr),e(kM,CW),e(CW,ZMr),e(kM,eEr),e(ee,oEr),e(ee,SM),e(SM,c2e),e(c2e,rEr),e(SM,tEr),e(SM,wW),e(wW,aEr),e(SM,nEr),e(ee,sEr),e(ee,RM),e(RM,f2e),e(f2e,lEr),e(RM,iEr),e(RM,AW),e(AW,dEr),e(RM,cEr),e(ee,fEr),e(ee,BM),e(BM,m2e),e(m2e,mEr),e(BM,gEr),e(BM,yW),e(yW,hEr),e(BM,pEr),e(ee,_Er),e(ee,PM),e(PM,g2e),e(g2e,uEr),e(PM,bEr),e(PM,LW),e(LW,vEr),e(PM,FEr),e(ee,TEr),e(ee,$M),e($M,h2e),e(h2e,MEr),e($M,EEr),e($M,xW),e(xW,CEr),e($M,wEr),e(wo,AEr),e(wo,p2e),e(p2e,yEr),e(wo,LEr),g(Hy,wo,null),b(c,A$e,u),b(c,ef,u),e(ef,IM),e(IM,_2e),g(Uy,_2e,null),e(ef,xEr),e(ef,u2e),e(u2e,kEr),b(c,y$e,u),b(c,kr,u),g(Jy,kr,null),e(kr,SEr),e(kr,of),e(of,REr),e(of,kW),e(kW,BEr),e(of,PEr),e(of,SW),e(SW,$Er),e(of,IEr),e(kr,qEr),e(kr,Yy),e(Yy,NEr),e(Yy,b2e),e(b2e,jEr),e(Yy,DEr),e(kr,GEr),e(kr,Ct),g(Ky,Ct,null),e(Ct,OEr),e(Ct,v2e),e(v2e,VEr),e(Ct,XEr),e(Ct,rf),e(rf,zEr),e(rf,F2e),e(F2e,QEr),e(rf,WEr),e(rf,RW),e(RW,HEr),e(rf,UEr),e(Ct,JEr),e(Ct,T2e),e(T2e,YEr),e(Ct,KEr),g(Zy,Ct,null),e(kr,ZEr),e(kr,Ao),g(e8,Ao,null),e(Ao,e3r),e(Ao,M2e),e(M2e,o3r),e(Ao,r3r),e(Ao,Ln),e(Ln,t3r),e(Ln,E2e),e(E2e,a3r),e(Ln,n3r),e(Ln,C2e),e(C2e,s3r),e(Ln,l3r),e(Ln,w2e),e(w2e,i3r),e(Ln,d3r),e(Ao,c3r),e(Ao,A2e),e(A2e,qM),e(qM,y2e),e(y2e,f3r),e(qM,m3r),e(qM,BW),e(BW,g3r),e(qM,h3r),e(Ao,p3r),e(Ao,L2e),e(L2e,_3r),e(Ao,u3r),g(o8,Ao,null),b(c,L$e,u),b(c,tf,u),e(tf,NM),e(NM,x2e),g(r8,x2e,null),e(tf,b3r),e(tf,k2e),e(k2e,v3r),b(c,x$e,u),b(c,Sr,u),g(t8,Sr,null),e(Sr,F3r),e(Sr,af),e(af,T3r),e(af,PW),e(PW,M3r),e(af,E3r),e(af,$W),e($W,C3r),e(af,w3r),e(Sr,A3r),e(Sr,a8),e(a8,y3r),e(a8,S2e),e(S2e,L3r),e(a8,x3r),e(Sr,k3r),e(Sr,wt),g(n8,wt,null),e(wt,S3r),e(wt,R2e),e(R2e,R3r),e(wt,B3r),e(wt,nf),e(nf,P3r),e(nf,B2e),e(B2e,$3r),e(nf,I3r),e(nf,IW),e(IW,q3r),e(nf,N3r),e(wt,j3r),e(wt,P2e),e(P2e,D3r),e(wt,G3r),g(s8,wt,null),e(Sr,O3r),e(Sr,yo),g(l8,yo,null),e(yo,V3r),e(yo,$2e),e($2e,X3r),e(yo,z3r),e(yo,xn),e(xn,Q3r),e(xn,I2e),e(I2e,W3r),e(xn,H3r),e(xn,q2e),e(q2e,U3r),e(xn,J3r),e(xn,N2e),e(N2e,Y3r),e(xn,K3r),e(yo,Z3r),e(yo,j2e),e(j2e,jM),e(jM,D2e),e(D2e,eCr),e(jM,oCr),e(jM,qW),e(qW,rCr),e(jM,tCr),e(yo,aCr),e(yo,G2e),e(G2e,nCr),e(yo,sCr),g(i8,yo,null),b(c,k$e,u),b(c,sf,u),e(sf,DM),e(DM,O2e),g(d8,O2e,null),e(sf,lCr),e(sf,V2e),e(V2e,iCr),b(c,S$e,u),b(c,Rr,u),g(c8,Rr,null),e(Rr,dCr),e(Rr,lf),e(lf,cCr),e(lf,NW),e(NW,fCr),e(lf,mCr),e(lf,jW),e(jW,gCr),e(lf,hCr),e(Rr,pCr),e(Rr,f8),e(f8,_Cr),e(f8,X2e),e(X2e,uCr),e(f8,bCr),e(Rr,vCr),e(Rr,At),g(m8,At,null),e(At,FCr),e(At,z2e),e(z2e,TCr),e(At,MCr),e(At,df),e(df,ECr),e(df,Q2e),e(Q2e,CCr),e(df,wCr),e(df,DW),e(DW,ACr),e(df,yCr),e(At,LCr),e(At,W2e),e(W2e,xCr),e(At,kCr),g(g8,At,null),e(Rr,SCr),e(Rr,Lo),g(h8,Lo,null),e(Lo,RCr),e(Lo,H2e),e(H2e,BCr),e(Lo,PCr),e(Lo,kn),e(kn,$Cr),e(kn,U2e),e(U2e,ICr),e(kn,qCr),e(kn,J2e),e(J2e,NCr),e(kn,jCr),e(kn,Y2e),e(Y2e,DCr),e(kn,GCr),e(Lo,OCr),e(Lo,z),e(z,GM),e(GM,K2e),e(K2e,VCr),e(GM,XCr),e(GM,GW),e(GW,zCr),e(GM,QCr),e(z,WCr),e(z,OM),e(OM,Z2e),e(Z2e,HCr),e(OM,UCr),e(OM,OW),e(OW,JCr),e(OM,YCr),e(z,KCr),e(z,VM),e(VM,eve),e(eve,ZCr),e(VM,e6r),e(VM,VW),e(VW,o6r),e(VM,r6r),e(z,t6r),e(z,XM),e(XM,ove),e(ove,a6r),e(XM,n6r),e(XM,XW),e(XW,s6r),e(XM,l6r),e(z,i6r),e(z,zM),e(zM,rve),e(rve,d6r),e(zM,c6r),e(zM,zW),e(zW,f6r),e(zM,m6r),e(z,g6r),e(z,QM),e(QM,tve),e(tve,h6r),e(QM,p6r),e(QM,QW),e(QW,_6r),e(QM,u6r),e(z,b6r),e(z,WM),e(WM,ave),e(ave,v6r),e(WM,F6r),e(WM,WW),e(WW,T6r),e(WM,M6r),e(z,E6r),e(z,HM),e(HM,nve),e(nve,C6r),e(HM,w6r),e(HM,HW),e(HW,A6r),e(HM,y6r),e(z,L6r),e(z,UM),e(UM,sve),e(sve,x6r),e(UM,k6r),e(UM,UW),e(UW,S6r),e(UM,R6r),e(z,B6r),e(z,JM),e(JM,lve),e(lve,P6r),e(JM,$6r),e(JM,JW),e(JW,I6r),e(JM,q6r),e(z,N6r),e(z,YM),e(YM,ive),e(ive,j6r),e(YM,D6r),e(YM,YW),e(YW,G6r),e(YM,O6r),e(z,V6r),e(z,KM),e(KM,dve),e(dve,X6r),e(KM,z6r),e(KM,KW),e(KW,Q6r),e(KM,W6r),e(z,H6r),e(z,ZM),e(ZM,cve),e(cve,U6r),e(ZM,J6r),e(ZM,ZW),e(ZW,Y6r),e(ZM,K6r),e(z,Z6r),e(z,eE),e(eE,fve),e(fve,ewr),e(eE,owr),e(eE,eH),e(eH,rwr),e(eE,twr),e(z,awr),e(z,oE),e(oE,mve),e(mve,nwr),e(oE,swr),e(oE,oH),e(oH,lwr),e(oE,iwr),e(z,dwr),e(z,rE),e(rE,gve),e(gve,cwr),e(rE,fwr),e(rE,rH),e(rH,mwr),e(rE,gwr),e(z,hwr),e(z,tE),e(tE,hve),e(hve,pwr),e(tE,_wr),e(tE,tH),e(tH,uwr),e(tE,bwr),e(z,vwr),e(z,aE),e(aE,pve),e(pve,Fwr),e(aE,Twr),e(aE,aH),e(aH,Mwr),e(aE,Ewr),e(z,Cwr),e(z,nE),e(nE,_ve),e(_ve,wwr),e(nE,Awr),e(nE,nH),e(nH,ywr),e(nE,Lwr),e(z,xwr),e(z,sE),e(sE,uve),e(uve,kwr),e(sE,Swr),e(sE,sH),e(sH,Rwr),e(sE,Bwr),e(z,Pwr),e(z,lE),e(lE,bve),e(bve,$wr),e(lE,Iwr),e(lE,lH),e(lH,qwr),e(lE,Nwr),e(z,jwr),e(z,iE),e(iE,vve),e(vve,Dwr),e(iE,Gwr),e(iE,iH),e(iH,Owr),e(iE,Vwr),e(z,Xwr),e(z,dE),e(dE,Fve),e(Fve,zwr),e(dE,Qwr),e(dE,dH),e(dH,Wwr),e(dE,Hwr),e(z,Uwr),e(z,cE),e(cE,Tve),e(Tve,Jwr),e(cE,Ywr),e(cE,cH),e(cH,Kwr),e(cE,Zwr),e(z,eAr),e(z,fE),e(fE,Mve),e(Mve,oAr),e(fE,rAr),e(fE,fH),e(fH,tAr),e(fE,aAr),e(Lo,nAr),e(Lo,Eve),e(Eve,sAr),e(Lo,lAr),g(p8,Lo,null),b(c,R$e,u),b(c,cf,u),e(cf,mE),e(mE,Cve),g(_8,Cve,null),e(cf,iAr),e(cf,wve),e(wve,dAr),b(c,B$e,u),b(c,Br,u),g(u8,Br,null),e(Br,cAr),e(Br,ff),e(ff,fAr),e(ff,mH),e(mH,mAr),e(ff,gAr),e(ff,gH),e(gH,hAr),e(ff,pAr),e(Br,_Ar),e(Br,b8),e(b8,uAr),e(b8,Ave),e(Ave,bAr),e(b8,vAr),e(Br,FAr),e(Br,yt),g(v8,yt,null),e(yt,TAr),e(yt,yve),e(yve,MAr),e(yt,EAr),e(yt,mf),e(mf,CAr),e(mf,Lve),e(Lve,wAr),e(mf,AAr),e(mf,hH),e(hH,yAr),e(mf,LAr),e(yt,xAr),e(yt,xve),e(xve,kAr),e(yt,SAr),g(F8,yt,null),e(Br,RAr),e(Br,xo),g(T8,xo,null),e(xo,BAr),e(xo,kve),e(kve,PAr),e(xo,$Ar),e(xo,Sn),e(Sn,IAr),e(Sn,Sve),e(Sve,qAr),e(Sn,NAr),e(Sn,Rve),e(Rve,jAr),e(Sn,DAr),e(Sn,Bve),e(Bve,GAr),e(Sn,OAr),e(xo,VAr),e(xo,ca),e(ca,gE),e(gE,Pve),e(Pve,XAr),e(gE,zAr),e(gE,pH),e(pH,QAr),e(gE,WAr),e(ca,HAr),e(ca,hE),e(hE,$ve),e($ve,UAr),e(hE,JAr),e(hE,_H),e(_H,YAr),e(hE,KAr),e(ca,ZAr),e(ca,pE),e(pE,Ive),e(Ive,e0r),e(pE,o0r),e(pE,uH),e(uH,r0r),e(pE,t0r),e(ca,a0r),e(ca,_E),e(_E,qve),e(qve,n0r),e(_E,s0r),e(_E,bH),e(bH,l0r),e(_E,i0r),e(ca,d0r),e(ca,uE),e(uE,Nve),e(Nve,c0r),e(uE,f0r),e(uE,vH),e(vH,m0r),e(uE,g0r),e(xo,h0r),e(xo,jve),e(jve,p0r),e(xo,_0r),g(M8,xo,null),b(c,P$e,u),b(c,gf,u),e(gf,bE),e(bE,Dve),g(E8,Dve,null),e(gf,u0r),e(gf,Gve),e(Gve,b0r),b(c,$$e,u),b(c,Pr,u),g(C8,Pr,null),e(Pr,v0r),e(Pr,hf),e(hf,F0r),e(hf,FH),e(FH,T0r),e(hf,M0r),e(hf,TH),e(TH,E0r),e(hf,C0r),e(Pr,w0r),e(Pr,w8),e(w8,A0r),e(w8,Ove),e(Ove,y0r),e(w8,L0r),e(Pr,x0r),e(Pr,Lt),g(A8,Lt,null),e(Lt,k0r),e(Lt,Vve),e(Vve,S0r),e(Lt,R0r),e(Lt,pf),e(pf,B0r),e(pf,Xve),e(Xve,P0r),e(pf,$0r),e(pf,MH),e(MH,I0r),e(pf,q0r),e(Lt,N0r),e(Lt,zve),e(zve,j0r),e(Lt,D0r),g(y8,Lt,null),e(Pr,G0r),e(Pr,ko),g(L8,ko,null),e(ko,O0r),e(ko,Qve),e(Qve,V0r),e(ko,X0r),e(ko,Rn),e(Rn,z0r),e(Rn,Wve),e(Wve,Q0r),e(Rn,W0r),e(Rn,Hve),e(Hve,H0r),e(Rn,U0r),e(Rn,Uve),e(Uve,J0r),e(Rn,Y0r),e(ko,K0r),e(ko,he),e(he,vE),e(vE,Jve),e(Jve,Z0r),e(vE,eyr),e(vE,EH),e(EH,oyr),e(vE,ryr),e(he,tyr),e(he,FE),e(FE,Yve),e(Yve,ayr),e(FE,nyr),e(FE,CH),e(CH,syr),e(FE,lyr),e(he,iyr),e(he,TE),e(TE,Kve),e(Kve,dyr),e(TE,cyr),e(TE,wH),e(wH,fyr),e(TE,myr),e(he,gyr),e(he,ME),e(ME,Zve),e(Zve,hyr),e(ME,pyr),e(ME,AH),e(AH,_yr),e(ME,uyr),e(he,byr),e(he,EE),e(EE,eFe),e(eFe,vyr),e(EE,Fyr),e(EE,yH),e(yH,Tyr),e(EE,Myr),e(he,Eyr),e(he,CE),e(CE,oFe),e(oFe,Cyr),e(CE,wyr),e(CE,LH),e(LH,Ayr),e(CE,yyr),e(he,Lyr),e(he,wE),e(wE,rFe),e(rFe,xyr),e(wE,kyr),e(wE,xH),e(xH,Syr),e(wE,Ryr),e(he,Byr),e(he,AE),e(AE,tFe),e(tFe,Pyr),e(AE,$yr),e(AE,kH),e(kH,Iyr),e(AE,qyr),e(he,Nyr),e(he,yE),e(yE,aFe),e(aFe,jyr),e(yE,Dyr),e(yE,SH),e(SH,Gyr),e(yE,Oyr),e(he,Vyr),e(he,LE),e(LE,nFe),e(nFe,Xyr),e(LE,zyr),e(LE,RH),e(RH,Qyr),e(LE,Wyr),e(he,Hyr),e(he,xE),e(xE,sFe),e(sFe,Uyr),e(xE,Jyr),e(xE,BH),e(BH,Yyr),e(xE,Kyr),e(he,Zyr),e(he,kE),e(kE,lFe),e(lFe,e8r),e(kE,o8r),e(kE,PH),e(PH,r8r),e(kE,t8r),e(ko,a8r),e(ko,iFe),e(iFe,n8r),e(ko,s8r),g(x8,ko,null),b(c,I$e,u),b(c,_f,u),e(_f,SE),e(SE,dFe),g(k8,dFe,null),e(_f,l8r),e(_f,cFe),e(cFe,i8r),b(c,q$e,u),b(c,$r,u),g(S8,$r,null),e($r,d8r),e($r,uf),e(uf,c8r),e(uf,$H),e($H,f8r),e(uf,m8r),e(uf,IH),e(IH,g8r),e(uf,h8r),e($r,p8r),e($r,R8),e(R8,_8r),e(R8,fFe),e(fFe,u8r),e(R8,b8r),e($r,v8r),e($r,xt),g(B8,xt,null),e(xt,F8r),e(xt,mFe),e(mFe,T8r),e(xt,M8r),e(xt,bf),e(bf,E8r),e(bf,gFe),e(gFe,C8r),e(bf,w8r),e(bf,qH),e(qH,A8r),e(bf,y8r),e(xt,L8r),e(xt,hFe),e(hFe,x8r),e(xt,k8r),g(P8,xt,null),e($r,S8r),e($r,So),g($8,So,null),e(So,R8r),e(So,pFe),e(pFe,B8r),e(So,P8r),e(So,Bn),e(Bn,$8r),e(Bn,_Fe),e(_Fe,I8r),e(Bn,q8r),e(Bn,uFe),e(uFe,N8r),e(Bn,j8r),e(Bn,bFe),e(bFe,D8r),e(Bn,G8r),e(So,O8r),e(So,Te),e(Te,RE),e(RE,vFe),e(vFe,V8r),e(RE,X8r),e(RE,NH),e(NH,z8r),e(RE,Q8r),e(Te,W8r),e(Te,BE),e(BE,FFe),e(FFe,H8r),e(BE,U8r),e(BE,jH),e(jH,J8r),e(BE,Y8r),e(Te,K8r),e(Te,PE),e(PE,TFe),e(TFe,Z8r),e(PE,eLr),e(PE,DH),e(DH,oLr),e(PE,rLr),e(Te,tLr),e(Te,$E),e($E,MFe),e(MFe,aLr),e($E,nLr),e($E,GH),e(GH,sLr),e($E,lLr),e(Te,iLr),e(Te,IE),e(IE,EFe),e(EFe,dLr),e(IE,cLr),e(IE,OH),e(OH,fLr),e(IE,mLr),e(Te,gLr),e(Te,qE),e(qE,CFe),e(CFe,hLr),e(qE,pLr),e(qE,VH),e(VH,_Lr),e(qE,uLr),e(Te,bLr),e(Te,NE),e(NE,wFe),e(wFe,vLr),e(NE,FLr),e(NE,XH),e(XH,TLr),e(NE,MLr),e(Te,ELr),e(Te,jE),e(jE,AFe),e(AFe,CLr),e(jE,wLr),e(jE,zH),e(zH,ALr),e(jE,yLr),e(Te,LLr),e(Te,DE),e(DE,yFe),e(yFe,xLr),e(DE,kLr),e(DE,QH),e(QH,SLr),e(DE,RLr),e(Te,BLr),e(Te,GE),e(GE,LFe),e(LFe,PLr),e(GE,$Lr),e(GE,WH),e(WH,ILr),e(GE,qLr),e(So,NLr),e(So,xFe),e(xFe,jLr),e(So,DLr),g(I8,So,null),b(c,N$e,u),b(c,vf,u),e(vf,OE),e(OE,kFe),g(q8,kFe,null),e(vf,GLr),e(vf,SFe),e(SFe,OLr),b(c,j$e,u),b(c,Ir,u),g(N8,Ir,null),e(Ir,VLr),e(Ir,Ff),e(Ff,XLr),e(Ff,HH),e(HH,zLr),e(Ff,QLr),e(Ff,UH),e(UH,WLr),e(Ff,HLr),e(Ir,ULr),e(Ir,j8),e(j8,JLr),e(j8,RFe),e(RFe,YLr),e(j8,KLr),e(Ir,ZLr),e(Ir,kt),g(D8,kt,null),e(kt,e9r),e(kt,BFe),e(BFe,o9r),e(kt,r9r),e(kt,Tf),e(Tf,t9r),e(Tf,PFe),e(PFe,a9r),e(Tf,n9r),e(Tf,JH),e(JH,s9r),e(Tf,l9r),e(kt,i9r),e(kt,$Fe),e($Fe,d9r),e(kt,c9r),g(G8,kt,null),e(Ir,f9r),e(Ir,Ro),g(O8,Ro,null),e(Ro,m9r),e(Ro,IFe),e(IFe,g9r),e(Ro,h9r),e(Ro,Pn),e(Pn,p9r),e(Pn,qFe),e(qFe,_9r),e(Pn,u9r),e(Pn,NFe),e(NFe,b9r),e(Pn,v9r),e(Pn,jFe),e(jFe,F9r),e(Pn,T9r),e(Ro,M9r),e(Ro,we),e(we,VE),e(VE,DFe),e(DFe,E9r),e(VE,C9r),e(VE,YH),e(YH,w9r),e(VE,A9r),e(we,y9r),e(we,XE),e(XE,GFe),e(GFe,L9r),e(XE,x9r),e(XE,KH),e(KH,k9r),e(XE,S9r),e(we,R9r),e(we,zE),e(zE,OFe),e(OFe,B9r),e(zE,P9r),e(zE,ZH),e(ZH,$9r),e(zE,I9r),e(we,q9r),e(we,QE),e(QE,VFe),e(VFe,N9r),e(QE,j9r),e(QE,eU),e(eU,D9r),e(QE,G9r),e(we,O9r),e(we,WE),e(WE,XFe),e(XFe,V9r),e(WE,X9r),e(WE,oU),e(oU,z9r),e(WE,Q9r),e(we,W9r),e(we,HE),e(HE,zFe),e(zFe,H9r),e(HE,U9r),e(HE,rU),e(rU,J9r),e(HE,Y9r),e(we,K9r),e(we,UE),e(UE,QFe),e(QFe,Z9r),e(UE,exr),e(UE,tU),e(tU,oxr),e(UE,rxr),e(we,txr),e(we,JE),e(JE,WFe),e(WFe,axr),e(JE,nxr),e(JE,aU),e(aU,sxr),e(JE,lxr),e(we,ixr),e(we,YE),e(YE,HFe),e(HFe,dxr),e(YE,cxr),e(YE,nU),e(nU,fxr),e(YE,mxr),e(Ro,gxr),e(Ro,UFe),e(UFe,hxr),e(Ro,pxr),g(V8,Ro,null),b(c,D$e,u),b(c,Mf,u),e(Mf,KE),e(KE,JFe),g(X8,JFe,null),e(Mf,_xr),e(Mf,YFe),e(YFe,uxr),b(c,G$e,u),b(c,qr,u),g(z8,qr,null),e(qr,bxr),e(qr,Ef),e(Ef,vxr),e(Ef,sU),e(sU,Fxr),e(Ef,Txr),e(Ef,lU),e(lU,Mxr),e(Ef,Exr),e(qr,Cxr),e(qr,Q8),e(Q8,wxr),e(Q8,KFe),e(KFe,Axr),e(Q8,yxr),e(qr,Lxr),e(qr,St),g(W8,St,null),e(St,xxr),e(St,ZFe),e(ZFe,kxr),e(St,Sxr),e(St,Cf),e(Cf,Rxr),e(Cf,eTe),e(eTe,Bxr),e(Cf,Pxr),e(Cf,iU),e(iU,$xr),e(Cf,Ixr),e(St,qxr),e(St,oTe),e(oTe,Nxr),e(St,jxr),g(H8,St,null),e(qr,Dxr),e(qr,Bo),g(U8,Bo,null),e(Bo,Gxr),e(Bo,rTe),e(rTe,Oxr),e(Bo,Vxr),e(Bo,$n),e($n,Xxr),e($n,tTe),e(tTe,zxr),e($n,Qxr),e($n,aTe),e(aTe,Wxr),e($n,Hxr),e($n,nTe),e(nTe,Uxr),e($n,Jxr),e(Bo,Yxr),e(Bo,Me),e(Me,ZE),e(ZE,sTe),e(sTe,Kxr),e(ZE,Zxr),e(ZE,dU),e(dU,ekr),e(ZE,okr),e(Me,rkr),e(Me,e3),e(e3,lTe),e(lTe,tkr),e(e3,akr),e(e3,cU),e(cU,nkr),e(e3,skr),e(Me,lkr),e(Me,o3),e(o3,iTe),e(iTe,ikr),e(o3,dkr),e(o3,fU),e(fU,ckr),e(o3,fkr),e(Me,mkr),e(Me,r3),e(r3,dTe),e(dTe,gkr),e(r3,hkr),e(r3,mU),e(mU,pkr),e(r3,_kr),e(Me,ukr),e(Me,t3),e(t3,cTe),e(cTe,bkr),e(t3,vkr),e(t3,gU),e(gU,Fkr),e(t3,Tkr),e(Me,Mkr),e(Me,a3),e(a3,fTe),e(fTe,Ekr),e(a3,Ckr),e(a3,hU),e(hU,wkr),e(a3,Akr),e(Me,ykr),e(Me,n3),e(n3,mTe),e(mTe,Lkr),e(n3,xkr),e(n3,pU),e(pU,kkr),e(n3,Skr),e(Me,Rkr),e(Me,s3),e(s3,gTe),e(gTe,Bkr),e(s3,Pkr),e(s3,_U),e(_U,$kr),e(s3,Ikr),e(Me,qkr),e(Me,l3),e(l3,hTe),e(hTe,Nkr),e(l3,jkr),e(l3,uU),e(uU,Dkr),e(l3,Gkr),e(Me,Okr),e(Me,i3),e(i3,pTe),e(pTe,Vkr),e(i3,Xkr),e(i3,bU),e(bU,zkr),e(i3,Qkr),e(Bo,Wkr),e(Bo,_Te),e(_Te,Hkr),e(Bo,Ukr),g(J8,Bo,null),b(c,O$e,u),b(c,wf,u),e(wf,d3),e(d3,uTe),g(Y8,uTe,null),e(wf,Jkr),e(wf,bTe),e(bTe,Ykr),b(c,V$e,u),b(c,Nr,u),g(K8,Nr,null),e(Nr,Kkr),e(Nr,Af),e(Af,Zkr),e(Af,vU),e(vU,eSr),e(Af,oSr),e(Af,FU),e(FU,rSr),e(Af,tSr),e(Nr,aSr),e(Nr,Z8),e(Z8,nSr),e(Z8,vTe),e(vTe,sSr),e(Z8,lSr),e(Nr,iSr),e(Nr,Rt),g(eL,Rt,null),e(Rt,dSr),e(Rt,FTe),e(FTe,cSr),e(Rt,fSr),e(Rt,yf),e(yf,mSr),e(yf,TTe),e(TTe,gSr),e(yf,hSr),e(yf,TU),e(TU,pSr),e(yf,_Sr),e(Rt,uSr),e(Rt,MTe),e(MTe,bSr),e(Rt,vSr),g(oL,Rt,null),e(Nr,FSr),e(Nr,Po),g(rL,Po,null),e(Po,TSr),e(Po,ETe),e(ETe,MSr),e(Po,ESr),e(Po,In),e(In,CSr),e(In,CTe),e(CTe,wSr),e(In,ASr),e(In,wTe),e(wTe,ySr),e(In,LSr),e(In,ATe),e(ATe,xSr),e(In,kSr),e(Po,SSr),e(Po,Ee),e(Ee,c3),e(c3,yTe),e(yTe,RSr),e(c3,BSr),e(c3,MU),e(MU,PSr),e(c3,$Sr),e(Ee,ISr),e(Ee,f3),e(f3,LTe),e(LTe,qSr),e(f3,NSr),e(f3,EU),e(EU,jSr),e(f3,DSr),e(Ee,GSr),e(Ee,m3),e(m3,xTe),e(xTe,OSr),e(m3,VSr),e(m3,CU),e(CU,XSr),e(m3,zSr),e(Ee,QSr),e(Ee,g3),e(g3,kTe),e(kTe,WSr),e(g3,HSr),e(g3,wU),e(wU,USr),e(g3,JSr),e(Ee,YSr),e(Ee,h3),e(h3,STe),e(STe,KSr),e(h3,ZSr),e(h3,AU),e(AU,eRr),e(h3,oRr),e(Ee,rRr),e(Ee,p3),e(p3,RTe),e(RTe,tRr),e(p3,aRr),e(p3,yU),e(yU,nRr),e(p3,sRr),e(Ee,lRr),e(Ee,_3),e(_3,BTe),e(BTe,iRr),e(_3,dRr),e(_3,LU),e(LU,cRr),e(_3,fRr),e(Ee,mRr),e(Ee,u3),e(u3,PTe),e(PTe,gRr),e(u3,hRr),e(u3,xU),e(xU,pRr),e(u3,_Rr),e(Ee,uRr),e(Ee,b3),e(b3,$Te),e($Te,bRr),e(b3,vRr),e(b3,kU),e(kU,FRr),e(b3,TRr),e(Ee,MRr),e(Ee,v3),e(v3,ITe),e(ITe,ERr),e(v3,CRr),e(v3,SU),e(SU,wRr),e(v3,ARr),e(Po,yRr),e(Po,qTe),e(qTe,LRr),e(Po,xRr),g(tL,Po,null),b(c,X$e,u),b(c,Lf,u),e(Lf,F3),e(F3,NTe),g(aL,NTe,null),e(Lf,kRr),e(Lf,jTe),e(jTe,SRr),b(c,z$e,u),b(c,jr,u),g(nL,jr,null),e(jr,RRr),e(jr,xf),e(xf,BRr),e(xf,RU),e(RU,PRr),e(xf,$Rr),e(xf,BU),e(BU,IRr),e(xf,qRr),e(jr,NRr),e(jr,sL),e(sL,jRr),e(sL,DTe),e(DTe,DRr),e(sL,GRr),e(jr,ORr),e(jr,Bt),g(lL,Bt,null),e(Bt,VRr),e(Bt,GTe),e(GTe,XRr),e(Bt,zRr),e(Bt,kf),e(kf,QRr),e(kf,OTe),e(OTe,WRr),e(kf,HRr),e(kf,PU),e(PU,URr),e(kf,JRr),e(Bt,YRr),e(Bt,VTe),e(VTe,KRr),e(Bt,ZRr),g(iL,Bt,null),e(jr,eBr),e(jr,$o),g(dL,$o,null),e($o,oBr),e($o,XTe),e(XTe,rBr),e($o,tBr),e($o,qn),e(qn,aBr),e(qn,zTe),e(zTe,nBr),e(qn,sBr),e(qn,QTe),e(QTe,lBr),e(qn,iBr),e(qn,WTe),e(WTe,dBr),e(qn,cBr),e($o,fBr),e($o,Pe),e(Pe,T3),e(T3,HTe),e(HTe,mBr),e(T3,gBr),e(T3,$U),e($U,hBr),e(T3,pBr),e(Pe,_Br),e(Pe,M3),e(M3,UTe),e(UTe,uBr),e(M3,bBr),e(M3,IU),e(IU,vBr),e(M3,FBr),e(Pe,TBr),e(Pe,E3),e(E3,JTe),e(JTe,MBr),e(E3,EBr),e(E3,qU),e(qU,CBr),e(E3,wBr),e(Pe,ABr),e(Pe,C3),e(C3,YTe),e(YTe,yBr),e(C3,LBr),e(C3,NU),e(NU,xBr),e(C3,kBr),e(Pe,SBr),e(Pe,w3),e(w3,KTe),e(KTe,RBr),e(w3,BBr),e(w3,jU),e(jU,PBr),e(w3,$Br),e(Pe,IBr),e(Pe,A3),e(A3,ZTe),e(ZTe,qBr),e(A3,NBr),e(A3,DU),e(DU,jBr),e(A3,DBr),e(Pe,GBr),e(Pe,y3),e(y3,e7e),e(e7e,OBr),e(y3,VBr),e(y3,GU),e(GU,XBr),e(y3,zBr),e(Pe,QBr),e(Pe,L3),e(L3,o7e),e(o7e,WBr),e(L3,HBr),e(L3,OU),e(OU,UBr),e(L3,JBr),e($o,YBr),e($o,r7e),e(r7e,KBr),e($o,ZBr),g(cL,$o,null),b(c,Q$e,u),b(c,Sf,u),e(Sf,x3),e(x3,t7e),g(fL,t7e,null),e(Sf,ePr),e(Sf,a7e),e(a7e,oPr),b(c,W$e,u),b(c,Dr,u),g(mL,Dr,null),e(Dr,rPr),e(Dr,Rf),e(Rf,tPr),e(Rf,VU),e(VU,aPr),e(Rf,nPr),e(Rf,XU),e(XU,sPr),e(Rf,lPr),e(Dr,iPr),e(Dr,gL),e(gL,dPr),e(gL,n7e),e(n7e,cPr),e(gL,fPr),e(Dr,mPr),e(Dr,Pt),g(hL,Pt,null),e(Pt,gPr),e(Pt,s7e),e(s7e,hPr),e(Pt,pPr),e(Pt,Bf),e(Bf,_Pr),e(Bf,l7e),e(l7e,uPr),e(Bf,bPr),e(Bf,zU),e(zU,vPr),e(Bf,FPr),e(Pt,TPr),e(Pt,i7e),e(i7e,MPr),e(Pt,EPr),g(pL,Pt,null),e(Dr,CPr),e(Dr,Io),g(_L,Io,null),e(Io,wPr),e(Io,d7e),e(d7e,APr),e(Io,yPr),e(Io,Nn),e(Nn,LPr),e(Nn,c7e),e(c7e,xPr),e(Nn,kPr),e(Nn,f7e),e(f7e,SPr),e(Nn,RPr),e(Nn,m7e),e(m7e,BPr),e(Nn,PPr),e(Io,$Pr),e(Io,$e),e($e,k3),e(k3,g7e),e(g7e,IPr),e(k3,qPr),e(k3,QU),e(QU,NPr),e(k3,jPr),e($e,DPr),e($e,S3),e(S3,h7e),e(h7e,GPr),e(S3,OPr),e(S3,WU),e(WU,VPr),e(S3,XPr),e($e,zPr),e($e,R3),e(R3,p7e),e(p7e,QPr),e(R3,WPr),e(R3,HU),e(HU,HPr),e(R3,UPr),e($e,JPr),e($e,B3),e(B3,_7e),e(_7e,YPr),e(B3,KPr),e(B3,UU),e(UU,ZPr),e(B3,e$r),e($e,o$r),e($e,P3),e(P3,u7e),e(u7e,r$r),e(P3,t$r),e(P3,JU),e(JU,a$r),e(P3,n$r),e($e,s$r),e($e,$3),e($3,b7e),e(b7e,l$r),e($3,i$r),e($3,YU),e(YU,d$r),e($3,c$r),e($e,f$r),e($e,I3),e(I3,v7e),e(v7e,m$r),e(I3,g$r),e(I3,KU),e(KU,h$r),e(I3,p$r),e($e,_$r),e($e,q3),e(q3,F7e),e(F7e,u$r),e(q3,b$r),e(q3,ZU),e(ZU,v$r),e(q3,F$r),e(Io,T$r),e(Io,T7e),e(T7e,M$r),e(Io,E$r),g(uL,Io,null),b(c,H$e,u),b(c,Pf,u),e(Pf,N3),e(N3,M7e),g(bL,M7e,null),e(Pf,C$r),e(Pf,E7e),e(E7e,w$r),b(c,U$e,u),b(c,Gr,u),g(vL,Gr,null),e(Gr,A$r),e(Gr,$f),e($f,y$r),e($f,eJ),e(eJ,L$r),e($f,x$r),e($f,oJ),e(oJ,k$r),e($f,S$r),e(Gr,R$r),e(Gr,FL),e(FL,B$r),e(FL,C7e),e(C7e,P$r),e(FL,$$r),e(Gr,I$r),e(Gr,$t),g(TL,$t,null),e($t,q$r),e($t,w7e),e(w7e,N$r),e($t,j$r),e($t,If),e(If,D$r),e(If,A7e),e(A7e,G$r),e(If,O$r),e(If,rJ),e(rJ,V$r),e(If,X$r),e($t,z$r),e($t,y7e),e(y7e,Q$r),e($t,W$r),g(ML,$t,null),e(Gr,H$r),e(Gr,qo),g(EL,qo,null),e(qo,U$r),e(qo,L7e),e(L7e,J$r),e(qo,Y$r),e(qo,jn),e(jn,K$r),e(jn,x7e),e(x7e,Z$r),e(jn,eIr),e(jn,k7e),e(k7e,oIr),e(jn,rIr),e(jn,S7e),e(S7e,tIr),e(jn,aIr),e(qo,nIr),e(qo,R7e),e(R7e,j3),e(j3,B7e),e(B7e,sIr),e(j3,lIr),e(j3,tJ),e(tJ,iIr),e(j3,dIr),e(qo,cIr),e(qo,P7e),e(P7e,fIr),e(qo,mIr),g(CL,qo,null),b(c,J$e,u),b(c,qf,u),e(qf,D3),e(D3,$7e),g(wL,$7e,null),e(qf,gIr),e(qf,I7e),e(I7e,hIr),b(c,Y$e,u),b(c,Or,u),g(AL,Or,null),e(Or,pIr),e(Or,Nf),e(Nf,_Ir),e(Nf,aJ),e(aJ,uIr),e(Nf,bIr),e(Nf,nJ),e(nJ,vIr),e(Nf,FIr),e(Or,TIr),e(Or,yL),e(yL,MIr),e(yL,q7e),e(q7e,EIr),e(yL,CIr),e(Or,wIr),e(Or,It),g(LL,It,null),e(It,AIr),e(It,N7e),e(N7e,yIr),e(It,LIr),e(It,jf),e(jf,xIr),e(jf,j7e),e(j7e,kIr),e(jf,SIr),e(jf,sJ),e(sJ,RIr),e(jf,BIr),e(It,PIr),e(It,D7e),e(D7e,$Ir),e(It,IIr),g(xL,It,null),e(Or,qIr),e(Or,No),g(kL,No,null),e(No,NIr),e(No,G7e),e(G7e,jIr),e(No,DIr),e(No,Dn),e(Dn,GIr),e(Dn,O7e),e(O7e,OIr),e(Dn,VIr),e(Dn,V7e),e(V7e,XIr),e(Dn,zIr),e(Dn,X7e),e(X7e,QIr),e(Dn,WIr),e(No,HIr),e(No,SL),e(SL,G3),e(G3,z7e),e(z7e,UIr),e(G3,JIr),e(G3,lJ),e(lJ,YIr),e(G3,KIr),e(SL,ZIr),e(SL,O3),e(O3,Q7e),e(Q7e,eqr),e(O3,oqr),e(O3,iJ),e(iJ,rqr),e(O3,tqr),e(No,aqr),e(No,W7e),e(W7e,nqr),e(No,sqr),g(RL,No,null),b(c,K$e,u),b(c,Df,u),e(Df,V3),e(V3,H7e),g(BL,H7e,null),e(Df,lqr),e(Df,U7e),e(U7e,iqr),b(c,Z$e,u),b(c,Vr,u),g(PL,Vr,null),e(Vr,dqr),e(Vr,Gf),e(Gf,cqr),e(Gf,dJ),e(dJ,fqr),e(Gf,mqr),e(Gf,cJ),e(cJ,gqr),e(Gf,hqr),e(Vr,pqr),e(Vr,$L),e($L,_qr),e($L,J7e),e(J7e,uqr),e($L,bqr),e(Vr,vqr),e(Vr,qt),g(IL,qt,null),e(qt,Fqr),e(qt,Y7e),e(Y7e,Tqr),e(qt,Mqr),e(qt,Of),e(Of,Eqr),e(Of,K7e),e(K7e,Cqr),e(Of,wqr),e(Of,fJ),e(fJ,Aqr),e(Of,yqr),e(qt,Lqr),e(qt,Z7e),e(Z7e,xqr),e(qt,kqr),g(qL,qt,null),e(Vr,Sqr),e(Vr,jo),g(NL,jo,null),e(jo,Rqr),e(jo,eMe),e(eMe,Bqr),e(jo,Pqr),e(jo,Gn),e(Gn,$qr),e(Gn,oMe),e(oMe,Iqr),e(Gn,qqr),e(Gn,rMe),e(rMe,Nqr),e(Gn,jqr),e(Gn,tMe),e(tMe,Dqr),e(Gn,Gqr),e(jo,Oqr),e(jo,aMe),e(aMe,X3),e(X3,nMe),e(nMe,Vqr),e(X3,Xqr),e(X3,mJ),e(mJ,zqr),e(X3,Qqr),e(jo,Wqr),e(jo,sMe),e(sMe,Hqr),e(jo,Uqr),g(jL,jo,null),eIe=!0},p(c,[u]){const DL={};u&2&&(DL.$$scope={dirty:u,ctx:c}),Jf.$set(DL);const lMe={};u&2&&(lMe.$$scope={dirty:u,ctx:c}),Hh.$set(lMe);const iMe={};u&2&&(iMe.$$scope={dirty:u,ctx:c}),fp.$set(iMe)},i(c){eIe||(h(_e.$$.fragment,c),h(Da.$$.fragment,c),h(UC.$$.fragment,c),h(JC.$$.fragment,c),h(Jf.$$.fragment,c),h(YC.$$.fragment,c),h(KC.$$.fragment,c),h(o6.$$.fragment,c),h(r6.$$.fragment,c),h(t6.$$.fragment,c),h(a6.$$.fragment,c),h(n6.$$.fragment,c),h(i6.$$.fragment,c),h(d6.$$.fragment,c),h(c6.$$.fragment,c),h(f6.$$.fragment,c),h(m6.$$.fragment,c),h(p6.$$.fragment,c),h(Hh.$$.fragment,c),h(_6.$$.fragment,c),h(u6.$$.fragment,c),h(b6.$$.fragment,c),h(v6.$$.fragment,c),h(M6.$$.fragment,c),h(fp.$$.fragment,c),h(E6.$$.fragment,c),h(C6.$$.fragment,c),h(w6.$$.fragment,c),h(A6.$$.fragment,c),h(L6.$$.fragment,c),h(x6.$$.fragment,c),h(k6.$$.fragment,c),h(S6.$$.fragment,c),h(R6.$$.fragment,c),h(B6.$$.fragment,c),h($6.$$.fragment,c),h(I6.$$.fragment,c),h(q6.$$.fragment,c),h(N6.$$.fragment,c),h(j6.$$.fragment,c),h(D6.$$.fragment,c),h(O6.$$.fragment,c),h(V6.$$.fragment,c),h(X6.$$.fragment,c),h(z6.$$.fragment,c),h(Q6.$$.fragment,c),h(W6.$$.fragment,c),h(U6.$$.fragment,c),h(J6.$$.fragment,c),h(Y6.$$.fragment,c),h(K6.$$.fragment,c),h(Z6.$$.fragment,c),h(ew.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Fw.$$.fragment,c),h(Tw.$$.fragment,c),h(Ew.$$.fragment,c),h(Cw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(yw.$$.fragment,c),h(Lw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(qw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(FA.$$.fragment,c),h(TA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(RA.$$.fragment,c),h(BA.$$.fragment,c),h(PA.$$.fragment,c),h(IA.$$.fragment,c),h(qA.$$.fragment,c),h(NA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(v0.$$.fragment,c),h(T0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(C0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(L0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(S0.$$.fragment,c),h(R0.$$.fragment,c),h(B0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(q0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(X0.$$.fragment,c),h(z0.$$.fragment,c),h(Q0.$$.fragment,c),h(W0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(Z0.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Fy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Cy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(Sy.$$.fragment,c),h(Ry.$$.fragment,c),h(By.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(e8.$$.fragment,c),h(o8.$$.fragment,c),h(r8.$$.fragment,c),h(t8.$$.fragment,c),h(n8.$$.fragment,c),h(s8.$$.fragment,c),h(l8.$$.fragment,c),h(i8.$$.fragment,c),h(d8.$$.fragment,c),h(c8.$$.fragment,c),h(m8.$$.fragment,c),h(g8.$$.fragment,c),h(h8.$$.fragment,c),h(p8.$$.fragment,c),h(_8.$$.fragment,c),h(u8.$$.fragment,c),h(v8.$$.fragment,c),h(F8.$$.fragment,c),h(T8.$$.fragment,c),h(M8.$$.fragment,c),h(E8.$$.fragment,c),h(C8.$$.fragment,c),h(A8.$$.fragment,c),h(y8.$$.fragment,c),h(L8.$$.fragment,c),h(x8.$$.fragment,c),h(k8.$$.fragment,c),h(S8.$$.fragment,c),h(B8.$$.fragment,c),h(P8.$$.fragment,c),h($8.$$.fragment,c),h(I8.$$.fragment,c),h(q8.$$.fragment,c),h(N8.$$.fragment,c),h(D8.$$.fragment,c),h(G8.$$.fragment,c),h(O8.$$.fragment,c),h(V8.$$.fragment,c),h(X8.$$.fragment,c),h(z8.$$.fragment,c),h(W8.$$.fragment,c),h(H8.$$.fragment,c),h(U8.$$.fragment,c),h(J8.$$.fragment,c),h(Y8.$$.fragment,c),h(K8.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(CL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(LL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(RL.$$.fragment,c),h(BL.$$.fragment,c),h(PL.$$.fragment,c),h(IL.$$.fragment,c),h(qL.$$.fragment,c),h(NL.$$.fragment,c),h(jL.$$.fragment,c),eIe=!0)},o(c){p(_e.$$.fragment,c),p(Da.$$.fragment,c),p(UC.$$.fragment,c),p(JC.$$.fragment,c),p(Jf.$$.fragment,c),p(YC.$$.fragment,c),p(KC.$$.fragment,c),p(o6.$$.fragment,c),p(r6.$$.fragment,c),p(t6.$$.fragment,c),p(a6.$$.fragment,c),p(n6.$$.fragment,c),p(i6.$$.fragment,c),p(d6.$$.fragment,c),p(c6.$$.fragment,c),p(f6.$$.fragment,c),p(m6.$$.fragment,c),p(p6.$$.fragment,c),p(Hh.$$.fragment,c),p(_6.$$.fragment,c),p(u6.$$.fragment,c),p(b6.$$.fragment,c),p(v6.$$.fragment,c),p(M6.$$.fragment,c),p(fp.$$.fragment,c),p(E6.$$.fragment,c),p(C6.$$.fragment,c),p(w6.$$.fragment,c),p(A6.$$.fragment,c),p(L6.$$.fragment,c),p(x6.$$.fragment,c),p(k6.$$.fragment,c),p(S6.$$.fragment,c),p(R6.$$.fragment,c),p(B6.$$.fragment,c),p($6.$$.fragment,c),p(I6.$$.fragment,c),p(q6.$$.fragment,c),p(N6.$$.fragment,c),p(j6.$$.fragment,c),p(D6.$$.fragment,c),p(O6.$$.fragment,c),p(V6.$$.fragment,c),p(X6.$$.fragment,c),p(z6.$$.fragment,c),p(Q6.$$.fragment,c),p(W6.$$.fragment,c),p(U6.$$.fragment,c),p(J6.$$.fragment,c),p(Y6.$$.fragment,c),p(K6.$$.fragment,c),p(Z6.$$.fragment,c),p(ew.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Fw.$$.fragment,c),p(Tw.$$.fragment,c),p(Ew.$$.fragment,c),p(Cw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(yw.$$.fragment,c),p(Lw.$$.fragment,c),p(kw.$$.fragment,c),p(Sw.$$.fragment,c),p(Rw.$$.fragment,c),p(Bw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(qw.$$.fragment,c),p(Nw.$$.fragment,c),p(jw.$$.fragment,c),p(Dw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Xw.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Ww.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(bA.$$.fragment,c),p(vA.$$.fragment,c),p(FA.$$.fragment,c),p(TA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(yA.$$.fragment,c),p(LA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(RA.$$.fragment,c),p(BA.$$.fragment,c),p(PA.$$.fragment,c),p(IA.$$.fragment,c),p(qA.$$.fragment,c),p(NA.$$.fragment,c),p(DA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(VA.$$.fragment,c),p(XA.$$.fragment,c),p(zA.$$.fragment,c),p(WA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(e0.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(h0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(v0.$$.fragment,c),p(T0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(C0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(L0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(S0.$$.fragment,c),p(R0.$$.fragment,c),p(B0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(q0.$$.fragment,c),p(N0.$$.fragment,c),p(j0.$$.fragment,c),p(D0.$$.fragment,c),p(O0.$$.fragment,c),p(V0.$$.fragment,c),p(X0.$$.fragment,c),p(z0.$$.fragment,c),p(Q0.$$.fragment,c),p(W0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(Z0.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(vy.$$.fragment,c),p(Fy.$$.fragment,c),p(Ty.$$.fragment,c),p(My.$$.fragment,c),p(Cy.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(yy.$$.fragment,c),p(Ly.$$.fragment,c),p(xy.$$.fragment,c),p(Sy.$$.fragment,c),p(Ry.$$.fragment,c),p(By.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(Dy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Vy.$$.fragment,c),p(zy.$$.fragment,c),p(Qy.$$.fragment,c),p(Wy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(e8.$$.fragment,c),p(o8.$$.fragment,c),p(r8.$$.fragment,c),p(t8.$$.fragment,c),p(n8.$$.fragment,c),p(s8.$$.fragment,c),p(l8.$$.fragment,c),p(i8.$$.fragment,c),p(d8.$$.fragment,c),p(c8.$$.fragment,c),p(m8.$$.fragment,c),p(g8.$$.fragment,c),p(h8.$$.fragment,c),p(p8.$$.fragment,c),p(_8.$$.fragment,c),p(u8.$$.fragment,c),p(v8.$$.fragment,c),p(F8.$$.fragment,c),p(T8.$$.fragment,c),p(M8.$$.fragment,c),p(E8.$$.fragment,c),p(C8.$$.fragment,c),p(A8.$$.fragment,c),p(y8.$$.fragment,c),p(L8.$$.fragment,c),p(x8.$$.fragment,c),p(k8.$$.fragment,c),p(S8.$$.fragment,c),p(B8.$$.fragment,c),p(P8.$$.fragment,c),p($8.$$.fragment,c),p(I8.$$.fragment,c),p(q8.$$.fragment,c),p(N8.$$.fragment,c),p(D8.$$.fragment,c),p(G8.$$.fragment,c),p(O8.$$.fragment,c),p(V8.$$.fragment,c),p(X8.$$.fragment,c),p(z8.$$.fragment,c),p(W8.$$.fragment,c),p(H8.$$.fragment,c),p(U8.$$.fragment,c),p(J8.$$.fragment,c),p(Y8.$$.fragment,c),p(K8.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(CL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(LL.$$.fragment,c),p(xL.$$.fragment,c),p(kL.$$.fragment,c),p(RL.$$.fragment,c),p(BL.$$.fragment,c),p(PL.$$.fragment,c),p(IL.$$.fragment,c),p(qL.$$.fragment,c),p(NL.$$.fragment,c),p(jL.$$.fragment,c),eIe=!1},d(c){t(oe),c&&t(co),c&&t(me),_(_e),c&&t(zf),c&&t(fa),c&&t(Se),c&&t(fo),c&&t(Wf),_(Da,c),c&&t(mo),c&&t(ve),c&&t(zo),c&&t(Ga),c&&t(ZBe),c&&t(Ki),_(UC),c&&t(ePe),c&&t(Qn),c&&t(oPe),_(JC,c),c&&t(rPe),c&&t(J9),c&&t(tPe),_(Jf,c),c&&t(aPe),c&&t(Zi),_(YC),c&&t(nPe),c&&t(Qo),_(KC),_(o6),_(r6),_(t6),c&&t(sPe),c&&t(od),_(a6),c&&t(lPe),c&&t(Wo),_(n6),_(i6),_(d6),_(c6),c&&t(iPe),c&&t(rd),_(f6),c&&t(dPe),c&&t(Ho),_(m6),_(p6),_(Hh),_(_6),_(u6),c&&t(cPe),c&&t(td),_(b6),c&&t(fPe),c&&t(Uo),_(v6),_(M6),_(fp),_(E6),_(C6),c&&t(mPe),c&&t(nd),_(w6),c&&t(gPe),c&&t(Jo),_(A6),_(L6),_(x6),_(k6),_(S6),c&&t(hPe),c&&t(id),_(R6),c&&t(pPe),c&&t(Yo),_(B6),_($6),_(I6),_(q6),_(N6),c&&t(_Pe),c&&t(fd),_(j6),c&&t(uPe),c&&t(Ko),_(D6),_(O6),_(V6),_(X6),_(z6),c&&t(bPe),c&&t(hd),_(Q6),c&&t(vPe),c&&t(Zo),_(W6),_(U6),_(J6),_(Y6),_(K6),c&&t(FPe),c&&t(ud),_(Z6),c&&t(TPe),c&&t(er),_(ew),_(rw),_(tw),_(aw),_(nw),c&&t(MPe),c&&t(Fd),_(sw),c&&t(EPe),c&&t(or),_(lw),_(dw),_(cw),_(fw),_(mw),c&&t(CPe),c&&t(Ed),_(gw),c&&t(wPe),c&&t(rr),_(hw),_(_w),_(uw),_(bw),_(vw),c&&t(APe),c&&t(Ad),_(Fw),c&&t(yPe),c&&t(tr),_(Tw),_(Ew),_(Cw),_(ww),_(Aw),c&&t(LPe),c&&t(xd),_(yw),c&&t(xPe),c&&t(ar),_(Lw),_(kw),_(Sw),_(Rw),_(Bw),c&&t(kPe),c&&t(Rd),_(Pw),c&&t(SPe),c&&t(nr),_($w),_(qw),_(Nw),_(jw),_(Dw),c&&t(RPe),c&&t($d),_(Gw),c&&t(BPe),c&&t(sr),_(Ow),_(Xw),_(zw),_(Qw),_(Ww),c&&t(PPe),c&&t(Nd),_(Hw),c&&t($Pe),c&&t(lr),_(Uw),_(Yw),_(Kw),_(Zw),_(eA),c&&t(IPe),c&&t(Gd),_(oA),c&&t(qPe),c&&t(ir),_(rA),_(aA),_(nA),_(sA),_(lA),c&&t(NPe),c&&t(Xd),_(iA),c&&t(jPe),c&&t(dr),_(dA),_(fA),_(mA),_(gA),_(hA),c&&t(DPe),c&&t(Wd),_(pA),c&&t(GPe),c&&t(cr),_(_A),_(bA),_(vA),_(FA),_(TA),c&&t(OPe),c&&t(Jd),_(MA),c&&t(VPe),c&&t(fr),_(EA),_(wA),_(AA),_(yA),_(LA),c&&t(XPe),c&&t(Zd),_(xA),c&&t(zPe),c&&t(mr),_(kA),_(RA),_(BA),_(PA),_(IA),c&&t(QPe),c&&t(rc),_(qA),c&&t(WPe),c&&t(gr),_(NA),_(DA),_(GA),_(OA),_(VA),c&&t(HPe),c&&t(nc),_(XA),c&&t(UPe),c&&t(hr),_(zA),_(WA),_(HA),_(UA),_(JA),c&&t(JPe),c&&t(dc),_(YA),c&&t(YPe),c&&t(pr),_(KA),_(e0),_(o0),_(r0),_(t0),c&&t(KPe),c&&t(mc),_(a0),c&&t(ZPe),c&&t(_r),_(n0),_(l0),_(i0),_(d0),_(c0),c&&t(e$e),c&&t(pc),_(f0),c&&t(o$e),c&&t(ur),_(m0),_(h0),_(p0),_(_0),_(u0),c&&t(r$e),c&&t(bc),_(b0),c&&t(t$e),c&&t(br),_(v0),_(T0),_(M0),_(E0),_(C0),c&&t(a$e),c&&t(Tc),_(w0),c&&t(n$e),c&&t(vr),_(A0),_(L0),_(x0),_(k0),_(S0),c&&t(s$e),c&&t(Cc),_(R0),c&&t(l$e),c&&t(Fr),_(B0),_($0),_(I0),_(q0),_(N0),c&&t(i$e),c&&t(yc),_(j0),c&&t(d$e),c&&t(Tr),_(D0),_(O0),_(V0),_(X0),_(z0),c&&t(c$e),c&&t(kc),_(Q0),c&&t(f$e),c&&t(Mr),_(W0),_(U0),_(J0),_(Y0),_(Z0),c&&t(m$e),c&&t(Bc),_(ey),c&&t(g$e),c&&t(Er),_(oy),_(ty),_(ay),_(ny),_(sy),c&&t(h$e),c&&t(Ic),_(ly),c&&t(p$e),c&&t(Cr),_(iy),_(cy),_(fy),_(my),_(gy),c&&t(_$e),c&&t(jc),_(hy),c&&t(u$e),c&&t(wr),_(py),_(uy),_(by),_(vy),_(Fy),c&&t(b$e),c&&t(Oc),_(Ty),c&&t(v$e),c&&t(Ar),_(My),_(Cy),_(wy),_(Ay),_(yy),c&&t(F$e),c&&t(zc),_(Ly),c&&t(T$e),c&&t(yr),_(xy),_(Sy),_(Ry),_(By),_(Py),c&&t(M$e),c&&t(Hc),_($y),c&&t(E$e),c&&t(Lr),_(Iy),_(Ny),_(jy),_(Dy),_(Gy),c&&t(C$e),c&&t(Yc),_(Oy),c&&t(w$e),c&&t(xr),_(Vy),_(zy),_(Qy),_(Wy),_(Hy),c&&t(A$e),c&&t(ef),_(Uy),c&&t(y$e),c&&t(kr),_(Jy),_(Ky),_(Zy),_(e8),_(o8),c&&t(L$e),c&&t(tf),_(r8),c&&t(x$e),c&&t(Sr),_(t8),_(n8),_(s8),_(l8),_(i8),c&&t(k$e),c&&t(sf),_(d8),c&&t(S$e),c&&t(Rr),_(c8),_(m8),_(g8),_(h8),_(p8),c&&t(R$e),c&&t(cf),_(_8),c&&t(B$e),c&&t(Br),_(u8),_(v8),_(F8),_(T8),_(M8),c&&t(P$e),c&&t(gf),_(E8),c&&t($$e),c&&t(Pr),_(C8),_(A8),_(y8),_(L8),_(x8),c&&t(I$e),c&&t(_f),_(k8),c&&t(q$e),c&&t($r),_(S8),_(B8),_(P8),_($8),_(I8),c&&t(N$e),c&&t(vf),_(q8),c&&t(j$e),c&&t(Ir),_(N8),_(D8),_(G8),_(O8),_(V8),c&&t(D$e),c&&t(Mf),_(X8),c&&t(G$e),c&&t(qr),_(z8),_(W8),_(H8),_(U8),_(J8),c&&t(O$e),c&&t(wf),_(Y8),c&&t(V$e),c&&t(Nr),_(K8),_(eL),_(oL),_(rL),_(tL),c&&t(X$e),c&&t(Lf),_(aL),c&&t(z$e),c&&t(jr),_(nL),_(lL),_(iL),_(dL),_(cL),c&&t(Q$e),c&&t(Sf),_(fL),c&&t(W$e),c&&t(Dr),_(mL),_(hL),_(pL),_(_L),_(uL),c&&t(H$e),c&&t(Pf),_(bL),c&&t(U$e),c&&t(Gr),_(vL),_(TL),_(ML),_(EL),_(CL),c&&t(J$e),c&&t(qf),_(wL),c&&t(Y$e),c&&t(Or),_(AL),_(LL),_(xL),_(kL),_(RL),c&&t(K$e),c&&t(Df),_(BL),c&&t(Z$e),c&&t(Vr),_(PL),_(IL),_(qL),_(NL),_(jL)}}}const Ryt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Byt(Xf){return yyt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class jyt extends Eyt{constructor(oe){super();Cyt(this,oe,Byt,Syt,wyt,{})}}export{jyt as default,Ryt as metadata};
